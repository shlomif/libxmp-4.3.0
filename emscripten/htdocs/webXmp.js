// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 26848;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([24,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,65,77,79,83,32,77,117,115,105,99,32,66,97,110,107,0,88,77,80,95,73,78,83,84,82,85,77,69,78,84,95,80,65,84,72,0,0,0,0,0,82,73,70,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,20,0,0,0,21,0,0,0,21,0,0,0,22,0,0,0,22,0,0,0,23,0,0,0,23,0,0,0,24,0,0,0,24,0,0,0,25,0,0,0,25,0,0,0,26,0,0,0,26,0,0,0,27,0,0,0,27,0,0,0,28,0,0,0,28,0,0,0,29,0,0,0,29,0,0,0,30,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,64,0,0,0,65,0,0,0,67,0,0,0,69,0,0,0,71,0,0,0,73,0,0,0,75,0,0,0,77,0,0,0,79,0,0,0,81,0,0,0,83,0,0,0,85,0,0,0,87,0,0,0,89,0,0,0,91,0,0,0,93,0,0,0,96,0,0,0,98,0,0,0,100,0,0,0,102,0,0,0,104,0,0,0,106,0,0,0,108,0,0,0,110,0,0,0,112,0,0,0,114,0,0,0,116,0,0,0,118,0,0,0,120,0,0,0,122,0,0,0,124,0,0,0,126,0,0,0,129,0,0,0,131,0,0,0,135,0,0,0,139,0,0,0,143,0,0,0,147,0,0,0,151,0,0,0,155,0,0,0,160,0,0,0,164,0,0,0,168,0,0,0,172,0,0,0,176,0,0,0,180,0,0,0,184,0,0,0,188,0,0,0,193,0,0,0,197,0,0,0,201,0,0,0,205,0,0,0,209,0,0,0,213,0,0,0,217,0,0,0,221,0,0,0,226,0,0,0,230,0,0,0,234,0,0,0,238,0,0,0,242,0,0,0,246,0,0,0,250,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,65,68,72,77,80,84,91,95,98,103,109,114,120,126,127,224,4,0,0,3,0,0,0,4,0,0,0,0,0,0,0,70,97,115,116,32,84,114,97,99,107,101,114,32,73,73,0,37,45,50,48,46,50,48,115,0,0,0,0,0,0,0,0,77,69,68,50,88,77,32,98,121,32,74,46,80,121,110,110,111,110,101,0,0,0,0,0,70,97,115,116,84,114,97,99,107,101,114,32,118,32,50,46,48,48,0,0,0,0,0,0,111,108,100,32,77,111,100,80,108,117,103,32,84,114,97,99,107,101,114,0,0,0,0,0,77,105,108,107,121,84,114,97,99,107,101,114,0,0,0,0,37,115,32,88,77,32,37,100,46,37,48,50,100,0,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,32,0,0,0,0,0,0,0,232,28,0,0,0,0,0,0,0,0,0,0,4,0,0,0,112,6,0,0,1,0,0,0,0,0,0,0,4,0,0,0,120,6,0,0,1,0,0,0,1,0,0,0,4,0,0,0,128,6,0,0,1,0,0,0,1,0,0,0,4,0,0,0,136,6,0,0,0,0,0,0,3,0,0,0,6,0,0,0,144,6,0,0,0,0,0,0,3,0,0,0,8,0,0,0,152,6,0,0,1,0,0,0,5,0,0,0,6,0,0,0,160,6,0,0,1,0,0,0,5,0,0,0,8,0,0,0,168,6,0,0,1,0,0,0,6,0,0,0,4,0,0,0,176,6,0,0,1,0,0,0,7,0,0,0,4,0,0,0,184,6,0,0,1,0,0,0,7,0,0,0,6,0,0,0,192,6,0,0,1,0,0,0,7,0,0,0,8,0,0,0,200,6,0,0,1,0,0,0,99,0,0,0,4,0,0,0,208,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,6,0,0,5,0,0,0,6,0,0,0,0,0,0,0,77,33,75,33,0,0,0,0,77,38,75,33,0,0,0,0,78,46,84,46,0,0,0,0,54,67,72,78,0,0,0,0,56,67,72,78,0,0,0,0,67,68,54,49,0,0,0,0,67,68,56,49,0,0,0,0,84,68,90,52,0,0,0,0,70,65,48,52,0,0,0,0,70,65,48,54,0,0,0,0,70,65,48,56,0,0,0,0,78,83,77,83,0,0,0,0,0,0,0,0,0,0,0,0,65,109,105,103,97,32,80,114,111,116,114,97,99,107,101,114,47,67,111,109,112,97,116,105,98,108,101,0,0,0,0,0,67,72,0,0,0,0,0,0,67,72,78,0,0,0,0,0,70,76,69,88,0,0,0,0,80,114,111,116,114,97,99,107,101,114,0,0,0,0,0,0,78,111,105,115,101,116,114,97,99,107,101,114,0,0,0,0,70,97,115,116,32,84,114,97,99,107,101,114,0,0,0,0,84,97,107,101,32,84,114,97,99,107,101,114,0,0,0,0,79,99,116,97,108,121,115,101,114,0,0,0,0,0,0,0,70,108,101,120,116,114,97,120,0,0,0,0,0,0,0,0,77,111,100,39,115,32,71,114,97,118,101,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,0,0,67,111,110,118,101,114,116,101,100,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,99,108,111,110,101,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,116,114,97,99,107,101,114,0,37,115,32,37,115,0,0,0,65,68,80,67,77,0,0,0,232,7,0,0,7,0,0,0,8,0,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,51,0,0,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,37,100,46,37,48,50,120,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,37,115,32,83,51,77,0,0,255,163,11,13,10,2,1,3,4,29,180,6,5,255,255,9,255,27,7,254,171,172,16,255,255,255,255,0,0,0,0,0,128,8,0,0,9,0,0,0,10,0,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,50,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,32,83,84,77,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,100,32,83,84,77,0,0,0,0,0,0,255,15,11,13,10,2,1,3,4,29,0,0,0,0,0,0,232,8,0,0,11,0,0,0,12,0,0,0,0,0,0,0,67,111,109,112,111,115,101,114,32,54,54,57,0,0,0,0,105,102,0,0,0,0,0,0,85,78,73,83,32,54,54,57,0,0,0,0,0,0,0,0,121,120,122,166,123,126,0,0,40,9,0,0,13,0,0,0,14,0,0,0,0,0,0,0,70,97,114,97,110,100,111,108,101,32,67,111,109,112,111,115,101,114,0,0,0,0,0,0,70,97,114,97,110,100,111,108,101,32,67,111,109,112,111,115,101,114,32,37,100,46,37,100,0,0,0,0,0,0,0,0,255,249,248,122,251,254,4,253,252,123,255,255,250,255,255,15,128,9,0,0,15,0,0,0,16,0,0,0,0,0,0,0,77,117,108,116,105,116,114,97,99,107,101,114,0,0,0,0,77,117,108,116,105,84,114,97,99,107,101,114,32,37,100,46,37,48,50,100,32,77,84,77,0,0,0,0,0,0,0,0,77,84,77,0,0,0,0,0,200,9,0,0,17,0,0,0,18,0,0,0,0,0,0,0,80,111,108,121,32,84,114,97,99,107,101,114,0,0,0,0,80,111,108,121,32,84,114,97,99,107,101,114,32,80,84,77,32,37,100,46,37,48,50,120,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,15,0,0,0,17,0,0,0,18,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,58,0,0,0,59,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,64,0,0,0,64,0,0,0,0,0,0,0,16,11,0,0,19,0,0,0,20,0,0,0,0,0,0,0,79,107,116,97,108,121,122,101,114,0,0,0,0,0,0,0,67,77,79,68,0,0,0,0,83,80,69,69,0,0,0,0,83,76,69,78,0,0,0,0,83,66,79,68,0,0,0,0,255,0,0,0,1,0,0,0,2,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,156,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,157,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,117,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,11,0,0,0,255,0,0,0,255,0,0,0,15,0,0,0,255,0,0,0,118,0,0,0,12,0,0,0,79,75,84,65,83,79,78,71,0,0,0,0,0,0,0,0,224,11,0,0,21,0,0,0,22,0,0,0,0,0,0,0,65,109,117,115,105,99,32,65,100,108,105,98,32,84,114,97,99,107,101,114,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,60,111,0,0,0,0,0,0,82,111,82,0,0,0,0,0,72,12,0,0,23,0,0,0,24,0,0,0,0,0,0,0,82,101,97,108,105,116,121,32,65,100,108,105,98,32,84,114,97,99,107,101,114,0,0,0,82,65,68,32,37,100,46,37,100,0,0,0,0,0,0,0,82,65,68,32,98,121,32,82,69,65,76,105,84,89,33,33,0,0,0,0,0,0,0,0,152,12,0,0,25,0,0,0,26,0,0,0,0,0,0,0,85,108,116,114,97,32,84,114,97,99,107,101,114,0,0,0,216,12,0,0,224,12,0,0,232,12,0,0,240,12,0,0,85,108,116,114,97,32,84,114,97,99,107,101,114,32,37,115,32,85,76,84,32,86,37,48,52,100,0,0,0,0,0,0,60,32,49,46,52,0,0,0,49,46,52,0,0,0,0,0,49,46,53,0,0,0,0,0,49,46,54,0,0,0,0,0,77,65,83,95,85,84,114,97,99,107,95,86,48,48,48,0,24,13,0,0,27,0,0,0,28,0,0,0,0,0,0,0,68,105,103,105,116,114,97,107,107,101,114,0,0,0,0,0,73,78,0,0,0,0,0,0,84,82,0,0,0,0,0,0,83,65,0,0,0,0,0,0,86,69,0,0,0,0,0,0,80,69,0,0,0,0,0,0,70,69,0,0,0,0,0,0,73,73,0,0,0,0,0,0,80,65,0,0,0,0,0,0,73,83,0,0,0,0,0,0,68,105,103,105,116,114,97,107,107,101,114,32,77,68,76,32,37,100,46,37,100,0,0,0,152,13,0,0,29,0,0,0,30,0,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,117,110,109,111,51,0,0,0,79,112,101,110,83,80,67,32,99,111,110,118,101,114,115,105,111,110,0,0,0,0,0,0,77,111,100,80,108,117,103,32,84,114,97,99,107,101,114,32,49,46,49,54,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,51,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,53,0,0,67,72,66,73,0,0,0,0,67,104,105,98,105,32,84,114,97,99,107,101,114,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,79,112,101,110,77,80,84,32,49,46,49,55,43,0,0,0,109,117,110,99,104,46,112,121,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,40,37,48,52,120,41,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,37,48,52,100,45,37,48,50,100,45,37,48,50,100,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,48,46,37,120,0,0,0,0,0,79,112,101,110,77,80,84,32,37,100,46,37,48,50,120,0,79,77,80,84,0,0,0,0,32,40,99,111,109,112,97,116,46,41,0,0,0,0,0,0,66,101,82,111,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,0,0,0,37,115,32,73,84,32,37,100,46,37,48,50,120,0,0,0,255,163,11,13,10,2,1,3,4,29,180,6,5,128,129,9,137,27,7,254,135,172,16,17,8,138,132,0,0,0,0,0,56,15,0,0,31,0,0,0,32,0,0,0,0,0,0,0,83,84,77,73,75,32,48,46,50,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,32,83,84,88,0,0,0,0,83,84,77,50,83,84,88,32,49,46,37,100,0,0,0,0,255,15,11,13,10,2,1,3,4,29,0,0,0,0,0,0,33,83,99,114,101,97,109,33,0,0,0,0,0,0,0,0,83,67,82,77,0,0,0,0,176,15,0,0,33,0,0,0,34,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,51,0,0,0,0,37,45,54,46,54,115,32,73,70,70,77,79,68,76,0,0,67,77,78,84,0,0,0,0,80,84,68,84,0,0,0,0,240,15,0,0,35,0,0,0,36,0,0,0,0,0,0,0,83,111,117,110,100,70,88,32,118,49,46,51,47,50,46,48,0,0,0,0,0,0,0,0,83,111,117,110,100,70,88,32,49,46,51,0,0,0,0,0,83,111,117,110,100,70,88,32,50,46,48,0,0,0,0,0,56,16,0,0,37,0,0,0,38,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,0,0,0,0,0,37,115,37,115,46,78,84,0,37,115,37,115,46,110,116,0,37,115,37,115,46,65,83,0,37,115,37,115,46,97,115,0,83,84,49,46,50,32,77,111,100,117,108,101,73,78,70,79,0,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,49,46,50,0,83,84,49,46,51,32,77,111,100,117,108,101,73,78,70,79,0,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,49,46,51,0,65,117,100,105,111,83,99,117,108,112,116,117,114,101,49,48,0,0,0,0,0,0,0,0,65,117,100,105,111,83,99,117,108,112,116,117,114,101,32,49,46,48,0,0,0,0,0,0,37,115,32,37,52,46,52,115,0,0,0,0,0,0,0,0,0,25,49,71,90,106,117,125,127,125,117,106,90,71,49,25,0,231,207,185,166,150,139,131,129,131,139,150,166,185,207,231,128,136,144,152,160,168,176,184,192,200,208,216,224,232,240,248,0,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,65,77,0,0,0,0,0,0,70,76,84,0,0,0,0,0,69,88,79,0,0,0,0,0,128,17,0,0,39,0,0,0,40,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,0,85,108,116,105,109,97,116,101,32,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,73,88,0,68,46,79,46,67,32,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,48,0,0,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,0,88,3,0,0,40,3,0,0,250,2,0,0,208,2,0,0,166,2,0,0,128,2,0,0,92,2,0,0,58,2,0,0,26,2,0,0,252,1,0,0,224,1,0,0,197,1,0,0,172,1,0,0,148,1,0,0,125,1,0,0,104,1,0,0,83,1,0,0,64,1,0,0,46,1,0,0,29,1,0,0,13,1,0,0,254,0,0,0,240,0,0,0,226,0,0,0,214,0,0,0,202,0,0,0,190,0,0,0,180,0,0,0,170,0,0,0,160,0,0,0,151,0,0,0,143,0,0,0,135,0,0,0,127,0,0,0,120,0,0,0,113,0,0,0,255,255,255,255,0,0,0,0,136,18,0,0,41,0,0,0,42,0,0,0,0,0,0,0,81,117,97,100,114,97,32,67,111,109,112,111,115,101,114,0,69,77,73,67,0,0,0,0,56,83,77,80,0,0,0,0,81,117,97,100,114,97,32,67,111,109,112,111,115,101,114,32,69,77,79,68,32,118,37,100,0,0,0,0,0,0,0,0,216,18,0,0,43,0,0,0,44,0,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,118,49,46,48,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,49,46,48,32,73,77,70,0,0,0,255,163,171,3,5,4,6,172,7,180,8,25,12,10,165,166,157,156,1,2,254,253,132,133,9,255,20,27,29,11,13,16,17,14,169,170,0,0,0,0,64,19,0,0,45,0,0,0,46,0,0,0,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,32,37,45,52,46,52,115,0,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,32,109,111,100,117,108,101,0,0,0,0,0,144,19,0,0,47,0,0,0,48,0,0,0,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,0,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,71,79,76,68,0,70,117,110,107,116,114,97,99,107,101,114,32,68,79,83,51,50,0,0,0,0,0,0,0,216,19,0,0,49,0,0,0,50,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,54,47,73,99,101,32,84,114,97,99,107,101,114,0,0,0,0,73,99,101,32,84,114,97,99,107,101,114,32,73,84,49,48,0,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,54,32,77,84,78,0,0,0,0,56,20,0,0,51,0,0,0,52,0,0,0,0,0,0,0,72,83,67,45,84,114,97,99,107,101,114,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,240,25,0,0,53,0,0,0,54,0,0,0,0,0,0,0,37,115,32,76,73,81,32,37,100,46,37,48,50,100,0,0,104,105,111,95,116,101,108,108,32,40,102,41,32,45,32,99,111,117,110,116,32,61,61,32,108,112,46,115,105,122,101,0,46,46,47,115,114,99,47,108,111,97,100,101,114,115,47,108,105,113,95,108,111,97,100,46,99,0,0,0,0,0,0,0,108,105,113,95,108,111,97,100,0,0,0,0,0,0,0,0,101,118,101,110,116,45,62,102,120,116,32,60,61,32,50,54,0,0,0,0,0,0,0,0,101,118,101,110,116,45,62,110,111,116,101,32,60,61,32,49,49,57,32,124,124,32,101,118,101,110,116,45,62,110,111,116,101,32,61,61,32,88,77,80,95,75,69,89,95,79,70,70,0,0,0,0,0,0,0,0,101,118,101,110,116,45,62,105,110,115,32,60,61,32,49,48,48,0,0,0,0,0,0,0,101,118,101,110,116,45,62,118,111,108,32,60,61,32,54,53,0,0,0,0,0,0,0,0,98,91,48,93,32,61,61,32,39,76,39,32,38,38,32,98,91,49,93,32,61,61,32,39,68,39,32,38,38,32,98,91,50,93,32,61,61,32,39,83,39,32,38,38,32,98,91,51,93,32,61,61,32,39,83,39,0,0,0,0,0,0,0,0,0,171,13,2,255,172,255,255,255,11,255,10,14,3,9,255,255,255,163,7,1,4,255,5,6,0,0,0,0,0,0,0,101,118,101,110,116,45,62,110,111,116,101,32,60,61,32,49,48,55,32,124,124,32,101,118,101,110,116,45,62,110,111,116,101,32,61,61,32,88,77,80,95,75,69,89,95,79,70,70,0,0,0,0,0,0,0,0,100,101,99,111,100,101,95,101,118,101,110,116,0,0,0,0,101,118,101,110,116,45,62,118,111,108,32,60,61,32,54,52,0,0,0,0,0,0,0,0,76,105,113,117,105,100,32,77,111,100,117,108,101,58,0,0,64,22,0,0,55,0,0,0,56,0,0,0,0,0,0,0,73,109,97,103,101,115,32,77,117,115,105,99,32,83,121,115,116,101,109,0,0,0,0,0,104,22,0,0,57,0,0,0,58,0,0,0,0,0,0,0,69,112,105,99,32,77,101,103,97,71,97,109,101,115,32,77,65,83,73,0,0,0,0,0,84,73,84,76,0,0,0,0,83,68,70,84,0,0,0,0,68,83,77,80,0,0,0,0,80,66,79,68,0,0,0,0,83,105,110,97,114,105,97,32,80,83,77,0,0,0,0,0,69,112,105,99,32,77,101,103,97,71,97,109,101,115,32,77,65,83,73,32,80,83,77,0,99,104,97,110,110,101,108,32,37,100,58,32,37,48,50,120,32,37,48,50,120,10,0,0,240,22,0,0,59,0,0,0,60,0,0,0,0,0,0,0,68,83,77,73,32,65,100,118,97,110,99,101,100,32,77,111,100,117,108,101,32,70,111,114,109,97,116,0,0,0,0,0,68,83,77,73,32,37,100,46,37,100,32,65,77,70,0,0,48,23,0,0,61,0,0,0,62,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,83,116,117,100,105,111,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,83,116,117,100,105,111,32,80,83,77,32,37,100,46,37,48,50,100,0,0,0,120,23,0,0,63,0,0,0,64,0,0,0,0,0,0,0,83,108,97,109,116,105,108,116,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,1,1,0,3,3,3,2,2,2,1,1,0,4,4,4,3,2,2,1,1,0,5,5,5,5,4,3,2,1,0,6,6,6,6,5,4,3,2,1,0,0,12,12,12,0,0,0,0,0,0,12,12,12,12,12,12,0,0,244,12,12,12,0,0,0,244,244,232,24,24,24,12,0,0,244,232,220,12,12,12,12,0,244,232,220,208,12,12,12,12,0,244,232,220,208,0,0,47,0,0,0,43,0,0,0,40,0,0,0,37,0,0,0,35,0,0,0,32,0,0,0,30,0,0,0,29,0,0,0,27,0,0,0,26,0,0,0,48,24,0,0,65,0,0,0,66,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,47,79,99,116,97,77,69,68,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,79,99,116,97,77,69,68,32,50,46,48,48,32,77,77,68,48,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,32,77,77,68,48,0,0,0,79,99,116,97,77,69,68,32,52,46,48,48,32,77,77,68,49,0,0,0,0,0,0,0,77,77,68,48,0,0,0,0,77,77,68,49,0,0,0,0,192,24,0,0,67,0,0,0,68,0,0,0,0,0,0,0,79,99,116,97,77,69,68,0,79,99,116,97,77,69,68,32,118,53,32,77,77,68,50,0,79,99,116,97,77,69,68,32,83,111,117,110,100,115,116,117,100,105,111,32,77,77,68,37,99,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,77,77,68,50,0,0,0,0,77,77,68,51,0,0,0,0,48,25,0,0,69,0,0,0,70,0,0,0,0,0,0,0,82,101,97,108,32,84,114,97,99,107,101,114,0,0,0,0,82,84,77,77,0,0,0,0,37,115,32,82,84,77,32,37,120,46,37,48,50,120,0,0,82,84,78,68,0,0,0,0,82,84,73,78,0,0,0,0,82,84,83,77,0,0,0,0,128,25,0,0,71,0,0,0,72,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,0,68,46,84,46,0,0,0,0,83,46,81,46,0,0,0,0,68,65,80,84,0,0,0,0,68,65,73,84,0,0,0,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,32,68,84,77,0,0,0,0,0,216,25,0,0,73,0,0,0,74,0,0,0,0,0,0,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,32,78,79,0,0,0,0,0,0,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,32,26,0,0,75,0,0,0,76,0,0,0,0,0,0,0,65,114,99,104,105,109,101,100,101,115,32,84,114,97,99,107,101,114,0,0,0,0,0,0,84,73,78,70,0,0,0,0,77,86,79,88,0,0,0,0,83,84,69,82,0,0,0,0,77,78,65,77,0,0,0,0,65,78,65,77,0,0,0,0,77,76,69,78,0,0,0,0,80,78,85,77,0,0,0,0,80,76,69,78,0,0,0,0,83,69,81,85,0,0,0,0,83,65,77,80,0,0,0,0,0,72,100,116,130,138,146,154,162,166,170,174,178,182,234,190,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,254,254,254,0,0,0,0,0,0,0,224,26,0,0,77,0,0,0,78,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,83,121,109,112,104,111,110,121,0,0,0,0,0,0,0,0,108,105,98,120,109,112,58,32,117,110,115,117,112,112,111,114,116,101,100,32,115,97,109,112,108,101,32,116,121,112,101,10,0,0,0,0,0,0,0,0,48,27,0,0,79,0,0,0,80,0,0,0,0,0,0,0,77,69,68,32,49,46,49,50,32,77,69,68,50,0,0,0,37,115,47,37,115,0,0,0,88,27,0,0,81,0,0,0,82,0,0,0,0,0,0,0,77,69,68,32,50,46,48,48,32,77,69,68,51,0,0,0,120,27,0,0,83,0,0,0,84,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,32,77,69,68,52,0,0,0,77,69,68,86,0,0,0,4,0,0,0,0,0,0,0,0,77,69,68,32,37,100,46,37,48,50,100,32,77,69,68,52,0,0,0,0,0,0,0,0,192,27,0,0,85,0,0,0,86,0,0,0,0,0,0,0,68,105,103,105,66,111,111,115,116,101,114,32,80,114,111,0,73,78,70,79,0,0,0,0,83,79,78,71,0,0,0,0,83,77,80,76,0,0,0,0,86,69,78,86,0,0,0,0,68,105,103,105,66,111,111,115,116,101,114,32,80,114,111,32,37,100,46,37,48,50,120,32,68,66,77,48,0,0,0,0,32,28,0,0,87,0,0,0,88,0,0,0,0,0,0,0,69,112,105,99,32,71,97,109,101,115,32,85,77,88,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,0,0,0,0,0,0,0,0,88,28,0,0,89,0,0,0,90,0,0,0,0,0,0,0,71,101,110,101,114,105,99,32,68,105,103,105,116,97,108,32,77,117,115,105,99,0,0,0,71,68,77,32,37,100,46,37,48,50,100,32,40,50,71,68,77,32,37,100,46,37,48,50,100,41,0,0,0,0,0,0,71,68,77,32,37,100,46,37,48,50,100,32,40,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,32,37,100,46,37,48,50,100,41,0,0,0,200,28,0,0,91,0,0,0,92,0,0,0,0,0,0,0,112,114,111,119,105,122,97,114,100,0,0,0,0,0,0,0,120,109,112,95,88,88,88,88,88,88,0,0,0,0,0,0,77,46,75,46,0,0,0,0,37,115,0,0,0,0,0,0,8,29,0,0,93,0,0,0,94,0,0,0,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,53,46,48,32,40,74,50,66,41,0,0,0,73,78,73,84,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,53,46,48,0,88,29,0,0,95,0,0,0,96,0,0,0,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,52,46,48,0,77,65,73,78,0,0,0,0,79,82,68,82,0,0,0,0,80,65,84,84,0,0,0,0,73,78,83,84,0,0,0,0,117,110,107,110,111,119,110,32,101,102,102,101,99,116,32,37,48,50,120,32,37,48,50,120,10,0,0,0,0,0,0,0,192,29,0,0,97,0,0,0,98,0,0,0,0,0,0,0,77,97,103,110,101,116,105,99,32,70,105,101,108,100,115,32,80,97,99,107,101,114,0,0,108,105,98,120,109,112,58,32,105,110,118,97,108,105,100,32,102,105,108,101,110,97,109,101,32,37,115,10,0,0,0,0,37,115,37,115,0,0,0,0,46,115,101,116,0,0,0,0,108,105,98,120,109,112,58,32,109,105,115,115,105,110,103,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,0,0,108,105,98,120,109,112,58,32,99,97,110,39,116,32,111,112,101,110,32,115,97,109,112,108,101,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,96,30,0,0,99,0,0,0,100,0,0,0,0,0,0,0,65,115,121,108,117,109,32,77,117,115,105,99,32,70,111,114,109,97,116,32,118,49,46,48,0,0,0,0,0,0,0,0,65,83,89,76,85,77,32,77,117,115,105,99,32,70,111,114,109,97,116,32,86,49,46,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,30,0,0,101,0,0,0,102,0,0,0,0,0,0,0,72,105,115,32,77,97,115,116,101,114,39,115,32,78,111,105,115,101,0,0,0,0,0,0,77,117,112,112,0,0,0,0,37,115,32,40,37,52,46,52,115,41,0,0,0,0,0,0,77,117,112,112,32,37,48,50,120,32,37,48,50,120,32,37,48,50,120,0,0,0,0,0,16,31,0,0,103,0,0,0,104,0,0,0,0,0,0,0,77,101,103,97,116,114,97,99,107,101,114,0,0,0,0,0,77,101,103,97,116,114,97,99,107,101,114,32,77,71,84,32,118,37,100,46,37,100,0,0,72,31,0,0,105,0,0,0,106,0,0,0,0,0,0,0,67,104,105,112,116,114,97,99,107,101,114,0,0,0,0,0,75,82,73,83,0,0,0,0,0,37,0,0,168,37,0,0,128,37,0,0,208,37,0,0,128,43,0,0,80,38,0,0,128,38,0,0,80,43,0,0,0,40,0,0,200,39,0,0,80,40,0,0,120,40,0,0,40,40,0,0,120,41,0,0,200,40,0,0,200,41,0,0,40,43,0,0,48,42,0,0,152,38,0,0,40,37,0,0,88,37,0,0,8,42,0,0,168,42,0,0,88,42,0,0,112,42,0,0,160,39,0,0,168,43,0,0,8,39,0,0,224,38,0,0,120,39,0,0,160,41,0,0,248,40,0,0,224,40,0,0,80,41,0,0,40,38,0,0,160,40,0,0,208,42,0,0,248,37,0,0,0,43,0,0,0,0,0,0,114,98,0,0,0,0,0,0,119,43,98,0,0,0,0,0,67,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,0,0,0,0,0,0,0,0,0,0,3,88,3,40,2,250,2,208,2,166,2,128,2,92,2,58,2,26,1,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,0,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,0,0,0,0,0,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,82,3,34,3,245,2,203,2,162,2,125,2,89,2,55,2,23,2,249,1,221,1,194,1,169,1,145,1,123,1,101,1,81,1,62,1,44,1,28,1,12,1,253,0,239,0,225,0,213,0,201,0,189,0,179,0,169,0,159,0,150,0,142,0,134,0,126,0,119,0,113,0,76,3,28,3,240,2,197,2,158,2,120,2,85,2,51,2,20,2,246,1,218,1,191,1,166,1,142,1,120,1,99,1,79,1,60,1,42,1,26,1,10,1,251,0,237,0,224,0,211,0,199,0,188,0,177,0,167,0,158,0,149,0,141,0,133,0,125,0,118,0,112,0,70,3,23,3,234,2,192,2,153,2,116,2,80,2,47,2,16,2,242,1,214,1,188,1,163,1,139,1,117,1,96,1,76,1,58,1,40,1,24,1,8,1,249,0,235,0,222,0,209,0,198,0,187,0,176,0,166,0,157,0,148,0,140,0,132,0,125,0,118,0,111,0,64,3,17,3,229,2,187,2,148,2,111,2,76,2,43,2,12,2,239,1,211,1,185,1,160,1,136,1,114,1,94,1,74,1,56,1,38,1,22,1,6,1,247,0,233,0,220,0,208,0,196,0,185,0,175,0,165,0,156,0,147,0,139,0,131,0,124,0,117,0,110,0,58,3,11,3,224,2,182,2,143,2,107,2,72,2,39,2,8,2,235,1,207,1,181,1,157,1,134,1,112,1,91,1,72,1,53,1,36,1,20,1,4,1,245,0,232,0,219,0,206,0,195,0,184,0,174,0,164,0,155,0,146,0,138,0,130,0,123,0,116,0,109,0,52,3,6,3,218,2,177,2,139,2,102,2,68,2,35,2,4,2,231,1,204,1,178,1,154,1,131,1,109,1,89,1,69,1,51,1,34,1,18,1,2,1,244,0,230,0,217,0,205,0,193,0,183,0,172,0,163,0,154,0,145,0,137,0,129,0,122,0,115,0,109,0,46,3,0,3,213,2,172,2,134,2,98,2,63,2,31,2,1,2,228,1,201,1,175,1,151,1,128,1,107,1,86,1,67,1,49,1,32,1,16,1,0,1,242,0,228,0,216,0,204,0,192,0,181,0,171,0,161,0,152,0,144,0,136,0,128,0,121,0,114,0,108,0,139,3,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,132,3,82,3,34,3,245,2,203,2,163,2,124,2,89,2,55,2,23,2,249,1,221,1,194,1,169,1,145,1,123,1,101,1,81,1,62,1,44,1,28,1,12,1,253,0,238,0,225,0,212,0,200,0,189,0,179,0,169,0,159,0,150,0,142,0,134,0,126,0,119,0,126,3,76,3,28,3,240,2,197,2,158,2,120,2,85,2,51,2,20,2,246,1,218,1,191,1,166,1,142,1,120,1,99,1,79,1,60,1,42,1,26,1,10,1,251,0,237,0,223,0,211,0,199,0,188,0,177,0,167,0,158,0,149,0,141,0,133,0,125,0,118,0,119,3,70,3,23,3,234,2,192,2,153,2,116,2,80,2,47,2,16,2,242,1,214,1,188,1,163,1,139,1,117,1,96,1,76,1,58,1,40,1,24,1,8,1,249,0,235,0,222,0,209,0,198,0,187,0,176,0,166,0,157,0,148,0,140,0,132,0,125,0,118,0,113,3,64,3,17,3,229,2,187,2,148,2,111,2,76,2,43,2,12,2,238,1,211,1,185,1,160,1,136,1,114,1,94,1,74,1,56,1,38,1,22,1,6,1,247,0,233,0,220,0,208,0,196,0,185,0,175,0,165,0,156,0,147,0,139,0,131,0,123,0,117,0,107,3,58,3,11,3,224,2,182,2,143,2,107,2,72,2,39,2,8,2,235,1,207,1,181,1,157,1,134,1,112,1,91,1,72,1,53,1,36,1,20,1,4,1,245,0,232,0,219,0,206,0,195,0,184,0,174,0,164,0,155,0,146,0,138,0,130,0,123,0,116,0,100,3,52,3,6,3,218,2,177,2,139,2,102,2,68,2,35,2,4,2,231,1,204,1,178,1,154,1,131,1,109,1,89,1,69,1,51,1,34,1,18,1,2,1,244,0,230,0,217,0,205,0,193,0,183,0,172,0,163,0,154,0,145,0,137,0,129,0,122,0,115,0,94,3,46,3,0,3,213,2,172,2,134,2,98,2,63,2,31,2,1,2,228,1,201,1,175,1,151,1,128,1,107,1,86,1,67,1,49,1,32,1,16,1,0,1,242,0,228,0,216,0,203,0,192,0,181,0,171,0,161,0,152,0,144,0,136,0,128,0,121,0,114,0,24,37,0,0,107,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,67,49,68,32,80,97,99,107,101,114,0,0,0,0,0,64,37,0,0,109,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,73,108,108,117,115,105,111,110,115,0,0,0,0,0,0,0,112,37,0,0,111,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,117,114,101,107,97,32,80,97,99,107,101,114,0,0,0,152,37,0,0,113,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,67,45,77,32,80,97,99,107,101,114,0,0,0,0,0,192,37,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,99,104,115,32,84,114,97,99,107,101,114,0,0,0,232,37,0,0,117,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,122,122,97,99,32,80,97,99,107,101,114,0,0,0,16,38,0,0,119,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,97,109,101,32,77,117,115,105,99,32,67,114,101,97,116,111,114,0,0,0,0,0,0,64,38,0,0,121,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,101,97,116,115,101,101,107,101,114,32,49,46,48,0,0,104,38,0,0,123,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,101,102,114,101,110,115,32,83,111,117,110,100,32,77,97,99,104,105,110,101,0,0,0,176,38,0,0,125,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,38,0,0,127,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,111,100,117,108,101,32,80,114,111,116,101,99,116,111,114,0,0,0,0,0,0,0,0,77,111,100,117,108,101,32,80,114,111,116,101,99,116,111,114,32,110,111,73,68,0,0,0,248,38,0,0,128,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,80,97,99,107,101,114,32,118,49,0,0,32,39,0,0,130,0,0,0,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,112,97,99,107,101,114,32,118,50,0,0,70,97,105,108,32,49,32,111,110,32,109,32,61,32,37,100,10,0,0,0,0,0,0,0,70,97,105,108,32,50,32,111,110,32,109,32,61,32,37,100,0,0,0,0,0,0,0,0,70,97,105,108,32,51,32,111,110,32,109,32,61,32,37,100,0,0,0,0,0,0,0,0,144,39,0,0,132,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,112,97,99,107,101,114,32,118,51,0,0,184,39,0,0,134,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,54,46,49,97,0,224,39,0,0,136,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,109,105,122,101,114,32,49,46,48,99,0,0,0,96,56,96,0,0,160,96,0,1,62,96,0,1,12,72,231,24,40,0,0,138], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,109,105,122,101,114,32,49,46,56,97,0,0,0,64,40,0,0,140,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,104,97,32,80,97,99,107,101,114,0,0,0,0,0,0,104,40,0,0,142,0,0,0,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,114,117,110,110,101,114,32,49,46,48,0,0,0,144,40,0,0,144,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,114,117,110,110,101,114,32,50,46,48,0,0,0,184,40,0,0,146,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,68,97,114,107,32,68,101,109,111,110,0,0,16,41,0,0,148,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,41,0,0,150,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,41,0,0,151,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,32,110,111,105,100,0,0,0,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,32,105,100,48,0,0,0,0,0,0,0,0,104,41,0,0,152,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,105,99,32,84,114,97,99,107,101,114,32,50,0,0,144,41,0,0,154,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,110,116,111,110,32,80,97,99,107,101,114,0,0,0,184,41,0,0,156,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,101,110,32,80,97,99,107,101,114,0,0,0,0,0,0,224,41,0,0,158,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,114,97,99,107,101,114,32,80,97,99,107,101,114,32,118,51,0,0,0,0,0,0,0,67,80,76,88,95,84,80,51,0,0,0,0,0,0,0,0,32,42,0,0,160,0,0,0,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,52,46,120,0,0,72,42,0,0,162,0,0,0,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,65,78,78,32,80,97,99,107,101,114,0,0,0,0,0,136,42,0,0,164,0,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,42,0,0,166,0,0,0,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,53,46,48,97,0,84,104,101,32,80,108,97,121,101,114,32,54,46,48,97,0,192,42,0,0,168,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,80,97,99,107,101,114,32,50,46,49,0,0,0,232,42,0,0,170,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,80,97,99,107,101,114,0,0,0,0,0,0,24,43,0,0,172,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,105,116,97,110,105,99,115,32,80,108,97,121,101,114,0,64,43,0,0,174,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,75,89,84,32,80,97,99,107,101,114,0,0,0,0,0,104,43,0,0,176,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,118,111,116,114,97,100,101,32,80,97,99,107,101,114,0,0,0,0,0,0,0,0,152,43,0,0,178,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,111,114,110,101,116,32,80,97,99,107,101,114,0,0,0,192,43,0,0,180,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,82,117,110,110,101,114,0,0,0,0,0,0,0,0,0,184,255,0,0,112,255,0,0,40,255,0,0,224,254,0,0,152,254,0,0,80,254,0,0,8,254,0,0,192,253,0,0,120,253,0,0,48,253,0,0,232,252,0,0,160,252,0,0,88,252,0,0,16,252,0,0,200,251,0,0,208,4,0,0,96,6,0,0,40,16,0,0,112,17,0,0,136,13,0,0,216,7,0,0,112,8,0,0,40,15,0,0,112,9,0,0,200,19,0,0,200,18,0,0,184,9,0,0,8,13,0,0,136,12,0,0,112,20,0,0,200,25,0,0,88,22,0,0,248,28,0,0,72,29,0,0,32,23,0,0,224,22,0,0,80,30,0,0,72,28,0,0,32,24,0,0,176,24,0,0,32,27,0,0,72,27,0,0,104,27,0,0,56,31,0,0,32,25,0,0,160,15,0,0,112,25,0,0,0,31,0,0,16,26,0,0,208,26,0,0,48,19,0,0,176,27,0,0,120,18,0,0,0,11,0,0,224,15,0,0,24,9,0,0,16,28,0,0,168,30,0,0,104,23,0,0,48,22,0,0,216,8,0,0,128,19,0,0,208,11,0,0,56,12,0,0,40,20,0,0,176,29,0,0,8,0,0,0,184,28,0,0,0,0,0,0,86,28,0,0,34,28,0,0,238,27,0,0,187,27,0,0,135,27,0,0,85,27,0,0,34,27,0,0,240,26,0,0,191,26,0,0,142,26,0,0,93,26,0,0,44,26,0,0,252,25,0,0,204,25,0,0,156,25,0,0,109,25,0,0,62,25,0,0,16,25,0,0,226,24,0,0,180,24,0,0,134,24,0,0,89,24,0,0,44,24,0,0,0,24,0,0,212,23,0,0,168,23,0,0,124,23,0,0,81,23,0,0,38,23,0,0,251,22,0,0,209,22,0,0,167,22,0,0,125,22,0,0,84,22,0,0,43,22,0,0,2,22,0,0,217,21,0,0,177,21,0,0,137,21,0,0,98,21,0,0,58,21,0,0,19,21,0,0,236,20,0,0,198,20,0,0,159,20,0,0,121,20,0,0,84,20,0,0,46,20,0,0,9,20,0,0,228,19,0,0,192,19,0,0,155,19,0,0,119,19,0,0,83,19,0,0,48,19,0,0,12,19,0,0,233,18,0,0,198,18,0,0,164,18,0,0,130,18,0,0,95,18,0,0,62,18,0,0,28,18,0,0,251,17,0,0,218,17,0,0,185,17,0,0,152,17,0,0,120,17,0,0,87,17,0,0,55,17,0,0,24,17,0,0,248,16,0,0,217,16,0,0,186,16,0,0,155,16,0,0,125,16,0,0,94,16,0,0,64,16,0,0,34,16,0,0,4,16,0,0,231,15,0,0,202,15,0,0,173,15,0,0,144,15,0,0,115,15,0,0,87,15,0,0,58,15,0,0,30,15,0,0,2,15,0,0,231,14,0,0,203,14,0,0,176,14,0,0,149,14,0,0,122,14,0,0,95,14,0,0,69,14,0,0,43,14,0,0,17,14,0,0,247,13,0,0,221,13,0,0,195,13,0,0,170,13,0,0,145,13,0,0,120,13,0,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,248,255,255,255,1,0,0,0,1,0,0,0,240,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,16,0,0,0,19,0,0,0,22,0,0,0,26,0,0,0,32,0,0,0,43,0,0,0,64,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,88,88,88,88,88,88,0,0,0,0,0,0,0,0,0,0,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,48,49,50,51,52,53,54,55,56,57,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,49,0,0,0,74,0,0,0,97,0,0,0,120,0,0,0,141,0,0,0,161,0,0,0,180,0,0,0,197,0,0,0,212,0,0,0,224,0,0,0,235,0,0,0,244,0,0,0,250,0,0,0,253,0,0,0,255,0,0,0,253,0,0,0,250,0,0,0,244,0,0,0,235,0,0,0,224,0,0,0,212,0,0,0,197,0,0,0,180,0,0,0,161,0,0,0,141,0,0,0,120,0,0,0,97,0,0,0,74,0,0,0,49,0,0,0,24,0,0,0,0,0,0,0,232,255,255,255,207,255,255,255,182,255,255,255,159,255,255,255,136,255,255,255,115,255,255,255,95,255,255,255,76,255,255,255,59,255,255,255,44,255,255,255,32,255,255,255,21,255,255,255,12,255,255,255,6,255,255,255,3,255,255,255,1,255,255,255,3,255,255,255,6,255,255,255,12,255,255,255,21,255,255,255,32,255,255,255,44,255,255,255,59,255,255,255,76,255,255,255,95,255,255,255,115,255,255,255,136,255,255,255,159,255,255,255,182,255,255,255,207,255,255,255,232,255,255,255,0,0,0,0,49,0,0,0,97,0,0,0,141,0,0,0,180,0,0,0,212,0,0,0,235,0,0,0,250,0,0,0,255,0,0,0,250,0,0,0,235,0,0,0,212,0,0,0,180,0,0,0,141,0,0,0,97,0,0,0,49,0,0,0,0,0,0,0,207,255,255,255,159,255,255,255,115,255,255,255,76,255,255,255,44,255,255,255,21,255,255,255,6,255,255,255,1,255,255,255,6,255,255,255,21,255,255,255,44,255,255,255,76,255,255,255,115,255,255,255,159,255,255,255,207,255,255,255,19,208,2,67,43,183,4,67,89,165,6,67,183,154,8,67,96,151,10,67,112,155,12,67,0,167,14,67,47,186,16,67,23,213,18,67,214,247,20,67,137,34,23,67,77,85,25,67,65,144,27,67,131,211,29,67,50,31,32,67,109,115,34,67,84,208,36,67,7,54,39,67,168,164,41,67,87,28,44,67,55,157,46,67,104,39,49,67,15,187,51,67,78,88,54,67,73,255,56,67,37,176,59,67,5,107,62,67,16,48,65,67,106,255,67,67,60,217,70,67,171,189,73,67,223,172,76,67,0,167,79,67,55,172,82,67,174,188,85,67,141,216,88,67,0,0,92,67,49,51,95,67,77,114,98,67,128,189,101,67,246,20,105,67,222,120,108,67,101,233,111,67,187,102,115,67,16,241,118,67,147,136,122,67,119,45,126,67,246,239,128,67,19,208,130,67,43,183,132,67,89,165,134,67,183,154,136,67,96,151,138,67,112,155,140,67,0,167,142,67,47,186,144,67,23,213,146,67,214,247,148,67,137,34,151,67,77,85,153,67,65,144,155,67,131,211,157,67,50,31,160,67,109,115,162,67,84,208,164,67,7,54,167,67,168,164,169,67,87,28,172,67,55,157,174,67,104,39,177,67,15,187,179,67,78,88,182,67,73,255,184,67,37,176,187,67,5,107,190,67,16,48,193,67,106,255,195,67,60,217,198,67,171,189,201,67,223,172,204,67,0,167,207,67,55,172,210,67,174,188,213,67,141,216,216,67,0,0,220,67,49,51,223,67,77,114,226,67,128,189,229,67,246,20,233,67,222,120,236,67,101,233,239,67,187,102,243,67,16,241,246,67,147,136,250,67,119,45,254,67,246,239,0,68,19,208,2,68,43,183,4,68,89,165,6,68,183,154,8,68,96,151,10,68,112,155,12,68,0,167,14,68,47,186,16,68,23,213,18,68,214,247,20,68,137,34,23,68,77,85,25,68,65,144,27,68,131,211,29,68,50,31,32,68,109,115,34,68,84,208,36,68,7,54,39,68,168,164,41,68,87,28,44,68,55,157,46,68,104,39,49,68,15,187,51,68,78,88,54,68,73,255,56,68,37,176,59,68,5,107,62,68,16,48,65,68,106,255,67,68,60,217,70,68,171,189,73,68,223,172,76,68,0,167,79,68,55,172,82,68,174,188,85,68,141,216,88,68,0,0,92,68,49,51,95,68,77,114,98,68,128,189,101,68,246,20,105,68,222,120,108,68,101,233,111,68,187,102,115,68,16,241,118,68,147,136,122,68,119,45,126,68,246,239,128,68,19,208,130,68,43,183,132,68,89,165,134,68,183,154,136,68,96,151,138,68,112,155,140,68,0,167,142,68,47,186,144,68,23,213,146,68,214,247,148,68,137,34,151,68,77,85,153,68,65,144,155,68,131,211,157,68,50,31,160,68,109,115,162,68,84,208,164,68,7,54,167,68,168,164,169,68,87,28,172,68,55,157,174,68,104,39,177,68,15,187,179,68,78,88,182,68,73,255,184,68,37,176,187,68,5,107,190,68,16,48,193,68,106,255,195,68,60,217,198,68,171,189,201,68,223,172,204,68,0,167,207,68,55,172,210,68,174,188,213,68,141,216,216,68,0,0,220,68,49,51,223,68,77,114,226,68,128,189,229,68,246,20,233,68,222,120,236,68,101,233,239,68,187,102,243,68,16,241,246,68,147,136,250,68,119,45,254,68,246,239,0,69,19,208,2,69,43,183,4,69,89,165,6,69,183,154,8,69,96,151,10,69,112,155,12,69,0,167,14,69,47,186,16,69,23,213,18,69,214,247,20,69,137,34,23,69,77,85,25,69,65,144,27,69,131,211,29,69,50,31,32,69,109,115,34,69,84,208,36,69,7,54,39,69,168,164,41,69,87,28,44,69,55,157,46,69,104,39,49,69,15,187,51,69,78,88,54,69,73,255,56,69,37,176,59,69,5,107,62,69,16,48,65,69,106,255,67,69,60,217,70,69,171,189,73,69,223,172,76,69,0,167,79,69,55,172,82,69,174,188,85,69,141,216,88,69,0,0,92,69,49,51,95,69,77,114,98,69,128,189,101,69,246,20,105,69,222,120,108,69,101,233,111,69,187,102,115,69,16,241,118,69,147,136,122,69,119,45,126,69,246,239,128,69,19,208,130,69,43,183,132,69,89,165,134,69,183,154,136,69,96,151,138,69,112,155,140,69,0,167,142,69,47,186,144,69,23,213,146,69,214,247,148,69,137,34,151,69,77,85,153,69,65,144,155,69,131,211,157,69,50,31,160,69,109,115,162,69,0,0,128,63,191,53,123,63,113,130,118,63,166,229,113,63,243,94,109,63,238,237,104,63,48,146,100,63,82,75,96,63,241,24,92,63,170,250,87,63,29,240,83,63,236,248,79,63,185,20,76,63,42,67,72,63,230,131,68,63,149,214,64,63,225,58,61,63,117,176,57,63,255,54,54,63,46,206,50,63,177,117,47,63,59,45,44,63,127,244,40,63,50,203,37,63,9,177,34,63,188,165,31,63,4,169,28,63,155,186,25,63,60,218,22,63,165,7,20,63,147,66,17,63,198,138,14,63,253,223,11,63,251,65,9,63,131,176,6,63,87,43,4,63,62,178,1,63,252,137,254,62,187,198,249,62,74,26,245,62,60,132,240,62,38,4,236,62,159,153,231,62,63,68,227,62,161,3,223,62,97,215,218,62,30,191,214,62,121,186,210,62,19,201,206,62,144,234,202,62,149,30,199,62,202,100,195,62,216,188,191,62,106,38,188,62,42,161,184,62,200,44,181,62,242,200,177,62,88,117,174,62,174,49,171,62,167,253,167,62,248,216,164,62,87,195,161,62,125,188,158,62,34,196,155,62,2,218,152,62,215,253,149,62,96,47,147,62,90,110,144,62,133,186,141,62,162,19,139,62,115,121,136,62,187,235,133,62,62,106,131,62,194,244,128,62,26,22,125,62,207,89,120,62,50,180,115,62,216,36,111,62,85,171,106,62,65,71,102,62,54,248,97,62,206,189,93,62,167,151,89,62,96,133,85,62,153,134,81,62,246,154,77,62,26,194,73,62,171,251,69,62,82,71,66,62,183,164,62,62,135,19,59,62,108,147,55,62,22,36,52,62,51,197,48,62,118,118,45,62,145,55,42,62,56,8,39,62,33,232,35,62,2,215,32,62,147,212,29,62,143,224,26,62,177,250,23,62,180,34,21,62,86,88,18,62,86,155,15,62,116,235,12,62,113,72,10,62,15,178,7,62,18,40,5,62,63,170,2,62,90,56,0,62,88,164,251,61,248,238,246,61,37,80,242,61,116,199,237,61,123,84,233,61,209,246,228,61,17,174,224,61,215,121,220,61,192,89,216,61,108,77,212,61,123,84,208,61,146,110,204,61,85,155,200,61,107,218,196,61,123,43,193,61,48,142,189,61,53,2,186,61,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,5,0,0,0,255,255,255,255,255,255,255,255,6,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,255,255,255,255,255,255,255,255,12,0,0,0,14,0,0,0,16,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,160,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,96,1,0,0,128,1,0,0,160,1,0,0,192,1,0,0,224,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,1,0,0,96,1,0,0,160,1,0,0,224,1,0,0,0,2,0,0,64,2,0,0,96,2,0,0,128,2,0,0,160,2,0,0,192,2,0,0,224,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,160,1,0,0,0,2,0,0,96,2,0,0,160,2,0,0,224,2,0,0,0,3,0,0,64,3,0,0,96,3,0,0,128,3,0,0,160,3,0,0,192,3,0,0,224,3,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,160,2,0,0,0,3,0,0,96,3,0,0,160,3,0,0,224,3,0,0,0,4,0,0,64,4,0,0,96,4,0,0,128,4,0,0,160,4,0,0,192,4,0,0,224,4,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,3,0,0,160,3,0,0,0,4,0,0,96,4,0,0,160,4,0,0,224,4,0,0,0,5,0,0,64,5,0,0,96,5,0,0,128,5,0,0,160,5,0,0,192,5,0,0,224,5,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,4,0,0,160,4,0,0,0,5,0,0,96,5,0,0,160,5,0,0,224,5,0,0,0,6,0,0,64,6,0,0,96,6,0,0,128,6,0,0,160,6,0,0,192,6,0,0,224,6,0,0,0,7,0,0,0,0,0,16,0,0,128,16,0,0,0,17,0,0,128,17,0,0,0,18,0,0,128,18,0,0,0,19,0,0,128,19,0,0,0,20,0,0,128,20,0,0,0,21,0,0,128,21,0,0,0,22,0,0,128,22,0,0,0,23,0,0,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,20,0,0,0,24,0,0,0,24,0,0,0,30,0,0,0,30,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,240,255,232,255,224,255,216,255,209,255,201,255,193,255,185,255,178,255,170,255,162,255,155,255,147,255,139,255,132,255,124,255,117,255,110,255,102,255,95,255,87,255,80,255,73,255,66,255,58,255,51,255,44,255,37,255,30,255,23,255,16,255,9,255,2,255,251,254,244,254,237,254,230,254,223,254,217,254,210,254,203,254,196,254,190,254,183,254,176,254,170,254,163,254,157,254,150,254,144,254,137,254,131,254,124,254,118,254,112,254,105,254,99,254,93,254,87,254,80,254,74,254,68,254,62,254,56,254,50,254,44,254,38,254,32,254,26,254,20,254,14,254,8,254,2,254,253,253,247,253,241,253,235,253,230,253,224,253,218,253,213,253,207,253,202,253,196,253,191,253,185,253,180,253,174,253,169,253,164,253,158,253,153,253,148,253,142,253,137,253,132,253,127,253,122,253,117,253,112,253,106,253,101,253,96,253,91,253,86,253,82,253,77,253,72,253,67,253,62,253,57,253,53,253,48,253,43,253,38,253,34,253,29,253,24,253,20,253,15,253,11,253,6,253,2,253,253,252,249,252,244,252,240,252,236,252,231,252,227,252,223,252,218,252,214,252,210,252,206,252,202,252,198,252,193,252,189,252,185,252,181,252,177,252,173,252,169,252,165,252,161,252,158,252,154,252,150,252,146,252,142,252,138,252,135,252,131,252,127,252,124,252,120,252,116,252,113,252,109,252,106,252,102,252,99,252,95,252,92,252,88,252,85,252,81,252,78,252,75,252,71,252,68,252,65,252,62,252,58,252,55,252,52,252,49,252,46,252,43,252,40,252,37,252,33,252,30,252,27,252,25,252,22,252,19,252,16,252,13,252,10,252,7,252,4,252,2,252,255,251,252,251,249,251,247,251,244,251,241,251,239,251,236,251,233,251,231,251,228,251,226,251,223,251,221,251,218,251,216,251,214,251,211,251,209,251,206,251,204,251,202,251,200,251,197,251,195,251,193,251,191,251,188,251,186,251,184,251,182,251,180,251,178,251,176,251,174,251,172,251,170,251,168,251,166,251,164,251,162,251,160,251,158,251,156,251,155,251,153,251,151,251,149,251,147,251,146,251,144,251,142,251,141,251,139,251,137,251,136,251,134,251,133,251,131,251,130,251,128,251,127,251,125,251,124,251,122,251,121,251,119,251,118,251,117,251,115,251,114,251,113,251,111,251,110,251,109,251,108,251,106,251,105,251,104,251,103,251,102,251,101,251,100,251,99,251,98,251,96,251,95,251,94,251,93,251,93,251,92,251,91,251,90,251,89,251,88,251,87,251,86,251,85,251,85,251,84,251,83,251,82,251,82,251,81,251,80,251,80,251,79,251,78,251,78,251,77,251,76,251,76,251,75,251,75,251,74,251,74,251,73,251,73,251,72,251,72,251,72,251,71,251,71,251,70,251,70,251,70,251,69,251,69,251,69,251,68,251,68,251,68,251,68,251,68,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,68,251,68,251,68,251,68,251,69,251,69,251,69,251,69,251,70,251,70,251,70,251,71,251,71,251,71,251,72,251,72,251,73,251,73,251,73,251,74,251,74,251,75,251,75,251,76,251,76,251,77,251,78,251,78,251,79,251,79,251,80,251,81,251,81,251,82,251,83,251,83,251,84,251,85,251,85,251,86,251,87,251,88,251,88,251,89,251,90,251,91,251,92,251,93,251,93,251,94,251,95,251,96,251,97,251,98,251,99,251,100,251,101,251,102,251,103,251,104,251,105,251,106,251,107,251,108,251,109,251,110,251,111,251,112,251,113,251,114,251,115,251,117,251,118,251,119,251,120,251,121,251,122,251,124,251,125,251,126,251,127,251,129,251,130,251,131,251,132,251,134,251,135,251,136,251,138,251,139,251,140,251,142,251,143,251,145,251,146,251,147,251,149,251,150,251,152,251,153,251,155,251,156,251,158,251,159,251,161,251,162,251,164,251,165,251,167,251,168,251,170,251,171,251,173,251,175,251,176,251,178,251,179,251,181,251,183,251,184,251,186,251,188,251,189,251,191,251,193,251,195,251,196,251,198,251,200,251,201,251,203,251,205,251,207,251,209,251,210,251,212,251,214,251,216,251,218,251,219,251,221,251,223,251,225,251,227,251,229,251,231,251,233,251,234,251,236,251,238,251,240,251,242,251,244,251,246,251,248,251,250,251,252,251,254,251,0,252,2,252,4,252,6,252,8,252,10,252,12,252,14,252,16,252,18,252,20,252,22,252,25,252,27,252,29,252,31,252,33,252,35,252,37,252,39,252,42,252,44,252,46,252,48,252,50,252,52,252,55,252,57,252,59,252,61,252,63,252,66,252,68,252,70,252,72,252,74,252,77,252,79,252,81,252,83,252,86,252,88,252,90,252,93,252,95,252,97,252,100,252,102,252,104,252,106,252,109,252,111,252,113,252,116,252,118,252,121,252,123,252,125,252,128,252,130,252,132,252,135,252,137,252,140,252,142,252,144,252,147,252,149,252,152,252,154,252,157,252,159,252,161,252,164,252,166,252,169,252,171,252,174,252,176,252,179,252,181,252,184,252,186,252,189,252,191,252,194,252,196,252,199,252,201,252,204,252,206,252,209,252,211,252,214,252,216,252,219,252,221,252,224,252,226,252,229,252,231,252,234,252,237,252,239,252,242,252,244,252,247,252,249,252,252,252,255,252,1,253,4,253,6,253,9,253,11,253,14,253,17,253,19,253,22,253,24,253,27,253,30,253,32,253,35,253,38,253,40,253,43,253,45,253,48,253,51,253,53,253,56,253,59,253,61,253,64,253,66,253,69,253,72,253,74,253,77,253,80,253,82,253,85,253,88,253,90,253,93,253,96,253,98,253,101,253,103,253,106,253,109,253,111,253,114,253,117,253,119,253,122,253,125,253,127,253,130,253,133,253,135,253,138,253,141,253,143,253,146,253,149,253,151,253,154,253,157,253,159,253,162,253,165,253,167,253,170,253,173,253,175,253,178,253,181,253,183,253,186,253,189,253,191,253,194,253,197,253,199,253,202,253,205,253,207,253,210,253,213,253,215,253,218,253,221,253,223,253,226,253,229,253,231,253,234,253,237,253,239,253,242,253,245,253,247,253,250,253,252,253,255,253,2,254,4,254,7,254,10,254,12,254,15,254,17,254,20,254,23,254,25,254,28,254,31,254,33,254,36,254,38,254,41,254,44,254,46,254,49,254,51,254,54,254,57,254,59,254,62,254,64,254,67,254,70,254,72,254,75,254,77,254,80,254,82,254,85,254,88,254,90,254,93,254,95,254,98,254,100,254,103,254,105,254,108,254,110,254,113,254,115,254,118,254,120,254,123,254,125,254,128,254,130,254,133,254,135,254,138,254,140,254,143,254,145,254,148,254,150,254,153,254,155,254,158,254,160,254,163,254,165,254,167,254,170,254,172,254,175,254,177,254,180,254,182,254,184,254,187,254,189,254,192,254,194,254,196,254,199,254,201,254,203,254,206,254,208,254,210,254,213,254,215,254,217,254,220,254,222,254,224,254,227,254,229,254,231,254,234,254,236,254,238,254,240,254,243,254,245,254,247,254,249,254,252,254,254,254,0,255,2,255,5,255,7,255,9,255,11,255,13,255,16,255,18,255,20,255,22,255,24,255,26,255,28,255,31,255,33,255,35,255,37,255,39,255,41,255,43,255,45,255,47,255,49,255,51,255,54,255,56,255,58,255,60,255,62,255,64,255,66,255,68,255,70,255,72,255,74,255,76,255,78,255,80,255,81,255,83,255,85,255,87,255,89,255,91,255,93,255,95,255,97,255,99,255,100,255,102,255,104,255,106,255,108,255,110,255,111,255,113,255,115,255,117,255,119,255,120,255,122,255,124,255,126,255,127,255,129,255,131,255,132,255,134,255,136,255,137,255,139,255,141,255,142,255,144,255,146,255,147,255,149,255,150,255,152,255,154,255,155,255,157,255,158,255,160,255,161,255,163,255,164,255,166,255,167,255,169,255,170,255,172,255,173,255,174,255,176,255,177,255,179,255,180,255,181,255,183,255,184,255,186,255,187,255,188,255,189,255,191,255,192,255,193,255,195,255,196,255,197,255,198,255,199,255,201,255,202,255,203,255,204,255,205,255,207,255,208,255,209,255,210,255,211,255,212,255,213,255,214,255,215,255,216,255,217,255,218,255,219,255,220,255,221,255,222,255,223,255,224,255,225,255,226,255,227,255,228,255,229,255,230,255,230,255,231,255,232,255,233,255,234,255,234,255,235,255,236,255,237,255,237,255,238,255,239,255,240,255,240,255,241,255,242,255,242,255,243,255,243,255,244,255,245,255,245,255,246,255,246,255,247,255,247,255,248,255,248,255,249,255,249,255,250,255,250,255,250,255,251,255,251,255,252,255,252,255,252,255,253,255,253,255,253,255,254,255,254,255,254,255,254,255,254,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,0,64,0,64,0,64,255,63,254,63,253,63,253,63,253,63,252,63,251,63,251,63,249,63,249,63,248,63,246,63,245,63,243,63,242,63,241,63,238,63,238,63,236,63,233,63,232,63,230,63,229,63,226,63,223,63,221,63,219,63,217,63,214,63,212,63,209,63,207,63,203,63,201,63,198,63,194,63,192,63,189,63,186,63,181,63,179,63,176,63,171,63,169,63,165,63,162,63,157,63,154,63,150,63,146,63,141,63,137,63,134,63,129,63,125,63,119,63,116,63,111,63,107,63,102,63,97,63,92,63,88,63,83,63,78,63,73,63,68,63,63,63,57,63,52,63,46,63,41,63,35,63,30,63,23,63,18,63,12,63,5,63,0,63,250,62,244,62,237,62,232,62,225,62,220,62,213,62,205,62,199,62,192,62,186,62,180,62,172,62,166,62,158,62,151,62,143,62,137,62,130,62,123,62,116,62,108,62,101,62,92,62,85,62,77,62,69,62,62,62,54,62,46,62,38,62,31,62,22,62,14,62,5,62,254,61,245,61,237,61,227,61,220,61,211,61,202,61,194,61,185,61,176,61,167,61,158,61,149,61,140,61,131,61,122,61,113,61,103,61,93,61,84,61,75,61,65,61,56,61,46,61,36,61,26,61,17,61,7,61,253,60,242,60,232,60,222,60,212,60,202,60,192,60,180,60,170,60,160,60,149,60,139,60,129,60,118,60,107,60,96,60,86,60,73,60,63,60,52,60,41,60,30,60,19,60,7,60,252,59,241,59,229,59,217,59,206,59,195,59,183,59,172,59,160,59,148,59,136,59,124,59,112,59,101,59,88,59,76,59,63,59,51,59,39,59,27,59,14,59,2,59,246,58,233,58,219,58,208,58,195,58,183,58,169,58,156,58,144,58,131,58,118,58,105,58,92,58,79,58,65,58,52,58,39,58,26,58,12,58,254,57,241,57,227,57,214,57,201,57,186,57,172,57,160,57,145,57,131,57,117,57,104,57,89,57,76,57,61,57,46,57,33,57,18,57,3,57,246,56,231,56,217,56,202,56,187,56,173,56,158,56,144,56,129,56,114,56,99,56,84,56,70,56,55,56,40,56,25,56,10,56,250,55,236,55,221,55,205,55,190,55,174,55,159,55,143,55,128,55,112,55,97,55,81,55,66,55,50,55,35,55,19,55,2,55,243,54,227,54,211,54,195,54,179,54,162,54,147,54,131,54,115,54,99,54,82,54,66,54,49,54,33,54,16,54,255,53,240,53,223,53,207,53,190,53,173,53,156,53,139,53,123,53,105,53,89,53,73,53,55,53,39,53,21,53,4,53,244,52,226,52,209,52,192,52,174,52,157,52,139,52,123,52,105,52,87,52,71,52,53,52,35,52,18,52,0,52,238,51,221,51,202,51,185,51,168,51,149,51,132,51,114,51,96,51,78,51,60,51,42,51,24,51,6,51,244,50,226,50,208,50,189,50,171,50,153,50,134,50,116,50,98,50,79,50,60,50,42,50,23,50,6,50,243,49,224,49,206,49,187,49,168,49,150,49,131,49,111,49,93,49,74,49,55,49,36,49,18,49,254,48,236,48,216,48,197,48,178,48,160,48,139,48,120,48,102,48,82,48,63,48,44,48,24,48,5,48,241,47,222,47,203,47,183,47,163,47,144,47,125,47,105,47,86,47,65,47,47,47,27,47,7,47,243,46,222,46,204,46,184,46,164,46,144,46,124,46,104,46,84,46,63,46,45,46,25,46,4,46,241,45,221,45,200,45,180,45,160,45,140,45,120,45,99,45,79,45,58,45,39,45,18,45,254,44,234,44,213,44,193,44,172,44,151,44,130,44,110,44,90,44,69,44,49,44,28,44,8,44,243,43,223,43,201,43,181,43,160,43,140,43,119,43,99,43,76,43,56,43,35,43,15,43,250,42,230,42,207,42,187,42,166,42,146,42,124,42,104,42,82,42,62,42,40,42,20,42,254,41,232,41,212,41,191,41,170,41,148,41,127,41,106,41,85,41,64,41,42,41,21,41,0,41,234,40,213,40,191,40,170,40,149,40,128,40,106,40,85,40,63,40,43,40,20,40,255,39,233,39,212,39,191,39,168,39,148,39,126,39,104,39,84,39,61,39,39,39,18,39,253,38,231,38,208,38,187,38,165,38,144,38,123,38,101,38,78,38,56,38,35,38,14,38,248,37,226,37,204,37,181,37,161,37,139,37,117,37,95,37,73,37,51,37,29,37,7,37,242,36,220,36,198,36,176,36,154,36,132,36,110,36,88,36,66,36,44,36,22,36,0,36,234,35,212,35,190,35,168,35,146,35,124,35,102,35,80,35,58,35,36,35,14,35,247,34,225,34,203,34,181,34,159,34,137,34,115,34,93,34,71,34,48,34,26,34,4,34,238,33,216,33,194,33,172,33,149,33,127,33,105,33,83,33,61,33,39,33,16,33,250,32,228,32,206,32,184,32,161,32,139,32,117,32,95,32,73,32,50,32,28,32,6,32,240,31,218,31,195,31,173,31,151,31,129,31,106,31,84,31,62,31,40,31,18,31,251,30,229,30,207,30,185,30,162,30,140,30,118,30,96,30,74,30,51,30,29,30,7,30,241,29,219,29,196,29,174,29,152,29,130,29,107,29,85,29,63,29,41,29,19,29,253,28,230,28,208,28,186,28,164,28,142,28,120,28,97,28,75,28,53,28,31,28,9,28,243,27,220,27,198,27,176,27,154,27,132,27,110,27,88,27,66,27,44,27,22,27,255,26,233,26,211,26,189,26,167,26,145,26,123,26,101,26,79,26,57,26,35,26,13,26,247,25,225,25,203,25,181,25,159,25,137,25,115,25,93,25,72,25,50,25,28,25,6,25,240,24,218,24,196,24,174,24,153,24,131,24,109,24,87,24,65,24,44,24,22,24,0,24,234,23,213,23,191,23,169,23,147,23,126,23,104,23,82,23,61,23,39,23,17,23,252,22,230,22,209,22,187,22,165,22,144,22,122,22,101,22,79,22,58,22,36,22,15,22,249,21,228,21,206,21,185,21,164,21,142,21,121,21,100,21,78,21,57,21,36,21,14,21,249,20,228,20,207,20,185,20,164,20,143,20,122,20,101,20,79,20,58,20,37,20,16,20,251,19,230,19,209,19,188,19,167,19,146,19,125,19,104,19,83,19,62,19,41,19,21,19,0,19,235,18,214,18,193,18,172,18,152,18,131,18,110,18,90,18,69,18,48,18,28,18,7,18,243,17,222,17,201,17,181,17,160,17,140,17,119,17,99,17,79,17,58,17,38,17,18,17,253,16,233,16,213,16,192,16,172,16,152,16,132,16,112,16,92,16,71,16,51,16,31,16,11,16,247,15,227,15,207,15,187,15,167,15,148,15,128,15,108,15,88,15,68,15,49,15,29,15,9,15,245,14,226,14,206,14,187,14,167,14,148,14,128,14,109,14,89,14,70,14,50,14,31,14,11,14,248,13,229,13,210,13,190,13,171,13,152,13,133,13,114,13,95,13,76,13,57,13,38,13,19,13,0,13,237,12,218,12,199,12,180,12,161,12,143,12,124,12,105,12,87,12,68,12,49,12,31,12,12,12,250,11,231,11,213,11,194,11,176,11,158,11,139,11,121,11,103,11,85,11,66,11,48,11,30,11,12,11,250,10,232,10,214,10,196,10,178,10,160,10,142,10,125,10,107,10,89,10,71,10,54,10,36,10,19,10,1,10,239,9,222,9,205,9,187,9,170,9,152,9,135,9,118,9,101,9,83,9,66,9,49,9,32,9,15,9,254,8,237,8,220,8,203,8,186,8,170,8,153,8,136,8,119,8,103,8,86,8,69,8,53,8,36,8,20,8,4,8,243,7,227,7,211,7,194,7,178,7,162,7,146,7,130,7,114,7,98,7,82,7,66,7,50,7,34,7,18,7,2,7,243,6,227,6,211,6,196,6,180,6,165,6,149,6,134,6,118,6,103,6,88,6,72,6,57,6,42,6,27,6,12,6,253,5,238,5,223,5,208,5,193,5,178,5,164,5,149,5,134,5,120,5,105,5,90,5,76,5,62,5,47,5,33,5,18,5,4,5,246,4,232,4,218,4,204,4,190,4,176,4,162,4,148,4,134,4,120,4,107,4,93,4,79,4,66,4,52,4,39,4,25,4,12,4,254,3,241,3,228,3,215,3,202,3,188,3,175,3,162,3,149,3,137,3,124,3,111,3,98,3,86,3,73,3,60,3,48,3,35,3,23,3,10,3,254,2,242,2,230,2,217,2,205,2,193,2,181,2,169,2,157,2,146,2,134,2,122,2,110,2,99,2,87,2,76,2,64,2,53,2,41,2,30,2,19,2,8,2,252,1,241,1,230,1,219,1,208,1,197,1,187,1,176,1,165,1,155,1,144,1,133,1,123,1,113,1,102,1,92,1,82,1,71,1,61,1,51,1,41,1,31,1,21,1,12,1,2,1,248,0,238,0,229,0,219,0,210,0,200,0,191,0,182,0,172,0,163,0,154,0,145,0,136,0,127,0,118,0,109,0,100,0,92,0,83,0,75,0,66,0,58,0,49,0,41,0,32,0,24,0,16,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,254,255,254,255,254,255,254,255,254,255,253,255,253,255,253,255,252,255,252,255,252,255,251,255,251,255,250,255,250,255,250,255,249,255,249,255,248,255,248,255,247,255,247,255,246,255,246,255,245,255,245,255,244,255,243,255,243,255,242,255,242,255,241,255,240,255,240,255,239,255,238,255,237,255,237,255,236,255,235,255,234,255,234,255,233,255,232,255,231,255,230,255,230,255,229,255,228,255,227,255,226,255,225,255,224,255,223,255,222,255,221,255,220,255,219,255,218,255,217,255,216,255,215,255,214,255,213,255,212,255,211,255,210,255,209,255,208,255,207,255,205,255,204,255,203,255,202,255,201,255,199,255,198,255,197,255,196,255,195,255,193,255,192,255,191,255,189,255,188,255,187,255,186,255,184,255,183,255,181,255,180,255,179,255,177,255,176,255,174,255,173,255,172,255,170,255,169,255,167,255,166,255,164,255,163,255,161,255,160,255,158,255,157,255,155,255,154,255,152,255,150,255,149,255,147,255,146,255,144,255,142,255,141,255,139,255,137,255,136,255,134,255,132,255,131,255,129,255,127,255,126,255,124,255,122,255,120,255,119,255,117,255,115,255,113,255,111,255,110,255,108,255,106,255,104,255,102,255,100,255,99,255,97,255,95,255,93,255,91,255,89,255,87,255,85,255,83,255,81,255,80,255,78,255,76,255,74,255,72,255,70,255,68,255,66,255,64,255,62,255,60,255,58,255,56,255,54,255,51,255,49,255,47,255,45,255,43,255,41,255,39,255,37,255,35,255,33,255,31,255,28,255,26,255,24,255,22,255,20,255,18,255,16,255,13,255,11,255,9,255,7,255,5,255,2,255,0,255,254,254,252,254,249,254,247,254,245,254,243,254,240,254,238,254,236,254,234,254,231,254,229,254,227,254,224,254,222,254,220,254,217,254,215,254,213,254,210,254,208,254,206,254,203,254,201,254,199,254,196,254,194,254,192,254,189,254,187,254,184,254,182,254,180,254,177,254,175,254,172,254,170,254,167,254,165,254,163,254,160,254,158,254,155,254,153,254,150,254,148,254,145,254,143,254,140,254,138,254,135,254,133,254,130,254,128,254,125,254,123,254,120,254,118,254,115,254,113,254,110,254,108,254,105,254,103,254,100,254,98,254,95,254,93,254,90,254,88,254,85,254,82,254,80,254,77,254,75,254,72,254,70,254,67,254,64,254,62,254,59,254,57,254,54,254,51,254,49,254,46,254,44,254,41,254,38,254,36,254,33,254,31,254,28,254,25,254,23,254,20,254,17,254,15,254,12,254,10,254,7,254,4,254,2,254,255,253,252,253,250,253,247,253,245,253,242,253,239,253,237,253,234,253,231,253,229,253,226,253,223,253,221,253,218,253,215,253,213,253,210,253,207,253,205,253,202,253,199,253,197,253,194,253,191,253,189,253,186,253,183,253,181,253,178,253,175,253,173,253,170,253,167,253,165,253,162,253,159,253,157,253,154,253,151,253,149,253,146,253,143,253,141,253,138,253,135,253,133,253,130,253,127,253,125,253,122,253,119,253,117,253,114,253,111,253,109,253,106,253,103,253,101,253,98,253,96,253,93,253,90,253,88,253,85,253,82,253,80,253,77,253,74,253,72,253,69,253,66,253,64,253,61,253,59,253,56,253,53,253,51,253,48,253,45,253,43,253,40,253,38,253,35,253,32,253,30,253,27,253,24,253,22,253,19,253,17,253,14,253,11,253,9,253,6,253,4,253,1,253,255,252,252,252,249,252,247,252,244,252,242,252,239,252,237,252,234,252,231,252,229,252,226,252,224,252,221,252,219,252,216,252,214,252,211,252,209,252,206,252,204,252,201,252,199,252,196,252,194,252,191,252,189,252,186,252,184,252,181,252,179,252,176,252,174,252,171,252,169,252,166,252,164,252,161,252,159,252,157,252,154,252,152,252,149,252,147,252,144,252,142,252,140,252,137,252,135,252,132,252,130,252,128,252,125,252,123,252,121,252,118,252,116,252,113,252,111,252,109,252,106,252,104,252,102,252,100,252,97,252,95,252,93,252,90,252,88,252,86,252,83,252,81,252,79,252,77,252,74,252,72,252,70,252,68,252,66,252,63,252,61,252,59,252,57,252,55,252,52,252,50,252,48,252,46,252,44,252,42,252,39,252,37,252,35,252,33,252,31,252,29,252,27,252,25,252,22,252,20,252,18,252,16,252,14,252,12,252,10,252,8,252,6,252,4,252,2,252,0,252,254,251,252,251,250,251,248,251,246,251,244,251,242,251,240,251,238,251,236,251,234,251,233,251,231,251,229,251,227,251,225,251,223,251,221,251,219,251,218,251,216,251,214,251,212,251,210,251,209,251,207,251,205,251,203,251,201,251,200,251,198,251,196,251,195,251,193,251,191,251,189,251,188,251,186,251,184,251,183,251,181,251,179,251,178,251,176,251,175,251,173,251,171,251,170,251,168,251,167,251,165,251,164,251,162,251,161,251,159,251,158,251,156,251,155,251,153,251,152,251,150,251,149,251,147,251,146,251,145,251,143,251,142,251,140,251,139,251,138,251,136,251,135,251,134,251,132,251,131,251], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([130,251,129,251,127,251,126,251,125,251,124,251,122,251,121,251,120,251,119,251,118,251,117,251,115,251,114,251,113,251,112,251,111,251,110,251,109,251,108,251,107,251,106,251,105,251,104,251,103,251,102,251,101,251,100,251,99,251,98,251,97,251,96,251,95,251,94,251,93,251,93,251,92,251,91,251,90,251,89,251,88,251,88,251,87,251,86,251,85,251,85,251,84,251,83,251,83,251,82,251,81,251,81,251,80,251,79,251,79,251,78,251,78,251,77,251,76,251,76,251,75,251,75,251,74,251,74,251,73,251,73,251,73,251,72,251,72,251,71,251,71,251,71,251,70,251,70,251,70,251,69,251,69,251,69,251,69,251,68,251,68,251,68,251,68,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,68,251,68,251,68,251,68,251,68,251,69,251,69,251,69,251,70,251,70,251,70,251,71,251,71,251,72,251,72,251,72,251,73,251,73,251,74,251,74,251,75,251,75,251,76,251,76,251,77,251,78,251,78,251,79,251,80,251,80,251,81,251,82,251,82,251,83,251,84,251,85,251,85,251,86,251,87,251,88,251,89,251,90,251,91,251,92,251,93,251,93,251,94,251,95,251,96,251,98,251,99,251,100,251,101,251,102,251,103,251,104,251,105,251,106,251,108,251,109,251,110,251,111,251,113,251,114,251,115,251,117,251,118,251,119,251,121,251,122,251,124,251,125,251,127,251,128,251,130,251,131,251,133,251,134,251,136,251,137,251,139,251,141,251,142,251,144,251,146,251,147,251,149,251,151,251,153,251,155,251,156,251,158,251,160,251,162,251,164,251,166,251,168,251,170,251,172,251,174,251,176,251,178,251,180,251,182,251,184,251,186,251,188,251,191,251,193,251,195,251,197,251,200,251,202,251,204,251,206,251,209,251,211,251,214,251,216,251,218,251,221,251,223,251,226,251,228,251,231,251,233,251,236,251,239,251,241,251,244,251,247,251,249,251,252,251,255,251,2,252,4,252,7,252,10,252,13,252,16,252,19,252,22,252,25,252,27,252,30,252,33,252,37,252,40,252,43,252,46,252,49,252,52,252,55,252,58,252,62,252,65,252,68,252,71,252,75,252,78,252,81,252,85,252,88,252,92,252,95,252,99,252,102,252,106,252,109,252,113,252,116,252,120,252,124,252,127,252,131,252,135,252,138,252,142,252,146,252,150,252,154,252,158,252,161,252,165,252,169,252,173,252,177,252,181,252,185,252,189,252,193,252,198,252,202,252,206,252,210,252,214,252,218,252,223,252,227,252,231,252,236,252,240,252,244,252,249,252,253,252,2,253,6,253,11,253,15,253,20,253,24,253,29,253,34,253,38,253,43,253,48,253,53,253,57,253,62,253,67,253,72,253,77,253,82,253,86,253,91,253,96,253,101,253,106,253,112,253,117,253,122,253,127,253,132,253,137,253,142,253,148,253,153,253,158,253,164,253,169,253,174,253,180,253,185,253,191,253,196,253,202,253,207,253,213,253,218,253,224,253,230,253,235,253,241,253,247,253,253,253,2,254,8,254,14,254,20,254,26,254,32,254,38,254,44,254,50,254,56,254,62,254,68,254,74,254,80,254,87,254,93,254,99,254,105,254,112,254,118,254,124,254,131,254,137,254,144,254,150,254,157,254,163,254,170,254,176,254,183,254,190,254,196,254,203,254,210,254,217,254,223,254,230,254,237,254,244,254,251,254,2,255,9,255,16,255,23,255,30,255,37,255,44,255,51,255,58,255,66,255,73,255,80,255,87,255,95,255,102,255,110,255,117,255,124,255,132,255,139,255,147,255,155,255,162,255,170,255,178,255,185,255,193,255,201,255,209,255,216,255,224,255,232,255,240,255,248,255,0,0,8,0,16,0,24,0,32,0,41,0,49,0,58,0,66,0,75,0,83,0,92,0,100,0,109,0,118,0,127,0,136,0,145,0,154,0,163,0,172,0,182,0,191,0,200,0,210,0,219,0,229,0,238,0,248,0,2,1,12,1,21,1,31,1,41,1,51,1,61,1,71,1,82,1,92,1,102,1,113,1,123,1,133,1,144,1,155,1,165,1,176,1,187,1,197,1,208,1,219,1,230,1,241,1,252,1,8,2,19,2,30,2,41,2,53,2,64,2,76,2,87,2,99,2,110,2,122,2,134,2,146,2,157,2,169,2,181,2,193,2,205,2,217,2,230,2,242,2,254,2,10,3,23,3,35,3,48,3,60,3,73,3,86,3,98,3,111,3,124,3,137,3,149,3,162,3,175,3,188,3,202,3,215,3,228,3,241,3,254,3,12,4,25,4,39,4,52,4,66,4,79,4,93,4,107,4,120,4,134,4,148,4,162,4,176,4,190,4,204,4,218,4,232,4,246,4,4,5,18,5,33,5,47,5,62,5,76,5,90,5,105,5,120,5,134,5,149,5,164,5,178,5,193,5,208,5,223,5,238,5,253,5,12,6,27,6,42,6,57,6,72,6,88,6,103,6,118,6,134,6,149,6,165,6,180,6,196,6,211,6,227,6,243,6,2,7,18,7,34,7,50,7,66,7,82,7,98,7,114,7,130,7,146,7,162,7,178,7,194,7,211,7,227,7,243,7,4,8,20,8,36,8,53,8,69,8,86,8,103,8,119,8,136,8,153,8,170,8,186,8,203,8,220,8,237,8,254,8,15,9,32,9,49,9,66,9,83,9,101,9,118,9,135,9,152,9,170,9,187,9,205,9,222,9,239,9,1,10,19,10,36,10,54,10,71,10,89,10,107,10,125,10,142,10,160,10,178,10,196,10,214,10,232,10,250,10,12,11,30,11,48,11,66,11,85,11,103,11,121,11,139,11,158,11,176,11,194,11,213,11,231,11,250,11,12,12,31,12,49,12,68,12,87,12,105,12,124,12,143,12,161,12,180,12,199,12,218,12,237,12,0,13,19,13,38,13,57,13,76,13,95,13,114,13,133,13,152,13,171,13,190,13,210,13,229,13,248,13,11,14,31,14,50,14,70,14,89,14,109,14,128,14,148,14,167,14,187,14,206,14,226,14,245,14,9,15,29,15,49,15,68,15,88,15,108,15,128,15,148,15,167,15,187,15,207,15,227,15,247,15,11,16,31,16,51,16,71,16,92,16,112,16,132,16,152,16,172,16,192,16,213,16,233,16,253,16,18,17,38,17,58,17,79,17,99,17,119,17,140,17,160,17,181,17,201,17,222,17,243,17,7,18,28,18,48,18,69,18,90,18,110,18,131,18,152,18,172,18,193,18,214,18,235,18,0,19,21,19,41,19,62,19,83,19,104,19,125,19,146,19,167,19,188,19,209,19,230,19,251,19,16,20,37,20,58,20,79,20,101,20,122,20,143,20,164,20,185,20,207,20,228,20,249,20,14,21,36,21,57,21,78,21,100,21,121,21,142,21,164,21,185,21,206,21,228,21,249,21,15,22,36,22,58,22,79,22,101,22,122,22,144,22,165,22,187,22,209,22,230,22,252,22,17,23,39,23,61,23,82,23,104,23,126,23,147,23,169,23,191,23,213,23,234,23,0,24,22,24,44,24,65,24,87,24,109,24,131,24,153,24,174,24,196,24,218,24,240,24,6,25,28,25,50,25,72,25,93,25,115,25,137,25,159,25,181,25,203,25,225,25,247,25,13,26,35,26,57,26,79,26,101,26,123,26,145,26,167,26,189,26,211,26,233,26,255,26,22,27,44,27,66,27,88,27,110,27,132,27,154,27,176,27,198,27,220,27,243,27,9,28,31,28,53,28,75,28,97,28,120,28,142,28,164,28,186,28,208,28,230,28,253,28,19,29,41,29,63,29,85,29,107,29,130,29,152,29,174,29,196,29,219,29,241,29,7,30,29,30,51,30,74,30,96,30,118,30,140,30,162,30,185,30,207,30,229,30,251,30,18,31,40,31,62,31,84,31,106,31,129,31,151,31,173,31,195,31,218,31,240,31,6,32,28,32,50,32,73,32,95,32,117,32,139,32,161,32,184,32,206,32,228,32,250,32,16,33,39,33,61,33,83,33,105,33,127,33,149,33,172,33,194,33,216,33,238,33,4,34,26,34,48,34,71,34,93,34,115,34,137,34,159,34,181,34,203,34,225,34,247,34,14,35,36,35,58,35,80,35,102,35,124,35,146,35,168,35,190,35,212,35,234,35,0,36,22,36,44,36,66,36,88,36,110,36,132,36,154,36,176,36,198,36,220,36,242,36,7,37,29,37,51,37,73,37,95,37,117,37,139,37,161,37,181,37,204,37,226,37,248,37,14,38,35,38,56,38,78,38,101,38,123,38,144,38,165,38,187,38,208,38,231,38,253,38,18,39,39,39,61,39,84,39,104,39,126,39,148,39,168,39,191,39,212,39,233,39,255,39,20,40,43,40,63,40,85,40,106,40,128,40,149,40,170,40,191,40,213,40,234,40,0,41,21,41,42,41,64,41,85,41,106,41,127,41,148,41,170,41,191,41,212,41,232,41,254,41,20,42,40,42,62,42,82,42,104,42,124,42,146,42,166,42,187,42,207,42,230,42,250,42,15,43,35,43,56,43,76,43,99,43,119,43,140,43,160,43,181,43,201,43,223,43,243,43,8,44,28,44,49,44,69,44,90,44,110,44,130,44,151,44,172,44,193,44,213,44,234,44,254,44,18,45,39,45,58,45,79,45,99,45,120,45,140,45,160,45,180,45,200,45,221,45,241,45,4,46,25,46,45,46,63,46,84,46,104,46,124,46,144,46,164,46,184,46,204,46,222,46,243,46,7,47,27,47,47,47,65,47,86,47,105,47,125,47,144,47,163,47,183,47,203,47,222,47,241,47,5,48,24,48,44,48,63,48,82,48,102,48,120,48,139,48,160,48,178,48,197,48,216,48,236,48,254,48,18,49,36,49,55,49,74,49,93,49,111,49,131,49,150,49,168,49,187,49,206,49,224,49,243,49,6,50,23,50,42,50,60,50,79,50,98,50,116,50,134,50,153,50,171,50,189,50,208,50,226,50,244,50,6,51,24,51,42,51,60,51,78,51,96,51,114,51,132,51,149,51,168,51,185,51,202,51,221,51,238,51,0,52,18,52,35,52,53,52,71,52,87,52,105,52,123,52,139,52,157,52,174,52,192,52,209,52,226,52,244,52,4,53,21,53,39,53,55,53,73,53,89,53,105,53,123,53,139,53,156,53,173,53,190,53,207,53,223,53,240,53,255,53,16,54,33,54,49,54,66,54,82,54,99,54,115,54,131,54,147,54,162,54,179,54,195,54,211,54,227,54,243,54,2,55,19,55,35,55,50,55,66,55,81,55,97,55,112,55,128,55,143,55,159,55,174,55,190,55,205,55,221,55,236,55,250,55,10,56,25,56,40,56,55,56,70,56,84,56,99,56,114,56,129,56,144,56,158,56,173,56,187,56,202,56,217,56,231,56,246,56,3,57,18,57,33,57,46,57,61,57,76,57,89,57,104,57,117,57,131,57,145,57,160,57,172,57,186,57,201,57,214,57,227,57,241,57,254,57,12,58,26,58,39,58,52,58,65,58,79,58,92,58,105,58,118,58,131,58,144,58,156,58,169,58,183,58,195,58,208,58,219,58,233,58,246,58,2,59,14,59,27,59,39,59,51,59,63,59,76,59,88,59,101,59,112,59,124,59,136,59,148,59,160,59,172,59,183,59,195,59,206,59,217,59,229,59,241,59,252,59,7,60,19,60,30,60,41,60,52,60,63,60,73,60,86,60,96,60,107,60,118,60,129,60,139,60,149,60,160,60,170,60,180,60,192,60,202,60,212,60,222,60,232,60,242,60,253,60,7,61,17,61,26,61,36,61,46,61,56,61,65,61,75,61,84,61,93,61,103,61,113,61,122,61,131,61,140,61,149,61,158,61,167,61,176,61,185,61,194,61,202,61,211,61,220,61,227,61,237,61,245,61,254,61,5,62,14,62,22,62,31,62,38,62,46,62,54,62,62,62,69,62,77,62,85,62,92,62,101,62,108,62,116,62,123,62,130,62,137,62,143,62,151,62,158,62,166,62,172,62,180,62,186,62,192,62,199,62,205,62,213,62,220,62,225,62,232,62,237,62,244,62,250,62,0,63,5,63,12,63,18,63,23,63,30,63,35,63,41,63,46,63,52,63,57,63,63,63,68,63,73,63,78,63,83,63,88,63,92,63,97,63,102,63,107,63,111,63,116,63,119,63,125,63,129,63,134,63,137,63,141,63,146,63,150,63,154,63,157,63,162,63,165,63,169,63,171,63,176,63,179,63,181,63,186,63,189,63,192,63,194,63,198,63,201,63,203,63,207,63,209,63,212,63,214,63,217,63,219,63,221,63,223,63,226,63,229,63,230,63,232,63,233,63,236,63,238,63,238,63,241,63,242,63,243,63,245,63,246,63,248,63,249,63,249,63,251,63,251,63,252,63,253,63,253,63,253,63,254,63,255,63,0,64,0,64,0,64,0,64,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,87,1,0,0,107,1,0,0,129,1,0,0,152,1,0,0,176,1,0,0,202,1,0,0,229,1,0,0,2,2,0,0,32,2,0,0,65,2,0,0,99,2,0,0,135,2,0,0,174,2,0,0,0,0,0,0,32,0,0,0,32,0,0,0,64,0,0,0,64,0,0,0,96,0,0,0,96,0,0,0,128,0,0,0,128,0,0,0,224,0,0,0,224,0,0,0,192,0,0,0,0,0,0,0,54,110,192,250,150,42,235,238,3,74,162,219,170,73,170,234,2,0,0,0,147,241,70,174,183,88,195,157,139,95,188,152,191,35,122,67,4,0,0,0,112,170,3,77,251,47,31,115,217,253,186,254,19,27,183,1,1,0,0,0,233,152,1,44,112,14,180,58,240,50,23,17,48,88,41,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,77,80,68,73,82,0,0,47,116,109,112,0,0,0,0,47,0,0,0,0,0,0,0,0,3,7,12,15,12,7,3,0,3,7,12,15,12,7,3,0,4,7,12,16,12,7,4,0,4,7,12,16,12,7,4,0,3,8,12,15,12,8,3,0,3,8,12,15,12,8,3,0,4,8,12,16,12,8,4,0,4,8,12,16,12,8,4,0,5,8,12,17,12,8,5,0,5,8,12,17,12,8,5,0,5,9,12,17,12,9,5,0,5,9,12,17,12,9,5,12,0,7,0,3,0,7,0,12,0,7,0,3,0,7,0,12,0,7,0,4,0,7,0,12,0,7,0,4,0,7,0,0,3,7,3,7,12,7,12,15,12,7,12,7,3,7,3,0,4,7,4,7,12,7,12,16,12,7,12,7,4,7,4,31,27,24,19,15,12,7,3,0,3,7,12,15,19,24,27,31,28,24,19,16,12,7,4,0,4,7,12,16,19,24,28,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,24,12,0,12,24,12,0,12,24,12,0,12,24,12,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+25700);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  var FS=undefined;
  
  
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  
  var SOCKFS=undefined;function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }


  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      if (!stream.currReading) {
        try {
          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
          stream.currReading = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
      }
      if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = stream.currReading[stream.position++];
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        try {
          // child may have been removed since we started to read this directory
          var child = FS.lookupNode(stream.node, name);
        } catch (e) {
          // skip to the next entry (not infinite since position is incremented until currReading.length)
          return _readdir_r(dirp, entry, result);
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=stream.position;
      HEAP32[(((entry)+(8))>>2)]=268;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      // extra effort to support printf, even without a filesystem. very partial, very hackish
      var result = __formatString(format, varargs);
      var string = intArrayToString(result);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      Module.print(string);
      return result.length;
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;


  function _fdopen(fildes, mode) {
      // FILE *fdopen(int fildes, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fdopen.html
      mode = Pointer_stringify(mode);
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if ((mode.indexOf('w') != -1 && !stream.isWrite) ||
          (mode.indexOf('r') != -1 && !stream.isRead) ||
          (mode.indexOf('a') != -1 && !stream.isAppend) ||
          (mode.indexOf('+') != -1 && (!stream.isRead || !stream.isWrite))) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else {
        stream.error = false;
        stream.eof = false;
        return FS.getPtrForStream(stream);
      }
    }


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  var _abs=Math_abs;

  
  var PATH=undefined;
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function _getpid() {  return PROCINFO.pid;  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream;
          try {
            newStream = FS.open(stream.path, stream.flags, 0, arg);
          } catch (e) {
            FS.handleFSError(e);
            return -1;
          }
          return newStream.fd;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.flags |= arg;
          return 0;
        case 12:
        case 12:
          var arg = HEAP32[((varargs)>>2)];
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        case 13:
        case 14:
        case 13:
        case 14:
          // Pretend that the locking is successful.
          return 0;
        case 8:
        case 9:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }function _dup(fildes) {
      // int dup(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/dup.html
      return _fcntl(fildes, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));  // F_DUPFD.
    }

  function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      var stream = FS.getStream(fd);
      if (stream.currReading) stream.currReading = null;
      return _close(fd);
    }

  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;


  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);function _puts(s) {
      // extra effort to support puts, even without a filesystem. very partial, very hackish
      var result = Pointer_stringify(s);
      var string = result.substr(0);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      Module.print(string);
      return result.length;
    }
  
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;


  var _BItoD=true;

  var _sin=Math_sin;

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

   
  Module["_strcpy"] = _strcpy;


  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_readdir_r": _readdir_r, "_sin": _sin, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fread": _fread, "_lseek": _lseek, "_open": _open, "_fstat": _fstat, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___assert_fail": ___assert_fail, "_write": _write, "_fcntl": _fcntl, "___buildEnvironment": ___buildEnvironment, "_dup": _dup, "_opendir": _opendir, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "__reallyNegative": __reallyNegative, "_getpid": _getpid, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_perror": _perror, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_fdopen": _fdopen, "_fseek": _fseek, "_closedir": _closedir, "_readdir": _readdir, "_pread": _pread, "_puts": _puts, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "_feof": _feof, "_ftell": _ftell, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_fgetc": _fgetc, "_printf": _printf, "_read": _read, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_abs": _abs, "__formatString": __formatString, "_fputs": _fputs, "_fopen": _fopen, "_close": _close, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _readdir_r=env._readdir_r;
  var _sin=env._sin;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var _open=env._open;
  var _fstat=env._fstat;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___assert_fail=env.___assert_fail;
  var _write=env._write;
  var _fcntl=env._fcntl;
  var ___buildEnvironment=env.___buildEnvironment;
  var _dup=env._dup;
  var _opendir=env._opendir;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var __reallyNegative=env.__reallyNegative;
  var _getpid=env._getpid;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _perror=env._perror;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _fdopen=env._fdopen;
  var _fseek=env._fseek;
  var _closedir=env._closedir;
  var _readdir=env._readdir;
  var _pread=env._pread;
  var _puts=env._puts;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var _feof=env._feof;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _printf=env._printf;
  var _read=env._read;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _abs=env._abs;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _fopen=env._fopen;
  var _close=env._close;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _outputrle($chr,$outputfunc,$rd,$io) {
 $chr = $chr|0;
 $outputfunc = $outputfunc|0;
 $rd = $rd|0;
 $io = $io|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chr;
 $1 = $outputfunc;
 $2 = $rd;
 $3 = $io;
 $4 = $0;
 $5 = ($4|0)==(-1);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 if ($5) {
  HEAP32[$7>>2] = 0;
  $8 = $2;
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $0;
 if (!($10)) {
  $26 = ($11|0)==(144);
  if ($26) {
   $27 = $2;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = 1;
   STACKTOP = sp;return;
  } else {
   $29 = $1;
   $30 = $0;
   $31 = $3;
   FUNCTION_TABLE_vii[$29 & 255]($30,$31);
   $32 = $0;
   $33 = $2;
   HEAP32[$33>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $12 = ($11|0)==(0);
 L13: do {
  if ($12) {
   $13 = $1;
   $14 = $3;
   FUNCTION_TABLE_vii[$13 & 255](144,$14);
  } else {
   $f = 1;
   while(1) {
    $15 = $f;
    $16 = $0;
    $17 = ($15|0)<($16|0);
    if (!($17)) {
     break L13;
    }
    $18 = $1;
    $19 = $2;
    $20 = HEAP32[$19>>2]|0;
    $21 = $3;
    FUNCTION_TABLE_vii[$18 & 255]($20,$21);
    $22 = $f;
    $23 = (($22) + 1)|0;
    $f = $23;
   }
  }
 } while(0);
 $24 = $2;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function _read_lzw_dynamic($f,$buf,$max_bits,$use_rle,$in_len,$orig_len,$q) {
 $f = $f|0;
 $buf = $buf|0;
 $max_bits = $max_bits|0;
 $use_rle = $use_rle|0;
 $in_len = $in_len|0;
 $orig_len = $orig_len|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf2 = 0, $data = 0, $pos = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $buf;
 $3 = $max_bits;
 $4 = $use_rle;
 $5 = $in_len;
 $6 = $orig_len;
 $7 = $q;
 $8 = (_malloc(1065020)|0);
 $data = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $10 = $5;
 $11 = (_malloc($10)|0);
 $buf2 = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $13 = $1;
  $14 = (_ftell(($13|0))|0);
  $pos = $14;
  $15 = $buf2;
  $16 = $5;
  $17 = $1;
  (_fread(($15|0),1,($16|0),($17|0))|0);
  $18 = $buf2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $22 = $6;
  $23 = $7;
  $24 = $data;
  $25 = (__convert_lzw_dynamic($18,$19,$20,$21,$22,$23,$24)|0);
  $b = $25;
  $26 = $2;
  $27 = $b;
  $28 = $6;
  _memcpy(($26|0),($27|0),($28|0))|0;
  $29 = $7;
  $30 = $29 & 16;
  $31 = ($30|0)!=(0);
  $32 = $data;
  $33 = ((($32)) + 1065016|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 3)|0;
  $36 = $35 & -4;
  $37 = $31 ? $36 : $34;
  $size = $37;
  $38 = $1;
  $39 = $pos;
  $40 = $size;
  $41 = (($39) + ($40))|0;
  (_fseek(($38|0),($41|0),0)|0);
  $42 = $b;
  _free($42);
  $43 = $buf2;
  _free($43);
  $44 = $data;
  _free($44);
  $45 = $2;
  $0 = $45;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __convert_lzw_dynamic($data_in,$max_bits,$use_rle,$in_len,$orig_len,$q,$data) {
 $data_in = $data_in|0;
 $max_bits = $max_bits|0;
 $use_rle = $use_rle|0;
 $in_len = $in_len|0;
 $orig_len = $orig_len|0;
 $q = $q|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $csize = 0, $data_out = 0, $first = 0, $k = 0, $newcode = 0, $noadd = 0, $oldcode = 0, $or$cond = 0, $or$cond3 = 0, $orgcsize = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $newcode = sp + 16|0;
 $1 = $data_in;
 $2 = $max_bits;
 $3 = $use_rle;
 $4 = $in_len;
 $5 = $orig_len;
 $6 = $q;
 $7 = $data;
 $k = 0;
 $first = 1;
 $8 = $6;
 $9 = $7;
 $10 = ((($9)) + 786480|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = $7;
 $13 = ((($12)) + 786448|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = 1 << $14;
 $16 = $7;
 $17 = ((($16)) + 786484|0);
 HEAP32[$17>>2] = $15;
 $18 = $5;
 $19 = (_malloc($18)|0);
 $data_out = $19;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $0 = 0;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $21 = $1;
 $22 = $7;
 $23 = ((($22)) + 786464|0);
 HEAP32[$23>>2] = $21;
 $24 = $1;
 $25 = $4;
 $26 = (($24) + ($25)|0);
 $27 = $7;
 $28 = ((($27)) + 786464|0);
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $26;
 $30 = $data_out;
 $31 = $7;
 $32 = ((($31)) + 786464|0);
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $30;
 $34 = $data_out;
 $35 = $5;
 $36 = (($34) + ($35)|0);
 $37 = $7;
 $38 = ((($37)) + 786464|0);
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = $36;
 $40 = $7;
 $41 = ((($40)) + 786440|0);
 HEAP32[$41>>2] = 0;
 $42 = $7;
 $43 = ((($42)) + 786436|0);
 HEAP32[$43>>2] = 0;
 $44 = $7;
 $45 = ((($44)) + 786444|0);
 HEAP32[$45>>2] = 0;
 $46 = $7;
 $47 = ((($46)) + 786456|0);
 $48 = $7;
 $49 = ((($48)) + 786464|0);
 _outputrle(-1,0,$47,$49);
 $50 = $7;
 $51 = ((($50)) + 786452|0);
 HEAP32[$51>>2] = 0;
 $csize = 9;
 $52 = $2;
 $53 = ($52|0)==(0);
 if ($53) {
  $54 = $7;
  $55 = ((($54)) + 786452|0);
  HEAP32[$55>>2] = 1;
  $csize = 12;
  $56 = $7;
  $57 = ((($56)) + 786484|0);
  HEAP32[$57>>2] = 4096;
 }
 $58 = $csize;
 $orgcsize = $58;
 $59 = $orgcsize;
 $60 = $7;
 _inittable($59,$60);
 HEAP32[$newcode>>2] = 0;
 $oldcode = 0;
 $61 = $7;
 $62 = ((($61)) + 786480|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $63 & 32;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $7;
  $67 = ((($66)) + 786464|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 1|0);
  HEAP32[$67>>2] = $69;
 }
 $70 = $2;
 $71 = ($70|0)==(16);
 if ($71) {
  $72 = $7;
  $73 = ((($72)) + 786464|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($74)) + 1|0);
  HEAP32[$73>>2] = $75;
  $76 = HEAP8[$74>>0]|0;
  $77 = $76&255;
  $78 = 1 << $77;
  $79 = $7;
  $80 = ((($79)) + 786484|0);
  HEAP32[$80>>2] = $78;
 }
 $81 = $7;
 $82 = ((($81)) + 786484|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $2;
 $85 = 1 << $84;
 $86 = ($83|0)>($85|0);
 if ($86) {
  $0 = 0;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $87 = $7;
 $88 = ((($87)) + 1065016|0);
 HEAP32[$88>>2] = 0;
 while(1) {
  $89 = $csize;
  $90 = $7;
  $91 = (_readcode($newcode,$89,$90)|0);
  $92 = ($91|0)!=(0);
  if (!($92)) {
   break;
  }
  $93 = $7;
  $94 = ((($93)) + 786480|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 1;
  $97 = ($96|0)!=(0);
  $98 = HEAP32[$newcode>>2]|0;
  $99 = ($98|0)==(257);
  $or$cond = $97 & $99;
  if ($or$cond) {
   break;
  }
  $noadd = 0;
  $100 = $first;
  $101 = ($100|0)!=(0);
  if ($101) {
   $102 = HEAP32[$newcode>>2]|0;
   $k = $102;
   $first = 0;
   $103 = $7;
   $104 = ((($103)) + 786452|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($105|0)!=(0);
   if ($106) {
    $noadd = 1;
   }
  }
  $107 = HEAP32[$newcode>>2]|0;
  $108 = ($107|0)==(256);
  if ($108) {
   $109 = $7;
   $110 = ((($109)) + 786452|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)!=(0);
   if (!($112)) {
    $113 = $7;
    $114 = ((($113)) + 524288|0);
    HEAP32[$114>>2] = 255;
    $115 = $7;
    $116 = ((($115)) + 786480|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $117 & 8;
    $119 = ($118|0)!=(0);
    if ($119) {
     $120 = $7;
     $121 = ((($120)) + 524288|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (($122) + 1)|0;
     HEAP32[$121>>2] = $123;
    }
    $124 = $csize;
    $125 = $7;
    _code_resync($124,$125);
    $126 = $orgcsize;
    $csize = $126;
    $127 = $csize;
    $128 = $7;
    $129 = (_readcode($newcode,$127,$128)|0);
    $130 = ($129|0)!=(0);
    if (!($130)) {
     break;
    }
   }
  }
  $131 = $7;
  $132 = ((($131)) + 786452|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($133|0)!=(0);
  if ($134) {
   label = 24;
  } else {
   $135 = HEAP32[$newcode>>2]|0;
   $136 = $7;
   $137 = ((($136)) + 524288|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($135|0)<=($138|0);
   if ($139) {
    label = 26;
   } else {
    label = 24;
   }
  }
  do {
   if ((label|0) == 24) {
    label = 0;
    $140 = $7;
    $141 = ((($140)) + 786452|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)!=(0);
    if ($143) {
     $144 = HEAP32[$newcode>>2]|0;
     $145 = $7;
     $146 = ((($145)) + 262144|0);
     $147 = (($146) + ($144<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)!=(-1);
     if ($149) {
      label = 26;
      break;
     }
    }
    $155 = $oldcode;
    $156 = $7;
    _outputstring($155,$156);
    $157 = $k;
    $158 = $7;
    _outputchr($157,$158);
   }
  } while(0);
  if ((label|0) == 26) {
   label = 0;
   $150 = HEAP32[$newcode>>2]|0;
   $151 = $7;
   _outputstring($150,$151);
   $152 = HEAP32[$newcode>>2]|0;
   $153 = $7;
   $154 = (_findfirstchr($152,$153)|0);
   $k = $154;
  }
  $159 = $7;
  $160 = ((($159)) + 524288|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $7;
  $163 = ((($162)) + 786484|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) - 1)|0;
  $166 = ($161|0)==($165|0);
  $167 = $noadd;
  $168 = ($167|0)!=(0);
  $or$cond3 = $166 | $168;
  if (!($or$cond3)) {
   $169 = $oldcode;
   $170 = $k;
   $171 = $7;
   (_addstring($169,$170,$171)|0);
   $172 = $7;
   $173 = ((($172)) + 524288|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $7;
   $176 = ((($175)) + 786484|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) - 1)|0;
   $179 = ($174|0)!=($178|0);
   if ($179) {
    $180 = $7;
    $181 = ((($180)) + 524288|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = $csize;
    $184 = 1 << $183;
    $185 = (($184) - 1)|0;
    $186 = ($182|0)==($185|0);
    if ($186) {
     $187 = $csize;
     $188 = (($187) + 1)|0;
     $csize = $188;
     $189 = $csize;
     $190 = (($189) - 1)|0;
     $191 = $7;
     _code_resync($190,$191);
    }
   }
  }
  $192 = HEAP32[$newcode>>2]|0;
  $oldcode = $192;
 }
 $193 = $7;
 $194 = ((($193)) + 786480|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = $195 ^ -1;
 $197 = $196 & 2;
 $198 = ($197|0)!=(0);
 if ($198) {
  $199 = $7;
  $200 = ((($199)) + 786464|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $7;
  $203 = ((($202)) + 786464|0);
  $204 = ((($203)) + 4|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($201|0)!=($205|0);
  if ($206) {
   $207 = $data_out;
   _free($207);
   $0 = 0;
   $209 = $0;
   STACKTOP = sp;return ($209|0);
  }
 }
 $208 = $data_out;
 $0 = $208;
 $209 = $0;
 STACKTOP = sp;return ($209|0);
}
function _inittable($orgcsize,$data) {
 $orgcsize = $orgcsize|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $f = 0, $numcols = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $orgcsize;
 $1 = $data;
 $2 = $0;
 $3 = (($2) - 1)|0;
 $4 = 1 << $3;
 $numcols = $4;
 $f = 0;
 while(1) {
  $5 = $f;
  $6 = ($5|0)<(65536);
  if (!($6)) {
   break;
  }
  $7 = $f;
  $8 = $1;
  $9 = ((($8)) + 262144|0);
  $10 = (($9) + ($7<<2)|0);
  HEAP32[$10>>2] = -1;
  $11 = $f;
  $12 = $1;
  $13 = (($12) + ($11<<2)|0);
  HEAP32[$13>>2] = -1;
  $14 = $f;
  $15 = $1;
  $16 = ((($15)) + 524292|0);
  $17 = (($16) + ($14<<2)|0);
  HEAP32[$17>>2] = -1;
  $18 = $f;
  $19 = (($18) + 1)|0;
  $f = $19;
 }
 $f = 0;
 while(1) {
  $20 = $f;
  $21 = ($20|0)<(4096);
  if (!($21)) {
   break;
  }
  $22 = $f;
  $23 = $1;
  $24 = ((($23)) + 1048632|0);
  $25 = (($24) + ($22<<2)|0);
  HEAP32[$25>>2] = -1;
  $26 = $f;
  $27 = (($26) + 1)|0;
  $f = $27;
 }
 $28 = $1;
 $29 = ((($28)) + 786452|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $1;
  $33 = ((($32)) + 524288|0);
  HEAP32[$33>>2] = -1;
  $f = 0;
  while(1) {
   $34 = $f;
   $35 = ($34|0)<(256);
   if (!($35)) {
    break;
   }
   $36 = $f;
   $37 = $1;
   (_addstring(65535,$36,$37)|0);
   $38 = $f;
   $39 = (($38) + 1)|0;
   $f = $39;
  }
  STACKTOP = sp;return;
 }
 $f = 0;
 while(1) {
  $40 = $f;
  $41 = $numcols;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $f;
  $44 = $f;
  $45 = $1;
  $46 = ((($45)) + 262144|0);
  $47 = (($46) + ($44<<2)|0);
  HEAP32[$47>>2] = $43;
  $48 = $f;
  $49 = (($48) + 1)|0;
  $f = $49;
 }
 $50 = $numcols;
 $51 = (($50) - 1)|0;
 $52 = $1;
 $53 = ((($52)) + 524288|0);
 HEAP32[$53>>2] = $51;
 $54 = $1;
 $55 = ((($54)) + 786480|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & 8;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $1;
 $60 = ((($59)) + 524288|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 STACKTOP = sp;return;
}
function _readcode($newcode,$numbits,$data) {
 $newcode = $newcode|0;
 $numbits = $numbits|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bitsfilled = 0, $got = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $newcode;
 $2 = $numbits;
 $3 = $data;
 $got = 0;
 $bitsfilled = 0;
 $4 = $1;
 HEAP32[$4>>2] = 0;
 while(1) {
  $5 = $bitsfilled;
  $6 = $2;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $3;
  $9 = ((($8)) + 786440|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 786464|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $3;
   $16 = ((($15)) + 786464|0);
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14>>>0)>=($18>>>0);
   if ($19) {
    label = 5;
    break;
   }
   $20 = $3;
   $21 = ((($20)) + 786464|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 1|0);
   HEAP32[$21>>2] = $23;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = $3;
   $27 = ((($26)) + 786436|0);
   HEAP32[$27>>2] = $25;
   $28 = $3;
   $29 = ((($28)) + 786440|0);
   HEAP32[$29>>2] = 8;
   $30 = $3;
   $31 = ((($30)) + 1065016|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$31>>2] = $33;
  }
  $34 = $3;
  $35 = ((($34)) + 786440|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $2;
  $38 = $bitsfilled;
  $39 = (($37) - ($38))|0;
  $40 = ($36|0)<($39|0);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 786440|0);
   $43 = HEAP32[$42>>2]|0;
   $got = $43;
  } else {
   $44 = $2;
   $45 = $bitsfilled;
   $46 = (($44) - ($45))|0;
   $got = $46;
  }
  $47 = $3;
  $48 = ((($47)) + 786452|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0);
  $51 = $3;
  $52 = ((($51)) + 786436|0);
  $53 = HEAP32[$52>>2]|0;
  if ($50) {
   $54 = $53 & 255;
   HEAP32[$52>>2] = $54;
   $55 = $got;
   $56 = $3;
   $57 = ((($56)) + 786436|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 << $55;
   HEAP32[$57>>2] = $59;
   $60 = $got;
   $61 = $bitsfilled;
   $62 = (($61) + ($60))|0;
   $bitsfilled = $62;
   $63 = $3;
   $64 = ((($63)) + 786436|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 >> 8;
   $67 = $2;
   $68 = $bitsfilled;
   $69 = (($67) - ($68))|0;
   $70 = $66 << $69;
   $71 = $1;
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 | $70;
   HEAP32[$71>>2] = $73;
   $74 = $got;
   $75 = $3;
   $76 = ((($75)) + 786440|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) - ($74))|0;
   HEAP32[$76>>2] = $78;
   continue;
  } else {
   $79 = $got;
   $80 = 1 << $79;
   $81 = (($80) - 1)|0;
   $82 = $53 & $81;
   $83 = $bitsfilled;
   $84 = $82 << $83;
   $85 = $1;
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 | $84;
   HEAP32[$85>>2] = $87;
   $88 = $got;
   $89 = $3;
   $90 = ((($89)) + 786436|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 >> $88;
   HEAP32[$90>>2] = $92;
   $93 = $got;
   $94 = $3;
   $95 = ((($94)) + 786440|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) - ($93))|0;
   HEAP32[$95>>2] = $97;
   $98 = $got;
   $99 = $bitsfilled;
   $100 = (($99) + ($98))|0;
   $bitsfilled = $100;
   continue;
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $101 = $1;
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)<(0);
 if (!($103)) {
  $104 = $1;
  $105 = HEAP32[$104>>2]|0;
  $106 = $3;
  $107 = ((($106)) + 786484|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) - 1)|0;
  $110 = ($105|0)>($109|0);
  if (!($110)) {
   $111 = $3;
   $112 = ((($111)) + 786444|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $115 = $3;
   $116 = ((($115)) + 786444|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $117 & 7;
   HEAP32[$116>>2] = $118;
   $0 = 1;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  }
 }
 $0 = 0;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _code_resync($old,$data) {
 $old = $old|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $old;
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 786480|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $1;
  $8 = ((($7)) + 786444|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 4;
   break;
  }
  $11 = $0;
  $12 = $1;
  $13 = (_readcode($tmp,$11,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _outputstring($code,$data) {
 $code = $code|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 786488|0);
 $ptr = $3;
 while(1) {
  $4 = $0;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(-1);
  if ($8) {
   $9 = $ptr;
   $10 = $1;
   $11 = ((($10)) + 786488|0);
   $12 = $1;
   $13 = ((($12)) + 786484|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($11) + ($14<<2)|0);
   $16 = ($9>>>0)<($15>>>0);
   $37 = $16;
  } else {
   $37 = 0;
  }
  $17 = $0;
  $18 = $1;
  $19 = ((($18)) + 262144|0);
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  if (!($37)) {
   break;
  }
  $22 = $ptr;
  $23 = ((($22)) + 4|0);
  $ptr = $23;
  HEAP32[$22>>2] = $21;
  $24 = $0;
  $25 = $1;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $0 = $27;
 }
 $28 = $1;
 _outputchr($21,$28);
 while(1) {
  $29 = $ptr;
  $30 = $1;
  $31 = ((($30)) + 786488|0);
  $32 = ($29>>>0)>($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $ptr;
  $34 = ((($33)) + -4|0);
  $ptr = $34;
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  _outputchr($35,$36);
 }
 STACKTOP = sp;return;
}
function _findfirstchr($code,$data) {
 $code = $code|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(-1);
 if ($6) {
  $7 = $0;
  $8 = $1;
  $9 = ((($8)) + 524292|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 262144|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _outputchr($chr,$data) {
 $chr = $chr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chr;
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 786448|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $0;
 $7 = $1;
 if ($5) {
  $8 = ((($7)) + 786456|0);
  $9 = $1;
  $10 = ((($9)) + 786464|0);
  _outputrle($6,213,$8,$10);
  STACKTOP = sp;return;
 } else {
  $11 = ((($7)) + 786464|0);
  _rawoutput($6,$11);
  STACKTOP = sp;return;
 }
}
function _addstring($oldcode,$chr,$data) {
 $oldcode = $oldcode|0;
 $chr = $chr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oldcode;
 $2 = $chr;
 $3 = $data;
 $4 = $3;
 $5 = ((($4)) + 524288|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $3;
 $9 = ((($8)) + 524288|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = ((($11)) + 786484|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 & $13;
 $15 = ($14|0)!=(0);
 $16 = $3;
 if ($15) {
  $17 = ((($16)) + 786484|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) - 1)|0;
  $20 = $3;
  $21 = ((($20)) + 524288|0);
  HEAP32[$21>>2] = $19;
  $0 = 1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $22 = ((($16)) + 524288|0);
 $23 = HEAP32[$22>>2]|0;
 $idx = $23;
 $24 = $3;
 $25 = ((($24)) + 786452|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $1;
  $29 = $2;
  $30 = $3;
  $31 = (_oldver_getidx($28,$29,$30)|0);
  $idx = $31;
  $32 = ($31|0)==(-1);
  if ($32) {
   $0 = 0;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 }
 $33 = $2;
 $34 = $idx;
 $35 = $3;
 $36 = ((($35)) + 262144|0);
 $37 = (($36) + ($34<<2)|0);
 HEAP32[$37>>2] = $33;
 $38 = $1;
 $39 = $3;
 $40 = ((($39)) + 786484|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38|0)>=($41|0);
 if ($42) {
  $0 = 1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $43 = $1;
 $44 = $idx;
 $45 = $3;
 $46 = (($45) + ($44<<2)|0);
 HEAP32[$46>>2] = $43;
 $47 = $1;
 $48 = $3;
 $49 = (($48) + ($47<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(-1);
 $52 = $1;
 if ($51) {
  $53 = $idx;
  $54 = $3;
  $55 = ((($54)) + 524292|0);
  $56 = (($55) + ($53<<2)|0);
  HEAP32[$56>>2] = $52;
 } else {
  $57 = $3;
  $58 = ((($57)) + 524292|0);
  $59 = (($58) + ($52<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $idx;
  $62 = $3;
  $63 = ((($62)) + 524292|0);
  $64 = (($63) + ($61<<2)|0);
  HEAP32[$64>>2] = $60;
 }
 $0 = 1;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _oldver_getidx($oldcode,$chr,$data) {
 $oldcode = $oldcode|0;
 $chr = $chr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $a = 0, $f = 0, $hashval = 0, $lasthash = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oldcode;
 $2 = $chr;
 $3 = $data;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5))|0;
 $7 = $6 | 2048;
 $8 = $7 & 65535;
 $a = $8;
 $9 = $a;
 $10 = $a;
 $11 = Math_imul($9, $10)|0;
 $12 = $11 >> 6;
 $13 = $12 & 4095;
 $hashval = $13;
 while(1) {
  $14 = $hashval;
  $15 = $3;
  $16 = ((($15)) + 262144|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(-1);
  if ($19) {
   $20 = $hashval;
   $21 = $3;
   $22 = ((($21)) + 1048632|0);
   $23 = (($22) + ($20<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(-1);
   $75 = $25;
  } else {
   $75 = 0;
  }
  $26 = $hashval;
  $27 = $3;
  if (!($75)) {
   break;
  }
  $28 = ((($27)) + 1048632|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $hashval = $30;
 }
 $31 = ((($27)) + 262144|0);
 $32 = (($31) + ($26<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(-1);
 $35 = $hashval;
 if ($34) {
  $0 = $35;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $lasthash = $35;
 $36 = $hashval;
 $37 = (($36) + 101)|0;
 $hashval = $37;
 $38 = $hashval;
 $39 = $38 & 4095;
 $hashval = $39;
 $40 = $hashval;
 $41 = $3;
 $42 = ((($41)) + 262144|0);
 $43 = (($42) + ($40<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(-1);
 if ($45) {
  $f = 0;
  while(1) {
   $46 = $f;
   $47 = $3;
   $48 = ((($47)) + 786484|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($46|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = $hashval;
   $52 = $3;
   $53 = ((($52)) + 262144|0);
   $54 = (($53) + ($51<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(-1);
   if ($56) {
    break;
   }
   $57 = $f;
   $58 = (($57) + 1)|0;
   $f = $58;
   $59 = $hashval;
   $60 = (($59) + 1)|0;
   $hashval = $60;
   $61 = $hashval;
   $62 = $61 & 4095;
   $hashval = $62;
  }
  $63 = $hashval;
  $64 = $3;
  $65 = ((($64)) + 786484|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  if ($67) {
   $0 = -1;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 }
 $68 = $hashval;
 $69 = $lasthash;
 $70 = $3;
 $71 = ((($70)) + 1048632|0);
 $72 = (($71) + ($69<<2)|0);
 HEAP32[$72>>2] = $68;
 $73 = $hashval;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _rawoutput($byte,$io) {
 $byte = $byte|0;
 $io = $io|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $byte;
 $1 = $io;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $9&255;
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 1|0);
 HEAP32[$12>>2] = $14;
 HEAP8[$13>>0] = $10;
 STACKTOP = sp;return;
}
function _abk_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $music = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $music = sp;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1097679467);
 if ($6) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $7 = $1;
 $8 = (_hio_read16b($7)|0);
 $9 = $8&65535;
 $10 = ($9|0)!=(3);
 if ($10) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $11 = $1;
 (_hio_seek($11,6,1)|0);
 $12 = $1;
 $13 = (_hio_read32b($12)|0);
 $14 = $music;
 $15 = $14;
 HEAP32[$15>>2] = $13;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = 0;
 $18 = $music;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $music;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $20;
 $28 = $1;
 $29 = (_hio_read32b($28)|0);
 $30 = $music;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = $32 | $29;
 $37 = $music;
 $38 = $37;
 HEAP32[$38>>2] = $36;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $35;
 $41 = $music;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43|0)!=(1663049760);
 $48 = ($46|0)!=(1299542889);
 $49 = $47 | $48;
 if ($49) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 } else {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _abk_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $file_size = 0, $first_sample_offset = 0;
 var $i = 0, $inst_section_size = 0, $j = 0, $k = 0, $main_header = 0, $mod = 0, $pattern = 0, $playlist = 0, $song = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $main_header = sp + 56|0;
 $song = sp + 16|0;
 $playlist = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ci = 0;
 $pattern = 0;
 $first_sample_offset = 0;
 $5 = $2;
 (_hio_seek($5,0,2)|0);
 $6 = $2;
 $7 = (_hio_tell($6)|0);
 $file_size = $7;
 $8 = $2;
 (_hio_seek($8,20,0)|0);
 $9 = $2;
 $10 = (_hio_read32b($9)|0);
 HEAP32[$main_header>>2] = $10;
 $11 = $2;
 $12 = (_hio_read32b($11)|0);
 $13 = ((($main_header)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = $2;
 $15 = (_hio_read32b($14)|0);
 $16 = ((($main_header)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[$main_header>>2]|0;
 $inst_section_size = $17;
 $18 = $2;
 $19 = $3;
 (_hio_seek($18,$19,0)|0);
 $20 = $1;
 _set_type($20,24,$vararg_buffer);
 $21 = $2;
 $22 = ((($main_header)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (20 + ($23))|0;
 $25 = (_read_abk_song($21,$song,$24)|0);
 $26 = ($25|0)<(0);
 if ($26) {
  $0 = -1;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $27 = $mod;
 $28 = ((($song)) + 18|0);
 (_copy_adjust($27,$28,16)|0);
 $29 = $2;
 $30 = ((($main_header)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (20 + ($31))|0;
 (_hio_seek($29,$32,0)|0);
 $33 = $mod;
 $34 = ((($33)) + 136|0);
 HEAP32[$34>>2] = 4;
 $35 = $2;
 $36 = (_hio_read16b($35)|0);
 $37 = $36&65535;
 $38 = $mod;
 $39 = ((($38)) + 128|0);
 HEAP32[$39>>2] = $37;
 $40 = $mod;
 $41 = ((($40)) + 136|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $mod;
 $44 = ((($43)) + 128|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = Math_imul($42, $45)|0;
 $47 = $mod;
 $48 = ((($47)) + 132|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = HEAP32[$main_header>>2]|0;
 $51 = (20 + ($50))|0;
 (_hio_seek($49,$51,0)|0);
 $52 = $2;
 $53 = (_hio_read16b($52)|0);
 $54 = $53&65535;
 $55 = $mod;
 $56 = ((($55)) + 140|0);
 HEAP32[$56>>2] = $54;
 $57 = $mod;
 $58 = ((($57)) + 140|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $mod;
 $61 = ((($60)) + 144|0);
 HEAP32[$61>>2] = $59;
 $62 = $mod;
 $63 = (_instrument_init($62)|0);
 $64 = ($63|0)<(0);
 if ($64) {
  $0 = -1;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $65 = $2;
 $66 = $inst_section_size;
 $67 = $mod;
 $68 = ((($67)) + 140|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (_read_abk_insts($65,$66,$69)|0);
 $ci = $70;
 $71 = HEAP32[$main_header>>2]|0;
 $72 = (20 + ($71))|0;
 $73 = $ci;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + ($74))|0;
 $first_sample_offset = $75;
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = $mod;
  $78 = ((($77)) + 140|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($76|0)<($79|0);
  $81 = $mod;
  if (!($80)) {
   break;
  }
  $82 = $i;
  $83 = (_subinstrument_alloc($81,$82,1)|0);
  $84 = ($83|0)<(0);
  if ($84) {
   label = 8;
   break;
  }
  $85 = $i;
  $86 = $ci;
  $87 = (($86) + ($85<<5)|0);
  $88 = ((($87)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 << 1;
  $91 = $i;
  $92 = $mod;
  $93 = ((($92)) + 180|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + (($91*52)|0)|0);
  $96 = ((($95)) + 32|0);
  HEAP32[$96>>2] = $90;
  $97 = $i;
  $98 = $mod;
  $99 = ((($98)) + 180|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + (($97*52)|0)|0);
  $102 = ((($101)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)>(0);
  if ($104) {
   $105 = $i;
   $106 = $mod;
   $107 = ((($106)) + 176|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($108) + (($105*764)|0)|0);
   $110 = ((($109)) + 36|0);
   HEAP32[$110>>2] = 1;
  }
  $111 = $i;
  $112 = $ci;
  $113 = (($112) + ($111<<5)|0);
  $114 = ((($113)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $i;
  $117 = $ci;
  $118 = (($117) + ($116<<5)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($115>>>0)>($119>>>0);
  $121 = $i;
  if ($120) {
   $122 = $ci;
   $123 = (($122) + ($121<<5)|0);
   $124 = ((($123)) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $i;
   $127 = $ci;
   $128 = (($127) + ($126<<5)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($125) - ($129))|0;
   $131 = $130 << 1;
   $132 = $i;
   $133 = $mod;
   $134 = ((($133)) + 180|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + (($132*52)|0)|0);
   $137 = ((($136)) + 36|0);
   HEAP32[$137>>2] = $131;
  } else {
   $138 = $mod;
   $139 = ((($138)) + 180|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + (($121*52)|0)|0);
   $142 = ((($141)) + 36|0);
   HEAP32[$142>>2] = 0;
  }
  $143 = $i;
  $144 = $ci;
  $145 = (($144) + ($143<<5)|0);
  $146 = ((($145)) + 12|0);
  $147 = HEAP16[$146>>1]|0;
  $148 = $147&65535;
  $149 = $i;
  $150 = $mod;
  $151 = ((($150)) + 180|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + (($149*52)|0)|0);
  $154 = ((($153)) + 40|0);
  HEAP32[$154>>2] = $148;
  $155 = $i;
  $156 = $mod;
  $157 = ((($156)) + 180|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($155*52)|0)|0);
  $160 = ((($159)) + 40|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)>(2);
  if ($162) {
   $163 = $i;
   $164 = $mod;
   $165 = ((($164)) + 180|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + (($163*52)|0)|0);
   $168 = ((($167)) + 40|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169 << 1;
   HEAP32[$168>>2] = $170;
   $171 = $i;
   $172 = $mod;
   $173 = ((($172)) + 180|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + (($171*52)|0)|0);
   $176 = ((($175)) + 44|0);
   HEAP32[$176>>2] = 2;
  }
  $177 = $i;
  $178 = $ci;
  $179 = (($178) + ($177<<5)|0);
  $180 = ((($179)) + 14|0);
  $181 = HEAP16[$180>>1]|0;
  $182 = $181&65535;
  $183 = $i;
  $184 = $mod;
  $185 = ((($184)) + 176|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + (($183*764)|0)|0);
  $188 = ((($187)) + 756|0);
  $189 = HEAP32[$188>>2]|0;
  HEAP32[$189>>2] = $182;
  $190 = $i;
  $191 = $mod;
  $192 = ((($191)) + 176|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + (($190*764)|0)|0);
  $195 = ((($194)) + 756|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ((($196)) + 8|0);
  HEAP32[$197>>2] = 128;
  $198 = $i;
  $199 = $i;
  $200 = $mod;
  $201 = ((($200)) + 176|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + (($199*764)|0)|0);
  $204 = ((($203)) + 756|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ((($205)) + 40|0);
  HEAP32[$206>>2] = $198;
  $207 = $mod;
  $208 = $i;
  $209 = $i;
  $210 = $ci;
  $211 = (($210) + ($209<<5)|0);
  $212 = ((($211)) + 16|0);
  (_instrument_name($207,$208,$212,16)|0);
  $213 = $i;
  $214 = (($213) + 1)|0;
  $i = $214;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $215 = (_pattern_init($81)|0);
 $216 = ($215|0)<(0);
 if ($216) {
  $0 = -1;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $217 = $2;
 $218 = HEAP32[$song>>2]|0;
 _read_abk_playlist($217,$218,$playlist);
 $219 = $2;
 $220 = ((($main_header)) + 8|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (20 + ($221))|0;
 $223 = (($222) + 2)|0;
 (_hio_seek($219,$223,0)|0);
 $224 = $mod;
 $225 = ((($224)) + 156|0);
 HEAP32[$225>>2] = 0;
 $i = 0;
 $j = 0;
 while(1) {
  $226 = $j;
  $227 = $mod;
  $228 = ((($227)) + 128|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($226|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = $mod;
  $232 = $i;
  $233 = (_pattern_tracks_alloc($231,$232,64)|0);
  $234 = ($233|0)<(0);
  if ($234) {
   label = 22;
   break;
  }
  $k = 0;
  while(1) {
   $235 = $k;
   $236 = $mod;
   $237 = ((($236)) + 136|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = ($235|0)<($238|0);
   if (!($239)) {
    break;
   }
   $240 = $2;
   $241 = (_hio_read16b($240)|0);
   $pattern = $241;
   $242 = $2;
   $243 = $i;
   $244 = $mod;
   $245 = ((($244)) + 136|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = Math_imul($243, $246)|0;
   $248 = $k;
   $249 = (($247) + ($248))|0;
   $250 = $mod;
   $251 = ((($250)) + 172|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($252) + ($249<<2)|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ((($254)) + 4|0);
   $256 = ((($main_header)) + 8|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = (20 + ($257))|0;
   $259 = $pattern;
   $260 = $259&65535;
   $261 = (($258) + ($260))|0;
   (_read_abk_pattern($242,$255,$261)|0);
   $262 = $k;
   $263 = (($262) + 1)|0;
   $k = $263;
  }
  $264 = $i;
  $265 = (($264) + 1)|0;
  $i = $265;
  $266 = $j;
  $267 = (($266) + 1)|0;
  $j = $267;
 }
 if ((label|0) == 22) {
  $0 = -1;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 $i = 0;
 $j = 0;
 while(1) {
  $268 = $j;
  $269 = HEAP16[$playlist>>1]|0;
  $270 = $269&65535;
  $271 = ($268|0)<($270|0);
  if (!($271)) {
   break;
  }
  $272 = $mod;
  $273 = ((($272)) + 156|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + 1)|0;
  HEAP32[$273>>2] = $275;
  $276 = $j;
  $277 = ((($playlist)) + 4|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = (($278) + ($276<<1)|0);
  $280 = HEAP16[$279>>1]|0;
  $281 = $280&255;
  $282 = $i;
  $283 = (($282) + 1)|0;
  $i = $283;
  $284 = $mod;
  $285 = ((($284)) + 952|0);
  $286 = (($285) + ($282)|0);
  HEAP8[$286>>0] = $281;
  $287 = $j;
  $288 = (($287) + 1)|0;
  $j = $288;
 }
 $289 = $ci;
 _free($289);
 _free_abk_playlist($playlist);
 $290 = $2;
 $291 = $first_sample_offset;
 (_hio_seek($290,$291,0)|0);
 $i = 0;
 while(1) {
  $292 = $i;
  $293 = $mod;
  $294 = ((($293)) + 140|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = ($292|0)<($295|0);
  if (!($296)) {
   label = 36;
   break;
  }
  $297 = $i;
  $298 = $mod;
  $299 = ((($298)) + 180|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = (($300) + (($297*52)|0)|0);
  $302 = ((($301)) + 32|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = ($303|0)<=(2);
  if (!($304)) {
   $305 = $1;
   $306 = $2;
   $307 = $i;
   $308 = $mod;
   $309 = ((($308)) + 180|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = (($310) + (($307*52)|0)|0);
   $312 = (_load_sample($305,$306,0,$311,0)|0);
   $313 = ($312|0)<(0);
   if ($313) {
    label = 34;
    break;
   }
  }
  $314 = $i;
  $315 = (($314) + 1)|0;
  $i = $315;
 }
 if ((label|0) == 34) {
  $0 = -1;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 else if ((label|0) == 36) {
  $0 = 0;
  $316 = $0;
  STACKTOP = sp;return ($316|0);
 }
 return (0)|0;
}
function _read_abk_song($f,$song,$songs_section_offset) {
 $f = $f|0;
 $song = $song|0;
 $songs_section_offset = $songs_section_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $song_section = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $song;
 $3 = $songs_section_offset;
 $4 = $1;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $1;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = ($8|0)!=(1);
 if ($9) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $10 = $1;
 $11 = (_hio_read32b($10)|0);
 $song_section = $11;
 $12 = $1;
 $13 = $3;
 $14 = $song_section;
 $15 = (($13) + ($14))|0;
 (_hio_seek($12,$15,0)|0);
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(4);
  $18 = $1;
  $19 = (_hio_read16b($18)|0);
  if (!($17)) {
   break;
  }
  $20 = $19&65535;
  $21 = $3;
  $22 = (($20) + ($21))|0;
  $23 = $song_section;
  $24 = (($22) + ($23))|0;
  $25 = $i;
  $26 = $2;
  $27 = (($26) + ($25<<2)|0);
  HEAP32[$27>>2] = $24;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $2;
 $31 = ((($30)) + 16|0);
 HEAP16[$31>>1] = $19;
 $32 = $1;
 (_hio_read16b($32)|0);
 $33 = $2;
 $34 = ((($33)) + 18|0);
 $35 = $1;
 (_hio_read($34,1,16,$35)|0);
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _read_abk_insts($f,$inst_section_size,$count) {
 $f = $f|0;
 $inst_section_size = $inst_section_size|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inst = 0, $sampleLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $inst_section_size;
 $2 = $count;
 $3 = $2;
 $4 = $3<<5;
 $5 = (_malloc($4)|0);
 $inst = $5;
 $6 = $inst;
 $7 = $2;
 $8 = $7<<5;
 _memset(($6|0),0,($8|0))|0;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $9&65535;
  $11 = $2;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = (_hio_read32b($13)|0);
  $15 = $i;
  $16 = $15&65535;
  $17 = $inst;
  $18 = (($17) + ($16<<5)|0);
  HEAP32[$18>>2] = $14;
  $19 = $0;
  $20 = (_hio_read32b($19)|0);
  $21 = $i;
  $22 = $21&65535;
  $23 = $inst;
  $24 = (($23) + ($22<<5)|0);
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $20;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  $28 = $27&65535;
  $29 = $i;
  $30 = $29&65535;
  $31 = $inst;
  $32 = (($31) + ($30<<5)|0);
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = $28;
  $34 = $0;
  $35 = (_hio_read16b($34)|0);
  $36 = $i;
  $37 = $36&65535;
  $38 = $inst;
  $39 = (($38) + ($37<<5)|0);
  $40 = ((($39)) + 12|0);
  HEAP16[$40>>1] = $35;
  $41 = $0;
  $42 = (_hio_read16b($41)|0);
  $43 = $i;
  $44 = $43&65535;
  $45 = $inst;
  $46 = (($45) + ($44<<5)|0);
  $47 = ((($46)) + 14|0);
  HEAP16[$47>>1] = $42;
  $48 = $0;
  $49 = (_hio_read16b($48)|0);
  $50 = $49&65535;
  $sampleLength = $50;
  $51 = $sampleLength;
  $52 = ($51>>>0)>(4);
  if ($52) {
   $53 = $sampleLength;
   $54 = $i;
   $55 = $54&65535;
   $56 = $inst;
   $57 = (($56) + ($55<<5)|0);
   $58 = ((($57)) + 4|0);
   HEAP32[$58>>2] = $53;
  }
  $59 = $i;
  $60 = $59&65535;
  $61 = $inst;
  $62 = (($61) + ($60<<5)|0);
  $63 = ((($62)) + 16|0);
  $64 = $0;
  (_hio_read($63,1,16,$64)|0);
  $65 = $i;
  $66 = (($65) + 1)<<16>>16;
  $i = $66;
 }
 $67 = $inst;
 STACKTOP = sp;return ($67|0);
}
function _read_abk_playlist($f,$playlist_offset,$playlist) {
 $f = $f|0;
 $playlist_offset = $playlist_offset|0;
 $playlist = $playlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arraysize = 0, $playdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $playlist_offset;
 $2 = $playlist;
 $arraysize = 64;
 $3 = $2;
 HEAP16[$3>>1] = 0;
 $4 = $0;
 $5 = $1;
 (_hio_seek($4,$5,0)|0);
 $6 = $arraysize;
 $7 = $6<<1;
 $8 = (_malloc($7)|0);
 $9 = $2;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (_hio_read16b($11)|0);
 $playdata = $12;
 while(1) {
  $13 = $playdata;
  $14 = $13&65535;
  $15 = ($14|0)!=(65535);
  if (!($15)) {
   label = 7;
   break;
  }
  $16 = $playdata;
  $17 = $16&65535;
  $18 = ($17|0)!=(65534);
  if (!($18)) {
   label = 7;
   break;
  }
  $19 = $2;
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $arraysize;
  $23 = ($21|0)>=($22|0);
  if ($23) {
   $24 = $arraysize;
   $25 = $24<<1;
   $arraysize = $25;
   $26 = $2;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $arraysize;
   $30 = $29<<1;
   $31 = (_realloc($28,$30)|0);
   $32 = $2;
   $33 = ((($32)) + 4|0);
   HEAP32[$33>>2] = $31;
  }
  $34 = $playdata;
  $35 = $2;
  $36 = HEAP16[$35>>1]|0;
  $37 = (($36) + 1)<<16>>16;
  HEAP16[$35>>1] = $37;
  $38 = $36&65535;
  $39 = $2;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<1)|0);
  HEAP16[$42>>1] = $34;
  $43 = $0;
  $44 = (_hio_read16b($43)|0);
  $playdata = $44;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _read_abk_pattern($f,$events,$pattern_offset_abs) {
 $f = $f|0;
 $events = $events|0;
 $pattern_offset_abs = $pattern_offset_abs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $command = 0, $delay = 0, $i = 0, $inst = 0;
 var $jumped = 0, $param = 0, $patdata = 0, $per_command = 0, $per_param = 0, $position = 0, $storepos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $events;
 $2 = $pattern_offset_abs;
 $inst = 0;
 $jumped = 0;
 $per_command = 0;
 $per_param = 0;
 $3 = $0;
 $4 = (_hio_tell($3)|0);
 $storepos = $4;
 $position = 0;
 $5 = $0;
 $6 = $2;
 (_hio_seek($5,$6,0)|0);
 $7 = $0;
 $8 = (_hio_read16b($7)|0);
 $patdata = $8;
 L1: while(1) {
  $9 = $patdata;
  $10 = $9&65535;
  $11 = ($10|0)!=(32768);
  if (!($11)) {
   break;
  }
  $12 = $jumped;
  $13 = $12&255;
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $patdata;
  $16 = $15&65535;
  $17 = ($16|0)==(37120);
  if ($17) {
   break;
  }
  $18 = $patdata;
  $19 = $18&65535;
  $20 = $19 & 32768;
  $21 = ($20|0)!=(0);
  $22 = $patdata;
  $23 = $22&65535;
  L6: do {
   if ($21) {
    $24 = $23 >> 8;
    $25 = $24 & 127;
    $26 = $25&255;
    $command = $26;
    $27 = $patdata;
    $28 = $27&65535;
    $29 = $28 & 127;
    $30 = $29&255;
    $param = $30;
    $31 = $command;
    $32 = $31&255;
    $33 = ($32|0)!=(3);
    if ($33) {
     $34 = $command;
     $35 = $34&255;
     $36 = ($35|0)!=(9);
     if ($36) {
      $37 = $command;
      $38 = $37&255;
      $39 = ($38|0)!=(11);
      if ($39) {
       $40 = $command;
       $41 = $40&255;
       $42 = ($41|0)!=(12);
       if ($42) {
        $43 = $command;
        $44 = $43&255;
        $45 = ($44|0)!=(13);
        if ($45) {
         $46 = $command;
         $47 = $46&255;
         $48 = ($47|0)<(16);
         if ($48) {
          $per_command = 0;
          $per_param = 0;
         }
        }
       }
      }
     }
    }
    $49 = $command;
    $50 = $49&255;
    do {
     switch ($50|0) {
     case 15: case 2:  {
      $62 = $position;
      $63 = $62&255;
      $64 = $1;
      $65 = (($64) + ($63<<3)|0);
      $66 = ((($65)) + 3|0);
      HEAP8[$66>>0] = 2;
      $67 = $param;
      $68 = $position;
      $69 = $68&255;
      $70 = $1;
      $71 = (($70) + ($69<<3)|0);
      $72 = ((($71)) + 4|0);
      HEAP8[$72>>0] = $67;
      break L6;
      break;
     }
     case 13:  {
      $151 = $param;
      $152 = $151&255;
      $153 = ($152|0)!=(0);
      if ($153) {
       $per_command = 10;
       $154 = $param;
       $per_param = $154;
       break L6;
      } else {
       $per_command = 0;
       $per_param = 0;
       break L6;
      }
      break;
     }
     case 11:  {
      $per_command = 3;
      $149 = $param;
      $per_param = $149;
      break L6;
      break;
     }
     case 5:  {
      $84 = $position;
      $85 = $84&255;
      $86 = $1;
      $87 = (($86) + ($85<<3)|0);
      $88 = ((($87)) + 3|0);
      HEAP8[$88>>0] = 14;
      $89 = $param;
      $90 = $89&255;
      $91 = ($90|0)==(0);
      if ($91) {
       $92 = $position;
       $93 = $92&255;
       $94 = $1;
       $95 = (($94) + ($93<<3)|0);
       $96 = ((($95)) + 4|0);
       HEAP8[$96>>0] = 80;
       break L6;
      } else {
       $97 = $param;
       $98 = $97&255;
       $99 = $98 & 15;
       $100 = 96 | $99;
       $101 = $100&255;
       $102 = $position;
       $103 = $102&255;
       $104 = $1;
       $105 = (($104) + ($103<<3)|0);
       $106 = ((($105)) + 4|0);
       HEAP8[$106>>0] = $101;
       break L6;
      }
      break;
     }
     case 12:  {
      $per_command = 4;
      $150 = $param;
      $per_param = $150;
      break L6;
      break;
     }
     case 9:  {
      $144 = $param;
      $145 = $144&255;
      $146 = (($145) + 1)|0;
      $147 = $146&255;
      $inst = $147;
      break L6;
      break;
     }
     case 17:  {
      $193 = $position;
      $194 = $193&255;
      $195 = $1;
      $196 = (($195) + ($194<<3)|0);
      $197 = ((($196)) + 3|0);
      HEAP8[$197>>0] = 11;
      $198 = $param;
      $199 = $position;
      $200 = $199&255;
      $201 = $1;
      $202 = (($201) + ($200<<3)|0);
      $203 = ((($202)) + 4|0);
      HEAP8[$203>>0] = $198;
      $jumped = 1;
      break L6;
      break;
     }
     case 16:  {
      $155 = $per_command;
      $156 = $155&255;
      $157 = ($156|0)!=(0);
      if ($157) {
       label = 33;
      } else {
       $158 = $per_param;
       $159 = $158&255;
       $160 = ($159|0)!=(0);
       if ($160) {
        label = 33;
       } else {
        $184 = $param;
        $185 = $184&255;
        $186 = $position;
        $187 = $186&255;
        $188 = (($187) + ($185))|0;
        $189 = $188&255;
        $position = $189;
       }
      }
      L34: do {
       if ((label|0) == 33) {
        label = 0;
        $i = 0;
        while(1) {
         $161 = $i;
         $162 = $param;
         $163 = $162&255;
         $164 = ($161|0)<($163|0);
         if (!($164)) {
          break L34;
         }
         $165 = $position;
         $166 = $165&255;
         $167 = ($166|0)<(64);
         if (!($167)) {
          break L34;
         }
         $168 = $per_command;
         $169 = $position;
         $170 = $169&255;
         $171 = $1;
         $172 = (($171) + ($170<<3)|0);
         $173 = ((($172)) + 3|0);
         HEAP8[$173>>0] = $168;
         $174 = $per_param;
         $175 = $position;
         $176 = $175&255;
         $177 = $1;
         $178 = (($177) + ($176<<3)|0);
         $179 = ((($178)) + 4|0);
         HEAP8[$179>>0] = $174;
         $180 = $position;
         $181 = (($180) + 1)<<24>>24;
         $position = $181;
         $182 = $i;
         $183 = (($182) + 1)|0;
         $i = $183;
        }
       }
      } while(0);
      $190 = $position;
      $191 = $190&255;
      $192 = ($191|0)>=(64);
      if (!($192)) {
       break L6;
      }
      $jumped = 1;
      break L6;
      break;
     }
     case 7:  {
      $117 = $position;
      $118 = $117&255;
      $119 = $1;
      $120 = (($119) + ($118<<3)|0);
      $121 = ((($120)) + 3|0);
      HEAP8[$121>>0] = 14;
      $122 = $position;
      $123 = $122&255;
      $124 = $1;
      $125 = (($124) + ($123<<3)|0);
      $126 = ((($125)) + 4|0);
      HEAP8[$126>>0] = 1;
      break L6;
      break;
     }
     case 10:  {
      $per_command = 0;
      $148 = $param;
      $per_param = $148;
      break L6;
      break;
     }
     case 8:  {
      $127 = $param;
      $128 = $127&255;
      $129 = ($128|0)>(0);
      if (!($129)) {
       break L6;
      }
      $130 = $position;
      $131 = $130&255;
      $132 = $1;
      $133 = (($132) + ($131<<3)|0);
      $134 = ((($133)) + 3|0);
      HEAP8[$134>>0] = 15;
      $135 = $param;
      $136 = $135&255;
      $137 = (100 / ($136|0))&-1;
      $138 = $137&255;
      $139 = $position;
      $140 = $139&255;
      $141 = $1;
      $142 = (($141) + ($140<<3)|0);
      $143 = ((($142)) + 4|0);
      HEAP8[$143>>0] = $138;
      break L6;
      break;
     }
     case 3:  {
      $73 = $position;
      $74 = $73&255;
      $75 = $1;
      $76 = (($75) + ($74<<3)|0);
      $77 = ((($76)) + 3|0);
      HEAP8[$77>>0] = 12;
      $78 = $param;
      $79 = $position;
      $80 = $79&255;
      $81 = $1;
      $82 = (($81) + ($80<<3)|0);
      $83 = ((($82)) + 4|0);
      HEAP8[$83>>0] = $78;
      break L6;
      break;
     }
     case 6:  {
      $107 = $position;
      $108 = $107&255;
      $109 = $1;
      $110 = (($109) + ($108<<3)|0);
      $111 = ((($110)) + 3|0);
      HEAP8[$111>>0] = 14;
      $112 = $position;
      $113 = $112&255;
      $114 = $1;
      $115 = (($114) + ($113<<3)|0);
      $116 = ((($115)) + 4|0);
      HEAP8[$116>>0] = 0;
      break L6;
      break;
     }
     case 14: case 1:  {
      $51 = $position;
      $52 = $51&255;
      $53 = $1;
      $54 = (($53) + ($52<<3)|0);
      $55 = ((($54)) + 3|0);
      HEAP8[$55>>0] = 1;
      $56 = $param;
      $57 = $position;
      $58 = $57&255;
      $59 = $1;
      $60 = (($59) + ($58<<3)|0);
      $61 = ((($60)) + 4|0);
      HEAP8[$61>>0] = $56;
      break L6;
      break;
     }
     default: {
      break L6;
     }
     }
    } while(0);
   } else {
    $204 = $23 & 16384;
    $205 = ($204|0)!=(0);
    $206 = $patdata;
    $207 = $206&65535;
    if (!($205)) {
     $245 = $207 & 4095;
     $246 = (_period_to_note($245)|0);
     $247 = $246&255;
     $248 = $position;
     $249 = $248&255;
     $250 = $1;
     $251 = (($250) + ($249<<3)|0);
     HEAP8[$251>>0] = $247;
     $252 = $inst;
     $253 = $position;
     $254 = $253&255;
     $255 = $1;
     $256 = (($255) + ($254<<3)|0);
     $257 = ((($256)) + 1|0);
     HEAP8[$257>>0] = $252;
     break;
    }
    $208 = $207 & 255;
    $209 = $208&65535;
    $delay = $209;
    $210 = $0;
    $211 = (_hio_read16b($210)|0);
    $patdata = $211;
    $212 = $patdata;
    $213 = $212&65535;
    $214 = ($213|0)==(0);
    if ($214) {
     $215 = $delay;
     $216 = $215&65535;
     $217 = ($216|0)==(0);
     if ($217) {
      break L1;
     }
    }
    $218 = $patdata;
    $219 = $218&65535;
    $220 = ($219|0)!=(0);
    if ($220) {
     $221 = $patdata;
     $222 = $221&65535;
     $223 = $222 & 4095;
     $224 = (_period_to_note($223)|0);
     $225 = $224&255;
     $226 = $position;
     $227 = $226&255;
     $228 = $1;
     $229 = (($228) + ($227<<3)|0);
     HEAP8[$229>>0] = $225;
     $230 = $inst;
     $231 = $position;
     $232 = $231&255;
     $233 = $1;
     $234 = (($233) + ($232<<3)|0);
     $235 = ((($234)) + 1|0);
     HEAP8[$235>>0] = $230;
    }
    $236 = $delay;
    $237 = $236&65535;
    $238 = $position;
    $239 = $238&255;
    $240 = (($239) + ($237))|0;
    $241 = $240&255;
    $position = $241;
    $242 = $position;
    $243 = $242&255;
    $244 = ($243|0)>=(64);
    if ($244) {
     break L1;
    }
   }
  } while(0);
  $258 = $0;
  $259 = (_hio_read16b($258)|0);
  $patdata = $259;
  $260 = $0;
  $261 = (_hio_eof($260)|0);
  $262 = ($261|0)!=(0);
  if ($262) {
   break;
  }
 }
 $263 = $position;
 $264 = $263&255;
 $265 = ($264|0)<(64);
 if (!($265)) {
  $272 = $0;
  $273 = $storepos;
  (_hio_seek($272,$273,0)|0);
  $274 = $position;
  $275 = $274&255;
  STACKTOP = sp;return ($275|0);
 }
 $266 = $position;
 $267 = $266&255;
 $268 = (($267) - 1)|0;
 $269 = $1;
 $270 = (($269) + ($268<<3)|0);
 $271 = ((($270)) + 5|0);
 HEAP8[$271>>0] = 13;
 $272 = $0;
 $273 = $storepos;
 (_hio_seek($272,$273,0)|0);
 $274 = $position;
 $275 = $274&255;
 STACKTOP = sp;return ($275|0);
}
function _free_abk_playlist($playlist) {
 $playlist = $playlist|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $playlist;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
 }
 $8 = $0;
 HEAP16[$8>>1] = 0;
 STACKTOP = sp;return;
}
function _instrument_init($mod) {
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $1;
 $3 = ((($2)) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_calloc(764,$4)|0);
 $6 = $1;
 $7 = ((($6)) + 176|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 176|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $12 = $1;
 $13 = ((($12)) + 144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 144|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_calloc(52,$18)|0);
  $20 = $1;
  $21 = ((($20)) + 180|0);
  HEAP32[$21>>2] = $19;
  $22 = $1;
  $23 = ((($22)) + 180|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $0 = -1;
   $26 = $0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $0 = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _subinstrument_alloc($mod,$i,$num) {
 $mod = $mod|0;
 $i = $i|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $i;
 $3 = $num;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $6 = $3;
 $7 = (_calloc(64,$6)|0);
 $8 = $2;
 $9 = $1;
 $10 = ((($9)) + 176|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*764)|0)|0);
 $13 = ((($12)) + 756|0);
 HEAP32[$13>>2] = $7;
 $14 = $2;
 $15 = $1;
 $16 = ((($15)) + 176|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($14*764)|0)|0);
 $19 = ((($18)) + 756|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pattern_init($mod) {
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $1;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_calloc(4,$4)|0);
 $6 = $1;
 $7 = ((($6)) + 172|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 172|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $12 = $1;
 $13 = ((($12)) + 128|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc(4,$14)|0);
 $16 = $1;
 $17 = ((($16)) + 168|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = ((($18)) + 168|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pattern_alloc($mod,$num) {
 $mod = $mod|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $3 = $1;
 $4 = ((($3)) + 136|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - 1)|0;
 $7 = $6<<2;
 $8 = (8 + ($7))|0;
 $9 = (_calloc(1,$8)|0);
 $10 = $2;
 $11 = $1;
 $12 = ((($11)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<2)|0);
 HEAP32[$14>>2] = $9;
 $15 = $2;
 $16 = $1;
 $17 = ((($16)) + 168|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($15<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _track_alloc($mod,$num,$rows) {
 $mod = $mod|0;
 $num = $num|0;
 $rows = $rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $3 = $rows;
 $4 = $3;
 $5 = (($4) - 1)|0;
 $6 = $5<<3;
 $7 = (12 + ($6))|0;
 $8 = (_calloc($7,1)|0);
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 172|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 HEAP32[$13>>2] = $8;
 $14 = $2;
 $15 = $1;
 $16 = ((($15)) + 172|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($14<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $0 = -1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $21 = $3;
  $22 = $2;
  $23 = $1;
  $24 = ((($23)) + 172|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$27>>2] = $21;
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _tracks_in_pattern_alloc($mod,$num) {
 $mod = $mod|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $rows = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ((($4)) + 136|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 136|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = Math_imul($8, $11)|0;
  $13 = $i;
  $14 = (($12) + ($13))|0;
  $t = $14;
  $15 = $2;
  $16 = $1;
  $17 = ((($16)) + 168|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $rows = $21;
  $22 = $1;
  $23 = $t;
  $24 = $rows;
  $25 = (_track_alloc($22,$23,$24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   label = 4;
   break;
  }
  $27 = $t;
  $28 = $i;
  $29 = $2;
  $30 = $1;
  $31 = ((($30)) + 168|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = (($35) + ($28<<2)|0);
  HEAP32[$36>>2] = $27;
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _pattern_tracks_alloc($mod,$num,$rows) {
 $mod = $mod|0;
 $num = $num|0;
 $rows = $rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $3 = $rows;
 $4 = $1;
 $5 = $2;
 $6 = (_pattern_alloc($4,$5)|0);
 $7 = ($6|0)<(0);
 if ($7) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $8 = $3;
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 168|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$14>>2] = $8;
 $15 = $1;
 $16 = $2;
 $17 = (_tracks_in_pattern_alloc($15,$16)|0);
 $18 = ($17|0)<(0);
 if ($18) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _realloc_samples($buf,$size,$new_size) {
 $buf = $buf|0;
 $size = $size|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $new_size;
 $4 = $1;
 $5 = $3;
 $6 = ($5*52)|0;
 $7 = (_realloc($4,$6)|0);
 $1 = $7;
 $8 = $1;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)>($12|0);
 if ($13) {
  $14 = $1;
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + (($16*52)|0)|0);
  $18 = $3;
  $19 = $2;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) - ($20))|0;
  $22 = ($21*52)|0;
  _memset(($17|0),0,($22|0))|0;
 }
 $23 = $3;
 $24 = $2;
 HEAP32[$24>>2] = $23;
 $25 = $1;
 $0 = $25;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _instrument_name($mod,$i,$r,$n) {
 $mod = $mod|0;
 $i = $i|0;
 $r = $r|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mod;
 $1 = $i;
 $2 = $r;
 $3 = $n;
 $4 = $3;
 $5 = ($4|0)<(0);
 if ($5) {
  $3 = 0;
 } else {
  $6 = $3;
  $7 = ($6|0)>(31);
  if ($7) {
   $3 = 31;
  }
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 176|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*764)|0)|0);
 $13 = $2;
 $14 = $3;
 $15 = (_copy_adjust($12,$13,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _copy_adjust($s,$r,$n) {
 $s = $s|0;
 $r = $r|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $r;
 $2 = $n;
 $3 = $0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 _memset(($3|0),0,($5|0))|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 (_strncpy(($6|0),($7|0),($8|0))|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $2;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $0;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = (_isprint($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $i;
   $26 = $0;
   $27 = (($26) + ($25)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)>(127);
   if ($30) {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $31 = $i;
   $32 = $0;
   $33 = (($32) + ($31)|0);
   HEAP8[$33>>0] = 46;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 while(1) {
  $36 = $0;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $0;
   $41 = (_strlen(($40|0))|0);
   $42 = (($41) - 1)|0;
   $43 = $0;
   $44 = (($43) + ($42)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45 << 24 >> 24;
   $47 = ($46|0)==(32);
   $53 = $47;
  } else {
   $53 = 0;
  }
  $48 = $0;
  if (!($53)) {
   break;
  }
  $49 = (_strlen(($48|0))|0);
  $50 = (($49) - 1)|0;
  $51 = $0;
  $52 = (($51) + ($50)|0);
  HEAP8[$52>>0] = 0;
 }
 STACKTOP = sp;return ($48|0);
}
function _read_title($f,$t,$s) {
 $f = $f|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $f;
 $1 = $t;
 $2 = $s;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $2;
 $6 = ($5|0)>=(64);
 if ($6) {
  $2 = 63;
 }
 $7 = $1;
 $8 = $2;
 $9 = (($8) + 1)|0;
 _memset(($7|0),0,($9|0))|0;
 $10 = $2;
 $11 = $0;
 (_hio_read($buf,1,$10,$11)|0);
 $12 = $2;
 $13 = (($buf) + ($12)|0);
 HEAP8[$13>>0] = 0;
 $14 = $1;
 $15 = $2;
 (_copy_adjust($14,$buf,$15)|0);
 STACKTOP = sp;return;
}
function _test_name($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $n;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)>(127);
  if ($11) {
   label = 4;
   break;
  }
  $12 = $i;
  $13 = $1;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = $i;
   $19 = $1;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)<(32);
   if ($23) {
    $24 = $i;
    $25 = $1;
    $26 = (($25) + ($24)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ($28|0)!=(8);
    if ($29) {
     label = 8;
     break;
    }
   }
  }
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _decode_noisetracker_event($event,$mod_event) {
 $event = $event|0;
 $mod_event = $mod_event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fxt = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $mod_event;
 $2 = $0;
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;HEAP8[$2+6>>0]=0|0;HEAP8[$2+7>>0]=0|0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 15;
 $7 = $6 << 8;
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($7) + ($11))|0;
 $13 = (_period_to_note($12)|0);
 $14 = $13&255;
 $15 = $0;
 HEAP8[$15>>0] = $14;
 $16 = $1;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 & 240;
 $20 = $19 >> 4;
 $21 = $20 << 4;
 $22 = $1;
 $23 = ((($22)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 240;
 $27 = $26 >> 4;
 $28 = $21 | $27;
 $29 = $28&255;
 $30 = $0;
 $31 = ((($30)) + 1|0);
 HEAP8[$31>>0] = $29;
 $32 = $1;
 $33 = ((($32)) + 2|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 & 15;
 $fxt = $36;
 $37 = $fxt;
 $38 = ($37|0)<=(6);
 if (!($38)) {
  $39 = $fxt;
  $40 = ($39|0)>=(10);
  $41 = $fxt;
  $42 = ($41|0)!=(14);
  $or$cond = $40 & $42;
  if (!($or$cond)) {
   $52 = $0;
   _disable_continue_fx($52);
   STACKTOP = sp;return;
  }
 }
 $43 = $fxt;
 $44 = $43&255;
 $45 = $0;
 $46 = ((($45)) + 3|0);
 HEAP8[$46>>0] = $44;
 $47 = $1;
 $48 = ((($47)) + 3|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $0;
 $51 = ((($50)) + 4|0);
 HEAP8[$51>>0] = $49;
 $52 = $0;
 _disable_continue_fx($52);
 STACKTOP = sp;return;
}
function _disable_continue_fx($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 L1: do {
  if (!($4)) {
   $5 = $0;
   $6 = ((($5)) + 3|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   switch ($8|0) {
   case 10: case 2: case 1:  {
    $13 = $0;
    $14 = ((($13)) + 3|0);
    HEAP8[$14>>0] = 0;
    break L1;
    break;
   }
   case 5:  {
    $9 = $0;
    $10 = ((($9)) + 3|0);
    HEAP8[$10>>0] = 3;
    break L1;
    break;
   }
   case 6:  {
    $11 = $0;
    $12 = ((($11)) + 3|0);
    HEAP8[$12>>0] = 4;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _decode_protracker_event($event,$mod_event) {
 $event = $event|0;
 $mod_event = $mod_event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $mod_event;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 15;
 $fxt = $6;
 $7 = $0;
 ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;HEAP8[$7+5>>0]=0|0;HEAP8[$7+6>>0]=0|0;HEAP8[$7+7>>0]=0|0;
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 15;
 $12 = $11 << 8;
 $13 = $1;
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($12) + ($16))|0;
 $18 = (_period_to_note($17)|0);
 $19 = $18&255;
 $20 = $0;
 HEAP8[$20>>0] = $19;
 $21 = $1;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 240;
 $25 = $24 >> 4;
 $26 = $25 << 4;
 $27 = $1;
 $28 = ((($27)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 240;
 $32 = $31 >> 4;
 $33 = $26 | $32;
 $34 = $33&255;
 $35 = $0;
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = $34;
 $37 = $fxt;
 $38 = ($37|0)!=(8);
 if (!($38)) {
  $48 = $0;
  _disable_continue_fx($48);
  STACKTOP = sp;return;
 }
 $39 = $fxt;
 $40 = $39&255;
 $41 = $0;
 $42 = ((($41)) + 3|0);
 HEAP8[$42>>0] = $40;
 $43 = $1;
 $44 = ((($43)) + 3|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $0;
 $47 = ((($46)) + 4|0);
 HEAP8[$47>>0] = $45;
 $48 = $0;
 _disable_continue_fx($48);
 STACKTOP = sp;return;
}
function _check_filename_case($dir,$name,$new_name,$size) {
 $dir = $dir|0;
 $name = $name|0;
 $new_name = $new_name|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $dirfd = 0, $found = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dir;
 $2 = $name;
 $3 = $new_name;
 $4 = $size;
 $found = 0;
 $5 = $1;
 $6 = (_opendir(($5|0))|0);
 $dirfd = $6;
 $7 = $dirfd;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 while(1) {
  $9 = $dirfd;
  $10 = (_readdir(($9|0))|0);
  $d = $10;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $d;
  $13 = ((($12)) + 11|0);
  $14 = $2;
  $15 = (_strcasecmp($13,$14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $found = 1;
 }
 $17 = $found;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $3;
  $20 = $d;
  $21 = ((($20)) + 11|0);
  $22 = $4;
  (_strncpy(($19|0),($21|0),($22|0))|0);
 }
 $23 = $dirfd;
 (_closedir(($23|0))|0);
 $24 = $found;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _get_instrument_path($m,$path,$size) {
 $m = $m|0;
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $path;
 $2 = $size;
 $3 = $0;
 $4 = ((($3)) + 6548|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = $0;
  $9 = ((($8)) + 6548|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  (_strncpy(($7|0),($10|0),($11|0))|0);
  STACKTOP = sp;return;
 }
 $12 = (_getenv((40|0))|0);
 $13 = ($12|0)!=(0|0);
 $14 = $1;
 if ($13) {
  $15 = (_getenv((40|0))|0);
  $16 = $2;
  (_strncpy(($14|0),($15|0),($16|0))|0);
  STACKTOP = sp;return;
 } else {
  $17 = $2;
  (_strncpy(($14|0),(26344|0),($17|0))|0);
  STACKTOP = sp;return;
 }
}
function _set_type($m,$fmt,$varargs) {
 $m = $m|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $m;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = $1;
 (_vsnprintf($3,64,$4,$ap)|0);
 STACKTOP = sp;return;
}
function _iff_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_malloc(16)|0);
 $data = $1;
 $2 = $data;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $4 = $data;
  $5 = $data;
  HEAP32[$5>>2] = $4;
  $6 = $data;
  $7 = $data;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = $6;
  $9 = $data;
  $10 = ((($9)) + 8|0);
  HEAP32[$10>>2] = 4;
  $11 = $data;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = $data;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _iff_load($opaque,$m,$f,$parm) {
 $opaque = $opaque|0;
 $m = $m|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $m;
 $3 = $f;
 $4 = $parm;
 while(1) {
  $5 = $3;
  $6 = (_hio_eof($5)|0);
  $7 = ($6|0)!=(0);
  $8 = $7 ^ 1;
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = (_iff_chunk($9,$10,$11,$12)|0);
  $ret = $13;
  $14 = $ret;
  $15 = ($14|0)>(0);
  if ($15) {
   label = 6;
   break;
  }
  $16 = $ret;
  $17 = ($16|0)<(0);
  if ($17) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _iff_register($opaque,$id,$loader) {
 $opaque = $opaque|0;
 $id = $id|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $f = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $id;
 $3 = $loader;
 $4 = $1;
 $data = $4;
 $5 = (_malloc(20)|0);
 $f = $5;
 $6 = $f;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $8 = $f;
  $9 = $2;
  (_strncpy(($8|0),($9|0),5)|0);
  $10 = $3;
  $11 = $f;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = $f;
  $14 = ((($13)) + 12|0);
  $15 = $data;
  _list_add_tail($14,$15);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _iff_release($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $data = $1;
 $2 = $data;
 $3 = HEAP32[$2>>2]|0;
 $tmp = $3;
 while(1) {
  $4 = $tmp;
  $5 = $data;
  $6 = ($4|0)!=($5|0);
  if (!($6)) {
   break;
  }
  $7 = $tmp;
  $8 = (($7) + (((0 - ((((0) + 12|0))))|0))|0);
  $i = $8;
  $9 = $i;
  $10 = ((($9)) + 12|0);
  _list_del($10);
  $11 = $tmp;
  $12 = HEAP32[$11>>2]|0;
  $tmp = $12;
  $13 = $i;
  _free($13);
 }
 $14 = $data;
 _free($14);
 STACKTOP = sp;return;
}
function _iff_process($opaque,$m,$id,$size,$f,$parm) {
 $opaque = $opaque|0;
 $m = $m|0;
 $id = $id|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $data = 0, $i = 0, $pos = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $m;
 $3 = $id;
 $4 = $size;
 $5 = $f;
 $6 = $parm;
 $7 = $1;
 $data = $7;
 $8 = $5;
 $9 = (_hio_tell($8)|0);
 $pos = $9;
 $10 = $data;
 $11 = HEAP32[$10>>2]|0;
 $tmp = $11;
 while(1) {
  $12 = $tmp;
  $13 = $data;
  $14 = ($12|0)!=($13|0);
  if (!($14)) {
   break;
  }
  $15 = $tmp;
  $16 = (($15) + (((0 - ((((0) + 12|0))))|0))|0);
  $i = $16;
  $17 = $3;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $3;
   $20 = $i;
   $21 = $data;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_strncmp($19,$20,$23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    label = 5;
    break;
   }
  }
  $35 = $tmp;
  $36 = HEAP32[$35>>2]|0;
  $tmp = $36;
 }
 if ((label|0) == 5) {
  $26 = $i;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $2;
  $30 = $4;
  $31 = $5;
  $32 = $6;
  $33 = (FUNCTION_TABLE_iiiii[$28 & 511]($29,$30,$31,$32)|0);
  $34 = ($33|0)<(0);
  if ($34) {
   $0 = -1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $37 = $5;
 $38 = $pos;
 $39 = $4;
 $40 = (($38) + ($39))|0;
 (_hio_seek($37,$40,0)|0);
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _iff_id_size($opaque,$n) {
 $opaque = $opaque|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $n;
 $2 = $0;
 $data = $2;
 $3 = $1;
 $4 = $data;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function _iff_set_quirk($opaque,$i) {
 $opaque = $opaque|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $i;
 $2 = $0;
 $data = $2;
 $3 = $1;
 $4 = $data;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $3;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _iff_chunk($opaque,$m,$f,$parm) {
 $opaque = $opaque|0;
 $m = $m|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $data = 0, $id = 0, $size = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 28|0;
 $1 = $opaque;
 $2 = $m;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $data = $5;
 dest=$id; stop=dest+17|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $data;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (_hio_read($id,1,$8,$9)|0);
 $11 = $data;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=($13|0);
 if ($14) {
  $0 = 1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $15 = $data;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 16;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = (_strncmp($id,64,4)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = $3;
   (_hio_read32b($22)|0);
   $23 = $3;
   (_hio_read32b($23)|0);
   $24 = $data;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $3;
   (_hio_read($id,1,$26,$27)|0);
  }
 }
 $28 = $data;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1;
 $32 = ($31|0)!=(0);
 $33 = $3;
 if ($32) {
  $34 = (_hio_read32l($33)|0);
  $36 = $34;
 } else {
  $35 = (_hio_read32b($33)|0);
  $36 = $35;
 }
 $size = $36;
 $37 = $data;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 4;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $size;
  $43 = (($42) + 1)|0;
  $44 = $43 & -2;
  $size = $44;
 }
 $45 = $data;
 $46 = ((($45)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 8;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $size;
  $51 = (($50) + 3)|0;
  $52 = $51 & -4;
  $size = $52;
 }
 $53 = $data;
 $54 = ((($53)) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 & 2;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $data;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 4)|0;
  $62 = $size;
  $63 = (($62) - ($61))|0;
  $size = $63;
 }
 $64 = $size;
 $65 = ($64|0)<(0);
 if ($65) {
  $0 = 1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 } else {
  $66 = $1;
  $67 = $2;
  $68 = $size;
  $69 = $3;
  $70 = $4;
  $71 = (_iff_process($66,$67,$id,$68,$69,$70)|0);
  $0 = $71;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _list_add_tail($_new,$head) {
 $_new = $_new|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_new;
 $1 = $head;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 ___list_add($2,$5,$6);
 STACKTOP = sp;return;
}
function _list_del($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 ___list_del($3,$5);
 STACKTOP = sp;return;
}
function ___list_del($prev,$next) {
 $prev = $prev|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $prev;
 $1 = $next;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = $0;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function ___list_add($_new,$prev,$next) {
 $_new = $_new|0;
 $prev = $prev|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_new;
 $1 = $prev;
 $2 = $next;
 $3 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = $2;
 $7 = $0;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _itsex_decompress8($src,$dst,$len,$it215) {
 $src = $src|0;
 $dst = $dst|0;
 $len = $len|0;
 $it215 = $it215|0;
 var $$sink = 0, $$sink3 = 0, $$sink4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bitnum = 0, $bits = 0, $block_count = 0, $c = 0, $d = 0, $i = 0;
 var $i1 = 0, $j = 0, $j2 = 0, $left = 0, $pos = 0, $shift = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp + 20|0;
 $bitnum = sp + 16|0;
 $1 = $src;
 $2 = $dst;
 $3 = $len;
 $4 = $it215;
 $block_count = 0;
 HEAP32[$bitbuf>>2] = 0;
 HEAP32[$bitnum>>2] = 0;
 $left = 0;
 $temp = 0;
 $temp2 = 0;
 L1: while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   label = 31;
   break;
  }
  $7 = $block_count;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $block_count = 32768;
   $9 = $1;
   (_hio_read16l($9)|0);
   $left = 9;
   $temp2 = 0;
   $temp = 0;
   HEAP32[$bitnum>>2] = 0;
   HEAP32[$bitbuf>>2] = 0;
  }
  $10 = $block_count;
  $d = $10;
  $11 = $d;
  $12 = $3;
  $13 = ($11>>>0)>($12>>>0);
  if ($13) {
   $14 = $3;
   $d = $14;
  }
  $pos = 0;
  while(1) {
   $15 = $1;
   $16 = $left;
   $17 = $16&255;
   $18 = (_read_bits($15,$bitbuf,$bitnum,$17)|0);
   $19 = $18&65535;
   $bits = $19;
   $20 = $1;
   $21 = (_hio_eof($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    label = 9;
    break L1;
   }
   $23 = $left;
   $24 = $23&255;
   $25 = ($24|0)<(7);
   $26 = $left;
   $27 = $26&255;
   do {
    if ($25) {
     $28 = (($27) - 1)|0;
     $29 = 1 << $28;
     $i = $29;
     $30 = $bits;
     $31 = $30&65535;
     $32 = $31 & 65535;
     $j = $32;
     $33 = $i;
     $34 = $j;
     $35 = ($33|0)!=($34|0);
     if ($35) {
      label = 25;
     } else {
      $36 = $1;
      $37 = (_read_bits($36,$bitbuf,$bitnum,3)|0);
      $38 = (($37) + 1)|0;
      $39 = $38 & 255;
      $40 = $39&65535;
      $bits = $40;
      $41 = $1;
      $42 = (_hio_eof($41)|0);
      $43 = ($42|0)!=(0);
      if ($43) {
       label = 13;
       break L1;
      }
      $44 = $bits;
      $45 = $44&255;
      $46 = $45&255;
      $47 = $left;
      $48 = $47&255;
      $49 = ($46|0)<($48|0);
      $50 = $bits;
      if ($49) {
       $51 = $50&255;
       $$sink = $51;
      } else {
       $52 = $50&65535;
       $53 = (($52) + 1)|0;
       $54 = $53 & 255;
       $55 = $54&255;
       $$sink = $55;
      }
      $56 = $$sink&255;
      $57 = $56&255;
      $left = $57;
     }
    } else {
     $58 = ($27|0)<(9);
     $59 = $left;
     $60 = $59&255;
     if ($58) {
      $61 = (9 - ($60))|0;
      $62 = 255 >> $61;
      $63 = (($62) + 4)|0;
      $64 = $63&65535;
      $i1 = $64;
      $65 = $i1;
      $66 = $65&65535;
      $67 = (($66) - 8)|0;
      $68 = $67&65535;
      $j2 = $68;
      $69 = $bits;
      $70 = $69&65535;
      $71 = $j2;
      $72 = $71&65535;
      $73 = ($70|0)<=($72|0);
      if ($73) {
       label = 25;
       break;
      }
      $74 = $bits;
      $75 = $74&65535;
      $76 = $i1;
      $77 = $76&65535;
      $78 = ($75|0)>($77|0);
      if ($78) {
       label = 25;
       break;
      }
      $79 = $j2;
      $80 = $79&65535;
      $81 = $bits;
      $82 = $81&65535;
      $83 = (($82) - ($80))|0;
      $84 = $83&65535;
      $bits = $84;
      $85 = $bits;
      $86 = $85&65535;
      $87 = $86 & 255;
      $88 = $87&255;
      $89 = $88&255;
      $90 = $left;
      $91 = $90&255;
      $92 = ($89|0)<($91|0);
      $93 = $bits;
      $94 = $93&65535;
      $95 = (($94) + 1)|0;
      $$sink3 = $92 ? $94 : $95;
      $96 = $$sink3 & 255;
      $97 = $96&255;
      $98 = $97&255;
      $99 = $98&255;
      $left = $99;
      break;
     } else {
      $100 = ($60|0)>=(10);
      if ($100) {
       label = 28;
       break;
      }
      $101 = $bits;
      $102 = $101&65535;
      $103 = ($102|0)>=(256);
      if (!($103)) {
       label = 25;
       break;
      }
      $104 = $bits;
      $105 = $104&65535;
      $106 = (($105) + 1)|0;
      $107 = $106&255;
      $108 = $107&255;
      $109 = $108 & 255;
      $110 = $109&255;
      $left = $110;
      break;
     }
    }
   } while(0);
   if ((label|0) == 25) {
    label = 0;
    $111 = $left;
    $112 = $111&255;
    $113 = ($112|0)<(8);
    if ($113) {
     $114 = $left;
     $115 = $114&255;
     $116 = (8 - ($115))|0;
     $117 = $116&255;
     $shift = $117;
     $118 = $bits;
     $119 = $118&65535;
     $120 = $shift;
     $121 = $120&255;
     $122 = $119 << $121;
     $123 = $122&255;
     $c = $123;
     $124 = $shift;
     $125 = $124&255;
     $126 = $c;
     $127 = $126 << 24 >> 24;
     $128 = $127 >> $125;
     $129 = $128&255;
     $c = $129;
     $130 = $c;
     $131 = $130 << 24 >> 24;
     $bits = $131;
    }
    $132 = $temp;
    $133 = $132&255;
    $134 = $bits;
    $135 = $134&65535;
    $136 = (($135) + ($133))|0;
    $137 = $136&65535;
    $bits = $137;
    $138 = $bits;
    $139 = $138&255;
    $temp = $139;
    $140 = $temp;
    $141 = $140&255;
    $142 = $temp2;
    $143 = $142&255;
    $144 = (($143) + ($141))|0;
    $145 = $144&255;
    $temp2 = $145;
    $146 = $4;
    $147 = ($146|0)!=(0);
    $148 = $temp2;
    $149 = $temp;
    $$sink4 = $147 ? $148 : $149;
    $150 = $$sink4&255;
    $151 = $150&255;
    $152 = $pos;
    $153 = $2;
    $154 = (($153) + ($152)|0);
    HEAP8[$154>>0] = $151;
    label = 28;
   }
   if ((label|0) == 28) {
    label = 0;
    $155 = $pos;
    $156 = (($155) + 1)|0;
    $pos = $156;
   }
   $157 = $pos;
   $158 = $d;
   $159 = ($157>>>0)<($158>>>0);
   if (!($159)) {
    break;
   }
  }
  $160 = $d;
  $161 = $block_count;
  $162 = (($161) - ($160))|0;
  $block_count = $162;
  $163 = $d;
  $164 = $3;
  $165 = (($164) - ($163))|0;
  $3 = $165;
  $166 = $d;
  $167 = $2;
  $168 = (($167) + ($166)|0);
  $2 = $168;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 else if ((label|0) == 31) {
  $0 = 0;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 return (0)|0;
}
function _itsex_decompress16($src,$dst,$len,$it215) {
 $src = $src|0;
 $dst = $dst|0;
 $len = $len|0;
 $it215 = $it215|0;
 var $$old = 0, $$old6 = 0, $$sink = 0, $$sink4 = 0, $$sink5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bitnum = 0, $bits = 0, $block_count = 0;
 var $c = 0, $d = 0, $i = 0, $i1 = 0, $j = 0, $j2 = 0, $left = 0, $or$cond = 0, $pos = 0, $shift = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp + 32|0;
 $bitnum = sp + 28|0;
 $1 = $src;
 $2 = $dst;
 $3 = $len;
 $4 = $it215;
 $block_count = 0;
 HEAP32[$bitbuf>>2] = 0;
 HEAP32[$bitnum>>2] = 0;
 $left = 0;
 $temp = 0;
 $temp2 = 0;
 $$old = $3;
 $$old6 = ($$old|0)!=(0);
 L1: do {
  if ($$old6) {
   L2: while(1) {
    $5 = $block_count;
    $6 = ($5|0)!=(0);
    if (!($6)) {
     $block_count = 16384;
     $7 = $1;
     (_hio_read16l($7)|0);
     $left = 17;
     $temp2 = 0;
     $temp = 0;
     HEAP32[$bitnum>>2] = 0;
     HEAP32[$bitbuf>>2] = 0;
    }
    $8 = $block_count;
    $d = $8;
    $9 = $d;
    $10 = $3;
    $11 = ($9>>>0)>($10>>>0);
    if ($11) {
     $12 = $3;
     $d = $12;
    }
    $pos = 0;
    while(1) {
     $13 = $1;
     $14 = $left;
     $15 = $14&255;
     $16 = (_read_bits($13,$bitbuf,$bitnum,$15)|0);
     $bits = $16;
     $17 = $1;
     $18 = (_hio_eof($17)|0);
     $19 = ($18|0)!=(0);
     if ($19) {
      label = 8;
      break L2;
     }
     $20 = $left;
     $21 = $20&255;
     $22 = ($21|0)<(7);
     $23 = $left;
     $24 = $23&255;
     do {
      if ($22) {
       $25 = (($24) - 1)|0;
       $26 = 1 << $25;
       $i = $26;
       $27 = $bits;
       $j = $27;
       $28 = $i;
       $29 = $j;
       $30 = ($28|0)!=($29|0);
       if ($30) {
        label = 21;
       } else {
        $31 = $1;
        $32 = (_read_bits($31,$bitbuf,$bitnum,4)|0);
        $33 = (($32) + 1)|0;
        $bits = $33;
        $34 = $1;
        $35 = (_hio_eof($34)|0);
        $36 = ($35|0)!=(0);
        if ($36) {
         label = 12;
         break L2;
        }
        $37 = $bits;
        $38 = $37 & 255;
        $39 = $38&255;
        $40 = $39&255;
        $41 = $left;
        $42 = $41&255;
        $43 = ($40|0)<($42|0);
        $44 = $bits;
        $45 = (($44) + 1)|0;
        $$sink = $43 ? $44 : $45;
        $46 = $$sink & 255;
        $47 = $46&255;
        $48 = $47&255;
        $49 = $48&255;
        $left = $49;
       }
      } else {
       $50 = ($24|0)<(17);
       $51 = $left;
       $52 = $51&255;
       if ($50) {
        $53 = (17 - ($52))|0;
        $54 = 65535 >> $53;
        $55 = (($54) + 8)|0;
        $i1 = $55;
        $56 = $i1;
        $57 = (($56) - 16)|0;
        $58 = $57 & 65535;
        $j2 = $58;
        $59 = $bits;
        $60 = $j2;
        $61 = ($59>>>0)<=($60>>>0);
        if ($61) {
         label = 21;
         break;
        }
        $62 = $bits;
        $63 = $i1;
        $64 = $63 & 65535;
        $65 = ($62>>>0)>($64>>>0);
        if ($65) {
         label = 21;
         break;
        }
        $66 = $j2;
        $67 = $bits;
        $68 = (($67) - ($66))|0;
        $bits = $68;
        $69 = $bits;
        $70 = $69 & 255;
        $71 = $70&255;
        $72 = $71&255;
        $73 = $left;
        $74 = $73&255;
        $75 = ($72|0)<($74|0);
        $76 = $bits;
        $77 = (($76) + 1)|0;
        $$sink4 = $75 ? $76 : $77;
        $78 = $$sink4 & 255;
        $79 = $78&255;
        $80 = $79&255;
        $81 = $80&255;
        $left = $81;
        break;
       } else {
        $82 = ($52|0)>=(18);
        if ($82) {
         label = 24;
         break;
        }
        $83 = $bits;
        $84 = ($83>>>0)>=(65536);
        if (!($84)) {
         label = 21;
         break;
        }
        $85 = $bits;
        $86 = (($85) + 1)|0;
        $87 = $86&255;
        $88 = $87&255;
        $89 = $88 & 255;
        $90 = $89&255;
        $left = $90;
        break;
       }
      }
     } while(0);
     if ((label|0) == 21) {
      label = 0;
      $91 = $left;
      $92 = $91&255;
      $93 = ($92|0)<(16);
      if ($93) {
       $94 = $left;
       $95 = $94&255;
       $96 = (16 - ($95))|0;
       $97 = $96&255;
       $shift = $97;
       $98 = $bits;
       $99 = $shift;
       $100 = $99&255;
       $101 = $98 << $100;
       $102 = $101&65535;
       $c = $102;
       $103 = $shift;
       $104 = $103&255;
       $105 = $c;
       $106 = $105 << 16 >> 16;
       $107 = $106 >> $104;
       $108 = $107&65535;
       $c = $108;
       $109 = $c;
       $110 = $109 << 16 >> 16;
       $bits = $110;
      }
      $111 = $temp;
      $112 = $111 << 16 >> 16;
      $113 = $bits;
      $114 = (($113) + ($112))|0;
      $bits = $114;
      $115 = $bits;
      $116 = $115&65535;
      $temp = $116;
      $117 = $temp;
      $118 = $117 << 16 >> 16;
      $119 = $temp2;
      $120 = $119 << 16 >> 16;
      $121 = (($120) + ($118))|0;
      $122 = $121&65535;
      $temp2 = $122;
      $123 = $4;
      $124 = ($123|0)!=(0);
      $125 = $temp2;
      $126 = $temp;
      $$sink5 = $124 ? $125 : $126;
      $127 = $$sink5 << 16 >> 16;
      $128 = $127&65535;
      $129 = $pos;
      $130 = $2;
      $131 = (($130) + ($129<<1)|0);
      HEAP16[$131>>1] = $128;
      label = 24;
     }
     if ((label|0) == 24) {
      label = 0;
      $132 = $pos;
      $133 = (($132) + 1)|0;
      $pos = $133;
     }
     $134 = $pos;
     $135 = $d;
     $136 = ($134>>>0)<($135>>>0);
     if (!($136)) {
      break;
     }
    }
    $137 = $d;
    $138 = $block_count;
    $139 = (($138) - ($137))|0;
    $block_count = $139;
    $140 = $d;
    $141 = $3;
    $142 = (($141) - ($140))|0;
    $3 = $142;
    $143 = $d;
    $144 = $2;
    $145 = (($144) + ($143<<1)|0);
    $2 = $145;
    $146 = $3;
    $147 = ($146|0)>(0);
    $148 = $3;
    $149 = ($148|0)!=(0);
    $or$cond = $147 & $149;
    if (!($or$cond)) {
     break L1;
    }
   }
   if ((label|0) == 8) {
    $0 = -1;
    $150 = $0;
    STACKTOP = sp;return ($150|0);
   }
   else if ((label|0) == 12) {
    $0 = -1;
    $150 = $0;
    STACKTOP = sp;return ($150|0);
   }
  }
 } while(0);
 $0 = 0;
 $150 = $0;
 STACKTOP = sp;return ($150|0);
}
function _read_bits($ibuf,$bitbuf,$bitnum,$n) {
 $ibuf = $ibuf|0;
 $bitbuf = $bitbuf|0;
 $bitnum = $bitnum|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bbuf = 0;
 var $bnum = 0, $i = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ibuf;
 $1 = $bitbuf;
 $2 = $bitnum;
 $3 = $n;
 $retval = 0;
 $4 = $3;
 $i = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $bnum = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $bbuf = $8;
 $9 = $3;
 $10 = ($9|0)>(0);
 if (!($10)) {
  $35 = $retval;
  $36 = $i;
  $37 = (32 - ($36))|0;
  $38 = $35 >>> $37;
  STACKTOP = sp;return ($38|0);
 }
 while(1) {
  $11 = $bnum;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = (_hio_read8($13)|0);
   $15 = $14&255;
   $bbuf = $15;
   $bnum = 8;
  }
  $16 = $retval;
  $17 = $16 >>> 1;
  $retval = $17;
  $18 = $bbuf;
  $19 = $18 << 31;
  $20 = $retval;
  $21 = $20 | $19;
  $retval = $21;
  $22 = $bbuf;
  $23 = $22 >> 1;
  $bbuf = $23;
  $24 = $bnum;
  $25 = (($24) + -1)|0;
  $bnum = $25;
  $26 = $i;
  $27 = (($26) + -1)|0;
  $i = $27;
  $28 = $i;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
 }
 $30 = $3;
 $i = $30;
 $31 = $bnum;
 $32 = $2;
 HEAP32[$32>>2] = $31;
 $33 = $bbuf;
 $34 = $1;
 HEAP32[$34>>2] = $33;
 $35 = $retval;
 $36 = $i;
 $37 = (32 - ($36))|0;
 $38 = $35 >>> $37;
 STACKTOP = sp;return ($38|0);
}
function _load_sample($m,$f,$flags,$xxs,$buffer) {
 $m = $m|0;
 $f = $f|0;
 $flags = $flags|0;
 $xxs = $xxs|0;
 $buffer = $buffer|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytelen = 0, $extralen = 0, $i = 0, $len = 0;
 var $lpe = 0, $lpe1 = 0, $lps = 0, $lps2 = 0, $size = 0, $table = 0, $unroll_extralen = 0, $x = 0, $x2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $table = sp + 72|0;
 $1 = $m;
 $2 = $f;
 $3 = $flags;
 $4 = $xxs;
 $5 = $buffer;
 $6 = $3;
 $7 = $6 & 4096;
 $8 = ($7|0)!=(0);
 if ($8) {
  $size = 11;
  $9 = $3;
  $10 = $9 & 8192;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $5;
   _convert_hsc_to_sbi($12);
  }
  $13 = (_malloc(15)|0);
  $14 = $4;
  $15 = ((($14)) + 48|0);
  HEAP32[$15>>2] = $13;
  $16 = $4;
  $17 = ((($16)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $0 = -1;
   $494 = $0;
   STACKTOP = sp;return ($494|0);
  } else {
   $20 = $4;
   $21 = ((($20)) + 48|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = $4;
   $24 = ((($23)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 4|0);
   HEAP32[$24>>2] = $26;
   $27 = $4;
   $28 = ((($27)) + 48|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $5;
   dest=$29; src=$30; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $31 = $4;
   $32 = ((($31)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 | 32768;
   HEAP32[$32>>2] = $34;
   $35 = $4;
   $36 = ((($35)) + 32|0);
   HEAP32[$36>>2] = 11;
   $0 = 0;
   $494 = $0;
   STACKTOP = sp;return ($494|0);
  }
 }
 $37 = $4;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $0 = 0;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 $41 = $1;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $1;
  $44 = ((($43)) + 1288|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $3;
   $49 = $48 ^ -1;
   $50 = $49 & 16;
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = $2;
    $53 = $4;
    $54 = ((($53)) + 32|0);
    $55 = HEAP32[$54>>2]|0;
    (_hio_seek($52,$55,1)|0);
   }
   $0 = 0;
   $494 = $0;
   STACKTOP = sp;return ($494|0);
  }
 }
 $56 = $4;
 $57 = ((($56)) + 40|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $4;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($58|0)>($61|0);
 if ($62) {
  $63 = $4;
  $64 = ((($63)) + 32|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $4;
  $67 = ((($66)) + 40|0);
  HEAP32[$67>>2] = $65;
 }
 $68 = $4;
 $69 = ((($68)) + 36|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $4;
 $72 = ((($71)) + 32|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70|0)>=($73|0);
 if ($74) {
  label = 18;
 } else {
  $75 = $4;
  $76 = ((($75)) + 36|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $4;
  $79 = ((($78)) + 40|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)>=($80|0);
  if ($81) {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $82 = $4;
  $83 = ((($82)) + 40|0);
  HEAP32[$83>>2] = 0;
  $84 = $4;
  $85 = ((($84)) + 36|0);
  HEAP32[$85>>2] = 0;
  $86 = $4;
  $87 = ((($86)) + 44|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $88 & -7;
  HEAP32[$87>>2] = $89;
 }
 $90 = $4;
 $91 = ((($90)) + 32|0);
 $92 = HEAP32[$91>>2]|0;
 $bytelen = $92;
 $extralen = 4;
 $unroll_extralen = 0;
 $93 = $4;
 $94 = ((($93)) + 44|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95 & 4;
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = $4;
  $99 = ((($98)) + 44|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 ^ -1;
  $102 = $101 & 2;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = $4;
   $105 = ((($104)) + 44|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 & -5;
   HEAP32[$105>>2] = $107;
  }
 }
 $108 = $4;
 $109 = ((($108)) + 44|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 4;
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $4;
  $114 = ((($113)) + 40|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $4;
  $117 = ((($116)) + 36|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) - ($118))|0;
  $120 = $4;
  $121 = ((($120)) + 32|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $4;
  $124 = ((($123)) + 40|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($122) - ($125))|0;
  $127 = (($119) - ($126))|0;
  $unroll_extralen = $127;
  $128 = $unroll_extralen;
  $129 = ($128|0)<(0);
  $$ = $129 ? 0 : $127;
  $unroll_extralen = $$;
 }
 $130 = $4;
 $131 = ((($130)) + 44|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $132 & 1;
 $134 = ($133|0)!=(0);
 if ($134) {
  $135 = $bytelen;
  $136 = $135<<1;
  $bytelen = $136;
  $137 = $extralen;
  $138 = $137<<1;
  $extralen = $138;
  $139 = $unroll_extralen;
  $140 = $139<<1;
  $unroll_extralen = $140;
 }
 $141 = $bytelen;
 $142 = $extralen;
 $143 = (($141) + ($142))|0;
 $144 = $unroll_extralen;
 $145 = (($143) + ($144))|0;
 $146 = (($145) + 4)|0;
 $147 = (_malloc($146)|0);
 $148 = $4;
 $149 = ((($148)) + 48|0);
 HEAP32[$149>>2] = $147;
 $150 = $4;
 $151 = ((($150)) + 48|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)==(0|0);
 if ($153) {
  $0 = -1;
  $494 = $0;
  STACKTOP = sp;return ($494|0);
 }
 $154 = $4;
 $155 = ((($154)) + 48|0);
 $156 = HEAP32[$155>>2]|0;
 HEAP32[$156>>2] = 0;
 $157 = $4;
 $158 = ((($157)) + 48|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ((($159)) + 4|0);
 HEAP32[$158>>2] = $160;
 $161 = $3;
 $162 = $161 & 16;
 $163 = ($162|0)!=(0);
 do {
  if ($163) {
   $164 = $4;
   $165 = ((($164)) + 48|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $5;
   $168 = $bytelen;
   _memcpy(($166|0),($167|0),($168|0))|0;
  } else {
   $169 = $3;
   $170 = $169 & 16384;
   $171 = ($170|0)!=(0);
   if ($171) {
    $172 = $bytelen;
    $173 = (($172) + 1)|0;
    $174 = $173 >> 1;
    $x2 = $174;
    $175 = $2;
    (_hio_read($table,1,16,$175)|0);
    $176 = $4;
    $177 = ((($176)) + 48|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = $x2;
    $180 = (($178) + ($179)|0);
    $181 = $x2;
    $182 = $2;
    (_hio_read($180,1,$181,$182)|0);
    $183 = $4;
    $184 = ((($183)) + 48|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $x2;
    $187 = (($185) + ($186)|0);
    $188 = $4;
    $189 = ((($188)) + 48|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $bytelen;
    _adpcm4_decoder($187,$190,$table,$191);
    break;
   }
   $192 = $4;
   $193 = ((($192)) + 48|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $bytelen;
   $196 = $2;
   $197 = (_hio_read($194,1,$195,$196)|0);
   $x = $197;
   $198 = $x;
   $199 = $bytelen;
   $200 = ($198|0)!=($199|0);
   if ($200) {
    $201 = $4;
    $202 = ((($201)) + 48|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = $x;
    $205 = (($203) + ($204)|0);
    $206 = $bytelen;
    $207 = $x;
    $208 = (($206) - ($207))|0;
    _memset(($205|0),0,($208|0))|0;
   }
  }
 } while(0);
 $209 = $3;
 $210 = $209 & 8;
 $211 = ($210|0)!=(0);
 if ($211) {
  $212 = $4;
  $213 = ((($212)) + 48|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $4;
  $216 = ((($215)) + 32|0);
  $217 = HEAP32[$216>>2]|0;
  _convert_7bit_to_8bit($214,$217);
 }
 $218 = $4;
 $219 = ((($218)) + 44|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = $220 & 1;
 $222 = ($221|0)!=(0);
 if ($222) {
  $223 = $3;
  $224 = $223 & 64;
  $225 = ($224|0)!=(0);
  if ($225) {
   $226 = $4;
   $227 = ((($226)) + 48|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $4;
   $230 = ((($229)) + 32|0);
   $231 = HEAP32[$230>>2]|0;
   _convert_endian($228,$231);
  }
 }
 $232 = $3;
 $233 = $232 & 1;
 $234 = ($233|0)!=(0);
 if ($234) {
  $235 = $4;
  $236 = ((($235)) + 48|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $4;
  $239 = ((($238)) + 32|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $4;
  $242 = ((($241)) + 44|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $243 & 1;
  _convert_delta($237,$240,$244);
 } else {
  $245 = $3;
  $246 = $245 & 4;
  $247 = ($246|0)!=(0);
  if ($247) {
   $248 = $4;
   $249 = ((($248)) + 32|0);
   $250 = HEAP32[$249>>2]|0;
   $len = $250;
   $251 = $4;
   $252 = ((($251)) + 44|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $253 & 1;
   $255 = ($254|0)!=(0);
   if ($255) {
    $256 = $len;
    $257 = $256<<1;
    $len = $257;
   }
   $258 = $4;
   $259 = ((($258)) + 48|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = $len;
   _convert_delta($260,$261,0);
  }
 }
 $262 = $3;
 $263 = $262 & 2;
 $264 = ($263|0)!=(0);
 if ($264) {
  $265 = $4;
  $266 = ((($265)) + 48|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $4;
  $269 = ((($268)) + 32|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $4;
  $272 = ((($271)) + 44|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $273 & 1;
  _convert_signal($267,$270,$274);
 }
 $275 = $3;
 $276 = $275 & 128;
 $277 = ($276|0)!=(0);
 if ($277) {
  $278 = $4;
  $279 = ((($278)) + 48|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $4;
  $282 = ((($281)) + 32|0);
  $283 = HEAP32[$282>>2]|0;
  _convert_vidc_to_linear($280,$283);
 }
 $284 = $3;
 $285 = $284 & 512;
 $286 = ($285|0)!=(0);
 if ($286) {
  $287 = $4;
  $288 = ((($287)) + 36|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)==(0);
  if ($290) {
   $291 = $4;
   $292 = ((($291)) + 32|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $4;
   $295 = ((($294)) + 40|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)>($296|0);
   if ($297) {
    $298 = $4;
    $299 = ((($298)) + 44|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = $300 | 16;
    HEAP32[$299>>2] = $301;
   }
  }
 }
 $302 = $4;
 $303 = ((($302)) + 44|0);
 $304 = HEAP32[$303>>2]|0;
 $305 = $304 & 4;
 $306 = ($305|0)!=(0);
 if ($306) {
  $307 = $4;
  _unroll_loop($307);
  $308 = $unroll_extralen;
  $309 = $bytelen;
  $310 = (($309) + ($308))|0;
  $bytelen = $310;
 }
 $311 = $4;
 $312 = ((($311)) + 44|0);
 $313 = HEAP32[$312>>2]|0;
 $314 = $313 & 1;
 $315 = ($314|0)!=(0);
 $i = 0;
 L83: do {
  if ($315) {
   while(1) {
    $316 = $i;
    $317 = ($316|0)<(8);
    if (!($317)) {
     break L83;
    }
    $318 = $bytelen;
    $319 = (($318) - 2)|0;
    $320 = $i;
    $321 = (($319) + ($320))|0;
    $322 = $4;
    $323 = ((($322)) + 48|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + ($321)|0);
    $326 = HEAP8[$325>>0]|0;
    $327 = $bytelen;
    $328 = $i;
    $329 = (($327) + ($328))|0;
    $330 = $4;
    $331 = ((($330)) + 48|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = (($332) + ($329)|0);
    HEAP8[$333>>0] = $326;
    $334 = $i;
    $335 = (($334) + 1)|0;
    $i = $335;
   }
  } else {
   while(1) {
    $336 = $i;
    $337 = ($336|0)<(4);
    if (!($337)) {
     break L83;
    }
    $338 = $bytelen;
    $339 = (($338) - 1)|0;
    $340 = $i;
    $341 = (($339) + ($340))|0;
    $342 = $4;
    $343 = ((($342)) + 48|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = (($344) + ($341)|0);
    $346 = HEAP8[$345>>0]|0;
    $347 = $bytelen;
    $348 = $i;
    $349 = (($347) + ($348))|0;
    $350 = $4;
    $351 = ((($350)) + 48|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = (($352) + ($349)|0);
    HEAP8[$353>>0] = $346;
    $354 = $i;
    $355 = (($354) + 1)|0;
    $i = $355;
   }
  }
 } while(0);
 $356 = $4;
 $357 = ((($356)) + 44|0);
 $358 = HEAP32[$357>>2]|0;
 $359 = $358 & 1;
 $360 = ($359|0)!=(0);
 $361 = $4;
 $362 = ((($361)) + 48|0);
 $363 = HEAP32[$362>>2]|0;
 $364 = HEAP8[$363>>0]|0;
 $365 = $4;
 $366 = ((($365)) + 48|0);
 $367 = HEAP32[$366>>2]|0;
 if ($360) {
  $368 = ((($367)) + -2|0);
  HEAP8[$368>>0] = $364;
  $369 = $4;
  $370 = ((($369)) + 48|0);
  $371 = HEAP32[$370>>2]|0;
  $372 = ((($371)) + 1|0);
  $373 = HEAP8[$372>>0]|0;
  $374 = $4;
  $375 = ((($374)) + 48|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = ((($376)) + -1|0);
  HEAP8[$377>>0] = $373;
 } else {
  $378 = ((($367)) + -1|0);
  HEAP8[$378>>0] = $364;
 }
 $379 = $4;
 $380 = ((($379)) + 44|0);
 $381 = HEAP32[$380>>2]|0;
 $382 = $381 & 2;
 $383 = ($382|0)!=(0);
 L95: do {
  if ($383) {
   $384 = $4;
   $385 = ((($384)) + 44|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = $386 & 1;
   $388 = ($387|0)!=(0);
   $389 = $4;
   $390 = ((($389)) + 40|0);
   $391 = HEAP32[$390>>2]|0;
   if (!($388)) {
    $457 = $unroll_extralen;
    $458 = (($391) + ($457))|0;
    $lpe1 = $458;
    $459 = $4;
    $460 = ((($459)) + 36|0);
    $461 = HEAP32[$460>>2]|0;
    $lps2 = $461;
    $462 = $lpe1;
    $463 = (($462) - 1)|0;
    $464 = $4;
    $465 = ((($464)) + 48|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = (($466) + ($463)|0);
    $468 = HEAP8[$467>>0]|0;
    $469 = $lpe1;
    $470 = $4;
    $471 = ((($470)) + 48|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = (($472) + ($469)|0);
    HEAP8[$473>>0] = $468;
    $i = 0;
    while(1) {
     $474 = $i;
     $475 = ($474|0)<(3);
     if (!($475)) {
      break L95;
     }
     $476 = $lps2;
     $477 = $i;
     $478 = (($476) + ($477))|0;
     $479 = $4;
     $480 = ((($479)) + 48|0);
     $481 = HEAP32[$480>>2]|0;
     $482 = (($481) + ($478)|0);
     $483 = HEAP8[$482>>0]|0;
     $484 = $lpe1;
     $485 = (($484) + 1)|0;
     $486 = $i;
     $487 = (($485) + ($486))|0;
     $488 = $4;
     $489 = ((($488)) + 48|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = (($490) + ($487)|0);
     HEAP8[$491>>0] = $483;
     $492 = $i;
     $493 = (($492) + 1)|0;
     $i = $493;
    }
   }
   $392 = $391<<1;
   $lpe = $392;
   $393 = $4;
   $394 = ((($393)) + 36|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = $395<<1;
   $lps = $396;
   $397 = $4;
   $398 = ((($397)) + 44|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = $399 & 4;
   $401 = ($400|0)!=(0);
   if ($401) {
    $402 = $4;
    $403 = ((($402)) + 40|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = $4;
    $406 = ((($405)) + 36|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = (($404) - ($407))|0;
    $409 = $408<<1;
    $410 = $lpe;
    $411 = (($410) + ($409))|0;
    $lpe = $411;
   }
   $412 = $lpe;
   $413 = (($412) - 2)|0;
   $414 = $4;
   $415 = ((($414)) + 48|0);
   $416 = HEAP32[$415>>2]|0;
   $417 = (($416) + ($413)|0);
   $418 = HEAP8[$417>>0]|0;
   $419 = $lpe;
   $420 = $4;
   $421 = ((($420)) + 48|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = (($422) + ($419)|0);
   HEAP8[$423>>0] = $418;
   $424 = $lpe;
   $425 = (($424) - 1)|0;
   $426 = $4;
   $427 = ((($426)) + 48|0);
   $428 = HEAP32[$427>>2]|0;
   $429 = (($428) + ($425)|0);
   $430 = HEAP8[$429>>0]|0;
   $431 = $lpe;
   $432 = (($431) + 1)|0;
   $433 = $4;
   $434 = ((($433)) + 48|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = (($435) + ($432)|0);
   HEAP8[$436>>0] = $430;
   $i = 0;
   while(1) {
    $437 = $i;
    $438 = ($437|0)<(6);
    if (!($438)) {
     break L95;
    }
    $439 = $lps;
    $440 = $i;
    $441 = (($439) + ($440))|0;
    $442 = $4;
    $443 = ((($442)) + 48|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = (($444) + ($441)|0);
    $446 = HEAP8[$445>>0]|0;
    $447 = $lpe;
    $448 = (($447) + 2)|0;
    $449 = $i;
    $450 = (($448) + ($449))|0;
    $451 = $4;
    $452 = ((($451)) + 48|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = (($453) + ($450)|0);
    HEAP8[$454>>0] = $446;
    $455 = $i;
    $456 = (($455) + 1)|0;
    $i = $456;
   }
  }
 } while(0);
 $0 = 0;
 $494 = $0;
 STACKTOP = sp;return ($494|0);
}
function _convert_hsc_to_sbi($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i = 0, $x = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 9|0;
 $0 = $a;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(10);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $x = $6;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $i;
  $13 = $0;
  $14 = (($13) + ($12)|0);
  HEAP8[$14>>0] = $11;
  $15 = $x;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $18 = $0;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $15;
  $20 = $i;
  $21 = (($20) + 2)|0;
  $i = $21;
 }
 $22 = $0;
 dest=$b; src=$22; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $23 = ((($b)) + 10|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 HEAP8[$26>>0] = $24;
 $27 = ((($b)) + 9|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $0;
 $30 = ((($29)) + 10|0);
 HEAP8[$30>>0] = $28;
 $31 = ((($b)) + 8|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $0;
 $34 = ((($33)) + 9|0);
 HEAP8[$34>>0] = $32;
 STACKTOP = sp;return;
}
function _adpcm4_decoder($inp,$outp,$tab,$len) {
 $inp = $inp|0;
 $outp = $outp|0;
 $tab = $tab|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b0 = 0, $b1 = 0, $delta = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $inp;
 $1 = $outp;
 $2 = $tab;
 $3 = $len;
 $delta = 0;
 $4 = $3;
 $5 = (($4) + 1)|0;
 $6 = (($5|0) / 2)&-1;
 $3 = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = HEAP8[$10>>0]|0;
  $b0 = $11;
  $12 = $0;
  $13 = ((($12)) + 1|0);
  $0 = $13;
  $14 = HEAP8[$12>>0]|0;
  $15 = $14&255;
  $16 = $15 >> 4;
  $17 = $16&255;
  $b1 = $17;
  $18 = $b0;
  $19 = $18&255;
  $20 = $19 & 15;
  $21 = $2;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = $delta;
  $26 = $25 << 24 >> 24;
  $27 = (($26) + ($24))|0;
  $28 = $27&255;
  $delta = $28;
  $29 = $delta;
  $30 = $1;
  $31 = ((($30)) + 1|0);
  $1 = $31;
  HEAP8[$30>>0] = $29;
  $32 = $b1;
  $33 = $32&255;
  $34 = $33 & 15;
  $35 = $2;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = $delta;
  $40 = $39 << 24 >> 24;
  $41 = (($40) + ($38))|0;
  $42 = $41&255;
  $delta = $42;
  $43 = $delta;
  $44 = $1;
  $45 = ((($44)) + 1|0);
  $1 = $45;
  HEAP8[$44>>0] = $43;
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 STACKTOP = sp;return;
}
function _convert_7bit_to_8bit($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 << 1;
  $9 = $8&255;
  HEAP8[$5>>0] = $9;
  $10 = $0;
  $11 = ((($10)) + 1|0);
  $0 = $11;
 }
 STACKTOP = sp;return;
}
function _convert_endian($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $b = $6;
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $0;
  HEAP8[$10>>0] = $9;
  $11 = $b;
  $12 = $0;
  $13 = ((($12)) + 1|0);
  HEAP8[$13>>0] = $11;
  $14 = $0;
  $15 = ((($14)) + 2|0);
  $0 = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function _convert_delta($p,$l,$r) {
 $p = $p|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $abs = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $2 = $r;
 $3 = $0;
 $w = $3;
 $abs = 0;
 $4 = $2;
 $5 = ($4|0)!=(0);
 if ($5) {
  while(1) {
   $6 = $1;
   $7 = (($6) + -1)|0;
   $1 = $7;
   $8 = ($6|0)!=(0);
   if (!($8)) {
    break;
   }
   $9 = $w;
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = $abs;
   $13 = $12&65535;
   $14 = (($11) + ($13))|0;
   $15 = $14&65535;
   $abs = $15;
   $16 = $abs;
   $17 = $w;
   $18 = ((($17)) + 2|0);
   $w = $18;
   HEAP16[$17>>1] = $16;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $19 = $1;
   $20 = (($19) + -1)|0;
   $1 = $20;
   $21 = ($19|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $0;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $abs;
   $26 = $25&65535;
   $27 = (($24) + ($26))|0;
   $28 = $27&65535;
   $abs = $28;
   $29 = $abs;
   $30 = $29&255;
   $31 = $0;
   $32 = ((($31)) + 1|0);
   $0 = $32;
   HEAP8[$31>>0] = $30;
  }
  STACKTOP = sp;return;
 }
}
function _convert_signal($p,$l,$r) {
 $p = $p|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $2 = $r;
 $3 = $0;
 $w = $3;
 $4 = $2;
 $5 = ($4|0)!=(0);
 if ($5) {
  while(1) {
   $6 = $1;
   $7 = (($6) + -1)|0;
   $1 = $7;
   $8 = ($6|0)!=(0);
   if (!($8)) {
    break;
   }
   $9 = $w;
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = (($11) + 32768)|0;
   $13 = $12&65535;
   HEAP16[$9>>1] = $13;
   $14 = $w;
   $15 = ((($14)) + 2|0);
   $w = $15;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $16 = $1;
   $17 = (($16) + -1)|0;
   $1 = $17;
   $18 = ($16|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $0;
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = (($21) + -128)|0;
   $23 = $22&255;
   HEAP8[$19>>0] = $23;
   $24 = $0;
   $25 = ((($24)) + 1|0);
   $0 = $25;
  }
  STACKTOP = sp;return;
 }
}
function _convert_vidc_to_linear($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $x = $8;
  $9 = $x;
  $10 = $9&255;
  $11 = $10 >> 1;
  $12 = (1104 + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14)|0);
  HEAP8[$16>>0] = $13;
  $17 = $x;
  $18 = $17&255;
  $19 = $18 & 1;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $i;
   $22 = $0;
   $23 = (($22) + ($21)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = Math_imul($25, -1)|0;
   $27 = $26&255;
   HEAP8[$23>>0] = $27;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 STACKTOP = sp;return;
}
function _unroll_loop($xxs) {
 $xxs = $xxs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $loop_size = 0, $s16 = 0, $s8 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xxs;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $s16 = $3;
 $4 = $0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $s8 = $6;
 $7 = $0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 $14 = $0;
 if ($13) {
  $15 = ((($14)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $start = $16;
 } else {
  $17 = ((($14)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $start = $18;
 }
 $19 = $0;
 $20 = ((($19)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) - ($24))|0;
 $loop_size = $25;
 $26 = $0;
 $27 = ((($26)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 1;
 $30 = ($29|0)!=(0);
 $31 = $start;
 if ($30) {
  $32 = $s16;
  $33 = (($32) + ($31<<1)|0);
  $s16 = $33;
  $i = 0;
  while(1) {
   $34 = $i;
   $35 = $loop_size;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $s16;
   $38 = $i;
   $39 = (0 - ($38))|0;
   $40 = (($37) + ($39<<1)|0);
   $41 = ((($40)) + -2|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $s16;
   $44 = $i;
   $45 = (($43) + ($44<<1)|0);
   HEAP16[$45>>1] = $42;
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  STACKTOP = sp;return;
 } else {
  $48 = $s8;
  $49 = (($48) + ($31)|0);
  $s8 = $49;
  $i = 0;
  while(1) {
   $50 = $i;
   $51 = $loop_size;
   $52 = ($50|0)<($51|0);
   if (!($52)) {
    break;
   }
   $53 = $s8;
   $54 = $i;
   $55 = (0 - ($54))|0;
   $56 = (($53) + ($55)|0);
   $57 = ((($56)) + -1|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $s8;
   $60 = $i;
   $61 = (($59) + ($60)|0);
   HEAP8[$61>>0] = $58;
   $62 = $i;
   $63 = (($62) + 1)|0;
   $i = $63;
  }
  STACKTOP = sp;return;
 }
}
function _xm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,17,$4)|0);
 $6 = ($5>>>0)<(17);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,1384,17)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _xm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $j = 0, $mod = 0, $sid = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $xfh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $xfh = sp + 24|0;
 $tracker_name = sp + 388|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($xfh,17,1,$7)|0);
 $8 = ((($xfh)) + 17|0);
 $9 = $2;
 (_hio_read($8,20,1,$9)|0);
 $10 = $2;
 (_hio_read8($10)|0);
 $11 = ((($xfh)) + 38|0);
 $12 = $2;
 (_hio_read($11,20,1,$12)|0);
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($xfh)) + 58|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read32l($16)|0);
 $18 = ((($xfh)) + 60|0);
 HEAP32[$18>>2] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($xfh)) + 64|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($xfh)) + 66|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($xfh)) + 68|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($xfh)) + 70|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read16l($31)|0);
 $33 = ((($xfh)) + 72|0);
 HEAP16[$33>>1] = $32;
 $34 = $2;
 $35 = (_hio_read16l($34)|0);
 $36 = ((($xfh)) + 74|0);
 HEAP16[$36>>1] = $35;
 $37 = $2;
 $38 = (_hio_read16l($37)|0);
 $39 = ((($xfh)) + 76|0);
 HEAP16[$39>>1] = $38;
 $40 = $2;
 $41 = (_hio_read16l($40)|0);
 $42 = ((($xfh)) + 78|0);
 HEAP16[$42>>1] = $41;
 $43 = ((($xfh)) + 80|0);
 $44 = ((($xfh)) + 60|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) - 20)|0;
 $47 = $2;
 (_hio_read($43,$46,1,$47)|0);
 $48 = $mod;
 $49 = ((($xfh)) + 17|0);
 (_strncpy(($48|0),($49|0),20)|0);
 $50 = ((($xfh)) + 64|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = $mod;
 $54 = ((($53)) + 156|0);
 HEAP32[$54>>2] = $52;
 $55 = ((($xfh)) + 66|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $mod;
 $59 = ((($58)) + 160|0);
 HEAP32[$59>>2] = $57;
 $60 = ((($xfh)) + 68|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 $63 = $mod;
 $64 = ((($63)) + 136|0);
 HEAP32[$64>>2] = $62;
 $65 = ((($xfh)) + 70|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = $mod;
 $69 = ((($68)) + 128|0);
 HEAP32[$69>>2] = $67;
 $70 = $mod;
 $71 = ((($70)) + 136|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $mod;
 $74 = ((($73)) + 128|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = Math_imul($72, $75)|0;
 $77 = (($76) + 1)|0;
 $78 = $mod;
 $79 = ((($78)) + 132|0);
 HEAP32[$79>>2] = $77;
 $80 = ((($xfh)) + 72|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $81&65535;
 $83 = $mod;
 $84 = ((($83)) + 140|0);
 HEAP32[$84>>2] = $82;
 $85 = ((($xfh)) + 76|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = $mod;
 $89 = ((($88)) + 148|0);
 HEAP32[$89>>2] = $87;
 $90 = ((($xfh)) + 78|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = $91&65535;
 $93 = $mod;
 $94 = ((($93)) + 152|0);
 HEAP32[$94>>2] = $92;
 $95 = ((($xfh)) + 74|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = $96&65535;
 $98 = $97 & 1;
 $99 = ($98|0)!=(0);
 $100 = $99 ? 4096 : 0;
 $101 = $1;
 $102 = ((($101)) + 1280|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $103 | $100;
 HEAP32[$102>>2] = $104;
 $105 = $mod;
 $106 = ((($105)) + 952|0);
 $107 = ((($xfh)) + 80|0);
 $108 = $mod;
 $109 = ((($108)) + 156|0);
 $110 = HEAP32[$109>>2]|0;
 _memcpy(($106|0),($107|0),($110|0))|0;
 $111 = ((($tracker_name)) + 20|0);
 HEAP8[$111>>0] = 0;
 $112 = ((($xfh)) + 38|0);
 HEAP32[$vararg_buffer>>2] = $112;
 (_snprintf($tracker_name,20,1264,$vararg_buffer)|0);
 $i = 20;
 while(1) {
  $113 = $i;
  $114 = ($113|0)>=(0);
  if (!($114)) {
   break;
  }
  $115 = $i;
  $116 = (($tracker_name) + ($115)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117 << 24 >> 24;
  $119 = ($118|0)==(32);
  if ($119) {
   $120 = $i;
   $121 = (($tracker_name) + ($120)|0);
   HEAP8[$121>>0] = 0;
  }
  $122 = $i;
  $123 = (($tracker_name) + ($122)|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = ($124<<24>>24)!=(0);
  if ($125) {
   break;
  }
  $126 = $i;
  $127 = (($126) + -1)|0;
  $i = $127;
 }
 $128 = ((($xfh)) + 60|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)==(275);
 if ($130) {
  (_strcpy(($tracker_name|0),(4560|0))|0);
 } else {
  $131 = HEAP8[$tracker_name>>0]|0;
  $132 = $131 << 24 >> 24;
  $133 = ($132|0)==(0);
  if ($133) {
   (_strcpy(($tracker_name|0),(3352|0))|0);
  }
 }
 $134 = (_strncmp($tracker_name,1280,19)|0);
 $135 = ($134|0)!=(0);
 if (!($135)) {
  $136 = $mod;
  $137 = ((($136)) + 152|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)<=(10);
  if ($139) {
   $140 = $mod;
   $141 = ((($140)) + 152|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142<<1;
   $144 = (53 - ($143))|0;
   $145 = ($144*125)|0;
   $146 = (($145|0) / 33)&-1;
   $147 = $mod;
   $148 = ((($147)) + 152|0);
   HEAP32[$148>>2] = $146;
  }
 }
 $149 = (_strncmp($tracker_name,1304,18)|0);
 $150 = ($149|0)!=(0);
 if (!($150)) {
  (_strcpy(($tracker_name|0),(1328|0))|0);
 }
 $151 = (_strncmp($tracker_name,1352,12)|0);
 $152 = ($151|0)!=(0);
 if (!($152)) {
  $153 = $1;
  $154 = ((($153)) + 1280|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $155 | 67108864;
  HEAP32[$154>>2] = $156;
 }
 $157 = $1;
 $158 = ((($xfh)) + 58|0);
 $159 = HEAP16[$158>>1]|0;
 $160 = $159&65535;
 $161 = $160 >> 8;
 $162 = ((($xfh)) + 58|0);
 $163 = HEAP16[$162>>1]|0;
 $164 = $163&65535;
 $165 = $164 & 255;
 HEAP32[$vararg_buffer1>>2] = $tracker_name;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $161;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $165;
 _set_type($157,1368,$vararg_buffer1);
 $166 = $2;
 $167 = $3;
 $168 = ((($xfh)) + 60|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = (($167) + ($169))|0;
 $171 = (($170) + 60)|0;
 (_hio_seek($166,$171,0)|0);
 $172 = ((($xfh)) + 58|0);
 $173 = HEAP16[$172>>1]|0;
 $174 = $173&65535;
 $175 = ($174|0)<=(259);
 $176 = $1;
 $177 = ((($xfh)) + 58|0);
 $178 = HEAP16[$177>>1]|0;
 $179 = $178&65535;
 $180 = $2;
 if ($175) {
  $181 = (_load_instruments($176,$179,$180)|0);
  $182 = ($181|0)<(0);
  if ($182) {
   $0 = -1;
   $258 = $0;
   STACKTOP = sp;return ($258|0);
  }
  $183 = $1;
  $184 = ((($xfh)) + 58|0);
  $185 = HEAP16[$184>>1]|0;
  $186 = $185&65535;
  $187 = $2;
  $188 = (_load_patterns($183,$186,$187)|0);
  $189 = ($188|0)<(0);
  if ($189) {
   $0 = -1;
   $258 = $0;
   STACKTOP = sp;return ($258|0);
  }
 } else {
  $190 = (_load_patterns($176,$179,$180)|0);
  $191 = ($190|0)<(0);
  if ($191) {
   $0 = -1;
   $258 = $0;
   STACKTOP = sp;return ($258|0);
  }
  $192 = $1;
  $193 = ((($xfh)) + 58|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194&65535;
  $196 = $2;
  $197 = (_load_instruments($192,$195,$196)|0);
  $198 = ($197|0)<(0);
  if ($198) {
   $0 = -1;
   $258 = $0;
   STACKTOP = sp;return ($258|0);
  }
 }
 $199 = ((($xfh)) + 58|0);
 $200 = HEAP16[$199>>1]|0;
 $201 = $200&65535;
 $202 = ($201|0)<=(259);
 L40: do {
  if ($202) {
   $i = 0;
   L42: while(1) {
    $203 = $i;
    $204 = $mod;
    $205 = ((($204)) + 140|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($203|0)<($206|0);
    if (!($207)) {
     break L40;
    }
    $j = 0;
    while(1) {
     $208 = $j;
     $209 = $i;
     $210 = $mod;
     $211 = ((($210)) + 176|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = (($212) + (($209*764)|0)|0);
     $214 = ((($213)) + 36|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($208|0)<($215|0);
     if (!($216)) {
      break;
     }
     $217 = $j;
     $218 = $i;
     $219 = $mod;
     $220 = ((($219)) + 176|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + (($218*764)|0)|0);
     $223 = ((($222)) + 756|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($217<<6)|0);
     $226 = ((($225)) + 40|0);
     $227 = HEAP32[$226>>2]|0;
     $sid = $227;
     $228 = $1;
     $229 = $2;
     $230 = $sid;
     $231 = $mod;
     $232 = ((($231)) + 180|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = (($233) + (($230*52)|0)|0);
     $235 = (_load_sample($228,$229,1,$234,0)|0);
     $236 = ($235|0)<(0);
     if ($236) {
      break L42;
     }
     $237 = $j;
     $238 = (($237) + 1)|0;
     $j = $238;
    }
    $239 = $i;
    $240 = (($239) + 1)|0;
    $i = $240;
   }
   $0 = -1;
   $258 = $0;
   STACKTOP = sp;return ($258|0);
  }
 } while(0);
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = $mod;
  $243 = ((($242)) + 136|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($241|0)<($244|0);
  if (!($245)) {
   break;
  }
  $246 = $i;
  $247 = $mod;
  $248 = ((($247)) + 184|0);
  $249 = (($248) + (($246*12)|0)|0);
  HEAP32[$249>>2] = 128;
  $250 = $i;
  $251 = (($250) + 1)|0;
  $i = $251;
 }
 $252 = $1;
 $253 = ((($252)) + 1280|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $254 | 704643104;
 HEAP32[$253>>2] = $255;
 $256 = $1;
 $257 = ((($256)) + 1284|0);
 HEAP32[$257>>2] = 1;
 $0 = 0;
 $258 = $0;
 STACKTOP = sp;return ($258|0);
}
function _load_instruments($m,$version,$f) {
 $m = $m|0;
 $version = $version|0;
 $f = $f|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flags = 0, $i = 0, $j = 0, $mod = 0, $sample_num = 0, $sub = 0, $sub1 = 0;
 var $xi = 0, $xih = 0, $xsh = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xih = sp + 672|0;
 $xi = sp + 728|0;
 $xsh = sp + 32|0;
 $1 = $m;
 $2 = $version;
 $3 = $f;
 $4 = $1;
 $mod = $4;
 $sample_num = 0;
 $5 = $mod;
 $6 = ((($5)) + 144|0);
 HEAP32[$6>>2] = 1024;
 $7 = $mod;
 $8 = (_instrument_init($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $0 = -1;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 }
 $i = 0;
 L5: while(1) {
  $10 = $i;
  $11 = $mod;
  $12 = ((($11)) + 140|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 176|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($15*764)|0)|0);
  $xxi = $19;
  $20 = $3;
  $21 = (_hio_read32l($20)|0);
  HEAP32[$xih>>2] = $21;
  $22 = $3;
  $23 = (_hio_eof($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   label = 6;
   break;
  }
  $28 = ((($xih)) + 4|0);
  $29 = $3;
  (_hio_read($28,22,1,$29)|0);
  $30 = $3;
  $31 = (_hio_read8($30)|0);
  $32 = ((($xih)) + 26|0);
  HEAP8[$32>>0] = $31;
  $33 = $3;
  $34 = (_hio_read16l($33)|0);
  $35 = ((($xih)) + 28|0);
  HEAP16[$35>>1] = $34;
  $36 = $3;
  $37 = (_hio_read32l($36)|0);
  $38 = ((($xih)) + 32|0);
  HEAP32[$38>>2] = $37;
  $39 = ((($xih)) + 28|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = ($41|0)>(16);
  if ($42) {
   label = 10;
   break;
  }
  $43 = ((($xih)) + 28|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = ($45|0)>(0);
  if ($46) {
   $47 = ((($xih)) + 32|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48>>>0)>(256);
   if ($49) {
    label = 10;
    break;
   }
  }
  $53 = $mod;
  $54 = $i;
  $55 = ((($xih)) + 4|0);
  (_instrument_name($53,$54,$55,22)|0);
  $56 = ((($xih)) + 28|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57&65535;
  $59 = $xxi;
  $60 = ((($59)) + 36|0);
  HEAP32[$60>>2] = $58;
  $61 = $xxi;
  $62 = ((($61)) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)>(16);
  if ($64) {
   $65 = $xxi;
   $66 = ((($65)) + 36|0);
   HEAP32[$66>>2] = 16;
  }
  $67 = $xxi;
  $68 = ((($67)) + 36|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  L16: do {
   if ($70) {
    $71 = $mod;
    $72 = $i;
    $73 = $xxi;
    $74 = ((($73)) + 36|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_subinstrument_alloc($71,$72,$75)|0);
    $77 = ($76|0)<(0);
    if ($77) {
     label = 15;
     break L5;
    }
    $78 = HEAP32[$xih>>2]|0;
    $79 = ($78>>>0)<(33);
    if ($79) {
     label = 17;
     break L5;
    }
    $80 = HEAP32[$xih>>2]|0;
    $81 = ($80>>>0)<(241);
    L20: do {
     if ($81) {
      _memset(($xi|0),0,208)|0;
      $82 = $3;
      $83 = HEAP32[$xih>>2]|0;
      $84 = (($83) - 33)|0;
      (_hio_seek($82,$84,1)|0);
     } else {
      $85 = $3;
      (_hio_read($xi,96,1,$85)|0);
      $j = 0;
      while(1) {
       $86 = $j;
       $87 = ($86|0)<(24);
       if (!($87)) {
        break;
       }
       $88 = $3;
       $89 = (_hio_read16l($88)|0);
       $90 = $j;
       $91 = ((($xi)) + 96|0);
       $92 = (($91) + ($90<<1)|0);
       HEAP16[$92>>1] = $89;
       $93 = $j;
       $94 = (($93) + 1)|0;
       $j = $94;
      }
      $j = 0;
      while(1) {
       $95 = $j;
       $96 = ($95|0)<(24);
       $97 = $3;
       if (!($96)) {
        break;
       }
       $98 = (_hio_read16l($97)|0);
       $99 = $j;
       $100 = ((($xi)) + 144|0);
       $101 = (($100) + ($99<<1)|0);
       HEAP16[$101>>1] = $98;
       $102 = $j;
       $103 = (($102) + 1)|0;
       $j = $103;
      }
      $104 = (_hio_read8($97)|0);
      $105 = ((($xi)) + 192|0);
      HEAP8[$105>>0] = $104;
      $106 = $3;
      $107 = (_hio_read8($106)|0);
      $108 = ((($xi)) + 193|0);
      HEAP8[$108>>0] = $107;
      $109 = $3;
      $110 = (_hio_read8($109)|0);
      $111 = ((($xi)) + 194|0);
      HEAP8[$111>>0] = $110;
      $112 = $3;
      $113 = (_hio_read8($112)|0);
      $114 = ((($xi)) + 195|0);
      HEAP8[$114>>0] = $113;
      $115 = $3;
      $116 = (_hio_read8($115)|0);
      $117 = ((($xi)) + 196|0);
      HEAP8[$117>>0] = $116;
      $118 = $3;
      $119 = (_hio_read8($118)|0);
      $120 = ((($xi)) + 197|0);
      HEAP8[$120>>0] = $119;
      $121 = $3;
      $122 = (_hio_read8($121)|0);
      $123 = ((($xi)) + 198|0);
      HEAP8[$123>>0] = $122;
      $124 = $3;
      $125 = (_hio_read8($124)|0);
      $126 = ((($xi)) + 199|0);
      HEAP8[$126>>0] = $125;
      $127 = $3;
      $128 = (_hio_read8($127)|0);
      $129 = ((($xi)) + 200|0);
      HEAP8[$129>>0] = $128;
      $130 = $3;
      $131 = (_hio_read8($130)|0);
      $132 = ((($xi)) + 201|0);
      HEAP8[$132>>0] = $131;
      $133 = $3;
      $134 = (_hio_read8($133)|0);
      $135 = ((($xi)) + 202|0);
      HEAP8[$135>>0] = $134;
      $136 = $3;
      $137 = (_hio_read8($136)|0);
      $138 = ((($xi)) + 203|0);
      HEAP8[$138>>0] = $137;
      $139 = $3;
      $140 = (_hio_read8($139)|0);
      $141 = ((($xi)) + 204|0);
      HEAP8[$141>>0] = $140;
      $142 = $3;
      $143 = (_hio_read8($142)|0);
      $144 = ((($xi)) + 205|0);
      HEAP8[$144>>0] = $143;
      $145 = $3;
      $146 = (_hio_read16l($145)|0);
      $147 = ((($xi)) + 206|0);
      HEAP16[$147>>1] = $146;
      $148 = $3;
      $149 = HEAP32[$xih>>2]|0;
      $150 = (($149) - 241)|0;
      (_hio_seek($148,$150,1)|0);
      $151 = ((($xi)) + 206|0);
      $152 = HEAP16[$151>>1]|0;
      $153 = $152&65535;
      $154 = $153 << 1;
      $155 = $xxi;
      $156 = ((($155)) + 40|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($xi)) + 192|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158&255;
      $160 = $xxi;
      $161 = ((($160)) + 44|0);
      $162 = ((($161)) + 4|0);
      HEAP32[$162>>2] = $159;
      $163 = ((($xi)) + 194|0);
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = $xxi;
      $167 = ((($166)) + 44|0);
      $168 = ((($167)) + 12|0);
      HEAP32[$168>>2] = $165;
      $169 = ((($xi)) + 195|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $170&255;
      $172 = $xxi;
      $173 = ((($172)) + 44|0);
      $174 = ((($173)) + 20|0);
      HEAP32[$174>>2] = $171;
      $175 = ((($xi)) + 196|0);
      $176 = HEAP8[$175>>0]|0;
      $177 = $176&255;
      $178 = $xxi;
      $179 = ((($178)) + 44|0);
      $180 = ((($179)) + 24|0);
      HEAP32[$180>>2] = $177;
      $181 = ((($xi)) + 200|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = $182&255;
      $184 = $xxi;
      $185 = ((($184)) + 44|0);
      HEAP32[$185>>2] = $183;
      $186 = ((($xi)) + 193|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = $187&255;
      $189 = $xxi;
      $190 = ((($189)) + 200|0);
      $191 = ((($190)) + 4|0);
      HEAP32[$191>>2] = $188;
      $192 = ((($xi)) + 197|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = $xxi;
      $196 = ((($195)) + 200|0);
      $197 = ((($196)) + 12|0);
      HEAP32[$197>>2] = $194;
      $198 = ((($xi)) + 198|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = $xxi;
      $202 = ((($201)) + 200|0);
      $203 = ((($202)) + 20|0);
      HEAP32[$203>>2] = $200;
      $204 = ((($xi)) + 199|0);
      $205 = HEAP8[$204>>0]|0;
      $206 = $205&255;
      $207 = $xxi;
      $208 = ((($207)) + 200|0);
      $209 = ((($208)) + 24|0);
      HEAP32[$209>>2] = $206;
      $210 = ((($xi)) + 201|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = $211&255;
      $213 = $xxi;
      $214 = ((($213)) + 200|0);
      HEAP32[$214>>2] = $212;
      $215 = $xxi;
      $216 = ((($215)) + 44|0);
      $217 = ((($216)) + 4|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($218|0)<=(0);
      if ($219) {
       label = 28;
      } else {
       $220 = $xxi;
       $221 = ((($220)) + 44|0);
       $222 = ((($221)) + 4|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($223|0)>(32);
       if ($224) {
        label = 28;
       } else {
        $229 = $xxi;
        $230 = ((($229)) + 44|0);
        $231 = ((($230)) + 28|0);
        $232 = ((($xi)) + 96|0);
        $233 = $xxi;
        $234 = ((($233)) + 44|0);
        $235 = ((($234)) + 4|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = $236<<2;
        _memcpy(($231|0),($232|0),($237|0))|0;
       }
      }
      if ((label|0) == 28) {
       label = 0;
       $225 = $xxi;
       $226 = ((($225)) + 44|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = $227 & -2;
       HEAP32[$226>>2] = $228;
      }
      $238 = $xxi;
      $239 = ((($238)) + 200|0);
      $240 = ((($239)) + 4|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = ($241|0)<=(0);
      if ($242) {
       label = 32;
      } else {
       $243 = $xxi;
       $244 = ((($243)) + 200|0);
       $245 = ((($244)) + 4|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($246|0)>(32);
       if ($247) {
        label = 32;
       } else {
        $252 = $xxi;
        $253 = ((($252)) + 200|0);
        $254 = ((($253)) + 28|0);
        $255 = ((($xi)) + 144|0);
        $256 = $xxi;
        $257 = ((($256)) + 200|0);
        $258 = ((($257)) + 4|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $259<<2;
        _memcpy(($254|0),($255|0),($260|0))|0;
       }
      }
      if ((label|0) == 32) {
       label = 0;
       $248 = $xxi;
       $249 = ((($248)) + 200|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = $250 & -2;
       HEAP32[$249>>2] = $251;
      }
      $j = 12;
      while(1) {
       $261 = $j;
       $262 = ($261|0)<(108);
       if (!($262)) {
        break L20;
       }
       $263 = $j;
       $264 = (($263) - 12)|0;
       $265 = (($xi) + ($264)|0);
       $266 = HEAP8[$265>>0]|0;
       $267 = $j;
       $268 = $xxi;
       $269 = ((($268)) + 512|0);
       $270 = (($269) + ($267<<1)|0);
       HEAP8[$270>>0] = $266;
       $271 = $j;
       $272 = $xxi;
       $273 = ((($272)) + 512|0);
       $274 = (($273) + ($271<<1)|0);
       $275 = HEAP8[$274>>0]|0;
       $276 = $275&255;
       $277 = $xxi;
       $278 = ((($277)) + 36|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = ($276|0)>=($279|0);
       if ($280) {
        $281 = $j;
        $282 = $xxi;
        $283 = ((($282)) + 512|0);
        $284 = (($283) + ($281<<1)|0);
        HEAP8[$284>>0] = -1;
       }
       $285 = $j;
       $286 = (($285) + 1)|0;
       $j = $286;
      }
     }
    } while(0);
    $j = 0;
    while(1) {
     $287 = $j;
     $288 = $xxi;
     $289 = ((($288)) + 36|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = ($287|0)<($290|0);
     if (!($291)) {
      break;
     }
     $292 = $j;
     $293 = $xxi;
     $294 = ((($293)) + 756|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = (($295) + ($292<<6)|0);
     $sub = $296;
     $297 = $sample_num;
     $298 = $mod;
     $299 = ((($298)) + 144|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = ($297|0)>=($300|0);
     if ($301) {
      $302 = $mod;
      $303 = ((($302)) + 180|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = $mod;
      $306 = ((($305)) + 144|0);
      $307 = $mod;
      $308 = ((($307)) + 144|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ($309*3)|0;
      $311 = (($310|0) / 2)&-1;
      $312 = (_realloc_samples($304,$306,$311)|0);
      $313 = $mod;
      $314 = ((($313)) + 180|0);
      HEAP32[$314>>2] = $312;
      $315 = $mod;
      $316 = ((($315)) + 180|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ($317|0)==(0|0);
      if ($318) {
       label = 43;
       break L5;
      }
     }
     $319 = $sample_num;
     $320 = $mod;
     $321 = ((($320)) + 180|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = (($322) + (($319*52)|0)|0);
     $xxs = $323;
     $324 = $3;
     $325 = (_hio_read32l($324)|0);
     $326 = $j;
     $327 = (($xsh) + (($326*40)|0)|0);
     HEAP32[$327>>2] = $325;
     $328 = $3;
     $329 = (_hio_read32l($328)|0);
     $330 = $j;
     $331 = (($xsh) + (($330*40)|0)|0);
     $332 = ((($331)) + 4|0);
     HEAP32[$332>>2] = $329;
     $333 = $3;
     $334 = (_hio_read32l($333)|0);
     $335 = $j;
     $336 = (($xsh) + (($335*40)|0)|0);
     $337 = ((($336)) + 8|0);
     HEAP32[$337>>2] = $334;
     $338 = $3;
     $339 = (_hio_read8($338)|0);
     $340 = $j;
     $341 = (($xsh) + (($340*40)|0)|0);
     $342 = ((($341)) + 12|0);
     HEAP8[$342>>0] = $339;
     $343 = $3;
     $344 = (_hio_read8s($343)|0);
     $345 = $j;
     $346 = (($xsh) + (($345*40)|0)|0);
     $347 = ((($346)) + 13|0);
     HEAP8[$347>>0] = $344;
     $348 = $3;
     $349 = (_hio_read8($348)|0);
     $350 = $j;
     $351 = (($xsh) + (($350*40)|0)|0);
     $352 = ((($351)) + 14|0);
     HEAP8[$352>>0] = $349;
     $353 = $3;
     $354 = (_hio_read8($353)|0);
     $355 = $j;
     $356 = (($xsh) + (($355*40)|0)|0);
     $357 = ((($356)) + 15|0);
     HEAP8[$357>>0] = $354;
     $358 = $3;
     $359 = (_hio_read8s($358)|0);
     $360 = $j;
     $361 = (($xsh) + (($360*40)|0)|0);
     $362 = ((($361)) + 16|0);
     HEAP8[$362>>0] = $359;
     $363 = $3;
     $364 = (_hio_read8($363)|0);
     $365 = $j;
     $366 = (($xsh) + (($365*40)|0)|0);
     $367 = ((($366)) + 17|0);
     HEAP8[$367>>0] = $364;
     $368 = $j;
     $369 = (($xsh) + (($368*40)|0)|0);
     $370 = ((($369)) + 18|0);
     $371 = $3;
     (_hio_read($370,22,1,$371)|0);
     $372 = $j;
     $373 = (($xsh) + (($372*40)|0)|0);
     $374 = ((($373)) + 12|0);
     $375 = HEAP8[$374>>0]|0;
     $376 = $375&255;
     $377 = $sub;
     HEAP32[$377>>2] = $376;
     $378 = $j;
     $379 = (($xsh) + (($378*40)|0)|0);
     $380 = ((($379)) + 15|0);
     $381 = HEAP8[$380>>0]|0;
     $382 = $381&255;
     $383 = $sub;
     $384 = ((($383)) + 8|0);
     HEAP32[$384>>2] = $382;
     $385 = $j;
     $386 = (($xsh) + (($385*40)|0)|0);
     $387 = ((($386)) + 16|0);
     $388 = HEAP8[$387>>0]|0;
     $389 = $388 << 24 >> 24;
     $390 = $sub;
     $391 = ((($390)) + 12|0);
     HEAP32[$391>>2] = $389;
     $392 = $j;
     $393 = (($xsh) + (($392*40)|0)|0);
     $394 = ((($393)) + 13|0);
     $395 = HEAP8[$394>>0]|0;
     $396 = $395 << 24 >> 24;
     $397 = $sub;
     $398 = ((($397)) + 16|0);
     HEAP32[$398>>2] = $396;
     $399 = ((($xi)) + 202|0);
     $400 = HEAP8[$399>>0]|0;
     $401 = $400&255;
     $402 = $sub;
     $403 = ((($402)) + 20|0);
     HEAP32[$403>>2] = $401;
     $404 = ((($xi)) + 204|0);
     $405 = HEAP8[$404>>0]|0;
     $406 = $405&255;
     $407 = $sub;
     $408 = ((($407)) + 24|0);
     HEAP32[$408>>2] = $406;
     $409 = ((($xi)) + 205|0);
     $410 = HEAP8[$409>>0]|0;
     $411 = $410&255;
     $412 = $sub;
     $413 = ((($412)) + 28|0);
     HEAP32[$413>>2] = $411;
     $414 = ((($xi)) + 203|0);
     $415 = HEAP8[$414>>0]|0;
     $416 = $415&255;
     $417 = $sub;
     $418 = ((($417)) + 32|0);
     HEAP32[$418>>2] = $416;
     $419 = $sample_num;
     $420 = $sub;
     $421 = ((($420)) + 40|0);
     HEAP32[$421>>2] = $419;
     $422 = $xxs;
     $423 = $j;
     $424 = (($xsh) + (($423*40)|0)|0);
     $425 = ((($424)) + 18|0);
     (_copy_adjust($422,$425,22)|0);
     $426 = $j;
     $427 = (($xsh) + (($426*40)|0)|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = $xxs;
     $430 = ((($429)) + 32|0);
     HEAP32[$430>>2] = $428;
     $431 = $j;
     $432 = (($xsh) + (($431*40)|0)|0);
     $433 = ((($432)) + 4|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = $xxs;
     $436 = ((($435)) + 36|0);
     HEAP32[$436>>2] = $434;
     $437 = $j;
     $438 = (($xsh) + (($437*40)|0)|0);
     $439 = ((($438)) + 4|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = $j;
     $442 = (($xsh) + (($441*40)|0)|0);
     $443 = ((($442)) + 8|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = (($440) + ($444))|0;
     $446 = $xxs;
     $447 = ((($446)) + 40|0);
     HEAP32[$447>>2] = $445;
     $448 = $xxs;
     $449 = ((($448)) + 44|0);
     HEAP32[$449>>2] = 0;
     $450 = $j;
     $451 = (($xsh) + (($450*40)|0)|0);
     $452 = ((($451)) + 14|0);
     $453 = HEAP8[$452>>0]|0;
     $454 = $453&255;
     $455 = $454 & 16;
     $456 = ($455|0)!=(0);
     if ($456) {
      $457 = $xxs;
      $458 = ((($457)) + 44|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = $459 | 1;
      HEAP32[$458>>2] = $460;
      $461 = $xxs;
      $462 = ((($461)) + 32|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = $463 >> 1;
      HEAP32[$462>>2] = $464;
      $465 = $xxs;
      $466 = ((($465)) + 36|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = $467 >> 1;
      HEAP32[$466>>2] = $468;
      $469 = $xxs;
      $470 = ((($469)) + 40|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = $471 >> 1;
      HEAP32[$470>>2] = $472;
     }
     $473 = $j;
     $474 = (($xsh) + (($473*40)|0)|0);
     $475 = ((($474)) + 14|0);
     $476 = HEAP8[$475>>0]|0;
     $477 = $476&255;
     $478 = $477 & 1;
     $479 = ($478|0)!=(0);
     $480 = $479 ? 2 : 0;
     $481 = $xxs;
     $482 = ((($481)) + 44|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = $483 | $480;
     HEAP32[$482>>2] = $484;
     $485 = $j;
     $486 = (($xsh) + (($485*40)|0)|0);
     $487 = ((($486)) + 14|0);
     $488 = HEAP8[$487>>0]|0;
     $489 = $488&255;
     $490 = $489 & 2;
     $491 = ($490|0)!=(0);
     $492 = $491 ? 6 : 0;
     $493 = $xxs;
     $494 = ((($493)) + 44|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = $495 | $492;
     HEAP32[$494>>2] = $496;
     $497 = $j;
     $498 = (($497) + 1)|0;
     $j = $498;
     $499 = $sample_num;
     $500 = (($499) + 1)|0;
     $sample_num = $500;
    }
    $j = 0;
    while(1) {
     $501 = $j;
     $502 = $xxi;
     $503 = ((($502)) + 36|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = ($501|0)<($504|0);
     if (!($505)) {
      break L16;
     }
     $506 = $j;
     $507 = $xxi;
     $508 = ((($507)) + 756|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = (($509) + ($506<<6)|0);
     $sub1 = $510;
     $flags = 1;
     $511 = $j;
     $512 = (($xsh) + (($511*40)|0)|0);
     $513 = ((($512)) + 17|0);
     $514 = HEAP8[$513>>0]|0;
     $515 = $514&255;
     $516 = ($515|0)==(173);
     $$ = $516 ? 16384 : 1;
     $flags = $$;
     $517 = $2;
     $518 = ($517|0)>(259);
     if ($518) {
      $519 = $1;
      $520 = $3;
      $521 = $flags;
      $522 = $sub1;
      $523 = ((($522)) + 40|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = $mod;
      $526 = ((($525)) + 180|0);
      $527 = HEAP32[$526>>2]|0;
      $528 = (($527) + (($524*52)|0)|0);
      $529 = (_load_sample($519,$520,$521,$528,0)|0);
      $530 = ($529|0)<(0);
      if ($530) {
       label = 51;
       break L5;
      }
     }
     $531 = $j;
     $532 = (($531) + 1)|0;
     $j = $532;
    }
   } else {
    $533 = $3;
    $534 = HEAP32[$xih>>2]|0;
    $535 = (($534) - 33)|0;
    (_hio_seek($533,$535,1)|0);
   }
  } while(0);
  $536 = $i;
  $537 = (($536) + 1)|0;
  $i = $537;
 }
 if ((label|0) == 6) {
  $25 = $i;
  $26 = $mod;
  $27 = ((($26)) + 140|0);
  HEAP32[$27>>2] = $25;
 }
 else if ((label|0) == 10) {
  $50 = $i;
  $51 = $mod;
  $52 = ((($51)) + 140|0);
  HEAP32[$52>>2] = $50;
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 }
 else if ((label|0) == 43) {
  $0 = -1;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 }
 else if ((label|0) == 51) {
  $0 = -1;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 }
 $538 = $mod;
 $539 = ((($538)) + 180|0);
 $540 = HEAP32[$539>>2]|0;
 $541 = $mod;
 $542 = ((($541)) + 144|0);
 $543 = $sample_num;
 $544 = (_realloc_samples($540,$542,$543)|0);
 $545 = $mod;
 $546 = ((($545)) + 180|0);
 HEAP32[$546>>2] = $544;
 $547 = $mod;
 $548 = ((($547)) + 180|0);
 $549 = HEAP32[$548>>2]|0;
 $550 = ($549|0)==(0|0);
 if ($550) {
  $0 = -1;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 } else {
  $0 = 0;
  $551 = $0;
  STACKTOP = sp;return ($551|0);
 }
 return (0)|0;
}
function _load_patterns($m,$version,$f) {
 $m = $m|0;
 $version = $version|0;
 $f = $f|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $event = 0, $headsize = 0, $i = 0, $j = 0, $mod = 0, $pat = 0, $patbuf = 0, $r = 0;
 var $t = 0, $xph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xph = sp + 32|0;
 $1 = $m;
 $2 = $version;
 $3 = $f;
 $4 = $1;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 128|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $mod;
 $10 = (_pattern_init($9)|0);
 $11 = ($10|0)<(0);
 if ($11) {
  $0 = -1;
  $369 = $0;
  STACKTOP = sp;return ($369|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 128|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) - 1)|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   label = 51;
   break;
  }
  $18 = $2;
  $19 = ($18|0)>(258);
  $20 = $19 ? 9 : 8;
  $headsize = $20;
  $21 = $3;
  $22 = (_hio_read32l($21)|0);
  HEAP32[$xph>>2] = $22;
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = ((($xph)) + 4|0);
  HEAP8[$25>>0] = $24;
  $26 = $2;
  $27 = ($26|0)>(258);
  $28 = $3;
  if ($27) {
   $29 = (_hio_read16l($28)|0);
   $30 = $29&65535;
   $35 = $30;
  } else {
   $31 = (_hio_read8($28)|0);
   $32 = $31&255;
   $33 = (($32) + 1)|0;
   $35 = $33;
  }
  $34 = $35&65535;
  $36 = ((($xph)) + 6|0);
  HEAP16[$36>>1] = $34;
  $37 = $3;
  $38 = (_hio_read16l($37)|0);
  $39 = ((($xph)) + 8|0);
  HEAP16[$39>>1] = $38;
  $40 = $3;
  $41 = HEAP32[$xph>>2]|0;
  $42 = $headsize;
  $43 = (($41) - ($42))|0;
  (_hio_seek($40,$43,1)|0);
  $44 = ((($xph)) + 6|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45&65535;
  $r = $46;
  $47 = $r;
  $48 = ($47|0)==(0);
  $$ = $48 ? 256 : $46;
  $r = $$;
  $49 = $mod;
  $50 = $i;
  $51 = $r;
  $52 = (_pattern_tracks_alloc($49,$50,$51)|0);
  $53 = ($52|0)<(0);
  if ($53) {
   label = 9;
   break;
  }
  $54 = ((($xph)) + 8|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = ($55<<16>>16)!=(0);
  if ($56) {
   $57 = ((($xph)) + 8|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58&65535;
   $60 = (_calloc(1,$59)|0);
   $patbuf = $60;
   $pat = $60;
   $61 = $patbuf;
   $62 = ($61|0)==(0|0);
   if ($62) {
    label = 12;
    break;
   }
   $63 = $patbuf;
   $64 = ((($xph)) + 8|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $3;
   (_hio_read($63,1,$66,$67)|0);
   $j = 0;
   while(1) {
    $68 = $j;
    $69 = $mod;
    $70 = ((($69)) + 136|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $r;
    $73 = Math_imul($71, $72)|0;
    $74 = ($68|0)<($73|0);
    if (!($74)) {
     break;
    }
    $75 = $pat;
    $76 = $patbuf;
    $77 = $75;
    $78 = $76;
    $79 = (($77) - ($78))|0;
    $80 = ((($xph)) + 8|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = ($79|0)>=($82|0);
    if ($83) {
     break;
    }
    $84 = $j;
    $85 = $mod;
    $86 = ((($85)) + 136|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($84|0) / ($87|0))&-1;
    $89 = $j;
    $90 = $mod;
    $91 = ((($90)) + 136|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($89|0) % ($92|0))&-1;
    $94 = $i;
    $95 = $1;
    $96 = ((($95)) + 168|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + ($94<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($99)) + 4|0);
    $101 = (($100) + ($93<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $1;
    $104 = ((($103)) + 172|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($102<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ((($107)) + 4|0);
    $109 = (($108) + ($88<<3)|0);
    $event = $109;
    $110 = $pat;
    $111 = ((($110)) + 1|0);
    $pat = $111;
    $112 = HEAP8[$110>>0]|0;
    $b = $112;
    $113 = $112&255;
    $114 = $113 & 128;
    $115 = ($114|0)!=(0);
    $116 = $b;
    if ($115) {
     $117 = $116&255;
     $118 = $117 & 1;
     $119 = ($118|0)!=(0);
     if ($119) {
      $120 = $pat;
      $121 = ((($120)) + 1|0);
      $pat = $121;
      $122 = HEAP8[$120>>0]|0;
      $123 = $event;
      HEAP8[$123>>0] = $122;
     }
     $124 = $b;
     $125 = $124&255;
     $126 = $125 & 2;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = $pat;
      $129 = ((($128)) + 1|0);
      $pat = $129;
      $130 = HEAP8[$128>>0]|0;
      $131 = $event;
      $132 = ((($131)) + 1|0);
      HEAP8[$132>>0] = $130;
     }
     $133 = $b;
     $134 = $133&255;
     $135 = $134 & 4;
     $136 = ($135|0)!=(0);
     if ($136) {
      $137 = $pat;
      $138 = ((($137)) + 1|0);
      $pat = $138;
      $139 = HEAP8[$137>>0]|0;
      $140 = $event;
      $141 = ((($140)) + 2|0);
      HEAP8[$141>>0] = $139;
     }
     $142 = $b;
     $143 = $142&255;
     $144 = $143 & 8;
     $145 = ($144|0)!=(0);
     if ($145) {
      $146 = $pat;
      $147 = ((($146)) + 1|0);
      $pat = $147;
      $148 = HEAP8[$146>>0]|0;
      $149 = $event;
      $150 = ((($149)) + 3|0);
      HEAP8[$150>>0] = $148;
     }
     $151 = $b;
     $152 = $151&255;
     $153 = $152 & 16;
     $154 = ($153|0)!=(0);
     if ($154) {
      $155 = $pat;
      $156 = ((($155)) + 1|0);
      $pat = $156;
      $157 = HEAP8[$155>>0]|0;
      $158 = $event;
      $159 = ((($158)) + 4|0);
      HEAP8[$159>>0] = $157;
     }
    } else {
     $160 = $event;
     HEAP8[$160>>0] = $116;
     $161 = $pat;
     $162 = ((($161)) + 1|0);
     $pat = $162;
     $163 = HEAP8[$161>>0]|0;
     $164 = $event;
     $165 = ((($164)) + 1|0);
     HEAP8[$165>>0] = $163;
     $166 = $pat;
     $167 = ((($166)) + 1|0);
     $pat = $167;
     $168 = HEAP8[$166>>0]|0;
     $169 = $event;
     $170 = ((($169)) + 2|0);
     HEAP8[$170>>0] = $168;
     $171 = $pat;
     $172 = ((($171)) + 1|0);
     $pat = $172;
     $173 = HEAP8[$171>>0]|0;
     $174 = $event;
     $175 = ((($174)) + 3|0);
     HEAP8[$175>>0] = $173;
     $176 = $pat;
     $177 = ((($176)) + 1|0);
     $pat = $177;
     $178 = HEAP8[$176>>0]|0;
     $179 = $event;
     $180 = ((($179)) + 4|0);
     HEAP8[$180>>0] = $178;
    }
    $181 = $event;
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = ($183|0)==(97);
    $185 = $event;
    if ($184) {
     HEAP8[$185>>0] = -127;
    } else {
     $186 = HEAP8[$185>>0]|0;
     $187 = $186&255;
     $188 = ($187|0)>(0);
     if ($188) {
      $189 = $event;
      $190 = HEAP8[$189>>0]|0;
      $191 = $190&255;
      $192 = (($191) + 12)|0;
      $193 = $192&255;
      HEAP8[$189>>0] = $193;
     }
    }
    $194 = $event;
    $195 = ((($194)) + 2|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = ($196<<24>>24)!=(0);
    do {
     if ($197) {
      $198 = $event;
      $199 = ((($198)) + 2|0);
      $200 = HEAP8[$199>>0]|0;
      $201 = $200&255;
      $202 = ($201|0)>=(16);
      if ($202) {
       $203 = $event;
       $204 = ((($203)) + 2|0);
       $205 = HEAP8[$204>>0]|0;
       $206 = $205&255;
       $207 = ($206|0)<=(80);
       if ($207) {
        $208 = $event;
        $209 = ((($208)) + 2|0);
        $210 = HEAP8[$209>>0]|0;
        $211 = $210&255;
        $212 = (($211) - 15)|0;
        $213 = $212&255;
        HEAP8[$209>>0] = $213;
        break;
       }
      }
      $214 = $event;
      $215 = ((($214)) + 2|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = $217 >> 4;
      do {
       switch ($218|0) {
       case 15:  {
        $315 = $event;
        $316 = ((($315)) + 5|0);
        HEAP8[$316>>0] = 3;
        $317 = $event;
        $318 = ((($317)) + 2|0);
        $319 = HEAP8[$318>>0]|0;
        $320 = $319&255;
        $321 = (($320) - 240)|0;
        $322 = $321 << 4;
        $323 = $322&255;
        $324 = $event;
        $325 = ((($324)) + 6|0);
        HEAP8[$325>>0] = $323;
        break;
       }
       case 7:  {
        $229 = $event;
        $230 = ((($229)) + 5|0);
        HEAP8[$230>>0] = -92;
        $231 = $event;
        $232 = ((($231)) + 2|0);
        $233 = HEAP8[$232>>0]|0;
        $234 = $233&255;
        $235 = (($234) - 112)|0;
        $236 = $235 << 4;
        $237 = $236&255;
        $238 = $event;
        $239 = ((($238)) + 6|0);
        HEAP8[$239>>0] = $237;
        break;
       }
       case 12:  {
        $283 = $event;
        $284 = ((($283)) + 5|0);
        HEAP8[$284>>0] = 8;
        $285 = $event;
        $286 = ((($285)) + 2|0);
        $287 = HEAP8[$286>>0]|0;
        $288 = $287&255;
        $289 = (($288) - 192)|0;
        $290 = $289 << 4;
        $291 = $290&255;
        $292 = $event;
        $293 = ((($292)) + 6|0);
        HEAP8[$293>>0] = $291;
        break;
       }
       case 13:  {
        $294 = $event;
        $295 = ((($294)) + 5|0);
        HEAP8[$295>>0] = 25;
        $296 = $event;
        $297 = ((($296)) + 2|0);
        $298 = HEAP8[$297>>0]|0;
        $299 = $298&255;
        $300 = (($299) - 208)|0;
        $301 = $300 << 4;
        $302 = $301&255;
        $303 = $event;
        $304 = ((($303)) + 6|0);
        HEAP8[$304>>0] = $302;
        break;
       }
       case 6:  {
        $219 = $event;
        $220 = ((($219)) + 5|0);
        HEAP8[$220>>0] = -92;
        $221 = $event;
        $222 = ((($221)) + 2|0);
        $223 = HEAP8[$222>>0]|0;
        $224 = $223&255;
        $225 = (($224) - 96)|0;
        $226 = $225&255;
        $227 = $event;
        $228 = ((($227)) + 6|0);
        HEAP8[$228>>0] = $226;
        break;
       }
       case 8:  {
        $240 = $event;
        $241 = ((($240)) + 5|0);
        HEAP8[$241>>0] = 14;
        $242 = $event;
        $243 = ((($242)) + 2|0);
        $244 = HEAP8[$243>>0]|0;
        $245 = $244&255;
        $246 = (($245) - 128)|0;
        $247 = 176 | $246;
        $248 = $247&255;
        $249 = $event;
        $250 = ((($249)) + 6|0);
        HEAP8[$250>>0] = $248;
        break;
       }
       case 9:  {
        $251 = $event;
        $252 = ((($251)) + 5|0);
        HEAP8[$252>>0] = 14;
        $253 = $event;
        $254 = ((($253)) + 2|0);
        $255 = HEAP8[$254>>0]|0;
        $256 = $255&255;
        $257 = (($256) - 144)|0;
        $258 = 160 | $257;
        $259 = $258&255;
        $260 = $event;
        $261 = ((($260)) + 6|0);
        HEAP8[$261>>0] = $259;
        break;
       }
       case 10:  {
        $262 = $event;
        $263 = ((($262)) + 5|0);
        HEAP8[$263>>0] = 4;
        $264 = $event;
        $265 = ((($264)) + 2|0);
        $266 = HEAP8[$265>>0]|0;
        $267 = $266&255;
        $268 = (($267) - 160)|0;
        $269 = $268 << 4;
        $270 = $269&255;
        $271 = $event;
        $272 = ((($271)) + 6|0);
        HEAP8[$272>>0] = $270;
        break;
       }
       case 14:  {
        $305 = $event;
        $306 = ((($305)) + 5|0);
        HEAP8[$306>>0] = 25;
        $307 = $event;
        $308 = ((($307)) + 2|0);
        $309 = HEAP8[$308>>0]|0;
        $310 = $309&255;
        $311 = (($310) - 224)|0;
        $312 = $311&255;
        $313 = $event;
        $314 = ((($313)) + 6|0);
        HEAP8[$314>>0] = $312;
        break;
       }
       case 11:  {
        $273 = $event;
        $274 = ((($273)) + 5|0);
        HEAP8[$274>>0] = 4;
        $275 = $event;
        $276 = ((($275)) + 2|0);
        $277 = HEAP8[$276>>0]|0;
        $278 = $277&255;
        $279 = (($278) - 176)|0;
        $280 = $279&255;
        $281 = $event;
        $282 = ((($281)) + 6|0);
        HEAP8[$282>>0] = $280;
        break;
       }
       default: {
       }
       }
      } while(0);
      $326 = $event;
      $327 = ((($326)) + 2|0);
      HEAP8[$327>>0] = 0;
     }
    } while(0);
    $328 = $j;
    $329 = (($328) + 1)|0;
    $j = $329;
   }
   $330 = $patbuf;
   _free($330);
  }
  $331 = $i;
  $332 = (($331) + 1)|0;
  $i = $332;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $369 = $0;
  STACKTOP = sp;return ($369|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $369 = $0;
  STACKTOP = sp;return ($369|0);
 }
 else if ((label|0) == 51) {
  $333 = $i;
  $334 = $mod;
  $335 = ((($334)) + 136|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = Math_imul($333, $336)|0;
  $t = $337;
  $338 = $mod;
  $339 = $i;
  $340 = (_pattern_alloc($338,$339)|0);
  $341 = ($340|0)<(0);
  if ($341) {
   $0 = -1;
   $369 = $0;
   STACKTOP = sp;return ($369|0);
  }
  $342 = $i;
  $343 = $mod;
  $344 = ((($343)) + 168|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + ($342<<2)|0);
  $347 = HEAP32[$346>>2]|0;
  HEAP32[$347>>2] = 64;
  $348 = $mod;
  $349 = $t;
  $350 = (_track_alloc($348,$349,64)|0);
  $351 = ($350|0)<(0);
  if ($351) {
   $0 = -1;
   $369 = $0;
   STACKTOP = sp;return ($369|0);
  }
  $j = 0;
  while(1) {
   $352 = $j;
   $353 = $mod;
   $354 = ((($353)) + 136|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = ($352|0)<($355|0);
   if (!($356)) {
    break;
   }
   $357 = $t;
   $358 = $j;
   $359 = $i;
   $360 = $mod;
   $361 = ((($360)) + 168|0);
   $362 = HEAP32[$361>>2]|0;
   $363 = (($362) + ($359<<2)|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = ((($364)) + 4|0);
   $366 = (($365) + ($358<<2)|0);
   HEAP32[$366>>2] = $357;
   $367 = $j;
   $368 = (($367) + 1)|0;
   $j = $368;
  }
  $0 = 0;
  $369 = $0;
  STACKTOP = sp;return ($369|0);
 }
 return (0)|0;
}
function _mod_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $num_pat = 0, $or$cond = 0, $smp_size = 0, $st = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 108|0;
 $st = sp + 8|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1080)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,4,$7)|0);
 $9 = ($8>>>0)<(4);
 if ($9) {
  $0 = -1;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $10 = ((($buf)) + 2|0);
 $11 = (_strncmp($10,1784,2)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  label = 7;
 } else {
  $13 = HEAP8[$buf>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_isdigit($14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = ((($buf)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = (_isdigit($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = HEAP8[$buf>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = (($23) - 48)|0;
    $25 = ($24*10)|0;
    $26 = ((($buf)) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = (($25) + ($28))|0;
    $30 = (($29) - 48)|0;
    $i = $30;
    $31 = $i;
    $32 = ($31|0)>(0);
    $33 = $i;
    $34 = ($33|0)<=(32);
    $or$cond = $32 & $34;
    if (!($or$cond)) {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $35 = ((($buf)) + 1|0);
   $36 = (_strncmp($35,1792,3)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $38 = HEAP8[$buf>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = (_isdigit($39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = HEAP8[$buf>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = (($43) - 48)|0;
     $45 = ($44|0)!=(0);
     if ($45) {
      break;
     }
    }
   }
   $i = 0;
   while(1) {
    $46 = $i;
    $47 = (1408 + ($46<<4)|0);
    $48 = ((($47)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    if (!($50)) {
     break;
    }
    $51 = $i;
    $52 = (1408 + ($51<<4)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_memcmp($buf,$53,4)|0);
    $55 = ($54|0)!=(0);
    if (!($55)) {
     break;
    }
    $56 = $i;
    $57 = (($56) + 1)|0;
    $i = $57;
   }
   $58 = $i;
   $59 = (1408 + ($58<<4)|0);
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if ($62) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   $63 = $1;
   $64 = $3;
   $65 = (($64) + 20)|0;
   (_hio_seek($63,$65,0)|0);
   $i = 0;
   while(1) {
    $66 = $i;
    $67 = ($66|0)<(31);
    $68 = $1;
    if (!($67)) {
     label = 29;
     break;
    }
    (_hio_seek($68,22,1)|0);
    $69 = $1;
    $70 = (_hio_read16b($69)|0);
    $71 = $70&65535;
    $72 = $71 & 32768;
    $73 = ($72|0)!=(0);
    if ($73) {
     label = 19;
     break;
    }
    $74 = $1;
    $75 = (_hio_read8($74)|0);
    $76 = $75&255;
    $77 = $76 & 240;
    $78 = ($77|0)!=(0);
    if ($78) {
     label = 21;
     break;
    }
    $79 = $1;
    $80 = (_hio_read8($79)|0);
    $81 = $80&255;
    $82 = ($81|0)>(64);
    if ($82) {
     label = 23;
     break;
    }
    $83 = $1;
    $84 = (_hio_read16b($83)|0);
    $85 = $84&65535;
    $86 = $85 & 32768;
    $87 = ($86|0)!=(0);
    if ($87) {
     label = 25;
     break;
    }
    $88 = $1;
    $89 = (_hio_read16b($88)|0);
    $90 = $89&65535;
    $91 = $90 & 32768;
    $92 = ($91|0)!=(0);
    if ($92) {
     label = 27;
     break;
    }
    $93 = $i;
    $94 = (($93) + 1)|0;
    $i = $94;
   }
   if ((label|0) == 19) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   else if ((label|0) == 21) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   else if ((label|0) == 23) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   else if ((label|0) == 25) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   else if ((label|0) == 27) {
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
   else if ((label|0) == 29) {
    $95 = HEAP32[$68>>2]|0;
    $96 = ($95|0)!=(0);
    if ($96) {
     break;
    }
    $97 = $1;
    (_hio_stat($97,$st)|0);
    $smp_size = 0;
    $98 = $1;
    $99 = $3;
    $100 = (($99) + 20)|0;
    (_hio_seek($98,$100,0)|0);
    $i = 0;
    while(1) {
     $101 = $i;
     $102 = ($101|0)<(31);
     if (!($102)) {
      break;
     }
     $103 = $1;
     (_hio_seek($103,22,1)|0);
     $104 = $1;
     $105 = (_hio_read16b($104)|0);
     $106 = $105&65535;
     $107 = $106<<1;
     $108 = $smp_size;
     $109 = (($108) + ($107))|0;
     $smp_size = $109;
     $110 = $1;
     (_hio_seek($110,6,1)|0);
     $111 = $i;
     $112 = (($111) + 1)|0;
     $i = $112;
    }
    $num_pat = 0;
    $113 = $1;
    $114 = $3;
    $115 = (($114) + 952)|0;
    (_hio_seek($113,$115,0)|0);
    $i = 0;
    while(1) {
     $116 = $i;
     $117 = ($116|0)<(128);
     if (!($117)) {
      break;
     }
     $118 = $1;
     $119 = (_hio_read8($118)|0);
     $x = $119;
     $120 = $x;
     $121 = $120&255;
     $122 = ($121|0)>(127);
     if ($122) {
      break;
     }
     $123 = $x;
     $124 = $123&255;
     $125 = $num_pat;
     $126 = ($124|0)>($125|0);
     if ($126) {
      $127 = $x;
      $128 = $127&255;
      $num_pat = $128;
     }
     $129 = $i;
     $130 = (($129) + 1)|0;
     $i = $130;
    }
    $131 = $num_pat;
    $132 = (($131) + 1)|0;
    $num_pat = $132;
    $133 = $3;
    $134 = (($133) + 1084)|0;
    $135 = $num_pat;
    $136 = ($135*768)|0;
    $137 = (($134) + ($136))|0;
    $138 = $smp_size;
    $139 = (($137) + ($138))|0;
    $140 = ((($st)) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($139|0)==($141|0);
    if (!($142)) {
     break;
    }
    $0 = -1;
    $148 = $0;
    STACKTOP = sp;return ($148|0);
   }
  }
 } while(0);
 $143 = $1;
 $144 = $3;
 $145 = (($144) + 0)|0;
 (_hio_seek($143,$145,0)|0);
 $146 = $1;
 $147 = $2;
 _read_title($146,$147,20);
 $0 = 0;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function _mod_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $detected = 0, $event = 0, $flags = 0, $fxp = 0;
 var $fxt = 0, $i = 0, $idbuffer = 0, $j = 0, $magic = 0, $mh = 0, $mod = 0, $mod_event = 0, $num = 0, $pathname = 0, $pos = 0, $pos1 = 0, $ptkloop = 0, $ptsong = 0, $s = 0, $smp_size = 0, $sn = 0, $tracker = 0, $tracker_id = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $wow = 0, $x = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5616|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 108|0;
 $mod_event = sp + 5600|0;
 $pathname = sp + 1504|0;
 $magic = sp + 1496|0;
 $idbuffer = sp + 1464|0;
 $sn = sp + 1200|0;
 $buf = sp + 1192|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ptsong = 0;
 _memset(($pathname|0),0,4096)|0;
 $tracker = 1744;
 $detected = 0;
 $ptkloop = 0;
 $tracker_id = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $mod;
 $8 = ((($7)) + 140|0);
 HEAP32[$8>>2] = 31;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 $14 = $mod;
 $15 = ((($14)) + 136|0);
 HEAP32[$15>>2] = 0;
 $smp_size = 0;
 $16 = $1;
 $17 = ((($16)) + 1280|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 8192;
 HEAP32[$17>>2] = $19;
 $20 = $2;
 (_hio_read($mh,20,1,$20)|0);
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = ($21|0)<(31);
  if (!($22)) {
   break;
  }
  $23 = $i;
  $24 = ((($mh)) + 20|0);
  $25 = (($24) + (($23*30)|0)|0);
  $26 = $2;
  (_hio_read($25,22,1,$26)|0);
  $27 = $2;
  $28 = (_hio_read16b($27)|0);
  $29 = $i;
  $30 = ((($mh)) + 20|0);
  $31 = (($30) + (($29*30)|0)|0);
  $32 = ((($31)) + 22|0);
  HEAP16[$32>>1] = $28;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $i;
  $36 = ((($mh)) + 20|0);
  $37 = (($36) + (($35*30)|0)|0);
  $38 = ((($37)) + 24|0);
  HEAP8[$38>>0] = $34;
  $39 = $2;
  $40 = (_hio_read8($39)|0);
  $41 = $i;
  $42 = ((($mh)) + 20|0);
  $43 = (($42) + (($41*30)|0)|0);
  $44 = ((($43)) + 25|0);
  HEAP8[$44>>0] = $40;
  $45 = $2;
  $46 = (_hio_read16b($45)|0);
  $47 = $i;
  $48 = ((($mh)) + 20|0);
  $49 = (($48) + (($47*30)|0)|0);
  $50 = ((($49)) + 26|0);
  HEAP16[$50>>1] = $46;
  $51 = $2;
  $52 = (_hio_read16b($51)|0);
  $53 = $i;
  $54 = ((($mh)) + 20|0);
  $55 = (($54) + (($53*30)|0)|0);
  $56 = ((($55)) + 28|0);
  HEAP16[$56>>1] = $52;
  $57 = $i;
  $58 = ((($mh)) + 20|0);
  $59 = (($58) + (($57*30)|0)|0);
  $60 = ((($59)) + 22|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = $62<<1;
  $64 = $smp_size;
  $65 = (($64) + ($63))|0;
  $smp_size = $65;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = $2;
 $69 = (_hio_read8($68)|0);
 $70 = ((($mh)) + 950|0);
 HEAP8[$70>>0] = $69;
 $71 = $2;
 $72 = (_hio_read8($71)|0);
 $73 = ((($mh)) + 951|0);
 HEAP8[$73>>0] = $72;
 $74 = ((($mh)) + 952|0);
 $75 = $2;
 (_hio_read($74,128,1,$75)|0);
 ;HEAP8[$magic>>0]=0|0;HEAP8[$magic+1>>0]=0|0;HEAP8[$magic+2>>0]=0|0;HEAP8[$magic+3>>0]=0|0;HEAP8[$magic+4>>0]=0|0;HEAP8[$magic+5>>0]=0|0;HEAP8[$magic+6>>0]=0|0;HEAP8[$magic+7>>0]=0|0;
 $76 = $2;
 (_hio_read($magic,4,1,$76)|0);
 $i = 0;
 while(1) {
  $77 = $i;
  $78 = (1408 + ($77<<4)|0);
  $79 = ((($78)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0);
  if (!($81)) {
   break;
  }
  $82 = $i;
  $83 = (1408 + ($82<<4)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_strncmp($magic,$84,4)|0);
  $86 = ($85|0)!=(0);
  $87 = $i;
  if (!($86)) {
   label = 7;
   break;
  }
  $101 = (($87) + 1)|0;
  $i = $101;
 }
 if ((label|0) == 7) {
  $88 = (1408 + ($87<<4)|0);
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $mod;
  $92 = ((($91)) + 136|0);
  HEAP32[$92>>2] = $90;
  $93 = $i;
  $94 = (1408 + ($93<<4)|0);
  $95 = ((($94)) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $tracker_id = $96;
  $97 = $i;
  $98 = (1408 + ($97<<4)|0);
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $detected = $100;
 }
 $102 = $mod;
 $103 = ((($102)) + 136|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)!=(0);
 if (!($105)) {
  $106 = ((($magic)) + 2|0);
  $107 = (_strncmp($106,1784,2)|0);
  $108 = ($107|0)!=(0);
  if ($108) {
   label = 14;
  } else {
   $109 = HEAP8[$magic>>0]|0;
   $110 = $109 << 24 >> 24;
   $111 = (_isdigit($110)|0);
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = ((($magic)) + 1|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $116 = (_isdigit($115)|0);
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = HEAP8[$magic>>0]|0;
     $119 = $118 << 24 >> 24;
     $120 = (($119) - 48)|0;
     $121 = ($120*10)|0;
     $122 = ((($magic)) + 1|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123 << 24 >> 24;
     $125 = (($121) + ($124))|0;
     $126 = (($125) - 48)|0;
     $127 = $mod;
     $128 = ((($127)) + 136|0);
     HEAP32[$128>>2] = $126;
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  }
  do {
   if ((label|0) == 14) {
    $129 = ((($magic)) + 1|0);
    $130 = (_strncmp($129,1792,3)|0);
    $131 = ($130|0)!=(0);
    if (!($131)) {
     $132 = HEAP8[$magic>>0]|0;
     $133 = $132 << 24 >> 24;
     $134 = (_isdigit($133)|0);
     $135 = ($134|0)!=(0);
     if ($135) {
      $136 = HEAP8[$magic>>0]|0;
      $137 = $136 << 24 >> 24;
      $138 = (($137) - 48)|0;
      $139 = $mod;
      $140 = ((($139)) + 136|0);
      HEAP32[$140>>2] = $138;
      break;
     }
    }
    $0 = -1;
    $854 = $0;
    STACKTOP = sp;return ($854|0);
   }
  } while(0);
  $141 = $mod;
  $142 = ((($141)) + 136|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $143 & 1;
  $145 = ($144|0)!=(0);
  $146 = $145 ? 6 : 4;
  $tracker_id = $146;
  $detected = 1;
  $147 = $1;
  $148 = ((($147)) + 1280|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $149 & -8193;
  HEAP32[$148>>2] = $150;
 }
 $151 = $mod;
 (_strncpy(($151|0),($mh|0),20)|0);
 $152 = ((($mh)) + 950|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = $153&255;
 $155 = $mod;
 $156 = ((($155)) + 156|0);
 HEAP32[$156>>2] = $154;
 $157 = $mod;
 $158 = ((($157)) + 160|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = $mod;
 $161 = ((($160)) + 156|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($159|0)>=($162|0);
 if ($163) {
  $164 = $mod;
  $165 = ((($164)) + 160|0);
  HEAP32[$165>>2] = 0;
 }
 $166 = $mod;
 $167 = ((($166)) + 952|0);
 $168 = ((($mh)) + 952|0);
 dest=$167; src=$168; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $169 = $i;
  $170 = ($169|0)<(128);
  if (!($170)) {
   break;
  }
  $171 = $i;
  $172 = $mod;
  $173 = ((($172)) + 952|0);
  $174 = (($173) + ($171)|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = ($176|0)>(127);
  if ($177) {
   break;
  }
  $178 = $i;
  $179 = $mod;
  $180 = ((($179)) + 952|0);
  $181 = (($180) + ($178)|0);
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $mod;
  $185 = ((($184)) + 128|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($183|0)>($186|0);
  if ($187) {
   $188 = $i;
   $189 = $mod;
   $190 = ((($189)) + 952|0);
   $191 = (($190) + ($188)|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = $mod;
   $195 = ((($194)) + 128|0);
   HEAP32[$195>>2] = $193;
  }
  $196 = $i;
  $197 = (($196) + 1)|0;
  $i = $197;
 }
 $198 = $mod;
 $199 = ((($198)) + 128|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = (($200) + 1)|0;
 HEAP32[$199>>2] = $201;
 $202 = $mod;
 $203 = (_instrument_init($202)|0);
 $204 = ($203|0)<(0);
 if ($204) {
  $0 = -1;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 $i = 0;
 while(1) {
  $205 = $i;
  $206 = $mod;
  $207 = ((($206)) + 140|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = ($205|0)<($208|0);
  if (!($209)) {
   break;
  }
  $210 = $mod;
  $211 = $i;
  $212 = (_subinstrument_alloc($210,$211,1)|0);
  $213 = ($212|0)<(0);
  if ($213) {
   label = 32;
   break;
  }
  $214 = $i;
  $215 = ((($mh)) + 20|0);
  $216 = (($215) + (($214*30)|0)|0);
  $217 = ((($216)) + 22|0);
  $218 = HEAP16[$217>>1]|0;
  $219 = $218&65535;
  $220 = $219<<1;
  $221 = $i;
  $222 = $mod;
  $223 = ((($222)) + 180|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + (($221*52)|0)|0);
  $226 = ((($225)) + 32|0);
  HEAP32[$226>>2] = $220;
  $227 = $i;
  $228 = ((($mh)) + 20|0);
  $229 = (($228) + (($227*30)|0)|0);
  $230 = ((($229)) + 26|0);
  $231 = HEAP16[$230>>1]|0;
  $232 = $231&65535;
  $233 = $232<<1;
  $234 = $i;
  $235 = $mod;
  $236 = ((($235)) + 180|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + (($234*52)|0)|0);
  $239 = ((($238)) + 36|0);
  HEAP32[$239>>2] = $233;
  $240 = $i;
  $241 = $mod;
  $242 = ((($241)) + 180|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($243) + (($240*52)|0)|0);
  $245 = ((($244)) + 36|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $i;
  $248 = ((($mh)) + 20|0);
  $249 = (($248) + (($247*30)|0)|0);
  $250 = ((($249)) + 28|0);
  $251 = HEAP16[$250>>1]|0;
  $252 = $251&65535;
  $253 = $252<<1;
  $254 = (($246) + ($253))|0;
  $255 = $i;
  $256 = $mod;
  $257 = ((($256)) + 180|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (($258) + (($255*52)|0)|0);
  $260 = ((($259)) + 40|0);
  HEAP32[$260>>2] = $254;
  $261 = $i;
  $262 = $mod;
  $263 = ((($262)) + 180|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + (($261*52)|0)|0);
  $266 = ((($265)) + 40|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $i;
  $269 = $mod;
  $270 = ((($269)) + 180|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($271) + (($268*52)|0)|0);
  $273 = ((($272)) + 32|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = ($267|0)>($274|0);
  if ($275) {
   $276 = $i;
   $277 = $mod;
   $278 = ((($277)) + 180|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($279) + (($276*52)|0)|0);
   $281 = ((($280)) + 32|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $i;
   $284 = $mod;
   $285 = ((($284)) + 180|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + (($283*52)|0)|0);
   $288 = ((($287)) + 40|0);
   HEAP32[$288>>2] = $282;
  }
  $289 = $i;
  $290 = ((($mh)) + 20|0);
  $291 = (($290) + (($289*30)|0)|0);
  $292 = ((($291)) + 28|0);
  $293 = HEAP16[$292>>1]|0;
  $294 = $293&65535;
  $295 = ($294|0)>(1);
  if ($295) {
   $296 = $i;
   $297 = $mod;
   $298 = ((($297)) + 180|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (($299) + (($296*52)|0)|0);
   $301 = ((($300)) + 40|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = ($302|0)>=(4);
   $304 = $303;
  } else {
   $304 = 0;
  }
  $305 = $304 ? 2 : 0;
  $306 = $i;
  $307 = $mod;
  $308 = ((($307)) + 180|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + (($306*52)|0)|0);
  $311 = ((($310)) + 44|0);
  HEAP32[$311>>2] = $305;
  $312 = $i;
  $313 = ((($mh)) + 20|0);
  $314 = (($313) + (($312*30)|0)|0);
  $315 = ((($314)) + 24|0);
  $316 = HEAP8[$315>>0]|0;
  $317 = $316 << 24 >> 24;
  $318 = $317 << 4;
  $319 = $318&255;
  $320 = $319 << 24 >> 24;
  $321 = $i;
  $322 = $mod;
  $323 = ((($322)) + 176|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = (($324) + (($321*764)|0)|0);
  $326 = ((($325)) + 756|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = ((($327)) + 16|0);
  HEAP32[$328>>2] = $320;
  $329 = $i;
  $330 = ((($mh)) + 20|0);
  $331 = (($330) + (($329*30)|0)|0);
  $332 = ((($331)) + 25|0);
  $333 = HEAP8[$332>>0]|0;
  $334 = $333 << 24 >> 24;
  $335 = $i;
  $336 = $mod;
  $337 = ((($336)) + 176|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = (($338) + (($335*764)|0)|0);
  $340 = ((($339)) + 756|0);
  $341 = HEAP32[$340>>2]|0;
  HEAP32[$341>>2] = $334;
  $342 = $i;
  $343 = $mod;
  $344 = ((($343)) + 176|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + (($342*764)|0)|0);
  $347 = ((($346)) + 756|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = ((($348)) + 8|0);
  HEAP32[$349>>2] = 128;
  $350 = $i;
  $351 = $i;
  $352 = $mod;
  $353 = ((($352)) + 176|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = (($354) + (($351*764)|0)|0);
  $356 = ((($355)) + 756|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = ((($357)) + 40|0);
  HEAP32[$358>>2] = $350;
  $359 = $mod;
  $360 = $i;
  $361 = $i;
  $362 = ((($mh)) + 20|0);
  $363 = (($362) + (($361*30)|0)|0);
  (_instrument_name($359,$360,$363,22)|0);
  $364 = $i;
  $365 = $mod;
  $366 = ((($365)) + 180|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = (($367) + (($364*52)|0)|0);
  $369 = ((($368)) + 32|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = ($370|0)>(0);
  if ($371) {
   $372 = $i;
   $373 = $mod;
   $374 = ((($373)) + 176|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = (($375) + (($372*764)|0)|0);
   $377 = ((($376)) + 36|0);
   HEAP32[$377>>2] = 1;
  }
  $378 = $i;
  $379 = (($378) + 1)|0;
  $i = $379;
 }
 if ((label|0) == 32) {
  $0 = -1;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 $380 = $detected;
 $381 = ($380|0)!=(0);
 L59: do {
  if (!($381)) {
   $382 = $mod;
   $383 = ((($382)) + 128|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = $384<<2;
   $386 = $mod;
   $387 = ((($386)) + 136|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = Math_imul($385, $388)|0;
   $390 = $389<<6;
   $391 = (1084 + ($390))|0;
   $392 = $smp_size;
   $393 = (($391) + ($392))|0;
   $394 = $1;
   $395 = ((($394)) + 1240|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = ($393|0)<($396|0);
   if ($397) {
    $398 = $2;
    $399 = (_hio_tell($398)|0);
    $pos = $399;
    $400 = $2;
    $401 = $3;
    $402 = (($401) + 1084)|0;
    $403 = $mod;
    $404 = ((($403)) + 128|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = $405<<2;
    $407 = $mod;
    $408 = ((($407)) + 136|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = Math_imul($406, $409)|0;
    $411 = $410<<6;
    $412 = (($402) + ($411))|0;
    $413 = $smp_size;
    $414 = (($412) + ($413))|0;
    (_hio_seek($400,$414,0)|0);
    $415 = $2;
    (_hio_read($idbuffer,1,4,$415)|0);
    $416 = $2;
    $417 = $3;
    $418 = $pos;
    $419 = (($417) + ($418))|0;
    (_hio_seek($416,$419,0)|0);
    $420 = (_memcmp($idbuffer,1800,4)|0);
    $421 = ($420|0)!=(0);
    if (!($421)) {
     $tracker_id = 8;
     break;
    }
   }
   $422 = (_strncmp($magic,7400,4)|0);
   $423 = ($422|0)!=(0);
   if ($423) {
    $437 = 0;
   } else {
    $424 = $mod;
    $425 = ((($424)) + 128|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = $426<<5;
    $428 = $427<<6;
    $429 = (1084 + ($428))|0;
    $430 = $smp_size;
    $431 = (($429) + ($430))|0;
    $432 = $1;
    $433 = ((($432)) + 1240|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = ($431|0)==($434|0);
    $437 = $435;
   }
   $436 = $437&1;
   $wow = $436;
   if ($437) {
    $438 = $mod;
    $439 = ((($438)) + 136|0);
    HEAP32[$439>>2] = 8;
    $tracker_id = 9;
    break;
   }
   $440 = (_strncmp($magic,7400,4)|0);
   $441 = ($440|0)!=(0);
   if ($441) {
    $452 = 0;
   } else {
    $442 = $mod;
    $443 = ((($442)) + 128|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = $444<<10;
    $446 = (1084 + ($445))|0;
    $447 = $1;
    $448 = ((($447)) + 1240|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = ($446|0)==($449|0);
    $452 = $450;
   }
   $451 = $452&1;
   $ptsong = $451;
   if ($452) {
    $tracker_id = 0;
    break;
   }
   $453 = $mod;
   $454 = ((($453)) + 136|0);
   $455 = HEAP32[$454>>2]|0;
   $456 = ($455|0)==(4);
   if ($456) {
    $457 = ((($mh)) + 951|0);
    $458 = HEAP8[$457>>0]|0;
    $459 = $458&255;
    $460 = $mod;
    $461 = ((($460)) + 128|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = ($459|0)==($462|0);
    if ($463) {
     $tracker_id = 2;
    } else {
     label = 55;
    }
   } else {
    label = 55;
   }
   do {
    if ((label|0) == 55) {
     $464 = $mod;
     $465 = ((($464)) + 136|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = ($466|0)==(4);
     if ($467) {
      $468 = ((($mh)) + 951|0);
      $469 = HEAP8[$468>>0]|0;
      $470 = $469&255;
      $471 = ($470|0)==(120);
      if ($471) {
       $tracker_id = 20;
       break;
      }
     }
     $472 = ((($mh)) + 951|0);
     $473 = HEAP8[$472>>0]|0;
     $474 = $473&255;
     $475 = ($474|0)<(127);
     if ($475) {
      $476 = $mod;
      $477 = ((($476)) + 136|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($478|0)==(4);
      if ($479) {
       $tracker_id = 1;
      } else {
       $tracker_id = 99;
      }
      $480 = ((($mh)) + 951|0);
      $481 = HEAP8[$480>>0]|0;
      $482 = $481&255;
      $483 = $mod;
      $484 = ((($483)) + 160|0);
      HEAP32[$484>>2] = $482;
     }
    }
   } while(0);
   $485 = $mod;
   $486 = ((($485)) + 136|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = ($487|0)!=(4);
   if ($488) {
    $489 = ((($mh)) + 951|0);
    $490 = HEAP8[$489>>0]|0;
    $491 = $490&255;
    $492 = ($491|0)==(127);
    if ($492) {
     $tracker_id = 10;
     $493 = $1;
     $494 = ((($493)) + 1280|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = $495 & -8193;
     HEAP32[$494>>2] = $496;
     $497 = $1;
     $498 = ((($497)) + 1284|0);
     HEAP32[$498>>2] = 2;
    }
   }
   $499 = $mod;
   $500 = ((($499)) + 136|0);
   $501 = HEAP32[$500>>2]|0;
   $502 = ($501|0)==(4);
   if ($502) {
    $503 = ((($mh)) + 951|0);
    $504 = HEAP8[$503>>0]|0;
    $505 = $504&255;
    $506 = ($505|0)==(127);
    if ($506) {
     $i = 0;
     while(1) {
      $507 = $i;
      $508 = ($507|0)<(31);
      if (!($508)) {
       break;
      }
      $509 = $i;
      $510 = ((($mh)) + 20|0);
      $511 = (($510) + (($509*30)|0)|0);
      $512 = ((($511)) + 28|0);
      $513 = HEAP16[$512>>1]|0;
      $514 = $513&65535;
      $515 = ($514|0)==(0);
      if ($515) {
       break;
      }
      $516 = $i;
      $517 = (($516) + 1)|0;
      $i = $517;
     }
     $518 = $i;
     $519 = ($518|0)<(31);
     if ($519) {
      $tracker_id = 98;
     }
    }
   }
   $520 = ((($mh)) + 951|0);
   $521 = HEAP8[$520>>0]|0;
   $522 = $521&255;
   $523 = ($522|0)!=(120);
   if ($523) {
    $524 = ((($mh)) + 951|0);
    $525 = HEAP8[$524>>0]|0;
    $526 = $525&255;
    $527 = ($526|0)<(127);
    if ($527) {
     $i = 0;
     while(1) {
      $528 = $i;
      $529 = ($528|0)<(31);
      if (!($529)) {
       break;
      }
      $530 = $i;
      $531 = ((($mh)) + 20|0);
      $532 = (($531) + (($530*30)|0)|0);
      $533 = ((($532)) + 28|0);
      $534 = HEAP16[$533>>1]|0;
      $535 = $534&65535;
      $536 = ($535|0)==(0);
      if ($536) {
       break;
      }
      $537 = $i;
      $538 = (($537) + 1)|0;
      $i = $538;
     }
     $539 = $i;
     $540 = ($539|0)==(31);
     if (!($540)) {
      $i = 15;
      while(1) {
       $607 = $i;
       $608 = ($607|0)<(31);
       if (!($608)) {
        break;
       }
       $609 = $i;
       $610 = ((($mh)) + 20|0);
       $611 = (($610) + (($609*30)|0)|0);
       $612 = (_strlen(($611|0))|0);
       $613 = ($612|0)!=(0);
       if ($613) {
        break;
       }
       $614 = $i;
       $615 = ((($mh)) + 20|0);
       $616 = (($615) + (($614*30)|0)|0);
       $617 = ((($616)) + 22|0);
       $618 = HEAP16[$617>>1]|0;
       $619 = $618&65535;
       $620 = ($619|0)>(0);
       if ($620) {
        break;
       }
       $621 = $i;
       $622 = (($621) + 1)|0;
       $i = $622;
      }
      $623 = $i;
      $624 = ($623|0)==(31);
      if ($624) {
       $625 = ((($mh)) + 20|0);
       $626 = ((($625)) + 420|0);
       $627 = (_is_st_ins($626)|0);
       $628 = ($627|0)!=(0);
       if ($628) {
        $tracker_id = 96;
        break;
       }
      }
      $i = 0;
      while(1) {
       $629 = $i;
       $630 = ($629|0)<(31);
       if (!($630)) {
        break;
       }
       $631 = $i;
       $632 = ((($mh)) + 20|0);
       $633 = (($632) + (($631*30)|0)|0);
       $634 = (_is_st_ins($633)|0);
       $635 = ($634|0)!=(0);
       if ($635) {
        break;
       }
       $636 = $i;
       $637 = (($636) + 1)|0;
       $i = $637;
      }
      $638 = $i;
      $639 = ($638|0)<(31);
      if ($639) {
       $tracker_id = 95;
       break;
      }
      $640 = $mod;
      $641 = ((($640)) + 136|0);
      $642 = HEAP32[$641>>2]|0;
      $643 = ($642|0)==(4);
      do {
       if (!($643)) {
        $644 = $mod;
        $645 = ((($644)) + 136|0);
        $646 = HEAP32[$645>>2]|0;
        $647 = ($646|0)==(6);
        if ($647) {
         break;
        }
        $648 = $mod;
        $649 = ((($648)) + 136|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = ($650|0)==(8);
        if ($651) {
         break;
        }
        $tracker_id = 99;
        break L59;
       }
      } while(0);
      $tracker_id = 3;
      $652 = $1;
      $653 = ((($652)) + 1280|0);
      $654 = HEAP32[$653>>2]|0;
      $655 = $654 & -8193;
      HEAP32[$653>>2] = $655;
      break;
     }
     $i = 0;
     while(1) {
      $541 = $i;
      $542 = ($541|0)<(31);
      if (!($542)) {
       break;
      }
      $543 = $i;
      $544 = ((($mh)) + 20|0);
      $545 = (($544) + (($543*30)|0)|0);
      $546 = ((($545)) + 22|0);
      $547 = HEAP16[$546>>1]|0;
      $548 = $547&65535;
      $549 = ($548|0)==(1);
      if ($549) {
       $550 = $i;
       $551 = ((($mh)) + 20|0);
       $552 = (($551) + (($550*30)|0)|0);
       $553 = ((($552)) + 25|0);
       $554 = HEAP8[$553>>0]|0;
       $555 = $554 << 24 >> 24;
       $556 = ($555|0)==(0);
       if ($556) {
        label = 85;
        break;
       }
      }
      $557 = $i;
      $558 = (($557) + 1)|0;
      $i = $558;
     }
     if ((label|0) == 85) {
      $tracker_id = 97;
      break;
     }
     $i = 0;
     while(1) {
      $559 = $i;
      $560 = ($559|0)<(31);
      if (!($560)) {
       break;
      }
      $561 = $i;
      $562 = ((($mh)) + 20|0);
      $563 = (($562) + (($561*30)|0)|0);
      $564 = (_is_st_ins($563)|0);
      $565 = ($564|0)!=(0);
      if ($565) {
       break;
      }
      $566 = $i;
      $567 = (($566) + 1)|0;
      $i = $567;
     }
     $568 = $i;
     $569 = ($568|0)==(31);
     if ($569) {
      $i = 0;
      while(1) {
       $570 = $i;
       $571 = ($570|0)<(31);
       if (!($571)) {
        break;
       }
       $572 = $i;
       $573 = ((($mh)) + 20|0);
       $574 = (($573) + (($572*30)|0)|0);
       $575 = ((($574)) + 22|0);
       $576 = HEAP16[$575>>1]|0;
       $577 = $576&65535;
       $578 = ($577|0)==(0);
       if ($578) {
        $579 = $i;
        $580 = ((($mh)) + 20|0);
        $581 = (($580) + (($579*30)|0)|0);
        $582 = ((($581)) + 28|0);
        $583 = HEAP16[$582>>1]|0;
        $584 = $583&65535;
        $585 = ($584|0)==(1);
        if ($585) {
         label = 96;
         break;
        }
       }
       $589 = $i;
       $590 = (($589) + 1)|0;
       $i = $590;
      }
      if ((label|0) == 96) {
       $586 = $mod;
       $587 = ((($586)) + 136|0);
       $588 = HEAP32[$587>>2]|0;
       if ((($588|0) == 8) | (($588|0) == 6)) {
        $tracker_id = 5;
        break;
       } else if ((($588|0) == 4)) {
        $tracker_id = 1;
        break;
       } else {
        $tracker_id = 99;
        break;
       }
      }
      $591 = $mod;
      $592 = ((($591)) + 136|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = ($593|0)==(4);
      if ($594) {
       $tracker_id = 0;
       break;
      }
      $595 = $mod;
      $596 = ((($595)) + 136|0);
      $597 = HEAP32[$596>>2]|0;
      $598 = ($597|0)==(6);
      do {
       if (!($598)) {
        $599 = $mod;
        $600 = ((($599)) + 136|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($601|0)==(8);
        if ($602) {
         break;
        }
        $tracker_id = 99;
        break L59;
       }
      } while(0);
      $tracker_id = 3;
      $603 = $1;
      $604 = ((($603)) + 1280|0);
      $605 = HEAP32[$604>>2]|0;
      $606 = $605 & -8193;
      HEAP32[$604>>2] = $606;
     }
    }
   }
  }
 } while(0);
 $656 = $mod;
 $657 = ((($656)) + 136|0);
 $658 = HEAP32[$657>>2]|0;
 $659 = $mod;
 $660 = ((($659)) + 128|0);
 $661 = HEAP32[$660>>2]|0;
 $662 = Math_imul($658, $661)|0;
 $663 = $mod;
 $664 = ((($663)) + 132|0);
 HEAP32[$664>>2] = $662;
 $i = 0;
 while(1) {
  $665 = $i;
  $666 = $mod;
  $667 = ((($666)) + 140|0);
  $668 = HEAP32[$667>>2]|0;
  $669 = ($665|0)<($668|0);
  if (!($669)) {
   break;
  }
  $670 = $i;
  $671 = (($670) + 1)|0;
  $i = $671;
 }
 $672 = $mod;
 $673 = (_pattern_init($672)|0);
 $674 = ($673|0)<(0);
 if ($674) {
  $0 = -1;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 $i = 0;
 while(1) {
  $675 = $i;
  $676 = $mod;
  $677 = ((($676)) + 128|0);
  $678 = HEAP32[$677>>2]|0;
  $679 = ($675|0)<($678|0);
  if (!($679)) {
   break;
  }
  $680 = $mod;
  $681 = $i;
  $682 = (_pattern_tracks_alloc($680,$681,64)|0);
  $683 = ($682|0)<(0);
  if ($683) {
   label = 134;
   break;
  }
  $j = 0;
  while(1) {
   $684 = $j;
   $685 = $mod;
   $686 = ((($685)) + 136|0);
   $687 = HEAP32[$686>>2]|0;
   $688 = $687<<6;
   $689 = ($684|0)<($688|0);
   if (!($689)) {
    break;
   }
   $690 = $j;
   $691 = $mod;
   $692 = ((($691)) + 136|0);
   $693 = HEAP32[$692>>2]|0;
   $694 = (($690|0) / ($693|0))&-1;
   $695 = $j;
   $696 = $mod;
   $697 = ((($696)) + 136|0);
   $698 = HEAP32[$697>>2]|0;
   $699 = (($695|0) % ($698|0))&-1;
   $700 = $i;
   $701 = $1;
   $702 = ((($701)) + 168|0);
   $703 = HEAP32[$702>>2]|0;
   $704 = (($703) + ($700<<2)|0);
   $705 = HEAP32[$704>>2]|0;
   $706 = ((($705)) + 4|0);
   $707 = (($706) + ($699<<2)|0);
   $708 = HEAP32[$707>>2]|0;
   $709 = $1;
   $710 = ((($709)) + 172|0);
   $711 = HEAP32[$710>>2]|0;
   $712 = (($711) + ($708<<2)|0);
   $713 = HEAP32[$712>>2]|0;
   $714 = ((($713)) + 4|0);
   $715 = (($714) + ($694<<3)|0);
   $event = $715;
   $716 = $2;
   (_hio_read($mod_event,1,4,$716)|0);
   $717 = $tracker_id;
   $718 = ($717|0)==(20);
   do {
    if ($718) {
     $719 = ((($mod_event)) + 2|0);
     $720 = HEAP8[$719>>0]|0;
     $721 = $720&255;
     $722 = $721 & 15;
     $723 = $722&255;
     $fxt = $723;
     $724 = ((($mod_event)) + 3|0);
     $725 = HEAP8[$724>>0]|0;
     $726 = $725&255;
     $727 = $726 & 15;
     $728 = $727&255;
     $fxp = $728;
     $729 = $fxt;
     $730 = $729&255;
     $731 = ($730|0)>(6);
     if ($731) {
      $732 = $fxt;
      $733 = $732&255;
      $734 = ($733|0)<(10);
      if (!($734)) {
       label = 140;
      }
     } else {
      label = 140;
     }
     if ((label|0) == 140) {
      label = 0;
      $735 = $fxt;
      $736 = $735&255;
      $737 = ($736|0)==(14);
      if (!($737)) {
       break;
      }
      $738 = $fxp;
      $739 = $738&255;
      $740 = ($739|0)>(1);
      if (!($740)) {
       break;
      }
     }
     $tracker_id = 99;
    }
   } while(0);
   $741 = $tracker_id;
   if ((($741|0) == 1) | (($741|0) == 20)) {
    $742 = $event;
    _decode_noisetracker_event($742,$mod_event);
   } else {
    $743 = $event;
    _decode_protracker_event($743,$mod_event);
   }
   $744 = $j;
   $745 = (($744) + 1)|0;
   $j = $745;
  }
  $746 = $i;
  $747 = (($746) + 1)|0;
  $i = $747;
 }
 if ((label|0) == 134) {
  $0 = -1;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 $748 = $tracker_id;
 do {
  switch ($748|0) {
  case 10:  {
   $tracker = 1920;
   break;
  }
  case 97: case 96:  {
   $tracker = 1936;
   break;
  }
  case 98:  {
   $tracker = 1952;
   break;
  }
  case 0:  {
   $tracker = 1808;
   $ptkloop = 1;
   break;
  }
  case 1: case 20:  {
   $tracker = 1824;
   $ptkloop = 1;
   break;
  }
  case 2:  {
   $tracker = 4480;
   $ptkloop = 1;
   break;
  }
  case 4: case 3:  {
   $tracker = 1840;
   break;
  }
  case 6:  {
   $tracker = 1856;
   break;
  }
  case 5:  {
   $tracker = 1872;
   break;
  }
  case 7:  {
   $tracker = 6528;
   break;
  }
  case 8:  {
   $tracker = 1888;
   break;
  }
  case 9:  {
   $tracker = 1904;
   break;
  }
  default: {
   $tracker = 1976;
  }
  }
 } while(0);
 $749 = $tracker_id;
 $750 = ($749|0)==(9);
 $751 = $mod;
 $752 = ((($751)) + 64|0);
 $753 = $tracker;
 if ($750) {
  HEAP32[$vararg_buffer>>2] = $753;
  (_snprintf($752,64,7408,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer1>>2] = $753;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $magic;
  (_snprintf($752,64,1992,$vararg_buffer1)|0);
 }
 $754 = $1;
 $755 = ((($754)) + 1216|0);
 $756 = HEAP32[$755>>2]|0;
 $757 = ($756|0)!=(0|0);
 if ($757) {
  $758 = $1;
  $759 = ((($758)) + 1216|0);
  $760 = HEAP32[$759>>2]|0;
  $761 = (_strrchr($760,47)|0);
  $x = $761;
  $762 = ($761|0)!=(0|0);
  if ($762) {
   $763 = $1;
   $764 = ((($763)) + 1216|0);
   $765 = HEAP32[$764>>2]|0;
   $766 = $x;
   $767 = $1;
   $768 = ((($767)) + 1216|0);
   $769 = HEAP32[$768>>2]|0;
   $770 = $766;
   $771 = $769;
   $772 = (($770) - ($771))|0;
   (_strncpy(($pathname|0),($765|0),($772|0))|0);
  }
 }
 $i = 0;
 L231: while(1) {
  $773 = $i;
  $774 = $mod;
  $775 = ((($774)) + 144|0);
  $776 = HEAP32[$775>>2]|0;
  $777 = ($773|0)<($776|0);
  if (!($777)) {
   label = 182;
   break;
  }
  $778 = $i;
  $779 = $mod;
  $780 = ((($779)) + 180|0);
  $781 = HEAP32[$780>>2]|0;
  $782 = (($781) + (($778*52)|0)|0);
  $783 = ((($782)) + 32|0);
  $784 = HEAP32[$783>>2]|0;
  $785 = ($784|0)!=(0);
  do {
   if ($785) {
    $786 = $ptkloop;
    $787 = ($786|0)!=(0);
    $788 = $787 ? 512 : 0;
    $flags = $788;
    $789 = $ptsong;
    $790 = ($789|0)!=(0);
    if ($790) {
     $791 = $i;
     $792 = $mod;
     $793 = ((($792)) + 176|0);
     $794 = HEAP32[$793>>2]|0;
     $795 = (($794) + (($791*764)|0)|0);
     HEAP32[$vararg_buffer5>>2] = $pathname;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $795;
     (_snprintf($sn,64,7672,$vararg_buffer5)|0);
     $796 = (_hio_open($sn,8192)|0);
     $s = $796;
     $797 = ($796|0)!=(0|0);
     if (!($797)) {
      break;
     }
     $798 = $1;
     $799 = $s;
     $800 = $flags;
     $801 = $i;
     $802 = $mod;
     $803 = ((($802)) + 180|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = (($804) + (($801*52)|0)|0);
     $806 = (_load_sample($798,$799,$800,$805,0)|0);
     $807 = ($806|0)<(0);
     $808 = $s;
     (_hio_close($808)|0);
     if ($807) {
      label = 174;
      break L231;
     } else {
      break;
     }
    }
    $809 = $2;
    $810 = (_hio_tell($809)|0);
    $pos1 = $810;
    $811 = $2;
    $812 = (_hio_read($buf,1,5,$811)|0);
    $num = $812;
    $813 = $num;
    $814 = ($813|0)==(5);
    if ($814) {
     $815 = (_memcmp($buf,2000,5)|0);
     $816 = ($815|0)!=(0);
     if ($816) {
      label = 178;
     } else {
      $817 = $flags;
      $818 = $817 | 16384;
      $flags = $818;
     }
    } else {
     label = 178;
    }
    if ((label|0) == 178) {
     label = 0;
     $819 = $2;
     $820 = $pos1;
     (_hio_seek($819,$820,0)|0);
    }
    $821 = $1;
    $822 = $2;
    $823 = $flags;
    $824 = $i;
    $825 = $mod;
    $826 = ((($825)) + 180|0);
    $827 = HEAP32[$826>>2]|0;
    $828 = (($827) + (($824*52)|0)|0);
    $829 = (_load_sample($821,$822,$823,$828,0)|0);
    $830 = ($829|0)<(0);
    if ($830) {
     label = 180;
     break L231;
    }
   }
  } while(0);
  $831 = $i;
  $832 = (($831) + 1)|0;
  $i = $832;
 }
 if ((label|0) == 174) {
  $0 = -1;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 else if ((label|0) == 180) {
  $0 = -1;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 else if ((label|0) == 182) {
  $833 = $mod;
  $834 = ((($833)) + 136|0);
  $835 = HEAP32[$834>>2]|0;
  $836 = ($835|0)>(4);
  if ($836) {
   $837 = $1;
   $838 = ((($837)) + 1280|0);
   $839 = HEAP32[$838>>2]|0;
   $840 = $839 & -8193;
   HEAP32[$838>>2] = $840;
   $841 = $1;
   $842 = ((($841)) + 1280|0);
   $843 = HEAP32[$842>>2]|0;
   $844 = $843 | 704643104;
   HEAP32[$842>>2] = $844;
   $845 = $1;
   $846 = ((($845)) + 1284|0);
   HEAP32[$846>>2] = 1;
  } else {
   $847 = $tracker;
   $848 = (_strcmp($847,1808)|0);
   $849 = ($848|0)==(0);
   if ($849) {
    $850 = $1;
    $851 = ((($850)) + 1280|0);
    $852 = HEAP32[$851>>2]|0;
    $853 = $852 | 4;
    HEAP32[$851>>2] = $853;
   }
  }
  $0 = 0;
  $854 = $0;
  STACKTOP = sp;return ($854|0);
 }
 return (0)|0;
}
function _is_st_ins($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)!=(115);
 if ($5) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(83);
  if ($9) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)!=(116);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(84);
  if ($19) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $20 = $1;
 $21 = ((($20)) + 2|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)!=(45);
 if (!($24)) {
  $25 = $1;
  $26 = ((($25)) + 5|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(58);
  if (!($29)) {
   $30 = $1;
   $31 = ((($30)) + 3|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = (_isdigit($33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $1;
    $37 = ((($36)) + 4|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = (_isdigit($39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     $0 = 1;
     $42 = $0;
     STACKTOP = sp;return ($42|0);
    }
   }
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _s3m_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 44)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1396920909);
 if ($9) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $10 = $1;
  $11 = $3;
  $12 = (($11) + 0)|0;
  (_hio_seek($10,$12,0)|0);
  $13 = $1;
  $14 = $2;
  _read_title($13,$14,28);
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _s3m_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $dummy = 0, $event = 0;
 var $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $i5 = 0, $i6 = 0, $i7 = 0, $i8 = 0, $mod = 0, $n = 0, $pat_len = 0, $pp_ins = 0, $pp_pat = 0, $quirk87 = 0, $r = 0, $ret = 0, $sah = 0, $sfh = 0, $sih = 0, $sub = 0;
 var $tracker_name = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, $x = 0, $x4 = 0, $x8 = 0, $xxi = 0, $xxs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer23 = sp + 48|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $dummy = sp + 464|0;
 $sfh = sp + 288|0;
 $sih = sp + 208|0;
 $sah = sp + 128|0;
 $tracker_name = sp + 424|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $quirk87 = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,28,1,$7)|0);
 $8 = $2;
 (_hio_read8($8)|0);
 $9 = $2;
 $10 = (_hio_read8($9)|0);
 $11 = ((($sfh)) + 29|0);
 HEAP8[$11>>0] = $10;
 $12 = $2;
 (_hio_read16l($12)|0);
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($sfh)) + 32|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read16l($16)|0);
 $18 = ((($sfh)) + 34|0);
 HEAP16[$18>>1] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($sfh)) + 36|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($sfh)) + 38|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($sfh)) + 40|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($sfh)) + 42|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read32b($31)|0);
 $33 = ((($sfh)) + 44|0);
 HEAP32[$33>>2] = $32;
 $34 = $2;
 $35 = (_hio_read8($34)|0);
 $36 = ((($sfh)) + 48|0);
 HEAP8[$36>>0] = $35;
 $37 = $2;
 $38 = (_hio_read8($37)|0);
 $39 = ((($sfh)) + 49|0);
 HEAP8[$39>>0] = $38;
 $40 = $2;
 $41 = (_hio_read8($40)|0);
 $42 = ((($sfh)) + 50|0);
 HEAP8[$42>>0] = $41;
 $43 = $2;
 $44 = (_hio_read8($43)|0);
 $45 = ((($sfh)) + 51|0);
 HEAP8[$45>>0] = $44;
 $46 = $2;
 $47 = (_hio_read8($46)|0);
 $48 = ((($sfh)) + 52|0);
 HEAP8[$48>>0] = $47;
 $49 = $2;
 $50 = (_hio_read8($49)|0);
 $51 = ((($sfh)) + 53|0);
 HEAP8[$51>>0] = $50;
 $52 = $2;
 (_hio_read32l($52)|0);
 $53 = $2;
 (_hio_read32l($53)|0);
 $54 = $2;
 $55 = (_hio_read16l($54)|0);
 $56 = ((($sfh)) + 62|0);
 HEAP16[$56>>1] = $55;
 $57 = ((($sfh)) + 64|0);
 $58 = $2;
 (_hio_read($57,32,1,$58)|0);
 $59 = ((($sfh)) + 40|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = ($61|0)==(4865);
 if ($62) {
  $63 = ((($sfh)) + 27|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = ($65|0)==(135);
  if ($66) {
   $quirk87 = 1;
  }
 }
 $67 = $quirk87;
 $68 = ($67|0)!=(0);
 L5: do {
  if ($68) {
   $i1 = 0;
   while(1) {
    $69 = $i1;
    $70 = ($69>>>0)<(28);
    if (!($70)) {
     break;
    }
    $71 = $i1;
    $72 = (($sfh) + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = ($74|0)==(135);
    if ($75) {
     $76 = $i1;
     $77 = (($sfh) + ($76)|0);
     HEAP8[$77>>0] = 0;
    }
    $78 = $i1;
    $79 = (($78) + 1)|0;
    $i1 = $79;
   }
   $i2 = 0;
   while(1) {
    $80 = $i2;
    $81 = ($80>>>0)<(2);
    if (!($81)) {
     break;
    }
    $82 = ((($sfh)) + 36|0);
    $83 = $i2;
    $84 = (($82) + ($83)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = ($86|0)==(135);
    if ($87) {
     $88 = ((($sfh)) + 36|0);
     $89 = $i2;
     $90 = (($88) + ($89)|0);
     HEAP8[$90>>0] = 0;
    }
    $91 = $i2;
    $92 = (($91) + 1)|0;
    $i2 = $92;
   }
   $i3 = 0;
   while(1) {
    $93 = $i3;
    $94 = ($93>>>0)<(2);
    if (!($94)) {
     break L5;
    }
    $95 = ((($sfh)) + 38|0);
    $96 = $i3;
    $97 = (($95) + ($96)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = ($99|0)==(135);
    if ($100) {
     $101 = ((($sfh)) + 38|0);
     $102 = $i3;
     $103 = (($101) + ($102)|0);
     HEAP8[$103>>0] = 0;
    }
    $104 = $i3;
    $105 = (($104) + 1)|0;
    $i3 = $105;
   }
  }
 } while(0);
 $106 = $mod;
 (_copy_adjust($106,$sfh,28)|0);
 $107 = ((($sfh)) + 34|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = $108&65535;
 $110 = (_calloc(2,$109)|0);
 $pp_ins = $110;
 $111 = $pp_ins;
 $112 = ($111|0)==(0|0);
 if (!($112)) {
  $113 = ((($sfh)) + 36|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114&65535;
  $116 = (_calloc(2,$115)|0);
  $pp_pat = $116;
  $117 = $pp_pat;
  $118 = ($117|0)==(0|0);
  if (!($118)) {
   $119 = ((($sfh)) + 38|0);
   $120 = HEAP16[$119>>1]|0;
   $121 = $120&65535;
   $122 = $121 & 16;
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = $1;
    $125 = ((($124)) + 1280|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $126 | 8192;
    HEAP32[$125>>2] = $127;
   }
   $128 = ((($sfh)) + 38|0);
   $129 = HEAP16[$128>>1]|0;
   $130 = $129&65535;
   $131 = $130 & 64;
   $132 = ($131|0)!=(0);
   if ($132) {
    $133 = $1;
    $134 = ((($133)) + 1280|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $135 | 64;
    HEAP32[$134>>2] = $136;
   }
   $137 = ((($sfh)) + 49|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $mod;
   $141 = ((($140)) + 148|0);
   HEAP32[$141>>2] = $139;
   $142 = ((($sfh)) + 50|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = $mod;
   $146 = ((($145)) + 152|0);
   HEAP32[$146>>2] = $144;
   $i = 0;
   while(1) {
    $147 = $i;
    $148 = ($147|0)<(32);
    if (!($148)) {
     break;
    }
    $149 = $i;
    $150 = ((($sfh)) + 64|0);
    $151 = (($150) + ($149)|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = ($153|0)==(255);
    do {
     if (!($154)) {
      $155 = $i;
      $156 = (($155) + 1)|0;
      $157 = $mod;
      $158 = ((($157)) + 136|0);
      HEAP32[$158>>2] = $156;
      $159 = ((($sfh)) + 51|0);
      $160 = HEAP8[$159>>0]|0;
      $161 = $160&255;
      $162 = $161 & 128;
      $163 = ($162|0)!=(0);
      $164 = $i;
      if ($163) {
       $165 = ((($sfh)) + 64|0);
       $166 = (($165) + ($164)|0);
       $167 = HEAP8[$166>>0]|0;
       $168 = $167&255;
       $169 = $168 & 127;
       $x = $169;
       $170 = $x;
       $171 = $170 & 15;
       $172 = ($171|0)<(8);
       $173 = $172 ? 48 : 192;
       $174 = $i;
       $175 = $mod;
       $176 = ((($175)) + 184|0);
       $177 = (($176) + (($174*12)|0)|0);
       HEAP32[$177>>2] = $173;
       break;
      } else {
       $178 = $mod;
       $179 = ((($178)) + 184|0);
       $180 = (($179) + (($164*12)|0)|0);
       HEAP32[$180>>2] = 128;
       break;
      }
     }
    } while(0);
    $181 = $i;
    $182 = (($181) + 1)|0;
    $i = $182;
   }
   $183 = ((($sfh)) + 32|0);
   $184 = HEAP16[$183>>1]|0;
   $185 = $184&65535;
   $186 = ($185|0)<=(256);
   if ($186) {
    $187 = ((($sfh)) + 32|0);
    $188 = HEAP16[$187>>1]|0;
    $189 = $188&65535;
    $190 = $mod;
    $191 = ((($190)) + 156|0);
    HEAP32[$191>>2] = $189;
    $192 = $mod;
    $193 = ((($192)) + 952|0);
    $194 = $mod;
    $195 = ((($194)) + 156|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $2;
    (_hio_read($193,1,$196,$197)|0);
   } else {
    $198 = $mod;
    $199 = ((($198)) + 156|0);
    HEAP32[$199>>2] = 256;
    $200 = $mod;
    $201 = ((($200)) + 952|0);
    $202 = $mod;
    $203 = ((($202)) + 156|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = $2;
    (_hio_read($201,1,$204,$205)|0);
    $206 = $2;
    $207 = ((($sfh)) + 32|0);
    $208 = HEAP16[$207>>1]|0;
    $209 = $208&65535;
    $210 = (($209) - 256)|0;
    (_hio_seek($206,$210,1)|0);
   }
   $211 = $mod;
   $212 = ((($211)) + 128|0);
   HEAP32[$212>>2] = -1;
   $i = 0;
   while(1) {
    $213 = $i;
    $214 = $mod;
    $215 = ((($214)) + 156|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($213|0)<($216|0);
    if (!($217)) {
     break;
    }
    $218 = $i;
    $219 = $mod;
    $220 = ((($219)) + 952|0);
    $221 = (($220) + ($218)|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222&255;
    $224 = ($223|0)<(255);
    if (!($224)) {
     break;
    }
    $225 = $i;
    $226 = $mod;
    $227 = ((($226)) + 952|0);
    $228 = (($227) + ($225)|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = $229&255;
    $231 = $mod;
    $232 = ((($231)) + 128|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = ($230|0)>($233|0);
    if ($234) {
     $235 = $i;
     $236 = $mod;
     $237 = ((($236)) + 952|0);
     $238 = (($237) + ($235)|0);
     $239 = HEAP8[$238>>0]|0;
     $240 = $239&255;
     $241 = $mod;
     $242 = ((($241)) + 128|0);
     HEAP32[$242>>2] = $240;
    }
    $243 = $i;
    $244 = (($243) + 1)|0;
    $i = $244;
   }
   $245 = $mod;
   $246 = ((($245)) + 128|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + 1)|0;
   HEAP32[$246>>2] = $248;
   $249 = $mod;
   $250 = ((($249)) + 128|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = ((($sfh)) + 36|0);
   $253 = HEAP16[$252>>1]|0;
   $254 = $253&65535;
   $255 = ($251|0)>($254|0);
   if ($255) {
    $256 = ((($sfh)) + 36|0);
    $257 = HEAP16[$256>>1]|0;
    $258 = $257&65535;
    $259 = $mod;
    $260 = ((($259)) + 128|0);
    HEAP32[$260>>2] = $258;
   }
   $261 = $mod;
   $262 = ((($261)) + 128|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $mod;
   $265 = ((($264)) + 136|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = Math_imul($263, $266)|0;
   $268 = $mod;
   $269 = ((($268)) + 132|0);
   HEAP32[$269>>2] = $267;
   $270 = ((($sfh)) + 34|0);
   $271 = HEAP16[$270>>1]|0;
   $272 = $271&65535;
   $273 = $mod;
   $274 = ((($273)) + 140|0);
   HEAP32[$274>>2] = $272;
   $275 = $mod;
   $276 = ((($275)) + 140|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = $mod;
   $279 = ((($278)) + 144|0);
   HEAP32[$279>>2] = $277;
   $i = 0;
   while(1) {
    $280 = $i;
    $281 = ((($sfh)) + 34|0);
    $282 = HEAP16[$281>>1]|0;
    $283 = $282&65535;
    $284 = ($280|0)<($283|0);
    if (!($284)) {
     break;
    }
    $285 = $2;
    $286 = (_hio_read16l($285)|0);
    $287 = $i;
    $288 = $pp_ins;
    $289 = (($288) + ($287<<1)|0);
    HEAP16[$289>>1] = $286;
    $290 = $i;
    $291 = (($290) + 1)|0;
    $i = $291;
   }
   $i = 0;
   while(1) {
    $292 = $i;
    $293 = ((($sfh)) + 36|0);
    $294 = HEAP16[$293>>1]|0;
    $295 = $294&65535;
    $296 = ($292|0)<($295|0);
    if (!($296)) {
     break;
    }
    $297 = $2;
    $298 = (_hio_read16l($297)|0);
    $299 = $i;
    $300 = $pp_pat;
    $301 = (($300) + ($299<<1)|0);
    HEAP16[$301>>1] = $298;
    $302 = $i;
    $303 = (($302) + 1)|0;
    $i = $303;
   }
   $i = 0;
   $304 = ((($sfh)) + 53|0);
   $305 = HEAP8[$304>>0]|0;
   $306 = $305&255;
   $307 = (($306) - 252)|0;
   $308 = $307&255;
   HEAP8[$304>>0] = $308;
   while(1) {
    $309 = ((($sfh)) + 53|0);
    $310 = HEAP8[$309>>0]|0;
    $311 = ($310<<24>>24)!=(0);
    $312 = $i;
    $313 = ($312|0)<(32);
    $314 = $311 ? 0 : $313;
    if (!($314)) {
     break;
    }
    $315 = $2;
    $316 = (_hio_read8($315)|0);
    $x4 = $316;
    $317 = $x4;
    $318 = $317&255;
    $319 = $318 & 32;
    $320 = ($319|0)!=(0);
    if ($320) {
     $321 = $x4;
     $322 = $321&255;
     $323 = $322 << 4;
     $324 = $323 & 255;
     $325 = $i;
     $326 = $mod;
     $327 = ((($326)) + 184|0);
     $328 = (($327) + (($325*12)|0)|0);
     HEAP32[$328>>2] = $324;
    } else {
     $329 = ((($sfh)) + 51|0);
     $330 = HEAP8[$329>>0]|0;
     $331 = $330&255;
     $332 = (($331|0) % 128)&-1;
     $333 = ($332|0)!=(0);
     if ($333) {
      $334 = $i;
      $335 = $334 & 1;
      $336 = ($335*160)|0;
      $337 = (48 + ($336))|0;
      $342 = $337;
     } else {
      $342 = 128;
     }
     $338 = $i;
     $339 = $mod;
     $340 = ((($339)) + 184|0);
     $341 = (($340) + (($338*12)|0)|0);
     HEAP32[$341>>2] = $342;
    }
    $343 = $i;
    $344 = (($343) + 1)|0;
    $i = $344;
   }
   $345 = $1;
   $346 = ((($345)) + 1264|0);
   HEAP32[$346>>2] = 8363;
   $347 = ((($sfh)) + 40|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348&65535;
   $350 = ($349|0)==(4864);
   if ($350) {
    $351 = $1;
    $352 = ((($351)) + 1280|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = $353 | 64;
    HEAP32[$352>>2] = $354;
   }
   $355 = ((($sfh)) + 40|0);
   $356 = HEAP16[$355>>1]|0;
   $357 = $356&65535;
   $358 = $357 >> 12;
   L85: do {
    switch ($358|0) {
    case 1:  {
     $359 = ((($sfh)) + 40|0);
     $360 = HEAP16[$359>>1]|0;
     $361 = $360&65535;
     $362 = $361 & 3840;
     $363 = $362 >> 8;
     $364 = ((($sfh)) + 40|0);
     $365 = HEAP16[$364>>1]|0;
     $366 = $365&65535;
     $367 = $366 & 255;
     HEAP32[$vararg_buffer>>2] = $363;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $367;
     (_snprintf($tracker_name,40,2048,$vararg_buffer)|0);
     $368 = $1;
     $369 = ((($368)) + 1280|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = $370 | 16;
     HEAP32[$369>>2] = $371;
     break;
    }
    case 5:  {
     $398 = ((($sfh)) + 40|0);
     $399 = HEAP16[$398>>1]|0;
     $400 = $399&65535;
     $401 = $400 & 3840;
     $402 = $401 >> 8;
     $403 = ((($sfh)) + 40|0);
     $404 = HEAP16[$403>>1]|0;
     $405 = $404&65535;
     $406 = $405 & 255;
     HEAP32[$vararg_buffer11>>2] = $402;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $406;
     (_snprintf($tracker_name,40,3768,$vararg_buffer11)|0);
     break;
    }
    case 6:  {
     label = 71;
     break;
    }
    case 4:  {
     $407 = ((($sfh)) + 40|0);
     $408 = HEAP16[$407>>1]|0;
     $409 = $408&65535;
     $410 = ($409|0)!=(16640);
     if ($410) {
      $411 = ((($sfh)) + 40|0);
      $412 = HEAP16[$411>>1]|0;
      $413 = $412&65535;
      $414 = $413 & 3840;
      $415 = $414 >> 8;
      $416 = ((($sfh)) + 40|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $419 = $418 & 255;
      HEAP32[$vararg_buffer15>>2] = $415;
      $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
      HEAP32[$vararg_ptr18>>2] = $419;
      (_snprintf($tracker_name,40,2096,$vararg_buffer15)|0);
     } else {
      label = 71;
     }
     break;
    }
    case 2:  {
     $372 = ((($sfh)) + 40|0);
     $373 = HEAP16[$372>>1]|0;
     $374 = $373&65535;
     $375 = $374 & 3840;
     $376 = $375 >> 8;
     $377 = ((($sfh)) + 40|0);
     $378 = HEAP16[$377>>1]|0;
     $379 = $378&65535;
     $380 = $379 & 255;
     HEAP32[$vararg_buffer3>>2] = $376;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $380;
     (_snprintf($tracker_name,40,2072,$vararg_buffer3)|0);
     break;
    }
    case 3:  {
     $381 = ((($sfh)) + 40|0);
     $382 = HEAP16[$381>>1]|0;
     $383 = $382&65535;
     $384 = ($383|0)==(12822);
     if ($384) {
      (_strcpy(($tracker_name|0),(3568|0))|0);
      break L85;
     }
     $385 = ((($sfh)) + 40|0);
     $386 = HEAP16[$385>>1]|0;
     $387 = $386&65535;
     $388 = ($387|0)==(12823);
     if ($388) {
      (_strcpy(($tracker_name|0),(3592|0))|0);
      break L85;
     } else {
      $389 = ((($sfh)) + 40|0);
      $390 = HEAP16[$389>>1]|0;
      $391 = $390&65535;
      $392 = $391 & 3840;
      $393 = $392 >> 8;
      $394 = ((($sfh)) + 40|0);
      $395 = HEAP16[$394>>1]|0;
      $396 = $395&65535;
      $397 = $396 & 255;
      HEAP32[$vararg_buffer7>>2] = $393;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $397;
      (_snprintf($tracker_name,40,3640,$vararg_buffer7)|0);
      break L85;
     }
     break;
    }
    default: {
     $429 = ((($sfh)) + 40|0);
     $430 = HEAP16[$429>>1]|0;
     $431 = $430&65535;
     HEAP32[$vararg_buffer23>>2] = $431;
     (_snprintf($tracker_name,40,3696,$vararg_buffer23)|0);
    }
    }
   } while(0);
   if ((label|0) == 71) {
    $420 = ((($sfh)) + 40|0);
    $421 = HEAP16[$420>>1]|0;
    $422 = $421&65535;
    $423 = $422 & 3840;
    $424 = $423 >> 8;
    $425 = ((($sfh)) + 40|0);
    $426 = HEAP16[$425>>1]|0;
    $427 = $426&65535;
    $428 = $427 & 255;
    HEAP32[$vararg_buffer19>>2] = $424;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $428;
    (_snprintf($tracker_name,40,3808,$vararg_buffer19)|0);
   }
   $432 = $1;
   HEAP32[$vararg_buffer26>>2] = $tracker_name;
   _set_type($432,2120,$vararg_buffer26);
   $433 = $mod;
   $434 = (_pattern_init($433)|0);
   $435 = ($434|0)<(0);
   L102: do {
    if (!($435)) {
     $i = 0;
     while(1) {
      $436 = $i;
      $437 = $mod;
      $438 = ((($437)) + 128|0);
      $439 = HEAP32[$438>>2]|0;
      $440 = ($436|0)<($439|0);
      $441 = $mod;
      if (!($440)) {
       break;
      }
      $442 = $i;
      $443 = (_pattern_tracks_alloc($441,$442,64)|0);
      $444 = ($443|0)<(0);
      if ($444) {
       break L102;
      }
      $445 = $i;
      $446 = $pp_pat;
      $447 = (($446) + ($445<<1)|0);
      $448 = HEAP16[$447>>1]|0;
      $449 = $448&65535;
      $450 = ($449|0)==(0);
      L108: do {
       if (!($450)) {
        $451 = $2;
        $452 = $3;
        $453 = $i;
        $454 = $pp_pat;
        $455 = (($454) + ($453<<1)|0);
        $456 = HEAP16[$455>>1]|0;
        $457 = $456&65535;
        $458 = $457<<4;
        $459 = (($452) + ($458))|0;
        (_hio_seek($451,$459,0)|0);
        $r = 0;
        $460 = $2;
        $461 = (_hio_read16l($460)|0);
        $462 = $461&65535;
        $463 = (($462) - 2)|0;
        $pat_len = $463;
        while(1) {
         $464 = $pat_len;
         $465 = ($464|0)>=(0);
         if (!($465)) {
          break L108;
         }
         $466 = $r;
         $467 = $i;
         $468 = $mod;
         $469 = ((($468)) + 168|0);
         $470 = HEAP32[$469>>2]|0;
         $471 = (($470) + ($467<<2)|0);
         $472 = HEAP32[$471>>2]|0;
         $473 = HEAP32[$472>>2]|0;
         $474 = ($466|0)<($473|0);
         if (!($474)) {
          break L108;
         }
         $475 = $2;
         $476 = (_hio_read8($475)|0);
         $b = $476;
         $477 = $b;
         $478 = $477&255;
         $479 = ($478|0)==(0);
         if ($479) {
          $480 = $r;
          $481 = (($480) + 1)|0;
          $r = $481;
          continue;
         }
         $482 = $b;
         $483 = $482&255;
         $484 = $483 & 31;
         $c = $484;
         $485 = $c;
         $486 = $mod;
         $487 = ((($486)) + 136|0);
         $488 = HEAP32[$487>>2]|0;
         $489 = ($485|0)>=($488|0);
         if ($489) {
          $508 = $dummy;
         } else {
          $490 = $r;
          $491 = $c;
          $492 = $i;
          $493 = $1;
          $494 = ((($493)) + 168|0);
          $495 = HEAP32[$494>>2]|0;
          $496 = (($495) + ($492<<2)|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = ((($497)) + 4|0);
          $499 = (($498) + ($491<<2)|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = $1;
          $502 = ((($501)) + 172|0);
          $503 = HEAP32[$502>>2]|0;
          $504 = (($503) + ($500<<2)|0);
          $505 = HEAP32[$504>>2]|0;
          $506 = ((($505)) + 4|0);
          $507 = (($506) + ($490<<3)|0);
          $508 = $507;
         }
         $event = $508;
         $509 = $b;
         $510 = $509&255;
         $511 = $510 & 32;
         $512 = ($511|0)!=(0);
         if ($512) {
          $513 = $2;
          $514 = (_hio_read8($513)|0);
          $n = $514;
          $515 = $514&255;
          if ((($515|0) == 255)) {
           $n = 0;
          } else if ((($515|0) == 254)) {
           $n = -127;
          } else {
           $516 = $n;
           $517 = $516&255;
           $518 = $517 & 240;
           $519 = $518 >> 4;
           $520 = ($519*12)|0;
           $521 = (13 + ($520))|0;
           $522 = $n;
           $523 = $522&255;
           $524 = $523 & 15;
           $525 = (($521) + ($524))|0;
           $526 = $525&255;
           $n = $526;
          }
          $527 = $n;
          $528 = $event;
          HEAP8[$528>>0] = $527;
          $529 = $2;
          $530 = (_hio_read8($529)|0);
          $531 = $event;
          $532 = ((($531)) + 1|0);
          HEAP8[$532>>0] = $530;
          $533 = $pat_len;
          $534 = (($533) - 2)|0;
          $pat_len = $534;
         }
         $535 = $b;
         $536 = $535&255;
         $537 = $536 & 64;
         $538 = ($537|0)!=(0);
         if ($538) {
          $539 = $2;
          $540 = (_hio_read8($539)|0);
          $541 = $540&255;
          $542 = (($541) + 1)|0;
          $543 = $542&255;
          $544 = $event;
          $545 = ((($544)) + 2|0);
          HEAP8[$545>>0] = $543;
          $546 = $pat_len;
          $547 = (($546) + -1)|0;
          $pat_len = $547;
         }
         $548 = $b;
         $549 = $548&255;
         $550 = $549 & 128;
         $551 = ($550|0)!=(0);
         if (!($551)) {
          continue;
         }
         $552 = $2;
         $553 = (_hio_read8($552)|0);
         $554 = $event;
         $555 = ((($554)) + 3|0);
         HEAP8[$555>>0] = $553;
         $556 = $2;
         $557 = (_hio_read8($556)|0);
         $558 = $event;
         $559 = ((($558)) + 4|0);
         HEAP8[$559>>0] = $557;
         $560 = $c;
         $561 = $event;
         _xlat_fx($560,$561);
         $562 = $pat_len;
         $563 = (($562) - 2)|0;
         $pat_len = $563;
        }
       }
      } while(0);
      $564 = $i;
      $565 = (($564) + 1)|0;
      $i = $565;
     }
     $566 = (_instrument_init($441)|0);
     $567 = ($566|0)<(0);
     if (!($567)) {
      $i = 0;
      while(1) {
       $568 = $i;
       $569 = $mod;
       $570 = ((($569)) + 140|0);
       $571 = HEAP32[$570>>2]|0;
       $572 = ($568|0)<($571|0);
       if (!($572)) {
        break;
       }
       $573 = $i;
       $574 = $mod;
       $575 = ((($574)) + 176|0);
       $576 = HEAP32[$575>>2]|0;
       $577 = (($576) + (($573*764)|0)|0);
       $xxi = $577;
       $578 = $i;
       $579 = $mod;
       $580 = ((($579)) + 180|0);
       $581 = HEAP32[$580>>2]|0;
       $582 = (($581) + (($578*52)|0)|0);
       $xxs = $582;
       $583 = (_calloc(64,1)|0);
       $584 = $xxi;
       $585 = ((($584)) + 756|0);
       HEAP32[$585>>2] = $583;
       $586 = $xxi;
       $587 = ((($586)) + 756|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = ($588|0)==(0|0);
       if ($589) {
        break L102;
       }
       $590 = $xxi;
       $591 = ((($590)) + 756|0);
       $592 = HEAP32[$591>>2]|0;
       $sub = $592;
       $593 = $2;
       $594 = $3;
       $595 = $i;
       $596 = $pp_ins;
       $597 = (($596) + ($595<<1)|0);
       $598 = HEAP16[$597>>1]|0;
       $599 = $598&65535;
       $600 = $599<<4;
       $601 = (($594) + ($600))|0;
       (_hio_seek($593,$601,0)|0);
       $602 = $2;
       $603 = (_hio_read8($602)|0);
       $x8 = $603;
       $604 = $sub;
       $605 = ((($604)) + 8|0);
       HEAP32[$605>>2] = 128;
       $606 = $i;
       $607 = $sub;
       $608 = ((($607)) + 40|0);
       HEAP32[$608>>2] = $606;
       $609 = $x8;
       $610 = $609&255;
       $611 = ($610|0)>=(2);
       if ($611) {
        $612 = $2;
        (_hio_read($sah,12,1,$612)|0);
        $613 = ((($sah)) + 12|0);
        $614 = $2;
        (_hio_read($613,3,1,$614)|0);
        $615 = ((($sah)) + 15|0);
        $616 = $2;
        (_hio_read($615,12,1,$616)|0);
        $617 = $2;
        $618 = (_hio_read8($617)|0);
        $619 = ((($sah)) + 27|0);
        HEAP8[$619>>0] = $618;
        $620 = $2;
        $621 = (_hio_read8($620)|0);
        $622 = ((($sah)) + 28|0);
        HEAP8[$622>>0] = $621;
        $623 = $2;
        (_hio_read16l($623)|0);
        $624 = $2;
        $625 = (_hio_read16l($624)|0);
        $626 = ((($sah)) + 32|0);
        HEAP16[$626>>1] = $625;
        $627 = $2;
        (_hio_read16l($627)|0);
        $628 = ((($sah)) + 36|0);
        $629 = $2;
        (_hio_read($628,12,1,$629)|0);
        $630 = ((($sah)) + 48|0);
        $631 = $2;
        (_hio_read($630,28,1,$631)|0);
        $632 = $2;
        $633 = (_hio_read32b($632)|0);
        $634 = ((($sah)) + 76|0);
        HEAP32[$634>>2] = $633;
        $635 = ((($sah)) + 76|0);
        $636 = HEAP32[$635>>2]|0;
        $637 = ($636|0)!=(1396920905);
        if ($637) {
         break L102;
        }
        $638 = ((($sah)) + 76|0);
        HEAP32[$638>>2] = 0;
        $639 = $mod;
        $640 = $i;
        $641 = ((($sah)) + 48|0);
        (_instrument_name($639,$640,$641,28)|0);
        $642 = $xxi;
        $643 = ((($642)) + 36|0);
        HEAP32[$643>>2] = 1;
        $644 = ((($sah)) + 27|0);
        $645 = HEAP8[$644>>0]|0;
        $646 = $645&255;
        $647 = $sub;
        HEAP32[$647>>2] = $646;
        $648 = ((($sah)) + 32|0);
        $649 = HEAP16[$648>>1]|0;
        $650 = $649&65535;
        $651 = $sub;
        $652 = ((($651)) + 12|0);
        $653 = $sub;
        $654 = ((($653)) + 16|0);
        _c2spd_to_note($650,$652,$654);
        $655 = $sub;
        $656 = ((($655)) + 12|0);
        $657 = HEAP32[$656>>2]|0;
        $658 = (($657) + 12)|0;
        HEAP32[$656>>2] = $658;
        $659 = $1;
        $660 = $2;
        $661 = $xxs;
        $662 = ((($sah)) + 15|0);
        $663 = (_load_sample($659,$660,4096,$661,$662)|0);
        $ret = $663;
        $664 = $ret;
        $665 = ($664|0)<(0);
        if ($665) {
         break L102;
        }
       } else {
        $666 = $2;
        (_hio_read($sih,13,1,$666)|0);
        $667 = $2;
        $668 = (_hio_read16l($667)|0);
        $669 = ((($sih)) + 14|0);
        HEAP16[$669>>1] = $668;
        $670 = $2;
        $671 = (_hio_read32l($670)|0);
        $672 = ((($sih)) + 16|0);
        HEAP32[$672>>2] = $671;
        $673 = $2;
        $674 = (_hio_read32l($673)|0);
        $675 = ((($sih)) + 20|0);
        HEAP32[$675>>2] = $674;
        $676 = $2;
        $677 = (_hio_read32l($676)|0);
        $678 = ((($sih)) + 24|0);
        HEAP32[$678>>2] = $677;
        $679 = $2;
        $680 = (_hio_read8($679)|0);
        $681 = ((($sih)) + 28|0);
        HEAP8[$681>>0] = $680;
        $682 = $2;
        $683 = (_hio_read8($682)|0);
        $684 = ((($sih)) + 29|0);
        HEAP8[$684>>0] = $683;
        $685 = $2;
        $686 = (_hio_read8($685)|0);
        $687 = ((($sih)) + 30|0);
        HEAP8[$687>>0] = $686;
        $688 = $2;
        $689 = (_hio_read8($688)|0);
        $690 = ((($sih)) + 31|0);
        HEAP8[$690>>0] = $689;
        $691 = $2;
        $692 = (_hio_read16l($691)|0);
        $693 = ((($sih)) + 32|0);
        HEAP16[$693>>1] = $692;
        $694 = $2;
        $695 = (_hio_read16l($694)|0);
        $696 = ((($sih)) + 34|0);
        HEAP16[$696>>1] = $695;
        $697 = ((($sih)) + 36|0);
        $698 = $2;
        (_hio_read($697,4,1,$698)|0);
        $699 = $2;
        $700 = (_hio_read16l($699)|0);
        $701 = ((($sih)) + 40|0);
        HEAP16[$701>>1] = $700;
        $702 = $2;
        $703 = (_hio_read16l($702)|0);
        $704 = ((($sih)) + 42|0);
        HEAP16[$704>>1] = $703;
        $705 = $2;
        $706 = (_hio_read32l($705)|0);
        $707 = ((($sih)) + 44|0);
        HEAP32[$707>>2] = $706;
        $708 = ((($sih)) + 48|0);
        $709 = $2;
        (_hio_read($708,28,1,$709)|0);
        $710 = $2;
        $711 = (_hio_read32b($710)|0);
        $712 = ((($sih)) + 76|0);
        HEAP32[$712>>2] = $711;
        $713 = $x8;
        $714 = $713&255;
        $715 = ($714|0)==(1);
        if ($715) {
         $716 = ((($sih)) + 76|0);
         $717 = HEAP32[$716>>2]|0;
         $718 = ($717|0)!=(1396920915);
         if ($718) {
          break L102;
         }
        }
        $719 = $quirk87;
        $720 = ($719|0)!=(0);
        L144: do {
         if ($720) {
          $i5 = 0;
          while(1) {
           $721 = $i5;
           $722 = ($721>>>0)<(4);
           if (!($722)) {
            break;
           }
           $723 = ((($sih)) + 16|0);
           $724 = $i5;
           $725 = (($723) + ($724)|0);
           $726 = HEAP8[$725>>0]|0;
           $727 = $726&255;
           $728 = ($727|0)==(135);
           if ($728) {
            $729 = ((($sih)) + 16|0);
            $730 = $i5;
            $731 = (($729) + ($730)|0);
            HEAP8[$731>>0] = 0;
           }
           $732 = $i5;
           $733 = (($732) + 1)|0;
           $i5 = $733;
          }
          $i6 = 0;
          while(1) {
           $734 = $i6;
           $735 = ($734>>>0)<(4);
           if (!($735)) {
            break;
           }
           $736 = ((($sih)) + 20|0);
           $737 = $i6;
           $738 = (($736) + ($737)|0);
           $739 = HEAP8[$738>>0]|0;
           $740 = $739&255;
           $741 = ($740|0)==(135);
           if ($741) {
            $742 = ((($sih)) + 20|0);
            $743 = $i6;
            $744 = (($742) + ($743)|0);
            HEAP8[$744>>0] = 0;
           }
           $745 = $i6;
           $746 = (($745) + 1)|0;
           $i6 = $746;
          }
          $i7 = 0;
          while(1) {
           $747 = $i7;
           $748 = ($747>>>0)<(4);
           if (!($748)) {
            break;
           }
           $749 = ((($sih)) + 24|0);
           $750 = $i7;
           $751 = (($749) + ($750)|0);
           $752 = HEAP8[$751>>0]|0;
           $753 = $752&255;
           $754 = ($753|0)==(135);
           if ($754) {
            $755 = ((($sih)) + 24|0);
            $756 = $i7;
            $757 = (($755) + ($756)|0);
            HEAP8[$757>>0] = 0;
           }
           $758 = $i7;
           $759 = (($758) + 1)|0;
           $i7 = $759;
          }
          $i8 = 0;
          while(1) {
           $760 = $i8;
           $761 = ($760>>>0)<(1);
           if (!($761)) {
            break L144;
           }
           $762 = ((($sih)) + 31|0);
           $763 = $i8;
           $764 = (($762) + ($763)|0);
           $765 = HEAP8[$764>>0]|0;
           $766 = $765&255;
           $767 = ($766|0)==(135);
           if ($767) {
            $768 = ((($sih)) + 31|0);
            $769 = $i8;
            $770 = (($768) + ($769)|0);
            HEAP8[$770>>0] = 0;
           }
           $771 = $i8;
           $772 = (($771) + 1)|0;
           $i8 = $772;
          }
         }
        } while(0);
        $773 = ((($sih)) + 16|0);
        $774 = HEAP32[$773>>2]|0;
        $775 = $xxs;
        $776 = ((($775)) + 32|0);
        HEAP32[$776>>2] = $774;
        $777 = ((($sih)) + 16|0);
        $778 = HEAP32[$777>>2]|0;
        $779 = ($778>>>0)>(0);
        $780 = $779 ? 1 : 0;
        $781 = $xxi;
        $782 = ((($781)) + 36|0);
        HEAP32[$782>>2] = $780;
        $783 = ((($sih)) + 20|0);
        $784 = HEAP32[$783>>2]|0;
        $785 = $xxs;
        $786 = ((($785)) + 36|0);
        HEAP32[$786>>2] = $784;
        $787 = ((($sih)) + 24|0);
        $788 = HEAP32[$787>>2]|0;
        $789 = $xxs;
        $790 = ((($789)) + 40|0);
        HEAP32[$790>>2] = $788;
        $791 = ((($sih)) + 31|0);
        $792 = HEAP8[$791>>0]|0;
        $793 = $792&255;
        $794 = $793 & 1;
        $795 = ($794|0)!=(0);
        $796 = $795 ? 2 : 0;
        $797 = $xxs;
        $798 = ((($797)) + 44|0);
        HEAP32[$798>>2] = $796;
        $799 = ((($sih)) + 31|0);
        $800 = HEAP8[$799>>0]|0;
        $801 = $800&255;
        $802 = $801 & 4;
        $803 = ($802|0)!=(0);
        if ($803) {
         $804 = $xxs;
         $805 = ((($804)) + 44|0);
         $806 = HEAP32[$805>>2]|0;
         $807 = $806 | 1;
         HEAP32[$805>>2] = $807;
        }
        $808 = ((($sih)) + 28|0);
        $809 = HEAP8[$808>>0]|0;
        $810 = $809&255;
        $811 = $sub;
        HEAP32[$811>>2] = $810;
        $812 = ((($sih)) + 76|0);
        HEAP32[$812>>2] = 0;
        $813 = $mod;
        $814 = $i;
        $815 = ((($sih)) + 48|0);
        (_instrument_name($813,$814,$815,28)|0);
        $816 = ((($sih)) + 32|0);
        $817 = HEAP16[$816>>1]|0;
        $818 = $817&65535;
        $819 = $sub;
        $820 = ((($819)) + 12|0);
        $821 = $sub;
        $822 = ((($821)) + 16|0);
        _c2spd_to_note($818,$820,$822);
        $823 = $2;
        $824 = $3;
        $825 = ((($sih)) + 14|0);
        $826 = HEAP16[$825>>1]|0;
        $827 = $826&65535;
        $828 = $827<<4;
        $829 = (($824) + ($828))|0;
        (_hio_seek($823,$829,0)|0);
        $830 = $1;
        $831 = $2;
        $832 = ((($sfh)) + 42|0);
        $833 = HEAP16[$832>>1]|0;
        $834 = $833&65535;
        $835 = (($834) - 1)|0;
        $836 = $835<<1;
        $837 = $xxs;
        $838 = (_load_sample($830,$831,$836,$837,0)|0);
        $ret = $838;
        $839 = $ret;
        $840 = ($839|0)<(0);
        if ($840) {
         break L102;
        }
       }
       $841 = $i;
       $842 = (($841) + 1)|0;
       $i = $842;
      }
      $843 = $pp_pat;
      _free($843);
      $844 = $pp_ins;
      _free($844);
      $845 = $1;
      $846 = ((($845)) + 6556|0);
      HEAP32[$846>>2] = 23408;
      $847 = $1;
      $848 = ((($847)) + 1280|0);
      $849 = HEAP32[$848>>2]|0;
      $850 = $849 | 293601825;
      HEAP32[$848>>2] = $850;
      $851 = $1;
      $852 = ((($851)) + 1284|0);
      HEAP32[$852>>2] = 2;
      $0 = 0;
      $855 = $0;
      STACKTOP = sp;return ($855|0);
     }
    }
   } while(0);
   $853 = $pp_pat;
   _free($853);
  }
  $854 = $pp_ins;
  _free($854);
 }
 $0 = -1;
 $855 = $0;
 STACKTOP = sp;return ($855|0);
}
function _xlat_fx($c,$e) {
 $c = $c|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $e;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 240;
 $7 = $6 >> 4;
 $8 = $7&255;
 $h = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 15;
 $14 = $13&255;
 $l = $14;
 $15 = $1;
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (2128 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $1;
 $22 = ((($21)) + 3|0);
 HEAP8[$22>>0] = $20;
 $23 = $20&255;
 if ((($23|0) == 254)) {
  $24 = $1;
  $25 = ((($24)) + 3|0);
  HEAP8[$25>>0] = 14;
  $26 = $h;
  $27 = $26&255;
  switch ($27|0) {
  case 2:  {
   $37 = $1;
   $38 = ((($37)) + 4|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 & 15;
   $42 = $41 | 80;
   $43 = $42&255;
   $44 = $1;
   $45 = ((($44)) + 4|0);
   HEAP8[$45>>0] = $43;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $28 = $1;
   $29 = ((($28)) + 4|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 & 15;
   $33 = $32 | 48;
   $34 = $33&255;
   $35 = $1;
   $36 = ((($35)) + 4|0);
   HEAP8[$36>>0] = $34;
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $76 = $1;
   $77 = ((($76)) + 4|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $79 & 15;
   $81 = $80 | 96;
   $82 = $81&255;
   $83 = $1;
   $84 = ((($83)) + 4|0);
   HEAP8[$84>>0] = $82;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $85 = $l;
   $86 = ($85<<24>>24)!=(0);
   if ($86) {
    STACKTOP = sp;return;
   }
   $87 = $1;
   $88 = ((($87)) + 4|0);
   HEAP8[$88>>0] = 0;
   $89 = $1;
   $90 = ((($89)) + 3|0);
   HEAP8[$90>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $55 = $1;
   $56 = ((($55)) + 4|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 & 15;
   $60 = $59 | 112;
   $61 = $60&255;
   $62 = $1;
   $63 = ((($62)) + 4|0);
   HEAP8[$63>>0] = $61;
   STACKTOP = sp;return;
   break;
  }
  case 10: case 9: case 7: case 6: case 5:  {
   $64 = $1;
   $65 = ((($64)) + 4|0);
   HEAP8[$65>>0] = 0;
   $66 = $1;
   $67 = ((($66)) + 3|0);
   HEAP8[$67>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $46 = $1;
   $47 = ((($46)) + 4|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 & 15;
   $51 = $50 | 64;
   $52 = $51&255;
   $53 = $1;
   $54 = ((($53)) + 4|0);
   HEAP8[$54>>0] = $52;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $68 = $1;
   $69 = ((($68)) + 3|0);
   HEAP8[$69>>0] = 8;
   $70 = $l;
   $71 = $70&255;
   $72 = $71 << 4;
   $73 = $72&255;
   $74 = $1;
   $75 = ((($74)) + 4|0);
   HEAP8[$75>>0] = $73;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } else if ((($23|0) == 255)) {
  $91 = $1;
  $92 = ((($91)) + 4|0);
  HEAP8[$92>>0] = 0;
  $93 = $1;
  $94 = ((($93)) + 3|0);
  HEAP8[$94>>0] = 0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _stm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 20)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,8,$7)|0);
 $9 = ($8>>>0)<(8);
 do {
  if ($9) {
   $0 = -1;
  } else {
   $10 = (_memcmp($buf,3976,8)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = (_memcmp($buf,3912,8)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $0 = -1;
     break;
    }
   }
   $14 = $1;
   (_hio_read8($14)|0);
   $15 = $1;
   $16 = (_hio_read8($15)|0);
   $17 = $16&255;
   $18 = ($17|0)!=(2);
   if ($18) {
    $0 = -1;
    break;
   }
   $19 = $1;
   $20 = (_hio_read8($19)|0);
   $21 = $20&255;
   $22 = ($21|0)<(1);
   if ($22) {
    $0 = -1;
    break;
   } else {
    $23 = $1;
    $24 = $3;
    $25 = (($24) + 0)|0;
    (_hio_seek($23,$25,0)|0);
    $26 = $1;
    $27 = $2;
    _read_title($26,$27,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _stm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bmod2stm = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $sfh = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sfh = sp + 20|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $bmod2stm = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,20,1,$7)|0);
 $8 = ((($sfh)) + 20|0);
 $9 = $2;
 (_hio_read($8,8,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($sfh)) + 28|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($sfh)) + 29|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($sfh)) + 30|0);
 HEAP8[$18>>0] = $17;
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = ((($sfh)) + 31|0);
 HEAP8[$21>>0] = $20;
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = ((($sfh)) + 32|0);
 HEAP8[$24>>0] = $23;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = ((($sfh)) + 33|0);
 HEAP8[$27>>0] = $26;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = ((($sfh)) + 34|0);
 HEAP8[$30>>0] = $29;
 $31 = ((($sfh)) + 35|0);
 $32 = $2;
 (_hio_read($31,13,1,$32)|0);
 $i = 0;
 while(1) {
  $33 = $i;
  $34 = ($33|0)<(31);
  if (!($34)) {
   break;
  }
  $35 = $i;
  $36 = ((($sfh)) + 48|0);
  $37 = (($36) + (($35*36)|0)|0);
  $38 = $2;
  (_hio_read($37,12,1,$38)|0);
  $39 = $2;
  $40 = (_hio_read8($39)|0);
  $41 = $i;
  $42 = ((($sfh)) + 48|0);
  $43 = (($42) + (($41*36)|0)|0);
  $44 = ((($43)) + 12|0);
  HEAP8[$44>>0] = $40;
  $45 = $2;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = ((($sfh)) + 48|0);
  $49 = (($48) + (($47*36)|0)|0);
  $50 = ((($49)) + 13|0);
  HEAP8[$50>>0] = $46;
  $51 = $2;
  $52 = (_hio_read16l($51)|0);
  $53 = $i;
  $54 = ((($sfh)) + 48|0);
  $55 = (($54) + (($53*36)|0)|0);
  $56 = ((($55)) + 14|0);
  HEAP16[$56>>1] = $52;
  $57 = $2;
  $58 = (_hio_read16l($57)|0);
  $59 = $i;
  $60 = ((($sfh)) + 48|0);
  $61 = (($60) + (($59*36)|0)|0);
  $62 = ((($61)) + 16|0);
  HEAP16[$62>>1] = $58;
  $63 = $2;
  $64 = (_hio_read16l($63)|0);
  $65 = $i;
  $66 = ((($sfh)) + 48|0);
  $67 = (($66) + (($65*36)|0)|0);
  $68 = ((($67)) + 18|0);
  HEAP16[$68>>1] = $64;
  $69 = $2;
  $70 = (_hio_read16l($69)|0);
  $71 = $i;
  $72 = ((($sfh)) + 48|0);
  $73 = (($72) + (($71*36)|0)|0);
  $74 = ((($73)) + 20|0);
  HEAP16[$74>>1] = $70;
  $75 = $2;
  $76 = (_hio_read8($75)|0);
  $77 = $i;
  $78 = ((($sfh)) + 48|0);
  $79 = (($78) + (($77*36)|0)|0);
  $80 = ((($79)) + 22|0);
  HEAP8[$80>>0] = $76;
  $81 = $2;
  $82 = (_hio_read8($81)|0);
  $83 = $i;
  $84 = ((($sfh)) + 48|0);
  $85 = (($84) + (($83*36)|0)|0);
  $86 = ((($85)) + 23|0);
  HEAP8[$86>>0] = $82;
  $87 = $2;
  $88 = (_hio_read16l($87)|0);
  $89 = $i;
  $90 = ((($sfh)) + 48|0);
  $91 = (($90) + (($89*36)|0)|0);
  $92 = ((($91)) + 24|0);
  HEAP16[$92>>1] = $88;
  $93 = $2;
  $94 = (_hio_read32l($93)|0);
  $95 = $i;
  $96 = ((($sfh)) + 48|0);
  $97 = (($96) + (($95*36)|0)|0);
  $98 = ((($97)) + 28|0);
  HEAP32[$98>>2] = $94;
  $99 = $2;
  $100 = (_hio_read16l($99)|0);
  $101 = $i;
  $102 = ((($sfh)) + 48|0);
  $103 = (($102) + (($101*36)|0)|0);
  $104 = ((($103)) + 32|0);
  HEAP16[$104>>1] = $100;
  $105 = $i;
  $106 = (($105) + 1)|0;
  $i = $106;
 }
 $107 = ((($sfh)) + 20|0);
 $108 = (_strncmp($107,3912,8)|0);
 $109 = ($108|0)!=(0);
 if (!($109)) {
  $bmod2stm = 1;
 }
 $110 = ((($sfh)) + 33|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = $mod;
 $114 = ((($113)) + 128|0);
 HEAP32[$114>>2] = $112;
 $115 = $mod;
 $116 = ((($115)) + 128|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $mod;
 $119 = ((($118)) + 136|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = Math_imul($117, $120)|0;
 $122 = $mod;
 $123 = ((($122)) + 132|0);
 HEAP32[$123>>2] = $121;
 $124 = ((($sfh)) + 32|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = $125&255;
 $127 = $126 & 240;
 $128 = $127 >> 4;
 $129 = $mod;
 $130 = ((($129)) + 148|0);
 HEAP32[$130>>2] = $128;
 $131 = $mod;
 $132 = ((($131)) + 140|0);
 HEAP32[$132>>2] = 31;
 $133 = $mod;
 $134 = ((($133)) + 140|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $mod;
 $137 = ((($136)) + 144|0);
 HEAP32[$137>>2] = $135;
 $138 = $1;
 $139 = ((($138)) + 1264|0);
 HEAP32[$139>>2] = 8363;
 $140 = $mod;
 (_copy_adjust($140,$sfh,20)|0);
 $141 = $bmod2stm;
 $142 = ($141|0)!=(0);
 $143 = $mod;
 $144 = ((($143)) + 64|0);
 if ($142) {
  (_snprintf($144,64,2200,$vararg_buffer)|0);
 } else {
  $145 = ((($sfh)) + 30|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = ((($sfh)) + 31|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  HEAP32[$vararg_buffer1>>2] = $147;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $150;
  (_snprintf($144,64,2216,$vararg_buffer1)|0);
 }
 $151 = $mod;
 $152 = (_instrument_init($151)|0);
 $153 = ($152|0)<(0);
 if ($153) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 140|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($154|0)<($157|0);
  $159 = $mod;
  if (!($158)) {
   break;
  }
  $160 = $i;
  $161 = (_subinstrument_alloc($159,$160,1)|0);
  $162 = ($161|0)<(0);
  if ($162) {
   label = 14;
   break;
  }
  $163 = $i;
  $164 = ((($sfh)) + 48|0);
  $165 = (($164) + (($163*36)|0)|0);
  $166 = ((($165)) + 16|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $167&65535;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 32|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = ((($sfh)) + 48|0);
  $177 = (($176) + (($175*36)|0)|0);
  $178 = ((($177)) + 18|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 180|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*52)|0)|0);
  $186 = ((($185)) + 36|0);
  HEAP32[$186>>2] = $180;
  $187 = $i;
  $188 = ((($sfh)) + 48|0);
  $189 = (($188) + (($187*36)|0)|0);
  $190 = ((($189)) + 20|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = $i;
  $194 = $mod;
  $195 = ((($194)) + 180|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($196) + (($193*52)|0)|0);
  $198 = ((($197)) + 40|0);
  HEAP32[$198>>2] = $192;
  $199 = $i;
  $200 = $mod;
  $201 = ((($200)) + 180|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + (($199*52)|0)|0);
  $204 = ((($203)) + 40|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($205|0)==(65535);
  if ($206) {
   $207 = $i;
   $208 = $mod;
   $209 = ((($208)) + 180|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + (($207*52)|0)|0);
   $212 = ((($211)) + 40|0);
   HEAP32[$212>>2] = 0;
  }
  $213 = $i;
  $214 = $mod;
  $215 = ((($214)) + 180|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + (($213*52)|0)|0);
  $218 = ((($217)) + 40|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = ($219|0)>(0);
  $221 = $220 ? 2 : 0;
  $222 = $i;
  $223 = $mod;
  $224 = ((($223)) + 180|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225) + (($222*52)|0)|0);
  $227 = ((($226)) + 44|0);
  HEAP32[$227>>2] = $221;
  $228 = $i;
  $229 = ((($sfh)) + 48|0);
  $230 = (($229) + (($228*36)|0)|0);
  $231 = ((($230)) + 22|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = $i;
  $235 = $mod;
  $236 = ((($235)) + 176|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + (($234*764)|0)|0);
  $239 = ((($238)) + 756|0);
  $240 = HEAP32[$239>>2]|0;
  HEAP32[$240>>2] = $233;
  $241 = $i;
  $242 = $mod;
  $243 = ((($242)) + 176|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($244) + (($241*764)|0)|0);
  $246 = ((($245)) + 756|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 8|0);
  HEAP32[$248>>2] = 128;
  $249 = $i;
  $250 = $i;
  $251 = $mod;
  $252 = ((($251)) + 176|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + (($250*764)|0)|0);
  $255 = ((($254)) + 756|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ((($256)) + 40|0);
  HEAP32[$257>>2] = $249;
  $258 = $i;
  $259 = $mod;
  $260 = ((($259)) + 180|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (($261) + (($258*52)|0)|0);
  $263 = ((($262)) + 32|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = ($264|0)>(0);
  if ($265) {
   $266 = $i;
   $267 = $mod;
   $268 = ((($267)) + 176|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (($269) + (($266*764)|0)|0);
   $271 = ((($270)) + 36|0);
   HEAP32[$271>>2] = 1;
  }
  $272 = $mod;
  $273 = $i;
  $274 = $i;
  $275 = ((($sfh)) + 48|0);
  $276 = (($275) + (($274*36)|0)|0);
  (_instrument_name($272,$273,$276,12)|0);
  $277 = $i;
  $278 = ((($sfh)) + 48|0);
  $279 = (($278) + (($277*36)|0)|0);
  $280 = ((($279)) + 24|0);
  $281 = HEAP16[$280>>1]|0;
  $282 = $281&65535;
  $283 = ($282*8363)|0;
  $284 = (($283|0) / 8448)&-1;
  $285 = $284&65535;
  $286 = $i;
  $287 = ((($sfh)) + 48|0);
  $288 = (($287) + (($286*36)|0)|0);
  $289 = ((($288)) + 24|0);
  HEAP16[$289>>1] = $285;
  $290 = $i;
  $291 = ((($sfh)) + 48|0);
  $292 = (($291) + (($290*36)|0)|0);
  $293 = ((($292)) + 24|0);
  $294 = HEAP16[$293>>1]|0;
  $295 = $294&65535;
  $296 = $i;
  $297 = $mod;
  $298 = ((($297)) + 176|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($299) + (($296*764)|0)|0);
  $301 = ((($300)) + 756|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = ((($302)) + 12|0);
  $304 = $i;
  $305 = $mod;
  $306 = ((($305)) + 176|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($307) + (($304*764)|0)|0);
  $309 = ((($308)) + 756|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = ((($310)) + 16|0);
  _c2spd_to_note($295,$303,$311);
  $312 = $i;
  $313 = (($312) + 1)|0;
  $i = $313;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $314 = ((($159)) + 952|0);
 $315 = $2;
 (_hio_read($314,1,128,$315)|0);
 $i = 0;
 while(1) {
  $316 = $i;
  $317 = ($316|0)<(128);
  if (!($317)) {
   break;
  }
  $318 = $i;
  $319 = $mod;
  $320 = ((($319)) + 952|0);
  $321 = (($320) + ($318)|0);
  $322 = HEAP8[$321>>0]|0;
  $323 = $322&255;
  $324 = $mod;
  $325 = ((($324)) + 128|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($323|0)>=($326|0);
  if ($327) {
   break;
  }
  $328 = $i;
  $329 = (($328) + 1)|0;
  $i = $329;
 }
 $330 = $i;
 $331 = $mod;
 $332 = ((($331)) + 156|0);
 HEAP32[$332>>2] = $330;
 $333 = $mod;
 $334 = (_pattern_init($333)|0);
 $335 = ($334|0)<(0);
 if ($335) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $336 = $i;
  $337 = $mod;
  $338 = ((($337)) + 128|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = ($336|0)<($339|0);
  if (!($340)) {
   break;
  }
  $341 = $mod;
  $342 = $i;
  $343 = (_pattern_tracks_alloc($341,$342,64)|0);
  $344 = ($343|0)<(0);
  if ($344) {
   label = 29;
   break;
  }
  $j = 0;
  while(1) {
   $345 = $j;
   $346 = $mod;
   $347 = ((($346)) + 136|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $348<<6;
   $350 = ($345|0)<($349|0);
   if (!($350)) {
    break;
   }
   $351 = $j;
   $352 = $mod;
   $353 = ((($352)) + 136|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($351|0) / ($354|0))&-1;
   $356 = $j;
   $357 = $mod;
   $358 = ((($357)) + 136|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = (($356|0) % ($359|0))&-1;
   $361 = $i;
   $362 = $1;
   $363 = ((($362)) + 168|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($364) + ($361<<2)|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = ((($366)) + 4|0);
   $368 = (($367) + ($360<<2)|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $1;
   $371 = ((($370)) + 172|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (($372) + ($369<<2)|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = ((($374)) + 4|0);
   $376 = (($375) + ($355<<3)|0);
   $event = $376;
   $377 = $2;
   $378 = (_hio_read8($377)|0);
   $b = $378;
   $379 = $event;
   ;HEAP8[$379>>0]=0|0;HEAP8[$379+1>>0]=0|0;HEAP8[$379+2>>0]=0|0;HEAP8[$379+3>>0]=0|0;HEAP8[$379+4>>0]=0|0;HEAP8[$379+5>>0]=0|0;HEAP8[$379+6>>0]=0|0;HEAP8[$379+7>>0]=0|0;
   $380 = $b;
   $381 = $380&255;
   if ((($381|0) == 255)) {
    $b = 0;
    label = 34;
   } else if (!((($381|0) == 253) | (($381|0) == 252) | (($381|0) == 251))) {
    label = 34;
   }
   do {
    if ((label|0) == 34) {
     label = 0;
     $382 = $b;
     $383 = $382&255;
     $384 = ($383|0)!=(0);
     if ($384) {
      $385 = $b;
      $386 = $385&255;
      $387 = $386 & 15;
      $388 = (13 + ($387))|0;
      $389 = $b;
      $390 = $389&255;
      $391 = $390 & 240;
      $392 = $391 >> 4;
      $393 = (2 + ($392))|0;
      $394 = ($393*12)|0;
      $395 = (($388) + ($394))|0;
      $397 = $395;
     } else {
      $397 = 0;
     }
     $396 = $397&255;
     $398 = $event;
     HEAP8[$398>>0] = $396;
     $399 = $2;
     $400 = (_hio_read8($399)|0);
     $b = $400;
     $401 = $b;
     $402 = $401&255;
     $403 = $402 & 7;
     $404 = $403&255;
     $405 = $event;
     $406 = ((($405)) + 2|0);
     HEAP8[$406>>0] = $404;
     $407 = $b;
     $408 = $407&255;
     $409 = $408 & 248;
     $410 = $409 >> 3;
     $411 = $410&255;
     $412 = $event;
     $413 = ((($412)) + 1|0);
     HEAP8[$413>>0] = $411;
     $414 = $2;
     $415 = (_hio_read8($414)|0);
     $b = $415;
     $416 = $b;
     $417 = $416&255;
     $418 = $417 & 240;
     $419 = $418 >> 1;
     $420 = $event;
     $421 = ((($420)) + 2|0);
     $422 = HEAP8[$421>>0]|0;
     $423 = $422&255;
     $424 = (($423) + ($419))|0;
     $425 = $424&255;
     HEAP8[$421>>0] = $425;
     $426 = $event;
     $427 = ((($426)) + 2|0);
     $428 = HEAP8[$427>>0]|0;
     $429 = $428&255;
     $430 = ($429|0)>(64);
     $431 = $event;
     $432 = ((($431)) + 2|0);
     if ($430) {
      HEAP8[$432>>0] = 0;
     } else {
      $433 = HEAP8[$432>>0]|0;
      $434 = (($433) + 1)<<24>>24;
      HEAP8[$432>>0] = $434;
     }
     $435 = $b;
     $436 = $435&255;
     $437 = $436 & 15;
     $438 = (2248 + ($437)|0);
     $439 = HEAP8[$438>>0]|0;
     $440 = $event;
     $441 = ((($440)) + 3|0);
     HEAP8[$441>>0] = $439;
     $442 = $2;
     $443 = (_hio_read8($442)|0);
     $444 = $event;
     $445 = ((($444)) + 4|0);
     HEAP8[$445>>0] = $443;
     $446 = $event;
     $447 = ((($446)) + 3|0);
     $448 = HEAP8[$447>>0]|0;
     $449 = $448&255;
     if ((($449|0) == 15)) {
      $450 = $event;
      $451 = ((($450)) + 4|0);
      $452 = HEAP8[$451>>0]|0;
      $453 = $452&255;
      $454 = $453 & 240;
      $455 = $454 >> 4;
      $456 = $455&255;
      $457 = $event;
      $458 = ((($457)) + 4|0);
      HEAP8[$458>>0] = $456;
      break;
     } else if ((($449|0) == 255)) {
      $459 = $event;
      $460 = ((($459)) + 3|0);
      HEAP8[$460>>0] = 0;
      $461 = $event;
      $462 = ((($461)) + 4|0);
      HEAP8[$462>>0] = 0;
      break;
     } else {
      break;
     }
    }
   } while(0);
   $463 = $j;
   $464 = (($463) + 1)|0;
   $j = $464;
  }
  $465 = $i;
  $466 = (($465) + 1)|0;
  $i = $466;
 }
 if ((label|0) == 29) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $467 = $i;
  $468 = $mod;
  $469 = ((($468)) + 140|0);
  $470 = HEAP32[$469>>2]|0;
  $471 = ($467|0)<($470|0);
  if (!($471)) {
   label = 51;
   break;
  }
  $472 = $i;
  $473 = $mod;
  $474 = ((($473)) + 180|0);
  $475 = HEAP32[$474>>2]|0;
  $476 = (($475) + (($472*52)|0)|0);
  $477 = ((($476)) + 32|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = ($478|0)>(1);
  if ($479) {
   $480 = $1;
   $481 = $2;
   $482 = $i;
   $483 = $mod;
   $484 = ((($483)) + 180|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = (($485) + (($482*52)|0)|0);
   $487 = (_load_sample($480,$481,0,$486,0)|0);
   $488 = ($487|0)<(0);
   if ($488) {
    label = 48;
    break;
   }
  } else {
   $489 = $i;
   $490 = $mod;
   $491 = ((($490)) + 176|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = (($492) + (($489*764)|0)|0);
   $494 = ((($493)) + 36|0);
   HEAP32[$494>>2] = 0;
  }
  $495 = $i;
  $496 = (($495) + 1)|0;
  $i = $496;
 }
 if ((label|0) == 48) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 else if ((label|0) == 51) {
  $497 = $1;
  $498 = ((($497)) + 1280|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = $499 | 293601889;
  HEAP32[$498>>2] = $500;
  $501 = $1;
  $502 = ((($501)) + 1284|0);
  HEAP32[$502>>2] = 2;
  $0 = 0;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 return (0)|0;
}
function _ssn_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read16b($4)|0);
 $id = $5;
 $6 = $id;
 $7 = $6&65535;
 $8 = ($7|0)!=(26982);
 if ($8) {
  $9 = $id;
  $10 = $9&65535;
  $11 = ($10|0)!=(19022);
  if ($11) {
   $0 = -1;
   $22 = $0;
   STACKTOP = sp;return ($22|0);
  }
 }
 $12 = $1;
 (_hio_seek($12,238,1)|0);
 $13 = $1;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $16 = ($15|0)!=(255);
 if ($16) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $17 = $1;
  $18 = $3;
  $19 = (($18) + 2)|0;
  (_hio_seek($17,$19,0)|0);
  $20 = $1;
  $21 = $2;
  _read_title($20,$21,36);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _ssn_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ev = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $sfh = 0, $sih = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sfh = sp + 67|0;
 $sih = sp + 4|0;
 $ev = sp + 64|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,2,1,$7)|0);
 $8 = ((($sfh)) + 2|0);
 $9 = $2;
 (_hio_read($8,108,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($sfh)) + 110|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($sfh)) + 111|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($sfh)) + 112|0);
 HEAP8[$18>>0] = $17;
 $19 = ((($sfh)) + 113|0);
 $20 = $2;
 (_hio_read($19,128,1,$20)|0);
 $21 = ((($sfh)) + 241|0);
 $22 = $2;
 (_hio_read($21,128,1,$22)|0);
 $23 = ((($sfh)) + 369|0);
 $24 = $2;
 (_hio_read($23,128,1,$24)|0);
 $25 = $mod;
 $26 = ((($25)) + 136|0);
 HEAP32[$26>>2] = 8;
 $27 = ((($sfh)) + 110|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $mod;
 $31 = ((($30)) + 140|0);
 HEAP32[$31>>2] = $29;
 $32 = ((($sfh)) + 111|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $mod;
 $36 = ((($35)) + 128|0);
 HEAP32[$36>>2] = $34;
 $37 = $mod;
 $38 = ((($37)) + 136|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $mod;
 $41 = ((($40)) + 128|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = Math_imul($39, $42)|0;
 $44 = $mod;
 $45 = ((($44)) + 132|0);
 HEAP32[$45>>2] = $43;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = ($46|0)<(128);
  if (!($47)) {
   break;
  }
  $48 = $i;
  $49 = ((($sfh)) + 113|0);
  $50 = (($49) + ($48)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ((($sfh)) + 111|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($52|0)>($55|0);
  if ($56) {
   break;
  }
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 $59 = $i;
 $60 = $mod;
 $61 = ((($60)) + 156|0);
 HEAP32[$61>>2] = $59;
 $62 = $mod;
 $63 = ((($62)) + 952|0);
 $64 = ((($sfh)) + 113|0);
 $65 = $mod;
 $66 = ((($65)) + 156|0);
 $67 = HEAP32[$66>>2]|0;
 _memcpy(($63|0),($64|0),($67|0))|0;
 $68 = $mod;
 $69 = ((($68)) + 148|0);
 HEAP32[$69>>2] = 6;
 $70 = $mod;
 $71 = ((($70)) + 152|0);
 HEAP32[$71>>2] = 76;
 $72 = $mod;
 $73 = ((($72)) + 140|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $mod;
 $76 = ((($75)) + 144|0);
 HEAP32[$76>>2] = $74;
 $77 = $1;
 $78 = ((($77)) + 1280|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 | 4096;
 HEAP32[$78>>2] = $80;
 $81 = $mod;
 $82 = ((($sfh)) + 2|0);
 (_copy_adjust($81,$82,36)|0);
 $83 = $1;
 $84 = (_strncmp($sfh,2296,2)|0);
 $85 = ($84|0)!=(0);
 $86 = $85 ? 2304 : 2280;
 _set_type($83,$86,$vararg_buffer);
 $87 = (_malloc(109)|0);
 $88 = $1;
 $89 = ((($88)) + 1220|0);
 HEAP32[$89>>2] = $87;
 $90 = $1;
 $91 = ((($90)) + 1220|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($sfh)) + 2|0);
 dest=$92; src=$93; stop=dest+108|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $94 = $1;
 $95 = ((($94)) + 1220|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($96)) + 108|0);
 HEAP8[$97>>0] = 0;
 $98 = $mod;
 $99 = (_instrument_init($98)|0);
 $100 = ($99|0)<(0);
 if ($100) {
  $0 = -1;
  $461 = $0;
  STACKTOP = sp;return ($461|0);
 }
 $i = 0;
 while(1) {
  $101 = $i;
  $102 = $mod;
  $103 = ((($102)) + 140|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($101|0)<($104|0);
  $106 = $mod;
  if (!($105)) {
   break;
  }
  $107 = $i;
  $108 = (_subinstrument_alloc($106,$107,1)|0);
  $109 = ($108|0)<(0);
  if ($109) {
   label = 10;
   break;
  }
  $110 = $2;
  (_hio_read($sih,13,1,$110)|0);
  $111 = $2;
  $112 = (_hio_read32l($111)|0);
  $113 = ((($sih)) + 16|0);
  HEAP32[$113>>2] = $112;
  $114 = $2;
  $115 = (_hio_read32l($114)|0);
  $116 = ((($sih)) + 20|0);
  HEAP32[$116>>2] = $115;
  $117 = $2;
  $118 = (_hio_read32l($117)|0);
  $119 = ((($sih)) + 24|0);
  HEAP32[$119>>2] = $118;
  $120 = ((($sih)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $i;
  $123 = $mod;
  $124 = ((($123)) + 180|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + (($122*52)|0)|0);
  $127 = ((($126)) + 32|0);
  HEAP32[$127>>2] = $121;
  $128 = ((($sih)) + 20|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $i;
  $131 = $mod;
  $132 = ((($131)) + 180|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($130*52)|0)|0);
  $135 = ((($134)) + 36|0);
  HEAP32[$135>>2] = $129;
  $136 = ((($sih)) + 24|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137>>>0)>=(1048575);
  $139 = ((($sih)) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $138 ? 0 : $140;
  $142 = $i;
  $143 = $mod;
  $144 = ((($143)) + 180|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + (($142*52)|0)|0);
  $147 = ((($146)) + 40|0);
  HEAP32[$147>>2] = $141;
  $148 = $i;
  $149 = $mod;
  $150 = ((($149)) + 180|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + (($148*52)|0)|0);
  $153 = ((($152)) + 40|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)!=(0);
  $156 = $155 ? 2 : 0;
  $157 = $i;
  $158 = $mod;
  $159 = ((($158)) + 180|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + (($157*52)|0)|0);
  $162 = ((($161)) + 44|0);
  HEAP32[$162>>2] = $156;
  $163 = $i;
  $164 = $mod;
  $165 = ((($164)) + 176|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + (($163*764)|0)|0);
  $168 = ((($167)) + 756|0);
  $169 = HEAP32[$168>>2]|0;
  HEAP32[$169>>2] = 64;
  $170 = $i;
  $171 = $mod;
  $172 = ((($171)) + 176|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + (($170*764)|0)|0);
  $175 = ((($174)) + 756|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ((($176)) + 8|0);
  HEAP32[$177>>2] = 128;
  $178 = $i;
  $179 = $i;
  $180 = $mod;
  $181 = ((($180)) + 176|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($182) + (($179*764)|0)|0);
  $184 = ((($183)) + 756|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ((($185)) + 40|0);
  HEAP32[$186>>2] = $178;
  $187 = $i;
  $188 = $mod;
  $189 = ((($188)) + 180|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + (($187*52)|0)|0);
  $192 = ((($191)) + 32|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)>(0);
  if ($194) {
   $195 = $i;
   $196 = $mod;
   $197 = ((($196)) + 176|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + (($195*764)|0)|0);
   $200 = ((($199)) + 36|0);
   HEAP32[$200>>2] = 1;
  }
  $201 = $mod;
  $202 = $i;
  (_instrument_name($201,$202,$sih,13)|0);
  $203 = $i;
  $204 = (($203) + 1)|0;
  $i = $204;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $461 = $0;
  STACKTOP = sp;return ($461|0);
 }
 $205 = (_pattern_init($106)|0);
 $206 = ($205|0)<(0);
 if ($206) {
  $0 = -1;
  $461 = $0;
  STACKTOP = sp;return ($461|0);
 }
 $i = 0;
 while(1) {
  $207 = $i;
  $208 = $mod;
  $209 = ((($208)) + 128|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ($207|0)<($210|0);
  if (!($211)) {
   break;
  }
  $212 = $mod;
  $213 = $i;
  $214 = (_pattern_tracks_alloc($212,$213,64)|0);
  $215 = ($214|0)<(0);
  if ($215) {
   label = 19;
   break;
  }
  $216 = $i;
  $217 = $1;
  $218 = ((($217)) + 168|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + ($216<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = ((($221)) + 4|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $1;
  $225 = ((($224)) + 172|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + ($223<<2)|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = ((($228)) + 4|0);
  $230 = ((($229)) + 5|0);
  HEAP8[$230>>0] = 126;
  $231 = $i;
  $232 = ((($sfh)) + 241|0);
  $233 = (($232) + ($231)|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = $i;
  $236 = $1;
  $237 = ((($236)) + 168|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + ($235<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 4|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = $1;
  $244 = ((($243)) + 172|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($245) + ($242<<2)|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 4|0);
  $249 = ((($248)) + 6|0);
  HEAP8[$249>>0] = $234;
  $250 = $i;
  $251 = ((($sfh)) + 369|0);
  $252 = (($251) + ($250)|0);
  $253 = HEAP8[$252>>0]|0;
  $254 = $253&255;
  $255 = $i;
  $256 = $1;
  $257 = ((($256)) + 168|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (($258) + ($255<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = ((($260)) + 4|0);
  $262 = ((($261)) + 4|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = $1;
  $265 = ((($264)) + 172|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($266) + ($263<<2)|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = ((($268)) + 4|0);
  $270 = (($269) + ($254<<3)|0);
  $271 = ((($270)) + 5|0);
  HEAP8[$271>>0] = 13;
  $272 = $i;
  $273 = ((($sfh)) + 369|0);
  $274 = (($273) + ($272)|0);
  $275 = HEAP8[$274>>0]|0;
  $276 = $275&255;
  $277 = $i;
  $278 = $1;
  $279 = ((($278)) + 168|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = (($280) + ($277<<2)|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = ((($282)) + 4|0);
  $284 = ((($283)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $1;
  $287 = ((($286)) + 172|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = (($288) + ($285<<2)|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = ((($290)) + 4|0);
  $292 = (($291) + ($276<<3)|0);
  $293 = ((($292)) + 6|0);
  HEAP8[$293>>0] = 0;
  $j = 0;
  while(1) {
   $294 = $j;
   $295 = ($294|0)<(512);
   if (!($295)) {
    break;
   }
   $296 = $j;
   $297 = (($296|0) / 8)&-1;
   $298 = $j;
   $299 = (($298|0) % 8)&-1;
   $300 = $i;
   $301 = $1;
   $302 = ((($301)) + 168|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($300<<2)|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($305)) + 4|0);
   $307 = (($306) + ($299<<2)|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $1;
   $310 = ((($309)) + 172|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = (($311) + ($308<<2)|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = ((($313)) + 4|0);
   $315 = (($314) + ($297<<3)|0);
   $event = $315;
   $316 = $2;
   (_hio_read($ev,1,3,$316)|0);
   $317 = HEAP8[$ev>>0]|0;
   $318 = $317&255;
   $319 = $318 & 254;
   $320 = ($319|0)!=(254);
   if ($320) {
    $321 = HEAP8[$ev>>0]|0;
    $322 = $321&255;
    $323 = $322 >> 2;
    $324 = (37 + ($323))|0;
    $325 = $324&255;
    $326 = $event;
    HEAP8[$326>>0] = $325;
    $327 = ((($ev)) + 1|0);
    $328 = HEAP8[$327>>0]|0;
    $329 = $328&255;
    $330 = $329 & 240;
    $331 = $330 >> 4;
    $332 = (1 + ($331))|0;
    $333 = HEAP8[$ev>>0]|0;
    $334 = $333&255;
    $335 = $334 & 3;
    $336 = $335 << 4;
    $337 = (($332) + ($336))|0;
    $338 = $337&255;
    $339 = $event;
    $340 = ((($339)) + 1|0);
    HEAP8[$340>>0] = $338;
   }
   $341 = HEAP8[$ev>>0]|0;
   $342 = $341&255;
   $343 = ($342|0)!=(255);
   if ($343) {
    $344 = ((($ev)) + 1|0);
    $345 = HEAP8[$344>>0]|0;
    $346 = $345&255;
    $347 = $346 & 15;
    $348 = $347 << 2;
    $349 = (($348) + 1)|0;
    $350 = $349&255;
    $351 = $event;
    $352 = ((($351)) + 2|0);
    HEAP8[$352>>0] = $350;
   }
   $353 = ((($ev)) + 2|0);
   $354 = HEAP8[$353>>0]|0;
   $355 = $354&255;
   $356 = ($355|0)!=(255);
   L38: do {
    if ($356) {
     $357 = ((($ev)) + 2|0);
     $358 = HEAP8[$357>>0]|0;
     $359 = $358&255;
     $360 = $359 & 240;
     $361 = $360 >> 4;
     $362 = ($361|0)>(5);
     if (!($362)) {
      $363 = ((($ev)) + 2|0);
      $364 = HEAP8[$363>>0]|0;
      $365 = $364&255;
      $366 = ($365|0)<(5);
      $367 = $366&1;
      $368 = $367 & 240;
      $369 = $368 >> 4;
      $370 = ($369|0)!=(0);
      if ($370) {
       $371 = $event;
       $372 = ((($371)) + 1|0);
       $373 = HEAP8[$372>>0]|0;
       $374 = ($373<<24>>24)!=(0);
       if (!($374)) {
        break;
       }
      }
      $375 = ((($ev)) + 2|0);
      $376 = HEAP8[$375>>0]|0;
      $377 = $376&255;
      $378 = $377 & 240;
      $379 = $378 >> 4;
      $380 = (2320 + ($379)|0);
      $381 = HEAP8[$380>>0]|0;
      $382 = $event;
      $383 = ((($382)) + 3|0);
      HEAP8[$383>>0] = $381;
      $384 = $event;
      $385 = ((($384)) + 3|0);
      $386 = HEAP8[$385>>0]|0;
      $387 = $386&255;
      switch ($387|0) {
      case 123:  {
       $395 = $event;
       $396 = ((($395)) + 4|0);
       HEAP8[$396>>0] = 1;
       break L38;
       break;
      }
      case 126:  {
       $406 = ((($ev)) + 2|0);
       $407 = HEAP8[$406>>0]|0;
       $408 = $407&255;
       $409 = $408 & 15;
       $410 = $409&255;
       $411 = $event;
       $412 = ((($411)) + 4|0);
       HEAP8[$412>>0] = $410;
       $413 = $event;
       $414 = ((($413)) + 5|0);
       HEAP8[$414>>0] = 127;
       break L38;
       break;
      }
      case 122: case 120: case 121:  {
       $388 = ((($ev)) + 2|0);
       $389 = HEAP8[$388>>0]|0;
       $390 = $389&255;
       $391 = $390 & 15;
       $392 = $391&255;
       $393 = $event;
       $394 = ((($393)) + 4|0);
       HEAP8[$394>>0] = $392;
       break L38;
       break;
      }
      case 166:  {
       $397 = ((($ev)) + 2|0);
       $398 = HEAP8[$397>>0]|0;
       $399 = $398&255;
       $400 = $399 & 15;
       $401 = $400 << 4;
       $402 = (128 + ($401))|0;
       $403 = $402&255;
       $404 = $event;
       $405 = ((($404)) + 4|0);
       HEAP8[$405>>0] = $403;
       break L38;
       break;
      }
      default: {
       break L38;
      }
      }
     }
    }
   } while(0);
   $415 = $j;
   $416 = (($415) + 1)|0;
   $j = $416;
  }
  $417 = $i;
  $418 = (($417) + 1)|0;
  $i = $418;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $461 = $0;
  STACKTOP = sp;return ($461|0);
 }
 $i = 0;
 while(1) {
  $419 = $i;
  $420 = $mod;
  $421 = ((($420)) + 140|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ($419|0)<($422|0);
  if (!($423)) {
   break;
  }
  $424 = $i;
  $425 = $mod;
  $426 = ((($425)) + 180|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = (($427) + (($424*52)|0)|0);
  $429 = ((($428)) + 32|0);
  $430 = HEAP32[$429>>2]|0;
  $431 = ($430|0)<=(2);
  if (!($431)) {
   $432 = $1;
   $433 = $2;
   $434 = $i;
   $435 = $mod;
   $436 = ((($435)) + 180|0);
   $437 = HEAP32[$436>>2]|0;
   $438 = (($437) + (($434*52)|0)|0);
   $439 = (_load_sample($432,$433,2,$438,0)|0);
   $440 = ($439|0)<(0);
   if ($440) {
    label = 41;
    break;
   }
  }
  $441 = $i;
  $442 = (($441) + 1)|0;
  $i = $442;
 }
 if ((label|0) == 41) {
  $0 = -1;
  $461 = $0;
  STACKTOP = sp;return ($461|0);
 }
 $i = 0;
 while(1) {
  $443 = $i;
  $444 = $mod;
  $445 = ((($444)) + 136|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = ($443|0)<($446|0);
  if (!($447)) {
   break;
  }
  $448 = $i;
  $449 = (($448|0) % 2)&-1;
  $450 = ($449*255)|0;
  $451 = $i;
  $452 = $mod;
  $453 = ((($452)) + 184|0);
  $454 = (($453) + (($451*12)|0)|0);
  HEAP32[$454>>2] = $450;
  $455 = $i;
  $456 = (($455) + 1)|0;
  $i = $456;
 }
 $457 = $1;
 $458 = ((($457)) + 1280|0);
 $459 = HEAP32[$458>>2]|0;
 $460 = $459 | 256;
 HEAP32[$458>>2] = $460;
 $0 = 0;
 $461 = $0;
 STACKTOP = sp;return ($461|0);
}
function _far_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1178686206);
 if ($6) {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,40);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _far_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brk = 0, $event = 0, $ffh = 0, $ffh2 = 0, $fih = 0, $fxb = 0, $i = 0, $ins = 0, $j = 0, $mod = 0, $note = 0, $sample_map = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vib = 0, $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ffh = sp + 60|0;
 $ffh2 = sp + 196|0;
 $fih = sp + 8|0;
 $sample_map = sp + 976|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $vib = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = ((($ffh)) + 4|0);
 $9 = $2;
 (_hio_read($8,40,1,$9)|0);
 $10 = ((($ffh)) + 44|0);
 $11 = $2;
 (_hio_read($10,3,1,$11)|0);
 $12 = $2;
 $13 = (_hio_read16l($12)|0);
 $14 = ((($ffh)) + 48|0);
 HEAP16[$14>>1] = $13;
 $15 = $2;
 $16 = (_hio_read8($15)|0);
 $17 = ((($ffh)) + 50|0);
 HEAP8[$17>>0] = $16;
 $18 = ((($ffh)) + 51|0);
 $19 = $2;
 (_hio_read($18,16,1,$19)|0);
 $20 = $2;
 (_hio_seek($20,9,1)|0);
 $21 = $2;
 $22 = (_hio_read8($21)|0);
 $23 = ((($ffh)) + 76|0);
 HEAP8[$23>>0] = $22;
 $24 = ((($ffh)) + 77|0);
 $25 = $2;
 (_hio_read($24,16,1,$25)|0);
 $26 = $2;
 (_hio_read32l($26)|0);
 $27 = $2;
 $28 = (_hio_read16l($27)|0);
 $29 = ((($ffh)) + 98|0);
 HEAP16[$29>>1] = $28;
 $30 = $2;
 $31 = ((($ffh)) + 98|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 (_hio_seek($30,$33,1)|0);
 $34 = $2;
 (_hio_read($ffh2,256,1,$34)|0);
 $35 = $2;
 $36 = (_hio_read8($35)|0);
 $37 = ((($ffh2)) + 256|0);
 HEAP8[$37>>0] = $36;
 $38 = $2;
 $39 = (_hio_read8($38)|0);
 $40 = ((($ffh2)) + 257|0);
 HEAP8[$40>>0] = $39;
 $41 = $2;
 $42 = (_hio_read8($41)|0);
 $43 = ((($ffh2)) + 258|0);
 HEAP8[$43>>0] = $42;
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(256);
  if (!($45)) {
   break;
  }
  $46 = $2;
  $47 = (_hio_read16l($46)|0);
  $48 = $i;
  $49 = ((($ffh2)) + 260|0);
  $50 = (($49) + ($48<<1)|0);
  HEAP16[$50>>1] = $47;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $mod;
 $54 = ((($53)) + 136|0);
 HEAP32[$54>>2] = 16;
 $55 = ((($ffh2)) + 257|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $mod;
 $59 = ((($58)) + 156|0);
 HEAP32[$59>>2] = $57;
 $60 = $mod;
 $61 = ((($60)) + 148|0);
 HEAP32[$61>>2] = 6;
 $62 = ((($ffh)) + 76|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = (480 / ($64|0))&-1;
 $66 = $mod;
 $67 = ((($66)) + 152|0);
 HEAP32[$67>>2] = $65;
 $68 = $mod;
 $69 = ((($68)) + 952|0);
 $70 = $mod;
 $71 = ((($70)) + 156|0);
 $72 = HEAP32[$71>>2]|0;
 _memcpy(($69|0),($ffh2|0),($72|0))|0;
 $i = 0;
 $73 = $mod;
 $74 = ((($73)) + 128|0);
 HEAP32[$74>>2] = 0;
 while(1) {
  $75 = $i;
  $76 = ($75|0)<(256);
  if (!($76)) {
   break;
  }
  $77 = $i;
  $78 = ((($ffh2)) + 260|0);
  $79 = (($78) + ($77<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = ($80<<16>>16)!=(0);
  if ($81) {
   $82 = $i;
   $83 = (($82) + 1)|0;
   $84 = $mod;
   $85 = ((($84)) + 128|0);
   HEAP32[$85>>2] = $83;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $88 = $mod;
 $89 = ((($88)) + 136|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $mod;
 $92 = ((($91)) + 128|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = Math_imul($90, $93)|0;
 $95 = $mod;
 $96 = ((($95)) + 132|0);
 HEAP32[$96>>2] = $94;
 $97 = $mod;
 $98 = ((($ffh)) + 4|0);
 (_strncpy(($97|0),($98|0),40)|0);
 $99 = $1;
 $100 = ((($ffh)) + 50|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 & 240;
 $104 = $103 >> 4;
 $105 = ((($ffh)) + 50|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $107 & 15;
 HEAP32[$vararg_buffer>>2] = $104;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $108;
 _set_type($99,2368,$vararg_buffer);
 $109 = $mod;
 $110 = (_pattern_init($109)|0);
 $111 = ($110|0)<(0);
 if ($111) {
  $0 = -1;
  $566 = $0;
  STACKTOP = sp;return ($566|0);
 }
 $i = 0;
 L16: while(1) {
  $112 = $i;
  $113 = $mod;
  $114 = ((($113)) + 128|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112|0)<($115|0);
  $117 = $mod;
  if (!($116)) {
   label = 44;
   break;
  }
  $118 = $i;
  $119 = (_pattern_alloc($117,$118)|0);
  $120 = ($119|0)<(0);
  if ($120) {
   label = 14;
   break;
  }
  $121 = $i;
  $122 = ((($ffh2)) + 260|0);
  $123 = (($122) + ($121<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = ($124<<16>>16)!=(0);
  L20: do {
   if ($125) {
    $126 = $i;
    $127 = ((($ffh2)) + 260|0);
    $128 = (($127) + ($126<<1)|0);
    $129 = HEAP16[$128>>1]|0;
    $130 = $129&65535;
    $131 = (($130) - 2)|0;
    $132 = (($131|0) / 64)&-1;
    $133 = $i;
    $134 = $mod;
    $135 = ((($134)) + 168|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + ($133<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    HEAP32[$138>>2] = $132;
    $139 = $mod;
    $140 = $i;
    $141 = (_tracks_in_pattern_alloc($139,$140)|0);
    $142 = ($141|0)<(0);
    if ($142) {
     label = 17;
     break L16;
    }
    $143 = $2;
    $144 = (_hio_read8($143)|0);
    $145 = $144&255;
    $146 = (($145) + 1)|0;
    $147 = $146&255;
    $brk = $147;
    $148 = $2;
    (_hio_read8($148)|0);
    $j = 0;
    while(1) {
     $149 = $j;
     $150 = $i;
     $151 = $mod;
     $152 = ((($151)) + 168|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (($153) + ($150<<2)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = HEAP32[$155>>2]|0;
     $157 = $mod;
     $158 = ((($157)) + 136|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = Math_imul($156, $159)|0;
     $161 = ($149|0)<($160|0);
     if (!($161)) {
      break L20;
     }
     $162 = $j;
     $163 = $mod;
     $164 = ((($163)) + 136|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($162|0) / ($165|0))&-1;
     $167 = $j;
     $168 = $mod;
     $169 = ((($168)) + 136|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (($167|0) % ($170|0))&-1;
     $172 = $i;
     $173 = $1;
     $174 = ((($173)) + 168|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + ($172<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ((($177)) + 4|0);
     $179 = (($178) + ($171<<2)|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $1;
     $182 = ((($181)) + 172|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + ($180<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ((($185)) + 4|0);
     $187 = (($186) + ($166<<3)|0);
     $event = $187;
     $188 = $j;
     $189 = $mod;
     $190 = ((($189)) + 136|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($188|0) % ($191|0))&-1;
     $193 = ($192|0)==(0);
     if ($193) {
      $194 = $j;
      $195 = $mod;
      $196 = ((($195)) + 136|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($194|0) / ($197|0))&-1;
      $199 = $brk;
      $200 = $199&255;
      $201 = ($198|0)==($200|0);
      if ($201) {
       $202 = $event;
       $203 = ((($202)) + 5|0);
       HEAP8[$203>>0] = 13;
      }
     }
     $204 = $2;
     $205 = (_hio_read8($204)|0);
     $note = $205;
     $206 = $2;
     $207 = (_hio_read8($206)|0);
     $ins = $207;
     $208 = $2;
     $209 = (_hio_read8($208)|0);
     $vol = $209;
     $210 = $2;
     $211 = (_hio_read8($210)|0);
     $fxb = $211;
     $212 = $note;
     $213 = ($212<<24>>24)!=(0);
     if ($213) {
      $214 = $note;
      $215 = $214&255;
      $216 = (($215) + 48)|0;
      $217 = $216&255;
      $218 = $event;
      HEAP8[$218>>0] = $217;
     }
     $219 = $event;
     $220 = HEAP8[$219>>0]|0;
     $221 = $220&255;
     $222 = ($221|0)!=(0);
     if ($222) {
      label = 27;
     } else {
      $223 = $ins;
      $224 = $223&255;
      $225 = ($224|0)!=(0);
      if ($225) {
       label = 27;
      }
     }
     if ((label|0) == 27) {
      label = 0;
      $226 = $ins;
      $227 = $226&255;
      $228 = (($227) + 1)|0;
      $229 = $228&255;
      $230 = $event;
      $231 = ((($230)) + 1|0);
      HEAP8[$231>>0] = $229;
     }
     $232 = $vol;
     $233 = $232&255;
     $234 = $233 & 15;
     $235 = $234<<4;
     $236 = $vol;
     $237 = $236&255;
     $238 = $237 & 240;
     $239 = $238 >> 4;
     $240 = (($235) + ($239))|0;
     $241 = $240&255;
     $vol = $241;
     $242 = $vol;
     $243 = ($242<<24>>24)!=(0);
     if ($243) {
      $244 = $vol;
      $245 = $244&255;
      $246 = (($245) - 16)|0;
      $247 = $246&255;
      $248 = $event;
      $249 = ((($248)) + 2|0);
      HEAP8[$249>>0] = $247;
     }
     $250 = $fxb;
     $251 = $250&255;
     $252 = $251 & 240;
     $253 = $252 >> 4;
     $254 = (2400 + ($253)|0);
     $255 = HEAP8[$254>>0]|0;
     $256 = $event;
     $257 = ((($256)) + 3|0);
     HEAP8[$257>>0] = $255;
     $258 = $fxb;
     $259 = $258&255;
     $260 = $259 & 15;
     $261 = $260&255;
     $262 = $event;
     $263 = ((($262)) + 4|0);
     HEAP8[$263>>0] = $261;
     $264 = $event;
     $265 = ((($264)) + 3|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $266&255;
     do {
      switch ($267|0) {
      case 254:  {
       $304 = $event;
       $305 = ((($304)) + 4|0);
       $306 = HEAP8[$305>>0]|0;
       $307 = $306&255;
       $308 = $307 & 15;
       $vib = $308;
       $309 = $event;
       $310 = ((($309)) + 4|0);
       HEAP8[$310>>0] = 0;
       $311 = $event;
       $312 = ((($311)) + 3|0);
       HEAP8[$312>>0] = 0;
       break;
      }
      case 15:  {
       $349 = $event;
       $350 = ((($349)) + 4|0);
       $351 = HEAP8[$350>>0]|0;
       $352 = $351&255;
       $353 = (480 / ($352|0))&-1;
       $354 = $353&255;
       $355 = $event;
       $356 = ((($355)) + 4|0);
       HEAP8[$356>>0] = $354;
       break;
      }
      case 123:  {
       $323 = $event;
       $324 = ((($323)) + 4|0);
       $325 = HEAP8[$324>>0]|0;
       $326 = $325&255;
       $327 = $326 << 4;
       $328 = $vib;
       $329 = (($327) + ($328))|0;
       $330 = $329&255;
       $331 = $event;
       $332 = ((($331)) + 4|0);
       HEAP8[$332>>0] = $330;
       break;
      }
      case 255:  {
       $268 = $event;
       $269 = ((($268)) + 4|0);
       HEAP8[$269>>0] = 0;
       $270 = $event;
       $271 = ((($270)) + 3|0);
       HEAP8[$271>>0] = 0;
       break;
      }
      case 252:  {
       $341 = $event;
       $342 = ((($341)) + 3|0);
       HEAP8[$342>>0] = 14;
       $343 = $event;
       $344 = ((($343)) + 4|0);
       $345 = HEAP8[$344>>0]|0;
       $346 = $345&255;
       $347 = $346 | 176;
       $348 = $347&255;
       HEAP8[$344>>0] = $348;
       break;
      }
      case 253:  {
       $333 = $event;
       $334 = ((($333)) + 3|0);
       HEAP8[$334>>0] = 14;
       $335 = $event;
       $336 = ((($335)) + 4|0);
       $337 = HEAP8[$336>>0]|0;
       $338 = $337&255;
       $339 = $338 | 160;
       $340 = $339&255;
       HEAP8[$336>>0] = $340;
       break;
      }
      case 250:  {
       $296 = $event;
       $297 = ((($296)) + 3|0);
       HEAP8[$297>>0] = 14;
       $298 = $event;
       $299 = ((($298)) + 4|0);
       $300 = HEAP8[$299>>0]|0;
       $301 = $300&255;
       $302 = $301 | 208;
       $303 = $302&255;
       HEAP8[$299>>0] = $303;
       break;
      }
      case 249:  {
       $272 = $event;
       $273 = ((($272)) + 3|0);
       HEAP8[$273>>0] = 14;
       $274 = $event;
       $275 = ((($274)) + 4|0);
       $276 = HEAP8[$275>>0]|0;
       $277 = $276&255;
       $278 = $277 | 16;
       $279 = $278&255;
       HEAP8[$275>>0] = $279;
       break;
      }
      case 251:  {
       $288 = $event;
       $289 = ((($288)) + 3|0);
       HEAP8[$289>>0] = 14;
       $290 = $event;
       $291 = ((($290)) + 4|0);
       $292 = HEAP8[$291>>0]|0;
       $293 = $292&255;
       $294 = $293 | 144;
       $295 = $294&255;
       HEAP8[$291>>0] = $295;
       break;
      }
      case 4:  {
       $313 = $event;
       $314 = ((($313)) + 4|0);
       $315 = HEAP8[$314>>0]|0;
       $316 = $315&255;
       $317 = $316 << 4;
       $318 = $vib;
       $319 = (($317) + ($318))|0;
       $320 = $319&255;
       $321 = $event;
       $322 = ((($321)) + 4|0);
       HEAP8[$322>>0] = $320;
       break;
      }
      case 248:  {
       $280 = $event;
       $281 = ((($280)) + 3|0);
       HEAP8[$281>>0] = 14;
       $282 = $event;
       $283 = ((($282)) + 4|0);
       $284 = HEAP8[$283>>0]|0;
       $285 = $284&255;
       $286 = $285 | 32;
       $287 = $286&255;
       HEAP8[$283>>0] = $287;
       break;
      }
      default: {
      }
      }
     } while(0);
     $357 = $j;
     $358 = (($357) + 1)|0;
     $j = $358;
    }
   }
  } while(0);
  $359 = $i;
  $360 = (($359) + 1)|0;
  $i = $360;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $566 = $0;
  STACKTOP = sp;return ($566|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $566 = $0;
  STACKTOP = sp;return ($566|0);
 }
 else if ((label|0) == 44) {
  $361 = ((($117)) + 140|0);
  HEAP32[$361>>2] = -1;
  $362 = $2;
  (_hio_read($sample_map,1,8,$362)|0);
  $i = 0;
  while(1) {
   $363 = $i;
   $364 = ($363|0)<(64);
   if (!($364)) {
    break;
   }
   $365 = $i;
   $366 = (($365|0) / 8)&-1;
   $367 = (($sample_map) + ($366)|0);
   $368 = HEAP8[$367>>0]|0;
   $369 = $368&255;
   $370 = $i;
   $371 = (($370|0) % 8)&-1;
   $372 = 1 << $371;
   $373 = $369 & $372;
   $374 = ($373|0)!=(0);
   if ($374) {
    $375 = $i;
    $376 = $mod;
    $377 = ((($376)) + 140|0);
    HEAP32[$377>>2] = $375;
   }
   $378 = $i;
   $379 = (($378) + 1)|0;
   $i = $379;
  }
  $380 = $mod;
  $381 = ((($380)) + 140|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = (($382) + 1)|0;
  HEAP32[$381>>2] = $383;
  $384 = $mod;
  $385 = ((($384)) + 140|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = $mod;
  $388 = ((($387)) + 144|0);
  HEAP32[$388>>2] = $386;
  $389 = $mod;
  $390 = (_instrument_init($389)|0);
  $391 = ($390|0)<(0);
  if ($391) {
   $0 = -1;
   $566 = $0;
   STACKTOP = sp;return ($566|0);
  }
  $i = 0;
  while(1) {
   $392 = $i;
   $393 = $mod;
   $394 = ((($393)) + 140|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = ($392|0)<($395|0);
   if (!($396)) {
    label = 63;
    break;
   }
   $397 = $i;
   $398 = (($397|0) / 8)&-1;
   $399 = (($sample_map) + ($398)|0);
   $400 = HEAP8[$399>>0]|0;
   $401 = $400&255;
   $402 = $i;
   $403 = (($402|0) % 8)&-1;
   $404 = 1 << $403;
   $405 = $401 & $404;
   $406 = ($405|0)!=(0);
   if ($406) {
    $407 = $mod;
    $408 = $i;
    $409 = (_subinstrument_alloc($407,$408,1)|0);
    $410 = ($409|0)<(0);
    if ($410) {
     label = 55;
     break;
    }
    $411 = $2;
    (_hio_read($fih,32,1,$411)|0);
    $412 = $2;
    $413 = (_hio_read32l($412)|0);
    $414 = ((($fih)) + 32|0);
    HEAP32[$414>>2] = $413;
    $415 = $2;
    $416 = (_hio_read8($415)|0);
    $417 = ((($fih)) + 36|0);
    HEAP8[$417>>0] = $416;
    $418 = $2;
    $419 = (_hio_read8($418)|0);
    $420 = ((($fih)) + 37|0);
    HEAP8[$420>>0] = $419;
    $421 = $2;
    $422 = (_hio_read32l($421)|0);
    $423 = ((($fih)) + 40|0);
    HEAP32[$423>>2] = $422;
    $424 = $2;
    $425 = (_hio_read32l($424)|0);
    $426 = ((($fih)) + 44|0);
    HEAP32[$426>>2] = $425;
    $427 = $2;
    $428 = (_hio_read8($427)|0);
    $429 = ((($fih)) + 48|0);
    HEAP8[$429>>0] = $428;
    $430 = $2;
    $431 = (_hio_read8($430)|0);
    $432 = ((($fih)) + 49|0);
    HEAP8[$432>>0] = $431;
    $433 = ((($fih)) + 32|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = $434 & 65535;
    HEAP32[$433>>2] = $435;
    $436 = ((($fih)) + 40|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = $437 & 65535;
    HEAP32[$436>>2] = $438;
    $439 = ((($fih)) + 44|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = $440 & 65535;
    HEAP32[$439>>2] = $441;
    $442 = ((($fih)) + 32|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = $i;
    $445 = $mod;
    $446 = ((($445)) + 180|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = (($447) + (($444*52)|0)|0);
    $449 = ((($448)) + 32|0);
    HEAP32[$449>>2] = $443;
    $450 = ((($fih)) + 40|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = $i;
    $453 = $mod;
    $454 = ((($453)) + 180|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = (($455) + (($452*52)|0)|0);
    $457 = ((($456)) + 36|0);
    HEAP32[$457>>2] = $451;
    $458 = ((($fih)) + 44|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = $i;
    $461 = $mod;
    $462 = ((($461)) + 180|0);
    $463 = HEAP32[$462>>2]|0;
    $464 = (($463) + (($460*52)|0)|0);
    $465 = ((($464)) + 40|0);
    HEAP32[$465>>2] = $459;
    $466 = $i;
    $467 = $mod;
    $468 = ((($467)) + 180|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = (($469) + (($466*52)|0)|0);
    $471 = ((($470)) + 44|0);
    HEAP32[$471>>2] = 0;
    $472 = $i;
    $473 = $mod;
    $474 = ((($473)) + 180|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = (($475) + (($472*52)|0)|0);
    $477 = ((($476)) + 32|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ($478|0)>(0);
    if ($479) {
     $480 = $i;
     $481 = $mod;
     $482 = ((($481)) + 176|0);
     $483 = HEAP32[$482>>2]|0;
     $484 = (($483) + (($480*764)|0)|0);
     $485 = ((($484)) + 36|0);
     HEAP32[$485>>2] = 1;
    }
    $486 = ((($fih)) + 48|0);
    $487 = HEAP8[$486>>0]|0;
    $488 = $487&255;
    $489 = ($488|0)!=(0);
    if ($489) {
     $490 = $i;
     $491 = $mod;
     $492 = ((($491)) + 180|0);
     $493 = HEAP32[$492>>2]|0;
     $494 = (($493) + (($490*52)|0)|0);
     $495 = ((($494)) + 44|0);
     $496 = HEAP32[$495>>2]|0;
     $497 = $496 | 1;
     HEAP32[$495>>2] = $497;
     $498 = $i;
     $499 = $mod;
     $500 = ((($499)) + 180|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = (($501) + (($498*52)|0)|0);
     $503 = ((($502)) + 32|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = $504 >> 1;
     HEAP32[$503>>2] = $505;
     $506 = $i;
     $507 = $mod;
     $508 = ((($507)) + 180|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = (($509) + (($506*52)|0)|0);
     $511 = ((($510)) + 36|0);
     $512 = HEAP32[$511>>2]|0;
     $513 = $512 >> 1;
     HEAP32[$511>>2] = $513;
     $514 = $i;
     $515 = $mod;
     $516 = ((($515)) + 180|0);
     $517 = HEAP32[$516>>2]|0;
     $518 = (($517) + (($514*52)|0)|0);
     $519 = ((($518)) + 40|0);
     $520 = HEAP32[$519>>2]|0;
     $521 = $520 >> 1;
     HEAP32[$519>>2] = $521;
    }
    $522 = ((($fih)) + 49|0);
    $523 = HEAP8[$522>>0]|0;
    $524 = $523&255;
    $525 = ($524|0)!=(0);
    $526 = $525 ? 2 : 0;
    $527 = $i;
    $528 = $mod;
    $529 = ((($528)) + 180|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = (($530) + (($527*52)|0)|0);
    $532 = ((($531)) + 44|0);
    $533 = HEAP32[$532>>2]|0;
    $534 = $533 | $526;
    HEAP32[$532>>2] = $534;
    $535 = $i;
    $536 = $mod;
    $537 = ((($536)) + 176|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = (($538) + (($535*764)|0)|0);
    $540 = ((($539)) + 756|0);
    $541 = HEAP32[$540>>2]|0;
    HEAP32[$541>>2] = 255;
    $542 = $i;
    $543 = $i;
    $544 = $mod;
    $545 = ((($544)) + 176|0);
    $546 = HEAP32[$545>>2]|0;
    $547 = (($546) + (($543*764)|0)|0);
    $548 = ((($547)) + 756|0);
    $549 = HEAP32[$548>>2]|0;
    $550 = ((($549)) + 40|0);
    HEAP32[$550>>2] = $542;
    $551 = $mod;
    $552 = $i;
    (_instrument_name($551,$552,$fih,32)|0);
    $553 = $1;
    $554 = $2;
    $555 = $i;
    $556 = $mod;
    $557 = ((($556)) + 180|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = (($558) + (($555*52)|0)|0);
    $560 = (_load_sample($553,$554,0,$559,0)|0);
    $561 = ($560|0)<(0);
    if ($561) {
     label = 61;
     break;
    }
   }
   $562 = $i;
   $563 = (($562) + 1)|0;
   $i = $563;
  }
  if ((label|0) == 55) {
   $0 = -1;
   $566 = $0;
   STACKTOP = sp;return ($566|0);
  }
  else if ((label|0) == 61) {
   $0 = -1;
   $566 = $0;
   STACKTOP = sp;return ($566|0);
  }
  else if ((label|0) == 63) {
   $564 = $1;
   $565 = ((($564)) + 1268|0);
   HEAP32[$565>>2] = 255;
   $0 = 0;
   $566 = $0;
   STACKTOP = sp;return ($566|0);
  }
 }
 return (0)|0;
}
function _mtm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,2480,3)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   }
   $9 = ((($buf)) + 3|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)!=(16);
   if ($12) {
    $0 = -1;
    break;
   } else {
    $13 = $1;
    $14 = $2;
    _read_title($13,$14,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _mtm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $mfh = 0, $mih = 0, $mod = 0;
 var $mp = 0, $mt = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mfh = sp + 144|0;
 $mih = sp + 8|0;
 $mt = sp + 216|0;
 $mp = sp + 80|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($mfh,3,1,$7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = ((($mfh)) + 3|0);
 HEAP8[$10>>0] = $9;
 $11 = ((($mfh)) + 4|0);
 $12 = $2;
 (_hio_read($11,20,1,$12)|0);
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($mfh)) + 24|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($mfh)) + 26|0);
 HEAP8[$18>>0] = $17;
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = ((($mfh)) + 27|0);
 HEAP8[$21>>0] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($mfh)) + 28|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = ((($mfh)) + 30|0);
 HEAP8[$27>>0] = $26;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = ((($mfh)) + 31|0);
 HEAP8[$30>>0] = $29;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = ((($mfh)) + 32|0);
 HEAP8[$33>>0] = $32;
 $34 = $2;
 $35 = (_hio_read8($34)|0);
 $36 = ((($mfh)) + 33|0);
 HEAP8[$36>>0] = $35;
 $37 = ((($mfh)) + 34|0);
 $38 = $2;
 (_hio_read($37,32,1,$38)|0);
 $39 = ((($mfh)) + 24|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = (($41) + 1)|0;
 $43 = $mod;
 $44 = ((($43)) + 132|0);
 HEAP32[$44>>2] = $42;
 $45 = ((($mfh)) + 26|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (($47) + 1)|0;
 $49 = $mod;
 $50 = ((($49)) + 128|0);
 HEAP32[$50>>2] = $48;
 $51 = ((($mfh)) + 27|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = (($53) + 1)|0;
 $55 = $mod;
 $56 = ((($55)) + 156|0);
 HEAP32[$56>>2] = $54;
 $57 = ((($mfh)) + 30|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $mod;
 $61 = ((($60)) + 140|0);
 HEAP32[$61>>2] = $59;
 $62 = $mod;
 $63 = ((($62)) + 140|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $mod;
 $66 = ((($65)) + 144|0);
 HEAP32[$66>>2] = $64;
 $67 = ((($mfh)) + 33|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $mod;
 $71 = ((($70)) + 136|0);
 HEAP32[$71>>2] = $69;
 $72 = $mod;
 $73 = ((($72)) + 148|0);
 HEAP32[$73>>2] = 6;
 $74 = $mod;
 $75 = ((($74)) + 152|0);
 HEAP32[$75>>2] = 125;
 $76 = $mod;
 $77 = ((($mfh)) + 4|0);
 (_strncpy(($76|0),($77|0),20)|0);
 $78 = $1;
 $79 = ((($mfh)) + 3|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $81 & 240;
 $83 = $82 >> 4;
 $84 = ((($mfh)) + 3|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $86 & 15;
 HEAP32[$vararg_buffer>>2] = $83;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $87;
 _set_type($78,2448,$vararg_buffer);
 $88 = $mod;
 $89 = (_instrument_init($88)|0);
 $90 = ($89|0)<(0);
 if ($90) {
  $0 = -1;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 $i = 0;
 while(1) {
  $91 = $i;
  $92 = $mod;
  $93 = ((($92)) + 140|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($91|0)<($94|0);
  $96 = $mod;
  if (!($95)) {
   break;
  }
  $97 = $i;
  $98 = (_subinstrument_alloc($96,$97,1)|0);
  $99 = ($98|0)<(0);
  if ($99) {
   label = 6;
   break;
  }
  $100 = $2;
  (_hio_read($mih,22,1,$100)|0);
  $101 = $2;
  $102 = (_hio_read32l($101)|0);
  $103 = ((($mih)) + 24|0);
  HEAP32[$103>>2] = $102;
  $104 = $2;
  $105 = (_hio_read32l($104)|0);
  $106 = ((($mih)) + 28|0);
  HEAP32[$106>>2] = $105;
  $107 = $2;
  $108 = (_hio_read32l($107)|0);
  $109 = ((($mih)) + 32|0);
  HEAP32[$109>>2] = $108;
  $110 = $2;
  $111 = (_hio_read8($110)|0);
  $112 = ((($mih)) + 36|0);
  HEAP8[$112>>0] = $111;
  $113 = $2;
  $114 = (_hio_read8($113)|0);
  $115 = ((($mih)) + 37|0);
  HEAP8[$115>>0] = $114;
  $116 = $2;
  $117 = (_hio_read8($116)|0);
  $118 = ((($mih)) + 38|0);
  HEAP8[$118>>0] = $117;
  $119 = ((($mih)) + 24|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $i;
  $122 = $mod;
  $123 = ((($122)) + 180|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + (($121*52)|0)|0);
  $126 = ((($125)) + 32|0);
  HEAP32[$126>>2] = $120;
  $127 = ((($mih)) + 28|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 180|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + (($129*52)|0)|0);
  $134 = ((($133)) + 36|0);
  HEAP32[$134>>2] = $128;
  $135 = ((($mih)) + 32|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $i;
  $138 = $mod;
  $139 = ((($138)) + 180|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + (($137*52)|0)|0);
  $142 = ((($141)) + 40|0);
  HEAP32[$142>>2] = $136;
  $143 = $i;
  $144 = $mod;
  $145 = ((($144)) + 180|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + (($143*52)|0)|0);
  $148 = ((($147)) + 40|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($149|0)!=(0);
  $151 = $150 ? 2 : 0;
  $152 = $i;
  $153 = $mod;
  $154 = ((($153)) + 180|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($152*52)|0)|0);
  $157 = ((($156)) + 44|0);
  HEAP32[$157>>2] = $151;
  $158 = ((($mfh)) + 31|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = $159&255;
  $161 = $160 & 1;
  $162 = ($161|0)!=(0);
  if ($162) {
   $163 = $i;
   $164 = $mod;
   $165 = ((($164)) + 180|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + (($163*52)|0)|0);
   $168 = ((($167)) + 44|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169 | 1;
   HEAP32[$168>>2] = $170;
   $171 = $i;
   $172 = $mod;
   $173 = ((($172)) + 180|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + (($171*52)|0)|0);
   $176 = ((($175)) + 32|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177 >> 1;
   HEAP32[$176>>2] = $178;
   $179 = $i;
   $180 = $mod;
   $181 = ((($180)) + 180|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = (($182) + (($179*52)|0)|0);
   $184 = ((($183)) + 36|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185 >> 1;
   HEAP32[$184>>2] = $186;
   $187 = $i;
   $188 = $mod;
   $189 = ((($188)) + 180|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (($190) + (($187*52)|0)|0);
   $192 = ((($191)) + 40|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $193 >> 1;
   HEAP32[$192>>2] = $194;
  }
  $195 = ((($mih)) + 37|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = $196&255;
  $198 = $i;
  $199 = $mod;
  $200 = ((($199)) + 176|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + (($198*764)|0)|0);
  $203 = ((($202)) + 756|0);
  $204 = HEAP32[$203>>2]|0;
  HEAP32[$204>>2] = $197;
  $205 = ((($mih)) + 36|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = $206&255;
  $208 = $i;
  $209 = $mod;
  $210 = ((($209)) + 176|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + (($208*764)|0)|0);
  $213 = ((($212)) + 756|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($214)) + 16|0);
  HEAP32[$215>>2] = $207;
  $216 = $i;
  $217 = $mod;
  $218 = ((($217)) + 176|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + (($216*764)|0)|0);
  $221 = ((($220)) + 756|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ((($222)) + 8|0);
  HEAP32[$223>>2] = 128;
  $224 = $i;
  $225 = $i;
  $226 = $mod;
  $227 = ((($226)) + 176|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($228) + (($225*764)|0)|0);
  $230 = ((($229)) + 756|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ((($231)) + 40|0);
  HEAP32[$232>>2] = $224;
  $233 = $mod;
  $234 = $i;
  (_instrument_name($233,$234,$mih,22)|0);
  $235 = $i;
  $236 = $mod;
  $237 = ((($236)) + 180|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + (($235*52)|0)|0);
  $240 = ((($239)) + 32|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ($241|0)>(0);
  if ($242) {
   $243 = $i;
   $244 = $mod;
   $245 = ((($244)) + 176|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($246) + (($243*764)|0)|0);
   $248 = ((($247)) + 36|0);
   HEAP32[$248>>2] = 1;
  }
  $249 = $i;
  $250 = (($249) + 1)|0;
  $i = $250;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 $251 = ((($96)) + 952|0);
 $252 = $2;
 (_hio_read($251,1,128,$252)|0);
 $253 = $mod;
 $254 = (_pattern_init($253)|0);
 $255 = ($254|0)<(0);
 if ($255) {
  $0 = -1;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 $i = 0;
 while(1) {
  $256 = $i;
  $257 = $mod;
  $258 = ((($257)) + 132|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ($256|0)<($259|0);
  if (!($260)) {
   break;
  }
  $261 = $mod;
  $262 = $i;
  $263 = ((($mfh)) + 32|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = (_track_alloc($261,$262,$265)|0);
  $267 = ($266|0)<(0);
  if ($267) {
   label = 17;
   break;
  }
  $268 = $i;
  $269 = ($268|0)==(0);
  L27: do {
   if (!($269)) {
    $270 = $2;
    (_hio_read($mt,3,64,$270)|0);
    $j = 0;
    while(1) {
     $271 = $j;
     $272 = ($271|0)<(64);
     if (!($272)) {
      break L27;
     }
     $273 = $j;
     $274 = ($273*3)|0;
     $275 = (($mt) + ($274)|0);
     $276 = HEAP8[$275>>0]|0;
     $277 = $276&255;
     $278 = $277 >> 2;
     $279 = $278&255;
     $280 = $j;
     $281 = $i;
     $282 = $mod;
     $283 = ((($282)) + 172|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = (($284) + ($281<<2)|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = ((($286)) + 4|0);
     $288 = (($287) + ($280<<3)|0);
     HEAP8[$288>>0] = $279;
     $289 = ($279<<24>>24)!=(0);
     if ($289) {
      $290 = $j;
      $291 = $i;
      $292 = $mod;
      $293 = ((($292)) + 172|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = (($294) + ($291<<2)|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($296)) + 4|0);
      $298 = (($297) + ($290<<3)|0);
      $299 = HEAP8[$298>>0]|0;
      $300 = $299&255;
      $301 = (($300) + 37)|0;
      $302 = $301&255;
      HEAP8[$298>>0] = $302;
     }
     $303 = $j;
     $304 = ($303*3)|0;
     $305 = (($mt) + ($304)|0);
     $306 = HEAP8[$305>>0]|0;
     $307 = $306&255;
     $308 = $307 & 3;
     $309 = $308 << 4;
     $310 = $j;
     $311 = ($310*3)|0;
     $312 = (($311) + 1)|0;
     $313 = (($mt) + ($312)|0);
     $314 = HEAP8[$313>>0]|0;
     $315 = $314&255;
     $316 = $315 & 240;
     $317 = $316 >> 4;
     $318 = (($309) + ($317))|0;
     $319 = $318&255;
     $320 = $j;
     $321 = $i;
     $322 = $mod;
     $323 = ((($322)) + 172|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = (($324) + ($321<<2)|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = ((($326)) + 4|0);
     $328 = (($327) + ($320<<3)|0);
     $329 = ((($328)) + 1|0);
     HEAP8[$329>>0] = $319;
     $330 = $j;
     $331 = ($330*3)|0;
     $332 = (($331) + 1)|0;
     $333 = (($mt) + ($332)|0);
     $334 = HEAP8[$333>>0]|0;
     $335 = $334&255;
     $336 = $335 & 15;
     $337 = $336&255;
     $338 = $j;
     $339 = $i;
     $340 = $mod;
     $341 = ((($340)) + 172|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = (($342) + ($339<<2)|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = ((($344)) + 4|0);
     $346 = (($345) + ($338<<3)|0);
     $347 = ((($346)) + 3|0);
     HEAP8[$347>>0] = $337;
     $348 = $j;
     $349 = ($348*3)|0;
     $350 = (($349) + 2)|0;
     $351 = (($mt) + ($350)|0);
     $352 = HEAP8[$351>>0]|0;
     $353 = $j;
     $354 = $i;
     $355 = $mod;
     $356 = ((($355)) + 172|0);
     $357 = HEAP32[$356>>2]|0;
     $358 = (($357) + ($354<<2)|0);
     $359 = HEAP32[$358>>2]|0;
     $360 = ((($359)) + 4|0);
     $361 = (($360) + ($353<<3)|0);
     $362 = ((($361)) + 4|0);
     HEAP8[$362>>0] = $352;
     $363 = $j;
     $364 = $i;
     $365 = $mod;
     $366 = ((($365)) + 172|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = (($367) + ($364<<2)|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = ((($369)) + 4|0);
     $371 = (($370) + ($363<<3)|0);
     $372 = ((($371)) + 3|0);
     $373 = HEAP8[$372>>0]|0;
     $374 = $373&255;
     $375 = ($374|0)>(15);
     if ($375) {
      $376 = $j;
      $377 = $i;
      $378 = $mod;
      $379 = ((($378)) + 172|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + ($377<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = ((($382)) + 4|0);
      $384 = (($383) + ($376<<3)|0);
      $385 = ((($384)) + 4|0);
      HEAP8[$385>>0] = 0;
      $386 = $j;
      $387 = $i;
      $388 = $mod;
      $389 = ((($388)) + 172|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = (($390) + ($387<<2)|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = ((($392)) + 4|0);
      $394 = (($393) + ($386<<3)|0);
      $395 = ((($394)) + 3|0);
      HEAP8[$395>>0] = 0;
     }
     $396 = $j;
     $397 = $i;
     $398 = $mod;
     $399 = ((($398)) + 172|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = (($400) + ($397<<2)|0);
     $402 = HEAP32[$401>>2]|0;
     $403 = ((($402)) + 4|0);
     $404 = (($403) + ($396<<3)|0);
     $405 = ((($404)) + 3|0);
     $406 = HEAP8[$405>>0]|0;
     $407 = $406&255;
     $408 = ($407|0)==(14);
     if ($408) {
      $409 = $j;
      $410 = $i;
      $411 = $mod;
      $412 = ((($411)) + 172|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = (($413) + ($410<<2)|0);
      $415 = HEAP32[$414>>2]|0;
      $416 = ((($415)) + 4|0);
      $417 = (($416) + ($409<<3)|0);
      $418 = ((($417)) + 4|0);
      $419 = HEAP8[$418>>0]|0;
      $420 = $419&255;
      $421 = $420 & 240;
      $422 = $421 >> 4;
      $423 = ($422|0)==(8);
      if ($423) {
       $424 = $j;
       $425 = $i;
       $426 = $mod;
       $427 = ((($426)) + 172|0);
       $428 = HEAP32[$427>>2]|0;
       $429 = (($428) + ($425<<2)|0);
       $430 = HEAP32[$429>>2]|0;
       $431 = ((($430)) + 4|0);
       $432 = (($431) + ($424<<3)|0);
       $433 = ((($432)) + 3|0);
       HEAP8[$433>>0] = 8;
       $434 = $j;
       $435 = $i;
       $436 = $mod;
       $437 = ((($436)) + 172|0);
       $438 = HEAP32[$437>>2]|0;
       $439 = (($438) + ($435<<2)|0);
       $440 = HEAP32[$439>>2]|0;
       $441 = ((($440)) + 4|0);
       $442 = (($441) + ($434<<3)|0);
       $443 = ((($442)) + 4|0);
       $444 = HEAP8[$443>>0]|0;
       $445 = $444&255;
       $446 = $445 << 4;
       $447 = $446&255;
       HEAP8[$443>>0] = $447;
      }
     }
     $448 = $j;
     $449 = (($448) + 1)|0;
     $j = $449;
    }
   }
  } while(0);
  $450 = $i;
  $451 = (($450) + 1)|0;
  $i = $451;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 $i = 0;
 while(1) {
  $452 = $i;
  $453 = $mod;
  $454 = ((($453)) + 128|0);
  $455 = HEAP32[$454>>2]|0;
  $456 = ($452|0)<($455|0);
  if (!($456)) {
   break;
  }
  $457 = $mod;
  $458 = $i;
  $459 = (_pattern_alloc($457,$458)|0);
  $460 = ($459|0)<(0);
  if ($460) {
   label = 33;
   break;
  }
  $461 = $i;
  $462 = $mod;
  $463 = ((($462)) + 168|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = (($464) + ($461<<2)|0);
  $466 = HEAP32[$465>>2]|0;
  HEAP32[$466>>2] = 64;
  $j = 0;
  while(1) {
   $467 = $j;
   $468 = ($467|0)<(32);
   if (!($468)) {
    break;
   }
   $469 = $2;
   $470 = (_hio_read16l($469)|0);
   $471 = $j;
   $472 = (($mp) + ($471<<1)|0);
   HEAP16[$472>>1] = $470;
   $473 = $j;
   $474 = (($473) + 1)|0;
   $j = $474;
  }
  $j = 0;
  while(1) {
   $475 = $j;
   $476 = $mod;
   $477 = ((($476)) + 136|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = ($475|0)<($478|0);
   if (!($479)) {
    break;
   }
   $480 = $j;
   $481 = (($mp) + ($480<<1)|0);
   $482 = HEAP16[$481>>1]|0;
   $483 = $482&65535;
   $484 = $j;
   $485 = $i;
   $486 = $mod;
   $487 = ((($486)) + 168|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = (($488) + ($485<<2)|0);
   $490 = HEAP32[$489>>2]|0;
   $491 = ((($490)) + 4|0);
   $492 = (($491) + ($484<<2)|0);
   HEAP32[$492>>2] = $483;
   $493 = $j;
   $494 = (($493) + 1)|0;
   $j = $494;
  }
  $495 = $i;
  $496 = (($495) + 1)|0;
  $i = $496;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 $497 = $2;
 $498 = ((($mfh)) + 28|0);
 $499 = HEAP16[$498>>1]|0;
 $500 = $499&65535;
 (_hio_seek($497,$500,1)|0);
 $i = 0;
 while(1) {
  $501 = $i;
  $502 = $mod;
  $503 = ((($502)) + 140|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = ($501|0)<($504|0);
  if (!($505)) {
   break;
  }
  $506 = $1;
  $507 = $2;
  $508 = $i;
  $509 = $mod;
  $510 = ((($509)) + 180|0);
  $511 = HEAP32[$510>>2]|0;
  $512 = (($511) + (($508*52)|0)|0);
  $513 = (_load_sample($506,$507,2,$512,0)|0);
  $514 = ($513|0)<(0);
  if ($514) {
   label = 44;
   break;
  }
  $515 = $i;
  $516 = (($515) + 1)|0;
  $i = $516;
 }
 if ((label|0) == 44) {
  $0 = -1;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 $i = 0;
 while(1) {
  $517 = $i;
  $518 = $mod;
  $519 = ((($518)) + 136|0);
  $520 = HEAP32[$519>>2]|0;
  $521 = ($517|0)<($520|0);
  if (!($521)) {
   break;
  }
  $522 = $i;
  $523 = ((($mfh)) + 34|0);
  $524 = (($523) + ($522)|0);
  $525 = HEAP8[$524>>0]|0;
  $526 = $525&255;
  $527 = $526 << 4;
  $528 = $i;
  $529 = $mod;
  $530 = ((($529)) + 184|0);
  $531 = (($530) + (($528*12)|0)|0);
  HEAP32[$531>>2] = $527;
  $532 = $i;
  $533 = (($532) + 1)|0;
  $i = $533;
 }
 $0 = 0;
 $534 = $0;
 STACKTOP = sp;return ($534|0);
}
function _ptm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 44)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1347702086);
 if ($9) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $10 = $1;
  $11 = $3;
  $12 = (($11) + 0)|0;
  (_hio_seek($10,$12,0)|0);
  $13 = $1;
  $14 = $2;
  _read_title($13,$14,28);
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _ptm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $event = 0, $i = 0, $mod = 0, $n = 0, $pfh = 0, $pih = 0, $r = 0, $smp_ofs = 0, $sub = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $smp_ofs = sp + 720|0;
 $pfh = sp + 104|0;
 $pih = sp + 20|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($pfh,28,1,$7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = ((($pfh)) + 28|0);
 HEAP8[$10>>0] = $9;
 $11 = $2;
 $12 = (_hio_read8($11)|0);
 $13 = ((($pfh)) + 29|0);
 HEAP8[$13>>0] = $12;
 $14 = $2;
 $15 = (_hio_read8($14)|0);
 $16 = ((($pfh)) + 30|0);
 HEAP8[$16>>0] = $15;
 $17 = $2;
 $18 = (_hio_read8($17)|0);
 $19 = ((($pfh)) + 31|0);
 HEAP8[$19>>0] = $18;
 $20 = $2;
 $21 = (_hio_read16l($20)|0);
 $22 = ((($pfh)) + 32|0);
 HEAP16[$22>>1] = $21;
 $23 = $2;
 $24 = (_hio_read16l($23)|0);
 $25 = ((($pfh)) + 34|0);
 HEAP16[$25>>1] = $24;
 $26 = $2;
 $27 = (_hio_read16l($26)|0);
 $28 = ((($pfh)) + 36|0);
 HEAP16[$28>>1] = $27;
 $29 = $2;
 $30 = (_hio_read16l($29)|0);
 $31 = ((($pfh)) + 38|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read16l($32)|0);
 $34 = ((($pfh)) + 40|0);
 HEAP16[$34>>1] = $33;
 $35 = $2;
 $36 = (_hio_read16l($35)|0);
 $37 = ((($pfh)) + 42|0);
 HEAP16[$37>>1] = $36;
 $38 = $2;
 $39 = (_hio_read32b($38)|0);
 $40 = ((($pfh)) + 44|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($pfh)) + 48|0);
 $42 = $2;
 (_hio_read($41,16,1,$42)|0);
 $43 = ((($pfh)) + 64|0);
 $44 = $2;
 (_hio_read($43,32,1,$44)|0);
 $45 = ((($pfh)) + 96|0);
 $46 = $2;
 (_hio_read($45,256,1,$46)|0);
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = ($47|0)<(128);
  if (!($48)) {
   break;
  }
  $49 = $2;
  $50 = (_hio_read16l($49)|0);
  $51 = $i;
  $52 = ((($pfh)) + 352|0);
  $53 = (($52) + ($51<<1)|0);
  HEAP16[$53>>1] = $50;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $56 = ((($pfh)) + 32|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = $mod;
 $60 = ((($59)) + 156|0);
 HEAP32[$60>>2] = $58;
 $61 = ((($pfh)) + 34|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = $mod;
 $65 = ((($64)) + 140|0);
 HEAP32[$65>>2] = $63;
 $66 = ((($pfh)) + 36|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67&65535;
 $69 = $mod;
 $70 = ((($69)) + 128|0);
 HEAP32[$70>>2] = $68;
 $71 = ((($pfh)) + 38|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72&65535;
 $74 = $mod;
 $75 = ((($74)) + 136|0);
 HEAP32[$75>>2] = $73;
 $76 = $mod;
 $77 = ((($76)) + 128|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $mod;
 $80 = ((($79)) + 136|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = Math_imul($78, $81)|0;
 $83 = $mod;
 $84 = ((($83)) + 132|0);
 HEAP32[$84>>2] = $82;
 $85 = $mod;
 $86 = ((($85)) + 140|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $mod;
 $89 = ((($88)) + 144|0);
 HEAP32[$89>>2] = $87;
 $90 = $mod;
 $91 = ((($90)) + 148|0);
 HEAP32[$91>>2] = 6;
 $92 = $mod;
 $93 = ((($92)) + 152|0);
 HEAP32[$93>>2] = 125;
 $94 = $mod;
 $95 = ((($94)) + 952|0);
 $96 = ((($pfh)) + 96|0);
 _memcpy(($95|0),($96|0),256)|0;
 $97 = $1;
 $98 = ((($97)) + 1264|0);
 HEAP32[$98>>2] = 8363;
 $99 = $mod;
 (_copy_adjust($99,$pfh,28)|0);
 $100 = $1;
 $101 = ((($pfh)) + 30|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = ((($pfh)) + 29|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 HEAP32[$vararg_buffer>>2] = $103;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $106;
 _set_type($100,2520,$vararg_buffer);
 $107 = $mod;
 $108 = (_instrument_init($107)|0);
 $109 = ($108|0)<(0);
 if ($109) {
  $0 = -1;
  $486 = $0;
  STACKTOP = sp;return ($486|0);
 }
 $i = 0;
 while(1) {
  $110 = $i;
  $111 = $mod;
  $112 = ((($111)) + 140|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($110|0)<($113|0);
  if (!($114)) {
   break;
  }
  $115 = $i;
  $116 = $mod;
  $117 = ((($116)) + 176|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + (($115*764)|0)|0);
  $xxi = $119;
  $120 = $i;
  $121 = $mod;
  $122 = ((($121)) + 180|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + (($120*52)|0)|0);
  $xxs = $124;
  $125 = $2;
  $126 = (_hio_read8($125)|0);
  HEAP8[$pih>>0] = $126;
  $127 = ((($pih)) + 1|0);
  $128 = $2;
  (_hio_read($127,12,1,$128)|0);
  $129 = $2;
  $130 = (_hio_read8($129)|0);
  $131 = ((($pih)) + 13|0);
  HEAP8[$131>>0] = $130;
  $132 = $2;
  $133 = (_hio_read16l($132)|0);
  $134 = ((($pih)) + 14|0);
  HEAP16[$134>>1] = $133;
  $135 = $2;
  $136 = (_hio_read16l($135)|0);
  $137 = ((($pih)) + 16|0);
  HEAP16[$137>>1] = $136;
  $138 = $2;
  $139 = (_hio_read32l($138)|0);
  $140 = ((($pih)) + 20|0);
  HEAP32[$140>>2] = $139;
  $141 = $2;
  $142 = (_hio_read32l($141)|0);
  $143 = ((($pih)) + 24|0);
  HEAP32[$143>>2] = $142;
  $144 = $2;
  $145 = (_hio_read32l($144)|0);
  $146 = ((($pih)) + 28|0);
  HEAP32[$146>>2] = $145;
  $147 = $2;
  $148 = (_hio_read32l($147)|0);
  $149 = ((($pih)) + 32|0);
  HEAP32[$149>>2] = $148;
  $150 = $2;
  $151 = (_hio_read32l($150)|0);
  $152 = ((($pih)) + 36|0);
  HEAP32[$152>>2] = $151;
  $153 = $2;
  $154 = (_hio_read32l($153)|0);
  $155 = ((($pih)) + 40|0);
  HEAP32[$155>>2] = $154;
  $156 = $2;
  $157 = (_hio_read32l($156)|0);
  $158 = ((($pih)) + 44|0);
  HEAP32[$158>>2] = $157;
  $159 = $2;
  $160 = (_hio_read8($159)|0);
  $161 = ((($pih)) + 48|0);
  HEAP8[$161>>0] = $160;
  $162 = $2;
  $163 = (_hio_read8($162)|0);
  $164 = ((($pih)) + 49|0);
  HEAP8[$164>>0] = $163;
  $165 = ((($pih)) + 50|0);
  $166 = $2;
  (_hio_read($165,28,1,$166)|0);
  $167 = $2;
  $168 = (_hio_read32b($167)|0);
  $169 = ((($pih)) + 80|0);
  HEAP32[$169>>2] = $168;
  $170 = HEAP8[$pih>>0]|0;
  $171 = $170&255;
  $172 = $171 & 3;
  $173 = ($172|0)!=(1);
  if (!($173)) {
   $174 = $mod;
   $175 = $i;
   $176 = (_subinstrument_alloc($174,$175,1)|0);
   $177 = ($176|0)<(0);
   if ($177) {
    label = 10;
    break;
   }
   $178 = $xxi;
   $179 = ((($178)) + 756|0);
   $180 = HEAP32[$179>>2]|0;
   $sub = $180;
   $181 = ((($pih)) + 20|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $i;
   $184 = (($smp_ofs) + ($183<<2)|0);
   HEAP32[$184>>2] = $182;
   $185 = ((($pih)) + 24|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $xxs;
   $188 = ((($187)) + 32|0);
   HEAP32[$188>>2] = $186;
   $189 = ((($pih)) + 28|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = $xxs;
   $192 = ((($191)) + 36|0);
   HEAP32[$192>>2] = $190;
   $193 = ((($pih)) + 32|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $xxs;
   $196 = ((($195)) + 40|0);
   HEAP32[$196>>2] = $194;
   $197 = $i;
   $198 = $mod;
   $199 = ((($198)) + 180|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + (($197*52)|0)|0);
   $202 = ((($201)) + 32|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($203|0)>(0);
   if ($204) {
    $205 = $i;
    $206 = $mod;
    $207 = ((($206)) + 176|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + (($205*764)|0)|0);
    $210 = ((($209)) + 36|0);
    HEAP32[$210>>2] = 1;
   }
   $211 = $xxs;
   $212 = ((($211)) + 44|0);
   HEAP32[$212>>2] = 0;
   $213 = HEAP8[$pih>>0]|0;
   $214 = $213&255;
   $215 = $214 & 4;
   $216 = ($215|0)!=(0);
   if ($216) {
    $217 = $xxs;
    $218 = ((($217)) + 44|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $219 | 2;
    HEAP32[$218>>2] = $220;
   }
   $221 = HEAP8[$pih>>0]|0;
   $222 = $221&255;
   $223 = $222 & 8;
   $224 = ($223|0)!=(0);
   if ($224) {
    $225 = $xxs;
    $226 = ((($225)) + 44|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = $227 | 6;
    HEAP32[$226>>2] = $228;
   }
   $229 = HEAP8[$pih>>0]|0;
   $230 = $229&255;
   $231 = $230 & 16;
   $232 = ($231|0)!=(0);
   if ($232) {
    $233 = $xxs;
    $234 = ((($233)) + 44|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $235 | 1;
    HEAP32[$234>>2] = $236;
    $237 = $xxs;
    $238 = ((($237)) + 32|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 >> 1;
    HEAP32[$238>>2] = $240;
    $241 = $xxs;
    $242 = ((($241)) + 36|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $243 >> 1;
    HEAP32[$242>>2] = $244;
    $245 = $xxs;
    $246 = ((($245)) + 40|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = $247 >> 1;
    HEAP32[$246>>2] = $248;
   }
   $249 = ((($pih)) + 13|0);
   $250 = HEAP8[$249>>0]|0;
   $251 = $250&255;
   $252 = $sub;
   HEAP32[$252>>2] = $251;
   $253 = $sub;
   $254 = ((($253)) + 8|0);
   HEAP32[$254>>2] = 128;
   $255 = $i;
   $256 = $sub;
   $257 = ((($256)) + 40|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($pih)) + 80|0);
   HEAP32[$258>>2] = 0;
   $259 = $mod;
   $260 = $i;
   $261 = ((($pih)) + 50|0);
   (_instrument_name($259,$260,$261,28)|0);
   $262 = ((($pih)) + 14|0);
   $263 = HEAP16[$262>>1]|0;
   $264 = $263&65535;
   $265 = $sub;
   $266 = ((($265)) + 12|0);
   $267 = $sub;
   $268 = ((($267)) + 16|0);
   _c2spd_to_note($264,$266,$268);
  }
  $269 = $i;
  $270 = (($269) + 1)|0;
  $i = $270;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $486 = $0;
  STACKTOP = sp;return ($486|0);
 }
 $271 = $mod;
 $272 = (_pattern_init($271)|0);
 $273 = ($272|0)<(0);
 if ($273) {
  $0 = -1;
  $486 = $0;
  STACKTOP = sp;return ($486|0);
 }
 $i = 0;
 L36: while(1) {
  $274 = $i;
  $275 = $mod;
  $276 = ((($275)) + 128|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($274|0)<($277|0);
  if (!($278)) {
   break;
  }
  $279 = $i;
  $280 = ((($pfh)) + 352|0);
  $281 = (($280) + ($279<<1)|0);
  $282 = HEAP16[$281>>1]|0;
  $283 = ($282<<16>>16)!=(0);
  L39: do {
   if ($283) {
    $284 = $mod;
    $285 = $i;
    $286 = (_pattern_tracks_alloc($284,$285,64)|0);
    $287 = ($286|0)<(0);
    if ($287) {
     label = 27;
     break L36;
    }
    $288 = $2;
    $289 = $3;
    $290 = $i;
    $291 = ((($pfh)) + 352|0);
    $292 = (($291) + ($290<<1)|0);
    $293 = HEAP16[$292>>1]|0;
    $294 = $293&65535;
    $295 = $294<<4;
    $296 = (($289) + ($295))|0;
    (_hio_seek($288,$296,0)|0);
    $r = 0;
    while(1) {
     $297 = $r;
     $298 = ($297|0)<(64);
     if (!($298)) {
      break L39;
     }
     $299 = $2;
     $300 = (_hio_read8($299)|0);
     $b = $300;
     $301 = $b;
     $302 = ($301<<24>>24)!=(0);
     if (!($302)) {
      $303 = $r;
      $304 = (($303) + 1)|0;
      $r = $304;
      continue;
     }
     $305 = $b;
     $306 = $305&255;
     $307 = $306 & 31;
     $c = $307;
     $308 = $c;
     $309 = $mod;
     $310 = ((($309)) + 136|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = ($308|0)>=($311|0);
     if ($312) {
      continue;
     }
     $313 = $r;
     $314 = $c;
     $315 = $i;
     $316 = $1;
     $317 = ((($316)) + 168|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = (($318) + ($315<<2)|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = ((($320)) + 4|0);
     $322 = (($321) + ($314<<2)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $1;
     $325 = ((($324)) + 172|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = (($326) + ($323<<2)|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = ((($328)) + 4|0);
     $330 = (($329) + ($313<<3)|0);
     $event = $330;
     $331 = $b;
     $332 = $331&255;
     $333 = $332 & 32;
     $334 = ($333|0)!=(0);
     if ($334) {
      $335 = $2;
      $336 = (_hio_read8($335)|0);
      $n = $336;
      $337 = $n;
      $338 = $337&255;
      if ((($338|0) == 255)) {
       $n = 0;
      } else if ((($338|0) == 254)) {
       $n = -127;
      } else {
       $339 = $n;
       $340 = $339&255;
       $341 = (($340) + 12)|0;
       $342 = $341&255;
       $n = $342;
      }
      $343 = $n;
      $344 = $event;
      HEAP8[$344>>0] = $343;
      $345 = $2;
      $346 = (_hio_read8($345)|0);
      $347 = $event;
      $348 = ((($347)) + 1|0);
      HEAP8[$348>>0] = $346;
     }
     $349 = $b;
     $350 = $349&255;
     $351 = $350 & 64;
     $352 = ($351|0)!=(0);
     L57: do {
      if ($352) {
       $353 = $2;
       $354 = (_hio_read8($353)|0);
       $355 = $event;
       $356 = ((($355)) + 3|0);
       HEAP8[$356>>0] = $354;
       $357 = $2;
       $358 = (_hio_read8($357)|0);
       $359 = $event;
       $360 = ((($359)) + 4|0);
       HEAP8[$360>>0] = $358;
       $361 = $event;
       $362 = ((($361)) + 3|0);
       $363 = HEAP8[$362>>0]|0;
       $364 = $363&255;
       $365 = ($364|0)>(23);
       if ($365) {
        $366 = $event;
        $367 = ((($366)) + 4|0);
        HEAP8[$367>>0] = 0;
        $368 = $event;
        $369 = ((($368)) + 3|0);
        HEAP8[$369>>0] = 0;
       }
       $370 = $event;
       $371 = ((($370)) + 3|0);
       $372 = HEAP8[$371>>0]|0;
       $373 = $372&255;
       switch ($373|0) {
       case 23:  {
        $406 = $event;
        $407 = ((($406)) + 4|0);
        HEAP8[$407>>0] = 0;
        $408 = $event;
        $409 = ((($408)) + 3|0);
        HEAP8[$409>>0] = 0;
        break L57;
        break;
       }
       case 16:  {
        $392 = $event;
        $393 = ((($392)) + 3|0);
        HEAP8[$393>>0] = 16;
        break L57;
        break;
       }
       case 21:  {
        $402 = $event;
        $403 = ((($402)) + 3|0);
        HEAP8[$403>>0] = -97;
        break L57;
        break;
       }
       case 19:  {
        $398 = $event;
        $399 = ((($398)) + 3|0);
        HEAP8[$399>>0] = -100;
        break L57;
        break;
       }
       case 18:  {
        $396 = $event;
        $397 = ((($396)) + 3|0);
        HEAP8[$397>>0] = -84;
        break L57;
        break;
       }
       case 14:  {
        $374 = $event;
        $375 = ((($374)) + 4|0);
        $376 = HEAP8[$375>>0]|0;
        $377 = $376&255;
        $378 = $377 & 240;
        $379 = $378 >> 4;
        $380 = ($379|0)==(8);
        if (!($380)) {
         break L57;
        }
        $381 = $event;
        $382 = ((($381)) + 3|0);
        HEAP8[$382>>0] = 8;
        $383 = $event;
        $384 = ((($383)) + 4|0);
        $385 = HEAP8[$384>>0]|0;
        $386 = $385&255;
        $387 = $386 & 15;
        $388 = $387 << 4;
        $389 = $388&255;
        $390 = $event;
        $391 = ((($390)) + 4|0);
        HEAP8[$391>>0] = $389;
        break L57;
        break;
       }
       case 17:  {
        $394 = $event;
        $395 = ((($394)) + 3|0);
        HEAP8[$395>>0] = 27;
        break L57;
        break;
       }
       case 20:  {
        $400 = $event;
        $401 = ((($400)) + 3|0);
        HEAP8[$401>>0] = -99;
        break L57;
        break;
       }
       case 22:  {
        $404 = $event;
        $405 = ((($404)) + 3|0);
        HEAP8[$405>>0] = -98;
        break L57;
        break;
       }
       default: {
        break L57;
       }
       }
      }
     } while(0);
     $410 = $b;
     $411 = $410&255;
     $412 = $411 & 128;
     $413 = ($412|0)!=(0);
     if (!($413)) {
      continue;
     }
     $414 = $2;
     $415 = (_hio_read8($414)|0);
     $416 = $415&255;
     $417 = (($416) + 1)|0;
     $418 = $417&255;
     $419 = $event;
     $420 = ((($419)) + 2|0);
     HEAP8[$420>>0] = $418;
    }
   }
  } while(0);
  $421 = $i;
  $422 = (($421) + 1)|0;
  $i = $422;
 }
 if ((label|0) == 27) {
  $0 = -1;
  $486 = $0;
  STACKTOP = sp;return ($486|0);
 }
 $i = 0;
 while(1) {
  $423 = $i;
  $424 = $mod;
  $425 = ((($424)) + 144|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = ($423|0)<($426|0);
  if (!($427)) {
   break;
  }
  $428 = $i;
  $429 = $mod;
  $430 = ((($429)) + 176|0);
  $431 = HEAP32[$430>>2]|0;
  $432 = (($431) + (($428*764)|0)|0);
  $433 = ((($432)) + 36|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = ($434|0)==(0);
  if (!($435)) {
   $436 = $i;
   $437 = $mod;
   $438 = ((($437)) + 180|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = (($439) + (($436*52)|0)|0);
   $441 = ((($440)) + 32|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = ($442|0)==(0);
   if (!($443)) {
    $444 = $2;
    $445 = $3;
    $446 = $i;
    $447 = (($smp_ofs) + ($446<<2)|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = (($445) + ($448))|0;
    (_hio_seek($444,$449,0)|0);
    $450 = $1;
    $451 = $2;
    $452 = $i;
    $453 = $mod;
    $454 = ((($453)) + 180|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = (($455) + (($452*52)|0)|0);
    $457 = (_load_sample($450,$451,4,$456,0)|0);
    $458 = ($457|0)<(0);
    if ($458) {
     label = 61;
     break;
    }
   }
  }
  $459 = $i;
  $460 = (($459) + 1)|0;
  $i = $460;
 }
 if ((label|0) == 61) {
  $0 = -1;
  $486 = $0;
  STACKTOP = sp;return ($486|0);
 }
 $461 = $1;
 $462 = ((($461)) + 1276|0);
 HEAP32[$462>>2] = 2552;
 $i = 0;
 while(1) {
  $463 = $i;
  $464 = $mod;
  $465 = ((($464)) + 136|0);
  $466 = HEAP32[$465>>2]|0;
  $467 = ($463|0)<($466|0);
  if (!($467)) {
   break;
  }
  $468 = $i;
  $469 = ((($pfh)) + 64|0);
  $470 = (($469) + ($468)|0);
  $471 = HEAP8[$470>>0]|0;
  $472 = $471&255;
  $473 = $472 << 4;
  $474 = $i;
  $475 = $mod;
  $476 = ((($475)) + 184|0);
  $477 = (($476) + (($474*12)|0)|0);
  HEAP32[$477>>2] = $473;
  $478 = $i;
  $479 = (($478) + 1)|0;
  $i = $479;
 }
 $480 = $1;
 $481 = ((($480)) + 1280|0);
 $482 = HEAP32[$481>>2]|0;
 $483 = $482 | 293601825;
 HEAP32[$481>>2] = $483;
 $484 = $1;
 $485 = ((($484)) + 1284|0);
 HEAP32[$485>>2] = 2;
 $0 = 0;
 $486 = $0;
 STACKTOP = sp;return ($486|0);
}
function _okt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($magic,1,8,$4)|0);
 $6 = ($5>>>0)<(8);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_strncmp($magic,3008,8)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _okt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $data = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_seek($6,8,1)|0);
 $7 = (_iff_new()|0);
 $handle = $7;
 $8 = $handle;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 _memset(($data|0),0,296)|0;
 $10 = $handle;
 $11 = (_iff_register($10,2848,214)|0);
 $ret = $11;
 $12 = $handle;
 $13 = (_iff_register($12,6784,215)|0);
 $14 = $ret;
 $15 = $14 | $13;
 $ret = $15;
 $16 = $handle;
 $17 = (_iff_register($16,2856,216)|0);
 $18 = $ret;
 $19 = $18 | $17;
 $ret = $19;
 $20 = $handle;
 $21 = (_iff_register($20,2864,217)|0);
 $22 = $ret;
 $23 = $22 | $21;
 $ret = $23;
 $24 = $handle;
 $25 = (_iff_register($24,6768,218)|0);
 $26 = $ret;
 $27 = $26 | $25;
 $ret = $27;
 $28 = $handle;
 $29 = (_iff_register($28,7552,219)|0);
 $30 = $ret;
 $31 = $30 | $29;
 $ret = $31;
 $32 = $handle;
 $33 = (_iff_register($32,5784,220)|0);
 $34 = $ret;
 $35 = $34 | $33;
 $ret = $35;
 $36 = $handle;
 $37 = (_iff_register($36,2872,221)|0);
 $38 = $ret;
 $39 = $38 | $37;
 $ret = $39;
 $40 = $ret;
 $41 = ($40|0)!=(0);
 if ($41) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $42 = $1;
 _set_type($42,2832,$vararg_buffer);
 $43 = $handle;
 $44 = $1;
 $45 = $2;
 $46 = (_iff_load($43,$44,$45,$data)|0);
 $47 = ($46|0)<(0);
 $48 = $handle;
 _iff_release($48);
 if ($47) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _get_cmod($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, $mod = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 136|0);
 HEAP32[$6>>2] = 0;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(4);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = (_hio_read16b($9)|0);
  $11 = $10&65535;
  $j = $11;
  $12 = $j;
  $13 = ($12|0)!=(0);
  $14 = $13 ^ 1;
  $15 = $14 ^ 1;
  $16 = $15&1;
  $k = $16;
  while(1) {
   $17 = $k;
   $18 = ($17|0)>=(0);
   $19 = $i;
   $20 = (($19) + 1)|0;
   if (!($18)) {
    break;
   }
   $21 = (($20|0) / 2)&-1;
   $22 = (($21|0) % 2)&-1;
   $23 = ($22*255)|0;
   $24 = $mod;
   $25 = ((($24)) + 136|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $mod;
   $28 = ((($27)) + 184|0);
   $29 = (($28) + (($26*12)|0)|0);
   HEAP32[$29>>2] = $23;
   $30 = $mod;
   $31 = ((($30)) + 136|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$31>>2] = $33;
   $34 = $k;
   $35 = (($34) + -1)|0;
   $k = $35;
  }
  $i = $20;
 }
 STACKTOP = sp;return 0;
}
function _get_samp($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $data = 0, $i = 0, $j = 0, $looplen = 0, $mod = 0, $sub = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $2;
 $8 = (($7|0) / 32)&-1;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = $13;
 $16 = $mod;
 $17 = (_instrument_init($16)|0);
 $18 = ($17|0)<(0);
 if ($18) {
  $0 = -1;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 $i = 0;
 $j = 0;
 while(1) {
  $19 = $i;
  $20 = $mod;
  $21 = ((($20)) + 140|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)<($22|0);
  if (!($23)) {
   label = 10;
   break;
  }
  $24 = $i;
  $25 = $mod;
  $26 = ((($25)) + 176|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($24*764)|0)|0);
  $xxi = $28;
  $29 = $j;
  $30 = $mod;
  $31 = ((($30)) + 180|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($29*52)|0)|0);
  $xxs = $33;
  $34 = $mod;
  $35 = $i;
  $36 = (_subinstrument_alloc($34,$35,1)|0);
  $37 = ($36|0)<(0);
  if ($37) {
   label = 6;
   break;
  }
  $38 = $xxi;
  $39 = ((($38)) + 756|0);
  $40 = HEAP32[$39>>2]|0;
  $sub = $40;
  $41 = $xxi;
  $42 = $3;
  (_hio_read($41,1,20,$42)|0);
  $43 = $xxi;
  (_adjust_string($43)|0);
  $44 = $3;
  $45 = (_hio_read32b($44)|0);
  $46 = $45 & -2;
  $47 = $xxs;
  $48 = ((($47)) + 32|0);
  HEAP32[$48>>2] = $46;
  $49 = $3;
  $50 = (_hio_read16b($49)|0);
  $51 = $50&65535;
  $52 = $xxs;
  $53 = ((($52)) + 36|0);
  HEAP32[$53>>2] = $51;
  $54 = $3;
  $55 = (_hio_read16b($54)|0);
  $56 = $55&65535;
  $looplen = $56;
  $57 = $xxs;
  $58 = ((($57)) + 36|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $looplen;
  $61 = (($59) + ($60))|0;
  $62 = $xxs;
  $63 = ((($62)) + 40|0);
  HEAP32[$63>>2] = $61;
  $64 = $looplen;
  $65 = ($64|0)>(2);
  $66 = $65 ? 2 : 0;
  $67 = $xxs;
  $68 = ((($67)) + 44|0);
  HEAP32[$68>>2] = $66;
  $69 = $3;
  $70 = (_hio_read16b($69)|0);
  $71 = $70&65535;
  $72 = $sub;
  HEAP32[$72>>2] = $71;
  $73 = $3;
  $74 = (_hio_read16b($73)|0);
  $75 = $74&65535;
  $76 = $i;
  $77 = $data;
  $78 = (($77) + ($76<<2)|0);
  HEAP32[$78>>2] = $75;
  $79 = $sub;
  $80 = ((($79)) + 8|0);
  HEAP32[$80>>2] = 128;
  $81 = $j;
  $82 = $sub;
  $83 = ((($82)) + 40|0);
  HEAP32[$83>>2] = $81;
  $84 = $i;
  $85 = $j;
  $86 = $data;
  $87 = ((($86)) + 144|0);
  $88 = (($87) + ($85<<2)|0);
  HEAP32[$88>>2] = $84;
  $89 = $xxs;
  $90 = ((($89)) + 32|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)>(0);
  if ($92) {
   $93 = $xxi;
   $94 = ((($93)) + 36|0);
   HEAP32[$94>>2] = 1;
   $95 = $j;
   $96 = (($95) + 1)|0;
   $j = $96;
  }
  $97 = $i;
  $98 = (($97) + 1)|0;
  $i = $98;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $99 = $0;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _get_spee($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = $mod;
 $9 = ((($8)) + 148|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 152|0);
 HEAP32[$11>>2] = 125;
 STACKTOP = sp;return 0;
}
function _get_slen($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = $mod;
 $9 = ((($8)) + 128|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $mod;
 $14 = ((($13)) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $17 = $mod;
 $18 = ((($17)) + 132|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return 0;
}
function _get_plen($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 HEAP32[$9>>2] = $7;
 STACKTOP = sp;return 0;
}
function _get_patt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 952|0);
 $7 = $mod;
 $8 = ((($7)) + 156|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 (_hio_read($6,1,$9,$10)|0);
 STACKTOP = sp;return 0;
}
function _get_pbod($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $data = 0, $e = 0, $ins = 0, $j = 0, $mod = 0, $note = 0, $rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 288|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>=($12|0);
 if ($13) {
  $0 = 0;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 $14 = $data;
 $15 = ((($14)) + 288|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = $mod;
  $19 = (_pattern_init($18)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $0 = -1;
   $201 = $0;
   STACKTOP = sp;return ($201|0);
  }
 }
 $21 = $3;
 $22 = (_hio_read16b($21)|0);
 $rows = $22;
 $23 = $mod;
 $24 = $data;
 $25 = ((($24)) + 288|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $rows;
 $28 = $27&65535;
 $29 = (_pattern_tracks_alloc($23,$26,$28)|0);
 $30 = ($29|0)<(0);
 if ($30) {
  $0 = -1;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 $j = 0;
 while(1) {
  $31 = $j;
  $32 = $rows;
  $33 = $32&65535;
  $34 = $mod;
  $35 = ((($34)) + 136|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = Math_imul($33, $36)|0;
  $38 = ($31|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $j;
  $40 = $mod;
  $41 = ((($40)) + 136|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39|0) / ($42|0))&-1;
  $44 = $j;
  $45 = $mod;
  $46 = ((($45)) + 136|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44|0) % ($47|0))&-1;
  $49 = $data;
  $50 = ((($49)) + 288|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = ((($52)) + 168|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 4|0);
  $58 = (($57) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = ((($60)) + 172|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 4|0);
  $66 = (($65) + ($43<<3)|0);
  $e = $66;
  $67 = $e;
  ;HEAP8[$67>>0]=0|0;HEAP8[$67+1>>0]=0|0;HEAP8[$67+2>>0]=0|0;HEAP8[$67+3>>0]=0|0;HEAP8[$67+4>>0]=0|0;HEAP8[$67+5>>0]=0|0;HEAP8[$67+6>>0]=0|0;HEAP8[$67+7>>0]=0|0;
  $68 = $3;
  $69 = (_hio_read8($68)|0);
  $note = $69;
  $70 = $3;
  $71 = (_hio_read8($70)|0);
  $ins = $71;
  $72 = $note;
  $73 = ($72<<24>>24)!=(0);
  if ($73) {
   $74 = $note;
   $75 = $74&255;
   $76 = (48 + ($75))|0;
   $77 = $76&255;
   $78 = $e;
   HEAP8[$78>>0] = $77;
   $79 = $ins;
   $80 = $79&255;
   $81 = (1 + ($80))|0;
   $82 = $81&255;
   $83 = $e;
   $84 = ((($83)) + 1|0);
   HEAP8[$84>>0] = $82;
  }
  $85 = $3;
  $86 = (_hio_read8($85)|0);
  $87 = $86&255;
  $88 = (2880 + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89&255;
  $91 = $e;
  $92 = ((($91)) + 3|0);
  HEAP8[$92>>0] = $90;
  $93 = $3;
  $94 = (_hio_read8($93)|0);
  $95 = $e;
  $96 = ((($95)) + 4|0);
  HEAP8[$96>>0] = $94;
  $97 = $e;
  $98 = ((($97)) + 3|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = ($100|0)==(12);
  do {
   if ($101) {
    $102 = $e;
    $103 = ((($102)) + 4|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($105|0)>(64);
    if ($106) {
     $107 = $e;
     $108 = ((($107)) + 4|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109&255;
     $111 = ($110|0)<=(80);
     $112 = $e;
     if ($111) {
      $113 = ((($112)) + 3|0);
      HEAP8[$113>>0] = 10;
      $114 = $e;
      $115 = ((($114)) + 4|0);
      $116 = HEAP8[$115>>0]|0;
      $117 = $116&255;
      $118 = (($117) - 64)|0;
      $119 = $118&255;
      HEAP8[$115>>0] = $119;
      break;
     }
     $120 = ((($112)) + 4|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = ($122|0)<=(96);
     $124 = $e;
     if ($123) {
      $125 = ((($124)) + 3|0);
      HEAP8[$125>>0] = 10;
      $126 = $e;
      $127 = ((($126)) + 4|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = $128&255;
      $130 = (($129) - 80)|0;
      $131 = $130 << 4;
      $132 = $131&255;
      $133 = $e;
      $134 = ((($133)) + 4|0);
      HEAP8[$134>>0] = $132;
      break;
     }
     $135 = ((($124)) + 4|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = ($137|0)<=(112);
     $139 = $e;
     if ($138) {
      $140 = ((($139)) + 3|0);
      HEAP8[$140>>0] = -82;
      $141 = $e;
      $142 = ((($141)) + 4|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = (($144) - 96)|0;
      $146 = $145&255;
      $147 = $e;
      $148 = ((($147)) + 4|0);
      HEAP8[$148>>0] = $146;
      break;
     }
     $149 = ((($139)) + 4|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = ($151|0)<=(128);
     if ($152) {
      $153 = $e;
      $154 = ((($153)) + 3|0);
      HEAP8[$154>>0] = -83;
      $155 = $e;
      $156 = ((($155)) + 4|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157&255;
      $159 = (($158) - 112)|0;
      $160 = $159&255;
      $161 = $e;
      $162 = ((($161)) + 4|0);
      HEAP8[$162>>0] = $160;
     }
    }
   }
  } while(0);
  $163 = $e;
  $164 = ((($163)) + 3|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  $167 = ($166|0)==(0);
  if ($167) {
   $168 = $e;
   $169 = ((($168)) + 4|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 & 240;
   $173 = $172 >> 4;
   $174 = (24 - ($173))|0;
   $175 = (($174|0) % 12)&-1;
   $176 = $175 << 4;
   $177 = $e;
   $178 = ((($177)) + 4|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $180 & 15;
   $182 = $176 | $181;
   $183 = $182&255;
   $184 = $e;
   $185 = ((($184)) + 4|0);
   HEAP8[$185>>0] = $183;
  }
  $186 = $e;
  $187 = ((($186)) + 3|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188&255;
  $190 = ($189|0)==(255);
  if ($190) {
   $191 = $e;
   $192 = ((($191)) + 4|0);
   HEAP8[$192>>0] = 0;
   $193 = $e;
   $194 = ((($193)) + 3|0);
   HEAP8[$194>>0] = 0;
  }
  $195 = $j;
  $196 = (($195) + 1)|0;
  $j = $196;
 }
 $197 = $data;
 $198 = ((($197)) + 288|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (($199) + 1)|0;
 HEAP32[$198>>2] = $200;
 $0 = 0;
 $201 = $0;
 STACKTOP = sp;return ($201|0);
}
function _get_sbod($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $flags = 0, $i = 0, $mod = 0, $sid = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $flags = 0;
 $7 = $data;
 $8 = ((($7)) + 292|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>=($12|0);
 if ($13) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $14 = $data;
 $15 = ((($14)) + 292|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $data;
 $18 = ((($17)) + 144|0);
 $19 = (($18) + ($16<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $i = $20;
 $21 = $i;
 $22 = $data;
 $23 = (($22) + ($21<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  label = 5;
 } else {
  $26 = $i;
  $27 = $data;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(2);
  if ($30) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $flags = 8;
 }
 $31 = $i;
 $32 = $mod;
 $33 = ((($32)) + 176|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + (($31*764)|0)|0);
 $36 = ((($35)) + 756|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $sid = $39;
 $40 = $1;
 $41 = $3;
 $42 = $flags;
 $43 = $sid;
 $44 = $mod;
 $45 = ((($44)) + 180|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($43*52)|0)|0);
 $48 = (_load_sample($40,$41,$42,$47,0)|0);
 $49 = ($48|0)<(0);
 if ($49) {
  $0 = -1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 } else {
  $50 = $data;
  $51 = ((($50)) + 292|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$51>>2] = $53;
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _amd_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1062)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,9,$7)|0);
 $9 = ($8>>>0)<(9);
 if ($9) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $10 = (_memcmp($buf,3112,2)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = ((($buf)) + 6|0);
  $13 = (_memcmp($12,3120,3)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $1;
   $16 = $3;
   $17 = (($16) + 0)|0;
   (_hio_seek($15,$17,0)|0);
   $18 = $1;
   $19 = $2;
   _read_title($18,$19,24);
   $0 = 0;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $0 = -1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _amd_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $afh = 0, $i = 0;
 var $j = 0, $mod = 0, $regs = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $afh = sp + 48|0;
 $regs = sp + 32|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($afh,24,1,$7)|0);
 $8 = ((($afh)) + 24|0);
 $9 = $2;
 (_hio_read($8,24,1,$9)|0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(26);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = ((($afh)) + 48|0);
  $14 = (($13) + (($12*34)|0)|0);
  $15 = $2;
  (_hio_read($14,23,1,$15)|0);
  $16 = $i;
  $17 = ((($afh)) + 48|0);
  $18 = (($17) + (($16*34)|0)|0);
  $19 = ((($18)) + 23|0);
  $20 = $2;
  (_hio_read($19,11,1,$20)|0);
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = ((($afh)) + 932|0);
 HEAP8[$25>>0] = $24;
 $26 = $2;
 $27 = (_hio_read8($26)|0);
 $28 = ((($afh)) + 933|0);
 HEAP8[$28>>0] = $27;
 $29 = ((($afh)) + 934|0);
 $30 = $2;
 (_hio_read($29,128,1,$30)|0);
 $31 = ((($afh)) + 1062|0);
 $32 = $2;
 (_hio_read($31,9,1,$32)|0);
 $33 = $2;
 $34 = (_hio_read8($33)|0);
 $35 = ((($afh)) + 1071|0);
 HEAP8[$35>>0] = $34;
 $36 = ((($afh)) + 1071|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)!=(16);
 if ($39) {
  $40 = ((($afh)) + 1071|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)!=(17);
  if ($43) {
   $0 = -1;
   $177 = $0;
   STACKTOP = sp;return ($177|0);
  }
 }
 $44 = $mod;
 $45 = ((($44)) + 136|0);
 HEAP32[$45>>2] = 9;
 $46 = $mod;
 $47 = ((($46)) + 152|0);
 HEAP32[$47>>2] = 125;
 $48 = $mod;
 $49 = ((($48)) + 148|0);
 HEAP32[$49>>2] = 6;
 $50 = ((($afh)) + 932|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $mod;
 $54 = ((($53)) + 156|0);
 HEAP32[$54>>2] = $52;
 $55 = ((($afh)) + 933|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = (($57) + 1)|0;
 $59 = $mod;
 $60 = ((($59)) + 128|0);
 HEAP32[$60>>2] = $58;
 $61 = $mod;
 $62 = ((($61)) + 140|0);
 HEAP32[$62>>2] = 26;
 $63 = $mod;
 $64 = ((($63)) + 140|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $mod;
 $67 = ((($66)) + 144|0);
 HEAP32[$67>>2] = $65;
 $68 = $mod;
 $69 = ((($68)) + 952|0);
 $70 = ((($afh)) + 934|0);
 $71 = $mod;
 $72 = ((($71)) + 156|0);
 $73 = HEAP32[$72>>2]|0;
 _memcpy(($69|0),($70|0),($73|0))|0;
 $74 = $1;
 _set_type($74,3040,$vararg_buffer);
 $75 = $mod;
 (_strncpy(($75|0),($afh|0),24)|0);
 $76 = $mod;
 $77 = (_instrument_init($76)|0);
 $78 = ($77|0)<(0);
 if ($78) {
  $0 = -1;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 $i = 0;
 while(1) {
  $79 = $i;
  $80 = $mod;
  $81 = ((($80)) + 140|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79|0)<($82|0);
  if (!($83)) {
   label = 19;
   break;
  }
  $84 = $mod;
  $85 = $i;
  $86 = (_subinstrument_alloc($84,$85,1)|0);
  $87 = ($86|0)<(0);
  if ($87) {
   label = 12;
   break;
  }
  $88 = $mod;
  $89 = $i;
  $90 = $i;
  $91 = ((($afh)) + 48|0);
  $92 = (($91) + (($90*34)|0)|0);
  (_instrument_name($88,$89,$92,23)|0);
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$99>>2] = 64;
  $100 = $i;
  $101 = $mod;
  $102 = ((($101)) + 176|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($100*764)|0)|0);
  $105 = ((($104)) + 756|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($106)) + 8|0);
  HEAP32[$107>>2] = 128;
  $108 = $i;
  $109 = $i;
  $110 = $mod;
  $111 = ((($110)) + 176|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + (($109*764)|0)|0);
  $114 = ((($113)) + 756|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($115)) + 40|0);
  HEAP32[$116>>2] = $108;
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 176|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($117*764)|0)|0);
  $122 = ((($121)) + 36|0);
  HEAP32[$122>>2] = 1;
  $j = 0;
  while(1) {
   $123 = $j;
   $124 = ($123|0)<(11);
   if (!($124)) {
    break;
   }
   $125 = $j;
   $126 = (3064 + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $i;
   $129 = ((($afh)) + 48|0);
   $130 = (($129) + (($128*34)|0)|0);
   $131 = ((($130)) + 23|0);
   $132 = (($131) + ($127)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $j;
   $135 = (($regs) + ($134)|0);
   HEAP8[$135>>0] = $133;
   $136 = $j;
   $137 = (($136) + 1)|0;
   $j = $137;
  }
  $138 = $1;
  $139 = $2;
  $140 = $i;
  $141 = $mod;
  $142 = ((($141)) + 180|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + (($140*52)|0)|0);
  $145 = (_load_sample($138,$139,4096,$144,$regs)|0);
  $146 = ($145|0)<(0);
  if ($146) {
   label = 17;
   break;
  }
  $147 = $i;
  $148 = (($147) + 1)|0;
  $i = $148;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 else if ((label|0) == 19) {
  $149 = ((($afh)) + 1071|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = ($151|0)==(16);
  $153 = $1;
  $154 = $2;
  if ($152) {
   $155 = (_load_unpacked_patterns($153,$154)|0);
   $156 = ($155|0)<(0);
   if ($156) {
    $0 = -1;
    $177 = $0;
    STACKTOP = sp;return ($177|0);
   }
  } else {
   $157 = (_load_packed_patterns($153,$154)|0);
   $158 = ($157|0)<(0);
   if ($158) {
    $0 = -1;
    $177 = $0;
    STACKTOP = sp;return ($177|0);
   }
  }
  $i = 0;
  while(1) {
   $159 = $i;
   $160 = $mod;
   $161 = ((($160)) + 136|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    break;
   }
   $164 = $i;
   $165 = $mod;
   $166 = ((($165)) + 184|0);
   $167 = (($166) + (($164*12)|0)|0);
   HEAP32[$167>>2] = 128;
   $168 = $i;
   $169 = $mod;
   $170 = ((($169)) + 184|0);
   $171 = (($170) + (($168*12)|0)|0);
   $172 = ((($171)) + 8|0);
   HEAP32[$172>>2] = 1;
   $173 = $i;
   $174 = (($173) + 1)|0;
   $i = $174;
  }
  $175 = $1;
  $176 = ((($175)) + 6556|0);
  HEAP32[$176>>2] = 23408;
  $0 = 0;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 return (0)|0;
}
function _load_unpacked_patterns($m,$f) {
 $m = $m|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $b = 0, $event = 0, $i = 0, $j = 0;
 var $mod = 0, $tmode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $1;
 $mod = $3;
 $tmode = 1;
 $4 = $mod;
 $5 = ((($4)) + 128|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6*9)|0;
 $8 = $mod;
 $9 = ((($8)) + 132|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = (_pattern_init($10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $0 = -1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $mod;
  $15 = ((($14)) + 128|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   label = 13;
   break;
  }
  $18 = $mod;
  $19 = $i;
  $20 = (_pattern_tracks_alloc($18,$19,64)|0);
  $21 = ($20|0)<(0);
  if ($21) {
   label = 6;
   break;
  }
  $j = 0;
  while(1) {
   $22 = $j;
   $23 = $mod;
   $24 = ((($23)) + 136|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25<<6;
   $27 = ($22|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $j;
   $29 = $mod;
   $30 = ((($29)) + 136|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($28|0) / ($31|0))&-1;
   $33 = $j;
   $34 = $mod;
   $35 = ((($34)) + 136|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($33|0) % ($36|0))&-1;
   $38 = $i;
   $39 = $1;
   $40 = ((($39)) + 168|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = (($44) + ($37<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = ((($47)) + 172|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 4|0);
   $53 = (($52) + ($32<<3)|0);
   $event = $53;
   $54 = $2;
   $55 = (_hio_read8($54)|0);
   $b = $55;
   $56 = $b;
   $57 = $event;
   $58 = $2;
   _read_event526($56,$57,$58);
   $59 = $event;
   $60 = ((($59)) + 4|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)==(15);
   if ($63) {
    $tmode = 3;
   }
   $64 = $tmode;
   $65 = $event;
   $66 = ((($65)) + 4|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = Math_imul($68, $64)|0;
   $70 = $69&255;
   HEAP8[$66>>0] = $70;
   $71 = $j;
   $72 = (($71) + 1)|0;
   $j = $72;
  }
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _load_packed_patterns($m,$f) {
 $m = $m|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $r = 0, $stored_tracks = 0, $tmode = 0, $w = 0, $w1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $1;
 $mod = $3;
 $tmode = 1;
 $4 = $mod;
 $5 = ((($4)) + 128|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (_calloc(4,$7)|0);
 $9 = $mod;
 $10 = ((($9)) + 168|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 128|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  $20 = $mod;
  if (!($19)) {
   break;
  }
  $21 = $i;
  $22 = (_pattern_alloc($20,$21)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   label = 6;
   break;
  }
  $j = 0;
  while(1) {
   $24 = $j;
   $25 = ($24|0)<(9);
   if (!($25)) {
    break;
   }
   $26 = $2;
   $27 = (_hio_read16l($26)|0);
   $w1 = $27;
   $28 = $w1;
   $29 = $28&65535;
   $30 = $j;
   $31 = $i;
   $32 = $mod;
   $33 = ((($32)) + 168|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = (($37) + ($30<<2)|0);
   HEAP32[$38>>2] = $29;
   $39 = $w1;
   $40 = $39&65535;
   $41 = $mod;
   $42 = ((($41)) + 132|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40|0)>($43|0);
   if ($44) {
    $45 = $w1;
    $46 = $45&65535;
    $47 = $mod;
    $48 = ((($47)) + 132|0);
    HEAP32[$48>>2] = $46;
   }
   $49 = $j;
   $50 = (($49) + 1)|0;
   $j = $50;
  }
  $51 = $i;
  $52 = $mod;
  $53 = ((($52)) + 168|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$56>>2] = 64;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $59 = ((($20)) + 132|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[$59>>2] = $61;
 $62 = $2;
 $63 = (_hio_read16l($62)|0);
 $64 = $63&65535;
 $stored_tracks = $64;
 $65 = $mod;
 $66 = ((($65)) + 132|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (_calloc(4,$67)|0);
 $69 = $mod;
 $70 = ((($69)) + 172|0);
 HEAP32[$70>>2] = $68;
 $71 = $mod;
 $72 = ((($71)) + 172|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if ($74) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = $stored_tracks;
  $77 = ($75|0)<($76|0);
  if (!($77)) {
   label = 28;
   break;
  }
  $78 = $2;
  $79 = (_hio_read16l($78)|0);
  $w = $79;
  $80 = $mod;
  $81 = $w;
  $82 = $81&65535;
  $83 = (_track_alloc($80,$82,64)|0);
  $84 = ($83|0)<(0);
  if ($84) {
   label = 18;
   break;
  }
  $r = 0;
  while(1) {
   $85 = $r;
   $86 = ($85|0)<(64);
   if (!($86)) {
    break;
   }
   $87 = $r;
   $88 = $w;
   $89 = $88&65535;
   $90 = $mod;
   $91 = ((($90)) + 172|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + ($89<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($94)) + 4|0);
   $96 = (($95) + ($87<<3)|0);
   $event = $96;
   $97 = $2;
   $98 = (_hio_read8($97)|0);
   $b = $98;
   $99 = $b;
   $100 = $99&255;
   $101 = $100 & 128;
   $102 = ($101|0)!=(0);
   $103 = $b;
   if ($102) {
    $104 = $103&255;
    $105 = $104 & 127;
    $106 = (($105) - 1)|0;
    $107 = $r;
    $108 = (($107) + ($106))|0;
    $r = $108;
   } else {
    $109 = $event;
    $110 = $2;
    _read_event526($103,$109,$110);
    $111 = $event;
    $112 = ((($111)) + 4|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = ($114|0)==(15);
    if ($115) {
     $tmode = 3;
    }
    $116 = $tmode;
    $117 = $event;
    $118 = ((($117)) + 4|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119&255;
    $121 = Math_imul($120, $116)|0;
    $122 = $121&255;
    HEAP8[$118>>0] = $122;
   }
   $123 = $r;
   $124 = (($123) + 1)|0;
   $r = $124;
  }
  $125 = $i;
  $126 = (($125) + 1)|0;
  $i = $126;
 }
 if ((label|0) == 18) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 else if ((label|0) == 28) {
  $0 = 0;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 return (0)|0;
}
function _read_event526($b,$event,$f) {
 $b = $b|0;
 $event = $event|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = $event;
 $2 = $f;
 $3 = $0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = $3;
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $0 = $7;
 $8 = $0;
 $9 = $8&255;
 $10 = $9 & 240;
 $11 = $10 >> 4;
 $12 = $11&255;
 $13 = $1;
 $14 = ((($13)) + 1|0);
 HEAP8[$14>>0] = $12;
 $15 = $0;
 $16 = $15&255;
 $17 = $16 & 15;
 $18 = $17&255;
 $0 = $18;
 $19 = $18&255;
 L1: do {
  switch ($19|0) {
  case 9: case 3:  {
   $0 = 0;
   $20 = $1;
   $21 = ((($20)) + 4|0);
   HEAP8[$21>>0] = 0;
   break;
  }
  case 7:  {
   $22 = $1;
   $23 = ((($22)) + 4|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)>(31);
   if ($26) {
    $0 = 0;
    $27 = $1;
    $28 = ((($27)) + 4|0);
    HEAP8[$28>>0] = 0;
    break L1;
   } else {
    $0 = 15;
    break L1;
   }
   break;
  }
  case 6:  {
   $0 = 13;
   break;
  }
  case 4:  {
   $0 = 12;
   break;
  }
  case 5:  {
   $0 = 11;
   break;
  }
  case 8:  {
   $0 = 3;
   break;
  }
  default: {
  }
  }
 } while(0);
 $29 = $0;
 $30 = $1;
 $31 = ((($30)) + 3|0);
 HEAP8[$31>>0] = $29;
 $32 = $2;
 $33 = (_hio_read8($32)|0);
 $0 = $33;
 $34 = $0;
 $35 = $34&255;
 $36 = $35 & 1;
 $37 = $36 << 4;
 $38 = $1;
 $39 = ((($38)) + 1|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 | $37;
 $43 = $42&255;
 HEAP8[$39>>0] = $43;
 $44 = $0;
 $45 = $44&255;
 $46 = $45 & 240;
 $47 = $46 >> 4;
 $48 = $47&255;
 $49 = $1;
 HEAP8[$49>>0] = $48;
 $50 = ($48<<24>>24)!=(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $0;
 $52 = $51&255;
 $53 = $52 & 14;
 $54 = $53 >> 1;
 $55 = (2 + ($54))|0;
 $56 = ($55*12)|0;
 $57 = $1;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = (($59) + ($56))|0;
 $61 = $60&255;
 HEAP8[$57>>0] = $61;
 STACKTOP = sp;return;
}
function _rad_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,16,$4)|0);
 $6 = ($5>>>0)<(16);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,3184,16)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _rad_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0;
 var $c = 0, $event = 0, $flags = 0, $i = 0, $j = 0, $mod = 0, $pos = 0, $ppat = 0, $r = 0, $sid = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sid = sp + 117|0;
 $ppat = sp + 48|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_seek($7,16,0)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $version = $9;
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $flags = $11;
 $12 = $mod;
 $13 = ((($12)) + 136|0);
 HEAP32[$13>>2] = 9;
 $14 = $mod;
 $15 = ((($14)) + 152|0);
 HEAP32[$15>>2] = 125;
 $16 = $flags;
 $17 = $16&255;
 $18 = $17 & 31;
 $19 = $mod;
 $20 = ((($19)) + 148|0);
 HEAP32[$20>>2] = $18;
 $21 = $mod;
 $22 = ((($21)) + 148|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<=(2);
 if ($24) {
  $25 = $mod;
  $26 = ((($25)) + 148|0);
  HEAP32[$26>>2] = 6;
 }
 $27 = $mod;
 $28 = ((($27)) + 144|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = $version;
 $31 = $30&255;
 $32 = $31 & 240;
 $33 = $32 >> 4;
 $34 = $version;
 $35 = $34&255;
 $36 = $35 & 15;
 HEAP32[$vararg_buffer>>2] = $33;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $36;
 _set_type($29,3168,$vararg_buffer);
 $37 = $flags;
 $38 = $37&255;
 $39 = $38 & 128;
 $40 = ($39|0)!=(0);
 if ($40) {
  while(1) {
   $41 = $2;
   $42 = (_hio_read8($41)|0);
   $b = $42;
   $43 = $42&255;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    break;
   }
  }
 }
 $45 = $2;
 $46 = (_hio_tell($45)|0);
 $pos = $46;
 $47 = $mod;
 $48 = ((($47)) + 140|0);
 HEAP32[$48>>2] = 0;
 while(1) {
  $49 = $2;
  $50 = (_hio_read8($49)|0);
  $b = $50;
  $51 = $50&255;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   break;
  }
  $53 = $b;
  $54 = $53&255;
  $55 = $mod;
  $56 = ((($55)) + 140|0);
  HEAP32[$56>>2] = $54;
  $57 = $2;
  (_hio_read($sid,1,11,$57)|0);
 }
 $58 = $2;
 $59 = $pos;
 (_hio_seek($58,$59,0)|0);
 $60 = $mod;
 $61 = ((($60)) + 140|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $mod;
 $64 = ((($63)) + 144|0);
 HEAP32[$64>>2] = $62;
 $65 = $mod;
 $66 = (_instrument_init($65)|0);
 $67 = ($66|0)<(0);
 if ($67) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 while(1) {
  $68 = $2;
  $69 = (_hio_read8($68)|0);
  $b = $69;
  $70 = $69&255;
  $71 = ($70|0)!=(0);
  if (!($71)) {
   break;
  }
  $72 = $2;
  (_hio_read($sid,1,11,$72)|0);
  $73 = $1;
  $74 = $2;
  $75 = $b;
  $76 = $75&255;
  $77 = (($76) - 1)|0;
  $78 = $mod;
  $79 = ((($78)) + 180|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + (($77*52)|0)|0);
  $82 = (_load_sample($73,$74,12288,$81,$sid)|0);
  $83 = ($82|0)<(0);
  if ($83) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = $mod;
  $86 = ((($85)) + 140|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($84|0)<($87|0);
  if (!($88)) {
   break;
  }
  $89 = $mod;
  $90 = $i;
  $91 = (_subinstrument_alloc($89,$90,1)|0);
  $92 = ($91|0)<(0);
  if ($92) {
   label = 16;
   break;
  }
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$99>>2] = 64;
  $100 = $i;
  $101 = $mod;
  $102 = ((($101)) + 176|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($100*764)|0)|0);
  $105 = ((($104)) + 756|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($106)) + 8|0);
  HEAP32[$107>>2] = 128;
  $108 = $i;
  $109 = $mod;
  $110 = ((($109)) + 176|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + (($108*764)|0)|0);
  $113 = ((($112)) + 756|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($114)) + 12|0);
  HEAP32[$115>>2] = -1;
  $116 = $i;
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 176|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($117*764)|0)|0);
  $122 = ((($121)) + 756|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($123)) + 40|0);
  HEAP32[$124>>2] = $116;
  $125 = $i;
  $126 = $mod;
  $127 = ((($126)) + 176|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + (($125*764)|0)|0);
  $130 = ((($129)) + 36|0);
  HEAP32[$130>>2] = 1;
  $131 = $i;
  $132 = (($131) + 1)|0;
  $i = $132;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $133 = $2;
 $134 = (_hio_read8($133)|0);
 $135 = $134&255;
 $136 = $mod;
 $137 = ((($136)) + 156|0);
 HEAP32[$137>>2] = $135;
 $i = 0;
 $j = 0;
 while(1) {
  $138 = $i;
  $139 = $mod;
  $140 = ((($139)) + 156|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($138|0)<($141|0);
  if (!($142)) {
   break;
  }
  $143 = $2;
  $144 = (_hio_read8($143)|0);
  $b = $144;
  $145 = $b;
  $146 = $145&255;
  $147 = ($146|0)<(128);
  if ($147) {
   $148 = $b;
   $149 = $j;
   $150 = (($149) + 1)|0;
   $j = $150;
   $151 = $mod;
   $152 = ((($151)) + 952|0);
   $153 = (($152) + ($149)|0);
   HEAP8[$153>>0] = $148;
  }
  $154 = $i;
  $155 = (($154) + 1)|0;
  $i = $155;
 }
 $i = 0;
 $156 = $mod;
 $157 = ((($156)) + 128|0);
 HEAP32[$157>>2] = 0;
 while(1) {
  $158 = $i;
  $159 = ($158|0)<(32);
  if (!($159)) {
   break;
  }
  $160 = $2;
  $161 = (_hio_read16l($160)|0);
  $162 = $i;
  $163 = (($ppat) + ($162<<1)|0);
  HEAP16[$163>>1] = $161;
  $164 = $i;
  $165 = (($ppat) + ($164<<1)|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = ($166<<16>>16)!=(0);
  if ($167) {
   $168 = $mod;
   $169 = ((($168)) + 128|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + 1)|0;
   HEAP32[$169>>2] = $171;
  }
  $172 = $i;
  $173 = (($172) + 1)|0;
  $i = $173;
 }
 $174 = $mod;
 $175 = ((($174)) + 128|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = $mod;
 $178 = ((($177)) + 136|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = Math_imul($176, $179)|0;
 $181 = $mod;
 $182 = ((($181)) + 132|0);
 HEAP32[$182>>2] = $180;
 $183 = $mod;
 $184 = (_pattern_init($183)|0);
 $185 = ($184|0)<(0);
 if ($185) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 128|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($186|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $mod;
  $192 = $i;
  $193 = (_pattern_tracks_alloc($191,$192,64)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   label = 33;
   break;
  }
  $195 = $i;
  $196 = (($ppat) + ($195<<1)|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = ($198|0)==(0);
  if (!($199)) {
   $200 = $2;
   $201 = $3;
   $202 = $i;
   $203 = (($ppat) + ($202<<1)|0);
   $204 = HEAP16[$203>>1]|0;
   $205 = $204&65535;
   $206 = (($201) + ($205))|0;
   (_hio_seek($200,$206,0)|0);
   while(1) {
    $207 = $2;
    $208 = (_hio_read8($207)|0);
    $r = $208;
    while(1) {
     $209 = $2;
     $210 = (_hio_read8($209)|0);
     $c = $210;
     $211 = $r;
     $212 = $211&255;
     $213 = $212 & 127;
     $214 = $c;
     $215 = $214&255;
     $216 = $215 & 127;
     $217 = $i;
     $218 = $1;
     $219 = ((($218)) + 168|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (($220) + ($217<<2)|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ((($222)) + 4|0);
     $224 = (($223) + ($216<<2)|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = $1;
     $227 = ((($226)) + 172|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (($228) + ($225<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = ((($230)) + 4|0);
     $232 = (($231) + ($213<<3)|0);
     $event = $232;
     $233 = $2;
     $234 = (_hio_read8($233)|0);
     $b = $234;
     $235 = $b;
     $236 = $235&255;
     $237 = $236 & 128;
     $238 = $237 >> 3;
     $239 = $238&255;
     $240 = $event;
     $241 = ((($240)) + 1|0);
     HEAP8[$241>>0] = $239;
     $242 = $b;
     $243 = $242&255;
     $244 = $243 & 15;
     $245 = $244&255;
     $246 = $event;
     HEAP8[$246>>0] = $245;
     $247 = $event;
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = ($249|0)==(15);
     $251 = $event;
     if ($250) {
      HEAP8[$251>>0] = -127;
     } else {
      $252 = HEAP8[$251>>0]|0;
      $253 = ($252<<24>>24)!=(0);
      if ($253) {
       $254 = $b;
       $255 = $254&255;
       $256 = $255 & 112;
       $257 = $256 >> 4;
       $258 = ($257*12)|0;
       $259 = (26 + ($258))|0;
       $260 = $event;
       $261 = HEAP8[$260>>0]|0;
       $262 = $261&255;
       $263 = (($262) + ($259))|0;
       $264 = $263&255;
       HEAP8[$260>>0] = $264;
      }
     }
     $265 = $2;
     $266 = (_hio_read8($265)|0);
     $b = $266;
     $267 = $b;
     $268 = $267&255;
     $269 = $268 & 240;
     $270 = $269 >> 4;
     $271 = $event;
     $272 = ((($271)) + 1|0);
     $273 = HEAP8[$272>>0]|0;
     $274 = $273&255;
     $275 = $274 | $270;
     $276 = $275&255;
     HEAP8[$272>>0] = $276;
     $277 = $b;
     $278 = $277&255;
     $279 = $278 & 15;
     $280 = $279&255;
     $281 = $event;
     $282 = ((($281)) + 3|0);
     HEAP8[$282>>0] = $280;
     $283 = $event;
     $284 = ((($283)) + 3|0);
     $285 = HEAP8[$284>>0]|0;
     $286 = ($285<<24>>24)!=(0);
     if ($286) {
      $287 = $2;
      $288 = (_hio_read8($287)|0);
      $b = $288;
      $289 = $b;
      $290 = $event;
      $291 = ((($290)) + 4|0);
      HEAP8[$291>>0] = $289;
      $292 = $event;
      $293 = ((($292)) + 3|0);
      $294 = HEAP8[$293>>0]|0;
      $295 = $294&255;
      $296 = ($295|0)==(15);
      if ($296) {
       $297 = $event;
       $298 = ((($297)) + 4|0);
       $299 = HEAP8[$298>>0]|0;
       $300 = $299&255;
       $301 = ($300|0)<=(2);
       if ($301) {
        $302 = $event;
        $303 = ((($302)) + 4|0);
        HEAP8[$303>>0] = 6;
       }
      }
     }
     $304 = $c;
     $305 = $304&255;
     $306 = $305 ^ -1;
     $307 = $306 & 128;
     $308 = ($307|0)!=(0);
     if (!($308)) {
      break;
     }
    }
    $309 = $r;
    $310 = $309&255;
    $311 = $310 ^ -1;
    $312 = $311 & 128;
    $313 = ($312|0)!=(0);
    if (!($313)) {
     break;
    }
   }
  }
  $314 = $i;
  $315 = (($314) + 1)|0;
  $i = $315;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $i = 0;
 while(1) {
  $316 = $i;
  $317 = $mod;
  $318 = ((($317)) + 136|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ($316|0)<($319|0);
  if (!($320)) {
   break;
  }
  $321 = $i;
  $322 = $mod;
  $323 = ((($322)) + 184|0);
  $324 = (($323) + (($321*12)|0)|0);
  HEAP32[$324>>2] = 128;
  $325 = $i;
  $326 = $mod;
  $327 = ((($326)) + 184|0);
  $328 = (($327) + (($325*12)|0)|0);
  $329 = ((($328)) + 8|0);
  HEAP32[$329>>2] = 1;
  $330 = $i;
  $331 = (($330) + 1)|0;
  $i = $331;
 }
 $332 = $1;
 $333 = ((($332)) + 6556|0);
 HEAP32[$333>>2] = 23408;
 $334 = $1;
 $335 = ((($334)) + 1280|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = $336 | 4096;
 HEAP32[$335>>2] = $337;
 $0 = 0;
 $338 = $0;
 STACKTOP = sp;return ($338|0);
}
function _ult_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,15,$4)|0);
 $6 = ($5>>>0)<(15);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,3320,14)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   }
   $9 = ((($buf)) + 14|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)<(48);
   if (!($12)) {
    $13 = ((($buf)) + 14|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)>(52);
    if (!($16)) {
     $17 = $1;
     $18 = $2;
     _read_title($17,$18,32);
     $0 = 0;
     break;
    }
   }
   $0 = -1;
  }
 } while(0);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _ult_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $event = 0, $i = 0, $j = 0, $k = 0, $keep_porta1 = 0, $keep_porta2 = 0, $mod = 0, $ue = 0, $ufh = 0, $ufh2 = 0, $uih = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $ver = 0, $verstr = 0, $x8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ufh = sp + 416|0;
 $ufh2 = sp + 152|0;
 $uih = sp + 32|0;
 $ue = sp + 148|0;
 $verstr = sp + 16|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 ;HEAP32[$verstr>>2]=HEAP32[3240>>2]|0;HEAP32[$verstr+4>>2]=HEAP32[3240+4>>2]|0;HEAP32[$verstr+8>>2]=HEAP32[3240+8>>2]|0;HEAP32[$verstr+12>>2]=HEAP32[3240+12>>2]|0;
 $keep_porta1 = 0;
 $keep_porta2 = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ufh,15,1,$7)|0);
 $8 = ((($ufh)) + 15|0);
 $9 = $2;
 (_hio_read($8,32,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($ufh)) + 47|0);
 HEAP8[$12>>0] = $11;
 $13 = ((($ufh)) + 14|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) - 48)|0;
 $ver = $16;
 $17 = $mod;
 $18 = ((($ufh)) + 15|0);
 (_strncpy(($17|0),($18|0),32)|0);
 $19 = ((($ufh)) + 15|0);
 HEAP8[$19>>0] = 0;
 $20 = $1;
 $21 = $ver;
 $22 = (($21) - 1)|0;
 $23 = (($verstr) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $ver;
 HEAP32[$vararg_buffer>>2] = $24;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 _set_type($20,3256,$vararg_buffer);
 $26 = $2;
 $27 = ((($ufh)) + 47|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29<<5;
 (_hio_seek($26,$30,1)|0);
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = $32&255;
 $34 = $mod;
 $35 = ((($34)) + 144|0);
 HEAP32[$35>>2] = $33;
 $36 = $mod;
 $37 = ((($36)) + 140|0);
 HEAP32[$37>>2] = $33;
 $38 = $mod;
 $39 = (_instrument_init($38)|0);
 $40 = ($39|0)<(0);
 if ($40) {
  $0 = -1;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 $i = 0;
 while(1) {
  $41 = $i;
  $42 = $mod;
  $43 = ((($42)) + 140|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $mod;
  $47 = $i;
  $48 = (_subinstrument_alloc($46,$47,1)|0);
  $49 = ($48|0)<(0);
  if ($49) {
   label = 6;
   break;
  }
  $50 = $2;
  (_hio_read($uih,32,1,$50)|0);
  $51 = ((($uih)) + 32|0);
  $52 = $2;
  (_hio_read($51,12,1,$52)|0);
  $53 = $2;
  $54 = (_hio_read32l($53)|0);
  $55 = ((($uih)) + 44|0);
  HEAP32[$55>>2] = $54;
  $56 = $2;
  $57 = (_hio_read32l($56)|0);
  $58 = ((($uih)) + 48|0);
  HEAP32[$58>>2] = $57;
  $59 = $2;
  $60 = (_hio_read32l($59)|0);
  $61 = ((($uih)) + 52|0);
  HEAP32[$61>>2] = $60;
  $62 = $2;
  $63 = (_hio_read32l($62)|0);
  $64 = ((($uih)) + 56|0);
  HEAP32[$64>>2] = $63;
  $65 = $2;
  $66 = (_hio_read8($65)|0);
  $67 = ((($uih)) + 60|0);
  HEAP8[$67>>0] = $66;
  $68 = $2;
  $69 = (_hio_read8($68)|0);
  $70 = ((($uih)) + 61|0);
  HEAP8[$70>>0] = $69;
  $71 = $2;
  $72 = (_hio_read16l($71)|0);
  $73 = ((($uih)) + 62|0);
  HEAP16[$73>>1] = $72;
  $74 = $ver;
  $75 = ($74|0)<(4);
  if ($75) {
   $80 = 0;
  } else {
   $76 = $2;
   $77 = (_hio_read16l($76)|0);
   $78 = $77&65535;
   $80 = $78;
  }
  $79 = $80&65535;
  $81 = ((($uih)) + 64|0);
  HEAP16[$81>>1] = $79;
  $82 = $ver;
  $83 = ($82|0)>(3);
  if ($83) {
   $84 = ((($uih)) + 62|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85&65535;
   $87 = ((($uih)) + 64|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88&65535;
   $90 = $89 ^ $86;
   $91 = $90&65535;
   HEAP16[$87>>1] = $91;
   $92 = ((($uih)) + 64|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93&65535;
   $95 = ((($uih)) + 62|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&65535;
   $98 = $97 ^ $94;
   $99 = $98&65535;
   HEAP16[$95>>1] = $99;
   $100 = ((($uih)) + 62|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101&65535;
   $103 = ((($uih)) + 64|0);
   $104 = HEAP16[$103>>1]|0;
   $105 = $104&65535;
   $106 = $105 ^ $102;
   $107 = $106&65535;
   HEAP16[$103>>1] = $107;
  }
  $108 = ((($uih)) + 56|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($uih)) + 52|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) - ($111))|0;
  $113 = $i;
  $114 = $mod;
  $115 = ((($114)) + 180|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + (($113*52)|0)|0);
  $118 = ((($117)) + 32|0);
  HEAP32[$118>>2] = $112;
  $119 = ((($uih)) + 44|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $i;
  $122 = $mod;
  $123 = ((($122)) + 180|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + (($121*52)|0)|0);
  $126 = ((($125)) + 36|0);
  HEAP32[$126>>2] = $120;
  $127 = ((($uih)) + 48|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 180|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + (($129*52)|0)|0);
  $134 = ((($133)) + 40|0);
  HEAP32[$134>>2] = $128;
  $135 = $i;
  $136 = $mod;
  $137 = ((($136)) + 180|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + (($135*52)|0)|0);
  $140 = ((($139)) + 32|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)>(0);
  if ($142) {
   $143 = $i;
   $144 = $mod;
   $145 = ((($144)) + 176|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($146) + (($143*764)|0)|0);
   $148 = ((($147)) + 36|0);
   HEAP32[$148>>2] = 1;
  }
  $149 = ((($uih)) + 61|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  switch ($151|0) {
  case 28:  {
   $176 = $i;
   $177 = $mod;
   $178 = ((($177)) + 180|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) + (($176*52)|0)|0);
   $181 = ((($180)) + 44|0);
   HEAP32[$181>>2] = 11;
   break;
  }
  case 24:  {
   $170 = $i;
   $171 = $mod;
   $172 = ((($171)) + 180|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($173) + (($170*52)|0)|0);
   $175 = ((($174)) + 44|0);
   HEAP32[$175>>2] = 10;
   break;
  }
  case 4: case 20:  {
   $152 = $i;
   $153 = $mod;
   $154 = ((($153)) + 180|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + (($152*52)|0)|0);
   $157 = ((($156)) + 44|0);
   HEAP32[$157>>2] = 1;
   break;
  }
  case 12:  {
   $164 = $i;
   $165 = $mod;
   $166 = ((($165)) + 180|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + (($164*52)|0)|0);
   $169 = ((($168)) + 44|0);
   HEAP32[$169>>2] = 3;
   break;
  }
  case 8:  {
   $158 = $i;
   $159 = $mod;
   $160 = ((($159)) + 180|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + (($158*52)|0)|0);
   $163 = ((($162)) + 44|0);
   HEAP32[$163>>2] = 2;
   break;
  }
  default: {
  }
  }
  $182 = ((($uih)) + 60|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = $i;
  $186 = $mod;
  $187 = ((($186)) + 176|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + (($185*764)|0)|0);
  $190 = ((($189)) + 756|0);
  $191 = HEAP32[$190>>2]|0;
  HEAP32[$191>>2] = $184;
  $192 = $i;
  $193 = $mod;
  $194 = ((($193)) + 176|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + (($192*764)|0)|0);
  $197 = ((($196)) + 756|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ((($198)) + 8|0);
  HEAP32[$199>>2] = 128;
  $200 = $i;
  $201 = $i;
  $202 = $mod;
  $203 = ((($202)) + 176|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = (($204) + (($201*764)|0)|0);
  $206 = ((($205)) + 756|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($207)) + 40|0);
  HEAP32[$208>>2] = $200;
  $209 = $mod;
  $210 = $i;
  (_instrument_name($209,$210,$uih,24)|0);
  $211 = $ver;
  $212 = ($211|0)>(3);
  if ($212) {
   $213 = ((($uih)) + 64|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214&65535;
   $216 = $i;
   $217 = $mod;
   $218 = ((($217)) + 176|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (($219) + (($216*764)|0)|0);
   $221 = ((($220)) + 756|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = ((($222)) + 12|0);
   $224 = $i;
   $225 = $mod;
   $226 = ((($225)) + 176|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + (($224*764)|0)|0);
   $229 = ((($228)) + 756|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($230)) + 16|0);
   _c2spd_to_note($215,$223,$231);
  }
  $232 = $i;
  $233 = (($232) + 1)|0;
  $i = $233;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 $234 = $2;
 (_hio_read($ufh2,256,1,$234)|0);
 $235 = $2;
 $236 = (_hio_read8($235)|0);
 $237 = ((($ufh2)) + 256|0);
 HEAP8[$237>>0] = $236;
 $238 = $2;
 $239 = (_hio_read8($238)|0);
 $240 = ((($ufh2)) + 257|0);
 HEAP8[$240>>0] = $239;
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = ($241|0)<(256);
  if (!($242)) {
   break;
  }
  $243 = $i;
  $244 = (($ufh2) + ($243)|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = ($246|0)==(255);
  if ($247) {
   break;
  }
  $248 = $i;
  $249 = (($ufh2) + ($248)|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $i;
  $252 = $mod;
  $253 = ((($252)) + 952|0);
  $254 = (($253) + ($251)|0);
  HEAP8[$254>>0] = $250;
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 $257 = $i;
 $258 = $mod;
 $259 = ((($258)) + 156|0);
 HEAP32[$259>>2] = $257;
 $260 = ((($ufh2)) + 256|0);
 $261 = HEAP8[$260>>0]|0;
 $262 = $261&255;
 $263 = (($262) + 1)|0;
 $264 = $mod;
 $265 = ((($264)) + 136|0);
 HEAP32[$265>>2] = $263;
 $266 = ((($ufh2)) + 257|0);
 $267 = HEAP8[$266>>0]|0;
 $268 = $267&255;
 $269 = (($268) + 1)|0;
 $270 = $mod;
 $271 = ((($270)) + 128|0);
 HEAP32[$271>>2] = $269;
 $272 = $mod;
 $273 = ((($272)) + 148|0);
 HEAP32[$273>>2] = 6;
 $274 = $mod;
 $275 = ((($274)) + 152|0);
 HEAP32[$275>>2] = 125;
 $276 = $mod;
 $277 = ((($276)) + 136|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $mod;
 $280 = ((($279)) + 128|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = Math_imul($278, $281)|0;
 $283 = $mod;
 $284 = ((($283)) + 132|0);
 HEAP32[$284>>2] = $282;
 $i = 0;
 while(1) {
  $285 = $i;
  $286 = $mod;
  $287 = ((($286)) + 136|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ($285|0)<($288|0);
  if (!($289)) {
   break;
  }
  $290 = $ver;
  $291 = ($290|0)>=(3);
  if ($291) {
   $292 = $2;
   $293 = (_hio_read8($292)|0);
   $x8 = $293;
   $294 = $x8;
   $295 = $294&255;
   $296 = ($295*255)|0;
   $297 = (($296|0) / 15)&-1;
   $298 = $i;
   $299 = $mod;
   $300 = ((($299)) + 184|0);
   $301 = (($300) + (($298*12)|0)|0);
   HEAP32[$301>>2] = $297;
  } else {
   $302 = $i;
   $303 = (($302) + 1)|0;
   $304 = (($303|0) / 2)&-1;
   $305 = (($304|0) % 2)&-1;
   $306 = ($305*255)|0;
   $307 = $i;
   $308 = $mod;
   $309 = ((($308)) + 184|0);
   $310 = (($309) + (($307*12)|0)|0);
   HEAP32[$310>>2] = $306;
  }
  $311 = $i;
  $312 = (($311) + 1)|0;
  $i = $312;
 }
 $313 = $mod;
 $314 = (_pattern_init($313)|0);
 $315 = ($314|0)<(0);
 if ($315) {
  $0 = -1;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 $i = 0;
 while(1) {
  $316 = $i;
  $317 = $mod;
  $318 = ((($317)) + 128|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ($316|0)<($319|0);
  if (!($320)) {
   break;
  }
  $321 = $mod;
  $322 = $i;
  $323 = (_pattern_tracks_alloc($321,$322,64)|0);
  $324 = ($323|0)<(0);
  if ($324) {
   label = 37;
   break;
  }
  $325 = $i;
  $326 = (($325) + 1)|0;
  $i = $326;
 }
 if ((label|0) == 37) {
  $0 = -1;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 $i = 0;
 while(1) {
  $327 = $i;
  $328 = $mod;
  $329 = ((($328)) + 136|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = ($327|0)<($330|0);
  if (!($331)) {
   break;
  }
  $j = 0;
  L60: while(1) {
   $332 = $j;
   $333 = $mod;
   $334 = ((($333)) + 128|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = $335<<6;
   $337 = ($332|0)<($336|0);
   if (!($337)) {
    break;
   }
   $cnt = 1;
   $338 = $2;
   $339 = (_hio_read8($338)|0);
   $x8 = $339;
   $340 = $x8;
   $341 = $340&255;
   $342 = ($341|0)==(252);
   if ($342) {
    $343 = $2;
    $344 = (_hio_read8($343)|0);
    $345 = $344&255;
    $cnt = $345;
    $346 = $2;
    $347 = (_hio_read8($346)|0);
    $x8 = $347;
   }
   $348 = $2;
   (_hio_read($ue,4,1,$348)|0);
   $349 = $cnt;
   $350 = ($349|0)==(0);
   if ($350) {
    $351 = $cnt;
    $352 = (($351) + 1)|0;
    $cnt = $352;
   }
   $k = 0;
   while(1) {
    $353 = $k;
    $354 = $cnt;
    $355 = ($353|0)<($354|0);
    if (!($355)) {
     continue L60;
    }
    $356 = $j;
    $357 = $356 & 63;
    $358 = $i;
    $359 = $j;
    $360 = $359 >> 6;
    $361 = $1;
    $362 = ((($361)) + 168|0);
    $363 = HEAP32[$362>>2]|0;
    $364 = (($363) + ($360<<2)|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = ((($365)) + 4|0);
    $367 = (($366) + ($358<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = $1;
    $370 = ((($369)) + 172|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = (($371) + ($368<<2)|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = ((($373)) + 4|0);
    $375 = (($374) + ($357<<3)|0);
    $event = $375;
    $376 = $event;
    ;HEAP8[$376>>0]=0|0;HEAP8[$376+1>>0]=0|0;HEAP8[$376+2>>0]=0|0;HEAP8[$376+3>>0]=0|0;HEAP8[$376+4>>0]=0|0;HEAP8[$376+5>>0]=0|0;HEAP8[$376+6>>0]=0|0;HEAP8[$376+7>>0]=0|0;
    $377 = $x8;
    $378 = ($377<<24>>24)!=(0);
    if ($378) {
     $379 = $x8;
     $380 = $379&255;
     $381 = (($380) + 36)|0;
     $382 = $381&255;
     $383 = $event;
     HEAP8[$383>>0] = $382;
    }
    $384 = HEAP8[$ue>>0]|0;
    $385 = $event;
    $386 = ((($385)) + 1|0);
    HEAP8[$386>>0] = $384;
    $387 = ((($ue)) + 1|0);
    $388 = HEAP8[$387>>0]|0;
    $389 = $388&255;
    $390 = $389 & 240;
    $391 = $390 >> 4;
    $392 = $391&255;
    $393 = $event;
    $394 = ((($393)) + 3|0);
    HEAP8[$394>>0] = $392;
    $395 = ((($ue)) + 1|0);
    $396 = HEAP8[$395>>0]|0;
    $397 = $396&255;
    $398 = $397 & 15;
    $399 = $398&255;
    $400 = $event;
    $401 = ((($400)) + 5|0);
    HEAP8[$401>>0] = $399;
    $402 = ((($ue)) + 3|0);
    $403 = HEAP8[$402>>0]|0;
    $404 = $event;
    $405 = ((($404)) + 4|0);
    HEAP8[$405>>0] = $403;
    $406 = ((($ue)) + 2|0);
    $407 = HEAP8[$406>>0]|0;
    $408 = $event;
    $409 = ((($408)) + 6|0);
    HEAP8[$409>>0] = $407;
    $410 = $event;
    $411 = ((($410)) + 3|0);
    $412 = HEAP8[$411>>0]|0;
    $413 = $412&255;
    switch ($413|0) {
    case 0:  {
     $414 = $event;
     $415 = ((($414)) + 4|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = ($416<<24>>24)!=(0);
     if ($417) {
      $keep_porta1 = 0;
     }
     $418 = $keep_porta1;
     $419 = ($418|0)!=(0);
     if ($419) {
      $420 = $event;
      $421 = ((($420)) + 3|0);
      HEAP8[$421>>0] = 3;
      $422 = $keep_porta1;
      $423 = (($422) + -1)|0;
      $keep_porta1 = $423;
     }
     break;
    }
    case 9:  {
     $436 = $event;
     $437 = ((($436)) + 4|0);
     $438 = HEAP8[$437>>0]|0;
     $439 = $438&255;
     $440 = $439 << 2;
     $441 = $440&255;
     HEAP8[$437>>0] = $441;
     break;
    }
    case 6: case 5:  {
     $424 = $event;
     $425 = ((($424)) + 4|0);
     HEAP8[$425>>0] = 0;
     $426 = $event;
     $427 = ((($426)) + 3|0);
     HEAP8[$427>>0] = 0;
     break;
    }
    case 3:  {
     $keep_porta1 = 32;
     break;
    }
    case 11:  {
     $428 = $event;
     $429 = ((($428)) + 3|0);
     HEAP8[$429>>0] = 8;
     $430 = $event;
     $431 = ((($430)) + 4|0);
     $432 = HEAP8[$431>>0]|0;
     $433 = $432&255;
     $434 = $433 << 4;
     $435 = $434&255;
     HEAP8[$431>>0] = $435;
     break;
    }
    default: {
    }
    }
    $442 = $event;
    $443 = ((($442)) + 5|0);
    $444 = HEAP8[$443>>0]|0;
    $445 = $444&255;
    switch ($445|0) {
    case 3:  {
     $keep_porta2 = 32;
     break;
    }
    case 0:  {
     $446 = $event;
     $447 = ((($446)) + 6|0);
     $448 = HEAP8[$447>>0]|0;
     $449 = ($448<<24>>24)!=(0);
     if ($449) {
      $keep_porta2 = 0;
     }
     $450 = $keep_porta2;
     $451 = ($450|0)!=(0);
     if ($451) {
      $452 = $event;
      $453 = ((($452)) + 5|0);
      HEAP8[$453>>0] = 3;
      $454 = $keep_porta2;
      $455 = (($454) + -1)|0;
      $keep_porta2 = $455;
     }
     break;
    }
    case 9:  {
     $468 = $event;
     $469 = ((($468)) + 6|0);
     $470 = HEAP8[$469>>0]|0;
     $471 = $470&255;
     $472 = $471 << 2;
     $473 = $472&255;
     HEAP8[$469>>0] = $473;
     break;
    }
    case 6: case 5:  {
     $456 = $event;
     $457 = ((($456)) + 6|0);
     HEAP8[$457>>0] = 0;
     $458 = $event;
     $459 = ((($458)) + 5|0);
     HEAP8[$459>>0] = 0;
     break;
    }
    case 11:  {
     $460 = $event;
     $461 = ((($460)) + 5|0);
     HEAP8[$461>>0] = 8;
     $462 = $event;
     $463 = ((($462)) + 6|0);
     $464 = HEAP8[$463>>0]|0;
     $465 = $464&255;
     $466 = $465 << 4;
     $467 = $466&255;
     HEAP8[$463>>0] = $467;
     break;
    }
    default: {
    }
    }
    $474 = $k;
    $475 = (($474) + 1)|0;
    $k = $475;
    $476 = $j;
    $477 = (($476) + 1)|0;
    $j = $477;
   }
  }
  $478 = $i;
  $479 = (($478) + 1)|0;
  $i = $479;
 }
 $i = 0;
 while(1) {
  $480 = $i;
  $481 = $mod;
  $482 = ((($481)) + 140|0);
  $483 = HEAP32[$482>>2]|0;
  $484 = ($480|0)<($483|0);
  if (!($484)) {
   label = 77;
   break;
  }
  $485 = $i;
  $486 = $mod;
  $487 = ((($486)) + 180|0);
  $488 = HEAP32[$487>>2]|0;
  $489 = (($488) + (($485*52)|0)|0);
  $490 = ((($489)) + 32|0);
  $491 = HEAP32[$490>>2]|0;
  $492 = ($491|0)!=(0);
  if ($492) {
   $493 = $1;
   $494 = $2;
   $495 = $i;
   $496 = $mod;
   $497 = ((($496)) + 180|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = (($498) + (($495*52)|0)|0);
   $500 = (_load_sample($493,$494,0,$499,0)|0);
   $501 = ($500|0)<(0);
   if ($501) {
    label = 75;
    break;
   }
  }
  $502 = $i;
  $503 = (($502) + 1)|0;
  $i = $503;
 }
 if ((label|0) == 75) {
  $0 = -1;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 else if ((label|0) == 77) {
  $504 = $1;
  $505 = ((($504)) + 1268|0);
  HEAP32[$505>>2] = 256;
  $0 = 0;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 return (0)|0;
}
function _mdl_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1145914444);
 if ($6) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $7 = $1;
 (_hio_read8($7)|0);
 $8 = $1;
 $9 = (_hio_read16b($8)|0);
 $id = $9;
 $10 = $id;
 $11 = $10&65535;
 $12 = ($11|0)==(18766);
 $13 = $1;
 if ($12) {
  (_hio_read32b($13)|0);
  $14 = $1;
  $15 = $2;
  _read_title($14,$15,32);
 } else {
  $16 = $2;
  _read_title($13,$16,0);
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _mdl_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $e = 0, $handle = 0, $i = 0, $j = 0, $k = 0;
 var $l = 0, $mod = 0, $retval = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 112|0;
 $data = sp + 16|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $retval = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 dest=$data; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read($buf,1,1,$8)|0);
 $9 = (_iff_new()|0);
 $handle = $9;
 $10 = $handle;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $272 = $0;
  STACKTOP = sp;return ($272|0);
 }
 $12 = $handle;
 (_iff_register($12,3368,222)|0);
 $13 = $handle;
 (_iff_register($13,3376,223)|0);
 $14 = $handle;
 (_iff_register($14,3384,224)|0);
 $15 = $handle;
 (_iff_register($15,3392,225)|0);
 $16 = $handle;
 (_iff_register($16,3400,226)|0);
 $17 = $handle;
 (_iff_register($17,3408,227)|0);
 $18 = HEAP8[$buf>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = $19 & 240;
 $21 = $20 >> 4;
 $22 = ($21|0)!=(0);
 $23 = $handle;
 if ($22) {
  (_iff_register($23,3416,228)|0);
  $24 = $handle;
  (_iff_register($24,3424,229)|0);
  $25 = $handle;
  (_iff_register($25,3432,230)|0);
 } else {
  (_iff_register($23,3424,231)|0);
  $26 = $handle;
  (_iff_register($26,3432,232)|0);
 }
 $27 = $handle;
 _iff_id_size($27,2);
 $28 = $handle;
 _iff_set_quirk($28,1);
 $29 = $1;
 $30 = HEAP8[$buf>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = $31 & 240;
 $33 = $32 >> 4;
 $34 = HEAP8[$buf>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = $35 & 15;
 HEAP32[$vararg_buffer>>2] = $33;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $36;
 _set_type($29,3440,$vararg_buffer);
 $37 = $1;
 $38 = ((($37)) + 1268|0);
 HEAP32[$38>>2] = 255;
 $39 = $1;
 $40 = ((($39)) + 1264|0);
 HEAP32[$40>>2] = 8363;
 $41 = ((($data)) + 36|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($data)) + 32|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($data)) + 28|0);
 HEAP32[$43>>2] = 0;
 $44 = (_calloc(256,4)|0);
 $45 = ((($data)) + 4|0);
 HEAP32[$45>>2] = $44;
 $46 = (_calloc(256,4)|0);
 HEAP32[$data>>2] = $46;
 $47 = (_malloc(1024)|0);
 $48 = ((($data)) + 8|0);
 HEAP32[$48>>2] = $47;
 $49 = (_malloc(1024)|0);
 $50 = ((($data)) + 12|0);
 HEAP32[$50>>2] = $49;
 $51 = (_malloc(1024)|0);
 $52 = ((($data)) + 16|0);
 HEAP32[$52>>2] = $51;
 $53 = (_calloc(256,4)|0);
 $54 = ((($data)) + 20|0);
 HEAP32[$54>>2] = $53;
 $i = 0;
 while(1) {
  $55 = $i;
  $56 = ($55|0)<(256);
  if (!($56)) {
   break;
  }
  $57 = $i;
  $58 = ((($data)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($57<<2)|0);
  HEAP32[$60>>2] = -1;
  $61 = $i;
  $62 = ((($data)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($61<<2)|0);
  HEAP32[$64>>2] = -1;
  $65 = $i;
  $66 = ((($data)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = -1;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = $handle;
 $72 = $1;
 $73 = $2;
 $74 = (_iff_load($71,$72,$73,$data)|0);
 $75 = ($74|0)<(0);
 $76 = $handle;
 _iff_release($76);
 L13: do {
  if ($75) {
   $retval = -1;
  } else {
   $i = 0;
   while(1) {
    $77 = $i;
    $78 = $mod;
    $79 = ((($78)) + 132|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($77|0)<($80|0);
    if (!($81)) {
     break;
    }
    $j = 0;
    while(1) {
     $82 = $j;
     $83 = $i;
     $84 = $mod;
     $85 = ((($84)) + 172|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($83<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = HEAP32[$88>>2]|0;
     $90 = ($82|0)<($89|0);
     if (!($90)) {
      break;
     }
     $91 = $j;
     $92 = $i;
     $93 = $mod;
     $94 = ((($93)) + 172|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($95) + ($92<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($97)) + 4|0);
     $99 = (($98) + ($91<<3)|0);
     $e = $99;
     $l = 0;
     while(1) {
      $100 = $l;
      $101 = $mod;
      $102 = ((($101)) + 140|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($100|0)<($103|0);
      if (!($104)) {
       break;
      }
      $105 = $e;
      $106 = ((($105)) + 1|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107&255;
      $109 = ($108|0)!=(0);
      if ($109) {
       $110 = $e;
       $111 = ((($110)) + 1|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = $l;
       $115 = HEAP32[$data>>2]|0;
       $116 = (($115) + ($114<<2)|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($113|0)==($117|0);
       if ($118) {
        label = 19;
        break;
       }
      }
      $124 = $l;
      $125 = (($124) + 1)|0;
      $l = $125;
     }
     if ((label|0) == 19) {
      label = 0;
      $119 = $l;
      $120 = (($119) + 1)|0;
      $121 = $120&255;
      $122 = $e;
      $123 = ((($122)) + 1|0);
      HEAP8[$123>>0] = $121;
     }
     $126 = $j;
     $127 = (($126) + 1)|0;
     $j = $127;
    }
    $128 = $i;
    $129 = (($128) + 1)|0;
    $i = $129;
   }
   $i = 0;
   while(1) {
    $130 = $i;
    $131 = $mod;
    $132 = ((($131)) + 140|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($130|0)<($133|0);
    if (!($134)) {
     break L13;
    }
    $135 = $i;
    $136 = $i;
    $137 = $mod;
    $138 = ((($137)) + 176|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (($139) + (($136*764)|0)|0);
    $141 = ((($140)) + 44|0);
    $142 = ((($data)) + 40|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ((($data)) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ((($data)) + 28|0);
    $147 = HEAP32[$146>>2]|0;
    _fix_env($135,$141,$143,$145,$147);
    $148 = $i;
    $149 = $i;
    $150 = $mod;
    $151 = ((($150)) + 176|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + (($149*764)|0)|0);
    $154 = ((($153)) + 200|0);
    $155 = ((($data)) + 44|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($data)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($data)) + 32|0);
    $160 = HEAP32[$159>>2]|0;
    _fix_env($148,$154,$156,$158,$160);
    $161 = $i;
    $162 = $i;
    $163 = $mod;
    $164 = ((($163)) + 176|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) + (($162*764)|0)|0);
    $167 = ((($166)) + 356|0);
    $168 = ((($data)) + 48|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ((($data)) + 16|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ((($data)) + 36|0);
    $173 = HEAP32[$172>>2]|0;
    _fix_env($161,$167,$169,$171,$173);
    $j = 0;
    while(1) {
     $174 = $j;
     $175 = $i;
     $176 = $mod;
     $177 = ((($176)) + 176|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (($178) + (($175*764)|0)|0);
     $180 = ((($179)) + 36|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($174|0)<($181|0);
     if (!($182)) {
      break;
     }
     $k = 0;
     while(1) {
      $183 = $k;
      $184 = $mod;
      $185 = ((($184)) + 144|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = ($183|0)<($186|0);
      if (!($187)) {
       break;
      }
      $188 = $j;
      $189 = $i;
      $190 = $mod;
      $191 = ((($190)) + 176|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($192) + (($189*764)|0)|0);
      $194 = ((($193)) + 756|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195) + ($188<<6)|0);
      $197 = ((($196)) + 40|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $k;
      $200 = ((($data)) + 4|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = (($201) + ($199<<2)|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($198|0)==($203|0);
      $205 = $k;
      if ($204) {
       label = 30;
       break;
      }
      $241 = (($205) + 1)|0;
      $k = $241;
     }
     if ((label|0) == 30) {
      label = 0;
      $206 = $j;
      $207 = $i;
      $208 = $mod;
      $209 = ((($208)) + 176|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = (($210) + (($207*764)|0)|0);
      $212 = ((($211)) + 756|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = (($213) + ($206<<6)|0);
      $215 = ((($214)) + 40|0);
      HEAP32[$215>>2] = $205;
      $216 = $k;
      $217 = ((($data)) + 20|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = (($218) + ($216<<2)|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $j;
      $222 = $i;
      $223 = $mod;
      $224 = ((($223)) + 176|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (($225) + (($222*764)|0)|0);
      $227 = ((($226)) + 756|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = (($228) + ($221<<6)|0);
      $230 = ((($229)) + 12|0);
      $231 = $j;
      $232 = $i;
      $233 = $mod;
      $234 = ((($233)) + 176|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = (($235) + (($232*764)|0)|0);
      $237 = ((($236)) + 756|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = (($238) + ($231<<6)|0);
      $240 = ((($239)) + 16|0);
      _c2spd_to_note($220,$230,$240);
     }
     $242 = $j;
     $243 = (($242) + 1)|0;
     $j = $243;
    }
    $244 = $i;
    $245 = (($244) + 1)|0;
    $i = $245;
   }
  }
 } while(0);
 $246 = ((($data)) + 20|0);
 $247 = HEAP32[$246>>2]|0;
 _free($247);
 $248 = ((($data)) + 16|0);
 $249 = HEAP32[$248>>2]|0;
 _free($249);
 $250 = ((($data)) + 12|0);
 $251 = HEAP32[$250>>2]|0;
 _free($251);
 $252 = ((($data)) + 8|0);
 $253 = HEAP32[$252>>2]|0;
 _free($253);
 $254 = HEAP32[$data>>2]|0;
 _free($254);
 $255 = ((($data)) + 4|0);
 $256 = HEAP32[$255>>2]|0;
 _free($256);
 $257 = ((($data)) + 40|0);
 $258 = HEAP32[$257>>2]|0;
 _free($258);
 $259 = ((($data)) + 44|0);
 $260 = HEAP32[$259>>2]|0;
 _free($260);
 $261 = ((($data)) + 48|0);
 $262 = HEAP32[$261>>2]|0;
 _free($262);
 $263 = ((($data)) + 24|0);
 $264 = HEAP32[$263>>2]|0;
 _free($264);
 $265 = $1;
 $266 = ((($265)) + 1280|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = $267 | 704905248;
 HEAP32[$266>>2] = $268;
 $269 = $1;
 $270 = ((($269)) + 1284|0);
 HEAP32[$270>>2] = 1;
 $271 = $retval;
 $0 = $271;
 $272 = $0;
 STACKTOP = sp;return ($272|0);
}
function _get_chunk_in($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chinfo = 0;
 var $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = $2;
 (_hio_read($5,1,32,$6)|0);
 $7 = $2;
 (_hio_seek($7,20,1)|0);
 $8 = $2;
 $9 = (_hio_read16l($8)|0);
 $10 = $9&65535;
 $11 = $mod;
 $12 = ((($11)) + 156|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = $14&65535;
 $16 = $mod;
 $17 = ((($16)) + 160|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 (_hio_read8($18)|0);
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = $20&255;
 $22 = $mod;
 $23 = ((($22)) + 148|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = (_hio_read8($24)|0);
 $26 = $25&255;
 $27 = $mod;
 $28 = ((($27)) + 152|0);
 HEAP32[$28>>2] = $26;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(32);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = (_hio_read8($31)|0);
  $chinfo = $32;
  $33 = $chinfo;
  $34 = $33&255;
  $35 = $34 & 128;
  $36 = ($35|0)!=(0);
  if ($36) {
   break;
  }
  $37 = $chinfo;
  $38 = $37&255;
  $39 = $38 << 1;
  $40 = $i;
  $41 = $mod;
  $42 = ((($41)) + 184|0);
  $43 = (($42) + (($40*12)|0)|0);
  HEAP32[$43>>2] = $39;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $i;
 $47 = $mod;
 $48 = ((($47)) + 136|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = $i;
 $51 = (32 - ($50))|0;
 $52 = (($51) - 1)|0;
 (_hio_seek($49,$52,1)|0);
 $53 = $mod;
 $54 = ((($53)) + 952|0);
 $55 = $mod;
 $56 = ((($55)) + 156|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $2;
 (_hio_read($54,1,$57,$58)|0);
 STACKTOP = sp;return 0;
}
function _get_chunk_tr($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $ev = 0, $ev1 = 0;
 var $i = 0, $j = 0, $k = 0, $len = 0, $mod = 0, $row = 0, $track = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16l($6)|0);
 $8 = $7&65535;
 $9 = (($8) + 1)|0;
 $10 = $mod;
 $11 = ((($10)) + 132|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = ((($12)) + 132|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc(4,$14)|0);
 $16 = $mod;
 $17 = ((($16)) + 172|0);
 HEAP32[$17>>2] = $15;
 $18 = ($15|0)==(0|0);
 if ($18) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 $19 = (_calloc(1,2052)|0);
 $track = $19;
 $20 = $track;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = $mod;
  $23 = (_track_alloc($22,0,256)|0);
  $24 = ($23|0)<(0);
  L7: do {
   if (!($24)) {
    $i = 1;
    while(1) {
     $25 = $i;
     $26 = $mod;
     $27 = ((($26)) + 132|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($25|0)<($28|0);
     if (!($29)) {
      break;
     }
     $30 = $3;
     $31 = (_hio_read16l($30)|0);
     $32 = $31&65535;
     $len = $32;
     $33 = $track;
     _memset(($33|0),0,2052)|0;
     $row = 0;
     while(1) {
      $34 = $len;
      $35 = ($34|0)!=(0);
      $36 = $row;
      if (!($35)) {
       break;
      }
      $37 = $track;
      $38 = ((($37)) + 4|0);
      $39 = (($38) + ($36<<3)|0);
      $ev = $39;
      $40 = $3;
      $41 = (_hio_read8($40)|0);
      $42 = $41&255;
      $j = $42;
      $43 = $len;
      $44 = (($43) + -1)|0;
      $len = $44;
      $45 = $j;
      $46 = $45 & 3;
      if ((($46|0) == 2)) {
       $65 = $ev;
       $66 = $j;
       $67 = $66 >> 2;
       $68 = $track;
       $69 = ((($68)) + 4|0);
       $70 = (($69) + ($67<<3)|0);
       ;HEAP8[$65>>0]=HEAP8[$70>>0]|0;HEAP8[$65+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$70+3>>0]|0;HEAP8[$65+4>>0]=HEAP8[$70+4>>0]|0;HEAP8[$65+5>>0]=HEAP8[$70+5>>0]|0;HEAP8[$65+6>>0]=HEAP8[$70+6>>0]|0;HEAP8[$65+7>>0]=HEAP8[$70+7>>0]|0;
      } else if ((($46|0) == 3)) {
       $71 = $j;
       $72 = $71 & 4;
       $73 = ($72|0)!=(0);
       if ($73) {
        $74 = $3;
        $75 = (_hio_read8($74)|0);
        $b = $75;
        $76 = $len;
        $77 = (($76) + -1)|0;
        $len = $77;
        $78 = $b;
        $79 = $78&255;
        $80 = ($79|0)==(255);
        if ($80) {
         $85 = 129;
        } else {
         $81 = $b;
         $82 = $81&255;
         $83 = (($82) + 12)|0;
         $85 = $83;
        }
        $84 = $85&255;
        $86 = $ev;
        HEAP8[$86>>0] = $84;
       }
       $87 = $j;
       $88 = $87 & 8;
       $89 = ($88|0)!=(0);
       if ($89) {
        $90 = $len;
        $91 = (($90) + -1)|0;
        $len = $91;
        $92 = $3;
        $93 = (_hio_read8($92)|0);
        $94 = $ev;
        $95 = ((($94)) + 1|0);
        HEAP8[$95>>0] = $93;
       }
       $96 = $j;
       $97 = $96 & 16;
       $98 = ($97|0)!=(0);
       if ($98) {
        $99 = $len;
        $100 = (($99) + -1)|0;
        $len = $100;
        $101 = $3;
        $102 = (_hio_read8($101)|0);
        $103 = $ev;
        $104 = ((($103)) + 2|0);
        HEAP8[$104>>0] = $102;
       }
       $105 = $j;
       $106 = $105 & 32;
       $107 = ($106|0)!=(0);
       if ($107) {
        $108 = $len;
        $109 = (($108) + -1)|0;
        $len = $109;
        $110 = $3;
        $111 = (_hio_read8($110)|0);
        $112 = $111&255;
        $k = $112;
        $113 = $k;
        $114 = $113 & 15;
        $115 = $114&255;
        $116 = $ev;
        $117 = ((($116)) + 3|0);
        HEAP8[$117>>0] = $115;
        $118 = $k;
        $119 = $118 & 240;
        $120 = $119 >> 4;
        $121 = $120&255;
        $122 = $ev;
        $123 = ((($122)) + 5|0);
        HEAP8[$123>>0] = $121;
       }
       $124 = $j;
       $125 = $124 & 64;
       $126 = ($125|0)!=(0);
       if ($126) {
        $127 = $len;
        $128 = (($127) + -1)|0;
        $len = $128;
        $129 = $3;
        $130 = (_hio_read8($129)|0);
        $131 = $ev;
        $132 = ((($131)) + 4|0);
        HEAP8[$132>>0] = $130;
       }
       $133 = $j;
       $134 = $133 & 128;
       $135 = ($134|0)!=(0);
       if ($135) {
        $136 = $len;
        $137 = (($136) + -1)|0;
        $len = $137;
        $138 = $3;
        $139 = (_hio_read8($138)|0);
        $140 = $ev;
        $141 = ((($140)) + 6|0);
        HEAP8[$141>>0] = $139;
       }
      } else if ((($46|0) == 1)) {
       $k = 0;
       while(1) {
        $51 = $k;
        $52 = $j;
        $53 = $52 >> 2;
        $54 = ($51|0)<=($53|0);
        $55 = $k;
        if (!($54)) {
         break;
        }
        $56 = $ev;
        $57 = (($56) + ($55<<3)|0);
        $58 = $ev;
        $59 = ((($58)) + -8|0);
        ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;HEAP8[$57+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$59+3>>0]|0;HEAP8[$57+4>>0]=HEAP8[$59+4>>0]|0;HEAP8[$57+5>>0]=HEAP8[$59+5>>0]|0;HEAP8[$57+6>>0]=HEAP8[$59+6>>0]|0;HEAP8[$57+7>>0]=HEAP8[$59+7>>0]|0;
        $60 = $k;
        $61 = (($60) + 1)|0;
        $k = $61;
       }
       $62 = (($55) - 1)|0;
       $63 = $row;
       $64 = (($63) + ($62))|0;
       $row = $64;
      } else if ((($46|0) == 0)) {
       $47 = $j;
       $48 = $47 >> 2;
       $49 = $row;
       $50 = (($49) + ($48))|0;
       $row = $50;
      }
      $142 = $row;
      $143 = (($142) + 1)|0;
      $row = $143;
     }
     $144 = ($36|0)<=(64);
     do {
      if ($144) {
       $row = 64;
      } else {
       $145 = $row;
       $146 = ($145|0)<=(128);
       if ($146) {
        $row = 128;
        break;
       } else {
        $row = 256;
        break;
       }
      }
     } while(0);
     $147 = $mod;
     $148 = $i;
     $149 = $row;
     $150 = (_track_alloc($147,$148,$149)|0);
     $151 = ($150|0)<(0);
     if ($151) {
      break L7;
     }
     $152 = $i;
     $153 = $mod;
     $154 = ((($153)) + 172|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + ($152<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $track;
     $159 = $row;
     $160 = (($159) - 1)|0;
     $161 = $160<<3;
     $162 = (12 + ($161))|0;
     _memcpy(($157|0),($158|0),($162|0))|0;
     $163 = $row;
     $164 = $i;
     $165 = $mod;
     $166 = ((($165)) + 172|0);
     $167 = HEAP32[$166>>2]|0;
     $168 = (($167) + ($164<<2)|0);
     $169 = HEAP32[$168>>2]|0;
     HEAP32[$169>>2] = $163;
     $j = 0;
     while(1) {
      $170 = $j;
      $171 = $row;
      $172 = ($170|0)<($171|0);
      if (!($172)) {
       break;
      }
      $173 = $j;
      $174 = $i;
      $175 = $mod;
      $176 = ((($175)) + 172|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($177) + ($174<<2)|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ((($179)) + 4|0);
      $181 = (($180) + ($173<<3)|0);
      $ev1 = $181;
      $182 = $ev1;
      $183 = ((($182)) + 3|0);
      $184 = $ev1;
      $185 = ((($184)) + 4|0);
      _xlat_fx1($183,$185);
      $186 = $ev1;
      $187 = ((($186)) + 5|0);
      $188 = $ev1;
      $189 = ((($188)) + 6|0);
      _xlat_fx2($187,$189);
      $190 = $j;
      $191 = (($190) + 1)|0;
      $j = $191;
     }
     $192 = $i;
     $193 = (($192) + 1)|0;
     $i = $193;
    }
    $194 = $track;
    _free($194);
    $0 = 0;
    $196 = $0;
    STACKTOP = sp;return ($196|0);
   }
  } while(0);
  $195 = $track;
  _free($195);
 }
 $0 = -1;
 $196 = $0;
 STACKTOP = sp;return ($196|0);
}
function _get_chunk_sa($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $buf = 0, $data = 0, $i = 0, $len = 0, $mod = 0, $smpbuf = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $mod;
  $9 = ((($8)) + 144|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 14;
   break;
  }
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 180|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*52)|0)|0);
  $xxs = $16;
  $17 = $xxs;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $len = $19;
  $20 = $xxs;
  $21 = ((($20)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 1;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $len;
   $26 = $25 << 1;
   $len = $26;
  }
  $27 = $len;
  $28 = (_calloc(1,$27)|0);
  $smpbuf = $28;
  $29 = ($28|0)==(0|0);
  if ($29) {
   break;
  }
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  if ((($35|0) == 0)) {
   $36 = $smpbuf;
   $37 = $len;
   $38 = $3;
   (_hio_read($36,1,$37,$38)|0);
  } else if ((($35|0) == 2)) {
   $55 = $3;
   $56 = (_hio_read32l($55)|0);
   $len = $56;
   $57 = $len;
   $58 = (($57) + 4)|0;
   $59 = (_malloc($58)|0);
   $buf = $59;
   $60 = ($59|0)==(0|0);
   if ($60) {
    label = 15;
    break;
   }
   $61 = $buf;
   $62 = $len;
   $63 = $3;
   (_hio_read($61,1,$62,$63)|0);
   $64 = $smpbuf;
   $65 = $buf;
   $66 = $len;
   $67 = $xxs;
   $68 = ((($67)) + 32|0);
   $69 = HEAP32[$68>>2]|0;
   _unpack_sample16($64,$65,$66,$69);
   $70 = $buf;
   _free($70);
  } else if ((($35|0) == 1)) {
   $39 = $3;
   $40 = (_hio_read32l($39)|0);
   $len = $40;
   $41 = $len;
   $42 = (($41) + 4)|0;
   $43 = (_malloc($42)|0);
   $buf = $43;
   $44 = ($43|0)==(0|0);
   if ($44) {
    label = 15;
    break;
   }
   $45 = $buf;
   $46 = $len;
   $47 = $3;
   (_hio_read($45,1,$46,$47)|0);
   $48 = $smpbuf;
   $49 = $buf;
   $50 = $len;
   $51 = $xxs;
   $52 = ((($51)) + 32|0);
   $53 = HEAP32[$52>>2]|0;
   _unpack_sample8($48,$49,$50,$53);
   $54 = $buf;
   _free($54);
  }
  $71 = $1;
  $72 = $xxs;
  $73 = $smpbuf;
  $74 = (_load_sample($71,0,16,$72,$73)|0);
  $75 = ($74|0)<(0);
  if ($75) {
   label = 15;
   break;
  }
  $76 = $smpbuf;
  _free($76);
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 if ((label|0) == 14) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 15) {
  $79 = $smpbuf;
  _free($79);
 }
 $0 = -1;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function _get_chunk_ve($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $data;
 $10 = ((($9)) + 28|0);
 HEAP32[$10>>2] = $8;
 $11 = ($8|0)==(0);
 if ($11) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $data;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc($14,33)|0);
 $16 = $data;
 $17 = ((($16)) + 40|0);
 HEAP32[$17>>2] = $15;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $data;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = $data;
  $27 = ((($26)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*33)|0)|0);
  HEAP8[$29>>0] = $24;
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($30*33)|0)|0);
  $35 = ((($34)) + 1|0);
  $36 = $3;
  (_hio_read($35,1,30,$36)|0);
  $37 = $3;
  $38 = (_hio_read8($37)|0);
  $39 = $i;
  $40 = $data;
  $41 = ((($40)) + 40|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*33)|0)|0);
  $44 = ((($43)) + 31|0);
  HEAP8[$44>>0] = $38;
  $45 = $3;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = $data;
  $49 = ((($48)) + 40|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*33)|0)|0);
  $52 = ((($51)) + 32|0);
  HEAP8[$52>>0] = $46;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_chunk_pe($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $data;
 $10 = ((($9)) + 32|0);
 HEAP32[$10>>2] = $8;
 $11 = ($8|0)==(0);
 if ($11) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $data;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc($14,33)|0);
 $16 = $data;
 $17 = ((($16)) + 44|0);
 HEAP32[$17>>2] = $15;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $data;
  $20 = ((($19)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = $data;
  $27 = ((($26)) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*33)|0)|0);
  HEAP8[$29>>0] = $24;
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($30*33)|0)|0);
  $35 = ((($34)) + 1|0);
  $36 = $3;
  (_hio_read($35,1,30,$36)|0);
  $37 = $3;
  $38 = (_hio_read8($37)|0);
  $39 = $i;
  $40 = $data;
  $41 = ((($40)) + 44|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*33)|0)|0);
  $44 = ((($43)) + 31|0);
  HEAP8[$44>>0] = $38;
  $45 = $3;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = $data;
  $49 = ((($48)) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*33)|0)|0);
  $52 = ((($51)) + 32|0);
  HEAP8[$52>>0] = $46;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_chunk_fe($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $data;
 $10 = ((($9)) + 36|0);
 HEAP32[$10>>2] = $8;
 $11 = ($8|0)==(0);
 if ($11) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $data;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc($14,33)|0);
 $16 = $data;
 $17 = ((($16)) + 48|0);
 HEAP32[$17>>2] = $15;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $data;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = $data;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*33)|0)|0);
  HEAP8[$29>>0] = $24;
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($30*33)|0)|0);
  $35 = ((($34)) + 1|0);
  $36 = $3;
  (_hio_read($35,1,30,$36)|0);
  $37 = $3;
  $38 = (_hio_read8($37)|0);
  $39 = $i;
  $40 = $data;
  $41 = ((($40)) + 48|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*33)|0)|0);
  $44 = ((($43)) + 31|0);
  HEAP8[$44>>0] = $38;
  $45 = $3;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = $data;
  $49 = ((($48)) + 48|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*33)|0)|0);
  $52 = ((($51)) + 32|0);
  HEAP8[$52>>0] = $46;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_chunk_ii($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $i = 0, $j = 0, $k = 0, $last_map = 0, $map = 0, $mod = 0, $sub = 0, $x = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 64|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = (_instrument_init($12)|0);
 $14 = ($13|0)<(0);
 if ($14) {
  $0 = -1;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 140|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   label = 31;
   break;
  }
  $20 = $i;
  $21 = $mod;
  $22 = ((($21)) + 176|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*764)|0)|0);
  $xxi = $24;
  $25 = $3;
  $26 = (_hio_read8($25)|0);
  $27 = $26&255;
  $28 = $i;
  $29 = $data;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($28<<2)|0);
  HEAP32[$31>>2] = $27;
  $32 = $3;
  $33 = (_hio_read8($32)|0);
  $34 = $33&255;
  $35 = $xxi;
  $36 = ((($35)) + 36|0);
  HEAP32[$36>>2] = $34;
  $37 = $3;
  (_hio_read($buf,1,32,$37)|0);
  $38 = ((($buf)) + 32|0);
  HEAP8[$38>>0] = 0;
  (_adjust_string($buf)|0);
  $39 = $xxi;
  (_strncpy(($39|0),($buf|0),32)|0);
  $40 = $mod;
  $41 = $i;
  $42 = $xxi;
  $43 = ((($42)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_subinstrument_alloc($40,$41,$44)|0);
  $46 = ($45|0)<(0);
  if ($46) {
   label = 6;
   break;
  }
  $j = 0;
  while(1) {
   $47 = $j;
   $48 = ($47|0)<(121);
   if (!($48)) {
    break;
   }
   $49 = $j;
   $50 = $xxi;
   $51 = ((($50)) + 512|0);
   $52 = (($51) + ($49<<1)|0);
   HEAP8[$52>>0] = -1;
   $53 = $j;
   $54 = (($53) + 1)|0;
   $j = $54;
  }
  $j = 0;
  $last_map = 0;
  while(1) {
   $55 = $j;
   $56 = $i;
   $57 = $mod;
   $58 = ((($57)) + 176|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + (($56*764)|0)|0);
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($55|0)<($62|0);
   if (!($63)) {
    break;
   }
   $64 = $j;
   $65 = $xxi;
   $66 = ((($65)) + 756|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64<<6)|0);
   $sub = $68;
   $69 = $3;
   $70 = (_hio_read8($69)|0);
   $71 = $70&255;
   $72 = $sub;
   $73 = ((($72)) + 40|0);
   HEAP32[$73>>2] = $71;
   $74 = $3;
   $75 = (_hio_read8($74)|0);
   $76 = $75&255;
   $77 = (($76) + 12)|0;
   $map = $77;
   $78 = $3;
   $79 = (_hio_read8($78)|0);
   $80 = $79&255;
   $81 = $sub;
   HEAP32[$81>>2] = $80;
   $82 = $last_map;
   $k = $82;
   while(1) {
    $83 = $k;
    $84 = $map;
    $85 = ($83|0)<=($84|0);
    if (!($85)) {
     break;
    }
    $86 = $k;
    $87 = ($86|0)<(121);
    if ($87) {
     $88 = $j;
     $89 = $88&255;
     $90 = $k;
     $91 = $xxi;
     $92 = ((($91)) + 512|0);
     $93 = (($92) + ($90<<1)|0);
     HEAP8[$93>>0] = $89;
    }
    $94 = $k;
    $95 = (($94) + 1)|0;
    $k = $95;
   }
   $96 = $map;
   $97 = (($96) + 1)|0;
   $last_map = $97;
   $98 = $3;
   $99 = (_hio_read8($98)|0);
   $100 = $99&255;
   $x = $100;
   $101 = $j;
   $102 = ($101|0)==(0);
   if ($102) {
    $103 = $x;
    $104 = $103 & 128;
    $105 = ($104|0)!=(0);
    $106 = $x;
    $107 = $106 & 63;
    $108 = $105 ? $107 : -1;
    $109 = $i;
    $110 = $data;
    $111 = ((($110)) + 8|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($109<<2)|0);
    HEAP32[$113>>2] = $108;
   }
   $114 = $x;
   $115 = $114 ^ -1;
   $116 = $115 & 64;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $sub;
    HEAP32[$118>>2] = 255;
   }
   $119 = $3;
   $120 = (_hio_read8($119)|0);
   $121 = $120&255;
   $122 = $121 << 1;
   $123 = $j;
   $124 = $i;
   $125 = $mod;
   $126 = ((($125)) + 176|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + (($124*764)|0)|0);
   $129 = ((($128)) + 756|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($123<<6)|0);
   $132 = ((($131)) + 8|0);
   HEAP32[$132>>2] = $122;
   $133 = $3;
   $134 = (_hio_read8($133)|0);
   $135 = $134&255;
   $x = $135;
   $136 = $j;
   $137 = ($136|0)==(0);
   if ($137) {
    $138 = $x;
    $139 = $138 & 128;
    $140 = ($139|0)!=(0);
    $141 = $x;
    $142 = $141 & 63;
    $143 = $140 ? $142 : -1;
    $144 = $i;
    $145 = $data;
    $146 = ((($145)) + 12|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + ($144<<2)|0);
    HEAP32[$148>>2] = $143;
   }
   $149 = $x;
   $150 = $149 ^ -1;
   $151 = $150 & 64;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $sub;
    $154 = ((($153)) + 8|0);
    HEAP32[$154>>2] = 128;
   }
   $155 = $3;
   $156 = (_hio_read16l($155)|0);
   $157 = $156&65535;
   $x = $157;
   $158 = $j;
   $159 = ($158|0)==(0);
   if ($159) {
    $160 = $x;
    $161 = $xxi;
    $162 = ((($161)) + 40|0);
    HEAP32[$162>>2] = $160;
   }
   $163 = $3;
   $164 = (_hio_read8($163)|0);
   $165 = $164&255;
   $166 = $sub;
   $167 = ((($166)) + 28|0);
   HEAP32[$167>>2] = $165;
   $168 = $3;
   $169 = (_hio_read8($168)|0);
   $170 = $169&255;
   $171 = $170 >> 1;
   $172 = $sub;
   $173 = ((($172)) + 24|0);
   HEAP32[$173>>2] = $171;
   $174 = $3;
   $175 = (_hio_read8($174)|0);
   $176 = $175&255;
   $177 = $sub;
   $178 = ((($177)) + 32|0);
   HEAP32[$178>>2] = $176;
   $179 = $3;
   $180 = (_hio_read8($179)|0);
   $181 = $180&255;
   $182 = $sub;
   $183 = ((($182)) + 20|0);
   HEAP32[$183>>2] = $181;
   $184 = $3;
   (_hio_read8($184)|0);
   $185 = $3;
   $186 = (_hio_read8($185)|0);
   $187 = $186&255;
   $x = $187;
   $188 = $j;
   $189 = ($188|0)==(0);
   if ($189) {
    $190 = $x;
    $191 = $190 & 128;
    $192 = ($191|0)!=(0);
    $193 = $x;
    $194 = $193 & 63;
    $195 = $192 ? $194 : -1;
    $196 = $i;
    $197 = $data;
    $198 = ((($197)) + 16|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (($199) + ($196<<2)|0);
    HEAP32[$200>>2] = $195;
   }
   $201 = $j;
   $202 = (($201) + 1)|0;
   $j = $202;
  }
  $203 = $i;
  $204 = (($203) + 1)|0;
  $i = $204;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 else if ((label|0) == 31) {
  $0 = 0;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 return (0)|0;
}
function _get_chunk_pa($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $chn = 0, $i = 0, $j = 0, $mod = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $mod;
 $10 = ((($9)) + 128|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 128|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_calloc(4,$13)|0);
 $15 = $mod;
 $16 = ((($15)) + 168|0);
 HEAP32[$16>>2] = $14;
 $17 = ($14|0)==(0|0);
 if ($17) {
  $0 = -1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $mod;
  $20 = ((($19)) + 128|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   label = 13;
   break;
  }
  $23 = $mod;
  $24 = $i;
  $25 = (_pattern_alloc($23,$24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   label = 6;
   break;
  }
  $27 = $3;
  $28 = (_hio_read8($27)|0);
  $29 = $28&255;
  $chn = $29;
  $30 = $3;
  $31 = (_hio_read8($30)|0);
  $32 = $31&255;
  $33 = (($32) + 1)|0;
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 168|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = $33;
  $40 = $3;
  (_hio_seek($40,16,1)|0);
  $j = 0;
  while(1) {
   $41 = $j;
   $42 = $chn;
   $43 = ($41|0)<($42|0);
   if (!($43)) {
    break;
   }
   $44 = $3;
   $45 = (_hio_read16l($44)|0);
   $46 = $45&65535;
   $x = $46;
   $47 = $j;
   $48 = $mod;
   $49 = ((($48)) + 136|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($47|0)<($50|0);
   if ($51) {
    $52 = $x;
    $53 = $j;
    $54 = $i;
    $55 = $mod;
    $56 = ((($55)) + 168|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + ($54<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 4|0);
    $61 = (($60) + ($53<<2)|0);
    HEAP32[$61>>2] = $52;
   }
   $62 = $j;
   $63 = (($62) + 1)|0;
   $j = $63;
  }
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;return ($66|0);
 }
 return (0)|0;
}
function _get_chunk_is($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $i = 0, $mod = 0, $x = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = $mod;
 $11 = ((($10)) + 144|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc(52,$14)|0);
 $16 = $mod;
 $17 = ((($16)) + 180|0);
 HEAP32[$17>>2] = $15;
 $18 = ($15|0)==(0|0);
 if ($18) {
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $19 = $mod;
 $20 = ((($19)) + 144|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_calloc(4,$21)|0);
 $23 = $data;
 $24 = ((($23)) + 24|0);
 HEAP32[$24>>2] = $22;
 $25 = $data;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 144|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 180|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($34*52)|0)|0);
  $xxs = $38;
  $39 = $3;
  $40 = (_hio_read8($39)|0);
  $41 = $40&255;
  $42 = $i;
  $43 = $data;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<2)|0);
  HEAP32[$46>>2] = $41;
  $47 = $3;
  (_hio_read($buf,1,32,$47)|0);
  $48 = ((($buf)) + 32|0);
  HEAP8[$48>>0] = 0;
  (_adjust_string($buf)|0);
  $49 = $xxs;
  (_strncpy(($49|0),($buf|0),32)|0);
  $50 = $3;
  (_hio_seek($50,8,1)|0);
  $51 = $3;
  $52 = (_hio_read32l($51)|0);
  $53 = $i;
  $54 = $data;
  $55 = ((($54)) + 20|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + ($53<<2)|0);
  HEAP32[$57>>2] = $52;
  $58 = $3;
  $59 = (_hio_read32l($58)|0);
  $60 = $xxs;
  $61 = ((($60)) + 32|0);
  HEAP32[$61>>2] = $59;
  $62 = $3;
  $63 = (_hio_read32l($62)|0);
  $64 = $xxs;
  $65 = ((($64)) + 36|0);
  HEAP32[$65>>2] = $63;
  $66 = $3;
  $67 = (_hio_read32l($66)|0);
  $68 = $xxs;
  $69 = ((($68)) + 40|0);
  HEAP32[$69>>2] = $67;
  $70 = $xxs;
  $71 = ((($70)) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)>(0);
  $74 = $73 ? 2 : 0;
  $75 = $xxs;
  $76 = ((($75)) + 44|0);
  HEAP32[$76>>2] = $74;
  $77 = $xxs;
  $78 = ((($77)) + 36|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $xxs;
  $81 = ((($80)) + 40|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($79) + ($82))|0;
  $84 = $xxs;
  $85 = ((($84)) + 40|0);
  HEAP32[$85>>2] = $83;
  $86 = $3;
  (_hio_read8($86)|0);
  $87 = $3;
  $88 = (_hio_read8($87)|0);
  $x = $88;
  $89 = $x;
  $90 = $89&255;
  $91 = $90 & 1;
  $92 = ($91|0)!=(0);
  if ($92) {
   $93 = $xxs;
   $94 = ((($93)) + 44|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 | 1;
   HEAP32[$94>>2] = $96;
   $97 = $xxs;
   $98 = ((($97)) + 32|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 >> 1;
   HEAP32[$98>>2] = $100;
   $101 = $xxs;
   $102 = ((($101)) + 36|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 >> 1;
   HEAP32[$102>>2] = $104;
   $105 = $xxs;
   $106 = ((($105)) + 40|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107 >> 1;
   HEAP32[$106>>2] = $108;
  }
  $109 = $x;
  $110 = $109&255;
  $111 = $110 & 2;
  $112 = ($111|0)!=(0);
  $113 = $112 ? 4 : 0;
  $114 = $xxs;
  $115 = ((($114)) + 44|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 | $113;
  HEAP32[$115>>2] = $117;
  $118 = $x;
  $119 = $118&255;
  $120 = $119 & 12;
  $121 = $120 >> 2;
  $122 = $i;
  $123 = $data;
  $124 = ((($123)) + 24|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + ($122<<2)|0);
  HEAP32[$126>>2] = $121;
  $127 = $i;
  $128 = (($127) + 1)|0;
  $i = $128;
 }
 $0 = 0;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _get_chunk_p0($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0;
 var $mod = 0, $x16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $mod;
 $10 = ((($9)) + 128|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 128|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_calloc(4,$13)|0);
 $15 = $mod;
 $16 = ((($15)) + 168|0);
 HEAP32[$16>>2] = $14;
 $17 = ($14|0)==(0|0);
 if ($17) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $mod;
  $20 = ((($19)) + 128|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   label = 13;
   break;
  }
  $23 = $mod;
  $24 = $i;
  $25 = (_pattern_alloc($23,$24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   label = 6;
   break;
  }
  $27 = $i;
  $28 = $mod;
  $29 = ((($28)) + 168|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$32>>2] = 64;
  $j = 0;
  while(1) {
   $33 = $j;
   $34 = ($33|0)<(32);
   if (!($34)) {
    break;
   }
   $35 = $3;
   $36 = (_hio_read16l($35)|0);
   $x16 = $36;
   $37 = $j;
   $38 = $mod;
   $39 = ((($38)) + 136|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($37|0)<($40|0);
   if ($41) {
    $42 = $x16;
    $43 = $42&65535;
    $44 = $j;
    $45 = $i;
    $46 = $mod;
    $47 = ((($46)) + 168|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($45<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($50)) + 4|0);
    $52 = (($51) + ($44<<2)|0);
    HEAP32[$52>>2] = $43;
   }
   $53 = $j;
   $54 = (($53) + 1)|0;
   $j = $54;
  }
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _get_chunk_i0($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0;
 var $i = 0, $mod = 0, $sub = 0, $x = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 48|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = $mod;
 $11 = ((($10)) + 144|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = $9;
 $14 = $mod;
 $15 = (_instrument_init($14)|0);
 $16 = ($15|0)<(0);
 if ($16) {
  $0 = -1;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $17 = $mod;
 $18 = ((($17)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_calloc(4,$19)|0);
 $21 = $data;
 $22 = ((($21)) + 24|0);
 HEAP32[$22>>2] = $20;
 $23 = ($20|0)==(0|0);
 if ($23) {
  $0 = -1;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $mod;
  $26 = ((($25)) + 140|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)<($27|0);
  if (!($28)) {
   label = 12;
   break;
  }
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 180|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($29*52)|0)|0);
  $xxs = $33;
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 176|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($34*764)|0)|0);
  $39 = ((($38)) + 36|0);
  HEAP32[$39>>2] = 1;
  $40 = $mod;
  $41 = $i;
  $42 = (_subinstrument_alloc($40,$41,1)|0);
  $43 = ($42|0)<(0);
  if ($43) {
   label = 8;
   break;
  }
  $44 = $i;
  $45 = $mod;
  $46 = ((($45)) + 176|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($44*764)|0)|0);
  $49 = ((($48)) + 756|0);
  $50 = HEAP32[$49>>2]|0;
  $sub = $50;
  $51 = $3;
  $52 = (_hio_read8($51)|0);
  $53 = $52&255;
  $54 = $i;
  $55 = $data;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54<<2)|0);
  HEAP32[$58>>2] = $53;
  $59 = $i;
  $60 = $data;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($59<<2)|0);
  HEAP32[$62>>2] = $53;
  $63 = $sub;
  $64 = ((($63)) + 40|0);
  HEAP32[$64>>2] = $53;
  $65 = $3;
  (_hio_read($buf,1,32,$65)|0);
  $66 = ((($buf)) + 32|0);
  HEAP8[$66>>0] = 0;
  (_adjust_string($buf)|0);
  $67 = $3;
  (_hio_seek($67,8,1)|0);
  $68 = $i;
  $69 = $mod;
  $70 = ((($69)) + 176|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($68*764)|0)|0);
  (_strncpy(($72|0),($buf|0),32)|0);
  $73 = $3;
  $74 = (_hio_read16l($73)|0);
  $75 = $74&65535;
  $76 = $i;
  $77 = $data;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + ($76<<2)|0);
  HEAP32[$80>>2] = $75;
  $81 = $3;
  $82 = (_hio_read32l($81)|0);
  $83 = $xxs;
  $84 = ((($83)) + 32|0);
  HEAP32[$84>>2] = $82;
  $85 = $3;
  $86 = (_hio_read32l($85)|0);
  $87 = $xxs;
  $88 = ((($87)) + 36|0);
  HEAP32[$88>>2] = $86;
  $89 = $3;
  $90 = (_hio_read32l($89)|0);
  $91 = $xxs;
  $92 = ((($91)) + 40|0);
  HEAP32[$92>>2] = $90;
  $93 = $xxs;
  $94 = ((($93)) + 40|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)>(0);
  $97 = $96 ? 2 : 0;
  $98 = $xxs;
  $99 = ((($98)) + 44|0);
  HEAP32[$99>>2] = $97;
  $100 = $xxs;
  $101 = ((($100)) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $xxs;
  $104 = ((($103)) + 40|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($102) + ($105))|0;
  $107 = $xxs;
  $108 = ((($107)) + 40|0);
  HEAP32[$108>>2] = $106;
  $109 = $3;
  $110 = (_hio_read8($109)|0);
  $111 = $110&255;
  $112 = $sub;
  HEAP32[$112>>2] = $111;
  $113 = $sub;
  $114 = ((($113)) + 8|0);
  HEAP32[$114>>2] = 128;
  $115 = $3;
  $116 = (_hio_read8($115)|0);
  $x = $116;
  $117 = $x;
  $118 = $117&255;
  $119 = $118 & 1;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $xxs;
   $122 = ((($121)) + 44|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 | 1;
   HEAP32[$122>>2] = $124;
   $125 = $xxs;
   $126 = ((($125)) + 32|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 >> 1;
   HEAP32[$126>>2] = $128;
   $129 = $xxs;
   $130 = ((($129)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 >> 1;
   HEAP32[$130>>2] = $132;
   $133 = $xxs;
   $134 = ((($133)) + 40|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135 >> 1;
   HEAP32[$134>>2] = $136;
  }
  $137 = $x;
  $138 = $137&255;
  $139 = $138 & 2;
  $140 = ($139|0)!=(0);
  $141 = $140 ? 4 : 0;
  $142 = $xxs;
  $143 = ((($142)) + 44|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 | $141;
  HEAP32[$143>>2] = $145;
  $146 = $x;
  $147 = $146&255;
  $148 = $147 & 12;
  $149 = $148 >> 2;
  $150 = $i;
  $151 = $data;
  $152 = ((($151)) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($150<<2)|0);
  HEAP32[$154>>2] = $149;
  $155 = $i;
  $156 = (($155) + 1)|0;
  $i = $156;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 return (0)|0;
}
function _fix_env($i,$ei,$env,$index,$envnum) {
 $i = $i|0;
 $ei = $ei|0;
 $env = $env|0;
 $index = $index|0;
 $envnum = $envnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $lastx = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $ei;
 $2 = $env;
 $3 = $index;
 $4 = $envnum;
 $5 = $0;
 $6 = $3;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 HEAP32[$10>>2] = 1;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 16;
 $j = 0;
 while(1) {
  $13 = $j;
  $14 = $4;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   label = 11;
   break;
  }
  $16 = $0;
  $17 = $3;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $j;
  $21 = $2;
  $22 = (($21) + (($20*33)|0)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($19|0)==($24|0);
  $26 = $j;
  if ($25) {
   break;
  }
  $130 = (($26) + 1)|0;
  $j = $130;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = $2;
 $28 = (($27) + (($26*33)|0)|0);
 $29 = ((($28)) + 31|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 & 16;
 $33 = ($32|0)!=(0);
 $34 = $33 ? 2 : 0;
 $35 = $1;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 | $34;
 HEAP32[$35>>2] = $37;
 $38 = $j;
 $39 = $2;
 $40 = (($39) + (($38*33)|0)|0);
 $41 = ((($40)) + 31|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 & 32;
 $45 = ($44|0)!=(0);
 $46 = $45 ? 4 : 0;
 $47 = $1;
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 | $46;
 HEAP32[$47>>2] = $49;
 $50 = $j;
 $51 = $2;
 $52 = (($51) + (($50*33)|0)|0);
 $53 = ((($52)) + 31|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 15;
 $57 = $1;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $j;
 $60 = $2;
 $61 = (($60) + (($59*33)|0)|0);
 $62 = ((($61)) + 32|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $64 & 15;
 $66 = $1;
 $67 = ((($66)) + 20|0);
 HEAP32[$67>>2] = $65;
 $68 = $j;
 $69 = $2;
 $70 = (($69) + (($68*33)|0)|0);
 $71 = ((($70)) + 32|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 & 240;
 $75 = $1;
 $76 = ((($75)) + 24|0);
 HEAP32[$76>>2] = $74;
 $lastx = -1;
 $k = 0;
 while(1) {
  $77 = $k;
  $78 = $1;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = $k;
  $83 = $82<<1;
  $84 = $j;
  $85 = $2;
  $86 = (($85) + (($84*33)|0)|0);
  $87 = ((($86)) + 1|0);
  $88 = (($87) + ($83)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $x = $90;
  $91 = $x;
  $92 = ($91|0)==(0);
  if ($92) {
   break;
  }
  $93 = $lastx;
  $94 = $x;
  $95 = (($93) + ($94))|0;
  $96 = $95&65535;
  $97 = $k;
  $98 = $97<<1;
  $99 = $1;
  $100 = ((($99)) + 28|0);
  $101 = (($100) + ($98<<1)|0);
  HEAP16[$101>>1] = $96;
  $102 = $k;
  $103 = $102<<1;
  $104 = (($103) + 1)|0;
  $105 = $j;
  $106 = $2;
  $107 = (($106) + (($105*33)|0)|0);
  $108 = ((($107)) + 1|0);
  $109 = (($108) + ($104)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = $k;
  $113 = $112<<1;
  $114 = (($113) + 1)|0;
  $115 = $1;
  $116 = ((($115)) + 28|0);
  $117 = (($116) + ($114<<1)|0);
  HEAP16[$117>>1] = $111;
  $118 = $k;
  $119 = $118<<1;
  $120 = $1;
  $121 = ((($120)) + 28|0);
  $122 = (($121) + ($119<<1)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123 << 16 >> 16;
  $lastx = $124;
  $125 = $k;
  $126 = (($125) + 1)|0;
  $k = $126;
 }
 $127 = $k;
 $128 = $1;
 $129 = ((($128)) + 4|0);
 HEAP32[$129>>2] = $127;
 STACKTOP = sp;return;
}
function _unpack_sample8($t,$f,$len,$l) {
 $t = $t|0;
 $f = $f|0;
 $len = $len|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, $bits = 0, $d = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $bits = sp;
 $0 = $t;
 HEAP32[$1>>2] = $f;
 HEAP32[$2>>2] = $len;
 $3 = $l;
 (_get_bits157(0,$1,$2,$bits)|0);
 $d = 0;
 $b = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = (_get_bits157(1,$1,$2,$bits)|0);
  $s = $7;
  $8 = (_get_bits157(1,$1,$2,$bits)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = (_get_bits157(3,$1,$2,$bits)|0);
   $11 = $10&255;
   $b = $11;
  } else {
   $b = 8;
   while(1) {
    $12 = HEAP32[$2>>2]|0;
    $13 = ($12|0)>=(0);
    if (!($13)) {
     break;
    }
    $14 = (_get_bits157(1,$1,$2,$bits)|0);
    $15 = ($14|0)!=(0);
    $16 = $15 ^ 1;
    if (!($16)) {
     break;
    }
    $17 = $b;
    $18 = $17&255;
    $19 = (($18) + 16)|0;
    $20 = $19&255;
    $b = $20;
   }
   $21 = (_get_bits157(4,$1,$2,$bits)|0);
   $22 = $b;
   $23 = $22&255;
   $24 = (($23) + ($21))|0;
   $25 = $24&255;
   $b = $25;
  }
  $26 = $s;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $b;
   $29 = $28&255;
   $30 = $29 ^ 255;
   $31 = $30&255;
   $b = $31;
  }
  $32 = $b;
  $33 = $32&255;
  $34 = $d;
  $35 = $34&255;
  $36 = (($35) + ($33))|0;
  $37 = $36&255;
  $d = $37;
  $38 = $d;
  $39 = $0;
  $40 = ((($39)) + 1|0);
  $0 = $40;
  HEAP8[$39>>0] = $38;
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 STACKTOP = sp;return;
}
function _unpack_sample16($t,$f,$len,$l) {
 $t = $t|0;
 $f = $f|0;
 $len = $len|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bits = 0, $d = 0, $i = 0, $lo = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $bits = sp;
 $0 = $t;
 HEAP32[$1>>2] = $f;
 HEAP32[$2>>2] = $len;
 $3 = $l;
 (_get_bits157(0,$1,$2,$bits)|0);
 $d = 0;
 $b = 0;
 $lo = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = (_get_bits157(8,$1,$2,$bits)|0);
  $lo = $7;
  $8 = (_get_bits157(1,$1,$2,$bits)|0);
  $s = $8;
  $9 = (_get_bits157(1,$1,$2,$bits)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = (_get_bits157(3,$1,$2,$bits)|0);
   $12 = $11&255;
   $b = $12;
  } else {
   $b = 8;
   while(1) {
    $13 = HEAP32[$2>>2]|0;
    $14 = ($13|0)>=(0);
    if (!($14)) {
     break;
    }
    $15 = (_get_bits157(1,$1,$2,$bits)|0);
    $16 = ($15|0)!=(0);
    $17 = $16 ^ 1;
    if (!($17)) {
     break;
    }
    $18 = $b;
    $19 = $18&255;
    $20 = (($19) + 16)|0;
    $21 = $20&255;
    $b = $21;
   }
   $22 = (_get_bits157(4,$1,$2,$bits)|0);
   $23 = $b;
   $24 = $23&255;
   $25 = (($24) + ($22))|0;
   $26 = $25&255;
   $b = $26;
  }
  $27 = $s;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $b;
   $30 = $29&255;
   $31 = $30 ^ 255;
   $32 = $31&255;
   $b = $32;
  }
  $33 = $b;
  $34 = $33&255;
  $35 = $d;
  $36 = $35&255;
  $37 = (($36) + ($34))|0;
  $38 = $37&255;
  $d = $38;
  $39 = $lo;
  $40 = $39&255;
  $41 = $0;
  $42 = ((($41)) + 1|0);
  $0 = $42;
  HEAP8[$41>>0] = $40;
  $43 = $d;
  $44 = $0;
  $45 = ((($44)) + 1|0);
  $0 = $45;
  HEAP8[$44>>0] = $43;
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 STACKTOP = sp;return;
}
function _get_bits157($i,$buf,$len,$bits) {
 $i = $i|0;
 $buf = $buf|0;
 $len = $len|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $buf;
 $3 = $len;
 $4 = $bits;
 $5 = $1;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (_readmem32l($9)|0);
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 4|0);
  HEAP32[$12>>2] = $14;
  $15 = $3;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - 4)|0;
  HEAP32[$15>>2] = $17;
  $18 = $4;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = 32;
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = $22 << 24 >> 24;
 $24 = 1 << $23;
 $25 = (($24) - 1)|0;
 $26 = $21 & $25;
 $x = $26;
 $27 = $1;
 $28 = $27 << 24 >> 24;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 >>> $28;
 HEAP32[$29>>2] = $31;
 $32 = $1;
 $33 = $32 << 24 >> 24;
 $34 = $4;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) - ($33))|0;
 HEAP32[$35>>2] = $37;
 $38 = ($37>>>0)<=(24);
 do {
  if ($38) {
   $39 = $3;
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $43 = $2;
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 1|0);
    HEAP32[$43>>2] = $45;
    $46 = (_readmem32l($44)|0);
    $47 = $4;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $46 << $49;
    $51 = $4;
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 | $50;
    HEAP32[$51>>2] = $53;
    $54 = $4;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 8)|0;
    HEAP32[$55>>2] = $57;
    $58 = $3;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + -1)|0;
    HEAP32[$58>>2] = $60;
    break;
   }
   $42 = $x;
   $0 = $42;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 $61 = $x;
 $0 = $61;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _xlat_fx1($t,$p) {
 $t = $t|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $p;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 if ((($4|0) == 5)) {
  $6 = $0;
  HEAP8[$6>>0] = 0;
 } else if ((($4|0) == 6)) {
  $7 = $1;
  HEAP8[$7>>0] = 0;
  $8 = $0;
  HEAP8[$8>>0] = 0;
 } else if ((($4|0) == 0)) {
  $5 = $1;
  HEAP8[$5>>0] = 0;
 }
 $9 = $0;
 $10 = $1;
 _xlat_fx_common($9,$10);
 STACKTOP = sp;return;
}
function _xlat_fx2($t,$p) {
 $t = $t|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $p;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 1:  {
  $6 = $0;
  HEAP8[$6>>0] = -96;
  break;
 }
 case 2:  {
  $7 = $0;
  HEAP8[$7>>0] = -95;
  break;
 }
 case 6:  {
  $11 = $1;
  HEAP8[$11>>0] = 0;
  $12 = $0;
  HEAP8[$12>>0] = 0;
  break;
 }
 case 4:  {
  $9 = $0;
  HEAP8[$9>>0] = 7;
  break;
 }
 case 0:  {
  $5 = $1;
  HEAP8[$5>>0] = 0;
  break;
 }
 case 3:  {
  $8 = $0;
  HEAP8[$8>>0] = 27;
  break;
 }
 case 5:  {
  $10 = $0;
  HEAP8[$10>>0] = 29;
  break;
 }
 default: {
 }
 }
 $13 = $0;
 $14 = $1;
 _xlat_fx_common($13,$14);
 STACKTOP = sp;return;
}
function _xlat_fx_common($t,$p) {
 $t = $t|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $p;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 L1: do {
  switch ($4|0) {
  case 10: case 9: case 8:  {
   $6 = $1;
   HEAP8[$6>>0] = 0;
   $7 = $0;
   HEAP8[$7>>0] = 0;
   break;
  }
  case 14:  {
   $8 = $1;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = $10 & 240;
   $12 = $11 >> 4;
   switch ($12|0) {
   case 1:  {
    $15 = $0;
    HEAP8[$15>>0] = 25;
    $16 = $1;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $18 << 4;
    $20 = $19&255;
    HEAP8[$16>>0] = $20;
    break L1;
    break;
   }
   case 2:  {
    $21 = $0;
    HEAP8[$21>>0] = 25;
    $22 = $1;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 & 15;
    $26 = $25&255;
    HEAP8[$22>>0] = $26;
    break L1;
    break;
   }
   case 8: case 3: case 0:  {
    $13 = $1;
    HEAP8[$13>>0] = 0;
    $14 = $0;
    HEAP8[$14>>0] = 0;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 7:  {
   $5 = $0;
   HEAP8[$5>>0] = -85;
   break;
  }
  case 15:  {
   $27 = $0;
   HEAP8[$27>>0] = -93;
   break;
  }
  default: {
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _it_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1229803597);
 if ($6) {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,26);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _it_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $b = 0, $buf = 0, $c = 0, $cvt = 0, $cwtv = 0, $dca2nna = 0, $dummy = 0;
 var $env = 0, $event = 0, $i = 0, $i1h = 0, $i2h = 0, $ifh = 0, $inst_map = 0, $inst_rmap = 0, $ish = 0, $j = 0, $k = 0, $last_fxp = 0, $lastevent = 0, $mask = 0, $max_ch = 0, $mod = 0, $new_fx = 0, $pat_len = 0, $pp_ins = 0, $pp_pat = 0;
 var $pp_smp = 0, $r = 0, $ret = 0, $sample_mode = 0, $sub = 0, $sub1 = 0, $sub2 = 0, $tnum = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $version = 0, $version_sec = 0, $xxc = 0, $xxi = 0, $xxs = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer24 = sp + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $dummy = sp + 3152|0;
 $lastevent = sp + 2640|0;
 $ifh = sp + 2112|0;
 $i1h = sp + 1552|0;
 $i2h = sp + 1248|0;
 $ish = sp + 1168|0;
 $env = sp + 2356|0;
 $mask = sp + 2568|0;
 $inst_map = sp + 680|0;
 $inst_rmap = sp + 196|0;
 $tracker_name = sp + 2528|0;
 $last_fxp = sp + 2464|0;
 $dca2nna = sp + 172|0;
 $version = sp + 116|0;
 $version_sec = sp + 112|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 ;HEAP32[$dca2nna>>2]=HEAP32[3496>>2]|0;HEAP32[$dca2nna+4>>2]=HEAP32[3496+4>>2]|0;HEAP32[$dca2nna+8>>2]=HEAP32[3496+8>>2]|0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = ((($ifh)) + 4|0);
 $9 = $2;
 (_hio_read($8,26,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($ifh)) + 30|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($ifh)) + 31|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read16l($16)|0);
 $18 = ((($ifh)) + 32|0);
 HEAP16[$18>>1] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($ifh)) + 34|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($ifh)) + 36|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($ifh)) + 38|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($ifh)) + 40|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read16l($31)|0);
 $33 = ((($ifh)) + 42|0);
 HEAP16[$33>>1] = $32;
 $34 = $2;
 $35 = (_hio_read16l($34)|0);
 $36 = ((($ifh)) + 44|0);
 HEAP16[$36>>1] = $35;
 $37 = $2;
 $38 = (_hio_read16l($37)|0);
 $39 = ((($ifh)) + 46|0);
 HEAP16[$39>>1] = $38;
 $40 = $2;
 $41 = (_hio_read8($40)|0);
 $42 = ((($ifh)) + 48|0);
 HEAP8[$42>>0] = $41;
 $43 = $2;
 $44 = (_hio_read8($43)|0);
 $45 = ((($ifh)) + 49|0);
 HEAP8[$45>>0] = $44;
 $46 = $2;
 $47 = (_hio_read8($46)|0);
 $48 = ((($ifh)) + 50|0);
 HEAP8[$48>>0] = $47;
 $49 = $2;
 $50 = (_hio_read8($49)|0);
 $51 = ((($ifh)) + 51|0);
 HEAP8[$51>>0] = $50;
 $52 = $2;
 $53 = (_hio_read8($52)|0);
 $54 = ((($ifh)) + 52|0);
 HEAP8[$54>>0] = $53;
 $55 = $2;
 $56 = (_hio_read8($55)|0);
 $57 = ((($ifh)) + 53|0);
 HEAP8[$57>>0] = $56;
 $58 = $2;
 $59 = (_hio_read16l($58)|0);
 $60 = ((($ifh)) + 54|0);
 HEAP16[$60>>1] = $59;
 $61 = $2;
 $62 = (_hio_read32l($61)|0);
 $63 = ((($ifh)) + 56|0);
 HEAP32[$63>>2] = $62;
 $64 = $2;
 $65 = (_hio_read32l($64)|0);
 $66 = ((($ifh)) + 60|0);
 HEAP32[$66>>2] = $65;
 $67 = ((($ifh)) + 64|0);
 $68 = $2;
 (_hio_read($67,64,1,$68)|0);
 $69 = ((($ifh)) + 128|0);
 $70 = $2;
 (_hio_read($69,64,1,$70)|0);
 $71 = $mod;
 $72 = ((($ifh)) + 4|0);
 (_strncpy(($71|0),($72|0),64)|0);
 $73 = ((($ifh)) + 32|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74&65535;
 $76 = $mod;
 $77 = ((($76)) + 156|0);
 HEAP32[$77>>2] = $75;
 $78 = ((($ifh)) + 34|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79&65535;
 $81 = $mod;
 $82 = ((($81)) + 140|0);
 HEAP32[$82>>2] = $80;
 $83 = ((($ifh)) + 36|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 $86 = $mod;
 $87 = ((($86)) + 144|0);
 HEAP32[$87>>2] = $85;
 $88 = ((($ifh)) + 38|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = $89&65535;
 $91 = $mod;
 $92 = ((($91)) + 128|0);
 HEAP32[$92>>2] = $90;
 $93 = $mod;
 $94 = ((($93)) + 140|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $mod;
  $98 = ((($97)) + 140|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (_calloc(4,$99)|0);
  $pp_ins = $100;
  $101 = $pp_ins;
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   label = 4;
  }
 } else {
  $pp_ins = 0;
  label = 4;
 }
 if ((label|0) == 4) {
  $103 = $mod;
  $104 = ((($103)) + 144|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (_calloc(4,$105)|0);
  $pp_smp = $106;
  $107 = $pp_smp;
  $108 = ($107|0)==(0|0);
  if (!($108)) {
   $109 = $mod;
   $110 = ((($109)) + 128|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (_calloc(4,$111)|0);
   $pp_pat = $112;
   $113 = $pp_pat;
   $114 = ($113|0)==(0|0);
   if (!($114)) {
    $115 = ((($ifh)) + 50|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = $mod;
    $119 = ((($118)) + 148|0);
    HEAP32[$119>>2] = $117;
    $120 = ((($ifh)) + 51|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = $mod;
    $124 = ((($123)) + 152|0);
    HEAP32[$124>>2] = $122;
    $125 = ((($ifh)) + 44|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = $126&65535;
    $128 = $127 ^ -1;
    $129 = $128 & 4;
    $sample_mode = $129;
    $130 = ((($ifh)) + 44|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $131&65535;
    $133 = $132 & 8;
    $134 = ($133|0)!=(0);
    if ($134) {
     $135 = $1;
     $136 = ((($135)) + 1280|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $137 | 4096;
     HEAP32[$136>>2] = $138;
    }
    $139 = $sample_mode;
    $140 = ($139|0)!=(0);
    if (!($140)) {
     $141 = ((($ifh)) + 42|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142&65535;
     $144 = ($143|0)>=(512);
     if ($144) {
      $145 = $1;
      $146 = ((($145)) + 1280|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = $147 | 16384;
      HEAP32[$146>>2] = $148;
     }
    }
    $i = 0;
    while(1) {
     $149 = $i;
     $150 = ($149|0)<(64);
     if (!($150)) {
      break;
     }
     $151 = $i;
     $152 = $mod;
     $153 = ((($152)) + 184|0);
     $154 = (($153) + (($151*12)|0)|0);
     $xxc = $154;
     $155 = $i;
     $156 = ((($ifh)) + 64|0);
     $157 = (($156) + ($155)|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158&255;
     $160 = ($159|0)==(100);
     if ($160) {
      $161 = $i;
      $162 = ((($ifh)) + 64|0);
      $163 = (($162) + ($161)|0);
      HEAP8[$163>>0] = 32;
     }
     $164 = $i;
     $165 = ((($ifh)) + 64|0);
     $166 = (($165) + ($164)|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = $168 & 128;
     $170 = ($169|0)!=(0);
     if ($170) {
      $171 = $i;
      $172 = ((($ifh)) + 128|0);
      $173 = (($172) + ($171)|0);
      HEAP8[$173>>0] = 0;
      $174 = $i;
      $175 = $mod;
      $176 = ((($175)) + 184|0);
      $177 = (($176) + (($174*12)|0)|0);
      $178 = ((($177)) + 8|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = $179 | 2;
      HEAP32[$178>>2] = $180;
     }
     $181 = ((($ifh)) + 44|0);
     $182 = HEAP16[$181>>1]|0;
     $183 = $182&65535;
     $184 = $183 & 1;
     $185 = ($184|0)!=(0);
     if ($185) {
      $186 = $i;
      $187 = ((($ifh)) + 64|0);
      $188 = (($187) + ($186)|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = $189&255;
      $191 = $190<<7;
      $192 = $191 >> 5;
      $193 = $xxc;
      HEAP32[$193>>2] = $192;
      $194 = $xxc;
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)>(255);
      if ($196) {
       $197 = $xxc;
       HEAP32[$197>>2] = 255;
      }
     } else {
      $198 = $xxc;
      HEAP32[$198>>2] = 128;
     }
     $199 = $i;
     $200 = ((($ifh)) + 128|0);
     $201 = (($200) + ($199)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202&255;
     $204 = $xxc;
     $205 = ((($204)) + 4|0);
     HEAP32[$205>>2] = $203;
     $206 = $i;
     $207 = (($206) + 1)|0;
     $i = $207;
    }
    $208 = $mod;
    $209 = ((($208)) + 156|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)<=(256);
    $212 = $mod;
    $213 = ((($212)) + 952|0);
    if ($211) {
     $214 = $mod;
     $215 = ((($214)) + 156|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = $2;
     (_hio_read($213,1,$216,$217)|0);
    } else {
     $218 = $2;
     (_hio_read($213,1,256,$218)|0);
     $219 = $2;
     $220 = $mod;
     $221 = ((($220)) + 156|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = (($222) - 256)|0;
     (_hio_seek($219,$223,1)|0);
     $224 = $mod;
     $225 = ((($224)) + 156|0);
     HEAP32[$225>>2] = 256;
    }
    $226 = ((($ifh)) + 44|0);
    $227 = HEAP16[$226>>1]|0;
    $228 = $227&65535;
    $229 = $228 & 16;
    $230 = ($229|0)!=(0);
    $231 = $230 ? 0 : 1;
    $new_fx = $231;
    $i = 0;
    while(1) {
     $232 = $i;
     $233 = $mod;
     $234 = ((($233)) + 156|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = (($235) - 1)|0;
     $237 = ($232|0)<($236|0);
     if (!($237)) {
      break;
     }
     $238 = $i;
     $239 = $mod;
     $240 = ((($239)) + 952|0);
     $241 = (($240) + ($238)|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242&255;
     $244 = ($243|0)==(254);
     if ($244) {
      $245 = $i;
      $246 = $mod;
      $247 = ((($246)) + 952|0);
      $248 = (($247) + ($245)|0);
      $249 = $i;
      $250 = (($249) + 1)|0;
      $251 = $mod;
      $252 = ((($251)) + 952|0);
      $253 = (($252) + ($250)|0);
      $254 = $mod;
      $255 = ((($254)) + 156|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = $i;
      $258 = (($256) - ($257))|0;
      $259 = (($258) - 1)|0;
      _memmove(($248|0),($253|0),($259|0))|0;
      $260 = $mod;
      $261 = ((($260)) + 156|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = (($262) + -1)|0;
      HEAP32[$261>>2] = $263;
     }
     $264 = $i;
     $265 = (($264) + 1)|0;
     $i = $265;
    }
    $i = 0;
    while(1) {
     $266 = $i;
     $267 = $mod;
     $268 = ((($267)) + 140|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ($266|0)<($269|0);
     if (!($270)) {
      break;
     }
     $271 = $2;
     $272 = (_hio_read32l($271)|0);
     $273 = $i;
     $274 = $pp_ins;
     $275 = (($274) + ($273<<2)|0);
     HEAP32[$275>>2] = $272;
     $276 = $i;
     $277 = (($276) + 1)|0;
     $i = $277;
    }
    $i = 0;
    while(1) {
     $278 = $i;
     $279 = $mod;
     $280 = ((($279)) + 144|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = ($278|0)<($281|0);
     if (!($282)) {
      break;
     }
     $283 = $2;
     $284 = (_hio_read32l($283)|0);
     $285 = $i;
     $286 = $pp_smp;
     $287 = (($286) + ($285<<2)|0);
     HEAP32[$287>>2] = $284;
     $288 = $i;
     $289 = (($288) + 1)|0;
     $i = $289;
    }
    $i = 0;
    while(1) {
     $290 = $i;
     $291 = $mod;
     $292 = ((($291)) + 128|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = ($290|0)<($293|0);
     if (!($294)) {
      break;
     }
     $295 = $2;
     $296 = (_hio_read32l($295)|0);
     $297 = $i;
     $298 = $pp_pat;
     $299 = (($298) + ($297<<2)|0);
     HEAP32[$299>>2] = $296;
     $300 = $i;
     $301 = (($300) + 1)|0;
     $i = $301;
    }
    $302 = $1;
    $303 = ((($302)) + 1264|0);
    HEAP32[$303>>2] = 8363;
    $304 = ((($ifh)) + 40|0);
    $305 = HEAP16[$304>>1]|0;
    $306 = $305&65535;
    $307 = $306 >> 8;
    L55: do {
     switch ($307|0) {
     case 0:  {
      (_strcpy(($tracker_name|0),(3512|0))|0);
      break;
     }
     case 127: case 8:  {
      $411 = ((($ifh)) + 40|0);
      $412 = HEAP16[$411>>1]|0;
      $413 = $412&65535;
      $414 = ($413|0)==(2184);
      if ($414) {
       (_strcpy(($tracker_name|0),(3664|0))|0);
       break L55;
      }
      $415 = ((($ifh)) + 40|0);
      $416 = HEAP16[$415>>1]|0;
      $417 = $416&65535;
      $418 = ($417|0)==(32767);
      if ($418) {
       (_strcpy(($tracker_name|0),(3680|0))|0);
       break L55;
      } else {
       $419 = ((($ifh)) + 40|0);
       $420 = HEAP16[$419>>1]|0;
       $421 = $420&65535;
       HEAP32[$vararg_buffer2>>2] = $421;
       (_snprintf($tracker_name,40,3696,$vararg_buffer2)|0);
       break L55;
      }
      break;
     }
     case 2: case 1:  {
      $308 = ((($ifh)) + 42|0);
      $309 = HEAP16[$308>>1]|0;
      $310 = $309&65535;
      $311 = ($310|0)==(512);
      do {
       if ($311) {
        $312 = ((($ifh)) + 40|0);
        $313 = HEAP16[$312>>1]|0;
        $314 = $313&65535;
        $315 = ($314|0)==(532);
        if ($315) {
         $316 = ((($ifh)) + 44|0);
         $317 = HEAP16[$316>>1]|0;
         $318 = $317&65535;
         $319 = ($318|0)==(9);
         if ($319) {
          $320 = ((($ifh)) + 46|0);
          $321 = HEAP16[$320>>1]|0;
          $322 = $321&65535;
          $323 = ($322|0)==(0);
          if ($323) {
           $324 = ((($ifh)) + 31|0);
           $325 = HEAP8[$324>>0]|0;
           $326 = $325&255;
           $327 = ($326|0)==(0);
           if ($327) {
            $328 = ((($ifh)) + 30|0);
            $329 = HEAP8[$328>>0]|0;
            $330 = $329&255;
            $331 = ($330|0)==(0);
            if ($331) {
             $332 = ((($ifh)) + 34|0);
             $333 = HEAP16[$332>>1]|0;
             $334 = $333&65535;
             $335 = ($334|0)==(0);
             if ($335) {
              $336 = ((($ifh)) + 38|0);
              $337 = HEAP16[$336>>1]|0;
              $338 = $337&65535;
              $339 = (($338) + 1)|0;
              $340 = ((($ifh)) + 32|0);
              $341 = HEAP16[$340>>1]|0;
              $342 = $341&65535;
              $343 = ($339|0)==($342|0);
              if ($343) {
               $344 = ((($ifh)) + 48|0);
               $345 = HEAP8[$344>>0]|0;
               $346 = $345&255;
               $347 = ($346|0)==(128);
               if ($347) {
                $348 = ((($ifh)) + 49|0);
                $349 = HEAP8[$348>>0]|0;
                $350 = $349&255;
                $351 = ($350|0)==(100);
                if (!($351)) {
                 break;
                }
                $352 = ((($ifh)) + 50|0);
                $353 = HEAP8[$352>>0]|0;
                $354 = $353&255;
                $355 = ($354|0)==(1);
                if (!($355)) {
                 break;
                }
                $356 = ((($ifh)) + 52|0);
                $357 = HEAP8[$356>>0]|0;
                $358 = $357&255;
                $359 = ($358|0)==(128);
                if (!($359)) {
                 break;
                }
                $360 = ((($ifh)) + 53|0);
                $361 = HEAP8[$360>>0]|0;
                $362 = $361&255;
                $363 = ($362|0)==(0);
                if (!($363)) {
                 break;
                }
                $364 = ((($ifh)) + 54|0);
                $365 = HEAP16[$364>>1]|0;
                $366 = $365&65535;
                $367 = ($366|0)==(0);
                if (!($367)) {
                 break;
                }
                $368 = ((($ifh)) + 56|0);
                $369 = HEAP32[$368>>2]|0;
                $370 = ($369|0)==(0);
                if (!($370)) {
                 break;
                }
                $371 = ((($ifh)) + 60|0);
                $372 = HEAP32[$371>>2]|0;
                $373 = ($372|0)==(0);
                if (!($373)) {
                 break;
                }
                (_strcpy(($tracker_name|0),(3520|0))|0);
                break L55;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      } while(0);
      $374 = ((($ifh)) + 42|0);
      $375 = HEAP16[$374>>1]|0;
      $376 = $375&65535;
      $377 = ($376|0)==(512);
      if ($377) {
       $378 = ((($ifh)) + 40|0);
       $379 = HEAP16[$378>>1]|0;
       $380 = $379&65535;
       $381 = ($380|0)==(535);
       if ($381) {
        (_strcpy(($tracker_name|0),(3544|0))|0);
        $382 = $sample_mode;
        $383 = ($382|0)!=(0);
        $384 = $383 ? 256 : 532;
        $385 = $384&65535;
        $386 = ((($ifh)) + 42|0);
        HEAP16[$386>>1] = $385;
        break L55;
       }
      }
      $387 = ((($ifh)) + 40|0);
      $388 = HEAP16[$387>>1]|0;
      $389 = $388&65535;
      $390 = ($389|0)==(534);
      if ($390) {
       (_strcpy(($tracker_name|0),(3568|0))|0);
       break L55;
      }
      $391 = ((($ifh)) + 40|0);
      $392 = HEAP16[$391>>1]|0;
      $393 = $392&65535;
      $394 = ($393|0)==(535);
      if ($394) {
       (_strcpy(($tracker_name|0),(3592|0))|0);
       break L55;
      }
      $395 = ((($ifh)) + 40|0);
      $396 = HEAP16[$395>>1]|0;
      $397 = $396&65535;
      $398 = ($397|0)==(532);
      if ($398) {
       $399 = ((($ifh)) + 60|0);
       $400 = (_memcmp($399,3616,4)|0);
       $401 = ($400|0)!=(0);
       if (!($401)) {
        (_strcpy(($tracker_name|0),(3624|0))|0);
        break L55;
       }
      }
      $402 = ((($ifh)) + 40|0);
      $403 = HEAP16[$402>>1]|0;
      $404 = $403&65535;
      $405 = $404 & 3840;
      $406 = $405 >> 8;
      $407 = ((($ifh)) + 40|0);
      $408 = HEAP16[$407>>1]|0;
      $409 = $408&65535;
      $410 = $409 & 255;
      HEAP32[$vararg_buffer>>2] = $406;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $410;
      (_snprintf($tracker_name,40,3640,$vararg_buffer)|0);
      break;
     }
     default: {
      $422 = ((($ifh)) + 40|0);
      $423 = HEAP16[$422>>1]|0;
      $424 = $423&65535;
      $425 = $424 >> 12;
      if ((($425|0) == 1)) {
       $426 = ((($ifh)) + 40|0);
       $427 = HEAP16[$426>>1]|0;
       $428 = $427&65535;
       $429 = $428 & 4095;
       $430 = $429&65535;
       $cwtv = $430;
       $431 = $cwtv;
       $432 = $431&65535;
       $433 = ($432|0)>(80);
       if (!($433)) {
        $449 = $cwtv;
        $450 = $449&65535;
        HEAP32[$vararg_buffer10>>2] = $450;
        (_snprintf($tracker_name,40,3744,$vararg_buffer10)|0);
        break L55;
       }
       $434 = $cwtv;
       $435 = $434&65535;
       $436 = (($435) - 80)|0;
       $437 = ($436*86400)|0;
       $438 = (($437) + 1254355200)|0;
       HEAP32[$version_sec>>2] = $438;
       $439 = (_localtime_r(($version_sec|0),($version|0))|0);
       $440 = ($439|0)!=(0|0);
       if (!($440)) {
        break L55;
       }
       $441 = ((($version)) + 20|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = (($442) + 1900)|0;
       $444 = ((($version)) + 16|0);
       $445 = HEAP32[$444>>2]|0;
       $446 = (($445) + 1)|0;
       $447 = ((($version)) + 12|0);
       $448 = HEAP32[$447>>2]|0;
       HEAP32[$vararg_buffer5>>2] = $443;
       $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
       HEAP32[$vararg_ptr8>>2] = $446;
       $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
       HEAP32[$vararg_ptr9>>2] = $448;
       (_snprintf($tracker_name,40,3712,$vararg_buffer5)|0);
       break L55;
      } else if ((($425|0) == 5)) {
       $451 = ((($ifh)) + 40|0);
       $452 = HEAP16[$451>>1]|0;
       $453 = $452&65535;
       $454 = $453 & 3840;
       $455 = $454 >> 8;
       $456 = ((($ifh)) + 40|0);
       $457 = HEAP16[$456>>1]|0;
       $458 = $457&65535;
       $459 = $458 & 255;
       HEAP32[$vararg_buffer13>>2] = $455;
       $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
       HEAP32[$vararg_ptr16>>2] = $459;
       (_snprintf($tracker_name,40,3768,$vararg_buffer13)|0);
       $460 = ((($ifh)) + 60|0);
       $461 = (_memcmp($460,3784,4)|0);
       $462 = ($461|0)!=(0);
       if (!($462)) {
        break L55;
       }
       (_strncat($tracker_name,3792,40)|0);
       break L55;
      } else if ((($425|0) == 6)) {
       $463 = ((($ifh)) + 40|0);
       $464 = HEAP16[$463>>1]|0;
       $465 = $464&65535;
       $466 = $465 & 3840;
       $467 = $466 >> 8;
       $468 = ((($ifh)) + 40|0);
       $469 = HEAP16[$468>>1]|0;
       $470 = $469&65535;
       $471 = $470 & 255;
       HEAP32[$vararg_buffer17>>2] = $467;
       $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
       HEAP32[$vararg_ptr20>>2] = $471;
       (_snprintf($tracker_name,40,3808,$vararg_buffer17)|0);
       break L55;
      } else {
       $472 = ((($ifh)) + 40|0);
       $473 = HEAP16[$472>>1]|0;
       $474 = $473&65535;
       HEAP32[$vararg_buffer21>>2] = $474;
       (_snprintf($tracker_name,40,3696,$vararg_buffer21)|0);
       break L55;
      }
     }
     }
    } while(0);
    $475 = $1;
    $476 = ((($ifh)) + 42|0);
    $477 = HEAP16[$476>>1]|0;
    $478 = $477&65535;
    $479 = $478 >> 8;
    $480 = ((($ifh)) + 42|0);
    $481 = HEAP16[$480>>1]|0;
    $482 = $481&65535;
    $483 = $482 & 255;
    HEAP32[$vararg_buffer24>>2] = $tracker_name;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $479;
    $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
    HEAP32[$vararg_ptr28>>2] = $483;
    _set_type($475,3832,$vararg_buffer24);
    $484 = $sample_mode;
    $485 = ($484|0)!=(0);
    if ($485) {
     $486 = $mod;
     $487 = ((($486)) + 144|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = $mod;
     $490 = ((($489)) + 140|0);
     HEAP32[$490>>2] = $488;
    }
    $491 = $mod;
    $492 = (_instrument_init($491)|0);
    $493 = ($492|0)<(0);
    L112: do {
     if (!($493)) {
      $i = 0;
      while(1) {
       $494 = $i;
       $495 = $mod;
       $496 = ((($495)) + 140|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = ($494|0)<($497|0);
       if (!($498)) {
        break;
       }
       $499 = $i;
       $500 = $mod;
       $501 = ((($500)) + 176|0);
       $502 = HEAP32[$501>>2]|0;
       $503 = (($502) + (($499*764)|0)|0);
       $xxi = $503;
       $504 = $sample_mode;
       $505 = ($504|0)!=(0);
       L117: do {
        if ($505) {
         label = 129;
        } else {
         $506 = ((($ifh)) + 42|0);
         $507 = HEAP16[$506>>1]|0;
         $508 = $507&65535;
         $509 = ($508|0)>=(512);
         if ($509) {
          $510 = $2;
          $511 = $3;
          $512 = $i;
          $513 = $pp_ins;
          $514 = (($513) + ($512<<2)|0);
          $515 = HEAP32[$514>>2]|0;
          $516 = (($511) + ($515))|0;
          $517 = (_hio_seek($510,$516,0)|0);
          $518 = ($517|0)!=(0);
          if ($518) {
           break L112;
          }
          $519 = $2;
          $520 = (_hio_read32b($519)|0);
          HEAP32[$i2h>>2] = $520;
          $521 = ((($i2h)) + 4|0);
          $522 = $2;
          (_hio_read($521,12,1,$522)|0);
          $523 = $2;
          $524 = (_hio_read8($523)|0);
          $525 = ((($i2h)) + 16|0);
          HEAP8[$525>>0] = $524;
          $526 = $2;
          $527 = (_hio_read8($526)|0);
          $528 = ((($i2h)) + 17|0);
          HEAP8[$528>>0] = $527;
          $529 = $2;
          $530 = (_hio_read8($529)|0);
          $531 = ((($i2h)) + 18|0);
          HEAP8[$531>>0] = $530;
          $532 = $2;
          $533 = (_hio_read8($532)|0);
          $534 = ((($i2h)) + 19|0);
          HEAP8[$534>>0] = $533;
          $535 = $2;
          $536 = (_hio_read16l($535)|0);
          $537 = ((($i2h)) + 20|0);
          HEAP16[$537>>1] = $536;
          $538 = $2;
          $539 = (_hio_read8($538)|0);
          $540 = ((($i2h)) + 22|0);
          HEAP8[$540>>0] = $539;
          $541 = $2;
          $542 = (_hio_read8($541)|0);
          $543 = ((($i2h)) + 23|0);
          HEAP8[$543>>0] = $542;
          $544 = $2;
          $545 = (_hio_read8($544)|0);
          $546 = ((($i2h)) + 24|0);
          HEAP8[$546>>0] = $545;
          $547 = $2;
          $548 = (_hio_read8($547)|0);
          $549 = ((($i2h)) + 25|0);
          HEAP8[$549>>0] = $548;
          $550 = $2;
          $551 = (_hio_read8($550)|0);
          $552 = ((($i2h)) + 26|0);
          HEAP8[$552>>0] = $551;
          $553 = $2;
          $554 = (_hio_read8($553)|0);
          $555 = ((($i2h)) + 27|0);
          HEAP8[$555>>0] = $554;
          $556 = $2;
          $557 = (_hio_read16l($556)|0);
          $558 = ((($i2h)) + 28|0);
          HEAP16[$558>>1] = $557;
          $559 = $2;
          $560 = (_hio_read8($559)|0);
          $561 = ((($i2h)) + 30|0);
          HEAP8[$561>>0] = $560;
          $562 = $2;
          $563 = (_hio_read8($562)|0);
          $564 = ((($i2h)) + 31|0);
          HEAP8[$564>>0] = $563;
          $565 = ((($i2h)) + 32|0);
          $566 = $2;
          (_hio_read($565,26,1,$566)|0);
          $567 = ((($i2h)) + 32|0);
          _fix_name($567,26);
          $568 = $2;
          $569 = (_hio_read8($568)|0);
          $570 = ((($i2h)) + 58|0);
          HEAP8[$570>>0] = $569;
          $571 = $2;
          $572 = (_hio_read8($571)|0);
          $573 = ((($i2h)) + 59|0);
          HEAP8[$573>>0] = $572;
          $574 = $2;
          $575 = (_hio_read8($574)|0);
          $576 = ((($i2h)) + 60|0);
          HEAP8[$576>>0] = $575;
          $577 = $2;
          $578 = (_hio_read8($577)|0);
          $579 = ((($i2h)) + 61|0);
          HEAP8[$579>>0] = $578;
          $580 = $2;
          $581 = (_hio_read16l($580)|0);
          $582 = ((($i2h)) + 62|0);
          HEAP16[$582>>1] = $581;
          $583 = ((($i2h)) + 64|0);
          $584 = $2;
          (_hio_read($583,240,1,$584)|0);
          $585 = $xxi;
          $586 = ((($i2h)) + 32|0);
          (_copy_adjust($585,$586,25)|0);
          $587 = ((($i2h)) + 20|0);
          $588 = HEAP16[$587>>1]|0;
          $589 = $588&65535;
          $590 = $589 << 6;
          $591 = $xxi;
          $592 = ((($591)) + 40|0);
          HEAP32[$592>>2] = $590;
          $593 = $xxi;
          $594 = ((($593)) + 44|0);
          $595 = $2;
          _read_envelope($594,$env,$595);
          $596 = $xxi;
          $597 = ((($596)) + 200|0);
          $598 = $2;
          _read_envelope($597,$env,$598);
          $599 = $xxi;
          $600 = ((($599)) + 356|0);
          $601 = $2;
          _read_envelope($600,$env,$601);
          $602 = $xxi;
          $603 = ((($602)) + 200|0);
          $604 = HEAP32[$603>>2]|0;
          $605 = $604 & 1;
          $606 = ($605|0)!=(0);
          L121: do {
           if ($606) {
            $j = 0;
            while(1) {
             $607 = $j;
             $608 = $xxi;
             $609 = ((($608)) + 200|0);
             $610 = ((($609)) + 4|0);
             $611 = HEAP32[$610>>2]|0;
             $612 = ($607|0)<($611|0);
             if (!($612)) {
              break L121;
             }
             $613 = $j;
             $614 = $613<<1;
             $615 = (($614) + 1)|0;
             $616 = $xxi;
             $617 = ((($616)) + 200|0);
             $618 = ((($617)) + 28|0);
             $619 = (($618) + ($615<<1)|0);
             $620 = HEAP16[$619>>1]|0;
             $621 = $620 << 16 >> 16;
             $622 = (($621) + 32)|0;
             $623 = $622&65535;
             HEAP16[$619>>1] = $623;
             $624 = $j;
             $625 = (($624) + 1)|0;
             $j = $625;
            }
           }
          } while(0);
          $626 = $xxi;
          $627 = ((($626)) + 44|0);
          $628 = HEAP32[$627>>2]|0;
          $629 = $628 & 1;
          $630 = ($629|0)!=(0);
          do {
           if ($630) {
            $631 = $xxi;
            $632 = ((($631)) + 44|0);
            $633 = ((($632)) + 4|0);
            $634 = HEAP32[$633>>2]|0;
            $635 = ($634|0)==(0);
            if (!($635)) {
             break;
            }
            $636 = $xxi;
            $637 = ((($636)) + 44|0);
            $638 = ((($637)) + 4|0);
            HEAP32[$638>>2] = 1;
           }
          } while(0);
          $639 = $xxi;
          $640 = ((($639)) + 200|0);
          $641 = HEAP32[$640>>2]|0;
          $642 = $641 & 1;
          $643 = ($642|0)!=(0);
          do {
           if ($643) {
            $644 = $xxi;
            $645 = ((($644)) + 200|0);
            $646 = ((($645)) + 4|0);
            $647 = HEAP32[$646>>2]|0;
            $648 = ($647|0)==(0);
            if (!($648)) {
             break;
            }
            $649 = $xxi;
            $650 = ((($649)) + 200|0);
            $651 = ((($650)) + 4|0);
            HEAP32[$651>>2] = 1;
           }
          } while(0);
          $652 = $xxi;
          $653 = ((($652)) + 356|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = $654 & 1;
          $656 = ($655|0)!=(0);
          do {
           if ($656) {
            $657 = $xxi;
            $658 = ((($657)) + 356|0);
            $659 = ((($658)) + 4|0);
            $660 = HEAP32[$659>>2]|0;
            $661 = ($660|0)==(0);
            if (!($661)) {
             break;
            }
            $662 = $xxi;
            $663 = ((($662)) + 356|0);
            $664 = ((($663)) + 4|0);
            HEAP32[$664>>2] = 1;
           }
          } while(0);
          $665 = HEAP8[$env>>0]|0;
          $666 = $665&255;
          $667 = $666 & 128;
          $668 = ($667|0)!=(0);
          L139: do {
           if ($668) {
            $669 = $xxi;
            $670 = ((($669)) + 356|0);
            $671 = HEAP32[$670>>2]|0;
            $672 = $671 | 8;
            HEAP32[$670>>2] = $672;
            $j = 0;
            while(1) {
             $673 = $j;
             $674 = ((($env)) + 1|0);
             $675 = HEAP8[$674>>0]|0;
             $676 = $675&255;
             $677 = ($673|0)<($676|0);
             if (!($677)) {
              break L139;
             }
             $678 = $j;
             $679 = $678<<1;
             $680 = (($679) + 1)|0;
             $681 = $xxi;
             $682 = ((($681)) + 356|0);
             $683 = ((($682)) + 28|0);
             $684 = (($683) + ($680<<1)|0);
             $685 = HEAP16[$684>>1]|0;
             $686 = $685 << 16 >> 16;
             $687 = (($686) + 32)|0;
             $688 = $687&65535;
             HEAP16[$684>>1] = $688;
             $689 = $j;
             $690 = $689<<1;
             $691 = (($690) + 1)|0;
             $692 = $xxi;
             $693 = ((($692)) + 356|0);
             $694 = ((($693)) + 28|0);
             $695 = (($694) + ($691<<1)|0);
             $696 = HEAP16[$695>>1]|0;
             $697 = $696 << 16 >> 16;
             $698 = $697<<2;
             $699 = $698&65535;
             HEAP16[$695>>1] = $699;
             $700 = $j;
             $701 = (($700) + 1)|0;
             $j = $701;
            }
           } else {
            $j = 0;
            while(1) {
             $702 = $j;
             $703 = ((($env)) + 1|0);
             $704 = HEAP8[$703>>0]|0;
             $705 = $704&255;
             $706 = ($702|0)<($705|0);
             if (!($706)) {
              break L139;
             }
             $707 = $j;
             $708 = $707<<1;
             $709 = (($708) + 1)|0;
             $710 = $xxi;
             $711 = ((($710)) + 356|0);
             $712 = ((($711)) + 28|0);
             $713 = (($712) + ($709<<1)|0);
             $714 = HEAP16[$713>>1]|0;
             $715 = $714 << 16 >> 16;
             $716 = ($715*50)|0;
             $717 = $716&65535;
             HEAP16[$713>>1] = $717;
             $718 = $j;
             $719 = (($718) + 1)|0;
             $j = $719;
            }
           }
          } while(0);
          $j = 0;
          while(1) {
           $720 = $j;
           $721 = ($720|0)<(120);
           if (!($721)) {
            break;
           }
           $722 = $j;
           $723 = (($inst_map) + ($722<<2)|0);
           HEAP32[$723>>2] = -1;
           $724 = $j;
           $725 = (($724) + 1)|0;
           $j = $725;
          }
          $j = 0;
          $k = 0;
          while(1) {
           $726 = $j;
           $727 = ($726|0)<(120);
           if (!($727)) {
            break;
           }
           $728 = $j;
           $729 = $728<<1;
           $730 = (($729) + 1)|0;
           $731 = ((($i2h)) + 64|0);
           $732 = (($731) + ($730)|0);
           $733 = HEAP8[$732>>0]|0;
           $734 = $733&255;
           $735 = (($734) - 1)|0;
           $c = $735;
           $736 = $c;
           $737 = ($736|0)<(0);
           if ($737) {
            $738 = $j;
            $739 = $xxi;
            $740 = ((($739)) + 512|0);
            $741 = (($740) + ($738<<1)|0);
            HEAP8[$741>>0] = -1;
            $742 = $j;
            $743 = $xxi;
            $744 = ((($743)) + 512|0);
            $745 = (($744) + ($742<<1)|0);
            $746 = ((($745)) + 1|0);
            HEAP8[$746>>0] = 0;
           } else {
            $747 = $c;
            $748 = (($inst_map) + ($747<<2)|0);
            $749 = HEAP32[$748>>2]|0;
            $750 = ($749|0)==(-1);
            if ($750) {
             $751 = $k;
             $752 = $c;
             $753 = (($inst_map) + ($752<<2)|0);
             HEAP32[$753>>2] = $751;
             $754 = $c;
             $755 = $k;
             $756 = (($inst_rmap) + ($755<<2)|0);
             HEAP32[$756>>2] = $754;
             $757 = $k;
             $758 = (($757) + 1)|0;
             $k = $758;
            }
            $759 = $c;
            $760 = (($inst_map) + ($759<<2)|0);
            $761 = HEAP32[$760>>2]|0;
            $762 = $761&255;
            $763 = $j;
            $764 = $xxi;
            $765 = ((($764)) + 512|0);
            $766 = (($765) + ($763<<1)|0);
            HEAP8[$766>>0] = $762;
            $767 = $j;
            $768 = $767<<1;
            $769 = ((($i2h)) + 64|0);
            $770 = (($769) + ($768)|0);
            $771 = HEAP8[$770>>0]|0;
            $772 = $771&255;
            $773 = $j;
            $774 = (($772) - ($773))|0;
            $775 = $774&255;
            $776 = $j;
            $777 = $xxi;
            $778 = ((($777)) + 512|0);
            $779 = (($778) + ($776<<1)|0);
            $780 = ((($779)) + 1|0);
            HEAP8[$780>>0] = $775;
           }
           $781 = $j;
           $782 = (($781) + 1)|0;
           $j = $782;
          }
          $783 = $k;
          $784 = $xxi;
          $785 = ((($784)) + 36|0);
          HEAP32[$785>>2] = $783;
          $786 = ((($i2h)) + 24|0);
          $787 = HEAP8[$786>>0]|0;
          $788 = $787&255;
          $789 = $788 >> 1;
          $790 = $xxi;
          $791 = ((($790)) + 32|0);
          HEAP32[$791>>2] = $789;
          $792 = $k;
          $793 = ($792|0)!=(0);
          if (!($793)) {
           break;
          }
          $794 = $k;
          $795 = (_calloc(64,$794)|0);
          $796 = $xxi;
          $797 = ((($796)) + 756|0);
          HEAP32[$797>>2] = $795;
          $798 = $xxi;
          $799 = ((($798)) + 756|0);
          $800 = HEAP32[$799>>2]|0;
          $801 = ($800|0)==(0|0);
          if ($801) {
           break L112;
          }
          $j = 0;
          while(1) {
           $802 = $j;
           $803 = $k;
           $804 = ($802|0)<($803|0);
           if (!($804)) {
            break L117;
           }
           $805 = $j;
           $806 = $xxi;
           $807 = ((($806)) + 756|0);
           $808 = HEAP32[$807>>2]|0;
           $809 = (($808) + ($805<<6)|0);
           $sub = $809;
           $810 = $j;
           $811 = (($inst_rmap) + ($810<<2)|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = $sub;
           $814 = ((($813)) + 40|0);
           HEAP32[$814>>2] = $812;
           $815 = ((($i2h)) + 17|0);
           $816 = HEAP8[$815>>0]|0;
           $817 = $816&255;
           $818 = $sub;
           $819 = ((($818)) + 44|0);
           HEAP32[$819>>2] = $817;
           $820 = ((($i2h)) + 18|0);
           $821 = HEAP8[$820>>0]|0;
           $822 = $821&255;
           $823 = $sub;
           $824 = ((($823)) + 48|0);
           HEAP32[$824>>2] = $822;
           $825 = ((($i2h)) + 19|0);
           $826 = HEAP8[$825>>0]|0;
           $827 = $826&255;
           $828 = $827 & 3;
           $829 = (($dca2nna) + ($828<<2)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = $sub;
           $832 = ((($831)) + 52|0);
           HEAP32[$832>>2] = $830;
           $833 = ((($i2h)) + 25|0);
           $834 = HEAP8[$833>>0]|0;
           $835 = $834&255;
           $836 = $835 & 128;
           $837 = ($836|0)!=(0);
           if ($837) {
            $844 = -1;
           } else {
            $838 = ((($i2h)) + 25|0);
            $839 = HEAP8[$838>>0]|0;
            $840 = $839&255;
            $841 = $840<<2;
            $844 = $841;
           }
           $842 = $sub;
           $843 = ((($842)) + 8|0);
           HEAP32[$843>>2] = $844;
           $845 = ((($i2h)) + 58|0);
           $846 = HEAP8[$845>>0]|0;
           $847 = $846&255;
           $848 = $sub;
           $849 = ((($848)) + 56|0);
           HEAP32[$849>>2] = $847;
           $850 = ((($i2h)) + 59|0);
           $851 = HEAP8[$850>>0]|0;
           $852 = $851&255;
           $853 = $sub;
           $854 = ((($853)) + 60|0);
           HEAP32[$854>>2] = $852;
           $855 = $j;
           $856 = (($855) + 1)|0;
           $j = $856;
          }
         } else {
          label = 129;
         }
        }
       } while(0);
       L172: do {
        if ((label|0) == 129) {
         label = 0;
         $857 = $sample_mode;
         $858 = ($857|0)!=(0);
         if (!($858)) {
          $859 = $2;
          $860 = $3;
          $861 = $i;
          $862 = $pp_ins;
          $863 = (($862) + ($861<<2)|0);
          $864 = HEAP32[$863>>2]|0;
          $865 = (($860) + ($864))|0;
          (_hio_seek($859,$865,0)|0);
          $866 = $2;
          $867 = (_hio_read32b($866)|0);
          HEAP32[$i1h>>2] = $867;
          $868 = ((($i1h)) + 4|0);
          $869 = $2;
          (_hio_read($868,12,1,$869)|0);
          $870 = $2;
          $871 = (_hio_read8($870)|0);
          $872 = ((($i1h)) + 16|0);
          HEAP8[$872>>0] = $871;
          $873 = $2;
          $874 = (_hio_read8($873)|0);
          $875 = ((($i1h)) + 17|0);
          HEAP8[$875>>0] = $874;
          $876 = $2;
          $877 = (_hio_read8($876)|0);
          $878 = ((($i1h)) + 18|0);
          HEAP8[$878>>0] = $877;
          $879 = $2;
          $880 = (_hio_read8($879)|0);
          $881 = ((($i1h)) + 19|0);
          HEAP8[$881>>0] = $880;
          $882 = $2;
          $883 = (_hio_read8($882)|0);
          $884 = ((($i1h)) + 20|0);
          HEAP8[$884>>0] = $883;
          $885 = $2;
          $886 = (_hio_read8($885)|0);
          $887 = ((($i1h)) + 21|0);
          HEAP8[$887>>0] = $886;
          $888 = $2;
          $889 = (_hio_read16l($888)|0);
          $890 = ((($i1h)) + 22|0);
          HEAP16[$890>>1] = $889;
          $891 = $2;
          $892 = (_hio_read16l($891)|0);
          $893 = ((($i1h)) + 24|0);
          HEAP16[$893>>1] = $892;
          $894 = $2;
          $895 = (_hio_read8($894)|0);
          $896 = ((($i1h)) + 26|0);
          HEAP8[$896>>0] = $895;
          $897 = $2;
          $898 = (_hio_read8($897)|0);
          $899 = ((($i1h)) + 27|0);
          HEAP8[$899>>0] = $898;
          $900 = $2;
          $901 = (_hio_read16l($900)|0);
          $902 = ((($i1h)) + 28|0);
          HEAP16[$902>>1] = $901;
          $903 = $2;
          $904 = (_hio_read8($903)|0);
          $905 = ((($i1h)) + 30|0);
          HEAP8[$905>>0] = $904;
          $906 = $2;
          $907 = (_hio_read8($906)|0);
          $908 = ((($i1h)) + 31|0);
          HEAP8[$908>>0] = $907;
          $909 = ((($i1h)) + 32|0);
          $910 = $2;
          (_hio_read($909,26,1,$910)|0);
          $911 = ((($i1h)) + 32|0);
          _fix_name($911,26);
          $912 = ((($i1h)) + 58|0);
          $913 = $2;
          (_hio_read($912,6,1,$913)|0);
          $914 = ((($i1h)) + 64|0);
          $915 = $2;
          (_hio_read($914,240,1,$915)|0);
          $916 = ((($i1h)) + 304|0);
          $917 = $2;
          (_hio_read($916,200,1,$917)|0);
          $918 = ((($i1h)) + 504|0);
          $919 = $2;
          (_hio_read($918,50,1,$919)|0);
          $920 = $xxi;
          $921 = ((($i1h)) + 32|0);
          (_copy_adjust($920,$921,25)|0);
          $922 = ((($i1h)) + 24|0);
          $923 = HEAP16[$922>>1]|0;
          $924 = $923&65535;
          $925 = $924 << 7;
          $926 = $xxi;
          $927 = ((($926)) + 40|0);
          HEAP32[$927>>2] = $925;
          $928 = $xxi;
          $929 = ((($928)) + 44|0);
          HEAP32[$929>>2] = 0;
          $930 = ((($i1h)) + 17|0);
          $931 = HEAP8[$930>>0]|0;
          $932 = $931&255;
          $933 = $932 & 1;
          $934 = ($933|0)!=(0);
          if ($934) {
           $935 = $xxi;
           $936 = ((($935)) + 44|0);
           $937 = HEAP32[$936>>2]|0;
           $938 = $937 | 1;
           HEAP32[$936>>2] = $938;
          }
          $939 = ((($i1h)) + 17|0);
          $940 = HEAP8[$939>>0]|0;
          $941 = $940&255;
          $942 = $941 & 2;
          $943 = ($942|0)!=(0);
          if ($943) {
           $944 = $xxi;
           $945 = ((($944)) + 44|0);
           $946 = HEAP32[$945>>2]|0;
           $947 = $946 | 4;
           HEAP32[$945>>2] = $947;
          }
          $948 = ((($i1h)) + 17|0);
          $949 = HEAP8[$948>>0]|0;
          $950 = $949&255;
          $951 = $950 & 4;
          $952 = ($951|0)!=(0);
          if ($952) {
           $953 = $xxi;
           $954 = ((($953)) + 44|0);
           $955 = HEAP32[$954>>2]|0;
           $956 = $955 | 18;
           HEAP32[$954>>2] = $956;
          }
          $957 = ((($i1h)) + 17|0);
          $958 = HEAP8[$957>>0]|0;
          $959 = $958&255;
          $960 = $959 & 8;
          $961 = ($960|0)!=(0);
          if ($961) {
           $962 = $xxi;
           $963 = ((($962)) + 44|0);
           $964 = HEAP32[$963>>2]|0;
           $965 = $964 | 34;
           HEAP32[$963>>2] = $965;
          }
          $966 = ((($i1h)) + 18|0);
          $967 = HEAP8[$966>>0]|0;
          $968 = $967&255;
          $969 = $xxi;
          $970 = ((($969)) + 44|0);
          $971 = ((($970)) + 20|0);
          HEAP32[$971>>2] = $968;
          $972 = ((($i1h)) + 19|0);
          $973 = HEAP8[$972>>0]|0;
          $974 = $973&255;
          $975 = $xxi;
          $976 = ((($975)) + 44|0);
          $977 = ((($976)) + 24|0);
          HEAP32[$977>>2] = $974;
          $978 = ((($i1h)) + 20|0);
          $979 = HEAP8[$978>>0]|0;
          $980 = $979&255;
          $981 = $xxi;
          $982 = ((($981)) + 44|0);
          $983 = ((($982)) + 12|0);
          HEAP32[$983>>2] = $980;
          $984 = ((($i1h)) + 21|0);
          $985 = HEAP8[$984>>0]|0;
          $986 = $985&255;
          $987 = $xxi;
          $988 = ((($987)) + 44|0);
          $989 = ((($988)) + 16|0);
          HEAP32[$989>>2] = $986;
          $k = 0;
          while(1) {
           $990 = $k;
           $991 = $990<<1;
           $992 = ((($i1h)) + 504|0);
           $993 = (($992) + ($991)|0);
           $994 = HEAP8[$993>>0]|0;
           $995 = $994&255;
           $996 = ($995|0)!=(255);
           $997 = $k;
           if (!($996)) {
            break;
           }
           $998 = (($997) + 1)|0;
           $k = $998;
          }
          $999 = $xxi;
          $1000 = ((($999)) + 44|0);
          $1001 = ((($1000)) + 4|0);
          HEAP32[$1001>>2] = $997;
          while(1) {
           $1002 = $k;
           $1003 = (($1002) + -1)|0;
           $k = $1003;
           $1004 = ($1002|0)!=(0);
           if (!($1004)) {
            break;
           }
           $1005 = $k;
           $1006 = $1005<<1;
           $1007 = ((($i1h)) + 504|0);
           $1008 = (($1007) + ($1006)|0);
           $1009 = HEAP8[$1008>>0]|0;
           $1010 = $1009&255;
           $1011 = $k;
           $1012 = $1011<<1;
           $1013 = $xxi;
           $1014 = ((($1013)) + 44|0);
           $1015 = ((($1014)) + 28|0);
           $1016 = (($1015) + ($1012<<1)|0);
           HEAP16[$1016>>1] = $1010;
           $1017 = $k;
           $1018 = $1017<<1;
           $1019 = (($1018) + 1)|0;
           $1020 = ((($i1h)) + 504|0);
           $1021 = (($1020) + ($1019)|0);
           $1022 = HEAP8[$1021>>0]|0;
           $1023 = $1022&255;
           $1024 = $k;
           $1025 = $1024<<1;
           $1026 = (($1025) + 1)|0;
           $1027 = $xxi;
           $1028 = ((($1027)) + 44|0);
           $1029 = ((($1028)) + 28|0);
           $1030 = (($1029) + ($1026<<1)|0);
           HEAP16[$1030>>1] = $1023;
          }
          $j = 0;
          while(1) {
           $1031 = $j;
           $1032 = ($1031|0)<(120);
           if (!($1032)) {
            break;
           }
           $1033 = $j;
           $1034 = (($inst_map) + ($1033<<2)|0);
           HEAP32[$1034>>2] = -1;
           $1035 = $j;
           $1036 = (($1035) + 1)|0;
           $j = $1036;
          }
          $j = 0;
          $k = 0;
          while(1) {
           $1037 = $j;
           $1038 = ($1037|0)<(121);
           if (!($1038)) {
            break;
           }
           $1039 = $j;
           $1040 = ($1039|0)<(120);
           if ($1040) {
            $1041 = $j;
            $1042 = $1041<<1;
            $1043 = (($1042) + 1)|0;
            $1044 = ((($i1h)) + 64|0);
            $1045 = (($1044) + ($1043)|0);
            $1046 = HEAP8[$1045>>0]|0;
            $1047 = $1046&255;
            $1048 = (($1047) - 1)|0;
            $1049 = $1048;
           } else {
            $1049 = -1;
           }
           $c = $1049;
           $1050 = $c;
           $1051 = ($1050|0)<(0);
           if ($1051) {
            $1052 = $j;
            $1053 = $xxi;
            $1054 = ((($1053)) + 512|0);
            $1055 = (($1054) + ($1052<<1)|0);
            HEAP8[$1055>>0] = 0;
            $1056 = $j;
            $1057 = $xxi;
            $1058 = ((($1057)) + 512|0);
            $1059 = (($1058) + ($1056<<1)|0);
            $1060 = ((($1059)) + 1|0);
            HEAP8[$1060>>0] = 0;
           } else {
            $1061 = $c;
            $1062 = (($inst_map) + ($1061<<2)|0);
            $1063 = HEAP32[$1062>>2]|0;
            $1064 = ($1063|0)==(-1);
            if ($1064) {
             $1065 = $k;
             $1066 = $c;
             $1067 = (($inst_map) + ($1066<<2)|0);
             HEAP32[$1067>>2] = $1065;
             $1068 = $c;
             $1069 = $k;
             $1070 = (($inst_rmap) + ($1069<<2)|0);
             HEAP32[$1070>>2] = $1068;
             $1071 = $k;
             $1072 = (($1071) + 1)|0;
             $k = $1072;
            }
            $1073 = $c;
            $1074 = (($inst_map) + ($1073<<2)|0);
            $1075 = HEAP32[$1074>>2]|0;
            $1076 = $1075&255;
            $1077 = $j;
            $1078 = $xxi;
            $1079 = ((($1078)) + 512|0);
            $1080 = (($1079) + ($1077<<1)|0);
            HEAP8[$1080>>0] = $1076;
            $1081 = $j;
            $1082 = $1081<<1;
            $1083 = ((($i1h)) + 64|0);
            $1084 = (($1083) + ($1082)|0);
            $1085 = HEAP8[$1084>>0]|0;
            $1086 = $1085&255;
            $1087 = $j;
            $1088 = (($1086) - ($1087))|0;
            $1089 = $1088&255;
            $1090 = $j;
            $1091 = $xxi;
            $1092 = ((($1091)) + 512|0);
            $1093 = (($1092) + ($1090<<1)|0);
            $1094 = ((($1093)) + 1|0);
            HEAP8[$1094>>0] = $1089;
           }
           $1095 = $j;
           $1096 = (($1095) + 1)|0;
           $j = $1096;
          }
          $1097 = $k;
          $1098 = $xxi;
          $1099 = ((($1098)) + 36|0);
          HEAP32[$1099>>2] = $1097;
          $1100 = ((($i2h)) + 24|0);
          $1101 = HEAP8[$1100>>0]|0;
          $1102 = $1101&255;
          $1103 = $1102 >> 1;
          $1104 = $xxi;
          $1105 = ((($1104)) + 32|0);
          HEAP32[$1105>>2] = $1103;
          $1106 = $k;
          $1107 = ($1106|0)!=(0);
          if (!($1107)) {
           break;
          }
          $1108 = $k;
          $1109 = (_calloc(64,$1108)|0);
          $1110 = $xxi;
          $1111 = ((($1110)) + 756|0);
          HEAP32[$1111>>2] = $1109;
          $1112 = $xxi;
          $1113 = ((($1112)) + 756|0);
          $1114 = HEAP32[$1113>>2]|0;
          $1115 = ($1114|0)==(0|0);
          if ($1115) {
           break L112;
          }
          $j = 0;
          while(1) {
           $1116 = $j;
           $1117 = $k;
           $1118 = ($1116|0)<($1117|0);
           if (!($1118)) {
            break L172;
           }
           $1119 = $j;
           $1120 = $xxi;
           $1121 = ((($1120)) + 756|0);
           $1122 = HEAP32[$1121>>2]|0;
           $1123 = (($1122) + ($1119<<6)|0);
           $sub1 = $1123;
           $1124 = $j;
           $1125 = (($inst_rmap) + ($1124<<2)|0);
           $1126 = HEAP32[$1125>>2]|0;
           $1127 = $sub1;
           $1128 = ((($1127)) + 40|0);
           HEAP32[$1128>>2] = $1126;
           $1129 = ((($i1h)) + 26|0);
           $1130 = HEAP8[$1129>>0]|0;
           $1131 = $1130&255;
           $1132 = $sub1;
           $1133 = ((($1132)) + 44|0);
           HEAP32[$1133>>2] = $1131;
           $1134 = ((($i1h)) + 27|0);
           $1135 = HEAP8[$1134>>0]|0;
           $1136 = $1135&255;
           $1137 = ($1136|0)!=(0);
           $1138 = $1137 ? 1 : 0;
           $1139 = $sub1;
           $1140 = ((($1139)) + 48|0);
           HEAP32[$1140>>2] = $1138;
           $1141 = $sub1;
           $1142 = ((($1141)) + 52|0);
           HEAP32[$1142>>2] = 0;
           $1143 = $sub1;
           $1144 = ((($1143)) + 8|0);
           HEAP32[$1144>>2] = 128;
           $1145 = $j;
           $1146 = (($1145) + 1)|0;
           $j = $1146;
          }
         }
        }
       } while(0);
       $1147 = $i;
       $1148 = (($1147) + 1)|0;
       $i = $1148;
      }
      $i = 0;
      L220: while(1) {
       $1149 = $i;
       $1150 = $mod;
       $1151 = ((($1150)) + 144|0);
       $1152 = HEAP32[$1151>>2]|0;
       $1153 = ($1149|0)<($1152|0);
       if (!($1153)) {
        label = 199;
        break;
       }
       $1154 = $i;
       $1155 = $mod;
       $1156 = ((($1155)) + 180|0);
       $1157 = HEAP32[$1156>>2]|0;
       $1158 = (($1157) + (($1154*52)|0)|0);
       $xxs = $1158;
       $1159 = $sample_mode;
       $1160 = ($1159|0)!=(0);
       if ($1160) {
        $1161 = (_calloc(64,1)|0);
        $1162 = $i;
        $1163 = $mod;
        $1164 = ((($1163)) + 176|0);
        $1165 = HEAP32[$1164>>2]|0;
        $1166 = (($1165) + (($1162*764)|0)|0);
        $1167 = ((($1166)) + 756|0);
        HEAP32[$1167>>2] = $1161;
        $1168 = $i;
        $1169 = $mod;
        $1170 = ((($1169)) + 176|0);
        $1171 = HEAP32[$1170>>2]|0;
        $1172 = (($1171) + (($1168*764)|0)|0);
        $1173 = ((($1172)) + 756|0);
        $1174 = HEAP32[$1173>>2]|0;
        $1175 = ($1174|0)==(0|0);
        if ($1175) {
         break L112;
        }
       }
       $1176 = $2;
       $1177 = $3;
       $1178 = $i;
       $1179 = $pp_smp;
       $1180 = (($1179) + ($1178<<2)|0);
       $1181 = HEAP32[$1180>>2]|0;
       $1182 = (($1177) + ($1181))|0;
       (_hio_seek($1176,$1182,0)|0);
       $1183 = $2;
       $1184 = (_hio_read32b($1183)|0);
       HEAP32[$ish>>2] = $1184;
       $1185 = ((($ish)) + 4|0);
       $1186 = $2;
       (_hio_read($1185,12,1,$1186)|0);
       $1187 = $2;
       $1188 = (_hio_read8($1187)|0);
       $1189 = ((($ish)) + 16|0);
       HEAP8[$1189>>0] = $1188;
       $1190 = $2;
       $1191 = (_hio_read8($1190)|0);
       $1192 = ((($ish)) + 17|0);
       HEAP8[$1192>>0] = $1191;
       $1193 = $2;
       $1194 = (_hio_read8($1193)|0);
       $1195 = ((($ish)) + 18|0);
       HEAP8[$1195>>0] = $1194;
       $1196 = $2;
       $1197 = (_hio_read8($1196)|0);
       $1198 = ((($ish)) + 19|0);
       HEAP8[$1198>>0] = $1197;
       $1199 = ((($ish)) + 20|0);
       $1200 = $2;
       (_hio_read($1199,26,1,$1200)|0);
       $1201 = ((($ish)) + 20|0);
       _fix_name($1201,26);
       $1202 = $2;
       $1203 = (_hio_read8($1202)|0);
       $1204 = ((($ish)) + 46|0);
       HEAP8[$1204>>0] = $1203;
       $1205 = $2;
       $1206 = (_hio_read8($1205)|0);
       $1207 = ((($ish)) + 47|0);
       HEAP8[$1207>>0] = $1206;
       $1208 = $2;
       $1209 = (_hio_read32l($1208)|0);
       $1210 = ((($ish)) + 48|0);
       HEAP32[$1210>>2] = $1209;
       $1211 = $2;
       $1212 = (_hio_read32l($1211)|0);
       $1213 = ((($ish)) + 52|0);
       HEAP32[$1213>>2] = $1212;
       $1214 = $2;
       $1215 = (_hio_read32l($1214)|0);
       $1216 = ((($ish)) + 56|0);
       HEAP32[$1216>>2] = $1215;
       $1217 = $2;
       $1218 = (_hio_read32l($1217)|0);
       $1219 = ((($ish)) + 60|0);
       HEAP32[$1219>>2] = $1218;
       $1220 = $2;
       $1221 = (_hio_read32l($1220)|0);
       $1222 = ((($ish)) + 64|0);
       HEAP32[$1222>>2] = $1221;
       $1223 = $2;
       $1224 = (_hio_read32l($1223)|0);
       $1225 = ((($ish)) + 68|0);
       HEAP32[$1225>>2] = $1224;
       $1226 = $2;
       $1227 = (_hio_read32l($1226)|0);
       $1228 = ((($ish)) + 72|0);
       HEAP32[$1228>>2] = $1227;
       $1229 = $2;
       $1230 = (_hio_read8($1229)|0);
       $1231 = ((($ish)) + 76|0);
       HEAP8[$1231>>0] = $1230;
       $1232 = $2;
       $1233 = (_hio_read8($1232)|0);
       $1234 = ((($ish)) + 77|0);
       HEAP8[$1234>>0] = $1233;
       $1235 = $2;
       $1236 = (_hio_read8($1235)|0);
       $1237 = ((($ish)) + 78|0);
       HEAP8[$1237>>0] = $1236;
       $1238 = $2;
       $1239 = (_hio_read8($1238)|0);
       $1240 = ((($ish)) + 79|0);
       HEAP8[$1240>>0] = $1239;
       $1241 = HEAP32[$ish>>2]|0;
       $1242 = ($1241|0)!=(1229803603);
       do {
        if (!($1242)) {
         $1243 = ((($ish)) + 18|0);
         $1244 = HEAP8[$1243>>0]|0;
         $1245 = $1244&255;
         $1246 = $1245 & 2;
         $1247 = ($1246|0)!=(0);
         if ($1247) {
          $1248 = $xxs;
          $1249 = ((($1248)) + 44|0);
          HEAP32[$1249>>2] = 1;
         }
         $1250 = ((($ish)) + 48|0);
         $1251 = HEAP32[$1250>>2]|0;
         $1252 = $xxs;
         $1253 = ((($1252)) + 32|0);
         HEAP32[$1253>>2] = $1251;
         $1254 = ((($ish)) + 52|0);
         $1255 = HEAP32[$1254>>2]|0;
         $1256 = $xxs;
         $1257 = ((($1256)) + 36|0);
         HEAP32[$1257>>2] = $1255;
         $1258 = ((($ish)) + 56|0);
         $1259 = HEAP32[$1258>>2]|0;
         $1260 = $xxs;
         $1261 = ((($1260)) + 40|0);
         HEAP32[$1261>>2] = $1259;
         $1262 = ((($ish)) + 18|0);
         $1263 = HEAP8[$1262>>0]|0;
         $1264 = $1263&255;
         $1265 = $1264 & 16;
         $1266 = ($1265|0)!=(0);
         $1267 = $1266 ? 2 : 0;
         $1268 = $xxs;
         $1269 = ((($1268)) + 44|0);
         $1270 = HEAP32[$1269>>2]|0;
         $1271 = $1270 | $1267;
         HEAP32[$1269>>2] = $1271;
         $1272 = ((($ish)) + 18|0);
         $1273 = HEAP8[$1272>>0]|0;
         $1274 = $1273&255;
         $1275 = $1274 & 64;
         $1276 = ($1275|0)!=(0);
         $1277 = $1276 ? 4 : 0;
         $1278 = $xxs;
         $1279 = ((($1278)) + 44|0);
         $1280 = HEAP32[$1279>>2]|0;
         $1281 = $1280 | $1277;
         HEAP32[$1279>>2] = $1281;
         $1282 = $sample_mode;
         $1283 = ($1282|0)!=(0);
         if ($1283) {
          $1284 = ((($ish)) + 19|0);
          $1285 = HEAP8[$1284>>0]|0;
          $1286 = $1285&255;
          $1287 = $i;
          $1288 = $mod;
          $1289 = ((($1288)) + 176|0);
          $1290 = HEAP32[$1289>>2]|0;
          $1291 = (($1290) + (($1287*764)|0)|0);
          $1292 = ((($1291)) + 756|0);
          $1293 = HEAP32[$1292>>2]|0;
          HEAP32[$1293>>2] = $1286;
          $1294 = $i;
          $1295 = $mod;
          $1296 = ((($1295)) + 176|0);
          $1297 = HEAP32[$1296>>2]|0;
          $1298 = (($1297) + (($1294*764)|0)|0);
          $1299 = ((($1298)) + 756|0);
          $1300 = HEAP32[$1299>>2]|0;
          $1301 = ((($1300)) + 8|0);
          HEAP32[$1301>>2] = 128;
          $1302 = $i;
          $1303 = $i;
          $1304 = $mod;
          $1305 = ((($1304)) + 176|0);
          $1306 = HEAP32[$1305>>2]|0;
          $1307 = (($1306) + (($1303*764)|0)|0);
          $1308 = ((($1307)) + 756|0);
          $1309 = HEAP32[$1308>>2]|0;
          $1310 = ((($1309)) + 40|0);
          HEAP32[$1310>>2] = $1302;
          $1311 = $xxs;
          $1312 = ((($1311)) + 32|0);
          $1313 = HEAP32[$1312>>2]|0;
          $1314 = ($1313|0)!=(0);
          $1315 = $1314 ^ 1;
          $1316 = $1315 ^ 1;
          $1317 = $1316&1;
          $1318 = $i;
          $1319 = $mod;
          $1320 = ((($1319)) + 176|0);
          $1321 = HEAP32[$1320>>2]|0;
          $1322 = (($1321) + (($1318*764)|0)|0);
          $1323 = ((($1322)) + 36|0);
          HEAP32[$1323>>2] = $1317;
          $1324 = $mod;
          $1325 = $i;
          $1326 = ((($ish)) + 20|0);
          (_instrument_name($1324,$1325,$1326,25)|0);
         } else {
          $1327 = $xxs;
          $1328 = ((($ish)) + 20|0);
          (_copy_adjust($1327,$1328,25)|0);
         }
         $j = 0;
         while(1) {
          $1329 = $j;
          $1330 = $mod;
          $1331 = ((($1330)) + 140|0);
          $1332 = HEAP32[$1331>>2]|0;
          $1333 = ($1329|0)<($1332|0);
          if (!($1333)) {
           break;
          }
          $k = 0;
          while(1) {
           $1334 = $k;
           $1335 = $j;
           $1336 = $mod;
           $1337 = ((($1336)) + 176|0);
           $1338 = HEAP32[$1337>>2]|0;
           $1339 = (($1338) + (($1335*764)|0)|0);
           $1340 = ((($1339)) + 36|0);
           $1341 = HEAP32[$1340>>2]|0;
           $1342 = ($1334|0)<($1341|0);
           if (!($1342)) {
            break;
           }
           $1343 = $k;
           $1344 = $j;
           $1345 = $mod;
           $1346 = ((($1345)) + 176|0);
           $1347 = HEAP32[$1346>>2]|0;
           $1348 = (($1347) + (($1344*764)|0)|0);
           $1349 = ((($1348)) + 756|0);
           $1350 = HEAP32[$1349>>2]|0;
           $1351 = (($1350) + ($1343<<6)|0);
           $sub2 = $1351;
           $1352 = $sub2;
           $1353 = ((($1352)) + 40|0);
           $1354 = HEAP32[$1353>>2]|0;
           $1355 = $i;
           $1356 = ($1354|0)==($1355|0);
           if ($1356) {
            $1357 = ((($ish)) + 19|0);
            $1358 = HEAP8[$1357>>0]|0;
            $1359 = $1358&255;
            $1360 = $sub2;
            HEAP32[$1360>>2] = $1359;
            $1361 = ((($ish)) + 17|0);
            $1362 = HEAP8[$1361>>0]|0;
            $1363 = $1362&255;
            $1364 = $sub2;
            $1365 = ((($1364)) + 4|0);
            HEAP32[$1365>>2] = $1363;
            $1366 = ((($ish)) + 76|0);
            $1367 = HEAP8[$1366>>0]|0;
            $1368 = $1367&255;
            $1369 = $sub2;
            $1370 = ((($1369)) + 28|0);
            HEAP32[$1370>>2] = $1368;
            $1371 = ((($ish)) + 77|0);
            $1372 = HEAP8[$1371>>0]|0;
            $1373 = $1372&255;
            $1374 = $1373 >> 1;
            $1375 = $sub2;
            $1376 = ((($1375)) + 24|0);
            HEAP32[$1376>>2] = $1374;
            $1377 = ((($ish)) + 79|0);
            $1378 = HEAP8[$1377>>0]|0;
            $1379 = $1378&255;
            $1380 = $sub2;
            $1381 = ((($1380)) + 20|0);
            HEAP32[$1381>>2] = $1379;
            $1382 = ((($ish)) + 78|0);
            $1383 = HEAP8[$1382>>0]|0;
            $1384 = $1383&255;
            $1385 = (255 - ($1384))|0;
            $1386 = $1385 >> 1;
            $1387 = $sub2;
            $1388 = ((($1387)) + 32|0);
            HEAP32[$1388>>2] = $1386;
            $1389 = ((($ish)) + 60|0);
            $1390 = HEAP32[$1389>>2]|0;
            $1391 = $k;
            $1392 = $j;
            $1393 = $mod;
            $1394 = ((($1393)) + 176|0);
            $1395 = HEAP32[$1394>>2]|0;
            $1396 = (($1395) + (($1392*764)|0)|0);
            $1397 = ((($1396)) + 756|0);
            $1398 = HEAP32[$1397>>2]|0;
            $1399 = (($1398) + ($1391<<6)|0);
            $1400 = ((($1399)) + 12|0);
            $1401 = $k;
            $1402 = $j;
            $1403 = $mod;
            $1404 = ((($1403)) + 176|0);
            $1405 = HEAP32[$1404>>2]|0;
            $1406 = (($1405) + (($1402*764)|0)|0);
            $1407 = ((($1406)) + 756|0);
            $1408 = HEAP32[$1407>>2]|0;
            $1409 = (($1408) + ($1401<<6)|0);
            $1410 = ((($1409)) + 16|0);
            _c2spd_to_note($1390,$1400,$1410);
           }
           $1411 = $k;
           $1412 = (($1411) + 1)|0;
           $k = $1412;
          }
          $1413 = $j;
          $1414 = (($1413) + 1)|0;
          $j = $1414;
         }
         $1415 = ((($ish)) + 18|0);
         $1416 = HEAP8[$1415>>0]|0;
         $1417 = $1416&255;
         $1418 = $1417 & 1;
         $1419 = ($1418|0)!=(0);
         if ($1419) {
          $1420 = $xxs;
          $1421 = ((($1420)) + 32|0);
          $1422 = HEAP32[$1421>>2]|0;
          $1423 = ($1422|0)>(1);
          if (!($1423)) {
           break;
          }
          $cvt = 0;
          $1424 = $2;
          $1425 = $3;
          $1426 = ((($ish)) + 72|0);
          $1427 = HEAP32[$1426>>2]|0;
          $1428 = (($1425) + ($1427))|0;
          $1429 = (_hio_seek($1424,$1428,0)|0);
          $1430 = (0)!=($1429|0);
          if ($1430) {
           break L112;
          }
          $1431 = $xxs;
          $1432 = ((($1431)) + 40|0);
          $1433 = HEAP32[$1432>>2]|0;
          $1434 = $xxs;
          $1435 = ((($1434)) + 32|0);
          $1436 = HEAP32[$1435>>2]|0;
          $1437 = ($1433|0)>($1436|0);
          if ($1437) {
           label = 186;
          } else {
           $1438 = $xxs;
           $1439 = ((($1438)) + 36|0);
           $1440 = HEAP32[$1439>>2]|0;
           $1441 = $xxs;
           $1442 = ((($1441)) + 40|0);
           $1443 = HEAP32[$1442>>2]|0;
           $1444 = ($1440|0)>=($1443|0);
           if ($1444) {
            label = 186;
           }
          }
          if ((label|0) == 186) {
           label = 0;
           $1445 = $xxs;
           $1446 = ((($1445)) + 44|0);
           $1447 = HEAP32[$1446>>2]|0;
           $1448 = $1447 & -3;
           HEAP32[$1446>>2] = $1448;
          }
          $1449 = ((($ish)) + 46|0);
          $1450 = HEAP8[$1449>>0]|0;
          $1451 = $1450&255;
          $1452 = $1451 ^ -1;
          $1453 = $1452 & 1;
          $1454 = ($1453|0)!=(0);
          if ($1454) {
           $1455 = $cvt;
           $1456 = $1455 | 2;
           $cvt = $1456;
          }
          $1457 = ((($ish)) + 18|0);
          $1458 = HEAP8[$1457>>0]|0;
          $1459 = $1458&255;
          $1460 = $1459 & 8;
          $1461 = ($1460|0)!=(0);
          if (!($1461)) {
           $1496 = $1;
           $1497 = $2;
           $1498 = $cvt;
           $1499 = $i;
           $1500 = $mod;
           $1501 = ((($1500)) + 180|0);
           $1502 = HEAP32[$1501>>2]|0;
           $1503 = (($1502) + (($1499*52)|0)|0);
           $1504 = (_load_sample($1496,$1497,$1498,$1503,0)|0);
           $1505 = ($1504|0)<(0);
           if ($1505) {
            label = 197;
            break L220;
           } else {
            break;
           }
          }
          $1462 = $xxs;
          $1463 = ((($1462)) + 32|0);
          $1464 = HEAP32[$1463>>2]|0;
          $1465 = $1464<<1;
          $1466 = (_calloc(1,$1465)|0);
          $buf = $1466;
          $1467 = $buf;
          $1468 = ($1467|0)==(0|0);
          if ($1468) {
           break L112;
          }
          $1469 = ((($ish)) + 18|0);
          $1470 = HEAP8[$1469>>0]|0;
          $1471 = $1470&255;
          $1472 = $1471 & 2;
          $1473 = ($1472|0)!=(0);
          $1474 = $2;
          $1475 = $buf;
          $1476 = $xxs;
          $1477 = ((($1476)) + 32|0);
          $1478 = HEAP32[$1477>>2]|0;
          $1479 = ((($ish)) + 46|0);
          $1480 = HEAP8[$1479>>0]|0;
          $1481 = $1480&255;
          $1482 = $1481 & 4;
          if ($1473) {
           (_itsex_decompress16($1474,$1475,$1478,$1482)|0);
          } else {
           (_itsex_decompress8($1474,$1475,$1478,$1482)|0);
          }
          $1483 = $1;
          $1484 = $cvt;
          $1485 = 16 | $1484;
          $1486 = $i;
          $1487 = $mod;
          $1488 = ((($1487)) + 180|0);
          $1489 = HEAP32[$1488>>2]|0;
          $1490 = (($1489) + (($1486*52)|0)|0);
          $1491 = $buf;
          $1492 = (_load_sample($1483,0,$1485,$1490,$1491)|0);
          $ret = $1492;
          $1493 = $ret;
          $1494 = ($1493|0)<(0);
          $1495 = $buf;
          _free($1495);
          if ($1494) {
           label = 195;
           break L220;
          }
         }
        }
       } while(0);
       $1506 = $i;
       $1507 = (($1506) + 1)|0;
       $i = $1507;
      }
      if ((label|0) == 195) {
       $0 = -1;
       $1972 = $0;
       STACKTOP = sp;return ($1972|0);
      }
      else if ((label|0) == 197) {
       $0 = -1;
       $1972 = $0;
       STACKTOP = sp;return ($1972|0);
      }
      else if ((label|0) == 199) {
       $max_ch = 0;
       $i = 0;
       while(1) {
        $1508 = $i;
        $1509 = $mod;
        $1510 = ((($1509)) + 128|0);
        $1511 = HEAP32[$1510>>2]|0;
        $1512 = ($1508|0)<($1511|0);
        if (!($1512)) {
         break;
        }
        $1513 = $i;
        $1514 = $pp_pat;
        $1515 = (($1514) + ($1513<<2)|0);
        $1516 = HEAP32[$1515>>2]|0;
        $1517 = ($1516|0)==(0);
        L275: do {
         if (!($1517)) {
          $1518 = $2;
          $1519 = $3;
          $1520 = $i;
          $1521 = $pp_pat;
          $1522 = (($1521) + ($1520<<2)|0);
          $1523 = HEAP32[$1522>>2]|0;
          $1524 = (($1519) + ($1523))|0;
          (_hio_seek($1518,$1524,0)|0);
          $1525 = $2;
          $1526 = (_hio_read16l($1525)|0);
          $1527 = $1526&65535;
          $pat_len = $1527;
          $1528 = $2;
          (_hio_read16l($1528)|0);
          dest=$mask; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
          $1529 = $2;
          (_hio_read16l($1529)|0);
          $1530 = $2;
          (_hio_read16l($1530)|0);
          while(1) {
           $1531 = $pat_len;
           $1532 = (($1531) + -1)|0;
           $pat_len = $1532;
           $1533 = ($1532|0)>=(0);
           if (!($1533)) {
            break L275;
           }
           $1534 = $2;
           $1535 = (_hio_read8($1534)|0);
           $b = $1535;
           $1536 = $b;
           $1537 = $1536&255;
           $1538 = ($1537|0)==(0);
           if ($1538) {
            continue;
           }
           $1539 = $b;
           $1540 = $1539&255;
           $1541 = (($1540) - 1)|0;
           $1542 = $1541 & 63;
           $c = $1542;
           $1543 = $c;
           $1544 = $max_ch;
           $1545 = ($1543|0)>($1544|0);
           if ($1545) {
            $1546 = $c;
            $max_ch = $1546;
           }
           $1547 = $b;
           $1548 = $1547&255;
           $1549 = $1548 & 128;
           $1550 = ($1549|0)!=(0);
           if ($1550) {
            $1551 = $2;
            $1552 = (_hio_read8($1551)|0);
            $1553 = $c;
            $1554 = (($mask) + ($1553)|0);
            HEAP8[$1554>>0] = $1552;
            $1555 = $pat_len;
            $1556 = (($1555) + -1)|0;
            $pat_len = $1556;
           }
           $1557 = $c;
           $1558 = (($mask) + ($1557)|0);
           $1559 = HEAP8[$1558>>0]|0;
           $1560 = $1559&255;
           $1561 = $1560 & 1;
           $1562 = ($1561|0)!=(0);
           if ($1562) {
            $1563 = $2;
            (_hio_read8($1563)|0);
            $1564 = $pat_len;
            $1565 = (($1564) + -1)|0;
            $pat_len = $1565;
           }
           $1566 = $c;
           $1567 = (($mask) + ($1566)|0);
           $1568 = HEAP8[$1567>>0]|0;
           $1569 = $1568&255;
           $1570 = $1569 & 2;
           $1571 = ($1570|0)!=(0);
           if ($1571) {
            $1572 = $2;
            (_hio_read8($1572)|0);
            $1573 = $pat_len;
            $1574 = (($1573) + -1)|0;
            $pat_len = $1574;
           }
           $1575 = $c;
           $1576 = (($mask) + ($1575)|0);
           $1577 = HEAP8[$1576>>0]|0;
           $1578 = $1577&255;
           $1579 = $1578 & 4;
           $1580 = ($1579|0)!=(0);
           if ($1580) {
            $1581 = $2;
            (_hio_read8($1581)|0);
            $1582 = $pat_len;
            $1583 = (($1582) + -1)|0;
            $pat_len = $1583;
           }
           $1584 = $c;
           $1585 = (($mask) + ($1584)|0);
           $1586 = HEAP8[$1585>>0]|0;
           $1587 = $1586&255;
           $1588 = $1587 & 8;
           $1589 = ($1588|0)!=(0);
           if (!($1589)) {
            continue;
           }
           $1590 = $2;
           (_hio_read8($1590)|0);
           $1591 = $2;
           (_hio_read8($1591)|0);
           $1592 = $pat_len;
           $1593 = (($1592) - 2)|0;
           $pat_len = $1593;
          }
         }
        } while(0);
        $1594 = $i;
        $1595 = (($1594) + 1)|0;
        $i = $1595;
       }
       $1596 = $max_ch;
       $1597 = (($1596) + 1)|0;
       $1598 = $mod;
       $1599 = ((($1598)) + 136|0);
       HEAP32[$1599>>2] = $1597;
       $1600 = $mod;
       $1601 = ((($1600)) + 128|0);
       $1602 = HEAP32[$1601>>2]|0;
       $1603 = $mod;
       $1604 = ((($1603)) + 136|0);
       $1605 = HEAP32[$1604>>2]|0;
       $1606 = Math_imul($1602, $1605)|0;
       $1607 = $mod;
       $1608 = ((($1607)) + 132|0);
       HEAP32[$1608>>2] = $1606;
       dest=$last_fxp; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       $1609 = $mod;
       $1610 = (_pattern_init($1609)|0);
       $1611 = ($1610|0)<(0);
       if ($1611) {
        break;
       }
       $i = 0;
       while(1) {
        $1612 = $i;
        $1613 = $mod;
        $1614 = ((($1613)) + 128|0);
        $1615 = HEAP32[$1614>>2]|0;
        $1616 = ($1612|0)<($1615|0);
        if (!($1616)) {
         break;
        }
        $1617 = $mod;
        $1618 = $i;
        $1619 = (_pattern_alloc($1617,$1618)|0);
        $1620 = ($1619|0)<(0);
        if ($1620) {
         break L112;
        }
        $r = 0;
        $1621 = $i;
        $1622 = $pp_pat;
        $1623 = (($1622) + ($1621<<2)|0);
        $1624 = HEAP32[$1623>>2]|0;
        $1625 = ($1624|0)==(0);
        L304: do {
         if ($1625) {
          $1626 = $i;
          $1627 = $mod;
          $1628 = ((($1627)) + 168|0);
          $1629 = HEAP32[$1628>>2]|0;
          $1630 = (($1629) + ($1626<<2)|0);
          $1631 = HEAP32[$1630>>2]|0;
          HEAP32[$1631>>2] = 64;
          $j = 0;
          while(1) {
           $1632 = $j;
           $1633 = $mod;
           $1634 = ((($1633)) + 136|0);
           $1635 = HEAP32[$1634>>2]|0;
           $1636 = ($1632|0)<($1635|0);
           if (!($1636)) {
            break L304;
           }
           $1637 = $i;
           $1638 = $mod;
           $1639 = ((($1638)) + 136|0);
           $1640 = HEAP32[$1639>>2]|0;
           $1641 = Math_imul($1637, $1640)|0;
           $1642 = $j;
           $1643 = (($1641) + ($1642))|0;
           $tnum = $1643;
           $1644 = $mod;
           $1645 = $tnum;
           $1646 = (_track_alloc($1644,$1645,64)|0);
           $1647 = ($1646|0)<(0);
           if ($1647) {
            break L112;
           }
           $1648 = $tnum;
           $1649 = $j;
           $1650 = $i;
           $1651 = $mod;
           $1652 = ((($1651)) + 168|0);
           $1653 = HEAP32[$1652>>2]|0;
           $1654 = (($1653) + ($1650<<2)|0);
           $1655 = HEAP32[$1654>>2]|0;
           $1656 = ((($1655)) + 4|0);
           $1657 = (($1656) + ($1649<<2)|0);
           HEAP32[$1657>>2] = $1648;
           $1658 = $j;
           $1659 = (($1658) + 1)|0;
           $j = $1659;
          }
         } else {
          $1660 = $2;
          $1661 = $3;
          $1662 = $i;
          $1663 = $pp_pat;
          $1664 = (($1663) + ($1662<<2)|0);
          $1665 = HEAP32[$1664>>2]|0;
          $1666 = (($1661) + ($1665))|0;
          (_hio_seek($1660,$1666,0)|0);
          $1667 = $2;
          $1668 = (_hio_read16l($1667)|0);
          $1669 = $1668&65535;
          $pat_len = $1669;
          $1670 = $2;
          $1671 = (_hio_read16l($1670)|0);
          $1672 = $1671&65535;
          $1673 = $i;
          $1674 = $mod;
          $1675 = ((($1674)) + 168|0);
          $1676 = HEAP32[$1675>>2]|0;
          $1677 = (($1676) + ($1673<<2)|0);
          $1678 = HEAP32[$1677>>2]|0;
          HEAP32[$1678>>2] = $1672;
          $1679 = $mod;
          $1680 = $i;
          $1681 = (_tracks_in_pattern_alloc($1679,$1680)|0);
          $1682 = ($1681|0)<(0);
          if ($1682) {
           break L112;
          }
          dest=$mask; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
          $1683 = $2;
          (_hio_read16l($1683)|0);
          $1684 = $2;
          (_hio_read16l($1684)|0);
          while(1) {
           $1685 = $pat_len;
           $1686 = (($1685) + -1)|0;
           $pat_len = $1686;
           $1687 = ($1686|0)>=(0);
           if (!($1687)) {
            break L304;
           }
           $1688 = $2;
           $1689 = (_hio_read8($1688)|0);
           $b = $1689;
           $1690 = $b;
           $1691 = ($1690<<24>>24)!=(0);
           if (!($1691)) {
            $1692 = $r;
            $1693 = (($1692) + 1)|0;
            $r = $1693;
            continue;
           }
           $1694 = $b;
           $1695 = $1694&255;
           $1696 = (($1695) - 1)|0;
           $1697 = $1696 & 63;
           $c = $1697;
           $1698 = $b;
           $1699 = $1698&255;
           $1700 = $1699 & 128;
           $1701 = ($1700|0)!=(0);
           if ($1701) {
            $1702 = $2;
            $1703 = (_hio_read8($1702)|0);
            $1704 = $c;
            $1705 = (($mask) + ($1704)|0);
            HEAP8[$1705>>0] = $1703;
            $1706 = $pat_len;
            $1707 = (($1706) + -1)|0;
            $pat_len = $1707;
           }
           $1708 = $c;
           $1709 = $mod;
           $1710 = ((($1709)) + 136|0);
           $1711 = HEAP32[$1710>>2]|0;
           $1712 = ($1708|0)>=($1711|0);
           do {
            if ($1712) {
             $1740 = $dummy;
            } else {
             $1713 = $r;
             $1714 = $i;
             $1715 = $mod;
             $1716 = ((($1715)) + 168|0);
             $1717 = HEAP32[$1716>>2]|0;
             $1718 = (($1717) + ($1714<<2)|0);
             $1719 = HEAP32[$1718>>2]|0;
             $1720 = HEAP32[$1719>>2]|0;
             $1721 = ($1713|0)>=($1720|0);
             if ($1721) {
              $1740 = $dummy;
              break;
             }
             $1722 = $r;
             $1723 = $c;
             $1724 = $i;
             $1725 = $1;
             $1726 = ((($1725)) + 168|0);
             $1727 = HEAP32[$1726>>2]|0;
             $1728 = (($1727) + ($1724<<2)|0);
             $1729 = HEAP32[$1728>>2]|0;
             $1730 = ((($1729)) + 4|0);
             $1731 = (($1730) + ($1723<<2)|0);
             $1732 = HEAP32[$1731>>2]|0;
             $1733 = $1;
             $1734 = ((($1733)) + 172|0);
             $1735 = HEAP32[$1734>>2]|0;
             $1736 = (($1735) + ($1732<<2)|0);
             $1737 = HEAP32[$1736>>2]|0;
             $1738 = ((($1737)) + 4|0);
             $1739 = (($1738) + ($1722<<3)|0);
             $1740 = $1739;
            }
           } while(0);
           $event = $1740;
           $1741 = $c;
           $1742 = (($mask) + ($1741)|0);
           $1743 = HEAP8[$1742>>0]|0;
           $1744 = $1743&255;
           $1745 = $1744 & 1;
           $1746 = ($1745|0)!=(0);
           if ($1746) {
            $1747 = $2;
            $1748 = (_hio_read8($1747)|0);
            $b = $1748;
            $1749 = $b;
            $1750 = $1749&255;
            do {
             if ((($1750|0) == 255)) {
              $b = -127;
             } else if ((($1750|0) == 254)) {
              $b = -126;
             } else {
              $1751 = $b;
              $1752 = $1751&255;
              $1753 = ($1752|0)>(119);
              if ($1753) {
               $b = -125;
               break;
              } else {
               $1754 = $b;
               $1755 = (($1754) + 1)<<24>>24;
               $b = $1755;
               break;
              }
             }
            } while(0);
            $1756 = $b;
            $1757 = $event;
            HEAP8[$1757>>0] = $1756;
            $1758 = $c;
            $1759 = (($lastevent) + ($1758<<3)|0);
            HEAP8[$1759>>0] = $1756;
            $1760 = $pat_len;
            $1761 = (($1760) + -1)|0;
            $pat_len = $1761;
           }
           $1762 = $c;
           $1763 = (($mask) + ($1762)|0);
           $1764 = HEAP8[$1763>>0]|0;
           $1765 = $1764&255;
           $1766 = $1765 & 2;
           $1767 = ($1766|0)!=(0);
           if ($1767) {
            $1768 = $2;
            $1769 = (_hio_read8($1768)|0);
            $b = $1769;
            $1770 = $b;
            $1771 = $event;
            $1772 = ((($1771)) + 1|0);
            HEAP8[$1772>>0] = $1770;
            $1773 = $c;
            $1774 = (($lastevent) + ($1773<<3)|0);
            $1775 = ((($1774)) + 1|0);
            HEAP8[$1775>>0] = $1770;
            $1776 = $pat_len;
            $1777 = (($1776) + -1)|0;
            $pat_len = $1777;
           }
           $1778 = $c;
           $1779 = (($mask) + ($1778)|0);
           $1780 = HEAP8[$1779>>0]|0;
           $1781 = $1780&255;
           $1782 = $1781 & 4;
           $1783 = ($1782|0)!=(0);
           if ($1783) {
            $1784 = $2;
            $1785 = (_hio_read8($1784)|0);
            $b = $1785;
            $1786 = $b;
            $1787 = $event;
            $1788 = ((($1787)) + 2|0);
            HEAP8[$1788>>0] = $1786;
            $1789 = $c;
            $1790 = (($lastevent) + ($1789<<3)|0);
            $1791 = ((($1790)) + 2|0);
            HEAP8[$1791>>0] = $1786;
            $1792 = $event;
            _xlat_volfx($1792);
            $1793 = $pat_len;
            $1794 = (($1793) + -1)|0;
            $pat_len = $1794;
           }
           $1795 = $c;
           $1796 = (($mask) + ($1795)|0);
           $1797 = HEAP8[$1796>>0]|0;
           $1798 = $1797&255;
           $1799 = $1798 & 8;
           $1800 = ($1799|0)!=(0);
           if ($1800) {
            $1801 = $2;
            $1802 = (_hio_read8($1801)|0);
            $b = $1802;
            $1803 = $b;
            $1804 = $event;
            $1805 = ((($1804)) + 3|0);
            HEAP8[$1805>>0] = $1803;
            $1806 = $2;
            $1807 = (_hio_read8($1806)|0);
            $1808 = $event;
            $1809 = ((($1808)) + 4|0);
            HEAP8[$1809>>0] = $1807;
            $1810 = $c;
            $1811 = $event;
            $1812 = $new_fx;
            _xlat_fx178($1810,$1811,$last_fxp,$1812);
            $1813 = $event;
            $1814 = ((($1813)) + 3|0);
            $1815 = HEAP8[$1814>>0]|0;
            $1816 = $c;
            $1817 = (($lastevent) + ($1816<<3)|0);
            $1818 = ((($1817)) + 3|0);
            HEAP8[$1818>>0] = $1815;
            $1819 = $event;
            $1820 = ((($1819)) + 4|0);
            $1821 = HEAP8[$1820>>0]|0;
            $1822 = $c;
            $1823 = (($lastevent) + ($1822<<3)|0);
            $1824 = ((($1823)) + 4|0);
            HEAP8[$1824>>0] = $1821;
            $1825 = $pat_len;
            $1826 = (($1825) - 2)|0;
            $pat_len = $1826;
           }
           $1827 = $c;
           $1828 = (($mask) + ($1827)|0);
           $1829 = HEAP8[$1828>>0]|0;
           $1830 = $1829&255;
           $1831 = $1830 & 16;
           $1832 = ($1831|0)!=(0);
           if ($1832) {
            $1833 = $c;
            $1834 = (($lastevent) + ($1833<<3)|0);
            $1835 = HEAP8[$1834>>0]|0;
            $1836 = $event;
            HEAP8[$1836>>0] = $1835;
           }
           $1837 = $c;
           $1838 = (($mask) + ($1837)|0);
           $1839 = HEAP8[$1838>>0]|0;
           $1840 = $1839&255;
           $1841 = $1840 & 32;
           $1842 = ($1841|0)!=(0);
           if ($1842) {
            $1843 = $c;
            $1844 = (($lastevent) + ($1843<<3)|0);
            $1845 = ((($1844)) + 1|0);
            $1846 = HEAP8[$1845>>0]|0;
            $1847 = $event;
            $1848 = ((($1847)) + 1|0);
            HEAP8[$1848>>0] = $1846;
           }
           $1849 = $c;
           $1850 = (($mask) + ($1849)|0);
           $1851 = HEAP8[$1850>>0]|0;
           $1852 = $1851&255;
           $1853 = $1852 & 64;
           $1854 = ($1853|0)!=(0);
           if ($1854) {
            $1855 = $c;
            $1856 = (($lastevent) + ($1855<<3)|0);
            $1857 = ((($1856)) + 2|0);
            $1858 = HEAP8[$1857>>0]|0;
            $1859 = $event;
            $1860 = ((($1859)) + 2|0);
            HEAP8[$1860>>0] = $1858;
            $1861 = $event;
            _xlat_volfx($1861);
           }
           $1862 = $c;
           $1863 = (($mask) + ($1862)|0);
           $1864 = HEAP8[$1863>>0]|0;
           $1865 = $1864&255;
           $1866 = $1865 & 128;
           $1867 = ($1866|0)!=(0);
           if (!($1867)) {
            continue;
           }
           $1868 = $c;
           $1869 = (($lastevent) + ($1868<<3)|0);
           $1870 = ((($1869)) + 3|0);
           $1871 = HEAP8[$1870>>0]|0;
           $1872 = $event;
           $1873 = ((($1872)) + 3|0);
           HEAP8[$1873>>0] = $1871;
           $1874 = $c;
           $1875 = (($lastevent) + ($1874<<3)|0);
           $1876 = ((($1875)) + 4|0);
           $1877 = HEAP8[$1876>>0]|0;
           $1878 = $event;
           $1879 = ((($1878)) + 4|0);
           HEAP8[$1879>>0] = $1877;
          }
         }
        } while(0);
        $1880 = $i;
        $1881 = (($1880) + 1)|0;
        $i = $1881;
       }
       $1882 = $pp_pat;
       _free($1882);
       $1883 = $pp_smp;
       _free($1883);
       $1884 = $pp_ins;
       _free($1884);
       $1885 = ((($ifh)) + 46|0);
       $1886 = HEAP16[$1885>>1]|0;
       $1887 = $1886&65535;
       $1888 = $1887 & 1;
       $1889 = ($1888|0)!=(0);
       if ($1889) {
        $1890 = ((($ifh)) + 54|0);
        $1891 = HEAP16[$1890>>1]|0;
        $1892 = $1891&65535;
        $1893 = (($1892) + 1)|0;
        $1894 = (_malloc($1893)|0);
        $1895 = $1;
        $1896 = ((($1895)) + 1220|0);
        HEAP32[$1896>>2] = $1894;
        $1897 = ($1894|0)!=(0|0);
        if ($1897) {
         $1898 = $2;
         $1899 = $3;
         $1900 = ((($ifh)) + 56|0);
         $1901 = HEAP32[$1900>>2]|0;
         $1902 = (($1899) + ($1901))|0;
         (_hio_seek($1898,$1902,0)|0);
         $j = 0;
         while(1) {
          $1903 = $j;
          $1904 = ((($ifh)) + 54|0);
          $1905 = HEAP16[$1904>>1]|0;
          $1906 = $1905&65535;
          $1907 = ($1903|0)<($1906|0);
          if (!($1907)) {
           break;
          }
          $1908 = $2;
          $1909 = (_hio_read8($1908)|0);
          $b = $1909;
          $1910 = $b;
          $1911 = $1910&255;
          $1912 = ($1911|0)==(13);
          do {
           if ($1912) {
            $b = 10;
           } else {
            $1913 = $b;
            $1914 = $1913&255;
            $1915 = ($1914|0)<(32);
            if (!($1915)) {
             $1916 = $b;
             $1917 = $1916&255;
             $1918 = ($1917|0)>(127);
             if (!($1918)) {
              break;
             }
            }
            $1919 = $b;
            $1920 = $1919&255;
            $1921 = ($1920|0)!=(10);
            if (!($1921)) {
             break;
            }
            $1922 = $b;
            $1923 = $1922&255;
            $1924 = ($1923|0)!=(9);
            if (!($1924)) {
             break;
            }
            $b = 46;
           }
          } while(0);
          $1925 = $b;
          $1926 = $j;
          $1927 = $1;
          $1928 = ((($1927)) + 1220|0);
          $1929 = HEAP32[$1928>>2]|0;
          $1930 = (($1929) + ($1926)|0);
          HEAP8[$1930>>0] = $1925;
          $1931 = $j;
          $1932 = (($1931) + 1)|0;
          $j = $1932;
         }
         $1933 = $j;
         $1934 = $1;
         $1935 = ((($1934)) + 1220|0);
         $1936 = HEAP32[$1935>>2]|0;
         $1937 = (($1936) + ($1933)|0);
         HEAP8[$1937>>0] = 0;
        }
       }
       $1938 = $1;
       $1939 = ((($1938)) + 1280|0);
       $1940 = HEAP32[$1939>>2]|0;
       $1941 = $1940 | 26708003;
       HEAP32[$1939>>2] = $1941;
       $1942 = ((($ifh)) + 44|0);
       $1943 = HEAP16[$1942>>1]|0;
       $1944 = $1943&65535;
       $1945 = $1944 & 32;
       $1946 = ($1945|0)!=(0);
       $1947 = $1;
       $1948 = ((($1947)) + 1280|0);
       $1949 = HEAP32[$1948>>2]|0;
       if ($1946) {
        $1950 = $1949 | 4194304;
        HEAP32[$1948>>2] = $1950;
       } else {
        $1951 = $1949 | 1024;
        HEAP32[$1948>>2] = $1951;
       }
       $1952 = $new_fx;
       $1953 = ($1952|0)!=(0);
       $1954 = $1;
       $1955 = ((($1954)) + 1280|0);
       $1956 = HEAP32[$1955>>2]|0;
       if ($1953) {
        $1957 = $1956 | 2621440;
        HEAP32[$1955>>2] = $1957;
       } else {
        $1958 = $1956 & -1048577;
        HEAP32[$1955>>2] = $1958;
       }
       $1959 = $sample_mode;
       $1960 = ($1959|0)!=(0);
       if ($1960) {
        $1961 = $1;
        $1962 = ((($1961)) + 1280|0);
        $1963 = HEAP32[$1962>>2]|0;
        $1964 = $1963 & -32769;
        HEAP32[$1962>>2] = $1964;
       }
       $1965 = $1;
       $1966 = ((($1965)) + 1272|0);
       HEAP32[$1966>>2] = 128;
       $1967 = $1;
       $1968 = ((($1967)) + 1284|0);
       HEAP32[$1968>>2] = 3;
       $0 = 0;
       $1972 = $0;
       STACKTOP = sp;return ($1972|0);
      }
     }
    } while(0);
    $1969 = $pp_pat;
    _free($1969);
   }
   $1970 = $pp_smp;
   _free($1970);
  }
  $1971 = $pp_ins;
  _free($1971);
 }
 $0 = -1;
 $1972 = $0;
 STACKTOP = sp;return ($1972|0);
}
function _fix_name($s,$l) {
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $l;
 $2 = $1;
 $3 = (($2) + -1)|0;
 $1 = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  $7 = $i;
  if (!($6)) {
   break;
  }
  $8 = $0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $i;
   $14 = $0;
   $15 = (($14) + ($13)|0);
   HEAP8[$15>>0] = 32;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = (($7) + -1)|0;
 $i = $18;
 while(1) {
  $19 = $i;
  $20 = ($19|0)>=(0);
  if (!($20)) {
   label = 12;
   break;
  }
  $21 = $i;
  $22 = $0;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(32);
  if (!($26)) {
   label = 12;
   break;
  }
  $27 = $i;
  $28 = $0;
  $29 = (($28) + ($27)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(32);
  if ($32) {
   $33 = $i;
   $34 = $0;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = 0;
  }
  $36 = $i;
  $37 = (($36) + -1)|0;
  $i = $37;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _read_envelope($ei,$env,$f) {
 $ei = $ei|0;
 $env = $env|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ei;
 $1 = $env;
 $2 = $f;
 $3 = $2;
 $4 = (_hio_read8($3)|0);
 $5 = $1;
 HEAP8[$5>>0] = $4;
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $8 = $1;
 $9 = ((($8)) + 1|0);
 HEAP8[$9>>0] = $7;
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = $1;
 $13 = ((($12)) + 2|0);
 HEAP8[$13>>0] = $11;
 $14 = $2;
 $15 = (_hio_read8($14)|0);
 $16 = $1;
 $17 = ((($16)) + 3|0);
 HEAP8[$17>>0] = $15;
 $18 = $2;
 $19 = (_hio_read8($18)|0);
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP8[$21>>0] = $19;
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = $1;
 $25 = ((($24)) + 5|0);
 HEAP8[$25>>0] = $23;
 $j = 0;
 while(1) {
  $26 = $j;
  $27 = ($26|0)<(25);
  $28 = $2;
  $29 = (_hio_read8($28)|0);
  if (!($27)) {
   break;
  }
  $30 = $j;
  $31 = $1;
  $32 = ((($31)) + 6|0);
  $33 = (($32) + ($30<<2)|0);
  HEAP8[$33>>0] = $29;
  $34 = $2;
  $35 = (_hio_read16l($34)|0);
  $36 = $j;
  $37 = $1;
  $38 = ((($37)) + 6|0);
  $39 = (($38) + ($36<<2)|0);
  $40 = ((($39)) + 2|0);
  HEAP16[$40>>1] = $35;
  $41 = $j;
  $42 = (($41) + 1)|0;
  $j = $42;
 }
 $43 = $1;
 $44 = ((($43)) + 106|0);
 HEAP8[$44>>0] = $29;
 $45 = $1;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 & 1;
 $49 = ($48|0)!=(0);
 $50 = $49 ? 1 : 0;
 $51 = $0;
 HEAP32[$51>>2] = $50;
 $52 = $1;
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 & 2;
 $56 = ($55|0)!=(0);
 $57 = $56 ? 4 : 0;
 $58 = $0;
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 | $57;
 HEAP32[$58>>2] = $60;
 $61 = $1;
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = $63 & 4;
 $65 = ($64|0)!=(0);
 $66 = $65 ? 18 : 0;
 $67 = $0;
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 | $66;
 HEAP32[$67>>2] = $69;
 $70 = $1;
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $72 & 8;
 $74 = ($73|0)!=(0);
 $75 = $74 ? 32 : 0;
 $76 = $0;
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 | $75;
 HEAP32[$76>>2] = $78;
 $79 = $1;
 $80 = ((($79)) + 1|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $0;
 $84 = ((($83)) + 4|0);
 HEAP32[$84>>2] = $82;
 $85 = $1;
 $86 = ((($85)) + 4|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = $0;
 $90 = ((($89)) + 12|0);
 HEAP32[$90>>2] = $88;
 $91 = $1;
 $92 = ((($91)) + 5|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $0;
 $96 = ((($95)) + 16|0);
 HEAP32[$96>>2] = $94;
 $97 = $1;
 $98 = ((($97)) + 2|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = $0;
 $102 = ((($101)) + 20|0);
 HEAP32[$102>>2] = $100;
 $103 = $1;
 $104 = ((($103)) + 3|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 $107 = $0;
 $108 = ((($107)) + 24|0);
 HEAP32[$108>>2] = $106;
 $109 = $0;
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)>(0);
 if ($112) {
  $113 = $0;
  $114 = ((($113)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)<(32);
  if ($116) {
   $j = 0;
   while(1) {
    $117 = $j;
    $118 = $0;
    $119 = ((($118)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($117|0)<($120|0);
    if (!($121)) {
     break;
    }
    $122 = $j;
    $123 = $1;
    $124 = ((($123)) + 6|0);
    $125 = (($124) + ($122<<2)|0);
    $126 = ((($125)) + 2|0);
    $127 = HEAP16[$126>>1]|0;
    $128 = $j;
    $129 = $128<<1;
    $130 = $0;
    $131 = ((($130)) + 28|0);
    $132 = (($131) + ($129<<1)|0);
    HEAP16[$132>>1] = $127;
    $133 = $j;
    $134 = $1;
    $135 = ((($134)) + 6|0);
    $136 = (($135) + ($133<<2)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137 << 24 >> 24;
    $139 = $j;
    $140 = $139<<1;
    $141 = (($140) + 1)|0;
    $142 = $0;
    $143 = ((($142)) + 28|0);
    $144 = (($143) + ($141<<1)|0);
    HEAP16[$144>>1] = $138;
    $145 = $j;
    $146 = (($145) + 1)|0;
    $j = $146;
   }
   STACKTOP = sp;return;
  }
 }
 $147 = $0;
 $148 = HEAP32[$147>>2]|0;
 $149 = $148 & -2;
 HEAP32[$147>>2] = $149;
 STACKTOP = sp;return;
}
function _xlat_volfx($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $b = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $b = $4;
 $5 = $0;
 $6 = ((($5)) + 2|0);
 HEAP8[$6>>0] = 0;
 $7 = $b;
 $8 = ($7|0)<=(64);
 $9 = $b;
 if ($8) {
  $10 = (($9) + 1)|0;
  $11 = $10&255;
  $12 = $0;
  $13 = ((($12)) + 2|0);
  HEAP8[$13>>0] = $11;
  STACKTOP = sp;return;
 }
 $14 = ($9|0)>=(65);
 $15 = $b;
 $16 = ($15|0)<=(74);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $0;
  $18 = ((($17)) + 5|0);
  HEAP8[$18>>0] = 14;
  $19 = $b;
  $20 = (($19) - 65)|0;
  $21 = 160 | $20;
  $22 = $21&255;
  $23 = $0;
  $24 = ((($23)) + 6|0);
  HEAP8[$24>>0] = $22;
  STACKTOP = sp;return;
 }
 $25 = $b;
 $26 = ($25|0)>=(75);
 $27 = $b;
 $28 = ($27|0)<=(84);
 $or$cond3 = $26 & $28;
 if ($or$cond3) {
  $29 = $0;
  $30 = ((($29)) + 5|0);
  HEAP8[$30>>0] = 14;
  $31 = $b;
  $32 = (($31) - 75)|0;
  $33 = 176 | $32;
  $34 = $33&255;
  $35 = $0;
  $36 = ((($35)) + 6|0);
  HEAP8[$36>>0] = $34;
  STACKTOP = sp;return;
 }
 $37 = $b;
 $38 = ($37|0)>=(85);
 $39 = $b;
 $40 = ($39|0)<=(94);
 $or$cond5 = $38 & $40;
 if ($or$cond5) {
  $41 = $0;
  $42 = ((($41)) + 5|0);
  HEAP8[$42>>0] = -92;
  $43 = $b;
  $44 = (($43) - 85)|0;
  $45 = $44 << 4;
  $46 = $45&255;
  $47 = $0;
  $48 = ((($47)) + 6|0);
  HEAP8[$48>>0] = $46;
  STACKTOP = sp;return;
 }
 $49 = $b;
 $50 = ($49|0)>=(95);
 $51 = $b;
 $52 = ($51|0)<=(104);
 $or$cond7 = $50 & $52;
 if ($or$cond7) {
  $53 = $0;
  $54 = ((($53)) + 5|0);
  HEAP8[$54>>0] = -92;
  $55 = $b;
  $56 = (($55) - 95)|0;
  $57 = $56&255;
  $58 = $0;
  $59 = ((($58)) + 6|0);
  HEAP8[$59>>0] = $57;
  STACKTOP = sp;return;
 }
 $60 = $b;
 $61 = ($60|0)>=(105);
 $62 = $b;
 $63 = ($62|0)<=(114);
 $or$cond9 = $61 & $63;
 if ($or$cond9) {
  $64 = $0;
  $65 = ((($64)) + 5|0);
  HEAP8[$65>>0] = 2;
  $66 = $b;
  $67 = (($66) - 105)|0;
  $68 = $67 << 2;
  $69 = $68&255;
  $70 = $0;
  $71 = ((($70)) + 6|0);
  HEAP8[$71>>0] = $69;
  STACKTOP = sp;return;
 }
 $72 = $b;
 $73 = ($72|0)>=(115);
 $74 = $b;
 $75 = ($74|0)<=(124);
 $or$cond11 = $73 & $75;
 if ($or$cond11) {
  $76 = $0;
  $77 = ((($76)) + 5|0);
  HEAP8[$77>>0] = 1;
  $78 = $b;
  $79 = (($78) - 115)|0;
  $80 = $79 << 2;
  $81 = $80&255;
  $82 = $0;
  $83 = ((($82)) + 6|0);
  HEAP8[$83>>0] = $81;
  STACKTOP = sp;return;
 }
 $84 = $b;
 $85 = ($84|0)>=(128);
 $86 = $b;
 $87 = ($86|0)<=(192);
 $or$cond13 = $85 & $87;
 $88 = $b;
 if ($or$cond13) {
  $89 = ($88|0)==(192);
  if ($89) {
   $b = 191;
  }
  $90 = $0;
  $91 = ((($90)) + 5|0);
  HEAP8[$91>>0] = 8;
  $92 = $b;
  $93 = (($92) - 128)|0;
  $94 = $93 << 2;
  $95 = $94&255;
  $96 = $0;
  $97 = ((($96)) + 6|0);
  HEAP8[$97>>0] = $95;
  STACKTOP = sp;return;
 }
 $98 = ($88|0)>=(193);
 $99 = $b;
 $100 = ($99|0)<=(202);
 $or$cond15 = $98 & $100;
 if ($or$cond15) {
  $101 = $0;
  $102 = ((($101)) + 5|0);
  HEAP8[$102>>0] = 3;
  $103 = $b;
  $104 = (($103) - 193)|0;
  $105 = $104 << 2;
  $106 = $105&255;
  $107 = $0;
  $108 = ((($107)) + 6|0);
  HEAP8[$108>>0] = $106;
  STACKTOP = sp;return;
 }
 $109 = $b;
 $110 = ($109|0)>=(203);
 $111 = $b;
 $112 = ($111|0)<=(212);
 $or$cond17 = $110 & $112;
 if (!($or$cond17)) {
  STACKTOP = sp;return;
 }
 $113 = $0;
 $114 = ((($113)) + 5|0);
 HEAP8[$114>>0] = 4;
 $115 = $b;
 $116 = (($115) - 203)|0;
 $117 = $116&255;
 $118 = $0;
 $119 = ((($118)) + 6|0);
 HEAP8[$119>>0] = $117;
 STACKTOP = sp;return;
}
function _xlat_fx178($c,$e,$last_fxp,$new_fx) {
 $c = $c|0;
 $e = $e|0;
 $last_fxp = $last_fxp|0;
 $new_fx = $new_fx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $e;
 $2 = $last_fxp;
 $3 = $new_fx;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 240;
 $9 = $8 >> 4;
 $10 = $9&255;
 $h = $10;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 & 15;
 $16 = $15&255;
 $l = $16;
 $17 = $1;
 $18 = ((($17)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (3848 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $1;
 $24 = ((($23)) + 3|0);
 HEAP8[$24>>0] = $22;
 $25 = $22&255;
 L1: do {
  switch ($25|0) {
  case 29:  {
   $184 = $3;
   $185 = ($184|0)!=(0);
   if (!($185)) {
    $186 = $1;
    $187 = ((($186)) + 4|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = $188&255;
    $190 = ($189|0)!=(0);
    if ($190) {
     $191 = $1;
     $192 = ((($191)) + 4|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = $194 & 240;
     $196 = $195 >> 4;
     $197 = (($196) + 1)|0;
     $198 = $197 << 4;
     $199 = $1;
     $200 = ((($199)) + 4|0);
     $201 = HEAP8[$200>>0]|0;
     $202 = $201&255;
     $203 = $202 & 15;
     $204 = (($203) + 1)|0;
     $205 = $198 | $204;
     $206 = $205&255;
     $207 = $1;
     $208 = ((($207)) + 4|0);
     HEAP8[$208>>0] = $206;
    }
   }
   break;
  }
  case 255:  {
   $218 = $1;
   $219 = ((($218)) + 4|0);
   HEAP8[$219>>0] = 0;
   $220 = $1;
   $221 = ((($220)) + 3|0);
   HEAP8[$221>>0] = 0;
   break;
  }
  case 132:  {
   $157 = $1;
   $158 = ((($157)) + 4|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = ($160|0)>(127);
   if ($161) {
    $162 = $1;
    $163 = ((($162)) + 4|0);
    $164 = HEAP8[$163>>0]|0;
    $165 = $164&255;
    $166 = ($165|0)<(144);
    if ($166) {
     $167 = $1;
     $168 = ((($167)) + 3|0);
     HEAP8[$168>>0] = -123;
     $169 = $1;
     $170 = ((($169)) + 4|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = $171&255;
     $173 = (($172) - 128)|0;
     $174 = $173<<4;
     $175 = $174&255;
     $176 = $1;
     $177 = ((($176)) + 4|0);
     HEAP8[$177>>0] = $175;
     break L1;
    }
   }
   $178 = $1;
   $179 = ((($178)) + 4|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = $181<<1;
   $183 = $182&255;
   HEAP8[$179>>0] = $183;
   break;
  }
  case 16:  {
   $209 = $1;
   $210 = ((($209)) + 4|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = ($212|0)>(128);
   if ($213) {
    $214 = $1;
    $215 = ((($214)) + 4|0);
    HEAP8[$215>>0] = 0;
    $216 = $1;
    $217 = ((($216)) + 3|0);
    HEAP8[$217>>0] = 0;
   }
   break;
  }
  case 254:  {
   $26 = $1;
   $27 = ((($26)) + 3|0);
   HEAP8[$27>>0] = 14;
   $28 = $h;
   $29 = $28&255;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 4|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34|0)==(0);
    if ($35) {
     $36 = $0;
     $37 = $2;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $1;
     $41 = ((($40)) + 4|0);
     HEAP8[$41>>0] = $39;
     $42 = $1;
     $43 = ((($42)) + 4|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $46 = $45 & 240;
     $47 = $46 >> 4;
     $48 = $47&255;
     $h = $48;
     $49 = $1;
     $50 = ((($49)) + 4|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = $52 & 15;
     $54 = $53&255;
     $l = $54;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   if ((label|0) == 5) {
    $55 = $1;
    $56 = ((($55)) + 4|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $0;
    $59 = $2;
    $60 = (($59) + ($58)|0);
    HEAP8[$60>>0] = $57;
   }
   $61 = $h;
   $62 = $61&255;
   do {
    switch ($62|0) {
    case 3:  {
     $75 = $l;
     $76 = $75&255;
     $77 = 64 | $76;
     $78 = $77&255;
     $79 = $1;
     $80 = ((($79)) + 4|0);
     HEAP8[$80>>0] = $78;
     break L1;
     break;
    }
    case 1:  {
     $63 = $l;
     $64 = $63&255;
     $65 = 48 | $64;
     $66 = $65&255;
     $67 = $1;
     $68 = ((($67)) + 4|0);
     HEAP8[$68>>0] = $66;
     break L1;
     break;
    }
    case 5:  {
     $87 = $l;
     $88 = $87&255;
     $89 = ($88|0)<=(3);
     $90 = $1;
     if ($89) {
      $91 = ((($90)) + 3|0);
      HEAP8[$91>>0] = -117;
      $92 = $l;
      $93 = $1;
      $94 = ((($93)) + 4|0);
      HEAP8[$94>>0] = $92;
      break L1;
     } else {
      $95 = ((($90)) + 4|0);
      HEAP8[$95>>0] = 0;
      $96 = $1;
      $97 = ((($96)) + 3|0);
      HEAP8[$97>>0] = 0;
      break L1;
     }
     break;
    }
    case 2:  {
     $69 = $l;
     $70 = $69&255;
     $71 = 80 | $70;
     $72 = $71&255;
     $73 = $1;
     $74 = ((($73)) + 4|0);
     HEAP8[$74>>0] = $72;
     break L1;
     break;
    }
    case 4:  {
     $81 = $l;
     $82 = $81&255;
     $83 = 112 | $82;
     $84 = $83&255;
     $85 = $1;
     $86 = ((($85)) + 4|0);
     HEAP8[$86>>0] = $84;
     break L1;
     break;
    }
    case 9:  {
     $120 = $1;
     $121 = ((($120)) + 4|0);
     HEAP8[$121>>0] = 0;
     $122 = $1;
     $123 = ((($122)) + 3|0);
     HEAP8[$123>>0] = 0;
     break L1;
     break;
    }
    case 11:  {
     $124 = $l;
     $125 = $124&255;
     $126 = 96 | $125;
     $127 = $126&255;
     $128 = $1;
     $129 = ((($128)) + 4|0);
     HEAP8[$129>>0] = $127;
     break L1;
     break;
    }
    case 14:  {
     $148 = $1;
     $149 = ((($148)) + 3|0);
     HEAP8[$149>>0] = -120;
     $150 = $l;
     $151 = $1;
     $152 = ((($151)) + 4|0);
     HEAP8[$152>>0] = $150;
     break L1;
     break;
    }
    case 13: case 12:  {
     $130 = $l;
     $131 = $1;
     $132 = ((($131)) + 4|0);
     HEAP8[$132>>0] = $130;
     $133 = $130&255;
     $134 = ($133|0)==(0);
     if ($134) {
      $135 = $1;
      $136 = ((($135)) + 4|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = (($137) + 1)<<24>>24;
      HEAP8[$136>>0] = $138;
     }
     $139 = $h;
     $140 = $139&255;
     $141 = $140 << 4;
     $142 = $1;
     $143 = ((($142)) + 4|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = $145 | $141;
     $147 = $146&255;
     HEAP8[$143>>0] = $147;
     break L1;
     break;
    }
    case 8:  {
     $112 = $1;
     $113 = ((($112)) + 3|0);
     HEAP8[$113>>0] = 8;
     $114 = $l;
     $115 = $114&255;
     $116 = $115 << 4;
     $117 = $116&255;
     $118 = $1;
     $119 = ((($118)) + 4|0);
     HEAP8[$119>>0] = $117;
     break L1;
     break;
    }
    case 6:  {
     $98 = $l;
     $99 = $98&255;
     $100 = 224 | $99;
     $101 = $100&255;
     $102 = $1;
     $103 = ((($102)) + 4|0);
     HEAP8[$103>>0] = $101;
     break L1;
     break;
    }
    case 7:  {
     $104 = $1;
     $105 = ((($104)) + 3|0);
     HEAP8[$105>>0] = -125;
     $106 = $1;
     $107 = ((($106)) + 4|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = $108&255;
     $110 = $109 & 15;
     $111 = $110&255;
     HEAP8[$107>>0] = $111;
     break L1;
     break;
    }
    default: {
     $153 = $1;
     $154 = ((($153)) + 4|0);
     HEAP8[$154>>0] = 0;
     $155 = $1;
     $156 = ((($155)) + 3|0);
     HEAP8[$156>>0] = 0;
     break L1;
    }
    }
   } while(0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $222 = $1;
 $223 = ((($222)) + 3|0);
 $224 = HEAP8[$223>>0]|0;
 $225 = $224&255;
 $226 = ($225|0)==(9);
 if (!($226)) {
  STACKTOP = sp;return;
 }
 $227 = $1;
 $228 = ((($227)) + 5|0);
 $229 = HEAP8[$228>>0]|0;
 $230 = $229&255;
 $231 = ($230|0)==(3);
 if (!($231)) {
  STACKTOP = sp;return;
 }
 $232 = $1;
 $233 = ((($232)) + 6|0);
 HEAP8[$233>>0] = 0;
 $234 = $1;
 $235 = ((($234)) + 5|0);
 HEAP8[$235>>0] = 0;
 STACKTOP = sp;return;
}
function _stx_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 20)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,8,$7)|0);
 $9 = ($8>>>0)<(8);
 do {
  if ($9) {
   $0 = -1;
  } else {
   $10 = (_memcmp($buf,3976,8)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = (_memcmp($buf,3912,8)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $0 = -1;
     break;
    }
   }
   $14 = $1;
   $15 = $3;
   $16 = (($15) + 60)|0;
   (_hio_seek($14,$16,0)|0);
   $17 = $1;
   $18 = (_hio_read($buf,1,4,$17)|0);
   $19 = ($18>>>0)<(4);
   if ($19) {
    $0 = -1;
    break;
   }
   $20 = (_memcmp($buf,3992,4)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    $0 = -1;
    break;
   } else {
    $22 = $1;
    $23 = $3;
    $24 = (($23) + 0)|0;
    (_hio_seek($22,$24,0)|0);
    $25 = $1;
    $26 = $2;
    _read_title($25,$26,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _stx_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bmod2stm = 0, $broken = 0, $c = 0, $dummy = 0, $event = 0;
 var $i = 0, $mod = 0, $n = 0, $pp_ins = 0, $pp_pat = 0, $r = 0, $sfh = 0, $sih = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $x16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dummy = sp + 224|0;
 $sfh = sp + 152|0;
 $sih = sp + 24|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $broken = 0;
 $event = 0;
 $bmod2stm = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,20,1,$7)|0);
 $8 = ((($sfh)) + 20|0);
 $9 = $2;
 (_hio_read($8,8,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read16l($10)|0);
 $12 = ((($sfh)) + 28|0);
 HEAP16[$12>>1] = $11;
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($sfh)) + 30|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read16l($16)|0);
 $18 = ((($sfh)) + 32|0);
 HEAP16[$18>>1] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($sfh)) + 34|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($sfh)) + 36|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($sfh)) + 38|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($sfh)) + 40|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = ((($sfh)) + 42|0);
 HEAP8[$33>>0] = $32;
 $34 = $2;
 $35 = (_hio_read8($34)|0);
 $36 = ((($sfh)) + 43|0);
 HEAP8[$36>>0] = $35;
 $37 = $2;
 $38 = (_hio_read16l($37)|0);
 $39 = ((($sfh)) + 44|0);
 HEAP16[$39>>1] = $38;
 $40 = $2;
 $41 = (_hio_read16l($40)|0);
 $42 = ((($sfh)) + 46|0);
 HEAP16[$42>>1] = $41;
 $43 = $2;
 $44 = (_hio_read16l($43)|0);
 $45 = ((($sfh)) + 48|0);
 HEAP16[$45>>1] = $44;
 $46 = $2;
 $47 = (_hio_read16l($46)|0);
 $48 = ((($sfh)) + 50|0);
 HEAP16[$48>>1] = $47;
 $49 = $2;
 $50 = (_hio_read16l($49)|0);
 $51 = ((($sfh)) + 52|0);
 HEAP16[$51>>1] = $50;
 $52 = $2;
 $53 = (_hio_read16l($52)|0);
 $54 = ((($sfh)) + 54|0);
 HEAP16[$54>>1] = $53;
 $55 = $2;
 $56 = (_hio_read16l($55)|0);
 $57 = ((($sfh)) + 56|0);
 HEAP16[$57>>1] = $56;
 $58 = $2;
 $59 = (_hio_read16l($58)|0);
 $60 = ((($sfh)) + 58|0);
 HEAP16[$60>>1] = $59;
 $61 = ((($sfh)) + 60|0);
 $62 = $2;
 (_hio_read($61,4,1,$62)|0);
 $63 = ((($sfh)) + 20|0);
 $64 = (_strncmp($63,3912,8)|0);
 $65 = ($64|0)!=(0);
 if (!($65)) {
  $bmod2stm = 1;
 }
 $66 = ((($sfh)) + 50|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67&65535;
 $69 = $mod;
 $70 = ((($69)) + 140|0);
 HEAP32[$70>>2] = $68;
 $71 = ((($sfh)) + 48|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72&65535;
 $74 = $mod;
 $75 = ((($74)) + 128|0);
 HEAP32[$75>>2] = $73;
 $76 = $mod;
 $77 = ((($76)) + 128|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $mod;
 $80 = ((($79)) + 136|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = Math_imul($78, $81)|0;
 $83 = $mod;
 $84 = ((($83)) + 132|0);
 HEAP32[$84>>2] = $82;
 $85 = ((($sfh)) + 52|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = $mod;
 $89 = ((($88)) + 156|0);
 HEAP32[$89>>2] = $87;
 $90 = ((($sfh)) + 43|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $92 & 240;
 $94 = $93 >> 4;
 $95 = $mod;
 $96 = ((($95)) + 148|0);
 HEAP32[$96>>2] = $94;
 $97 = $mod;
 $98 = ((($97)) + 140|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $mod;
 $101 = ((($100)) + 144|0);
 HEAP32[$101>>2] = $99;
 $102 = $1;
 $103 = ((($102)) + 1264|0);
 HEAP32[$103>>2] = 8363;
 $104 = $2;
 $105 = $3;
 $106 = ((($sfh)) + 32|0);
 $107 = HEAP16[$106>>1]|0;
 $108 = $107&65535;
 $109 = $108 << 4;
 $110 = (($105) + ($109))|0;
 (_hio_seek($104,$110,0)|0);
 $111 = $2;
 $112 = (_hio_read16l($111)|0);
 $x16 = $112;
 $113 = $2;
 $114 = $3;
 $115 = $x16;
 $116 = $115&65535;
 $117 = $116 << 4;
 $118 = (($114) + ($117))|0;
 (_hio_seek($113,$118,0)|0);
 $119 = $2;
 $120 = (_hio_read16l($119)|0);
 $x16 = $120;
 $121 = $x16;
 $122 = $121&65535;
 $123 = ((($sfh)) + 28|0);
 $124 = HEAP16[$123>>1]|0;
 $125 = $124&65535;
 $126 = ($122|0)==($125|0);
 if ($126) {
  $broken = 1;
 }
 $127 = $mod;
 (_strncpy(($127|0),($sfh|0),20)|0);
 $128 = $bmod2stm;
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $1;
  _set_type($130,3928,$vararg_buffer);
 } else {
  $131 = $mod;
  $132 = ((($131)) + 64|0);
  $133 = $broken;
  $134 = ($133|0)!=(0);
  $135 = $134 ? 0 : 1;
  HEAP32[$vararg_buffer1>>2] = $135;
  (_snprintf($132,64,3944,$vararg_buffer1)|0);
 }
 $136 = $mod;
 $137 = ((($136)) + 128|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (_calloc(2,$138)|0);
 $pp_pat = $139;
 $140 = $pp_pat;
 $141 = ($140|0)==(0|0);
 L11: do {
  if (!($141)) {
   $142 = $mod;
   $143 = ((($142)) + 140|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (_calloc(2,$144)|0);
   $pp_ins = $145;
   $146 = $pp_ins;
   $147 = ($146|0)==(0|0);
   if (!($147)) {
    $148 = $2;
    $149 = $3;
    $150 = ((($sfh)) + 32|0);
    $151 = HEAP16[$150>>1]|0;
    $152 = $151&65535;
    $153 = $152 << 4;
    $154 = (($149) + ($153))|0;
    (_hio_seek($148,$154,0)|0);
    $i = 0;
    while(1) {
     $155 = $i;
     $156 = $mod;
     $157 = ((($156)) + 128|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($155|0)<($158|0);
     $160 = $2;
     if (!($159)) {
      break;
     }
     $161 = (_hio_read16l($160)|0);
     $162 = $i;
     $163 = $pp_pat;
     $164 = (($163) + ($162<<1)|0);
     HEAP16[$164>>1] = $161;
     $165 = $i;
     $166 = (($165) + 1)|0;
     $i = $166;
    }
    $167 = $3;
    $168 = ((($sfh)) + 34|0);
    $169 = HEAP16[$168>>1]|0;
    $170 = $169&65535;
    $171 = $170 << 4;
    $172 = (($167) + ($171))|0;
    (_hio_seek($160,$172,0)|0);
    $i = 0;
    while(1) {
     $173 = $i;
     $174 = $mod;
     $175 = ((($174)) + 140|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($173|0)<($176|0);
     $178 = $2;
     if (!($177)) {
      break;
     }
     $179 = (_hio_read16l($178)|0);
     $180 = $i;
     $181 = $pp_ins;
     $182 = (($181) + ($180<<1)|0);
     HEAP16[$182>>1] = $179;
     $183 = $i;
     $184 = (($183) + 1)|0;
     $i = $184;
    }
    $185 = $3;
    $186 = ((($sfh)) + 36|0);
    $187 = HEAP16[$186>>1]|0;
    $188 = $187&65535;
    $189 = $188 << 4;
    $190 = (($185) + ($189))|0;
    $191 = (($190) + 32)|0;
    (_hio_seek($178,$191,0)|0);
    $i = 0;
    while(1) {
     $192 = $i;
     $193 = $mod;
     $194 = ((($193)) + 156|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($192|0)<($195|0);
     if (!($196)) {
      break;
     }
     $197 = $2;
     $198 = (_hio_read8($197)|0);
     $199 = $i;
     $200 = $mod;
     $201 = ((($200)) + 952|0);
     $202 = (($201) + ($199)|0);
     HEAP8[$202>>0] = $198;
     $203 = $2;
     (_hio_seek($203,4,1)|0);
     $204 = $i;
     $205 = (($204) + 1)|0;
     $i = $205;
    }
    $206 = $mod;
    $207 = (_instrument_init($206)|0);
    $208 = ($207|0)<(0);
    L27: do {
     if (!($208)) {
      $i = 0;
      while(1) {
       $209 = $i;
       $210 = $mod;
       $211 = ((($210)) + 140|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = ($209|0)<($212|0);
       $214 = $mod;
       if (!($213)) {
        break;
       }
       $215 = $i;
       $216 = (_subinstrument_alloc($214,$215,1)|0);
       $217 = ($216|0)<(0);
       if ($217) {
        break L27;
       }
       $218 = $2;
       $219 = $3;
       $220 = $i;
       $221 = $pp_ins;
       $222 = (($221) + ($220<<1)|0);
       $223 = HEAP16[$222>>1]|0;
       $224 = $223&65535;
       $225 = $224 << 4;
       $226 = (($219) + ($225))|0;
       (_hio_seek($218,$226,0)|0);
       $227 = $2;
       $228 = (_hio_read8($227)|0);
       HEAP8[$sih>>0] = $228;
       $229 = ((($sih)) + 1|0);
       $230 = $2;
       (_hio_read($229,13,1,$230)|0);
       $231 = $2;
       $232 = (_hio_read16l($231)|0);
       $233 = ((($sih)) + 14|0);
       HEAP16[$233>>1] = $232;
       $234 = $2;
       $235 = (_hio_read32l($234)|0);
       $236 = ((($sih)) + 16|0);
       HEAP32[$236>>2] = $235;
       $237 = $2;
       $238 = (_hio_read32l($237)|0);
       $239 = ((($sih)) + 20|0);
       HEAP32[$239>>2] = $238;
       $240 = $2;
       $241 = (_hio_read32l($240)|0);
       $242 = ((($sih)) + 24|0);
       HEAP32[$242>>2] = $241;
       $243 = $2;
       $244 = (_hio_read8($243)|0);
       $245 = ((($sih)) + 28|0);
       HEAP8[$245>>0] = $244;
       $246 = $2;
       $247 = (_hio_read8($246)|0);
       $248 = ((($sih)) + 29|0);
       HEAP8[$248>>0] = $247;
       $249 = $2;
       $250 = (_hio_read8($249)|0);
       $251 = ((($sih)) + 30|0);
       HEAP8[$251>>0] = $250;
       $252 = $2;
       $253 = (_hio_read8($252)|0);
       $254 = ((($sih)) + 31|0);
       HEAP8[$254>>0] = $253;
       $255 = $2;
       $256 = (_hio_read16l($255)|0);
       $257 = ((($sih)) + 32|0);
       HEAP16[$257>>1] = $256;
       $258 = $2;
       $259 = (_hio_read16l($258)|0);
       $260 = ((($sih)) + 34|0);
       HEAP16[$260>>1] = $259;
       $261 = ((($sih)) + 36|0);
       $262 = $2;
       (_hio_read($261,4,1,$262)|0);
       $263 = $2;
       $264 = (_hio_read16l($263)|0);
       $265 = ((($sih)) + 40|0);
       HEAP16[$265>>1] = $264;
       $266 = $2;
       $267 = (_hio_read16l($266)|0);
       $268 = ((($sih)) + 42|0);
       HEAP16[$268>>1] = $267;
       $269 = $2;
       $270 = (_hio_read32l($269)|0);
       $271 = ((($sih)) + 44|0);
       HEAP32[$271>>2] = $270;
       $272 = ((($sih)) + 48|0);
       $273 = $2;
       (_hio_read($272,28,1,$273)|0);
       $274 = ((($sih)) + 76|0);
       $275 = $2;
       (_hio_read($274,4,1,$275)|0);
       $276 = ((($sih)) + 16|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = $i;
       $279 = $mod;
       $280 = ((($279)) + 180|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = (($281) + (($278*52)|0)|0);
       $283 = ((($282)) + 32|0);
       HEAP32[$283>>2] = $277;
       $284 = ((($sih)) + 20|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = $i;
       $287 = $mod;
       $288 = ((($287)) + 180|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = (($289) + (($286*52)|0)|0);
       $291 = ((($290)) + 36|0);
       HEAP32[$291>>2] = $285;
       $292 = ((($sih)) + 24|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $i;
       $295 = $mod;
       $296 = ((($295)) + 180|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = (($297) + (($294*52)|0)|0);
       $299 = ((($298)) + 40|0);
       HEAP32[$299>>2] = $293;
       $300 = $i;
       $301 = $mod;
       $302 = ((($301)) + 180|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = (($303) + (($300*52)|0)|0);
       $305 = ((($304)) + 40|0);
       $306 = HEAP32[$305>>2]|0;
       $307 = ($306|0)==(65535);
       if ($307) {
        $308 = $i;
        $309 = $mod;
        $310 = ((($309)) + 180|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = (($311) + (($308*52)|0)|0);
        $313 = ((($312)) + 40|0);
        HEAP32[$313>>2] = 0;
       }
       $314 = $i;
       $315 = $mod;
       $316 = ((($315)) + 180|0);
       $317 = HEAP32[$316>>2]|0;
       $318 = (($317) + (($314*52)|0)|0);
       $319 = ((($318)) + 40|0);
       $320 = HEAP32[$319>>2]|0;
       $321 = ($320|0)>(0);
       $322 = $321 ? 2 : 0;
       $323 = $i;
       $324 = $mod;
       $325 = ((($324)) + 180|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = (($326) + (($323*52)|0)|0);
       $328 = ((($327)) + 44|0);
       HEAP32[$328>>2] = $322;
       $329 = ((($sih)) + 28|0);
       $330 = HEAP8[$329>>0]|0;
       $331 = $330&255;
       $332 = $i;
       $333 = $mod;
       $334 = ((($333)) + 176|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = (($335) + (($332*764)|0)|0);
       $337 = ((($336)) + 756|0);
       $338 = HEAP32[$337>>2]|0;
       HEAP32[$338>>2] = $331;
       $339 = $i;
       $340 = $mod;
       $341 = ((($340)) + 176|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = (($342) + (($339*764)|0)|0);
       $344 = ((($343)) + 756|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = ((($345)) + 8|0);
       HEAP32[$346>>2] = 128;
       $347 = $i;
       $348 = $i;
       $349 = $mod;
       $350 = ((($349)) + 176|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($351) + (($348*764)|0)|0);
       $353 = ((($352)) + 756|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($354)) + 40|0);
       HEAP32[$355>>2] = $347;
       $356 = $i;
       $357 = $mod;
       $358 = ((($357)) + 176|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = (($359) + (($356*764)|0)|0);
       $361 = ((($360)) + 36|0);
       HEAP32[$361>>2] = 1;
       $362 = $mod;
       $363 = $i;
       $364 = ((($sih)) + 48|0);
       (_instrument_name($362,$363,$364,12)|0);
       $365 = ((($sih)) + 32|0);
       $366 = HEAP16[$365>>1]|0;
       $367 = $366&65535;
       $368 = ($367*8363)|0;
       $369 = (($368|0) / 8448)&-1;
       $370 = $369&65535;
       $371 = ((($sih)) + 32|0);
       HEAP16[$371>>1] = $370;
       $372 = ((($sih)) + 32|0);
       $373 = HEAP16[$372>>1]|0;
       $374 = $373&65535;
       $375 = $i;
       $376 = $mod;
       $377 = ((($376)) + 176|0);
       $378 = HEAP32[$377>>2]|0;
       $379 = (($378) + (($375*764)|0)|0);
       $380 = ((($379)) + 756|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = ((($381)) + 12|0);
       $383 = $i;
       $384 = $mod;
       $385 = ((($384)) + 176|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = (($386) + (($383*764)|0)|0);
       $388 = ((($387)) + 756|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = ((($389)) + 16|0);
       _c2spd_to_note($374,$382,$390);
       $391 = $i;
       $392 = (($391) + 1)|0;
       $i = $392;
      }
      $393 = (_pattern_init($214)|0);
      $394 = ($393|0)<(0);
      if (!($394)) {
       $i = 0;
       while(1) {
        $395 = $i;
        $396 = $mod;
        $397 = ((($396)) + 128|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = ($395|0)<($398|0);
        if (!($399)) {
         break;
        }
        $400 = $mod;
        $401 = $i;
        $402 = (_pattern_tracks_alloc($400,$401,64)|0);
        $403 = ($402|0)<(0);
        if ($403) {
         break L27;
        }
        $404 = $i;
        $405 = $pp_pat;
        $406 = (($405) + ($404<<1)|0);
        $407 = HEAP16[$406>>1]|0;
        $408 = $407&65535;
        $409 = ($408|0)==(0);
        L42: do {
         if (!($409)) {
          $410 = $2;
          $411 = $3;
          $412 = $i;
          $413 = $pp_pat;
          $414 = (($413) + ($412<<1)|0);
          $415 = HEAP16[$414>>1]|0;
          $416 = $415&65535;
          $417 = $416 << 4;
          $418 = (($411) + ($417))|0;
          (_hio_seek($410,$418,0)|0);
          $419 = $broken;
          $420 = ($419|0)!=(0);
          if ($420) {
           $421 = $2;
           (_hio_seek($421,2,1)|0);
          }
          $r = 0;
          while(1) {
           $422 = $r;
           $423 = ($422|0)<(64);
           if (!($423)) {
            break L42;
           }
           $424 = $2;
           $425 = (_hio_read8($424)|0);
           $b = $425;
           $426 = $b;
           $427 = $426&255;
           $428 = ($427|0)==(0);
           if ($428) {
            $429 = $r;
            $430 = (($429) + 1)|0;
            $r = $430;
            continue;
           }
           $431 = $b;
           $432 = $431&255;
           $433 = $432 & 31;
           $c = $433;
           $434 = $c;
           $435 = $mod;
           $436 = ((($435)) + 136|0);
           $437 = HEAP32[$436>>2]|0;
           $438 = ($434|0)>=($437|0);
           if ($438) {
            $457 = $dummy;
           } else {
            $439 = $r;
            $440 = $c;
            $441 = $i;
            $442 = $1;
            $443 = ((($442)) + 168|0);
            $444 = HEAP32[$443>>2]|0;
            $445 = (($444) + ($441<<2)|0);
            $446 = HEAP32[$445>>2]|0;
            $447 = ((($446)) + 4|0);
            $448 = (($447) + ($440<<2)|0);
            $449 = HEAP32[$448>>2]|0;
            $450 = $1;
            $451 = ((($450)) + 172|0);
            $452 = HEAP32[$451>>2]|0;
            $453 = (($452) + ($449<<2)|0);
            $454 = HEAP32[$453>>2]|0;
            $455 = ((($454)) + 4|0);
            $456 = (($455) + ($439<<3)|0);
            $457 = $456;
           }
           $event = $457;
           $458 = $b;
           $459 = $458&255;
           $460 = $459 & 32;
           $461 = ($460|0)!=(0);
           if ($461) {
            $462 = $2;
            $463 = (_hio_read8($462)|0);
            $n = $463;
            $464 = $n;
            $465 = $464&255;
            if ((($465|0) == 255)) {
             $n = 0;
            } else if ((($465|0) == 254)) {
             $n = -127;
            } else {
             $466 = $n;
             $467 = $466&255;
             $468 = $467 & 240;
             $469 = $468 >> 4;
             $470 = ($469*12)|0;
             $471 = (37 + ($470))|0;
             $472 = $n;
             $473 = $472&255;
             $474 = $473 & 15;
             $475 = (($471) + ($474))|0;
             $476 = $475&255;
             $n = $476;
            }
            $477 = $n;
            $478 = $event;
            HEAP8[$478>>0] = $477;
            $479 = $2;
            $480 = (_hio_read8($479)|0);
            $481 = $event;
            $482 = ((($481)) + 1|0);
            HEAP8[$482>>0] = $480;
           }
           $483 = $b;
           $484 = $483&255;
           $485 = $484 & 64;
           $486 = ($485|0)!=(0);
           if ($486) {
            $487 = $2;
            $488 = (_hio_read8($487)|0);
            $489 = $488&255;
            $490 = (($489) + 1)|0;
            $491 = $490&255;
            $492 = $event;
            $493 = ((($492)) + 2|0);
            HEAP8[$493>>0] = $491;
           }
           $494 = $b;
           $495 = $494&255;
           $496 = $495 & 128;
           $497 = ($496|0)!=(0);
           if (!($497)) {
            continue;
           }
           $498 = $2;
           $499 = (_hio_read8($498)|0);
           $500 = $499&255;
           $501 = (3960 + ($500)|0);
           $502 = HEAP8[$501>>0]|0;
           $503 = $event;
           $504 = ((($503)) + 3|0);
           HEAP8[$504>>0] = $502;
           $505 = $2;
           $506 = (_hio_read8($505)|0);
           $507 = $event;
           $508 = ((($507)) + 4|0);
           HEAP8[$508>>0] = $506;
           $509 = $event;
           $510 = ((($509)) + 3|0);
           $511 = HEAP8[$510>>0]|0;
           $512 = $511&255;
           if ((($512|0) == 255)) {
            $522 = $event;
            $523 = ((($522)) + 3|0);
            HEAP8[$523>>0] = 0;
            $524 = $event;
            $525 = ((($524)) + 4|0);
            HEAP8[$525>>0] = 0;
            continue;
           } else if ((($512|0) == 15)) {
            $513 = $event;
            $514 = ((($513)) + 4|0);
            $515 = HEAP8[$514>>0]|0;
            $516 = $515&255;
            $517 = $516 & 240;
            $518 = $517 >> 4;
            $519 = $518&255;
            $520 = $event;
            $521 = ((($520)) + 4|0);
            HEAP8[$521>>0] = $519;
            continue;
           } else {
            continue;
           }
          }
         }
        } while(0);
        $526 = $i;
        $527 = (($526) + 1)|0;
        $i = $527;
       }
       $528 = $pp_ins;
       _free($528);
       $529 = $pp_pat;
       _free($529);
       $i = 0;
       while(1) {
        $530 = $i;
        $531 = $mod;
        $532 = ((($531)) + 140|0);
        $533 = HEAP32[$532>>2]|0;
        $534 = ($530|0)<($533|0);
        $535 = $1;
        if (!($534)) {
         break;
        }
        $536 = $2;
        $537 = $i;
        $538 = $mod;
        $539 = ((($538)) + 180|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = (($540) + (($537*52)|0)|0);
        $542 = (_load_sample($535,$536,0,$541,0)|0);
        $543 = ($542|0)<(0);
        if ($543) {
         break L11;
        }
        $544 = $i;
        $545 = (($544) + 1)|0;
        $i = $545;
       }
       $546 = ((($535)) + 1280|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = $547 | 293601889;
       HEAP32[$546>>2] = $548;
       $549 = $1;
       $550 = ((($549)) + 1284|0);
       HEAP32[$550>>2] = 2;
       $0 = 0;
       $553 = $0;
       STACKTOP = sp;return ($553|0);
      }
     }
    } while(0);
    $551 = $pp_ins;
    _free($551);
   }
   $552 = $pp_pat;
   _free($552);
  }
 } while(0);
 $0 = -1;
 $553 = $0;
 STACKTOP = sp;return ($553|0);
}
function _pt3_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1179603533);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32b($7)|0);
   $8 = $1;
   $9 = (_hio_read32b($8)|0);
   $10 = ($9|0)!=(1297040460);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = (_hio_read32b($11)|0);
   $13 = ($12|0)!=(1447383635);
   if ($13) {
    $0 = -1;
    break;
   }
   $14 = $1;
   (_hio_read32b($14)|0);
   $15 = $1;
   (_hio_seek($15,10,1)|0);
   $16 = $1;
   $17 = (_hio_read32b($16)|0);
   $18 = ($17|0)==(1229866575);
   $19 = $1;
   if ($18) {
    (_hio_read32b($19)|0);
    $20 = $1;
    $21 = $2;
    _read_title($20,$21,32);
   } else {
    $22 = $2;
    _read_title($19,$22,0);
   }
   $0 = 0;
  }
 } while(0);
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _pt3_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $handle = 0, $ret = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 28|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_read32b($6)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = $2;
 (_hio_read32b($9)|0);
 $10 = $2;
 (_hio_read32b($10)|0);
 $11 = $2;
 (_hio_read($buf,1,10,$11)|0);
 $12 = $1;
 $13 = ((($buf)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $13;
 _set_type($12,4032,$vararg_buffer);
 $14 = (_iff_new()|0);
 $handle = $14;
 $15 = $handle;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $17 = $handle;
 $18 = (_iff_register($17,7120,233)|0);
 $ret = $18;
 $19 = $handle;
 $20 = (_iff_register($19,4048,234)|0);
 $21 = $ret;
 $22 = $21 | $20;
 $ret = $22;
 $23 = $handle;
 $24 = (_iff_register($23,4056,235)|0);
 $25 = $ret;
 $26 = $25 | $24;
 $ret = $26;
 $27 = $ret;
 $28 = ($27|0)!=(0);
 if ($28) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $29 = $handle;
 _iff_set_quirk($29,2);
 $30 = $handle;
 $31 = $1;
 $32 = $2;
 $33 = (_iff_load($30,$31,$32,0)|0);
 $34 = ($33|0)<(0);
 $35 = $handle;
 _iff_release($35);
 if ($34) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _get_info($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = $2;
 (_hio_read($5,1,32,$6)|0);
 $7 = $2;
 $8 = (_hio_read16b($7)|0);
 $9 = $8&65535;
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = (_hio_read16b($12)|0);
 $14 = $13&65535;
 $15 = $mod;
 $16 = ((($15)) + 156|0);
 HEAP32[$16>>2] = $14;
 $17 = $2;
 $18 = (_hio_read16b($17)|0);
 $19 = $18&65535;
 $20 = $mod;
 $21 = ((($20)) + 128|0);
 HEAP32[$21>>2] = $19;
 $22 = $2;
 $23 = (_hio_read16b($22)|0);
 $24 = $23&65535;
 $25 = $mod;
 $26 = ((($25)) + 164|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 $28 = (_hio_read16b($27)|0);
 $29 = $28&65535;
 $30 = $mod;
 $31 = ((($30)) + 152|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = (_hio_read16b($32)|0);
 $34 = $33&65535;
 $flags = $34;
 $35 = $2;
 (_hio_read16b($35)|0);
 $36 = $2;
 (_hio_read16b($36)|0);
 $37 = $2;
 (_hio_read16b($37)|0);
 $38 = $2;
 (_hio_read16b($38)|0);
 $39 = $2;
 (_hio_read16b($39)|0);
 $40 = $2;
 (_hio_read16b($40)|0);
 $41 = $2;
 (_hio_read16b($41)|0);
 $42 = $2;
 (_hio_read16b($42)|0);
 $43 = $2;
 (_hio_read16b($43)|0);
 STACKTOP = sp;return 0;
}
function _get_cmnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 STACKTOP = sp;return 0;
}
function _get_ptdt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $5 = $2;
 (_ptdt_load($4,$5,0)|0);
 STACKTOP = sp;return 0;
}
function _ptdt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $mod_event = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mh = sp + 32|0;
 $mod_event = sp + 1116|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 (_hio_read($mh,20,1,$5)|0);
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(31);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = ((($mh)) + 20|0);
  $10 = (($9) + (($8*30)|0)|0);
  $11 = $2;
  (_hio_read($10,22,1,$11)|0);
  $12 = $2;
  $13 = (_hio_read16b($12)|0);
  $14 = $i;
  $15 = ((($mh)) + 20|0);
  $16 = (($15) + (($14*30)|0)|0);
  $17 = ((($16)) + 22|0);
  HEAP16[$17>>1] = $13;
  $18 = $2;
  $19 = (_hio_read8($18)|0);
  $20 = $i;
  $21 = ((($mh)) + 20|0);
  $22 = (($21) + (($20*30)|0)|0);
  $23 = ((($22)) + 24|0);
  HEAP8[$23>>0] = $19;
  $24 = $2;
  $25 = (_hio_read8($24)|0);
  $26 = $i;
  $27 = ((($mh)) + 20|0);
  $28 = (($27) + (($26*30)|0)|0);
  $29 = ((($28)) + 25|0);
  HEAP8[$29>>0] = $25;
  $30 = $2;
  $31 = (_hio_read16b($30)|0);
  $32 = $i;
  $33 = ((($mh)) + 20|0);
  $34 = (($33) + (($32*30)|0)|0);
  $35 = ((($34)) + 26|0);
  HEAP16[$35>>1] = $31;
  $36 = $2;
  $37 = (_hio_read16b($36)|0);
  $38 = $i;
  $39 = ((($mh)) + 20|0);
  $40 = (($39) + (($38*30)|0)|0);
  $41 = ((($40)) + 28|0);
  HEAP16[$41>>1] = $37;
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $44 = $2;
 $45 = (_hio_read8($44)|0);
 $46 = ((($mh)) + 950|0);
 HEAP8[$46>>0] = $45;
 $47 = $2;
 $48 = (_hio_read8($47)|0);
 $49 = ((($mh)) + 951|0);
 HEAP8[$49>>0] = $48;
 $50 = ((($mh)) + 952|0);
 $51 = $2;
 (_hio_read($50,128,1,$51)|0);
 $52 = ((($mh)) + 1080|0);
 $53 = $2;
 (_hio_read($52,4,1,$53)|0);
 $54 = $mod;
 $55 = ((($54)) + 140|0);
 HEAP32[$55>>2] = 31;
 $56 = $mod;
 $57 = ((($56)) + 140|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $mod;
 $60 = ((($59)) + 144|0);
 HEAP32[$60>>2] = $58;
 $61 = $mod;
 $62 = ((($61)) + 136|0);
 HEAP32[$62>>2] = 4;
 $63 = ((($mh)) + 950|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $mod;
 $67 = ((($66)) + 156|0);
 HEAP32[$67>>2] = $65;
 $68 = ((($mh)) + 951|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $mod;
 $72 = ((($71)) + 160|0);
 HEAP32[$72>>2] = $70;
 $73 = $mod;
 $74 = ((($73)) + 952|0);
 $75 = ((($mh)) + 952|0);
 dest=$74; src=$75; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(128);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = $mod;
  $80 = ((($79)) + 952|0);
  $81 = (($80) + ($78)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $mod;
  $85 = ((($84)) + 128|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83|0)>($86|0);
  if ($87) {
   $88 = $i;
   $89 = $mod;
   $90 = ((($89)) + 952|0);
   $91 = (($90) + ($88)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $mod;
   $95 = ((($94)) + 128|0);
   HEAP32[$95>>2] = $93;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $98 = $mod;
 $99 = ((($98)) + 128|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[$99>>2] = $101;
 $102 = $mod;
 $103 = ((($102)) + 136|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $mod;
 $106 = ((($105)) + 128|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = Math_imul($104, $107)|0;
 $109 = $mod;
 $110 = ((($109)) + 132|0);
 HEAP32[$110>>2] = $108;
 $111 = $mod;
 $112 = (_instrument_init($111)|0);
 $113 = ($112|0)<(0);
 if ($113) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $i = 0;
 while(1) {
  $114 = $i;
  $115 = $mod;
  $116 = ((($115)) + 140|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($114|0)<($117|0);
  $119 = $mod;
  if (!($118)) {
   break;
  }
  $120 = $i;
  $121 = (_subinstrument_alloc($119,$120,1)|0);
  $122 = ($121|0)<(0);
  if ($122) {
   label = 14;
   break;
  }
  $123 = $i;
  $124 = ((($mh)) + 20|0);
  $125 = (($124) + (($123*30)|0)|0);
  $126 = ((($125)) + 22|0);
  $127 = HEAP16[$126>>1]|0;
  $128 = $127&65535;
  $129 = $128<<1;
  $130 = $i;
  $131 = $mod;
  $132 = ((($131)) + 180|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($130*52)|0)|0);
  $135 = ((($134)) + 32|0);
  HEAP32[$135>>2] = $129;
  $136 = $i;
  $137 = ((($mh)) + 20|0);
  $138 = (($137) + (($136*30)|0)|0);
  $139 = ((($138)) + 26|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140&65535;
  $142 = $141<<1;
  $143 = $i;
  $144 = $mod;
  $145 = ((($144)) + 180|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + (($143*52)|0)|0);
  $148 = ((($147)) + 36|0);
  HEAP32[$148>>2] = $142;
  $149 = $i;
  $150 = $mod;
  $151 = ((($150)) + 180|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + (($149*52)|0)|0);
  $154 = ((($153)) + 36|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $i;
  $157 = ((($mh)) + 20|0);
  $158 = (($157) + (($156*30)|0)|0);
  $159 = ((($158)) + 28|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160&65535;
  $162 = $161<<1;
  $163 = (($155) + ($162))|0;
  $164 = $i;
  $165 = $mod;
  $166 = ((($165)) + 180|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + (($164*52)|0)|0);
  $169 = ((($168)) + 40|0);
  HEAP32[$169>>2] = $163;
  $170 = $i;
  $171 = ((($mh)) + 20|0);
  $172 = (($171) + (($170*30)|0)|0);
  $173 = ((($172)) + 28|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = ($175|0)>(1);
  $177 = $176 ? 2 : 0;
  $178 = $i;
  $179 = $mod;
  $180 = ((($179)) + 180|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + (($178*52)|0)|0);
  $183 = ((($182)) + 44|0);
  HEAP32[$183>>2] = $177;
  $184 = $i;
  $185 = $mod;
  $186 = ((($185)) + 180|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = (($187) + (($184*52)|0)|0);
  $189 = ((($188)) + 32|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ($190|0)>(0);
  if ($191) {
   $192 = $i;
   $193 = $mod;
   $194 = ((($193)) + 176|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + (($192*764)|0)|0);
   $197 = ((($196)) + 36|0);
   HEAP32[$197>>2] = 1;
  }
  $198 = $i;
  $199 = ((($mh)) + 20|0);
  $200 = (($199) + (($198*30)|0)|0);
  $201 = ((($200)) + 24|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202 << 24 >> 24;
  $204 = $203 << 4;
  $205 = $204&255;
  $206 = $205 << 24 >> 24;
  $207 = $i;
  $208 = $mod;
  $209 = ((($208)) + 176|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + (($207*764)|0)|0);
  $212 = ((($211)) + 756|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($213)) + 16|0);
  HEAP32[$214>>2] = $206;
  $215 = $i;
  $216 = ((($mh)) + 20|0);
  $217 = (($216) + (($215*30)|0)|0);
  $218 = ((($217)) + 25|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $219 << 24 >> 24;
  $221 = $i;
  $222 = $mod;
  $223 = ((($222)) + 176|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + (($221*764)|0)|0);
  $226 = ((($225)) + 756|0);
  $227 = HEAP32[$226>>2]|0;
  HEAP32[$227>>2] = $220;
  $228 = $i;
  $229 = $mod;
  $230 = ((($229)) + 176|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + (($228*764)|0)|0);
  $233 = ((($232)) + 756|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ((($234)) + 8|0);
  HEAP32[$235>>2] = 128;
  $236 = $i;
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 176|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*764)|0)|0);
  $242 = ((($241)) + 756|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ((($243)) + 40|0);
  HEAP32[$244>>2] = $236;
  $245 = $i;
  $246 = $mod;
  $247 = ((($246)) + 176|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = (($248) + (($245*764)|0)|0);
  $250 = ((($249)) + 40|0);
  HEAP32[$250>>2] = 4095;
  $251 = $mod;
  $252 = $i;
  $253 = $i;
  $254 = ((($mh)) + 20|0);
  $255 = (($254) + (($253*30)|0)|0);
  (_instrument_name($251,$252,$255,22)|0);
  $256 = $i;
  $257 = (($256) + 1)|0;
  $i = $257;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $258 = (_pattern_init($119)|0);
 $259 = ($258|0)<(0);
 if ($259) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $i = 0;
 while(1) {
  $260 = $i;
  $261 = $mod;
  $262 = ((($261)) + 128|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($260|0)<($263|0);
  if (!($264)) {
   break;
  }
  $265 = $mod;
  $266 = $i;
  $267 = (_pattern_tracks_alloc($265,$266,64)|0);
  $268 = ($267|0)<(0);
  if ($268) {
   label = 23;
   break;
  }
  $j = 0;
  while(1) {
   $269 = $j;
   $270 = ($269|0)<(256);
   if (!($270)) {
    break;
   }
   $271 = $j;
   $272 = (($271|0) / 4)&-1;
   $273 = $j;
   $274 = (($273|0) % 4)&-1;
   $275 = $i;
   $276 = $1;
   $277 = ((($276)) + 168|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (($278) + ($275<<2)|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = ((($280)) + 4|0);
   $282 = (($281) + ($274<<2)|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $1;
   $285 = ((($284)) + 172|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + ($283<<2)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = (($289) + ($272<<3)|0);
   $event = $290;
   $291 = $2;
   (_hio_read($mod_event,1,4,$291)|0);
   $292 = $event;
   _decode_protracker_event($292,$mod_event);
   $293 = $j;
   $294 = (($293) + 1)|0;
   $j = $294;
  }
  $295 = $i;
  $296 = (($295) + 1)|0;
  $i = $296;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $297 = $1;
 $298 = ((($297)) + 1280|0);
 $299 = HEAP32[$298>>2]|0;
 $300 = $299 | 8192;
 HEAP32[$298>>2] = $300;
 $i = 0;
 while(1) {
  $301 = $i;
  $302 = $mod;
  $303 = ((($302)) + 144|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ($301|0)<($304|0);
  if (!($305)) {
   label = 34;
   break;
  }
  $306 = $i;
  $307 = $mod;
  $308 = ((($307)) + 180|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + (($306*52)|0)|0);
  $311 = ((($310)) + 32|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($312|0)!=(0);
  if ($313) {
   $314 = $1;
   $315 = $2;
   $316 = $i;
   $317 = $mod;
   $318 = ((($317)) + 180|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + (($316*52)|0)|0);
   $321 = (_load_sample($314,$315,0,$320,0)|0);
   $322 = ($321|0)<(0);
   if ($322) {
    label = 32;
    break;
   }
  }
  $323 = $i;
  $324 = (($323) + 1)|0;
  $i = $324;
 }
 if ((label|0) == 32) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 34) {
  $0 = 0;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 return (0)|0;
}
function _sfx_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 (_hio_seek($4,60,1)|0);
 $5 = $1;
 $6 = (_hio_read32b($5)|0);
 $a = $6;
 $7 = $1;
 (_hio_seek($7,60,1)|0);
 $8 = $1;
 $9 = (_hio_read32b($8)|0);
 $b = $9;
 $10 = $a;
 $11 = ($10|0)!=(1397706311);
 $12 = $b;
 $13 = ($12|0)!=(1397706311);
 $or$cond = $11 & $13;
 if ($or$cond) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $14 = $1;
  $15 = $2;
  _read_title($14,$15,0);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _sfx_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_sfx_13_20_load($4,$5,15,$6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = (_sfx_13_20_load($9,$10,31,$11)|0);
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _sfx_13_20_load($m,$f,$nins,$start) {
 $m = $m|0;
 $f = $f|0;
 $nins = $nins|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0;
 var $event = 0, $i = 0, $ins = 0, $ins_size = 0, $j = 0, $mod = 0, $sfx = 0, $sfx2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sfx = sp + 136|0;
 $sfx2 = sp + 1128|0;
 $ev = sp + 1124|0;
 $ins_size = sp + 12|0;
 $ins = sp + 192|0;
 $1 = $m;
 $2 = $f;
 $3 = $nins;
 $4 = $start;
 $5 = $1;
 $mod = $5;
 $6 = $2;
 $7 = $4;
 (_hio_seek($6,$7,0)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  $11 = $2;
  $12 = (_hio_read32b($11)|0);
  if (!($10)) {
   break;
  }
  $13 = $i;
  $14 = (($ins_size) + ($13<<2)|0);
  HEAP32[$14>>2] = $12;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 HEAP32[$sfx>>2] = $12;
 $17 = $2;
 $18 = (_hio_read16b($17)|0);
 $19 = ((($sfx)) + 4|0);
 HEAP16[$19>>1] = $18;
 $20 = ((($sfx)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22|0)<(178);
 if ($23) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $24 = ((($sfx)) + 6|0);
 $25 = $2;
 (_hio_read($24,14,1,$25)|0);
 $26 = HEAP32[$sfx>>2]|0;
 $27 = ($26|0)!=(1397706311);
 if ($27) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $28 = $3;
 $29 = $mod;
 $30 = ((($29)) + 140|0);
 HEAP32[$30>>2] = $28;
 $31 = $mod;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $mod;
 $35 = ((($34)) + 144|0);
 HEAP32[$35>>2] = $33;
 $36 = ((($sfx)) + 4|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (1776930 / ($38|0))&-1;
 $40 = $mod;
 $41 = ((($40)) + 152|0);
 HEAP32[$41>>2] = $39;
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $mod;
  $44 = ((($43)) + 140|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $i;
  $48 = (($ins) + (($47*30)|0)|0);
  $49 = $2;
  (_hio_read($48,22,1,$49)|0);
  $50 = $2;
  $51 = (_hio_read16b($50)|0);
  $52 = $i;
  $53 = (($ins) + (($52*30)|0)|0);
  $54 = ((($53)) + 22|0);
  HEAP16[$54>>1] = $51;
  $55 = $2;
  $56 = (_hio_read8($55)|0);
  $57 = $i;
  $58 = (($ins) + (($57*30)|0)|0);
  $59 = ((($58)) + 24|0);
  HEAP8[$59>>0] = $56;
  $60 = $2;
  $61 = (_hio_read8($60)|0);
  $62 = $i;
  $63 = (($ins) + (($62*30)|0)|0);
  $64 = ((($63)) + 25|0);
  HEAP8[$64>>0] = $61;
  $65 = $2;
  $66 = (_hio_read16b($65)|0);
  $67 = $i;
  $68 = (($ins) + (($67*30)|0)|0);
  $69 = ((($68)) + 26|0);
  HEAP16[$69>>1] = $66;
  $70 = $2;
  $71 = (_hio_read16b($70)|0);
  $72 = $i;
  $73 = (($ins) + (($72*30)|0)|0);
  $74 = ((($73)) + 28|0);
  HEAP16[$74>>1] = $71;
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 $77 = $2;
 $78 = (_hio_read8($77)|0);
 HEAP8[$sfx2>>0] = $78;
 $79 = $2;
 $80 = (_hio_read8($79)|0);
 $81 = ((($sfx2)) + 1|0);
 HEAP8[$81>>0] = $80;
 $82 = ((($sfx2)) + 2|0);
 $83 = $2;
 (_hio_read($82,128,1,$83)|0);
 $84 = HEAP8[$sfx2>>0]|0;
 $85 = $84&255;
 $86 = $mod;
 $87 = ((($86)) + 156|0);
 HEAP32[$87>>2] = $85;
 $88 = $mod;
 $89 = ((($88)) + 156|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)>(127);
 if ($91) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $92 = $mod;
 $93 = ((($92)) + 952|0);
 $94 = ((($sfx2)) + 2|0);
 $95 = $mod;
 $96 = ((($95)) + 156|0);
 $97 = HEAP32[$96>>2]|0;
 _memcpy(($93|0),($94|0),($97|0))|0;
 $i = 0;
 $98 = $mod;
 $99 = ((($98)) + 128|0);
 HEAP32[$99>>2] = 0;
 while(1) {
  $100 = $i;
  $101 = $mod;
  $102 = ((($101)) + 156|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($100|0)<($103|0);
  if (!($104)) {
   break;
  }
  $105 = $i;
  $106 = $mod;
  $107 = ((($106)) + 952|0);
  $108 = (($107) + ($105)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $mod;
  $112 = ((($111)) + 128|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($110|0)>($113|0);
  if ($114) {
   $115 = $i;
   $116 = $mod;
   $117 = ((($116)) + 952|0);
   $118 = (($117) + ($115)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = $mod;
   $122 = ((($121)) + 128|0);
   HEAP32[$122>>2] = $120;
  }
  $123 = $i;
  $124 = (($123) + 1)|0;
  $i = $124;
 }
 $125 = $mod;
 $126 = ((($125)) + 128|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + 1)|0;
 HEAP32[$126>>2] = $128;
 $129 = $mod;
 $130 = ((($129)) + 136|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = $mod;
 $133 = ((($132)) + 128|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = Math_imul($131, $134)|0;
 $136 = $mod;
 $137 = ((($136)) + 132|0);
 HEAP32[$137>>2] = $135;
 $138 = $mod;
 $139 = ((($138)) + 140|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)==(15);
 $142 = $1;
 if ($141) {
  _set_type($142,4104,$vararg_buffer);
 } else {
  _set_type($142,4120,$vararg_buffer1);
 }
 $143 = $mod;
 $144 = (_instrument_init($143)|0);
 $145 = ($144|0)<(0);
 if ($145) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $i = 0;
 while(1) {
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 140|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($146|0)<($149|0);
  $151 = $mod;
  if (!($150)) {
   break;
  }
  $152 = $i;
  $153 = (_subinstrument_alloc($151,$152,1)|0);
  $154 = ($153|0)<(0);
  if ($154) {
   label = 26;
   break;
  }
  $155 = $i;
  $156 = (($ins_size) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $i;
  $159 = $mod;
  $160 = ((($159)) + 180|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + (($158*52)|0)|0);
  $163 = ((($162)) + 32|0);
  HEAP32[$163>>2] = $157;
  $164 = $i;
  $165 = (($ins) + (($164*30)|0)|0);
  $166 = ((($165)) + 26|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $167&65535;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 36|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = $mod;
  $177 = ((($176)) + 180|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($178) + (($175*52)|0)|0);
  $180 = ((($179)) + 36|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $i;
  $183 = (($ins) + (($182*30)|0)|0);
  $184 = ((($183)) + 28|0);
  $185 = HEAP16[$184>>1]|0;
  $186 = $185&65535;
  $187 = $186<<1;
  $188 = (($181) + ($187))|0;
  $189 = $i;
  $190 = $mod;
  $191 = ((($190)) + 180|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($192) + (($189*52)|0)|0);
  $194 = ((($193)) + 40|0);
  HEAP32[$194>>2] = $188;
  $195 = $i;
  $196 = (($ins) + (($195*30)|0)|0);
  $197 = ((($196)) + 28|0);
  $198 = HEAP16[$197>>1]|0;
  $199 = $198&65535;
  $200 = ($199|0)>(1);
  $201 = $200 ? 2 : 0;
  $202 = $i;
  $203 = $mod;
  $204 = ((($203)) + 180|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($205) + (($202*52)|0)|0);
  $207 = ((($206)) + 44|0);
  HEAP32[$207>>2] = $201;
  $208 = $i;
  $209 = $mod;
  $210 = ((($209)) + 176|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + (($208*764)|0)|0);
  $213 = ((($212)) + 36|0);
  HEAP32[$213>>2] = 1;
  $214 = $i;
  $215 = (($ins) + (($214*30)|0)|0);
  $216 = ((($215)) + 25|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $i;
  $220 = $mod;
  $221 = ((($220)) + 176|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + (($219*764)|0)|0);
  $224 = ((($223)) + 756|0);
  $225 = HEAP32[$224>>2]|0;
  HEAP32[$225>>2] = $218;
  $226 = $i;
  $227 = (($ins) + (($226*30)|0)|0);
  $228 = ((($227)) + 24|0);
  $229 = HEAP8[$228>>0]|0;
  $230 = $229&255;
  $231 = $230 << 4;
  $232 = $231&255;
  $233 = $232 << 24 >> 24;
  $234 = $i;
  $235 = $mod;
  $236 = ((($235)) + 176|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + (($234*764)|0)|0);
  $239 = ((($238)) + 756|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 16|0);
  HEAP32[$241>>2] = $233;
  $242 = $i;
  $243 = $mod;
  $244 = ((($243)) + 176|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($245) + (($242*764)|0)|0);
  $247 = ((($246)) + 756|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = ((($248)) + 8|0);
  HEAP32[$249>>2] = 128;
  $250 = $i;
  $251 = $i;
  $252 = $mod;
  $253 = ((($252)) + 176|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($254) + (($251*764)|0)|0);
  $256 = ((($255)) + 756|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ((($257)) + 40|0);
  HEAP32[$258>>2] = $250;
  $259 = $mod;
  $260 = $i;
  $261 = $i;
  $262 = (($ins) + (($261*30)|0)|0);
  (_instrument_name($259,$260,$262,22)|0);
  $263 = $i;
  $264 = (($263) + 1)|0;
  $i = $264;
 }
 if ((label|0) == 26) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $265 = (_pattern_init($151)|0);
 $266 = ($265|0)<(0);
 if ($266) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $i = 0;
 while(1) {
  $267 = $i;
  $268 = $mod;
  $269 = ((($268)) + 128|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($267|0)<($270|0);
  if (!($271)) {
   break;
  }
  $272 = $mod;
  $273 = $i;
  $274 = (_pattern_tracks_alloc($272,$273,64)|0);
  $275 = ($274|0)<(0);
  if ($275) {
   label = 33;
   break;
  }
  $j = 0;
  while(1) {
   $276 = $j;
   $277 = $mod;
   $278 = ((($277)) + 136|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $279<<6;
   $281 = ($276|0)<($280|0);
   if (!($281)) {
    break;
   }
   $282 = $j;
   $283 = $mod;
   $284 = ((($283)) + 136|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (($282|0) / ($285|0))&-1;
   $287 = $j;
   $288 = $mod;
   $289 = ((($288)) + 136|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (($287|0) % ($290|0))&-1;
   $292 = $i;
   $293 = $1;
   $294 = ((($293)) + 168|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (($295) + ($292<<2)|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = ((($297)) + 4|0);
   $299 = (($298) + ($291<<2)|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $1;
   $302 = ((($301)) + 172|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($300<<2)|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($305)) + 4|0);
   $307 = (($306) + ($286<<3)|0);
   $event = $307;
   $308 = $2;
   (_hio_read($ev,1,4,$308)|0);
   $309 = HEAP8[$ev>>0]|0;
   $310 = $309&255;
   $311 = $310 & 15;
   $312 = $311 << 8;
   $313 = ((($ev)) + 1|0);
   $314 = HEAP8[$313>>0]|0;
   $315 = $314&255;
   $316 = $312 | $315;
   $317 = (_period_to_note($316)|0);
   $318 = $317&255;
   $319 = $event;
   HEAP8[$319>>0] = $318;
   $320 = HEAP8[$ev>>0]|0;
   $321 = $320&255;
   $322 = $321 & 240;
   $323 = $322 >> 4;
   $324 = $323 << 4;
   $325 = ((($ev)) + 2|0);
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = $327 & 240;
   $329 = $328 >> 4;
   $330 = $324 | $329;
   $331 = $330&255;
   $332 = $event;
   $333 = ((($332)) + 1|0);
   HEAP8[$333>>0] = $331;
   $334 = ((($ev)) + 3|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $event;
   $337 = ((($336)) + 4|0);
   HEAP8[$337>>0] = $335;
   $338 = ((($ev)) + 2|0);
   $339 = HEAP8[$338>>0]|0;
   $340 = $339&255;
   $341 = $340 & 15;
   do {
    if ((($341|0) == 5)) {
     $371 = $event;
     $372 = ((($371)) + 3|0);
     HEAP8[$372>>0] = -95;
    } else if ((($341|0) == 1)) {
     $342 = $event;
     $343 = ((($342)) + 3|0);
     HEAP8[$343>>0] = 0;
    } else if ((($341|0) == 6)) {
     $373 = $event;
     $374 = ((($373)) + 3|0);
     HEAP8[$374>>0] = 12;
     $375 = ((($ev)) + 3|0);
     $376 = HEAP8[$375>>0]|0;
     $377 = $376&255;
     $378 = (64 - ($377))|0;
     $379 = $378&255;
     $380 = $event;
     $381 = ((($380)) + 4|0);
     HEAP8[$381>>0] = $379;
    } else if ((($341|0) == 2)) {
     $344 = $event;
     $345 = ((($344)) + 4|0);
     $346 = HEAP8[$345>>0]|0;
     $347 = $346&255;
     $348 = $347 >> 4;
     $349 = ($348|0)!=(0);
     $350 = $event;
     if ($349) {
      $351 = ((($350)) + 3|0);
      HEAP8[$351>>0] = 2;
      $352 = $event;
      $353 = ((($352)) + 4|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = $354&255;
      $356 = $355 >> 4;
      $357 = $356&255;
      HEAP8[$353>>0] = $357;
      break;
     }
     $358 = ((($350)) + 4|0);
     $359 = HEAP8[$358>>0]|0;
     $360 = $359&255;
     $361 = $360 & 15;
     $362 = ($361|0)!=(0);
     if ($362) {
      $363 = $event;
      $364 = ((($363)) + 3|0);
      HEAP8[$364>>0] = 1;
      $365 = $event;
      $366 = ((($365)) + 4|0);
      $367 = HEAP8[$366>>0]|0;
      $368 = $367&255;
      $369 = $368 & 15;
      $370 = $369&255;
      HEAP8[$366>>0] = $370;
     }
    } else {
     $382 = $event;
     $383 = ((($382)) + 4|0);
     HEAP8[$383>>0] = 0;
     $384 = $event;
     $385 = ((($384)) + 3|0);
     HEAP8[$385>>0] = 0;
    }
   } while(0);
   $386 = $j;
   $387 = (($386) + 1)|0;
   $j = $387;
  }
  $388 = $i;
  $389 = (($388) + 1)|0;
  $i = $389;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 $390 = $1;
 $391 = ((($390)) + 1280|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = $392 | 8192;
 HEAP32[$391>>2] = $393;
 $i = 0;
 while(1) {
  $394 = $i;
  $395 = $mod;
  $396 = ((($395)) + 140|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = ($394|0)<($397|0);
  if (!($398)) {
   label = 53;
   break;
  }
  $399 = $i;
  $400 = $mod;
  $401 = ((($400)) + 180|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = (($402) + (($399*52)|0)|0);
  $404 = ((($403)) + 32|0);
  $405 = HEAP32[$404>>2]|0;
  $406 = ($405|0)<=(2);
  if (!($406)) {
   $407 = $1;
   $408 = $2;
   $409 = $i;
   $410 = $mod;
   $411 = ((($410)) + 180|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = (($412) + (($409*52)|0)|0);
   $414 = (_load_sample($407,$408,0,$413,0)|0);
   $415 = ($414|0)<(0);
   if ($415) {
    label = 51;
    break;
   }
  }
  $416 = $i;
  $417 = (($416) + 1)|0;
  $i = $417;
 }
 if ((label|0) == 51) {
  $0 = -1;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 else if ((label|0) == 53) {
  $0 = 0;
  $418 = $0;
  STACKTOP = sp;return ($418|0);
 }
 return (0)|0;
}
function _flt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1080)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,4,$7)|0);
 $9 = ($8>>>0)<(4);
 if ($9) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $10 = (_memcmp($buf,4448,3)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = (_memcmp($buf,4456,3)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $0 = -1;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $14 = ((($buf)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)!=(52);
 if ($17) {
  $18 = ((($buf)) + 3|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(56);
  if ($21) {
   $22 = ((($buf)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(77);
   if ($25) {
    $0 = -1;
    $31 = $0;
    STACKTOP = sp;return ($31|0);
   }
  }
 }
 $26 = $1;
 $27 = $3;
 $28 = (($27) + 0)|0;
 (_hio_seek($26,$28,0)|0);
 $29 = $1;
 $30 = $2;
 _read_title($29,$30,20);
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _flt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $am_synth = 0;
 var $buf = 0, $event = 0, $filename = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $mod_event = 0, $nt = 0, $sub = 0, $tracker = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr9 = 0, $xxi = 0, $xxs = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 96|0;
 $mod_event = sp + 2224|0;
 $filename = sp + 1200|0;
 $buf = sp + 1184|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $am_synth = 0;
 $7 = $1;
 $8 = ((($7)) + 1208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 1212|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 (_snprintf($filename,1024,4168,$vararg_buffer)|0);
 $13 = (_fopen(($filename|0),(8192|0))|0);
 $nt = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 1208|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 1212|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $17;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $20;
  (_snprintf($filename,1024,4176,$vararg_buffer2)|0);
  $21 = (_fopen(($filename|0),(8192|0))|0);
  $nt = $21;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $23 = $1;
   $24 = ((($23)) + 1208|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $1;
   $27 = ((($26)) + 1212|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $25;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $28;
   (_snprintf($filename,1024,4184,$vararg_buffer6)|0);
   $29 = (_fopen(($filename|0),(8192|0))|0);
   $nt = $29;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 1208|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    $35 = ((($34)) + 1212|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $33;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $36;
    (_snprintf($filename,1024,4192,$vararg_buffer10)|0);
    $37 = (_fopen(($filename|0),(8192|0))|0);
    $nt = $37;
   }
  }
 }
 $tracker = 4152;
 $38 = $nt;
 $39 = ($38|0)!=(0|0);
 do {
  if ($39) {
   $40 = $nt;
   (_fread(($buf|0),1,16,($40|0))|0);
   $41 = (_memcmp($buf,4200,16)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $am_synth = 1;
    $tracker = 4224;
    break;
   }
   $43 = (_memcmp($buf,4240,16)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $am_synth = 1;
    $tracker = 4264;
    break;
   }
   $45 = (_memcmp($buf,4280,16)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $am_synth = 1;
    $tracker = 4304;
   }
  }
 } while(0);
 $47 = $2;
 (_hio_read($mh,20,1,$47)|0);
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = ($48|0)<(31);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = ((($mh)) + 20|0);
  $52 = (($51) + (($50*30)|0)|0);
  $53 = $2;
  (_hio_read($52,22,1,$53)|0);
  $54 = $2;
  $55 = (_hio_read16b($54)|0);
  $56 = $i;
  $57 = ((($mh)) + 20|0);
  $58 = (($57) + (($56*30)|0)|0);
  $59 = ((($58)) + 22|0);
  HEAP16[$59>>1] = $55;
  $60 = $2;
  $61 = (_hio_read8($60)|0);
  $62 = $i;
  $63 = ((($mh)) + 20|0);
  $64 = (($63) + (($62*30)|0)|0);
  $65 = ((($64)) + 24|0);
  HEAP8[$65>>0] = $61;
  $66 = $2;
  $67 = (_hio_read8($66)|0);
  $68 = $i;
  $69 = ((($mh)) + 20|0);
  $70 = (($69) + (($68*30)|0)|0);
  $71 = ((($70)) + 25|0);
  HEAP8[$71>>0] = $67;
  $72 = $2;
  $73 = (_hio_read16b($72)|0);
  $74 = $i;
  $75 = ((($mh)) + 20|0);
  $76 = (($75) + (($74*30)|0)|0);
  $77 = ((($76)) + 26|0);
  HEAP16[$77>>1] = $73;
  $78 = $2;
  $79 = (_hio_read16b($78)|0);
  $80 = $i;
  $81 = ((($mh)) + 20|0);
  $82 = (($81) + (($80*30)|0)|0);
  $83 = ((($82)) + 28|0);
  HEAP16[$83>>1] = $79;
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $86 = $2;
 $87 = (_hio_read8($86)|0);
 $88 = ((($mh)) + 950|0);
 HEAP8[$88>>0] = $87;
 $89 = $2;
 $90 = (_hio_read8($89)|0);
 $91 = ((($mh)) + 951|0);
 HEAP8[$91>>0] = $90;
 $92 = ((($mh)) + 952|0);
 $93 = $2;
 (_hio_read($92,128,1,$93)|0);
 $94 = ((($mh)) + 1080|0);
 $95 = $2;
 (_hio_read($94,4,1,$95)|0);
 $96 = ((($mh)) + 1080|0);
 $97 = ((($96)) + 3|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = ($99|0)==(52);
 $101 = $mod;
 $102 = ((($101)) + 136|0);
 if ($100) {
  HEAP32[$102>>2] = 4;
 } else {
  HEAP32[$102>>2] = 8;
 }
 $103 = $mod;
 $104 = ((($103)) + 140|0);
 HEAP32[$104>>2] = 31;
 $105 = $mod;
 $106 = ((($105)) + 140|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $mod;
 $109 = ((($108)) + 144|0);
 HEAP32[$109>>2] = $107;
 $110 = ((($mh)) + 950|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = $mod;
 $114 = ((($113)) + 156|0);
 HEAP32[$114>>2] = $112;
 $115 = ((($mh)) + 951|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $mod;
 $119 = ((($118)) + 160|0);
 HEAP32[$119>>2] = $117;
 $120 = $mod;
 $121 = ((($120)) + 952|0);
 $122 = ((($mh)) + 952|0);
 dest=$121; src=$122; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $123 = $i;
  $124 = ($123|0)<(128);
  $125 = $mod;
  if (!($124)) {
   break;
  }
  $126 = ((($125)) + 136|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)>(4);
  if ($128) {
   $129 = $i;
   $130 = $mod;
   $131 = ((($130)) + 952|0);
   $132 = (($131) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $134 >> 1;
   $136 = $135&255;
   HEAP8[$132>>0] = $136;
  }
  $137 = $i;
  $138 = $mod;
  $139 = ((($138)) + 952|0);
  $140 = (($139) + ($137)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = $mod;
  $144 = ((($143)) + 128|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ($142|0)>($145|0);
  if ($146) {
   $147 = $i;
   $148 = $mod;
   $149 = ((($148)) + 952|0);
   $150 = (($149) + ($147)|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = $mod;
   $154 = ((($153)) + 128|0);
   HEAP32[$154>>2] = $152;
  }
  $155 = $i;
  $156 = (($155) + 1)|0;
  $i = $156;
 }
 $157 = ((($125)) + 128|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + 1)|0;
 HEAP32[$157>>2] = $159;
 $160 = $mod;
 $161 = ((($160)) + 136|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $mod;
 $164 = ((($163)) + 128|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = Math_imul($162, $165)|0;
 $167 = $mod;
 $168 = ((($167)) + 132|0);
 HEAP32[$168>>2] = $166;
 $169 = $mod;
 (_strncpy(($169|0),($mh|0),20)|0);
 $170 = $1;
 $171 = $tracker;
 $172 = ((($mh)) + 1080|0);
 HEAP32[$vararg_buffer14>>2] = $171;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $172;
 _set_type($170,4328,$vararg_buffer14);
 $173 = $mod;
 $174 = (_instrument_init($173)|0);
 $175 = ($174|0)<(0);
 if ($175) {
  $0 = -1;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 $i = 0;
 while(1) {
  $176 = $i;
  $177 = $mod;
  $178 = ((($177)) + 140|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($176|0)<($179|0);
  if (!($180)) {
   label = 33;
   break;
  }
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 176|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*764)|0)|0);
  $xxi = $185;
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 180|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($186*52)|0)|0);
  $xxs = $190;
  $191 = $mod;
  $192 = $i;
  $193 = (_subinstrument_alloc($191,$192,1)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   break;
  }
  $195 = $xxi;
  $196 = ((($195)) + 756|0);
  $197 = HEAP32[$196>>2]|0;
  $sub = $197;
  $198 = $i;
  $199 = ((($mh)) + 20|0);
  $200 = (($199) + (($198*30)|0)|0);
  $201 = ((($200)) + 22|0);
  $202 = HEAP16[$201>>1]|0;
  $203 = $202&65535;
  $204 = $203<<1;
  $205 = $xxs;
  $206 = ((($205)) + 32|0);
  HEAP32[$206>>2] = $204;
  $207 = $i;
  $208 = ((($mh)) + 20|0);
  $209 = (($208) + (($207*30)|0)|0);
  $210 = ((($209)) + 26|0);
  $211 = HEAP16[$210>>1]|0;
  $212 = $211&65535;
  $213 = $212<<1;
  $214 = $xxs;
  $215 = ((($214)) + 36|0);
  HEAP32[$215>>2] = $213;
  $216 = $xxs;
  $217 = ((($216)) + 36|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $i;
  $220 = ((($mh)) + 20|0);
  $221 = (($220) + (($219*30)|0)|0);
  $222 = ((($221)) + 28|0);
  $223 = HEAP16[$222>>1]|0;
  $224 = $223&65535;
  $225 = $224<<1;
  $226 = (($218) + ($225))|0;
  $227 = $xxs;
  $228 = ((($227)) + 40|0);
  HEAP32[$228>>2] = $226;
  $229 = $i;
  $230 = ((($mh)) + 20|0);
  $231 = (($230) + (($229*30)|0)|0);
  $232 = ((($231)) + 28|0);
  $233 = HEAP16[$232>>1]|0;
  $234 = $233&65535;
  $235 = ($234|0)>(1);
  $236 = $235 ? 2 : 0;
  $237 = $xxs;
  $238 = ((($237)) + 44|0);
  HEAP32[$238>>2] = $236;
  $239 = $i;
  $240 = ((($mh)) + 20|0);
  $241 = (($240) + (($239*30)|0)|0);
  $242 = ((($241)) + 24|0);
  $243 = HEAP8[$242>>0]|0;
  $244 = $243 << 24 >> 24;
  $245 = $244 << 4;
  $246 = $245&255;
  $247 = $246 << 24 >> 24;
  $248 = $sub;
  $249 = ((($248)) + 16|0);
  HEAP32[$249>>2] = $247;
  $250 = $i;
  $251 = ((($mh)) + 20|0);
  $252 = (($251) + (($250*30)|0)|0);
  $253 = ((($252)) + 25|0);
  $254 = HEAP8[$253>>0]|0;
  $255 = $254 << 24 >> 24;
  $256 = $sub;
  HEAP32[$256>>2] = $255;
  $257 = $sub;
  $258 = ((($257)) + 8|0);
  HEAP32[$258>>2] = 128;
  $259 = $i;
  $260 = $sub;
  $261 = ((($260)) + 40|0);
  HEAP32[$261>>2] = $259;
  $262 = $xxi;
  $263 = ((($262)) + 40|0);
  HEAP32[$263>>2] = 4095;
  $264 = $xxs;
  $265 = ((($264)) + 32|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($266|0)>(0);
  if ($267) {
   $268 = $xxi;
   $269 = ((($268)) + 36|0);
   HEAP32[$269>>2] = 1;
  }
  $270 = $mod;
  $271 = $i;
  $272 = $i;
  $273 = ((($mh)) + 20|0);
  $274 = (($273) + (($272*30)|0)|0);
  (_instrument_name($270,$271,$274,22)|0);
  $275 = $i;
  $276 = (($275) + 1)|0;
  $i = $276;
 }
 L45: do {
  if ((label|0) == 33) {
   $277 = $mod;
   $278 = (_pattern_init($277)|0);
   $279 = ($278|0)<(0);
   if (!($279)) {
    $i = 0;
    while(1) {
     $280 = $i;
     $281 = $mod;
     $282 = ((($281)) + 128|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($280|0)<($283|0);
     if (!($284)) {
      break;
     }
     $285 = $mod;
     $286 = $i;
     $287 = (_pattern_tracks_alloc($285,$286,64)|0);
     $288 = ($287|0)<(0);
     if ($288) {
      break L45;
     }
     $j = 0;
     while(1) {
      $289 = $j;
      $290 = ($289|0)<(256);
      if (!($290)) {
       break;
      }
      $291 = $j;
      $292 = (($291|0) / 4)&-1;
      $293 = $j;
      $294 = (($293|0) % 4)&-1;
      $295 = $i;
      $296 = $1;
      $297 = ((($296)) + 168|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = (($298) + ($295<<2)|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = ((($300)) + 4|0);
      $302 = (($301) + ($294<<2)|0);
      $303 = HEAP32[$302>>2]|0;
      $304 = $1;
      $305 = ((($304)) + 172|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (($306) + ($303<<2)|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = ((($308)) + 4|0);
      $310 = (($309) + ($292<<3)|0);
      $event = $310;
      $311 = $2;
      (_hio_read($mod_event,1,4,$311)|0);
      $312 = $event;
      _decode_noisetracker_event($312,$mod_event);
      $313 = $j;
      $314 = (($313) + 1)|0;
      $j = $314;
     }
     $315 = $mod;
     $316 = ((($315)) + 136|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = ($317|0)>(4);
     L56: do {
      if ($318) {
       $j = 0;
       while(1) {
        $319 = $j;
        $320 = ($319|0)<(256);
        if (!($320)) {
         break L56;
        }
        $321 = $j;
        $322 = (($321|0) / 4)&-1;
        $323 = $j;
        $324 = (($323|0) % 4)&-1;
        $325 = (($324) + 4)|0;
        $326 = $i;
        $327 = $1;
        $328 = ((($327)) + 168|0);
        $329 = HEAP32[$328>>2]|0;
        $330 = (($329) + ($326<<2)|0);
        $331 = HEAP32[$330>>2]|0;
        $332 = ((($331)) + 4|0);
        $333 = (($332) + ($325<<2)|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = $1;
        $336 = ((($335)) + 172|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = (($337) + ($334<<2)|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = ((($339)) + 4|0);
        $341 = (($340) + ($322<<3)|0);
        $event = $341;
        $342 = $2;
        (_hio_read($mod_event,1,4,$342)|0);
        $343 = $event;
        _decode_noisetracker_event($343,$mod_event);
        $344 = $event;
        $345 = ((($344)) + 3|0);
        $346 = HEAP8[$345>>0]|0;
        $347 = $346&255;
        $348 = ($347|0)==(14);
        if ($348) {
         $349 = $event;
         $350 = ((($349)) + 4|0);
         HEAP8[$350>>0] = 0;
         $351 = $event;
         $352 = ((($351)) + 3|0);
         HEAP8[$352>>0] = 0;
        }
        $353 = $j;
        $354 = (($353) + 1)|0;
        $j = $354;
       }
      }
     } while(0);
     $355 = $i;
     $356 = (($355) + 1)|0;
     $i = $356;
    }
    $i = 0;
    while(1) {
     $357 = $i;
     $358 = $mod;
     $359 = ((($358)) + 144|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = ($357|0)<($360|0);
     if (!($361)) {
      break;
     }
     $362 = $i;
     $363 = $mod;
     $364 = ((($363)) + 180|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($365) + (($362*52)|0)|0);
     $367 = ((($366)) + 32|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ($368|0)==(0);
     if ($369) {
      $370 = $am_synth;
      $371 = ($370|0)!=(0);
      if ($371) {
       $372 = $nt;
       $373 = $i;
       $374 = (_is_am_instrument($372,$373)|0);
       $375 = ($374|0)!=(0);
       if ($375) {
        $376 = $1;
        $377 = $nt;
        $378 = $i;
        $379 = (_read_am_instrument($376,$377,$378)|0);
        $380 = ($379|0)<(0);
        if ($380) {
         break L45;
        }
       }
      }
     } else {
      $381 = $1;
      $382 = $2;
      $383 = $i;
      $384 = $mod;
      $385 = ((($384)) + 180|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = (($386) + (($383*52)|0)|0);
      $388 = (_load_sample($381,$382,512,$387,0)|0);
      $389 = ($388|0)<(0);
      if ($389) {
       break L45;
      }
     }
     $390 = $i;
     $391 = (($390) + 1)|0;
     $i = $391;
    }
    $392 = $nt;
    $393 = ($392|0)!=(0|0);
    if ($393) {
     $394 = $nt;
     (_fclose(($394|0))|0);
    }
    $0 = 0;
    $398 = $0;
    STACKTOP = sp;return ($398|0);
   }
  }
 } while(0);
 $395 = $nt;
 $396 = ($395|0)!=(0|0);
 if ($396) {
  $397 = $nt;
  (_fclose(($397|0))|0);
 }
 $0 = -1;
 $398 = $0;
 STACKTOP = sp;return ($398|0);
}
function _is_am_instrument($nt,$i) {
 $nt = $nt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf = 0, $wf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 14|0;
 $1 = $nt;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 $5 = ($4*120)|0;
 $6 = (144 + ($5))|0;
 (_fseek(($3|0),($6|0),0)|0);
 $7 = $1;
 $8 = (_fread(($buf|0),1,2,($7|0))|0);
 $9 = ($8>>>0)<(2);
 do {
  if ($9) {
   $0 = 0;
  } else {
   $10 = (_memcmp($buf,4440,2)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $0 = 0;
    break;
   }
   $12 = $1;
   (_fseek(($12|0),24,1)|0);
   $13 = $1;
   $14 = (_read16b($13)|0);
   $wf = $14;
   $15 = $wf;
   $16 = $15 << 16 >> 16;
   $17 = ($16|0)<(0);
   if (!($17)) {
    $18 = $wf;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)>(3);
    if (!($20)) {
     $0 = 1;
     break;
    }
   }
   $0 = 0;
  }
 } while(0);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _read_am_instrument($m,$nt,$i) {
 $m = $m|0;
 $nt = $nt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $am = 0;
 var $am_noise = 0, $b = 0, $freq_env = 0, $j = 0, $mod = 0, $vol_env = 0, $wave = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $am = sp + 52|0;
 $am_noise = sp + 80|0;
 $1 = $m;
 $2 = $nt;
 $3 = $i;
 $4 = $1;
 $mod = $4;
 $5 = $3;
 $6 = $mod;
 $7 = ((($6)) + 176|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*764)|0)|0);
 $xxi = $9;
 $10 = $3;
 $11 = $mod;
 $12 = ((($11)) + 180|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*52)|0)|0);
 $xxs = $14;
 $15 = $xxi;
 $16 = ((($15)) + 44|0);
 $vol_env = $16;
 $17 = $xxi;
 $18 = ((($17)) + 356|0);
 $freq_env = $18;
 $19 = $2;
 $20 = $3;
 $21 = ($20*120)|0;
 $22 = (144 + ($21))|0;
 $23 = (($22) + 2)|0;
 $24 = (($23) + 4)|0;
 (_fseek(($19|0),($24|0),0)|0);
 $25 = $2;
 $26 = (_read16b($25)|0);
 HEAP16[$am>>1] = $26;
 $27 = $2;
 $28 = (_read16b($27)|0);
 $29 = ((($am)) + 2|0);
 HEAP16[$29>>1] = $28;
 $30 = $2;
 $31 = (_read16b($30)|0);
 $32 = ((($am)) + 4|0);
 HEAP16[$32>>1] = $31;
 $33 = $2;
 $34 = (_read16b($33)|0);
 $35 = ((($am)) + 6|0);
 HEAP16[$35>>1] = $34;
 $36 = $2;
 $37 = (_read16b($36)|0);
 $38 = ((($am)) + 8|0);
 HEAP16[$38>>1] = $37;
 $39 = $2;
 $40 = (_read16b($39)|0);
 $41 = ((($am)) + 10|0);
 HEAP16[$41>>1] = $40;
 $42 = $2;
 $43 = (_read16b($42)|0);
 $44 = ((($am)) + 12|0);
 HEAP16[$44>>1] = $43;
 $45 = $2;
 $46 = (_read16b($45)|0);
 $47 = ((($am)) + 14|0);
 HEAP16[$47>>1] = $46;
 $48 = $2;
 (_read16b($48)|0);
 $49 = $2;
 $50 = (_read16b($49)|0);
 $51 = ((($am)) + 16|0);
 HEAP16[$51>>1] = $50;
 $52 = $2;
 $53 = (_read16b($52)|0);
 $54 = ((($am)) + 18|0);
 HEAP16[$54>>1] = $53;
 $55 = $2;
 $56 = (_read16b($55)|0);
 $57 = $56 << 16 >> 16;
 $58 = (0 - ($57))|0;
 $59 = $58&65535;
 $60 = ((($am)) + 20|0);
 HEAP16[$60>>1] = $59;
 $61 = $2;
 $62 = (_read16b($61)|0);
 $63 = ((($am)) + 22|0);
 HEAP16[$63>>1] = $62;
 $64 = $2;
 $65 = (_read16b($64)|0);
 $66 = ((($am)) + 24|0);
 HEAP16[$66>>1] = $65;
 $67 = $2;
 $68 = (_read16b($67)|0);
 $69 = ((($am)) + 26|0);
 HEAP16[$69>>1] = $68;
 $70 = ((($am)) + 18|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = $71 << 16 >> 16;
 $73 = ($72|0)<(3);
 $74 = $xxs;
 $75 = ((($74)) + 32|0);
 if ($73) {
  HEAP32[$75>>2] = 32;
  $76 = $xxs;
  $77 = ((($76)) + 36|0);
  HEAP32[$77>>2] = 0;
  $78 = $xxs;
  $79 = ((($78)) + 40|0);
  HEAP32[$79>>2] = 32;
  $80 = ((($am)) + 18|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = (4344 + ($82<<5)|0);
  $wave = $83;
 } else {
  HEAP32[$75>>2] = 1024;
  $84 = $xxs;
  $85 = ((($84)) + 36|0);
  HEAP32[$85>>2] = 0;
  $86 = $xxs;
  $87 = ((($86)) + 40|0);
  HEAP32[$87>>2] = 1024;
  $j = 0;
  while(1) {
   $88 = $j;
   $89 = ($88|0)<(1024);
   if (!($89)) {
    break;
   }
   $90 = (_rand()|0);
   $91 = (($90|0) % 256)&-1;
   $92 = $91&255;
   $93 = $j;
   $94 = (($am_noise) + ($93)|0);
   HEAP8[$94>>0] = $92;
   $95 = $j;
   $96 = (($95) + 1)|0;
   $j = $96;
  }
  $wave = $am_noise;
 }
 $97 = $xxs;
 $98 = ((($97)) + 44|0);
 HEAP32[$98>>2] = 2;
 $99 = $xxi;
 $100 = ((($99)) + 756|0);
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$101>>2] = 64;
 $102 = $xxi;
 $103 = ((($102)) + 36|0);
 HEAP32[$103>>2] = 1;
 $104 = ((($am)) + 26|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = $105 << 16 >> 16;
 $107 = Math_imul(-12, $106)|0;
 $108 = $xxi;
 $109 = ((($108)) + 756|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($110)) + 12|0);
 HEAP32[$111>>2] = $107;
 $112 = $xxi;
 $113 = ((($112)) + 756|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($114)) + 20|0);
 HEAP32[$115>>2] = 0;
 $116 = ((($am)) + 22|0);
 $117 = HEAP16[$116>>1]|0;
 $118 = $117 << 16 >> 16;
 $119 = $xxi;
 $120 = ((($119)) + 756|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($121)) + 24|0);
 HEAP32[$122>>2] = $118;
 $123 = ((($am)) + 24|0);
 $124 = HEAP16[$123>>1]|0;
 $125 = $124 << 16 >> 16;
 $126 = $xxi;
 $127 = ((($126)) + 756|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($128)) + 28|0);
 HEAP32[$129>>2] = $125;
 $130 = ((($am)) + 4|0);
 $131 = HEAP16[$130>>1]|0;
 $132 = $131 << 16 >> 16;
 $133 = ($132|0)==(0);
 if ($133) {
  $134 = ((($am)) + 4|0);
  HEAP16[$134>>1] = 1;
 }
 $135 = ((($am)) + 8|0);
 $136 = HEAP16[$135>>1]|0;
 $137 = $136 << 16 >> 16;
 $138 = ($137|0)==(0);
 if ($138) {
  $139 = ((($am)) + 8|0);
  HEAP16[$139>>1] = 1;
 }
 $140 = ((($am)) + 12|0);
 $141 = HEAP16[$140>>1]|0;
 $142 = $141 << 16 >> 16;
 $143 = ($142|0)==(0);
 if ($143) {
  $144 = ((($am)) + 12|0);
  HEAP16[$144>>1] = 1;
 }
 $145 = ((($am)) + 16|0);
 $146 = HEAP16[$145>>1]|0;
 $147 = $146 << 16 >> 16;
 $148 = ($147|0)==(0);
 if ($148) {
  $149 = ((($am)) + 16|0);
  HEAP16[$149>>1] = 1;
 }
 $150 = $vol_env;
 $151 = ((($150)) + 4|0);
 HEAP32[$151>>2] = 6;
 $152 = $vol_env;
 HEAP32[$152>>2] = 1;
 $153 = $vol_env;
 $154 = ((($153)) + 28|0);
 HEAP16[$154>>1] = 0;
 $155 = HEAP16[$am>>1]|0;
 $156 = $155 << 16 >> 16;
 $157 = (($156|0) / 4)&-1;
 $158 = $157&65535;
 $159 = $vol_env;
 $160 = ((($159)) + 28|0);
 $161 = ((($160)) + 2|0);
 HEAP16[$161>>1] = $158;
 $162 = ((($am)) + 2|0);
 $163 = HEAP16[$162>>1]|0;
 $164 = $163 << 16 >> 16;
 $165 = HEAP16[$am>>1]|0;
 $166 = $165 << 16 >> 16;
 $167 = ($164|0)>($166|0);
 if ($167) {
  $168 = ((($am)) + 2|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = HEAP16[$am>>1]|0;
  $172 = $171 << 16 >> 16;
  $173 = (($170) - ($172))|0;
  $a = $173;
  $174 = HEAP16[$am>>1]|0;
  $175 = $174 << 16 >> 16;
  $176 = (256 - ($175))|0;
  $b = $176;
 } else {
  $177 = HEAP16[$am>>1]|0;
  $178 = $177 << 16 >> 16;
  $179 = ((($am)) + 2|0);
  $180 = HEAP16[$179>>1]|0;
  $181 = $180 << 16 >> 16;
  $182 = (($178) - ($181))|0;
  $a = $182;
  $183 = HEAP16[$am>>1]|0;
  $184 = $183 << 16 >> 16;
  $b = $184;
 }
 $185 = $b;
 $186 = ($185|0)==(0);
 if ($186) {
  $b = 1;
 }
 $187 = $vol_env;
 $188 = ((($187)) + 28|0);
 $189 = HEAP16[$188>>1]|0;
 $190 = $189 << 16 >> 16;
 $191 = $a;
 $192 = $191<<8;
 $193 = ((($am)) + 4|0);
 $194 = HEAP16[$193>>1]|0;
 $195 = $194 << 16 >> 16;
 $196 = $b;
 $197 = Math_imul($195, $196)|0;
 $198 = (($192|0) / ($197|0))&-1;
 $199 = (($190) + ($198))|0;
 $200 = $199&65535;
 $201 = $vol_env;
 $202 = ((($201)) + 28|0);
 $203 = ((($202)) + 4|0);
 HEAP16[$203>>1] = $200;
 $204 = ((($am)) + 2|0);
 $205 = HEAP16[$204>>1]|0;
 $206 = $205 << 16 >> 16;
 $207 = (($206|0) / 4)&-1;
 $208 = $207&65535;
 $209 = $vol_env;
 $210 = ((($209)) + 28|0);
 $211 = ((($210)) + 6|0);
 HEAP16[$211>>1] = $208;
 $212 = ((($am)) + 6|0);
 $213 = HEAP16[$212>>1]|0;
 $214 = $213 << 16 >> 16;
 $215 = ((($am)) + 2|0);
 $216 = HEAP16[$215>>1]|0;
 $217 = $216 << 16 >> 16;
 $218 = ($214|0)>($217|0);
 if ($218) {
  $219 = ((($am)) + 6|0);
  $220 = HEAP16[$219>>1]|0;
  $221 = $220 << 16 >> 16;
  $222 = ((($am)) + 2|0);
  $223 = HEAP16[$222>>1]|0;
  $224 = $223 << 16 >> 16;
  $225 = (($221) - ($224))|0;
  $a = $225;
  $226 = ((($am)) + 2|0);
  $227 = HEAP16[$226>>1]|0;
  $228 = $227 << 16 >> 16;
  $229 = (256 - ($228))|0;
  $b = $229;
 } else {
  $230 = ((($am)) + 2|0);
  $231 = HEAP16[$230>>1]|0;
  $232 = $231 << 16 >> 16;
  $233 = ((($am)) + 6|0);
  $234 = HEAP16[$233>>1]|0;
  $235 = $234 << 16 >> 16;
  $236 = (($232) - ($235))|0;
  $a = $236;
  $237 = ((($am)) + 2|0);
  $238 = HEAP16[$237>>1]|0;
  $239 = $238 << 16 >> 16;
  $b = $239;
 }
 $240 = $b;
 $241 = ($240|0)==(0);
 if ($241) {
  $b = 1;
 }
 $242 = $vol_env;
 $243 = ((($242)) + 28|0);
 $244 = ((($243)) + 4|0);
 $245 = HEAP16[$244>>1]|0;
 $246 = $245 << 16 >> 16;
 $247 = $a;
 $248 = $247<<8;
 $249 = ((($am)) + 8|0);
 $250 = HEAP16[$249>>1]|0;
 $251 = $250 << 16 >> 16;
 $252 = $b;
 $253 = Math_imul($251, $252)|0;
 $254 = (($248|0) / ($253|0))&-1;
 $255 = (($246) + ($254))|0;
 $256 = $255&65535;
 $257 = $vol_env;
 $258 = ((($257)) + 28|0);
 $259 = ((($258)) + 8|0);
 HEAP16[$259>>1] = $256;
 $260 = ((($am)) + 6|0);
 $261 = HEAP16[$260>>1]|0;
 $262 = $261 << 16 >> 16;
 $263 = (($262|0) / 4)&-1;
 $264 = $263&65535;
 $265 = $vol_env;
 $266 = ((($265)) + 28|0);
 $267 = ((($266)) + 10|0);
 HEAP16[$267>>1] = $264;
 $268 = ((($am)) + 10|0);
 $269 = HEAP16[$268>>1]|0;
 $270 = $269 << 16 >> 16;
 $271 = ((($am)) + 6|0);
 $272 = HEAP16[$271>>1]|0;
 $273 = $272 << 16 >> 16;
 $274 = ($270|0)>($273|0);
 if ($274) {
  $275 = ((($am)) + 10|0);
  $276 = HEAP16[$275>>1]|0;
  $277 = $276 << 16 >> 16;
  $278 = ((($am)) + 6|0);
  $279 = HEAP16[$278>>1]|0;
  $280 = $279 << 16 >> 16;
  $281 = (($277) - ($280))|0;
  $a = $281;
  $282 = ((($am)) + 6|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283 << 16 >> 16;
  $285 = (256 - ($284))|0;
  $b = $285;
 } else {
  $286 = ((($am)) + 6|0);
  $287 = HEAP16[$286>>1]|0;
  $288 = $287 << 16 >> 16;
  $289 = ((($am)) + 10|0);
  $290 = HEAP16[$289>>1]|0;
  $291 = $290 << 16 >> 16;
  $292 = (($288) - ($291))|0;
  $a = $292;
  $293 = ((($am)) + 6|0);
  $294 = HEAP16[$293>>1]|0;
  $295 = $294 << 16 >> 16;
  $b = $295;
 }
 $296 = $b;
 $297 = ($296|0)==(0);
 if ($297) {
  $b = 1;
 }
 $298 = $vol_env;
 $299 = ((($298)) + 28|0);
 $300 = ((($299)) + 8|0);
 $301 = HEAP16[$300>>1]|0;
 $302 = $301 << 16 >> 16;
 $303 = $a;
 $304 = $303<<8;
 $305 = ((($am)) + 12|0);
 $306 = HEAP16[$305>>1]|0;
 $307 = $306 << 16 >> 16;
 $308 = $b;
 $309 = Math_imul($307, $308)|0;
 $310 = (($304|0) / ($309|0))&-1;
 $311 = (($302) + ($310))|0;
 $312 = $311&65535;
 $313 = $vol_env;
 $314 = ((($313)) + 28|0);
 $315 = ((($314)) + 12|0);
 HEAP16[$315>>1] = $312;
 $316 = ((($am)) + 10|0);
 $317 = HEAP16[$316>>1]|0;
 $318 = $317 << 16 >> 16;
 $319 = (($318|0) / 4)&-1;
 $320 = $319&65535;
 $321 = $vol_env;
 $322 = ((($321)) + 28|0);
 $323 = ((($322)) + 14|0);
 HEAP16[$323>>1] = $320;
 $324 = $vol_env;
 $325 = ((($324)) + 28|0);
 $326 = ((($325)) + 12|0);
 $327 = HEAP16[$326>>1]|0;
 $328 = $327 << 16 >> 16;
 $329 = ((($am)) + 14|0);
 $330 = HEAP16[$329>>1]|0;
 $331 = $330 << 16 >> 16;
 $332 = (($328) + ($331))|0;
 $333 = $332&65535;
 $334 = $vol_env;
 $335 = ((($334)) + 28|0);
 $336 = ((($335)) + 16|0);
 HEAP16[$336>>1] = $333;
 $337 = ((($am)) + 10|0);
 $338 = HEAP16[$337>>1]|0;
 $339 = $338 << 16 >> 16;
 $340 = (($339|0) / 4)&-1;
 $341 = $340&65535;
 $342 = $vol_env;
 $343 = ((($342)) + 28|0);
 $344 = ((($343)) + 18|0);
 HEAP16[$344>>1] = $341;
 $345 = $vol_env;
 $346 = ((($345)) + 28|0);
 $347 = ((($346)) + 16|0);
 $348 = HEAP16[$347>>1]|0;
 $349 = $348 << 16 >> 16;
 $350 = ((($am)) + 16|0);
 $351 = HEAP16[$350>>1]|0;
 $352 = $351 << 16 >> 16;
 $353 = (256 / ($352|0))&-1;
 $354 = (($349) + ($353))|0;
 $355 = $354&65535;
 $356 = $vol_env;
 $357 = ((($356)) + 28|0);
 $358 = ((($357)) + 20|0);
 HEAP16[$358>>1] = $355;
 $359 = $vol_env;
 $360 = ((($359)) + 28|0);
 $361 = ((($360)) + 22|0);
 HEAP16[$361>>1] = 0;
 $362 = ((($am)) + 20|0);
 $363 = HEAP16[$362>>1]|0;
 $364 = ($363<<16>>16)!=(0);
 if ($364) {
  $365 = $freq_env;
  $366 = ((($365)) + 4|0);
  HEAP32[$366>>2] = 2;
  $367 = $freq_env;
  HEAP32[$367>>2] = 1;
  $368 = $freq_env;
  $369 = ((($368)) + 28|0);
  HEAP16[$369>>1] = 0;
  $370 = $freq_env;
  $371 = ((($370)) + 28|0);
  $372 = ((($371)) + 2|0);
  HEAP16[$372>>1] = 0;
  $373 = ((($am)) + 20|0);
  $374 = HEAP16[$373>>1]|0;
  $375 = $374 << 16 >> 16;
  $376 = (Math_abs(($375|0))|0);
  $377 = (1024 / ($376|0))&-1;
  $378 = $377&65535;
  $379 = $freq_env;
  $380 = ((($379)) + 28|0);
  $381 = ((($380)) + 4|0);
  HEAP16[$381>>1] = $378;
  $382 = ((($am)) + 20|0);
  $383 = HEAP16[$382>>1]|0;
  $384 = $383 << 16 >> 16;
  $385 = ($384|0)<(0);
  $386 = $385 ? -256 : 256;
  $387 = ($386*10)|0;
  $388 = $387&65535;
  $389 = $freq_env;
  $390 = ((($389)) + 28|0);
  $391 = ((($390)) + 6|0);
  HEAP16[$391>>1] = $388;
 }
 $392 = $1;
 $393 = $xxs;
 $394 = $wave;
 $395 = (_load_sample($392,0,16,$393,$394)|0);
 $396 = ($395|0)!=(0);
 if ($396) {
  $0 = -1;
  $397 = $0;
  STACKTOP = sp;return ($397|0);
 } else {
  $0 = 0;
  $397 = $0;
  STACKTOP = sp;return ($397|0);
 }
 return (0)|0;
}
function _st_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $mh = 0, $mod_event = 0, $or$cond = 0, $p = 0;
 var $pat = 0, $smp_size = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mh = sp + 120|0;
 $mod_event = sp + 720|0;
 $st = sp + 4|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 (_hio_stat($4,$st)|0);
 $5 = ((($st)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(600);
 if ($7) {
  $0 = -1;
  $252 = $0;
  STACKTOP = sp;return ($252|0);
 }
 $smp_size = 0;
 $8 = $1;
 $9 = $3;
 (_hio_seek($8,$9,0)|0);
 $10 = $1;
 (_hio_read($mh,1,20,$10)|0);
 $11 = (_test_name($mh,20)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $0 = -1;
  $252 = $0;
  STACKTOP = sp;return ($252|0);
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(15);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = ((($mh)) + 20|0);
  $17 = (($16) + (($15*30)|0)|0);
  $18 = $1;
  (_hio_read($17,1,22,$18)|0);
  $19 = $1;
  $20 = (_hio_read16b($19)|0);
  $21 = $i;
  $22 = ((($mh)) + 20|0);
  $23 = (($22) + (($21*30)|0)|0);
  $24 = ((($23)) + 22|0);
  HEAP16[$24>>1] = $20;
  $25 = $1;
  $26 = (_hio_read8($25)|0);
  $27 = $i;
  $28 = ((($mh)) + 20|0);
  $29 = (($28) + (($27*30)|0)|0);
  $30 = ((($29)) + 24|0);
  HEAP8[$30>>0] = $26;
  $31 = $1;
  $32 = (_hio_read8($31)|0);
  $33 = $i;
  $34 = ((($mh)) + 20|0);
  $35 = (($34) + (($33*30)|0)|0);
  $36 = ((($35)) + 25|0);
  HEAP8[$36>>0] = $32;
  $37 = $1;
  $38 = (_hio_read16b($37)|0);
  $39 = $i;
  $40 = ((($mh)) + 20|0);
  $41 = (($40) + (($39*30)|0)|0);
  $42 = ((($41)) + 26|0);
  HEAP16[$42>>1] = $38;
  $43 = $1;
  $44 = (_hio_read16b($43)|0);
  $45 = $i;
  $46 = ((($mh)) + 20|0);
  $47 = (($46) + (($45*30)|0)|0);
  $48 = ((($47)) + 28|0);
  HEAP16[$48>>1] = $44;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $1;
 $52 = (_hio_read8($51)|0);
 $53 = ((($mh)) + 470|0);
 HEAP8[$53>>0] = $52;
 $54 = $1;
 $55 = (_hio_read8($54)|0);
 $56 = ((($mh)) + 471|0);
 HEAP8[$56>>0] = $55;
 $57 = ((($mh)) + 472|0);
 $58 = $1;
 (_hio_read($57,1,128,$58)|0);
 $i = 0;
 $pat = 0;
 while(1) {
  $59 = $i;
  $60 = ($59|0)<(128);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = ((($mh)) + 472|0);
  $63 = (($62) + ($61)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = ($65|0)>(127);
  if ($66) {
   label = 11;
   break;
  }
  $67 = $i;
  $68 = ((($mh)) + 472|0);
  $69 = (($68) + ($67)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $pat;
  $73 = ($71|0)>($72|0);
  if ($73) {
   $74 = $i;
   $75 = ((($mh)) + 472|0);
   $76 = (($75) + ($74)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $pat = $78;
  }
  $79 = $i;
  $80 = (($79) + 1)|0;
  $i = $80;
 }
 if ((label|0) == 11) {
  $0 = -1;
  $252 = $0;
  STACKTOP = sp;return ($252|0);
 }
 $81 = $pat;
 $82 = (($81) + 1)|0;
 $pat = $82;
 $83 = $pat;
 $84 = ($83|0)>(127);
 if (!($84)) {
  $85 = ((($mh)) + 470|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = ($87|0)==(0);
  if (!($88)) {
   $89 = ((($mh)) + 470|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)>(127);
   if (!($92)) {
    $i = 0;
    while(1) {
     $93 = $i;
     $94 = ($93|0)<(15);
     if (!($94)) {
      label = 42;
      break;
     }
     $95 = $i;
     $96 = ((($mh)) + 20|0);
     $97 = (($96) + (($95*30)|0)|0);
     $98 = (_test_name($97,22)|0);
     $99 = ($98|0)<(0);
     if ($99) {
      label = 22;
      break;
     }
     $100 = $i;
     $101 = ((($mh)) + 20|0);
     $102 = (($101) + (($100*30)|0)|0);
     $103 = ((($102)) + 25|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104 << 24 >> 24;
     $106 = ($105|0)>(64);
     if ($106) {
      label = 24;
      break;
     }
     $107 = $i;
     $108 = ((($mh)) + 20|0);
     $109 = (($108) + (($107*30)|0)|0);
     $110 = ((($109)) + 24|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = $111 << 24 >> 24;
     $113 = ($112|0)>(15);
     if ($113) {
      label = 26;
      break;
     }
     $114 = $i;
     $115 = ((($mh)) + 20|0);
     $116 = (($115) + (($114*30)|0)|0);
     $117 = ((($116)) + 22|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = $118&65535;
     $120 = ($119|0)>(32768);
     if ($120) {
      label = 28;
      break;
     }
     $121 = $i;
     $122 = ((($mh)) + 20|0);
     $123 = (($122) + (($121*30)|0)|0);
     $124 = ((($123)) + 26|0);
     $125 = HEAP16[$124>>1]|0;
     $126 = $125&65535;
     $127 = $126 >> 1;
     $128 = ($127|0)>(32768);
     if ($128) {
      label = 30;
      break;
     }
     $129 = $i;
     $130 = ((($mh)) + 20|0);
     $131 = (($130) + (($129*30)|0)|0);
     $132 = ((($131)) + 28|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $133&65535;
     $135 = ($134|0)>(32768);
     if ($135) {
      label = 32;
      break;
     }
     $136 = $i;
     $137 = ((($mh)) + 20|0);
     $138 = (($137) + (($136*30)|0)|0);
     $139 = ((($138)) + 26|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = $141 >> 1;
     $143 = $i;
     $144 = ((($mh)) + 20|0);
     $145 = (($144) + (($143*30)|0)|0);
     $146 = ((($145)) + 22|0);
     $147 = HEAP16[$146>>1]|0;
     $148 = $147&65535;
     $149 = ($142|0)>($148|0);
     if ($149) {
      label = 34;
      break;
     }
     $150 = $i;
     $151 = ((($mh)) + 20|0);
     $152 = (($151) + (($150*30)|0)|0);
     $153 = ((($152)) + 22|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $154&65535;
     $156 = ($155|0)!=(0);
     if ($156) {
      $157 = $i;
      $158 = ((($mh)) + 20|0);
      $159 = (($158) + (($157*30)|0)|0);
      $160 = ((($159)) + 26|0);
      $161 = HEAP16[$160>>1]|0;
      $162 = $161&65535;
      $163 = $162 >> 1;
      $164 = $i;
      $165 = ((($mh)) + 20|0);
      $166 = (($165) + (($164*30)|0)|0);
      $167 = ((($166)) + 22|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168&65535;
      $170 = ($163|0)==($169|0);
      if ($170) {
       label = 37;
       break;
      }
     }
     $171 = $i;
     $172 = ((($mh)) + 20|0);
     $173 = (($172) + (($171*30)|0)|0);
     $174 = ((($173)) + 22|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = $175&65535;
     $177 = ($176|0)==(0);
     if ($177) {
      $178 = $i;
      $179 = ((($mh)) + 20|0);
      $180 = (($179) + (($178*30)|0)|0);
      $181 = ((($180)) + 26|0);
      $182 = HEAP16[$181>>1]|0;
      $183 = $182&65535;
      $184 = ($183|0)>(0);
      if ($184) {
       label = 40;
       break;
      }
     }
     $185 = $i;
     $186 = ((($mh)) + 20|0);
     $187 = (($186) + (($185*30)|0)|0);
     $188 = ((($187)) + 22|0);
     $189 = HEAP16[$188>>1]|0;
     $190 = $189&65535;
     $191 = $190<<1;
     $192 = $smp_size;
     $193 = (($192) + ($191))|0;
     $smp_size = $193;
     $194 = $i;
     $195 = (($194) + 1)|0;
     $i = $195;
    }
    switch (label|0) {
     case 22: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 24: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 26: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 28: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 30: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 32: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 34: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 37: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 40: {
      $0 = -1;
      $252 = $0;
      STACKTOP = sp;return ($252|0);
      break;
     }
     case 42: {
      $196 = $smp_size;
      $197 = ($196|0)<(8);
      if ($197) {
       $0 = -1;
       $252 = $0;
       STACKTOP = sp;return ($252|0);
      }
      $198 = ((($st)) + 36|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = $pat;
      $201 = $200<<10;
      $202 = (600 + ($201))|0;
      $203 = $smp_size;
      $204 = (($202) + ($203))|0;
      $205 = ($199|0)<($204|0);
      if ($205) {
       $0 = -1;
       $252 = $0;
       STACKTOP = sp;return ($252|0);
      }
      $i = 0;
      L70: while(1) {
       $206 = $i;
       $207 = $pat;
       $208 = ($206|0)<($207|0);
       if (!($208)) {
        label = 61;
        break;
       }
       $j = 0;
       while(1) {
        $209 = $j;
        $210 = ($209|0)<(256);
        if (!($210)) {
         break;
        }
        $211 = $1;
        (_hio_read($mod_event,1,4,$211)|0);
        $212 = HEAP8[$mod_event>>0]|0;
        $213 = $212&255;
        $214 = $213 & 240;
        $215 = $214 >> 4;
        $216 = ($215|0)!=(0);
        if ($216) {
         label = 51;
         break L70;
        }
        $217 = HEAP8[$mod_event>>0]|0;
        $218 = $217&255;
        $219 = $218 & 15;
        $220 = $219<<8;
        $221 = ((($mod_event)) + 1|0);
        $222 = HEAP8[$221>>0]|0;
        $223 = $222&255;
        $224 = (($220) + ($223))|0;
        $p = $224;
        $225 = $p;
        $226 = ($225|0)==(0);
        $227 = $p;
        $228 = ($227|0)==(162);
        $or$cond = $226 | $228;
        if (!($or$cond)) {
         $k = 0;
         while(1) {
          $229 = $k;
          $230 = (4576 + ($229<<2)|0);
          $231 = HEAP32[$230>>2]|0;
          $232 = ($231|0)>=(0);
          if (!($232)) {
           break;
          }
          $233 = $p;
          $234 = $k;
          $235 = (4576 + ($234<<2)|0);
          $236 = HEAP32[$235>>2]|0;
          $237 = ($233|0)==($236|0);
          if ($237) {
           break;
          }
          $238 = $k;
          $239 = (($238) + 1)|0;
          $k = $239;
         }
         $240 = $k;
         $241 = (4576 + ($240<<2)|0);
         $242 = HEAP32[$241>>2]|0;
         $243 = ($242|0)<(0);
         if ($243) {
          label = 58;
          break L70;
         }
        }
        $244 = $j;
        $245 = (($244) + 1)|0;
        $j = $245;
       }
       $246 = $i;
       $247 = (($246) + 1)|0;
       $i = $247;
      }
      if ((label|0) == 51) {
       $0 = -1;
       $252 = $0;
       STACKTOP = sp;return ($252|0);
      }
      else if ((label|0) == 58) {
       $0 = -1;
       $252 = $0;
       STACKTOP = sp;return ($252|0);
      }
      else if ((label|0) == 61) {
       $248 = $1;
       $249 = $3;
       (_hio_seek($248,$249,0)|0);
       $250 = $1;
       $251 = $2;
       _read_title($250,$251,20);
       $0 = 0;
       $252 = $0;
       STACKTOP = sp;return ($252|0);
      }
      break;
     }
    }
   }
  }
 }
 $0 = -1;
 $252 = $0;
 STACKTOP = sp;return ($252|0);
}
function _st_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $fxused = 0, $i = 0, $j = 0, $mh = 0, $mod = 0;
 var $mod_event = 0, $modtype = 0, $pos = 0, $serr = 0, $smp_size = 0, $sub = 0, $ust = 0, $vararg_buffer = 0, $xxi = 0, $xxs = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ev = sp + 680|0;
 $mh = sp + 72|0;
 $mod_event = sp + 672|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ust = 1;
 $serr = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $mod;
 $8 = ((($7)) + 140|0);
 HEAP32[$8>>2] = 15;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 $smp_size = 0;
 $14 = $2;
 (_hio_read($mh,1,20,$14)|0);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(15);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = ((($mh)) + 20|0);
  $19 = (($18) + (($17*30)|0)|0);
  $20 = $2;
  (_hio_read($19,1,22,$20)|0);
  $21 = $2;
  $22 = (_hio_read16b($21)|0);
  $23 = $i;
  $24 = ((($mh)) + 20|0);
  $25 = (($24) + (($23*30)|0)|0);
  $26 = ((($25)) + 22|0);
  HEAP16[$26>>1] = $22;
  $27 = $2;
  $28 = (_hio_read8($27)|0);
  $29 = $i;
  $30 = ((($mh)) + 20|0);
  $31 = (($30) + (($29*30)|0)|0);
  $32 = ((($31)) + 24|0);
  HEAP8[$32>>0] = $28;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $i;
  $36 = ((($mh)) + 20|0);
  $37 = (($36) + (($35*30)|0)|0);
  $38 = ((($37)) + 25|0);
  HEAP8[$38>>0] = $34;
  $39 = $2;
  $40 = (_hio_read16b($39)|0);
  $41 = $i;
  $42 = ((($mh)) + 20|0);
  $43 = (($42) + (($41*30)|0)|0);
  $44 = ((($43)) + 26|0);
  HEAP16[$44>>1] = $40;
  $45 = $2;
  $46 = (_hio_read16b($45)|0);
  $47 = $i;
  $48 = ((($mh)) + 20|0);
  $49 = (($48) + (($47*30)|0)|0);
  $50 = ((($49)) + 28|0);
  HEAP16[$50>>1] = $46;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $2;
 $54 = (_hio_read8($53)|0);
 $55 = ((($mh)) + 470|0);
 HEAP8[$55>>0] = $54;
 $56 = $2;
 $57 = (_hio_read8($56)|0);
 $58 = ((($mh)) + 471|0);
 HEAP8[$58>>0] = $57;
 $59 = ((($mh)) + 472|0);
 $60 = $2;
 (_hio_read($59,1,128,$60)|0);
 $61 = ((($mh)) + 470|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = $mod;
 $65 = ((($64)) + 156|0);
 HEAP32[$65>>2] = $63;
 $66 = ((($mh)) + 471|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $mod;
 $70 = ((($69)) + 160|0);
 HEAP32[$70>>2] = $68;
 $71 = $mod;
 $72 = ((($71)) + 160|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)<(64);
 if ($74) {
  $ust = 0;
 }
 $75 = $mod;
 $76 = ((($75)) + 952|0);
 $77 = ((($mh)) + 472|0);
 dest=$76; src=$77; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $78 = $i;
  $79 = ($78|0)<(128);
  if (!($79)) {
   break;
  }
  $80 = $i;
  $81 = $mod;
  $82 = ((($81)) + 952|0);
  $83 = (($82) + ($80)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $mod;
  $87 = ((($86)) + 128|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($85|0)>($88|0);
  if ($89) {
   $90 = $i;
   $91 = $mod;
   $92 = ((($91)) + 952|0);
   $93 = (($92) + ($90)|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $mod;
   $97 = ((($96)) + 128|0);
   HEAP32[$97>>2] = $95;
  }
  $98 = $i;
  $99 = (($98) + 1)|0;
  $i = $99;
 }
 $100 = $mod;
 $101 = ((($100)) + 128|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + 1)|0;
 HEAP32[$101>>2] = $103;
 $i = 0;
 while(1) {
  $104 = $i;
  $105 = $mod;
  $106 = ((($105)) + 140|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($104|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $i;
  $110 = ((($mh)) + 20|0);
  $111 = (($110) + (($109*30)|0)|0);
  $112 = ((($111)) + 24|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = ($113<<24>>24)!=(0);
  if ($114) {
   $ust = 0;
  }
  $115 = $i;
  $116 = ((($mh)) + 20|0);
  $117 = (($116) + (($115*30)|0)|0);
  $118 = ((($117)) + 22|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $121 = ($120|0)>(4999);
  if ($121) {
   label = 18;
  } else {
   $122 = $i;
   $123 = ((($mh)) + 20|0);
   $124 = (($123) + (($122*30)|0)|0);
   $125 = ((($124)) + 26|0);
   $126 = HEAP16[$125>>1]|0;
   $127 = $126&65535;
   $128 = ($127|0)>(9999);
   if ($128) {
    label = 18;
   } else {
    $129 = $i;
    $130 = ((($mh)) + 20|0);
    $131 = (($130) + (($129*30)|0)|0);
    $132 = ((($131)) + 28|0);
    $133 = HEAP16[$132>>1]|0;
    $134 = $133&65535;
    $135 = ($134|0)>(4999);
    if ($135) {
     label = 18;
    }
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $ust = 0;
  }
  $136 = $i;
  $137 = ((($mh)) + 20|0);
  $138 = (($137) + (($136*30)|0)|0);
  $139 = ((($138)) + 22|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140&65535;
  $142 = $141<<1;
  $143 = $smp_size;
  $144 = (($143) + ($142))|0;
  $smp_size = $144;
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 $147 = $mod;
 $148 = (_instrument_init($147)|0);
 $149 = ($148|0)<(0);
 if ($149) {
  $0 = -1;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 $i = 0;
 while(1) {
  $150 = $i;
  $151 = $mod;
  $152 = ((($151)) + 140|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($150|0)<($153|0);
  if (!($154)) {
   break;
  }
  $155 = $i;
  $156 = $mod;
  $157 = ((($156)) + 176|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($155*764)|0)|0);
  $xxi = $159;
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 180|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*52)|0)|0);
  $xxs = $164;
  $165 = $mod;
  $166 = $i;
  $167 = (_subinstrument_alloc($165,$166,1)|0);
  $168 = ($167|0)<(0);
  if ($168) {
   label = 25;
   break;
  }
  $169 = $xxi;
  $170 = ((($169)) + 756|0);
  $171 = HEAP32[$170>>2]|0;
  $sub = $171;
  $172 = $i;
  $173 = ((($mh)) + 20|0);
  $174 = (($173) + (($172*30)|0)|0);
  $175 = ((($174)) + 22|0);
  $176 = HEAP16[$175>>1]|0;
  $177 = $176&65535;
  $178 = $177<<1;
  $179 = $i;
  $180 = ((($mh)) + 20|0);
  $181 = (($180) + (($179*30)|0)|0);
  $182 = ((($181)) + 26|0);
  $183 = HEAP16[$182>>1]|0;
  $184 = $183&65535;
  $185 = (($178) - ($184))|0;
  $186 = $xxs;
  $187 = ((($186)) + 32|0);
  HEAP32[$187>>2] = $185;
  $188 = $xxs;
  $189 = ((($188)) + 36|0);
  HEAP32[$189>>2] = 0;
  $190 = $xxs;
  $191 = ((($190)) + 36|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $i;
  $194 = ((($mh)) + 20|0);
  $195 = (($194) + (($193*30)|0)|0);
  $196 = ((($195)) + 28|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = $198<<1;
  $200 = (($192) + ($199))|0;
  $201 = $xxs;
  $202 = ((($201)) + 40|0);
  HEAP32[$202>>2] = $200;
  $203 = $i;
  $204 = ((($mh)) + 20|0);
  $205 = (($204) + (($203*30)|0)|0);
  $206 = ((($205)) + 28|0);
  $207 = HEAP16[$206>>1]|0;
  $208 = $207&65535;
  $209 = ($208|0)>(1);
  $210 = $209 ? 2 : 0;
  $211 = $xxs;
  $212 = ((($211)) + 44|0);
  HEAP32[$212>>2] = $210;
  $213 = $i;
  $214 = ((($mh)) + 20|0);
  $215 = (($214) + (($213*30)|0)|0);
  $216 = ((($215)) + 24|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = $217 << 24 >> 24;
  $219 = $218 << 4;
  $220 = $219&255;
  $221 = $220 << 24 >> 24;
  $222 = $sub;
  $223 = ((($222)) + 16|0);
  HEAP32[$223>>2] = $221;
  $224 = $i;
  $225 = ((($mh)) + 20|0);
  $226 = (($225) + (($224*30)|0)|0);
  $227 = ((($226)) + 25|0);
  $228 = HEAP8[$227>>0]|0;
  $229 = $228 << 24 >> 24;
  $230 = $sub;
  HEAP32[$230>>2] = $229;
  $231 = $sub;
  $232 = ((($231)) + 8|0);
  HEAP32[$232>>2] = 128;
  $233 = $i;
  $234 = $sub;
  $235 = ((($234)) + 40|0);
  HEAP32[$235>>2] = $233;
  $236 = $xxi;
  $237 = $i;
  $238 = ((($mh)) + 20|0);
  $239 = (($238) + (($237*30)|0)|0);
  (_strncpy(($236|0),($239|0),22)|0);
  $240 = $xxi;
  (_adjust_string($240)|0);
  $241 = $xxs;
  $242 = ((($241)) + 32|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ($243|0)>(0);
  if ($244) {
   $245 = $xxi;
   $246 = ((($245)) + 36|0);
   HEAP32[$246>>2] = 1;
  }
  $247 = $i;
  $248 = (($247) + 1)|0;
  $i = $248;
 }
 if ((label|0) == 25) {
  $0 = -1;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 $249 = $mod;
 $250 = ((($249)) + 136|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = $mod;
 $253 = ((($252)) + 128|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = Math_imul($251, $254)|0;
 $256 = $mod;
 $257 = ((($256)) + 132|0);
 HEAP32[$257>>2] = $255;
 $258 = $mod;
 (_strncpy(($258|0),($mh|0),20)|0);
 $fxused = 0;
 $259 = $2;
 $260 = (_hio_tell($259)|0);
 $pos = $260;
 $i = 0;
 while(1) {
  $261 = $i;
  $262 = $mod;
  $263 = ((($262)) + 128|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = ($261|0)<($264|0);
  if (!($265)) {
   break;
  }
  $j = 0;
  while(1) {
   $266 = $j;
   $267 = $mod;
   $268 = ((($267)) + 136|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $269<<6;
   $271 = ($266|0)<($270|0);
   if (!($271)) {
    break;
   }
   $272 = $2;
   (_hio_read($mod_event,1,4,$272)|0);
   _decode_protracker_event($ev,$mod_event);
   $273 = ((($ev)) + 3|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = ($274<<24>>24)!=(0);
   if ($275) {
    $276 = ((($ev)) + 3|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = $277&255;
    $279 = 1 << $278;
    $280 = $fxused;
    $281 = $280 | $279;
    $fxused = $281;
   } else {
    $282 = ((($ev)) + 4|0);
    $283 = HEAP8[$282>>0]|0;
    $284 = ($283<<24>>24)!=(0);
    if ($284) {
     $285 = $fxused;
     $286 = $285 | 1;
     $fxused = $286;
    }
   }
   $287 = ((($ev)) + 3|0);
   $288 = HEAP8[$287>>0]|0;
   $289 = $288&255;
   $290 = ($289|0)!=(0);
   if ($290) {
    $291 = ((($ev)) + 3|0);
    $292 = HEAP8[$291>>0]|0;
    $293 = $292&255;
    $294 = ($293|0)!=(1);
    if ($294) {
     $295 = ((($ev)) + 3|0);
     $296 = HEAP8[$295>>0]|0;
     $297 = $296&255;
     $298 = ($297|0)!=(2);
     if ($298) {
      $ust = 0;
     }
    }
   }
   $299 = ((($ev)) + 3|0);
   $300 = HEAP8[$299>>0]|0;
   $301 = $300&255;
   $302 = ($301|0)==(1);
   if ($302) {
    $303 = ((($ev)) + 4|0);
    $304 = HEAP8[$303>>0]|0;
    $305 = $304&255;
    $306 = ($305|0)==(0);
    if ($306) {
     $ust = 0;
    }
   }
   $307 = ((($ev)) + 3|0);
   $308 = HEAP8[$307>>0]|0;
   $309 = $308&255;
   $310 = ($309|0)==(2);
   if ($310) {
    $311 = ((($ev)) + 4|0);
    $312 = HEAP8[$311>>0]|0;
    $313 = $312&255;
    $314 = $313 & 15;
    $315 = ($314|0)!=(0);
    if ($315) {
     $316 = ((($ev)) + 4|0);
     $317 = HEAP8[$316>>0]|0;
     $318 = $317&255;
     $319 = $318 & 240;
     $320 = ($319|0)!=(0);
     if ($320) {
      $ust = 0;
     }
    }
   }
   $321 = $j;
   $322 = (($321) + 1)|0;
   $j = $322;
  }
  $323 = $i;
  $324 = (($323) + 1)|0;
  $i = $324;
 }
 $325 = $fxused;
 $326 = $325 & -7;
 $327 = ($326|0)!=(0);
 if ($327) {
  $ust = 0;
 }
 $328 = $ust;
 $329 = ($328|0)!=(0);
 do {
  if ($329) {
   $modtype = 4496;
  } else {
   $330 = $fxused;
   $331 = $330 & -53256;
   $332 = ($331|0)==(0);
   if ($332) {
    $modtype = 4520;
    break;
   }
   $333 = $fxused;
   $334 = $333 & -63496;
   $335 = ($334|0)==(0);
   if ($335) {
    $modtype = 4536;
    break;
   } else {
    $modtype = 4560;
    break;
   }
  }
 } while(0);
 $336 = $mod;
 $337 = ((($336)) + 64|0);
 $338 = $modtype;
 HEAP32[$vararg_buffer>>2] = $338;
 (_snprintf($337,64,7408,$vararg_buffer)|0);
 $339 = $2;
 $340 = $3;
 $341 = $pos;
 $342 = (($340) + ($341))|0;
 (_hio_seek($339,$342,0)|0);
 $343 = $mod;
 $344 = (_pattern_init($343)|0);
 $345 = ($344|0)<(0);
 if ($345) {
  $0 = -1;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 $i = 0;
 while(1) {
  $346 = $i;
  $347 = $mod;
  $348 = ((($347)) + 128|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = ($346|0)<($349|0);
  if (!($350)) {
   break;
  }
  $351 = $mod;
  $352 = $i;
  $353 = (_pattern_tracks_alloc($351,$352,64)|0);
  $354 = ($353|0)<(0);
  if ($354) {
   label = 64;
   break;
  }
  $j = 0;
  while(1) {
   $355 = $j;
   $356 = $mod;
   $357 = ((($356)) + 136|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = $358<<6;
   $360 = ($355|0)<($359|0);
   if (!($360)) {
    break;
   }
   $361 = $j;
   $362 = $mod;
   $363 = ((($362)) + 136|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($361|0) / ($364|0))&-1;
   $366 = $j;
   $367 = $mod;
   $368 = ((($367)) + 136|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (($366|0) % ($369|0))&-1;
   $371 = $i;
   $372 = $1;
   $373 = ((($372)) + 168|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = (($374) + ($371<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = ((($376)) + 4|0);
   $378 = (($377) + ($370<<2)|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = $1;
   $381 = ((($380)) + 172|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = (($382) + ($379<<2)|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = ((($384)) + 4|0);
   $386 = (($385) + ($365<<3)|0);
   $event = $386;
   $387 = $2;
   (_hio_read($mod_event,1,4,$387)|0);
   $388 = $event;
   _decode_protracker_event($388,$mod_event);
   $389 = $j;
   $390 = (($389) + 1)|0;
   $j = $390;
  }
  $391 = $i;
  $392 = (($391) + 1)|0;
  $i = $392;
 }
 if ((label|0) == 64) {
  $0 = -1;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 $i = 0;
 while(1) {
  $393 = $i;
  $394 = $mod;
  $395 = ((($394)) + 140|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ($393|0)<($396|0);
  if (!($397)) {
   break;
  }
  $398 = $i;
  $399 = (($398) + 1)|0;
  $i = $399;
 }
 $400 = $1;
 $401 = ((($400)) + 1280|0);
 $402 = HEAP32[$401>>2]|0;
 $403 = $402 | 8192;
 HEAP32[$401>>2] = $403;
 $404 = $ust;
 $405 = ($404|0)!=(0);
 $406 = $mod;
 $407 = ((($406)) + 160|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = $mod;
 L103: do {
  if ($405) {
   $410 = ((($409)) + 152|0);
   HEAP32[$410>>2] = $408;
   $411 = $mod;
   $412 = ((($411)) + 160|0);
   HEAP32[$412>>2] = 0;
   $i = 0;
   while(1) {
    $413 = $i;
    $414 = $mod;
    $415 = ((($414)) + 140|0);
    $416 = HEAP32[$415>>2]|0;
    $417 = ($413|0)<($416|0);
    if (!($417)) {
     break;
    }
    $418 = $i;
    $419 = (($418) + 1)|0;
    $i = $419;
   }
   $i = 0;
   while(1) {
    $420 = $i;
    $421 = $mod;
    $422 = ((($421)) + 128|0);
    $423 = HEAP32[$422>>2]|0;
    $424 = ($420|0)<($423|0);
    if (!($424)) {
     break L103;
    }
    $j = 0;
    while(1) {
     $425 = $j;
     $426 = $mod;
     $427 = ((($426)) + 136|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = $428<<6;
     $430 = ($425|0)<($429|0);
     if (!($430)) {
      break;
     }
     $431 = $j;
     $432 = $mod;
     $433 = ((($432)) + 136|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = (($431|0) / ($434|0))&-1;
     $436 = $j;
     $437 = $mod;
     $438 = ((($437)) + 136|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = (($436|0) % ($439|0))&-1;
     $441 = $i;
     $442 = $1;
     $443 = ((($442)) + 168|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = (($444) + ($441<<2)|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = ((($446)) + 4|0);
     $448 = (($447) + ($440<<2)|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = $1;
     $451 = ((($450)) + 172|0);
     $452 = HEAP32[$451>>2]|0;
     $453 = (($452) + ($449<<2)|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = ((($454)) + 4|0);
     $456 = (($455) + ($435<<3)|0);
     $event = $456;
     $457 = $event;
     $458 = ((($457)) + 3|0);
     $459 = HEAP8[$458>>0]|0;
     $460 = $459&255;
     $461 = ($460|0)==(1);
     $462 = $event;
     $463 = ((($462)) + 3|0);
     do {
      if ($461) {
       HEAP8[$463>>0] = 0;
      } else {
       $464 = HEAP8[$463>>0]|0;
       $465 = $464&255;
       $466 = ($465|0)==(2);
       if ($466) {
        $467 = $event;
        $468 = ((($467)) + 4|0);
        $469 = HEAP8[$468>>0]|0;
        $470 = $469&255;
        $471 = $470 & 240;
        $472 = ($471|0)==(0);
        if ($472) {
         $473 = $event;
         $474 = ((($473)) + 3|0);
         HEAP8[$474>>0] = 1;
         break;
        }
       }
       $475 = $event;
       $476 = ((($475)) + 3|0);
       $477 = HEAP8[$476>>0]|0;
       $478 = $477&255;
       $479 = ($478|0)==(2);
       if ($479) {
        $480 = $event;
        $481 = ((($480)) + 4|0);
        $482 = HEAP8[$481>>0]|0;
        $483 = $482&255;
        $484 = $483 & 15;
        $485 = ($484|0)==(0);
        if ($485) {
         $486 = $event;
         $487 = ((($486)) + 4|0);
         $488 = HEAP8[$487>>0]|0;
         $489 = $488&255;
         $490 = $489 >> 4;
         $491 = $490&255;
         HEAP8[$487>>0] = $491;
        }
       }
      }
     } while(0);
     $492 = $j;
     $493 = (($492) + 1)|0;
     $j = $493;
    }
    $494 = $i;
    $495 = (($494) + 1)|0;
    $i = $495;
   }
  } else {
   $496 = ((($409)) + 156|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = ($408|0)>=($497|0);
   if ($498) {
    $499 = $mod;
    $500 = ((($499)) + 160|0);
    HEAP32[$500>>2] = 0;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $501 = $i;
  $502 = $mod;
  $503 = ((($502)) + 144|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = ($501|0)<($504|0);
  if (!($505)) {
   label = 98;
   break;
  }
  $506 = $i;
  $507 = $mod;
  $508 = ((($507)) + 180|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = (($509) + (($506*52)|0)|0);
  $511 = ((($510)) + 32|0);
  $512 = HEAP32[$511>>2]|0;
  $513 = ($512|0)!=(0);
  if ($513) {
   $514 = $2;
   $515 = $i;
   $516 = ((($mh)) + 20|0);
   $517 = (($516) + (($515*30)|0)|0);
   $518 = ((($517)) + 26|0);
   $519 = HEAP16[$518>>1]|0;
   $520 = $519&65535;
   (_hio_seek($514,$520,1)|0);
   $521 = $1;
   $522 = $2;
   $523 = $i;
   $524 = $mod;
   $525 = ((($524)) + 180|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = (($526) + (($523*52)|0)|0);
   $528 = (_load_sample($521,$522,0,$527,0)|0);
   $529 = ($528|0)<(0);
   if ($529) {
    label = 96;
    break;
   }
  }
  $530 = $i;
  $531 = (($530) + 1)|0;
  $i = $531;
 }
 if ((label|0) == 96) {
  $0 = -1;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 else if ((label|0) == 98) {
  $0 = 0;
  $532 = $0;
  STACKTOP = sp;return ($532|0);
 }
 return (0)|0;
}
function _emod_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1179603533);
 if ($6) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $7 = $1;
 (_hio_read32b($7)|0);
 $8 = $1;
 $9 = (_hio_read32b($8)|0);
 $10 = ($9|0)!=(1162694468);
 if ($10) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $11 = $1;
 $12 = (_hio_read32b($11)|0);
 $13 = ($12|0)==(1162692931);
 $14 = $1;
 if ($13) {
  (_hio_read32b($14)|0);
  $15 = $1;
  (_hio_read16b($15)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,20);
 } else {
  $18 = $2;
  _read_title($14,$18,0);
 }
 $0 = 0;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _emod_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_read32b($6)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = (_iff_new()|0);
 $handle = $9;
 $10 = $handle;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $12 = $handle;
 $13 = (_iff_register($12,4760,236)|0);
 $ret = $13;
 $14 = $handle;
 $15 = (_iff_register($14,7552,237)|0);
 $16 = $ret;
 $17 = $16 | $15;
 $ret = $17;
 $18 = $handle;
 $19 = (_iff_register($18,4768,238)|0);
 $20 = $ret;
 $21 = $20 | $19;
 $ret = $21;
 $22 = $ret;
 $23 = ($22|0)!=(0);
 if ($23) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $24 = $handle;
 $25 = $1;
 $26 = $2;
 $27 = (_iff_load($24,$25,$26,0)|0);
 $28 = ($27|0)<(0);
 $29 = $handle;
 _iff_release($29);
 if ($28) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 } else {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _get_emic($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $mod = 0, $reorder = 0, $sub = 0, $vararg_buffer = 0, $ver = 0;
 var $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $reorder = sp + 48|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $ver = $8;
 $9 = $mod;
 $10 = $3;
 (_hio_read($9,1,20,$10)|0);
 $11 = $3;
 (_hio_seek($11,20,1)|0);
 $12 = $3;
 $13 = (_hio_read8($12)|0);
 $14 = $13&255;
 $15 = $mod;
 $16 = ((($15)) + 152|0);
 HEAP32[$16>>2] = $14;
 $17 = $3;
 $18 = (_hio_read8($17)|0);
 $19 = $18&255;
 $20 = $mod;
 $21 = ((($20)) + 140|0);
 HEAP32[$21>>2] = $19;
 $22 = $mod;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $mod;
 $26 = ((($25)) + 144|0);
 HEAP32[$26>>2] = $24;
 $27 = $1;
 $28 = ((($27)) + 1280|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 | 8192;
 HEAP32[$28>>2] = $30;
 $31 = $mod;
 $32 = ((($31)) + 64|0);
 $33 = $ver;
 HEAP32[$vararg_buffer>>2] = $33;
 (_snprintf($32,64,4776,$vararg_buffer)|0);
 $34 = $mod;
 $35 = (_instrument_init($34)|0);
 $36 = ($35|0)<(0);
 if ($36) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = $mod;
  $39 = ((($38)) + 140|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = $mod;
  $44 = ((($43)) + 176|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + (($42*764)|0)|0);
  $xxi = $46;
  $47 = $i;
  $48 = $mod;
  $49 = ((($48)) + 180|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*52)|0)|0);
  $xxs = $51;
  $52 = $mod;
  $53 = $i;
  $54 = (_subinstrument_alloc($52,$53,1)|0);
  $55 = ($54|0)<(0);
  if ($55) {
   label = 6;
   break;
  }
  $56 = $xxi;
  $57 = ((($56)) + 756|0);
  $58 = HEAP32[$57>>2]|0;
  $sub = $58;
  $59 = $3;
  (_hio_read8($59)|0);
  $60 = $3;
  $61 = (_hio_read8($60)|0);
  $62 = $61&255;
  $63 = $sub;
  HEAP32[$63>>2] = $62;
  $64 = $3;
  $65 = (_hio_read16b($64)|0);
  $66 = $65&65535;
  $67 = $66<<1;
  $68 = $xxs;
  $69 = ((($68)) + 32|0);
  HEAP32[$69>>2] = $67;
  $70 = $xxi;
  $71 = $3;
  (_hio_read($70,1,20,$71)|0);
  $72 = $3;
  $73 = (_hio_read8($72)|0);
  $74 = $73&255;
  $75 = $74 & 1;
  $76 = ($75|0)!=(0);
  $77 = $76 ? 2 : 0;
  $78 = $xxs;
  $79 = ((($78)) + 44|0);
  HEAP32[$79>>2] = $77;
  $80 = $3;
  $81 = (_hio_read8($80)|0);
  $82 = $81&255;
  $83 = $sub;
  $84 = ((($83)) + 16|0);
  HEAP32[$84>>2] = $82;
  $85 = $3;
  $86 = (_hio_read16b($85)|0);
  $87 = $86&65535;
  $88 = $87<<1;
  $89 = $xxs;
  $90 = ((($89)) + 36|0);
  HEAP32[$90>>2] = $88;
  $91 = $xxs;
  $92 = ((($91)) + 36|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $3;
  $95 = (_hio_read16b($94)|0);
  $96 = $95&65535;
  $97 = $96<<1;
  $98 = (($93) + ($97))|0;
  $99 = $xxs;
  $100 = ((($99)) + 40|0);
  HEAP32[$100>>2] = $98;
  $101 = $3;
  (_hio_read32b($101)|0);
  $102 = $xxi;
  $103 = ((($102)) + 36|0);
  HEAP32[$103>>2] = 1;
  $104 = $sub;
  $105 = ((($104)) + 8|0);
  HEAP32[$105>>2] = 128;
  $106 = $i;
  $107 = $sub;
  $108 = ((($107)) + 40|0);
  HEAP32[$108>>2] = $106;
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $111 = $3;
 (_hio_read8($111)|0);
 $112 = $3;
 $113 = (_hio_read8($112)|0);
 $114 = $113&255;
 $115 = $mod;
 $116 = ((($115)) + 128|0);
 HEAP32[$116>>2] = $114;
 $117 = $mod;
 $118 = ((($117)) + 128|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $mod;
 $121 = ((($120)) + 136|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = Math_imul($119, $122)|0;
 $124 = $mod;
 $125 = ((($124)) + 132|0);
 HEAP32[$125>>2] = $123;
 $126 = $mod;
 $127 = (_pattern_init($126)|0);
 $128 = ($127|0)<(0);
 if ($128) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 _memset(($reorder|0),0,256)|0;
 $i = 0;
 while(1) {
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 128|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($129|0)<($132|0);
  if (!($133)) {
   break;
  }
  $134 = $i;
  $135 = $134&255;
  $136 = $3;
  $137 = (_hio_read8($136)|0);
  $138 = $137&255;
  $139 = (($reorder) + ($138)|0);
  HEAP8[$139>>0] = $135;
  $140 = $mod;
  $141 = $i;
  $142 = $3;
  $143 = (_hio_read8($142)|0);
  $144 = $143&255;
  $145 = (($144) + 1)|0;
  $146 = (_pattern_tracks_alloc($140,$141,$145)|0);
  $147 = ($146|0)<(0);
  if ($147) {
   label = 13;
   break;
  }
  $148 = $3;
  (_hio_seek($148,20,1)|0);
  $149 = $3;
  (_hio_read32b($149)|0);
  $150 = $i;
  $151 = (($150) + 1)|0;
  $i = $151;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $152 = $3;
 $153 = (_hio_read8($152)|0);
 $154 = $153&255;
 $155 = $mod;
 $156 = ((($155)) + 156|0);
 HEAP32[$156>>2] = $154;
 $i = 0;
 while(1) {
  $157 = $i;
  $158 = $mod;
  $159 = ((($158)) + 156|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($157|0)<($160|0);
  if (!($161)) {
   break;
  }
  $162 = $3;
  $163 = (_hio_read8($162)|0);
  $164 = $163&255;
  $165 = (($reorder) + ($164)|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 952|0);
  $170 = (($169) + ($167)|0);
  HEAP8[$170>>0] = $166;
  $171 = $i;
  $172 = (($171) + 1)|0;
  $i = $172;
 }
 $0 = 0;
 $173 = $0;
 STACKTOP = sp;return ($173|0);
}
function _get_patt220($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $mod;
  $7 = ((($6)) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = $i;
   $12 = $mod;
   $13 = ((($12)) + 168|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($11<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($10|0)<($17|0);
   if (!($18)) {
    break;
   }
   $k = 0;
   while(1) {
    $19 = $k;
    $20 = $mod;
    $21 = ((($20)) + 136|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19|0)<($22|0);
    $24 = $j;
    if (!($23)) {
     break;
    }
    $25 = $k;
    $26 = $i;
    $27 = $0;
    $28 = ((($27)) + 168|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 4|0);
    $33 = (($32) + ($25<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $0;
    $36 = ((($35)) + 172|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($34<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 4|0);
    $41 = (($40) + ($24<<3)|0);
    $event = $41;
    $42 = $2;
    $43 = (_hio_read8($42)|0);
    $44 = $event;
    $45 = ((($44)) + 1|0);
    HEAP8[$45>>0] = $43;
    $46 = $2;
    $47 = (_hio_read8($46)|0);
    $48 = $47&255;
    $49 = (($48) + 1)|0;
    $50 = $49&255;
    $51 = $event;
    HEAP8[$51>>0] = $50;
    $52 = $event;
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $event;
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = (($58) + 48)|0;
     $60 = $59&255;
     HEAP8[$56>>0] = $60;
    }
    $61 = $2;
    $62 = (_hio_read8($61)|0);
    $63 = $62&255;
    $64 = $63 & 15;
    $65 = $64&255;
    $66 = $event;
    $67 = ((($66)) + 3|0);
    HEAP8[$67>>0] = $65;
    $68 = $2;
    $69 = (_hio_read8($68)|0);
    $70 = $event;
    $71 = ((($70)) + 4|0);
    HEAP8[$71>>0] = $69;
    $72 = $event;
    $73 = ((($72)) + 3|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    if ((($75|0) == 11)) {
     $96 = $event;
     $97 = ((($96)) + 3|0);
     $98 = HEAP8[$97>>0]|0;
     $x = $98;
     $99 = $x;
     $100 = $99&255;
     $101 = (($100|0) / 10)&-1;
     $102 = $101<<4;
     $103 = $x;
     $104 = $103&255;
     $105 = (($104|0) % 10)&-1;
     $106 = (($102) + ($105))|0;
     $107 = $106&255;
     $108 = $event;
     $109 = ((($108)) + 3|0);
     HEAP8[$109>>0] = $107;
    } else if ((($75|0) == 4)) {
     $76 = $event;
     $77 = ((($76)) + 4|0);
     $78 = HEAP8[$77>>0]|0;
     $x = $78;
     $79 = $x;
     $80 = $79&255;
     $81 = $80 & 240;
     $82 = $x;
     $83 = $82&255;
     $84 = $83 << 1;
     $85 = $84 & 15;
     $86 = $81 | $85;
     $87 = $86&255;
     $88 = $event;
     $89 = ((($88)) + 4|0);
     HEAP8[$89>>0] = $87;
    } else if ((($75|0) == 9)) {
     $90 = $event;
     $91 = ((($90)) + 3|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 << 1;
     $95 = $94&255;
     HEAP8[$91>>0] = $95;
    }
    $110 = $k;
    $111 = (($110) + 1)|0;
    $k = $111;
   }
   $112 = (($24) + 1)|0;
   $j = $112;
  }
  $113 = $i;
  $114 = (($113) + 1)|0;
  $i = $114;
 }
 STACKTOP = sp;return 0;
}
function _get_8smp($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $mod;
  $8 = ((($7)) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $1;
  $12 = $3;
  $13 = $i;
  $14 = $mod;
  $15 = ((($14)) + 180|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($13*52)|0)|0);
  $18 = (_load_sample($11,$12,0,$17,0)|0);
  $19 = ($18|0)<(0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _imf_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 60)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1229795632);
 if ($9) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $1;
  $11 = $3;
  (_hio_seek($10,$11,0)|0);
  $12 = $1;
  $13 = $2;
  _read_title($12,$13,32);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _imf_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $dummy = 0, $event = 0, $i = 0, $ih = 0;
 var $ii = 0, $is = 0, $j = 0, $mod = 0, $n = 0, $pat_len = 0, $r = 0, $sid = 0, $smp_num = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dummy = sp + 1344|0;
 $ih = sp + 464|0;
 $ii = sp + 80|0;
 $is = sp + 16|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ih,32,1,$7)|0);
 $8 = $2;
 $9 = (_hio_read16l($8)|0);
 $10 = ((($ih)) + 32|0);
 HEAP16[$10>>1] = $9;
 $11 = $2;
 $12 = (_hio_read16l($11)|0);
 $13 = ((($ih)) + 34|0);
 HEAP16[$13>>1] = $12;
 $14 = $2;
 $15 = (_hio_read16l($14)|0);
 $16 = ((($ih)) + 36|0);
 HEAP16[$16>>1] = $15;
 $17 = $2;
 $18 = (_hio_read16l($17)|0);
 $19 = ((($ih)) + 38|0);
 HEAP16[$19>>1] = $18;
 $20 = ((($ih)) + 40|0);
 $21 = $2;
 (_hio_read($20,8,1,$21)|0);
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = ((($ih)) + 48|0);
 HEAP8[$24>>0] = $23;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = ((($ih)) + 49|0);
 HEAP8[$27>>0] = $26;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = ((($ih)) + 50|0);
 HEAP8[$30>>0] = $29;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = ((($ih)) + 51|0);
 HEAP8[$33>>0] = $32;
 $34 = ((($ih)) + 52|0);
 $35 = $2;
 (_hio_read($34,8,1,$35)|0);
 $36 = $2;
 $37 = (_hio_read32b($36)|0);
 $38 = ((($ih)) + 60|0);
 HEAP32[$38>>2] = $37;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = ($39|0)<(32);
  if (!($40)) {
   break;
  }
  $41 = $i;
  $42 = ((($ih)) + 64|0);
  $43 = (($42) + ($41<<4)|0);
  $44 = $2;
  (_hio_read($43,12,1,$44)|0);
  $45 = $2;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = ((($ih)) + 64|0);
  $49 = (($48) + ($47<<4)|0);
  $50 = ((($49)) + 12|0);
  HEAP8[$50>>0] = $46;
  $51 = $2;
  $52 = (_hio_read8($51)|0);
  $53 = $i;
  $54 = ((($ih)) + 64|0);
  $55 = (($54) + ($53<<4)|0);
  $56 = ((($55)) + 13|0);
  HEAP8[$56>>0] = $52;
  $57 = $2;
  $58 = (_hio_read8($57)|0);
  $59 = $i;
  $60 = ((($ih)) + 64|0);
  $61 = (($60) + ($59<<4)|0);
  $62 = ((($61)) + 14|0);
  HEAP8[$62>>0] = $58;
  $63 = $2;
  $64 = (_hio_read8($63)|0);
  $65 = $i;
  $66 = ((($ih)) + 64|0);
  $67 = (($66) + ($65<<4)|0);
  $68 = ((($67)) + 15|0);
  HEAP8[$68>>0] = $64;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = ((($ih)) + 576|0);
 $72 = $2;
 (_hio_read($71,256,1,$72)|0);
 $73 = $mod;
 (_copy_adjust($73,$ih,32)|0);
 $74 = ((($ih)) + 32|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = $75&65535;
 $77 = $mod;
 $78 = ((($77)) + 156|0);
 HEAP32[$78>>2] = $76;
 $79 = ((($ih)) + 36|0);
 $80 = HEAP16[$79>>1]|0;
 $81 = $80&65535;
 $82 = $mod;
 $83 = ((($82)) + 140|0);
 HEAP32[$83>>2] = $81;
 $84 = $mod;
 $85 = ((($84)) + 144|0);
 HEAP32[$85>>2] = 1024;
 $86 = ((($ih)) + 34|0);
 $87 = HEAP16[$86>>1]|0;
 $88 = $87&65535;
 $89 = $mod;
 $90 = ((($89)) + 128|0);
 HEAP32[$90>>2] = $88;
 $91 = ((($ih)) + 38|0);
 $92 = HEAP16[$91>>1]|0;
 $93 = $92&65535;
 $94 = $93 & 1;
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $1;
  $97 = ((($96)) + 1280|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 | 4096;
  HEAP32[$97>>2] = $99;
 }
 $100 = ((($ih)) + 48|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $mod;
 $104 = ((($103)) + 148|0);
 HEAP32[$104>>2] = $102;
 $105 = ((($ih)) + 49|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $mod;
 $109 = ((($108)) + 152|0);
 HEAP32[$109>>2] = $107;
 $110 = $1;
 _set_type($110,4848,$vararg_buffer);
 $i = 0;
 $111 = $mod;
 $112 = ((($111)) + 136|0);
 HEAP32[$112>>2] = 0;
 while(1) {
  $113 = $i;
  $114 = ($113|0)<(32);
  if (!($114)) {
   break;
  }
  $115 = $i;
  $116 = ((($ih)) + 64|0);
  $117 = (($116) + ($115<<4)|0);
  $118 = ((($117)) + 12|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = ($120|0)!=(0);
  if ($121) {
   $122 = $i;
   $123 = (($122) + 1)|0;
   $124 = $mod;
   $125 = ((($124)) + 136|0);
   HEAP32[$125>>2] = $123;
   $126 = $i;
   $127 = ((($ih)) + 64|0);
   $128 = (($127) + ($126<<4)|0);
   $129 = ((($128)) + 13|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $i;
   $133 = $mod;
   $134 = ((($133)) + 184|0);
   $135 = (($134) + (($132*12)|0)|0);
   HEAP32[$135>>2] = $131;
  }
  $136 = $i;
  $137 = (($136) + 1)|0;
  $i = $137;
 }
 $138 = $mod;
 $139 = ((($138)) + 128|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $mod;
 $142 = ((($141)) + 136|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = Math_imul($140, $143)|0;
 $145 = $mod;
 $146 = ((($145)) + 132|0);
 HEAP32[$146>>2] = $144;
 $147 = $mod;
 $148 = ((($147)) + 952|0);
 $149 = ((($ih)) + 576|0);
 $150 = $mod;
 $151 = ((($150)) + 156|0);
 $152 = HEAP32[$151>>2]|0;
 _memcpy(($148|0),($149|0),($152|0))|0;
 $i = 0;
 while(1) {
  $153 = $i;
  $154 = $mod;
  $155 = ((($154)) + 156|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($153|0)<($156|0);
  if (!($157)) {
   break;
  }
  $158 = $i;
  $159 = $mod;
  $160 = ((($159)) + 952|0);
  $161 = (($160) + ($158)|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162&255;
  $164 = ($163|0)==(255);
  if ($164) {
   $165 = $i;
   $166 = $mod;
   $167 = ((($166)) + 952|0);
   $168 = (($167) + ($165)|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = (($169) + -1)<<24>>24;
   HEAP8[$168>>0] = $170;
  }
  $171 = $i;
  $172 = (($171) + 1)|0;
  $i = $172;
 }
 $173 = $1;
 $174 = ((($173)) + 1264|0);
 HEAP32[$174>>2] = 8363;
 $175 = $mod;
 $176 = (_pattern_init($175)|0);
 $177 = ($176|0)<(0);
 if ($177) {
  $0 = -1;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 $i = 0;
 while(1) {
  $178 = $i;
  $179 = $mod;
  $180 = ((($179)) + 128|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($178|0)<($181|0);
  if (!($182)) {
   break;
  }
  $183 = $2;
  $184 = (_hio_read16l($183)|0);
  $185 = $184&65535;
  $186 = (($185) - 4)|0;
  $pat_len = $186;
  $187 = $mod;
  $188 = $i;
  $189 = $2;
  $190 = (_hio_read16l($189)|0);
  $191 = $190&65535;
  $192 = (_pattern_tracks_alloc($187,$188,$191)|0);
  $193 = ($192|0)<(0);
  if ($193) {
   label = 21;
   break;
  }
  $r = 0;
  while(1) {
   $194 = $pat_len;
   $195 = (($194) + -1)|0;
   $pat_len = $195;
   $196 = ($195|0)>=(0);
   if (!($196)) {
    break;
   }
   $197 = $2;
   $198 = (_hio_read8($197)|0);
   $b = $198;
   $199 = $b;
   $200 = $199&255;
   $201 = ($200|0)==(0);
   if ($201) {
    $202 = $r;
    $203 = (($202) + 1)|0;
    $r = $203;
    continue;
   }
   $204 = $b;
   $205 = $204&255;
   $206 = $205 & 31;
   $c = $206;
   $207 = $c;
   $208 = $mod;
   $209 = ((($208)) + 136|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ($207|0)>=($210|0);
   if ($211) {
    $230 = $dummy;
   } else {
    $212 = $r;
    $213 = $c;
    $214 = $i;
    $215 = $1;
    $216 = ((($215)) + 168|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = (($217) + ($214<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ((($219)) + 4|0);
    $221 = (($220) + ($213<<2)|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = $1;
    $224 = ((($223)) + 172|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = (($225) + ($222<<2)|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = ((($227)) + 4|0);
    $229 = (($228) + ($212<<3)|0);
    $230 = $229;
   }
   $event = $230;
   $231 = $b;
   $232 = $231&255;
   $233 = $232 & 32;
   $234 = ($233|0)!=(0);
   if ($234) {
    $235 = $2;
    $236 = (_hio_read8($235)|0);
    $n = $236;
    $237 = $n;
    $238 = $237&255;
    if ((($238|0) == 160) | (($238|0) == 255)) {
     $n = -127;
    } else {
     $239 = $n;
     $240 = $239&255;
     $241 = $240 & 240;
     $242 = $241 >> 4;
     $243 = ($242*12)|0;
     $244 = (13 + ($243))|0;
     $245 = $n;
     $246 = $245&255;
     $247 = $246 & 15;
     $248 = (($244) + ($247))|0;
     $249 = $248&255;
     $n = $249;
    }
    $250 = $n;
    $251 = $event;
    HEAP8[$251>>0] = $250;
    $252 = $2;
    $253 = (_hio_read8($252)|0);
    $254 = $event;
    $255 = ((($254)) + 1|0);
    HEAP8[$255>>0] = $253;
    $256 = $pat_len;
    $257 = (($256) - 2)|0;
    $pat_len = $257;
   }
   $258 = $b;
   $259 = $258&255;
   $260 = $259 & 128;
   $261 = ($260|0)!=(0);
   if ($261) {
    $262 = $2;
    $263 = (_hio_read8($262)|0);
    $264 = $event;
    $265 = ((($264)) + 3|0);
    HEAP8[$265>>0] = $263;
    $266 = $2;
    $267 = (_hio_read8($266)|0);
    $268 = $event;
    $269 = ((($268)) + 4|0);
    HEAP8[$269>>0] = $267;
    $270 = $c;
    $271 = $event;
    $272 = ((($271)) + 3|0);
    $273 = $event;
    $274 = ((($273)) + 4|0);
    _xlat_fx225($270,$272,$274);
    $275 = $pat_len;
    $276 = (($275) - 2)|0;
    $pat_len = $276;
   }
   $277 = $b;
   $278 = $277&255;
   $279 = $278 & 64;
   $280 = ($279|0)!=(0);
   if (!($280)) {
    continue;
   }
   $281 = $2;
   $282 = (_hio_read8($281)|0);
   $283 = $event;
   $284 = ((($283)) + 5|0);
   HEAP8[$284>>0] = $282;
   $285 = $2;
   $286 = (_hio_read8($285)|0);
   $287 = $event;
   $288 = ((($287)) + 6|0);
   HEAP8[$288>>0] = $286;
   $289 = $c;
   $290 = $event;
   $291 = ((($290)) + 5|0);
   $292 = $event;
   $293 = ((($292)) + 6|0);
   _xlat_fx225($289,$291,$293);
   $294 = $pat_len;
   $295 = (($294) - 2)|0;
   $pat_len = $295;
  }
  $296 = $i;
  $297 = (($296) + 1)|0;
  $i = $297;
 }
 if ((label|0) == 21) {
  $0 = -1;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 $298 = $mod;
 $299 = (_instrument_init($298)|0);
 $300 = ($299|0)<(0);
 if ($300) {
  $0 = -1;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 $i = 0;
 $smp_num = 0;
 L59: while(1) {
  $301 = $i;
  $302 = $mod;
  $303 = ((($302)) + 140|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ($301|0)<($304|0);
  if (!($305)) {
   label = 74;
   break;
  }
  $306 = $2;
  (_hio_read($ii,32,1,$306)|0);
  $307 = ((($ii)) + 32|0);
  $308 = $2;
  (_hio_read($307,120,1,$308)|0);
  $309 = ((($ii)) + 152|0);
  $310 = $2;
  (_hio_read($309,8,1,$310)|0);
  $j = 0;
  while(1) {
   $311 = $j;
   $312 = ($311|0)<(32);
   if (!($312)) {
    break;
   }
   $313 = $2;
   $314 = (_hio_read16l($313)|0);
   $315 = $j;
   $316 = ((($ii)) + 160|0);
   $317 = (($316) + ($315<<1)|0);
   HEAP16[$317>>1] = $314;
   $318 = $j;
   $319 = (($318) + 1)|0;
   $j = $319;
  }
  $j = 0;
  while(1) {
   $320 = $j;
   $321 = ($320|0)<(32);
   if (!($321)) {
    break;
   }
   $322 = $2;
   $323 = (_hio_read16l($322)|0);
   $324 = $j;
   $325 = ((($ii)) + 224|0);
   $326 = (($325) + ($324<<1)|0);
   HEAP16[$326>>1] = $323;
   $327 = $j;
   $328 = (($327) + 1)|0;
   $j = $328;
  }
  $j = 0;
  while(1) {
   $329 = $j;
   $330 = ($329|0)<(32);
   if (!($330)) {
    break;
   }
   $331 = $2;
   $332 = (_hio_read16l($331)|0);
   $333 = $j;
   $334 = ((($ii)) + 288|0);
   $335 = (($334) + ($333<<1)|0);
   HEAP16[$335>>1] = $332;
   $336 = $j;
   $337 = (($336) + 1)|0;
   $j = $337;
  }
  $j = 0;
  while(1) {
   $338 = $j;
   $339 = ($338|0)<(3);
   $340 = $2;
   if (!($339)) {
    break;
   }
   $341 = (_hio_read8($340)|0);
   $342 = $j;
   $343 = ((($ii)) + 352|0);
   $344 = (($343) + ($342<<3)|0);
   HEAP8[$344>>0] = $341;
   $345 = $2;
   $346 = (_hio_read8($345)|0);
   $347 = $j;
   $348 = ((($ii)) + 352|0);
   $349 = (($348) + ($347<<3)|0);
   $350 = ((($349)) + 1|0);
   HEAP8[$350>>0] = $346;
   $351 = $2;
   $352 = (_hio_read8($351)|0);
   $353 = $j;
   $354 = ((($ii)) + 352|0);
   $355 = (($354) + ($353<<3)|0);
   $356 = ((($355)) + 2|0);
   HEAP8[$356>>0] = $352;
   $357 = $2;
   $358 = (_hio_read8($357)|0);
   $359 = $j;
   $360 = ((($ii)) + 352|0);
   $361 = (($360) + ($359<<3)|0);
   $362 = ((($361)) + 3|0);
   HEAP8[$362>>0] = $358;
   $363 = $2;
   $364 = (_hio_read8($363)|0);
   $365 = $j;
   $366 = ((($ii)) + 352|0);
   $367 = (($366) + ($365<<3)|0);
   $368 = ((($367)) + 4|0);
   HEAP8[$368>>0] = $364;
   $369 = $j;
   $370 = ((($ii)) + 352|0);
   $371 = (($370) + ($369<<3)|0);
   $372 = ((($371)) + 5|0);
   $373 = $2;
   (_hio_read($372,3,1,$373)|0);
   $374 = $j;
   $375 = (($374) + 1)|0;
   $j = $375;
  }
  $376 = (_hio_read16l($340)|0);
  $377 = ((($ii)) + 376|0);
  HEAP16[$377>>1] = $376;
  $378 = $2;
  $379 = (_hio_read16l($378)|0);
  $380 = ((($ii)) + 378|0);
  HEAP16[$380>>1] = $379;
  $381 = $2;
  $382 = (_hio_read32b($381)|0);
  $383 = ((($ii)) + 380|0);
  HEAP32[$383>>2] = $382;
  $384 = ((($ii)) + 380|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = ($385|0)!=(1229533488);
  if ($386) {
   label = 55;
   break;
  }
  $387 = ((($ii)) + 378|0);
  $388 = HEAP16[$387>>1]|0;
  $389 = $388&65535;
  $390 = $i;
  $391 = $mod;
  $392 = ((($391)) + 176|0);
  $393 = HEAP32[$392>>2]|0;
  $394 = (($393) + (($390*764)|0)|0);
  $395 = ((($394)) + 36|0);
  HEAP32[$395>>2] = $389;
  $396 = $i;
  $397 = $mod;
  $398 = ((($397)) + 176|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (($399) + (($396*764)|0)|0);
  $401 = ((($400)) + 36|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = ($402|0)!=(0);
  if ($403) {
   $404 = $mod;
   $405 = $i;
   $406 = $i;
   $407 = $mod;
   $408 = ((($407)) + 176|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = (($409) + (($406*764)|0)|0);
   $411 = ((($410)) + 36|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = (_subinstrument_alloc($404,$405,$412)|0);
   $414 = ($413|0)<(0);
   if ($414) {
    label = 58;
    break;
   }
  }
  (_adjust_string($ii)|0);
  $415 = $i;
  $416 = $mod;
  $417 = ((($416)) + 176|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = (($418) + (($415*764)|0)|0);
  (_strncpy(($419|0),($ii|0),24)|0);
  $j = 0;
  while(1) {
   $420 = $j;
   $421 = ($420|0)<(108);
   if (!($421)) {
    break;
   }
   $422 = $j;
   $423 = ((($ii)) + 32|0);
   $424 = (($423) + ($422)|0);
   $425 = HEAP8[$424>>0]|0;
   $426 = $j;
   $427 = (($426) + 12)|0;
   $428 = $i;
   $429 = $mod;
   $430 = ((($429)) + 176|0);
   $431 = HEAP32[$430>>2]|0;
   $432 = (($431) + (($428*764)|0)|0);
   $433 = ((($432)) + 512|0);
   $434 = (($433) + ($427<<1)|0);
   HEAP8[$434>>0] = $425;
   $435 = $j;
   $436 = (($435) + 1)|0;
   $j = $436;
  }
  $437 = ((($ii)) + 352|0);
  $438 = HEAP8[$437>>0]|0;
  $439 = $438&255;
  $440 = $i;
  $441 = $mod;
  $442 = ((($441)) + 176|0);
  $443 = HEAP32[$442>>2]|0;
  $444 = (($443) + (($440*764)|0)|0);
  $445 = ((($444)) + 44|0);
  $446 = ((($445)) + 4|0);
  HEAP32[$446>>2] = $439;
  $447 = ((($ii)) + 352|0);
  $448 = ((($447)) + 1|0);
  $449 = HEAP8[$448>>0]|0;
  $450 = $449&255;
  $451 = $i;
  $452 = $mod;
  $453 = ((($452)) + 176|0);
  $454 = HEAP32[$453>>2]|0;
  $455 = (($454) + (($451*764)|0)|0);
  $456 = ((($455)) + 44|0);
  $457 = ((($456)) + 12|0);
  HEAP32[$457>>2] = $450;
  $458 = ((($ii)) + 352|0);
  $459 = ((($458)) + 2|0);
  $460 = HEAP8[$459>>0]|0;
  $461 = $460&255;
  $462 = $i;
  $463 = $mod;
  $464 = ((($463)) + 176|0);
  $465 = HEAP32[$464>>2]|0;
  $466 = (($465) + (($462*764)|0)|0);
  $467 = ((($466)) + 44|0);
  $468 = ((($467)) + 20|0);
  HEAP32[$468>>2] = $461;
  $469 = ((($ii)) + 352|0);
  $470 = ((($469)) + 3|0);
  $471 = HEAP8[$470>>0]|0;
  $472 = $471&255;
  $473 = $i;
  $474 = $mod;
  $475 = ((($474)) + 176|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = (($476) + (($473*764)|0)|0);
  $478 = ((($477)) + 44|0);
  $479 = ((($478)) + 24|0);
  HEAP32[$479>>2] = $472;
  $480 = ((($ii)) + 352|0);
  $481 = ((($480)) + 4|0);
  $482 = HEAP8[$481>>0]|0;
  $483 = $482&255;
  $484 = $483 & 1;
  $485 = ($484|0)!=(0);
  $486 = $485 ? 1 : 0;
  $487 = $i;
  $488 = $mod;
  $489 = ((($488)) + 176|0);
  $490 = HEAP32[$489>>2]|0;
  $491 = (($490) + (($487*764)|0)|0);
  $492 = ((($491)) + 44|0);
  HEAP32[$492>>2] = $486;
  $493 = ((($ii)) + 352|0);
  $494 = ((($493)) + 4|0);
  $495 = HEAP8[$494>>0]|0;
  $496 = $495&255;
  $497 = $496 & 2;
  $498 = ($497|0)!=(0);
  $499 = $498 ? 2 : 0;
  $500 = $i;
  $501 = $mod;
  $502 = ((($501)) + 176|0);
  $503 = HEAP32[$502>>2]|0;
  $504 = (($503) + (($500*764)|0)|0);
  $505 = ((($504)) + 44|0);
  $506 = HEAP32[$505>>2]|0;
  $507 = $506 | $499;
  HEAP32[$505>>2] = $507;
  $508 = ((($ii)) + 352|0);
  $509 = ((($508)) + 4|0);
  $510 = HEAP8[$509>>0]|0;
  $511 = $510&255;
  $512 = $511 & 4;
  $513 = ($512|0)!=(0);
  $514 = $513 ? 4 : 0;
  $515 = $i;
  $516 = $mod;
  $517 = ((($516)) + 176|0);
  $518 = HEAP32[$517>>2]|0;
  $519 = (($518) + (($515*764)|0)|0);
  $520 = ((($519)) + 44|0);
  $521 = HEAP32[$520>>2]|0;
  $522 = $521 | $514;
  HEAP32[$520>>2] = $522;
  $j = 0;
  while(1) {
   $523 = $j;
   $524 = $i;
   $525 = $mod;
   $526 = ((($525)) + 176|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = (($527) + (($524*764)|0)|0);
   $529 = ((($528)) + 44|0);
   $530 = ((($529)) + 4|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = ($523|0)<($531|0);
   if (!($532)) {
    break;
   }
   $533 = $j;
   $534 = $533<<1;
   $535 = ((($ii)) + 160|0);
   $536 = (($535) + ($534<<1)|0);
   $537 = HEAP16[$536>>1]|0;
   $538 = $j;
   $539 = $538<<1;
   $540 = $i;
   $541 = $mod;
   $542 = ((($541)) + 176|0);
   $543 = HEAP32[$542>>2]|0;
   $544 = (($543) + (($540*764)|0)|0);
   $545 = ((($544)) + 44|0);
   $546 = ((($545)) + 28|0);
   $547 = (($546) + ($539<<1)|0);
   HEAP16[$547>>1] = $537;
   $548 = $j;
   $549 = $548<<1;
   $550 = (($549) + 1)|0;
   $551 = ((($ii)) + 160|0);
   $552 = (($551) + ($550<<1)|0);
   $553 = HEAP16[$552>>1]|0;
   $554 = $j;
   $555 = $554<<1;
   $556 = (($555) + 1)|0;
   $557 = $i;
   $558 = $mod;
   $559 = ((($558)) + 176|0);
   $560 = HEAP32[$559>>2]|0;
   $561 = (($560) + (($557*764)|0)|0);
   $562 = ((($561)) + 44|0);
   $563 = ((($562)) + 28|0);
   $564 = (($563) + ($556<<1)|0);
   HEAP16[$564>>1] = $553;
   $565 = $j;
   $566 = (($565) + 1)|0;
   $j = $566;
  }
  $j = 0;
  while(1) {
   $567 = $j;
   $568 = ((($ii)) + 378|0);
   $569 = HEAP16[$568>>1]|0;
   $570 = $569&65535;
   $571 = ($567|0)<($570|0);
   if (!($571)) {
    break;
   }
   $572 = $2;
   (_hio_read($is,13,1,$572)|0);
   $573 = ((($is)) + 13|0);
   $574 = $2;
   (_hio_read($573,3,1,$574)|0);
   $575 = $2;
   $576 = (_hio_read32l($575)|0);
   $577 = ((($is)) + 16|0);
   HEAP32[$577>>2] = $576;
   $578 = $2;
   $579 = (_hio_read32l($578)|0);
   $580 = ((($is)) + 20|0);
   HEAP32[$580>>2] = $579;
   $581 = $2;
   $582 = (_hio_read32l($581)|0);
   $583 = ((($is)) + 24|0);
   HEAP32[$583>>2] = $582;
   $584 = $2;
   $585 = (_hio_read32l($584)|0);
   $586 = ((($is)) + 28|0);
   HEAP32[$586>>2] = $585;
   $587 = $2;
   $588 = (_hio_read8($587)|0);
   $589 = ((($is)) + 32|0);
   HEAP8[$589>>0] = $588;
   $590 = $2;
   $591 = (_hio_read8($590)|0);
   $592 = ((($is)) + 33|0);
   HEAP8[$592>>0] = $591;
   $593 = ((($is)) + 34|0);
   $594 = $2;
   (_hio_read($593,14,1,$594)|0);
   $595 = $2;
   $596 = (_hio_read8($595)|0);
   $597 = ((($is)) + 48|0);
   HEAP8[$597>>0] = $596;
   $598 = ((($is)) + 49|0);
   $599 = $2;
   (_hio_read($598,5,1,$599)|0);
   $600 = $2;
   $601 = (_hio_read16l($600)|0);
   $602 = ((($is)) + 54|0);
   HEAP16[$602>>1] = $601;
   $603 = $2;
   $604 = (_hio_read32l($603)|0);
   $605 = ((($is)) + 56|0);
   HEAP32[$605>>2] = $604;
   $606 = $2;
   $607 = (_hio_read32b($606)|0);
   $608 = ((($is)) + 60|0);
   HEAP32[$608>>2] = $607;
   $609 = $smp_num;
   $610 = $j;
   $611 = $i;
   $612 = $mod;
   $613 = ((($612)) + 176|0);
   $614 = HEAP32[$613>>2]|0;
   $615 = (($614) + (($611*764)|0)|0);
   $616 = ((($615)) + 756|0);
   $617 = HEAP32[$616>>2]|0;
   $618 = (($617) + ($610<<6)|0);
   $619 = ((($618)) + 40|0);
   HEAP32[$619>>2] = $609;
   $620 = ((($is)) + 32|0);
   $621 = HEAP8[$620>>0]|0;
   $622 = $621&255;
   $623 = $j;
   $624 = $i;
   $625 = $mod;
   $626 = ((($625)) + 176|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = (($627) + (($624*764)|0)|0);
   $629 = ((($628)) + 756|0);
   $630 = HEAP32[$629>>2]|0;
   $631 = (($630) + ($623<<6)|0);
   HEAP32[$631>>2] = $622;
   $632 = ((($is)) + 33|0);
   $633 = HEAP8[$632>>0]|0;
   $634 = $633&255;
   $635 = $j;
   $636 = $i;
   $637 = $mod;
   $638 = ((($637)) + 176|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = (($639) + (($636*764)|0)|0);
   $641 = ((($640)) + 756|0);
   $642 = HEAP32[$641>>2]|0;
   $643 = (($642) + ($635<<6)|0);
   $644 = ((($643)) + 8|0);
   HEAP32[$644>>2] = $634;
   $645 = ((($is)) + 16|0);
   $646 = HEAP32[$645>>2]|0;
   $647 = $smp_num;
   $648 = $mod;
   $649 = ((($648)) + 180|0);
   $650 = HEAP32[$649>>2]|0;
   $651 = (($650) + (($647*52)|0)|0);
   $652 = ((($651)) + 32|0);
   HEAP32[$652>>2] = $646;
   $653 = ((($is)) + 20|0);
   $654 = HEAP32[$653>>2]|0;
   $655 = $smp_num;
   $656 = $mod;
   $657 = ((($656)) + 180|0);
   $658 = HEAP32[$657>>2]|0;
   $659 = (($658) + (($655*52)|0)|0);
   $660 = ((($659)) + 36|0);
   HEAP32[$660>>2] = $654;
   $661 = ((($is)) + 24|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = $smp_num;
   $664 = $mod;
   $665 = ((($664)) + 180|0);
   $666 = HEAP32[$665>>2]|0;
   $667 = (($666) + (($663*52)|0)|0);
   $668 = ((($667)) + 40|0);
   HEAP32[$668>>2] = $662;
   $669 = ((($is)) + 48|0);
   $670 = HEAP8[$669>>0]|0;
   $671 = $670&255;
   $672 = $671 & 1;
   $673 = ($672|0)!=(0);
   $674 = $673 ? 2 : 0;
   $675 = $smp_num;
   $676 = $mod;
   $677 = ((($676)) + 180|0);
   $678 = HEAP32[$677>>2]|0;
   $679 = (($678) + (($675*52)|0)|0);
   $680 = ((($679)) + 44|0);
   HEAP32[$680>>2] = $674;
   $681 = ((($is)) + 48|0);
   $682 = HEAP8[$681>>0]|0;
   $683 = $682&255;
   $684 = $683 & 4;
   $685 = ($684|0)!=(0);
   if ($685) {
    $686 = $smp_num;
    $687 = $mod;
    $688 = ((($687)) + 180|0);
    $689 = HEAP32[$688>>2]|0;
    $690 = (($689) + (($686*52)|0)|0);
    $691 = ((($690)) + 44|0);
    $692 = HEAP32[$691>>2]|0;
    $693 = $692 | 1;
    HEAP32[$691>>2] = $693;
    $694 = $smp_num;
    $695 = $mod;
    $696 = ((($695)) + 180|0);
    $697 = HEAP32[$696>>2]|0;
    $698 = (($697) + (($694*52)|0)|0);
    $699 = ((($698)) + 32|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = $700 >> 1;
    HEAP32[$699>>2] = $701;
    $702 = $smp_num;
    $703 = $mod;
    $704 = ((($703)) + 180|0);
    $705 = HEAP32[$704>>2]|0;
    $706 = (($705) + (($702*52)|0)|0);
    $707 = ((($706)) + 36|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = $708 >> 1;
    HEAP32[$707>>2] = $709;
    $710 = $smp_num;
    $711 = $mod;
    $712 = ((($711)) + 180|0);
    $713 = HEAP32[$712>>2]|0;
    $714 = (($713) + (($710*52)|0)|0);
    $715 = ((($714)) + 40|0);
    $716 = HEAP32[$715>>2]|0;
    $717 = $716 >> 1;
    HEAP32[$715>>2] = $717;
   }
   $718 = ((($is)) + 28|0);
   $719 = HEAP32[$718>>2]|0;
   $720 = $j;
   $721 = $i;
   $722 = $mod;
   $723 = ((($722)) + 176|0);
   $724 = HEAP32[$723>>2]|0;
   $725 = (($724) + (($721*764)|0)|0);
   $726 = ((($725)) + 756|0);
   $727 = HEAP32[$726>>2]|0;
   $728 = (($727) + ($720<<6)|0);
   $729 = ((($728)) + 12|0);
   $730 = $j;
   $731 = $i;
   $732 = $mod;
   $733 = ((($732)) + 176|0);
   $734 = HEAP32[$733>>2]|0;
   $735 = (($734) + (($731*764)|0)|0);
   $736 = ((($735)) + 756|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = (($737) + ($730<<6)|0);
   $739 = ((($738)) + 16|0);
   _c2spd_to_note($719,$729,$739);
   $740 = $smp_num;
   $741 = $mod;
   $742 = ((($741)) + 180|0);
   $743 = HEAP32[$742>>2]|0;
   $744 = (($743) + (($740*52)|0)|0);
   $745 = ((($744)) + 32|0);
   $746 = HEAP32[$745>>2]|0;
   $747 = ($746|0)!=(0);
   if ($747) {
    $748 = $j;
    $749 = $i;
    $750 = $mod;
    $751 = ((($750)) + 176|0);
    $752 = HEAP32[$751>>2]|0;
    $753 = (($752) + (($749*764)|0)|0);
    $754 = ((($753)) + 756|0);
    $755 = HEAP32[$754>>2]|0;
    $756 = (($755) + ($748<<6)|0);
    $757 = ((($756)) + 40|0);
    $758 = HEAP32[$757>>2]|0;
    $sid = $758;
    $759 = $1;
    $760 = $2;
    $761 = $sid;
    $762 = $mod;
    $763 = ((($762)) + 180|0);
    $764 = HEAP32[$763>>2]|0;
    $765 = (($764) + (($761*52)|0)|0);
    $766 = (_load_sample($759,$760,0,$765,0)|0);
    $767 = ($766|0)<(0);
    if ($767) {
     label = 71;
     break L59;
    }
   }
   $768 = $j;
   $769 = (($768) + 1)|0;
   $j = $769;
   $770 = $smp_num;
   $771 = (($770) + 1)|0;
   $smp_num = $771;
  }
  $772 = $i;
  $773 = (($772) + 1)|0;
  $i = $773;
 }
 if ((label|0) == 55) {
  $0 = -2;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 else if ((label|0) == 58) {
  $0 = -1;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 else if ((label|0) == 71) {
  $0 = -1;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 else if ((label|0) == 74) {
  $774 = $smp_num;
  $775 = $mod;
  $776 = ((($775)) + 144|0);
  HEAP32[$776>>2] = $774;
  $777 = $mod;
  $778 = ((($777)) + 180|0);
  $779 = HEAP32[$778>>2]|0;
  $780 = $mod;
  $781 = ((($780)) + 144|0);
  $782 = HEAP32[$781>>2]|0;
  $783 = ($782*52)|0;
  $784 = (_realloc($779,$783)|0);
  $785 = $mod;
  $786 = ((($785)) + 180|0);
  HEAP32[$786>>2] = $784;
  $787 = $1;
  $788 = ((($787)) + 1280|0);
  $789 = HEAP32[$788>>2]|0;
  $790 = $789 | 293667361;
  HEAP32[$788>>2] = $790;
  $791 = $1;
  $792 = ((($791)) + 1284|0);
  HEAP32[$792>>2] = 2;
  $0 = 0;
  $793 = $0;
  STACKTOP = sp;return ($793|0);
 }
 return (0)|0;
}
function _xlat_fx225($c,$fxt,$fxp) {
 $c = $c|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $fxt;
 $2 = $fxp;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 240;
 $7 = $6 >> 4;
 $8 = $7&255;
 $h = $8;
 $9 = $2;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 15;
 $13 = $12&255;
 $l = $13;
 $14 = $1;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (4872 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $1;
 HEAP8[$19>>0] = $18;
 $20 = $18&255;
 if ((($20|0) == 254)) {
  $21 = $1;
  HEAP8[$21>>0] = 1;
  $22 = $2;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)<(48);
  $26 = $2;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  if ($25) {
   $29 = $28 >> 2;
   $30 = $29 & 15;
   $31 = $30 | 224;
   $32 = $31&255;
   $33 = $2;
   HEAP8[$33>>0] = $32;
   STACKTOP = sp;return;
  } else {
   $34 = $28 >> 4;
   $35 = $34 & 15;
   $36 = $35 | 240;
   $37 = $36&255;
   $38 = $2;
   HEAP8[$38>>0] = $37;
   STACKTOP = sp;return;
  }
 } else if ((($20|0) == 255)) {
  $91 = $2;
  HEAP8[$91>>0] = 0;
  $92 = $1;
  HEAP8[$92>>0] = 0;
  STACKTOP = sp;return;
 } else if ((($20|0) == 14)) {
  $57 = $h;
  $58 = $57&255;
  switch ($58|0) {
  case 8:  {
   $71 = $l;
   $72 = $71&255;
   $73 = $72 | 112;
   $74 = $73&255;
   $75 = $2;
   HEAP8[$75>>0] = $74;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $61 = $l;
   $62 = $61&255;
   $63 = $62 | 48;
   $64 = $63&255;
   $65 = $2;
   HEAP8[$65>>0] = $64;
   STACKTOP = sp;return;
   break;
  }
  case 15: case 14: case 9: case 7: case 6: case 4: case 2: case 1:  {
   $59 = $1;
   HEAP8[$59>>0] = 0;
   $60 = $2;
   HEAP8[$60>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $66 = $l;
   $67 = $66&255;
   $68 = $67 | 64;
   $69 = $68&255;
   $70 = $2;
   HEAP8[$70>>0] = $69;
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $81 = $l;
   $82 = $81&255;
   $83 = $82 | 224;
   $84 = $83&255;
   $85 = $2;
   HEAP8[$85>>0] = $84;
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $76 = $l;
   $77 = $76&255;
   $78 = $77 | 96;
   $79 = $78&255;
   $80 = $2;
   HEAP8[$80>>0] = $79;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $86 = $l;
   $87 = $86&255;
   $88 = ($87|0)==(0);
   if (!($88)) {
    STACKTOP = sp;return;
   }
   $89 = $2;
   HEAP8[$89>>0] = 0;
   $90 = $1;
   HEAP8[$90>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } else if ((($20|0) == 253)) {
  $39 = $1;
  HEAP8[$39>>0] = 2;
  $40 = $2;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)<(48);
  $44 = $2;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  if ($43) {
   $47 = $46 >> 2;
   $48 = $47 & 15;
   $49 = $48 | 224;
   $50 = $49&255;
   $51 = $2;
   HEAP8[$51>>0] = $50;
   STACKTOP = sp;return;
  } else {
   $52 = $46 >> 4;
   $53 = $52 & 15;
   $54 = $53 | 240;
   $55 = $54&255;
   $56 = $2;
   HEAP8[$56>>0] = $55;
   STACKTOP = sp;return;
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _digi_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,20,$4)|0);
 $6 = ($5>>>0)<(20);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,4968,19)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    (_hio_seek($9,156,1)|0);
    $10 = $1;
    (_hio_seek($10,384,1)|0);
    $11 = $1;
    (_hio_seek($11,64,1)|0);
    $12 = $1;
    $13 = $2;
    _read_title($12,$13,32);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _digi_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $chn_table = 0, $dh = 0, $digi_event = 0, $event = 0, $i = 0, $j = 0;
 var $k = 0, $mod = 0, $vararg_buffer = 0, $w = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1696|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dh = sp + 20|0;
 $digi_event = sp + 1688|0;
 $chn_table = sp + 1624|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($dh,20,1,$7)|0);
 $8 = ((($dh)) + 20|0);
 $9 = $2;
 (_hio_read($8,4,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($dh)) + 24|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($dh)) + 25|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($dh)) + 26|0);
 HEAP8[$18>>0] = $17;
 $19 = ((($dh)) + 27|0);
 $20 = $2;
 (_hio_read($19,19,1,$20)|0);
 $21 = $2;
 $22 = (_hio_read8($21)|0);
 $23 = ((($dh)) + 46|0);
 HEAP8[$23>>0] = $22;
 $24 = $2;
 $25 = (_hio_read8($24)|0);
 $26 = ((($dh)) + 47|0);
 HEAP8[$26>>0] = $25;
 $27 = ((($dh)) + 48|0);
 $28 = $2;
 (_hio_read($27,128,1,$28)|0);
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(31);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = (_hio_read32b($31)|0);
  $33 = $i;
  $34 = ((($dh)) + 176|0);
  $35 = (($34) + ($33<<2)|0);
  HEAP32[$35>>2] = $32;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(31);
  if (!($39)) {
   break;
  }
  $40 = $2;
  $41 = (_hio_read32b($40)|0);
  $42 = $i;
  $43 = ((($dh)) + 300|0);
  $44 = (($43) + ($42<<2)|0);
  HEAP32[$44>>2] = $41;
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = ($47|0)<(31);
  if (!($48)) {
   break;
  }
  $49 = $2;
  $50 = (_hio_read32b($49)|0);
  $51 = $i;
  $52 = ((($dh)) + 424|0);
  $53 = (($52) + ($51<<2)|0);
  HEAP32[$53>>2] = $50;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(31);
  if (!($57)) {
   break;
  }
  $58 = $2;
  $59 = (_hio_read8($58)|0);
  $60 = $i;
  $61 = ((($dh)) + 548|0);
  $62 = (($61) + ($60)|0);
  HEAP8[$62>>0] = $59;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $i = 0;
 while(1) {
  $65 = $i;
  $66 = ($65|0)<(31);
  if (!($66)) {
   break;
  }
  $67 = $2;
  $68 = (_hio_read8s($67)|0);
  $69 = $i;
  $70 = ((($dh)) + 579|0);
  $71 = (($70) + ($69)|0);
  HEAP8[$71>>0] = $68;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $74 = ((($dh)) + 610|0);
 $75 = $2;
 (_hio_read($74,32,1,$75)|0);
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(31);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = ((($dh)) + 642|0);
  $80 = (($79) + (($78*30)|0)|0);
  $81 = $2;
  (_hio_read($80,30,1,$81)|0);
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $84 = $mod;
 $85 = ((($84)) + 140|0);
 HEAP32[$85>>2] = 31;
 $86 = $mod;
 $87 = ((($86)) + 140|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $mod;
 $90 = ((($89)) + 144|0);
 HEAP32[$90>>2] = $88;
 $91 = ((($dh)) + 46|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = (($93) + 1)|0;
 $95 = $mod;
 $96 = ((($95)) + 128|0);
 HEAP32[$96>>2] = $94;
 $97 = ((($dh)) + 25|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = $mod;
 $101 = ((($100)) + 136|0);
 HEAP32[$101>>2] = $99;
 $102 = $mod;
 $103 = ((($102)) + 128|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $mod;
 $106 = ((($105)) + 136|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = Math_imul($104, $107)|0;
 $109 = $mod;
 $110 = ((($109)) + 132|0);
 HEAP32[$110>>2] = $108;
 $111 = ((($dh)) + 47|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = $112&255;
 $114 = (($113) + 1)|0;
 $115 = $mod;
 $116 = ((($115)) + 156|0);
 HEAP32[$116>>2] = $114;
 $117 = $1;
 $118 = ((($117)) + 1280|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 | 8192;
 HEAP32[$118>>2] = $120;
 $121 = $mod;
 $122 = ((($dh)) + 610|0);
 (_copy_adjust($121,$122,32)|0);
 $123 = $1;
 $124 = ((($dh)) + 20|0);
 HEAP32[$vararg_buffer>>2] = $124;
 _set_type($123,4944,$vararg_buffer);
 $i = 0;
 while(1) {
  $125 = $i;
  $126 = $mod;
  $127 = ((($126)) + 156|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($125|0)<($128|0);
  if (!($129)) {
   break;
  }
  $130 = $i;
  $131 = ((($dh)) + 48|0);
  $132 = (($131) + ($130)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $i;
  $135 = $mod;
  $136 = ((($135)) + 952|0);
  $137 = (($136) + ($134)|0);
  HEAP8[$137>>0] = $133;
  $138 = $i;
  $139 = (($138) + 1)|0;
  $i = $139;
 }
 $140 = $mod;
 $141 = (_instrument_init($140)|0);
 $142 = ($141|0)<(0);
 if ($142) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $i = 0;
 while(1) {
  $143 = $i;
  $144 = $mod;
  $145 = ((($144)) + 140|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($143|0)<($146|0);
  $148 = $mod;
  if (!($147)) {
   break;
  }
  $149 = $i;
  $150 = (_subinstrument_alloc($148,$149,1)|0);
  $151 = ($150|0)<(0);
  if ($151) {
   label = 27;
   break;
  }
  $152 = $i;
  $153 = ((($dh)) + 176|0);
  $154 = (($153) + ($152<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $i;
  $157 = $mod;
  $158 = ((($157)) + 180|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + (($156*52)|0)|0);
  $161 = ((($160)) + 32|0);
  HEAP32[$161>>2] = $155;
  $162 = $i;
  $163 = ((($dh)) + 300|0);
  $164 = (($163) + ($162<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $i;
  $167 = $mod;
  $168 = ((($167)) + 180|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + (($166*52)|0)|0);
  $171 = ((($170)) + 36|0);
  HEAP32[$171>>2] = $165;
  $172 = $i;
  $173 = ((($dh)) + 300|0);
  $174 = (($173) + ($172<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $i;
  $177 = ((($dh)) + 424|0);
  $178 = (($177) + ($176<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (($175) + ($179))|0;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 180|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*52)|0)|0);
  $186 = ((($185)) + 40|0);
  HEAP32[$186>>2] = $180;
  $187 = $i;
  $188 = $mod;
  $189 = ((($188)) + 180|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + (($187*52)|0)|0);
  $192 = ((($191)) + 40|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)>(0);
  $195 = $194 ? 2 : 0;
  $196 = $i;
  $197 = $mod;
  $198 = ((($197)) + 180|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($199) + (($196*52)|0)|0);
  $201 = ((($200)) + 44|0);
  HEAP32[$201>>2] = $195;
  $202 = $i;
  $203 = ((($dh)) + 548|0);
  $204 = (($203) + ($202)|0);
  $205 = HEAP8[$204>>0]|0;
  $206 = $205&255;
  $207 = $i;
  $208 = $mod;
  $209 = ((($208)) + 176|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + (($207*764)|0)|0);
  $212 = ((($211)) + 756|0);
  $213 = HEAP32[$212>>2]|0;
  HEAP32[$213>>2] = $206;
  $214 = $i;
  $215 = ((($dh)) + 579|0);
  $216 = (($215) + ($214)|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = $217 << 24 >> 24;
  $219 = $i;
  $220 = $mod;
  $221 = ((($220)) + 176|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + (($219*764)|0)|0);
  $224 = ((($223)) + 756|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ((($225)) + 16|0);
  HEAP32[$226>>2] = $218;
  $227 = $i;
  $228 = $mod;
  $229 = ((($228)) + 176|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + (($227*764)|0)|0);
  $232 = ((($231)) + 756|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ((($233)) + 8|0);
  HEAP32[$234>>2] = 128;
  $235 = $i;
  $236 = $i;
  $237 = $mod;
  $238 = ((($237)) + 176|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = (($239) + (($236*764)|0)|0);
  $241 = ((($240)) + 756|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 40|0);
  HEAP32[$243>>2] = $235;
  $244 = $i;
  $245 = $mod;
  $246 = ((($245)) + 180|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + (($244*52)|0)|0);
  $249 = ((($248)) + 32|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ($250|0)>(0);
  if ($251) {
   $252 = $i;
   $253 = $mod;
   $254 = ((($253)) + 176|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (($255) + (($252*764)|0)|0);
   $257 = ((($256)) + 36|0);
   HEAP32[$257>>2] = 1;
  }
  $258 = $mod;
  $259 = $i;
  $260 = $i;
  $261 = ((($dh)) + 642|0);
  $262 = (($261) + (($260*30)|0)|0);
  (_instrument_name($258,$259,$262,30)|0);
  $263 = $i;
  $264 = (($263) + 1)|0;
  $i = $264;
 }
 if ((label|0) == 27) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $265 = (_pattern_init($148)|0);
 $266 = ($265|0)<(0);
 if ($266) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $i = 0;
 while(1) {
  $267 = $i;
  $268 = $mod;
  $269 = ((($268)) + 128|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($267|0)<($270|0);
  if (!($271)) {
   break;
  }
  $272 = $mod;
  $273 = $i;
  $274 = (_pattern_tracks_alloc($272,$273,64)|0);
  $275 = ($274|0)<(0);
  if ($275) {
   label = 36;
   break;
  }
  $276 = ((($dh)) + 26|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = ($277<<24>>24)!=(0);
  if ($278) {
   $279 = $2;
   $280 = (_hio_read16b($279)|0);
   $281 = $280&65535;
   $282 = (($281) - 64)|0;
   $283 = $282 >> 2;
   $284 = $283&65535;
   $w = $284;
   $285 = $2;
   (_hio_read($chn_table,1,64,$285)|0);
  } else {
   $286 = $mod;
   $287 = ((($286)) + 136|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $288<<6;
   $290 = $289&65535;
   $w = $290;
   dest=$chn_table; stop=dest+64|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
  $j = 0;
  while(1) {
   $291 = $j;
   $292 = ($291|0)<(64);
   if (!($292)) {
    break;
   }
   $c = 0;
   $k = 128;
   while(1) {
    $293 = $c;
    $294 = $mod;
    $295 = ((($294)) + 136|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = ($293|0)<($296|0);
    $298 = $j;
    if (!($297)) {
     break;
    }
    $299 = (($chn_table) + ($298)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = $k;
    $303 = $301 & $302;
    $304 = ($303|0)!=(0);
    if ($304) {
     $305 = $2;
     (_hio_read($digi_event,4,1,$305)|0);
     $306 = $j;
     $307 = $c;
     $308 = $i;
     $309 = $1;
     $310 = ((($309)) + 168|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (($311) + ($308<<2)|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ((($313)) + 4|0);
     $315 = (($314) + ($307<<2)|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $1;
     $318 = ((($317)) + 172|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = (($319) + ($316<<2)|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ((($321)) + 4|0);
     $323 = (($322) + ($306<<3)|0);
     $event = $323;
     $324 = $event;
     _decode_protracker_event($324,$digi_event);
     $325 = $event;
     $326 = ((($325)) + 3|0);
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     L64: do {
      if ((($328|0) == 14)) {
       $333 = $event;
       $334 = ((($333)) + 4|0);
       $335 = HEAP8[$334>>0]|0;
       $336 = $335&255;
       $337 = $336 & 240;
       $338 = $337 >> 4;
       switch ($338|0) {
       case 9: case 8: case 3: case 0:  {
        $339 = $event;
        $340 = ((($339)) + 4|0);
        HEAP8[$340>>0] = 0;
        $341 = $event;
        $342 = ((($341)) + 3|0);
        HEAP8[$342>>0] = 0;
        break L64;
        break;
       }
       case 4:  {
        $343 = $event;
        $344 = ((($343)) + 3|0);
        HEAP8[$344>>0] = 12;
        $345 = $event;
        $346 = ((($345)) + 4|0);
        HEAP8[$346>>0] = 0;
        break L64;
        break;
       }
       default: {
        break L64;
       }
       }
      } else if ((($328|0) == 8)) {
       $329 = $event;
       $330 = ((($329)) + 4|0);
       HEAP8[$330>>0] = 0;
       $331 = $event;
       $332 = ((($331)) + 3|0);
       HEAP8[$332>>0] = 0;
      }
     } while(0);
     $347 = $w;
     $348 = (($347) + -1)<<16>>16;
     $w = $348;
    }
    $349 = $c;
    $350 = (($349) + 1)|0;
    $c = $350;
    $351 = $k;
    $352 = $351 >> 1;
    $k = $352;
   }
   $353 = (($298) + 1)|0;
   $j = $353;
  }
  $354 = $i;
  $355 = (($354) + 1)|0;
  $i = $355;
 }
 if ((label|0) == 36) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $i = 0;
 while(1) {
  $356 = $i;
  $357 = $mod;
  $358 = ((($357)) + 140|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = ($356|0)<($359|0);
  if (!($360)) {
   label = 59;
   break;
  }
  $361 = $1;
  $362 = $2;
  $363 = $i;
  $364 = $mod;
  $365 = ((($364)) + 180|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = (($366) + (($363*52)|0)|0);
  $368 = (_load_sample($361,$362,0,$367,0)|0);
  $369 = ($368|0)<(0);
  if ($369) {
   label = 57;
   break;
  }
  $370 = $i;
  $371 = (($370) + 1)|0;
  $i = $371;
 }
 if ((label|0) == 57) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 else if ((label|0) == 59) {
  $0 = 0;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 return (0)|0;
}
function _fnk_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0;
 var $size = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1182101099);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read8($7)|0);
   $8 = $1;
   $9 = (_hio_read8($8)|0);
   $a = $9;
   $10 = $1;
   $11 = (_hio_read8($10)|0);
   $b = $11;
   $12 = $1;
   (_hio_read8($12)|0);
   $13 = $a;
   $14 = $13&255;
   $15 = $14 >> 1;
   $16 = ($15|0)<(10);
   if ($16) {
    $0 = -1;
    break;
   }
   $17 = $b;
   $18 = $17&255;
   $19 = $18 & 240;
   $20 = $19 >> 4;
   $21 = ($20|0)>(7);
   if (!($21)) {
    $22 = $b;
    $23 = $22&255;
    $24 = $23 & 15;
    $25 = ($24|0)>(9);
    if (!($25)) {
     $26 = $1;
     $27 = (_hio_read32l($26)|0);
     $size = $27;
     $28 = $size;
     $29 = ($28|0)<(1024);
     if ($29) {
      $0 = -1;
      break;
     }
     $30 = $1;
     (_hio_stat($30,$st)|0);
     $31 = $size;
     $32 = ((($st)) + 36|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($31|0)!=($33|0);
     if ($34) {
      $0 = -1;
      break;
     } else {
      $35 = $1;
      $36 = $2;
      _read_title($35,$36,0);
      $0 = 0;
      break;
     }
    }
   }
   $0 = -1;
  }
 } while(0);
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _fnk_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $ffh = 0, $i = 0, $j = 0, $mod = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ffh = sp + 20|0;
 $ev = sp + 2760|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ffh,4,1,$7)|0);
 $8 = ((($ffh)) + 4|0);
 $9 = $2;
 (_hio_read($8,4,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read32l($10)|0);
 $12 = ((($ffh)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($ffh)) + 12|0);
 $14 = $2;
 (_hio_read($13,4,1,$14)|0);
 $15 = $2;
 $16 = (_hio_read8($15)|0);
 $17 = ((($ffh)) + 16|0);
 HEAP8[$17>>0] = $16;
 $18 = ((($ffh)) + 17|0);
 $19 = $2;
 (_hio_read($18,256,1,$19)|0);
 $20 = ((($ffh)) + 273|0);
 $21 = $2;
 (_hio_read($20,128,1,$21)|0);
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22|0)<(64);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = ((($ffh)) + 404|0);
  $26 = (($25) + (($24*36)|0)|0);
  $27 = $2;
  (_hio_read($26,19,1,$27)|0);
  $28 = $2;
  $29 = (_hio_read32l($28)|0);
  $30 = $i;
  $31 = ((($ffh)) + 404|0);
  $32 = (($31) + (($30*36)|0)|0);
  $33 = ((($32)) + 20|0);
  HEAP32[$33>>2] = $29;
  $34 = $2;
  $35 = (_hio_read32l($34)|0);
  $36 = $i;
  $37 = ((($ffh)) + 404|0);
  $38 = (($37) + (($36*36)|0)|0);
  $39 = ((($38)) + 24|0);
  HEAP32[$39>>2] = $35;
  $40 = $2;
  $41 = (_hio_read8($40)|0);
  $42 = $i;
  $43 = ((($ffh)) + 404|0);
  $44 = (($43) + (($42*36)|0)|0);
  $45 = ((($44)) + 28|0);
  HEAP8[$45>>0] = $41;
  $46 = $2;
  $47 = (_hio_read8($46)|0);
  $48 = $i;
  $49 = ((($ffh)) + 404|0);
  $50 = (($49) + (($48*36)|0)|0);
  $51 = ((($50)) + 29|0);
  HEAP8[$51>>0] = $47;
  $52 = $2;
  $53 = (_hio_read8($52)|0);
  $54 = $i;
  $55 = ((($ffh)) + 404|0);
  $56 = (($55) + (($54*36)|0)|0);
  $57 = ((($56)) + 30|0);
  HEAP8[$57>>0] = $53;
  $58 = $2;
  $59 = (_hio_read8($58)|0);
  $60 = $i;
  $61 = ((($ffh)) + 404|0);
  $62 = (($61) + (($60*36)|0)|0);
  $63 = ((($62)) + 31|0);
  HEAP8[$63>>0] = $59;
  $64 = $2;
  $65 = (_hio_read8($64)|0);
  $66 = $i;
  $67 = ((($ffh)) + 404|0);
  $68 = (($67) + (($66*36)|0)|0);
  $69 = ((($68)) + 32|0);
  HEAP8[$69>>0] = $65;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $mod;
 $73 = ((($72)) + 140|0);
 HEAP32[$73>>2] = 64;
 $74 = $mod;
 $75 = ((($74)) + 144|0);
 HEAP32[$75>>2] = 64;
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(256);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = ((($ffh)) + 17|0);
  $80 = (($79) + ($78)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82|0)!=(255);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = ((($ffh)) + 17|0);
  $86 = (($85) + ($84)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $mod;
  $90 = ((($89)) + 128|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($88|0)>($91|0);
  if ($92) {
   $93 = $i;
   $94 = ((($ffh)) + 17|0);
   $95 = (($94) + ($93)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $mod;
   $99 = ((($98)) + 128|0);
   HEAP32[$99>>2] = $97;
  }
  $100 = $i;
  $101 = (($100) + 1)|0;
  $i = $101;
 }
 $102 = $mod;
 $103 = ((($102)) + 128|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 1)|0;
 HEAP32[$103>>2] = $105;
 $106 = $i;
 $107 = $mod;
 $108 = ((($107)) + 156|0);
 HEAP32[$108>>2] = $106;
 $109 = $mod;
 $110 = ((($109)) + 952|0);
 $111 = ((($ffh)) + 17|0);
 $112 = $mod;
 $113 = ((($112)) + 156|0);
 $114 = HEAP32[$113>>2]|0;
 _memcpy(($110|0),($111|0),($114|0))|0;
 $115 = $mod;
 $116 = ((($115)) + 148|0);
 HEAP32[$116>>2] = 4;
 $117 = $mod;
 $118 = ((($117)) + 152|0);
 HEAP32[$118>>2] = 125;
 $119 = $mod;
 $120 = ((($119)) + 136|0);
 HEAP32[$120>>2] = 0;
 $121 = ((($ffh)) + 12|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = ($123|0)==(70);
 if ($124) {
  $125 = ((($ffh)) + 12|0);
  $126 = ((($125)) + 1|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = ($128|0)==(50);
  if ($129) {
   $130 = ((($ffh)) + 4|0);
   $131 = ((($130)) + 3|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132 << 24 >> 24;
   $134 = $133 >> 1;
   $135 = $134 & 64;
   $136 = ($135|0)!=(0);
   $137 = ((($ffh)) + 4|0);
   $138 = ((($137)) + 3|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = $140 >> 1;
   $142 = $141 & 63;
   $143 = $mod;
   $144 = ((($143)) + 152|0);
   $145 = HEAP32[$144>>2]|0;
   if ($136) {
    $146 = (($145) - ($142))|0;
    HEAP32[$144>>2] = $146;
   } else {
    $147 = (($145) + ($142))|0;
    HEAP32[$144>>2] = $147;
   }
   $148 = $1;
   _set_type($148,5024,$vararg_buffer);
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 L20: do {
  if ((label|0) == 16) {
   $149 = ((($ffh)) + 12|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = ($151|0)==(70);
   do {
    if ($152) {
     $153 = ((($ffh)) + 12|0);
     $154 = ((($153)) + 1|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = ($156|0)==(118);
     if (!($157)) {
      $158 = ((($ffh)) + 12|0);
      $159 = ((($158)) + 1|0);
      $160 = HEAP8[$159>>0]|0;
      $161 = $160&255;
      $162 = ($161|0)==(107);
      if (!($162)) {
       break;
      }
     }
     $163 = $1;
     _set_type($163,5008,$vararg_buffer1);
     break L20;
    }
   } while(0);
   $164 = $mod;
   $165 = ((($164)) + 136|0);
   HEAP32[$165>>2] = 8;
   $166 = $1;
   _set_type($166,5040,$vararg_buffer3);
  }
 } while(0);
 $167 = $mod;
 $168 = ((($167)) + 136|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)==(0);
 if ($170) {
  $171 = ((($ffh)) + 12|0);
  $172 = ((($171)) + 2|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = ($174|0)<(48);
  if ($175) {
   $205 = 8;
  } else {
   $176 = ((($ffh)) + 12|0);
   $177 = ((($176)) + 2|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = ($179|0)>(57);
   if ($180) {
    $205 = 8;
   } else {
    $181 = ((($ffh)) + 12|0);
    $182 = ((($181)) + 3|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = ($184|0)<(48);
    if ($185) {
     $205 = 8;
    } else {
     $186 = ((($ffh)) + 12|0);
     $187 = ((($186)) + 3|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = $188&255;
     $190 = ($189|0)>(57);
     if ($190) {
      $205 = 8;
     } else {
      $191 = ((($ffh)) + 12|0);
      $192 = ((($191)) + 2|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = (($194) - 48)|0;
      $196 = ($195*10)|0;
      $197 = ((($ffh)) + 12|0);
      $198 = ((($197)) + 3|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = (($196) + ($200))|0;
      $202 = (($201) - 48)|0;
      $205 = $202;
     }
    }
   }
  }
  $203 = $mod;
  $204 = ((($203)) + 136|0);
  HEAP32[$204>>2] = $205;
 }
 $206 = $mod;
 $207 = ((($206)) + 152|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = $208<<2;
 $210 = (($209|0) / 5)&-1;
 $211 = $mod;
 $212 = ((($211)) + 152|0);
 HEAP32[$212>>2] = $210;
 $213 = $mod;
 $214 = ((($213)) + 136|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = $mod;
 $217 = ((($216)) + 128|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = Math_imul($215, $218)|0;
 $220 = $mod;
 $221 = ((($220)) + 132|0);
 HEAP32[$221>>2] = $219;
 $222 = $1;
 $223 = ((($222)) + 1280|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = $224 | 4096;
 HEAP32[$223>>2] = $225;
 $226 = $mod;
 $227 = (_instrument_init($226)|0);
 $228 = ($227|0)<(0);
 if ($228) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $229 = $i;
  $230 = $mod;
  $231 = ((($230)) + 140|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($229|0)<($232|0);
  $234 = $mod;
  if (!($233)) {
   break;
  }
  $235 = $i;
  $236 = (_subinstrument_alloc($234,$235,1)|0);
  $237 = ($236|0)<(0);
  if ($237) {
   label = 33;
   break;
  }
  $238 = $i;
  $239 = ((($ffh)) + 404|0);
  $240 = (($239) + (($238*36)|0)|0);
  $241 = ((($240)) + 24|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = $i;
  $244 = $mod;
  $245 = ((($244)) + 180|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($246) + (($243*52)|0)|0);
  $248 = ((($247)) + 32|0);
  HEAP32[$248>>2] = $242;
  $249 = $i;
  $250 = ((($ffh)) + 404|0);
  $251 = (($250) + (($249*36)|0)|0);
  $252 = ((($251)) + 20|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $i;
  $255 = $mod;
  $256 = ((($255)) + 180|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + (($254*52)|0)|0);
  $259 = ((($258)) + 36|0);
  HEAP32[$259>>2] = $253;
  $260 = $i;
  $261 = $mod;
  $262 = ((($261)) + 180|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + (($260*52)|0)|0);
  $265 = ((($264)) + 36|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($266|0)==(-1);
  if ($267) {
   $268 = $i;
   $269 = $mod;
   $270 = ((($269)) + 180|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($271) + (($268*52)|0)|0);
   $273 = ((($272)) + 36|0);
   HEAP32[$273>>2] = 0;
  }
  $274 = $i;
  $275 = ((($ffh)) + 404|0);
  $276 = (($275) + (($274*36)|0)|0);
  $277 = ((($276)) + 24|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $i;
  $280 = $mod;
  $281 = ((($280)) + 180|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = (($282) + (($279*52)|0)|0);
  $284 = ((($283)) + 40|0);
  HEAP32[$284>>2] = $278;
  $285 = $i;
  $286 = ((($ffh)) + 404|0);
  $287 = (($286) + (($285*36)|0)|0);
  $288 = ((($287)) + 20|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)!=(-1);
  $291 = $290 ? 2 : 0;
  $292 = $i;
  $293 = $mod;
  $294 = ((($293)) + 180|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + (($292*52)|0)|0);
  $297 = ((($296)) + 44|0);
  HEAP32[$297>>2] = $291;
  $298 = $i;
  $299 = ((($ffh)) + 404|0);
  $300 = (($299) + (($298*36)|0)|0);
  $301 = ((($300)) + 28|0);
  $302 = HEAP8[$301>>0]|0;
  $303 = $302&255;
  $304 = $i;
  $305 = $mod;
  $306 = ((($305)) + 176|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($307) + (($304*764)|0)|0);
  $309 = ((($308)) + 756|0);
  $310 = HEAP32[$309>>2]|0;
  HEAP32[$310>>2] = $303;
  $311 = $i;
  $312 = ((($ffh)) + 404|0);
  $313 = (($312) + (($311*36)|0)|0);
  $314 = ((($313)) + 29|0);
  $315 = HEAP8[$314>>0]|0;
  $316 = $315&255;
  $317 = $i;
  $318 = $mod;
  $319 = ((($318)) + 176|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($320) + (($317*764)|0)|0);
  $322 = ((($321)) + 756|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ((($323)) + 8|0);
  HEAP32[$324>>2] = $316;
  $325 = $i;
  $326 = $i;
  $327 = $mod;
  $328 = ((($327)) + 176|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = (($329) + (($326*764)|0)|0);
  $331 = ((($330)) + 756|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ((($332)) + 40|0);
  HEAP32[$333>>2] = $325;
  $334 = $i;
  $335 = $mod;
  $336 = ((($335)) + 180|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = (($337) + (($334*52)|0)|0);
  $339 = ((($338)) + 32|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($340|0)>(0);
  if ($341) {
   $342 = $i;
   $343 = $mod;
   $344 = ((($343)) + 176|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = (($345) + (($342*764)|0)|0);
   $347 = ((($346)) + 36|0);
   HEAP32[$347>>2] = 1;
  }
  $348 = $mod;
  $349 = $i;
  $350 = $i;
  $351 = ((($ffh)) + 404|0);
  $352 = (($351) + (($350*36)|0)|0);
  (_instrument_name($348,$349,$352,19)|0);
  $353 = $i;
  $354 = (($353) + 1)|0;
  $i = $354;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $355 = (_pattern_init($234)|0);
 $356 = ($355|0)<(0);
 if ($356) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $357 = $i;
  $358 = $mod;
  $359 = ((($358)) + 128|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = ($357|0)<($360|0);
  if (!($361)) {
   break;
  }
  $362 = $mod;
  $363 = $i;
  $364 = (_pattern_tracks_alloc($362,$363,64)|0);
  $365 = ($364|0)<(0);
  if ($365) {
   label = 44;
   break;
  }
  $366 = $i;
  $367 = ((($ffh)) + 273|0);
  $368 = (($367) + ($366)|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = $369&255;
  $371 = $i;
  $372 = $1;
  $373 = ((($372)) + 168|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (($374) + ($371<<2)|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = ((($376)) + 4|0);
  $378 = ((($377)) + 4|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = $1;
  $381 = ((($380)) + 172|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = (($382) + ($379<<2)|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = ((($384)) + 4|0);
  $386 = (($385) + ($370<<3)|0);
  $387 = ((($386)) + 5|0);
  HEAP8[$387>>0] = 13;
  $j = 0;
  while(1) {
   $388 = $j;
   $389 = $mod;
   $390 = ((($389)) + 136|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $391<<6;
   $393 = ($388|0)<($392|0);
   if (!($393)) {
    break;
   }
   $394 = $j;
   $395 = $mod;
   $396 = ((($395)) + 136|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = (($394|0) / ($397|0))&-1;
   $399 = $j;
   $400 = $mod;
   $401 = ((($400)) + 136|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = (($399|0) % ($402|0))&-1;
   $404 = $i;
   $405 = $1;
   $406 = ((($405)) + 168|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + ($404<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = ((($409)) + 4|0);
   $411 = (($410) + ($403<<2)|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = $1;
   $414 = ((($413)) + 172|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = (($415) + ($412<<2)|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = ((($417)) + 4|0);
   $419 = (($418) + ($398<<3)|0);
   $event = $419;
   $420 = $2;
   (_hio_read($ev,1,3,$420)|0);
   $421 = HEAP8[$ev>>0]|0;
   $422 = $421&255;
   $423 = $422 >> 2;
   $$off = (($423) + -61)|0;
   $switch = ($$off>>>0)<(3);
   if (!($switch)) {
    $424 = HEAP8[$ev>>0]|0;
    $425 = $424&255;
    $426 = $425 >> 2;
    $427 = (37 + ($426))|0;
    $428 = $427&255;
    $429 = $event;
    HEAP8[$429>>0] = $428;
    $430 = ((($ev)) + 1|0);
    $431 = HEAP8[$430>>0]|0;
    $432 = $431&255;
    $433 = $432 & 240;
    $434 = $433 >> 4;
    $435 = (1 + ($434))|0;
    $436 = HEAP8[$ev>>0]|0;
    $437 = $436&255;
    $438 = $437 & 3;
    $439 = $438 << 4;
    $440 = (($435) + ($439))|0;
    $441 = $440&255;
    $442 = $event;
    $443 = ((($442)) + 1|0);
    HEAP8[$443>>0] = $441;
    $444 = $event;
    $445 = ((($444)) + 1|0);
    $446 = HEAP8[$445>>0]|0;
    $447 = $446&255;
    $448 = (($447) - 1)|0;
    $449 = ((($ffh)) + 404|0);
    $450 = (($449) + (($448*36)|0)|0);
    $451 = ((($450)) + 28|0);
    $452 = HEAP8[$451>>0]|0;
    $453 = $event;
    $454 = ((($453)) + 2|0);
    HEAP8[$454>>0] = $452;
   }
   $455 = ((($ev)) + 1|0);
   $456 = HEAP8[$455>>0]|0;
   $457 = $456&255;
   $458 = $457 & 15;
   L70: do {
    switch ($458|0) {
    case 13:  {
     $507 = $event;
     $508 = ((($507)) + 3|0);
     HEAP8[$508>>0] = 12;
     $509 = ((($ev)) + 2|0);
     $510 = HEAP8[$509>>0]|0;
     $511 = $event;
     $512 = ((($511)) + 4|0);
     HEAP8[$512>>0] = $510;
     break;
    }
    case 0:  {
     $459 = $event;
     $460 = ((($459)) + 3|0);
     HEAP8[$460>>0] = 121;
     $461 = ((($ev)) + 2|0);
     $462 = HEAP8[$461>>0]|0;
     $463 = $event;
     $464 = ((($463)) + 4|0);
     HEAP8[$464>>0] = $462;
     break;
    }
    case 1:  {
     $465 = $event;
     $466 = ((($465)) + 3|0);
     HEAP8[$466>>0] = 120;
     $467 = ((($ev)) + 2|0);
     $468 = HEAP8[$467>>0]|0;
     $469 = $event;
     $470 = ((($469)) + 4|0);
     HEAP8[$470>>0] = $468;
     break;
    }
    case 6:  {
     $483 = $event;
     $484 = ((($483)) + 3|0);
     HEAP8[$484>>0] = 124;
     $485 = ((($ev)) + 2|0);
     $486 = HEAP8[$485>>0]|0;
     $487 = $486&255;
     $488 = $487 << 1;
     $489 = $488&255;
     $490 = $event;
     $491 = ((($490)) + 4|0);
     HEAP8[$491>>0] = $489;
     break;
    }
    case 3:  {
     $477 = $event;
     $478 = ((($477)) + 3|0);
     HEAP8[$478>>0] = 123;
     $479 = ((($ev)) + 2|0);
     $480 = HEAP8[$479>>0]|0;
     $481 = $event;
     $482 = ((($481)) + 4|0);
     HEAP8[$482>>0] = $480;
     break;
    }
    case 7:  {
     $492 = $event;
     $493 = ((($492)) + 3|0);
     HEAP8[$493>>0] = 125;
     $494 = ((($ev)) + 2|0);
     $495 = HEAP8[$494>>0]|0;
     $496 = $495&255;
     $497 = $496 << 1;
     $498 = $497&255;
     $499 = $event;
     $500 = ((($499)) + 4|0);
     HEAP8[$500>>0] = $498;
     break;
    }
    case 11:  {
     $501 = $event;
     $502 = ((($501)) + 3|0);
     HEAP8[$502>>0] = 0;
     $503 = ((($ev)) + 2|0);
     $504 = HEAP8[$503>>0]|0;
     $505 = $event;
     $506 = ((($505)) + 4|0);
     HEAP8[$506>>0] = $504;
     break;
    }
    case 2:  {
     $471 = $event;
     $472 = ((($471)) + 3|0);
     HEAP8[$472>>0] = 122;
     $473 = ((($ev)) + 2|0);
     $474 = HEAP8[$473>>0]|0;
     $475 = $event;
     $476 = ((($475)) + 4|0);
     HEAP8[$476>>0] = $474;
     break;
    }
    case 14:  {
     $513 = ((($ev)) + 2|0);
     $514 = HEAP8[$513>>0]|0;
     $515 = $514&255;
     $516 = ($515|0)==(10);
     if (!($516)) {
      $517 = ((($ev)) + 2|0);
      $518 = HEAP8[$517>>0]|0;
      $519 = $518&255;
      $520 = ($519|0)==(11);
      if (!($520)) {
       $521 = ((($ev)) + 2|0);
       $522 = HEAP8[$521>>0]|0;
       $523 = $522&255;
       $524 = ($523|0)==(12);
       if (!($524)) {
        $527 = ((($ev)) + 2|0);
        $528 = HEAP8[$527>>0]|0;
        $529 = $528&255;
        $530 = $529 & 240;
        $531 = $530 >> 4;
        switch ($531|0) {
        case 1:  {
         $532 = $event;
         $533 = ((($532)) + 3|0);
         HEAP8[$533>>0] = 14;
         $534 = ((($ev)) + 2|0);
         $535 = HEAP8[$534>>0]|0;
         $536 = $535&255;
         $537 = $536 & 15;
         $538 = 192 | $537;
         $539 = $538&255;
         $540 = $event;
         $541 = ((($540)) + 4|0);
         HEAP8[$541>>0] = $539;
         break L70;
         break;
        }
        case 2:  {
         $542 = $event;
         $543 = ((($542)) + 3|0);
         HEAP8[$543>>0] = 14;
         $544 = ((($ev)) + 2|0);
         $545 = HEAP8[$544>>0]|0;
         $546 = $545&255;
         $547 = $546 & 15;
         $548 = 208 | $547;
         $549 = $548&255;
         $550 = $event;
         $551 = ((($550)) + 4|0);
         HEAP8[$551>>0] = $549;
         break L70;
         break;
        }
        case 15:  {
         $573 = $event;
         $574 = ((($573)) + 3|0);
         HEAP8[$574>>0] = 15;
         $575 = ((($ev)) + 2|0);
         $576 = HEAP8[$575>>0]|0;
         $577 = $576&255;
         $578 = $577 & 15;
         $579 = $578&255;
         $580 = $event;
         $581 = ((($580)) + 4|0);
         HEAP8[$581>>0] = $579;
         break L70;
         break;
        }
        case 13:  {
         $552 = $event;
         $553 = ((($552)) + 3|0);
         HEAP8[$553>>0] = 14;
         $554 = ((($ev)) + 2|0);
         $555 = HEAP8[$554>>0]|0;
         $556 = $555&255;
         $557 = $556 & 15;
         $558 = 144 | $557;
         $559 = $558&255;
         $560 = $event;
         $561 = ((($560)) + 4|0);
         HEAP8[$561>>0] = $559;
         break L70;
         break;
        }
        case 14:  {
         $562 = $event;
         $563 = ((($562)) + 3|0);
         HEAP8[$563>>0] = 8;
         $564 = ((($ev)) + 2|0);
         $565 = HEAP8[$564>>0]|0;
         $566 = $565&255;
         $567 = $566 & 15;
         $568 = $567 << 4;
         $569 = (8 + ($568))|0;
         $570 = $569&255;
         $571 = $event;
         $572 = ((($571)) + 4|0);
         HEAP8[$572>>0] = $570;
         break L70;
         break;
        }
        default: {
         break L70;
        }
        }
       }
      }
     }
     $525 = $event;
     $526 = ((($525)) + 3|0);
     HEAP8[$526>>0] = 127;
     break;
    }
    default: {
    }
    }
   } while(0);
   $582 = $j;
   $583 = (($582) + 1)|0;
   $j = $583;
  }
  $584 = $i;
  $585 = (($584) + 1)|0;
  $i = $585;
 }
 if ((label|0) == 44) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $586 = $i;
  $587 = $mod;
  $588 = ((($587)) + 140|0);
  $589 = HEAP32[$588>>2]|0;
  $590 = ($586|0)<($589|0);
  if (!($590)) {
   break;
  }
  $591 = $i;
  $592 = $mod;
  $593 = ((($592)) + 180|0);
  $594 = HEAP32[$593>>2]|0;
  $595 = (($594) + (($591*52)|0)|0);
  $596 = ((($595)) + 32|0);
  $597 = HEAP32[$596>>2]|0;
  $598 = ($597|0)<=(2);
  if (!($598)) {
   $599 = $1;
   $600 = $2;
   $601 = $i;
   $602 = $mod;
   $603 = ((($602)) + 180|0);
   $604 = HEAP32[$603>>2]|0;
   $605 = (($604) + (($601*52)|0)|0);
   $606 = (_load_sample($599,$600,0,$605,0)|0);
   $607 = ($606|0)<(0);
   if ($607) {
    label = 74;
    break;
   }
  }
  $608 = $i;
  $609 = (($608) + 1)|0;
  $i = $609;
 }
 if ((label|0) == 74) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $610 = $i;
  $611 = $mod;
  $612 = ((($611)) + 136|0);
  $613 = HEAP32[$612>>2]|0;
  $614 = ($610|0)<($613|0);
  if (!($614)) {
   break;
  }
  $615 = $i;
  $616 = $mod;
  $617 = ((($616)) + 184|0);
  $618 = (($617) + (($615*12)|0)|0);
  HEAP32[$618>>2] = 128;
  $619 = $i;
  $620 = (($619) + 1)|0;
  $i = $620;
 }
 $621 = $1;
 $622 = ((($621)) + 1268|0);
 HEAP32[$622>>2] = 255;
 $623 = $1;
 $624 = ((($623)) + 1280|0);
 HEAP32[$624>>2] = 64;
 $0 = 0;
 $625 = $0;
 STACKTOP = sp;return ($625|0);
}
function _ice_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1464)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $magic = $8;
 $9 = $magic;
 $10 = ($9|0)!=(1297370624);
 $11 = $magic;
 $12 = ($11|0)!=(1230254384);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $1;
  $14 = $3;
  $15 = (($14) + 0)|0;
  (_hio_seek($13,$15,0)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,28);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _ice_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $i = 0, $ih = 0, $j = 0, $mod = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ih = sp + 12|0;
 $ev = sp + 1512|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ih,20,1,$7)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = ((($ih)) + 20|0);
  $12 = (($11) + (($10*30)|0)|0);
  $13 = $2;
  (_hio_read($12,22,1,$13)|0);
  $14 = $2;
  $15 = (_hio_read16b($14)|0);
  $16 = $i;
  $17 = ((($ih)) + 20|0);
  $18 = (($17) + (($16*30)|0)|0);
  $19 = ((($18)) + 22|0);
  HEAP16[$19>>1] = $15;
  $20 = $2;
  $21 = (_hio_read8($20)|0);
  $22 = $i;
  $23 = ((($ih)) + 20|0);
  $24 = (($23) + (($22*30)|0)|0);
  $25 = ((($24)) + 24|0);
  HEAP8[$25>>0] = $21;
  $26 = $2;
  $27 = (_hio_read8($26)|0);
  $28 = $i;
  $29 = ((($ih)) + 20|0);
  $30 = (($29) + (($28*30)|0)|0);
  $31 = ((($30)) + 25|0);
  HEAP8[$31>>0] = $27;
  $32 = $2;
  $33 = (_hio_read16b($32)|0);
  $34 = $i;
  $35 = ((($ih)) + 20|0);
  $36 = (($35) + (($34*30)|0)|0);
  $37 = ((($36)) + 26|0);
  HEAP16[$37>>1] = $33;
  $38 = $2;
  $39 = (_hio_read16b($38)|0);
  $40 = $i;
  $41 = ((($ih)) + 20|0);
  $42 = (($41) + (($40*30)|0)|0);
  $43 = ((($42)) + 28|0);
  HEAP16[$43>>1] = $39;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $2;
 $47 = (_hio_read8($46)|0);
 $48 = ((($ih)) + 950|0);
 HEAP8[$48>>0] = $47;
 $49 = $2;
 $50 = (_hio_read8($49)|0);
 $51 = ((($ih)) + 951|0);
 HEAP8[$51>>0] = $50;
 $52 = ((($ih)) + 952|0);
 $53 = $2;
 (_hio_read($52,512,1,$53)|0);
 $54 = $2;
 $55 = (_hio_read32b($54)|0);
 $56 = ((($ih)) + 1464|0);
 HEAP32[$56>>2] = $55;
 $57 = ((($ih)) + 1464|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(1230254384);
 do {
  if ($59) {
   $60 = $1;
   _set_type($60,5112,$vararg_buffer);
  } else {
   $61 = ((($ih)) + 1464|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(1297370624);
   if ($63) {
    $64 = $1;
    _set_type($64,5136,$vararg_buffer1);
    break;
   }
   $0 = -1;
   $333 = $0;
   STACKTOP = sp;return ($333|0);
  }
 } while(0);
 $65 = $mod;
 $66 = ((($65)) + 140|0);
 HEAP32[$66>>2] = 31;
 $67 = $mod;
 $68 = ((($67)) + 140|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $mod;
 $71 = ((($70)) + 144|0);
 HEAP32[$71>>2] = $69;
 $72 = ((($ih)) + 950|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $mod;
 $76 = ((($75)) + 128|0);
 HEAP32[$76>>2] = $74;
 $77 = ((($ih)) + 950|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $mod;
 $81 = ((($80)) + 156|0);
 HEAP32[$81>>2] = $79;
 $82 = ((($ih)) + 951|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = $mod;
 $86 = ((($85)) + 132|0);
 HEAP32[$86>>2] = $84;
 $87 = $mod;
 (_strncpy(($87|0),($ih|0),20)|0);
 $88 = $mod;
 $89 = (_instrument_init($88)|0);
 $90 = ($89|0)<(0);
 if ($90) {
  $0 = -1;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 $i = 0;
 while(1) {
  $91 = $i;
  $92 = $mod;
  $93 = ((($92)) + 140|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($91|0)<($94|0);
  $96 = $mod;
  if (!($95)) {
   break;
  }
  $97 = $i;
  $98 = (_subinstrument_alloc($96,$97,1)|0);
  $99 = ($98|0)<(0);
  if ($99) {
   label = 14;
   break;
  }
  $100 = $i;
  $101 = ((($ih)) + 20|0);
  $102 = (($101) + (($100*30)|0)|0);
  $103 = ((($102)) + 22|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = $105<<1;
  $107 = $i;
  $108 = $mod;
  $109 = ((($108)) + 180|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($110) + (($107*52)|0)|0);
  $112 = ((($111)) + 32|0);
  HEAP32[$112>>2] = $106;
  $113 = $i;
  $114 = ((($ih)) + 20|0);
  $115 = (($114) + (($113*30)|0)|0);
  $116 = ((($115)) + 26|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $118<<1;
  $120 = $i;
  $121 = $mod;
  $122 = ((($121)) + 180|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + (($120*52)|0)|0);
  $125 = ((($124)) + 36|0);
  HEAP32[$125>>2] = $119;
  $126 = $i;
  $127 = $mod;
  $128 = ((($127)) + 180|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + (($126*52)|0)|0);
  $131 = ((($130)) + 36|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $i;
  $134 = ((($ih)) + 20|0);
  $135 = (($134) + (($133*30)|0)|0);
  $136 = ((($135)) + 28|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137&65535;
  $139 = $138<<1;
  $140 = (($132) + ($139))|0;
  $141 = $i;
  $142 = $mod;
  $143 = ((($142)) + 180|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + (($141*52)|0)|0);
  $146 = ((($145)) + 40|0);
  HEAP32[$146>>2] = $140;
  $147 = $i;
  $148 = ((($ih)) + 20|0);
  $149 = (($148) + (($147*30)|0)|0);
  $150 = ((($149)) + 28|0);
  $151 = HEAP16[$150>>1]|0;
  $152 = $151&65535;
  $153 = ($152|0)>(1);
  $154 = $153 ? 2 : 0;
  $155 = $i;
  $156 = $mod;
  $157 = ((($156)) + 180|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($155*52)|0)|0);
  $160 = ((($159)) + 44|0);
  HEAP32[$160>>2] = $154;
  $161 = $i;
  $162 = ((($ih)) + 20|0);
  $163 = (($162) + (($161*30)|0)|0);
  $164 = ((($163)) + 25|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 176|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*764)|0)|0);
  $172 = ((($171)) + 756|0);
  $173 = HEAP32[$172>>2]|0;
  HEAP32[$173>>2] = $166;
  $174 = $i;
  $175 = ((($ih)) + 20|0);
  $176 = (($175) + (($174*30)|0)|0);
  $177 = ((($176)) + 24|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = $179 << 16 >> 16;
  $181 = (($180|0) / 72)&-1;
  $182 = $181 << 4;
  $183 = $i;
  $184 = $mod;
  $185 = ((($184)) + 176|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + (($183*764)|0)|0);
  $188 = ((($187)) + 756|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ((($189)) + 16|0);
  HEAP32[$190>>2] = $182;
  $191 = $i;
  $192 = $mod;
  $193 = ((($192)) + 176|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + (($191*764)|0)|0);
  $196 = ((($195)) + 756|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ((($197)) + 8|0);
  HEAP32[$198>>2] = 128;
  $199 = $i;
  $200 = $i;
  $201 = $mod;
  $202 = ((($201)) + 176|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + (($200*764)|0)|0);
  $205 = ((($204)) + 756|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ((($206)) + 40|0);
  HEAP32[$207>>2] = $199;
  $208 = $i;
  $209 = $mod;
  $210 = ((($209)) + 180|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + (($208*52)|0)|0);
  $213 = ((($212)) + 32|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)>(0);
  if ($215) {
   $216 = $i;
   $217 = $mod;
   $218 = ((($217)) + 176|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (($219) + (($216*764)|0)|0);
   $221 = ((($220)) + 36|0);
   HEAP32[$221>>2] = 1;
  }
  $222 = $i;
  $223 = (($222) + 1)|0;
  $i = $223;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 $224 = (_pattern_init($96)|0);
 $225 = ($224|0)<(0);
 if ($225) {
  $0 = -1;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 $i = 0;
 while(1) {
  $226 = $i;
  $227 = $mod;
  $228 = ((($227)) + 128|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($226|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = $mod;
  $232 = $i;
  $233 = (_pattern_alloc($231,$232)|0);
  $234 = ($233|0)<(0);
  if ($234) {
   label = 23;
   break;
  }
  $235 = $i;
  $236 = $mod;
  $237 = ((($236)) + 168|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + ($235<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  HEAP32[$240>>2] = 64;
  $j = 0;
  while(1) {
   $241 = $j;
   $242 = $mod;
   $243 = ((($242)) + 136|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = ($241|0)<($244|0);
   if (!($245)) {
    break;
   }
   $246 = $j;
   $247 = $i;
   $248 = ((($ih)) + 952|0);
   $249 = (($248) + ($247<<2)|0);
   $250 = (($249) + ($246)|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = $251&255;
   $253 = $j;
   $254 = $i;
   $255 = $mod;
   $256 = ((($255)) + 168|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = (($257) + ($254<<2)|0);
   $259 = HEAP32[$258>>2]|0;
   $260 = ((($259)) + 4|0);
   $261 = (($260) + ($253<<2)|0);
   HEAP32[$261>>2] = $252;
   $262 = $j;
   $263 = (($262) + 1)|0;
   $j = $263;
  }
  $264 = $i;
  $265 = $264&255;
  $266 = $i;
  $267 = $mod;
  $268 = ((($267)) + 952|0);
  $269 = (($268) + ($266)|0);
  HEAP8[$269>>0] = $265;
  $270 = $i;
  $271 = (($270) + 1)|0;
  $i = $271;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 $i = 0;
 while(1) {
  $272 = $i;
  $273 = $mod;
  $274 = ((($273)) + 132|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = ($272|0)<($275|0);
  if (!($276)) {
   break;
  }
  $277 = $mod;
  $278 = $i;
  $279 = (_track_alloc($277,$278,64)|0);
  $280 = ($279|0)<(0);
  if ($280) {
   label = 31;
   break;
  }
  $j = 0;
  while(1) {
   $281 = $j;
   $282 = $i;
   $283 = $mod;
   $284 = ((($283)) + 172|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (($285) + ($282<<2)|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = HEAP32[$287>>2]|0;
   $289 = ($281|0)<($288|0);
   if (!($289)) {
    break;
   }
   $290 = $j;
   $291 = $i;
   $292 = $mod;
   $293 = ((($292)) + 172|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = (($294) + ($291<<2)|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = ((($296)) + 4|0);
   $298 = (($297) + ($290<<3)|0);
   $event = $298;
   $299 = $2;
   (_hio_read($ev,1,4,$299)|0);
   $300 = $event;
   _decode_protracker_event($300,$ev);
   $301 = $j;
   $302 = (($301) + 1)|0;
   $j = $302;
  }
  $303 = $i;
  $304 = (($303) + 1)|0;
  $i = $304;
 }
 if ((label|0) == 31) {
  $0 = -1;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 $305 = $1;
 $306 = ((($305)) + 1280|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = $307 | 8192;
 HEAP32[$306>>2] = $308;
 $i = 0;
 while(1) {
  $309 = $i;
  $310 = $mod;
  $311 = ((($310)) + 140|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($309|0)<($312|0);
  if (!($313)) {
   label = 42;
   break;
  }
  $314 = $i;
  $315 = $mod;
  $316 = ((($315)) + 180|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = (($317) + (($314*52)|0)|0);
  $319 = ((($318)) + 32|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ($320|0)<=(4);
  if (!($321)) {
   $322 = $1;
   $323 = $2;
   $324 = $i;
   $325 = $mod;
   $326 = ((($325)) + 180|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + (($324*52)|0)|0);
   $329 = (_load_sample($322,$323,0,$328,0)|0);
   $330 = ($329|0)<(0);
   if ($330) {
    label = 40;
    break;
   }
  }
  $331 = $i;
  $332 = (($331) + 1)|0;
  $i = $332;
 }
 if ((label|0) == 40) {
  $0 = -1;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 else if ((label|0) == 42) {
  $0 = 0;
  $333 = $0;
  STACKTOP = sp;return ($333|0);
 }
 return (0)|0;
}
function _hsc_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $buf = 0, $c = 0, $i = 0, $m = 0, $n = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 (_hio_seek($4,1536,1)|0);
 $5 = $1;
 $6 = (_hio_read($buf,1,51,$5)|0);
 $7 = ($6|0)!=(51);
 if ($7) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 $p = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(51);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = (($buf) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)==(255);
  if ($14) {
   break;
  }
  $15 = $i;
  $16 = (($buf) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $p;
  $20 = ($18|0)>($19|0);
  if ($20) {
   $21 = $i;
   $22 = (($buf) + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $p = $24;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 $27 = $i;
 $28 = ($27|0)!=(0);
 $29 = $p;
 $30 = ($29|0)!=(0);
 $or$cond = $28 & $30;
 $or$cond$not = $or$cond ^ 1;
 $31 = $i;
 $32 = ($31|0)>(50);
 $or$cond3 = $or$cond$not | $32;
 $33 = $p;
 $34 = ($33|0)>(50);
 $or$cond5 = $or$cond3 | $34;
 if ($or$cond5) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 L17: while(1) {
  $35 = $i;
  $36 = $p;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   label = 27;
   break;
  }
  $38 = $1;
  (_hio_read($buf,1,1152,$38)|0);
  $r = 0;
  while(1) {
   $39 = $r;
   $40 = ($39|0)<(64);
   if (!($40)) {
    break;
   }
   $c = 0;
   while(1) {
    $41 = $c;
    $42 = ($41|0)<(9);
    $43 = $r;
    if (!($42)) {
     break;
    }
    $44 = ($43*9)|0;
    $45 = $44<<1;
    $46 = $c;
    $47 = $46<<1;
    $48 = (($45) + ($47))|0;
    $49 = (($buf) + ($48)|0);
    $50 = HEAP8[$49>>0]|0;
    $n = $50;
    $51 = $r;
    $52 = ($51*9)|0;
    $53 = $52<<1;
    $54 = $c;
    $55 = $54<<1;
    $56 = (($53) + ($55))|0;
    $57 = (($56) + 1)|0;
    $58 = (($buf) + ($57)|0);
    $59 = HEAP8[$58>>0]|0;
    $m = $59;
    $60 = $m;
    $61 = $60&255;
    $62 = ($61|0)>(6);
    if ($62) {
     $63 = $m;
     $64 = $63&255;
     $65 = ($64|0)<(16);
     if ($65) {
      $66 = $n;
      $67 = $66&255;
      $68 = ($67|0)!=(128);
      if ($68) {
       label = 20;
       break L17;
      }
     }
    }
    $69 = $m;
    $70 = $69&255;
    $71 = $70 & 240;
    $72 = $71 >> 4;
    $73 = ($72|0)>(6);
    if ($73) {
     $74 = $m;
     $75 = $74&255;
     $76 = $75 & 240;
     $77 = $76 >> 4;
     $78 = ($77|0)<(10);
     if ($78) {
      label = 23;
      break L17;
     }
    }
    $79 = $c;
    $80 = (($79) + 1)|0;
    $c = $80;
   }
   $81 = (($43) + 1)|0;
   $r = $81;
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 if ((label|0) == 20) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 23) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 27) {
  $84 = $1;
  $85 = $2;
  _read_title($84,$85,0);
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _hsc_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $buf = 0, $c = 0, $e = 0, $event = 0, $i = 0, $ins = 0, $mod = 0, $pat = 0, $r = 0, $sid = 0, $vararg_buffer = 0, $x = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $e = sp + 1624|0;
 $buf = sp + 88|0;
 $ins = sp + 4|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($buf,1,1536,$7)|0);
 $x = $buf;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(128);
  if (!($9)) {
   break;
  }
  $10 = $x;
  $11 = ((($10)) + 9|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & -4;
  $15 = ($14|0)!=(0);
  if ($15) {
   break;
  }
  $16 = $x;
  $17 = ((($16)) + 10|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 & -4;
  $21 = ($20|0)!=(0);
  if ($21) {
   break;
  }
  $22 = $x;
  $23 = ((($22)) + 8|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 & -16;
  $27 = ($26|0)!=(0);
  if ($27) {
   break;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
  $30 = $x;
  $31 = ((($30)) + 12|0);
  $x = $31;
 }
 $32 = $i;
 $33 = $mod;
 $34 = ((($33)) + 140|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 $36 = $3;
 $37 = (($36) + 0)|0;
 (_hio_seek($35,$37,0)|0);
 $38 = $mod;
 $39 = ((($38)) + 136|0);
 HEAP32[$39>>2] = 9;
 $40 = $mod;
 $41 = ((($40)) + 152|0);
 HEAP32[$41>>2] = 135;
 $42 = $mod;
 $43 = ((($42)) + 148|0);
 HEAP32[$43>>2] = 6;
 $44 = $mod;
 $45 = ((($44)) + 140|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $mod;
 $48 = ((($47)) + 144|0);
 HEAP32[$48>>2] = $46;
 $49 = $1;
 $50 = ((($49)) + 1280|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 | 4096;
 HEAP32[$50>>2] = $52;
 $53 = $1;
 _set_type($53,5176,$vararg_buffer);
 $54 = $mod;
 $55 = (_instrument_init($54)|0);
 $56 = ($55|0)<(0);
 if ($56) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $57 = $2;
 (_hio_read($buf,1,1536,$57)|0);
 $sid = $buf;
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = $mod;
  $60 = ((($59)) + 140|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($58|0)<($61|0);
  if (!($62)) {
   label = 16;
   break;
  }
  $63 = $mod;
  $64 = $i;
  $65 = (_subinstrument_alloc($63,$64,1)|0);
  $66 = ($65|0)<(0);
  if ($66) {
   label = 12;
   break;
  }
  $67 = $i;
  $68 = $mod;
  $69 = ((($68)) + 176|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + (($67*764)|0)|0);
  $72 = ((($71)) + 36|0);
  HEAP32[$72>>2] = 1;
  $73 = $i;
  $74 = $mod;
  $75 = ((($74)) + 176|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + (($73*764)|0)|0);
  $78 = ((($77)) + 756|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$79>>2] = 64;
  $80 = $sid;
  $81 = ((($80)) + 11|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = (($83|0) / 4)&-1;
  $85 = $i;
  $86 = $mod;
  $87 = ((($86)) + 176|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + (($85*764)|0)|0);
  $90 = ((($89)) + 756|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($91)) + 16|0);
  HEAP32[$92>>2] = $84;
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($99)) + 8|0);
  HEAP32[$100>>2] = 128;
  $101 = $i;
  $102 = $mod;
  $103 = ((($102)) + 176|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + (($101*764)|0)|0);
  $106 = ((($105)) + 756|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107)) + 12|0);
  HEAP32[$108>>2] = 0;
  $109 = $i;
  $110 = $i;
  $111 = $mod;
  $112 = ((($111)) + 176|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + (($110*764)|0)|0);
  $115 = ((($114)) + 756|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 40|0);
  HEAP32[$117>>2] = $109;
  $118 = $sid;
  $119 = ((($118)) + 7|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $121 & 15;
  $123 = $122<<5;
  $124 = $i;
  $125 = $mod;
  $126 = ((($125)) + 176|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + (($124*764)|0)|0);
  $129 = ((($128)) + 40|0);
  HEAP32[$129>>2] = $123;
  $130 = $1;
  $131 = $2;
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 180|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + (($132*52)|0)|0);
  $137 = $sid;
  $138 = (_load_sample($130,$131,12288,$136,$137)|0);
  $139 = ($138|0)<(0);
  if ($139) {
   label = 14;
   break;
  }
  $140 = $i;
  $141 = (($140) + 1)|0;
  $i = $141;
  $142 = $sid;
  $143 = ((($142)) + 12|0);
  $sid = $143;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 else if ((label|0) == 16) {
  $i = 0;
  $pat = 0;
  while(1) {
   $144 = $i;
   $145 = ($144|0)<(51);
   if (!($145)) {
    break;
   }
   $146 = $i;
   $147 = $mod;
   $148 = ((($147)) + 952|0);
   $149 = (($148) + ($146)|0);
   $150 = $2;
   (_hio_read($149,1,1,$150)|0);
   $151 = $i;
   $152 = $mod;
   $153 = ((($152)) + 952|0);
   $154 = (($153) + ($151)|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = $156 & 128;
   $158 = ($157|0)!=(0);
   if ($158) {
    break;
   }
   $159 = $i;
   $160 = $mod;
   $161 = ((($160)) + 952|0);
   $162 = (($161) + ($159)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $pat;
   $166 = ($164|0)>($165|0);
   if ($166) {
    $167 = $i;
    $168 = $mod;
    $169 = ((($168)) + 952|0);
    $170 = (($169) + ($167)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $pat = $172;
   }
   $173 = $i;
   $174 = (($173) + 1)|0;
   $i = $174;
  }
  $175 = $2;
  $176 = $i;
  $177 = (50 - ($176))|0;
  (_hio_seek($175,$177,1)|0);
  $178 = $i;
  $179 = $mod;
  $180 = ((($179)) + 156|0);
  HEAP32[$180>>2] = $178;
  $181 = $pat;
  $182 = (($181) + 1)|0;
  $183 = $mod;
  $184 = ((($183)) + 128|0);
  HEAP32[$184>>2] = $182;
  $185 = $mod;
  $186 = ((($185)) + 128|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $mod;
  $189 = ((($188)) + 136|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = Math_imul($187, $190)|0;
  $192 = $mod;
  $193 = ((($192)) + 132|0);
  HEAP32[$193>>2] = $191;
  $194 = $mod;
  $195 = (_pattern_init($194)|0);
  $196 = ($195|0)<(0);
  if ($196) {
   $0 = -1;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
  }
  $i = 0;
  while(1) {
   $197 = $i;
   $198 = $mod;
   $199 = ((($198)) + 128|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($197|0)<($200|0);
   if (!($201)) {
    break;
   }
   dest=$ins; src=5192; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $202 = $mod;
   $203 = $i;
   $204 = (_pattern_tracks_alloc($202,$203,64)|0);
   $205 = ($204|0)<(0);
   if ($205) {
    label = 27;
    break;
   }
   $r = 0;
   while(1) {
    $206 = $r;
    $207 = $i;
    $208 = $mod;
    $209 = ((($208)) + 168|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (($210) + ($207<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = HEAP32[$212>>2]|0;
    $214 = ($206|0)<($213|0);
    if (!($214)) {
     break;
    }
    $c = 0;
    while(1) {
     $215 = $c;
     $216 = ($215|0)<(9);
     if (!($216)) {
      break;
     }
     $217 = $2;
     (_hio_read($e,1,2,$217)|0);
     $218 = $r;
     $219 = $c;
     $220 = $i;
     $221 = $1;
     $222 = ((($221)) + 168|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($223) + ($220<<2)|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ((($225)) + 4|0);
     $227 = (($226) + ($219<<2)|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = $1;
     $230 = ((($229)) + 172|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (($231) + ($228<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ((($233)) + 4|0);
     $235 = (($234) + ($218<<3)|0);
     $event = $235;
     $236 = HEAP8[$e>>0]|0;
     $237 = $236&255;
     $238 = $237 & 128;
     $239 = ($238|0)!=(0);
     do {
      if ($239) {
       $240 = ((($e)) + 1|0);
       $241 = HEAP8[$240>>0]|0;
       $242 = $241&255;
       $243 = (($242) + 1)|0;
       $244 = $c;
       $245 = (($ins) + ($244<<2)|0);
       HEAP32[$245>>2] = $243;
      } else {
       $246 = HEAP8[$e>>0]|0;
       $247 = $246&255;
       $248 = ($247|0)==(127);
       if ($248) {
        $249 = $event;
        HEAP8[$249>>0] = -127;
        break;
       }
       $250 = HEAP8[$e>>0]|0;
       $251 = $250&255;
       $252 = ($251|0)>(0);
       if ($252) {
        $253 = HEAP8[$e>>0]|0;
        $254 = $253&255;
        $255 = (($254) + 25)|0;
        $256 = $255&255;
        $257 = $event;
        HEAP8[$257>>0] = $256;
        $258 = $c;
        $259 = (($ins) + ($258<<2)|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260&255;
        $262 = $event;
        $263 = ((($262)) + 1|0);
        HEAP8[$263>>0] = $261;
       }
      }
     } while(0);
     $264 = $event;
     $265 = ((($264)) + 3|0);
     HEAP8[$265>>0] = 0;
     $266 = $event;
     $267 = ((($266)) + 4|0);
     HEAP8[$267>>0] = 0;
     $268 = ((($e)) + 1|0);
     $269 = HEAP8[$268>>0]|0;
     $270 = $269&255;
     $271 = ($270|0)==(1);
     if ($271) {
      $272 = $event;
      $273 = ((($272)) + 3|0);
      HEAP8[$273>>0] = 13;
      $274 = $event;
      $275 = ((($274)) + 4|0);
      HEAP8[$275>>0] = 0;
     }
     $276 = $c;
     $277 = (($276) + 1)|0;
     $c = $277;
    }
    $278 = $r;
    $279 = (($278) + 1)|0;
    $r = $279;
   }
   $280 = $i;
   $281 = (($280) + 1)|0;
   $i = $281;
  }
  if ((label|0) == 27) {
   $0 = -1;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
  }
  $i = 0;
  while(1) {
   $282 = $i;
   $283 = $mod;
   $284 = ((($283)) + 136|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($282|0)<($285|0);
   if (!($286)) {
    break;
   }
   $287 = $i;
   $288 = $mod;
   $289 = ((($288)) + 184|0);
   $290 = (($289) + (($287*12)|0)|0);
   HEAP32[$290>>2] = 128;
   $291 = $i;
   $292 = $mod;
   $293 = ((($292)) + 184|0);
   $294 = (($293) + (($291*12)|0)|0);
   $295 = ((($294)) + 8|0);
   HEAP32[$295>>2] = 1;
   $296 = $i;
   $297 = (($296) + 1)|0;
   $i = $297;
  }
  $298 = $1;
  $299 = ((($298)) + 6556|0);
  HEAP32[$299>>2] = 23408;
  $0 = 0;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 return (0)|0;
}
function _liq_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,14,$4)|0);
 $6 = ($5>>>0)<(14);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,5664,14)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,30);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _liq_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $channel = 0, $count = 0, $event = 0;
 var $i = 0, $lh = 0, $li = 0, $lp = 0, $mod = 0, $pmag = 0, $row = 0, $sub = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x1 = 0, $x2 = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $lh = sp + 232|0;
 $li = sp + 80|0;
 $lp = sp + 40|0;
 $tracker_name = sp + 376|0;
 $b = sp + 372|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($lh,14,1,$7)|0);
 $8 = ((($lh)) + 14|0);
 $9 = $2;
 (_hio_read($8,30,1,$9)|0);
 $10 = ((($lh)) + 44|0);
 $11 = $2;
 (_hio_read($10,20,1,$11)|0);
 $12 = $2;
 (_hio_read8($12)|0);
 $13 = ((($lh)) + 65|0);
 $14 = $2;
 (_hio_read($13,20,1,$14)|0);
 $15 = $2;
 $16 = (_hio_read16l($15)|0);
 $17 = ((($lh)) + 86|0);
 HEAP16[$17>>1] = $16;
 $18 = $2;
 $19 = (_hio_read16l($18)|0);
 $20 = ((($lh)) + 88|0);
 HEAP16[$20>>1] = $19;
 $21 = $2;
 $22 = (_hio_read16l($21)|0);
 $23 = ((($lh)) + 90|0);
 HEAP16[$23>>1] = $22;
 $24 = $2;
 $25 = (_hio_read16l($24)|0);
 $26 = ((($lh)) + 92|0);
 HEAP16[$26>>1] = $25;
 $27 = $2;
 $28 = (_hio_read16l($27)|0);
 $29 = ((($lh)) + 94|0);
 HEAP16[$29>>1] = $28;
 $30 = $2;
 $31 = (_hio_read16l($30)|0);
 $32 = ((($lh)) + 96|0);
 HEAP16[$32>>1] = $31;
 $33 = $2;
 $34 = (_hio_read32l($33)|0);
 $35 = ((($lh)) + 100|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = (_hio_read16l($36)|0);
 $38 = ((($lh)) + 104|0);
 HEAP16[$38>>1] = $37;
 $39 = $2;
 $40 = (_hio_read16l($39)|0);
 $41 = ((($lh)) + 106|0);
 HEAP16[$41>>1] = $40;
 $42 = $2;
 $43 = (_hio_read16l($42)|0);
 $44 = ((($lh)) + 108|0);
 HEAP16[$44>>1] = $43;
 $45 = $2;
 $46 = (_hio_read16l($45)|0);
 $47 = ((($lh)) + 110|0);
 HEAP16[$47>>1] = $46;
 $48 = ((($lh)) + 86|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = $50 >> 8;
 $52 = ($51|0)==(0);
 if ($52) {
  $53 = ((($lh)) + 108|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = ((($lh)) + 110|0);
  HEAP16[$55>>1] = $54;
  $56 = ((($lh)) + 108|0);
  HEAP16[$56>>1] = 0;
  $57 = $2;
  (_hio_seek($57,-2,1)|0);
 }
 $58 = ((($lh)) + 88|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = $mod;
 $62 = ((($61)) + 148|0);
 HEAP32[$62>>2] = $60;
 $63 = ((($lh)) + 90|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = $mod;
 $67 = ((($66)) + 152|0);
 HEAP32[$67>>2] = $65;
 $68 = ((($lh)) + 96|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69&65535;
 $71 = $mod;
 $72 = ((($71)) + 136|0);
 HEAP32[$72>>2] = $70;
 $73 = ((($lh)) + 104|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74&65535;
 $76 = $mod;
 $77 = ((($76)) + 128|0);
 HEAP32[$77>>2] = $75;
 $78 = ((($lh)) + 106|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = $79&65535;
 $81 = $mod;
 $82 = ((($81)) + 144|0);
 HEAP32[$82>>2] = $80;
 $83 = $mod;
 $84 = ((($83)) + 140|0);
 HEAP32[$84>>2] = $80;
 $85 = ((($lh)) + 108|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = $mod;
 $89 = ((($88)) + 156|0);
 HEAP32[$89>>2] = $87;
 $90 = $mod;
 $91 = ((($90)) + 136|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $mod;
 $94 = ((($93)) + 128|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = Math_imul($92, $95)|0;
 $97 = $mod;
 $98 = ((($97)) + 132|0);
 HEAP32[$98>>2] = $96;
 $99 = $1;
 $100 = ((($99)) + 1280|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $101 | 16384;
 HEAP32[$100>>2] = $102;
 $103 = $mod;
 $104 = ((($lh)) + 14|0);
 (_strncpy(($103|0),($104|0),30)|0);
 $105 = ((($lh)) + 65|0);
 (_strncpy(($tracker_name|0),($105|0),20)|0);
 $106 = ((($tracker_name)) + 20|0);
 HEAP8[$106>>0] = 0;
 $i = 20;
 while(1) {
  $107 = $i;
  $108 = ($107|0)>=(0);
  if (!($108)) {
   break;
  }
  $109 = $i;
  $110 = (($tracker_name) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111 << 24 >> 24;
  $113 = ($112|0)==(32);
  if ($113) {
   $114 = $i;
   $115 = (($tracker_name) + ($114)|0);
   HEAP8[$115>>0] = 0;
  }
  $116 = $i;
  $117 = (($tracker_name) + ($116)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = ($118<<24>>24)!=(0);
  if ($119) {
   break;
  }
  $120 = $i;
  $121 = (($120) + -1)|0;
  $i = $121;
 }
 $122 = $mod;
 $123 = ((($122)) + 64|0);
 $124 = ((($lh)) + 86|0);
 $125 = HEAP16[$124>>1]|0;
 $126 = $125&65535;
 $127 = $126 >> 8;
 $128 = ((($lh)) + 86|0);
 $129 = HEAP16[$128>>1]|0;
 $130 = $129&65535;
 $131 = $130 & 255;
 HEAP32[$vararg_buffer>>2] = $tracker_name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $127;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $131;
 (_snprintf($123,64,5248,$vararg_buffer)|0);
 $132 = ((($lh)) + 86|0);
 $133 = HEAP16[$132>>1]|0;
 $134 = $133&65535;
 $135 = ($134|0)>(0);
 if ($135) {
  $i = 0;
  while(1) {
   $136 = $i;
   $137 = $mod;
   $138 = ((($137)) + 136|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($136|0)<($139|0);
   if (!($140)) {
    break;
   }
   $141 = $2;
   $142 = (_hio_read8($141)|0);
   $143 = $142&255;
   $144 = $143 << 2;
   $145 = $i;
   $146 = $mod;
   $147 = ((($146)) + 184|0);
   $148 = (($147) + (($145*12)|0)|0);
   HEAP32[$148>>2] = $144;
   $149 = $i;
   $150 = (($149) + 1)|0;
   $i = $150;
  }
  $i = 0;
  while(1) {
   $151 = $i;
   $152 = $mod;
   $153 = ((($152)) + 136|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($151|0)<($154|0);
   if (!($155)) {
    break;
   }
   $156 = $2;
   $157 = (_hio_read8($156)|0);
   $158 = $157&255;
   $159 = $i;
   $160 = $mod;
   $161 = ((($160)) + 184|0);
   $162 = (($161) + (($159*12)|0)|0);
   $163 = ((($162)) + 4|0);
   HEAP32[$163>>2] = $158;
   $164 = $i;
   $165 = (($164) + 1)|0;
   $i = $165;
  }
  $166 = $mod;
  $167 = ((($166)) + 952|0);
  $168 = $mod;
  $169 = ((($168)) + 156|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $2;
  (_hio_read($167,1,$170,$171)|0);
  $172 = $2;
  $173 = ((($lh)) + 110|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = $mod;
  $177 = ((($176)) + 136|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $178<<1;
  $180 = (109 + ($179))|0;
  $181 = $mod;
  $182 = ((($181)) + 156|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($180) + ($183))|0;
  $185 = (($175) - ($184))|0;
  (_hio_seek($172,$185,1)|0);
 } else {
  $186 = $2;
  $187 = $3;
  $188 = (($187) + 240)|0;
  (_hio_seek($186,$188,0)|0);
  $189 = $mod;
  $190 = ((($189)) + 952|0);
  $191 = $2;
  (_hio_read($190,1,256,$191)|0);
  $192 = $2;
  $193 = $3;
  $194 = ((($lh)) + 110|0);
  $195 = HEAP16[$194>>1]|0;
  $196 = $195&65535;
  $197 = (($193) + ($196))|0;
  (_hio_seek($192,$197,0)|0);
  $i = 0;
  while(1) {
   $198 = $i;
   $199 = ($198|0)<(256);
   if (!($199)) {
    break;
   }
   $200 = $i;
   $201 = $mod;
   $202 = ((($201)) + 952|0);
   $203 = (($202) + ($200)|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = ($205|0)==(255);
   if ($206) {
    break;
   }
   $207 = $i;
   $208 = (($207) + 1)|0;
   $i = $208;
  }
  $209 = $i;
  $210 = $mod;
  $211 = ((($210)) + 156|0);
  HEAP32[$211>>2] = $209;
 }
 $212 = $mod;
 $213 = (_pattern_init($212)|0);
 $214 = ($213|0)<(0);
 if ($214) {
  $0 = -1;
  $694 = $0;
  STACKTOP = sp;return ($694|0);
 }
 $x2 = 0;
 $x1 = 0;
 $i = 0;
 L33: while(1) {
  $215 = $i;
  $216 = $mod;
  $217 = ((($216)) + 128|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ($215|0)<($218|0);
  $220 = $mod;
  if (!($219)) {
   label = 80;
   break;
  }
  $221 = $i;
  $222 = (_pattern_alloc($220,$221)|0);
  $223 = ($222|0)<(0);
  if ($223) {
   label = 27;
   break;
  }
  $224 = $2;
  $225 = (_hio_read32b($224)|0);
  $pmag = $225;
  $226 = $pmag;
  $227 = ($226|0)==(555819297);
  if (!($227)) {
   $228 = $pmag;
   $229 = ($228|0)!=(1280311296);
   if ($229) {
    label = 30;
    break;
   }
   $230 = $2;
   (_hio_read($lp,30,1,$230)|0);
   $231 = $2;
   $232 = (_hio_read16l($231)|0);
   $233 = ((($lp)) + 30|0);
   HEAP16[$233>>1] = $232;
   $234 = $2;
   $235 = (_hio_read32l($234)|0);
   $236 = ((($lp)) + 32|0);
   HEAP32[$236>>2] = $235;
   $237 = $2;
   $238 = (_hio_read32l($237)|0);
   $239 = ((($lp)) + 36|0);
   HEAP32[$239>>2] = $238;
   $240 = ((($lp)) + 30|0);
   $241 = HEAP16[$240>>1]|0;
   $242 = $241&65535;
   $243 = $i;
   $244 = $mod;
   $245 = ((($244)) + 168|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($246) + ($243<<2)|0);
   $248 = HEAP32[$247>>2]|0;
   HEAP32[$248>>2] = $242;
   $249 = $mod;
   $250 = $i;
   (_tracks_in_pattern_alloc($249,$250)|0);
   $row = 0;
   $channel = 0;
   $251 = $2;
   $252 = (_hio_tell($251)|0);
   $count = $252;
   L40: while(1) {
    $253 = $row;
    $254 = $channel;
    $255 = $i;
    $256 = $1;
    $257 = ((($256)) + 168|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = (($258) + ($255<<2)|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ((($260)) + 4|0);
    $262 = (($261) + ($254<<2)|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = $1;
    $265 = ((($264)) + 172|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = (($266) + ($263<<2)|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = ((($268)) + 4|0);
    $270 = (($269) + ($253<<3)|0);
    $event = $270;
    $271 = $x2;
    $272 = ($271<<24>>24)!=(0);
    L42: do {
     if ($272) {
      $273 = $x1;
      $274 = $event;
      $275 = $2;
      _decode_event($273,$274,$275);
      $276 = $channel;
      $277 = $event;
      _xlat_fx239($276,$277);
      $278 = $x2;
      $279 = (($278) + -1)<<24>>24;
      $x2 = $279;
     } else {
      $280 = $2;
      $281 = (_hio_read8($280)|0);
      $x1 = $281;
      L44: while(1) {
       $282 = $row;
       $283 = $channel;
       $284 = $i;
       $285 = $1;
       $286 = ((($285)) + 168|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = (($287) + ($284<<2)|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = ((($289)) + 4|0);
       $291 = (($290) + ($283<<2)|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = $1;
       $294 = ((($293)) + 172|0);
       $295 = HEAP32[$294>>2]|0;
       $296 = (($295) + ($292<<2)|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = ((($297)) + 4|0);
       $299 = (($298) + ($282<<3)|0);
       $event = $299;
       $300 = $x1;
       $301 = $300&255;
       switch ($301|0) {
       case 224:  {
        label = 43;
        break L44;
        break;
       }
       case 160:  {
        break L44;
        break;
       }
       case 192:  {
        break L40;
        break;
       }
       case 128:  {
        break L42;
        break;
       }
       case 225:  {
        label = 39;
        break L44;
        break;
       }
       default: {
       }
       }
       $330 = $x1;
       $331 = $330&255;
       $332 = ($331|0)>(192);
       if ($332) {
        $333 = $x1;
        $334 = $333&255;
        $335 = ($334|0)<(224);
        if ($335) {
         label = 46;
         break;
        }
       }
       $341 = $x1;
       $342 = $341&255;
       $343 = ($342|0)>(160);
       if ($343) {
        $344 = $x1;
        $345 = $344&255;
        $346 = ($345|0)<(192);
        if ($346) {
         label = 49;
         break;
        }
       }
       $354 = $x1;
       $355 = $354&255;
       $356 = ($355|0)>(128);
       if ($356) {
        $357 = $x1;
        $358 = $357&255;
        $359 = ($358|0)<(160);
        if ($359) {
         label = 52;
         break;
        }
       }
       $392 = $x1;
       $393 = $392&255;
       $394 = ($393|0)!=(255);
       $395 = $x1;
       $396 = $395&255;
       if ($394) {
        $397 = (37 + ($396))|0;
        $398 = $397&255;
        $399 = $event;
        HEAP8[$399>>0] = $398;
       } else {
        $400 = ($396|0)==(254);
        if ($400) {
         $401 = $event;
         HEAP8[$401>>0] = -127;
        }
       }
       $402 = $2;
       $403 = (_hio_read8($402)|0);
       $x1 = $403;
       $404 = $x1;
       $405 = $404&255;
       $406 = ($405|0)>(100);
       if (!($406)) {
        label = 61;
        break;
       }
       $407 = $row;
       $408 = (($407) + 1)|0;
       $row = $408;
      }
      if ((label|0) == 39) {
       label = 0;
       $309 = $2;
       $310 = (_hio_read8($309)|0);
       $x1 = $310;
       $311 = $x1;
       $312 = $311&255;
       $313 = $channel;
       $314 = (($313) + ($312))|0;
       $channel = $314;
      }
      else if ((label|0) == 43) {
       label = 0;
       $324 = $2;
       $325 = (_hio_read8($324)|0);
       $x1 = $325;
       $326 = $x1;
       $327 = $326&255;
       $328 = $row;
       $329 = (($328) + ($327))|0;
       $row = $329;
       break;
      }
      else if ((label|0) == 46) {
       label = 0;
       $336 = $x1;
       $337 = $event;
       $338 = $2;
       _decode_event($336,$337,$338);
       $339 = $channel;
       $340 = $event;
       _xlat_fx239($339,$340);
       break;
      }
      else if ((label|0) == 49) {
       label = 0;
       $347 = $2;
       $348 = (_hio_read8($347)|0);
       $x2 = $348;
       $349 = $x1;
       $350 = $event;
       $351 = $2;
       _decode_event($349,$350,$351);
       $352 = $channel;
       $353 = $event;
       _xlat_fx239($352,$353);
       break;
      }
      else if ((label|0) == 52) {
       label = 0;
       $360 = $2;
       $361 = (_hio_read8($360)|0);
       $x2 = $361;
       $362 = $x1;
       $363 = $event;
       $364 = $2;
       _decode_event($362,$363,$364);
       $365 = $channel;
       $366 = $event;
       _xlat_fx239($365,$366);
       while(1) {
        $367 = $x2;
        $368 = ($367<<24>>24)!=(0);
        if (!($368)) {
         break L42;
        }
        $369 = $row;
        $370 = (($369) + 1)|0;
        $row = $370;
        $371 = $row;
        $372 = $channel;
        $373 = $i;
        $374 = $1;
        $375 = ((($374)) + 168|0);
        $376 = HEAP32[$375>>2]|0;
        $377 = (($376) + ($373<<2)|0);
        $378 = HEAP32[$377>>2]|0;
        $379 = ((($378)) + 4|0);
        $380 = (($379) + ($372<<2)|0);
        $381 = HEAP32[$380>>2]|0;
        $382 = $1;
        $383 = ((($382)) + 172|0);
        $384 = HEAP32[$383>>2]|0;
        $385 = (($384) + ($381<<2)|0);
        $386 = HEAP32[$385>>2]|0;
        $387 = ((($386)) + 4|0);
        $388 = (($387) + ($371<<3)|0);
        $389 = $event;
        ;HEAP8[$388>>0]=HEAP8[$389>>0]|0;HEAP8[$388+1>>0]=HEAP8[$389+1>>0]|0;HEAP8[$388+2>>0]=HEAP8[$389+2>>0]|0;HEAP8[$388+3>>0]=HEAP8[$389+3>>0]|0;HEAP8[$388+4>>0]=HEAP8[$389+4>>0]|0;HEAP8[$388+5>>0]=HEAP8[$389+5>>0]|0;HEAP8[$388+6>>0]=HEAP8[$389+6>>0]|0;HEAP8[$388+7>>0]=HEAP8[$389+7>>0]|0;
        $390 = $x2;
        $391 = (($390) + -1)<<24>>24;
        $x2 = $391;
       }
      }
      else if ((label|0) == 61) {
       label = 0;
       $409 = $x1;
       $410 = $409&255;
       $411 = ($410|0)!=(255);
       if ($411) {
        $412 = $x1;
        $413 = $412&255;
        $414 = (($413) + 1)|0;
        $415 = $414&255;
        $416 = $event;
        $417 = ((($416)) + 1|0);
        HEAP8[$417>>0] = $415;
       }
       $418 = $2;
       $419 = (_hio_read8($418)|0);
       $x1 = $419;
       $420 = $x1;
       $421 = $420&255;
       $422 = ($421|0)!=(255);
       if ($422) {
        $423 = $x1;
        $424 = $event;
        $425 = ((($424)) + 2|0);
        HEAP8[$425>>0] = $423;
       }
       $426 = $2;
       $427 = (_hio_read8($426)|0);
       $x1 = $427;
       $428 = $x1;
       $429 = $428&255;
       $430 = ($429|0)!=(255);
       if ($430) {
        $431 = $x1;
        $432 = $431&255;
        $433 = (($432) - 65)|0;
        $434 = $433&255;
        $435 = $event;
        $436 = ((($435)) + 3|0);
        HEAP8[$436>>0] = $434;
       }
       $437 = $2;
       $438 = (_hio_read8($437)|0);
       $x1 = $438;
       $439 = $x1;
       $440 = $event;
       $441 = ((($440)) + 4|0);
       HEAP8[$441>>0] = $439;
       $442 = $event;
       $443 = ((($442)) + 3|0);
       $444 = HEAP8[$443>>0]|0;
       $445 = $444&255;
       $446 = ($445|0)<=(26);
       if (!($446)) {
        label = 68;
        break L33;
       }
       $447 = $channel;
       $448 = $event;
       _xlat_fx239($447,$448);
       $449 = $event;
       $450 = HEAP8[$449>>0]|0;
       $451 = $450&255;
       $452 = ($451|0)<=(119);
       if (!($452)) {
        $453 = $event;
        $454 = HEAP8[$453>>0]|0;
        $455 = $454&255;
        $456 = ($455|0)==(129);
        if (!($456)) {
         label = 71;
         break L33;
        }
       }
       $457 = $event;
       $458 = ((($457)) + 1|0);
       $459 = HEAP8[$458>>0]|0;
       $460 = $459&255;
       $461 = ($460|0)<=(100);
       if (!($461)) {
        label = 73;
        break L33;
       }
       $462 = $event;
       $463 = ((($462)) + 2|0);
       $464 = HEAP8[$463>>0]|0;
       $465 = $464&255;
       $466 = ($465|0)<=(65);
       if (!($466)) {
        label = 75;
        break L33;
       }
       break;
      }
      $315 = $channel;
      $316 = (($315) + 1)|0;
      $channel = $316;
      $317 = $channel;
      $318 = $mod;
      $319 = ((($318)) + 136|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = ($317|0)>=($320|0);
      if ($321) {
       $322 = $channel;
       $323 = (($322) + -1)|0;
       $channel = $323;
      }
      $row = -1;
     }
    } while(0);
    $467 = $row;
    $468 = (($467) + 1)|0;
    $row = $468;
    $469 = $row;
    $470 = $i;
    $471 = $mod;
    $472 = ((($471)) + 168|0);
    $473 = HEAP32[$472>>2]|0;
    $474 = (($473) + ($470<<2)|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = HEAP32[$475>>2]|0;
    $477 = ($469|0)>=($476|0);
    if (!($477)) {
     continue;
    }
    $row = 0;
    $x2 = 0;
    $478 = $channel;
    $479 = (($478) + 1)|0;
    $channel = $479;
    $480 = $channel;
    $481 = $mod;
    $482 = ((($481)) + 136|0);
    $483 = HEAP32[$482>>2]|0;
    $484 = ($480|0)>=($483|0);
    $$ = $484 ? 0 : $479;
    $channel = $$;
   }
   $302 = $2;
   $303 = (_hio_tell($302)|0);
   $304 = $count;
   $305 = (($303) - ($304))|0;
   $306 = ((($lp)) + 32|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = ($305|0)==($307|0);
   if (!($308)) {
    label = 37;
    break;
   }
  }
  $485 = $i;
  $486 = (($485) + 1)|0;
  $i = $486;
 }
 if ((label|0) == 27) {
  $0 = -1;
  $694 = $0;
  STACKTOP = sp;return ($694|0);
 }
 else if ((label|0) == 30) {
  $0 = -1;
  $694 = $0;
  STACKTOP = sp;return ($694|0);
 }
 else if ((label|0) == 37) {
  ___assert_fail((5264|0),(5296|0),363,(5328|0));
  // unreachable;
 }
 else if ((label|0) == 68) {
  ___assert_fail((5344|0),(5296|0),443,(5328|0));
  // unreachable;
 }
 else if ((label|0) == 71) {
  ___assert_fail((5368|0),(5296|0),450,(5328|0));
  // unreachable;
 }
 else if ((label|0) == 73) {
  ___assert_fail((5424|0),(5296|0),451,(5328|0));
  // unreachable;
 }
 else if ((label|0) == 75) {
  ___assert_fail((5448|0),(5296|0),452,(5328|0));
  // unreachable;
 }
 else if ((label|0) == 80) {
  $487 = (_instrument_init($220)|0);
  $488 = ($487|0)<(0);
  if ($488) {
   $0 = -1;
   $694 = $0;
   STACKTOP = sp;return ($694|0);
  }
  $i = 0;
  while(1) {
   $489 = $i;
   $490 = $mod;
   $491 = ((($490)) + 140|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = ($489|0)<($492|0);
   if (!($493)) {
    label = 103;
    break;
   }
   $494 = $i;
   $495 = $mod;
   $496 = ((($495)) + 176|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = (($497) + (($494*764)|0)|0);
   $xxi = $498;
   $499 = $i;
   $500 = $mod;
   $501 = ((($500)) + 180|0);
   $502 = HEAP32[$501>>2]|0;
   $503 = (($502) + (($499*52)|0)|0);
   $xxs = $503;
   $504 = $mod;
   $505 = $i;
   $506 = (_subinstrument_alloc($504,$505,1)|0);
   $507 = ($506|0)<(0);
   if ($507) {
    label = 85;
    break;
   }
   $508 = $xxi;
   $509 = ((($508)) + 756|0);
   $510 = HEAP32[$509>>2]|0;
   $sub = $510;
   $511 = $2;
   (_hio_read($b,1,4,$511)|0);
   $512 = HEAP8[$b>>0]|0;
   $513 = $512&255;
   $514 = ($513|0)==(63);
   if ($514) {
    $515 = ((($b)) + 1|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = $516&255;
    $518 = ($517|0)==(63);
    if ($518) {
     $519 = ((($b)) + 2|0);
     $520 = HEAP8[$519>>0]|0;
     $521 = $520&255;
     $522 = ($521|0)==(63);
     if ($522) {
      $523 = ((($b)) + 3|0);
      $524 = HEAP8[$523>>0]|0;
      $525 = $524&255;
      $526 = ($525|0)==(63);
      if (!($526)) {
       label = 90;
      }
     } else {
      label = 90;
     }
    } else {
     label = 90;
    }
   } else {
    label = 90;
   }
   if ((label|0) == 90) {
    label = 0;
    $527 = HEAP8[$b>>0]|0;
    $528 = $527&255;
    $529 = ($528|0)==(76);
    if (!($529)) {
     label = 94;
     break;
    }
    $530 = ((($b)) + 1|0);
    $531 = HEAP8[$530>>0]|0;
    $532 = $531&255;
    $533 = ($532|0)==(68);
    if (!($533)) {
     label = 94;
     break;
    }
    $534 = ((($b)) + 2|0);
    $535 = HEAP8[$534>>0]|0;
    $536 = $535&255;
    $537 = ($536|0)==(83);
    if (!($537)) {
     label = 94;
     break;
    }
    $538 = ((($b)) + 3|0);
    $539 = HEAP8[$538>>0]|0;
    $540 = $539&255;
    $541 = ($540|0)==(83);
    if (!($541)) {
     label = 94;
     break;
    }
    $542 = $2;
    $543 = (_hio_read16l($542)|0);
    HEAP16[$li>>1] = $543;
    $544 = ((($li)) + 2|0);
    $545 = $2;
    (_hio_read($544,30,1,$545)|0);
    $546 = ((($li)) + 32|0);
    $547 = $2;
    (_hio_read($546,20,1,$547)|0);
    $548 = ((($li)) + 52|0);
    $549 = $2;
    (_hio_read($548,20,1,$549)|0);
    $550 = $2;
    $551 = (_hio_read8($550)|0);
    $552 = ((($li)) + 72|0);
    HEAP8[$552>>0] = $551;
    $553 = $2;
    $554 = (_hio_read32l($553)|0);
    $555 = ((($li)) + 76|0);
    HEAP32[$555>>2] = $554;
    $556 = $2;
    $557 = (_hio_read32l($556)|0);
    $558 = ((($li)) + 80|0);
    HEAP32[$558>>2] = $557;
    $559 = $2;
    $560 = (_hio_read32l($559)|0);
    $561 = ((($li)) + 84|0);
    HEAP32[$561>>2] = $560;
    $562 = $2;
    $563 = (_hio_read32l($562)|0);
    $564 = ((($li)) + 88|0);
    HEAP32[$564>>2] = $563;
    $565 = $2;
    $566 = (_hio_read8($565)|0);
    $567 = ((($li)) + 92|0);
    HEAP8[$567>>0] = $566;
    $568 = $2;
    $569 = (_hio_read8($568)|0);
    $570 = ((($li)) + 93|0);
    HEAP8[$570>>0] = $569;
    $571 = $2;
    $572 = (_hio_read8($571)|0);
    $573 = ((($li)) + 94|0);
    HEAP8[$573>>0] = $572;
    $574 = $2;
    $575 = (_hio_read8($574)|0);
    $576 = ((($li)) + 95|0);
    HEAP8[$576>>0] = $575;
    $577 = $2;
    $578 = (_hio_read8($577)|0);
    $579 = ((($li)) + 96|0);
    HEAP8[$579>>0] = $578;
    $580 = $2;
    $581 = (_hio_read8($580)|0);
    $582 = ((($li)) + 97|0);
    HEAP8[$582>>0] = $581;
    $583 = $2;
    $584 = (_hio_read16l($583)|0);
    $585 = ((($li)) + 98|0);
    HEAP16[$585>>1] = $584;
    $586 = $2;
    $587 = (_hio_read16l($586)|0);
    $588 = ((($li)) + 100|0);
    HEAP16[$588>>1] = $587;
    $589 = $2;
    $590 = (_hio_read32l($589)|0);
    $591 = ((($li)) + 104|0);
    HEAP32[$591>>2] = $590;
    $592 = $2;
    $593 = (_hio_read8($592)|0);
    $594 = ((($li)) + 108|0);
    HEAP8[$594>>0] = $593;
    $595 = ((($li)) + 109|0);
    $596 = $2;
    (_hio_read($595,11,1,$596)|0);
    $597 = ((($li)) + 120|0);
    $598 = $2;
    (_hio_read($597,25,1,$598)|0);
    $599 = ((($li)) + 76|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = ($600|0)!=(0);
    $602 = $601 ^ 1;
    $603 = $602 ^ 1;
    $604 = $603&1;
    $605 = $xxi;
    $606 = ((($605)) + 36|0);
    HEAP32[$606>>2] = $604;
    $607 = $xxi;
    $608 = ((($607)) + 32|0);
    HEAP32[$608>>2] = 64;
    $609 = ((($li)) + 76|0);
    $610 = HEAP32[$609>>2]|0;
    $611 = $xxs;
    $612 = ((($611)) + 32|0);
    HEAP32[$612>>2] = $610;
    $613 = ((($li)) + 80|0);
    $614 = HEAP32[$613>>2]|0;
    $615 = $xxs;
    $616 = ((($615)) + 36|0);
    HEAP32[$616>>2] = $614;
    $617 = ((($li)) + 84|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = $xxs;
    $620 = ((($619)) + 40|0);
    HEAP32[$620>>2] = $618;
    $621 = ((($li)) + 93|0);
    $622 = HEAP8[$621>>0]|0;
    $623 = $622&255;
    $624 = $623 & 1;
    $625 = ($624|0)!=(0);
    if ($625) {
     $626 = $xxs;
     $627 = ((($626)) + 44|0);
     HEAP32[$627>>2] = 1;
     $628 = $xxs;
     $629 = ((($628)) + 32|0);
     $630 = HEAP32[$629>>2]|0;
     $631 = $630 >> 1;
     HEAP32[$629>>2] = $631;
     $632 = $xxs;
     $633 = ((($632)) + 36|0);
     $634 = HEAP32[$633>>2]|0;
     $635 = $634 >> 1;
     HEAP32[$633>>2] = $635;
     $636 = $xxs;
     $637 = ((($636)) + 40|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = $638 >> 1;
     HEAP32[$637>>2] = $639;
    }
    $640 = ((($li)) + 84|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = ($641>>>0)>(0);
    if ($642) {
     $643 = $xxs;
     $644 = ((($643)) + 44|0);
     HEAP32[$644>>2] = 2;
    }
    $645 = ((($li)) + 96|0);
    HEAP8[$645>>0] = 64;
    $646 = ((($li)) + 92|0);
    $647 = HEAP8[$646>>0]|0;
    $648 = $647&255;
    $649 = $sub;
    HEAP32[$649>>2] = $648;
    $650 = ((($li)) + 96|0);
    $651 = HEAP8[$650>>0]|0;
    $652 = $651&255;
    $653 = $sub;
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = $652;
    $655 = ((($li)) + 94|0);
    $656 = HEAP8[$655>>0]|0;
    $657 = $656&255;
    $658 = $sub;
    $659 = ((($658)) + 8|0);
    HEAP32[$659>>2] = $657;
    $660 = $i;
    $661 = $sub;
    $662 = ((($661)) + 40|0);
    HEAP32[$662>>2] = $660;
    $663 = $mod;
    $664 = $i;
    $665 = ((($li)) + 2|0);
    (_instrument_name($663,$664,$665,31)|0);
    $666 = ((($li)) + 88|0);
    $667 = HEAP32[$666>>2]|0;
    $668 = $sub;
    $669 = ((($668)) + 12|0);
    $670 = $sub;
    $671 = ((($670)) + 16|0);
    _c2spd_to_note($667,$669,$671);
    $672 = $2;
    $673 = ((($li)) + 98|0);
    $674 = HEAP16[$673>>1]|0;
    $675 = $674&65535;
    $676 = (($675) - 144)|0;
    (_hio_seek($672,$676,1)|0);
    $677 = $xxs;
    $678 = ((($677)) + 32|0);
    $679 = HEAP32[$678>>2]|0;
    $680 = ($679|0)==(0);
    if (!($680)) {
     $681 = $1;
     $682 = $2;
     $683 = $xxs;
     $684 = (_load_sample($681,$682,0,$683,0)|0);
     $685 = ($684|0)<(0);
     if ($685) {
      label = 101;
      break;
     }
    }
   }
   $686 = $i;
   $687 = (($686) + 1)|0;
   $i = $687;
  }
  if ((label|0) == 85) {
   $0 = -1;
   $694 = $0;
   STACKTOP = sp;return ($694|0);
  }
  else if ((label|0) == 94) {
   ___assert_fail((5472|0),(5296|0),495,(5328|0));
   // unreachable;
  }
  else if ((label|0) == 101) {
   $0 = -1;
   $694 = $0;
   STACKTOP = sp;return ($694|0);
  }
  else if ((label|0) == 103) {
   $688 = $1;
   $689 = ((($688)) + 1280|0);
   $690 = HEAP32[$689>>2]|0;
   $691 = $690 | 293601825;
   HEAP32[$689>>2] = $691;
   $692 = $1;
   $693 = ((($692)) + 1284|0);
   HEAP32[$693>>2] = 2;
   $0 = 0;
   $694 = $0;
   STACKTOP = sp;return ($694|0);
  }
 }
 return (0)|0;
}
function _decode_event($x1,$event,$f) {
 $x1 = $x1|0;
 $event = $event|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x1;
 $1 = $event;
 $2 = $f;
 $3 = $1;
 ;HEAP8[$3>>0]=0|0;HEAP8[$3+1>>0]=0|0;HEAP8[$3+2>>0]=0|0;HEAP8[$3+3>>0]=0|0;HEAP8[$3+4>>0]=0|0;HEAP8[$3+5>>0]=0|0;HEAP8[$3+6>>0]=0|0;HEAP8[$3+7>>0]=0|0;
 $4 = $0;
 $5 = $4&255;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = $2;
   $9 = (_hio_read8($8)|0);
   $x2 = $9;
   $10 = $x2;
   $11 = $10&255;
   $12 = ($11|0)==(254);
   if ($12) {
    $13 = $1;
    HEAP8[$13>>0] = -127;
    break;
   } else {
    $14 = $x2;
    $15 = $14&255;
    $16 = (($15) + 1)|0;
    $17 = (($16) + 36)|0;
    $18 = $17&255;
    $19 = $1;
    HEAP8[$19>>0] = $18;
    break;
   }
  }
 } while(0);
 $20 = $0;
 $21 = $20&255;
 $22 = $21 & 2;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $2;
  $25 = (_hio_read8($24)|0);
  $26 = $25&255;
  $27 = (($26) + 1)|0;
  $28 = $27&255;
  $29 = $1;
  $30 = ((($29)) + 1|0);
  HEAP8[$30>>0] = $28;
 }
 $31 = $0;
 $32 = $31&255;
 $33 = $32 & 4;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $2;
  $36 = (_hio_read8($35)|0);
  $37 = $1;
  $38 = ((($37)) + 2|0);
  HEAP8[$38>>0] = $36;
 }
 $39 = $0;
 $40 = $39&255;
 $41 = $40 & 8;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $2;
  $44 = (_hio_read8($43)|0);
  $45 = $44&255;
  $46 = (($45) - 65)|0;
  $47 = $46&255;
  $48 = $1;
  $49 = ((($48)) + 3|0);
  HEAP8[$49>>0] = $47;
 }
 $50 = $0;
 $51 = $50&255;
 $52 = $51 & 16;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $2;
  $55 = (_hio_read8($54)|0);
  $56 = $1;
  $57 = ((($56)) + 4|0);
  HEAP8[$57>>0] = $55;
 }
 $58 = $1;
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = ($60|0)<=(107);
 if (!($61)) {
  $62 = $1;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($64|0)==(129);
  if (!($65)) {
   ___assert_fail((5568|0),(5296|0),209,(5624|0));
   // unreachable;
  }
 }
 $66 = $1;
 $67 = ((($66)) + 1|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = ($69|0)<=(100);
 if (!($70)) {
  ___assert_fail((5424|0),(5296|0),210,(5624|0));
  // unreachable;
 }
 $71 = $1;
 $72 = ((($71)) + 2|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = ($74|0)<=(64);
 if (!($75)) {
  ___assert_fail((5640|0),(5296|0),211,(5624|0));
  // unreachable;
 }
 $76 = $1;
 $77 = ((($76)) + 3|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = ($79|0)<=(26);
 if ($80) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((5344|0),(5296|0),212,(5624|0));
  // unreachable;
 }
}
function _xlat_fx239($c,$e) {
 $c = $c|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $e;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 240;
 $7 = $6 >> 4;
 $8 = $7&255;
 $h = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 15;
 $14 = $13&255;
 $l = $14;
 $15 = $1;
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (5536 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $1;
 $22 = ((($21)) + 3|0);
 HEAP8[$22>>0] = $20;
 $23 = $20&255;
 if ((($23|0) == 255)) {
  $88 = $1;
  $89 = ((($88)) + 4|0);
  HEAP8[$89>>0] = 0;
  $90 = $1;
  $91 = ((($90)) + 3|0);
  HEAP8[$91>>0] = 0;
  STACKTOP = sp;return;
 } else if ((($23|0) == 14)) {
  $24 = $h;
  $25 = $24&255;
  switch ($25|0) {
  case 14:  {
   $78 = $l;
   $79 = $78&255;
   $80 = $79 | 224;
   $81 = $80&255;
   $82 = $1;
   $83 = ((($82)) + 4|0);
   HEAP8[$83>>0] = $81;
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $55 = $l;
   $56 = $55&255;
   $57 = ($56|0)==(3);
   if ($57) {
    $58 = $l;
    $59 = (($58) + 1)<<24>>24;
    $l = $59;
   }
   $60 = $l;
   $61 = $60&255;
   $62 = $61 | 112;
   $63 = $62&255;
   $64 = $1;
   $65 = ((($64)) + 4|0);
   HEAP8[$65>>0] = $63;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $32 = $l;
   $33 = $32&255;
   $34 = ($33|0)==(3);
   if ($34) {
    $35 = $l;
    $36 = (($35) + 1)<<24>>24;
    $l = $36;
   }
   $37 = $l;
   $38 = $37&255;
   $39 = $38 | 64;
   $40 = $39&255;
   $41 = $1;
   $42 = ((($41)) + 4|0);
   HEAP8[$42>>0] = $40;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $66 = $l;
   $67 = $66&255;
   $68 = $67 | 192;
   $69 = $68&255;
   $70 = $1;
   $71 = ((($70)) + 4|0);
   HEAP8[$71>>0] = $69;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $43 = $l;
   $44 = $43&255;
   $45 = $44 | 80;
   $46 = $45&255;
   $47 = $1;
   $48 = ((($47)) + 4|0);
   HEAP8[$48>>0] = $46;
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $72 = $l;
   $73 = $72&255;
   $74 = $73 | 208;
   $75 = $74&255;
   $76 = $1;
   $77 = ((($76)) + 4|0);
   HEAP8[$77>>0] = $75;
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $49 = $l;
   $50 = $49&255;
   $51 = $50 | 96;
   $52 = $51&255;
   $53 = $1;
   $54 = ((($53)) + 4|0);
   HEAP8[$54>>0] = $52;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $26 = $l;
   $27 = $26&255;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = $1;
   $31 = ((($30)) + 4|0);
   HEAP8[$31>>0] = $29;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $84 = $1;
   $85 = ((($84)) + 4|0);
   HEAP8[$85>>0] = 0;
   $86 = $1;
   $87 = ((($86)) + 3|0);
   HEAP8[$87>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _ims_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $ih = 0, $pat = 0, $smp_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ih = sp + 28|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $smp_size = 0;
 $4 = $1;
 (_hio_read($ih,20,1,$4)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(31);
  if (!($6)) {
   label = 17;
   break;
  }
  $7 = $i;
  $8 = ((($ih)) + 20|0);
  $9 = (($8) + (($7*30)|0)|0);
  $10 = $1;
  $11 = (_hio_read($9,1,20,$10)|0);
  $12 = ($11>>>0)<(20);
  if ($12) {
   label = 4;
   break;
  }
  $13 = $1;
  $14 = (_hio_read16b($13)|0);
  $15 = $i;
  $16 = ((($ih)) + 20|0);
  $17 = (($16) + (($15*30)|0)|0);
  $18 = ((($17)) + 20|0);
  HEAP16[$18>>1] = $14;
  $19 = $1;
  $20 = (_hio_read16b($19)|0);
  $21 = $i;
  $22 = ((($ih)) + 20|0);
  $23 = (($22) + (($21*30)|0)|0);
  $24 = ((($23)) + 22|0);
  HEAP16[$24>>1] = $20;
  $25 = $1;
  $26 = (_hio_read8($25)|0);
  $27 = $i;
  $28 = ((($ih)) + 20|0);
  $29 = (($28) + (($27*30)|0)|0);
  $30 = ((($29)) + 24|0);
  HEAP8[$30>>0] = $26;
  $31 = $1;
  $32 = (_hio_read8($31)|0);
  $33 = $i;
  $34 = ((($ih)) + 20|0);
  $35 = (($34) + (($33*30)|0)|0);
  $36 = ((($35)) + 25|0);
  HEAP8[$36>>0] = $32;
  $37 = $1;
  $38 = (_hio_read16b($37)|0);
  $39 = $i;
  $40 = ((($ih)) + 20|0);
  $41 = (($40) + (($39*30)|0)|0);
  $42 = ((($41)) + 26|0);
  HEAP16[$42>>1] = $38;
  $43 = $1;
  $44 = (_hio_read16b($43)|0);
  $45 = $i;
  $46 = ((($ih)) + 20|0);
  $47 = (($46) + (($45*30)|0)|0);
  $48 = ((($47)) + 28|0);
  HEAP16[$48>>1] = $44;
  $49 = $i;
  $50 = ((($ih)) + 20|0);
  $51 = (($50) + (($49*30)|0)|0);
  $52 = ((($51)) + 22|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = $54<<1;
  $56 = $smp_size;
  $57 = (($56) + ($55))|0;
  $smp_size = $57;
  $58 = $i;
  $59 = ((($ih)) + 20|0);
  $60 = (($59) + (($58*30)|0)|0);
  $61 = (_test_name($60,20)|0);
  $62 = ($61|0)<(0);
  if ($62) {
   label = 6;
   break;
  }
  $63 = $i;
  $64 = ((($ih)) + 20|0);
  $65 = (($64) + (($63*30)|0)|0);
  $66 = ((($65)) + 25|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(64);
  if ($69) {
   label = 8;
   break;
  }
  $70 = $i;
  $71 = ((($ih)) + 20|0);
  $72 = (($71) + (($70*30)|0)|0);
  $73 = ((($72)) + 22|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = ($75|0)>(32768);
  if ($76) {
   label = 10;
   break;
  }
  $77 = $i;
  $78 = ((($ih)) + 20|0);
  $79 = (($78) + (($77*30)|0)|0);
  $80 = ((($79)) + 26|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = $i;
  $84 = ((($ih)) + 20|0);
  $85 = (($84) + (($83*30)|0)|0);
  $86 = ((($85)) + 22|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  $89 = ($82|0)>($88|0);
  if ($89) {
   label = 12;
   break;
  }
  $90 = $i;
  $91 = ((($ih)) + 20|0);
  $92 = (($91) + (($90*30)|0)|0);
  $93 = ((($92)) + 22|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = ($95|0)!=(0);
  if ($96) {
   $97 = $i;
   $98 = ((($ih)) + 20|0);
   $99 = (($98) + (($97*30)|0)|0);
   $100 = ((($99)) + 28|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101&65535;
   $103 = $i;
   $104 = ((($ih)) + 20|0);
   $105 = (($104) + (($103*30)|0)|0);
   $106 = ((($105)) + 22|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   $109 = $108<<1;
   $110 = ($102|0)>($109|0);
   if ($110) {
    label = 15;
    break;
   }
  }
  $111 = $i;
  $112 = (($111) + 1)|0;
  $i = $112;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 17) {
  $113 = $smp_size;
  $114 = ($113|0)<(8);
  if ($114) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $115 = $1;
  $116 = (_hio_read8($115)|0);
  $117 = ((($ih)) + 950|0);
  HEAP8[$117>>0] = $116;
  $118 = $1;
  $119 = (_hio_read8($118)|0);
  $120 = ((($ih)) + 951|0);
  HEAP8[$120>>0] = $119;
  $121 = ((($ih)) + 952|0);
  $122 = $1;
  (_hio_read($121,128,1,$122)|0);
  $123 = ((($ih)) + 1080|0);
  $124 = $1;
  (_hio_read($123,4,1,$124)|0);
  $125 = ((($ih)) + 951|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = ($127|0)>(1);
  if ($128) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $129 = ((($ih)) + 1080|0);
  $130 = ((($129)) + 3|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = ($132|0)!=(60);
  if ($133) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $134 = ((($ih)) + 950|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = ($136|0)>(127);
  if ($137) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $i = 0;
  $pat = 0;
  while(1) {
   $138 = $i;
   $139 = ((($ih)) + 950|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = ($138|0)<($141|0);
   if (!($142)) {
    break;
   }
   $143 = $i;
   $144 = ((($ih)) + 952|0);
   $145 = (($144) + ($143)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = $pat;
   $149 = ($147|0)>($148|0);
   if ($149) {
    $150 = $i;
    $151 = ((($ih)) + 952|0);
    $152 = (($151) + ($150)|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $pat = $154;
   }
   $155 = $i;
   $156 = (($155) + 1)|0;
   $i = $156;
  }
  $157 = $pat;
  $158 = (($157) + 1)|0;
  $pat = $158;
  $159 = $pat;
  $160 = ($159|0)>(127);
  if (!($160)) {
   $161 = ((($ih)) + 950|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = ($163|0)==(0);
   if (!($164)) {
    $165 = ((($ih)) + 950|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    $168 = ($167|0)>(127);
    if (!($168)) {
     $169 = $1;
     $170 = $3;
     $171 = (($170) + 0)|0;
     (_hio_seek($169,$171,0)|0);
     $172 = $1;
     $173 = $2;
     _read_title($172,$173,20);
     $0 = 0;
     $174 = $0;
     STACKTOP = sp;return ($174|0);
    }
   }
  }
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 return (0)|0;
}
function _ims_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $ih = 0, $ims_event = 0, $j = 0, $mod = 0, $smp_size = 0, $vararg_buffer = 0, $xpo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ih = sp + 44|0;
 $ims_event = sp + 1128|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $xpo = 21;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $mod;
 $8 = ((($7)) + 140|0);
 HEAP32[$8>>2] = 31;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 $smp_size = 0;
 $14 = $2;
 (_hio_read($ih,20,1,$14)|0);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(31);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = ((($ih)) + 20|0);
  $19 = (($18) + (($17*30)|0)|0);
  $20 = $2;
  (_hio_read($19,20,1,$20)|0);
  $21 = $2;
  $22 = (_hio_read16b($21)|0);
  $23 = $i;
  $24 = ((($ih)) + 20|0);
  $25 = (($24) + (($23*30)|0)|0);
  $26 = ((($25)) + 20|0);
  HEAP16[$26>>1] = $22;
  $27 = $2;
  $28 = (_hio_read16b($27)|0);
  $29 = $i;
  $30 = ((($ih)) + 20|0);
  $31 = (($30) + (($29*30)|0)|0);
  $32 = ((($31)) + 22|0);
  HEAP16[$32>>1] = $28;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $i;
  $36 = ((($ih)) + 20|0);
  $37 = (($36) + (($35*30)|0)|0);
  $38 = ((($37)) + 24|0);
  HEAP8[$38>>0] = $34;
  $39 = $2;
  $40 = (_hio_read8($39)|0);
  $41 = $i;
  $42 = ((($ih)) + 20|0);
  $43 = (($42) + (($41*30)|0)|0);
  $44 = ((($43)) + 25|0);
  HEAP8[$44>>0] = $40;
  $45 = $2;
  $46 = (_hio_read16b($45)|0);
  $47 = $i;
  $48 = ((($ih)) + 20|0);
  $49 = (($48) + (($47*30)|0)|0);
  $50 = ((($49)) + 26|0);
  HEAP16[$50>>1] = $46;
  $51 = $2;
  $52 = (_hio_read16b($51)|0);
  $53 = $i;
  $54 = ((($ih)) + 20|0);
  $55 = (($54) + (($53*30)|0)|0);
  $56 = ((($55)) + 28|0);
  HEAP16[$56>>1] = $52;
  $57 = $i;
  $58 = ((($ih)) + 20|0);
  $59 = (($58) + (($57*30)|0)|0);
  $60 = ((($59)) + 22|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = $62<<1;
  $64 = $smp_size;
  $65 = (($64) + ($63))|0;
  $smp_size = $65;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = $2;
 $69 = (_hio_read8($68)|0);
 $70 = ((($ih)) + 950|0);
 HEAP8[$70>>0] = $69;
 $71 = $2;
 $72 = (_hio_read8($71)|0);
 $73 = ((($ih)) + 951|0);
 HEAP8[$73>>0] = $72;
 $74 = ((($ih)) + 952|0);
 $75 = $2;
 (_hio_read($74,128,1,$75)|0);
 $76 = ((($ih)) + 1080|0);
 $77 = $2;
 (_hio_read($76,4,1,$77)|0);
 $78 = ((($ih)) + 950|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $mod;
 $82 = ((($81)) + 156|0);
 HEAP32[$82>>2] = $80;
 $83 = $mod;
 $84 = ((($83)) + 952|0);
 $85 = ((($ih)) + 952|0);
 $86 = $mod;
 $87 = ((($86)) + 156|0);
 $88 = HEAP32[$87>>2]|0;
 _memcpy(($84|0),($85|0),($88|0))|0;
 $i = 0;
 while(1) {
  $89 = $i;
  $90 = $mod;
  $91 = ((($90)) + 156|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($89|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $i;
  $95 = $mod;
  $96 = ((($95)) + 952|0);
  $97 = (($96) + ($94)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $mod;
  $101 = ((($100)) + 128|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($99|0)>($102|0);
  if ($103) {
   $104 = $i;
   $105 = $mod;
   $106 = ((($105)) + 952|0);
   $107 = (($106) + ($104)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $mod;
   $111 = ((($110)) + 128|0);
   HEAP32[$111>>2] = $109;
  }
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 $114 = $mod;
 $115 = ((($114)) + 128|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 1)|0;
 HEAP32[$115>>2] = $117;
 $118 = $mod;
 $119 = ((($118)) + 136|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $mod;
 $122 = ((($121)) + 128|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = Math_imul($120, $123)|0;
 $125 = $mod;
 $126 = ((($125)) + 132|0);
 HEAP32[$126>>2] = $124;
 $127 = $mod;
 (_strncpy(($127|0),($ih|0),20)|0);
 $128 = $1;
 _set_type($128,5696,$vararg_buffer);
 $129 = $mod;
 $130 = (_instrument_init($129)|0);
 $131 = ($130|0)<(0);
 if ($131) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $i = 0;
 while(1) {
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 140|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132|0)<($135|0);
  $137 = $mod;
  if (!($136)) {
   break;
  }
  $138 = $i;
  $139 = (_subinstrument_alloc($137,$138,1)|0);
  $140 = ($139|0)<(0);
  if ($140) {
   label = 14;
   break;
  }
  $141 = $i;
  $142 = ((($ih)) + 20|0);
  $143 = (($142) + (($141*30)|0)|0);
  $144 = ((($143)) + 22|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = $146<<1;
  $148 = $i;
  $149 = $mod;
  $150 = ((($149)) + 180|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + (($148*52)|0)|0);
  $153 = ((($152)) + 32|0);
  HEAP32[$153>>2] = $147;
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 180|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + (($154*52)|0)|0);
  $159 = ((($158)) + 36|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $i;
  $162 = ((($ih)) + 20|0);
  $163 = (($162) + (($161*30)|0)|0);
  $164 = ((($163)) + 28|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = $165&65535;
  $167 = $166<<1;
  $168 = (($160) + ($167))|0;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 40|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = ((($ih)) + 20|0);
  $177 = (($176) + (($175*30)|0)|0);
  $178 = ((($177)) + 28|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = ($180|0)>(1);
  $182 = $181 ? 2 : 0;
  $183 = $i;
  $184 = $mod;
  $185 = ((($184)) + 180|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + (($183*52)|0)|0);
  $188 = ((($187)) + 44|0);
  HEAP32[$188>>2] = $182;
  $189 = $i;
  $190 = $mod;
  $191 = ((($190)) + 176|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($192) + (($189*764)|0)|0);
  $194 = ((($193)) + 756|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ((($195)) + 16|0);
  HEAP32[$196>>2] = 0;
  $197 = $i;
  $198 = ((($ih)) + 20|0);
  $199 = (($198) + (($197*30)|0)|0);
  $200 = ((($199)) + 25|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = $i;
  $204 = $mod;
  $205 = ((($204)) + 176|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + (($203*764)|0)|0);
  $208 = ((($207)) + 756|0);
  $209 = HEAP32[$208>>2]|0;
  HEAP32[$209>>2] = $202;
  $210 = $i;
  $211 = $mod;
  $212 = ((($211)) + 176|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($210*764)|0)|0);
  $215 = ((($214)) + 756|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 8|0);
  HEAP32[$217>>2] = 128;
  $218 = $i;
  $219 = $i;
  $220 = $mod;
  $221 = ((($220)) + 176|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + (($219*764)|0)|0);
  $224 = ((($223)) + 756|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ((($225)) + 40|0);
  HEAP32[$226>>2] = $218;
  $227 = $i;
  $228 = $mod;
  $229 = ((($228)) + 176|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + (($227*764)|0)|0);
  $232 = ((($231)) + 40|0);
  HEAP32[$232>>2] = 4095;
  $233 = $i;
  $234 = $mod;
  $235 = ((($234)) + 180|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($236) + (($233*52)|0)|0);
  $238 = ((($237)) + 32|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = ($239|0)>(0);
  if ($240) {
   $241 = $i;
   $242 = $mod;
   $243 = ((($242)) + 176|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + (($241*764)|0)|0);
   $246 = ((($245)) + 36|0);
   HEAP32[$246>>2] = 1;
  }
  $247 = $mod;
  $248 = $i;
  $249 = $i;
  $250 = ((($ih)) + 20|0);
  $251 = (($250) + (($249*30)|0)|0);
  (_instrument_name($247,$248,$251,20)|0);
  $252 = $i;
  $253 = (($252) + 1)|0;
  $i = $253;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $254 = (_pattern_init($137)|0);
 $255 = ($254|0)<(0);
 if ($255) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $i = 0;
 while(1) {
  $256 = $i;
  $257 = $mod;
  $258 = ((($257)) + 128|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ($256|0)<($259|0);
  if (!($260)) {
   break;
  }
  $261 = $mod;
  $262 = $i;
  $263 = (_pattern_tracks_alloc($261,$262,64)|0);
  $264 = ($263|0)<(0);
  if ($264) {
   label = 23;
   break;
  }
  $j = 0;
  while(1) {
   $265 = $j;
   $266 = ($265|0)<(256);
   if (!($266)) {
    break;
   }
   $267 = $j;
   $268 = $267 >> 2;
   $269 = $j;
   $270 = $269 & 3;
   $271 = $i;
   $272 = $1;
   $273 = ((($272)) + 168|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = (($274) + ($271<<2)|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = ((($276)) + 4|0);
   $278 = (($277) + ($270<<2)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $1;
   $281 = ((($280)) + 172|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + ($279<<2)|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = (($285) + ($268<<3)|0);
   $event = $286;
   $287 = $2;
   (_hio_read($ims_event,1,3,$287)|0);
   $288 = HEAP8[$ims_event>>0]|0;
   $289 = $288&255;
   $290 = $289 & 63;
   $291 = $290&255;
   $292 = $event;
   HEAP8[$292>>0] = $291;
   $293 = $event;
   $294 = HEAP8[$293>>0]|0;
   $295 = $294&255;
   $296 = ($295|0)!=(0);
   if ($296) {
    $297 = $event;
    $298 = HEAP8[$297>>0]|0;
    $299 = $298&255;
    $300 = ($299|0)!=(63);
    if ($300) {
     $301 = $xpo;
     $302 = (($301) + 12)|0;
     $303 = $event;
     $304 = HEAP8[$303>>0]|0;
     $305 = $304&255;
     $306 = (($305) + ($302))|0;
     $307 = $306&255;
     HEAP8[$303>>0] = $307;
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
   if ((label|0) == 29) {
    label = 0;
    $308 = $event;
    HEAP8[$308>>0] = 0;
   }
   $309 = HEAP8[$ims_event>>0]|0;
   $310 = $309&255;
   $311 = $310 & 64;
   $312 = $311 >> 2;
   $313 = ((($ims_event)) + 1|0);
   $314 = HEAP8[$313>>0]|0;
   $315 = $314&255;
   $316 = $315 & 240;
   $317 = $316 >> 4;
   $318 = $312 | $317;
   $319 = $318&255;
   $320 = $event;
   $321 = ((($320)) + 1|0);
   HEAP8[$321>>0] = $319;
   $322 = ((($ims_event)) + 1|0);
   $323 = HEAP8[$322>>0]|0;
   $324 = $323&255;
   $325 = $324 & 15;
   $326 = $325&255;
   $327 = $event;
   $328 = ((($327)) + 3|0);
   HEAP8[$328>>0] = $326;
   $329 = ((($ims_event)) + 2|0);
   $330 = HEAP8[$329>>0]|0;
   $331 = $event;
   $332 = ((($331)) + 4|0);
   HEAP8[$332>>0] = $330;
   $333 = $event;
   _disable_continue_fx($333);
   $334 = $event;
   $335 = ((($334)) + 3|0);
   $336 = HEAP8[$335>>0]|0;
   $337 = $336&255;
   $338 = ($337|0)==(13);
   if ($338) {
    $339 = $event;
    $340 = ((($339)) + 4|0);
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = (($342|0) / 10)&-1;
    $344 = $343 << 4;
    $345 = $event;
    $346 = ((($345)) + 4|0);
    $347 = HEAP8[$346>>0]|0;
    $348 = $347&255;
    $349 = (($348|0) % 10)&-1;
    $350 = $344 | $349;
    $351 = $350&255;
    $352 = $event;
    $353 = ((($352)) + 4|0);
    HEAP8[$353>>0] = $351;
   }
   $354 = $j;
   $355 = (($354) + 1)|0;
   $j = $355;
  }
  $356 = $i;
  $357 = (($356) + 1)|0;
  $i = $357;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $358 = $1;
 $359 = ((($358)) + 1280|0);
 $360 = HEAP32[$359>>2]|0;
 $361 = $360 | 8192;
 HEAP32[$359>>2] = $361;
 $i = 0;
 while(1) {
  $362 = $i;
  $363 = $mod;
  $364 = ((($363)) + 144|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = ($362|0)<($365|0);
  if (!($366)) {
   label = 40;
   break;
  }
  $367 = $i;
  $368 = $mod;
  $369 = ((($368)) + 180|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($370) + (($367*52)|0)|0);
  $372 = ((($371)) + 32|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = ($373|0)!=(0);
  if ($374) {
   $375 = $1;
   $376 = $2;
   $377 = $i;
   $378 = $mod;
   $379 = ((($378)) + 180|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (($380) + (($377*52)|0)|0);
   $382 = (_load_sample($375,$376,0,$381,0)|0);
   $383 = ($382|0)<(0);
   if ($383) {
    label = 38;
    break;
   }
  }
  $384 = $i;
  $385 = (($384) + 1)|0;
  $i = $385;
 }
 if ((label|0) == 38) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 else if ((label|0) == 40) {
  $0 = 0;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 return (0)|0;
}
function _masi_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1347636512);
 if ($6) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $7 = $1;
 (_hio_read8($7)|0);
 $8 = $1;
 (_hio_read8($8)|0);
 $9 = $1;
 (_hio_read8($9)|0);
 $10 = $1;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $13 = ($12|0)!=(0);
 if ($13) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $14 = $1;
 $15 = (_hio_read32b($14)|0);
 $16 = ($15|0)!=(1179208773);
 if ($16) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $17 = $1;
 (_hio_read32b($17)|0);
 $18 = $1;
 $19 = (_hio_read32l($18)|0);
 $val = $19;
 $20 = $1;
 $21 = $val;
 (_hio_seek($20,$21,1)|0);
 $22 = $1;
 $23 = (_hio_read32b($22)|0);
 $24 = ($23|0)==(1414091852);
 $25 = $1;
 if ($24) {
  $26 = (_hio_read32l($25)|0);
  $val = $26;
  $27 = $1;
  $28 = $2;
  $29 = $val;
  _read_title($27,$28,$29);
 } else {
  $30 = $2;
  _read_title($25,$30,0);
 }
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _masi_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $handle = 0, $i = 0;
 var $j = 0, $mod = 0, $offset = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $data = sp + 4|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 HEAP32[$data>>2] = 0;
 $8 = $mod;
 HEAP8[$8>>0] = 0;
 $9 = $2;
 (_hio_seek($9,8,1)|0);
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 HEAP32[$11>>2] = 0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($data)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($data)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = (_hio_tell($16)|0);
 $offset = $17;
 $18 = (_iff_new()|0);
 $handle = $18;
 $19 = $handle;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = $handle;
  $22 = (_iff_register($21,5760,239)|0);
  $ret = $22;
  $23 = $handle;
  $24 = (_iff_register($23,5768,240)|0);
  $25 = $ret;
  $26 = $25 | $24;
  $ret = $26;
  $27 = $handle;
  $28 = (_iff_register($27,7128,241)|0);
  $29 = $ret;
  $30 = $29 | $28;
  $ret = $30;
  $31 = $handle;
  $32 = (_iff_register($31,5776,242)|0);
  $33 = $ret;
  $34 = $33 | $32;
  $ret = $34;
  $35 = $handle;
  $36 = (_iff_register($35,5784,243)|0);
  $37 = $ret;
  $38 = $37 | $36;
  $ret = $38;
  $39 = $ret;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   $41 = $handle;
   _iff_set_quirk($41,1);
   $42 = $handle;
   $43 = $1;
   $44 = $2;
   $45 = (_iff_load($42,$43,$44,$data)|0);
   $46 = ($45|0)<(0);
   $47 = $handle;
   _iff_release($47);
   if (!($46)) {
    $48 = $mod;
    $49 = ((($48)) + 128|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $mod;
    $52 = ((($51)) + 136|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = Math_imul($50, $53)|0;
    $55 = $mod;
    $56 = ((($55)) + 132|0);
    HEAP32[$56>>2] = $54;
    $57 = $mod;
    $58 = ((($57)) + 128|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59<<3;
    $61 = (_malloc($60)|0);
    $62 = ((($data)) + 12|0);
    HEAP32[$62>>2] = $61;
    $63 = ((($data)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0|0);
    if (!($65)) {
     $66 = (_malloc(2040)|0);
     $67 = ((($data)) + 16|0);
     HEAP32[$67>>2] = $66;
     $68 = ((($data)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(0|0);
     if (!($70)) {
      $71 = $1;
      $72 = HEAP32[$data>>2]|0;
      $73 = ($72|0)!=(0);
      $74 = $73 ? 5792 : 5808;
      _set_type($71,$74,$vararg_buffer);
      $75 = $mod;
      $76 = (_instrument_init($75)|0);
      $77 = ($76|0)<(0);
      if (!($77)) {
       $78 = $mod;
       $79 = (_pattern_init($78)|0);
       $80 = ($79|0)<(0);
       if (!($80)) {
        $81 = $2;
        $82 = $3;
        $83 = $offset;
        $84 = (($82) + ($83))|0;
        (_hio_seek($81,$84,0)|0);
        $85 = $mod;
        $86 = ((($85)) + 156|0);
        HEAP32[$86>>2] = 0;
        $87 = (_iff_new()|0);
        $handle = $87;
        $88 = $handle;
        $89 = ($88|0)==(0|0);
        if (!($89)) {
         $90 = $handle;
         $91 = (_iff_register($90,7128,244)|0);
         $ret = $91;
         $92 = $handle;
         $93 = (_iff_register($92,5776,245)|0);
         $94 = $ret;
         $95 = $94 | $93;
         $ret = $95;
         $96 = $handle;
         $97 = (_iff_register($96,5784,246)|0);
         $98 = $ret;
         $99 = $98 | $97;
         $ret = $99;
         $100 = $ret;
         $101 = ($100|0)!=(0);
         if (!($101)) {
          $102 = $handle;
          _iff_set_quirk($102,1);
          $103 = $handle;
          $104 = $1;
          $105 = $2;
          $106 = (_iff_load($103,$104,$105,$data)|0);
          $107 = ($106|0)<(0);
          $108 = $handle;
          _iff_release($108);
          if (!($107)) {
           $i = 0;
           while(1) {
            $109 = $i;
            $110 = $mod;
            $111 = ((($110)) + 156|0);
            $112 = HEAP32[$111>>2]|0;
            $113 = ($109|0)<($112|0);
            if (!($113)) {
             break;
            }
            $j = 0;
            while(1) {
             $114 = $j;
             $115 = $mod;
             $116 = ((($115)) + 128|0);
             $117 = HEAP32[$116>>2]|0;
             $118 = ($114|0)<($117|0);
             if (!($118)) {
              break;
             }
             $119 = ((($data)) + 16|0);
             $120 = HEAP32[$119>>2]|0;
             $121 = $i;
             $122 = $121<<3;
             $123 = (($120) + ($122)|0);
             $124 = ((($data)) + 12|0);
             $125 = HEAP32[$124>>2]|0;
             $126 = $j;
             $127 = $126<<3;
             $128 = (($125) + ($127)|0);
             $129 = HEAP32[$data>>2]|0;
             $130 = ($129|0)!=(0);
             $131 = $130 ? 8 : 4;
             $132 = (_memcmp($123,$128,$131)|0);
             $133 = ($132|0)!=(0);
             $134 = $j;
             if (!($133)) {
              label = 16;
              break;
             }
             $140 = (($134) + 1)|0;
             $j = $140;
            }
            if ((label|0) == 16) {
             label = 0;
             $135 = $134&255;
             $136 = $i;
             $137 = $mod;
             $138 = ((($137)) + 952|0);
             $139 = (($138) + ($136)|0);
             HEAP8[$139>>0] = $135;
            }
            $141 = $j;
            $142 = $mod;
            $143 = ((($142)) + 128|0);
            $144 = HEAP32[$143>>2]|0;
            $145 = ($141|0)==($144|0);
            if ($145) {
             break;
            }
            $146 = $i;
            $147 = (($146) + 1)|0;
            $i = $147;
           }
           $148 = ((($data)) + 16|0);
           $149 = HEAP32[$148>>2]|0;
           _free($149);
           $150 = ((($data)) + 12|0);
           $151 = HEAP32[$150>>2]|0;
           _free($151);
           $0 = 0;
           $156 = $0;
           STACKTOP = sp;return ($156|0);
          }
         }
        }
       }
      }
      $152 = ((($data)) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      _free($153);
     }
     $154 = ((($data)) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     _free($155);
    }
   }
  }
 }
 $0 = -1;
 $156 = $0;
 STACKTOP = sp;return ($156|0);
}
function _get_titl($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read($buf,1,40,$5)|0);
 $6 = $mod;
 $7 = $1;
 $8 = ($7|0)>(32);
 $9 = $1;
 $10 = $8 ? 32 : $9;
 (_strncpy(($6|0),($buf|0),($10|0))|0);
 STACKTOP = sp;return 0;
}
function _get_sdft($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 STACKTOP = sp;return 0;
}
function _get_song($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_seek($5,10,1)|0);
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $mod;
 $10 = ((($9)) + 136|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return 0;
}
function _get_dsmp_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 140|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return 0;
}
function _get_pbod_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $data = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $mod;
 $7 = ((($6)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $2;
 (_hio_read($buf,1,20,$10)|0);
 $11 = ((($buf)) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return 0;
 }
 $15 = ((($buf)) + 13|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $data;
 HEAP32[$19>>2] = 1;
 STACKTOP = sp;return 0;
}
function _get_song_2($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $c = 0, $data = 0, $i = 0, $magic = 0, $mod = 0, $skip = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 48|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $2;
 (_hio_read($buf,1,9,$6)|0);
 $7 = $2;
 (_hio_read16l($7)|0);
 $8 = $2;
 $9 = (_hio_read32b($8)|0);
 $magic = $9;
 while(1) {
  $10 = $magic;
  $11 = ($10|0)!=(1330662472);
  $12 = $2;
  $13 = (_hio_read32l($12)|0);
  if (!($11)) {
   break;
  }
  $skip = $13;
  $14 = $2;
  $15 = $skip;
  (_hio_seek($14,$15,1)|0);
  $16 = $2;
  $17 = (_hio_read32b($16)|0);
  $magic = $17;
 }
 $18 = $2;
 (_hio_seek($18,9,1)|0);
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $c = $20;
 $i = 0;
 while(1) {
  $21 = $c;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(1);
  if (!($23)) {
   break;
  }
  $24 = $c;
  $25 = $24 << 24 >> 24;
  if ((($25|0) == 13)) {
   $37 = $2;
   (_hio_read8($37)|0);
   $38 = $2;
   $39 = (_hio_read8($38)|0);
   $40 = $39&255;
   $41 = $i;
   $42 = $mod;
   $43 = ((($42)) + 184|0);
   $44 = (($43) + (($41*12)|0)|0);
   HEAP32[$44>>2] = $40;
   $45 = $2;
   (_hio_read8($45)|0);
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  } else if ((($25|0) == 7)) {
   $26 = $2;
   $27 = (_hio_read8($26)|0);
   $28 = $27&255;
   $29 = $mod;
   $30 = ((($29)) + 148|0);
   HEAP32[$30>>2] = $28;
   $31 = $2;
   (_hio_read8($31)|0);
   $32 = $2;
   $33 = (_hio_read8($32)|0);
   $34 = $33&255;
   $35 = $mod;
   $36 = ((($35)) + 152|0);
   HEAP32[$36>>2] = $34;
  } else if ((($25|0) == 14)) {
   $48 = $2;
   (_hio_read8($48)|0);
   $49 = $2;
   (_hio_read8($49)|0);
  } else {
   $50 = $i;
   $51 = $c;
   $52 = $51 << 24 >> 24;
   $53 = $2;
   $54 = (_hio_read8($53)|0);
   $55 = $54&255;
   HEAP32[$vararg_buffer>>2] = $50;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $52;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $55;
   (_printf((5832|0),($vararg_buffer|0))|0);
  }
  $56 = $2;
  $57 = (_hio_read8($56)|0);
  $c = $57;
 }
 while(1) {
  $58 = $c;
  $59 = $58 << 24 >> 24;
  $60 = ($59|0)==(1);
  if (!($60)) {
   break;
  }
  $61 = $data;
  $62 = ((($61)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $mod;
  $65 = ((($64)) + 156|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66<<3;
  $68 = (($63) + ($67)|0);
  $69 = $data;
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0);
  $72 = $71 ? 8 : 4;
  $73 = $2;
  (_hio_read($68,1,$72,$73)|0);
  $74 = $mod;
  $75 = ((($74)) + 156|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
  $78 = $2;
  $79 = (_hio_read8($78)|0);
  $c = $79;
 }
 STACKTOP = sp;return 0;
}
function _get_dsmp($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $finetune = 0, $i = 0, $mod = 0, $srate = 0;
 var $sub = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 (_hio_read8($7)|0);
 $8 = $3;
 (_hio_seek($8,8,1)|0);
 $9 = $3;
 $10 = $data;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $12 ? 8 : 4;
 (_hio_seek($9,$13,1)|0);
 $14 = $data;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $i = $16;
 $17 = $mod;
 $18 = $i;
 $19 = (_subinstrument_alloc($17,$18,1)|0);
 $20 = ($19|0)<(0);
 if ($20) {
  $0 = -1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $21 = $i;
 $22 = $mod;
 $23 = ((($22)) + 176|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + (($21*764)|0)|0);
 $xxi = $25;
 $26 = $xxi;
 $27 = ((($26)) + 756|0);
 $28 = HEAP32[$27>>2]|0;
 $sub = $28;
 $29 = $i;
 $30 = $mod;
 $31 = ((($30)) + 180|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + (($29*52)|0)|0);
 $xxs = $33;
 $34 = $xxi;
 $35 = $3;
 (_hio_read($34,1,31,$35)|0);
 $36 = $xxi;
 (_adjust_string($36)|0);
 $37 = $3;
 (_hio_seek($37,8,1)|0);
 $38 = $3;
 (_hio_read8($38)|0);
 $39 = $3;
 (_hio_read8($39)|0);
 $40 = $3;
 $41 = (_hio_read32l($40)|0);
 $42 = $xxs;
 $43 = ((($42)) + 32|0);
 HEAP32[$43>>2] = $41;
 $44 = $3;
 $45 = (_hio_read32l($44)|0);
 $46 = $xxs;
 $47 = ((($46)) + 36|0);
 HEAP32[$47>>2] = $45;
 $48 = $3;
 $49 = (_hio_read32l($48)|0);
 $50 = $xxs;
 $51 = ((($50)) + 40|0);
 HEAP32[$51>>2] = $49;
 $52 = $xxs;
 $53 = ((($52)) + 40|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)>(2);
 $56 = $55 ? 2 : 0;
 $57 = $xxs;
 $58 = ((($57)) + 44|0);
 HEAP32[$58>>2] = $56;
 $59 = $3;
 (_hio_read16l($59)|0);
 $60 = $xxs;
 $61 = ((($60)) + 40|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)<(0);
 if ($63) {
  $64 = $xxs;
  $65 = ((($64)) + 40|0);
  HEAP32[$65>>2] = 0;
 }
 $66 = $xxs;
 $67 = ((($66)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)>(0);
 if ($69) {
  $70 = $xxi;
  $71 = ((($70)) + 36|0);
  HEAP32[$71>>2] = 1;
 }
 $finetune = 0;
 $72 = $data;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $xxs;
  $76 = ((($75)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)>(2);
  if ($78) {
   $79 = $xxs;
   $80 = ((($79)) + 32|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) - 2)|0;
   HEAP32[$80>>2] = $82;
  }
  $83 = $xxs;
  $84 = ((($83)) + 40|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)>(2);
  if ($86) {
   $87 = $xxs;
   $88 = ((($87)) + 40|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) - 2)|0;
   HEAP32[$88>>2] = $90;
  }
  $91 = $3;
  $92 = (_hio_read8s($91)|0);
  $93 = $92 << 24 >> 24;
  $94 = $93 << 4;
  $95 = $94&255;
  $96 = $95 << 24 >> 24;
  $finetune = $96;
 }
 $97 = $3;
 $98 = (_hio_read8($97)|0);
 $99 = $98&255;
 $100 = (($99|0) / 2)&-1;
 $101 = (($100) + 1)|0;
 $102 = $sub;
 HEAP32[$102>>2] = $101;
 $103 = $3;
 (_hio_read32l($103)|0);
 $104 = $sub;
 $105 = ((($104)) + 8|0);
 HEAP32[$105>>2] = 128;
 $106 = $i;
 $107 = $sub;
 $108 = ((($107)) + 40|0);
 HEAP32[$108>>2] = $106;
 $109 = $3;
 $110 = (_hio_read32l($109)|0);
 $srate = $110;
 $111 = $srate;
 $112 = ($111*8363)|0;
 $113 = (($112|0) / 8448)&-1;
 $srate = $113;
 $114 = $srate;
 $115 = $sub;
 $116 = ((($115)) + 12|0);
 $117 = $sub;
 $118 = ((($117)) + 16|0);
 _c2spd_to_note($114,$116,$118);
 $119 = $finetune;
 $120 = $sub;
 $121 = ((($120)) + 16|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + ($119))|0;
 HEAP32[$121>>2] = $123;
 $124 = $3;
 (_hio_seek($124,16,1)|0);
 $125 = $1;
 $126 = $3;
 $127 = $xxs;
 $128 = (_load_sample($125,$126,4,$127,0)|0);
 $129 = ($128|0)<(0);
 if ($129) {
  $0 = -1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 } else {
  $130 = $data;
  $131 = ((($130)) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 1)|0;
  HEAP32[$131>>2] = $133;
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function _get_pbod260($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $chan = 0, $cond = 0, $data = 0, $dummy = 0, $event = 0, $flag = 0, $fxp = 0, $fxt = 0, $i = 0, $mod = 0, $note = 0, $note1 = 0, $r = 0, $rowlen = 0, $rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp + 56|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $i = $9;
 $10 = $3;
 (_hio_read32l($10)|0);
 $11 = $data;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $i;
 $15 = $14<<3;
 $16 = (($13) + ($15)|0);
 $17 = $data;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = $19 ? 8 : 4;
 $21 = $3;
 (_hio_read($16,1,$20,$21)|0);
 $22 = $3;
 $23 = (_hio_read16l($22)|0);
 $24 = $23&65535;
 $rows = $24;
 $25 = $mod;
 $26 = $i;
 $27 = $rows;
 $28 = (_pattern_tracks_alloc($25,$26,$27)|0);
 $29 = ($28|0)<(0);
 if ($29) {
  $0 = -1;
  $220 = $0;
  STACKTOP = sp;return ($220|0);
 }
 $r = 0;
 while(1) {
  $30 = $3;
  $31 = (_hio_read16l($30)|0);
  $32 = $31&65535;
  $33 = (($32) - 2)|0;
  $rowlen = $33;
  while(1) {
   $34 = $rowlen;
   $35 = ($34|0)>(0);
   if (!($35)) {
    break;
   }
   $36 = $3;
   $37 = (_hio_read8($36)|0);
   $flag = $37;
   $38 = $rowlen;
   $39 = ($38|0)==(1);
   if ($39) {
    break;
   }
   $40 = $3;
   $41 = (_hio_read8($40)|0);
   $chan = $41;
   $42 = $rowlen;
   $43 = (($42) - 2)|0;
   $rowlen = $43;
   $44 = $chan;
   $45 = $44&255;
   $46 = $mod;
   $47 = ((($46)) + 136|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)<($48|0);
   if ($49) {
    $50 = $r;
    $51 = $chan;
    $52 = $51&255;
    $53 = $i;
    $54 = $1;
    $55 = ((($54)) + 168|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + ($53<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($58)) + 4|0);
    $60 = (($59) + ($52<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $1;
    $63 = ((($62)) + 172|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($61<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 4|0);
    $68 = (($67) + ($50<<3)|0);
    $69 = $68;
   } else {
    $69 = $dummy;
   }
   $event = $69;
   $70 = $flag;
   $71 = $70&255;
   $72 = $71 & 128;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $3;
    $75 = (_hio_read8($74)|0);
    $note = $75;
    $76 = $rowlen;
    $77 = (($76) + -1)|0;
    $rowlen = $77;
    $78 = $data;
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)!=(0);
    $81 = $note;
    $82 = $81&255;
    if ($80) {
     $83 = (($82) + 37)|0;
     $84 = $83&255;
     $note = $84;
    } else {
     $85 = $82 >> 4;
     $86 = ($85*12)|0;
     $87 = $note;
     $88 = $87&255;
     $89 = $88 & 15;
     $90 = (($86) + ($89))|0;
     $91 = (($90) + 2)|0;
     $92 = (($91) + 12)|0;
     $93 = $92&255;
     $note = $93;
    }
    $94 = $note;
    $95 = $event;
    HEAP8[$95>>0] = $94;
   }
   $96 = $flag;
   $97 = $96&255;
   $98 = $97 & 64;
   $99 = ($98|0)!=(0);
   if ($99) {
    $100 = $3;
    $101 = (_hio_read8($100)|0);
    $102 = $101&255;
    $103 = (($102) + 1)|0;
    $104 = $103&255;
    $105 = $event;
    $106 = ((($105)) + 1|0);
    HEAP8[$106>>0] = $104;
    $107 = $rowlen;
    $108 = (($107) + -1)|0;
    $rowlen = $108;
   }
   $109 = $flag;
   $110 = $109&255;
   $111 = $110 & 32;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $3;
    $114 = (_hio_read8($113)|0);
    $115 = $114&255;
    $116 = (($115|0) / 2)&-1;
    $117 = $116&255;
    $118 = $event;
    $119 = ((($118)) + 2|0);
    HEAP8[$119>>0] = $117;
    $120 = $rowlen;
    $121 = (($120) + -1)|0;
    $rowlen = $121;
   }
   $122 = $flag;
   $123 = $122&255;
   $124 = $123 & 16;
   $125 = ($124|0)!=(0);
   if (!($125)) {
    continue;
   }
   $126 = $3;
   $127 = (_hio_read8($126)|0);
   $fxt = $127;
   $128 = $3;
   $129 = (_hio_read8($128)|0);
   $fxp = $129;
   $130 = $rowlen;
   $131 = (($130) - 2)|0;
   $rowlen = $131;
   $132 = $fxt;
   $133 = $132&255;
   $134 = ($133|0)>=(64);
   L28: do {
    if ($134) {
     $135 = $fxp;
     $136 = $135&255;
     $137 = $136 >> 4;
     $cond = ($137|0)==(0);
     if ($cond) {
      $138 = $fxt;
      $139 = $138&255;
      $140 = $139 >> 4;
      $141 = ($140*12)|0;
      $142 = $fxt;
      $143 = $142&255;
      $144 = $143 & 15;
      $145 = (($141) + ($144))|0;
      $146 = (($145) + 2)|0;
      $147 = $146&255;
      $note1 = $147;
      $148 = $note1;
      $149 = $event;
      HEAP8[$149>>0] = $148;
      $fxt = 3;
      $150 = $fxp;
      $151 = $150&255;
      $152 = (($151) + 1)|0;
      $153 = $152<<1;
      $154 = $153&255;
      $fxp = $154;
     }
    } else {
     $155 = $fxt;
     $156 = $155&255;
     do {
      switch ($156|0) {
      case 21:  {
       $192 = $data;
       $193 = HEAP32[$192>>2]|0;
       $194 = ($193|0)!=(0);
       $195 = $194 ? 4 : 172;
       $196 = $195&255;
       $fxt = $196;
       break L28;
       break;
      }
      case 12:  {
       $fxt = 1;
       $178 = $fxp;
       $179 = $178&255;
       $180 = (($179) - 1)|0;
       $181 = (($180|0) / 2)&-1;
       $182 = $181&255;
       $fxp = $182;
       break L28;
       break;
      }
      case 52:  {
       $fxt = 13;
       break L28;
       break;
      }
      case 42:  {
       $fxt = 14;
       $197 = $fxp;
       $198 = $197&255;
       $199 = $198 & 15;
       $200 = 144 | $199;
       $201 = $200&255;
       $fxp = $201;
       break L28;
       break;
      }
      case 4:  {
       $fxt = 10;
       $174 = $fxp;
       $175 = $174&255;
       $176 = (($175|0) / 2)&-1;
       $177 = $176&255;
       $fxp = $177;
       break L28;
       break;
      }
      case 41:  {
       $202 = $3;
       (_hio_read16l($202)|0);
       $203 = $rowlen;
       $204 = (($203) - 2)|0;
       $rowlen = $204;
       break L28;
       break;
      }
      case 62:  {
       $fxt = 15;
       break L28;
       break;
      }
      case 2:  {
       $fxt = 10;
       $163 = $fxp;
       $164 = $163&255;
       $165 = (($164|0) / 2)&-1;
       $166 = $165 << 4;
       $167 = $166&255;
       $fxp = $167;
       break L28;
       break;
      }
      case 51:  {
       $fxt = 11;
       break L28;
       break;
      }
      case 3:  {
       $fxt = 14;
       $168 = $fxp;
       $169 = $168&255;
       $170 = (($169|0) / 2)&-1;
       $171 = $170 & 15;
       $172 = 176 | $171;
       $173 = $172&255;
       $fxp = $173;
       break L28;
       break;
      }
      case 1:  {
       $fxt = 14;
       $157 = $fxp;
       $158 = $157&255;
       $159 = (($158|0) / 2)&-1;
       $160 = $159 & 15;
       $161 = 160 | $160;
       $162 = $161&255;
       $fxp = $162;
       break L28;
       break;
      }
      case 61:  {
       $fxt = 15;
       break L28;
       break;
      }
      case 15:  {
       $fxt = 3;
       $188 = $fxp;
       $189 = $188&255;
       $190 = (($189|0) / 4)&-1;
       $191 = $190&255;
       $fxp = $191;
       break L28;
       break;
      }
      case 14:  {
       $fxt = 2;
       $183 = $fxp;
       $184 = $183&255;
       $185 = (($184) - 1)|0;
       $186 = (($185|0) / 2)&-1;
       $187 = $186&255;
       $fxp = $187;
       break L28;
       break;
      }
      default: {
       $fxp = 0;
       $fxt = 0;
       break L28;
      }
      }
     } while(0);
    }
   } while(0);
   $205 = $fxt;
   $206 = $event;
   $207 = ((($206)) + 3|0);
   HEAP8[$207>>0] = $205;
   $208 = $fxp;
   $209 = $event;
   $210 = ((($209)) + 4|0);
   HEAP8[$210>>0] = $208;
  }
  $211 = $r;
  $212 = (($211) + 1)|0;
  $r = $212;
  $213 = $r;
  $214 = $rows;
  $215 = ($213|0)<($214|0);
  if (!($215)) {
   break;
  }
 }
 $216 = $data;
 $217 = ((($216)) + 4|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = (($218) + 1)|0;
 HEAP32[$217>>2] = $219;
 $0 = 0;
 $220 = $0;
 STACKTOP = sp;return ($220|0);
}
function _amf_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $or$cond = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,3,$4)|0);
 $6 = ($5>>>0)<(3);
 if ($6) {
  $0 = -1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $7 = HEAP8[$buf>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)!=(65);
 if (!($9)) {
  $10 = ((($buf)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(77);
  if (!($13)) {
   $14 = ((($buf)) + 2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)!=(70);
   if (!($17)) {
    $18 = $1;
    $19 = (_hio_read8($18)|0);
    $20 = $19&255;
    $ver = $20;
    $21 = $ver;
    $22 = ($21|0)<(10);
    $23 = $ver;
    $24 = ($23|0)>(14);
    $or$cond = $22 | $24;
    if ($or$cond) {
     $0 = -1;
     $27 = $0;
     STACKTOP = sp;return ($27|0);
    } else {
     $25 = $1;
     $26 = $2;
     _read_title($25,$26,32);
     $0 = 0;
     $27 = $0;
     STACKTOP = sp;return ($27|0);
    }
   }
  }
 }
 $0 = -1;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _amf_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0;
 var $buf = 0, $c2spd = 0, $end = 0, $event = 0, $fxp = 0, $fxt = 0, $i = 0, $j = 0, $k = 0, $len = 0, $mod = 0, $newtrk = 0, $pos = 0, $size = 0, $start1 = 0, $t = 0, $t1 = 0, $t2 = 0, $t23 = 0, $t3 = 0;
 var $trkmap = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 96|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($buf,1,3,$7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $ver = $10;
 $11 = $2;
 (_hio_read($buf,1,32,$11)|0);
 $12 = $mod;
 (_strncpy(($12|0),($buf|0),32)|0);
 $13 = $1;
 $14 = $ver;
 $15 = (($14|0) / 10)&-1;
 $16 = $ver;
 $17 = (($16|0) % 10)&-1;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 _set_type($13,5904,$vararg_buffer);
 $18 = $2;
 $19 = (_hio_read8($18)|0);
 $20 = $19&255;
 $21 = $mod;
 $22 = ((($21)) + 140|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = $24&255;
 $26 = $mod;
 $27 = ((($26)) + 156|0);
 HEAP32[$27>>2] = $25;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = $29&65535;
 $31 = $mod;
 $32 = ((($31)) + 132|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 $34 = (_hio_read8($33)|0);
 $35 = $34&255;
 $36 = $mod;
 $37 = ((($36)) + 136|0);
 HEAP32[$37>>2] = $35;
 $38 = $mod;
 $39 = ((($38)) + 140|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $mod;
 $42 = ((($41)) + 144|0);
 HEAP32[$42>>2] = $40;
 $43 = $mod;
 $44 = ((($43)) + 156|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $mod;
 $47 = ((($46)) + 128|0);
 HEAP32[$47>>2] = $45;
 $48 = $ver;
 $49 = ($48|0)==(10);
 if ($49) {
  $50 = $2;
  (_hio_read($buf,1,16,$50)|0);
 }
 $51 = $ver;
 $52 = ($51|0)>=(13);
 if ($52) {
  $53 = $2;
  (_hio_read($buf,1,32,$53)|0);
  $i = 0;
  while(1) {
   $54 = $i;
   $55 = ($54|0)<(32);
   if (!($55)) {
    break;
   }
   $56 = $i;
   $57 = (($buf) + ($56)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58 << 24 >> 24;
   $60 = $59<<1;
   $61 = (128 + ($60))|0;
   $62 = $mod;
   $63 = ((($62)) + 184|0);
   HEAP32[$63>>2] = $61;
   $64 = $i;
   $65 = (($64) + 1)|0;
   $i = $65;
  }
  $66 = $2;
  $67 = (_hio_read8($66)|0);
  $68 = $67&255;
  $69 = $mod;
  $70 = ((($69)) + 152|0);
  HEAP32[$70>>2] = $68;
  $71 = $2;
  $72 = (_hio_read8($71)|0);
  $73 = $72&255;
  $74 = $mod;
  $75 = ((($74)) + 148|0);
  HEAP32[$75>>2] = $73;
 } else {
  $76 = $ver;
  $77 = ($76|0)>=(11);
  if ($77) {
   $78 = $2;
   (_hio_read($buf,1,16,$78)|0);
  }
 }
 $i = 0;
 while(1) {
  $79 = $i;
  $80 = $mod;
  $81 = ((($80)) + 156|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = $84&255;
  $86 = $i;
  $87 = $mod;
  $88 = ((($87)) + 952|0);
  $89 = (($88) + ($86)|0);
  HEAP8[$89>>0] = $85;
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 $92 = $mod;
 $93 = ((($92)) + 128|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 1)|0;
 $96 = (_calloc(4,$95)|0);
 $97 = $mod;
 $98 = ((($97)) + 168|0);
 HEAP32[$98>>2] = $96;
 $99 = $mod;
 $100 = ((($99)) + 168|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)==(0|0);
 if ($102) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $i = 0;
 while(1) {
  $103 = $i;
  $104 = $mod;
  $105 = ((($104)) + 128|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($103|0)<($106|0);
  $108 = $mod;
  if (!($107)) {
   break;
  }
  $109 = $i;
  $110 = (_pattern_alloc($108,$109)|0);
  $111 = ($110|0)<(0);
  if ($111) {
   label = 18;
   break;
  }
  $112 = $ver;
  $113 = ($112|0)>=(14);
  if ($113) {
   $114 = $2;
   $115 = (_hio_read16l($114)|0);
   $116 = $115&65535;
   $123 = $116;
  } else {
   $123 = 64;
  }
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 168|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($117<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$122>>2] = $123;
  $j = 0;
  while(1) {
   $124 = $j;
   $125 = $mod;
   $126 = ((($125)) + 136|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($124|0)<($127|0);
   if (!($128)) {
    break;
   }
   $129 = $2;
   $130 = (_hio_read16l($129)|0);
   $t = $130;
   $131 = $t;
   $132 = $131&65535;
   $133 = $j;
   $134 = $i;
   $135 = $mod;
   $136 = ((($135)) + 168|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($139)) + 4|0);
   $141 = (($140) + ($133<<2)|0);
   HEAP32[$141>>2] = $132;
   $142 = $j;
   $143 = (($142) + 1)|0;
   $j = $143;
  }
  $144 = $i;
  $145 = (($144) + 1)|0;
  $i = $145;
 }
 if ((label|0) == 18) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $146 = (_instrument_init($108)|0);
 $147 = ($146|0)<(0);
 if ($147) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $148 = $ver;
 $149 = ($148|0)<=(10);
 if ($149) {
  $150 = $2;
  $151 = (_hio_tell($150)|0);
  $pos = $151;
  $i = 0;
  while(1) {
   $152 = $i;
   $153 = $mod;
   $154 = ((($153)) + 140|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($152|0)<($155|0);
   if (!($156)) {
    break;
   }
   $157 = $2;
   $158 = (_hio_read8($157)|0);
   $b = $158;
   $159 = $b;
   $160 = $159&255;
   $161 = ($160|0)!=(0);
   if ($161) {
    $162 = $b;
    $163 = $162&255;
    $164 = ($163|0)!=(1);
    if ($164) {
     label = 32;
     break;
    }
   }
   $165 = $2;
   (_hio_seek($165,45,1)|0);
   $166 = $2;
   $167 = (_hio_read32l($166)|0);
   $168 = ($167>>>0)>(1048576);
   if ($168) {
    label = 34;
    break;
   }
   $169 = $2;
   $170 = (_hio_read32l($169)|0);
   $len = $170;
   $171 = $len;
   $172 = ($171>>>0)>(1048576);
   if ($172) {
    label = 36;
    break;
   }
   $173 = $2;
   $174 = (_hio_read16l($173)|0);
   $175 = $174&65535;
   $176 = ($175|0)==(0);
   if ($176) {
    label = 38;
    break;
   }
   $177 = $2;
   $178 = (_hio_read8($177)|0);
   $179 = $178&255;
   $180 = ($179|0)>(64);
   if ($180) {
    label = 40;
    break;
   }
   $181 = $2;
   $182 = (_hio_read32l($181)|0);
   $start1 = $182;
   $183 = $start1;
   $184 = $len;
   $185 = ($183>>>0)>($184>>>0);
   if ($185) {
    label = 42;
    break;
   }
   $186 = $2;
   $187 = (_hio_read32l($186)|0);
   $end = $187;
   $188 = $end;
   $189 = $len;
   $190 = ($188>>>0)>($189>>>0);
   if ($190) {
    label = 44;
    break;
   }
   $191 = $i;
   $192 = (($191) + 1)|0;
   $i = $192;
  }
  if ((label|0) == 32) {
   $ver = 9;
  }
  else if ((label|0) == 34) {
   $ver = 9;
  }
  else if ((label|0) == 36) {
   $ver = 9;
  }
  else if ((label|0) == 38) {
   $ver = 9;
  }
  else if ((label|0) == 40) {
   $ver = 9;
  }
  else if ((label|0) == 42) {
   $ver = 9;
  }
  else if ((label|0) == 44) {
   $ver = 9;
  }
  $193 = $2;
  $194 = $pos;
  (_hio_seek($193,$194,0)|0);
 }
 $i = 0;
 while(1) {
  $195 = $i;
  $196 = $mod;
  $197 = ((($196)) + 140|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($195|0)<($198|0);
  $200 = $mod;
  if (!($199)) {
   break;
  }
  $201 = $i;
  $202 = (_subinstrument_alloc($200,$201,1)|0);
  $203 = ($202|0)<(0);
  if ($203) {
   label = 50;
   break;
  }
  $204 = $2;
  (_hio_read8($204)|0);
  $205 = $2;
  (_hio_read($buf,1,32,$205)|0);
  $206 = $mod;
  $207 = $i;
  (_instrument_name($206,$207,$buf,32)|0);
  $208 = $2;
  (_hio_read($buf,1,13,$208)|0);
  $209 = $2;
  (_hio_read32l($209)|0);
  $210 = $i;
  $211 = $mod;
  $212 = ((($211)) + 176|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($210*764)|0)|0);
  $215 = ((($214)) + 36|0);
  HEAP32[$215>>2] = 1;
  $216 = $i;
  $217 = $i;
  $218 = $mod;
  $219 = ((($218)) + 176|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + (($217*764)|0)|0);
  $222 = ((($221)) + 756|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = ((($223)) + 40|0);
  HEAP32[$224>>2] = $216;
  $225 = $i;
  $226 = $mod;
  $227 = ((($226)) + 176|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($228) + (($225*764)|0)|0);
  $230 = ((($229)) + 756|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ((($231)) + 8|0);
  HEAP32[$232>>2] = 128;
  $233 = $2;
  $234 = (_hio_read32l($233)|0);
  $235 = $i;
  $236 = $mod;
  $237 = ((($236)) + 180|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + (($235*52)|0)|0);
  $240 = ((($239)) + 32|0);
  HEAP32[$240>>2] = $234;
  $241 = $2;
  $242 = (_hio_read16l($241)|0);
  $243 = $242&65535;
  $c2spd = $243;
  $244 = $c2spd;
  $245 = $i;
  $246 = $mod;
  $247 = ((($246)) + 176|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = (($248) + (($245*764)|0)|0);
  $250 = ((($249)) + 756|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ((($251)) + 12|0);
  $253 = $i;
  $254 = $mod;
  $255 = ((($254)) + 176|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) + (($253*764)|0)|0);
  $258 = ((($257)) + 756|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ((($259)) + 16|0);
  _c2spd_to_note($244,$252,$260);
  $261 = $2;
  $262 = (_hio_read8($261)|0);
  $263 = $262&255;
  $264 = $i;
  $265 = $mod;
  $266 = ((($265)) + 176|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = (($267) + (($264*764)|0)|0);
  $269 = ((($268)) + 756|0);
  $270 = HEAP32[$269>>2]|0;
  HEAP32[$270>>2] = $263;
  $271 = $ver;
  $272 = ($271|0)<(10);
  $273 = $2;
  if ($272) {
   $274 = (_hio_read16l($273)|0);
   $275 = $274&65535;
   $276 = $i;
   $277 = $mod;
   $278 = ((($277)) + 180|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($279) + (($276*52)|0)|0);
   $281 = ((($280)) + 36|0);
   HEAP32[$281>>2] = $275;
   $282 = $i;
   $283 = $mod;
   $284 = ((($283)) + 180|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (($285) + (($282*52)|0)|0);
   $287 = ((($286)) + 32|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $i;
   $290 = $mod;
   $291 = ((($290)) + 180|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (($292) + (($289*52)|0)|0);
   $294 = ((($293)) + 40|0);
   HEAP32[$294>>2] = $288;
  } else {
   $295 = (_hio_read32l($273)|0);
   $296 = $i;
   $297 = $mod;
   $298 = ((($297)) + 180|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = (($299) + (($296*52)|0)|0);
   $301 = ((($300)) + 36|0);
   HEAP32[$301>>2] = $295;
   $302 = $2;
   $303 = (_hio_read32l($302)|0);
   $304 = $i;
   $305 = $mod;
   $306 = ((($305)) + 180|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (($307) + (($304*52)|0)|0);
   $309 = ((($308)) + 40|0);
   HEAP32[$309>>2] = $303;
  }
  $310 = $ver;
  $311 = ($310|0)<(10);
  $312 = $i;
  $313 = $mod;
  $314 = ((($313)) + 180|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = (($315) + (($312*52)|0)|0);
  if ($311) {
   $317 = ((($316)) + 36|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ($318|0)>(0);
   $320 = $319 ? 2 : 0;
   $321 = $i;
   $322 = $mod;
   $323 = ((($322)) + 180|0);
   $324 = HEAP32[$323>>2]|0;
   $325 = (($324) + (($321*52)|0)|0);
   $326 = ((($325)) + 44|0);
   HEAP32[$326>>2] = $320;
  } else {
   $327 = ((($316)) + 40|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $i;
   $330 = $mod;
   $331 = ((($330)) + 180|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = (($332) + (($329*52)|0)|0);
   $334 = ((($333)) + 36|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = ($328|0)>($335|0);
   $337 = $336 ? 2 : 0;
   $338 = $i;
   $339 = $mod;
   $340 = ((($339)) + 180|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = (($341) + (($338*52)|0)|0);
   $343 = ((($342)) + 44|0);
   HEAP32[$343>>2] = $337;
  }
  $344 = $i;
  $345 = (($344) + 1)|0;
  $i = $345;
 }
 if ((label|0) == 50) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $346 = ((($200)) + 132|0);
 $347 = HEAP32[$346>>2]|0;
 $348 = (_calloc(4,$347)|0);
 $trkmap = $348;
 $349 = $trkmap;
 $350 = ($349|0)==(0|0);
 if ($350) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $newtrk = 0;
 $i = 0;
 while(1) {
  $351 = $i;
  $352 = $mod;
  $353 = ((($352)) + 132|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = ($351|0)<($354|0);
  if (!($355)) {
   break;
  }
  $356 = $2;
  $357 = (_hio_read16l($356)|0);
  $t2 = $357;
  $358 = $t2;
  $359 = $358&65535;
  $360 = $i;
  $361 = $trkmap;
  $362 = (($361) + ($360<<2)|0);
  HEAP32[$362>>2] = $359;
  $363 = $t2;
  $364 = $363&65535;
  $365 = $newtrk;
  $366 = ($364|0)>($365|0);
  if ($366) {
   $367 = $t2;
   $368 = $367&65535;
   $newtrk = $368;
  }
  $369 = $i;
  $370 = (($369) + 1)|0;
  $i = $370;
 }
 $i = 0;
 while(1) {
  $371 = $i;
  $372 = $mod;
  $373 = ((($372)) + 128|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = ($371|0)<($374|0);
  if (!($375)) {
   break;
  }
  $j = 0;
  while(1) {
   $376 = $j;
   $377 = $mod;
   $378 = ((($377)) + 136|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = ($376|0)<($379|0);
   if (!($380)) {
    break;
   }
   $381 = $j;
   $382 = $i;
   $383 = $mod;
   $384 = ((($383)) + 168|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = (($385) + ($382<<2)|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = ((($387)) + 4|0);
   $389 = (($388) + ($381<<2)|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = (($390) - 1)|0;
   $k = $391;
   $392 = $k;
   $393 = ($392|0)<(0);
   if ($393) {
    label = 71;
   } else {
    $394 = $k;
    $395 = $mod;
    $396 = ((($395)) + 132|0);
    $397 = HEAP32[$396>>2]|0;
    $398 = ($394|0)>=($397|0);
    if ($398) {
     label = 71;
    }
   }
   if ((label|0) == 71) {
    label = 0;
    $k = 0;
   }
   $399 = $k;
   $400 = $trkmap;
   $401 = (($400) + ($399<<2)|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = $j;
   $404 = $i;
   $405 = $mod;
   $406 = ((($405)) + 168|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + ($404<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = ((($409)) + 4|0);
   $411 = (($410) + ($403<<2)|0);
   HEAP32[$411>>2] = $402;
   $412 = $j;
   $413 = (($412) + 1)|0;
   $j = $413;
  }
  $414 = $i;
  $415 = (($414) + 1)|0;
  $i = $415;
 }
 $416 = $newtrk;
 $417 = $mod;
 $418 = ((($417)) + 132|0);
 HEAP32[$418>>2] = $416;
 $419 = $trkmap;
 _free($419);
 $420 = $mod;
 $421 = ((($420)) + 132|0);
 $422 = HEAP32[$421>>2]|0;
 $423 = (($422) + 1)|0;
 HEAP32[$421>>2] = $423;
 $424 = $mod;
 $425 = ((($424)) + 132|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = (_calloc(4,$426)|0);
 $428 = $mod;
 $429 = ((($428)) + 172|0);
 HEAP32[$429>>2] = $427;
 $430 = $mod;
 $431 = ((($430)) + 172|0);
 $432 = HEAP32[$431>>2]|0;
 $433 = ($432|0)==(0|0);
 if ($433) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $434 = $mod;
 $435 = (_track_alloc($434,0,64)|0);
 $436 = ($435|0)<(0);
 if ($436) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $i = 1;
 while(1) {
  $437 = $i;
  $438 = $mod;
  $439 = ((($438)) + 132|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = ($437|0)<($440|0);
  if (!($441)) {
   break;
  }
  $442 = $mod;
  $443 = $i;
  $444 = (_track_alloc($442,$443,64)|0);
  $445 = ($444|0)<(0);
  if ($445) {
   label = 81;
   break;
  }
  $446 = $2;
  $447 = (_hio_read24l($446)|0);
  $size = $447;
  $j = 0;
  while(1) {
   $448 = $j;
   $449 = $size;
   $450 = ($448|0)<($449|0);
   if (!($450)) {
    break;
   }
   $451 = $2;
   $452 = (_hio_read8($451)|0);
   $t1 = $452;
   $453 = $2;
   $454 = (_hio_read8($453)|0);
   $t23 = $454;
   $455 = $2;
   $456 = (_hio_read8($455)|0);
   $t3 = $456;
   $457 = $t1;
   $458 = $457&255;
   $459 = ($458|0)==(255);
   if ($459) {
    $460 = $t23;
    $461 = $460&255;
    $462 = ($461|0)==(255);
    if ($462) {
     $463 = $t3;
     $464 = $463&255;
     $465 = ($464|0)==(255);
     if ($465) {
      break;
     }
    }
   }
   $466 = $t1;
   $467 = $466&255;
   $468 = $i;
   $469 = $mod;
   $470 = ((($469)) + 172|0);
   $471 = HEAP32[$470>>2]|0;
   $472 = (($471) + ($468<<2)|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = ((($473)) + 4|0);
   $475 = (($474) + ($467<<3)|0);
   $event = $475;
   $476 = $t23;
   $477 = $476&255;
   $478 = ($477|0)<(127);
   $479 = $t23;
   $480 = $479&255;
   do {
    if ($478) {
     $481 = ($480|0)>(0);
     if ($481) {
      $482 = $t23;
      $483 = $482&255;
      $484 = (($483) + 1)|0;
      $485 = $484&255;
      $486 = $event;
      HEAP8[$486>>0] = $485;
     }
     $487 = $t3;
     $488 = $event;
     $489 = ((($488)) + 2|0);
     HEAP8[$489>>0] = $487;
    } else {
     $490 = ($480|0)==(127);
     if ($490) {
      $491 = $event;
      $492 = $t1;
      $493 = $492&255;
      $494 = (($493) - 1)|0;
      $495 = $i;
      $496 = $mod;
      $497 = ((($496)) + 172|0);
      $498 = HEAP32[$497>>2]|0;
      $499 = (($498) + ($495<<2)|0);
      $500 = HEAP32[$499>>2]|0;
      $501 = ((($500)) + 4|0);
      $502 = (($501) + ($494<<3)|0);
      ;HEAP8[$491>>0]=HEAP8[$502>>0]|0;HEAP8[$491+1>>0]=HEAP8[$502+1>>0]|0;HEAP8[$491+2>>0]=HEAP8[$502+2>>0]|0;HEAP8[$491+3>>0]=HEAP8[$502+3>>0]|0;HEAP8[$491+4>>0]=HEAP8[$502+4>>0]|0;HEAP8[$491+5>>0]=HEAP8[$502+5>>0]|0;HEAP8[$491+6>>0]=HEAP8[$502+6>>0]|0;HEAP8[$491+7>>0]=HEAP8[$502+7>>0]|0;
      break;
     }
     $503 = $t23;
     $504 = $503&255;
     $505 = ($504|0)==(128);
     if ($505) {
      $506 = $t3;
      $507 = $506&255;
      $508 = (($507) + 1)|0;
      $509 = $508&255;
      $510 = $event;
      $511 = ((($510)) + 1|0);
      HEAP8[$511>>0] = $509;
      break;
     }
     $fxt = 0;
     $fxp = 0;
     $512 = $t23;
     $513 = $512&255;
     L131: do {
      switch ($513|0) {
      case 149:  {
       $fxt = 15;
       $607 = $t3;
       $608 = $607&255;
       $609 = ($608|0)<(33);
       if ($609) {
        $t3 = 33;
       }
       $610 = $t3;
       $fxp = $610;
       break;
      }
      case 143:  {
       $fxt = 14;
       $568 = $t3;
       $569 = $568&255;
       $570 = $569 & 15;
       $571 = 144 | $570;
       $572 = $571&255;
       $fxp = $572;
       break;
      }
      case 146:  {
       $584 = $t3;
       $585 = $584 << 24 >> 24;
       $586 = ($585|0)>(0);
       if ($586) {
        $fxt = 2;
        $587 = $fxp;
        $588 = $587&255;
        $589 = $588 & 15;
        $590 = 240 | $589;
        $591 = $590&255;
        $fxp = $591;
        break L131;
       } else {
        $fxt = 1;
        $592 = $fxp;
        $593 = $592&255;
        $594 = $593 & 15;
        $595 = 240 | $594;
        $596 = $595&255;
        $fxp = $596;
        break L131;
       }
       break;
      }
      case 140:  {
       $fxt = 13;
       $566 = $t3;
       $fxp = $566;
       break;
      }
      case 148:  {
       $fxt = 14;
       $602 = $t3;
       $603 = $602&255;
       $604 = $603 & 15;
       $605 = 192 | $604;
       $606 = $605&255;
       $fxp = $606;
       break;
      }
      case 139:  {
       $555 = $t3;
       $556 = $555 << 24 >> 24;
       $557 = ($556|0)>(0);
       $fxt = 6;
       $558 = $t3;
       if ($557) {
        $559 = $558&255;
        $560 = $559 << 4;
        $561 = $560&255;
        $fxp = $561;
        break L131;
       } else {
        $562 = $558 << 24 >> 24;
        $563 = (0 - ($562))|0;
        $564 = $563 & 15;
        $565 = $564&255;
        $fxp = $565;
        break L131;
       }
       break;
      }
      case 145:  {
       $574 = $t3;
       $575 = $574 << 24 >> 24;
       $576 = ($575|0)>(0);
       $fxt = 14;
       $577 = $t3;
       $578 = $577&255;
       $579 = $578 & 15;
       if ($576) {
        $580 = 160 | $579;
        $581 = $580&255;
        $fxp = $581;
        break L131;
       } else {
        $582 = 176 | $579;
        $583 = $582&255;
        $fxp = $583;
        break L131;
       }
       break;
      }
      case 151:  {
       $fxt = 8;
       $624 = $t3;
       $625 = $624 << 24 >> 24;
       $626 = $625<<1;
       $627 = (128 + ($626))|0;
       $628 = $627&255;
       $fxp = $628;
       break;
      }
      case 129:  {
       $fxt = 15;
       $514 = $t3;
       $fxp = $514;
       break;
      }
      case 141:  {
       $fxt = 11;
       $567 = $t3;
       $fxp = $567;
       break;
      }
      case 150:  {
       $611 = $t3;
       $612 = $611 << 24 >> 24;
       $613 = ($612|0)>(0);
       if ($613) {
        $fxt = 2;
        $614 = $fxp;
        $615 = $614&255;
        $616 = $615 & 15;
        $617 = 224 | $616;
        $618 = $617&255;
        $fxp = $618;
        break L131;
       } else {
        $fxt = 1;
        $619 = $fxp;
        $620 = $619&255;
        $621 = $620 & 15;
        $622 = 224 | $621;
        $623 = $622&255;
        $fxp = $623;
        break L131;
       }
       break;
      }
      case 136:  {
       $fxt = 0;
       $542 = $t3;
       $fxp = $542;
       break;
      }
      case 137:  {
       $fxt = 4;
       $543 = $t3;
       $fxp = $543;
       break;
      }
      case 130:  {
       $515 = $t3;
       $516 = $515 << 24 >> 24;
       $517 = ($516|0)>(0);
       $fxt = 10;
       $518 = $t3;
       if ($517) {
        $519 = $518&255;
        $520 = $519 << 4;
        $521 = $520&255;
        $fxp = $521;
        break L131;
       } else {
        $522 = $518 << 24 >> 24;
        $523 = (0 - ($522))|0;
        $524 = $523 & 15;
        $525 = $524&255;
        $fxp = $525;
        break L131;
       }
       break;
      }
      case 144:  {
       $fxt = 9;
       $573 = $t3;
       $fxp = $573;
       break;
      }
      case 131:  {
       $526 = $t3;
       $527 = $event;
       $528 = ((($527)) + 2|0);
       HEAP8[$528>>0] = $526;
       break;
      }
      case 147:  {
       $fxt = 14;
       $597 = $t3;
       $598 = $597&255;
       $599 = $598 & 15;
       $600 = 208 | $599;
       $601 = $600&255;
       $fxp = $601;
       break;
      }
      case 134:  {
       $fxt = 3;
       $540 = $t3;
       $fxp = $540;
       break;
      }
      case 135:  {
       $fxt = 7;
       $541 = $t3;
       $fxp = $541;
       break;
      }
      case 132:  {
       $529 = $t3;
       $530 = $529 << 24 >> 24;
       $531 = ($530|0)>=(0);
       if ($531) {
        $fxt = 2;
        $532 = $t3;
        $fxp = $532;
        break L131;
       }
       $533 = $t3;
       $534 = $533&255;
       $535 = ($534|0)==(128);
       $fxt = 1;
       if ($535) {
        $fxp = 0;
        break L131;
       } else {
        $536 = $t3;
        $537 = $536 << 24 >> 24;
        $538 = (0 - ($537))|0;
        $539 = $538&255;
        $fxp = $539;
        break L131;
       }
       break;
      }
      case 138:  {
       $544 = $t3;
       $545 = $544 << 24 >> 24;
       $546 = ($545|0)>(0);
       $fxt = 5;
       $547 = $t3;
       if ($546) {
        $548 = $547&255;
        $549 = $548 << 4;
        $550 = $549&255;
        $fxp = $550;
        break L131;
       } else {
        $551 = $547 << 24 >> 24;
        $552 = (0 - ($551))|0;
        $553 = $552 & 15;
        $554 = $553&255;
        $fxp = $554;
        break L131;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     $629 = $fxt;
     $630 = $event;
     $631 = ((($630)) + 3|0);
     HEAP8[$631>>0] = $629;
     $632 = $fxp;
     $633 = $event;
     $634 = ((($633)) + 4|0);
     HEAP8[$634>>0] = $632;
    }
   } while(0);
   $635 = $j;
   $636 = (($635) + 1)|0;
   $j = $636;
  }
  $637 = $i;
  $638 = (($637) + 1)|0;
  $i = $638;
 }
 if ((label|0) == 81) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 $i = 0;
 while(1) {
  $639 = $i;
  $640 = $mod;
  $641 = ((($640)) + 140|0);
  $642 = HEAP32[$641>>2]|0;
  $643 = ($639|0)<($642|0);
  $644 = $1;
  if (!($643)) {
   label = 143;
   break;
  }
  $645 = $2;
  $646 = $i;
  $647 = $mod;
  $648 = ((($647)) + 180|0);
  $649 = HEAP32[$648>>2]|0;
  $650 = (($649) + (($646*52)|0)|0);
  $651 = (_load_sample($644,$645,2,$650,0)|0);
  $652 = ($651|0)<(0);
  if ($652) {
   label = 141;
   break;
  }
  $653 = $i;
  $654 = (($653) + 1)|0;
  $i = $654;
 }
 if ((label|0) == 141) {
  $0 = -1;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 else if ((label|0) == 143) {
  $655 = ((($644)) + 1280|0);
  $656 = HEAP32[$655>>2]|0;
  $657 = $656 | 32;
  HEAP32[$655>>2] = $657;
  $0 = 0;
  $658 = $0;
  STACKTOP = sp;return ($658|0);
 }
 return (0)|0;
}
function _psm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1347636734);
 if ($6) {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,60);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _psm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0, $c = 0, $c2spd = 0, $chan = 0, $event = 0;
 var $finetune = 0, $flags = 0, $i = 0, $len = 0, $mod = 0, $mode = 0, $p_chn = 0, $p_ins = 0, $p_ord = 0, $p_pat = 0, $p_smp = 0, $r = 0, $rows = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1376|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 352|0;
 $p_smp = sp + 32|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read($buf,1,60,$8)|0);
 $9 = $mod;
 (_strncpy(($9|0),($buf|0),64)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $type = $12;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $ver = $15;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = $17&255;
 $mode = $18;
 $19 = $type;
 $20 = $19 & 1;
 $21 = ($20|0)!=(0);
 if ($21) {
  $0 = -1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 $22 = $1;
 $23 = $ver;
 $24 = $23 & 240;
 $25 = $24 >> 4;
 $26 = $ver;
 $27 = $26 & 15;
 HEAP32[$vararg_buffer>>2] = $25;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $27;
 _set_type($22,5960,$vararg_buffer);
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = $29&255;
 $31 = $mod;
 $32 = ((($31)) + 148|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 $34 = (_hio_read8($33)|0);
 $35 = $34&255;
 $36 = $mod;
 $37 = ((($36)) + 152|0);
 HEAP32[$37>>2] = $35;
 $38 = $2;
 (_hio_read8($38)|0);
 $39 = $2;
 (_hio_read16l($39)|0);
 $40 = $2;
 $41 = (_hio_read16l($40)|0);
 $42 = $41&65535;
 $43 = $mod;
 $44 = ((($43)) + 156|0);
 HEAP32[$44>>2] = $42;
 $45 = $2;
 $46 = (_hio_read16l($45)|0);
 $47 = $46&65535;
 $48 = $mod;
 $49 = ((($48)) + 128|0);
 HEAP32[$49>>2] = $47;
 $50 = $2;
 $51 = (_hio_read16l($50)|0);
 $52 = $51&65535;
 $53 = $mod;
 $54 = ((($53)) + 140|0);
 HEAP32[$54>>2] = $52;
 $55 = $2;
 (_hio_read16l($55)|0);
 $56 = $2;
 $57 = (_hio_read16l($56)|0);
 $58 = $57&65535;
 $59 = $mod;
 $60 = ((($59)) + 136|0);
 HEAP32[$60>>2] = $58;
 $61 = $mod;
 $62 = ((($61)) + 140|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $mod;
 $65 = ((($64)) + 144|0);
 HEAP32[$65>>2] = $63;
 $66 = $mod;
 $67 = ((($66)) + 128|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $mod;
 $70 = ((($69)) + 136|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = Math_imul($68, $71)|0;
 $73 = $mod;
 $74 = ((($73)) + 132|0);
 HEAP32[$74>>2] = $72;
 $75 = $2;
 $76 = (_hio_read32l($75)|0);
 $p_ord = $76;
 $77 = $2;
 $78 = (_hio_read32l($77)|0);
 $p_chn = $78;
 $79 = $2;
 $80 = (_hio_read32l($79)|0);
 $p_pat = $80;
 $81 = $2;
 $82 = (_hio_read32l($81)|0);
 $p_ins = $82;
 $83 = $2;
 $84 = $3;
 $85 = $p_ord;
 $86 = (($84) + ($85))|0;
 (_hio_seek($83,$86,0)|0);
 $87 = $mod;
 $88 = ((($87)) + 952|0);
 $89 = $mod;
 $90 = ((($89)) + 156|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $2;
 (_hio_read($88,1,$91,$92)|0);
 $93 = $2;
 $94 = $3;
 $95 = $p_chn;
 $96 = (($94) + ($95))|0;
 (_hio_seek($93,$96,0)|0);
 $97 = $2;
 (_hio_read($buf,1,16,$97)|0);
 $98 = $mod;
 $99 = (_instrument_init($98)|0);
 $100 = ($99|0)<(0);
 if ($100) {
  $0 = -1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 $101 = $2;
 $102 = $3;
 $103 = $p_ins;
 $104 = (($102) + ($103))|0;
 (_hio_seek($101,$104,0)|0);
 $i = 0;
 while(1) {
  $105 = $i;
  $106 = $mod;
  $107 = ((($106)) + 140|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($105|0)<($108|0);
  $110 = $mod;
  if (!($109)) {
   break;
  }
  $111 = $i;
  $112 = (_subinstrument_alloc($110,$111,1)|0);
  $113 = ($112|0)<(0);
  if ($113) {
   label = 8;
   break;
  }
  $114 = $2;
  (_hio_read($buf,1,13,$114)|0);
  $115 = $2;
  (_hio_read($buf,1,24,$115)|0);
  $116 = $i;
  $117 = $mod;
  $118 = ((($117)) + 176|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + (($116*764)|0)|0);
  (_strncpy(($120|0),($buf|0),24)|0);
  $121 = $i;
  $122 = $mod;
  $123 = ((($122)) + 176|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + (($121*764)|0)|0);
  (_adjust_string($125)|0);
  $126 = $2;
  $127 = (_hio_read32l($126)|0);
  $128 = $i;
  $129 = (($p_smp) + ($128<<2)|0);
  HEAP32[$129>>2] = $127;
  $130 = $2;
  (_hio_read32l($130)|0);
  $131 = $2;
  (_hio_read16l($131)|0);
  $132 = $2;
  $133 = (_hio_read8($132)|0);
  $134 = $133&255;
  $flags = $134;
  $135 = $2;
  $136 = (_hio_read32l($135)|0);
  $137 = $i;
  $138 = $mod;
  $139 = ((($138)) + 180|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + (($137*52)|0)|0);
  $142 = ((($141)) + 32|0);
  HEAP32[$142>>2] = $136;
  $143 = $2;
  $144 = (_hio_read32l($143)|0);
  $145 = $i;
  $146 = $mod;
  $147 = ((($146)) + 180|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + (($145*52)|0)|0);
  $150 = ((($149)) + 36|0);
  HEAP32[$150>>2] = $144;
  $151 = $2;
  $152 = (_hio_read32l($151)|0);
  $153 = $i;
  $154 = $mod;
  $155 = ((($154)) + 180|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + (($153*52)|0)|0);
  $158 = ((($157)) + 40|0);
  HEAP32[$158>>2] = $152;
  $159 = $2;
  $160 = (_hio_read8($159)|0);
  $161 = $160&255;
  $162 = $161 << 4;
  $163 = $162&255;
  $164 = $163 << 24 >> 24;
  $finetune = $164;
  $165 = $2;
  $166 = (_hio_read8($165)|0);
  $167 = $166&255;
  $168 = $i;
  $169 = $mod;
  $170 = ((($169)) + 176|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + (($168*764)|0)|0);
  $173 = ((($172)) + 756|0);
  $174 = HEAP32[$173>>2]|0;
  HEAP32[$174>>2] = $167;
  $175 = $2;
  $176 = (_hio_read16l($175)|0);
  $177 = $176&65535;
  $178 = ($177*8363)|0;
  $179 = (($178|0) / 8448)&-1;
  $180 = $179&65535;
  $c2spd = $180;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 176|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*764)|0)|0);
  $186 = ((($185)) + 756|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ((($187)) + 8|0);
  HEAP32[$188>>2] = 128;
  $189 = $i;
  $190 = $i;
  $191 = $mod;
  $192 = ((($191)) + 176|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + (($190*764)|0)|0);
  $195 = ((($194)) + 756|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ((($196)) + 40|0);
  HEAP32[$197>>2] = $189;
  $198 = $flags;
  $199 = $198&65535;
  $200 = $199 & 128;
  $201 = ($200|0)!=(0);
  $202 = $201 ? 2 : 0;
  $203 = $i;
  $204 = $mod;
  $205 = ((($204)) + 180|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + (($203*52)|0)|0);
  $208 = ((($207)) + 44|0);
  HEAP32[$208>>2] = $202;
  $209 = $flags;
  $210 = $209&65535;
  $211 = $210 & 32;
  $212 = ($211|0)!=(0);
  $213 = $212 ? 4 : 0;
  $214 = $i;
  $215 = $mod;
  $216 = ((($215)) + 180|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + (($214*52)|0)|0);
  $219 = ((($218)) + 44|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $220 | $213;
  HEAP32[$219>>2] = $221;
  $222 = $c2spd;
  $223 = $222&65535;
  $224 = $i;
  $225 = $mod;
  $226 = ((($225)) + 176|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + (($224*764)|0)|0);
  $229 = ((($228)) + 756|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ((($230)) + 12|0);
  $232 = $i;
  $233 = $mod;
  $234 = ((($233)) + 176|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + (($232*764)|0)|0);
  $237 = ((($236)) + 756|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ((($238)) + 16|0);
  _c2spd_to_note($223,$231,$239);
  $240 = $finetune;
  $241 = $i;
  $242 = $mod;
  $243 = ((($242)) + 176|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($244) + (($241*764)|0)|0);
  $246 = ((($245)) + 756|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 16|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + ($240))|0;
  HEAP32[$248>>2] = $250;
  $251 = $i;
  $252 = $mod;
  $253 = ((($252)) + 180|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($254) + (($251*52)|0)|0);
  $256 = ((($255)) + 32|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($257|0)>(0);
  if ($258) {
   $259 = $i;
   $260 = $mod;
   $261 = ((($260)) + 176|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($262) + (($259*764)|0)|0);
   $264 = ((($263)) + 36|0);
   HEAP32[$264>>2] = 1;
  }
  $265 = $i;
  $266 = (($265) + 1)|0;
  $i = $266;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 $267 = (_pattern_init($110)|0);
 $268 = ($267|0)<(0);
 if ($268) {
  $0 = -1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 $269 = $2;
 $270 = $3;
 $271 = $p_pat;
 $272 = (($270) + ($271))|0;
 (_hio_seek($269,$272,0)|0);
 $i = 0;
 L24: while(1) {
  $273 = $i;
  $274 = $mod;
  $275 = ((($274)) + 128|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ($273|0)<($276|0);
  if (!($277)) {
   label = 34;
   break;
  }
  $278 = $2;
  $279 = (_hio_read16l($278)|0);
  $280 = $279&65535;
  $281 = (($280) - 4)|0;
  $len = $281;
  $282 = $2;
  $283 = (_hio_read8($282)|0);
  $rows = $283;
  $284 = $2;
  $285 = (_hio_read8($284)|0);
  $chan = $285;
  $286 = $mod;
  $287 = $i;
  $288 = $rows;
  $289 = $288&255;
  $290 = (_pattern_tracks_alloc($286,$287,$289)|0);
  $291 = ($290|0)<(0);
  if ($291) {
   label = 17;
   break;
  }
  $r = 0;
  while(1) {
   $292 = $r;
   $293 = $rows;
   $294 = $293&255;
   $295 = ($292|0)<($294|0);
   if (!($295)) {
    break;
   }
   while(1) {
    $296 = $len;
    $297 = ($296|0)>(0);
    if (!($297)) {
     break;
    }
    $298 = $2;
    $299 = (_hio_read8($298)|0);
    $b = $299;
    $300 = $len;
    $301 = (($300) + -1)|0;
    $len = $301;
    $302 = $b;
    $303 = $302&255;
    $304 = ($303|0)==(0);
    if ($304) {
     break;
    }
    $305 = $b;
    $306 = $305&255;
    $307 = $306 & 15;
    $c = $307;
    $308 = $c;
    $309 = $mod;
    $310 = ((($309)) + 136|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = ($308|0)>=($311|0);
    if ($312) {
     label = 23;
     break L24;
    }
    $313 = $r;
    $314 = $c;
    $315 = $i;
    $316 = $1;
    $317 = ((($316)) + 168|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + ($315<<2)|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = ((($320)) + 4|0);
    $322 = (($321) + ($314<<2)|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = $1;
    $325 = ((($324)) + 172|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($326) + ($323<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ((($328)) + 4|0);
    $330 = (($329) + ($313<<3)|0);
    $event = $330;
    $331 = $b;
    $332 = $331&255;
    $333 = $332 & 128;
    $334 = ($333|0)!=(0);
    if ($334) {
     $335 = $2;
     $336 = (_hio_read8($335)|0);
     $337 = $336&255;
     $338 = (($337) + 36)|0;
     $339 = (($338) + 1)|0;
     $340 = $339&255;
     $341 = $event;
     HEAP8[$341>>0] = $340;
     $342 = $2;
     $343 = (_hio_read8($342)|0);
     $344 = $event;
     $345 = ((($344)) + 1|0);
     HEAP8[$345>>0] = $343;
     $346 = $len;
     $347 = (($346) - 2)|0;
     $len = $347;
    }
    $348 = $b;
    $349 = $348&255;
    $350 = $349 & 64;
    $351 = ($350|0)!=(0);
    if ($351) {
     $352 = $2;
     $353 = (_hio_read8($352)|0);
     $354 = $353&255;
     $355 = (($354) + 1)|0;
     $356 = $355&255;
     $357 = $event;
     $358 = ((($357)) + 2|0);
     HEAP8[$358>>0] = $356;
     $359 = $len;
     $360 = (($359) + -1)|0;
     $len = $360;
    }
    $361 = $b;
    $362 = $361&255;
    $363 = $362 & 32;
    $364 = ($363|0)!=(0);
    if (!($364)) {
     continue;
    }
    $365 = $2;
    $366 = (_hio_read8($365)|0);
    $367 = $event;
    $368 = ((($367)) + 3|0);
    HEAP8[$368>>0] = $366;
    $369 = $2;
    $370 = (_hio_read8($369)|0);
    $371 = $event;
    $372 = ((($371)) + 4|0);
    HEAP8[$372>>0] = $370;
    $373 = $len;
    $374 = (($373) - 2)|0;
    $len = $374;
   }
   $375 = $r;
   $376 = (($375) + 1)|0;
   $r = $376;
  }
  $377 = $len;
  $378 = ($377|0)>(0);
  if ($378) {
   $379 = $2;
   $380 = $len;
   (_hio_seek($379,$380,1)|0);
  }
  $381 = $i;
  $382 = (($381) + 1)|0;
  $i = $382;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 else if ((label|0) == 23) {
  $0 = -1;
  $413 = $0;
  STACKTOP = sp;return ($413|0);
 }
 else if ((label|0) == 34) {
  $i = 0;
  while(1) {
   $383 = $i;
   $384 = $mod;
   $385 = ((($384)) + 140|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($383|0)<($386|0);
   if (!($387)) {
    label = 39;
    break;
   }
   $388 = $2;
   $389 = $3;
   $390 = $i;
   $391 = (($p_smp) + ($390<<2)|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = (($389) + ($392))|0;
   (_hio_seek($388,$393,0)|0);
   $394 = $1;
   $395 = $2;
   $396 = $i;
   $397 = $mod;
   $398 = ((($397)) + 176|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = (($399) + (($396*764)|0)|0);
   $401 = ((($400)) + 756|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = ((($402)) + 40|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = $mod;
   $406 = ((($405)) + 180|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + (($404*52)|0)|0);
   $409 = (_load_sample($394,$395,1,$408,0)|0);
   $410 = ($409|0)<(0);
   if ($410) {
    label = 37;
    break;
   }
   $411 = $i;
   $412 = (($411) + 1)|0;
   $i = $412;
  }
  if ((label|0) == 37) {
   $0 = -1;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
  }
  else if ((label|0) == 39) {
   $0 = 0;
   $413 = $0;
   STACKTOP = sp;return ($413|0);
  }
 }
 return (0)|0;
}
function _stim_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1398032717);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   $8 = (_hio_read16b($7)|0);
   $9 = $8&65535;
   $10 = ($9|0)>(16);
   if ($10) {
    $0 = -1;
    break;
   } else {
    $11 = $1;
    $12 = $2;
    _read_title($11,$12,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _stim_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1 = 0, $b2 = 0, $b3 = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0, $sh = 0, $si = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sh = sp + 8|0;
 $si = sp + 456|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_hio_read32b($7)|0);
 HEAP32[$sh>>2] = $8;
 $9 = $2;
 $10 = (_hio_read32b($9)|0);
 $11 = ((($sh)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = $2;
 (_hio_read32b($12)|0);
 $13 = $2;
 (_hio_read32b($13)|0);
 $14 = $2;
 $15 = (_hio_read16b($14)|0);
 $16 = ((($sh)) + 16|0);
 HEAP16[$16>>1] = $15;
 $17 = $2;
 $18 = (_hio_read16b($17)|0);
 $19 = ((($sh)) + 18|0);
 HEAP16[$19>>1] = $18;
 $20 = $2;
 $21 = (_hio_read16b($20)|0);
 $22 = ((($sh)) + 20|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($sh)) + 22|0);
 $24 = $2;
 (_hio_read($23,128,1,$24)|0);
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = ($25|0)<(64);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = (_hio_read32b($27)|0);
  $29 = (($28) + 12)|0;
  $30 = $i;
  $31 = ((($sh)) + 152|0);
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = ((($sh)) + 18|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = $mod;
 $39 = ((($38)) + 156|0);
 HEAP32[$39>>2] = $37;
 $40 = ((($sh)) + 20|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41&65535;
 $43 = $mod;
 $44 = ((($43)) + 128|0);
 HEAP32[$44>>2] = $42;
 $45 = ((($sh)) + 16|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $mod;
 $49 = ((($48)) + 140|0);
 HEAP32[$49>>2] = $47;
 $50 = $mod;
 $51 = ((($50)) + 140|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $mod;
 $54 = ((($53)) + 144|0);
 HEAP32[$54>>2] = $52;
 $55 = $mod;
 $56 = ((($55)) + 128|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $mod;
 $59 = ((($58)) + 136|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = Math_imul($57, $60)|0;
 $62 = $mod;
 $63 = ((($62)) + 132|0);
 HEAP32[$63>>2] = $61;
 $i = 0;
 while(1) {
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 156|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $i;
  $70 = ((($sh)) + 22|0);
  $71 = (($70) + ($69)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $i;
  $74 = $mod;
  $75 = ((($74)) + 952|0);
  $76 = (($75) + ($73)|0);
  HEAP8[$76>>0] = $72;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 $79 = $1;
 _set_type($79,6008,$vararg_buffer);
 $80 = $mod;
 $81 = (_pattern_init($80)|0);
 $82 = ($81|0)<(0);
 if ($82) {
  $0 = -1;
  $343 = $0;
  STACKTOP = sp;return ($343|0);
 }
 $i = 0;
 while(1) {
  $83 = $i;
  $84 = $mod;
  $85 = ((($84)) + 128|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83|0)<($86|0);
  $88 = $mod;
  if (!($87)) {
   break;
  }
  $89 = $i;
  $90 = (_pattern_tracks_alloc($88,$89,64)|0);
  $91 = ($90|0)<(0);
  if ($91) {
   label = 12;
   break;
  }
  $92 = $2;
  $93 = $3;
  $94 = $i;
  $95 = ((($sh)) + 152|0);
  $96 = (($95) + ($94<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($93) + ($97))|0;
  $99 = (($98) + 8)|0;
  (_hio_seek($92,$99,0)|0);
  $j = 0;
  while(1) {
   $100 = $j;
   $101 = ($100|0)<(4);
   if (!($101)) {
    break;
   }
   $k = 0;
   while(1) {
    $102 = $k;
    $103 = ($102|0)<(64);
    if (!($103)) {
     break;
    }
    $104 = $k;
    $105 = $j;
    $106 = $i;
    $107 = $1;
    $108 = ((($107)) + 168|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + ($106<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ((($111)) + 4|0);
    $113 = (($112) + ($105<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = $1;
    $116 = ((($115)) + 172|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + ($114<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ((($119)) + 4|0);
    $121 = (($120) + ($104<<3)|0);
    $event = $121;
    $122 = $2;
    $123 = (_hio_read8($122)|0);
    $b1 = $123;
    $124 = $b1;
    $125 = $124&255;
    $126 = $125 & 128;
    $127 = ($126|0)!=(0);
    if ($127) {
     $128 = $b1;
     $129 = $128&255;
     $130 = $129 & 127;
     $131 = $k;
     $132 = (($131) + ($130))|0;
     $k = $132;
    } else {
     $133 = $2;
     $134 = (_hio_read8($133)|0);
     $b2 = $134;
     $135 = $2;
     $136 = (_hio_read8($135)|0);
     $b3 = $136;
     $137 = $b2;
     $138 = $137&255;
     $139 = $138 & 63;
     $140 = $139&255;
     $141 = $event;
     HEAP8[$141>>0] = $140;
     $142 = $140&255;
     $143 = ($142|0)!=(0);
     if ($143) {
      $144 = $event;
      $145 = HEAP8[$144>>0]|0;
      $146 = $145&255;
      $147 = (($146) + 47)|0;
      $148 = $147&255;
      HEAP8[$144>>0] = $148;
     }
     $149 = $b1;
     $150 = $149&255;
     $151 = $150 & 31;
     $152 = $151&255;
     $153 = $event;
     $154 = ((($153)) + 1|0);
     HEAP8[$154>>0] = $152;
     $155 = $b2;
     $156 = $155&255;
     $157 = $156 >> 4;
     $158 = $157 & 12;
     $159 = $b1;
     $160 = $159&255;
     $161 = $160 >> 5;
     $162 = $158 | $161;
     $163 = $162&255;
     $164 = $event;
     $165 = ((($164)) + 3|0);
     HEAP8[$165>>0] = $163;
     $166 = $b3;
     $167 = $event;
     $168 = ((($167)) + 4|0);
     HEAP8[$168>>0] = $166;
     $169 = $event;
     _disable_continue_fx($169);
    }
    $170 = $k;
    $171 = (($170) + 1)|0;
    $k = $171;
   }
   $172 = $j;
   $173 = (($172) + 1)|0;
   $j = $173;
  }
  $174 = $i;
  $175 = (($174) + 1)|0;
  $i = $175;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $343 = $0;
  STACKTOP = sp;return ($343|0);
 }
 $176 = (_instrument_init($88)|0);
 $177 = ($176|0)<(0);
 if ($177) {
  $0 = -1;
  $343 = $0;
  STACKTOP = sp;return ($343|0);
 }
 $178 = $2;
 $179 = $3;
 $180 = ((($sh)) + 4|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = (($179) + ($181))|0;
 $183 = $mod;
 $184 = ((($183)) + 144|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $185<<2;
 $187 = (($182) + ($186))|0;
 (_hio_seek($178,$187,0)|0);
 $i = 0;
 while(1) {
  $188 = $i;
  $189 = $mod;
  $190 = ((($189)) + 144|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($188|0)<($191|0);
  if (!($192)) {
   label = 37;
   break;
  }
  $193 = $2;
  $194 = (_hio_read16b($193)|0);
  HEAP16[$si>>1] = $194;
  $195 = $2;
  $196 = (_hio_read8($195)|0);
  $197 = ((($si)) + 2|0);
  HEAP8[$197>>0] = $196;
  $198 = $2;
  $199 = (_hio_read8($198)|0);
  $200 = ((($si)) + 3|0);
  HEAP8[$200>>0] = $199;
  $201 = $2;
  $202 = (_hio_read16b($201)|0);
  $203 = ((($si)) + 4|0);
  HEAP16[$203>>1] = $202;
  $204 = $2;
  $205 = (_hio_read16b($204)|0);
  $206 = ((($si)) + 6|0);
  HEAP16[$206>>1] = $205;
  $207 = $mod;
  $208 = $i;
  $209 = (_subinstrument_alloc($207,$208,1)|0);
  $210 = ($209|0)<(0);
  if ($210) {
   label = 30;
   break;
  }
  $211 = HEAP16[$si>>1]|0;
  $212 = $211&65535;
  $213 = $212<<1;
  $214 = $i;
  $215 = $mod;
  $216 = ((($215)) + 180|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + (($214*52)|0)|0);
  $219 = ((($218)) + 32|0);
  HEAP32[$219>>2] = $213;
  $220 = ((($si)) + 4|0);
  $221 = HEAP16[$220>>1]|0;
  $222 = $221&65535;
  $223 = $222<<1;
  $224 = $i;
  $225 = $mod;
  $226 = ((($225)) + 180|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + (($224*52)|0)|0);
  $229 = ((($228)) + 36|0);
  HEAP32[$229>>2] = $223;
  $230 = $i;
  $231 = $mod;
  $232 = ((($231)) + 180|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($233) + (($230*52)|0)|0);
  $235 = ((($234)) + 36|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = ((($si)) + 6|0);
  $238 = HEAP16[$237>>1]|0;
  $239 = $238&65535;
  $240 = $239<<1;
  $241 = (($236) + ($240))|0;
  $242 = $i;
  $243 = $mod;
  $244 = ((($243)) + 180|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($245) + (($242*52)|0)|0);
  $247 = ((($246)) + 40|0);
  HEAP32[$247>>2] = $241;
  $248 = ((($si)) + 6|0);
  $249 = HEAP16[$248>>1]|0;
  $250 = $249&65535;
  $251 = ($250|0)>(1);
  $252 = $251 ? 2 : 0;
  $253 = $i;
  $254 = $mod;
  $255 = ((($254)) + 180|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) + (($253*52)|0)|0);
  $258 = ((($257)) + 44|0);
  HEAP32[$258>>2] = $252;
  $259 = ((($si)) + 2|0);
  $260 = HEAP8[$259>>0]|0;
  $261 = $260&255;
  $262 = $261 << 4;
  $263 = $262&255;
  $264 = $263 << 24 >> 24;
  $265 = $i;
  $266 = $mod;
  $267 = ((($266)) + 176|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + (($265*764)|0)|0);
  $270 = ((($269)) + 756|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ((($271)) + 16|0);
  HEAP32[$272>>2] = $264;
  $273 = ((($si)) + 3|0);
  $274 = HEAP8[$273>>0]|0;
  $275 = $274&255;
  $276 = $i;
  $277 = $mod;
  $278 = ((($277)) + 176|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = (($279) + (($276*764)|0)|0);
  $281 = ((($280)) + 756|0);
  $282 = HEAP32[$281>>2]|0;
  HEAP32[$282>>2] = $275;
  $283 = $i;
  $284 = $mod;
  $285 = ((($284)) + 176|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = (($286) + (($283*764)|0)|0);
  $288 = ((($287)) + 756|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ((($289)) + 8|0);
  HEAP32[$290>>2] = 128;
  $291 = $i;
  $292 = $i;
  $293 = $mod;
  $294 = ((($293)) + 176|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + (($292*764)|0)|0);
  $297 = ((($296)) + 756|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = ((($298)) + 40|0);
  HEAP32[$299>>2] = $291;
  $300 = $i;
  $301 = $mod;
  $302 = ((($301)) + 176|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (($303) + (($300*764)|0)|0);
  $305 = ((($304)) + 40|0);
  HEAP32[$305>>2] = 4095;
  $306 = $i;
  $307 = $mod;
  $308 = ((($307)) + 180|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + (($306*52)|0)|0);
  $311 = ((($310)) + 32|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($312|0)>(0);
  if ($313) {
   $314 = $i;
   $315 = $mod;
   $316 = ((($315)) + 176|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = (($317) + (($314*764)|0)|0);
   $319 = ((($318)) + 36|0);
   HEAP32[$319>>2] = 1;
  }
  $320 = $i;
  $321 = $mod;
  $322 = ((($321)) + 180|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = (($323) + (($320*52)|0)|0);
  $325 = ((($324)) + 32|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($326|0)!=(0);
  if ($327) {
   $328 = $1;
   $329 = $2;
   $330 = $i;
   $331 = $mod;
   $332 = ((($331)) + 180|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + (($330*52)|0)|0);
   $335 = (_load_sample($328,$329,0,$334,0)|0);
   $336 = ($335|0)<(0);
   if ($336) {
    label = 35;
    break;
   }
  }
  $337 = $i;
  $338 = (($337) + 1)|0;
  $i = $338;
 }
 if ((label|0) == 30) {
  $0 = -1;
  $343 = $0;
  STACKTOP = sp;return ($343|0);
 }
 else if ((label|0) == 35) {
  $0 = -1;
  $343 = $0;
  STACKTOP = sp;return ($343|0);
 }
 else if ((label|0) == 37) {
  $339 = $1;
  $340 = ((($339)) + 1280|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $341 | 8192;
  HEAP32[$340>>2] = $342;
  $0 = 0;
  $343 = $0;
  STACKTOP = sp;return ($343|0);
 }
 return (0)|0;
}
function _mmd_xlat_fx($event,$bpm_on,$bpmlen,$med_8ch,$hexvol) {
 $event = $event|0;
 $bpm_on = $bpm_on|0;
 $bpmlen = $bpmlen|0;
 $med_8ch = $med_8ch|0;
 $hexvol = $hexvol|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fxp = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $bpm_on;
 $2 = $bpmlen;
 $3 = $med_8ch;
 $4 = $hexvol;
 $5 = $0;
 $6 = ((($5)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 do {
  switch ($8|0) {
  case 30:  {
   $145 = $0;
   $146 = ((($145)) + 3|0);
   HEAP8[$146>>0] = -77;
   STACKTOP = sp;return;
   break;
  }
  case 7: case 6: case 5: case 3: case 2: case 1: case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $92 = $0;
   $93 = ((($92)) + 3|0);
   HEAP8[$93>>0] = -80;
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   $141 = $0;
   $142 = ((($141)) + 3|0);
   HEAP8[$142>>0] = -82;
   STACKTOP = sp;return;
   break;
  }
  case 46:  {
   $181 = $0;
   $182 = ((($181)) + 4|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = ($184|0)>=(240);
   if (!($185)) {
    $186 = $0;
    $187 = ((($186)) + 4|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = $188&255;
    $190 = ($189|0)<=(16);
    if (!($190)) {
     STACKTOP = sp;return;
    }
   }
   $191 = $0;
   $192 = ((($191)) + 4|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 << 24 >> 24;
   $195 = (($194) + 16)|0;
   $fxp = $195;
   $196 = $fxp;
   $197 = $196 << 3;
   $fxp = $197;
   $198 = $fxp;
   $199 = ($198|0)==(256);
   if ($199) {
    $200 = $fxp;
    $201 = (($200) + -1)|0;
    $fxp = $201;
   }
   $202 = $0;
   $203 = ((($202)) + 3|0);
   HEAP8[$203>>0] = 8;
   $204 = $fxp;
   $205 = $204&255;
   $206 = $0;
   $207 = ((($206)) + 4|0);
   HEAP8[$207>>0] = $205;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $96 = $0;
   $97 = ((($96)) + 3|0);
   HEAP8[$97>>0] = -90;
   $98 = $0;
   $99 = ((($98)) + 4|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = (($101) + 8)|0;
   $103 = $102 << 4;
   $104 = $103&255;
   $105 = $0;
   $106 = ((($105)) + 4|0);
   HEAP8[$106>>0] = $104;
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $34 = $0;
   $35 = ((($34)) + 4|0);
   HEAP8[$35>>0] = 0;
   $36 = $0;
   $37 = ((($36)) + 3|0);
   HEAP8[$37>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $15 = $0;
   $16 = ((($15)) + 3|0);
   HEAP8[$16>>0] = 15;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $11 = $0;
   $12 = ((($11)) + 4|0);
   HEAP8[$12>>0] = 0;
   $13 = $0;
   $14 = ((($13)) + 3|0);
   HEAP8[$14>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $90 = $0;
   $91 = ((($90)) + 3|0);
   HEAP8[$91>>0] = -81;
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $32 = $0;
   $33 = ((($32)) + 3|0);
   HEAP8[$33>>0] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $9 = $0;
   $10 = ((($9)) + 3|0);
   HEAP8[$10>>0] = -110;
   STACKTOP = sp;return;
   break;
  }
  case 12: case 11: case 10:  {
   $17 = $4;
   $18 = ($17|0)!=(0);
   if ($18) {
    STACKTOP = sp;return;
   }
   $19 = $0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $p = $22;
   $23 = $p;
   $24 = $23 >> 8;
   $25 = ($24*10)|0;
   $26 = $p;
   $27 = $26 & 255;
   $28 = (($25) + ($27))|0;
   $29 = $28&255;
   $30 = $0;
   $31 = ((($30)) + 4|0);
   HEAP8[$31>>0] = $29;
   STACKTOP = sp;return;
   break;
  }
  case 24:  {
   $122 = $0;
   $123 = ((($122)) + 3|0);
   HEAP8[$123>>0] = 14;
   $124 = $0;
   $125 = ((($124)) + 4|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)>(15);
   if ($128) {
    $129 = $0;
    $130 = ((($129)) + 4|0);
    HEAP8[$130>>0] = 15;
   }
   $131 = $0;
   $132 = ((($131)) + 4|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $134 | 192;
   $136 = $135&255;
   HEAP8[$132>>0] = $136;
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $107 = $0;
   $108 = ((($107)) + 3|0);
   HEAP8[$108>>0] = 14;
   $109 = $0;
   $110 = ((($109)) + 4|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = ($112|0)>(15);
   if ($113) {
    $114 = $0;
    $115 = ((($114)) + 4|0);
    HEAP8[$115>>0] = 15;
   }
   $116 = $0;
   $117 = ((($116)) + 4|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $119 | 96;
   $121 = $120&255;
   HEAP8[$117>>0] = $121;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $143 = $0;
   $144 = ((($143)) + 3|0);
   HEAP8[$144>>0] = 13;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $147 = $0;
   $148 = ((($147)) + 4|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $150 & 240;
   $152 = $151 >> 4;
   $153 = ($152|0)!=(0);
   $154 = $0;
   if ($153) {
    $155 = ((($154)) + 3|0);
    HEAP8[$155>>0] = 14;
    $156 = $0;
    $157 = ((($156)) + 4|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = $159 >> 4;
    $161 = 208 | $160;
    $162 = $161&255;
    $163 = $0;
    $164 = ((($163)) + 4|0);
    HEAP8[$164>>0] = $162;
    STACKTOP = sp;return;
   }
   $165 = ((($154)) + 4|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = $167 & 15;
   $169 = ($168|0)!=(0);
   if (!($169)) {
    STACKTOP = sp;return;
   }
   $170 = $0;
   $171 = ((($170)) + 3|0);
   HEAP8[$171>>0] = 14;
   $172 = $0;
   $173 = ((($172)) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $175 & 15;
   $177 = 144 | $176;
   $178 = $177&255;
   $179 = $0;
   $180 = ((($179)) + 4|0);
   HEAP8[$180>>0] = $178;
   STACKTOP = sp;return;
   break;
  }
  case 15:  {
   $38 = $0;
   $39 = ((($38)) + 4|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)==(0);
   $43 = $0;
   if ($42) {
    $44 = ((($43)) + 3|0);
    HEAP8[$44>>0] = 13;
    STACKTOP = sp;return;
   }
   $45 = ((($43)) + 4|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ($47|0)<=(240);
   $49 = $0;
   if ($48) {
    $50 = ((($49)) + 3|0);
    HEAP8[$50>>0] = -85;
    $51 = $3;
    $52 = ($51|0)!=(0);
    $53 = $0;
    $54 = ((($53)) + 4|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    if ($52) {
     $57 = (_get_8ch_tempo($56)|0);
     $59 = $57;
    } else {
     $59 = $56;
    }
    $58 = $59&255;
    $60 = $0;
    $61 = ((($60)) + 4|0);
    HEAP8[$61>>0] = $58;
    STACKTOP = sp;return;
   }
   $62 = ((($49)) + 4|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   switch ($64|0) {
   case 243:  {
    $73 = $0;
    $74 = ((($73)) + 3|0);
    HEAP8[$74>>0] = 14;
    $75 = $0;
    $76 = ((($75)) + 4|0);
    HEAP8[$76>>0] = -110;
    STACKTOP = sp;return;
    break;
   }
   case 241:  {
    $65 = $0;
    $66 = ((($65)) + 3|0);
    HEAP8[$66>>0] = 14;
    $67 = $0;
    $68 = ((($67)) + 4|0);
    HEAP8[$68>>0] = -109;
    STACKTOP = sp;return;
    break;
   }
   case 254: case 253: case 251: case 250: case 249: case 248:  {
    $77 = $0;
    $78 = ((($77)) + 4|0);
    HEAP8[$78>>0] = 0;
    $79 = $0;
    $80 = ((($79)) + 3|0);
    HEAP8[$80>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 255:  {
    $81 = $0;
    $82 = ((($81)) + 4|0);
    HEAP8[$82>>0] = 0;
    $83 = $0;
    $84 = ((($83)) + 3|0);
    HEAP8[$84>>0] = 0;
    $85 = $0;
    HEAP8[$85>>0] = -126;
    STACKTOP = sp;return;
    break;
   }
   case 242:  {
    $69 = $0;
    $70 = ((($69)) + 3|0);
    HEAP8[$70>>0] = 14;
    $71 = $0;
    $72 = ((($71)) + 4|0);
    HEAP8[$72>>0] = -45;
    STACKTOP = sp;return;
    break;
   }
   default: {
    $86 = $0;
    $87 = ((($86)) + 4|0);
    HEAP8[$87>>0] = 0;
    $88 = $0;
    $89 = ((($88)) + 3|0);
    HEAP8[$89>>0] = 0;
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 26:  {
   $139 = $0;
   $140 = ((($139)) + 3|0);
   HEAP8[$140>>0] = -83;
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $94 = $0;
   $95 = ((($94)) + 3|0);
   HEAP8[$95>>0] = 4;
   STACKTOP = sp;return;
   break;
  }
  case 25:  {
   $137 = $0;
   $138 = ((($137)) + 3|0);
   HEAP8[$138>>0] = 9;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $208 = $0;
   $209 = ((($208)) + 4|0);
   HEAP8[$209>>0] = 0;
   $210 = $0;
   $211 = ((($210)) + 3|0);
   HEAP8[$211>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _mmd_alloc_tables($m,$i,$synth) {
 $m = $m|0;
 $i = $i|0;
 $synth = $synth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $me = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $i;
 $3 = $synth;
 $4 = $1;
 $5 = ((($4)) + 6552|0);
 $6 = HEAP32[$5>>2]|0;
 $me = $6;
 $7 = $3;
 $8 = ((($7)) + 14|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (_calloc(1,$10)|0);
 $12 = $2;
 $13 = $me;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($12<<2)|0);
 HEAP32[$16>>2] = $11;
 $17 = $2;
 $18 = $me;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($17<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 do {
  if (!($23)) {
   $24 = $2;
   $25 = $me;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $3;
   $31 = ((($30)) + 22|0);
   $32 = $3;
   $33 = ((($32)) + 14|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   _memcpy(($29|0),($31|0),($35|0))|0;
   $36 = $3;
   $37 = ((($36)) + 16|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = (_calloc(1,$39)|0);
   $41 = $2;
   $42 = $me;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<2)|0);
   HEAP32[$45>>2] = $40;
   $46 = $2;
   $47 = $me;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   $53 = $2;
   $54 = $me;
   if ($52) {
    $65 = ((($54)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($53<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    _free($68);
    break;
   }
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($53<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $3;
   $60 = ((($59)) + 150|0);
   $61 = $3;
   $62 = ((($61)) + 16|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63&65535;
   _memcpy(($58|0),($60|0),($64|0))|0;
   $0 = 0;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 } while(0);
 $0 = -1;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _mmd_load_hybrid_instrument($f,$m,$i,$smp_idx,$synth,$exp_smp,$sample) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $synth = $synth|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $length = 0, $mod = 0, $pos = 0, $sub = 0;
 var $type = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $synth;
 $6 = $exp_smp;
 $7 = $sample;
 $8 = $2;
 $mod = $8;
 $9 = $3;
 $10 = $mod;
 $11 = ((($10)) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*764)|0)|0);
 $xxi = $13;
 $14 = $1;
 $15 = (_hio_tell($14)|0);
 $pos = $15;
 $16 = $1;
 $17 = (_hio_read8($16)|0);
 $18 = $5;
 $19 = ((($18)) + 6|0);
 HEAP8[$19>>0] = $17;
 $20 = $1;
 (_hio_seek($20,3,1)|0);
 $21 = $1;
 $22 = (_hio_read16b($21)|0);
 $23 = $5;
 $24 = ((($23)) + 10|0);
 HEAP16[$24>>1] = $22;
 $25 = $1;
 $26 = (_hio_read16b($25)|0);
 $27 = $5;
 $28 = ((($27)) + 12|0);
 HEAP16[$28>>1] = $26;
 $29 = $1;
 $30 = (_hio_read16b($29)|0);
 $31 = $5;
 $32 = ((($31)) + 14|0);
 HEAP16[$32>>1] = $30;
 $33 = $1;
 $34 = (_hio_read16b($33)|0);
 $35 = $5;
 $36 = ((($35)) + 16|0);
 HEAP16[$36>>1] = $34;
 $37 = $1;
 $38 = (_hio_read8($37)|0);
 $39 = $5;
 $40 = ((($39)) + 18|0);
 HEAP8[$40>>0] = $38;
 $41 = $1;
 $42 = (_hio_read8($41)|0);
 $43 = $5;
 $44 = ((($43)) + 19|0);
 HEAP8[$44>>0] = $42;
 $45 = $1;
 $46 = (_hio_read16b($45)|0);
 $47 = $5;
 $48 = ((($47)) + 20|0);
 HEAP16[$48>>1] = $46;
 $49 = $5;
 $50 = ((($49)) + 22|0);
 $51 = $1;
 (_hio_read($50,1,128,$51)|0);
 $52 = $5;
 $53 = ((($52)) + 150|0);
 $54 = $1;
 (_hio_read($53,1,128,$54)|0);
 $55 = $1;
 $56 = $pos;
 $57 = (($56) - 6)|0;
 $58 = $1;
 $59 = (_hio_read32b($58)|0);
 $60 = (($57) + ($59))|0;
 (_hio_seek($55,$60,0)|0);
 $61 = $1;
 $62 = (_hio_read32b($61)|0);
 $length = $62;
 $63 = $1;
 $64 = (_hio_read16b($63)|0);
 $65 = $64&65535;
 $type = $65;
 $66 = $xxi;
 $67 = (_med_new_instrument_extras($66)|0);
 $68 = ($67|0)!=(0);
 if ($68) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 $69 = $xxi;
 $70 = ((($69)) + 36|0);
 HEAP32[$70>>2] = 1;
 $71 = $mod;
 $72 = $3;
 $73 = (_subinstrument_alloc($71,$72,1)|0);
 $74 = ($73|0)<(0);
 if ($74) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 $75 = $5;
 $76 = ((($75)) + 18|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = $xxi;
 $80 = ((($79)) + 760|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($81)) + 4|0);
 HEAP32[$82>>2] = $78;
 $83 = $5;
 $84 = ((($83)) + 19|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $xxi;
 $88 = ((($87)) + 760|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($89)) + 8|0);
 HEAP32[$90>>2] = $86;
 $91 = $xxi;
 $92 = ((($91)) + 756|0);
 $93 = HEAP32[$92>>2]|0;
 $sub = $93;
 $94 = $sub;
 $95 = ((($94)) + 8|0);
 HEAP32[$95>>2] = 128;
 $96 = $7;
 $97 = ((($96)) + 6|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = $sub;
 HEAP32[$100>>2] = $99;
 $101 = $7;
 $102 = ((($101)) + 7|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103 << 24 >> 24;
 $105 = (($104) + 36)|0;
 $106 = $sub;
 $107 = ((($106)) + 12|0);
 HEAP32[$107>>2] = $105;
 $108 = $4;
 $109 = $sub;
 $110 = ((($109)) + 40|0);
 HEAP32[$110>>2] = $108;
 $111 = $6;
 $112 = ((($111)) + 3|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113 << 24 >> 24;
 $115 = $sub;
 $116 = ((($115)) + 16|0);
 HEAP32[$116>>2] = $114;
 $117 = $4;
 $118 = $mod;
 $119 = ((($118)) + 180|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + (($117*52)|0)|0);
 $xxs = $121;
 $122 = $length;
 $123 = $xxs;
 $124 = ((($123)) + 32|0);
 HEAP32[$124>>2] = $122;
 $125 = $7;
 $126 = HEAP16[$125>>1]|0;
 $127 = $126&65535;
 $128 = $127<<1;
 $129 = $xxs;
 $130 = ((($129)) + 36|0);
 HEAP32[$130>>2] = $128;
 $131 = $xxs;
 $132 = ((($131)) + 36|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = $7;
 $135 = ((($134)) + 2|0);
 $136 = HEAP16[$135>>1]|0;
 $137 = $136&65535;
 $138 = $137<<1;
 $139 = (($133) + ($138))|0;
 $140 = $xxs;
 $141 = ((($140)) + 40|0);
 HEAP32[$141>>2] = $139;
 $142 = $7;
 $143 = ((($142)) + 2|0);
 $144 = HEAP16[$143>>1]|0;
 $145 = $144&65535;
 $146 = ($145|0)>(1);
 $147 = $146 ? 2 : 0;
 $148 = $xxs;
 $149 = ((($148)) + 44|0);
 HEAP32[$149>>2] = $147;
 $150 = $2;
 $151 = $1;
 $152 = $xxs;
 $153 = (_load_sample($150,$151,0,$152,0)|0);
 $154 = ($153|0)<(0);
 if ($154) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 } else {
  $0 = 0;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 return (0)|0;
}
function _mmd_load_synth_instrument($f,$m,$i,$smp_idx,$synth,$exp_smp,$sample) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $synth = $synth|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $mod = 0, $pos = 0, $sub = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $synth;
 $6 = $exp_smp;
 $7 = $sample;
 $8 = $2;
 $mod = $8;
 $9 = $3;
 $10 = $mod;
 $11 = ((($10)) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*764)|0)|0);
 $xxi = $13;
 $14 = $1;
 $15 = (_hio_tell($14)|0);
 $pos = $15;
 $16 = $1;
 $17 = (_hio_read8($16)|0);
 $18 = $5;
 $19 = ((($18)) + 6|0);
 HEAP8[$19>>0] = $17;
 $20 = $1;
 (_hio_seek($20,3,1)|0);
 $21 = $1;
 $22 = (_hio_read16b($21)|0);
 $23 = $5;
 $24 = ((($23)) + 10|0);
 HEAP16[$24>>1] = $22;
 $25 = $1;
 $26 = (_hio_read16b($25)|0);
 $27 = $5;
 $28 = ((($27)) + 12|0);
 HEAP16[$28>>1] = $26;
 $29 = $1;
 $30 = (_hio_read16b($29)|0);
 $31 = $5;
 $32 = ((($31)) + 14|0);
 HEAP16[$32>>1] = $30;
 $33 = $1;
 $34 = (_hio_read16b($33)|0);
 $35 = $5;
 $36 = ((($35)) + 16|0);
 HEAP16[$36>>1] = $34;
 $37 = $1;
 $38 = (_hio_read8($37)|0);
 $39 = $5;
 $40 = ((($39)) + 18|0);
 HEAP8[$40>>0] = $38;
 $41 = $1;
 $42 = (_hio_read8($41)|0);
 $43 = $5;
 $44 = ((($43)) + 19|0);
 HEAP8[$44>>0] = $42;
 $45 = $1;
 $46 = (_hio_read16b($45)|0);
 $47 = $5;
 $48 = ((($47)) + 20|0);
 HEAP16[$48>>1] = $46;
 $49 = $5;
 $50 = ((($49)) + 22|0);
 $51 = $1;
 (_hio_read($50,1,128,$51)|0);
 $52 = $5;
 $53 = ((($52)) + 150|0);
 $54 = $1;
 (_hio_read($53,1,128,$54)|0);
 $j = 0;
 while(1) {
  $55 = $j;
  $56 = ($55|0)<(64);
  if (!($56)) {
   break;
  }
  $57 = $1;
  $58 = (_hio_read32b($57)|0);
  $59 = $j;
  $60 = $5;
  $61 = ((($60)) + 280|0);
  $62 = (($61) + ($59<<2)|0);
  HEAP32[$62>>2] = $58;
  $63 = $j;
  $64 = (($63) + 1)|0;
  $j = $64;
 }
 $65 = $5;
 $66 = ((($65)) + 20|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67&65535;
 $69 = ($68|0)==(65535);
 if ($69) {
  $0 = 1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 $70 = $5;
 $71 = ((($70)) + 20|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72&65535;
 $74 = ($73|0)>(64);
 if ($74) {
  $0 = -1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 $75 = $3;
 $76 = $mod;
 $77 = ((($76)) + 176|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + (($75*764)|0)|0);
 $80 = (_med_new_instrument_extras($79)|0);
 $81 = ($80|0)!=(0);
 if ($81) {
  $0 = -1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 $82 = $5;
 $83 = ((($82)) + 20|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84&65535;
 $86 = $3;
 $87 = $mod;
 $88 = ((($87)) + 176|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + (($86*764)|0)|0);
 $91 = ((($90)) + 36|0);
 HEAP32[$91>>2] = $85;
 $92 = $mod;
 $93 = $3;
 $94 = $5;
 $95 = ((($94)) + 20|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = $96&65535;
 $98 = (_subinstrument_alloc($92,$93,$97)|0);
 $99 = ($98|0)<(0);
 if ($99) {
  $0 = -1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 $100 = $5;
 $101 = ((($100)) + 18|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $xxi;
 $105 = ((($104)) + 760|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($106)) + 4|0);
 HEAP32[$107>>2] = $103;
 $108 = $5;
 $109 = ((($108)) + 19|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = $xxi;
 $113 = ((($112)) + 760|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($114)) + 8|0);
 HEAP32[$115>>2] = $111;
 $j = 0;
 while(1) {
  $116 = $j;
  $117 = $5;
  $118 = ((($117)) + 20|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $121 = ($116|0)<($120|0);
  if (!($121)) {
   label = 17;
   break;
  }
  $122 = $j;
  $123 = $xxi;
  $124 = ((($123)) + 756|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + ($122<<6)|0);
  $sub = $126;
  $127 = $4;
  $128 = $mod;
  $129 = ((($128)) + 180|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + (($127*52)|0)|0);
  $xxs = $131;
  $132 = $sub;
  $133 = ((($132)) + 8|0);
  HEAP32[$133>>2] = 128;
  $134 = $sub;
  HEAP32[$134>>2] = 64;
  $135 = $7;
  $136 = ((($135)) + 7|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $137 << 24 >> 24;
  $139 = (12 + ($138))|0;
  $140 = $sub;
  $141 = ((($140)) + 12|0);
  HEAP32[$141>>2] = $139;
  $142 = $4;
  $143 = $sub;
  $144 = ((($143)) + 40|0);
  HEAP32[$144>>2] = $142;
  $145 = $6;
  $146 = ((($145)) + 3|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147 << 24 >> 24;
  $149 = $sub;
  $150 = ((($149)) + 16|0);
  HEAP32[$150>>2] = $148;
  $151 = $1;
  $152 = $pos;
  $153 = (($152) - 6)|0;
  $154 = $j;
  $155 = $5;
  $156 = ((($155)) + 280|0);
  $157 = (($156) + ($154<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($153) + ($158))|0;
  (_hio_seek($151,$159,0)|0);
  $160 = $1;
  $161 = (_hio_read16b($160)|0);
  $162 = $161&65535;
  $163 = $162<<1;
  $164 = $xxs;
  $165 = ((($164)) + 32|0);
  HEAP32[$165>>2] = $163;
  $166 = $xxs;
  $167 = ((($166)) + 36|0);
  HEAP32[$167>>2] = 0;
  $168 = $4;
  $169 = $mod;
  $170 = ((($169)) + 180|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + (($168*52)|0)|0);
  $173 = ((($172)) + 32|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $xxs;
  $176 = ((($175)) + 40|0);
  HEAP32[$176>>2] = $174;
  $177 = $xxs;
  $178 = ((($177)) + 44|0);
  HEAP32[$178>>2] = 2;
  $179 = $2;
  $180 = $1;
  $181 = $xxs;
  $182 = (_load_sample($179,$180,0,$181,0)|0);
  $183 = ($182|0)<(0);
  if ($183) {
   label = 15;
   break;
  }
  $184 = $4;
  $185 = (($184) + 1)|0;
  $4 = $185;
  $186 = $j;
  $187 = (($186) + 1)|0;
  $j = $187;
 }
 if ((label|0) == 15) {
  $0 = -1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 else if ((label|0) == 17) {
  $0 = 0;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 return (0)|0;
}
function _mmd_load_sampled_instrument($f,$m,$i,$smp_idx,$instr,$expdata,$exp_smp,$sample,$ver) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $instr = $instr|0;
 $expdata = $expdata|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 $ver = $ver|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $j = 0, $k = 0, $mod = 0, $sub = 0, $xpo = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $instr;
 $6 = $expdata;
 $7 = $exp_smp;
 $8 = $sample;
 $9 = $ver;
 $10 = $2;
 $mod = $10;
 $11 = $3;
 $12 = $mod;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($11*764)|0)|0);
 $xxi = $15;
 $16 = $xxi;
 $17 = (_med_new_instrument_extras($16)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $19 = $7;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $xxi;
 $23 = ((($22)) + 760|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 12|0);
 HEAP32[$25>>2] = $21;
 $26 = $7;
 $27 = ((($26)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 4;
 $31 = (4095 - ($30))|0;
 $32 = $xxi;
 $33 = ((($32)) + 40|0);
 HEAP32[$33>>2] = $31;
 $34 = $xxi;
 $35 = ((($34)) + 36|0);
 HEAP32[$35>>2] = 1;
 $36 = $mod;
 $37 = $3;
 $38 = (_subinstrument_alloc($36,$37,1)|0);
 $39 = ($38|0)<(0);
 if ($39) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $40 = $xxi;
 $41 = ((($40)) + 756|0);
 $42 = HEAP32[$41>>2]|0;
 $sub = $42;
 $43 = $8;
 $44 = ((($43)) + 6|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $sub;
 HEAP32[$47>>2] = $46;
 $48 = $sub;
 $49 = ((($48)) + 8|0);
 HEAP32[$49>>2] = 128;
 $50 = $8;
 $51 = ((($50)) + 7|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 << 24 >> 24;
 $54 = (($53) + 36)|0;
 $55 = $sub;
 $56 = ((($55)) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = $9;
 $58 = ($57|0)>=(2);
 if ($58) {
  $59 = $6;
  $60 = ((($59)) + 10|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = ($62|0)>(4);
  if ($63) {
   $64 = $7;
   $65 = ((($64)) + 4|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = ($66<<24>>24)!=(0);
   if ($67) {
    $68 = $7;
    $69 = ((($68)) + 4|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = (($71) - 25)|0;
    $73 = $sub;
    $74 = ((($73)) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + ($72))|0;
    HEAP32[$74>>2] = $76;
   }
  }
 }
 $77 = $4;
 $78 = $sub;
 $79 = ((($78)) + 40|0);
 HEAP32[$79>>2] = $77;
 $80 = $7;
 $81 = ((($80)) + 3|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82 << 24 >> 24;
 $84 = $83 << 4;
 $85 = $sub;
 $86 = ((($85)) + 16|0);
 HEAP32[$86>>2] = $84;
 $87 = $4;
 $88 = $mod;
 $89 = ((($88)) + 180|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + (($87*52)|0)|0);
 $xxs = $91;
 $92 = $5;
 $93 = HEAP32[$92>>2]|0;
 $94 = $xxs;
 $95 = ((($94)) + 32|0);
 HEAP32[$95>>2] = $93;
 $96 = $8;
 $97 = HEAP16[$96>>1]|0;
 $98 = $97&65535;
 $99 = $98<<1;
 $100 = $xxs;
 $101 = ((($100)) + 36|0);
 HEAP32[$101>>2] = $99;
 $102 = $xxs;
 $103 = ((($102)) + 36|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $8;
 $106 = ((($105)) + 2|0);
 $107 = HEAP16[$106>>1]|0;
 $108 = $107&65535;
 $109 = $108<<1;
 $110 = (($104) + ($109))|0;
 $111 = $xxs;
 $112 = ((($111)) + 40|0);
 HEAP32[$112>>2] = $110;
 $113 = $xxs;
 $114 = ((($113)) + 44|0);
 HEAP32[$114>>2] = 0;
 $115 = $8;
 $116 = ((($115)) + 2|0);
 $117 = HEAP16[$116>>1]|0;
 $118 = $117&65535;
 $119 = ($118|0)>(1);
 if ($119) {
  $120 = $xxs;
  $121 = ((($120)) + 44|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 | 2;
  HEAP32[$121>>2] = $123;
 }
 $124 = $5;
 $125 = ((($124)) + 4|0);
 $126 = HEAP16[$125>>1]|0;
 $127 = $126 << 16 >> 16;
 $128 = $127 & 16;
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $xxs;
  $131 = ((($130)) + 44|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 | 1;
  HEAP32[$131>>2] = $133;
  $134 = $xxs;
  $135 = ((($134)) + 32|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 >> 1;
  HEAP32[$135>>2] = $137;
  $138 = $xxs;
  $139 = ((($138)) + 36|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $140 >> 1;
  HEAP32[$139>>2] = $141;
  $142 = $xxs;
  $143 = ((($142)) + 40|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 >> 1;
  HEAP32[$143>>2] = $145;
 }
 $146 = $9;
 $147 = ($146|0)<(3);
 L20: do {
  if ($147) {
   $j = 0;
   while(1) {
    $148 = $j;
    $149 = ($148|0)<(9);
    if (!($149)) {
     break L20;
    }
    $k = 0;
    while(1) {
     $150 = $k;
     $151 = ($150|0)<(12);
     if (!($151)) {
      break;
     }
     $xpo = 0;
     $152 = $j;
     $153 = ($152|0)<(1);
     $154 = $j;
     if ($153) {
      $155 = (1 - ($154))|0;
      $156 = ($155*12)|0;
      $xpo = $156;
     } else {
      $157 = ($154|0)>(3);
      if ($157) {
       $158 = $j;
       $159 = (($158) - 3)|0;
       $160 = Math_imul(-12, $159)|0;
       $xpo = $160;
      }
     }
     $161 = $xpo;
     $162 = $161&255;
     $163 = $j;
     $164 = ($163*12)|0;
     $165 = $k;
     $166 = (($164) + ($165))|0;
     $167 = $xxi;
     $168 = ((($167)) + 512|0);
     $169 = (($168) + ($166<<1)|0);
     $170 = ((($169)) + 1|0);
     HEAP8[$170>>0] = $162;
     $171 = $k;
     $172 = (($171) + 1)|0;
     $k = $172;
    }
    $173 = $j;
    $174 = (($173) + 1)|0;
    $j = $174;
   }
  }
 } while(0);
 $175 = $2;
 $176 = $1;
 $177 = $xxs;
 $178 = (_load_sample($175,$176,64,$177,0)|0);
 $179 = ($178|0)<(0);
 if ($179) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 } else {
  $0 = 0;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 return (0)|0;
}
function _mmd_load_iffoct_instrument($f,$m,$i,$smp_idx,$instr,$num_oct,$exp_smp,$sample) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $instr = $instr|0;
 $num_oct = $num_oct|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $mod = 0, $or$cond = 0, $rep = 0, $replen = 0, $size = 0, $sub = 0, $xxi = 0, $xxs = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $instr;
 $6 = $num_oct;
 $7 = $exp_smp;
 $8 = $sample;
 $9 = $2;
 $mod = $9;
 $10 = $3;
 $11 = $mod;
 $12 = ((($11)) + 176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*764)|0)|0);
 $xxi = $14;
 $15 = $6;
 $16 = ($15|0)<(2);
 $17 = $6;
 $18 = ($17|0)>(7);
 $or$cond = $16 | $18;
 if ($or$cond) {
  $0 = -1;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 $19 = $xxi;
 $20 = (_med_new_instrument_extras($19)|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  $0 = -1;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 $22 = $7;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $xxi;
 $26 = ((($25)) + 760|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 12|0);
 HEAP32[$28>>2] = $24;
 $29 = $7;
 $30 = ((($29)) + 1|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 << 4;
 $34 = (4095 - ($33))|0;
 $35 = $xxi;
 $36 = ((($35)) + 40|0);
 HEAP32[$36>>2] = $34;
 $37 = $6;
 $38 = $xxi;
 $39 = ((($38)) + 36|0);
 HEAP32[$39>>2] = $37;
 $40 = $mod;
 $41 = $3;
 $42 = $6;
 $43 = (_subinstrument_alloc($40,$41,$42)|0);
 $44 = ($43|0)<(0);
 if ($44) {
  $0 = -1;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = $6;
 $48 = 1 << $47;
 $49 = (($48) - 1)|0;
 $50 = (($46>>>0) / ($49>>>0))&-1;
 $size = $50;
 $51 = $8;
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 $54 = $53<<1;
 $rep = $54;
 $55 = $8;
 $56 = ((($55)) + 2|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = $58<<1;
 $replen = $59;
 $j = 0;
 while(1) {
  $60 = $j;
  $61 = $6;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $j;
  $64 = $xxi;
  $65 = ((($64)) + 756|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63<<6)|0);
  $sub = $67;
  $68 = $8;
  $69 = ((($68)) + 6|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $sub;
  HEAP32[$72>>2] = $71;
  $73 = $sub;
  $74 = ((($73)) + 8|0);
  HEAP32[$74>>2] = 128;
  $75 = $8;
  $76 = ((($75)) + 7|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77 << 24 >> 24;
  $79 = (24 + ($78))|0;
  $80 = $sub;
  $81 = ((($80)) + 12|0);
  HEAP32[$81>>2] = $79;
  $82 = $4;
  $83 = $sub;
  $84 = ((($83)) + 40|0);
  HEAP32[$84>>2] = $82;
  $85 = $7;
  $86 = ((($85)) + 3|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87 << 24 >> 24;
  $89 = $88 << 4;
  $90 = $sub;
  $91 = ((($90)) + 16|0);
  HEAP32[$91>>2] = $89;
  $92 = $4;
  $93 = $mod;
  $94 = ((($93)) + 180|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + (($92*52)|0)|0);
  $xxs = $96;
  $97 = $size;
  $98 = $xxs;
  $99 = ((($98)) + 32|0);
  HEAP32[$99>>2] = $97;
  $100 = $rep;
  $101 = $xxs;
  $102 = ((($101)) + 36|0);
  HEAP32[$102>>2] = $100;
  $103 = $rep;
  $104 = $replen;
  $105 = (($103) + ($104))|0;
  $106 = $xxs;
  $107 = ((($106)) + 40|0);
  HEAP32[$107>>2] = $105;
  $108 = $xxs;
  $109 = ((($108)) + 44|0);
  HEAP32[$109>>2] = 0;
  $110 = $8;
  $111 = ((($110)) + 2|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = ($113|0)>(1);
  if ($114) {
   $115 = $xxs;
   $116 = ((($115)) + 44|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $117 | 2;
   HEAP32[$116>>2] = $118;
  }
  $119 = $2;
  $120 = $1;
  $121 = $xxs;
  $122 = (_load_sample($119,$120,64,$121,0)|0);
  $123 = ($122|0)<(0);
  if ($123) {
   label = 12;
   break;
  }
  $124 = $4;
  $125 = (($124) + 1)|0;
  $4 = $125;
  $126 = $size;
  $127 = $126 << 1;
  $size = $127;
  $128 = $rep;
  $129 = $128 << 1;
  $rep = $129;
  $130 = $replen;
  $131 = $130 << 1;
  $replen = $131;
  $132 = $j;
  $133 = (($132) + 1)|0;
  $j = $133;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 $j = 0;
 while(1) {
  $134 = $j;
  $135 = ($134|0)<(9);
  if (!($135)) {
   break;
  }
  $k = 0;
  while(1) {
   $136 = $k;
   $137 = ($136|0)<(12);
   $138 = $j;
   if (!($137)) {
    break;
   }
   $139 = $6;
   $140 = (($139) - 2)|0;
   $141 = (6024 + (($140*9)|0)|0);
   $142 = (($141) + ($138)|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $j;
   $145 = ($144*12)|0;
   $146 = $k;
   $147 = (($145) + ($146))|0;
   $148 = $xxi;
   $149 = ((($148)) + 512|0);
   $150 = (($149) + ($147<<1)|0);
   HEAP8[$150>>0] = $143;
   $151 = $j;
   $152 = $6;
   $153 = (($152) - 2)|0;
   $154 = (6080 + (($153*9)|0)|0);
   $155 = (($154) + ($151)|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $j;
   $158 = ($157*12)|0;
   $159 = $k;
   $160 = (($158) + ($159))|0;
   $161 = $xxi;
   $162 = ((($161)) + 512|0);
   $163 = (($162) + ($160<<1)|0);
   $164 = ((($163)) + 1|0);
   HEAP8[$164>>0] = $156;
   $165 = $k;
   $166 = (($165) + 1)|0;
   $k = $166;
  }
  $167 = (($138) + 1)|0;
  $j = $167;
 }
 $0 = 0;
 $168 = $0;
 STACKTOP = sp;return ($168|0);
}
function _mmd_set_bpm($m,$med_8ch,$deftempo,$bpm_on,$bpmlen) {
 $m = $m|0;
 $med_8ch = $med_8ch|0;
 $deftempo = $deftempo|0;
 $bpm_on = $bpm_on|0;
 $bpmlen = $bpmlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $med_8ch;
 $2 = $deftempo;
 $3 = $bpm_on;
 $4 = $bpmlen;
 $5 = $0;
 $mod = $5;
 $6 = $1;
 $7 = ($6|0)!=(0);
 $8 = $2;
 if ($7) {
  $9 = (_get_8ch_tempo($8)|0);
  $10 = $mod;
  $11 = ((($10)) + 152|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 }
 $12 = $mod;
 $13 = ((($12)) + 152|0);
 HEAP32[$13>>2] = $8;
 $14 = $3;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 $17 = (+($16|0));
 $18 = 40.0 / $17;
 $19 = $0;
 $20 = ((($19)) + 1256|0);
 HEAPF64[$20>>3] = $18;
 STACKTOP = sp;return;
}
function _mmd_info_text($f,$m,$offset) {
 $f = $f|0;
 $m = $m|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $m;
 $2 = $offset;
 $3 = $0;
 (_hio_read32b($3)|0);
 $4 = $0;
 (_hio_read16b($4)|0);
 $5 = $0;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $type = $7;
 $8 = $type;
 $9 = ($8|0)==(1);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = (_hio_read32b($10)|0);
 $len = $11;
 $12 = $len;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $len;
 $15 = (($14) + 1)|0;
 $16 = (_malloc($15)|0);
 $17 = $1;
 $18 = ((($17)) + 1220|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = ((($19)) + 1220|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = ((($23)) + 1220|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $len;
 $27 = $0;
 (_hio_read($25,1,$26,$27)|0);
 $28 = $len;
 $29 = $1;
 $30 = ((($29)) + 1220|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($28)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function _get_8ch_tempo($tempo) {
 $tempo = $tempo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tempo;
 $2 = $1;
 $3 = ($2|0)>(0);
 $4 = $1;
 if ($3) {
  $5 = ($4|0)>(10);
  $6 = $1;
  $7 = $5 ? 10 : $6;
  $1 = $7;
  $8 = $1;
  $9 = (($8) - 1)|0;
  $10 = (6136 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = $4;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _mmd1_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 24|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($id,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 if ($6) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $7 = (_memcmp($id,6304,4)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (_memcmp($id,6312,4)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $0 = -1;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $11 = $1;
 (_hio_seek($11,28,1)|0);
 $12 = $1;
 $13 = (_hio_read32b($12)|0);
 $offset = $13;
 $14 = $offset;
 $15 = ($14|0)!=(0);
 $16 = $1;
 if ($15) {
  $17 = $3;
  $18 = $offset;
  $19 = (($17) + ($18))|0;
  $20 = (($19) + 44)|0;
  (_hio_seek($16,$20,0)|0);
  $21 = $1;
  $22 = (_hio_read32b($21)|0);
  $offset = $22;
  $23 = $1;
  $24 = (_hio_read32b($23)|0);
  $len = $24;
  $25 = $1;
  $26 = $3;
  $27 = $offset;
  $28 = (($26) + ($27))|0;
  (_hio_seek($25,$28,0)|0);
  $29 = $1;
  $30 = $2;
  $31 = $len;
  _read_title($29,$30,$31);
 } else {
  $32 = $2;
  _read_title($16,$32,0);
 }
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _mmd1_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $annotxt_offset = 0, $block = 0, $block_offset = 0, $block_offset1 = 0, $blockarr_offset = 0;
 var $bpm_on = 0, $bpmlen = 0, $e = 0, $event = 0, $exp_smp = 0, $expdata = 0, $expdata_offset = 0, $expsmp_offset = 0, $header = 0, $hexvol = 0, $i = 0, $iinfo_offset = 0, $instr = 0, $j = 0, $k = 0, $med_8ch = 0, $mod = 0, $oct = 0, $or$cond = 0, $pos = 0;
 var $ret = 0, $ret3 = 0, $ret4 = 0, $ret5 = 0, $smp_idx = 0, $smpl_offset = 0, $smpl_offset2 = 0, $smplarr_offset = 0, $song = 0, $song_offset = 0, $songname_offset = 0, $synth = 0, $type = 0, $vararg_buffer = 0, $ver = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 768|0;
 $song = sp + 856|0;
 $block = sp + 760|0;
 $instr = sp + 752|0;
 $synth = sp + 216|0;
 $exp_smp = sp + 192|0;
 $expdata = sp + 108|0;
 $e = sp + 1644|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ver = 0;
 $smp_idx = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($header,4,1,$7)|0);
 $8 = ((($header)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($10) - 49)|0;
 $12 = (($11) + 1)|0;
 $ver = $12;
 $13 = $2;
 $14 = (_hio_read32b($13)|0);
 $15 = ((($header)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = (_hio_read32b($16)|0);
 $song_offset = $17;
 $18 = $2;
 (_hio_read16b($18)|0);
 $19 = $2;
 (_hio_read16b($19)|0);
 $20 = $2;
 $21 = (_hio_read32b($20)|0);
 $blockarr_offset = $21;
 $22 = $2;
 (_hio_read32b($22)|0);
 $23 = $2;
 $24 = (_hio_read32b($23)|0);
 $smplarr_offset = $24;
 $25 = $2;
 (_hio_read32b($25)|0);
 $26 = $2;
 $27 = (_hio_read32b($26)|0);
 $expdata_offset = $27;
 $28 = $2;
 (_hio_read32b($28)|0);
 $29 = $2;
 $30 = (_hio_read16b($29)|0);
 $31 = ((($header)) + 40|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read16b($32)|0);
 $34 = ((($header)) + 42|0);
 HEAP16[$34>>1] = $33;
 $35 = $2;
 $36 = (_hio_read16b($35)|0);
 $37 = ((($header)) + 44|0);
 HEAP16[$37>>1] = $36;
 $38 = $2;
 $39 = (_hio_read16b($38)|0);
 $40 = ((($header)) + 46|0);
 HEAP16[$40>>1] = $39;
 $41 = $2;
 $42 = (_hio_read16b($41)|0);
 $43 = ((($header)) + 48|0);
 HEAP16[$43>>1] = $42;
 $44 = $2;
 $45 = (_hio_read8($44)|0);
 $46 = ((($header)) + 50|0);
 HEAP8[$46>>0] = $45;
 $47 = $2;
 $48 = (_hio_read8($47)|0);
 $49 = ((($header)) + 51|0);
 HEAP8[$49>>0] = $48;
 $50 = $2;
 $51 = $3;
 $52 = $song_offset;
 $53 = (($51) + ($52))|0;
 $54 = (_hio_seek($50,$53,0)|0);
 $55 = ($54|0)!=(0);
 if ($55) {
  $0 = -1;
  $894 = $0;
  STACKTOP = sp;return ($894|0);
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(63);
  $58 = $2;
  $59 = (_hio_read16b($58)|0);
  if (!($57)) {
   break;
  }
  $60 = $i;
  $61 = (($song) + ($60<<3)|0);
  HEAP16[$61>>1] = $59;
  $62 = $2;
  $63 = (_hio_read16b($62)|0);
  $64 = $i;
  $65 = (($song) + ($64<<3)|0);
  $66 = ((($65)) + 2|0);
  HEAP16[$66>>1] = $63;
  $67 = $2;
  $68 = (_hio_read8($67)|0);
  $69 = $i;
  $70 = (($song) + ($69<<3)|0);
  $71 = ((($70)) + 4|0);
  HEAP8[$71>>0] = $68;
  $72 = $2;
  $73 = (_hio_read8($72)|0);
  $74 = $i;
  $75 = (($song) + ($74<<3)|0);
  $76 = ((($75)) + 5|0);
  HEAP8[$76>>0] = $73;
  $77 = $2;
  $78 = (_hio_read8($77)|0);
  $79 = $i;
  $80 = (($song) + ($79<<3)|0);
  $81 = ((($80)) + 6|0);
  HEAP8[$81>>0] = $78;
  $82 = $2;
  $83 = (_hio_read8s($82)|0);
  $84 = $i;
  $85 = (($song) + ($84<<3)|0);
  $86 = ((($85)) + 7|0);
  HEAP8[$86>>0] = $83;
  $87 = $i;
  $88 = (($87) + 1)|0;
  $i = $88;
 }
 $89 = ((($song)) + 504|0);
 HEAP16[$89>>1] = $59;
 $90 = $2;
 $91 = (_hio_read16b($90)|0);
 $92 = ((($song)) + 506|0);
 HEAP16[$92>>1] = $91;
 $93 = ((($song)) + 506|0);
 $94 = HEAP16[$93>>1]|0;
 $95 = $94&65535;
 $96 = ($95|0)>(256);
 if ($96) {
  $0 = -1;
  $894 = $0;
  STACKTOP = sp;return ($894|0);
 }
 $i = 0;
 while(1) {
  $97 = $i;
  $98 = ($97|0)<(256);
  $99 = $2;
  if (!($98)) {
   break;
  }
  $100 = (_hio_read8($99)|0);
  $101 = $i;
  $102 = ((($song)) + 508|0);
  $103 = (($102) + ($101)|0);
  HEAP8[$103>>0] = $100;
  $104 = $i;
  $105 = (($104) + 1)|0;
  $i = $105;
 }
 $106 = (_hio_read16b($99)|0);
 $107 = ((($song)) + 764|0);
 HEAP16[$107>>1] = $106;
 $108 = $2;
 $109 = (_hio_read8($108)|0);
 $110 = ((($song)) + 766|0);
 HEAP8[$110>>0] = $109;
 $111 = $2;
 $112 = (_hio_read8($111)|0);
 $113 = ((($song)) + 767|0);
 HEAP8[$113>>0] = $112;
 $114 = $2;
 $115 = (_hio_read8($114)|0);
 $116 = ((($song)) + 768|0);
 HEAP8[$116>>0] = $115;
 $117 = $2;
 $118 = (_hio_read8($117)|0);
 $119 = ((($song)) + 769|0);
 HEAP8[$119>>0] = $118;
 $i = 0;
 while(1) {
  $120 = $i;
  $121 = ($120|0)<(16);
  $122 = $2;
  $123 = (_hio_read8($122)|0);
  if (!($121)) {
   break;
  }
  $124 = $i;
  $125 = ((($song)) + 770|0);
  $126 = (($125) + ($124)|0);
  HEAP8[$126>>0] = $123;
  $127 = $i;
  $128 = (($127) + 1)|0;
  $i = $128;
 }
 $129 = ((($song)) + 786|0);
 HEAP8[$129>>0] = $123;
 $130 = $2;
 $131 = (_hio_read8($130)|0);
 $132 = ((($song)) + 787|0);
 HEAP8[$132>>0] = $131;
 $133 = $1;
 $134 = ((($133)) + 1264|0);
 HEAP32[$134>>2] = 8363;
 $135 = ((($song)) + 767|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&255;
 $138 = $137 & 32;
 $139 = ($138|0)!=(0);
 $140 = $139 ? 0 : 192;
 $141 = $1;
 $142 = ((($141)) + 1280|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $143 | $140;
 HEAP32[$142>>2] = $144;
 $145 = ((($song)) + 767|0);
 $146 = HEAP8[$145>>0]|0;
 $147 = $146&255;
 $148 = $147 & 16;
 $hexvol = $148;
 $149 = ((($song)) + 767|0);
 $150 = HEAP8[$149>>0]|0;
 $151 = $150&255;
 $152 = $151 & 64;
 $med_8ch = $152;
 $153 = ((($song)) + 768|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = $154&255;
 $156 = $155 & 32;
 $bpm_on = $156;
 $157 = ((($song)) + 768|0);
 $158 = HEAP8[$157>>0]|0;
 $159 = $158&255;
 $160 = $159 & 31;
 $161 = (1 + ($160))|0;
 $bpmlen = $161;
 $162 = $1;
 $163 = ((($162)) + 1256|0);
 HEAPF64[$163>>3] = 2.6400000000000001;
 $164 = $1;
 $165 = $med_8ch;
 $166 = ((($song)) + 764|0);
 $167 = HEAP16[$166>>1]|0;
 $168 = $167&65535;
 $169 = $bpm_on;
 $170 = $bpmlen;
 _mmd_set_bpm($164,$165,$168,$169,$170);
 $171 = ((($song)) + 769|0);
 $172 = HEAP8[$171>>0]|0;
 $173 = $172&255;
 $174 = $mod;
 $175 = ((($174)) + 148|0);
 HEAP32[$175>>2] = $173;
 $176 = ((($song)) + 504|0);
 $177 = HEAP16[$176>>1]|0;
 $178 = $177&65535;
 $179 = $mod;
 $180 = ((($179)) + 128|0);
 HEAP32[$180>>2] = $178;
 $181 = ((($song)) + 787|0);
 $182 = HEAP8[$181>>0]|0;
 $183 = $182&255;
 $184 = $mod;
 $185 = ((($184)) + 140|0);
 HEAP32[$185>>2] = $183;
 $186 = ((($song)) + 506|0);
 $187 = HEAP16[$186>>1]|0;
 $188 = $187&65535;
 $189 = $mod;
 $190 = ((($189)) + 156|0);
 HEAP32[$190>>2] = $188;
 $191 = $mod;
 $192 = ((($191)) + 160|0);
 HEAP32[$192>>2] = 0;
 $193 = $mod;
 $194 = ((($193)) + 136|0);
 HEAP32[$194>>2] = 0;
 $195 = $mod;
 $196 = ((($195)) + 952|0);
 $197 = ((($song)) + 508|0);
 $198 = $mod;
 $199 = ((($198)) + 156|0);
 $200 = HEAP32[$199>>2]|0;
 _memcpy(($196|0),($197|0),($200|0))|0;
 $201 = $mod;
 HEAP8[$201>>0] = 0;
 $202 = $mod;
 $203 = ((($202)) + 144|0);
 HEAP32[$203>>2] = 0;
 $i = 0;
 L21: while(1) {
  $204 = $i;
  $205 = $mod;
  $206 = ((($205)) + 140|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($204|0)<($207|0);
  if (!($208)) {
   label = 28;
   break;
  }
  $209 = $2;
  $210 = $3;
  $211 = $smplarr_offset;
  $212 = (($210) + ($211))|0;
  $213 = $i;
  $214 = $213<<2;
  $215 = (($212) + ($214))|0;
  $216 = (_hio_seek($209,$215,0)|0);
  $217 = ($216|0)!=(0);
  if ($217) {
   label = 17;
   break;
  }
  $218 = $2;
  $219 = (_hio_read32b($218)|0);
  $smpl_offset = $219;
  $220 = $smpl_offset;
  $221 = ($220|0)==(0);
  do {
   if (!($221)) {
    $222 = $2;
    $223 = $3;
    $224 = $smpl_offset;
    $225 = (($223) + ($224))|0;
    $226 = (_hio_seek($222,$225,0)|0);
    $227 = ($226|0)!=(0);
    if ($227) {
     label = 20;
     break L21;
    }
    $228 = $2;
    (_hio_read32b($228)|0);
    $229 = $2;
    $230 = (_hio_read16b($229)|0);
    $type = $230;
    $231 = $type;
    $232 = $231 << 16 >> 16;
    $233 = ($232|0)==(-1);
    if ($233) {
     $234 = $2;
     (_hio_seek($234,14,1)|0);
     $235 = $2;
     $236 = (_hio_read16b($235)|0);
     $237 = $236&65535;
     $238 = $mod;
     $239 = ((($238)) + 144|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = (($240) + ($237))|0;
     HEAP32[$239>>2] = $241;
     break;
    }
    $242 = $type;
    $243 = $242 << 16 >> 16;
    $244 = ($243|0)>=(1);
    if ($244) {
     $245 = $type;
     $246 = $245 << 16 >> 16;
     $247 = ($246|0)<=(6);
     if ($247) {
      $248 = $type;
      $249 = $248 << 16 >> 16;
      $250 = (($249) - 1)|0;
      $251 = (6216 + ($250<<2)|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = $mod;
      $254 = ((($253)) + 144|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = (($255) + ($252))|0;
      HEAP32[$254>>2] = $256;
      break;
     }
    }
    $257 = $mod;
    $258 = ((($257)) + 144|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = (($259) + 1)|0;
    HEAP32[$258>>2] = $260;
   }
  } while(0);
  $261 = $i;
  $262 = (($261) + 1)|0;
  $i = $262;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $894 = $0;
  STACKTOP = sp;return ($894|0);
 }
 else if ((label|0) == 20) {
  $0 = -1;
  $894 = $0;
  STACKTOP = sp;return ($894|0);
 }
 else if ((label|0) == 28) {
  $263 = ((($expdata)) + 8|0);
  HEAP16[$263>>1] = 0;
  $264 = ((($expdata)) + 10|0);
  HEAP16[$264>>1] = 0;
  $265 = ((($expdata)) + 24|0);
  HEAP16[$265>>1] = 0;
  $266 = ((($expdata)) + 26|0);
  HEAP16[$266>>1] = 0;
  $expsmp_offset = 0;
  $iinfo_offset = 0;
  $267 = $expdata_offset;
  $268 = ($267|0)!=(0);
  if ($268) {
   $269 = $2;
   $270 = $3;
   $271 = $expdata_offset;
   $272 = (($270) + ($271))|0;
   $273 = (_hio_seek($269,$272,0)|0);
   $274 = ($273|0)!=(0);
   if ($274) {
    $0 = -1;
    $894 = $0;
    STACKTOP = sp;return ($894|0);
   }
   $275 = $2;
   (_hio_read32b($275)|0);
   $276 = $2;
   $277 = (_hio_read32b($276)|0);
   $expsmp_offset = $277;
   $278 = $2;
   $279 = (_hio_read16b($278)|0);
   $280 = ((($expdata)) + 8|0);
   HEAP16[$280>>1] = $279;
   $281 = $2;
   $282 = (_hio_read16b($281)|0);
   $283 = ((($expdata)) + 10|0);
   HEAP16[$283>>1] = $282;
   $284 = $2;
   $285 = (_hio_read32b($284)|0);
   $annotxt_offset = $285;
   $286 = $2;
   $287 = (_hio_read32b($286)|0);
   $288 = ((($expdata)) + 16|0);
   HEAP32[$288>>2] = $287;
   $289 = $2;
   $290 = (_hio_read32b($289)|0);
   $iinfo_offset = $290;
   $291 = $2;
   $292 = (_hio_read16b($291)|0);
   $293 = ((($expdata)) + 24|0);
   HEAP16[$293>>1] = $292;
   $294 = $2;
   $295 = (_hio_read16b($294)|0);
   $296 = ((($expdata)) + 26|0);
   HEAP16[$296>>1] = $295;
   $297 = $2;
   (_hio_read32b($297)|0);
   $298 = $2;
   (_hio_read32b($298)|0);
   $299 = $2;
   (_hio_read32b($299)|0);
   $300 = $2;
   (_hio_read32b($300)|0);
   $301 = $2;
   $302 = (_hio_read32b($301)|0);
   $songname_offset = $302;
   $303 = $2;
   $304 = (_hio_read32b($303)|0);
   $305 = ((($expdata)) + 48|0);
   HEAP32[$305>>2] = $304;
   $306 = $2;
   $307 = $3;
   $308 = $songname_offset;
   $309 = (($307) + ($308))|0;
   (_hio_seek($306,$309,0)|0);
   $i = 0;
   while(1) {
    $310 = $i;
    $311 = ((($expdata)) + 48|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = ($310>>>0)>=($312>>>0);
    $314 = $i;
    $315 = ($314|0)>=(64);
    $or$cond = $313 | $315;
    if ($or$cond) {
     break;
    }
    $316 = $2;
    $317 = (_hio_read8($316)|0);
    $318 = $i;
    $319 = $mod;
    $320 = (($319) + ($318)|0);
    HEAP8[$320>>0] = $317;
    $321 = $i;
    $322 = (($321) + 1)|0;
    $i = $322;
   }
   $323 = $annotxt_offset;
   $324 = ($323|0)!=(0);
   if ($324) {
    $325 = ((($expdata)) + 16|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = ($326|0)!=(0);
    if ($327) {
     $328 = ((($expdata)) + 16|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = (($329) + 1)|0;
     $331 = (_malloc($330)|0);
     $332 = $1;
     $333 = ((($332)) + 1220|0);
     HEAP32[$333>>2] = $331;
     $334 = $1;
     $335 = ((($334)) + 1220|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = ($336|0)!=(0|0);
     if ($337) {
      $338 = $2;
      $339 = $3;
      $340 = $annotxt_offset;
      $341 = (($339) + ($340))|0;
      (_hio_seek($338,$341,0)|0);
      $342 = $1;
      $343 = ((($342)) + 1220|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = ((($expdata)) + 16|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = $2;
      (_hio_read($344,1,$346,$347)|0);
      $348 = ((($expdata)) + 16|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = $1;
      $351 = ((($350)) + 1220|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = (($352) + ($349)|0);
      HEAP8[$353>>0] = 0;
     }
    }
   }
  }
  $i = 0;
  while(1) {
   $354 = $i;
   $355 = $mod;
   $356 = ((($355)) + 128|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = ($354|0)<($357|0);
   if (!($358)) {
    label = 51;
    break;
   }
   $359 = $2;
   $360 = $3;
   $361 = $blockarr_offset;
   $362 = (($360) + ($361))|0;
   $363 = $i;
   $364 = $363<<2;
   $365 = (($362) + ($364))|0;
   $366 = (_hio_seek($359,$365,0)|0);
   $367 = ($366|0)!=(0);
   if ($367) {
    label = 41;
    break;
   }
   $368 = $2;
   $369 = (_hio_read32b($368)|0);
   $block_offset = $369;
   $370 = $block_offset;
   $371 = ($370|0)==(0);
   if (!($371)) {
    $372 = $2;
    $373 = $3;
    $374 = $block_offset;
    $375 = (($373) + ($374))|0;
    $376 = (_hio_seek($372,$375,0)|0);
    $377 = ($376|0)!=(0);
    if ($377) {
     label = 44;
     break;
    }
    $378 = $ver;
    $379 = ($378|0)>(0);
    $380 = $2;
    if ($379) {
     $381 = (_hio_read16b($380)|0);
     HEAP16[$block>>1] = $381;
     $382 = $2;
     $383 = (_hio_read16b($382)|0);
     $384 = ((($block)) + 2|0);
     HEAP16[$384>>1] = $383;
    } else {
     $385 = (_hio_read8($380)|0);
     $386 = $385&255;
     HEAP16[$block>>1] = $386;
     $387 = $2;
     $388 = (_hio_read8($387)|0);
     $389 = $388&255;
     $390 = ((($block)) + 2|0);
     HEAP16[$390>>1] = $389;
    }
    $391 = HEAP16[$block>>1]|0;
    $392 = $391&65535;
    $393 = $mod;
    $394 = ((($393)) + 136|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ($392|0)>($395|0);
    if ($396) {
     $397 = HEAP16[$block>>1]|0;
     $398 = $397&65535;
     $399 = $mod;
     $400 = ((($399)) + 136|0);
     HEAP32[$400>>2] = $398;
    }
   }
   $401 = $i;
   $402 = (($401) + 1)|0;
   $i = $402;
  }
  if ((label|0) == 41) {
   $0 = -1;
   $894 = $0;
   STACKTOP = sp;return ($894|0);
  }
  else if ((label|0) == 44) {
   $0 = -1;
   $894 = $0;
   STACKTOP = sp;return ($894|0);
  }
  else if ((label|0) == 51) {
   $403 = $mod;
   $404 = ((($403)) + 128|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = $mod;
   $407 = ((($406)) + 136|0);
   $408 = HEAP32[$407>>2]|0;
   $409 = Math_imul($405, $408)|0;
   $410 = $mod;
   $411 = ((($410)) + 132|0);
   HEAP32[$411>>2] = $409;
   $412 = $1;
   $413 = $ver;
   $414 = ($413|0)==(0);
   if ($414) {
    $415 = $mod;
    $416 = ((($415)) + 136|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = ($417|0)>(4);
    $419 = $418 ? 6240 : 6264;
    $420 = $419;
   } else {
    $420 = 6280;
   }
   _set_type($412,$420,$vararg_buffer);
   $421 = $mod;
   $422 = (_pattern_init($421)|0);
   $423 = ($422|0)<(0);
   if ($423) {
    $0 = -1;
    $894 = $0;
    STACKTOP = sp;return ($894|0);
   }
   $i = 0;
   L80: while(1) {
    $424 = $i;
    $425 = $mod;
    $426 = ((($425)) + 128|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = ($424|0)<($427|0);
    if (!($428)) {
     label = 93;
     break;
    }
    $429 = $2;
    $430 = $3;
    $431 = $blockarr_offset;
    $432 = (($430) + ($431))|0;
    $433 = $i;
    $434 = $433<<2;
    $435 = (($432) + ($434))|0;
    $436 = (_hio_seek($429,$435,0)|0);
    $437 = ($436|0)!=(0);
    if ($437) {
     label = 58;
     break;
    }
    $438 = $2;
    $439 = (_hio_read32b($438)|0);
    $block_offset1 = $439;
    $440 = $block_offset1;
    $441 = ($440|0)==(0);
    L84: do {
     if (!($441)) {
      $442 = $2;
      $443 = $3;
      $444 = $block_offset1;
      $445 = (($443) + ($444))|0;
      $446 = (_hio_seek($442,$445,0)|0);
      $447 = ($446|0)!=(0);
      if ($447) {
       label = 61;
       break L80;
      }
      $448 = $ver;
      $449 = ($448|0)>(0);
      $450 = $2;
      if ($449) {
       $451 = (_hio_read16b($450)|0);
       HEAP16[$block>>1] = $451;
       $452 = $2;
       $453 = (_hio_read16b($452)|0);
       $454 = ((($block)) + 2|0);
       HEAP16[$454>>1] = $453;
       $455 = $2;
       (_hio_read32b($455)|0);
      } else {
       $456 = (_hio_read8($450)|0);
       $457 = $456&255;
       HEAP16[$block>>1] = $457;
       $458 = $2;
       $459 = (_hio_read8($458)|0);
       $460 = $459&255;
       $461 = ((($block)) + 2|0);
       HEAP16[$461>>1] = $460;
      }
      $462 = $mod;
      $463 = $i;
      $464 = ((($block)) + 2|0);
      $465 = HEAP16[$464>>1]|0;
      $466 = $465&65535;
      $467 = (($466) + 1)|0;
      $468 = (_pattern_tracks_alloc($462,$463,$467)|0);
      $469 = ($468|0)<(0);
      if ($469) {
       label = 66;
       break L80;
      }
      $470 = $ver;
      $471 = ($470|0)>(0);
      $j = 0;
      if ($471) {
       while(1) {
        $472 = $j;
        $473 = $i;
        $474 = $mod;
        $475 = ((($474)) + 168|0);
        $476 = HEAP32[$475>>2]|0;
        $477 = (($476) + ($473<<2)|0);
        $478 = HEAP32[$477>>2]|0;
        $479 = HEAP32[$478>>2]|0;
        $480 = ($472|0)<($479|0);
        if (!($480)) {
         break L84;
        }
        $k = 0;
        while(1) {
         $481 = $k;
         $482 = HEAP16[$block>>1]|0;
         $483 = $482&65535;
         $484 = ($481|0)<($483|0);
         if (!($484)) {
          break;
         }
         $485 = $2;
         $486 = (_hio_read8($485)|0);
         HEAP8[$e>>0] = $486;
         $487 = $2;
         $488 = (_hio_read8($487)|0);
         $489 = ((($e)) + 1|0);
         HEAP8[$489>>0] = $488;
         $490 = $2;
         $491 = (_hio_read8($490)|0);
         $492 = ((($e)) + 2|0);
         HEAP8[$492>>0] = $491;
         $493 = $2;
         $494 = (_hio_read8($493)|0);
         $495 = ((($e)) + 3|0);
         HEAP8[$495>>0] = $494;
         $496 = $j;
         $497 = $k;
         $498 = $i;
         $499 = $1;
         $500 = ((($499)) + 168|0);
         $501 = HEAP32[$500>>2]|0;
         $502 = (($501) + ($498<<2)|0);
         $503 = HEAP32[$502>>2]|0;
         $504 = ((($503)) + 4|0);
         $505 = (($504) + ($497<<2)|0);
         $506 = HEAP32[$505>>2]|0;
         $507 = $1;
         $508 = ((($507)) + 172|0);
         $509 = HEAP32[$508>>2]|0;
         $510 = (($509) + ($506<<2)|0);
         $511 = HEAP32[$510>>2]|0;
         $512 = ((($511)) + 4|0);
         $513 = (($512) + ($496<<3)|0);
         $event = $513;
         $514 = HEAP8[$e>>0]|0;
         $515 = $514&255;
         $516 = $515 & 127;
         $517 = $516&255;
         $518 = $event;
         HEAP8[$518>>0] = $517;
         $519 = $event;
         $520 = HEAP8[$519>>0]|0;
         $521 = ($520<<24>>24)!=(0);
         if ($521) {
          $522 = ((($song)) + 766|0);
          $523 = HEAP8[$522>>0]|0;
          $524 = $523 << 24 >> 24;
          $525 = (12 + ($524))|0;
          $526 = $event;
          $527 = HEAP8[$526>>0]|0;
          $528 = $527&255;
          $529 = (($528) + ($525))|0;
          $530 = $529&255;
          HEAP8[$526>>0] = $530;
         }
         $531 = $event;
         $532 = HEAP8[$531>>0]|0;
         $533 = $532&255;
         $534 = ($533|0)>=(121);
         if ($534) {
          $535 = $event;
          HEAP8[$535>>0] = 0;
         }
         $536 = ((($e)) + 1|0);
         $537 = HEAP8[$536>>0]|0;
         $538 = $537&255;
         $539 = $538 & 63;
         $540 = $539&255;
         $541 = $event;
         $542 = ((($541)) + 1|0);
         HEAP8[$542>>0] = $540;
         $543 = $event;
         $544 = ((($543)) + 1|0);
         $545 = HEAP8[$544>>0]|0;
         $546 = $545&255;
         $547 = ($546|0)!=(0);
         do {
          if ($547) {
           $548 = $event;
           $549 = HEAP8[$548>>0]|0;
           $550 = ($549<<24>>24)!=(0);
           if ($550) {
            break;
           }
           $551 = $event;
           $552 = ((($551)) + 5|0);
           HEAP8[$552>>0] = -79;
          }
         } while(0);
         $553 = ((($e)) + 2|0);
         $554 = HEAP8[$553>>0]|0;
         $555 = $event;
         $556 = ((($555)) + 3|0);
         HEAP8[$556>>0] = $554;
         $557 = ((($e)) + 3|0);
         $558 = HEAP8[$557>>0]|0;
         $559 = $event;
         $560 = ((($559)) + 4|0);
         HEAP8[$560>>0] = $558;
         $561 = $event;
         $562 = $bpm_on;
         $563 = $bpmlen;
         $564 = $med_8ch;
         $565 = $hexvol;
         _mmd_xlat_fx($561,$562,$563,$564,$565);
         $566 = $k;
         $567 = (($566) + 1)|0;
         $k = $567;
        }
        $568 = $j;
        $569 = (($568) + 1)|0;
        $j = $569;
       }
      } else {
       while(1) {
        $570 = $j;
        $571 = $i;
        $572 = $mod;
        $573 = ((($572)) + 168|0);
        $574 = HEAP32[$573>>2]|0;
        $575 = (($574) + ($571<<2)|0);
        $576 = HEAP32[$575>>2]|0;
        $577 = HEAP32[$576>>2]|0;
        $578 = ($570|0)<($577|0);
        if (!($578)) {
         break L84;
        }
        $k = 0;
        while(1) {
         $579 = $k;
         $580 = HEAP16[$block>>1]|0;
         $581 = $580&65535;
         $582 = ($579|0)<($581|0);
         if (!($582)) {
          break;
         }
         $583 = $2;
         $584 = (_hio_read8($583)|0);
         HEAP8[$e>>0] = $584;
         $585 = $2;
         $586 = (_hio_read8($585)|0);
         $587 = ((($e)) + 1|0);
         HEAP8[$587>>0] = $586;
         $588 = $2;
         $589 = (_hio_read8($588)|0);
         $590 = ((($e)) + 2|0);
         HEAP8[$590>>0] = $589;
         $591 = $j;
         $592 = $k;
         $593 = $i;
         $594 = $1;
         $595 = ((($594)) + 168|0);
         $596 = HEAP32[$595>>2]|0;
         $597 = (($596) + ($593<<2)|0);
         $598 = HEAP32[$597>>2]|0;
         $599 = ((($598)) + 4|0);
         $600 = (($599) + ($592<<2)|0);
         $601 = HEAP32[$600>>2]|0;
         $602 = $1;
         $603 = ((($602)) + 172|0);
         $604 = HEAP32[$603>>2]|0;
         $605 = (($604) + ($601<<2)|0);
         $606 = HEAP32[$605>>2]|0;
         $607 = ((($606)) + 4|0);
         $608 = (($607) + ($591<<3)|0);
         $event = $608;
         $609 = HEAP8[$e>>0]|0;
         $610 = $609&255;
         $611 = $610 & 63;
         $612 = $611&255;
         $613 = $event;
         HEAP8[$613>>0] = $612;
         $614 = $event;
         $615 = HEAP8[$614>>0]|0;
         $616 = ($615<<24>>24)!=(0);
         if ($616) {
          $617 = $event;
          $618 = HEAP8[$617>>0]|0;
          $619 = $618&255;
          $620 = (($619) + 12)|0;
          $621 = $620&255;
          HEAP8[$617>>0] = $621;
         }
         $622 = $event;
         $623 = HEAP8[$622>>0]|0;
         $624 = $623&255;
         $625 = ($624|0)>=(121);
         if ($625) {
          $626 = $event;
          HEAP8[$626>>0] = 0;
         }
         $627 = ((($e)) + 1|0);
         $628 = HEAP8[$627>>0]|0;
         $629 = $628&255;
         $630 = $629 >> 4;
         $631 = HEAP8[$e>>0]|0;
         $632 = $631&255;
         $633 = $632 & 128;
         $634 = $633 >> 3;
         $635 = $630 | $634;
         $636 = HEAP8[$e>>0]|0;
         $637 = $636&255;
         $638 = $637 & 64;
         $639 = $638 >> 1;
         $640 = $635 | $639;
         $641 = $640&255;
         $642 = $event;
         $643 = ((($642)) + 1|0);
         HEAP8[$643>>0] = $641;
         $644 = $event;
         $645 = ((($644)) + 1|0);
         $646 = HEAP8[$645>>0]|0;
         $647 = $646&255;
         $648 = ($647|0)!=(0);
         do {
          if ($648) {
           $649 = $event;
           $650 = HEAP8[$649>>0]|0;
           $651 = ($650<<24>>24)!=(0);
           if ($651) {
            break;
           }
           $652 = $event;
           $653 = ((($652)) + 5|0);
           HEAP8[$653>>0] = -79;
          }
         } while(0);
         $654 = ((($e)) + 1|0);
         $655 = HEAP8[$654>>0]|0;
         $656 = $655&255;
         $657 = $656 & 15;
         $658 = $657&255;
         $659 = $event;
         $660 = ((($659)) + 3|0);
         HEAP8[$660>>0] = $658;
         $661 = ((($e)) + 2|0);
         $662 = HEAP8[$661>>0]|0;
         $663 = $event;
         $664 = ((($663)) + 4|0);
         HEAP8[$664>>0] = $662;
         $665 = $event;
         $666 = $bpm_on;
         $667 = $bpmlen;
         $668 = $med_8ch;
         $669 = $hexvol;
         _mmd_xlat_fx($665,$666,$667,$668,$669);
         $670 = $k;
         $671 = (($670) + 1)|0;
         $k = $671;
        }
        $672 = $j;
        $673 = (($672) + 1)|0;
        $j = $673;
       }
      }
     }
    } while(0);
    $674 = $i;
    $675 = (($674) + 1)|0;
    $i = $675;
   }
   if ((label|0) == 58) {
    $0 = -1;
    $894 = $0;
    STACKTOP = sp;return ($894|0);
   }
   else if ((label|0) == 61) {
    $0 = -1;
    $894 = $0;
    STACKTOP = sp;return ($894|0);
   }
   else if ((label|0) == 66) {
    $0 = -1;
    $894 = $0;
    STACKTOP = sp;return ($894|0);
   }
   else if ((label|0) == 93) {
    $676 = $1;
    $677 = (_med_new_module_extras($676)|0);
    $678 = ($677|0)!=(0);
    if ($678) {
     $0 = -1;
     $894 = $0;
     STACKTOP = sp;return ($894|0);
    }
    $679 = $mod;
    $680 = (_instrument_init($679)|0);
    $681 = ($680|0)<(0);
    if ($681) {
     $0 = -1;
     $894 = $0;
     STACKTOP = sp;return ($894|0);
    }
    $i = 0;
    $smp_idx = 0;
    L140: while(1) {
     $682 = $i;
     $683 = $mod;
     $684 = ((($683)) + 140|0);
     $685 = HEAP32[$684>>2]|0;
     $686 = ($682|0)<($685|0);
     if (!($686)) {
      label = 135;
      break;
     }
     $687 = $2;
     $688 = $3;
     $689 = $smplarr_offset;
     $690 = (($688) + ($689))|0;
     $691 = $i;
     $692 = $691<<2;
     $693 = (($690) + ($692))|0;
     $694 = (_hio_seek($687,$693,0)|0);
     $695 = ($694|0)!=(0);
     if ($695) {
      label = 100;
      break;
     }
     $696 = $2;
     $697 = (_hio_read32b($696)|0);
     $smpl_offset2 = $697;
     $698 = $smpl_offset2;
     $699 = ($698|0)==(0);
     L144: do {
      if (!($699)) {
       $700 = $2;
       $701 = $3;
       $702 = $smpl_offset2;
       $703 = (($701) + ($702))|0;
       $704 = (_hio_seek($700,$703,0)|0);
       $705 = ($704|0)!=(0);
       if ($705) {
        label = 103;
        break L140;
       }
       $706 = $2;
       $707 = (_hio_read32b($706)|0);
       HEAP32[$instr>>2] = $707;
       $708 = $2;
       $709 = (_hio_read16b($708)|0);
       $710 = ((($instr)) + 4|0);
       HEAP16[$710>>1] = $709;
       $711 = $2;
       $712 = (_hio_tell($711)|0);
       $pos = $712;
       $713 = $expdata_offset;
       $714 = ($713|0)!=(0);
       if ($714) {
        $715 = $i;
        $716 = ((($expdata)) + 24|0);
        $717 = HEAP16[$716>>1]|0;
        $718 = $717&65535;
        $719 = ($715|0)<($718|0);
        if ($719) {
         $720 = $i;
         $721 = $mod;
         $722 = ((($721)) + 176|0);
         $723 = HEAP32[$722>>2]|0;
         $724 = (($723) + (($720*764)|0)|0);
         $xxi = $724;
         $725 = $2;
         $726 = $iinfo_offset;
         $727 = $i;
         $728 = ((($expdata)) + 26|0);
         $729 = HEAP16[$728>>1]|0;
         $730 = $729&65535;
         $731 = Math_imul($727, $730)|0;
         $732 = (($726) + ($731))|0;
         $733 = (_hio_seek($725,$732,0)|0);
         $734 = ($733|0)!=(0);
         if ($734) {
          label = 107;
          break L140;
         }
         $735 = $xxi;
         $736 = $2;
         (_hio_read($735,40,1,$736)|0);
        }
       }
       $737 = ((($exp_smp)) + 3|0);
       HEAP8[$737>>0] = 0;
       $738 = $expdata_offset;
       $739 = ($738|0)!=(0);
       if ($739) {
        $740 = $i;
        $741 = ((($expdata)) + 8|0);
        $742 = HEAP16[$741>>1]|0;
        $743 = $742&65535;
        $744 = ($740|0)<($743|0);
        if ($744) {
         $745 = $2;
         $746 = $expsmp_offset;
         $747 = $i;
         $748 = ((($expdata)) + 10|0);
         $749 = HEAP16[$748>>1]|0;
         $750 = $749&65535;
         $751 = Math_imul($747, $750)|0;
         $752 = (($746) + ($751))|0;
         $753 = (_hio_seek($745,$752,0)|0);
         $754 = ($753|0)!=(0);
         if ($754) {
          label = 112;
          break L140;
         }
         $755 = $2;
         $756 = (_hio_read8($755)|0);
         HEAP8[$exp_smp>>0] = $756;
         $757 = $2;
         $758 = (_hio_read8($757)|0);
         $759 = ((($exp_smp)) + 1|0);
         HEAP8[$759>>0] = $758;
         $760 = $2;
         $761 = (_hio_read8($760)|0);
         $762 = ((($exp_smp)) + 2|0);
         HEAP8[$762>>0] = $761;
         $763 = $2;
         $764 = (_hio_read8($763)|0);
         $765 = ((($exp_smp)) + 3|0);
         HEAP8[$765>>0] = $764;
        }
       }
       $766 = $2;
       $767 = $pos;
       (_hio_seek($766,$767,0)|0);
       $768 = ((($instr)) + 4|0);
       $769 = HEAP16[$768>>1]|0;
       $770 = $769 << 16 >> 16;
       $771 = ($770|0)==(-2);
       if ($771) {
        $772 = $2;
        $773 = $1;
        $774 = $i;
        $775 = $smp_idx;
        $776 = $i;
        $777 = (($song) + ($776<<3)|0);
        $778 = (_mmd_load_hybrid_instrument($772,$773,$774,$775,$synth,$exp_smp,$777)|0);
        $ret = $778;
        $779 = $smp_idx;
        $780 = (($779) + 1)|0;
        $smp_idx = $780;
        $781 = $ret;
        $782 = ($781|0)<(0);
        if ($782) {
         label = 116;
         break L140;
        }
        $783 = $1;
        $784 = $i;
        $785 = (_mmd_alloc_tables($783,$784,$synth)|0);
        $786 = ($785|0)!=(0);
        if ($786) {
         label = 118;
         break L140;
        } else {
         break;
        }
       }
       $787 = ((($instr)) + 4|0);
       $788 = HEAP16[$787>>1]|0;
       $789 = $788 << 16 >> 16;
       $790 = ($789|0)==(-1);
       if ($790) {
        $791 = $2;
        $792 = $1;
        $793 = $i;
        $794 = $smp_idx;
        $795 = $i;
        $796 = (($song) + ($795<<3)|0);
        $797 = (_mmd_load_synth_instrument($791,$792,$793,$794,$synth,$exp_smp,$796)|0);
        $ret3 = $797;
        $798 = $ret3;
        $799 = ($798|0)>(0);
        if ($799) {
         break;
        }
        $800 = $ret3;
        $801 = ($800|0)<(0);
        if ($801) {
         label = 122;
         break L140;
        }
        $802 = ((($synth)) + 20|0);
        $803 = HEAP16[$802>>1]|0;
        $804 = $803&65535;
        $805 = $smp_idx;
        $806 = (($805) + ($804))|0;
        $smp_idx = $806;
        $807 = $1;
        $808 = $i;
        $809 = (_mmd_alloc_tables($807,$808,$synth)|0);
        $810 = ($809|0)!=(0);
        if ($810) {
         label = 124;
         break L140;
        } else {
         break;
        }
       }
       $811 = ((($instr)) + 4|0);
       $812 = HEAP16[$811>>1]|0;
       $813 = $812 << 16 >> 16;
       $814 = ($813|0)>=(1);
       do {
        if ($814) {
         $815 = ((($instr)) + 4|0);
         $816 = HEAP16[$815>>1]|0;
         $817 = $816 << 16 >> 16;
         $818 = ($817|0)<=(6);
         if (!($818)) {
          break;
         }
         $819 = ((($instr)) + 4|0);
         $820 = HEAP16[$819>>1]|0;
         $821 = $820 << 16 >> 16;
         $822 = (($821) - 1)|0;
         $823 = (6216 + ($822<<2)|0);
         $824 = HEAP32[$823>>2]|0;
         $oct = $824;
         $825 = $2;
         $826 = $3;
         $827 = $smpl_offset2;
         $828 = (($826) + ($827))|0;
         $829 = (($828) + 6)|0;
         (_hio_seek($825,$829,0)|0);
         $830 = $2;
         $831 = $1;
         $832 = $i;
         $833 = $smp_idx;
         $834 = $oct;
         $835 = $i;
         $836 = (($song) + ($835<<3)|0);
         $837 = (_mmd_load_iffoct_instrument($830,$831,$832,$833,$instr,$834,$exp_smp,$836)|0);
         $ret4 = $837;
         $838 = $ret4;
         $839 = ($838|0)<(0);
         if ($839) {
          label = 128;
          break L140;
         }
         $840 = $oct;
         $841 = $smp_idx;
         $842 = (($841) + ($840))|0;
         $smp_idx = $842;
         break L144;
        }
       } while(0);
       $843 = ((($instr)) + 4|0);
       $844 = HEAP16[$843>>1]|0;
       $845 = $844 << 16 >> 16;
       $846 = ($845|0)==(0);
       if (!($846)) {
        break;
       }
       $847 = $2;
       $848 = $3;
       $849 = $smpl_offset2;
       $850 = (($848) + ($849))|0;
       $851 = (($850) + 6)|0;
       (_hio_seek($847,$851,0)|0);
       $852 = $2;
       $853 = $1;
       $854 = $i;
       $855 = $smp_idx;
       $856 = $i;
       $857 = (($song) + ($856<<3)|0);
       $858 = $ver;
       $859 = (_mmd_load_sampled_instrument($852,$853,$854,$855,$instr,$expdata,$exp_smp,$857,$858)|0);
       $ret5 = $859;
       $860 = $ret5;
       $861 = ($860|0)<(0);
       if ($861) {
        label = 132;
        break L140;
       }
       $862 = $smp_idx;
       $863 = (($862) + 1)|0;
       $smp_idx = $863;
      }
     } while(0);
     $864 = $i;
     $865 = (($864) + 1)|0;
     $i = $865;
    }
    switch (label|0) {
     case 100: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 103: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 107: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 112: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 116: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 118: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 122: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 124: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 128: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 132: {
      $0 = -1;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
     case 135: {
      $i = 0;
      while(1) {
       $866 = $i;
       $867 = $mod;
       $868 = ((($867)) + 136|0);
       $869 = HEAP32[$868>>2]|0;
       $870 = ($866|0)<($869|0);
       if (!($870)) {
        break;
       }
       $871 = $i;
       $872 = ((($song)) + 770|0);
       $873 = (($872) + ($871)|0);
       $874 = HEAP8[$873>>0]|0;
       $875 = $874&255;
       $876 = $i;
       $877 = $mod;
       $878 = ((($877)) + 184|0);
       $879 = (($878) + (($876*12)|0)|0);
       $880 = ((($879)) + 4|0);
       HEAP32[$880>>2] = $875;
       $881 = $i;
       $882 = (($881) + 1)|0;
       $883 = (($882|0) / 2)&-1;
       $884 = (($883|0) % 2)&-1;
       $885 = ($884*255)|0;
       $886 = $i;
       $887 = $mod;
       $888 = ((($887)) + 184|0);
       $889 = (($888) + (($886*12)|0)|0);
       HEAP32[$889>>2] = $885;
       $890 = $i;
       $891 = (($890) + 1)|0;
       $i = $891;
      }
      $892 = $1;
      $893 = ((($892)) + 1284|0);
      HEAP32[$893>>2] = 4;
      $0 = 0;
      $894 = $0;
      STACKTOP = sp;return ($894|0);
      break;
     }
    }
   }
  }
 }
 return (0)|0;
}
function _mmd3_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 24|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($id,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 if ($6) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $7 = (_memcmp($id,6416,4)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (_memcmp($id,6424,4)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $0 = -1;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $11 = $1;
 (_hio_seek($11,28,1)|0);
 $12 = $1;
 $13 = (_hio_read32b($12)|0);
 $offset = $13;
 $14 = $offset;
 $15 = ($14|0)!=(0);
 $16 = $1;
 if ($15) {
  $17 = $3;
  $18 = $offset;
  $19 = (($17) + ($18))|0;
  $20 = (($19) + 44)|0;
  (_hio_seek($16,$20,0)|0);
  $21 = $1;
  $22 = (_hio_read32b($21)|0);
  $offset = $22;
  $23 = $1;
  $24 = (_hio_read32b($23)|0);
  $len = $24;
  $25 = $1;
  $26 = $3;
  $27 = $offset;
  $28 = (($26) + ($27))|0;
  (_hio_seek($25,$28,0)|0);
  $29 = $1;
  $30 = $2;
  $31 = $len;
  _read_title($29,$30,$31);
 } else {
  $32 = $2;
  _read_title($16,$32,0);
 }
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _mmd3_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $block = 0, $block_offset = 0, $block_offset1 = 0, $blockarr_offset = 0, $bpm_on = 0, $bpmlen = 0, $e = 0, $event = 0, $exp_smp = 0, $expdata = 0, $expdata_offset = 0, $expsmp_offset = 0, $header = 0, $hexvol = 0, $i = 0, $iinfo_offset = 0, $instr = 0, $j = 0, $k = 0, $med_8ch = 0;
 var $mmdinfo_offset = 0, $mod = 0, $oct = 0, $or$cond = 0, $p = 0, $playseq_offset = 0, $pos = 0, $ret = 0, $ret3 = 0, $ret4 = 0, $ret5 = 0, $seqtable_offset = 0, $smp_idx = 0, $smpl_offset = 0, $smpl_offset2 = 0, $smplarr_offset = 0, $song = 0, $song_offset = 0, $songname_offset = 0, $synth = 0;
 var $trackpans_offset = 0, $trackvols_offset = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $ver = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1680|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 1580|0;
 $song = sp + 792|0;
 $block = sp + 784|0;
 $instr = sp + 776|0;
 $synth = sp + 240|0;
 $exp_smp = sp + 220|0;
 $expdata = sp + 136|0;
 $e = sp + 1668|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ver = 0;
 $smp_idx = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($header,4,1,$7)|0);
 $8 = ((($header)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($10) - 49)|0;
 $12 = (($11) + 1)|0;
 $ver = $12;
 $13 = $2;
 $14 = (_hio_read32b($13)|0);
 $15 = ((($header)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = (_hio_read32b($16)|0);
 $song_offset = $17;
 $18 = $2;
 (_hio_read16b($18)|0);
 $19 = $2;
 (_hio_read16b($19)|0);
 $20 = $2;
 $21 = (_hio_read32b($20)|0);
 $blockarr_offset = $21;
 $22 = $2;
 (_hio_read32b($22)|0);
 $23 = $2;
 $24 = (_hio_read32b($23)|0);
 $smplarr_offset = $24;
 $25 = $2;
 (_hio_read32b($25)|0);
 $26 = $2;
 $27 = (_hio_read32b($26)|0);
 $expdata_offset = $27;
 $28 = $2;
 (_hio_read32b($28)|0);
 $29 = $2;
 $30 = (_hio_read16b($29)|0);
 $31 = ((($header)) + 40|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read16b($32)|0);
 $34 = ((($header)) + 42|0);
 HEAP16[$34>>1] = $33;
 $35 = $2;
 $36 = (_hio_read16b($35)|0);
 $37 = ((($header)) + 44|0);
 HEAP16[$37>>1] = $36;
 $38 = $2;
 $39 = (_hio_read16b($38)|0);
 $40 = ((($header)) + 46|0);
 HEAP16[$40>>1] = $39;
 $41 = $2;
 $42 = (_hio_read16b($41)|0);
 $43 = ((($header)) + 48|0);
 HEAP16[$43>>1] = $42;
 $44 = $2;
 $45 = (_hio_read8($44)|0);
 $46 = ((($header)) + 50|0);
 HEAP8[$46>>0] = $45;
 $47 = $2;
 $48 = (_hio_read8($47)|0);
 $49 = ((($header)) + 51|0);
 HEAP8[$49>>0] = $48;
 $50 = $2;
 $51 = $3;
 $52 = $song_offset;
 $53 = (($51) + ($52))|0;
 (_hio_seek($50,$53,0)|0);
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = ($54|0)<(63);
  $56 = $2;
  $57 = (_hio_read16b($56)|0);
  if (!($55)) {
   break;
  }
  $58 = $i;
  $59 = (($song) + ($58<<3)|0);
  HEAP16[$59>>1] = $57;
  $60 = $2;
  $61 = (_hio_read16b($60)|0);
  $62 = $i;
  $63 = (($song) + ($62<<3)|0);
  $64 = ((($63)) + 2|0);
  HEAP16[$64>>1] = $61;
  $65 = $2;
  $66 = (_hio_read8($65)|0);
  $67 = $i;
  $68 = (($song) + ($67<<3)|0);
  $69 = ((($68)) + 4|0);
  HEAP8[$69>>0] = $66;
  $70 = $2;
  $71 = (_hio_read8($70)|0);
  $72 = $i;
  $73 = (($song) + ($72<<3)|0);
  $74 = ((($73)) + 5|0);
  HEAP8[$74>>0] = $71;
  $75 = $2;
  $76 = (_hio_read8($75)|0);
  $77 = $i;
  $78 = (($song) + ($77<<3)|0);
  $79 = ((($78)) + 6|0);
  HEAP8[$79>>0] = $76;
  $80 = $2;
  $81 = (_hio_read8s($80)|0);
  $82 = $i;
  $83 = (($song) + ($82<<3)|0);
  $84 = ((($83)) + 7|0);
  HEAP8[$84>>0] = $81;
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 $87 = ((($song)) + 504|0);
 HEAP16[$87>>1] = $57;
 $88 = $2;
 $89 = (_hio_read16b($88)|0);
 $90 = ((($song)) + 506|0);
 HEAP16[$90>>1] = $89;
 $91 = $2;
 $92 = (_hio_read32b($91)|0);
 $seqtable_offset = $92;
 $93 = $2;
 (_hio_read32b($93)|0);
 $94 = $2;
 $95 = (_hio_read32b($94)|0);
 $trackvols_offset = $95;
 $96 = $2;
 $97 = (_hio_read16b($96)|0);
 $98 = ((($song)) + 520|0);
 HEAP16[$98>>1] = $97;
 $99 = $2;
 $100 = (_hio_read16b($99)|0);
 $101 = ((($song)) + 522|0);
 HEAP16[$101>>1] = $100;
 $102 = $2;
 $103 = (_hio_read32b($102)|0);
 $trackpans_offset = $103;
 $104 = $2;
 $105 = (_hio_read32b($104)|0);
 $106 = ((($song)) + 528|0);
 HEAP32[$106>>2] = $105;
 $107 = $2;
 $108 = (_hio_read16b($107)|0);
 $109 = ((($song)) + 532|0);
 HEAP16[$109>>1] = $108;
 $110 = $2;
 $111 = (_hio_read16b($110)|0);
 $112 = ((($song)) + 534|0);
 HEAP16[$112>>1] = $111;
 $113 = $2;
 $114 = (_hio_read8($113)|0);
 $115 = ((($song)) + 536|0);
 HEAP8[$115>>0] = $114;
 $116 = $2;
 $117 = (_hio_read8($116)|0);
 $118 = ((($song)) + 537|0);
 HEAP8[$118>>0] = $117;
 $119 = $2;
 $120 = (_hio_read16b($119)|0);
 $121 = ((($song)) + 538|0);
 HEAP16[$121>>1] = $120;
 $122 = $2;
 $123 = (_hio_read8($122)|0);
 $124 = ((($song)) + 540|0);
 HEAP8[$124>>0] = $123;
 $125 = $2;
 (_hio_seek($125,223,1)|0);
 $126 = $2;
 $127 = (_hio_read16b($126)|0);
 $128 = ((($song)) + 764|0);
 HEAP16[$128>>1] = $127;
 $129 = $2;
 $130 = (_hio_read8($129)|0);
 $131 = ((($song)) + 766|0);
 HEAP8[$131>>0] = $130;
 $132 = $2;
 $133 = (_hio_read8($132)|0);
 $134 = ((($song)) + 767|0);
 HEAP8[$134>>0] = $133;
 $135 = $2;
 $136 = (_hio_read8($135)|0);
 $137 = ((($song)) + 768|0);
 HEAP8[$137>>0] = $136;
 $138 = $2;
 $139 = (_hio_read8($138)|0);
 $140 = ((($song)) + 769|0);
 HEAP8[$140>>0] = $139;
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = ($141|0)<(16);
  $143 = $2;
  $144 = (_hio_read8($143)|0);
  if (!($142)) {
   break;
  }
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 $147 = ((($song)) + 786|0);
 HEAP8[$147>>0] = $144;
 $148 = $2;
 $149 = (_hio_read8($148)|0);
 $150 = ((($song)) + 787|0);
 HEAP8[$150>>0] = $149;
 $151 = $2;
 $152 = $3;
 $153 = $seqtable_offset;
 $154 = (($152) + ($153))|0;
 (_hio_seek($151,$154,0)|0);
 $155 = $2;
 $156 = (_hio_read32b($155)|0);
 $playseq_offset = $156;
 $157 = $2;
 $158 = $3;
 $159 = $playseq_offset;
 $160 = (($158) + ($159))|0;
 (_hio_seek($157,$160,0)|0);
 $161 = $2;
 (_hio_seek($161,32,1)|0);
 $162 = $2;
 (_hio_read32b($162)|0);
 $163 = $2;
 (_hio_read32b($163)|0);
 $164 = $2;
 $165 = (_hio_read16b($164)|0);
 $166 = $165&65535;
 $167 = $mod;
 $168 = ((($167)) + 156|0);
 HEAP32[$168>>2] = $166;
 $i = 0;
 while(1) {
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 156|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ($169|0)<($172|0);
  if (!($173)) {
   break;
  }
  $174 = $2;
  $175 = (_hio_read16b($174)|0);
  $176 = $175&255;
  $177 = $i;
  $178 = $mod;
  $179 = ((($178)) + 952|0);
  $180 = (($179) + ($177)|0);
  HEAP8[$180>>0] = $176;
  $181 = $i;
  $182 = (($181) + 1)|0;
  $i = $182;
 }
 $183 = $1;
 $184 = ((($183)) + 1264|0);
 HEAP32[$184>>2] = 8363;
 $185 = ((($song)) + 767|0);
 $186 = HEAP8[$185>>0]|0;
 $187 = $186&255;
 $188 = $187 & 32;
 $189 = ($188|0)!=(0);
 $190 = $189 ? 0 : 192;
 $191 = $1;
 $192 = ((($191)) + 1280|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = $193 | $190;
 HEAP32[$192>>2] = $194;
 $195 = ((($song)) + 767|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = $196&255;
 $198 = $197 & 16;
 $hexvol = $198;
 $199 = ((($song)) + 767|0);
 $200 = HEAP8[$199>>0]|0;
 $201 = $200&255;
 $202 = $201 & 64;
 $med_8ch = $202;
 $203 = ((($song)) + 768|0);
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = $205 & 32;
 $bpm_on = $206;
 $207 = ((($song)) + 768|0);
 $208 = HEAP8[$207>>0]|0;
 $209 = $208&255;
 $210 = $209 & 31;
 $211 = (1 + ($210))|0;
 $bpmlen = $211;
 $212 = $1;
 $213 = ((($212)) + 1256|0);
 HEAPF64[$213>>3] = 2.6400000000000001;
 $214 = $1;
 $215 = $med_8ch;
 $216 = ((($song)) + 764|0);
 $217 = HEAP16[$216>>1]|0;
 $218 = $217&65535;
 $219 = $bpm_on;
 $220 = $bpmlen;
 _mmd_set_bpm($214,$215,$218,$219,$220);
 $221 = ((($song)) + 769|0);
 $222 = HEAP8[$221>>0]|0;
 $223 = $222&255;
 $224 = $mod;
 $225 = ((($224)) + 148|0);
 HEAP32[$225>>2] = $223;
 $226 = ((($song)) + 504|0);
 $227 = HEAP16[$226>>1]|0;
 $228 = $227&65535;
 $229 = $mod;
 $230 = ((($229)) + 128|0);
 HEAP32[$230>>2] = $228;
 $231 = ((($song)) + 787|0);
 $232 = HEAP8[$231>>0]|0;
 $233 = $232&255;
 $234 = $mod;
 $235 = ((($234)) + 140|0);
 HEAP32[$235>>2] = $233;
 $236 = $mod;
 $237 = ((($236)) + 160|0);
 HEAP32[$237>>2] = 0;
 $238 = $mod;
 $239 = ((($238)) + 136|0);
 HEAP32[$239>>2] = 0;
 $240 = $mod;
 HEAP8[$240>>0] = 0;
 $241 = $mod;
 $242 = ((($241)) + 144|0);
 HEAP32[$242>>2] = 0;
 $i = 0;
 while(1) {
  $243 = $i;
  $244 = $mod;
  $245 = ((($244)) + 140|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ($243|0)<($246|0);
  if (!($247)) {
   break;
  }
  $248 = $2;
  $249 = $3;
  $250 = $smplarr_offset;
  $251 = (($249) + ($250))|0;
  $252 = $i;
  $253 = $252<<2;
  $254 = (($251) + ($253))|0;
  (_hio_seek($248,$254,0)|0);
  $255 = $2;
  $256 = (_hio_read32b($255)|0);
  $smpl_offset = $256;
  $257 = $smpl_offset;
  $258 = ($257|0)==(0);
  do {
   if (!($258)) {
    $259 = $2;
    $260 = $3;
    $261 = $smpl_offset;
    $262 = (($260) + ($261))|0;
    (_hio_seek($259,$262,0)|0);
    $263 = $2;
    (_hio_read32b($263)|0);
    $264 = $2;
    $265 = (_hio_read16b($264)|0);
    $type = $265;
    $266 = $type;
    $267 = $266 << 16 >> 16;
    $268 = ($267|0)==(-1);
    if ($268) {
     $269 = $2;
     (_hio_seek($269,14,1)|0);
     $270 = $2;
     $271 = (_hio_read16b($270)|0);
     $272 = $271&65535;
     $273 = $mod;
     $274 = ((($273)) + 144|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = (($275) + ($272))|0;
     HEAP32[$274>>2] = $276;
     break;
    } else {
     $277 = $mod;
     $278 = ((($277)) + 144|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + 1)|0;
     HEAP32[$278>>2] = $280;
     break;
    }
   }
  } while(0);
  $281 = $i;
  $282 = (($281) + 1)|0;
  $i = $282;
 }
 $283 = ((($expdata)) + 8|0);
 HEAP16[$283>>1] = 0;
 $284 = ((($expdata)) + 10|0);
 HEAP16[$284>>1] = 0;
 $285 = ((($expdata)) + 24|0);
 HEAP16[$285>>1] = 0;
 $286 = ((($expdata)) + 26|0);
 HEAP16[$286>>1] = 0;
 $expsmp_offset = 0;
 $iinfo_offset = 0;
 $mmdinfo_offset = 0;
 $287 = $expdata_offset;
 $288 = ($287|0)!=(0);
 if ($288) {
  $289 = $2;
  $290 = $3;
  $291 = $expdata_offset;
  $292 = (($290) + ($291))|0;
  (_hio_seek($289,$292,0)|0);
  $293 = $2;
  (_hio_read32b($293)|0);
  $294 = $2;
  $295 = (_hio_read32b($294)|0);
  $expsmp_offset = $295;
  $296 = $2;
  $297 = (_hio_read16b($296)|0);
  $298 = ((($expdata)) + 8|0);
  HEAP16[$298>>1] = $297;
  $299 = $2;
  $300 = (_hio_read16b($299)|0);
  $301 = ((($expdata)) + 10|0);
  HEAP16[$301>>1] = $300;
  $302 = $2;
  (_hio_read32b($302)|0);
  $303 = $2;
  (_hio_read32b($303)|0);
  $304 = $2;
  $305 = (_hio_read32b($304)|0);
  $iinfo_offset = $305;
  $306 = $2;
  $307 = (_hio_read16b($306)|0);
  $308 = ((($expdata)) + 24|0);
  HEAP16[$308>>1] = $307;
  $309 = $2;
  $310 = (_hio_read16b($309)|0);
  $311 = ((($expdata)) + 26|0);
  HEAP16[$311>>1] = $310;
  $312 = $2;
  (_hio_read32b($312)|0);
  $313 = $2;
  (_hio_read32b($313)|0);
  $314 = $2;
  (_hio_read32b($314)|0);
  $315 = $2;
  (_hio_read32b($315)|0);
  $316 = $2;
  $317 = (_hio_read32b($316)|0);
  $songname_offset = $317;
  $318 = $2;
  $319 = (_hio_read32b($318)|0);
  $320 = ((($expdata)) + 48|0);
  HEAP32[$320>>2] = $319;
  $321 = $2;
  (_hio_read32b($321)|0);
  $322 = $2;
  $323 = (_hio_read32b($322)|0);
  $mmdinfo_offset = $323;
  $324 = $2;
  $325 = $3;
  $326 = $songname_offset;
  $327 = (($325) + ($326))|0;
  (_hio_seek($324,$327,0)|0);
  $i = 0;
  while(1) {
   $328 = $i;
   $329 = ((($expdata)) + 48|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = ($328>>>0)>=($330>>>0);
   $332 = $i;
   $333 = ($332|0)>=(64);
   $or$cond = $331 | $333;
   if ($or$cond) {
    break;
   }
   $334 = $2;
   $335 = (_hio_read8($334)|0);
   $336 = $i;
   $337 = $mod;
   $338 = (($337) + ($336)|0);
   HEAP8[$338>>0] = $335;
   $339 = $i;
   $340 = (($339) + 1)|0;
   $i = $340;
  }
  $341 = $mmdinfo_offset;
  $342 = ($341|0)!=(0);
  if ($342) {
   $343 = $2;
   $344 = $3;
   $345 = $mmdinfo_offset;
   $346 = (($344) + ($345))|0;
   (_hio_seek($343,$346,0)|0);
   $347 = $2;
   $348 = $1;
   $349 = $mmdinfo_offset;
   _mmd_info_text($347,$348,$349);
  }
 }
 $i = 0;
 while(1) {
  $350 = $i;
  $351 = $mod;
  $352 = ((($351)) + 128|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = ($350|0)<($353|0);
  if (!($354)) {
   break;
  }
  $355 = $2;
  $356 = $3;
  $357 = $blockarr_offset;
  $358 = (($356) + ($357))|0;
  $359 = $i;
  $360 = $359<<2;
  $361 = (($358) + ($360))|0;
  (_hio_seek($355,$361,0)|0);
  $362 = $2;
  $363 = (_hio_read32b($362)|0);
  $block_offset = $363;
  $364 = $block_offset;
  $365 = ($364|0)==(0);
  if (!($365)) {
   $366 = $2;
   $367 = $3;
   $368 = $block_offset;
   $369 = (($367) + ($368))|0;
   (_hio_seek($366,$369,0)|0);
   $370 = $2;
   $371 = (_hio_read16b($370)|0);
   HEAP16[$block>>1] = $371;
   $372 = $2;
   $373 = (_hio_read16b($372)|0);
   $374 = ((($block)) + 2|0);
   HEAP16[$374>>1] = $373;
   $375 = HEAP16[$block>>1]|0;
   $376 = $375&65535;
   $377 = $mod;
   $378 = ((($377)) + 136|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = ($376|0)>($379|0);
   if ($380) {
    $381 = HEAP16[$block>>1]|0;
    $382 = $381&65535;
    $383 = $mod;
    $384 = ((($383)) + 136|0);
    HEAP32[$384>>2] = $382;
   }
  }
  $385 = $i;
  $386 = (($385) + 1)|0;
  $i = $386;
 }
 $387 = $mod;
 $388 = ((($387)) + 128|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = $mod;
 $391 = ((($390)) + 136|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = Math_imul($389, $392)|0;
 $394 = $mod;
 $395 = ((($394)) + 132|0);
 HEAP32[$395>>2] = $393;
 $396 = $ver;
 $397 = ($396|0)==(2);
 $398 = $1;
 if ($397) {
  _set_type($398,6344,$vararg_buffer);
 } else {
  $399 = $ver;
  $400 = (48 + ($399))|0;
  HEAP32[$vararg_buffer2>>2] = $400;
  _set_type($398,6360,$vararg_buffer2);
 }
 $401 = $mod;
 $402 = (_pattern_init($401)|0);
 $403 = ($402|0)<(0);
 if ($403) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 $i = 0;
 L47: while(1) {
  $404 = $i;
  $405 = $mod;
  $406 = ((($405)) + 128|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = ($404|0)<($407|0);
  if (!($408)) {
   break;
  }
  $409 = $2;
  $410 = $3;
  $411 = $blockarr_offset;
  $412 = (($410) + ($411))|0;
  $413 = $i;
  $414 = $413<<2;
  $415 = (($412) + ($414))|0;
  (_hio_seek($409,$415,0)|0);
  $416 = $2;
  $417 = (_hio_read32b($416)|0);
  $block_offset1 = $417;
  $418 = $block_offset1;
  $419 = ($418|0)==(0);
  L50: do {
   if (!($419)) {
    $420 = $2;
    $421 = $3;
    $422 = $block_offset1;
    $423 = (($421) + ($422))|0;
    (_hio_seek($420,$423,0)|0);
    $424 = $2;
    $425 = (_hio_read16b($424)|0);
    HEAP16[$block>>1] = $425;
    $426 = $2;
    $427 = (_hio_read16b($426)|0);
    $428 = ((($block)) + 2|0);
    HEAP16[$428>>1] = $427;
    $429 = $2;
    (_hio_read32b($429)|0);
    $430 = $mod;
    $431 = $i;
    $432 = ((($block)) + 2|0);
    $433 = HEAP16[$432>>1]|0;
    $434 = $433&65535;
    $435 = (($434) + 1)|0;
    $436 = (_pattern_tracks_alloc($430,$431,$435)|0);
    $437 = ($436|0)<(0);
    if ($437) {
     label = 38;
     break L47;
    }
    $j = 0;
    while(1) {
     $438 = $j;
     $439 = $i;
     $440 = $mod;
     $441 = ((($440)) + 168|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = (($442) + ($439<<2)|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = HEAP32[$444>>2]|0;
     $446 = ($438|0)<($445|0);
     if (!($446)) {
      break L50;
     }
     $k = 0;
     while(1) {
      $447 = $k;
      $448 = HEAP16[$block>>1]|0;
      $449 = $448&65535;
      $450 = ($447|0)<($449|0);
      if (!($450)) {
       break;
      }
      $451 = $2;
      $452 = (_hio_read8($451)|0);
      HEAP8[$e>>0] = $452;
      $453 = $2;
      $454 = (_hio_read8($453)|0);
      $455 = ((($e)) + 1|0);
      HEAP8[$455>>0] = $454;
      $456 = $2;
      $457 = (_hio_read8($456)|0);
      $458 = ((($e)) + 2|0);
      HEAP8[$458>>0] = $457;
      $459 = $2;
      $460 = (_hio_read8($459)|0);
      $461 = ((($e)) + 3|0);
      HEAP8[$461>>0] = $460;
      $462 = $j;
      $463 = $k;
      $464 = $i;
      $465 = $1;
      $466 = ((($465)) + 168|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = (($467) + ($464<<2)|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ((($469)) + 4|0);
      $471 = (($470) + ($463<<2)|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = $1;
      $474 = ((($473)) + 172|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = (($475) + ($472<<2)|0);
      $477 = HEAP32[$476>>2]|0;
      $478 = ((($477)) + 4|0);
      $479 = (($478) + ($462<<3)|0);
      $event = $479;
      $480 = HEAP8[$e>>0]|0;
      $481 = $480&255;
      $482 = $481 & 127;
      $483 = $482&255;
      $484 = $event;
      HEAP8[$484>>0] = $483;
      $485 = $event;
      $486 = HEAP8[$485>>0]|0;
      $487 = ($486<<24>>24)!=(0);
      do {
       if ($487) {
        $488 = ((($song)) + 766|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489 << 24 >> 24;
        $491 = $event;
        $492 = HEAP8[$491>>0]|0;
        $493 = $492&255;
        $494 = (($493) + ($490))|0;
        $495 = $494&255;
        HEAP8[$491>>0] = $495;
        $496 = $ver;
        $497 = ($496|0)==(2);
        $498 = $event;
        $499 = HEAP8[$498>>0]|0;
        $500 = $499&255;
        if ($497) {
         $501 = (($500) + 12)|0;
         $502 = $501&255;
         HEAP8[$498>>0] = $502;
         break;
        } else {
         $503 = (($500) - 12)|0;
         $504 = $503&255;
         HEAP8[$498>>0] = $504;
         break;
        }
       }
      } while(0);
      $505 = $event;
      $506 = HEAP8[$505>>0]|0;
      $507 = $506&255;
      $508 = ($507|0)>=(121);
      if ($508) {
       $509 = $event;
       HEAP8[$509>>0] = 0;
      }
      $510 = ((($e)) + 1|0);
      $511 = HEAP8[$510>>0]|0;
      $512 = $511&255;
      $513 = $512 & 63;
      $514 = $513&255;
      $515 = $event;
      $516 = ((($515)) + 1|0);
      HEAP8[$516>>0] = $514;
      $517 = $event;
      $518 = ((($517)) + 1|0);
      $519 = HEAP8[$518>>0]|0;
      $520 = $519&255;
      $521 = ($520|0)!=(0);
      if ($521) {
       $522 = $event;
       $523 = HEAP8[$522>>0]|0;
       $524 = ($523<<24>>24)!=(0);
       if (!($524)) {
        $525 = $event;
        $526 = ((($525)) + 5|0);
        HEAP8[$526>>0] = -79;
       }
      }
      $527 = ((($e)) + 2|0);
      $528 = HEAP8[$527>>0]|0;
      $529 = $event;
      $530 = ((($529)) + 3|0);
      HEAP8[$530>>0] = $528;
      $531 = ((($e)) + 3|0);
      $532 = HEAP8[$531>>0]|0;
      $533 = $event;
      $534 = ((($533)) + 4|0);
      HEAP8[$534>>0] = $532;
      $535 = $event;
      $536 = $bpm_on;
      $537 = $bpmlen;
      $538 = $med_8ch;
      $539 = $hexvol;
      _mmd_xlat_fx($535,$536,$537,$538,$539);
      $540 = $k;
      $541 = (($540) + 1)|0;
      $k = $541;
     }
     $542 = $j;
     $543 = (($542) + 1)|0;
     $j = $543;
    }
   }
  } while(0);
  $544 = $i;
  $545 = (($544) + 1)|0;
  $i = $545;
 }
 if ((label|0) == 38) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 $546 = $1;
 $547 = (_med_new_module_extras($546)|0);
 $548 = ($547|0)!=(0);
 if ($548) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 $549 = $mod;
 $550 = (_instrument_init($549)|0);
 $551 = ($550|0)<(0);
 if ($551) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 $i = 0;
 $smp_idx = 0;
 L86: while(1) {
  $552 = $i;
  $553 = $mod;
  $554 = ((($553)) + 140|0);
  $555 = HEAP32[$554>>2]|0;
  $556 = ($552|0)<($555|0);
  $557 = $2;
  $558 = $3;
  if (!($556)) {
   label = 91;
   break;
  }
  $559 = $smplarr_offset;
  $560 = (($558) + ($559))|0;
  $561 = $i;
  $562 = $561<<2;
  $563 = (($560) + ($562))|0;
  (_hio_seek($557,$563,0)|0);
  $564 = $2;
  $565 = (_hio_read32b($564)|0);
  $smpl_offset2 = $565;
  $566 = $smpl_offset2;
  $567 = ($566|0)==(0);
  do {
   if (!($567)) {
    $568 = $2;
    $569 = $3;
    $570 = $smpl_offset2;
    $571 = (($569) + ($570))|0;
    (_hio_seek($568,$571,0)|0);
    $572 = $2;
    $573 = (_hio_read32b($572)|0);
    HEAP32[$instr>>2] = $573;
    $574 = $2;
    $575 = (_hio_read16b($574)|0);
    $576 = ((($instr)) + 4|0);
    HEAP16[$576>>1] = $575;
    $577 = $2;
    $578 = (_hio_tell($577)|0);
    $pos = $578;
    $579 = $expdata_offset;
    $580 = ($579|0)!=(0);
    if ($580) {
     $581 = $i;
     $582 = ((($expdata)) + 24|0);
     $583 = HEAP16[$582>>1]|0;
     $584 = $583&65535;
     $585 = ($581|0)<($584|0);
     if ($585) {
      $586 = $i;
      $587 = $mod;
      $588 = ((($587)) + 176|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($589) + (($586*764)|0)|0);
      $xxi = $590;
      $591 = $2;
      $592 = $iinfo_offset;
      $593 = $i;
      $594 = ((($expdata)) + 26|0);
      $595 = HEAP16[$594>>1]|0;
      $596 = $595&65535;
      $597 = Math_imul($593, $596)|0;
      $598 = (($592) + ($597))|0;
      (_hio_seek($591,$598,0)|0);
      $599 = $xxi;
      $600 = $2;
      (_hio_read($599,40,1,$600)|0);
     }
    }
    $601 = ((($exp_smp)) + 3|0);
    HEAP8[$601>>0] = 0;
    $602 = $expdata_offset;
    $603 = ($602|0)!=(0);
    if ($603) {
     $604 = $i;
     $605 = ((($expdata)) + 8|0);
     $606 = HEAP16[$605>>1]|0;
     $607 = $606&65535;
     $608 = ($604|0)<($607|0);
     if ($608) {
      $609 = $2;
      $610 = $expsmp_offset;
      $611 = $i;
      $612 = ((($expdata)) + 10|0);
      $613 = HEAP16[$612>>1]|0;
      $614 = $613&65535;
      $615 = Math_imul($611, $614)|0;
      $616 = (($610) + ($615))|0;
      (_hio_seek($609,$616,0)|0);
      $617 = $2;
      $618 = (_hio_read8($617)|0);
      HEAP8[$exp_smp>>0] = $618;
      $619 = $2;
      $620 = (_hio_read8($619)|0);
      $621 = ((($exp_smp)) + 1|0);
      HEAP8[$621>>0] = $620;
      $622 = $2;
      $623 = (_hio_read8($622)|0);
      $624 = ((($exp_smp)) + 2|0);
      HEAP8[$624>>0] = $623;
      $625 = $2;
      $626 = (_hio_read8($625)|0);
      $627 = ((($exp_smp)) + 3|0);
      HEAP8[$627>>0] = $626;
      $628 = ((($expdata)) + 10|0);
      $629 = HEAP16[$628>>1]|0;
      $630 = $629&65535;
      $631 = ($630|0)>(4);
      if ($631) {
       $632 = $2;
       $633 = (_hio_read8($632)|0);
       $634 = ((($exp_smp)) + 4|0);
       HEAP8[$634>>0] = $633;
       $635 = $2;
       $636 = (_hio_read8($635)|0);
       $637 = ((($exp_smp)) + 5|0);
       HEAP8[$637>>0] = $636;
      }
     }
    }
    $638 = $2;
    $639 = $pos;
    (_hio_seek($638,$639,0)|0);
    $640 = ((($instr)) + 4|0);
    $641 = HEAP16[$640>>1]|0;
    $642 = $641 << 16 >> 16;
    $643 = ($642|0)==(-2);
    if ($643) {
     $644 = $2;
     $645 = $1;
     $646 = $i;
     $647 = $smp_idx;
     $648 = $i;
     $649 = (($song) + ($648<<3)|0);
     $650 = (_mmd_load_hybrid_instrument($644,$645,$646,$647,$synth,$exp_smp,$649)|0);
     $ret = $650;
     $651 = $ret;
     $652 = ($651|0)<(0);
     if ($652) {
      label = 71;
      break L86;
     }
     $653 = $smp_idx;
     $654 = (($653) + 1)|0;
     $smp_idx = $654;
     $655 = $1;
     $656 = $i;
     $657 = (_mmd_alloc_tables($655,$656,$synth)|0);
     $658 = ($657|0)!=(0);
     if ($658) {
      label = 73;
      break L86;
     } else {
      break;
     }
    }
    $659 = ((($instr)) + 4|0);
    $660 = HEAP16[$659>>1]|0;
    $661 = $660 << 16 >> 16;
    $662 = ($661|0)==(-1);
    if ($662) {
     $663 = $2;
     $664 = $1;
     $665 = $i;
     $666 = $smp_idx;
     $667 = $i;
     $668 = (($song) + ($667<<3)|0);
     $669 = (_mmd_load_synth_instrument($663,$664,$665,$666,$synth,$exp_smp,$668)|0);
     $ret3 = $669;
     $670 = $ret3;
     $671 = ($670|0)>(0);
     if ($671) {
      break;
     }
     $672 = $ret3;
     $673 = ($672|0)<(0);
     if ($673) {
      label = 77;
      break L86;
     }
     $674 = ((($synth)) + 20|0);
     $675 = HEAP16[$674>>1]|0;
     $676 = $675&65535;
     $677 = $smp_idx;
     $678 = (($677) + ($676))|0;
     $smp_idx = $678;
     $679 = $1;
     $680 = $i;
     $681 = (_mmd_alloc_tables($679,$680,$synth)|0);
     $682 = ($681|0)!=(0);
     if ($682) {
      label = 79;
      break L86;
     } else {
      break;
     }
    }
    $683 = ((($instr)) + 4|0);
    $684 = HEAP16[$683>>1]|0;
    $685 = $684 << 16 >> 16;
    $686 = ($685|0)>=(1);
    if ($686) {
     $687 = ((($instr)) + 4|0);
     $688 = HEAP16[$687>>1]|0;
     $689 = $688 << 16 >> 16;
     $690 = ($689|0)<=(6);
     if ($690) {
      $691 = ((($instr)) + 4|0);
      $692 = HEAP16[$691>>1]|0;
      $693 = $692 << 16 >> 16;
      $694 = (($693) - 1)|0;
      $695 = (6392 + ($694<<2)|0);
      $696 = HEAP32[$695>>2]|0;
      $oct = $696;
      $697 = $2;
      $698 = $3;
      $699 = $smpl_offset2;
      $700 = (($698) + ($699))|0;
      $701 = (($700) + 6)|0;
      (_hio_seek($697,$701,0)|0);
      $702 = $2;
      $703 = $1;
      $704 = $i;
      $705 = $smp_idx;
      $706 = $oct;
      $707 = $i;
      $708 = (($song) + ($707<<3)|0);
      $709 = (_mmd_load_iffoct_instrument($702,$703,$704,$705,$instr,$706,$exp_smp,$708)|0);
      $ret4 = $709;
      $710 = $ret4;
      $711 = ($710|0)<(0);
      if ($711) {
       label = 83;
       break L86;
      }
      $712 = $oct;
      $713 = $smp_idx;
      $714 = (($713) + ($712))|0;
      $smp_idx = $714;
      break;
     }
    }
    $715 = ((($instr)) + 4|0);
    $716 = HEAP16[$715>>1]|0;
    $717 = $716 << 16 >> 16;
    $718 = $717 & -49;
    $719 = ($718|0)!=(0);
    if (!($719)) {
     $720 = ((($instr)) + 4|0);
     $721 = HEAP16[$720>>1]|0;
     $722 = $721 << 16 >> 16;
     $723 = ($722|0)==(0);
     if ($723) {
      $724 = $2;
      $725 = $3;
      $726 = $smpl_offset2;
      $727 = (($725) + ($726))|0;
      $728 = (($727) + 6)|0;
      (_hio_seek($724,$728,0)|0);
      $729 = $2;
      $730 = $1;
      $731 = $i;
      $732 = $smp_idx;
      $733 = $i;
      $734 = (($song) + ($733<<3)|0);
      $735 = $ver;
      $736 = (_mmd_load_sampled_instrument($729,$730,$731,$732,$instr,$expdata,$exp_smp,$734,$735)|0);
      $ret5 = $736;
      $737 = $ret5;
      $738 = ($737|0)<(0);
      if ($738) {
       label = 88;
       break L86;
      }
      $739 = $smp_idx;
      $740 = (($739) + 1)|0;
      $smp_idx = $740;
     }
    }
   }
  } while(0);
  $741 = $i;
  $742 = (($741) + 1)|0;
  $i = $742;
 }
 if ((label|0) == 71) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 else if ((label|0) == 73) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 else if ((label|0) == 77) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 else if ((label|0) == 79) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 else if ((label|0) == 83) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 else if ((label|0) == 88) {
  $0 = -1;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 else if ((label|0) == 91) {
  $743 = $trackvols_offset;
  $744 = (($558) + ($743))|0;
  (_hio_seek($557,$744,0)|0);
  $i = 0;
  while(1) {
   $745 = $i;
   $746 = $mod;
   $747 = ((($746)) + 136|0);
   $748 = HEAP32[$747>>2]|0;
   $749 = ($745|0)<($748|0);
   if (!($749)) {
    break;
   }
   $750 = $2;
   $751 = (_hio_read8($750)|0);
   $752 = $751&255;
   $753 = $i;
   $754 = $mod;
   $755 = ((($754)) + 184|0);
   $756 = (($755) + (($753*12)|0)|0);
   $757 = ((($756)) + 4|0);
   HEAP32[$757>>2] = $752;
   $758 = $i;
   $759 = (($758) + 1)|0;
   $i = $759;
  }
  $760 = $trackpans_offset;
  $761 = ($760|0)!=(0);
  L132: do {
   if ($761) {
    $762 = $2;
    $763 = $3;
    $764 = $trackpans_offset;
    $765 = (($763) + ($764))|0;
    (_hio_seek($762,$765,0)|0);
    $i = 0;
    while(1) {
     $766 = $i;
     $767 = $mod;
     $768 = ((($767)) + 136|0);
     $769 = HEAP32[$768>>2]|0;
     $770 = ($766|0)<($769|0);
     if (!($770)) {
      break L132;
     }
     $771 = $2;
     $772 = (_hio_read8s($771)|0);
     $773 = $772 << 24 >> 24;
     $774 = $773<<3;
     $p = $774;
     $775 = $p;
     $776 = ($775|0)>(127);
     $777 = $p;
     $778 = $776 ? 127 : $777;
     $779 = (128 + ($778))|0;
     $780 = $i;
     $781 = $mod;
     $782 = ((($781)) + 184|0);
     $783 = (($782) + (($780*12)|0)|0);
     HEAP32[$783>>2] = $779;
     $784 = $i;
     $785 = (($784) + 1)|0;
     $i = $785;
    }
   } else {
    $i = 0;
    while(1) {
     $786 = $i;
     $787 = $mod;
     $788 = ((($787)) + 136|0);
     $789 = HEAP32[$788>>2]|0;
     $790 = ($786|0)<($789|0);
     if (!($790)) {
      break L132;
     }
     $791 = $i;
     $792 = $mod;
     $793 = ((($792)) + 184|0);
     $794 = (($793) + (($791*12)|0)|0);
     HEAP32[$794>>2] = 128;
     $795 = $i;
     $796 = (($795) + 1)|0;
     $i = $796;
    }
   }
  } while(0);
  $797 = $1;
  $798 = ((($797)) + 1284|0);
  HEAP32[$798>>2] = 4;
  $0 = 0;
  $799 = $0;
  STACKTOP = sp;return ($799|0);
 }
 return (0)|0;
}
function _rtm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,6464,4)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   }
   $9 = $1;
   $10 = (_hio_read8($9)|0);
   $11 = $10&255;
   $12 = ($11|0)!=(32);
   if ($12) {
    $0 = -1;
    break;
   } else {
    $13 = $1;
    $14 = $2;
    _read_title($13,$14,32);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _rtm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $composer = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $offset = 0;
 var $oh = 0, $r = 0, $rh = 0, $ri = 0, $rp = 0, $rs = 0, $smpnum = 0, $sub = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $version = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $oh = sp + 600|0;
 $rh = sp + 432|0;
 $rp = sp + 420|0;
 $ri = sp + 64|0;
 $rs = sp + 36|0;
 $tracker_name = sp + 676|0;
 $composer = sp + 643|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_read_object_header($7,$oh,6464)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $0 = -1;
  $832 = $0;
  STACKTOP = sp;return ($832|0);
 }
 $10 = ((($oh)) + 38|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $version = $12;
 $13 = $2;
 (_hio_read($tracker_name,1,20,$13)|0);
 $14 = ((($tracker_name)) + 20|0);
 HEAP8[$14>>0] = 0;
 $15 = $2;
 (_hio_read($composer,1,32,$15)|0);
 $16 = ((($composer)) + 32|0);
 HEAP8[$16>>0] = 0;
 $17 = $2;
 $18 = (_hio_read16l($17)|0);
 $19 = ((($rh)) + 52|0);
 HEAP16[$19>>1] = $18;
 $20 = $2;
 $21 = (_hio_read8($20)|0);
 $22 = ((($rh)) + 54|0);
 HEAP8[$22>>0] = $21;
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = ((($rh)) + 55|0);
 HEAP8[$25>>0] = $24;
 $26 = $2;
 $27 = (_hio_read16l($26)|0);
 $28 = ((($rh)) + 56|0);
 HEAP16[$28>>1] = $27;
 $29 = $2;
 $30 = (_hio_read16l($29)|0);
 $31 = ((($rh)) + 58|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read8($32)|0);
 $34 = ((($rh)) + 60|0);
 HEAP8[$34>>0] = $33;
 $35 = $2;
 $36 = (_hio_read8($35)|0);
 $37 = ((($rh)) + 61|0);
 HEAP8[$37>>0] = $36;
 $38 = ((($rh)) + 62|0);
 $39 = $2;
 (_hio_read($38,32,1,$39)|0);
 $40 = $2;
 $41 = (_hio_read32l($40)|0);
 $42 = ((($rh)) + 96|0);
 HEAP32[$42>>2] = $41;
 $43 = $version;
 $44 = ($43|0)>=(274);
 if ($44) {
  $45 = $2;
  (_hio_seek($45,32,1)|0);
 }
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = ((($rh)) + 56|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = ($46|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $2;
  $52 = (_hio_read16l($51)|0);
  $53 = $52&255;
  $54 = $i;
  $55 = $mod;
  $56 = ((($55)) + 952|0);
  $57 = (($56) + ($54)|0);
  HEAP8[$57>>0] = $53;
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 $60 = $mod;
 $61 = ((($oh)) + 5|0);
 (_strncpy(($60|0),($61|0),20)|0);
 $62 = $mod;
 $63 = ((($62)) + 64|0);
 $64 = $version;
 $65 = $64 >> 8;
 $66 = $version;
 $67 = $66 & 255;
 HEAP32[$vararg_buffer>>2] = $tracker_name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $65;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $67;
 (_snprintf($63,64,6472,$vararg_buffer)|0);
 $68 = ((($rh)) + 56|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69&65535;
 $71 = $mod;
 $72 = ((($71)) + 156|0);
 HEAP32[$72>>2] = $70;
 $73 = ((($rh)) + 58|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74&65535;
 $76 = $mod;
 $77 = ((($76)) + 128|0);
 HEAP32[$77>>2] = $75;
 $78 = ((($rh)) + 54|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $mod;
 $82 = ((($81)) + 136|0);
 HEAP32[$82>>2] = $80;
 $83 = $mod;
 $84 = ((($83)) + 136|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $mod;
 $87 = ((($86)) + 128|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = Math_imul($85, $88)|0;
 $90 = $mod;
 $91 = ((($90)) + 132|0);
 HEAP32[$91>>2] = $89;
 $92 = ((($rh)) + 55|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $mod;
 $96 = ((($95)) + 140|0);
 HEAP32[$96>>2] = $94;
 $97 = ((($rh)) + 60|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = $mod;
 $101 = ((($100)) + 148|0);
 HEAP32[$101>>2] = $99;
 $102 = ((($rh)) + 61|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $mod;
 $106 = ((($105)) + 152|0);
 HEAP32[$106>>2] = $104;
 $107 = ((($rh)) + 52|0);
 $108 = HEAP16[$107>>1]|0;
 $109 = $108&65535;
 $110 = $109 & 1;
 $111 = ($110|0)!=(0);
 $112 = $111 ? 4096 : 0;
 $113 = $1;
 $114 = ((($113)) + 1280|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 | $112;
 HEAP32[$114>>2] = $116;
 $i = 0;
 while(1) {
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 136|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($117|0)<($120|0);
  if (!($121)) {
   break;
  }
  $122 = $i;
  $123 = ((($rh)) + 62|0);
  $124 = (($123) + ($122)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125 << 24 >> 24;
  $127 = $126 & 255;
  $128 = $i;
  $129 = $mod;
  $130 = ((($129)) + 184|0);
  $131 = (($130) + (($128*12)|0)|0);
  HEAP32[$131>>2] = $127;
  $132 = $i;
  $133 = (($132) + 1)|0;
  $i = $133;
 }
 $134 = $mod;
 $135 = (_pattern_init($134)|0);
 $136 = ($135|0)<(0);
 if ($136) {
  $0 = -1;
  $832 = $0;
  STACKTOP = sp;return ($832|0);
 }
 $137 = ((($oh)) + 40|0);
 $138 = HEAP16[$137>>1]|0;
 $139 = $138&65535;
 $140 = (42 + ($139))|0;
 $141 = ((($rh)) + 96|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($140) + ($142))|0;
 $offset = $143;
 $i = 0;
 while(1) {
  $144 = $i;
  $145 = $mod;
  $146 = ((($145)) + 128|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($144|0)<($147|0);
  $149 = $2;
  $150 = $3;
  $151 = $offset;
  $152 = (($150) + ($151))|0;
  (_hio_seek($149,$152,0)|0);
  if (!($148)) {
   label = 43;
   break;
  }
  $153 = $2;
  $154 = (_read_object_header($153,$oh,6488)|0);
  $155 = ($154|0)<(0);
  if ($155) {
   label = 16;
   break;
  }
  $156 = $2;
  $157 = (_hio_read16l($156)|0);
  HEAP16[$rp>>1] = $157;
  $158 = $2;
  $159 = (_hio_read8($158)|0);
  $160 = ((($rp)) + 2|0);
  HEAP8[$160>>0] = $159;
  $161 = $2;
  $162 = (_hio_read16l($161)|0);
  $163 = ((($rp)) + 4|0);
  HEAP16[$163>>1] = $162;
  $164 = $2;
  $165 = (_hio_read32l($164)|0);
  $166 = ((($rp)) + 8|0);
  HEAP32[$166>>2] = $165;
  $167 = ((($oh)) + 40|0);
  $168 = HEAP16[$167>>1]|0;
  $169 = $168&65535;
  $170 = (42 + ($169))|0;
  $171 = ((($rp)) + 8|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($170) + ($172))|0;
  $174 = $offset;
  $175 = (($174) + ($173))|0;
  $offset = $175;
  $176 = $mod;
  $177 = $i;
  $178 = ((($rp)) + 4|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = (_pattern_tracks_alloc($176,$177,$180)|0);
  $182 = ($181|0)<(0);
  if ($182) {
   label = 18;
   break;
  }
  $r = 0;
  while(1) {
   $183 = $r;
   $184 = ((($rp)) + 4|0);
   $185 = HEAP16[$184>>1]|0;
   $186 = $185&65535;
   $187 = ($183|0)<($186|0);
   if (!($187)) {
    break;
   }
   $j = 0;
   while(1) {
    $188 = $2;
    $189 = (_hio_read8($188)|0);
    $c = $189;
    $190 = $c;
    $191 = $190&255;
    $192 = ($191|0)==(0);
    if ($192) {
     break;
    }
    $193 = $j;
    $194 = ((($rp)) + 2|0);
    $195 = HEAP8[$194>>0]|0;
    $196 = $195&255;
    $197 = ($193|0)>=($196|0);
    if ($197) {
     break;
    }
    $198 = $r;
    $199 = $j;
    $200 = $i;
    $201 = $1;
    $202 = ((($201)) + 168|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + ($200<<2)|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ((($205)) + 4|0);
    $207 = (($206) + ($199<<2)|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $1;
    $210 = ((($209)) + 172|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ((($213)) + 4|0);
    $215 = (($214) + ($198<<3)|0);
    $event = $215;
    $216 = $c;
    $217 = $216&255;
    $218 = $217 & 1;
    $219 = ($218|0)!=(0);
    if ($219) {
     $220 = $2;
     $221 = (_hio_read8($220)|0);
     $222 = $221&255;
     $j = $222;
     $223 = $r;
     $224 = $j;
     $225 = $i;
     $226 = $1;
     $227 = ((($226)) + 168|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = (($228) + ($225<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = ((($230)) + 4|0);
     $232 = (($231) + ($224<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $1;
     $235 = ((($234)) + 172|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = (($236) + ($233<<2)|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ((($238)) + 4|0);
     $240 = (($239) + ($223<<3)|0);
     $event = $240;
    }
    $241 = $c;
    $242 = $241&255;
    $243 = $242 & 2;
    $244 = ($243|0)!=(0);
    do {
     if ($244) {
      $245 = $2;
      $246 = (_hio_read8($245)|0);
      $247 = $246&255;
      $248 = (($247) + 1)|0;
      $249 = $248&255;
      $250 = $event;
      HEAP8[$250>>0] = $249;
      $251 = $event;
      $252 = HEAP8[$251>>0]|0;
      $253 = $252&255;
      $254 = ($253|0)==(255);
      $255 = $event;
      if ($254) {
       HEAP8[$255>>0] = -127;
       break;
      } else {
       $256 = HEAP8[$255>>0]|0;
       $257 = $256&255;
       $258 = (($257) + 12)|0;
       $259 = $258&255;
       HEAP8[$255>>0] = $259;
       break;
      }
     }
    } while(0);
    $260 = $c;
    $261 = $260&255;
    $262 = $261 & 4;
    $263 = ($262|0)!=(0);
    if ($263) {
     $264 = $2;
     $265 = (_hio_read8($264)|0);
     $266 = $event;
     $267 = ((($266)) + 1|0);
     HEAP8[$267>>0] = $265;
    }
    $268 = $c;
    $269 = $268&255;
    $270 = $269 & 8;
    $271 = ($270|0)!=(0);
    if ($271) {
     $272 = $2;
     $273 = (_hio_read8($272)|0);
     $274 = $event;
     $275 = ((($274)) + 3|0);
     HEAP8[$275>>0] = $273;
    }
    $276 = $c;
    $277 = $276&255;
    $278 = $277 & 16;
    $279 = ($278|0)!=(0);
    if ($279) {
     $280 = $2;
     $281 = (_hio_read8($280)|0);
     $282 = $event;
     $283 = ((($282)) + 4|0);
     HEAP8[$283>>0] = $281;
    }
    $284 = $c;
    $285 = $284&255;
    $286 = $285 & 32;
    $287 = ($286|0)!=(0);
    if ($287) {
     $288 = $2;
     $289 = (_hio_read8($288)|0);
     $290 = $event;
     $291 = ((($290)) + 5|0);
     HEAP8[$291>>0] = $289;
    }
    $292 = $c;
    $293 = $292&255;
    $294 = $293 & 64;
    $295 = ($294|0)!=(0);
    if ($295) {
     $296 = $2;
     $297 = (_hio_read8($296)|0);
     $298 = $event;
     $299 = ((($298)) + 6|0);
     HEAP8[$299>>0] = $297;
    }
    $300 = $j;
    $301 = (($300) + 1)|0;
    $j = $301;
   }
   $302 = $r;
   $303 = (($302) + 1)|0;
   $r = $303;
  }
  $304 = $i;
  $305 = (($304) + 1)|0;
  $i = $305;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $832 = $0;
  STACKTOP = sp;return ($832|0);
 }
 else if ((label|0) == 18) {
  $0 = -1;
  $832 = $0;
  STACKTOP = sp;return ($832|0);
 }
 else if ((label|0) == 43) {
  $306 = $mod;
  $307 = ((($306)) + 144|0);
  HEAP32[$307>>2] = 1024;
  $308 = $mod;
  $309 = (_instrument_init($308)|0);
  $310 = ($309|0)<(0);
  if ($310) {
   $0 = -1;
   $832 = $0;
   STACKTOP = sp;return ($832|0);
  }
  $smpnum = 0;
  $i = 0;
  L64: while(1) {
   $311 = $i;
   $312 = $mod;
   $313 = ((($312)) + 140|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ($311|0)<($314|0);
   if (!($315)) {
    label = 87;
    break;
   }
   $316 = $i;
   $317 = $mod;
   $318 = ((($317)) + 176|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + (($316*764)|0)|0);
   $xxi = $320;
   $321 = $2;
   $322 = (_read_object_header($321,$oh,6496)|0);
   $323 = ($322|0)<(0);
   if ($323) {
    label = 48;
    break;
   }
   $324 = $mod;
   $325 = $i;
   $326 = ((($oh)) + 5|0);
   (_instrument_name($324,$325,$326,32)|0);
   $327 = ((($oh)) + 40|0);
   $328 = HEAP16[$327>>1]|0;
   $329 = $328&65535;
   $330 = ($329|0)==(0);
   L68: do {
    if ($330) {
     HEAP8[$ri>>0] = 0;
    } else {
     $331 = $2;
     $332 = (_hio_read8($331)|0);
     HEAP8[$ri>>0] = $332;
     $333 = $2;
     $334 = (_hio_read16l($333)|0);
     $335 = ((($ri)) + 2|0);
     HEAP16[$335>>1] = $334;
     $336 = ((($ri)) + 4|0);
     $337 = $2;
     (_hio_read($336,120,1,$337)|0);
     $338 = $2;
     $339 = (_hio_read8($338)|0);
     $340 = ((($ri)) + 124|0);
     HEAP8[$340>>0] = $339;
     $j = 0;
     while(1) {
      $341 = $j;
      $342 = ($341|0)<(12);
      $343 = $2;
      if (!($342)) {
       break;
      }
      $344 = (_hio_read32l($343)|0);
      $345 = $j;
      $346 = ((($ri)) + 124|0);
      $347 = ((($346)) + 4|0);
      $348 = (($347) + ($345<<3)|0);
      HEAP32[$348>>2] = $344;
      $349 = $2;
      $350 = (_hio_read32l($349)|0);
      $351 = $j;
      $352 = ((($ri)) + 124|0);
      $353 = ((($352)) + 4|0);
      $354 = (($353) + ($351<<3)|0);
      $355 = ((($354)) + 4|0);
      HEAP32[$355>>2] = $350;
      $356 = $j;
      $357 = (($356) + 1)|0;
      $j = $357;
     }
     $358 = (_hio_read8($343)|0);
     $359 = ((($ri)) + 124|0);
     $360 = ((($359)) + 100|0);
     HEAP8[$360>>0] = $358;
     $361 = $2;
     $362 = (_hio_read8($361)|0);
     $363 = ((($ri)) + 124|0);
     $364 = ((($363)) + 101|0);
     HEAP8[$364>>0] = $362;
     $365 = $2;
     $366 = (_hio_read8($365)|0);
     $367 = ((($ri)) + 124|0);
     $368 = ((($367)) + 102|0);
     HEAP8[$368>>0] = $366;
     $369 = $2;
     $370 = (_hio_read16l($369)|0);
     $371 = ((($ri)) + 124|0);
     $372 = ((($371)) + 104|0);
     HEAP16[$372>>1] = $370;
     $373 = $2;
     $374 = (_hio_read8($373)|0);
     $375 = ((($ri)) + 232|0);
     HEAP8[$375>>0] = $374;
     $j = 0;
     while(1) {
      $376 = $j;
      $377 = ($376|0)<(12);
      $378 = $2;
      if (!($377)) {
       break;
      }
      $379 = (_hio_read32l($378)|0);
      $380 = $j;
      $381 = ((($ri)) + 232|0);
      $382 = ((($381)) + 4|0);
      $383 = (($382) + ($380<<3)|0);
      HEAP32[$383>>2] = $379;
      $384 = $2;
      $385 = (_hio_read32l($384)|0);
      $386 = $j;
      $387 = ((($ri)) + 232|0);
      $388 = ((($387)) + 4|0);
      $389 = (($388) + ($386<<3)|0);
      $390 = ((($389)) + 4|0);
      HEAP32[$390>>2] = $385;
      $391 = $j;
      $392 = (($391) + 1)|0;
      $j = $392;
     }
     $393 = (_hio_read8($378)|0);
     $394 = ((($ri)) + 232|0);
     $395 = ((($394)) + 100|0);
     HEAP8[$395>>0] = $393;
     $396 = $2;
     $397 = (_hio_read8($396)|0);
     $398 = ((($ri)) + 232|0);
     $399 = ((($398)) + 101|0);
     HEAP8[$399>>0] = $397;
     $400 = $2;
     $401 = (_hio_read8($400)|0);
     $402 = ((($ri)) + 232|0);
     $403 = ((($402)) + 102|0);
     HEAP8[$403>>0] = $401;
     $404 = $2;
     $405 = (_hio_read16l($404)|0);
     $406 = ((($ri)) + 232|0);
     $407 = ((($406)) + 104|0);
     HEAP16[$407>>1] = $405;
     $408 = $2;
     $409 = (_hio_read8($408)|0);
     $410 = ((($ri)) + 340|0);
     HEAP8[$410>>0] = $409;
     $411 = $2;
     $412 = (_hio_read8($411)|0);
     $413 = ((($ri)) + 341|0);
     HEAP8[$413>>0] = $412;
     $414 = $2;
     $415 = (_hio_read8($414)|0);
     $416 = ((($ri)) + 342|0);
     HEAP8[$416>>0] = $415;
     $417 = $2;
     $418 = (_hio_read8($417)|0);
     $419 = ((($ri)) + 343|0);
     HEAP8[$419>>0] = $418;
     $420 = $2;
     $421 = (_hio_read16l($420)|0);
     $422 = ((($ri)) + 344|0);
     HEAP16[$422>>1] = $421;
     $423 = $version;
     $424 = ($423|0)>=(272);
     if ($424) {
      $425 = $2;
      $426 = (_hio_read8($425)|0);
      $427 = ((($ri)) + 346|0);
      HEAP8[$427>>0] = $426;
      $428 = $2;
      $429 = (_hio_read8($428)|0);
      $430 = ((($ri)) + 347|0);
      HEAP8[$430>>0] = $429;
      $431 = $2;
      $432 = (_hio_read8($431)|0);
      $433 = ((($ri)) + 348|0);
      HEAP8[$433>>0] = $432;
      $434 = $2;
      $435 = (_hio_read8($434)|0);
      $436 = ((($ri)) + 349|0);
      HEAP8[$436>>0] = $435;
     }
     $437 = $version;
     $438 = ($437|0)>=(274);
     if ($438) {
      $439 = $2;
      $440 = (_hio_read8($439)|0);
      $441 = ((($ri)) + 350|0);
      HEAP8[$441>>0] = $440;
      $442 = $2;
      $443 = (_hio_read8($442)|0);
      $444 = ((($ri)) + 351|0);
      HEAP8[$444>>0] = $443;
      $445 = $2;
      $446 = (_hio_read8($445)|0);
      $447 = ((($ri)) + 352|0);
      HEAP8[$447>>0] = $446;
      $448 = $2;
      $449 = (_hio_read8($448)|0);
      $450 = ((($ri)) + 353|0);
      HEAP8[$450>>0] = $449;
     }
     $451 = HEAP8[$ri>>0]|0;
     $452 = $451&255;
     $453 = $xxi;
     $454 = ((($453)) + 36|0);
     HEAP32[$454>>2] = $452;
     $455 = $xxi;
     $456 = ((($455)) + 36|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = ($457|0)>(16);
     if ($458) {
      $459 = $xxi;
      $460 = ((($459)) + 36|0);
      HEAP32[$460>>2] = 16;
     }
     $461 = $mod;
     $462 = $i;
     $463 = $xxi;
     $464 = ((($463)) + 36|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = (_subinstrument_alloc($461,$462,$465)|0);
     $467 = ($466|0)<(0);
     if ($467) {
      label = 64;
      break L64;
     }
     $j = 0;
     while(1) {
      $468 = $j;
      $469 = ($468|0)<(120);
      if (!($469)) {
       break;
      }
      $470 = $j;
      $471 = ((($ri)) + 4|0);
      $472 = (($471) + ($470)|0);
      $473 = HEAP8[$472>>0]|0;
      $474 = $j;
      $475 = $xxi;
      $476 = ((($475)) + 512|0);
      $477 = (($476) + ($474<<1)|0);
      HEAP8[$477>>0] = $473;
      $478 = $j;
      $479 = (($478) + 1)|0;
      $j = $479;
     }
     $480 = ((($ri)) + 344|0);
     $481 = HEAP16[$480>>1]|0;
     $482 = $481&65535;
     $483 = $xxi;
     $484 = ((($483)) + 40|0);
     HEAP32[$484>>2] = $482;
     $485 = ((($ri)) + 124|0);
     $486 = HEAP8[$485>>0]|0;
     $487 = $486&255;
     $488 = $xxi;
     $489 = ((($488)) + 44|0);
     $490 = ((($489)) + 4|0);
     HEAP32[$490>>2] = $487;
     $491 = ((($ri)) + 124|0);
     $492 = ((($491)) + 100|0);
     $493 = HEAP8[$492>>0]|0;
     $494 = $493&255;
     $495 = $xxi;
     $496 = ((($495)) + 44|0);
     $497 = ((($496)) + 12|0);
     HEAP32[$497>>2] = $494;
     $498 = ((($ri)) + 124|0);
     $499 = ((($498)) + 101|0);
     $500 = HEAP8[$499>>0]|0;
     $501 = $500&255;
     $502 = $xxi;
     $503 = ((($502)) + 44|0);
     $504 = ((($503)) + 20|0);
     HEAP32[$504>>2] = $501;
     $505 = ((($ri)) + 124|0);
     $506 = ((($505)) + 102|0);
     $507 = HEAP8[$506>>0]|0;
     $508 = $507&255;
     $509 = $xxi;
     $510 = ((($509)) + 44|0);
     $511 = ((($510)) + 24|0);
     HEAP32[$511>>2] = $508;
     $512 = ((($ri)) + 124|0);
     $513 = ((($512)) + 104|0);
     $514 = HEAP16[$513>>1]|0;
     $515 = $514&65535;
     $516 = $xxi;
     $517 = ((($516)) + 44|0);
     HEAP32[$517>>2] = $515;
     $518 = ((($ri)) + 232|0);
     $519 = HEAP8[$518>>0]|0;
     $520 = $519&255;
     $521 = $xxi;
     $522 = ((($521)) + 200|0);
     $523 = ((($522)) + 4|0);
     HEAP32[$523>>2] = $520;
     $524 = ((($ri)) + 232|0);
     $525 = ((($524)) + 100|0);
     $526 = HEAP8[$525>>0]|0;
     $527 = $526&255;
     $528 = $xxi;
     $529 = ((($528)) + 200|0);
     $530 = ((($529)) + 12|0);
     HEAP32[$530>>2] = $527;
     $531 = ((($ri)) + 232|0);
     $532 = ((($531)) + 101|0);
     $533 = HEAP8[$532>>0]|0;
     $534 = $533&255;
     $535 = $xxi;
     $536 = ((($535)) + 200|0);
     $537 = ((($536)) + 20|0);
     HEAP32[$537>>2] = $534;
     $538 = ((($ri)) + 232|0);
     $539 = ((($538)) + 102|0);
     $540 = HEAP8[$539>>0]|0;
     $541 = $540&255;
     $542 = $xxi;
     $543 = ((($542)) + 200|0);
     $544 = ((($543)) + 24|0);
     HEAP32[$544>>2] = $541;
     $545 = ((($ri)) + 232|0);
     $546 = ((($545)) + 104|0);
     $547 = HEAP16[$546>>1]|0;
     $548 = $547&65535;
     $549 = $xxi;
     $550 = ((($549)) + 200|0);
     HEAP32[$550>>2] = $548;
     $j = 0;
     while(1) {
      $551 = $j;
      $552 = $xxi;
      $553 = ((($552)) + 44|0);
      $554 = ((($553)) + 4|0);
      $555 = HEAP32[$554>>2]|0;
      $556 = ($551|0)<($555|0);
      if (!($556)) {
       break;
      }
      $557 = $j;
      $558 = ((($ri)) + 124|0);
      $559 = ((($558)) + 4|0);
      $560 = (($559) + ($557<<3)|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = $561&65535;
      $563 = $j;
      $564 = $563<<1;
      $565 = (($564) + 0)|0;
      $566 = $xxi;
      $567 = ((($566)) + 44|0);
      $568 = ((($567)) + 28|0);
      $569 = (($568) + ($565<<1)|0);
      HEAP16[$569>>1] = $562;
      $570 = $j;
      $571 = ((($ri)) + 124|0);
      $572 = ((($571)) + 4|0);
      $573 = (($572) + ($570<<3)|0);
      $574 = ((($573)) + 4|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = (($575|0) / 2)&-1;
      $577 = $576&65535;
      $578 = $j;
      $579 = $578<<1;
      $580 = (($579) + 1)|0;
      $581 = $xxi;
      $582 = ((($581)) + 44|0);
      $583 = ((($582)) + 28|0);
      $584 = (($583) + ($580<<1)|0);
      HEAP16[$584>>1] = $577;
      $585 = $j;
      $586 = (($585) + 1)|0;
      $j = $586;
     }
     $j = 0;
     while(1) {
      $587 = $j;
      $588 = $xxi;
      $589 = ((($588)) + 200|0);
      $590 = ((($589)) + 4|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = ($587|0)<($591|0);
      if (!($592)) {
       break;
      }
      $593 = $j;
      $594 = ((($ri)) + 232|0);
      $595 = ((($594)) + 4|0);
      $596 = (($595) + ($593<<3)|0);
      $597 = HEAP32[$596>>2]|0;
      $598 = $597&65535;
      $599 = $j;
      $600 = $599<<1;
      $601 = (($600) + 0)|0;
      $602 = $xxi;
      $603 = ((($602)) + 200|0);
      $604 = ((($603)) + 28|0);
      $605 = (($604) + ($601<<1)|0);
      HEAP16[$605>>1] = $598;
      $606 = $j;
      $607 = ((($ri)) + 232|0);
      $608 = ((($607)) + 4|0);
      $609 = (($608) + ($606<<3)|0);
      $610 = ((($609)) + 4|0);
      $611 = HEAP32[$610>>2]|0;
      $612 = (($611|0) / 2)&-1;
      $613 = (32 + ($612))|0;
      $614 = $613&65535;
      $615 = $j;
      $616 = $615<<1;
      $617 = (($616) + 1)|0;
      $618 = $xxi;
      $619 = ((($618)) + 200|0);
      $620 = ((($619)) + 28|0);
      $621 = (($620) + ($617<<1)|0);
      HEAP16[$621>>1] = $614;
      $622 = $j;
      $623 = (($622) + 1)|0;
      $j = $623;
     }
     $j = 0;
     while(1) {
      $624 = $j;
      $625 = $xxi;
      $626 = ((($625)) + 36|0);
      $627 = HEAP32[$626>>2]|0;
      $628 = ($624|0)<($627|0);
      if (!($628)) {
       break L68;
      }
      $629 = $j;
      $630 = $xxi;
      $631 = ((($630)) + 756|0);
      $632 = HEAP32[$631>>2]|0;
      $633 = (($632) + ($629<<6)|0);
      $sub = $633;
      $634 = $2;
      $635 = (_read_object_header($634,$oh,6504)|0);
      $636 = ($635|0)<(0);
      if ($636) {
       label = 77;
       break L64;
      }
      $637 = $2;
      $638 = (_hio_read16l($637)|0);
      HEAP16[$rs>>1] = $638;
      $639 = $2;
      $640 = (_hio_read8($639)|0);
      $641 = ((($rs)) + 2|0);
      HEAP8[$641>>0] = $640;
      $642 = $2;
      $643 = (_hio_read8($642)|0);
      $644 = ((($rs)) + 3|0);
      HEAP8[$644>>0] = $643;
      $645 = $2;
      $646 = (_hio_read32l($645)|0);
      $647 = ((($rs)) + 4|0);
      HEAP32[$647>>2] = $646;
      $648 = $2;
      $649 = (_hio_read32l($648)|0);
      $650 = $649&255;
      $651 = ((($rs)) + 8|0);
      HEAP8[$651>>0] = $650;
      $652 = $2;
      $653 = (_hio_read32l($652)|0);
      $654 = ((($rs)) + 12|0);
      HEAP32[$654>>2] = $653;
      $655 = $2;
      $656 = (_hio_read32l($655)|0);
      $657 = ((($rs)) + 16|0);
      HEAP32[$657>>2] = $656;
      $658 = $2;
      $659 = (_hio_read32l($658)|0);
      $660 = ((($rs)) + 20|0);
      HEAP32[$660>>2] = $659;
      $661 = $2;
      $662 = (_hio_read8($661)|0);
      $663 = ((($rs)) + 24|0);
      HEAP8[$663>>0] = $662;
      $664 = $2;
      $665 = (_hio_read8($664)|0);
      $666 = ((($rs)) + 25|0);
      HEAP8[$666>>0] = $665;
      $667 = ((($rs)) + 20|0);
      $668 = HEAP32[$667>>2]|0;
      $669 = $sub;
      $670 = ((($669)) + 12|0);
      $671 = $sub;
      $672 = ((($671)) + 16|0);
      _c2spd_to_note($668,$670,$672);
      $673 = ((($rs)) + 24|0);
      $674 = HEAP8[$673>>0]|0;
      $675 = $674&255;
      $676 = (48 - ($675))|0;
      $677 = $sub;
      $678 = ((($677)) + 12|0);
      $679 = HEAP32[$678>>2]|0;
      $680 = (($679) + ($676))|0;
      HEAP32[$678>>2] = $680;
      $681 = ((($rs)) + 3|0);
      $682 = HEAP8[$681>>0]|0;
      $683 = $682&255;
      $684 = ((($rs)) + 2|0);
      $685 = HEAP8[$684>>0]|0;
      $686 = $685&255;
      $687 = Math_imul($683, $686)|0;
      $688 = (($687|0) / 64)&-1;
      $689 = $sub;
      HEAP32[$689>>2] = $688;
      $690 = ((($rs)) + 25|0);
      $691 = HEAP8[$690>>0]|0;
      $692 = $691 << 24 >> 24;
      $693 = $692<<1;
      $694 = (128 + ($693))|0;
      $695 = $sub;
      $696 = ((($695)) + 8|0);
      HEAP32[$696>>2] = $694;
      $697 = ((($ri)) + 340|0);
      $698 = HEAP8[$697>>0]|0;
      $699 = $698 << 24 >> 24;
      $700 = $sub;
      $701 = ((($700)) + 20|0);
      HEAP32[$701>>2] = $699;
      $702 = ((($ri)) + 342|0);
      $703 = HEAP8[$702>>0]|0;
      $704 = $703 << 24 >> 24;
      $705 = $sub;
      $706 = ((($705)) + 24|0);
      HEAP32[$706>>2] = $704;
      $707 = ((($ri)) + 343|0);
      $708 = HEAP8[$707>>0]|0;
      $709 = $708 << 24 >> 24;
      $710 = $sub;
      $711 = ((($710)) + 28|0);
      HEAP32[$711>>2] = $709;
      $712 = ((($ri)) + 341|0);
      $713 = HEAP8[$712>>0]|0;
      $714 = $713 << 24 >> 24;
      $715 = $sub;
      $716 = ((($715)) + 32|0);
      HEAP32[$716>>2] = $714;
      $717 = $smpnum;
      $718 = $sub;
      $719 = ((($718)) + 40|0);
      HEAP32[$719>>2] = $717;
      $720 = $smpnum;
      $721 = $mod;
      $722 = ((($721)) + 144|0);
      $723 = HEAP32[$722>>2]|0;
      $724 = ($720|0)>=($723|0);
      if ($724) {
       $725 = $mod;
       $726 = ((($725)) + 180|0);
       $727 = HEAP32[$726>>2]|0;
       $728 = $mod;
       $729 = ((($728)) + 144|0);
       $730 = $mod;
       $731 = ((($730)) + 144|0);
       $732 = HEAP32[$731>>2]|0;
       $733 = ($732*3)|0;
       $734 = (($733|0) / 2)&-1;
       $735 = (_realloc_samples($727,$729,$734)|0);
       $736 = $mod;
       $737 = ((($736)) + 180|0);
       HEAP32[$737>>2] = $735;
       $738 = $mod;
       $739 = ((($738)) + 180|0);
       $740 = HEAP32[$739>>2]|0;
       $741 = ($740|0)==(0|0);
       if ($741) {
        label = 80;
        break L64;
       }
      }
      $742 = $smpnum;
      $743 = $mod;
      $744 = ((($743)) + 180|0);
      $745 = HEAP32[$744>>2]|0;
      $746 = (($745) + (($742*52)|0)|0);
      $xxs = $746;
      $747 = $xxs;
      $748 = ((($oh)) + 5|0);
      (_copy_adjust($747,$748,32)|0);
      $749 = ((($rs)) + 4|0);
      $750 = HEAP32[$749>>2]|0;
      $751 = $xxs;
      $752 = ((($751)) + 32|0);
      HEAP32[$752>>2] = $750;
      $753 = ((($rs)) + 12|0);
      $754 = HEAP32[$753>>2]|0;
      $755 = $xxs;
      $756 = ((($755)) + 36|0);
      HEAP32[$756>>2] = $754;
      $757 = ((($rs)) + 16|0);
      $758 = HEAP32[$757>>2]|0;
      $759 = $xxs;
      $760 = ((($759)) + 40|0);
      HEAP32[$760>>2] = $758;
      $761 = $xxs;
      $762 = ((($761)) + 44|0);
      HEAP32[$762>>2] = 0;
      $763 = HEAP16[$rs>>1]|0;
      $764 = $763&65535;
      $765 = $764 & 2;
      $766 = ($765|0)!=(0);
      if ($766) {
       $767 = $xxs;
       $768 = ((($767)) + 44|0);
       $769 = HEAP32[$768>>2]|0;
       $770 = $769 | 1;
       HEAP32[$768>>2] = $770;
       $771 = $xxs;
       $772 = ((($771)) + 32|0);
       $773 = HEAP32[$772>>2]|0;
       $774 = $773 >> 1;
       HEAP32[$772>>2] = $774;
       $775 = $xxs;
       $776 = ((($775)) + 36|0);
       $777 = HEAP32[$776>>2]|0;
       $778 = $777 >> 1;
       HEAP32[$776>>2] = $778;
       $779 = $xxs;
       $780 = ((($779)) + 40|0);
       $781 = HEAP32[$780>>2]|0;
       $782 = $781 >> 1;
       HEAP32[$780>>2] = $782;
      }
      $783 = ((($rs)) + 8|0);
      $784 = HEAP8[$783>>0]|0;
      $785 = $784&255;
      $786 = $785 & 3;
      $787 = ($786|0)!=(0);
      $788 = $787 ? 2 : 0;
      $789 = $xxs;
      $790 = ((($789)) + 44|0);
      $791 = HEAP32[$790>>2]|0;
      $792 = $791 | $788;
      HEAP32[$790>>2] = $792;
      $793 = ((($rs)) + 8|0);
      $794 = HEAP8[$793>>0]|0;
      $795 = $794&255;
      $796 = ($795|0)==(2);
      $797 = $796 ? 4 : 0;
      $798 = $xxs;
      $799 = ((($798)) + 44|0);
      $800 = HEAP32[$799>>2]|0;
      $801 = $800 | $797;
      HEAP32[$799>>2] = $801;
      $802 = $1;
      $803 = $2;
      $804 = $xxs;
      $805 = (_load_sample($802,$803,1,$804,0)|0);
      $806 = ($805|0)<(0);
      if ($806) {
       label = 84;
       break L64;
      }
      $807 = $j;
      $808 = (($807) + 1)|0;
      $j = $808;
      $809 = $smpnum;
      $810 = (($809) + 1)|0;
      $smpnum = $810;
     }
    }
   } while(0);
   $811 = $i;
   $812 = (($811) + 1)|0;
   $i = $812;
  }
  if ((label|0) == 48) {
   $0 = -1;
   $832 = $0;
   STACKTOP = sp;return ($832|0);
  }
  else if ((label|0) == 64) {
   $0 = -1;
   $832 = $0;
   STACKTOP = sp;return ($832|0);
  }
  else if ((label|0) == 77) {
   $0 = -1;
   $832 = $0;
   STACKTOP = sp;return ($832|0);
  }
  else if ((label|0) == 80) {
   $0 = -1;
   $832 = $0;
   STACKTOP = sp;return ($832|0);
  }
  else if ((label|0) == 84) {
   $0 = -1;
   $832 = $0;
   STACKTOP = sp;return ($832|0);
  }
  else if ((label|0) == 87) {
   $813 = $mod;
   $814 = ((($813)) + 180|0);
   $815 = HEAP32[$814>>2]|0;
   $816 = $mod;
   $817 = ((($816)) + 144|0);
   $818 = $smpnum;
   $819 = (_realloc_samples($815,$817,$818)|0);
   $820 = $mod;
   $821 = ((($820)) + 180|0);
   HEAP32[$821>>2] = $819;
   $822 = $mod;
   $823 = ((($822)) + 180|0);
   $824 = HEAP32[$823>>2]|0;
   $825 = ($824|0)==(0|0);
   if ($825) {
    $0 = -1;
    $832 = $0;
    STACKTOP = sp;return ($832|0);
   } else {
    $826 = $1;
    $827 = ((($826)) + 1280|0);
    $828 = HEAP32[$827>>2]|0;
    $829 = $828 | 704643104;
    HEAP32[$827>>2] = $829;
    $830 = $1;
    $831 = ((($830)) + 1284|0);
    HEAP32[$831>>2] = 1;
    $0 = 0;
    $832 = $0;
    STACKTOP = sp;return ($832|0);
   }
  }
 }
 return (0)|0;
}
function _read_object_header($f,$h,$id) {
 $f = $f|0;
 $h = $h|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $h;
 $3 = $id;
 $4 = $2;
 $5 = $1;
 (_hio_read($4,4,1,$5)|0);
 $6 = $3;
 $7 = $2;
 $8 = (_memcmp($6,$7,4)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $10 = $1;
 $11 = (_hio_read8($10)|0);
 $12 = $2;
 $13 = ((($12)) + 4|0);
 HEAP8[$13>>0] = $11;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)!=(32);
 if ($18) {
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 } else {
  $19 = $2;
  $20 = ((($19)) + 5|0);
  $21 = $1;
  (_hio_read($20,32,1,$21)|0);
  $22 = $1;
  $23 = (_hio_read8($22)|0);
  $24 = $2;
  $25 = ((($24)) + 37|0);
  HEAP8[$25>>0] = $23;
  $26 = $1;
  $27 = (_hio_read16l($26)|0);
  $28 = $2;
  $29 = ((($28)) + 38|0);
  HEAP16[$29>>1] = $27;
  $30 = $1;
  $31 = (_hio_read16l($30)|0);
  $32 = $2;
  $33 = ((($32)) + 40|0);
  HEAP16[$33>>1] = $31;
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _dt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1143886894);
 if ($6) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $7 = $1;
  (_hio_read32b($7)|0);
  $8 = $1;
  (_hio_read16b($8)|0);
  $9 = $1;
  (_hio_read16b($9)|0);
  $10 = $1;
  (_hio_read16b($10)|0);
  $11 = $1;
  (_hio_read16b($11)|0);
  $12 = $1;
  (_hio_read16b($12)|0);
  $13 = $1;
  (_hio_read32b($13)|0);
  $14 = $1;
  $15 = $2;
  _read_title($14,$15,32);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _dt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0, $i = 0, $ret = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = ((($data)) + 4|0);
 HEAP32[$6>>2] = 0;
 HEAP32[$data>>2] = 0;
 $7 = (_iff_new()|0);
 $handle = $7;
 $8 = $handle;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $10 = $handle;
 $11 = (_iff_register($10,6544,247)|0);
 $ret = $11;
 $12 = $handle;
 $13 = (_iff_register($12,6552,248)|0);
 $14 = $ret;
 $15 = $14 | $13;
 $ret = $15;
 $16 = $handle;
 $17 = (_iff_register($16,7552,249)|0);
 $18 = $ret;
 $19 = $18 | $17;
 $ret = $19;
 $20 = $handle;
 $21 = (_iff_register($20,7560,250)|0);
 $22 = $ret;
 $23 = $22 | $21;
 $ret = $23;
 $24 = $handle;
 $25 = (_iff_register($24,6560,251)|0);
 $26 = $ret;
 $27 = $26 | $25;
 $ret = $27;
 $28 = $handle;
 $29 = (_iff_register($28,6568,252)|0);
 $30 = $ret;
 $31 = $30 | $29;
 $ret = $31;
 $32 = $ret;
 $33 = ($32|0)!=(0);
 if ($33) {
  $0 = -1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $34 = $handle;
 $35 = $1;
 $36 = $2;
 $37 = (_iff_load($34,$35,$36,$data)|0);
 $ret = $37;
 $38 = $handle;
 _iff_release($38);
 $39 = $ret;
 $40 = ($39|0)<(0);
 if ($40) {
  $0 = -1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $41 = ((($data)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $i = $42;
 while(1) {
  $43 = $i;
  $44 = $1;
  $45 = ((($44)) + 128|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)<($46|0);
  if (!($47)) {
   label = 12;
   break;
  }
  $48 = $1;
  $49 = $i;
  $50 = (_pattern_tracks_alloc($48,$49,64)|0);
  $51 = ($50|0)<(0);
  if ($51) {
   label = 10;
   break;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _get_d_t_($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read16b($5)|0);
 $6 = $2;
 (_hio_read16b($6)|0);
 $7 = $2;
 (_hio_read16b($7)|0);
 $8 = $2;
 $9 = (_hio_read16b($8)|0);
 $10 = $9&65535;
 $11 = $mod;
 $12 = ((($11)) + 148|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = (_hio_read16b($13)|0);
 $15 = $14&65535;
 $b = $15;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = $b;
  $18 = $mod;
  $19 = ((($18)) + 152|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $2;
 (_hio_read32b($20)|0);
 $21 = $mod;
 $22 = $2;
 (_hio_read($21,32,1,$22)|0);
 $23 = $0;
 _set_type($23,6576,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _get_s_q_($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $maxpat = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 HEAP32[$9>>2] = $7;
 $10 = $2;
 $11 = (_hio_read16b($10)|0);
 $12 = $11&65535;
 $13 = $mod;
 $14 = ((($13)) + 160|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 (_hio_read32b($15)|0);
 $i = 0;
 $maxpat = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(128);
  if (!($17)) {
   break;
  }
  $18 = $2;
  $19 = (_hio_read8($18)|0);
  $20 = $i;
  $21 = $mod;
  $22 = ((($21)) + 952|0);
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = $i;
  $25 = $mod;
  $26 = ((($25)) + 952|0);
  $27 = (($26) + ($24)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $maxpat;
  $31 = ($29|0)>($30|0);
  if ($31) {
   $32 = $i;
   $33 = $mod;
   $34 = ((($33)) + 952|0);
   $35 = (($34) + ($32)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $maxpat = $37;
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = $maxpat;
 $41 = (($40) + 1)|0;
 $42 = $mod;
 $43 = ((($42)) + 128|0);
 HEAP32[$43>>2] = $41;
 STACKTOP = sp;return 0;
}
function _get_patt289($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $2;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = $mod;
 $10 = ((($9)) + 136|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = (_hio_read16b($11)|0);
 $13 = $12&65535;
 $14 = $data;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $mod;
 $17 = ((($16)) + 136|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $mod;
 $20 = ((($19)) + 128|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($18, $21)|0;
 $23 = $mod;
 $24 = ((($23)) + 132|0);
 HEAP32[$24>>2] = $22;
 STACKTOP = sp;return 0;
}
function _get_inst($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c2spd = 0, $fine = 0, $flag = 0, $i = 0, $mod = 0, $name = 0, $replen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 44|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = $mod;
 $10 = ((($9)) + 144|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 HEAP32[$12>>2] = $8;
 $13 = $mod;
 $14 = (_instrument_init($13)|0);
 $15 = ($14|0)<(0);
 if ($15) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $mod;
  $18 = ((($17)) + 140|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   label = 10;
   break;
  }
  $21 = $mod;
  $22 = $i;
  $23 = (_subinstrument_alloc($21,$22,1)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 6;
   break;
  }
  $25 = $3;
  (_hio_read32b($25)|0);
  $26 = $3;
  $27 = (_hio_read32b($26)|0);
  $28 = $i;
  $29 = $mod;
  $30 = ((($29)) + 180|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*52)|0)|0);
  $33 = ((($32)) + 32|0);
  HEAP32[$33>>2] = $27;
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 180|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($34*52)|0)|0);
  $39 = ((($38)) + 32|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0);
  $42 = $41 ^ 1;
  $43 = $42 ^ 1;
  $44 = $43&1;
  $45 = $i;
  $46 = $mod;
  $47 = ((($46)) + 176|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + (($45*764)|0)|0);
  $50 = ((($49)) + 36|0);
  HEAP32[$50>>2] = $44;
  $51 = $3;
  $52 = (_hio_read8s($51)|0);
  $53 = $52 << 24 >> 24;
  $fine = $53;
  $54 = $3;
  $55 = (_hio_read8($54)|0);
  $56 = $55&255;
  $57 = $i;
  $58 = $mod;
  $59 = ((($58)) + 176|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + (($57*764)|0)|0);
  $62 = ((($61)) + 756|0);
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$63>>2] = $56;
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 176|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + (($64*764)|0)|0);
  $69 = ((($68)) + 756|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 8|0);
  HEAP32[$71>>2] = 128;
  $72 = $3;
  $73 = (_hio_read32b($72)|0);
  $74 = $i;
  $75 = $mod;
  $76 = ((($75)) + 180|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + (($74*52)|0)|0);
  $79 = ((($78)) + 36|0);
  HEAP32[$79>>2] = $73;
  $80 = $3;
  $81 = (_hio_read32b($80)|0);
  $replen = $81;
  $82 = $i;
  $83 = $mod;
  $84 = ((($83)) + 180|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($82*52)|0)|0);
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $replen;
  $90 = (($88) + ($89))|0;
  $91 = (($90) - 1)|0;
  $92 = $i;
  $93 = $mod;
  $94 = ((($93)) + 180|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + (($92*52)|0)|0);
  $97 = ((($96)) + 40|0);
  HEAP32[$97>>2] = $91;
  $98 = $replen;
  $99 = ($98|0)>(2);
  $100 = $99 ? 2 : 0;
  $101 = $i;
  $102 = $mod;
  $103 = ((($102)) + 180|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + (($101*52)|0)|0);
  $106 = ((($105)) + 44|0);
  HEAP32[$106>>2] = $100;
  $107 = $3;
  (_hio_read($name,22,1,$107)|0);
  $108 = $mod;
  $109 = $i;
  (_instrument_name($108,$109,$name,22)|0);
  $110 = $3;
  $111 = (_hio_read16b($110)|0);
  $112 = $111&65535;
  $flag = $112;
  $113 = $flag;
  $114 = $113 & 255;
  $115 = ($114|0)>(8);
  if ($115) {
   $116 = $i;
   $117 = $mod;
   $118 = ((($117)) + 180|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + (($116*52)|0)|0);
   $121 = ((($120)) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 | 1;
   HEAP32[$121>>2] = $123;
   $124 = $i;
   $125 = $mod;
   $126 = ((($125)) + 180|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + (($124*52)|0)|0);
   $129 = ((($128)) + 32|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $130 >> 1;
   HEAP32[$129>>2] = $131;
   $132 = $i;
   $133 = $mod;
   $134 = ((($133)) + 180|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + (($132*52)|0)|0);
   $137 = ((($136)) + 36|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 >> 1;
   HEAP32[$137>>2] = $139;
   $140 = $i;
   $141 = $mod;
   $142 = ((($141)) + 180|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) + (($140*52)|0)|0);
   $145 = ((($144)) + 40|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146 >> 1;
   HEAP32[$145>>2] = $147;
  }
  $148 = $3;
  (_hio_read32b($148)|0);
  $149 = $3;
  $150 = (_hio_read32b($149)|0);
  $c2spd = $150;
  $151 = $c2spd;
  $152 = $i;
  $153 = $mod;
  $154 = ((($153)) + 176|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($152*764)|0)|0);
  $157 = ((($156)) + 756|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($158)) + 12|0);
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 176|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*764)|0)|0);
  $165 = ((($164)) + 756|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($166)) + 16|0);
  _c2spd_to_note($151,$159,$167);
  $168 = $fine;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 176|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*764)|0)|0);
  $174 = ((($173)) + 756|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($175)) + 16|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + ($168))|0;
  HEAP32[$176>>2] = $178;
  $179 = $i;
  $180 = $i;
  $181 = $mod;
  $182 = ((($181)) + 176|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + (($180*764)|0)|0);
  $185 = ((($184)) + 756|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ((($186)) + 40|0);
  HEAP32[$187>>2] = $179;
  $188 = $i;
  $189 = (($188) + 1)|0;
  $i = $189;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 return (0)|0;
}
function _get_dapt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $a = 0, $b = 0, $c = 0, $d = 0, $data = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0, $pat = 0, $rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $data;
  HEAP32[$10>>2] = 1;
  $11 = $data;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = $mod;
  $14 = (_pattern_init($13)|0);
  $15 = ($14|0)<(0);
  if ($15) {
   $0 = -1;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  }
 }
 $16 = $3;
 (_hio_read32b($16)|0);
 $17 = $3;
 $18 = (_hio_read16b($17)|0);
 $19 = $18&65535;
 $pat = $19;
 $i = $19;
 $20 = $3;
 $21 = (_hio_read16b($20)|0);
 $22 = $21&65535;
 $rows = $22;
 $23 = $data;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $i = $25;
 while(1) {
  $26 = $i;
  $27 = $pat;
  $28 = ($26|0)<=($27|0);
  if (!($28)) {
   break;
  }
  $29 = $mod;
  $30 = $i;
  $31 = $rows;
  $32 = (_pattern_tracks_alloc($29,$30,$31)|0);
  $33 = ($32|0)<(0);
  if ($33) {
   label = 7;
   break;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 if ((label|0) == 7) {
  $0 = -1;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $36 = $pat;
 $37 = (($36) + 1)|0;
 $38 = $data;
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = $37;
 $j = 0;
 while(1) {
  $40 = $j;
  $41 = $rows;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $k = 0;
  while(1) {
   $43 = $k;
   $44 = $mod;
   $45 = ((($44)) + 136|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($43|0)<($46|0);
   $48 = $j;
   if (!($47)) {
    break;
   }
   $49 = $k;
   $50 = $pat;
   $51 = $1;
   $52 = ((($51)) + 168|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + ($50<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($55)) + 4|0);
   $57 = (($56) + ($49<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = ((($59)) + 172|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($58<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($63)) + 4|0);
   $65 = (($64) + ($48<<3)|0);
   $event = $65;
   $66 = $3;
   $67 = (_hio_read8($66)|0);
   $a = $67;
   $68 = $3;
   $69 = (_hio_read8($68)|0);
   $b = $69;
   $70 = $3;
   $71 = (_hio_read8($70)|0);
   $c = $71;
   $72 = $3;
   $73 = (_hio_read8($72)|0);
   $d = $73;
   $74 = $a;
   $75 = ($74<<24>>24)!=(0);
   if ($75) {
    $76 = $a;
    $77 = (($76) + -1)<<24>>24;
    $a = $77;
    $78 = $a;
    $79 = $78&255;
    $80 = $79 >> 4;
    $81 = ($80*12)|0;
    $82 = $a;
    $83 = $82&255;
    $84 = $83 & 15;
    $85 = (($81) + ($84))|0;
    $86 = (($85) + 12)|0;
    $87 = $86&255;
    $88 = $event;
    HEAP8[$88>>0] = $87;
   }
   $89 = $b;
   $90 = $89&255;
   $91 = $90 & 252;
   $92 = $91 >> 2;
   $93 = $92&255;
   $94 = $event;
   $95 = ((($94)) + 2|0);
   HEAP8[$95>>0] = $93;
   $96 = $b;
   $97 = $96&255;
   $98 = $97 & 3;
   $99 = $98 << 4;
   $100 = $c;
   $101 = $100&255;
   $102 = $101 >> 4;
   $103 = (($99) + ($102))|0;
   $104 = $103&255;
   $105 = $event;
   $106 = ((($105)) + 1|0);
   HEAP8[$106>>0] = $104;
   $107 = $c;
   $108 = $107&255;
   $109 = $108 & 15;
   $110 = $109&255;
   $111 = $event;
   $112 = ((($111)) + 3|0);
   HEAP8[$112>>0] = $110;
   $113 = $d;
   $114 = $event;
   $115 = ((($114)) + 4|0);
   HEAP8[$115>>0] = $113;
   $116 = $k;
   $117 = (($116) + 1)|0;
   $k = $117;
  }
  $118 = (($48) + 1)|0;
  $j = $118;
 }
 $0 = 0;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _get_dait($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $data = 0, $mod = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $data;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = 1;
  $13 = $data;
  $14 = ((($13)) + 16|0);
  HEAP32[$14>>2] = 0;
 }
 $15 = $2;
 $16 = ($15|0)>(2);
 if ($16) {
  $17 = $1;
  $18 = $3;
  $19 = $data;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $mod;
  $23 = ((($22)) + 176|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + (($21*764)|0)|0);
  $26 = ((($25)) + 756|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $mod;
  $31 = ((($30)) + 180|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($29*52)|0)|0);
  $34 = (_load_sample($17,$18,64,$33,0)|0);
  $ret = $34;
  $35 = $ret;
  $36 = ($35|0)<(0);
  if ($36) {
   $0 = -1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $37 = $data;
 $38 = ((($37)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[$38>>2] = $40;
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _no_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1313800192);
 if ($6) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $7 = $1;
  $8 = $2;
  $9 = $1;
  $10 = (_hio_read8($9)|0);
  $11 = $10&255;
  _read_title($7,$8,$11);
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _no_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c2spd = 0, $event = 0, $fxp = 0, $fxt = 0, $hasname = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $mod = 0, $note = 0, $nsize = 0, $vararg_buffer = 0, $vol = 0, $x = 0, $x1 = 0;
 var $x2 = 0, $x3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $1;
 _set_type($8,6640,$vararg_buffer);
 $9 = $2;
 $10 = (_hio_read8($9)|0);
 $11 = $10&255;
 $nsize = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $nsize;
  $14 = ($12|0)<($13|0);
  $15 = $2;
  if (!($14)) {
   break;
  }
  $16 = (_hio_read8($15)|0);
  $x = $16;
  $17 = $i;
  $18 = ($17|0)<(64);
  if ($18) {
   $19 = $x;
   $20 = $i;
   $21 = $mod;
   $22 = (($21) + ($20)|0);
   HEAP8[$22>>0] = $19;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 (_hio_read16l($15)|0);
 $25 = $2;
 (_hio_read16l($25)|0);
 $26 = $2;
 (_hio_read16l($26)|0);
 $27 = $2;
 (_hio_read16l($27)|0);
 $28 = $2;
 (_hio_read8($28)|0);
 $29 = $2;
 $30 = (_hio_read8($29)|0);
 $31 = $30&255;
 $32 = $mod;
 $33 = ((($32)) + 128|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 (_hio_read8($34)|0);
 $35 = $2;
 $36 = (_hio_read8($35)|0);
 $37 = $36&255;
 $38 = $mod;
 $39 = ((($38)) + 136|0);
 HEAP32[$39>>2] = $37;
 $40 = $mod;
 $41 = ((($40)) + 128|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $mod;
 $44 = ((($43)) + 136|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = Math_imul($42, $45)|0;
 $47 = $mod;
 $48 = ((($47)) + 132|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 (_hio_read8($49)|0);
 $50 = $2;
 (_hio_read16l($50)|0);
 $51 = $2;
 (_hio_read16l($51)|0);
 $52 = $2;
 (_hio_read8($52)|0);
 $53 = $mod;
 $54 = ((($53)) + 144|0);
 HEAP32[$54>>2] = 63;
 $55 = $mod;
 $56 = ((($55)) + 140|0);
 HEAP32[$56>>2] = 63;
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = ($57|0)<(256);
  if (!($58)) {
   break;
  }
  $59 = $2;
  $60 = (_hio_read8($59)|0);
  $x1 = $60;
  $61 = $x1;
  $62 = $61&255;
  $63 = ($62|0)==(255);
  if ($63) {
   break;
  }
  $64 = $x1;
  $65 = $i;
  $66 = $mod;
  $67 = ((($66)) + 952|0);
  $68 = (($67) + ($65)|0);
  HEAP8[$68>>0] = $64;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = $2;
 $72 = $i;
 $73 = (255 - ($72))|0;
 (_hio_seek($71,$73,1)|0);
 $74 = $i;
 $75 = $mod;
 $76 = ((($75)) + 156|0);
 HEAP32[$76>>2] = $74;
 $77 = $mod;
 $78 = (_instrument_init($77)|0);
 $79 = ($78|0)<(0);
 if ($79) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = $mod;
  $82 = ((($81)) + 140|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)<($83|0);
  $85 = $mod;
  if (!($84)) {
   break;
  }
  $86 = $i;
  $87 = (_subinstrument_alloc($85,$86,1)|0);
  $88 = ($87|0)<(0);
  if ($88) {
   label = 15;
   break;
  }
  $89 = $2;
  $90 = (_hio_read8($89)|0);
  $91 = $90&255;
  $nsize = $91;
  $hasname = 0;
  $j = 0;
  while(1) {
   $92 = $j;
   $93 = $nsize;
   $94 = ($92|0)<($93|0);
   if (!($94)) {
    break;
   }
   $95 = $2;
   $96 = (_hio_read8($95)|0);
   $x2 = $96;
   $97 = $x2;
   $98 = $97&255;
   $99 = ($98|0)!=(32);
   if ($99) {
    $hasname = 1;
   }
   $100 = $j;
   $101 = ($100|0)<(32);
   if ($101) {
    $102 = $x2;
    $103 = $j;
    $104 = $i;
    $105 = $mod;
    $106 = ((($105)) + 176|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + (($104*764)|0)|0);
    $109 = (($108) + ($103)|0);
    HEAP8[$109>>0] = $102;
   }
   $110 = $j;
   $111 = (($110) + 1)|0;
   $j = $111;
  }
  $112 = $hasname;
  $113 = ($112|0)!=(0);
  if (!($113)) {
   $114 = $i;
   $115 = $mod;
   $116 = ((($115)) + 176|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + (($114*764)|0)|0);
   HEAP8[$118>>0] = 0;
  }
  $119 = $2;
  (_hio_read32l($119)|0);
  $120 = $2;
  (_hio_read32l($120)|0);
  $121 = $2;
  $122 = (_hio_read8($121)|0);
  $123 = $122&255;
  $124 = $i;
  $125 = $mod;
  $126 = ((($125)) + 176|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + (($124*764)|0)|0);
  $129 = ((($128)) + 756|0);
  $130 = HEAP32[$129>>2]|0;
  HEAP32[$130>>2] = $123;
  $131 = $2;
  $132 = (_hio_read16l($131)|0);
  $133 = $132&65535;
  $c2spd = $133;
  $134 = $2;
  $135 = (_hio_read16l($134)|0);
  $136 = $135&65535;
  $137 = $i;
  $138 = $mod;
  $139 = ((($138)) + 180|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + (($137*52)|0)|0);
  $142 = ((($141)) + 32|0);
  HEAP32[$142>>2] = $136;
  $143 = $2;
  $144 = (_hio_read16l($143)|0);
  $145 = $144&65535;
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 180|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + (($146*52)|0)|0);
  $151 = ((($150)) + 36|0);
  HEAP32[$151>>2] = $145;
  $152 = $2;
  $153 = (_hio_read16l($152)|0);
  $154 = $153&65535;
  $155 = $i;
  $156 = $mod;
  $157 = ((($156)) + 180|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($155*52)|0)|0);
  $160 = ((($159)) + 40|0);
  HEAP32[$160>>2] = $154;
  $161 = $2;
  (_hio_read32l($161)|0);
  $162 = $2;
  (_hio_read16l($162)|0);
  $163 = $i;
  $164 = $mod;
  $165 = ((($164)) + 180|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + (($163*52)|0)|0);
  $168 = ((($167)) + 32|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)>(0);
  if ($170) {
   $171 = $i;
   $172 = $mod;
   $173 = ((($172)) + 176|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + (($171*764)|0)|0);
   $176 = ((($175)) + 36|0);
   HEAP32[$176>>2] = 1;
  }
  $177 = $i;
  $178 = $mod;
  $179 = ((($178)) + 180|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + (($177*52)|0)|0);
  $182 = ((($181)) + 40|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)>(0);
  $185 = $184 ? 2 : 0;
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 180|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($186*52)|0)|0);
  $191 = ((($190)) + 44|0);
  HEAP32[$191>>2] = $185;
  $192 = $i;
  $193 = $mod;
  $194 = ((($193)) + 176|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + (($192*764)|0)|0);
  $197 = ((($196)) + 756|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ((($198)) + 16|0);
  HEAP32[$199>>2] = 0;
  $200 = $i;
  $201 = $mod;
  $202 = ((($201)) + 176|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + (($200*764)|0)|0);
  $205 = ((($204)) + 756|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ((($206)) + 8|0);
  HEAP32[$207>>2] = 128;
  $208 = $i;
  $209 = $i;
  $210 = $mod;
  $211 = ((($210)) + 176|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (($212) + (($209*764)|0)|0);
  $214 = ((($213)) + 756|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($215)) + 40|0);
  HEAP32[$216>>2] = $208;
  $217 = $c2spd;
  $218 = ($217*8363)|0;
  $219 = (($218|0) / 8448)&-1;
  $c2spd = $219;
  $220 = $c2spd;
  $221 = $i;
  $222 = $mod;
  $223 = ((($222)) + 176|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + (($221*764)|0)|0);
  $226 = ((($225)) + 756|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = ((($227)) + 12|0);
  $229 = $i;
  $230 = $mod;
  $231 = ((($230)) + 176|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = (($232) + (($229*764)|0)|0);
  $234 = ((($233)) + 756|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = ((($235)) + 16|0);
  _c2spd_to_note($220,$228,$236);
  $237 = $i;
  $238 = (($237) + 1)|0;
  $i = $238;
 }
 if ((label|0) == 15) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $239 = (_pattern_init($85)|0);
 $240 = ($239|0)<(0);
 if ($240) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = $mod;
  $243 = ((($242)) + 128|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($241|0)<($244|0);
  if (!($245)) {
   break;
  }
  $246 = $mod;
  $247 = $i;
  $248 = (_pattern_tracks_alloc($246,$247,64)|0);
  $249 = ($248|0)<(0);
  if ($249) {
   label = 33;
   break;
  }
  $j = 0;
  while(1) {
   $250 = $j;
   $251 = $i;
   $252 = $mod;
   $253 = ((($252)) + 168|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($254) + ($251<<2)|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = HEAP32[$256>>2]|0;
   $258 = ($250|0)<($257|0);
   if (!($258)) {
    break;
   }
   $k = 0;
   while(1) {
    $259 = $k;
    $260 = $mod;
    $261 = ((($260)) + 136|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)<($262|0);
    $264 = $j;
    if (!($263)) {
     break;
    }
    $265 = $k;
    $266 = $i;
    $267 = $1;
    $268 = ((($267)) + 168|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + ($266<<2)|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ((($271)) + 4|0);
    $273 = (($272) + ($265<<2)|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $1;
    $276 = ((($275)) + 172|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = (($277) + ($274<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ((($279)) + 4|0);
    $281 = (($280) + ($264<<3)|0);
    $event = $281;
    $282 = $2;
    $283 = (_hio_read32l($282)|0);
    $x3 = $283;
    $284 = $x3;
    $285 = $284 & 63;
    $note = $285;
    $286 = $x3;
    $287 = $286 & 8128;
    $288 = $287 >>> 6;
    $ins = $288;
    $289 = $x3;
    $290 = $289 & 1040384;
    $291 = $290 >>> 13;
    $vol = $291;
    $292 = $x3;
    $293 = $292 & 15728640;
    $294 = $293 >>> 20;
    $fxt = $294;
    $295 = $x3;
    $296 = $295 & -16777216;
    $297 = $296 >>> 24;
    $fxp = $297;
    $298 = $note;
    $299 = ($298|0)!=(63);
    if ($299) {
     $300 = $note;
     $301 = (36 + ($300))|0;
     $302 = $301&255;
     $303 = $event;
     HEAP8[$303>>0] = $302;
    }
    $304 = $ins;
    $305 = ($304|0)!=(127);
    if ($305) {
     $306 = $ins;
     $307 = (1 + ($306))|0;
     $308 = $307&255;
     $309 = $event;
     $310 = ((($309)) + 1|0);
     HEAP8[$310>>0] = $308;
    }
    $311 = $vol;
    $312 = ($311|0)!=(127);
    if ($312) {
     $313 = $vol;
     $314 = $313&255;
     $315 = $event;
     $316 = ((($315)) + 2|0);
     HEAP8[$316>>0] = $314;
    }
    $317 = $fxt;
    $318 = ($317|0)!=(15);
    if ($318) {
     $319 = $fxt;
     $320 = (6656 + ($319)|0);
     $321 = HEAP8[$320>>0]|0;
     $322 = $event;
     $323 = ((($322)) + 3|0);
     HEAP8[$323>>0] = $321;
     $324 = $fxp;
     $325 = $324&255;
     $326 = $event;
     $327 = ((($326)) + 4|0);
     HEAP8[$327>>0] = $325;
    }
    $328 = $k;
    $329 = (($328) + 1)|0;
    $k = $329;
   }
   $330 = (($264) + 1)|0;
   $j = $330;
  }
  $331 = $i;
  $332 = (($331) + 1)|0;
  $i = $332;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $i = 0;
 while(1) {
  $333 = $i;
  $334 = $mod;
  $335 = ((($334)) + 140|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ($333|0)<($336|0);
  if (!($337)) {
   label = 55;
   break;
  }
  $338 = $i;
  $339 = $mod;
  $340 = ((($339)) + 180|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = (($341) + (($338*52)|0)|0);
  $343 = ((($342)) + 32|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = ($344|0)==(0);
  if (!($345)) {
   $346 = $1;
   $347 = $2;
   $348 = $i;
   $349 = $mod;
   $350 = ((($349)) + 180|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (($351) + (($348*52)|0)|0);
   $353 = (_load_sample($346,$347,2,$352,0)|0);
   $354 = ($353|0)<(0);
   if ($354) {
    label = 53;
    break;
   }
  }
  $355 = $i;
  $356 = (($355) + 1)|0;
  $i = $356;
 }
 if ((label|0) == 53) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 else if ((label|0) == 55) {
  $357 = $1;
  $358 = ((($357)) + 1280|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = $359 | 293601825;
  HEAP32[$358>>2] = $360;
  $361 = $1;
  $362 = ((($361)) + 1284|0);
  HEAP32[$362>>2] = 2;
  $0 = 0;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 return (0)|0;
}
function _arch_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1297437528);
 if ($6) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $7 = $1;
 (_hio_read32l($7)|0);
 while(1) {
  $8 = $1;
  $9 = (_hio_eof($8)|0);
  $10 = ($9|0)!=(0);
  $11 = $10 ^ 1;
  $12 = $1;
  if (!($11)) {
   label = 8;
   break;
  }
  $13 = (_hio_read32b($12)|0);
  $id = $13;
  $14 = $1;
  $15 = (_hio_read32l($14)|0);
  $len = $15;
  $16 = $id;
  $17 = ($16|0)==(1296974157);
  $18 = $1;
  if ($17) {
   label = 6;
   break;
  }
  $20 = $len;
  (_hio_seek($18,$20,1)|0);
 }
 if ((label|0) == 6) {
  $19 = $2;
  _read_title($18,$19,32);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 8) {
  $21 = $2;
  _read_title($12,$21,0);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _arch_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = ((($data)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($data)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($data)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($data)) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$data>>2] = 0;
 $13 = (_iff_new()|0);
 $handle = $13;
 $14 = $handle;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $16 = $handle;
 (_iff_register($16,6712,253)|0);
 $17 = $handle;
 (_iff_register($17,6720,254)|0);
 $18 = $handle;
 (_iff_register($18,6728,255)|0);
 $19 = $handle;
 (_iff_register($19,6736,256)|0);
 $20 = $handle;
 (_iff_register($20,6744,257)|0);
 $21 = $handle;
 (_iff_register($21,6752,258)|0);
 $22 = $handle;
 (_iff_register($22,6760,259)|0);
 $23 = $handle;
 (_iff_register($23,6768,260)|0);
 $24 = $handle;
 (_iff_register($24,6776,261)|0);
 $25 = $handle;
 (_iff_register($25,7552,262)|0);
 $26 = $handle;
 (_iff_register($26,6784,263)|0);
 $27 = $handle;
 _iff_set_quirk($27,1);
 $28 = $handle;
 $29 = $1;
 $30 = $2;
 $31 = (_iff_load($28,$29,$30,$data)|0);
 $32 = ($31|0)<(0);
 $33 = $handle;
 _iff_release($33);
 if ($32) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 136|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = (($39) + 3)|0;
  $41 = (($40|0) / 2)&-1;
  $42 = (($41|0) % 2)&-1;
  $43 = ($42*255)|0;
  $44 = $i;
  $45 = $mod;
  $46 = ((($45)) + 184|0);
  $47 = (($46) + (($44*12)|0)|0);
  HEAP32[$47>>2] = $43;
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
 }
 $0 = 0;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _get_tinf($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $3;
 $data = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $x = $7;
 $8 = $x;
 $9 = $8 & 240;
 $10 = $9 >> 4;
 $11 = ($10*10)|0;
 $12 = $x;
 $13 = $12 & 15;
 $14 = (($11) + ($13))|0;
 $15 = $data;
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = $17&255;
 $x = $18;
 $19 = $x;
 $20 = $19 & 240;
 $21 = $20 >> 4;
 $22 = ($21*1000)|0;
 $23 = $x;
 $24 = $23 & 15;
 $25 = ($24*100)|0;
 $26 = (($22) + ($25))|0;
 $27 = $data;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($26))|0;
 HEAP32[$27>>2] = $29;
 $30 = $2;
 $31 = (_hio_read8($30)|0);
 $32 = $31&255;
 $x = $32;
 $33 = $x;
 $34 = $33 & 240;
 $35 = $34 >> 4;
 $36 = ($35*10)|0;
 $37 = $x;
 $38 = $37 & 15;
 $39 = (($36) + ($38))|0;
 $40 = $data;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $2;
 $43 = (_hio_read8($42)|0);
 $44 = $43&255;
 $x = $44;
 $45 = $x;
 $46 = $45 & 240;
 $47 = $46 >> 4;
 $48 = ($47*10)|0;
 $49 = $x;
 $50 = $49 & 15;
 $51 = (($48) + ($50))|0;
 $52 = $data;
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = $51;
 STACKTOP = sp;return 0;
}
function _get_mvox($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read32l($5)|0);
 $7 = $mod;
 $8 = ((($7)) + 136|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return 0;
}
function _get_ster($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $data = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $data;
 $7 = ((($6)) + 28|0);
 $8 = $2;
 (_hio_read($7,1,8,$8)|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $mod;
  $11 = ((($10)) + 136|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $data;
  $16 = ((($15)) + 28|0);
  $17 = (($16) + ($14)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)>(0);
  if ($20) {
   $21 = $i;
   $22 = $data;
   $23 = ((($22)) + 28|0);
   $24 = (($23) + ($21)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)<(8);
   if ($27) {
    $28 = $i;
    $29 = $data;
    $30 = ((($29)) + 28|0);
    $31 = (($30) + ($28)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($33*42)|0;
    $35 = (($34) - 40)|0;
    $36 = $i;
    $37 = $mod;
    $38 = ((($37)) + 184|0);
    $39 = (($38) + (($36*12)|0)|0);
    HEAP32[$39>>2] = $35;
   }
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 STACKTOP = sp;return 0;
}
function _get_mnam($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = $2;
 (_hio_read($5,1,32,$6)|0);
 STACKTOP = sp;return 0;
}
function _get_anam($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 STACKTOP = sp;return 0;
}
function _get_mlen($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read32l($5)|0);
 $7 = $mod;
 $8 = ((($7)) + 156|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return 0;
}
function _get_pnum($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read32l($5)|0);
 $7 = $mod;
 $8 = ((($7)) + 128|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return 0;
}
function _get_plen307($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $3;
 $data = $4;
 $5 = $data;
 $6 = ((($5)) + 36|0);
 $7 = $2;
 (_hio_read($6,1,64,$7)|0);
 STACKTOP = sp;return 0;
}
function _get_sequ($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 952|0);
 $7 = $2;
 (_hio_read($6,1,128,$7)|0);
 $8 = $0;
 _set_type($8,6688,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _get_patt310($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $data = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $data;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 1;
  $13 = $data;
  $14 = ((($13)) + 24|0);
  HEAP32[$14>>2] = 0;
  $15 = $mod;
  $16 = ((($15)) + 128|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $mod;
  $19 = ((($18)) + 136|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = $mod;
  $23 = ((($22)) + 132|0);
  HEAP32[$23>>2] = $21;
  $24 = $mod;
  $25 = (_pattern_init($24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   $0 = -1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 }
 $27 = $data;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $i = $29;
 $30 = $mod;
 $31 = $i;
 $32 = $i;
 $33 = $data;
 $34 = ((($33)) + 36|0);
 $35 = (($34) + ($32)|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (_pattern_tracks_alloc($30,$31,$37)|0);
 $39 = ($38|0)<(0);
 if ($39) {
  $0 = -1;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $j = 0;
 while(1) {
  $40 = $j;
  $41 = $i;
  $42 = $data;
  $43 = ((($42)) + 36|0);
  $44 = (($43) + ($41)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($40|0)<($46|0);
  if (!($47)) {
   break;
  }
  $k = 0;
  while(1) {
   $48 = $k;
   $49 = $mod;
   $50 = ((($49)) + 136|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($48|0)<($51|0);
   $53 = $j;
   if (!($52)) {
    break;
   }
   $54 = $k;
   $55 = $i;
   $56 = $1;
   $57 = ((($56)) + 168|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + ($55<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 4|0);
   $62 = (($61) + ($54<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $1;
   $65 = ((($64)) + 172|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) + ($63<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 4|0);
   $70 = (($69) + ($53<<3)|0);
   $event = $70;
   $71 = $3;
   $72 = (_hio_read8($71)|0);
   $73 = $event;
   $74 = ((($73)) + 4|0);
   HEAP8[$74>>0] = $72;
   $75 = $3;
   $76 = (_hio_read8($75)|0);
   $77 = $event;
   $78 = ((($77)) + 3|0);
   HEAP8[$78>>0] = $76;
   $79 = $3;
   $80 = (_hio_read8($79)|0);
   $81 = $event;
   $82 = ((($81)) + 1|0);
   HEAP8[$82>>0] = $80;
   $83 = $3;
   $84 = (_hio_read8($83)|0);
   $85 = $event;
   HEAP8[$85>>0] = $84;
   $86 = $event;
   $87 = HEAP8[$86>>0]|0;
   $88 = ($87<<24>>24)!=(0);
   if ($88) {
    $89 = $event;
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = (($91) + 48)|0;
    $93 = $92&255;
    HEAP8[$89>>0] = $93;
   }
   $94 = $event;
   _fix_effect339($94);
   $95 = $k;
   $96 = (($95) + 1)|0;
   $k = $96;
  }
  $97 = (($53) + 1)|0;
  $j = $97;
 }
 $98 = $data;
 $99 = ((($98)) + 24|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[$99>>2] = $101;
 $0 = 0;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function _get_samp312($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $i = 0, $mod = 0, $name_len = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $mod;
   $12 = ((($11)) + 140|0);
   HEAP32[$12>>2] = 36;
   $13 = $mod;
   $14 = ((($13)) + 144|0);
   HEAP32[$14>>2] = 36;
   $15 = $mod;
   $16 = (_instrument_init($15)|0);
   $17 = ($16|0)<(0);
   if (!($17)) {
    $18 = $data;
    $19 = ((($18)) + 16|0);
    HEAP32[$19>>2] = 1;
    $20 = $data;
    $21 = ((($20)) + 20|0);
    HEAP32[$21>>2] = 0;
    break;
   }
   $0 = -1;
   $195 = $0;
   STACKTOP = sp;return ($195|0);
  }
 } while(0);
 $22 = $data;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>=(36);
 if ($25) {
  $0 = 0;
  $195 = $0;
  STACKTOP = sp;return ($195|0);
 }
 $26 = $data;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $i = $28;
 $29 = $i;
 $30 = $mod;
 $31 = ((($30)) + 176|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + (($29*764)|0)|0);
 $34 = ((($33)) + 36|0);
 HEAP32[$34>>2] = 1;
 $35 = $mod;
 $36 = $i;
 $37 = (_subinstrument_alloc($35,$36,1)|0);
 $38 = ($37|0)<(0);
 if ($38) {
  $0 = -1;
  $195 = $0;
  STACKTOP = sp;return ($195|0);
 }
 $39 = $3;
 (_hio_read32l($39)|0);
 $40 = $3;
 $41 = (_hio_read32l($40)|0);
 $name_len = $41;
 $42 = $name_len;
 $43 = ($42|0)<(32);
 if ($43) {
  $44 = $i;
  $45 = $mod;
  $46 = ((($45)) + 176|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($44*764)|0)|0);
  $49 = $name_len;
  $50 = $3;
  (_hio_read($48,1,$49,$50)|0);
 }
 $51 = $3;
 (_hio_read32l($51)|0);
 $52 = $3;
 (_hio_read32l($52)|0);
 $53 = $3;
 $54 = (_hio_read32l($53)|0);
 $55 = $54 & 255;
 $56 = $i;
 $57 = $mod;
 $58 = ((($57)) + 176|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + (($56*764)|0)|0);
 $61 = ((($60)) + 756|0);
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$62>>2] = $55;
 $63 = $3;
 (_hio_read32l($63)|0);
 $64 = $3;
 (_hio_read32l($64)|0);
 $65 = $3;
 $66 = (_hio_read32l($65)|0);
 $67 = $i;
 $68 = $mod;
 $69 = ((($68)) + 180|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + (($67*52)|0)|0);
 $72 = ((($71)) + 32|0);
 HEAP32[$72>>2] = $66;
 $73 = $3;
 (_hio_read32l($73)|0);
 $74 = $3;
 (_hio_read32l($74)|0);
 $75 = $3;
 $76 = (_hio_read32l($75)|0);
 $77 = $i;
 $78 = $mod;
 $79 = ((($78)) + 180|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + (($77*52)|0)|0);
 $82 = ((($81)) + 36|0);
 HEAP32[$82>>2] = $76;
 $83 = $3;
 (_hio_read32l($83)|0);
 $84 = $3;
 (_hio_read32l($84)|0);
 $85 = $3;
 $86 = (_hio_read32l($85)|0);
 $87 = $i;
 $88 = $mod;
 $89 = ((($88)) + 180|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + (($87*52)|0)|0);
 $92 = ((($91)) + 40|0);
 HEAP32[$92>>2] = $86;
 $93 = $3;
 (_hio_read32l($93)|0);
 $94 = $3;
 (_hio_read32l($94)|0);
 $95 = $3;
 (_hio_read32l($95)|0);
 $96 = $i;
 $97 = $i;
 $98 = $mod;
 $99 = ((($98)) + 176|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + (($97*764)|0)|0);
 $102 = ((($101)) + 756|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($103)) + 40|0);
 HEAP32[$104>>2] = $96;
 $105 = $i;
 $106 = $mod;
 $107 = ((($106)) + 176|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + (($105*764)|0)|0);
 $110 = ((($109)) + 756|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 8|0);
 HEAP32[$112>>2] = 128;
 $113 = $1;
 $114 = ((($113)) + 1276|0);
 HEAP32[$114>>2] = 72;
 $115 = $1;
 $116 = ((($115)) + 1268|0);
 HEAP32[$116>>2] = 255;
 $117 = $i;
 $118 = $mod;
 $119 = ((($118)) + 180|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + (($117*52)|0)|0);
 $122 = ((($121)) + 40|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)>(2);
 $125 = $i;
 $126 = $mod;
 $127 = ((($126)) + 180|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + (($125*52)|0)|0);
 if ($124) {
  $130 = ((($129)) + 44|0);
  HEAP32[$130>>2] = 2;
  $131 = $i;
  $132 = $mod;
  $133 = ((($132)) + 180|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + (($131*52)|0)|0);
  $136 = ((($135)) + 36|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $i;
  $139 = $mod;
  $140 = ((($139)) + 180|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + (($138*52)|0)|0);
  $143 = ((($142)) + 40|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($137) + ($144))|0;
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 180|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + (($146*52)|0)|0);
  $151 = ((($150)) + 40|0);
  HEAP32[$151>>2] = $145;
 } else {
  $152 = ((($129)) + 40|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)==(2);
  if ($154) {
   $155 = $i;
   $156 = $mod;
   $157 = ((($156)) + 180|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + (($155*52)|0)|0);
   $160 = ((($159)) + 36|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ($161|0)>(0);
   if ($162) {
    $163 = $i;
    $164 = $mod;
    $165 = ((($164)) + 180|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (($166) + (($163*52)|0)|0);
    $168 = ((($167)) + 44|0);
    HEAP32[$168>>2] = 2;
    $169 = $i;
    $170 = $mod;
    $171 = ((($170)) + 180|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (($172) + (($169*52)|0)|0);
    $174 = ((($173)) + 32|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $i;
    $177 = $mod;
    $178 = ((($177)) + 180|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + (($176*52)|0)|0);
    $181 = ((($180)) + 40|0);
    HEAP32[$181>>2] = $175;
   }
  }
 }
 $182 = $1;
 $183 = $3;
 $184 = $i;
 $185 = $mod;
 $186 = ((($185)) + 180|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = (($187) + (($184*52)|0)|0);
 $189 = (_load_sample($182,$183,128,$188,0)|0);
 $190 = ($189|0)<(0);
 if ($190) {
  $0 = -1;
  $195 = $0;
  STACKTOP = sp;return ($195|0);
 } else {
  $191 = $data;
  $192 = ((($191)) + 20|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + 1)|0;
  HEAP32[$192>>2] = $194;
  $0 = 0;
  $195 = $0;
  STACKTOP = sp;return ($195|0);
 }
 return (0)|0;
}
function _fix_effect339($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e;
 $1 = $0;
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 do {
  switch ($4|0) {
  case 19:  {
   $61 = $0;
   $62 = ((($61)) + 3|0);
   HEAP8[$62>>0] = 11;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $11 = $0;
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $69 = $0;
   $70 = ((($69)) + 3|0);
   HEAP8[$70>>0] = 12;
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $59 = $0;
   $60 = ((($59)) + 3|0);
   HEAP8[$60>>0] = -95;
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $67 = $0;
   $68 = ((($67)) + 3|0);
   HEAP8[$68>>0] = 15;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $63 = $0;
   $64 = ((($63)) + 4|0);
   HEAP8[$64>>0] = 0;
   $65 = $0;
   $66 = ((($65)) + 3|0);
   HEAP8[$66>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $57 = $0;
   $58 = ((($57)) + 3|0);
   HEAP8[$58>>0] = -96;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $15 = $0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)<=(64);
   $20 = $0;
   $21 = ((($20)) + 3|0);
   if ($19) {
    HEAP8[$21>>0] = 12;
    $22 = $0;
    $23 = ((($22)) + 4|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (6792 + ($25)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $0;
    $29 = ((($28)) + 4|0);
    HEAP8[$29>>0] = $27;
    STACKTOP = sp;return;
   } else {
    HEAP8[$21>>0] = 0;
    $30 = $0;
    $31 = ((($30)) + 4|0);
    HEAP8[$31>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 2:  {
   $9 = $0;
   $10 = ((($9)) + 3|0);
   HEAP8[$10>>0] = 2;
   STACKTOP = sp;return;
   break;
  }
  case 25: case 14:  {
   $32 = $0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)>(0);
   if ($36) {
    $37 = $0;
    $38 = ((($37)) + 4|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = ($40|0)<(8);
    if ($41) {
     $42 = $0;
     $43 = ((($42)) + 3|0);
     HEAP8[$43>>0] = 8;
     $44 = $0;
     $45 = ((($44)) + 4|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = ($47*42)|0;
     $49 = (($48) - 40)|0;
     $50 = $49&255;
     $51 = $0;
     $52 = ((($51)) + 4|0);
     HEAP8[$52>>0] = $50;
     STACKTOP = sp;return;
    }
   }
   $53 = $0;
   $54 = ((($53)) + 4|0);
   HEAP8[$54>>0] = 0;
   $55 = $0;
   $56 = ((($55)) + 3|0);
   HEAP8[$56>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $13 = $0;
   $14 = ((($13)) + 3|0);
   HEAP8[$14>>0] = 13;
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $5 = $0;
   $6 = ((($5)) + 3|0);
   HEAP8[$6>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $7 = $0;
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $71 = $0;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = 0;
   $73 = $0;
   $74 = ((($73)) + 3|0);
   HEAP8[$74>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _sym_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $b = 0, $i = 0, $or$cond = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $a = $8;
 $9 = $1;
 $10 = (_hio_read32b($9)|0);
 $b = $10;
 $11 = $a;
 $12 = ($11|0)!=(33624851);
 $13 = $b;
 $14 = ($13|0)!=(336724235);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $15 = $1;
 $16 = (_hio_read8($15)|0);
 $17 = $16&255;
 $ver = $17;
 $18 = $ver;
 $19 = ($18|0)>(1);
 if ($19) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $20 = $1;
 (_hio_read8($20)|0);
 $21 = $1;
 (_hio_read16l($21)|0);
 $22 = $1;
 (_hio_read16l($22)|0);
 $23 = $1;
 (_hio_read24l($23)|0);
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(63);
  $26 = $1;
  if (!($25)) {
   break;
  }
  $27 = (_hio_read8($26)|0);
  $28 = $27&255;
  $29 = $28 ^ -1;
  $30 = $29 & 128;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $1;
   (_hio_read24l($32)|0);
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $2;
 $36 = $1;
 $37 = (_hio_read8($36)|0);
 $38 = $37&255;
 _read_title($26,$35,$38);
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _sym_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $allowed_effects = 0, $b = 0, $b3 = 0, $buf = 0, $buf2 = 0, $event = 0, $i = 0, $idx = 0, $infolen = 0, $j = 0, $looplen = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $parm = 0, $ret = 0, $size = 0, $sn = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $ver = 0, $x = 0, $x1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $sn = sp + 56|0;
 $allowed_effects = sp + 480|0;
 $buf2 = sp + 352|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_seek($7,8,1)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $ver = $10;
 $11 = $1;
 _set_type($11,6880,$vararg_buffer);
 $12 = $2;
 $13 = (_hio_read8($12)|0);
 $14 = $13&255;
 $15 = $mod;
 $16 = ((($15)) + 136|0);
 HEAP32[$16>>2] = $14;
 $17 = $2;
 $18 = (_hio_read16l($17)|0);
 $19 = $18&65535;
 $20 = $mod;
 $21 = ((($20)) + 128|0);
 HEAP32[$21>>2] = $19;
 $22 = $mod;
 $23 = ((($22)) + 156|0);
 HEAP32[$23>>2] = $19;
 $24 = $2;
 $25 = (_hio_read16l($24)|0);
 $26 = $25&65535;
 $27 = $mod;
 $28 = ((($27)) + 132|0);
 HEAP32[$28>>2] = $26;
 $29 = $2;
 $30 = (_hio_read24l($29)|0);
 $infolen = $30;
 $31 = $mod;
 $32 = ((($31)) + 144|0);
 HEAP32[$32>>2] = 63;
 $33 = $mod;
 $34 = ((($33)) + 140|0);
 HEAP32[$34>>2] = 63;
 $35 = $mod;
 $36 = (_instrument_init($35)|0);
 $37 = ($36|0)<(0);
 if ($37) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $mod;
  $40 = ((($39)) + 140|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $mod;
  $44 = $i;
  $45 = (_subinstrument_alloc($43,$44,1)|0);
  $46 = ($45|0)<(0);
  if ($46) {
   label = 6;
   break;
  }
  $47 = $2;
  $48 = (_hio_read8($47)|0);
  $49 = $48&255;
  $50 = $i;
  $51 = (($sn) + ($50<<2)|0);
  HEAP32[$51>>2] = $49;
  $52 = $i;
  $53 = (($sn) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 ^ -1;
  $56 = $55 & 128;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $2;
   $59 = (_hio_read24l($58)|0);
   $60 = $59 << 1;
   $61 = $i;
   $62 = $mod;
   $63 = ((($62)) + 180|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + (($61*52)|0)|0);
   $66 = ((($65)) + 32|0);
   HEAP32[$66>>2] = $60;
   $67 = $i;
   $68 = $mod;
   $69 = ((($68)) + 176|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + (($67*764)|0)|0);
   $72 = ((($71)) + 36|0);
   HEAP32[$72>>2] = 1;
  }
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $75 = $2;
 $76 = (_hio_read8($75)|0);
 $77 = $76&255;
 $a = $77;
 $78 = $mod;
 $79 = $a;
 $80 = $2;
 (_hio_read($78,1,$79,$80)|0);
 $81 = $2;
 (_hio_read($allowed_effects,1,8,$81)|0);
 $82 = $mod;
 $83 = ((($82)) + 132|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + 1)|0;
 HEAP32[$83>>2] = $85;
 $86 = $mod;
 $87 = (_pattern_init($86)|0);
 $88 = ($87|0)<(0);
 if ($88) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $89 = $2;
 $90 = (_hio_read8($89)|0);
 $91 = $90&255;
 $a = $91;
 $92 = $a;
 $93 = ($92|0)!=(0);
 $94 = $a;
 $95 = ($94|0)!=(1);
 $or$cond = $93 & $95;
 if ($or$cond) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $96 = $mod;
 $97 = ((($96)) + 156|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $mod;
 $100 = ((($99)) + 136|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = Math_imul($98, $101)|0;
 $103 = $102<<1;
 $size = $103;
 $104 = $size;
 $105 = (_malloc($104)|0);
 $buf = $105;
 $106 = ($105|0)==(0|0);
 if ($106) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $107 = $a;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $2;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $buf;
  $113 = $size;
  $114 = $size;
  $115 = (_read_lzw_dynamic($111,$112,13,0,$113,$114,31)|0);
  $x = $115;
  $116 = $x;
  $117 = ($116|0)==(0|0);
  if ($117) {
   $118 = $buf;
   _free($118);
   $0 = -1;
   $503 = $0;
   STACKTOP = sp;return ($503|0);
  }
 } else {
  $119 = $buf;
  $120 = $size;
  $121 = $2;
  (_hio_read($119,1,$120,$121)|0);
 }
 $i = 0;
 while(1) {
  $122 = $i;
  $123 = $mod;
  $124 = ((($123)) + 156|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($122|0)<($125|0);
  if (!($126)) {
   break;
  }
  $127 = $mod;
  $128 = $i;
  $129 = (_pattern_alloc($127,$128)|0);
  $130 = ($129|0)<(0);
  if ($130) {
   label = 23;
   break;
  }
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 168|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + ($132<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  HEAP32[$137>>2] = 64;
  $j = 0;
  while(1) {
   $138 = $j;
   $139 = $mod;
   $140 = ((($139)) + 136|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($138|0)<($141|0);
   $143 = $i;
   if (!($142)) {
    break;
   }
   $144 = $mod;
   $145 = ((($144)) + 136|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = Math_imul($143, $146)|0;
   $148 = $j;
   $149 = (($147) + ($148))|0;
   $150 = $149<<1;
   $idx = $150;
   $151 = $idx;
   $152 = $buf;
   $153 = (($152) + ($151)|0);
   $154 = (_readptr16l($153)|0);
   $155 = $j;
   $156 = $i;
   $157 = $mod;
   $158 = ((($157)) + 168|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($159) + ($156<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = ((($161)) + 4|0);
   $163 = (($162) + ($155<<2)|0);
   HEAP32[$163>>2] = $154;
   $164 = $j;
   $165 = $i;
   $166 = $mod;
   $167 = ((($166)) + 168|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + ($165<<2)|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($170)) + 4|0);
   $172 = (($171) + ($164<<2)|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)==(4096);
   if ($174) {
    $175 = $mod;
    $176 = ((($175)) + 132|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($177) - 1)|0;
    $179 = $j;
    $180 = $i;
    $181 = $mod;
    $182 = ((($181)) + 168|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (($183) + ($180<<2)|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ((($185)) + 4|0);
    $187 = (($186) + ($179<<2)|0);
    HEAP32[$187>>2] = $178;
   }
   $188 = $j;
   $189 = (($188) + 1)|0;
   $j = $189;
  }
  $190 = $143&255;
  $191 = $i;
  $192 = $mod;
  $193 = ((($192)) + 952|0);
  $194 = (($193) + ($191)|0);
  HEAP8[$194>>0] = $190;
  $195 = $i;
  $196 = (($195) + 1)|0;
  $i = $196;
 }
 if ((label|0) == 23) {
  $131 = $buf;
  _free($131);
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $197 = $buf;
 _free($197);
 $198 = $2;
 $199 = (_hio_read8($198)|0);
 $200 = $199&255;
 $a = $200;
 $201 = $a;
 $202 = ($201|0)!=(0);
 $203 = $a;
 $204 = ($203|0)!=(1);
 $or$cond3 = $202 & $204;
 if ($or$cond3) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $205 = $mod;
 $206 = ((($205)) + 132|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($207) - 1)|0;
 $209 = $208<<6;
 $210 = $209<<2;
 $size = $210;
 $211 = $size;
 $212 = (_malloc($211)|0);
 $buf = $212;
 $213 = ($212|0)==(0|0);
 if ($213) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $214 = $a;
 $215 = ($214|0)!=(0);
 if ($215) {
  $216 = $2;
  $217 = ((($216)) + 4|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $buf;
  $220 = $size;
  $221 = $size;
  $222 = (_read_lzw_dynamic($218,$219,13,0,$220,$221,31)|0);
  $x1 = $222;
  $223 = $x1;
  $224 = ($223|0)==(0|0);
  if ($224) {
   $225 = $buf;
   _free($225);
   $0 = -1;
   $503 = $0;
   STACKTOP = sp;return ($503|0);
  }
 } else {
  $226 = $buf;
  $227 = $size;
  $228 = $2;
  (_hio_read($226,1,$227,$228)|0);
 }
 $i = 0;
 while(1) {
  $229 = $i;
  $230 = $mod;
  $231 = ((($230)) + 132|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = (($232) - 1)|0;
  $234 = ($229|0)<($233|0);
  if (!($234)) {
   break;
  }
  $235 = $mod;
  $236 = $i;
  $237 = (_track_alloc($235,$236,64)|0);
  $238 = ($237|0)<(0);
  if ($238) {
   label = 41;
   break;
  }
  $j = 0;
  while(1) {
   $240 = $j;
   $241 = $i;
   $242 = $mod;
   $243 = ((($242)) + 172|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + ($241<<2)|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = HEAP32[$246>>2]|0;
   $248 = ($240|0)<($247|0);
   if (!($248)) {
    break;
   }
   $249 = $j;
   $250 = $i;
   $251 = $mod;
   $252 = ((($251)) + 172|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = (($253) + ($250<<2)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 4|0);
   $257 = (($256) + ($249<<3)|0);
   $event = $257;
   $258 = $i;
   $259 = $258<<6;
   $260 = $j;
   $261 = (($259) + ($260))|0;
   $262 = $261<<2;
   $263 = $buf;
   $264 = (($263) + ($262)|0);
   $265 = (_readptr32l($264)|0);
   $b = $265;
   $266 = $b;
   $267 = $266 & 63;
   $268 = $267&255;
   $269 = $event;
   HEAP8[$269>>0] = $268;
   $270 = $event;
   $271 = HEAP8[$270>>0]|0;
   $272 = ($271<<24>>24)!=(0);
   if ($272) {
    $273 = $event;
    $274 = HEAP8[$273>>0]|0;
    $275 = $274&255;
    $276 = (($275) + 48)|0;
    $277 = $276&255;
    HEAP8[$273>>0] = $277;
   }
   $278 = $b;
   $279 = $278 & 8128;
   $280 = $279 >>> 6;
   $281 = $280&255;
   $282 = $event;
   $283 = ((($282)) + 1|0);
   HEAP8[$283>>0] = $281;
   $284 = $b;
   $285 = $284 & 1032192;
   $286 = $285 >>> 14;
   $287 = $286&255;
   $288 = $event;
   $289 = ((($288)) + 3|0);
   HEAP8[$289>>0] = $287;
   $290 = $b;
   $291 = $290 & -1048576;
   $292 = $291 >>> 20;
   $parm = $292;
   $293 = $event;
   $294 = ((($293)) + 3|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = $295&255;
   $297 = $296 >> 3;
   $298 = (($allowed_effects) + ($297)|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = $event;
   $302 = ((($301)) + 3|0);
   $303 = HEAP8[$302>>0]|0;
   $304 = $303&255;
   $305 = $304 & 7;
   $306 = 1 << $305;
   $307 = $300 & $306;
   $308 = ($307|0)!=(0);
   $309 = $event;
   if ($308) {
    $310 = $parm;
    _fix_effect314($309,$310);
   } else {
    $311 = ((($309)) + 3|0);
    HEAP8[$311>>0] = 0;
   }
   $312 = $j;
   $313 = (($312) + 1)|0;
   $j = $313;
  }
  $314 = $i;
  $315 = (($314) + 1)|0;
  $i = $315;
 }
 if ((label|0) == 41) {
  $239 = $buf;
  _free($239);
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $316 = $buf;
 _free($316);
 $317 = $mod;
 $318 = $i;
 $319 = (_track_alloc($317,$318,64)|0);
 $320 = ($319|0)<(0);
 if ($320) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $321 = $i;
  $322 = $mod;
  $323 = ((($322)) + 140|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = ($321|0)<($324|0);
  if (!($325)) {
   break;
  }
  dest=$buf2; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $326 = $i;
  $327 = (($sn) + ($326<<2)|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $328 & 127;
  $330 = $2;
  (_hio_read($buf2,1,$329,$330)|0);
  $331 = $mod;
  $332 = $i;
  (_instrument_name($331,$332,$buf2,32)|0);
  $333 = $i;
  $334 = (($sn) + ($333<<2)|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = $335 ^ -1;
  $337 = $336 & 128;
  $338 = ($337|0)!=(0);
  if ($338) {
   $339 = $2;
   $340 = (_hio_read24l($339)|0);
   $341 = $340 << 1;
   $342 = $i;
   $343 = $mod;
   $344 = ((($343)) + 180|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = (($345) + (($342*52)|0)|0);
   $347 = ((($346)) + 36|0);
   HEAP32[$347>>2] = $341;
   $348 = $2;
   $349 = (_hio_read24l($348)|0);
   $350 = $349 << 1;
   $looplen = $350;
   $351 = $looplen;
   $352 = ($351|0)>(2);
   if ($352) {
    $353 = $i;
    $354 = $mod;
    $355 = ((($354)) + 180|0);
    $356 = HEAP32[$355>>2]|0;
    $357 = (($356) + (($353*52)|0)|0);
    $358 = ((($357)) + 44|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = $359 | 2;
    HEAP32[$358>>2] = $360;
   }
   $361 = $i;
   $362 = $mod;
   $363 = ((($362)) + 180|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($364) + (($361*52)|0)|0);
   $366 = ((($365)) + 36|0);
   $367 = HEAP32[$366>>2]|0;
   $368 = $looplen;
   $369 = (($367) + ($368))|0;
   $370 = $i;
   $371 = $mod;
   $372 = ((($371)) + 180|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = (($373) + (($370*52)|0)|0);
   $375 = ((($374)) + 40|0);
   HEAP32[$375>>2] = $369;
   $376 = $2;
   $377 = (_hio_read8($376)|0);
   $378 = $377&255;
   $379 = $i;
   $380 = $mod;
   $381 = ((($380)) + 176|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = (($382) + (($379*764)|0)|0);
   $384 = ((($383)) + 756|0);
   $385 = HEAP32[$384>>2]|0;
   HEAP32[$385>>2] = $378;
   $386 = $i;
   $387 = $mod;
   $388 = ((($387)) + 176|0);
   $389 = HEAP32[$388>>2]|0;
   $390 = (($389) + (($386*764)|0)|0);
   $391 = ((($390)) + 756|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = ((($392)) + 8|0);
   HEAP32[$393>>2] = 128;
   $394 = $2;
   $395 = (_hio_read8($394)|0);
   $396 = $395&255;
   $397 = $396 << 4;
   $398 = $397&255;
   $399 = $398 << 24 >> 24;
   $400 = $i;
   $401 = $mod;
   $402 = ((($401)) + 176|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = (($403) + (($400*764)|0)|0);
   $405 = ((($404)) + 756|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = ((($406)) + 16|0);
   HEAP32[$407>>2] = $399;
   $408 = $i;
   $409 = $i;
   $410 = $mod;
   $411 = ((($410)) + 176|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = (($412) + (($409*764)|0)|0);
   $414 = ((($413)) + 756|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = ((($415)) + 40|0);
   HEAP32[$416>>2] = $408;
  }
  $417 = $i;
  $418 = (($sn) + ($417<<2)|0);
  $419 = HEAP32[$418>>2]|0;
  $420 = $419 & 128;
  $421 = ($420|0)!=(0);
  if (!($421)) {
   $422 = $i;
   $423 = $mod;
   $424 = ((($423)) + 180|0);
   $425 = HEAP32[$424>>2]|0;
   $426 = (($425) + (($422*52)|0)|0);
   $427 = ((($426)) + 32|0);
   $428 = HEAP32[$427>>2]|0;
   $429 = ($428|0)==(0);
   if (!($429)) {
    $430 = $2;
    $431 = (_hio_read8($430)|0);
    $432 = $431&255;
    $a = $432;
    $433 = $a;
    $434 = ($433|0)!=(0);
    $435 = $a;
    $436 = ($435|0)!=(1);
    $or$cond5 = $434 & $436;
    if ($or$cond5) {
     $437 = HEAP32[_stderr>>2]|0;
     (_fprintf(($437|0),(6904|0),($vararg_buffer6|0))|0);
    }
    $438 = $a;
    $439 = ($438|0)==(1);
    if ($439) {
     $440 = $i;
     $441 = $mod;
     $442 = ((($441)) + 180|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = (($443) + (($440*52)|0)|0);
     $445 = ((($444)) + 32|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = (_malloc($446)|0);
     $b3 = $447;
     $448 = $2;
     $449 = ((($448)) + 4|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = $b3;
     $452 = $i;
     $453 = $mod;
     $454 = ((($453)) + 180|0);
     $455 = HEAP32[$454>>2]|0;
     $456 = (($455) + (($452*52)|0)|0);
     $457 = ((($456)) + 32|0);
     $458 = HEAP32[$457>>2]|0;
     $459 = $i;
     $460 = $mod;
     $461 = ((($460)) + 180|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = (($462) + (($459*52)|0)|0);
     $464 = ((($463)) + 32|0);
     $465 = HEAP32[$464>>2]|0;
     (_read_lzw_dynamic($450,$451,13,0,$458,$465,31)|0);
     $466 = $1;
     $467 = $i;
     $468 = $mod;
     $469 = ((($468)) + 180|0);
     $470 = HEAP32[$469>>2]|0;
     $471 = (($470) + (($467*52)|0)|0);
     $472 = $b3;
     $473 = (_load_sample($466,0,17,$471,$472)|0);
     $ret = $473;
     $474 = $b3;
     _free($474);
    } else {
     $475 = $1;
     $476 = $2;
     $477 = $i;
     $478 = $mod;
     $479 = ((($478)) + 180|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = (($480) + (($477*52)|0)|0);
     $482 = (_load_sample($475,$476,128,$481,0)|0);
     $ret = $482;
    }
    $483 = $ret;
    $484 = ($483|0)<(0);
    if ($484) {
     label = 67;
     break;
    }
   }
  }
  $485 = $i;
  $486 = (($485) + 1)|0;
  $i = $486;
 }
 if ((label|0) == 67) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $487 = $i;
  $488 = $mod;
  $489 = ((($488)) + 136|0);
  $490 = HEAP32[$489>>2]|0;
  $491 = ($487|0)<($490|0);
  if (!($491)) {
   break;
  }
  $492 = $i;
  $493 = (($492) + 3)|0;
  $494 = (($493|0) / 2)&-1;
  $495 = (($494|0) % 2)&-1;
  $496 = ($495*255)|0;
  $497 = $i;
  $498 = $mod;
  $499 = ((($498)) + 184|0);
  $500 = (($499) + (($497*12)|0)|0);
  HEAP32[$500>>2] = $496;
  $501 = $i;
  $502 = (($501) + 1)|0;
  $i = $502;
 }
 $0 = 0;
 $503 = $0;
 STACKTOP = sp;return ($503|0);
}
function _readptr16l($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1|0);
 $0 = $2;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $0 = $6;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $b = $8;
 $9 = $b;
 $10 = $9 << 8;
 $11 = $a;
 $12 = $10 | $11;
 STACKTOP = sp;return ($12|0);
}
function _readptr32l($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1|0);
 $0 = $2;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $0 = $6;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $b = $8;
 $9 = $0;
 $10 = ((($9)) + 1|0);
 $0 = $10;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&255;
 $c = $12;
 $13 = $0;
 $14 = ((($13)) + 1|0);
 $0 = $14;
 $15 = HEAP8[$13>>0]|0;
 $16 = $15&255;
 $d = $16;
 $17 = $d;
 $18 = $17 << 24;
 $19 = $c;
 $20 = $19 << 16;
 $21 = $18 | $20;
 $22 = $b;
 $23 = $22 << 8;
 $24 = $21 | $23;
 $25 = $a;
 $26 = $24 | $25;
 STACKTOP = sp;return ($26|0);
}
function _fix_effect314($e,$parm) {
 $e = $e|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $pitch_effect = 0, $vol_effect = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e;
 $1 = $parm;
 $2 = $0;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 do {
  switch ($5|0) {
  case 28:  {
   $174 = $0;
   $175 = ((($174)) + 3|0);
   HEAP8[$175>>0] = 14;
   $176 = $1;
   $177 = $176 & 15;
   $178 = 192 | $177;
   $179 = $178&255;
   $180 = $0;
   $181 = ((($180)) + 4|0);
   HEAP8[$181>>0] = $179;
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $73 = $0;
   $74 = ((($73)) + 3|0);
   HEAP8[$74>>0] = 14;
   $75 = $1;
   $76 = $75 & 15;
   $77 = 64 | $76;
   $78 = $77&255;
   $79 = $0;
   $80 = ((($79)) + 4|0);
   HEAP8[$80>>0] = $78;
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $234 = $0;
   $235 = ((($234)) + 3|0);
   HEAP8[$235>>0] = 2;
   $236 = $1;
   $237 = $236 & 255;
   $238 = $237&255;
   $239 = $0;
   $240 = ((($239)) + 4|0);
   HEAP8[$240>>0] = $238;
   $241 = $1;
   $242 = $241 >> 8;
   $243 = ($242|0)!=(0);
   if (!($243)) {
    STACKTOP = sp;return;
   }
   $244 = $0;
   $245 = ((($244)) + 5|0);
   HEAP8[$245>>0] = -95;
   $246 = $1;
   $247 = $246 >> 8;
   $248 = $247&255;
   $249 = $0;
   $250 = ((($249)) + 6|0);
   HEAP8[$250>>0] = $248;
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $65 = $0;
   $66 = ((($65)) + 3|0);
   HEAP8[$66>>0] = 14;
   $67 = $1;
   $68 = $67 & 15;
   $69 = 48 | $68;
   $70 = $69&255;
   $71 = $0;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = $70;
   STACKTOP = sp;return;
   break;
  }
  case 2: case 1: case 0:  {
   $6 = $1;
   $7 = $6 & 255;
   $8 = $7&255;
   $9 = $0;
   $10 = ((($9)) + 4|0);
   HEAP8[$10>>0] = $8;
   $11 = $1;
   $12 = $11 >> 8;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    STACKTOP = sp;return;
   }
   $14 = $0;
   $15 = ((($14)) + 5|0);
   HEAP8[$15>>0] = -96;
   $16 = $1;
   $17 = $16 >> 8;
   $18 = $17&255;
   $19 = $0;
   $20 = ((($19)) + 6|0);
   HEAP8[$20>>0] = $18;
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $89 = $0;
   $90 = ((($89)) + 3|0);
   HEAP8[$90>>0] = 14;
   $91 = $1;
   $92 = $91 & 15;
   $93 = 96 | $92;
   $94 = $93&255;
   $95 = $0;
   $96 = ((($95)) + 4|0);
   HEAP8[$96>>0] = $94;
   STACKTOP = sp;return;
   break;
  }
  case 6: case 5:  {
   $25 = $1;
   $26 = $25&255;
   $27 = $0;
   $28 = ((($27)) + 4|0);
   HEAP8[$28>>0] = $26;
   $29 = $1;
   $30 = ($29|0)!=(0);
   if ($30) {
    STACKTOP = sp;return;
   }
   $31 = $0;
   $32 = ((($31)) + 3|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($34) - 2)|0;
   $36 = $35&255;
   HEAP8[$32>>0] = $36;
   STACKTOP = sp;return;
   break;
  }
  case 25:  {
   $105 = $1;
   $106 = ($105|0)<(16);
   $107 = $0;
   $108 = ((($107)) + 3|0);
   if ($106) {
    HEAP8[$108>>0] = 14;
    $109 = $1;
    $110 = $109 & 15;
    $111 = 144 | $110;
    $112 = $111&255;
    $113 = $0;
    $114 = ((($113)) + 4|0);
    HEAP8[$114>>0] = $112;
    STACKTOP = sp;return;
   } else {
    HEAP8[$108>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 30:  {
   $190 = $0;
   $191 = ((($190)) + 3|0);
   HEAP8[$191>>0] = 14;
   $192 = $1;
   $193 = $192 & 15;
   $194 = 224 | $193;
   $195 = $194&255;
   $196 = $0;
   $197 = ((($196)) + 4|0);
   HEAP8[$197>>0] = $195;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $198 = $0;
   $199 = ((($198)) + 3|0);
   HEAP8[$199>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $200 = $0;
   $201 = ((($200)) + 3|0);
   HEAP8[$201>>0] = 0;
   $202 = $1;
   $203 = $202 & 255;
   $204 = $203&255;
   $205 = $0;
   $206 = ((($205)) + 4|0);
   HEAP8[$206>>0] = $204;
   $207 = $1;
   $208 = $207 >> 8;
   $209 = ($208|0)!=(0);
   if (!($209)) {
    STACKTOP = sp;return;
   }
   $210 = $0;
   $211 = ((($210)) + 5|0);
   HEAP8[$211>>0] = -95;
   $212 = $1;
   $213 = $212 >> 8;
   $214 = $213&255;
   $215 = $0;
   $216 = ((($215)) + 6|0);
   HEAP8[$216>>0] = $214;
   STACKTOP = sp;return;
   break;
  }
  case 7: case 4: case 3:  {
   $21 = $1;
   $22 = $21&255;
   $23 = $0;
   $24 = ((($23)) + 4|0);
   HEAP8[$24>>0] = $22;
   STACKTOP = sp;return;
   break;
  }
  case 15: case 13: case 12: case 11:  {
   $61 = $1;
   $62 = $61&255;
   $63 = $0;
   $64 = ((($63)) + 4|0);
   HEAP8[$64>>0] = $62;
   STACKTOP = sp;return;
   break;
  }
  case 27: case 26: case 18: case 17:  {
   $115 = $0;
   $116 = ((($115)) + 3|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = ($118|0)==(17);
   if ($119) {
    $125 = 1;
   } else {
    $120 = $0;
    $121 = ((($120)) + 3|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = ($123|0)==(26);
    $125 = $124;
   }
   $126 = $125 ? 1 : 2;
   $127 = $126&255;
   $pitch_effect = $127;
   $128 = $0;
   $129 = ((($128)) + 3|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = ($131|0)==(17);
   if ($132) {
    $138 = 1;
   } else {
    $133 = $0;
    $134 = ((($133)) + 3|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = ($136|0)==(18);
    $138 = $137;
   }
   $139 = $138 ? 10 : 11;
   $140 = $139&255;
   $vol_effect = $140;
   $141 = $1;
   $142 = $141 & 255;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = $1;
    $145 = $144 & 255;
    $146 = ($145|0)<(16);
    if ($146) {
     $147 = $0;
     $148 = ((($147)) + 3|0);
     HEAP8[$148>>0] = 14;
     $149 = $pitch_effect;
     $150 = $149&255;
     $151 = $150 << 4;
     $152 = $1;
     $153 = $152 & 15;
     $154 = $151 | $153;
     $155 = $154&255;
     $156 = $0;
     $157 = ((($156)) + 4|0);
     HEAP8[$157>>0] = $155;
    } else {
     label = 28;
    }
   } else {
    label = 28;
   }
   if ((label|0) == 28) {
    $158 = $0;
    $159 = ((($158)) + 3|0);
    HEAP8[$159>>0] = 0;
   }
   $160 = $1;
   $161 = $160 >> 8;
   $162 = ($161|0)!=(0);
   if (!($162)) {
    STACKTOP = sp;return;
   }
   $163 = $0;
   $164 = ((($163)) + 5|0);
   HEAP8[$164>>0] = 14;
   $165 = $vol_effect;
   $166 = $165&255;
   $167 = $166 << 4;
   $168 = $1;
   $169 = $168 >> 8;
   $170 = $167 | $169;
   $171 = $170&255;
   $172 = $0;
   $173 = ((($172)) + 6|0);
   HEAP8[$173>>0] = $171;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $182 = $0;
   $183 = ((($182)) + 3|0);
   HEAP8[$183>>0] = 14;
   $184 = $1;
   $185 = $184 & 15;
   $186 = 208 | $185;
   $187 = $186&255;
   $188 = $0;
   $189 = ((($188)) + 4|0);
   HEAP8[$189>>0] = $187;
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $217 = $0;
   $218 = ((($217)) + 3|0);
   HEAP8[$218>>0] = 1;
   $219 = $1;
   $220 = $219 & 255;
   $221 = $220&255;
   $222 = $0;
   $223 = ((($222)) + 4|0);
   HEAP8[$223>>0] = $221;
   $224 = $1;
   $225 = $224 >> 8;
   $226 = ($225|0)!=(0);
   if (!($226)) {
    STACKTOP = sp;return;
   }
   $227 = $0;
   $228 = ((($227)) + 5|0);
   HEAP8[$228>>0] = -95;
   $229 = $1;
   $230 = $229 >> 8;
   $231 = $230&255;
   $232 = $0;
   $233 = ((($232)) + 6|0);
   HEAP8[$233>>0] = $231;
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $251 = $1;
   $252 = ($251|0)>=(256);
   $253 = $1;
   $254 = ($253|0)<=(2048);
   $or$cond = $252 & $254;
   if (!($or$cond)) {
    STACKTOP = sp;return;
   }
   $255 = $0;
   $256 = ((($255)) + 3|0);
   HEAP8[$256>>0] = 15;
   $257 = $1;
   $258 = (($257) + 4)|0;
   $259 = $258 >> 3;
   $260 = $259&255;
   $261 = $0;
   $262 = ((($261)) + 4|0);
   HEAP8[$262>>0] = $260;
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $97 = $0;
   $98 = ((($97)) + 3|0);
   HEAP8[$98>>0] = 14;
   $99 = $1;
   $100 = $99 & 15;
   $101 = 112 | $100;
   $102 = $101&255;
   $103 = $0;
   $104 = ((($103)) + 4|0);
   HEAP8[$104>>0] = $102;
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $37 = $1;
   $38 = $37 >> 1;
   $39 = $38&255;
   $40 = $0;
   $41 = ((($40)) + 4|0);
   HEAP8[$41>>0] = $39;
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $42 = $1;
   $43 = $42 & 255;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $1;
    $46 = $45 & 255;
    $47 = $46&255;
    $48 = $0;
    $49 = ((($48)) + 4|0);
    HEAP8[$49>>0] = $47;
   } else {
    $50 = $0;
    $51 = ((($50)) + 3|0);
    HEAP8[$51>>0] = 0;
   }
   $52 = $0;
   $53 = ((($52)) + 5|0);
   HEAP8[$53>>0] = 14;
   $54 = $1;
   $55 = $54 & 3840;
   $56 = $55 >> 8;
   $57 = 16 | $56;
   $58 = $57&255;
   $59 = $0;
   $60 = ((($59)) + 6|0);
   HEAP8[$60>>0] = $58;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $81 = $0;
   $82 = ((($81)) + 3|0);
   HEAP8[$82>>0] = 14;
   $83 = $1;
   $84 = $83 & 15;
   $85 = 80 | $84;
   $86 = $85&255;
   $87 = $0;
   $88 = ((($87)) + 4|0);
   HEAP8[$88>>0] = $86;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $263 = $0;
   $264 = ((($263)) + 3|0);
   HEAP8[$264>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _med2_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1296385026);
 if ($6) {
  $0 = -1;
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,0);
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _med2_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $event = 0, $found = 0, $i = 0, $ins_path = 0, $j = 0, $k = 0, $lsiz = 0, $mod = 0, $name = 0, $or$cond = 0, $path = 0, $ret = 0, $s = 0, $sliding = 0, $stat = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr4 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 4768|0;
 $path = sp + 664|0;
 $ins_path = sp + 408|0;
 $name = sp + 152|0;
 $stat = sp + 24|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1296385026);
 if ($9) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $10 = $1;
 _set_type($10,6960,$vararg_buffer);
 $11 = $mod;
 $12 = ((($11)) + 144|0);
 HEAP32[$12>>2] = 32;
 $13 = $mod;
 $14 = ((($13)) + 140|0);
 HEAP32[$14>>2] = 32;
 $15 = $mod;
 $16 = (_instrument_init($15)|0);
 $17 = ($16|0)<(0);
 if ($17) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $18 = $2;
 (_hio_read($buf,1,40,$18)|0);
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = ($19|0)<(31);
  if (!($20)) {
   break;
  }
  $21 = $2;
  (_hio_read($buf,1,40,$21)|0);
  $22 = $mod;
  $23 = $i;
  (_instrument_name($22,$23,$buf,32)|0);
  $24 = $mod;
  $25 = $i;
  $26 = (_subinstrument_alloc($24,$25,1)|0);
  $27 = ($26|0)<(0);
  if ($27) {
   label = 8;
   break;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $30 = $2;
 (_hio_read8($30)|0);
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = ($31|0)<(31);
  $33 = $2;
  if (!($32)) {
   break;
  }
  $34 = (_hio_read8($33)|0);
  $35 = $34&255;
  $36 = $i;
  $37 = $mod;
  $38 = ((($37)) + 176|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($36*764)|0)|0);
  $41 = ((($40)) + 756|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$42>>2] = $35;
  $43 = $i;
  $44 = $mod;
  $45 = ((($44)) + 176|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + (($43*764)|0)|0);
  $48 = ((($47)) + 756|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 8|0);
  HEAP32[$50>>2] = 128;
  $51 = $i;
  $52 = $mod;
  $53 = ((($52)) + 176|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + (($51*764)|0)|0);
  $56 = ((($55)) + 756|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 16|0);
  HEAP32[$58>>2] = 0;
  $59 = $i;
  $60 = $i;
  $61 = $mod;
  $62 = ((($61)) + 176|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + (($60*764)|0)|0);
  $65 = ((($64)) + 756|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 40|0);
  HEAP32[$67>>2] = $59;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 (_hio_read16b($33)|0);
 $i = 0;
 while(1) {
  $70 = $i;
  $71 = ($70|0)<(31);
  $72 = $2;
  $73 = (_hio_read16b($72)|0);
  if (!($71)) {
   break;
  }
  $74 = $73&65535;
  $75 = $i;
  $76 = $mod;
  $77 = ((($76)) + 180|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + (($75*52)|0)|0);
  $80 = ((($79)) + 36|0);
  HEAP32[$80>>2] = $74;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $i = 0;
 while(1) {
  $83 = $i;
  $84 = ($83|0)<(31);
  if (!($84)) {
   break;
  }
  $85 = $2;
  $86 = (_hio_read16b($85)|0);
  $87 = $86&65535;
  $lsiz = $87;
  $88 = $i;
  $89 = $mod;
  $90 = ((($89)) + 180|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + (($88*52)|0)|0);
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $lsiz;
  $96 = (($94) + ($95))|0;
  $97 = $i;
  $98 = $mod;
  $99 = ((($98)) + 180|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + (($97*52)|0)|0);
  $102 = ((($101)) + 40|0);
  HEAP32[$102>>2] = $96;
  $103 = $lsiz;
  $104 = ($103>>>0)>(1);
  $105 = $104 ? 2 : 0;
  $106 = $i;
  $107 = $mod;
  $108 = ((($107)) + 180|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + (($106*52)|0)|0);
  $111 = ((($110)) + 44|0);
  HEAP32[$111>>2] = $105;
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 $114 = $mod;
 $115 = ((($114)) + 136|0);
 HEAP32[$115>>2] = 4;
 $116 = $2;
 $117 = (_hio_read16b($116)|0);
 $118 = $117&65535;
 $119 = $mod;
 $120 = ((($119)) + 128|0);
 HEAP32[$120>>2] = $118;
 $121 = $mod;
 $122 = ((($121)) + 136|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $mod;
 $125 = ((($124)) + 128|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = Math_imul($123, $126)|0;
 $128 = $mod;
 $129 = ((($128)) + 132|0);
 HEAP32[$129>>2] = $127;
 $130 = $mod;
 $131 = ((($130)) + 952|0);
 $132 = $2;
 (_hio_read($131,1,100,$132)|0);
 $133 = $2;
 $134 = (_hio_read16b($133)|0);
 $135 = $134&65535;
 $136 = $mod;
 $137 = ((($136)) + 156|0);
 HEAP32[$137>>2] = $135;
 $138 = $2;
 $139 = (_hio_read16b($138)|0);
 $140 = $139&65535;
 $141 = (192 / ($140|0))&-1;
 $142 = $mod;
 $143 = ((($142)) + 148|0);
 HEAP32[$143>>2] = $141;
 $144 = $2;
 (_hio_read16b($144)|0);
 $145 = $2;
 $146 = (_hio_read16b($145)|0);
 $147 = $146&65535;
 $sliding = $147;
 $148 = $2;
 (_hio_read32b($148)|0);
 $149 = $2;
 (_hio_seek($149,16,1)|0);
 $150 = $sliding;
 $151 = ($150|0)==(6);
 if ($151) {
  $152 = $1;
  $153 = ((($152)) + 1280|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $154 | 192;
  HEAP32[$153>>2] = $155;
 }
 $156 = $mod;
 $157 = (_pattern_init($156)|0);
 $158 = ($157|0)<(0);
 if ($158) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $i = 0;
 while(1) {
  $159 = $i;
  $160 = $mod;
  $161 = ((($160)) + 128|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($159|0)<($162|0);
  if (!($163)) {
   break;
  }
  $164 = $mod;
  $165 = $i;
  $166 = (_pattern_tracks_alloc($164,$165,64)|0);
  $167 = ($166|0)<(0);
  if ($167) {
   label = 26;
   break;
  }
  $168 = $2;
  (_hio_read32b($168)|0);
  $j = 0;
  while(1) {
   $169 = $j;
   $170 = ($169|0)<(64);
   if (!($170)) {
    break;
   }
   $k = 0;
   while(1) {
    $171 = $k;
    $172 = ($171|0)<(4);
    $173 = $j;
    if (!($172)) {
     break;
    }
    $174 = $k;
    $175 = $i;
    $176 = $1;
    $177 = ((($176)) + 168|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (($178) + ($175<<2)|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ((($180)) + 4|0);
    $182 = (($181) + ($174<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = $1;
    $185 = ((($184)) + 172|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + ($183<<2)|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ((($188)) + 4|0);
    $190 = (($189) + ($173<<3)|0);
    $event = $190;
    $191 = $2;
    $192 = (_hio_read16b($191)|0);
    $193 = $192&65535;
    $194 = (_period_to_note($193)|0);
    $195 = $194&255;
    $196 = $event;
    HEAP8[$196>>0] = $195;
    $197 = $2;
    $198 = (_hio_read8($197)|0);
    $x = $198;
    $199 = $x;
    $200 = $199&255;
    $201 = $200 >> 4;
    $202 = $201&255;
    $203 = $event;
    $204 = ((($203)) + 1|0);
    HEAP8[$204>>0] = $202;
    $205 = $x;
    $206 = $205&255;
    $207 = $206 & 15;
    $208 = $207&255;
    $209 = $event;
    $210 = ((($209)) + 3|0);
    HEAP8[$210>>0] = $208;
    $211 = $2;
    $212 = (_hio_read8($211)|0);
    $213 = $event;
    $214 = ((($213)) + 4|0);
    HEAP8[$214>>0] = $212;
    $215 = $event;
    $216 = ((($215)) + 3|0);
    $217 = HEAP8[$216>>0]|0;
    $218 = $217&255;
    if ((($218|0) == 15)) {
     $221 = $event;
     $222 = ((($221)) + 3|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = (192 / ($224|0))&-1;
     $226 = $225&255;
     $227 = $event;
     $228 = ((($227)) + 3|0);
     HEAP8[$228>>0] = $226;
    } else if ((($218|0) == 13) | (($218|0) == 14)) {
     $219 = $event;
     $220 = ((($219)) + 3|0);
     HEAP8[$220>>0] = 10;
    }
    $229 = $k;
    $230 = (($229) + 1)|0;
    $k = $230;
   }
   $231 = (($173) + 1)|0;
   $j = $231;
  }
  $232 = $i;
  $233 = (($232) + 1)|0;
  $i = $233;
 }
 if ((label|0) == 26) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $i = 0;
 while(1) {
  $234 = $i;
  $235 = ($234|0)<(31);
  if (!($235)) {
   label = 50;
   break;
  }
  $s = 0;
  $236 = $1;
  _get_instrument_path($236,$ins_path,256);
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 176|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*764)|0)|0);
  $242 = (_check_filename_case($ins_path,$241,$name,256)|0);
  $found = $242;
  $243 = $found;
  $244 = ($243|0)!=(0);
  if ($244) {
   HEAP32[$vararg_buffer2>>2] = $ins_path;
   $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $name;
   (_snprintf($path,4096,6976,$vararg_buffer2)|0);
   $245 = (_hio_open($path,8192)|0);
   $s = $245;
   $246 = ($245|0)!=(0|0);
   if ($246) {
    $247 = $s;
    (_hio_stat($247,$stat)|0);
    $248 = ((($stat)) + 36|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $i;
    $251 = $mod;
    $252 = ((($251)) + 180|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + (($250*52)|0)|0);
    $255 = ((($254)) + 32|0);
    HEAP32[$255>>2] = $249;
   }
  }
  $256 = $i;
  $257 = $mod;
  $258 = ((($257)) + 180|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($259) + (($256*52)|0)|0);
  $261 = ((($260)) + 32|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = ($262|0)>(0);
  if ($263) {
   $264 = $i;
   $265 = $mod;
   $266 = ((($265)) + 176|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = (($267) + (($264*764)|0)|0);
   $269 = ((($268)) + 36|0);
   HEAP32[$269>>2] = 1;
  }
  $270 = $i;
  $271 = $mod;
  $272 = ((($271)) + 176|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($273) + (($270*764)|0)|0);
  $275 = (_strlen(($274|0))|0);
  $276 = ($275|0)!=(0);
  if ($276) {
   $$old = $found;
   $$old1 = ($$old|0)!=(0);
   if ($$old1) {
    label = 47;
   }
  } else {
   $277 = $i;
   $278 = $mod;
   $279 = ((($278)) + 180|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = (($280) + (($277*52)|0)|0);
   $282 = ((($281)) + 32|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = ($283|0)!=(0);
   $285 = $found;
   $286 = ($285|0)!=(0);
   $or$cond = $284 & $286;
   if ($or$cond) {
    label = 47;
   }
  }
  if ((label|0) == 47) {
   label = 0;
   $287 = $1;
   $288 = $s;
   $289 = $i;
   $290 = $mod;
   $291 = ((($290)) + 180|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (($292) + (($289*52)|0)|0);
   $294 = (_load_sample($287,$288,0,$293,0)|0);
   $ret = $294;
   $295 = $s;
   (_hio_close($295)|0);
   $296 = $ret;
   $297 = ($296|0)<(0);
   if ($297) {
    label = 48;
    break;
   }
  }
  $298 = $i;
  $299 = (($298) + 1)|0;
  $i = $299;
 }
 if ((label|0) == 48) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 else if ((label|0) == 50) {
  $0 = 0;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 return (0)|0;
}
function _med3_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1296385027);
 if ($6) {
  $0 = -1;
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,0);
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _med3_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0, $c = 0, $conv = 0, $convsz = 0, $i = 0, $j = 0, $lsiz = 0, $mask = 0, $mod = 0, $sliding = 0;
 var $tracks = 0, $transp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 56|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $1;
 _set_type($8,7000,$vararg_buffer);
 $9 = $mod;
 $10 = ((($9)) + 144|0);
 HEAP32[$10>>2] = 32;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 HEAP32[$12>>2] = 32;
 $13 = $mod;
 $14 = (_instrument_init($13)|0);
 $15 = ($14|0)<(0);
 if ($15) {
  $0 = -1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(32);
  if (!($17)) {
   break;
  }
  $j = 0;
  while(1) {
   $18 = $j;
   $19 = ($18|0)<(40);
   if (!($19)) {
    break;
   }
   $20 = $2;
   $21 = (_hio_read8($20)|0);
   $c = $21;
   $22 = $c;
   $23 = $j;
   $24 = (($buf) + ($23)|0);
   HEAP8[$24>>0] = $22;
   $25 = $c;
   $26 = $25&255;
   $27 = ($26|0)==(0);
   if ($27) {
    break;
   }
   $28 = $j;
   $29 = (($28) + 1)|0;
   $j = $29;
  }
  $30 = $mod;
  $31 = $i;
  (_instrument_name($30,$31,$buf,32)|0);
  $32 = $mod;
  $33 = $i;
  $34 = (_subinstrument_alloc($32,$33,1)|0);
  $35 = ($34|0)<(0);
  if ($35) {
   label = 10;
   break;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 $38 = $2;
 $39 = (_hio_read32b($38)|0);
 $mask = $39;
 $i = 0;
 while(1) {
  $40 = $i;
  $41 = ($40|0)<(32);
  if (!($41)) {
   break;
  }
  $42 = $mask;
  $43 = $42 & -2147483648;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $2;
   $46 = (_hio_read8($45)|0);
   $47 = $46&255;
   $55 = $47;
  } else {
   $55 = 0;
  }
  $48 = $i;
  $49 = $mod;
  $50 = ((($49)) + 176|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($48*764)|0)|0);
  $53 = ((($52)) + 756|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$54>>2] = $55;
  $56 = $i;
  $57 = $mod;
  $58 = ((($57)) + 176|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + (($56*764)|0)|0);
  $61 = ((($60)) + 756|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 8|0);
  HEAP32[$63>>2] = 128;
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 176|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + (($64*764)|0)|0);
  $69 = ((($68)) + 756|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 16|0);
  HEAP32[$71>>2] = 0;
  $72 = $i;
  $73 = $i;
  $74 = $mod;
  $75 = ((($74)) + 176|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + (($73*764)|0)|0);
  $78 = ((($77)) + 756|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 40|0);
  HEAP32[$80>>2] = $72;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
  $83 = $mask;
  $84 = $83 << 1;
  $mask = $84;
 }
 $85 = $2;
 $86 = (_hio_read32b($85)|0);
 $mask = $86;
 $i = 0;
 while(1) {
  $87 = $i;
  $88 = ($87|0)<(32);
  if (!($88)) {
   break;
  }
  $89 = $mask;
  $90 = $89 & -2147483648;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $2;
   $93 = (_hio_read16b($92)|0);
   $94 = $93&65535;
   $101 = $94;
  } else {
   $101 = 0;
  }
  $95 = $i;
  $96 = $mod;
  $97 = ((($96)) + 180|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($95*52)|0)|0);
  $100 = ((($99)) + 36|0);
  HEAP32[$100>>2] = $101;
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
  $104 = $mask;
  $105 = $104 << 1;
  $mask = $105;
 }
 $106 = $2;
 $107 = (_hio_read32b($106)|0);
 $mask = $107;
 $i = 0;
 while(1) {
  $108 = $i;
  $109 = ($108|0)<(32);
  if (!($109)) {
   break;
  }
  $110 = $mask;
  $111 = $110 & -2147483648;
  $112 = ($111|0)!=(0);
  if ($112) {
   $113 = $2;
   $114 = (_hio_read16b($113)|0);
   $115 = $114&65535;
   $116 = $115;
  } else {
   $116 = 0;
  }
  $lsiz = $116;
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 180|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($117*52)|0)|0);
  $122 = ((($121)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $lsiz;
  $125 = (($123) + ($124))|0;
  $126 = $i;
  $127 = $mod;
  $128 = ((($127)) + 180|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + (($126*52)|0)|0);
  $131 = ((($130)) + 32|0);
  HEAP32[$131>>2] = $125;
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 180|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + (($132*52)|0)|0);
  $137 = ((($136)) + 36|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $lsiz;
  $140 = (($138) + ($139))|0;
  $141 = $i;
  $142 = $mod;
  $143 = ((($142)) + 180|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + (($141*52)|0)|0);
  $146 = ((($145)) + 40|0);
  HEAP32[$146>>2] = $140;
  $147 = $lsiz;
  $148 = ($147>>>0)>(1);
  $149 = $148 ? 2 : 0;
  $150 = $i;
  $151 = $mod;
  $152 = ((($151)) + 180|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + (($150*52)|0)|0);
  $155 = ((($154)) + 44|0);
  HEAP32[$155>>2] = $149;
  $156 = $i;
  $157 = (($156) + 1)|0;
  $i = $157;
  $158 = $mask;
  $159 = $158 << 1;
  $mask = $159;
 }
 $160 = $mod;
 $161 = ((($160)) + 136|0);
 HEAP32[$161>>2] = 4;
 $162 = $2;
 $163 = (_hio_read16b($162)|0);
 $164 = $163&65535;
 $165 = $mod;
 $166 = ((($165)) + 128|0);
 HEAP32[$166>>2] = $164;
 $167 = $mod;
 $168 = ((($167)) + 136|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $mod;
 $171 = ((($170)) + 128|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = Math_imul($169, $172)|0;
 $174 = $mod;
 $175 = ((($174)) + 132|0);
 HEAP32[$175>>2] = $173;
 $176 = $2;
 $177 = (_hio_read16b($176)|0);
 $178 = $177&65535;
 $179 = $mod;
 $180 = ((($179)) + 156|0);
 HEAP32[$180>>2] = $178;
 $181 = $mod;
 $182 = ((($181)) + 952|0);
 $183 = $mod;
 $184 = ((($183)) + 156|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $2;
 (_hio_read($182,1,$185,$186)|0);
 $187 = $2;
 $188 = (_hio_read16b($187)|0);
 $189 = $188&65535;
 $190 = $mod;
 $191 = ((($190)) + 148|0);
 HEAP32[$191>>2] = $189;
 $192 = $mod;
 $193 = ((($192)) + 148|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ($194|0)>(10);
 if ($195) {
  $196 = $mod;
  $197 = ((($196)) + 148|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($198*125)|0;
  $200 = (($199|0) / 33)&-1;
  $201 = $mod;
  $202 = ((($201)) + 152|0);
  HEAP32[$202>>2] = $200;
  $203 = $mod;
  $204 = ((($203)) + 148|0);
  HEAP32[$204>>2] = 6;
 }
 $205 = $2;
 $206 = (_hio_read8s($205)|0);
 $207 = $206 << 24 >> 24;
 $transp = $207;
 $208 = $2;
 (_hio_read8($208)|0);
 $209 = $2;
 $210 = (_hio_read16b($209)|0);
 $211 = $210&65535;
 $sliding = $211;
 $212 = $2;
 (_hio_read32b($212)|0);
 $213 = $2;
 (_hio_seek($213,16,1)|0);
 $214 = $2;
 $215 = (_hio_read32b($214)|0);
 $mask = $215;
 $i = 0;
 while(1) {
  $216 = $i;
  $217 = ($216|0)<(32);
  if (!($217)) {
   break;
  }
  $218 = $mask;
  $219 = $218 & -2147483648;
  $220 = ($219|0)!=(0);
  if ($220) {
   $221 = $2;
   (_hio_read8($221)|0);
  }
  $222 = $i;
  $223 = (($222) + 1)|0;
  $i = $223;
  $224 = $mask;
  $225 = $224 << 1;
  $mask = $225;
 }
 $226 = $2;
 $227 = (_hio_read32b($226)|0);
 $mask = $227;
 $i = 0;
 while(1) {
  $228 = $i;
  $229 = ($228|0)<(32);
  if (!($229)) {
   break;
  }
  $230 = $mask;
  $231 = $230 & -2147483648;
  $232 = ($231|0)!=(0);
  if ($232) {
   $233 = $2;
   (_hio_read8($233)|0);
  }
  $234 = $i;
  $235 = (($234) + 1)|0;
  $i = $235;
  $236 = $mask;
  $237 = $236 << 1;
  $mask = $237;
 }
 $238 = $sliding;
 $239 = ($238|0)==(6);
 if ($239) {
  $240 = $1;
  $241 = ((($240)) + 1280|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = $242 | 192;
  HEAP32[$241>>2] = $243;
 }
 $i = 0;
 while(1) {
  $244 = $i;
  $245 = ($244|0)<(32);
  if (!($245)) {
   break;
  }
  $246 = $transp;
  $247 = $i;
  $248 = $mod;
  $249 = ((($248)) + 176|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($250) + (($247*764)|0)|0);
  $252 = ((($251)) + 756|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = ((($253)) + 12|0);
  HEAP32[$254>>2] = $246;
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 $257 = $mod;
 $258 = (_pattern_init($257)|0);
 $259 = ($258|0)<(0);
 if ($259) {
  $0 = -1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 $i = 0;
 while(1) {
  $260 = $i;
  $261 = $mod;
  $262 = ((($261)) + 128|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($260|0)<($263|0);
  if (!($264)) {
   label = 75;
   break;
  }
  $265 = $mod;
  $266 = $i;
  $267 = (_pattern_tracks_alloc($265,$266,64)|0);
  $268 = ($267|0)<(0);
  if ($268) {
   label = 49;
   break;
  }
  $269 = $2;
  $270 = (_hio_read8($269)|0);
  $tracks = $270;
  $271 = $2;
  $272 = (_hio_read8($271)|0);
  $b = $272;
  $273 = $2;
  $274 = (_hio_read16b($273)|0);
  $convsz = $274;
  $275 = $convsz;
  $276 = $275&65535;
  $277 = (($276) + 16)|0;
  $278 = (_calloc(1,$277)|0);
  $conv = $278;
  $279 = $conv;
  $280 = ($279|0)==(0|0);
  if ($280) {
   label = 51;
   break;
  }
  $281 = $b;
  $282 = $281&255;
  $283 = $282 & 16;
  $284 = ($283|0)!=(0);
  do {
   if ($284) {
    $285 = $conv;
    HEAP32[$285>>2] = 0;
   } else {
    $286 = $b;
    $287 = $286&255;
    $288 = $287 & 1;
    $289 = ($288|0)!=(0);
    if ($289) {
     $290 = $conv;
     HEAP32[$290>>2] = -1;
     break;
    } else {
     $291 = $2;
     $292 = (_hio_read32b($291)|0);
     $293 = $conv;
     HEAP32[$293>>2] = $292;
     break;
    }
   }
  } while(0);
  $294 = $b;
  $295 = $294&255;
  $296 = $295 & 32;
  $297 = ($296|0)!=(0);
  do {
   if ($297) {
    $298 = $conv;
    $299 = ((($298)) + 4|0);
    HEAP32[$299>>2] = 0;
   } else {
    $300 = $b;
    $301 = $300&255;
    $302 = $301 & 2;
    $303 = ($302|0)!=(0);
    if ($303) {
     $304 = $conv;
     $305 = ((($304)) + 4|0);
     HEAP32[$305>>2] = -1;
     break;
    } else {
     $306 = $2;
     $307 = (_hio_read32b($306)|0);
     $308 = $conv;
     $309 = ((($308)) + 4|0);
     HEAP32[$309>>2] = $307;
     break;
    }
   }
  } while(0);
  $310 = $b;
  $311 = $310&255;
  $312 = $311 & 64;
  $313 = ($312|0)!=(0);
  do {
   if ($313) {
    $314 = $conv;
    $315 = ((($314)) + 8|0);
    HEAP32[$315>>2] = 0;
   } else {
    $316 = $b;
    $317 = $316&255;
    $318 = $317 & 4;
    $319 = ($318|0)!=(0);
    if ($319) {
     $320 = $conv;
     $321 = ((($320)) + 8|0);
     HEAP32[$321>>2] = -1;
     break;
    } else {
     $322 = $2;
     $323 = (_hio_read32b($322)|0);
     $324 = $conv;
     $325 = ((($324)) + 8|0);
     HEAP32[$325>>2] = $323;
     break;
    }
   }
  } while(0);
  $326 = $b;
  $327 = $326&255;
  $328 = $327 & 128;
  $329 = ($328|0)!=(0);
  do {
   if ($329) {
    $330 = $conv;
    $331 = ((($330)) + 12|0);
    HEAP32[$331>>2] = 0;
   } else {
    $332 = $b;
    $333 = $332&255;
    $334 = $333 & 8;
    $335 = ($334|0)!=(0);
    if ($335) {
     $336 = $conv;
     $337 = ((($336)) + 12|0);
     HEAP32[$337>>2] = -1;
     break;
    } else {
     $338 = $2;
     $339 = (_hio_read32b($338)|0);
     $340 = $conv;
     $341 = ((($340)) + 12|0);
     HEAP32[$341>>2] = $339;
     break;
    }
   }
  } while(0);
  $342 = $conv;
  $343 = ((($342)) + 16|0);
  $344 = $convsz;
  $345 = $344&65535;
  $346 = $2;
  (_hio_read($343,1,$345,$346)|0);
  $347 = $1;
  $348 = $i;
  $349 = $348&65535;
  $350 = $conv;
  $351 = (_unpack_block($347,$349,$350)|0);
  $352 = ($351|0)<(0);
  $353 = $conv;
  _free($353);
  if ($352) {
   label = 73;
   break;
  }
  $354 = $i;
  $355 = (($354) + 1)|0;
  $i = $355;
 }
 if ((label|0) == 49) {
  $0 = -1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 51) {
  $0 = -1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 73) {
  $0 = -1;
  $408 = $0;
  STACKTOP = sp;return ($408|0);
 }
 else if ((label|0) == 75) {
  $356 = $2;
  $357 = (_hio_read32b($356)|0);
  $mask = $357;
  $i = 0;
  while(1) {
   $358 = $i;
   $359 = ($358|0)<(32);
   if (!($359)) {
    label = 84;
    break;
   }
   $360 = $mask;
   $361 = $360 ^ -1;
   $362 = $361 & -2147483648;
   $363 = ($362|0)!=(0);
   if (!($363)) {
    $364 = $i;
    $365 = $mod;
    $366 = ((($365)) + 176|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = (($367) + (($364*764)|0)|0);
    $369 = ((($368)) + 36|0);
    HEAP32[$369>>2] = 1;
    $370 = $2;
    $371 = (_hio_read32b($370)|0);
    $372 = $i;
    $373 = $mod;
    $374 = ((($373)) + 180|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + (($372*52)|0)|0);
    $377 = ((($376)) + 32|0);
    HEAP32[$377>>2] = $371;
    $378 = $i;
    $379 = $mod;
    $380 = ((($379)) + 180|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = (($381) + (($378*52)|0)|0);
    $383 = ((($382)) + 32|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = ($384|0)==(0);
    if ($385) {
     $386 = $i;
     $387 = $mod;
     $388 = ((($387)) + 176|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = (($389) + (($386*764)|0)|0);
     $391 = ((($390)) + 36|0);
     HEAP32[$391>>2] = 0;
    }
    $392 = $2;
    $393 = (_hio_read16b($392)|0);
    $394 = ($393<<16>>16)!=(0);
    if (!($394)) {
     $395 = $1;
     $396 = $2;
     $397 = $i;
     $398 = $mod;
     $399 = ((($398)) + 180|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = (($400) + (($397*52)|0)|0);
     $402 = (_load_sample($395,$396,0,$401,0)|0);
     $403 = ($402|0)<(0);
     if ($403) {
      label = 82;
      break;
     }
    }
   }
   $404 = $i;
   $405 = (($404) + 1)|0;
   $i = $405;
   $406 = $mask;
   $407 = $406 << 1;
   $mask = $407;
  }
  if ((label|0) == 82) {
   $0 = -1;
   $408 = $0;
   STACKTOP = sp;return ($408|0);
  }
  else if ((label|0) == 84) {
   $0 = 0;
   $408 = $0;
   STACKTOP = sp;return ($408|0);
  }
 }
 return (0)|0;
}
function _unpack_block($m,$bnum,$from) {
 $m = $m|0;
 $bnum = $bnum|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bcnt = 0, $event = 0, $fromn = 0, $fromst = 0, $fxmsk0 = 0, $fxmsk1 = 0, $fxptr = 0;
 var $i = 0, $j = 0, $linemsk0 = 0, $linemsk1 = 0, $lmptr = 0, $lmsk = 0, $mod = 0, $patbuf = 0, $tmpto = 0, $to = 0, $trkn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $linemsk0 = sp + 48|0;
 $linemsk1 = sp + 44|0;
 $fxmsk0 = sp + 40|0;
 $fxmsk1 = sp + 36|0;
 $fromn = sp + 74|0;
 $1 = $m;
 $2 = $bnum;
 $3 = $from;
 $4 = $1;
 $mod = $4;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$linemsk0>>2] = $6;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$linemsk1>>2] = $9;
 $10 = $3;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$fxmsk0>>2] = $12;
 $13 = $3;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$fxmsk1>>2] = $15;
 $lmptr = $linemsk0;
 $fxptr = $fxmsk0;
 HEAP16[$fromn>>1] = 0;
 $16 = $3;
 $17 = ((($16)) + 16|0);
 $fromst = $17;
 $18 = $mod;
 $19 = ((($18)) + 136|0);
 $20 = HEAP32[$19>>2]|0;
 $trkn = $20;
 $21 = (_calloc(3,256)|0);
 $to = $21;
 $patbuf = $21;
 $22 = $to;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(64);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = ($26|0)==(32);
  if ($27) {
   $lmptr = $linemsk1;
   $fxptr = $fxmsk1;
  }
  $28 = $lmptr;
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & -2147483648;
  $31 = ($30|0)!=(0);
  L11: do {
   if ($31) {
    $32 = $fromst;
    $33 = $trkn;
    $34 = (($33|0) / 4)&-1;
    $35 = $34&255;
    $36 = (_get_nibbles($32,$fromn,$35)|0);
    $lmsk = $36;
    $37 = $trkn;
    $38 = (16 - ($37))|0;
    $39 = $lmsk;
    $40 = $39&65535;
    $41 = $40 << $38;
    $42 = $41&65535;
    $lmsk = $42;
    $43 = $to;
    $tmpto = $43;
    $bcnt = 0;
    while(1) {
     $44 = $bcnt;
     $45 = $44&255;
     $46 = $trkn;
     $47 = ($45|0)<($46|0);
     if (!($47)) {
      break L11;
     }
     $48 = $lmsk;
     $49 = $48&65535;
     $50 = $49 & 32768;
     $51 = ($50|0)!=(0);
     if ($51) {
      $52 = $fromst;
      $53 = (_get_nibbles($52,$fromn,2)|0);
      $54 = $53&255;
      $55 = $tmpto;
      HEAP8[$55>>0] = $54;
      $56 = $fromst;
      $57 = (_get_nibble($56,$fromn)|0);
      $58 = $57&255;
      $59 = $58 << 4;
      $60 = $59&255;
      $61 = $tmpto;
      $62 = ((($61)) + 1|0);
      HEAP8[$62>>0] = $60;
     }
     $63 = $lmsk;
     $64 = $63&65535;
     $65 = $64 << 1;
     $66 = $65&65535;
     $lmsk = $66;
     $67 = $tmpto;
     $68 = ((($67)) + 3|0);
     $tmpto = $68;
     $69 = $bcnt;
     $70 = (($69) + 1)<<24>>24;
     $bcnt = $70;
    }
   }
  } while(0);
  $71 = $fxptr;
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & -2147483648;
  $74 = ($73|0)!=(0);
  L20: do {
   if ($74) {
    $75 = $fromst;
    $76 = $trkn;
    $77 = (($76|0) / 4)&-1;
    $78 = $77&255;
    $79 = (_get_nibbles($75,$fromn,$78)|0);
    $lmsk = $79;
    $80 = $trkn;
    $81 = (16 - ($80))|0;
    $82 = $lmsk;
    $83 = $82&65535;
    $84 = $83 << $81;
    $85 = $84&65535;
    $lmsk = $85;
    $86 = $to;
    $tmpto = $86;
    $bcnt = 0;
    while(1) {
     $87 = $bcnt;
     $88 = $87&255;
     $89 = $trkn;
     $90 = ($88|0)<($89|0);
     if (!($90)) {
      break L20;
     }
     $91 = $lmsk;
     $92 = $91&65535;
     $93 = $92 & 32768;
     $94 = ($93|0)!=(0);
     if ($94) {
      $95 = $fromst;
      $96 = (_get_nibble($95,$fromn)|0);
      $97 = $96&255;
      $98 = $tmpto;
      $99 = ((($98)) + 1|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100&255;
      $102 = $101 | $97;
      $103 = $102&255;
      HEAP8[$99>>0] = $103;
      $104 = $fromst;
      $105 = (_get_nibbles($104,$fromn,2)|0);
      $106 = $105&255;
      $107 = $tmpto;
      $108 = ((($107)) + 2|0);
      HEAP8[$108>>0] = $106;
     }
     $109 = $lmsk;
     $110 = $109&65535;
     $111 = $110 << 1;
     $112 = $111&65535;
     $lmsk = $112;
     $113 = $tmpto;
     $114 = ((($113)) + 3|0);
     $tmpto = $114;
     $115 = $bcnt;
     $116 = (($115) + 1)<<24>>24;
     $bcnt = $116;
    }
   }
  } while(0);
  $117 = $trkn;
  $118 = ($117*3)|0;
  $119 = $to;
  $120 = (($119) + ($118)|0);
  $to = $120;
  $121 = $lmptr;
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 << 1;
  HEAP32[$121>>2] = $123;
  $124 = $fxptr;
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 << 1;
  HEAP32[$124>>2] = $126;
  $127 = $i;
  $128 = (($127) + 1)|0;
  $i = $128;
 }
 $i = 0;
 while(1) {
  $129 = $i;
  $130 = ($129|0)<(64);
  if (!($130)) {
   break;
  }
  $j = 0;
  while(1) {
   $131 = $j;
   $132 = ($131|0)<(4);
   $133 = $i;
   if (!($132)) {
    break;
   }
   $134 = $j;
   $135 = $2;
   $136 = $135&65535;
   $137 = $1;
   $138 = ((($137)) + 168|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + ($136<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 4|0);
   $143 = (($142) + ($134<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $1;
   $146 = ((($145)) + 172|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + ($144<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ((($149)) + 4|0);
   $151 = (($150) + ($133<<3)|0);
   $event = $151;
   $152 = $i;
   $153 = ($152*12)|0;
   $154 = $j;
   $155 = ($154*3)|0;
   $156 = (($153) + ($155))|0;
   $157 = (($156) + 0)|0;
   $158 = $patbuf;
   $159 = (($158) + ($157)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $event;
   HEAP8[$161>>0] = $160;
   $162 = $event;
   $163 = HEAP8[$162>>0]|0;
   $164 = ($163<<24>>24)!=(0);
   if ($164) {
    $165 = $event;
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    $168 = (($167) + 48)|0;
    $169 = $168&255;
    HEAP8[$165>>0] = $169;
   }
   $170 = $i;
   $171 = ($170*12)|0;
   $172 = $j;
   $173 = ($172*3)|0;
   $174 = (($171) + ($173))|0;
   $175 = (($174) + 1)|0;
   $176 = $patbuf;
   $177 = (($176) + ($175)|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $179 >> 4;
   $181 = $180&255;
   $182 = $event;
   $183 = ((($182)) + 1|0);
   HEAP8[$183>>0] = $181;
   $184 = $event;
   $185 = ((($184)) + 1|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = ($186<<24>>24)!=(0);
   if ($187) {
    $188 = $event;
    $189 = ((($188)) + 1|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = (($190) + 1)<<24>>24;
    HEAP8[$189>>0] = $191;
   }
   $192 = $i;
   $193 = ($192*12)|0;
   $194 = $j;
   $195 = ($194*3)|0;
   $196 = (($193) + ($195))|0;
   $197 = (($196) + 1)|0;
   $198 = $patbuf;
   $199 = (($198) + ($197)|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = $201 & 15;
   $203 = $202&255;
   $204 = $event;
   $205 = ((($204)) + 3|0);
   HEAP8[$205>>0] = $203;
   $206 = $i;
   $207 = ($206*12)|0;
   $208 = $j;
   $209 = ($208*3)|0;
   $210 = (($207) + ($209))|0;
   $211 = (($210) + 2)|0;
   $212 = $patbuf;
   $213 = (($212) + ($211)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $event;
   $216 = ((($215)) + 4|0);
   HEAP8[$216>>0] = $214;
   $217 = $event;
   $218 = ((($217)) + 3|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   L42: do {
    switch ($220|0) {
    case 13:  {
     $237 = $event;
     $238 = ((($237)) + 3|0);
     HEAP8[$238>>0] = 10;
     break;
    }
    case 12:  {
     $221 = $event;
     $222 = ((($221)) + 4|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = $224 & 240;
     $226 = $225 >> 4;
     $227 = ($226*10)|0;
     $228 = $event;
     $229 = ((($228)) + 4|0);
     $230 = HEAP8[$229>>0]|0;
     $231 = $230&255;
     $232 = $231 & 15;
     $233 = (($227) + ($232))|0;
     $234 = $233&255;
     $235 = $event;
     $236 = ((($235)) + 4|0);
     HEAP8[$236>>0] = $234;
     break;
    }
    case 4: case 3: case 2: case 1: case 0:  {
     break;
    }
    case 15:  {
     $239 = $event;
     $240 = ((($239)) + 4|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = $241&255;
     $243 = ($242|0)==(0);
     if ($243) {
      $244 = $event;
      $245 = ((($244)) + 3|0);
      HEAP8[$245>>0] = 13;
     }
     $246 = $event;
     $247 = ((($246)) + 4|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = ($249|0)==(255);
     $251 = $event;
     if ($250) {
      $252 = ((($251)) + 3|0);
      HEAP8[$252>>0] = 0;
      $253 = $event;
      $254 = ((($253)) + 4|0);
      HEAP8[$254>>0] = 0;
      $255 = $event;
      $256 = ((($255)) + 2|0);
      HEAP8[$256>>0] = 1;
      break L42;
     }
     $257 = ((($251)) + 4|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = ($259|0)==(254);
     $261 = $event;
     if ($260) {
      $262 = ((($261)) + 3|0);
      HEAP8[$262>>0] = 0;
      $263 = $event;
      $264 = ((($263)) + 4|0);
      HEAP8[$264>>0] = 0;
      break L42;
     }
     $265 = ((($261)) + 4|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $266&255;
     $268 = ($267|0)==(241);
     $269 = $event;
     if ($268) {
      $270 = ((($269)) + 3|0);
      HEAP8[$270>>0] = 14;
      $271 = $event;
      $272 = ((($271)) + 4|0);
      HEAP8[$272>>0] = -109;
      break L42;
     }
     $273 = ((($269)) + 4|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $274&255;
     $276 = ($275|0)==(242);
     $277 = $event;
     if ($276) {
      $278 = ((($277)) + 3|0);
      HEAP8[$278>>0] = 14;
      $279 = $event;
      $280 = ((($279)) + 4|0);
      HEAP8[$280>>0] = -61;
      break L42;
     }
     $281 = ((($277)) + 4|0);
     $282 = HEAP8[$281>>0]|0;
     $283 = $282&255;
     $284 = ($283|0)==(243);
     $285 = $event;
     if ($284) {
      $286 = ((($285)) + 3|0);
      HEAP8[$286>>0] = 14;
      $287 = $event;
      $288 = ((($287)) + 4|0);
      HEAP8[$288>>0] = -45;
      break L42;
     }
     $289 = ((($285)) + 4|0);
     $290 = HEAP8[$289>>0]|0;
     $291 = $290&255;
     $292 = ($291|0)>(10);
     if ($292) {
      $293 = $event;
      $294 = ((($293)) + 3|0);
      HEAP8[$294>>0] = -85;
      $295 = $event;
      $296 = ((($295)) + 4|0);
      $297 = HEAP8[$296>>0]|0;
      $298 = $297&255;
      $299 = ($298*125)|0;
      $300 = (($299|0) / 33)&-1;
      $301 = $300&255;
      $302 = $event;
      $303 = ((($302)) + 4|0);
      HEAP8[$303>>0] = $301;
     }
     break;
    }
    default: {
     $304 = $event;
     $305 = ((($304)) + 3|0);
     HEAP8[$305>>0] = 0;
     $306 = $event;
     $307 = ((($306)) + 4|0);
     HEAP8[$307>>0] = 0;
    }
    }
   } while(0);
   $308 = $j;
   $309 = (($308) + 1)|0;
   $j = $309;
  }
  $310 = (($133) + 1)|0;
  $i = $310;
 }
 $311 = $patbuf;
 _free($311);
 $0 = 0;
 $312 = $0;
 STACKTOP = sp;return ($312|0);
}
function _get_nibbles($mem,$nbnum,$nbs) {
 $mem = $mem|0;
 $nbnum = $nbnum|0;
 $nbs = $nbs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mem;
 $1 = $nbnum;
 $2 = $nbs;
 $res = 0;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)<<24>>24;
  $2 = $4;
  $5 = ($3<<24>>24)!=(0);
  $6 = $res;
  if (!($5)) {
   break;
  }
  $7 = $6&65535;
  $8 = $7 << 4;
  $9 = $8&65535;
  $res = $9;
  $10 = $0;
  $11 = $1;
  $12 = (_get_nibble($10,$11)|0);
  $13 = $12&255;
  $14 = $res;
  $15 = $14&65535;
  $16 = $15 | $13;
  $17 = $16&65535;
  $res = $17;
 }
 STACKTOP = sp;return ($6|0);
}
function _get_nibble($mem,$nbnum) {
 $mem = $mem|0;
 $nbnum = $nbnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mloc = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mem;
 $1 = $nbnum;
 $2 = $0;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5|0) / 2)&-1;
 $7 = (($2) + ($6)|0);
 $mloc = $7;
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 $13 = $mloc;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 if ($12) {
  $16 = $15 & 15;
  $17 = $16&255;
  $res = $17;
 } else {
  $18 = $15 >> 4;
  $19 = $18&255;
  $res = $19;
 }
 $20 = $1;
 $21 = HEAP16[$20>>1]|0;
 $22 = (($21) + 1)<<16>>16;
 HEAP16[$20>>1] = $22;
 $23 = $res;
 STACKTOP = sp;return ($23|0);
}
function _med4_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1296385028);
 if ($6) {
  $0 = -1;
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,0);
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _med4_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $_len = 0, $_mask = 0;
 var $_pos = 0, $_type = 0, $buf = 0, $buf1 = 0, $c = 0, $c6 = 0, $chmsk = 0, $chn = 0, $chn5 = 0, $ctl = 0, $event = 0, $flags = 0, $fxmask = 0, $hexvol = 0, $i = 0, $id = 0, $j = 0, $k = 0, $length = 0, $length7 = 0;
 var $line = 0, $linemask = 0, $loop_len = 0, $m0 = 0, $mask = 0, $masksz = 0, $mod = 0, $num_ins = 0, $num_masks = 0, $num_smp = 0, $or$cond = 0, $plen = 0, $plen4 = 0, $pos = 0, $pos10 = 0, $pos12 = 0, $pos9 = 0, $rows = 0, $s = 0, $s2 = 0;
 var $size = 0, $size11 = 0, $size2 = 0, $size3 = 0, $smp_idx = 0, $stream = 0, $sub = 0, $synth = 0, $temp_inst = 0, $tempo = 0, $transp = 0, $trkvol = 0, $type = 0, $type8 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $ver = 0, $vermaj = 0, $vermin = 0, $x = 0;
 var $xpo = 0, $xxi = 0, $xxs = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $mask = sp + 8|0;
 $trkvol = sp + 5008|0;
 $buf = sp + 3984|0;
 $temp_inst = sp + 768|0;
 $buf1 = sp + 3936|0;
 $ctl = sp + 3928|0;
 $linemask = sp + 704|0;
 $fxmask = sp + 672|0;
 $stream = sp + 648|0;
 $_mask = sp;
 $synth = sp + 80|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $hexvol = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $vermaj = 2;
 $vermin = 10;
 $8 = $2;
 $9 = (_hio_tell($8)|0);
 $pos = $9;
 $10 = $2;
 (_hio_seek($10,0,2)|0);
 $11 = $2;
 $12 = (_hio_tell($11)|0);
 $13 = ($12|0)>(2000);
 L1: do {
  if ($13) {
   $14 = $2;
   (_hio_seek($14,-1024,1)|0);
   $15 = $2;
   (_hio_read($buf,1,1024,$15)|0);
   $i = 0;
   while(1) {
    $16 = $i;
    $17 = ($16|0)<(1013);
    if (!($17)) {
     break L1;
    }
    $18 = $i;
    $19 = (($buf) + ($18)|0);
    $20 = (_memcmp($19,7048,8)|0);
    $21 = ($20|0)!=(0);
    if (!($21)) {
     break;
    }
    $32 = $i;
    $33 = (($32) + 1)|0;
    $i = $33;
   }
   $22 = $i;
   $23 = (($buf) + ($22)|0);
   $24 = ((($23)) + 10|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $vermaj = $26;
   $27 = $i;
   $28 = (($buf) + ($27)|0);
   $29 = ((($28)) + 11|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $vermin = $31;
  }
 } while(0);
 $34 = $2;
 $35 = $3;
 $36 = $pos;
 $37 = (($35) + ($36))|0;
 (_hio_seek($34,$37,0)|0);
 $38 = $mod;
 $39 = ((($38)) + 64|0);
 $40 = $vermaj;
 $41 = $vermin;
 HEAP32[$vararg_buffer>>2] = $40;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $41;
 (_snprintf($39,64,7064,$vararg_buffer)|0);
 $42 = $2;
 $43 = (_hio_read8($42)|0);
 $m0 = $43;
 $masksz = 0;
 $44 = $mask;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = 0;
 $i = 0;
 while(1) {
  $48 = $m0;
  $49 = $48&255;
  $50 = ($49|0)!=(0);
  $51 = $i;
  $52 = ($51|0)<(8);
  $53 = $50 ? $52 : 0;
  if (!($53)) {
   break;
  }
  $54 = $m0;
  $55 = $54&255;
  $56 = $55 & 128;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $mask;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (_bitshift64Shl(($60|0),($63|0),8)|0);
   $65 = tempRet0;
   $66 = $mask;
   $67 = $66;
   HEAP32[$67>>2] = $64;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $65;
   $70 = $2;
   $71 = (_hio_read8($70)|0);
   $72 = $71&255;
   $73 = $mask;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 4)|0;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = $75 | $72;
   $80 = $mask;
   $81 = $80;
   HEAP32[$81>>2] = $79;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = $78;
   $84 = $masksz;
   $85 = (($84) + 1)|0;
   $masksz = $85;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
  $88 = $m0;
  $89 = $88&255;
  $90 = $89 << 1;
  $91 = $90&255;
  $m0 = $91;
 }
 $92 = $masksz;
 $93 = (8 - ($92))|0;
 $94 = $93<<3;
 $95 = $mask;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (_bitshift64Shl(($97|0),($100|0),($94|0))|0);
 $102 = tempRet0;
 $103 = $mask;
 $104 = $103;
 HEAP32[$104>>2] = $101;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = $102;
 $num_ins = 0;
 _memset(($temp_inst|0),0,3072)|0;
 $i = 0;
 while(1) {
  $107 = $mask;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) + 4)|0;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = ($109|0)!=(0);
  $114 = ($112|0)!=(0);
  $115 = $113 | $114;
  $116 = $i;
  $117 = ($116|0)<(64);
  $118 = $115 ? $117 : 0;
  if (!($118)) {
   break;
  }
  $loop_len = 0;
  $119 = $mask;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = (($119) + 4)|0;
  $123 = $122;
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)>(0);
  $126 = ($121>>>0)>(0);
  $127 = ($124|0)==(0);
  $128 = $127 & $126;
  $129 = $125 | $128;
  if (!($129)) {
   $130 = $i;
   $131 = (($130) + 1)|0;
   $num_ins = $131;
   $132 = $2;
   $133 = (_hio_read8($132)|0);
   $c = $133;
   $134 = $2;
   $135 = (_hio_read8($134)|0);
   $size = $135;
   $j = 0;
   while(1) {
    $136 = $j;
    $137 = $size;
    $138 = $137&255;
    $139 = ($136|0)<($138|0);
    if (!($139)) {
     break;
    }
    $140 = $2;
    $141 = (_hio_read8($140)|0);
    $142 = $j;
    $143 = (($buf1) + ($142)|0);
    HEAP8[$143>>0] = $141;
    $144 = $j;
    $145 = (($144) + 1)|0;
    $j = $145;
   }
   $146 = $j;
   $147 = (($buf1) + ($146)|0);
   HEAP8[$147>>0] = 0;
   $148 = $i;
   $149 = (($temp_inst) + (($148*48)|0)|0);
   $150 = ((($149)) + 40|0);
   HEAP32[$150>>2] = 64;
   $151 = $c;
   $152 = $151&255;
   $153 = $152 & 1;
   $154 = ($153|0)==(0);
   if ($154) {
    $155 = $2;
    $156 = (_hio_read16b($155)|0);
    $157 = $156&65535;
    $158 = $157 << 1;
    $159 = $i;
    $160 = (($temp_inst) + (($159*48)|0)|0);
    $161 = ((($160)) + 32|0);
    HEAP32[$161>>2] = $158;
   }
   $162 = $c;
   $163 = $162&255;
   $164 = $163 & 2;
   $165 = ($164|0)==(0);
   if ($165) {
    $166 = $2;
    $167 = (_hio_read16b($166)|0);
    $168 = $167&65535;
    $169 = $168 << 1;
    $170 = $169&65535;
    $loop_len = $170;
   }
   $171 = $c;
   $172 = $171&255;
   $173 = $172 & 4;
   $174 = ($173|0)==(0);
   if ($174) {
    $175 = $2;
    (_hio_read8($175)|0);
   }
   $176 = $c;
   $177 = $176&255;
   $178 = $177 & 8;
   $179 = ($178|0)==(0);
   if ($179) {
    $180 = $2;
    (_hio_read8($180)|0);
   }
   $181 = $c;
   $182 = $181&255;
   $183 = $182 & 48;
   $184 = ($183|0)==(0);
   if ($184) {
    $185 = $2;
    $186 = (_hio_read8($185)|0);
    $187 = $186&255;
    $188 = $i;
    $189 = (($temp_inst) + (($188*48)|0)|0);
    $190 = ((($189)) + 40|0);
    HEAP32[$190>>2] = $187;
   }
   $191 = $c;
   $192 = $191&255;
   $193 = $192 & 64;
   $194 = ($193|0)==(0);
   if ($194) {
    $195 = $2;
    $196 = (_hio_read8s($195)|0);
    $197 = $196 << 24 >> 24;
    $198 = $i;
    $199 = (($temp_inst) + (($198*48)|0)|0);
    $200 = ((($199)) + 44|0);
    HEAP32[$200>>2] = $197;
   }
   $201 = $i;
   $202 = (($temp_inst) + (($201*48)|0)|0);
   $203 = ((($202)) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $loop_len;
   $206 = $205&65535;
   $207 = (($204) + ($206))|0;
   $208 = $i;
   $209 = (($temp_inst) + (($208*48)|0)|0);
   $210 = ((($209)) + 36|0);
   HEAP32[$210>>2] = $207;
   $211 = $i;
   $212 = (($temp_inst) + (($211*48)|0)|0);
   (_copy_adjust($212,$buf1,32)|0);
  }
  $213 = $i;
  $214 = (($213) + 1)|0;
  $i = $214;
  $215 = $mask;
  $216 = $215;
  $217 = HEAP32[$216>>2]|0;
  $218 = (($215) + 4)|0;
  $219 = $218;
  $220 = HEAP32[$219>>2]|0;
  $221 = (_bitshift64Shl(($217|0),($220|0),1)|0);
  $222 = tempRet0;
  $223 = $mask;
  $224 = $223;
  HEAP32[$224>>2] = $221;
  $225 = (($223) + 4)|0;
  $226 = $225;
  HEAP32[$226>>2] = $222;
 }
 $227 = $2;
 $228 = (_hio_read16b($227)|0);
 $229 = $228&65535;
 $230 = $mod;
 $231 = ((($230)) + 128|0);
 HEAP32[$231>>2] = $229;
 $232 = $2;
 $233 = (_hio_read16b($232)|0);
 $234 = $233&65535;
 $235 = $mod;
 $236 = ((($235)) + 156|0);
 HEAP32[$236>>2] = $234;
 $237 = $mod;
 $238 = ((($237)) + 156|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)>(256);
 if ($240) {
  $0 = -1;
  $1197 = $0;
  STACKTOP = sp;return ($1197|0);
 }
 $241 = $mod;
 $242 = ((($241)) + 952|0);
 $243 = $mod;
 $244 = ((($243)) + 156|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $2;
 (_hio_read($242,1,$245,$246)|0);
 $247 = $2;
 $248 = (_hio_read16b($247)|0);
 $249 = $248&65535;
 $tempo = $249;
 $250 = $tempo;
 $251 = ($250|0)<=(10);
 $252 = $tempo;
 if ($251) {
  $253 = $mod;
  $254 = ((($253)) + 148|0);
  HEAP32[$254>>2] = $252;
  $255 = $mod;
  $256 = ((($255)) + 152|0);
  HEAP32[$256>>2] = 125;
 } else {
  $257 = ($252*125)|0;
  $258 = (($257|0) / 33)&-1;
  $259 = $mod;
  $260 = ((($259)) + 152|0);
  HEAP32[$260>>2] = $258;
 }
 $261 = $2;
 $262 = (_hio_read8s($261)|0);
 $263 = $262 << 24 >> 24;
 $transp = $263;
 $264 = $2;
 (_hio_read8s($264)|0);
 $265 = $2;
 $266 = (_hio_read8s($265)|0);
 $267 = $266 << 24 >> 24;
 $flags = $267;
 $268 = $2;
 $269 = (_hio_read8($268)|0);
 $270 = $269&255;
 $271 = $mod;
 $272 = ((($271)) + 148|0);
 HEAP32[$272>>2] = $270;
 $273 = $flags;
 $274 = $273 ^ -1;
 $275 = $274 & 32;
 $276 = ($275|0)!=(0);
 if ($276) {
  $277 = $1;
  $278 = ((($277)) + 1280|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $279 | 192;
  HEAP32[$278>>2] = $280;
 }
 $281 = $flags;
 $282 = $281 & 16;
 $283 = ($282|0)!=(0);
 if ($283) {
  $hexvol = 1;
 }
 $284 = $vermaj;
 $285 = ($284|0)==(2);
 if ($285) {
  $286 = $flags;
  $287 = $286 & 32;
  $288 = ($287|0)!=(0);
  $289 = $288 ? 5 : 6;
  $290 = $mod;
  $291 = ((($290)) + 148|0);
  HEAP32[$291>>2] = $289;
 }
 $292 = $2;
 (_hio_seek($292,20,1)|0);
 $293 = $2;
 (_hio_read($trkvol,1,16,$293)|0);
 $294 = $2;
 (_hio_read8($294)|0);
 $i = 0;
 while(1) {
  $295 = $i;
  $296 = ($295|0)<(64);
  if (!($296)) {
   break;
  }
  $297 = $transp;
  $298 = $i;
  $299 = (($temp_inst) + (($298*48)|0)|0);
  $300 = ((($299)) + 44|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = (($301) + ($297))|0;
  HEAP32[$300>>2] = $302;
  $303 = $i;
  $304 = (($303) + 1)|0;
  $i = $304;
 }
 $305 = $mod;
 $306 = ((($305)) + 136|0);
 HEAP32[$306>>2] = 0;
 $307 = $2;
 $308 = (_hio_tell($307)|0);
 $pos = $308;
 $i = 0;
 while(1) {
  $309 = $i;
  $310 = $mod;
  $311 = ((($310)) + 128|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($309|0)<($312|0);
  if (!($313)) {
   break;
  }
  $314 = $2;
  $315 = (_hio_read8($314)|0);
  $316 = $315&255;
  $size2 = $316;
  $317 = $2;
  $318 = (_hio_read8($317)|0);
  $319 = $318&255;
  $chn = $319;
  $320 = $chn;
  $321 = $mod;
  $322 = ((($321)) + 136|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ($320|0)>($323|0);
  if ($324) {
   $325 = $chn;
   $326 = $mod;
   $327 = ((($326)) + 136|0);
   HEAP32[$327>>2] = $325;
  }
  $328 = $2;
  (_hio_read8($328)|0);
  $329 = $2;
  $330 = (_hio_read16b($329)|0);
  $331 = $330&65535;
  $plen = $331;
  $332 = $2;
  $333 = $size2;
  $334 = $plen;
  $335 = (($333) + ($334))|0;
  $336 = (($335) - 4)|0;
  (_hio_seek($332,$336,1)|0);
  $337 = $i;
  $338 = (($337) + 1)|0;
  $i = $338;
 }
 $339 = $mod;
 $340 = ((($339)) + 136|0);
 $341 = HEAP32[$340>>2]|0;
 $342 = $mod;
 $343 = ((($342)) + 128|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = Math_imul($341, $344)|0;
 $346 = $mod;
 $347 = ((($346)) + 132|0);
 HEAP32[$347>>2] = $345;
 $348 = $mod;
 $349 = (_pattern_init($348)|0);
 $350 = ($349|0)<(0);
 if ($350) {
  $0 = -1;
  $1197 = $0;
  STACKTOP = sp;return ($1197|0);
 }
 $351 = $2;
 $352 = $pos;
 (_hio_seek($351,$352,0)|0);
 $i = 0;
 while(1) {
  $353 = $i;
  $354 = $mod;
  $355 = ((($354)) + 128|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = ($353|0)<($356|0);
  if (!($357)) {
   label = 97;
   break;
  }
  $358 = $2;
  $359 = (_hio_read8($358)|0);
  $360 = $359&255;
  $size3 = $360;
  $361 = $2;
  $362 = (_hio_tell($361)|0);
  $pos = $362;
  $363 = $2;
  $364 = (_hio_read8($363)|0);
  $chn5 = $364;
  $365 = $chn5;
  $366 = $365&255;
  $367 = $mod;
  $368 = ((($367)) + 136|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = ($366|0)>($369|0);
  if ($370) {
   label = 56;
   break;
  }
  $371 = $2;
  $372 = (_hio_read8($371)|0);
  $373 = $372&255;
  $374 = (($373) + 1)|0;
  $rows = $374;
  $375 = $2;
  $376 = (_hio_read16b($375)|0);
  $377 = $376&65535;
  $plen4 = $377;
  $j = 0;
  while(1) {
   $378 = $j;
   $379 = ($378|0)<(4);
   if (!($379)) {
    break;
   }
   $380 = $rows;
   $381 = $j;
   $382 = $381<<6;
   $383 = ($380|0)>($382|0);
   if (!($383)) {
    break;
   }
   $384 = $2;
   $385 = (_hio_read8($384)|0);
   $386 = $j;
   $387 = (($ctl) + ($386)|0);
   HEAP8[$387>>0] = $385;
   $388 = $j;
   $389 = (($388) + 1)|0;
   $j = $389;
  }
  $390 = $mod;
  $391 = $i;
  $392 = $rows;
  $393 = (_pattern_tracks_alloc($390,$391,$392)|0);
  $394 = ($393|0)<(0);
  if ($394) {
   label = 62;
   break;
  }
  $y = 0;
  while(1) {
   $395 = $y;
   $396 = ($395|0)<(8);
   if (!($396)) {
    break;
   }
   $397 = $y;
   $398 = (($linemask) + ($397<<2)|0);
   HEAP32[$398>>2] = 0;
   $399 = $y;
   $400 = (($fxmask) + ($399<<2)|0);
   HEAP32[$400>>2] = 0;
   $401 = $y;
   $402 = (($401) + 1)|0;
   $y = $402;
  }
  $num_masks = 0;
  $y = 0;
  while(1) {
   $403 = $y;
   $404 = ($403|0)<(8);
   if (!($404)) {
    break;
   }
   $405 = $rows;
   $406 = $y;
   $407 = $406<<5;
   $408 = ($405|0)>($407|0);
   if (!($408)) {
    break;
   }
   $409 = $y;
   $410 = (($409|0) / 2)&-1;
   $411 = (($ctl) + ($410)|0);
   $412 = HEAP8[$411>>0]|0;
   $413 = $412&255;
   $c6 = $413;
   $414 = $y;
   $415 = (($414|0) % 2)&-1;
   $416 = $415<<2;
   $s = $416;
   $417 = $c6;
   $418 = $s;
   $419 = 128 >> $418;
   $420 = $417 & $419;
   $421 = ($420|0)!=(0);
   if ($421) {
    $431 = -1;
   } else {
    $422 = $c6;
    $423 = $s;
    $424 = 64 >> $423;
    $425 = $422 & $424;
    $426 = ($425|0)!=(0);
    if ($426) {
     $431 = 0;
    } else {
     $427 = $2;
     $428 = (_hio_read32b($427)|0);
     $431 = $428;
    }
   }
   $429 = $y;
   $430 = (($linemask) + ($429<<2)|0);
   HEAP32[$430>>2] = $431;
   $432 = $c6;
   $433 = $s;
   $434 = 32 >> $433;
   $435 = $432 & $434;
   $436 = ($435|0)!=(0);
   if ($436) {
    $446 = -1;
   } else {
    $437 = $c6;
    $438 = $s;
    $439 = 16 >> $438;
    $440 = $437 & $439;
    $441 = ($440|0)!=(0);
    if ($441) {
     $446 = 0;
    } else {
     $442 = $2;
     $443 = (_hio_read32b($442)|0);
     $446 = $443;
    }
   }
   $444 = $y;
   $445 = (($fxmask) + ($444<<2)|0);
   HEAP32[$445>>2] = $446;
   $447 = $num_masks;
   $448 = (($447) + 1)|0;
   $num_masks = $448;
   $449 = $y;
   $450 = (($449) + 1)|0;
   $y = $450;
  }
  $451 = $2;
  $452 = $pos;
  $453 = $size3;
  $454 = (($452) + ($453))|0;
  (_hio_seek($451,$454,0)|0);
  $455 = $2;
  _stream_init($455,$stream);
  $y = 0;
  while(1) {
   $456 = $y;
   $457 = $num_masks;
   $458 = ($456|0)<($457|0);
   if (!($458)) {
    break;
   }
   $j = 0;
   while(1) {
    $459 = $j;
    $460 = ($459|0)<(32);
    $461 = $y;
    if (!($460)) {
     break;
    }
    $462 = $461<<5;
    $463 = $j;
    $464 = (($462) + ($463))|0;
    $line = $464;
    $465 = $y;
    $466 = (($linemask) + ($465<<2)|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = $467 & -2147483648;
    $469 = ($468|0)!=(0);
    L110: do {
     if ($469) {
      $470 = $chn5;
      $471 = $470&255;
      $472 = (_stream_read_aligned16($stream,$471)|0);
      $473 = $472&65535;
      $chmsk = $473;
      $k = 0;
      while(1) {
       $474 = $k;
       $475 = $chn5;
       $476 = $475&255;
       $477 = ($474|0)<($476|0);
       if (!($477)) {
        break L110;
       }
       $478 = $line;
       $479 = $k;
       $480 = $i;
       $481 = $1;
       $482 = ((($481)) + 168|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = (($483) + ($480<<2)|0);
       $485 = HEAP32[$484>>2]|0;
       $486 = ((($485)) + 4|0);
       $487 = (($486) + ($479<<2)|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = $1;
       $490 = ((($489)) + 172|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($491) + ($488<<2)|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = ((($493)) + 4|0);
       $495 = (($494) + ($478<<3)|0);
       $event = $495;
       $496 = $chmsk;
       $497 = $496 & 32768;
       $498 = ($497|0)!=(0);
       if ($498) {
        $499 = (_stream_read12($stream)|0);
        $x = $499;
        $500 = $x;
        $501 = $500 >>> 4;
        $502 = $501&255;
        $503 = $event;
        HEAP8[$503>>0] = $502;
        $504 = $event;
        $505 = HEAP8[$504>>0]|0;
        $506 = ($505<<24>>24)!=(0);
        if ($506) {
         $507 = $event;
         $508 = HEAP8[$507>>0]|0;
         $509 = $508&255;
         $510 = (($509) + 48)|0;
         $511 = $510&255;
         HEAP8[$507>>0] = $511;
        }
        $512 = $x;
        $513 = $512 & 15;
        $514 = $513&255;
        $515 = $event;
        $516 = ((($515)) + 1|0);
        HEAP8[$516>>0] = $514;
       }
       $517 = $k;
       $518 = (($517) + 1)|0;
       $k = $518;
       $519 = $chmsk;
       $520 = $519 << 1;
       $chmsk = $520;
      }
     }
    } while(0);
    $521 = $y;
    $522 = (($fxmask) + ($521<<2)|0);
    $523 = HEAP32[$522>>2]|0;
    $524 = $523 & -2147483648;
    $525 = ($524|0)!=(0);
    L122: do {
     if ($525) {
      $526 = $chn5;
      $527 = $526&255;
      $528 = (_stream_read_aligned16($stream,$527)|0);
      $529 = $528&65535;
      $chmsk = $529;
      $k = 0;
      while(1) {
       $530 = $k;
       $531 = $chn5;
       $532 = $531&255;
       $533 = ($530|0)<($532|0);
       if (!($533)) {
        break L122;
       }
       $534 = $line;
       $535 = $k;
       $536 = $i;
       $537 = $1;
       $538 = ((($537)) + 168|0);
       $539 = HEAP32[$538>>2]|0;
       $540 = (($539) + ($536<<2)|0);
       $541 = HEAP32[$540>>2]|0;
       $542 = ((($541)) + 4|0);
       $543 = (($542) + ($535<<2)|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = $1;
       $546 = ((($545)) + 172|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = (($547) + ($544<<2)|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = ((($549)) + 4|0);
       $551 = (($550) + ($534<<3)|0);
       $event = $551;
       $552 = $chmsk;
       $553 = $552 & 32768;
       $554 = ($553|0)!=(0);
       if ($554) {
        $555 = (_stream_read12($stream)|0);
        $x = $555;
        $556 = $x;
        $557 = $556 >>> 8;
        $558 = $557&255;
        $559 = $event;
        $560 = ((($559)) + 3|0);
        HEAP8[$560>>0] = $558;
        $561 = $x;
        $562 = $561 & 255;
        $563 = $562&255;
        $564 = $event;
        $565 = ((($564)) + 4|0);
        HEAP8[$565>>0] = $563;
        $566 = $event;
        _fix_effect323($566);
       }
       $567 = $k;
       $568 = (($567) + 1)|0;
       $k = $568;
       $569 = $chmsk;
       $570 = $569 << 1;
       $chmsk = $570;
      }
     }
    } while(0);
    $571 = $y;
    $572 = (($linemask) + ($571<<2)|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = $573 << 1;
    HEAP32[$572>>2] = $574;
    $575 = $y;
    $576 = (($fxmask) + ($575<<2)|0);
    $577 = HEAP32[$576>>2]|0;
    $578 = $577 << 1;
    HEAP32[$576>>2] = $578;
    $579 = $j;
    $580 = (($579) + 1)|0;
    $j = $580;
   }
   $581 = (($461) + 1)|0;
   $y = $581;
  }
  $582 = $2;
  $583 = $pos;
  $584 = $size3;
  $585 = (($583) + ($584))|0;
  $586 = $plen4;
  $587 = (($585) + ($586))|0;
  (_hio_seek($582,$587,0)|0);
  $588 = $i;
  $589 = (($588) + 1)|0;
  $i = $589;
 }
 if ((label|0) == 56) {
  $0 = -1;
  $1197 = $0;
  STACKTOP = sp;return ($1197|0);
 }
 else if ((label|0) == 62) {
  $0 = -1;
  $1197 = $0;
  STACKTOP = sp;return ($1197|0);
 }
 else if ((label|0) == 97) {
  $590 = $num_ins;
  $591 = $mod;
  $592 = ((($591)) + 140|0);
  HEAP32[$592>>2] = $590;
  $593 = $1;
  $594 = (_med_new_module_extras($593)|0);
  $595 = ($594|0)!=(0);
  if ($595) {
   $0 = -1;
   $1197 = $0;
   STACKTOP = sp;return ($1197|0);
  }
  $596 = $2;
  $597 = (_hio_read32b($596)|0);
  $598 = $mask;
  $599 = $598;
  HEAP32[$599>>2] = $597;
  $600 = (($598) + 4)|0;
  $601 = $600;
  HEAP32[$601>>2] = 0;
  $602 = $mask;
  $603 = $602;
  $604 = HEAP32[$603>>2]|0;
  $605 = (($602) + 4)|0;
  $606 = $605;
  $607 = HEAP32[$606>>2]|0;
  $608 = ($604|0)==(1296385110);
  $609 = ($607|0)==(0);
  $610 = $608 & $609;
  L143: do {
   if ($610) {
    $611 = $mod;
    $612 = ((($611)) + 144|0);
    HEAP32[$612>>2] = 0;
    $613 = $mod;
    $614 = (_instrument_init($613)|0);
    $615 = ($614|0)<(0);
    if (!($615)) {
     $616 = $2;
     (_hio_seek($616,-4,1)|0);
     break;
    }
    $0 = -1;
    $1197 = $0;
    STACKTOP = sp;return ($1197|0);
   } else {
    $617 = $mask;
    $618 = $617;
    $619 = HEAP32[$618>>2]|0;
    $620 = (($617) + 4)|0;
    $621 = $620;
    $622 = HEAP32[$621>>2]|0;
    $623 = $mask;
    $624 = $623;
    HEAP32[$624>>2] = 0;
    $625 = (($623) + 4)|0;
    $626 = $625;
    HEAP32[$626>>2] = $619;
    $627 = $2;
    $628 = (_hio_read32b($627)|0);
    $629 = $mask;
    $630 = $629;
    $631 = HEAP32[$630>>2]|0;
    $632 = (($629) + 4)|0;
    $633 = $632;
    $634 = HEAP32[$633>>2]|0;
    $635 = $631 | $628;
    $636 = $mask;
    $637 = $636;
    HEAP32[$637>>2] = $635;
    $638 = (($636) + 4)|0;
    $639 = $638;
    HEAP32[$639>>2] = $634;
    $640 = $mask;
    $641 = $640;
    $642 = HEAP32[$641>>2]|0;
    $643 = (($640) + 4)|0;
    $644 = $643;
    $645 = HEAP32[$644>>2]|0;
    $646 = (_bitshift64Shl(($642|0),($645|0),1)|0);
    $647 = tempRet0;
    $648 = $mask;
    $649 = $648;
    HEAP32[$649>>2] = $646;
    $650 = (($648) + 4)|0;
    $651 = $650;
    HEAP32[$651>>2] = $647;
    $652 = $2;
    $653 = (_hio_tell($652)|0);
    $pos = $653;
    $num_smp = 0;
    $654 = $mask;
    $655 = $654;
    $656 = HEAP32[$655>>2]|0;
    $657 = (($654) + 4)|0;
    $658 = $657;
    $659 = HEAP32[$658>>2]|0;
    $660 = $_mask;
    $661 = $660;
    HEAP32[$661>>2] = $656;
    $662 = (($660) + 4)|0;
    $663 = $662;
    HEAP32[$663>>2] = $659;
    $i = 0;
    while(1) {
     $664 = $_mask;
     $665 = $664;
     $666 = HEAP32[$665>>2]|0;
     $667 = (($664) + 4)|0;
     $668 = $667;
     $669 = HEAP32[$668>>2]|0;
     $670 = ($666|0)!=(0);
     $671 = ($669|0)!=(0);
     $672 = $670 | $671;
     $673 = $i;
     $674 = ($673|0)<(64);
     $675 = $672 ? $674 : 0;
     if (!($675)) {
      break;
     }
     $676 = $_mask;
     $677 = $676;
     $678 = HEAP32[$677>>2]|0;
     $679 = (($676) + 4)|0;
     $680 = $679;
     $681 = HEAP32[$680>>2]|0;
     $682 = ($681|0)>(0);
     $683 = ($678>>>0)>(0);
     $684 = ($681|0)==(0);
     $685 = $684 & $683;
     $686 = $682 | $685;
     if (!($686)) {
      $687 = $2;
      $688 = (_hio_read32b($687)|0);
      $_len = $688;
      $689 = $2;
      $690 = (_hio_read16b($689)|0);
      $691 = $690 << 16 >> 16;
      $_type = $691;
      $692 = $2;
      $693 = (_hio_tell($692)|0);
      $_pos = $693;
      $694 = $_type;
      $695 = ($694|0)==(0);
      $696 = $_type;
      $697 = ($696|0)==(-2);
      $or$cond = $695 | $697;
      if ($or$cond) {
       $698 = $num_smp;
       $699 = (($698) + 1)|0;
       $num_smp = $699;
      } else {
       $700 = $_type;
       $701 = ($700|0)==(-1);
       if ($701) {
        $702 = $2;
        (_hio_seek($702,20,1)|0);
        $703 = $2;
        $704 = (_hio_read16b($703)|0);
        $705 = $704&65535;
        $706 = $num_smp;
        $707 = (($706) + ($705))|0;
        $num_smp = $707;
       }
      }
      $708 = $2;
      $709 = $_pos;
      $710 = $_len;
      $711 = (($709) + ($710))|0;
      (_hio_seek($708,$711,0)|0);
     }
     $712 = $i;
     $713 = (($712) + 1)|0;
     $i = $713;
     $714 = $_mask;
     $715 = $714;
     $716 = HEAP32[$715>>2]|0;
     $717 = (($714) + 4)|0;
     $718 = $717;
     $719 = HEAP32[$718>>2]|0;
     $720 = (_bitshift64Shl(($716|0),($719|0),1)|0);
     $721 = tempRet0;
     $722 = $_mask;
     $723 = $722;
     HEAP32[$723>>2] = $720;
     $724 = (($722) + 4)|0;
     $725 = $724;
     HEAP32[$725>>2] = $721;
    }
    $726 = $2;
    $727 = $pos;
    (_hio_seek($726,$727,0)|0);
    $728 = $num_smp;
    $729 = $mod;
    $730 = ((($729)) + 144|0);
    HEAP32[$730>>2] = $728;
    $731 = $mod;
    $732 = (_instrument_init($731)|0);
    $733 = ($732|0)<(0);
    if ($733) {
     $0 = -1;
     $1197 = $0;
     STACKTOP = sp;return ($1197|0);
    }
    $smp_idx = 0;
    $i = 0;
    L166: while(1) {
     $734 = $mask;
     $735 = $734;
     $736 = HEAP32[$735>>2]|0;
     $737 = (($734) + 4)|0;
     $738 = $737;
     $739 = HEAP32[$738>>2]|0;
     $740 = ($736|0)!=(0);
     $741 = ($739|0)!=(0);
     $742 = $740 | $741;
     if (!($742)) {
      label = 164;
      break;
     }
     $743 = $i;
     $744 = $num_ins;
     $745 = ($743|0)<($744|0);
     if (!($745)) {
      label = 164;
      break;
     }
     $746 = $mask;
     $747 = $746;
     $748 = HEAP32[$747>>2]|0;
     $749 = (($746) + 4)|0;
     $750 = $749;
     $751 = HEAP32[$750>>2]|0;
     $752 = ($751|0)>(0);
     $753 = ($748>>>0)>(0);
     $754 = ($751|0)==(0);
     $755 = $754 & $753;
     $756 = $752 | $755;
     do {
      if (!($756)) {
       $757 = $i;
       $758 = $mod;
       $759 = ((($758)) + 176|0);
       $760 = HEAP32[$759>>2]|0;
       $761 = (($760) + (($757*764)|0)|0);
       $xxi = $761;
       $762 = $2;
       $763 = (_hio_read32b($762)|0);
       $length = $763;
       $764 = $2;
       $765 = (_hio_read16b($764)|0);
       $766 = $765 << 16 >> 16;
       $type = $766;
       $767 = $xxi;
       $768 = $i;
       $769 = (($temp_inst) + (($768*48)|0)|0);
       (_strncpy(($767|0),($769|0),32)|0);
       $770 = $type;
       $771 = ($770|0)==(-2);
       if ($771) {
        $772 = $2;
        $773 = (_hio_tell($772)|0);
        $pos9 = $773;
        $774 = $2;
        (_hio_read32b($774)|0);
        $775 = $2;
        (_hio_read16b($775)|0);
        $776 = $2;
        (_hio_read16b($776)|0);
        $777 = $2;
        (_hio_read16b($777)|0);
        $778 = $2;
        $779 = (_hio_read16b($778)|0);
        $780 = ((($synth)) + 10|0);
        HEAP16[$780>>1] = $779;
        $781 = $2;
        $782 = (_hio_read16b($781)|0);
        $783 = ((($synth)) + 12|0);
        HEAP16[$783>>1] = $782;
        $784 = $2;
        $785 = (_hio_read16b($784)|0);
        $786 = ((($synth)) + 14|0);
        HEAP16[$786>>1] = $785;
        $787 = $2;
        $788 = (_hio_read16b($787)|0);
        $789 = ((($synth)) + 16|0);
        HEAP16[$789>>1] = $788;
        $790 = $2;
        $791 = (_hio_read8($790)|0);
        $792 = ((($synth)) + 18|0);
        HEAP8[$792>>0] = $791;
        $793 = $2;
        $794 = (_hio_read8($793)|0);
        $795 = ((($synth)) + 19|0);
        HEAP8[$795>>0] = $794;
        $796 = $2;
        $797 = (_hio_read16b($796)|0);
        $798 = ((($synth)) + 20|0);
        HEAP16[$798>>1] = $797;
        $799 = ((($synth)) + 22|0);
        $800 = ((($synth)) + 14|0);
        $801 = HEAP16[$800>>1]|0;
        $802 = $801&65535;
        $803 = $2;
        (_hio_read($799,1,$802,$803)|0);
        $804 = ((($synth)) + 150|0);
        $805 = ((($synth)) + 16|0);
        $806 = HEAP16[$805>>1]|0;
        $807 = $806&65535;
        $808 = $2;
        (_hio_read($804,1,$807,$808)|0);
        $809 = $2;
        $810 = $pos9;
        $811 = $2;
        $812 = (_hio_read32b($811)|0);
        $813 = (($810) + ($812))|0;
        (_hio_seek($809,$813,0)|0);
        $814 = $2;
        $815 = (_hio_read32b($814)|0);
        $length7 = $815;
        $816 = $2;
        $817 = (_hio_read16b($816)|0);
        $818 = $817&65535;
        $type8 = $818;
        $819 = $xxi;
        $820 = (_med_new_instrument_extras($819)|0);
        $821 = ($820|0)!=(0);
        if ($821) {
         label = 120;
         break L166;
        }
        $822 = $xxi;
        $823 = ((($822)) + 36|0);
        HEAP32[$823>>2] = 1;
        $824 = $mod;
        $825 = $i;
        $826 = (_subinstrument_alloc($824,$825,1)|0);
        $827 = ($826|0)<(0);
        if ($827) {
         label = 122;
         break L166;
        }
        $828 = $xxi;
        $829 = ((($828)) + 756|0);
        $830 = HEAP32[$829>>2]|0;
        $sub = $830;
        $831 = ((($synth)) + 18|0);
        $832 = HEAP8[$831>>0]|0;
        $833 = $832&255;
        $834 = $xxi;
        $835 = ((($834)) + 760|0);
        $836 = HEAP32[$835>>2]|0;
        $837 = ((($836)) + 4|0);
        HEAP32[$837>>2] = $833;
        $838 = ((($synth)) + 19|0);
        $839 = HEAP8[$838>>0]|0;
        $840 = $839&255;
        $841 = $xxi;
        $842 = ((($841)) + 760|0);
        $843 = HEAP32[$842>>2]|0;
        $844 = ((($843)) + 8|0);
        HEAP32[$844>>2] = $840;
        $845 = $sub;
        $846 = ((($845)) + 8|0);
        HEAP32[$846>>2] = 128;
        $847 = $i;
        $848 = (($temp_inst) + (($847*48)|0)|0);
        $849 = ((($848)) + 40|0);
        $850 = HEAP32[$849>>2]|0;
        $851 = $sub;
        HEAP32[$851>>2] = $850;
        $852 = $i;
        $853 = (($temp_inst) + (($852*48)|0)|0);
        $854 = ((($853)) + 44|0);
        $855 = HEAP32[$854>>2]|0;
        $856 = $sub;
        $857 = ((($856)) + 12|0);
        HEAP32[$857>>2] = $855;
        $858 = $smp_idx;
        $859 = $sub;
        $860 = ((($859)) + 40|0);
        HEAP32[$860>>2] = $858;
        $861 = $sub;
        $862 = ((($861)) + 16|0);
        HEAP32[$862>>2] = 0;
        $863 = $smp_idx;
        $864 = $mod;
        $865 = ((($864)) + 180|0);
        $866 = HEAP32[$865>>2]|0;
        $867 = (($866) + (($863*52)|0)|0);
        $xxs = $867;
        $868 = $length7;
        $869 = $xxs;
        $870 = ((($869)) + 32|0);
        HEAP32[$870>>2] = $868;
        $871 = $i;
        $872 = (($temp_inst) + (($871*48)|0)|0);
        $873 = ((($872)) + 32|0);
        $874 = HEAP32[$873>>2]|0;
        $875 = $xxs;
        $876 = ((($875)) + 36|0);
        HEAP32[$876>>2] = $874;
        $877 = $i;
        $878 = (($temp_inst) + (($877*48)|0)|0);
        $879 = ((($878)) + 36|0);
        $880 = HEAP32[$879>>2]|0;
        $881 = $xxs;
        $882 = ((($881)) + 40|0);
        HEAP32[$882>>2] = $880;
        $883 = $i;
        $884 = (($temp_inst) + (($883*48)|0)|0);
        $885 = ((($884)) + 36|0);
        $886 = HEAP32[$885>>2]|0;
        $887 = ($886|0)>(2);
        $888 = $887 ? 2 : 0;
        $889 = $xxs;
        $890 = ((($889)) + 44|0);
        HEAP32[$890>>2] = $888;
        $891 = $1;
        $892 = $2;
        $893 = $xxs;
        $894 = (_load_sample($891,$892,0,$893,0)|0);
        $895 = ($894|0)<(0);
        if ($895) {
         label = 124;
         break L166;
        }
        $896 = $smp_idx;
        $897 = (($896) + 1)|0;
        $smp_idx = $897;
        $898 = $1;
        $899 = $i;
        $900 = (_mmd_alloc_tables($898,$899,$synth)|0);
        $901 = ($900|0)!=(0);
        if ($901) {
         label = 126;
         break L166;
        } else {
         break;
        }
       }
       $902 = $type;
       $903 = ($902|0)==(-1);
       if ($903) {
        $904 = $2;
        $905 = (_hio_tell($904)|0);
        $pos10 = $905;
        $906 = $2;
        (_hio_read32b($906)|0);
        $907 = $2;
        (_hio_read16b($907)|0);
        $908 = $2;
        (_hio_read16b($908)|0);
        $909 = $2;
        (_hio_read16b($909)|0);
        $910 = $2;
        $911 = (_hio_read16b($910)|0);
        $912 = ((($synth)) + 10|0);
        HEAP16[$912>>1] = $911;
        $913 = $2;
        $914 = (_hio_read16b($913)|0);
        $915 = ((($synth)) + 12|0);
        HEAP16[$915>>1] = $914;
        $916 = $2;
        $917 = (_hio_read16b($916)|0);
        $918 = ((($synth)) + 14|0);
        HEAP16[$918>>1] = $917;
        $919 = $2;
        $920 = (_hio_read16b($919)|0);
        $921 = ((($synth)) + 16|0);
        HEAP16[$921>>1] = $920;
        $922 = $2;
        $923 = (_hio_read8($922)|0);
        $924 = ((($synth)) + 18|0);
        HEAP8[$924>>0] = $923;
        $925 = $2;
        $926 = (_hio_read8($925)|0);
        $927 = ((($synth)) + 19|0);
        HEAP8[$927>>0] = $926;
        $928 = $2;
        $929 = (_hio_read16b($928)|0);
        $930 = ((($synth)) + 20|0);
        HEAP16[$930>>1] = $929;
        $931 = ((($synth)) + 22|0);
        $932 = ((($synth)) + 14|0);
        $933 = HEAP16[$932>>1]|0;
        $934 = $933&65535;
        $935 = $2;
        (_hio_read($931,1,$934,$935)|0);
        $936 = ((($synth)) + 150|0);
        $937 = ((($synth)) + 16|0);
        $938 = HEAP16[$937>>1]|0;
        $939 = $938&65535;
        $940 = $2;
        (_hio_read($936,1,$939,$940)|0);
        $941 = ((($synth)) + 20|0);
        $942 = HEAP16[$941>>1]|0;
        $943 = $942&65535;
        $944 = ($943|0)==(65535);
        if ($944) {
         break;
        }
        $945 = ((($synth)) + 20|0);
        $946 = HEAP16[$945>>1]|0;
        $947 = $946&65535;
        $948 = ($947|0)>(64);
        if ($948) {
         label = 130;
         break L166;
        }
        $j = 0;
        while(1) {
         $949 = $j;
         $950 = ((($synth)) + 20|0);
         $951 = HEAP16[$950>>1]|0;
         $952 = $951&65535;
         $953 = ($949|0)<($952|0);
         if (!($953)) {
          break;
         }
         $954 = $2;
         $955 = (_hio_read32b($954)|0);
         $956 = $j;
         $957 = ((($synth)) + 280|0);
         $958 = (($957) + ($956<<2)|0);
         HEAP32[$958>>2] = $955;
         $959 = $j;
         $960 = (($959) + 1)|0;
         $j = $960;
        }
        $961 = $i;
        $962 = $mod;
        $963 = ((($962)) + 176|0);
        $964 = HEAP32[$963>>2]|0;
        $965 = (($964) + (($961*764)|0)|0);
        $966 = (_med_new_instrument_extras($965)|0);
        $967 = ($966|0)!=(0);
        if ($967) {
         label = 135;
         break L166;
        }
        $968 = ((($synth)) + 20|0);
        $969 = HEAP16[$968>>1]|0;
        $970 = $969&65535;
        $971 = $i;
        $972 = $mod;
        $973 = ((($972)) + 176|0);
        $974 = HEAP32[$973>>2]|0;
        $975 = (($974) + (($971*764)|0)|0);
        $976 = ((($975)) + 36|0);
        HEAP32[$976>>2] = $970;
        $977 = $mod;
        $978 = $i;
        $979 = ((($synth)) + 20|0);
        $980 = HEAP16[$979>>1]|0;
        $981 = $980&65535;
        $982 = (_subinstrument_alloc($977,$978,$981)|0);
        $983 = ($982|0)<(0);
        if ($983) {
         label = 137;
         break L166;
        }
        $984 = ((($synth)) + 18|0);
        $985 = HEAP8[$984>>0]|0;
        $986 = $985&255;
        $987 = $xxi;
        $988 = ((($987)) + 760|0);
        $989 = HEAP32[$988>>2]|0;
        $990 = ((($989)) + 4|0);
        HEAP32[$990>>2] = $986;
        $991 = ((($synth)) + 19|0);
        $992 = HEAP8[$991>>0]|0;
        $993 = $992&255;
        $994 = $xxi;
        $995 = ((($994)) + 760|0);
        $996 = HEAP32[$995>>2]|0;
        $997 = ((($996)) + 8|0);
        HEAP32[$997>>2] = $993;
        $j = 0;
        while(1) {
         $998 = $j;
         $999 = ((($synth)) + 20|0);
         $1000 = HEAP16[$999>>1]|0;
         $1001 = $1000&65535;
         $1002 = ($998|0)<($1001|0);
         if (!($1002)) {
          break;
         }
         $1003 = $j;
         $1004 = $xxi;
         $1005 = ((($1004)) + 756|0);
         $1006 = HEAP32[$1005>>2]|0;
         $1007 = (($1006) + ($1003<<6)|0);
         $sub = $1007;
         $1008 = $sub;
         $1009 = ((($1008)) + 8|0);
         HEAP32[$1009>>2] = 128;
         $1010 = $sub;
         HEAP32[$1010>>2] = 64;
         $1011 = $sub;
         $1012 = ((($1011)) + 12|0);
         HEAP32[$1012>>2] = -24;
         $1013 = $smp_idx;
         $1014 = $sub;
         $1015 = ((($1014)) + 40|0);
         HEAP32[$1015>>2] = $1013;
         $1016 = $sub;
         $1017 = ((($1016)) + 16|0);
         HEAP32[$1017>>2] = 0;
         $1018 = $2;
         $1019 = $pos10;
         $1020 = $j;
         $1021 = ((($synth)) + 280|0);
         $1022 = (($1021) + ($1020<<2)|0);
         $1023 = HEAP32[$1022>>2]|0;
         $1024 = (($1019) + ($1023))|0;
         (_hio_seek($1018,$1024,0)|0);
         $1025 = $smp_idx;
         $1026 = $mod;
         $1027 = ((($1026)) + 180|0);
         $1028 = HEAP32[$1027>>2]|0;
         $1029 = (($1028) + (($1025*52)|0)|0);
         $xxs = $1029;
         $1030 = $2;
         $1031 = (_hio_read16b($1030)|0);
         $1032 = $1031&65535;
         $1033 = $1032<<1;
         $1034 = $xxs;
         $1035 = ((($1034)) + 32|0);
         HEAP32[$1035>>2] = $1033;
         $1036 = $xxs;
         $1037 = ((($1036)) + 36|0);
         HEAP32[$1037>>2] = 0;
         $1038 = $xxs;
         $1039 = ((($1038)) + 32|0);
         $1040 = HEAP32[$1039>>2]|0;
         $1041 = $xxs;
         $1042 = ((($1041)) + 40|0);
         HEAP32[$1042>>2] = $1040;
         $1043 = $xxs;
         $1044 = ((($1043)) + 44|0);
         HEAP32[$1044>>2] = 2;
         $1045 = $1;
         $1046 = $2;
         $1047 = $xxs;
         $1048 = (_load_sample($1045,$1046,0,$1047,0)|0);
         $1049 = ($1048|0)<(0);
         if ($1049) {
          label = 141;
          break L166;
         }
         $1050 = $smp_idx;
         $1051 = (($1050) + 1)|0;
         $smp_idx = $1051;
         $1052 = $j;
         $1053 = (($1052) + 1)|0;
         $j = $1053;
        }
        $1054 = $1;
        $1055 = $i;
        $1056 = (_mmd_alloc_tables($1054,$1055,$synth)|0);
        $1057 = ($1056|0)!=(0);
        if ($1057) {
         label = 144;
         break L166;
        }
        $1058 = $2;
        $1059 = $pos10;
        $1060 = $length;
        $1061 = (($1059) + ($1060))|0;
        (_hio_seek($1058,$1061,0)|0);
        break;
       }
       $1062 = $type;
       $1063 = ($1062|0)!=(0);
       if ($1063) {
        $1064 = $2;
        $1065 = $length;
        (_hio_seek($1064,$1065,1)|0);
        break;
       }
       $1066 = $xxi;
       $1067 = ((($1066)) + 36|0);
       HEAP32[$1067>>2] = 1;
       $1068 = $mod;
       $1069 = $i;
       $1070 = (_subinstrument_alloc($1068,$1069,1)|0);
       $1071 = ($1070|0)<(0);
       if ($1071) {
        label = 149;
        break L166;
       }
       $1072 = $xxi;
       $1073 = ((($1072)) + 756|0);
       $1074 = HEAP32[$1073>>2]|0;
       $sub = $1074;
       $1075 = $i;
       $1076 = (($temp_inst) + (($1075*48)|0)|0);
       $1077 = ((($1076)) + 40|0);
       $1078 = HEAP32[$1077>>2]|0;
       $1079 = $sub;
       HEAP32[$1079>>2] = $1078;
       $1080 = $sub;
       $1081 = ((($1080)) + 8|0);
       HEAP32[$1081>>2] = 128;
       $1082 = $i;
       $1083 = (($temp_inst) + (($1082*48)|0)|0);
       $1084 = ((($1083)) + 44|0);
       $1085 = HEAP32[$1084>>2]|0;
       $1086 = $sub;
       $1087 = ((($1086)) + 12|0);
       HEAP32[$1087>>2] = $1085;
       $1088 = $smp_idx;
       $1089 = $sub;
       $1090 = ((($1089)) + 40|0);
       HEAP32[$1090>>2] = $1088;
       $1091 = $smp_idx;
       $1092 = $mod;
       $1093 = ((($1092)) + 180|0);
       $1094 = HEAP32[$1093>>2]|0;
       $1095 = (($1094) + (($1091*52)|0)|0);
       $xxs = $1095;
       $1096 = $length;
       $1097 = $xxs;
       $1098 = ((($1097)) + 32|0);
       HEAP32[$1098>>2] = $1096;
       $1099 = $i;
       $1100 = (($temp_inst) + (($1099*48)|0)|0);
       $1101 = ((($1100)) + 32|0);
       $1102 = HEAP32[$1101>>2]|0;
       $1103 = $xxs;
       $1104 = ((($1103)) + 36|0);
       HEAP32[$1104>>2] = $1102;
       $1105 = $i;
       $1106 = (($temp_inst) + (($1105*48)|0)|0);
       $1107 = ((($1106)) + 36|0);
       $1108 = HEAP32[$1107>>2]|0;
       $1109 = $xxs;
       $1110 = ((($1109)) + 40|0);
       HEAP32[$1110>>2] = $1108;
       $1111 = $i;
       $1112 = (($temp_inst) + (($1111*48)|0)|0);
       $1113 = ((($1112)) + 36|0);
       $1114 = HEAP32[$1113>>2]|0;
       $1115 = ($1114|0)>(2);
       $1116 = $1115 ? 2 : 0;
       $1117 = $xxs;
       $1118 = ((($1117)) + 44|0);
       HEAP32[$1118>>2] = $1116;
       $1119 = $1;
       $1120 = $2;
       $1121 = $xxs;
       $1122 = (_load_sample($1119,$1120,0,$1121,0)|0);
       $1123 = ($1122|0)<(0);
       if ($1123) {
        label = 151;
        break L166;
       }
       $j = 0;
       while(1) {
        $1124 = $j;
        $1125 = ($1124|0)<(9);
        if (!($1125)) {
         break;
        }
        $k = 0;
        while(1) {
         $1126 = $k;
         $1127 = ($1126|0)<(12);
         if (!($1127)) {
          break;
         }
         $xpo = 0;
         $1128 = $j;
         $1129 = ($1128|0)<(4);
         $1130 = $j;
         do {
          if ($1129) {
           $1131 = (4 - ($1130))|0;
           $1132 = ($1131*12)|0;
           $xpo = $1132;
          } else {
           $1133 = ($1130|0)>(6);
           if (!($1133)) {
            break;
           }
           $1134 = $j;
           $1135 = (($1134) - 6)|0;
           $1136 = Math_imul(-12, $1135)|0;
           $xpo = $1136;
          }
         } while(0);
         $1137 = $xpo;
         $1138 = $1137&255;
         $1139 = $j;
         $1140 = ($1139*12)|0;
         $1141 = $k;
         $1142 = (($1140) + ($1141))|0;
         $1143 = $xxi;
         $1144 = ((($1143)) + 512|0);
         $1145 = (($1144) + ($1142<<1)|0);
         $1146 = ((($1145)) + 1|0);
         HEAP8[$1146>>0] = $1138;
         $1147 = $k;
         $1148 = (($1147) + 1)|0;
         $k = $1148;
        }
        $1149 = $j;
        $1150 = (($1149) + 1)|0;
        $j = $1150;
       }
       $1151 = $smp_idx;
       $1152 = (($1151) + 1)|0;
       $smp_idx = $1152;
      }
     } while(0);
     $1153 = $i;
     $1154 = (($1153) + 1)|0;
     $i = $1154;
     $1155 = $mask;
     $1156 = $1155;
     $1157 = HEAP32[$1156>>2]|0;
     $1158 = (($1155) + 4)|0;
     $1159 = $1158;
     $1160 = HEAP32[$1159>>2]|0;
     $1161 = (_bitshift64Shl(($1157|0),($1160|0),1)|0);
     $1162 = tempRet0;
     $1163 = $mask;
     $1164 = $1163;
     HEAP32[$1164>>2] = $1161;
     $1165 = (($1163) + 4)|0;
     $1166 = $1165;
     HEAP32[$1166>>2] = $1162;
    }
    switch (label|0) {
     case 120: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 122: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 124: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 126: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 130: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 135: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 137: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 141: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 144: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 149: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 151: {
      $0 = -1;
      $1197 = $0;
      STACKTOP = sp;return ($1197|0);
      break;
     }
     case 164: {
      $1167 = $2;
      (_hio_read16b($1167)|0);
      break L143;
      break;
     }
    }
   }
  } while(0);
  while(1) {
   $1168 = $2;
   $1169 = (_hio_eof($1168)|0);
   $1170 = ($1169|0)!=(0);
   $1171 = $1170 ^ 1;
   if (!($1171)) {
    break;
   }
   $1172 = $2;
   $1173 = (_hio_read32b($1172)|0);
   $id = $1173;
   $1174 = ($1173|0)<(0);
   if ($1174) {
    break;
   }
   $1175 = $2;
   $1176 = (_hio_read32b($1175)|0);
   $size11 = $1176;
   $1177 = ($1176|0)<(0);
   if ($1177) {
    break;
   }
   $1178 = $2;
   $1179 = (_hio_tell($1178)|0);
   $pos12 = $1179;
   $1180 = $id;
   if ((($1180|0) == 1095650895)) {
    $1183 = $size11;
    $1184 = ($1183|0)<(1023);
    $1185 = $size11;
    $1186 = $1184 ? $1185 : 1023;
    $s2 = $1186;
    $1187 = $s2;
    $1188 = $2;
    (_hio_read($buf,1,$1187,$1188)|0);
    $1189 = $s2;
    $1190 = (($buf) + ($1189)|0);
    HEAP8[$1190>>0] = 0;
   } else if ((($1180|0) == 1296385110)) {
    $1181 = $2;
    $1182 = (_hio_read32b($1181)|0);
    $ver = $1182;
   }
   $1191 = $2;
   $1192 = $pos12;
   $1193 = $size11;
   $1194 = (($1192) + ($1193))|0;
   (_hio_seek($1191,$1194,0)|0);
  }
  $1195 = $1;
  $1196 = ((($1195)) + 1284|0);
  HEAP32[$1196>>2] = 4;
  $0 = 0;
  $1197 = $0;
  STACKTOP = sp;return ($1197|0);
 }
 return (0)|0;
}
function _stream_init($f,$s) {
 $f = $f|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _stream_read_aligned16($s,$bits) {
 $s = $s|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $bits;
 $3 = $2;
 $4 = ($3|0)<=(4);
 do {
  if ($4) {
   $5 = $1;
   $6 = (_stream_read4($5)|0);
   $7 = $6 << 12;
   $8 = $7&65535;
   $0 = $8;
  } else {
   $9 = $2;
   $10 = ($9|0)<=(8);
   if ($10) {
    $11 = $1;
    $12 = (_stream_read8($11)|0);
    $13 = $12 << 8;
    $14 = $13&65535;
    $0 = $14;
    break;
   }
   $15 = $2;
   $16 = ($15|0)<=(12);
   $17 = $1;
   if ($16) {
    $18 = (_stream_read12($17)|0);
    $19 = $18 << 4;
    $20 = $19&65535;
    $0 = $20;
    break;
   } else {
    $21 = (_stream_read16($17)|0);
    $0 = $21;
    break;
   }
  }
 } while(0);
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _stream_read12($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_stream_read4($1)|0);
 $a = $2;
 $3 = $0;
 $4 = (_stream_read4($3)|0);
 $b = $4;
 $5 = $0;
 $6 = (_stream_read4($5)|0);
 $c = $6;
 $7 = $a;
 $8 = $7 << 8;
 $9 = $b;
 $10 = $9 << 4;
 $11 = $8 | $10;
 $12 = $c;
 $13 = $11 | $12;
 STACKTOP = sp;return ($13|0);
}
function _fix_effect323($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 15:  {
  $23 = $0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(0);
  if ($27) {
   $28 = $0;
   $29 = ((($28)) + 3|0);
   HEAP8[$29>>0] = 13;
  }
  $30 = $0;
  $31 = ((($30)) + 4|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(255);
  $35 = $0;
  if ($34) {
   $36 = ((($35)) + 3|0);
   HEAP8[$36>>0] = 0;
   $37 = $0;
   $38 = ((($37)) + 4|0);
   HEAP8[$38>>0] = 0;
   $39 = $0;
   $40 = ((($39)) + 2|0);
   HEAP8[$40>>0] = 1;
   STACKTOP = sp;return;
  }
  $41 = ((($35)) + 4|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)==(241);
  $45 = $0;
  if ($44) {
   $46 = ((($45)) + 3|0);
   HEAP8[$46>>0] = 14;
   $47 = $0;
   $48 = ((($47)) + 4|0);
   HEAP8[$48>>0] = -109;
   STACKTOP = sp;return;
  }
  $49 = ((($45)) + 4|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = ($51|0)==(242);
  $53 = $0;
  if ($52) {
   $54 = ((($53)) + 3|0);
   HEAP8[$54>>0] = 14;
   $55 = $0;
   $56 = ((($55)) + 4|0);
   HEAP8[$56>>0] = -61;
   STACKTOP = sp;return;
  }
  $57 = ((($53)) + 4|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)==(243);
  $61 = $0;
  if ($60) {
   $62 = ((($61)) + 3|0);
   HEAP8[$62>>0] = 14;
   $63 = $0;
   $64 = ((($63)) + 4|0);
   HEAP8[$64>>0] = -45;
   STACKTOP = sp;return;
  }
  $65 = ((($61)) + 4|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = ($67|0)>(240);
  $69 = $0;
  if ($68) {
   $70 = ((($69)) + 3|0);
   HEAP8[$70>>0] = 0;
   $71 = $0;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = 0;
   STACKTOP = sp;return;
  }
  $73 = ((($69)) + 4|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = ($75|0)>(10);
  if (!($76)) {
   STACKTOP = sp;return;
  }
  $77 = $0;
  $78 = ((($77)) + 3|0);
  HEAP8[$78>>0] = -85;
  $79 = $0;
  $80 = ((($79)) + 4|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82*125)|0;
  $84 = (($83|0) / 33)&-1;
  $85 = $84&255;
  $86 = $0;
  $87 = ((($86)) + 4|0);
  HEAP8[$87>>0] = $85;
  STACKTOP = sp;return;
  break;
 }
 case 12:  {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 & 240;
  $10 = $9 >> 4;
  $11 = ($10*10)|0;
  $12 = $0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 & 15;
  $17 = (($11) + ($16))|0;
  $18 = $17&255;
  $19 = $0;
  $20 = ((($19)) + 4|0);
  HEAP8[$20>>0] = $18;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $21 = $0;
  $22 = ((($21)) + 3|0);
  HEAP8[$22>>0] = 10;
  STACKTOP = sp;return;
  break;
 }
 case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $88 = $0;
  $89 = ((($88)) + 3|0);
  HEAP8[$89>>0] = 0;
  $90 = $0;
  $91 = ((($90)) + 4|0);
  HEAP8[$91>>0] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _stream_read4($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5 ^ 1;
 $7 = $6&1;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = $1;
 if ($13) {
  $19 = HEAP32[$14>>2]|0;
  $20 = (_hio_read8($19)|0);
  $21 = $1;
  $22 = ((($21)) + 8|0);
  HEAP8[$22>>0] = $20;
  $23 = $1;
  $24 = ((($23)) + 8|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 >> 4;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $15 = ((($14)) + 8|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 15;
  $0 = $18;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _stream_read8($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_stream_read4($1)|0);
 $a = $2;
 $3 = $0;
 $4 = (_stream_read4($3)|0);
 $b = $4;
 $5 = $a;
 $6 = $5 << 4;
 $7 = $b;
 $8 = $6 | $7;
 STACKTOP = sp;return ($8|0);
}
function _stream_read16($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_stream_read4($1)|0);
 $a = $2;
 $3 = $0;
 $4 = (_stream_read4($3)|0);
 $b = $4;
 $5 = $0;
 $6 = (_stream_read4($5)|0);
 $c = $6;
 $7 = $0;
 $8 = (_stream_read4($7)|0);
 $d = $8;
 $9 = $a;
 $10 = $9 << 12;
 $11 = $b;
 $12 = $11 << 8;
 $13 = $10 | $12;
 $14 = $c;
 $15 = $14 << 4;
 $16 = $13 | $15;
 $17 = $d;
 $18 = $16 | $17;
 $19 = $18&65535;
 STACKTOP = sp;return ($19|0);
}
function _dbm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1145195824);
 if ($6) {
  $0 = -1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $7 = $1;
  (_hio_seek($7,12,1)|0);
  $8 = $1;
  $9 = $2;
  _read_title($8,$9,44);
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _dbm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0, $i = 0, $mod = 0, $name = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 48|0;
 $data = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 HEAP32[$data>>2] = 0;
 $8 = $2;
 $9 = (_hio_read16b($8)|0);
 $version = $9;
 $10 = $2;
 (_hio_seek($10,10,1)|0);
 $11 = $2;
 (_hio_read($name,1,44,$11)|0);
 $12 = (_iff_new()|0);
 $handle = $12;
 $13 = $handle;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $15 = $handle;
 $16 = (_iff_register($15,7120,264)|0);
 $ret = $16;
 $17 = $handle;
 $18 = (_iff_register($17,7128,265)|0);
 $19 = $ret;
 $20 = $19 | $18;
 $ret = $20;
 $21 = $handle;
 $22 = (_iff_register($21,7560,266)|0);
 $23 = $ret;
 $24 = $23 | $22;
 $ret = $24;
 $25 = $handle;
 $26 = (_iff_register($25,7552,267)|0);
 $27 = $ret;
 $28 = $27 | $26;
 $ret = $28;
 $29 = $handle;
 $30 = (_iff_register($29,7136,268)|0);
 $31 = $ret;
 $32 = $31 | $30;
 $ret = $32;
 $33 = $handle;
 $34 = (_iff_register($33,7144,269)|0);
 $35 = $ret;
 $36 = $35 | $34;
 $ret = $36;
 $37 = $ret;
 $38 = ($37|0)!=(0);
 if ($38) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $39 = $mod;
 (_strncpy(($39|0),($name|0),64)|0);
 $40 = $mod;
 $41 = ((($40)) + 64|0);
 $42 = $version;
 $43 = $42&65535;
 $44 = $43 >> 8;
 $45 = $version;
 $46 = $45&65535;
 $47 = $46 & 255;
 HEAP32[$vararg_buffer>>2] = $44;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $47;
 (_snprintf($41,64,7152,$vararg_buffer)|0);
 $48 = $handle;
 $49 = $1;
 $50 = $2;
 $51 = (_iff_load($48,$49,$50,$data)|0);
 $52 = ($51|0)<(0);
 $53 = $handle;
 _iff_release($53);
 if ($52) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = $mod;
  $56 = ((($55)) + 136|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54|0)<($57|0);
  if (!($58)) {
   break;
  }
  $59 = $i;
  $60 = $mod;
  $61 = ((($60)) + 184|0);
  $62 = (($61) + (($59*12)|0)|0);
  HEAP32[$62>>2] = 128;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _get_info326($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = (_hio_read16b($11)|0);
 $13 = $12&65535;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 (_hio_read16b($16)|0);
 $17 = $3;
 $18 = (_hio_read16b($17)|0);
 $19 = $18&65535;
 $20 = $mod;
 $21 = ((($20)) + 128|0);
 HEAP32[$21>>2] = $19;
 $22 = $3;
 $23 = (_hio_read16b($22)|0);
 $24 = $23&65535;
 $25 = $mod;
 $26 = ((($25)) + 136|0);
 HEAP32[$26>>2] = $24;
 $27 = $mod;
 $28 = ((($27)) + 128|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $mod;
 $31 = ((($30)) + 136|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = Math_imul($29, $32)|0;
 $34 = $mod;
 $35 = ((($34)) + 132|0);
 HEAP32[$35>>2] = $33;
 $36 = $mod;
 $37 = (_instrument_init($36)|0);
 $38 = ($37|0)<(0);
 if ($38) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _get_song328($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $data = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 32|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $10 = $data;
 HEAP32[$10>>2] = 1;
 $11 = $3;
 (_hio_read($buffer,44,1,$11)|0);
 $12 = $3;
 $13 = (_hio_read16b($12)|0);
 $14 = $13&65535;
 $15 = $mod;
 $16 = ((($15)) + 156|0);
 HEAP32[$16>>2] = $14;
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = $mod;
  $19 = ((($18)) + 156|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $3;
  $23 = (_hio_read16b($22)|0);
  $24 = $23&255;
  $25 = $i;
  $26 = $mod;
  $27 = ((($26)) + 952|0);
  $28 = (($27) + ($25)|0);
  HEAP8[$28>>0] = $24;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _get_inst330($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c2spd = 0, $flags = 0, $i = 0, $mod = 0;
 var $snum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 40|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $mod;
  $8 = ((($7)) + 140|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 11;
   break;
  }
  $11 = $i;
  $12 = $mod;
  $13 = ((($12)) + 176|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + (($11*764)|0)|0);
  $16 = ((($15)) + 36|0);
  HEAP32[$16>>2] = 1;
  $17 = $mod;
  $18 = $i;
  $19 = (_subinstrument_alloc($17,$18,1)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   label = 4;
   break;
  }
  $21 = $3;
  (_hio_read($buffer,30,1,$21)|0);
  $22 = $mod;
  $23 = $i;
  (_instrument_name($22,$23,$buffer,30)|0);
  $24 = $3;
  $25 = (_hio_read16b($24)|0);
  $26 = $25&65535;
  $snum = $26;
  $27 = $snum;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $29 = $snum;
   $30 = $mod;
   $31 = ((($30)) + 144|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29|0)>($32|0);
   if (!($33)) {
    $34 = $snum;
    $35 = (($34) + -1)|0;
    $snum = $35;
    $36 = $i;
    $37 = $mod;
    $38 = ((($37)) + 176|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + (($36*764)|0)|0);
    $41 = ((($40)) + 756|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 40|0);
    HEAP32[$43>>2] = $35;
    $44 = $3;
    $45 = (_hio_read16b($44)|0);
    $46 = $45&65535;
    $47 = $i;
    $48 = $mod;
    $49 = ((($48)) + 176|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + (($47*764)|0)|0);
    $52 = ((($51)) + 756|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$53>>2] = $46;
    $54 = $3;
    $55 = (_hio_read32b($54)|0);
    $c2spd = $55;
    $56 = $3;
    $57 = (_hio_read32b($56)|0);
    $58 = $snum;
    $59 = $mod;
    $60 = ((($59)) + 180|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + (($58*52)|0)|0);
    $63 = ((($62)) + 36|0);
    HEAP32[$63>>2] = $57;
    $64 = $i;
    $65 = $mod;
    $66 = ((($65)) + 180|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + (($64*52)|0)|0);
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $3;
    $72 = (_hio_read32b($71)|0);
    $73 = (($70) + ($72))|0;
    $74 = $snum;
    $75 = $mod;
    $76 = ((($75)) + 180|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + (($74*52)|0)|0);
    $79 = ((($78)) + 40|0);
    HEAP32[$79>>2] = $73;
    $80 = $3;
    $81 = (_hio_read16b($80)|0);
    $82 = $81 << 16 >> 16;
    $83 = (128 + ($82))|0;
    $84 = $i;
    $85 = $mod;
    $86 = ((($85)) + 176|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + (($84*764)|0)|0);
    $89 = ((($88)) + 756|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 8|0);
    HEAP32[$91>>2] = $83;
    $92 = $i;
    $93 = $mod;
    $94 = ((($93)) + 176|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + (($92*764)|0)|0);
    $97 = ((($96)) + 756|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($98)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)>(255);
    if ($101) {
     $102 = $i;
     $103 = $mod;
     $104 = ((($103)) + 176|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($105) + (($102*764)|0)|0);
     $107 = ((($106)) + 756|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($108)) + 8|0);
     HEAP32[$109>>2] = 255;
    }
    $110 = $3;
    $111 = (_hio_read16b($110)|0);
    $112 = $111&65535;
    $flags = $112;
    $113 = $flags;
    $114 = $113 & 3;
    $115 = ($114|0)!=(0);
    $116 = $115 ? 2 : 0;
    $117 = $snum;
    $118 = $mod;
    $119 = ((($118)) + 180|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + (($117*52)|0)|0);
    $122 = ((($121)) + 44|0);
    HEAP32[$122>>2] = $116;
    $123 = $flags;
    $124 = $123 & 2;
    $125 = ($124|0)!=(0);
    $126 = $125 ? 4 : 0;
    $127 = $snum;
    $128 = $mod;
    $129 = ((($128)) + 180|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) + (($127*52)|0)|0);
    $132 = ((($131)) + 44|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $133 | $126;
    HEAP32[$132>>2] = $134;
    $135 = $c2spd;
    $136 = $i;
    $137 = $mod;
    $138 = ((($137)) + 176|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (($139) + (($136*764)|0)|0);
    $141 = ((($140)) + 756|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ((($142)) + 12|0);
    $144 = $i;
    $145 = $mod;
    $146 = ((($145)) + 176|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + (($144*764)|0)|0);
    $149 = ((($148)) + 756|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($150)) + 16|0);
    _c2spd_to_note($135,$143,$151);
   }
  }
  $152 = $i;
  $153 = (($152) + 1)|0;
  $i = $153;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 return (0)|0;
}
function _get_patt332($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $dummy = 0, $event = 0, $i = 0, $mod = 0, $n = 0, $r = 0, $sz = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp + 56|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = (_pattern_init($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $0 = -1;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $mod;
  $11 = ((($10)) + 128|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   label = 38;
   break;
  }
  $14 = $mod;
  $15 = $i;
  $16 = $3;
  $17 = (_hio_read16b($16)|0);
  $18 = $17&65535;
  $19 = (_pattern_tracks_alloc($14,$15,$18)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   label = 6;
   break;
  }
  $21 = $3;
  $22 = (_hio_read32b($21)|0);
  $sz = $22;
  $r = 0;
  $c = -1;
  while(1) {
   $23 = $sz;
   $24 = ($23|0)>(0);
   if (!($24)) {
    break;
   }
   $25 = $3;
   $26 = (_hio_read8($25)|0);
   $27 = $26&255;
   $c = $27;
   $28 = $sz;
   $29 = (($28) + -1)|0;
   $sz = $29;
   $30 = ($29|0)<=(0);
   if ($30) {
    break;
   }
   $31 = $c;
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = $r;
    $34 = (($33) + 1)|0;
    $r = $34;
    $c = -1;
    continue;
   }
   $35 = $c;
   $36 = (($35) + -1)|0;
   $c = $36;
   $37 = $3;
   $38 = (_hio_read8($37)|0);
   $39 = $38&255;
   $n = $39;
   $40 = $sz;
   $41 = (($40) + -1)|0;
   $sz = $41;
   $42 = ($41|0)<=(0);
   if ($42) {
    break;
   }
   $43 = $c;
   $44 = $mod;
   $45 = ((($44)) + 136|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($43|0)>=($46|0);
   if ($47) {
    label = 15;
   } else {
    $48 = $r;
    $49 = $i;
    $50 = $mod;
    $51 = ((($50)) + 168|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($49<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$54>>2]|0;
    $56 = ($48|0)>=($55|0);
    if ($56) {
     label = 15;
    } else {
     $57 = $r;
     $58 = $c;
     $59 = $i;
     $60 = $1;
     $61 = ((($60)) + 168|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + ($59<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 4|0);
     $66 = (($65) + ($58<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $1;
     $69 = ((($68)) + 172|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($72)) + 4|0);
     $74 = (($73) + ($57<<3)|0);
     $event = $74;
    }
   }
   if ((label|0) == 15) {
    label = 0;
    $event = $dummy;
   }
   $75 = $n;
   $76 = $75 & 1;
   $77 = ($76|0)!=(0);
   if ($77) {
    $78 = $3;
    $79 = (_hio_read8($78)|0);
    $x = $79;
    $80 = $x;
    $81 = $80&255;
    $82 = $81 & 240;
    $83 = $82 >> 4;
    $84 = ($83*12)|0;
    $85 = (13 + ($84))|0;
    $86 = $x;
    $87 = $86&255;
    $88 = $87 & 15;
    $89 = (($85) + ($88))|0;
    $90 = $89&255;
    $91 = $event;
    HEAP8[$91>>0] = $90;
    $92 = $sz;
    $93 = (($92) + -1)|0;
    $sz = $93;
    $94 = ($93|0)<=(0);
    if ($94) {
     break;
    }
   }
   $95 = $n;
   $96 = $95 & 2;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = $3;
    $99 = (_hio_read8($98)|0);
    $100 = $event;
    $101 = ((($100)) + 1|0);
    HEAP8[$101>>0] = $99;
    $102 = $sz;
    $103 = (($102) + -1)|0;
    $sz = $103;
    $104 = ($103|0)<=(0);
    if ($104) {
     break;
    }
   }
   $105 = $n;
   $106 = $105 & 4;
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = $3;
    $109 = (_hio_read8($108)|0);
    $110 = $event;
    $111 = ((($110)) + 3|0);
    HEAP8[$111>>0] = $109;
    $112 = $sz;
    $113 = (($112) + -1)|0;
    $sz = $113;
    $114 = ($113|0)<=(0);
    if ($114) {
     break;
    }
   }
   $115 = $n;
   $116 = $115 & 8;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $3;
    $119 = (_hio_read8($118)|0);
    $120 = $event;
    $121 = ((($120)) + 4|0);
    HEAP8[$121>>0] = $119;
    $122 = $sz;
    $123 = (($122) + -1)|0;
    $sz = $123;
    $124 = ($123|0)<=(0);
    if ($124) {
     break;
    }
   }
   $125 = $n;
   $126 = $125 & 16;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $3;
    $129 = (_hio_read8($128)|0);
    $130 = $event;
    $131 = ((($130)) + 5|0);
    HEAP8[$131>>0] = $129;
    $132 = $sz;
    $133 = (($132) + -1)|0;
    $sz = $133;
    $134 = ($133|0)<=(0);
    if ($134) {
     break;
    }
   }
   $135 = $n;
   $136 = $135 & 32;
   $137 = ($136|0)!=(0);
   if ($137) {
    $138 = $3;
    $139 = (_hio_read8($138)|0);
    $140 = $event;
    $141 = ((($140)) + 6|0);
    HEAP8[$141>>0] = $139;
    $142 = $sz;
    $143 = (($142) + -1)|0;
    $sz = $143;
    $144 = ($143|0)<=(0);
    if ($144) {
     break;
    }
   }
   $145 = $event;
   $146 = ((($145)) + 3|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = ($148|0)==(28);
   if ($149) {
    $150 = $event;
    $151 = ((($150)) + 3|0);
    HEAP8[$151>>0] = -85;
   }
   $152 = $event;
   $153 = ((($152)) + 3|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = ($155|0)>(28);
   if ($156) {
    $157 = $event;
    $158 = ((($157)) + 6|0);
    HEAP8[$158>>0] = 0;
    $159 = $event;
    $160 = ((($159)) + 3|0);
    HEAP8[$160>>0] = 0;
   }
   $161 = $event;
   $162 = ((($161)) + 5|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = ($164|0)==(28);
   if ($165) {
    $166 = $event;
    $167 = ((($166)) + 5|0);
    HEAP8[$167>>0] = -85;
   }
   $168 = $event;
   $169 = ((($168)) + 5|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = ($171|0)>(28);
   if (!($172)) {
    continue;
   }
   $173 = $event;
   $174 = ((($173)) + 6|0);
   HEAP8[$174>>0] = 0;
   $175 = $event;
   $176 = ((($175)) + 5|0);
   HEAP8[$176>>0] = 0;
  }
  $177 = $i;
  $178 = (($177) + 1)|0;
  $i = $178;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 else if ((label|0) == 38) {
  $0 = 0;
  $179 = $0;
  STACKTOP = sp;return ($179|0);
 }
 return (0)|0;
}
function _get_smpl($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $mod;
  $8 = ((($7)) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = $3;
  $12 = (_hio_read32b($11)|0);
  $flags = $12;
  $13 = $3;
  $14 = (_hio_read32b($13)|0);
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 180|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($15*52)|0)|0);
  $20 = ((($19)) + 32|0);
  HEAP32[$20>>2] = $14;
  $21 = $flags;
  $22 = $21 & 2;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $i;
   $25 = $mod;
   $26 = ((($25)) + 180|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + (($24*52)|0)|0);
   $29 = ((($28)) + 44|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 | 1;
   HEAP32[$29>>2] = $31;
  }
  $32 = $flags;
  $33 = $32 & 4;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $i;
   $36 = $mod;
   $37 = ((($36)) + 180|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + (($35*52)|0)|0);
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 << 2;
   HEAP32[$40>>2] = $42;
   $43 = $3;
   $44 = $i;
   $45 = $mod;
   $46 = ((($45)) + 180|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + (($44*52)|0)|0);
   $49 = ((($48)) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   (_hio_seek($43,$50,1)|0);
  } else {
   $51 = $1;
   $52 = $3;
   $53 = $i;
   $54 = $mod;
   $55 = ((($54)) + 180|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + (($53*52)|0)|0);
   $58 = (_load_sample($51,$52,64,$57,0)|0);
   $59 = ($58|0)<(0);
   if ($59) {
    label = 8;
    break;
   }
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _get_venv($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $i = 0, $ins = 0;
 var $j = 0, $mod = 0, $nenv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $nenv = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $nenv;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = (_hio_read16b($11)|0);
  $13 = $12&65535;
  $14 = (($13) - 1)|0;
  $ins = $14;
  $15 = $2;
  $16 = (_hio_read8($15)|0);
  $17 = $16&255;
  $18 = $17 & 7;
  $19 = $ins;
  $20 = $mod;
  $21 = ((($20)) + 176|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($19*764)|0)|0);
  $24 = ((($23)) + 44|0);
  HEAP32[$24>>2] = $18;
  $25 = $2;
  $26 = (_hio_read8($25)|0);
  $27 = $26&255;
  $28 = $ins;
  $29 = $mod;
  $30 = ((($29)) + 176|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*764)|0)|0);
  $33 = ((($32)) + 44|0);
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $27;
  $35 = $2;
  $36 = (_hio_read8($35)|0);
  $37 = $36&255;
  $38 = $ins;
  $39 = $mod;
  $40 = ((($39)) + 176|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + (($38*764)|0)|0);
  $43 = ((($42)) + 44|0);
  $44 = ((($43)) + 12|0);
  HEAP32[$44>>2] = $37;
  $45 = $2;
  $46 = (_hio_read8($45)|0);
  $47 = $46&255;
  $48 = $ins;
  $49 = $mod;
  $50 = ((($49)) + 176|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($48*764)|0)|0);
  $53 = ((($52)) + 44|0);
  $54 = ((($53)) + 20|0);
  HEAP32[$54>>2] = $47;
  $55 = $2;
  $56 = (_hio_read8($55)|0);
  $57 = $56&255;
  $58 = $ins;
  $59 = $mod;
  $60 = ((($59)) + 176|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + (($58*764)|0)|0);
  $63 = ((($62)) + 44|0);
  $64 = ((($63)) + 24|0);
  HEAP32[$64>>2] = $57;
  $65 = $2;
  (_hio_read8($65)|0);
  $j = 0;
  while(1) {
   $66 = $j;
   $67 = ($66|0)<(32);
   if (!($67)) {
    break;
   }
   $68 = $2;
   $69 = (_hio_read16b($68)|0);
   $70 = $j;
   $71 = $70<<1;
   $72 = (($71) + 0)|0;
   $73 = $ins;
   $74 = $mod;
   $75 = ((($74)) + 176|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + (($73*764)|0)|0);
   $78 = ((($77)) + 44|0);
   $79 = ((($78)) + 28|0);
   $80 = (($79) + ($72<<1)|0);
   HEAP16[$80>>1] = $69;
   $81 = $2;
   $82 = (_hio_read16b($81)|0);
   $83 = $j;
   $84 = $83<<1;
   $85 = (($84) + 1)|0;
   $86 = $ins;
   $87 = $mod;
   $88 = ((($87)) + 176|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + (($86*764)|0)|0);
   $91 = ((($90)) + 44|0);
   $92 = ((($91)) + 28|0);
   $93 = (($92) + ($85<<1)|0);
   HEAP16[$93>>1] = $82;
   $94 = $j;
   $95 = (($94) + 1)|0;
   $j = $95;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 STACKTOP = sp;return 0;
}
function _umx_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0;
 var $i = 0, $id = 0, $offset = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $offset = -1;
 $b = $buf;
 $4 = $1;
 $5 = (_hio_read($buf,1,1500,$4)|0);
 $6 = ($5>>>0)<(1500);
 if ($6) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $7 = $b;
 $8 = (_readmem32b($7)|0);
 $id = $8;
 $9 = $id;
 $10 = ($9|0)!=(-1048368482);
 if ($10) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(1500);
  if (!($12)) {
   break;
  }
  $13 = $b;
  $14 = (_readmem32b($13)|0);
  $id = $14;
  $15 = $b;
  $16 = (_memcmp($15,7216,16)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   label = 8;
   break;
  }
  $19 = $id;
  $20 = ($19|0)==(1229803597);
  $21 = $i;
  if ($20) {
   label = 10;
   break;
  }
  $22 = ($21|0)>(44);
  $23 = $id;
  $24 = ($23|0)==(1396920909);
  $or$cond = $22 & $24;
  $25 = $i;
  if ($or$cond) {
   label = 12;
   break;
  }
  $27 = ($25|0)>(1080);
  $28 = $id;
  $29 = ($28|0)==(1294879534);
  $or$cond3 = $27 & $29;
  $30 = $i;
  if ($or$cond3) {
   label = 14;
   break;
  }
  $32 = (($30) + 1)|0;
  $i = $32;
  $33 = $b;
  $34 = ((($33)) + 1|0);
  $b = $34;
 }
 if ((label|0) == 8) {
  $18 = $i;
  $offset = $18;
 }
 else if ((label|0) == 10) {
  $offset = $21;
 }
 else if ((label|0) == 12) {
  $26 = (($25) - 44)|0;
  $offset = $26;
 }
 else if ((label|0) == 14) {
  $31 = (($30) - 1080)|0;
  $offset = $31;
 }
 $35 = $offset;
 $36 = ($35|0)<(0);
 if ($36) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _umx_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0, $i = 0, $id = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 28|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $b = $buf;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_read($buf,1,1500,$6)|0);
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(1500);
  if (!($8)) {
   label = 12;
   break;
  }
  $9 = $b;
  $10 = (_readmem32b($9)|0);
  $id = $10;
  $11 = $b;
  $12 = (_memcmp($11,7216,16)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 4;
   break;
  }
  $19 = $id;
  $20 = ($19|0)==(1229803597);
  if ($20) {
   label = 6;
   break;
  }
  $26 = $i;
  $27 = ($26|0)>(44);
  $28 = $id;
  $29 = ($28|0)==(1396920909);
  $or$cond = $27 & $29;
  if ($or$cond) {
   label = 8;
   break;
  }
  $36 = $i;
  $37 = ($36|0)>(1080);
  $38 = $id;
  $39 = ($38|0)==(1294879534);
  $or$cond3 = $37 & $39;
  if ($or$cond3) {
   label = 10;
   break;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
  $48 = $b;
  $49 = ((($48)) + 1|0);
  $b = $49;
 }
 if ((label|0) == 4) {
  $14 = HEAP32[(1240)>>2]|0;
  $15 = $1;
  $16 = $2;
  $17 = $i;
  $18 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$16,$17)|0);
  $0 = $18;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 6) {
  $21 = HEAP32[(3472)>>2]|0;
  $22 = $1;
  $23 = $2;
  $24 = $i;
  $25 = (FUNCTION_TABLE_iiii[$21 & 255]($22,$23,$24)|0);
  $0 = $25;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 8) {
  $30 = HEAP32[(2016)>>2]|0;
  $31 = $1;
  $32 = $2;
  $33 = $i;
  $34 = (($33) - 44)|0;
  $35 = (FUNCTION_TABLE_iiii[$30 & 255]($31,$32,$34)|0);
  $0 = $35;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 10) {
  $40 = HEAP32[(1640)>>2]|0;
  $41 = $1;
  $42 = $2;
  $43 = $i;
  $44 = (($43) - 1080)|0;
  $45 = (FUNCTION_TABLE_iiii[$40 & 255]($41,$42,$44)|0);
  $0 = $45;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _fix_effect($fxt,$fxp) {
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fxt;
 $1 = $fxp;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 do {
  switch ($4|0) {
  case 8:  {
   $6 = $0;
   HEAP8[$6>>0] = 29;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 7: case 6: case 5: case 4: case 3: case 2: case 1:  {
   break;
  }
  case 0:  {
   $5 = $1;
   HEAP8[$5>>0] = 0;
   break;
  }
  case 18:  {
   $10 = $0;
   HEAP8[$10>>0] = 27;
   break;
  }
  case 16:  {
   $7 = $0;
   HEAP8[$7>>0] = -76;
   break;
  }
  case 31:  {
   $15 = $0;
   HEAP8[$15>>0] = -85;
   break;
  }
  case 30:  {
   $13 = $1;
   HEAP8[$13>>0] = 0;
   $14 = $0;
   HEAP8[$14>>0] = 0;
   break;
  }
  case 20:  {
   $12 = $0;
   HEAP8[$12>>0] = -84;
   break;
  }
  case 17:  {
   $8 = $1;
   HEAP8[$8>>0] = 0;
   $9 = $0;
   HEAP8[$9>>0] = 0;
   break;
  }
  case 19:  {
   $11 = $0;
   HEAP8[$11>>0] = 16;
   break;
  }
  default: {
   $16 = $1;
   HEAP8[$16>>0] = 0;
   $17 = $0;
   HEAP8[$17>>0] = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _gdm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1195658750);
 if ($6) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $1;
 $8 = $3;
 $9 = (($8) + 71)|0;
 (_hio_seek($7,$9,0)|0);
 $10 = $1;
 $11 = (_hio_read32b($10)|0);
 $12 = ($11|0)!=(1196246611);
 if ($12) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $1;
  $14 = $3;
  $15 = (($14) + 4)|0;
  (_hio_seek($13,$15,0)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,32);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _gdm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c = 0, $c2 = 0, $c4spd = 0, $event = 0, $flg = 0, $i = 0, $ins_ofs = 0, $k = 0, $k4 = 0, $len = 0, $len1 = 0, $mod = 0;
 var $ord_ofs = 0, $pan = 0, $panmap = 0, $pat_ofs = 0, $r = 0, $r3 = 0, $smp_ofs = 0, $tracker = 0, $tvmaj = 0, $tvmin = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $vermaj = 0, $vermin = 0;
 var $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $buffer = sp + 176|0;
 $panmap = sp + 144|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $mod;
 $9 = $2;
 (_hio_read($8,1,32,$9)|0);
 $10 = $2;
 (_hio_seek($10,32,1)|0);
 $11 = $2;
 (_hio_seek($11,7,1)|0);
 $12 = $2;
 $13 = (_hio_read8($12)|0);
 $14 = $13&255;
 $vermaj = $14;
 $15 = $2;
 $16 = (_hio_read8($15)|0);
 $17 = $16&255;
 $vermin = $17;
 $18 = $2;
 $19 = (_hio_read16l($18)|0);
 $20 = $19&65535;
 $tracker = $20;
 $21 = $2;
 $22 = (_hio_read8($21)|0);
 $23 = $22&255;
 $tvmaj = $23;
 $24 = $2;
 $25 = (_hio_read8($24)|0);
 $26 = $25&255;
 $tvmin = $26;
 $27 = $tracker;
 $28 = ($27|0)==(0);
 $29 = $1;
 $30 = $vermaj;
 $31 = $vermin;
 $32 = $tvmaj;
 $33 = $tvmin;
 if ($28) {
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $31;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $32;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $33;
  _set_type($29,7280,$vararg_buffer);
 } else {
  HEAP32[$vararg_buffer4>>2] = $30;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $31;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $32;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $33;
  _set_type($29,7312,$vararg_buffer4);
 }
 $34 = $2;
 (_hio_read($panmap,32,1,$34)|0);
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ($35|0)<(32);
  if (!($36)) {
   break;
  }
  $37 = $i;
  $38 = (($panmap) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)==(255);
  $42 = $i;
  $43 = (($panmap) + ($42)|0);
  if ($41) {
   HEAP8[$43>>0] = 8;
   $44 = $i;
   $45 = $mod;
   $46 = ((($45)) + 184|0);
   $47 = (($46) + (($44*12)|0)|0);
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = 0;
   $49 = $i;
   $50 = $mod;
   $51 = ((($50)) + 184|0);
   $52 = (($51) + (($49*12)|0)|0);
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 | 2;
   HEAP32[$53>>2] = $55;
  } else {
   $56 = HEAP8[$43>>0]|0;
   $57 = $56&255;
   $58 = ($57|0)==(16);
   if ($58) {
    $59 = $i;
    $60 = (($panmap) + ($59)|0);
    HEAP8[$60>>0] = 8;
   }
  }
  $61 = $i;
  $62 = (($panmap) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (($64) - 8)|0;
  $66 = $65<<4;
  $67 = (128 + ($66))|0;
  $68 = $i;
  $69 = $mod;
  $70 = ((($69)) + 184|0);
  $71 = (($70) + (($68*12)|0)|0);
  HEAP32[$71>>2] = $67;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $74 = $2;
 $75 = (_hio_read8($74)|0);
 $76 = $75&255;
 $77 = $mod;
 $78 = ((($77)) + 164|0);
 HEAP32[$78>>2] = $76;
 $79 = $2;
 $80 = (_hio_read8($79)|0);
 $81 = $80&255;
 $82 = $mod;
 $83 = ((($82)) + 148|0);
 HEAP32[$83>>2] = $81;
 $84 = $2;
 $85 = (_hio_read8($84)|0);
 $86 = $85&255;
 $87 = $mod;
 $88 = ((($87)) + 152|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 (_hio_read16l($89)|0);
 $90 = $2;
 $91 = (_hio_read32l($90)|0);
 $ord_ofs = $91;
 $92 = $2;
 $93 = (_hio_read8($92)|0);
 $94 = $93&255;
 $95 = (($94) + 1)|0;
 $96 = $mod;
 $97 = ((($96)) + 156|0);
 HEAP32[$97>>2] = $95;
 $98 = $2;
 $99 = (_hio_read32l($98)|0);
 $pat_ofs = $99;
 $100 = $2;
 $101 = (_hio_read8($100)|0);
 $102 = $101&255;
 $103 = (($102) + 1)|0;
 $104 = $mod;
 $105 = ((($104)) + 128|0);
 HEAP32[$105>>2] = $103;
 $106 = $2;
 $107 = (_hio_read32l($106)|0);
 $ins_ofs = $107;
 $108 = $2;
 $109 = (_hio_read32l($108)|0);
 $smp_ofs = $109;
 $110 = $2;
 $111 = (_hio_read8($110)|0);
 $112 = $111&255;
 $113 = (($112) + 1)|0;
 $114 = $mod;
 $115 = ((($114)) + 144|0);
 HEAP32[$115>>2] = $113;
 $116 = $mod;
 $117 = ((($116)) + 140|0);
 HEAP32[$117>>2] = $113;
 $118 = $2;
 $119 = $3;
 $120 = $ord_ofs;
 $121 = (($119) + ($120))|0;
 (_hio_seek($118,$121,0)|0);
 $i = 0;
 while(1) {
  $122 = $i;
  $123 = $mod;
  $124 = ((($123)) + 156|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($122|0)<($125|0);
  $127 = $2;
  if (!($126)) {
   break;
  }
  $128 = (_hio_read8($127)|0);
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 952|0);
  $132 = (($131) + ($129)|0);
  HEAP8[$132>>0] = $128;
  $133 = $i;
  $134 = (($133) + 1)|0;
  $i = $134;
 }
 $135 = $3;
 $136 = $ins_ofs;
 $137 = (($135) + ($136))|0;
 (_hio_seek($127,$137,0)|0);
 $138 = $mod;
 $139 = (_instrument_init($138)|0);
 $140 = ($139|0)<(0);
 if ($140) {
  $0 = -1;
  $526 = $0;
  STACKTOP = sp;return ($526|0);
 }
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = $mod;
  $143 = ((($142)) + 140|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($141|0)<($144|0);
  if (!($145)) {
   break;
  }
  $146 = $mod;
  $147 = $i;
  $148 = (_subinstrument_alloc($146,$147,1)|0);
  $149 = ($148|0)<(0);
  if ($149) {
   label = 19;
   break;
  }
  $150 = $2;
  (_hio_read($buffer,32,1,$150)|0);
  $151 = $mod;
  $152 = $i;
  (_instrument_name($151,$152,$buffer,32)|0);
  $153 = $2;
  (_hio_seek($153,12,1)|0);
  $154 = $2;
  (_hio_read8($154)|0);
  $155 = $2;
  $156 = (_hio_read32l($155)|0);
  $157 = $i;
  $158 = $mod;
  $159 = ((($158)) + 180|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + (($157*52)|0)|0);
  $162 = ((($161)) + 32|0);
  HEAP32[$162>>2] = $156;
  $163 = $2;
  $164 = (_hio_read32l($163)|0);
  $165 = $i;
  $166 = $mod;
  $167 = ((($166)) + 180|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($168) + (($165*52)|0)|0);
  $170 = ((($169)) + 36|0);
  HEAP32[$170>>2] = $164;
  $171 = $2;
  $172 = (_hio_read32l($171)|0);
  $173 = $i;
  $174 = $mod;
  $175 = ((($174)) + 180|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($176) + (($173*52)|0)|0);
  $178 = ((($177)) + 40|0);
  HEAP32[$178>>2] = $172;
  $179 = $2;
  $180 = (_hio_read8($179)|0);
  $181 = $180&255;
  $flg = $181;
  $182 = $2;
  $183 = (_hio_read16l($182)|0);
  $184 = $183&65535;
  $c4spd = $184;
  $185 = $2;
  $186 = (_hio_read8($185)|0);
  $187 = $186&255;
  $vol = $187;
  $188 = $2;
  $189 = (_hio_read8($188)|0);
  $190 = $189&255;
  $pan = $190;
  $191 = $vol;
  $192 = ($191|0)>(64);
  $193 = $vol;
  $194 = $192 ? 64 : $193;
  $195 = $i;
  $196 = $mod;
  $197 = ((($196)) + 176|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (($198) + (($195*764)|0)|0);
  $200 = ((($199)) + 756|0);
  $201 = HEAP32[$200>>2]|0;
  HEAP32[$201>>2] = $194;
  $202 = $pan;
  $203 = ($202|0)>(15);
  if ($203) {
   $216 = 128;
  } else {
   $204 = $pan;
   $205 = (($204) - 8)|0;
   $206 = $205<<4;
   $207 = (128 + ($206))|0;
   $216 = $207;
  }
  $208 = $i;
  $209 = $mod;
  $210 = ((($209)) + 176|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + (($208*764)|0)|0);
  $213 = ((($212)) + 756|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($214)) + 8|0);
  HEAP32[$215>>2] = $216;
  $217 = $c4spd;
  $218 = $i;
  $219 = $mod;
  $220 = ((($219)) + 176|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + (($218*764)|0)|0);
  $223 = ((($222)) + 756|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = ((($224)) + 12|0);
  $226 = $i;
  $227 = $mod;
  $228 = ((($227)) + 176|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = (($229) + (($226*764)|0)|0);
  $231 = ((($230)) + 756|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ((($232)) + 16|0);
  _c2spd_to_note($217,$225,$233);
  $234 = $i;
  $235 = $i;
  $236 = $mod;
  $237 = ((($236)) + 176|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + (($235*764)|0)|0);
  $240 = ((($239)) + 756|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ((($241)) + 40|0);
  HEAP32[$242>>2] = $234;
  $243 = $i;
  $244 = $mod;
  $245 = ((($244)) + 180|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($246) + (($243*52)|0)|0);
  $248 = ((($247)) + 44|0);
  HEAP32[$248>>2] = 0;
  $249 = $i;
  $250 = $mod;
  $251 = ((($250)) + 180|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + (($249*52)|0)|0);
  $254 = ((($253)) + 32|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = ($255|0)>(0);
  if ($256) {
   $257 = $i;
   $258 = $mod;
   $259 = ((($258)) + 176|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + (($257*764)|0)|0);
   $262 = ((($261)) + 36|0);
   HEAP32[$262>>2] = 1;
  }
  $263 = $flg;
  $264 = $263 & 1;
  $265 = ($264|0)!=(0);
  if ($265) {
   $266 = $i;
   $267 = $mod;
   $268 = ((($267)) + 180|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (($269) + (($266*52)|0)|0);
   $271 = ((($270)) + 44|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $272 | 2;
   HEAP32[$271>>2] = $273;
  }
  $274 = $flg;
  $275 = $274 & 2;
  $276 = ($275|0)!=(0);
  if ($276) {
   $277 = $i;
   $278 = $mod;
   $279 = ((($278)) + 180|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = (($280) + (($277*52)|0)|0);
   $282 = ((($281)) + 44|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $283 | 1;
   HEAP32[$282>>2] = $284;
   $285 = $i;
   $286 = $mod;
   $287 = ((($286)) + 180|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($288) + (($285*52)|0)|0);
   $290 = ((($289)) + 32|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = $291 >> 1;
   HEAP32[$290>>2] = $292;
   $293 = $i;
   $294 = $mod;
   $295 = ((($294)) + 180|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = (($296) + (($293*52)|0)|0);
   $298 = ((($297)) + 36|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $299 >> 1;
   HEAP32[$298>>2] = $300;
   $301 = $i;
   $302 = $mod;
   $303 = ((($302)) + 180|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($304) + (($301*52)|0)|0);
   $306 = ((($305)) + 40|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = $307 >> 1;
   HEAP32[$306>>2] = $308;
  }
  $309 = $i;
  $310 = (($309) + 1)|0;
  $i = $310;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $526 = $0;
  STACKTOP = sp;return ($526|0);
 }
 $311 = $2;
 $312 = $3;
 $313 = $pat_ofs;
 $314 = (($312) + ($313))|0;
 (_hio_seek($311,$314,0)|0);
 $315 = $mod;
 $316 = ((($315)) + 136|0);
 HEAP32[$316>>2] = 0;
 $i = 0;
 while(1) {
  $317 = $i;
  $318 = $mod;
  $319 = ((($318)) + 128|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ($317|0)<($320|0);
  if (!($321)) {
   break;
  }
  $322 = $2;
  $323 = (_hio_read16l($322)|0);
  $324 = $323&65535;
  $len = $324;
  $325 = $len;
  $326 = (($325) - 2)|0;
  $len = $326;
  $r = 0;
  L45: while(1) {
   $327 = $len;
   $328 = ($327|0)>(0);
   if (!($328)) {
    break;
   }
   $329 = $2;
   $330 = (_hio_read8($329)|0);
   $331 = $330&255;
   $c = $331;
   $332 = $len;
   $333 = (($332) + -1)|0;
   $len = $333;
   $334 = $c;
   $335 = ($334|0)==(0);
   if ($335) {
    $336 = $r;
    $337 = (($336) + 1)|0;
    $r = $337;
    continue;
   }
   $338 = $mod;
   $339 = ((($338)) + 136|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = $c;
   $342 = $341 & 31;
   $343 = ($340|0)<=($342|0);
   if ($343) {
    $344 = $c;
    $345 = $344 & 31;
    $346 = (($345) + 1)|0;
    $347 = $mod;
    $348 = ((($347)) + 136|0);
    HEAP32[$348>>2] = $346;
   }
   $349 = $c;
   $350 = $349 & 32;
   $351 = ($350|0)!=(0);
   if ($351) {
    $352 = $2;
    (_hio_read8($352)|0);
    $353 = $2;
    (_hio_read8($353)|0);
    $354 = $len;
    $355 = (($354) - 2)|0;
    $len = $355;
   }
   $356 = $c;
   $357 = $356 & 64;
   $358 = ($357|0)!=(0);
   if (!($358)) {
    continue;
   }
   while(1) {
    $359 = $2;
    $360 = (_hio_read8($359)|0);
    $361 = $360&255;
    $k = $361;
    $362 = $len;
    $363 = (($362) + -1)|0;
    $len = $363;
    $364 = $k;
    $365 = $364 & 192;
    $366 = ($365|0)!=(192);
    if ($366) {
     $367 = $2;
     (_hio_read8($367)|0);
     $368 = $len;
     $369 = (($368) + -1)|0;
     $len = $369;
    }
    $370 = $k;
    $371 = $370 & 32;
    $372 = ($371|0)!=(0);
    if (!($372)) {
     continue L45;
    }
   }
  }
  $373 = $i;
  $374 = (($373) + 1)|0;
  $i = $374;
 }
 $375 = $mod;
 $376 = ((($375)) + 128|0);
 $377 = HEAP32[$376>>2]|0;
 $378 = $mod;
 $379 = ((($378)) + 136|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = Math_imul($377, $380)|0;
 $382 = $mod;
 $383 = ((($382)) + 132|0);
 HEAP32[$383>>2] = $381;
 $384 = $mod;
 $385 = (_pattern_init($384)|0);
 $386 = ($385|0)<(0);
 if ($386) {
  $0 = -1;
  $526 = $0;
  STACKTOP = sp;return ($526|0);
 }
 $387 = $2;
 $388 = $3;
 $389 = $pat_ofs;
 $390 = (($388) + ($389))|0;
 (_hio_seek($387,$390,0)|0);
 $i = 0;
 while(1) {
  $391 = $i;
  $392 = $mod;
  $393 = ((($392)) + 128|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = ($391|0)<($394|0);
  if (!($395)) {
   break;
  }
  $396 = $mod;
  $397 = $i;
  $398 = (_pattern_tracks_alloc($396,$397,64)|0);
  $399 = ($398|0)<(0);
  if ($399) {
   label = 49;
   break;
  }
  $400 = $2;
  $401 = (_hio_read16l($400)|0);
  $402 = $401&65535;
  $len1 = $402;
  $403 = $len1;
  $404 = (($403) - 2)|0;
  $len1 = $404;
  $r3 = 0;
  L72: while(1) {
   $405 = $len1;
   $406 = ($405|0)>(0);
   if (!($406)) {
    break;
   }
   $407 = $2;
   $408 = (_hio_read8($407)|0);
   $409 = $408&255;
   $c2 = $409;
   $410 = $len1;
   $411 = (($410) + -1)|0;
   $len1 = $411;
   $412 = $c2;
   $413 = ($412|0)==(0);
   $414 = $r3;
   if ($413) {
    $415 = (($414) + 1)|0;
    $r3 = $415;
    continue;
   }
   $416 = $c2;
   $417 = $416 & 31;
   $418 = $i;
   $419 = $1;
   $420 = ((($419)) + 168|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = (($421) + ($418<<2)|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = ((($423)) + 4|0);
   $425 = (($424) + ($417<<2)|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = $1;
   $428 = ((($427)) + 172|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = (($429) + ($426<<2)|0);
   $431 = HEAP32[$430>>2]|0;
   $432 = ((($431)) + 4|0);
   $433 = (($432) + ($414<<3)|0);
   $event = $433;
   $434 = $c2;
   $435 = $434 & 32;
   $436 = ($435|0)!=(0);
   if ($436) {
    $437 = $2;
    $438 = (_hio_read8($437)|0);
    $439 = $438&255;
    $k4 = $439;
    $440 = $k4;
    $441 = $440 & 127;
    $442 = $441 & 240;
    $443 = $442 >> 4;
    $444 = ($443*12)|0;
    $445 = (12 + ($444))|0;
    $446 = $k4;
    $447 = $446 & 15;
    $448 = (($445) + ($447))|0;
    $449 = $448&255;
    $450 = $event;
    HEAP8[$450>>0] = $449;
    $451 = $2;
    $452 = (_hio_read8($451)|0);
    $453 = $event;
    $454 = ((($453)) + 1|0);
    HEAP8[$454>>0] = $452;
    $455 = $len1;
    $456 = (($455) - 2)|0;
    $len1 = $456;
   }
   $457 = $c2;
   $458 = $457 & 64;
   $459 = ($458|0)!=(0);
   if (!($459)) {
    continue;
   }
   while(1) {
    $460 = $2;
    $461 = (_hio_read8($460)|0);
    $462 = $461&255;
    $k4 = $462;
    $463 = $len1;
    $464 = (($463) + -1)|0;
    $len1 = $464;
    $465 = $k4;
    $466 = $465 & 192;
    $467 = $466 >> 6;
    if ((($467|0) == 2)) {
     $498 = $2;
     (_hio_read8($498)|0);
     $499 = $len1;
     $500 = (($499) + -1)|0;
     $len1 = $500;
    } else if ((($467|0) == 1)) {
     $483 = $k4;
     $484 = $483 & 31;
     $485 = $484&255;
     $486 = $event;
     $487 = ((($486)) + 5|0);
     HEAP8[$487>>0] = $485;
     $488 = $2;
     $489 = (_hio_read8($488)|0);
     $490 = $event;
     $491 = ((($490)) + 6|0);
     HEAP8[$491>>0] = $489;
     $492 = $len1;
     $493 = (($492) + -1)|0;
     $len1 = $493;
     $494 = $event;
     $495 = ((($494)) + 5|0);
     $496 = $event;
     $497 = ((($496)) + 6|0);
     _fix_effect($495,$497);
    } else if ((($467|0) == 0)) {
     $468 = $k4;
     $469 = $468 & 31;
     $470 = $469&255;
     $471 = $event;
     $472 = ((($471)) + 3|0);
     HEAP8[$472>>0] = $470;
     $473 = $2;
     $474 = (_hio_read8($473)|0);
     $475 = $event;
     $476 = ((($475)) + 4|0);
     HEAP8[$476>>0] = $474;
     $477 = $len1;
     $478 = (($477) + -1)|0;
     $len1 = $478;
     $479 = $event;
     $480 = ((($479)) + 3|0);
     $481 = $event;
     $482 = ((($481)) + 4|0);
     _fix_effect($480,$482);
    }
    $501 = $k4;
    $502 = $501 & 32;
    $503 = ($502|0)!=(0);
    if (!($503)) {
     continue L72;
    }
   }
  }
  $504 = $i;
  $505 = (($504) + 1)|0;
  $i = $505;
 }
 if ((label|0) == 49) {
  $0 = -1;
  $526 = $0;
  STACKTOP = sp;return ($526|0);
 }
 $506 = $2;
 $507 = $3;
 $508 = $smp_ofs;
 $509 = (($507) + ($508))|0;
 (_hio_seek($506,$509,0)|0);
 $i = 0;
 while(1) {
  $510 = $i;
  $511 = $mod;
  $512 = ((($511)) + 140|0);
  $513 = HEAP32[$512>>2]|0;
  $514 = ($510|0)<($513|0);
  if (!($514)) {
   label = 68;
   break;
  }
  $515 = $1;
  $516 = $2;
  $517 = $i;
  $518 = $mod;
  $519 = ((($518)) + 180|0);
  $520 = HEAP32[$519>>2]|0;
  $521 = (($520) + (($517*52)|0)|0);
  $522 = (_load_sample($515,$516,2,$521,0)|0);
  $523 = ($522|0)<(0);
  if ($523) {
   label = 66;
   break;
  }
  $524 = $i;
  $525 = (($524) + 1)|0;
  $i = $525;
 }
 if ((label|0) == 66) {
  $0 = -1;
  $526 = $0;
  STACKTOP = sp;return ($526|0);
 }
 else if ((label|0) == 68) {
  $0 = 0;
  $526 = $0;
  STACKTOP = sp;return ($526|0);
 }
 return (0)|0;
}
function _pw_test_format($f,$t,$start,$info) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0, $extra = 0;
 var $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $info;
 $s = 65536;
 $5 = (_calloc(1,65536)|0);
 $b = $5;
 $6 = $b;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $8 = $b;
 $9 = $s;
 $10 = $1;
 (_fread(($8|0),($9|0),1,($10|0))|0);
 while(1) {
  $11 = $b;
  $12 = $s;
  $13 = $4;
  $14 = (_pw_check($11,$12,$13)|0);
  $extra = $14;
  $15 = ($14|0)>(0);
  $16 = $b;
  if (!($15)) {
   label = 8;
   break;
  }
  $17 = $s;
  $18 = $extra;
  $19 = (($17) + ($18))|0;
  $20 = (_realloc($16,$19)|0);
  $buf = $20;
  $21 = $buf;
  $22 = ($21|0)==(0|0);
  if ($22) {
   label = 6;
   break;
  }
  $24 = $buf;
  $b = $24;
  $25 = $b;
  $26 = $s;
  $27 = (($25) + ($26)|0);
  $28 = $extra;
  $29 = $1;
  (_fread(($27|0),($28|0),1,($29|0))|0);
  $30 = $extra;
  $31 = $s;
  $32 = (($31) + ($30))|0;
  $s = $32;
 }
 if ((label|0) == 6) {
  $23 = $b;
  _free($23);
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 8) {
  _free($16);
  $33 = $extra;
  $34 = ($33|0)==(0);
  $35 = $34 ? 0 : -1;
  $0 = $35;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _pw_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = -1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = $3;
  $12 = (_pw_test_format($9,$10,$11,0)|0);
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _pw_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $fd = 0, $i = 0, $j = 0, $mh = 0;
 var $mod = 0, $mod_event = 0, $name = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 52|0;
 $mod_event = sp + 5232|0;
 $name = sp + 24|0;
 $tmp = sp + 1136|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = (_get_temp_dir($tmp,4096)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $0 = -1;
  $354 = $0;
  STACKTOP = sp;return ($354|0);
 }
 (_strncat($tmp,7384,4086)|0);
 $7 = (_mkstemp($tmp)|0);
 $fd = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  $0 = -1;
  $354 = $0;
  STACKTOP = sp;return ($354|0);
 }
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_fileno(($11|0))|0);
 $13 = $fd;
 $14 = (_pw_wizardry($12,$13,$name)|0);
 $15 = ($14|0)<(0);
 $16 = $fd;
 if ($15) {
  (_close(($16|0))|0);
  (_unlink(($tmp|0))|0);
  $0 = -1;
  $354 = $0;
  STACKTOP = sp;return ($354|0);
 }
 $17 = (_hio_open_fd($16,8200)|0);
 $2 = $17;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = $fd;
  (_close(($19|0))|0);
  (_unlink(($tmp|0))|0);
  $0 = -1;
  $354 = $0;
  STACKTOP = sp;return ($354|0);
 }
 $20 = $2;
 $21 = $3;
 (_hio_seek($20,$21,0)|0);
 $22 = $2;
 (_hio_read($mh,20,1,$22)|0);
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ($23|0)<(31);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = ((($mh)) + 20|0);
  $27 = (($26) + (($25*30)|0)|0);
  $28 = $2;
  (_hio_read($27,22,1,$28)|0);
  $29 = $2;
  $30 = (_hio_read16b($29)|0);
  $31 = $i;
  $32 = ((($mh)) + 20|0);
  $33 = (($32) + (($31*30)|0)|0);
  $34 = ((($33)) + 22|0);
  HEAP16[$34>>1] = $30;
  $35 = $2;
  $36 = (_hio_read8($35)|0);
  $37 = $i;
  $38 = ((($mh)) + 20|0);
  $39 = (($38) + (($37*30)|0)|0);
  $40 = ((($39)) + 24|0);
  HEAP8[$40>>0] = $36;
  $41 = $2;
  $42 = (_hio_read8($41)|0);
  $43 = $i;
  $44 = ((($mh)) + 20|0);
  $45 = (($44) + (($43*30)|0)|0);
  $46 = ((($45)) + 25|0);
  HEAP8[$46>>0] = $42;
  $47 = $2;
  $48 = (_hio_read16b($47)|0);
  $49 = $i;
  $50 = ((($mh)) + 20|0);
  $51 = (($50) + (($49*30)|0)|0);
  $52 = ((($51)) + 26|0);
  HEAP16[$52>>1] = $48;
  $53 = $2;
  $54 = (_hio_read16b($53)|0);
  $55 = $i;
  $56 = ((($mh)) + 20|0);
  $57 = (($56) + (($55*30)|0)|0);
  $58 = ((($57)) + 28|0);
  HEAP16[$58>>1] = $54;
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 $61 = $2;
 $62 = (_hio_read8($61)|0);
 $63 = ((($mh)) + 950|0);
 HEAP8[$63>>0] = $62;
 $64 = $2;
 $65 = (_hio_read8($64)|0);
 $66 = ((($mh)) + 951|0);
 HEAP8[$66>>0] = $65;
 $67 = ((($mh)) + 952|0);
 $68 = $2;
 (_hio_read($67,128,1,$68)|0);
 $69 = ((($mh)) + 1080|0);
 $70 = $2;
 (_hio_read($69,4,1,$70)|0);
 $71 = ((($mh)) + 1080|0);
 $72 = (_memcmp($71,7400,4)|0);
 $73 = ($72|0)!=(0);
 L21: do {
  if (!($73)) {
   $74 = $mod;
   $75 = ((($74)) + 140|0);
   HEAP32[$75>>2] = 31;
   $76 = $mod;
   $77 = ((($76)) + 140|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $mod;
   $80 = ((($79)) + 144|0);
   HEAP32[$80>>2] = $78;
   $81 = $mod;
   $82 = ((($81)) + 136|0);
   HEAP32[$82>>2] = 4;
   $83 = ((($mh)) + 950|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = $mod;
   $87 = ((($86)) + 156|0);
   HEAP32[$87>>2] = $85;
   $88 = ((($mh)) + 951|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = $mod;
   $92 = ((($91)) + 160|0);
   HEAP32[$92>>2] = $90;
   $93 = $mod;
   $94 = ((($93)) + 952|0);
   $95 = ((($mh)) + 952|0);
   dest=$94; src=$95; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $i = 0;
   while(1) {
    $96 = $i;
    $97 = ($96|0)<(128);
    $98 = $mod;
    if (!($97)) {
     break;
    }
    $99 = ((($98)) + 136|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)>(4);
    if ($101) {
     $102 = $i;
     $103 = $mod;
     $104 = ((($103)) + 952|0);
     $105 = (($104) + ($102)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $107 >> 1;
     $109 = $108&255;
     HEAP8[$105>>0] = $109;
    }
    $110 = $i;
    $111 = $mod;
    $112 = ((($111)) + 952|0);
    $113 = (($112) + ($110)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = $mod;
    $117 = ((($116)) + 128|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($115|0)>($118|0);
    if ($119) {
     $120 = $i;
     $121 = $mod;
     $122 = ((($121)) + 952|0);
     $123 = (($122) + ($120)|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = $124&255;
     $126 = $mod;
     $127 = ((($126)) + 128|0);
     HEAP32[$127>>2] = $125;
    }
    $128 = $i;
    $129 = (($128) + 1)|0;
    $i = $129;
   }
   $130 = ((($98)) + 128|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + 1)|0;
   HEAP32[$130>>2] = $132;
   $133 = $mod;
   $134 = ((($133)) + 136|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $mod;
   $137 = ((($136)) + 128|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = Math_imul($135, $138)|0;
   $140 = $mod;
   $141 = ((($140)) + 132|0);
   HEAP32[$141>>2] = $139;
   $142 = $mod;
   HEAP32[$vararg_buffer>>2] = $mh;
   (_snprintf($142,64,7408,$vararg_buffer)|0);
   $143 = $mod;
   $144 = ((($143)) + 64|0);
   $145 = HEAP32[$name>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $145;
   (_snprintf($144,64,7408,$vararg_buffer1)|0);
   $146 = $mod;
   $147 = (_instrument_init($146)|0);
   $148 = ($147|0)<(0);
   if ($148) {
    $0 = -1;
    $354 = $0;
    STACKTOP = sp;return ($354|0);
   }
   $i = 0;
   while(1) {
    $149 = $i;
    $150 = $mod;
    $151 = ((($150)) + 140|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($149|0)<($152|0);
    $154 = $mod;
    if (!($153)) {
     break;
    }
    $155 = $i;
    $156 = (_subinstrument_alloc($154,$155,1)|0);
    $157 = ($156|0)<(0);
    if ($157) {
     label = 25;
     break;
    }
    $158 = $i;
    $159 = ((($mh)) + 20|0);
    $160 = (($159) + (($158*30)|0)|0);
    $161 = ((($160)) + 22|0);
    $162 = HEAP16[$161>>1]|0;
    $163 = $162&65535;
    $164 = $163<<1;
    $165 = $i;
    $166 = $mod;
    $167 = ((($166)) + 180|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($168) + (($165*52)|0)|0);
    $170 = ((($169)) + 32|0);
    HEAP32[$170>>2] = $164;
    $171 = $i;
    $172 = ((($mh)) + 20|0);
    $173 = (($172) + (($171*30)|0)|0);
    $174 = ((($173)) + 26|0);
    $175 = HEAP16[$174>>1]|0;
    $176 = $175&65535;
    $177 = $176<<1;
    $178 = $i;
    $179 = $mod;
    $180 = ((($179)) + 180|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) + (($178*52)|0)|0);
    $183 = ((($182)) + 36|0);
    HEAP32[$183>>2] = $177;
    $184 = $i;
    $185 = $mod;
    $186 = ((($185)) + 180|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($187) + (($184*52)|0)|0);
    $189 = ((($188)) + 36|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $i;
    $192 = ((($mh)) + 20|0);
    $193 = (($192) + (($191*30)|0)|0);
    $194 = ((($193)) + 28|0);
    $195 = HEAP16[$194>>1]|0;
    $196 = $195&65535;
    $197 = $196<<1;
    $198 = (($190) + ($197))|0;
    $199 = $i;
    $200 = $mod;
    $201 = ((($200)) + 180|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = (($202) + (($199*52)|0)|0);
    $204 = ((($203)) + 40|0);
    HEAP32[$204>>2] = $198;
    $205 = $i;
    $206 = ((($mh)) + 20|0);
    $207 = (($206) + (($205*30)|0)|0);
    $208 = ((($207)) + 28|0);
    $209 = HEAP16[$208>>1]|0;
    $210 = $209&65535;
    $211 = ($210|0)>(1);
    $212 = $211 ? 2 : 0;
    $213 = $i;
    $214 = $mod;
    $215 = ((($214)) + 180|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (($216) + (($213*52)|0)|0);
    $218 = ((($217)) + 44|0);
    HEAP32[$218>>2] = $212;
    $219 = $i;
    $220 = ((($mh)) + 20|0);
    $221 = (($220) + (($219*30)|0)|0);
    $222 = ((($221)) + 24|0);
    $223 = HEAP8[$222>>0]|0;
    $224 = $223 << 24 >> 24;
    $225 = $224 << 4;
    $226 = $225&255;
    $227 = $226 << 24 >> 24;
    $228 = $i;
    $229 = $mod;
    $230 = ((($229)) + 176|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) + (($228*764)|0)|0);
    $233 = ((($232)) + 756|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ((($234)) + 16|0);
    HEAP32[$235>>2] = $227;
    $236 = $i;
    $237 = ((($mh)) + 20|0);
    $238 = (($237) + (($236*30)|0)|0);
    $239 = ((($238)) + 25|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240 << 24 >> 24;
    $242 = $i;
    $243 = $mod;
    $244 = ((($243)) + 176|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (($245) + (($242*764)|0)|0);
    $247 = ((($246)) + 756|0);
    $248 = HEAP32[$247>>2]|0;
    HEAP32[$248>>2] = $241;
    $249 = $i;
    $250 = $mod;
    $251 = ((($250)) + 176|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = (($252) + (($249*764)|0)|0);
    $254 = ((($253)) + 756|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = ((($255)) + 8|0);
    HEAP32[$256>>2] = 128;
    $257 = $i;
    $258 = $i;
    $259 = $mod;
    $260 = ((($259)) + 176|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = (($261) + (($258*764)|0)|0);
    $263 = ((($262)) + 756|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = ((($264)) + 40|0);
    HEAP32[$265>>2] = $257;
    $266 = $i;
    $267 = $mod;
    $268 = ((($267)) + 176|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + (($266*764)|0)|0);
    $271 = ((($270)) + 40|0);
    HEAP32[$271>>2] = 4095;
    $272 = $i;
    $273 = $mod;
    $274 = ((($273)) + 180|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($275) + (($272*52)|0)|0);
    $277 = ((($276)) + 32|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = ($278|0)>(0);
    if ($279) {
     $280 = $i;
     $281 = $mod;
     $282 = ((($281)) + 176|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = (($283) + (($280*764)|0)|0);
     $285 = ((($284)) + 36|0);
     HEAP32[$285>>2] = 1;
    }
    $286 = $mod;
    $287 = $i;
    $288 = $i;
    $289 = ((($mh)) + 20|0);
    $290 = (($289) + (($288*30)|0)|0);
    (_instrument_name($286,$287,$290,22)|0);
    $291 = $i;
    $292 = (($291) + 1)|0;
    $i = $292;
   }
   if ((label|0) == 25) {
    $0 = -1;
    $354 = $0;
    STACKTOP = sp;return ($354|0);
   }
   $293 = (_pattern_init($154)|0);
   $294 = ($293|0)<(0);
   if ($294) {
    $0 = -1;
    $354 = $0;
    STACKTOP = sp;return ($354|0);
   }
   $i = 0;
   while(1) {
    $295 = $i;
    $296 = $mod;
    $297 = ((($296)) + 128|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = ($295|0)<($298|0);
    if (!($299)) {
     break;
    }
    $300 = $mod;
    $301 = $i;
    $302 = (_pattern_tracks_alloc($300,$301,64)|0);
    $303 = ($302|0)<(0);
    if ($303) {
     label = 34;
     break;
    }
    $j = 0;
    while(1) {
     $304 = $j;
     $305 = ($304|0)<(256);
     if (!($305)) {
      break;
     }
     $306 = $j;
     $307 = (($306|0) / 4)&-1;
     $308 = $j;
     $309 = (($308|0) % 4)&-1;
     $310 = $i;
     $311 = $1;
     $312 = ((($311)) + 168|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = (($313) + ($310<<2)|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ((($315)) + 4|0);
     $317 = (($316) + ($309<<2)|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $1;
     $320 = ((($319)) + 172|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = (($321) + ($318<<2)|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = ((($323)) + 4|0);
     $325 = (($324) + ($307<<3)|0);
     $event = $325;
     $326 = $2;
     (_hio_read($mod_event,1,4,$326)|0);
     $327 = $event;
     _decode_protracker_event($327,$mod_event);
     $328 = $j;
     $329 = (($328) + 1)|0;
     $j = $329;
    }
    $330 = $i;
    $331 = (($330) + 1)|0;
    $i = $331;
   }
   if ((label|0) == 34) {
    $0 = -1;
    $354 = $0;
    STACKTOP = sp;return ($354|0);
   }
   $332 = $1;
   $333 = ((($332)) + 1280|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = $334 | 8192;
   HEAP32[$333>>2] = $335;
   $i = 0;
   while(1) {
    $336 = $i;
    $337 = $mod;
    $338 = ((($337)) + 144|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = ($336|0)<($339|0);
    if (!($340)) {
     break;
    }
    $341 = $1;
    $342 = $2;
    $343 = $i;
    $344 = $mod;
    $345 = ((($344)) + 180|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = (($346) + (($343*52)|0)|0);
    $348 = (_load_sample($341,$342,0,$347,0)|0);
    $349 = ($348|0)<(0);
    if ($349) {
     break L21;
    }
    $350 = $i;
    $351 = (($350) + 1)|0;
    $i = $351;
   }
   $352 = $2;
   (_hio_close($352)|0);
   (_unlink(($tmp|0))|0);
   $0 = 0;
   $354 = $0;
   STACKTOP = sp;return ($354|0);
  }
 } while(0);
 $353 = $2;
 (_hio_close($353)|0);
 (_unlink(($tmp|0))|0);
 $0 = -1;
 $354 = $0;
 STACKTOP = sp;return ($354|0);
}
function _gal5_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1380533830);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32b($7)|0);
   $8 = $1;
   $9 = (_hio_read32b($8)|0);
   $10 = ($9|0)!=(1095573536);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = (_hio_read32b($11)|0);
   $13 = ($12|0)!=(1229867348);
   if ($13) {
    $0 = -1;
    break;
   } else {
    $14 = $1;
    (_hio_read32b($14)|0);
    $15 = $1;
    $16 = $2;
    _read_title($15,$16,64);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _gal5_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $handle = 0, $i = 0, $mod = 0, $offset = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 40|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = $2;
 (_hio_read32b($9)|0);
 $10 = $2;
 $11 = (_hio_tell($10)|0);
 $offset = $11;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = 0;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = 0;
 $16 = (_iff_new()|0);
 $handle = $16;
 $17 = $handle;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $19 = $handle;
 $20 = (_iff_register($19,7464,270)|0);
 $ret = $20;
 $21 = $handle;
 $22 = (_iff_register($21,7544,271)|0);
 $23 = $ret;
 $24 = $23 | $22;
 $ret = $24;
 $25 = $handle;
 $26 = (_iff_register($25,7552,272)|0);
 $27 = $ret;
 $28 = $27 | $26;
 $ret = $28;
 $29 = $handle;
 $30 = (_iff_register($29,7560,273)|0);
 $31 = $ret;
 $32 = $31 | $30;
 $ret = $32;
 $33 = $ret;
 $34 = ($33|0)!=(0);
 if ($34) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $35 = $handle;
 _iff_set_quirk($35,1);
 $36 = $handle;
 _iff_set_quirk($36,16);
 $37 = $handle;
 _iff_set_quirk($37,4);
 $38 = $handle;
 $39 = $1;
 $40 = $2;
 $41 = (_iff_load($38,$39,$40,$data)|0);
 $42 = ($41|0)<(0);
 $43 = $handle;
 _iff_release($43);
 if ($42) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $44 = $mod;
 $45 = ((($44)) + 128|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $mod;
 $48 = ((($47)) + 136|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($46, $49)|0;
 $51 = $mod;
 $52 = ((($51)) + 132|0);
 HEAP32[$52>>2] = $50;
 $53 = $mod;
 $54 = ((($53)) + 140|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $mod;
 $57 = ((($56)) + 144|0);
 HEAP32[$57>>2] = $55;
 $58 = $mod;
 $59 = (_instrument_init($58)|0);
 $60 = ($59|0)<(0);
 if ($60) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $61 = $mod;
 $62 = (_pattern_init($61)|0);
 $63 = ($62|0)<(0);
 if ($63) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $64 = $2;
 $65 = $3;
 $66 = $offset;
 $67 = (($65) + ($66))|0;
 (_hio_seek($64,$67,0)|0);
 $68 = (_iff_new()|0);
 $handle = $68;
 $69 = $handle;
 $70 = ($69|0)==(0|0);
 if ($70) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $71 = $handle;
 $72 = (_iff_register($71,7552,274)|0);
 $ret = $72;
 $73 = $handle;
 $74 = (_iff_register($73,7560,275)|0);
 $75 = $ret;
 $76 = $75 | $74;
 $ret = $76;
 $77 = $ret;
 $78 = ($77|0)!=(0);
 if ($78) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $79 = $handle;
 _iff_set_quirk($79,1);
 $80 = $handle;
 _iff_set_quirk($80,16);
 $81 = $handle;
 _iff_set_quirk($81,4);
 $82 = $handle;
 $83 = $1;
 $84 = $2;
 $85 = (_iff_load($82,$83,$84,$data)|0);
 $86 = ($85|0)<(0);
 $87 = $handle;
 _iff_release($87);
 if ($86) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $i = 0;
 while(1) {
  $88 = $i;
  $89 = $mod;
  $90 = ((($89)) + 136|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($88|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $i;
  $94 = (($data) + ($93)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $96<<1;
  $98 = $i;
  $99 = $mod;
  $100 = ((($99)) + 184|0);
  $101 = (($100) + (($98*12)|0)|0);
  HEAP32[$101>>2] = $97;
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
 }
 $104 = $1;
 $105 = ((($104)) + 1280|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 | 704643104;
 HEAP32[$105>>2] = $107;
 $108 = $1;
 $109 = ((($108)) + 1284|0);
 HEAP32[$109>>2] = 1;
 $0 = 0;
 $110 = $0;
 STACKTOP = sp;return ($110|0);
}
function _get_init($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $data = 0, $flags = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $2;
 (_hio_read($buf,1,64,$6)|0);
 $7 = $mod;
 (_strncpy(($7|0),($buf|0),64)|0);
 $8 = $0;
 _set_type($8,7472,$vararg_buffer);
 $9 = $2;
 $10 = (_hio_read8($9)|0);
 $11 = $10&255;
 $flags = $11;
 $12 = $flags;
 $13 = $12 ^ -1;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $0;
  $17 = ((($16)) + 1280|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 | 4096;
  HEAP32[$17>>2] = $19;
 }
 $20 = $2;
 $21 = (_hio_read8($20)|0);
 $22 = $21&255;
 $23 = $mod;
 $24 = ((($23)) + 136|0);
 HEAP32[$24>>2] = $22;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = $26&255;
 $28 = $mod;
 $29 = ((($28)) + 148|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = (_hio_read8($30)|0);
 $32 = $31&255;
 $33 = $mod;
 $34 = ((($33)) + 152|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 (_hio_read16l($35)|0);
 $36 = $2;
 (_hio_read16l($36)|0);
 $37 = $2;
 (_hio_read8($37)|0);
 $38 = $data;
 $39 = $2;
 (_hio_read($38,1,64,$39)|0);
 STACKTOP = sp;return 0;
}
function _get_ordr($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = (($7) + 1)|0;
 $9 = $mod;
 $10 = ((($9)) + 156|0);
 HEAP32[$10>>2] = $8;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $mod;
  $13 = ((($12)) + 156|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = (_hio_read8($16)|0);
  $18 = $i;
  $19 = $mod;
  $20 = ((($19)) + 952|0);
  $21 = (($20) + ($18)|0);
  HEAP8[$21>>0] = $17;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return 0;
}
function _get_patt_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = (($7) + 1)|0;
 $i = $8;
 $9 = $i;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $i;
 $15 = $mod;
 $16 = ((($15)) + 128|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return 0;
}
function _get_inst_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read32b($5)|0);
 $6 = $2;
 (_hio_read8($6)|0);
 $7 = $2;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 $i = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)>($14|0);
 if (!($15)) {
  STACKTOP = sp;return 0;
 }
 $16 = $i;
 $17 = $mod;
 $18 = ((($17)) + 140|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return 0;
}
function _get_patt353($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chan = 0, $cond = 0, $dummy = 0, $event = 0, $flag = 0, $fxp = 0, $fxt = 0, $i = 0, $len = 0, $mod = 0, $r = 0, $rows = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dummy = sp + 64|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $i = $8;
 $9 = $3;
 $10 = (_hio_read32l($9)|0);
 $len = $10;
 $11 = $3;
 $12 = (_hio_read8($11)|0);
 $13 = $12&255;
 $14 = (($13) + 1)|0;
 $rows = $14;
 $15 = $mod;
 $16 = $i;
 $17 = $rows;
 $18 = (_pattern_tracks_alloc($15,$16,$17)|0);
 $19 = ($18|0)<(0);
 if ($19) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $r = 0;
 while(1) {
  $20 = $r;
  $21 = $rows;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $flag = $24;
  $25 = $24&255;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $r;
   $28 = (($27) + 1)|0;
   $r = $28;
   continue;
  }
  $29 = $flag;
  $30 = $29&255;
  $31 = $30 & 31;
  $chan = $31;
  $32 = $chan;
  $33 = $mod;
  $34 = ((($33)) + 136|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)<($35|0);
  if ($36) {
   $37 = $r;
   $38 = $chan;
   $39 = $i;
   $40 = $1;
   $41 = ((($40)) + 168|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 4|0);
   $46 = (($45) + ($38<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = ((($48)) + 172|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = (($53) + ($37<<3)|0);
   $55 = $54;
  } else {
   $55 = $dummy;
  }
  $event = $55;
  $56 = $flag;
  $57 = $56&255;
  $58 = $57 & 128;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $3;
   $61 = (_hio_read8($60)|0);
   $fxp = $61;
   $62 = $3;
   $63 = (_hio_read8($62)|0);
   $fxt = $63;
   $64 = $fxt;
   $65 = $64&255;
   $cond = ($65|0)==(20);
   if ($cond) {
    $fxt = -93;
   } else {
    $66 = $fxt;
    $67 = $66&255;
    $68 = ($67|0)>(15);
    if ($68) {
     $69 = $fxt;
     $70 = $69&255;
     $71 = $fxp;
     $72 = $71&255;
     HEAP32[$vararg_buffer>>2] = $70;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $72;
     (_printf((7568|0),($vararg_buffer|0))|0);
     $fxp = 0;
     $fxt = 0;
    }
   }
   $73 = $fxt;
   $74 = $event;
   $75 = ((($74)) + 3|0);
   HEAP8[$75>>0] = $73;
   $76 = $fxp;
   $77 = $event;
   $78 = ((($77)) + 4|0);
   HEAP8[$78>>0] = $76;
  }
  $79 = $flag;
  $80 = $79&255;
  $81 = $80 & 64;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $3;
   $84 = (_hio_read8($83)|0);
   $85 = $event;
   $86 = ((($85)) + 1|0);
   HEAP8[$86>>0] = $84;
   $87 = $3;
   $88 = (_hio_read8($87)|0);
   $89 = $event;
   HEAP8[$89>>0] = $88;
   $90 = $event;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = ($92|0)==(128);
   if ($93) {
    $94 = $event;
    HEAP8[$94>>0] = -127;
   }
  }
  $95 = $flag;
  $96 = $95&255;
  $97 = $96 & 32;
  $98 = ($97|0)!=(0);
  if (!($98)) {
   continue;
  }
  $99 = $3;
  $100 = (_hio_read8($99)|0);
  $101 = $100&255;
  $102 = (($101|0) / 2)&-1;
  $103 = (1 + ($102))|0;
  $104 = $103&255;
  $105 = $event;
  $106 = ((($105)) + 2|0);
  HEAP8[$106>>0] = $104;
 }
 $0 = 0;
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _get_inst354($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $finetune = 0, $flags = 0, $has_unsigned_sample = 0, $i = 0, $mod = 0, $srate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 (_hio_read32b($6)|0);
 $7 = $3;
 (_hio_read8($7)|0);
 $8 = $3;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $i = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($11*764)|0)|0);
 $16 = $3;
 (_hio_read($15,1,28,$16)|0);
 $17 = $i;
 $18 = $mod;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($17*764)|0)|0);
 (_adjust_string($21)|0);
 $22 = $3;
 (_hio_seek($22,290,1)|0);
 $23 = $3;
 $24 = (_hio_read16l($23)|0);
 $25 = $24&65535;
 $26 = $i;
 $27 = $mod;
 $28 = ((($27)) + 176|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + (($26*764)|0)|0);
 $31 = ((($30)) + 36|0);
 HEAP32[$31>>2] = $25;
 $32 = $i;
 $33 = $mod;
 $34 = ((($33)) + 176|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*764)|0)|0);
 $37 = ((($36)) + 36|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  $0 = 0;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 $40 = $mod;
 $41 = $i;
 $42 = $i;
 $43 = $mod;
 $44 = ((($43)) + 176|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + (($42*764)|0)|0);
 $47 = ((($46)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_subinstrument_alloc($40,$41,$48)|0);
 $50 = ($49|0)<(0);
 if ($50) {
  $0 = -1;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 $51 = $3;
 (_hio_read32b($51)|0);
 $52 = $3;
 (_hio_read32b($52)|0);
 $53 = $3;
 (_hio_read32b($53)|0);
 $54 = $3;
 (_hio_read32b($54)|0);
 $55 = $3;
 (_hio_read32b($55)|0);
 $56 = $3;
 (_hio_read32b($56)|0);
 $57 = $i;
 $58 = $mod;
 $59 = ((($58)) + 180|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + (($57*52)|0)|0);
 $62 = $3;
 (_hio_read($61,1,28,$62)|0);
 $63 = $i;
 $64 = $mod;
 $65 = ((($64)) + 180|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + (($63*52)|0)|0);
 (_adjust_string($67)|0);
 $68 = $3;
 (_hio_read32b($68)|0);
 $69 = $3;
 (_hio_read8($69)|0);
 $70 = $i;
 $71 = $i;
 $72 = $mod;
 $73 = ((($72)) + 176|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + (($71*764)|0)|0);
 $76 = ((($75)) + 756|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 40|0);
 HEAP32[$78>>2] = $70;
 $79 = $3;
 $80 = (_hio_read8($79)|0);
 $81 = $80&255;
 $82 = $i;
 $83 = $mod;
 $84 = ((($83)) + 176|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + (($82*764)|0)|0);
 $87 = ((($86)) + 32|0);
 HEAP32[$87>>2] = $81;
 $88 = $i;
 $89 = $mod;
 $90 = ((($89)) + 176|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + (($88*764)|0)|0);
 $93 = ((($92)) + 756|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 8|0);
 HEAP32[$95>>2] = 128;
 $96 = $3;
 $97 = (_hio_read16l($96)|0);
 $98 = $97&65535;
 $99 = (($98) + 1)|0;
 $100 = (($99|0) / 512)&-1;
 $101 = $i;
 $102 = $mod;
 $103 = ((($102)) + 176|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + (($101*764)|0)|0);
 $106 = ((($105)) + 756|0);
 $107 = HEAP32[$106>>2]|0;
 HEAP32[$107>>2] = $100;
 $108 = $3;
 $109 = (_hio_read16l($108)|0);
 $110 = $109&65535;
 $flags = $110;
 $111 = $3;
 (_hio_read16l($111)|0);
 $112 = $3;
 $113 = (_hio_read32l($112)|0);
 $114 = $i;
 $115 = $mod;
 $116 = ((($115)) + 180|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($117) + (($114*52)|0)|0);
 $119 = ((($118)) + 32|0);
 HEAP32[$119>>2] = $113;
 $120 = $3;
 $121 = (_hio_read32l($120)|0);
 $122 = $i;
 $123 = $mod;
 $124 = ((($123)) + 180|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (($125) + (($122*52)|0)|0);
 $127 = ((($126)) + 36|0);
 HEAP32[$127>>2] = $121;
 $128 = $3;
 $129 = (_hio_read32l($128)|0);
 $130 = $i;
 $131 = $mod;
 $132 = ((($131)) + 180|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($133) + (($130*52)|0)|0);
 $135 = ((($134)) + 40|0);
 HEAP32[$135>>2] = $129;
 $136 = $i;
 $137 = $mod;
 $138 = ((($137)) + 180|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + (($136*52)|0)|0);
 $141 = ((($140)) + 44|0);
 HEAP32[$141>>2] = 0;
 $has_unsigned_sample = 0;
 $142 = $flags;
 $143 = $142 & 4;
 $144 = ($143|0)!=(0);
 if ($144) {
  $145 = $i;
  $146 = $mod;
  $147 = ((($146)) + 180|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + (($145*52)|0)|0);
  $150 = ((($149)) + 44|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $151 | 1;
  HEAP32[$150>>2] = $152;
 }
 $153 = $flags;
 $154 = $153 & 8;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $i;
  $157 = $mod;
  $158 = ((($157)) + 180|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + (($156*52)|0)|0);
  $161 = ((($160)) + 44|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $162 | 2;
  HEAP32[$161>>2] = $163;
 }
 $164 = $flags;
 $165 = $164 & 16;
 $166 = ($165|0)!=(0);
 if ($166) {
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 180|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*52)|0)|0);
  $172 = ((($171)) + 44|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 6;
  HEAP32[$172>>2] = $174;
 }
 $175 = $flags;
 $176 = $175 ^ -1;
 $177 = $176 & 128;
 $178 = ($177|0)!=(0);
 if ($178) {
  $has_unsigned_sample = 1;
 }
 $179 = $3;
 $180 = (_hio_read32l($179)|0);
 $srate = $180;
 $finetune = 0;
 $181 = $srate;
 $182 = $i;
 $183 = $mod;
 $184 = ((($183)) + 176|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = (($185) + (($182*764)|0)|0);
 $187 = ((($186)) + 756|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ((($188)) + 12|0);
 $190 = $i;
 $191 = $mod;
 $192 = ((($191)) + 176|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($193) + (($190*764)|0)|0);
 $195 = ((($194)) + 756|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ((($196)) + 16|0);
 _c2spd_to_note($181,$189,$197);
 $198 = $finetune;
 $199 = $i;
 $200 = $mod;
 $201 = ((($200)) + 176|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (($202) + (($199*764)|0)|0);
 $204 = ((($203)) + 756|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ((($205)) + 16|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($207) + ($198))|0;
 HEAP32[$206>>2] = $208;
 $209 = $3;
 (_hio_read32l($209)|0);
 $210 = $3;
 (_hio_read32l($210)|0);
 $211 = $i;
 $212 = $mod;
 $213 = ((($212)) + 180|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) + (($211*52)|0)|0);
 $216 = ((($215)) + 32|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = ($217|0)>(1);
 if ($218) {
  $219 = $1;
  $220 = $3;
  $221 = $has_unsigned_sample;
  $222 = ($221|0)!=(0);
  $223 = $222 ? 2 : 0;
  $224 = $i;
  $225 = $mod;
  $226 = ((($225)) + 180|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + (($224*52)|0)|0);
  $229 = (_load_sample($219,$220,$223,$228,0)|0);
  $230 = ($229|0)<(0);
  if ($230) {
   $0 = -1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  }
 }
 $0 = 0;
 $231 = $0;
 STACKTOP = sp;return ($231|0);
}
function _gal4_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1380533830);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32b($7)|0);
   $8 = $1;
   $9 = (_hio_read32b($8)|0);
   $10 = ($9|0)!=(1095583302);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = (_hio_read32b($11)|0);
   $13 = ($12|0)!=(1296124238);
   if ($13) {
    $0 = -1;
    break;
   } else {
    $14 = $1;
    (_hio_read32b($14)|0);
    $15 = $1;
    $16 = $2;
    _read_title($15,$16,64);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _gal4_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $data = 0;
 var $handle = 0, $i = 0, $mod = 0, $offset = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = $2;
 (_hio_read32b($9)|0);
 $10 = $2;
 $11 = (_hio_tell($10)|0);
 $offset = $11;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = 0;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = 0;
 $16 = (_iff_new()|0);
 $handle = $16;
 $17 = $handle;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $19 = $handle;
 $20 = (_iff_register($19,7536,276)|0);
 $ret = $20;
 $21 = $handle;
 $22 = (_iff_register($21,7544,277)|0);
 $23 = $ret;
 $24 = $23 | $22;
 $ret = $24;
 $25 = $handle;
 $26 = (_iff_register($25,7552,278)|0);
 $27 = $ret;
 $28 = $27 | $26;
 $ret = $28;
 $29 = $handle;
 $30 = (_iff_register($29,7560,279)|0);
 $31 = $ret;
 $32 = $31 | $30;
 $ret = $32;
 $33 = $ret;
 $34 = ($33|0)!=(0);
 if ($34) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $35 = $handle;
 _iff_set_quirk($35,1);
 $36 = $handle;
 _iff_set_quirk($36,32);
 $37 = $handle;
 $38 = $1;
 $39 = $2;
 $40 = (_iff_load($37,$38,$39,$data)|0);
 $41 = ($40|0)<(0);
 $42 = $handle;
 _iff_release($42);
 if ($41) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $43 = $mod;
 $44 = ((($43)) + 128|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $mod;
 $47 = ((($46)) + 136|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($45, $48)|0;
 $50 = $mod;
 $51 = ((($50)) + 132|0);
 HEAP32[$51>>2] = $49;
 $52 = $mod;
 $53 = (_instrument_init($52)|0);
 $54 = ($53|0)<(0);
 if ($54) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $55 = $mod;
 $56 = (_pattern_init($55)|0);
 $57 = ($56|0)<(0);
 if ($57) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $58 = $2;
 $59 = $3;
 $60 = $offset;
 $61 = (($59) + ($60))|0;
 (_hio_seek($58,$61,0)|0);
 HEAP32[$data>>2] = 0;
 $62 = (_iff_new()|0);
 $handle = $62;
 $63 = $handle;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $65 = $handle;
 $66 = (_iff_register($65,7552,280)|0);
 $ret = $66;
 $67 = $handle;
 $68 = (_iff_register($67,7560,281)|0);
 $69 = $ret;
 $70 = $69 | $68;
 $ret = $70;
 $71 = $ret;
 $72 = ($71|0)!=(0);
 if ($72) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $73 = $handle;
 _iff_set_quirk($73,1);
 $74 = $handle;
 _iff_set_quirk($74,32);
 $75 = $handle;
 $76 = $1;
 $77 = $2;
 $78 = (_iff_load($75,$76,$77,$data)|0);
 $79 = ($78|0)<(0);
 $80 = $handle;
 _iff_release($80);
 if ($79) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $i = 0;
 while(1) {
  $81 = $i;
  $82 = $mod;
  $83 = ((($82)) + 136|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($81|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $i;
  $87 = $mod;
  $88 = ((($87)) + 184|0);
  $89 = (($88) + (($86*12)|0)|0);
  HEAP32[$89>>2] = 128;
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 $92 = $1;
 $93 = ((($92)) + 1280|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 | 704643104;
 HEAP32[$93>>2] = $95;
 $96 = $1;
 $97 = ((($96)) + 1284|0);
 HEAP32[$97>>2] = 1;
 $0 = 0;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _get_main($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $flags = 0, $mod = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read($buf,1,64,$5)|0);
 $6 = $mod;
 (_strncpy(($6|0),($buf|0),64)|0);
 $7 = $0;
 _set_type($7,7512,$vararg_buffer);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $flags = $10;
 $11 = $flags;
 $12 = $11 ^ -1;
 $13 = $12 & 1;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 1280|0);
  HEAP32[$16>>2] = 4096;
 }
 $17 = $2;
 $18 = (_hio_read8($17)|0);
 $19 = $18&255;
 $20 = $mod;
 $21 = ((($20)) + 136|0);
 HEAP32[$21>>2] = $19;
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = $23&255;
 $25 = $mod;
 $26 = ((($25)) + 148|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 $28 = (_hio_read8($27)|0);
 $29 = $28&255;
 $30 = $mod;
 $31 = ((($30)) + 152|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 (_hio_read16l($32)|0);
 $33 = $2;
 (_hio_read16l($33)|0);
 $34 = $2;
 (_hio_read8($34)|0);
 STACKTOP = sp;return 0;
}
function _get_ordr360($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 HEAP32[$9>>2] = $7;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $mod;
  $12 = ((($11)) + 156|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = (_hio_read8($15)|0);
  $17 = $i;
  $18 = $mod;
  $19 = ((($18)) + 952|0);
  $20 = (($19) + ($17)|0);
  HEAP8[$20>>0] = $16;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return 0;
}
function _get_patt_cnt362($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = (($7) + 1)|0;
 $i = $8;
 $9 = $i;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $i;
 $15 = $mod;
 $16 = ((($15)) + 128|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return 0;
}
function _get_inst_cnt364($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read8($5)|0);
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = (($8) + 1)|0;
 $i = $9;
 $10 = $i;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)>($13|0);
 if ($14) {
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 140|0);
  HEAP32[$17>>2] = $15;
 }
 $18 = $2;
 (_hio_seek($18,28,1)|0);
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = $20&255;
 $22 = $mod;
 $23 = ((($22)) + 144|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($21))|0;
 HEAP32[$23>>2] = $25;
 STACKTOP = sp;return 0;
}
function _get_patt365($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chan = 0, $cond = 0, $dummy = 0, $event = 0, $flag = 0, $fxp = 0, $fxt = 0, $i = 0, $len = 0, $mod = 0, $r = 0, $rows = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dummy = sp + 64|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $i = $8;
 $9 = $3;
 $10 = (_hio_read32l($9)|0);
 $len = $10;
 $11 = $3;
 $12 = (_hio_read8($11)|0);
 $13 = $12&255;
 $14 = (($13) + 1)|0;
 $rows = $14;
 $15 = $mod;
 $16 = $i;
 $17 = $rows;
 $18 = (_pattern_tracks_alloc($15,$16,$17)|0);
 $19 = ($18|0)<(0);
 if ($19) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $r = 0;
 while(1) {
  $20 = $r;
  $21 = $rows;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $flag = $24;
  $25 = $24&255;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $r;
   $28 = (($27) + 1)|0;
   $r = $28;
   continue;
  }
  $29 = $flag;
  $30 = $29&255;
  $31 = $30 & 31;
  $chan = $31;
  $32 = $chan;
  $33 = $mod;
  $34 = ((($33)) + 136|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)<($35|0);
  if ($36) {
   $37 = $r;
   $38 = $chan;
   $39 = $i;
   $40 = $1;
   $41 = ((($40)) + 168|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 4|0);
   $46 = (($45) + ($38<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = ((($48)) + 172|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = (($53) + ($37<<3)|0);
   $55 = $54;
  } else {
   $55 = $dummy;
  }
  $event = $55;
  $56 = $flag;
  $57 = $56&255;
  $58 = $57 & 128;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $3;
   $61 = (_hio_read8($60)|0);
   $fxp = $61;
   $62 = $3;
   $63 = (_hio_read8($62)|0);
   $fxt = $63;
   $64 = $fxt;
   $65 = $64&255;
   $cond = ($65|0)==(20);
   if ($cond) {
    $fxt = -93;
   } else {
    $66 = $fxt;
    $67 = $66&255;
    $68 = ($67|0)>(15);
    if ($68) {
     $69 = $fxt;
     $70 = $69&255;
     $71 = $fxp;
     $72 = $71&255;
     HEAP32[$vararg_buffer>>2] = $70;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $72;
     (_printf((7568|0),($vararg_buffer|0))|0);
     $fxp = 0;
     $fxt = 0;
    }
   }
   $73 = $fxt;
   $74 = $event;
   $75 = ((($74)) + 3|0);
   HEAP8[$75>>0] = $73;
   $76 = $fxp;
   $77 = $event;
   $78 = ((($77)) + 4|0);
   HEAP8[$78>>0] = $76;
  }
  $79 = $flag;
  $80 = $79&255;
  $81 = $80 & 64;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $3;
   $84 = (_hio_read8($83)|0);
   $85 = $event;
   $86 = ((($85)) + 1|0);
   HEAP8[$86>>0] = $84;
   $87 = $3;
   $88 = (_hio_read8($87)|0);
   $89 = $event;
   HEAP8[$89>>0] = $88;
   $90 = $event;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = ($92|0)==(128);
   if ($93) {
    $94 = $event;
    HEAP8[$94>>0] = -127;
   }
  }
  $95 = $flag;
  $96 = $95&255;
  $97 = $96 & 32;
  $98 = ($97|0)!=(0);
  if (!($98)) {
   continue;
  }
  $99 = $3;
  $100 = (_hio_read8($99)|0);
  $101 = $100&255;
  $102 = (($101|0) / 2)&-1;
  $103 = (1 + ($102))|0;
  $104 = $103&255;
  $105 = $event;
  $106 = ((($105)) + 2|0);
  HEAP8[$106>>0] = $104;
 }
 $0 = 9;
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _get_inst366($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $fade = 0, $finetune = 0, $flags = 0, $i = 0, $j = 0, $mod = 0, $snum = 0, $srate = 0, $val = 0, $vde = 0, $vra = 0, $vsw = 0, $vwf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 76|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 (_hio_read8($7)|0);
 $8 = $3;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $i = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($11*764)|0)|0);
 $16 = $3;
 (_hio_read($15,1,28,$16)|0);
 $17 = $i;
 $18 = $mod;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($17*764)|0)|0);
 (_adjust_string($21)|0);
 $22 = $3;
 $23 = (_hio_read8($22)|0);
 $24 = $23&255;
 $25 = $i;
 $26 = $mod;
 $27 = ((($26)) + 176|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + (($25*764)|0)|0);
 $30 = ((($29)) + 36|0);
 HEAP32[$30>>2] = $24;
 $j = 0;
 while(1) {
  $31 = $j;
  $32 = ($31|0)<(108);
  $33 = $3;
  if (!($32)) {
   break;
  }
  $34 = (_hio_read8($33)|0);
  $35 = $j;
  $36 = $i;
  $37 = $mod;
  $38 = ((($37)) + 176|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($36*764)|0)|0);
  $41 = ((($40)) + 512|0);
  $42 = (($41) + ($35<<1)|0);
  HEAP8[$42>>0] = $34;
  $43 = $j;
  $44 = (($43) + 1)|0;
  $j = $44;
 }
 (_hio_seek($33,11,1)|0);
 $45 = $3;
 $46 = (_hio_read8($45)|0);
 $47 = $46&255;
 $vwf = $47;
 $48 = $3;
 $49 = (_hio_read8($48)|0);
 $50 = $49&255;
 $vsw = $50;
 $51 = $3;
 (_hio_read8($51)|0);
 $52 = $3;
 (_hio_read8($52)|0);
 $53 = $3;
 $54 = (_hio_read8($53)|0);
 $55 = $54&255;
 $56 = (($55|0) / 4)&-1;
 $vde = $56;
 $57 = $3;
 $58 = (_hio_read16l($57)|0);
 $59 = $58&65535;
 $60 = (($59|0) / 16)&-1;
 $vra = $60;
 $61 = $3;
 (_hio_read8($61)|0);
 $62 = $3;
 $63 = (_hio_read8($62)|0);
 $64 = $63&255;
 $val = $64;
 $65 = $val;
 $66 = $65 & 15;
 $67 = $66 & 1;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $i;
  $70 = $mod;
  $71 = ((($70)) + 176|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + (($69*764)|0)|0);
  $74 = ((($73)) + 44|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 | 1;
  HEAP32[$74>>2] = $76;
 }
 $77 = $val;
 $78 = $77 & 15;
 $79 = $78 & 2;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $i;
  $82 = $mod;
  $83 = ((($82)) + 176|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + (($81*764)|0)|0);
  $86 = ((($85)) + 44|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 | 2;
  HEAP32[$86>>2] = $88;
 }
 $89 = $val;
 $90 = $89 & 15;
 $91 = $90 & 4;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99 | 4;
  HEAP32[$98>>2] = $100;
 }
 $101 = $val;
 $102 = $101 & 240;
 $103 = $102 >> 4;
 $104 = $103 & 1;
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $i;
  $107 = $mod;
  $108 = ((($107)) + 176|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + (($106*764)|0)|0);
  $111 = ((($110)) + 200|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $112 | 1;
  HEAP32[$111>>2] = $113;
 }
 $114 = $val;
 $115 = $114 & 240;
 $116 = $115 >> 4;
 $117 = $116 & 2;
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = $i;
  $120 = $mod;
  $121 = ((($120)) + 176|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + (($119*764)|0)|0);
  $124 = ((($123)) + 200|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 | 2;
  HEAP32[$124>>2] = $126;
 }
 $127 = $val;
 $128 = $127 & 240;
 $129 = $128 >> 4;
 $130 = $129 & 4;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 176|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + (($132*764)|0)|0);
  $137 = ((($136)) + 200|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 | 4;
  HEAP32[$137>>2] = $139;
 }
 $140 = $3;
 $141 = (_hio_read8($140)|0);
 $142 = $141&255;
 $val = $142;
 $143 = $val;
 $144 = $143 & 15;
 $145 = (($144) + 1)|0;
 $146 = $i;
 $147 = $mod;
 $148 = ((($147)) + 176|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($149) + (($146*764)|0)|0);
 $151 = ((($150)) + 44|0);
 $152 = ((($151)) + 4|0);
 HEAP32[$152>>2] = $145;
 $153 = $val;
 $154 = $153 & 240;
 $155 = $154 >> 4;
 $156 = (($155) + 1)|0;
 $157 = $i;
 $158 = $mod;
 $159 = ((($158)) + 176|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + (($157*764)|0)|0);
 $162 = ((($161)) + 200|0);
 $163 = ((($162)) + 4|0);
 HEAP32[$163>>2] = $156;
 $164 = $3;
 $165 = (_hio_read8($164)|0);
 $166 = $165&255;
 $val = $166;
 $167 = $val;
 $168 = $167 & 15;
 $169 = $i;
 $170 = $mod;
 $171 = ((($170)) + 176|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = (($172) + (($169*764)|0)|0);
 $174 = ((($173)) + 44|0);
 $175 = ((($174)) + 12|0);
 HEAP32[$175>>2] = $168;
 $176 = $val;
 $177 = $176 & 240;
 $178 = $177 >> 4;
 $179 = $i;
 $180 = $mod;
 $181 = ((($180)) + 176|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + (($179*764)|0)|0);
 $184 = ((($183)) + 200|0);
 $185 = ((($184)) + 12|0);
 HEAP32[$185>>2] = $178;
 $186 = $3;
 $187 = (_hio_read8($186)|0);
 $188 = $187&255;
 $val = $188;
 $189 = $val;
 $190 = $189 & 15;
 $191 = $i;
 $192 = $mod;
 $193 = ((($192)) + 176|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = (($194) + (($191*764)|0)|0);
 $196 = ((($195)) + 44|0);
 $197 = ((($196)) + 20|0);
 HEAP32[$197>>2] = $190;
 $198 = $val;
 $199 = $198 & 240;
 $200 = $199 >> 4;
 $201 = $i;
 $202 = $mod;
 $203 = ((($202)) + 176|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (($204) + (($201*764)|0)|0);
 $206 = ((($205)) + 200|0);
 $207 = ((($206)) + 20|0);
 HEAP32[$207>>2] = $200;
 $208 = $3;
 (_hio_read8($208)|0);
 $209 = $val;
 $210 = $209 & 15;
 $211 = $i;
 $212 = $mod;
 $213 = ((($212)) + 176|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) + (($211*764)|0)|0);
 $216 = ((($215)) + 44|0);
 $217 = ((($216)) + 24|0);
 HEAP32[$217>>2] = $210;
 $218 = $val;
 $219 = $218 & 240;
 $220 = $219 >> 4;
 $221 = $i;
 $222 = $mod;
 $223 = ((($222)) + 176|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = (($224) + (($221*764)|0)|0);
 $226 = ((($225)) + 200|0);
 $227 = ((($226)) + 24|0);
 HEAP32[$227>>2] = $220;
 $228 = $i;
 $229 = $mod;
 $230 = ((($229)) + 176|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (($231) + (($228*764)|0)|0);
 $233 = ((($232)) + 44|0);
 $234 = ((($233)) + 4|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<=(0);
 if ($236) {
  label = 18;
 } else {
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 176|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*764)|0)|0);
  $242 = ((($241)) + 44|0);
  $243 = ((($242)) + 4|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($244|0)>=(32);
  if ($245) {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $246 = $i;
  $247 = $mod;
  $248 = ((($247)) + 176|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + (($246*764)|0)|0);
  $251 = ((($250)) + 44|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $252 & -2;
  HEAP32[$251>>2] = $253;
 }
 $254 = $i;
 $255 = $mod;
 $256 = ((($255)) + 176|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = (($257) + (($254*764)|0)|0);
 $259 = ((($258)) + 200|0);
 $260 = ((($259)) + 4|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ($261|0)<=(0);
 if ($262) {
  label = 21;
 } else {
  $263 = $i;
  $264 = $mod;
  $265 = ((($264)) + 176|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($266) + (($263*764)|0)|0);
  $268 = ((($267)) + 200|0);
  $269 = ((($268)) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)>=(32);
  if ($271) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $272 = $i;
  $273 = $mod;
  $274 = ((($273)) + 176|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($275) + (($272*764)|0)|0);
  $277 = ((($276)) + 200|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $278 & -2;
  HEAP32[$277>>2] = $279;
 }
 $280 = $3;
 (_hio_read($buf,1,30,$280)|0);
 $j = 0;
 while(1) {
  $281 = $j;
  $282 = $i;
  $283 = $mod;
  $284 = ((($283)) + 176|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($285) + (($282*764)|0)|0);
  $287 = ((($286)) + 44|0);
  $288 = ((($287)) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($281|0)<($289|0);
  if (!($290)) {
   break;
  }
  $291 = $j;
  $292 = ($291*3)|0;
  $293 = (($buf) + ($292)|0);
  $294 = (_readmem16l($293)|0);
  $295 = $294&65535;
  $296 = (($295|0) / 16)&-1;
  $297 = $296&65535;
  $298 = $j;
  $299 = $298<<1;
  $300 = $i;
  $301 = $mod;
  $302 = ((($301)) + 176|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (($303) + (($300*764)|0)|0);
  $305 = ((($304)) + 44|0);
  $306 = ((($305)) + 28|0);
  $307 = (($306) + ($299<<1)|0);
  HEAP16[$307>>1] = $297;
  $308 = $j;
  $309 = ($308*3)|0;
  $310 = (($309) + 2)|0;
  $311 = (($buf) + ($310)|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&255;
  $314 = $j;
  $315 = $314<<1;
  $316 = (($315) + 1)|0;
  $317 = $i;
  $318 = $mod;
  $319 = ((($318)) + 176|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($320) + (($317*764)|0)|0);
  $322 = ((($321)) + 44|0);
  $323 = ((($322)) + 28|0);
  $324 = (($323) + ($316<<1)|0);
  HEAP16[$324>>1] = $313;
  $325 = $j;
  $326 = (($325) + 1)|0;
  $j = $326;
 }
 $327 = $3;
 (_hio_read($buf,1,30,$327)|0);
 $j = 0;
 while(1) {
  $328 = $j;
  $329 = $i;
  $330 = $mod;
  $331 = ((($330)) + 176|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = (($332) + (($329*764)|0)|0);
  $334 = ((($333)) + 200|0);
  $335 = ((($334)) + 4|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ($328|0)<($336|0);
  if (!($337)) {
   break;
  }
  $338 = $j;
  $339 = ($338*3)|0;
  $340 = (($buf) + ($339)|0);
  $341 = (_readmem16l($340)|0);
  $342 = $341&65535;
  $343 = (($342|0) / 16)&-1;
  $344 = $343&65535;
  $345 = $j;
  $346 = $345<<1;
  $347 = $i;
  $348 = $mod;
  $349 = ((($348)) + 176|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = (($350) + (($347*764)|0)|0);
  $352 = ((($351)) + 200|0);
  $353 = ((($352)) + 28|0);
  $354 = (($353) + ($346<<1)|0);
  HEAP16[$354>>1] = $344;
  $355 = $j;
  $356 = ($355*3)|0;
  $357 = (($356) + 2)|0;
  $358 = (($buf) + ($357)|0);
  $359 = HEAP8[$358>>0]|0;
  $360 = $359&255;
  $361 = $j;
  $362 = $361<<1;
  $363 = (($362) + 1)|0;
  $364 = $i;
  $365 = $mod;
  $366 = ((($365)) + 176|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = (($367) + (($364*764)|0)|0);
  $369 = ((($368)) + 200|0);
  $370 = ((($369)) + 28|0);
  $371 = (($370) + ($363<<1)|0);
  HEAP16[$371>>1] = $360;
  $372 = $j;
  $373 = (($372) + 1)|0;
  $j = $373;
 }
 $374 = $3;
 $375 = (_hio_read8($374)|0);
 $376 = $375&255;
 $fade = $376;
 $377 = $3;
 (_hio_read8($377)|0);
 $378 = $i;
 $379 = $mod;
 $380 = ((($379)) + 176|0);
 $381 = HEAP32[$380>>2]|0;
 $382 = (($381) + (($378*764)|0)|0);
 $383 = ((($382)) + 36|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = ($384|0)==(0);
 if ($385) {
  $0 = 0;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 $386 = $mod;
 $387 = $i;
 $388 = $i;
 $389 = $mod;
 $390 = ((($389)) + 176|0);
 $391 = HEAP32[$390>>2]|0;
 $392 = (($391) + (($388*764)|0)|0);
 $393 = ((($392)) + 36|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = (_subinstrument_alloc($386,$387,$394)|0);
 $396 = ($395|0)<(0);
 if ($396) {
  $0 = -1;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 $j = 0;
 while(1) {
  $397 = $j;
  $398 = $i;
  $399 = $mod;
  $400 = ((($399)) + 176|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = (($401) + (($398*764)|0)|0);
  $403 = ((($402)) + 36|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = ($397|0)<($404|0);
  if (!($405)) {
   label = 46;
   break;
  }
  $406 = $3;
  (_hio_read32b($406)|0);
  $407 = $3;
  (_hio_read32b($407)|0);
  $408 = $data;
  $409 = HEAP32[$408>>2]|0;
  $410 = $mod;
  $411 = ((($410)) + 180|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = (($412) + (($409*52)|0)|0);
  $414 = $3;
  (_hio_read($413,1,28,$414)|0);
  $415 = $data;
  $416 = HEAP32[$415>>2]|0;
  $417 = $mod;
  $418 = ((($417)) + 180|0);
  $419 = HEAP32[$418>>2]|0;
  $420 = (($419) + (($416*52)|0)|0);
  (_adjust_string($420)|0);
  $421 = $3;
  $422 = (_hio_read8($421)|0);
  $423 = $422&255;
  $424 = $423<<2;
  $425 = $j;
  $426 = $i;
  $427 = $mod;
  $428 = ((($427)) + 176|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = (($429) + (($426*764)|0)|0);
  $431 = ((($430)) + 756|0);
  $432 = HEAP32[$431>>2]|0;
  $433 = (($432) + ($425<<6)|0);
  $434 = ((($433)) + 8|0);
  HEAP32[$434>>2] = $424;
  $435 = $j;
  $436 = $i;
  $437 = $mod;
  $438 = ((($437)) + 176|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = (($439) + (($436*764)|0)|0);
  $441 = ((($440)) + 756|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = (($442) + ($435<<6)|0);
  $444 = ((($443)) + 8|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = ($445|0)==(0);
  if ($446) {
   $447 = $j;
   $448 = $i;
   $449 = $mod;
   $450 = ((($449)) + 176|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = (($451) + (($448*764)|0)|0);
   $453 = ((($452)) + 756|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = (($454) + ($447<<6)|0);
   $456 = ((($455)) + 8|0);
   HEAP32[$456>>2] = 128;
  }
  $457 = $3;
  $458 = (_hio_read8($457)|0);
  $459 = $458&255;
  $460 = $j;
  $461 = $i;
  $462 = $mod;
  $463 = ((($462)) + 176|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = (($464) + (($461*764)|0)|0);
  $466 = ((($465)) + 756|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = (($467) + ($460<<6)|0);
  HEAP32[$468>>2] = $459;
  $469 = $3;
  $470 = (_hio_read8($469)|0);
  $471 = $470&255;
  $flags = $471;
  $472 = $3;
  (_hio_read8($472)|0);
  $473 = $vwf;
  $474 = $j;
  $475 = $i;
  $476 = $mod;
  $477 = ((($476)) + 176|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = (($478) + (($475*764)|0)|0);
  $480 = ((($479)) + 756|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = (($481) + ($474<<6)|0);
  $483 = ((($482)) + 20|0);
  HEAP32[$483>>2] = $473;
  $484 = $vde;
  $485 = $j;
  $486 = $i;
  $487 = $mod;
  $488 = ((($487)) + 176|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = (($489) + (($486*764)|0)|0);
  $491 = ((($490)) + 756|0);
  $492 = HEAP32[$491>>2]|0;
  $493 = (($492) + ($485<<6)|0);
  $494 = ((($493)) + 24|0);
  HEAP32[$494>>2] = $484;
  $495 = $vra;
  $496 = $j;
  $497 = $i;
  $498 = $mod;
  $499 = ((($498)) + 176|0);
  $500 = HEAP32[$499>>2]|0;
  $501 = (($500) + (($497*764)|0)|0);
  $502 = ((($501)) + 756|0);
  $503 = HEAP32[$502>>2]|0;
  $504 = (($503) + ($496<<6)|0);
  $505 = ((($504)) + 28|0);
  HEAP32[$505>>2] = $495;
  $506 = $vsw;
  $507 = $j;
  $508 = $i;
  $509 = $mod;
  $510 = ((($509)) + 176|0);
  $511 = HEAP32[$510>>2]|0;
  $512 = (($511) + (($508*764)|0)|0);
  $513 = ((($512)) + 756|0);
  $514 = HEAP32[$513>>2]|0;
  $515 = (($514) + ($507<<6)|0);
  $516 = ((($515)) + 32|0);
  HEAP32[$516>>2] = $506;
  $517 = $data;
  $518 = HEAP32[$517>>2]|0;
  $519 = $j;
  $520 = $i;
  $521 = $mod;
  $522 = ((($521)) + 176|0);
  $523 = HEAP32[$522>>2]|0;
  $524 = (($523) + (($520*764)|0)|0);
  $525 = ((($524)) + 756|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = (($526) + ($519<<6)|0);
  $528 = ((($527)) + 40|0);
  HEAP32[$528>>2] = $518;
  $529 = $3;
  $530 = (_hio_read32l($529)|0);
  $531 = $data;
  $532 = HEAP32[$531>>2]|0;
  $533 = $mod;
  $534 = ((($533)) + 180|0);
  $535 = HEAP32[$534>>2]|0;
  $536 = (($535) + (($532*52)|0)|0);
  $537 = ((($536)) + 32|0);
  HEAP32[$537>>2] = $530;
  $538 = $3;
  $539 = (_hio_read32l($538)|0);
  $540 = $data;
  $541 = HEAP32[$540>>2]|0;
  $542 = $mod;
  $543 = ((($542)) + 180|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = (($544) + (($541*52)|0)|0);
  $546 = ((($545)) + 36|0);
  HEAP32[$546>>2] = $539;
  $547 = $3;
  $548 = (_hio_read32l($547)|0);
  $549 = $data;
  $550 = HEAP32[$549>>2]|0;
  $551 = $mod;
  $552 = ((($551)) + 180|0);
  $553 = HEAP32[$552>>2]|0;
  $554 = (($553) + (($550*52)|0)|0);
  $555 = ((($554)) + 40|0);
  HEAP32[$555>>2] = $548;
  $556 = $data;
  $557 = HEAP32[$556>>2]|0;
  $558 = $mod;
  $559 = ((($558)) + 180|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = (($560) + (($557*52)|0)|0);
  $562 = ((($561)) + 44|0);
  HEAP32[$562>>2] = 0;
  $563 = $flags;
  $564 = $563 & 4;
  $565 = ($564|0)!=(0);
  if ($565) {
   $566 = $data;
   $567 = HEAP32[$566>>2]|0;
   $568 = $mod;
   $569 = ((($568)) + 180|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = (($570) + (($567*52)|0)|0);
   $572 = ((($571)) + 44|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = $573 | 1;
   HEAP32[$572>>2] = $574;
  }
  $575 = $flags;
  $576 = $575 & 8;
  $577 = ($576|0)!=(0);
  if ($577) {
   $578 = $data;
   $579 = HEAP32[$578>>2]|0;
   $580 = $mod;
   $581 = ((($580)) + 180|0);
   $582 = HEAP32[$581>>2]|0;
   $583 = (($582) + (($579*52)|0)|0);
   $584 = ((($583)) + 44|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = $585 | 2;
   HEAP32[$584>>2] = $586;
  }
  $587 = $flags;
  $588 = $587 & 16;
  $589 = ($588|0)!=(0);
  if ($589) {
   $590 = $data;
   $591 = HEAP32[$590>>2]|0;
   $592 = $mod;
   $593 = ((($592)) + 180|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = (($594) + (($591*52)|0)|0);
   $596 = ((($595)) + 44|0);
   $597 = HEAP32[$596>>2]|0;
   $598 = $597 | 4;
   HEAP32[$596>>2] = $598;
  }
  $599 = $3;
  $600 = (_hio_read32l($599)|0);
  $srate = $600;
  $finetune = 0;
  $601 = $srate;
  $602 = $j;
  $603 = $i;
  $604 = $mod;
  $605 = ((($604)) + 176|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = (($606) + (($603*764)|0)|0);
  $608 = ((($607)) + 756|0);
  $609 = HEAP32[$608>>2]|0;
  $610 = (($609) + ($602<<6)|0);
  $611 = ((($610)) + 12|0);
  $612 = $j;
  $613 = $i;
  $614 = $mod;
  $615 = ((($614)) + 176|0);
  $616 = HEAP32[$615>>2]|0;
  $617 = (($616) + (($613*764)|0)|0);
  $618 = ((($617)) + 756|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = (($619) + ($612<<6)|0);
  $621 = ((($620)) + 16|0);
  _c2spd_to_note($601,$611,$621);
  $622 = $finetune;
  $623 = $j;
  $624 = $i;
  $625 = $mod;
  $626 = ((($625)) + 176|0);
  $627 = HEAP32[$626>>2]|0;
  $628 = (($627) + (($624*764)|0)|0);
  $629 = ((($628)) + 756|0);
  $630 = HEAP32[$629>>2]|0;
  $631 = (($630) + ($623<<6)|0);
  $632 = ((($631)) + 16|0);
  $633 = HEAP32[$632>>2]|0;
  $634 = (($633) + ($622))|0;
  HEAP32[$632>>2] = $634;
  $635 = $3;
  (_hio_read32l($635)|0);
  $636 = $3;
  (_hio_read32l($636)|0);
  $637 = $data;
  $638 = HEAP32[$637>>2]|0;
  $639 = $mod;
  $640 = ((($639)) + 180|0);
  $641 = HEAP32[$640>>2]|0;
  $642 = (($641) + (($638*52)|0)|0);
  $643 = ((($642)) + 32|0);
  $644 = HEAP32[$643>>2]|0;
  $645 = ($644|0)>(1);
  if ($645) {
   $646 = $data;
   $647 = HEAP32[$646>>2]|0;
   $snum = $647;
   $648 = $1;
   $649 = $3;
   $650 = $snum;
   $651 = $mod;
   $652 = ((($651)) + 180|0);
   $653 = HEAP32[$652>>2]|0;
   $654 = (($653) + (($650*52)|0)|0);
   $655 = (_load_sample($648,$649,0,$654,0)|0);
   $656 = ($655|0)<(0);
   if ($656) {
    label = 44;
    break;
   }
  }
  $657 = $j;
  $658 = (($657) + 1)|0;
  $j = $658;
  $659 = $data;
  $660 = HEAP32[$659>>2]|0;
  $661 = (($660) + 1)|0;
  HEAP32[$659>>2] = $661;
 }
 if ((label|0) == 44) {
  $0 = -1;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 else if ((label|0) == 46) {
  $0 = 0;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 return (0)|0;
}
function _mfp_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $buf = 0, $i = 0, $len = 0, $lps = 0, $lsz = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   $8 = (_hio_read($buf,1,384,$7)|0);
   $9 = ($8>>>0)<(384);
   if ($9) {
    $0 = -1;
    break;
   }
   $10 = ((($buf)) + 249|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($12|0)!=(127);
   if ($13) {
    $0 = -1;
    break;
   }
   $i = 0;
   while(1) {
    $14 = $i;
    $15 = ($14|0)<(31);
    if (!($15)) {
     label = 22;
     break;
    }
    $16 = $i;
    $17 = $16<<3;
    $18 = (($buf) + ($17)|0);
    $19 = (_readmem16b($18)|0);
    $20 = $19&65535;
    $len = $20;
    $21 = $len;
    $22 = ($21|0)>(32767);
    if ($22) {
     label = 10;
     break;
    }
    $23 = $i;
    $24 = $23<<3;
    $25 = (($24) + 2)|0;
    $26 = (($buf) + ($25)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = $28 & 240;
    $30 = ($29|0)!=(0);
    if ($30) {
     label = 12;
     break;
    }
    $31 = $i;
    $32 = $31<<3;
    $33 = (($32) + 3)|0;
    $34 = (($buf) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36|0)>(64);
    if ($37) {
     label = 14;
     break;
    }
    $38 = $i;
    $39 = $38<<3;
    $40 = (($buf) + ($39)|0);
    $41 = ((($40)) + 4|0);
    $42 = (_readmem16b($41)|0);
    $43 = $42&65535;
    $lps = $43;
    $44 = $lps;
    $45 = $len;
    $46 = ($44|0)>($45|0);
    if ($46) {
     label = 16;
     break;
    }
    $47 = $i;
    $48 = $47<<3;
    $49 = (($buf) + ($48)|0);
    $50 = ((($49)) + 6|0);
    $51 = (_readmem16b($50)|0);
    $52 = $51&65535;
    $lsz = $52;
    $53 = $lps;
    $54 = $lsz;
    $55 = (($53) + ($54))|0;
    $56 = (($55) - 1)|0;
    $57 = $len;
    $58 = ($56|0)>($57|0);
    if ($58) {
     label = 18;
     break;
    }
    $59 = $len;
    $60 = ($59|0)>(0);
    $61 = $lsz;
    $62 = ($61|0)==(0);
    $or$cond = $60 & $62;
    if ($or$cond) {
     label = 20;
     break;
    }
    $63 = $i;
    $64 = (($63) + 1)|0;
    $i = $64;
   }
   if ((label|0) == 10) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 12) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 14) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 16) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 18) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 20) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 22) {
    $65 = ((($buf)) + 248|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = ((($buf)) + 378|0);
    $69 = (_readmem16b($68)|0);
    $70 = $69&65535;
    $71 = ($67|0)!=($70|0);
    if ($71) {
     $0 = -1;
     break;
    }
    $72 = ((($buf)) + 378|0);
    $73 = (_readmem16b($72)|0);
    $74 = $73&65535;
    $75 = ((($buf)) + 380|0);
    $76 = (_readmem16b($75)|0);
    $77 = $76&65535;
    $78 = ($74|0)!=($77|0);
    if ($78) {
     $0 = -1;
     break;
    } else {
     $79 = $1;
     $80 = $2;
     _read_title($79,$80,0);
     $0 = 0;
     break;
    }
   }
  }
 } while(0);
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _mfp_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $event = 0, $i = 0, $j = 0;
 var $k = 0, $loop_size = 0, $mod = 0, $mod_event = 0, $pat_addr = 0, $pat_table = 0, $row = 0, $s = 0, $size1 = 0, $smp_filename = 0, $st = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr6 = 0, $x = 0, $x1 = 0, $y = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $st = sp + 2108|0;
 $smp_filename = sp + 3256|0;
 $pat_table = sp + 48|0;
 $buf = sp + 2232|0;
 $mod_event = sp + 2228|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $1;
 _set_type($7,7616,$vararg_buffer);
 $8 = $mod;
 $9 = ((($8)) + 136|0);
 HEAP32[$9>>2] = 4;
 $10 = $mod;
 $11 = ((($10)) + 144|0);
 HEAP32[$11>>2] = 31;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = 31;
 $14 = $mod;
 $15 = (_instrument_init($14)|0);
 $16 = ($15|0)<(0);
 if ($16) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<(31);
  if (!($18)) {
   break;
  }
  $19 = $mod;
  $20 = $i;
  $21 = (_subinstrument_alloc($19,$20,1)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   label = 6;
   break;
  }
  $23 = $2;
  $24 = (_hio_read16b($23)|0);
  $25 = $24&65535;
  $26 = $25<<1;
  $27 = $i;
  $28 = $mod;
  $29 = ((($28)) + 180|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + (($27*52)|0)|0);
  $32 = ((($31)) + 32|0);
  HEAP32[$32>>2] = $26;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $34&255;
  $36 = $35 << 4;
  $37 = $36&255;
  $38 = $37 << 24 >> 24;
  $39 = $i;
  $40 = $mod;
  $41 = ((($40)) + 176|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*764)|0)|0);
  $44 = ((($43)) + 756|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 16|0);
  HEAP32[$46>>2] = $38;
  $47 = $2;
  $48 = (_hio_read8($47)|0);
  $49 = $48&255;
  $50 = $i;
  $51 = $mod;
  $52 = ((($51)) + 176|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + (($50*764)|0)|0);
  $55 = ((($54)) + 756|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$56>>2] = $49;
  $57 = $2;
  $58 = (_hio_read16b($57)|0);
  $59 = $58&65535;
  $60 = $59<<1;
  $61 = $i;
  $62 = $mod;
  $63 = ((($62)) + 180|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + (($61*52)|0)|0);
  $66 = ((($65)) + 36|0);
  HEAP32[$66>>2] = $60;
  $67 = $2;
  $68 = (_hio_read16b($67)|0);
  $69 = $68&65535;
  $loop_size = $69;
  $70 = $i;
  $71 = $mod;
  $72 = ((($71)) + 180|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + (($70*52)|0)|0);
  $75 = ((($74)) + 36|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $loop_size;
  $78 = $77<<1;
  $79 = (($76) + ($78))|0;
  $80 = $i;
  $81 = $mod;
  $82 = ((($81)) + 180|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + (($80*52)|0)|0);
  $85 = ((($84)) + 40|0);
  HEAP32[$85>>2] = $79;
  $86 = $loop_size;
  $87 = ($86|0)>(1);
  $88 = $87 ? 2 : 0;
  $89 = $i;
  $90 = $mod;
  $91 = ((($90)) + 180|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + (($89*52)|0)|0);
  $94 = ((($93)) + 44|0);
  HEAP32[$94>>2] = $88;
  $95 = $i;
  $96 = $mod;
  $97 = ((($96)) + 176|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($95*764)|0)|0);
  $100 = ((($99)) + 756|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($101)) + 8|0);
  HEAP32[$102>>2] = 128;
  $103 = $i;
  $104 = $i;
  $105 = $mod;
  $106 = ((($105)) + 176|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + (($104*764)|0)|0);
  $109 = ((($108)) + 756|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 40|0);
  HEAP32[$111>>2] = $103;
  $112 = $i;
  $113 = $mod;
  $114 = ((($113)) + 176|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + (($112*764)|0)|0);
  $117 = ((($116)) + 40|0);
  HEAP32[$117>>2] = 4095;
  $118 = $i;
  $119 = $mod;
  $120 = ((($119)) + 180|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + (($118*52)|0)|0);
  $123 = ((($122)) + 32|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)>(0);
  if ($125) {
   $126 = $i;
   $127 = $mod;
   $128 = ((($127)) + 176|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + (($126*764)|0)|0);
   $131 = ((($130)) + 36|0);
   HEAP32[$131>>2] = 1;
  }
  $132 = $i;
  $133 = (($132) + 1)|0;
  $i = $133;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $134 = $2;
 $135 = (_hio_read8($134)|0);
 $136 = $135&255;
 $137 = $mod;
 $138 = ((($137)) + 128|0);
 HEAP32[$138>>2] = $136;
 $139 = $mod;
 $140 = ((($139)) + 156|0);
 HEAP32[$140>>2] = $136;
 $141 = $2;
 (_hio_read8($141)|0);
 $i = 0;
 while(1) {
  $142 = $i;
  $143 = ($142|0)<(128);
  if (!($143)) {
   break;
  }
  $144 = $2;
  $145 = (_hio_read8($144)|0);
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 952|0);
  $149 = (($148) + ($146)|0);
  HEAP8[$149>>0] = $145;
  $150 = $i;
  $151 = (($150) + 1)|0;
  $i = $151;
 }
 $152 = $mod;
 $153 = ((($152)) + 128|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $mod;
 $156 = ((($155)) + 136|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = Math_imul($154, $157)|0;
 $159 = $mod;
 $160 = ((($159)) + 132|0);
 HEAP32[$160>>2] = $158;
 $161 = $mod;
 $162 = (_pattern_init($161)|0);
 $163 = ($162|0)<(0);
 if ($163) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $164 = $2;
 $165 = (_hio_read16b($164)|0);
 $166 = $165&65535;
 $size1 = $166;
 $167 = $2;
 (_hio_read16b($167)|0);
 $i = 0;
 while(1) {
  $168 = $i;
  $169 = $size1;
  $170 = ($168|0)<($169|0);
  if (!($170)) {
   break;
  }
  $j = 0;
  while(1) {
   $171 = $j;
   $172 = ($171|0)<(4);
   if (!($172)) {
    break;
   }
   $173 = $2;
   $174 = (_hio_read16b($173)|0);
   $175 = $174&65535;
   $176 = $j;
   $177 = $i;
   $178 = (($pat_table) + ($177<<4)|0);
   $179 = (($178) + ($176<<2)|0);
   HEAP32[$179>>2] = $175;
   $180 = $j;
   $181 = (($180) + 1)|0;
   $j = $181;
  }
  $182 = $i;
  $183 = (($182) + 1)|0;
  $i = $183;
 }
 $184 = $2;
 $185 = (_hio_tell($184)|0);
 $pat_addr = $185;
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 128|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($186|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $mod;
  $192 = $i;
  $193 = (_pattern_tracks_alloc($191,$192,64)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   label = 24;
   break;
  }
  $j = 0;
  while(1) {
   $195 = $j;
   $196 = ($195|0)<(4);
   if (!($196)) {
    break;
   }
   $197 = $2;
   $198 = $pat_addr;
   $199 = $j;
   $200 = $i;
   $201 = (($pat_table) + ($200<<4)|0);
   $202 = (($201) + ($199<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($198) + ($203))|0;
   (_hio_seek($197,$204,0)|0);
   $205 = $2;
   (_hio_read($buf,1,1024,$205)|0);
   $k = 0;
   $row = 0;
   while(1) {
    $206 = $k;
    $207 = ($206|0)<(4);
    if (!($207)) {
     break;
    }
    $x = 0;
    while(1) {
     $208 = $x;
     $209 = ($208|0)<(4);
     if (!($209)) {
      break;
     }
     $y = 0;
     while(1) {
      $210 = $y;
      $211 = ($210|0)<(4);
      if (!($211)) {
       break;
      }
      $212 = $row;
      $213 = $j;
      $214 = $i;
      $215 = $1;
      $216 = ((($215)) + 168|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (($217) + ($214<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($219)) + 4|0);
      $221 = (($220) + ($213<<2)|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = $1;
      $224 = ((($223)) + 172|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (($225) + ($222<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ((($227)) + 4|0);
      $229 = (($228) + ($212<<3)|0);
      $event = $229;
      $230 = $k;
      $231 = (($buf) + ($230)|0);
      $232 = HEAP8[$231>>0]|0;
      $233 = $232&255;
      $234 = $x;
      $235 = (($233) + ($234))|0;
      $236 = (($buf) + ($235)|0);
      $237 = HEAP8[$236>>0]|0;
      $238 = $237&255;
      $239 = $y;
      $240 = (($238) + ($239))|0;
      $241 = (($buf) + ($240)|0);
      $242 = HEAP8[$241>>0]|0;
      $243 = $242&255;
      $244 = $243<<1;
      $245 = (($buf) + ($244)|0);
      ;HEAP8[$mod_event>>0]=HEAP8[$245>>0]|0;HEAP8[$mod_event+1>>0]=HEAP8[$245+1>>0]|0;HEAP8[$mod_event+2>>0]=HEAP8[$245+2>>0]|0;HEAP8[$mod_event+3>>0]=HEAP8[$245+3>>0]|0;
      $246 = $event;
      _decode_protracker_event($246,$mod_event);
      $247 = $y;
      $248 = (($247) + 1)|0;
      $y = $248;
      $249 = $row;
      $250 = (($249) + 1)|0;
      $row = $250;
     }
     $251 = $x;
     $252 = (($251) + 1)|0;
     $x = $252;
    }
    $253 = $k;
    $254 = (($253) + 1)|0;
    $k = $254;
   }
   $255 = $j;
   $256 = (($255) + 1)|0;
   $j = $256;
  }
  $257 = $i;
  $258 = (($257) + 1)|0;
  $i = $258;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $259 = $1;
 $260 = ((($259)) + 1212|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = (_strlen(($261|0))|0);
 $263 = ($262>>>0)<(5);
 do {
  if ($263) {
   label = 40;
  } else {
   $264 = $1;
   $265 = ((($264)) + 1212|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = ((($266)) + 3|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268 << 24 >> 24;
   $270 = ($269|0)!=(46);
   if ($270) {
    label = 40;
   } else {
    $275 = $1;
    $276 = ((($275)) + 1212|0);
    $277 = HEAP32[$276>>2]|0;
    HEAP8[$277>>0] = 115;
    $278 = $1;
    $279 = ((($278)) + 1212|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = ((($280)) + 1|0);
    HEAP8[$281>>0] = 109;
    $282 = $1;
    $283 = ((($282)) + 1212|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = ((($284)) + 2|0);
    HEAP8[$285>>0] = 112;
    $286 = $1;
    $287 = ((($286)) + 1208|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $1;
    $290 = ((($289)) + 1212|0);
    $291 = HEAP32[$290>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $288;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $291;
    (_snprintf($smp_filename,4096,7672,$vararg_buffer3)|0);
    $292 = (_stat(($smp_filename|0),($st|0))|0);
    $293 = ($292|0)<(0);
    if ($293) {
     $294 = $1;
     $295 = ((($294)) + 1212|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = (_strchr($296,45)|0);
     $298 = ($297|0)!=(0|0);
     if ($298) {
      $299 = (_strrchr($smp_filename,45)|0);
      $x1 = $299;
      $300 = ($299|0)!=(0|0);
      if ($300) {
       $301 = $x1;
       (_strcpy(($301|0),(7680|0))|0);
      }
     }
     $302 = (_stat(($smp_filename|0),($st|0))|0);
     $303 = ($302|0)<(0);
     if ($303) {
      $304 = HEAP32[_stderr>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $smp_filename;
      (_fprintf(($304|0),(7688|0),($vararg_buffer7|0))|0);
      break;
     }
    }
    $305 = (_hio_open($smp_filename,8192)|0);
    $s = $305;
    $306 = ($305|0)==(0|0);
    if ($306) {
     $307 = HEAP32[_stderr>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $smp_filename;
     (_fprintf(($307|0),(7720|0),($vararg_buffer10|0))|0);
     break;
    }
    $i = 0;
    while(1) {
     $308 = $i;
     $309 = $mod;
     $310 = ((($309)) + 140|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = ($308|0)<($311|0);
     if (!($312)) {
      label = 54;
      break;
     }
     $313 = $1;
     $314 = $s;
     $315 = $i;
     $316 = $mod;
     $317 = ((($316)) + 176|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = (($318) + (($315*764)|0)|0);
     $320 = ((($319)) + 756|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ((($321)) + 40|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $mod;
     $325 = ((($324)) + 180|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = (($326) + (($323*52)|0)|0);
     $328 = (_load_sample($313,$314,512,$327,0)|0);
     $329 = ($328|0)<(0);
     if ($329) {
      label = 52;
      break;
     }
     $330 = $i;
     $331 = (($330) + 1)|0;
     $i = $331;
    }
    if ((label|0) == 52) {
     $0 = -1;
     $355 = $0;
     STACKTOP = sp;return ($355|0);
    }
    else if ((label|0) == 54) {
     $332 = $s;
     (_hio_close($332)|0);
     $333 = $1;
     $334 = ((($333)) + 1280|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = $335 | 8192;
     HEAP32[$334>>2] = $336;
     $0 = 0;
     $355 = $0;
     STACKTOP = sp;return ($355|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 40) {
  $271 = HEAP32[_stderr>>2]|0;
  $272 = $1;
  $273 = ((($272)) + 1212|0);
  $274 = HEAP32[$273>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $274;
  (_fprintf(($271|0),(7640|0),($vararg_buffer1|0))|0);
 }
 $i = 0;
 while(1) {
  $337 = $i;
  $338 = $mod;
  $339 = ((($338)) + 140|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($337|0)<($340|0);
  if (!($341)) {
   break;
  }
  $342 = $i;
  $343 = $mod;
  $344 = ((($343)) + 176|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + (($342*764)|0)|0);
  $347 = ((($346)) + 36|0);
  HEAP32[$347>>2] = 0;
  $348 = $i;
  $349 = $mod;
  $350 = ((($349)) + 180|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = (($351) + (($348*52)|0)|0);
  dest=$352; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $353 = $i;
  $354 = (($353) + 1)|0;
  $i = $354;
 }
 $0 = 0;
 $355 = $0;
 STACKTOP = sp;return ($355|0);
}
function _asylum_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,32,$4)|0);
 $6 = ($5>>>0)<(32);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,7808,32)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _asylum_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $insbuf = 0, $j = 0, $mod = 0, $note = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $insbuf = sp + 37|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_seek($7,32,1)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $11 = $mod;
 $12 = ((($11)) + 148|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $16 = $mod;
 $17 = ((($16)) + 152|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = (_hio_read8($18)|0);
 $20 = $19&255;
 $21 = $mod;
 $22 = ((($21)) + 140|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = $24&255;
 $26 = $mod;
 $27 = ((($26)) + 128|0);
 HEAP32[$27>>2] = $25;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = $29&255;
 $31 = $mod;
 $32 = ((($31)) + 156|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 (_hio_read8($33)|0);
 $34 = $mod;
 $35 = ((($34)) + 952|0);
 $36 = $mod;
 $37 = ((($36)) + 156|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $2;
 (_hio_read($35,1,$38,$39)|0);
 $40 = $2;
 $41 = $3;
 $42 = (($41) + 294)|0;
 (_hio_seek($40,$42,0)|0);
 $43 = $mod;
 $44 = ((($43)) + 136|0);
 HEAP32[$44>>2] = 8;
 $45 = $mod;
 $46 = ((($45)) + 140|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $mod;
 $49 = ((($48)) + 144|0);
 HEAP32[$49>>2] = $47;
 $50 = $mod;
 $51 = ((($50)) + 128|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $mod;
 $54 = ((($53)) + 136|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = Math_imul($52, $55)|0;
 $57 = $mod;
 $58 = ((($57)) + 132|0);
 HEAP32[$58>>2] = $56;
 $59 = $mod;
 $60 = ((($59)) + 64|0);
 (_snprintf($60,64,7776,$vararg_buffer)|0);
 $61 = $mod;
 $62 = (_instrument_init($61)|0);
 $63 = ($62|0)<(0);
 if ($63) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $i = 0;
 while(1) {
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 140|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $mod;
  $70 = $i;
  $71 = (_subinstrument_alloc($69,$70,1)|0);
  $72 = ($71|0)<(0);
  if ($72) {
   label = 6;
   break;
  }
  $73 = $2;
  (_hio_read($insbuf,1,37,$73)|0);
  $74 = $mod;
  $75 = $i;
  (_instrument_name($74,$75,$insbuf,22)|0);
  $76 = ((($insbuf)) + 22|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $78 << 4;
  $80 = $79&255;
  $81 = $80 << 24 >> 24;
  $82 = $i;
  $83 = $mod;
  $84 = ((($83)) + 176|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($82*764)|0)|0);
  $87 = ((($86)) + 756|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 16|0);
  HEAP32[$89>>2] = $81;
  $90 = ((($insbuf)) + 23|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$99>>2] = $92;
  $100 = ((($insbuf)) + 24|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101 << 24 >> 24;
  $103 = $i;
  $104 = $mod;
  $105 = ((($104)) + 176|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + (($103*764)|0)|0);
  $108 = ((($107)) + 756|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 12|0);
  HEAP32[$110>>2] = $102;
  $111 = $i;
  $112 = $mod;
  $113 = ((($112)) + 176|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + (($111*764)|0)|0);
  $116 = ((($115)) + 756|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($117)) + 8|0);
  HEAP32[$118>>2] = 128;
  $119 = $i;
  $120 = $i;
  $121 = $mod;
  $122 = ((($121)) + 176|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + (($120*764)|0)|0);
  $125 = ((($124)) + 756|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 40|0);
  HEAP32[$127>>2] = $119;
  $128 = ((($insbuf)) + 25|0);
  $129 = (_readmem32l($128)|0);
  $130 = $i;
  $131 = $mod;
  $132 = ((($131)) + 180|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($130*52)|0)|0);
  $135 = ((($134)) + 32|0);
  HEAP32[$135>>2] = $129;
  $136 = ((($insbuf)) + 29|0);
  $137 = (_readmem32l($136)|0);
  $138 = $i;
  $139 = $mod;
  $140 = ((($139)) + 180|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + (($138*52)|0)|0);
  $143 = ((($142)) + 36|0);
  HEAP32[$143>>2] = $137;
  $144 = $i;
  $145 = $mod;
  $146 = ((($145)) + 180|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + (($144*52)|0)|0);
  $149 = ((($148)) + 36|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($insbuf)) + 33|0);
  $152 = (_readmem32l($151)|0);
  $153 = (($150) + ($152))|0;
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 180|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + (($154*52)|0)|0);
  $159 = ((($158)) + 40|0);
  HEAP32[$159>>2] = $153;
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 180|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*52)|0)|0);
  $165 = ((($164)) + 40|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)>(2);
  $168 = $167 ? 2 : 0;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 44|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = (($175) + 1)|0;
  $i = $176;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $177 = $2;
 $178 = $mod;
 $179 = ((($178)) + 140|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (64 - ($180))|0;
 $182 = ($181*37)|0;
 (_hio_seek($177,$182,1)|0);
 $183 = $mod;
 $184 = (_pattern_init($183)|0);
 $185 = ($184|0)<(0);
 if ($185) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 128|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($186|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $mod;
  $192 = $i;
  $193 = (_pattern_tracks_alloc($191,$192,64)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   label = 13;
   break;
  }
  $j = 0;
  while(1) {
   $195 = $j;
   $196 = $mod;
   $197 = ((($196)) + 136|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198<<6;
   $200 = ($195|0)<($199|0);
   if (!($200)) {
    break;
   }
   $201 = $j;
   $202 = $mod;
   $203 = ((($202)) + 136|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($201|0) / ($204|0))&-1;
   $206 = $j;
   $207 = $mod;
   $208 = ((($207)) + 136|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($206|0) % ($209|0))&-1;
   $211 = $i;
   $212 = $1;
   $213 = ((($212)) + 168|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) + ($211<<2)|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($216)) + 4|0);
   $218 = (($217) + ($210<<2)|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $1;
   $221 = ((($220)) + 172|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($219<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($224)) + 4|0);
   $226 = (($225) + ($205<<3)|0);
   $event = $226;
   $227 = $event;
   ;HEAP8[$227>>0]=0|0;HEAP8[$227+1>>0]=0|0;HEAP8[$227+2>>0]=0|0;HEAP8[$227+3>>0]=0|0;HEAP8[$227+4>>0]=0|0;HEAP8[$227+5>>0]=0|0;HEAP8[$227+6>>0]=0|0;HEAP8[$227+7>>0]=0|0;
   $228 = $2;
   $229 = (_hio_read8($228)|0);
   $note = $229;
   $230 = $note;
   $231 = $230&255;
   $232 = ($231|0)!=(0);
   if ($232) {
    $233 = $note;
    $234 = $233&255;
    $235 = (($234) + 13)|0;
    $236 = $235&255;
    $237 = $event;
    HEAP8[$237>>0] = $236;
   }
   $238 = $2;
   $239 = (_hio_read8($238)|0);
   $240 = $event;
   $241 = ((($240)) + 1|0);
   HEAP8[$241>>0] = $239;
   $242 = $2;
   $243 = (_hio_read8($242)|0);
   $244 = $event;
   $245 = ((($244)) + 3|0);
   HEAP8[$245>>0] = $243;
   $246 = $2;
   $247 = (_hio_read8($246)|0);
   $248 = $event;
   $249 = ((($248)) + 4|0);
   HEAP8[$249>>0] = $247;
   $250 = $j;
   $251 = (($250) + 1)|0;
   $j = $251;
  }
  $252 = $i;
  $253 = (($252) + 1)|0;
  $i = $253;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $i = 0;
 while(1) {
  $254 = $i;
  $255 = $mod;
  $256 = ((($255)) + 140|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($254|0)<($257|0);
  if (!($258)) {
   label = 27;
   break;
  }
  $259 = $i;
  $260 = $mod;
  $261 = ((($260)) + 180|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = (($262) + (($259*52)|0)|0);
  $264 = ((($263)) + 32|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($265|0)>(1);
  if ($266) {
   $267 = $1;
   $268 = $2;
   $269 = $i;
   $270 = $mod;
   $271 = ((($270)) + 180|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + (($269*52)|0)|0);
   $274 = (_load_sample($267,$268,0,$273,0)|0);
   $275 = ($274|0)<(0);
   if ($275) {
    label = 24;
    break;
   }
   $276 = $i;
   $277 = $mod;
   $278 = ((($277)) + 176|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($279) + (($276*764)|0)|0);
   $281 = ((($280)) + 36|0);
   HEAP32[$281>>2] = 1;
  }
  $282 = $i;
  $283 = (($282) + 1)|0;
  $i = $283;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 else if ((label|0) == 27) {
  $0 = 0;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 return (0)|0;
}
function _hmn_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1080)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $magic = $8;
 $9 = $magic;
 $10 = ($9|0)!=(1178948436);
 $11 = $magic;
 $12 = ($11|0)!=(1294355233);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $1;
  $14 = $3;
  $15 = (($14) + 0)|0;
  (_hio_seek($13,$15,0)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,20);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _hmn_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $extra = 0, $i = 0, $j = 0, $k = 0, $mh = 0, $mod = 0;
 var $mod_event = 0, $mupp = 0, $mupp_index = 0, $num_mupp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 68|0;
 $mupp = sp + 1156|0;
 $mod_event = sp + 1152|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 dest=$mupp; stop=dest+124|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $7 = $2;
 (_hio_read($mh,20,1,$7)|0);
 $num_mupp = 0;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = ((($mh)) + 20|0);
  $12 = (($11) + (($10*30)|0)|0);
  $13 = $2;
  (_hio_read($12,22,1,$13)|0);
  $14 = $i;
  $15 = ((($mh)) + 20|0);
  $16 = (($15) + (($14*30)|0)|0);
  $17 = (_memcmp($16,7888,4)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $i;
   $20 = (($mupp) + ($19<<2)|0);
   HEAP8[$20>>0] = 1;
   $21 = $i;
   $22 = ((($mh)) + 20|0);
   $23 = (($22) + (($21*30)|0)|0);
   $24 = ((($23)) + 4|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $i;
   $27 = (($mupp) + ($26<<2)|0);
   $28 = ((($27)) + 1|0);
   HEAP8[$28>>0] = $25;
   $29 = $i;
   $30 = ((($mh)) + 20|0);
   $31 = (($30) + (($29*30)|0)|0);
   $32 = ((($31)) + 5|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $i;
   $35 = (($mupp) + ($34<<2)|0);
   $36 = ((($35)) + 2|0);
   HEAP8[$36>>0] = $33;
   $37 = $i;
   $38 = ((($mh)) + 20|0);
   $39 = (($38) + (($37*30)|0)|0);
   $40 = ((($39)) + 6|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $i;
   $43 = (($mupp) + ($42<<2)|0);
   $44 = ((($43)) + 3|0);
   HEAP8[$44>>0] = $41;
   $45 = $num_mupp;
   $46 = (($45) + 1)|0;
   $num_mupp = $46;
  }
  $47 = $2;
  $48 = (_hio_read16b($47)|0);
  $49 = $i;
  $50 = ((($mh)) + 20|0);
  $51 = (($50) + (($49*30)|0)|0);
  $52 = ((($51)) + 22|0);
  HEAP16[$52>>1] = $48;
  $53 = $2;
  $54 = (_hio_read8($53)|0);
  $55 = $i;
  $56 = ((($mh)) + 20|0);
  $57 = (($56) + (($55*30)|0)|0);
  $58 = ((($57)) + 24|0);
  HEAP8[$58>>0] = $54;
  $59 = $2;
  $60 = (_hio_read8($59)|0);
  $61 = $i;
  $62 = ((($mh)) + 20|0);
  $63 = (($62) + (($61*30)|0)|0);
  $64 = ((($63)) + 25|0);
  HEAP8[$64>>0] = $60;
  $65 = $2;
  $66 = (_hio_read16b($65)|0);
  $67 = $i;
  $68 = ((($mh)) + 20|0);
  $69 = (($68) + (($67*30)|0)|0);
  $70 = ((($69)) + 26|0);
  HEAP16[$70>>1] = $66;
  $71 = $2;
  $72 = (_hio_read16b($71)|0);
  $73 = $i;
  $74 = ((($mh)) + 20|0);
  $75 = (($74) + (($73*30)|0)|0);
  $76 = ((($75)) + 28|0);
  HEAP16[$76>>1] = $72;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 $79 = $2;
 $80 = (_hio_read8($79)|0);
 $81 = ((($mh)) + 950|0);
 HEAP8[$81>>0] = $80;
 $82 = $2;
 $83 = (_hio_read8($82)|0);
 $84 = ((($mh)) + 951|0);
 HEAP8[$84>>0] = $83;
 $85 = ((($mh)) + 952|0);
 $86 = $2;
 (_hio_read($85,128,1,$86)|0);
 $87 = ((($mh)) + 1080|0);
 $88 = $2;
 (_hio_read($87,4,1,$88)|0);
 $89 = $mod;
 $90 = ((($89)) + 136|0);
 HEAP32[$90>>2] = 4;
 $91 = $mod;
 $92 = ((($91)) + 140|0);
 HEAP32[$92>>2] = 31;
 $93 = $mod;
 $94 = ((($93)) + 140|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $num_mupp;
 $97 = ($96*28)|0;
 $98 = (($95) + ($97))|0;
 $99 = $mod;
 $100 = ((($99)) + 144|0);
 HEAP32[$100>>2] = $98;
 $101 = ((($mh)) + 950|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $mod;
 $105 = ((($104)) + 156|0);
 HEAP32[$105>>2] = $103;
 $106 = ((($mh)) + 951|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $mod;
 $110 = ((($109)) + 160|0);
 HEAP32[$110>>2] = $108;
 $111 = $mod;
 $112 = ((($111)) + 952|0);
 $113 = ((($mh)) + 952|0);
 dest=$112; src=$113; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $114 = $i;
  $115 = ($114|0)<(128);
  if (!($115)) {
   break;
  }
  $116 = $i;
  $117 = $mod;
  $118 = ((($117)) + 952|0);
  $119 = (($118) + ($116)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $mod;
  $123 = ((($122)) + 128|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($121|0)>($124|0);
  if ($125) {
   $126 = $i;
   $127 = $mod;
   $128 = ((($127)) + 952|0);
   $129 = (($128) + ($126)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $mod;
   $133 = ((($132)) + 128|0);
   HEAP32[$133>>2] = $131;
  }
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 $136 = $mod;
 $137 = ((($136)) + 128|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) + 1)|0;
 HEAP32[$137>>2] = $139;
 $140 = $mod;
 $141 = ((($140)) + 136|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $mod;
 $144 = ((($143)) + 128|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = Math_imul($142, $145)|0;
 $147 = $mod;
 $148 = ((($147)) + 132|0);
 HEAP32[$148>>2] = $146;
 $149 = $1;
 $150 = (_hmn_new_module_extras($149)|0);
 $151 = ($150|0)!=(0);
 if ($151) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $152 = $mod;
 (_strncpy(($152|0),($mh|0),20)|0);
 $153 = $1;
 $154 = ((($mh)) + 1080|0);
 HEAP32[$vararg_buffer>>2] = 7864;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $154;
 _set_type($153,7896,$vararg_buffer);
 $155 = $mod;
 $156 = (_instrument_init($155)|0);
 $157 = ($156|0)<(0);
 if ($157) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $i = 0;
 while(1) {
  $158 = $i;
  $159 = $mod;
  $160 = ((($159)) + 140|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($158|0)<($161|0);
  if (!($162)) {
   label = 27;
   break;
  }
  $163 = $i;
  $164 = (($mupp) + ($163<<2)|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = ($165<<24>>24)!=(0);
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 176|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*764)|0)|0);
  $172 = ((($171)) + 36|0);
  if ($166) {
   HEAP32[$172>>2] = 28;
   $173 = $i;
   $174 = $mod;
   $175 = ((($174)) + 176|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + (($173*764)|0)|0);
   $178 = $i;
   $179 = (($mupp) + ($178<<2)|0);
   $180 = ((($179)) + 1|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = $i;
   $184 = (($mupp) + ($183<<2)|0);
   $185 = ((($184)) + 2|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = $i;
   $189 = (($mupp) + ($188<<2)|0);
   $190 = ((($189)) + 3|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   HEAP32[$vararg_buffer2>>2] = $182;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $187;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $192;
   (_snprintf($177,32,7912,$vararg_buffer2)|0);
   $193 = $i;
   $194 = $mod;
   $195 = ((($194)) + 176|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($196) + (($193*764)|0)|0);
   $198 = (_hmn_new_instrument_extras($197)|0);
   $199 = ($198|0)!=(0);
   if ($199) {
    label = 19;
    break;
   }
  } else {
   HEAP32[$172>>2] = 1;
   $200 = $mod;
   $201 = $i;
   $202 = $i;
   $203 = ((($mh)) + 20|0);
   $204 = (($203) + (($202*30)|0)|0);
   (_instrument_name($200,$201,$204,22)|0);
   $205 = $i;
   $206 = ((($mh)) + 20|0);
   $207 = (($206) + (($205*30)|0)|0);
   $208 = ((($207)) + 22|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209&65535;
   $211 = $210<<1;
   $212 = $i;
   $213 = $mod;
   $214 = ((($213)) + 180|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + (($212*52)|0)|0);
   $217 = ((($216)) + 32|0);
   HEAP32[$217>>2] = $211;
   $218 = $i;
   $219 = ((($mh)) + 20|0);
   $220 = (($219) + (($218*30)|0)|0);
   $221 = ((($220)) + 26|0);
   $222 = HEAP16[$221>>1]|0;
   $223 = $222&65535;
   $224 = $223<<1;
   $225 = $i;
   $226 = $mod;
   $227 = ((($226)) + 180|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = (($228) + (($225*52)|0)|0);
   $230 = ((($229)) + 36|0);
   HEAP32[$230>>2] = $224;
   $231 = $i;
   $232 = $mod;
   $233 = ((($232)) + 180|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = (($234) + (($231*52)|0)|0);
   $236 = ((($235)) + 36|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = $i;
   $239 = ((($mh)) + 20|0);
   $240 = (($239) + (($238*30)|0)|0);
   $241 = ((($240)) + 28|0);
   $242 = HEAP16[$241>>1]|0;
   $243 = $242&65535;
   $244 = $243<<1;
   $245 = (($237) + ($244))|0;
   $246 = $i;
   $247 = $mod;
   $248 = ((($247)) + 180|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($249) + (($246*52)|0)|0);
   $251 = ((($250)) + 40|0);
   HEAP32[$251>>2] = $245;
   $252 = $i;
   $253 = ((($mh)) + 20|0);
   $254 = (($253) + (($252*30)|0)|0);
   $255 = ((($254)) + 28|0);
   $256 = HEAP16[$255>>1]|0;
   $257 = $256&65535;
   $258 = ($257|0)>(1);
   $259 = $258 ? 2 : 0;
   $260 = $i;
   $261 = $mod;
   $262 = ((($261)) + 180|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = (($263) + (($260*52)|0)|0);
   $265 = ((($264)) + 44|0);
   HEAP32[$265>>2] = $259;
  }
  $266 = $mod;
  $267 = $i;
  $268 = $i;
  $269 = $mod;
  $270 = ((($269)) + 176|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($271) + (($268*764)|0)|0);
  $273 = ((($272)) + 36|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (_subinstrument_alloc($266,$267,$274)|0);
  $276 = ($275|0)<(0);
  if ($276) {
   label = 22;
   break;
  }
  $j = 0;
  while(1) {
   $277 = $j;
   $278 = $i;
   $279 = $mod;
   $280 = ((($279)) + 176|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + (($278*764)|0)|0);
   $283 = ((($282)) + 36|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ($277|0)<($284|0);
   $286 = $i;
   if (!($285)) {
    break;
   }
   $287 = ((($mh)) + 20|0);
   $288 = (($287) + (($286*30)|0)|0);
   $289 = ((($288)) + 24|0);
   $290 = HEAP8[$289>>0]|0;
   $291 = $290 << 24 >> 24;
   $292 = $291 << 3;
   $293 = $292&255;
   $294 = $293 << 24 >> 24;
   $295 = (0 - ($294))|0;
   $296 = $j;
   $297 = $i;
   $298 = $mod;
   $299 = ((($298)) + 176|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (($300) + (($297*764)|0)|0);
   $302 = ((($301)) + 756|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($296<<6)|0);
   $305 = ((($304)) + 16|0);
   HEAP32[$305>>2] = $295;
   $306 = $i;
   $307 = ((($mh)) + 20|0);
   $308 = (($307) + (($306*30)|0)|0);
   $309 = ((($308)) + 25|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = $310 << 24 >> 24;
   $312 = $j;
   $313 = $i;
   $314 = $mod;
   $315 = ((($314)) + 176|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (($316) + (($313*764)|0)|0);
   $318 = ((($317)) + 756|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + ($312<<6)|0);
   HEAP32[$320>>2] = $311;
   $321 = $j;
   $322 = $i;
   $323 = $mod;
   $324 = ((($323)) + 176|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($325) + (($322*764)|0)|0);
   $327 = ((($326)) + 756|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = (($328) + ($321<<6)|0);
   $330 = ((($329)) + 8|0);
   HEAP32[$330>>2] = 128;
   $331 = $i;
   $332 = $j;
   $333 = $i;
   $334 = $mod;
   $335 = ((($334)) + 176|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = (($336) + (($333*764)|0)|0);
   $338 = ((($337)) + 756|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = (($339) + ($332<<6)|0);
   $341 = ((($340)) + 40|0);
   HEAP32[$341>>2] = $331;
   $342 = $j;
   $343 = (($342) + 1)|0;
   $j = $343;
  }
  $344 = (($286) + 1)|0;
  $i = $344;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 else if ((label|0) == 22) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 else if ((label|0) == 27) {
  $345 = $mod;
  $346 = (_pattern_init($345)|0);
  $347 = ($346|0)<(0);
  if ($347) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  $i = 0;
  while(1) {
   $348 = $i;
   $349 = $mod;
   $350 = ((($349)) + 128|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ($348|0)<($351|0);
   if (!($352)) {
    break;
   }
   $353 = $mod;
   $354 = $i;
   $355 = (_pattern_tracks_alloc($353,$354,64)|0);
   $356 = ($355|0)<(0);
   if ($356) {
    label = 32;
    break;
   }
   $j = 0;
   while(1) {
    $357 = $j;
    $358 = ($357|0)<(256);
    if (!($358)) {
     break;
    }
    $359 = $j;
    $360 = (($359|0) / 4)&-1;
    $361 = $j;
    $362 = (($361|0) % 4)&-1;
    $363 = $i;
    $364 = $1;
    $365 = ((($364)) + 168|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + ($363<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ((($368)) + 4|0);
    $370 = (($369) + ($362<<2)|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = $1;
    $373 = ((($372)) + 172|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = (($374) + ($371<<2)|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ((($376)) + 4|0);
    $378 = (($377) + ($360<<3)|0);
    $event = $378;
    $379 = $2;
    (_hio_read($mod_event,1,4,$379)|0);
    $380 = $event;
    _decode_protracker_event($380,$mod_event);
    $381 = $event;
    $382 = ((($381)) + 3|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $383&255;
    if ((($384|0) == 7)) {
     $385 = $event;
     $386 = ((($385)) + 3|0);
     HEAP8[$386>>0] = -78;
    } else if ((($384|0) == 14) | (($384|0) == 9) | (($384|0) == 8)) {
     $387 = $event;
     $388 = ((($387)) + 4|0);
     HEAP8[$388>>0] = 0;
     $389 = $event;
     $390 = ((($389)) + 3|0);
     HEAP8[$390>>0] = 0;
    }
    $391 = $j;
    $392 = (($391) + 1)|0;
    $j = $392;
   }
   $393 = $i;
   $394 = (($393) + 1)|0;
   $i = $394;
  }
  if ((label|0) == 32) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  $395 = $1;
  $396 = ((($395)) + 1280|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = $397 | 8192;
  HEAP32[$396>>2] = $398;
  $i = 0;
  while(1) {
   $399 = $i;
   $400 = ($399|0)<(31);
   if (!($400)) {
    break;
   }
   $401 = $1;
   $402 = $2;
   $403 = $i;
   $404 = $mod;
   $405 = ((($404)) + 180|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = (($406) + (($403*52)|0)|0);
   $408 = (_load_sample($401,$402,512,$407,0)|0);
   $409 = ($408|0)<(0);
   if ($409) {
    label = 43;
    break;
   }
   $410 = $i;
   $411 = (($410) + 1)|0;
   $i = $411;
  }
  if ((label|0) == 43) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  $mupp_index = 0;
  $i = 0;
  L67: while(1) {
   $412 = $i;
   $413 = ($412|0)<(31);
   if (!($413)) {
    label = 55;
    break;
   }
   $414 = $i;
   $415 = $mod;
   $416 = ((($415)) + 176|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (($417) + (($414*764)|0)|0);
   $419 = ((($418)) + 760|0);
   $420 = HEAP32[$419>>2]|0;
   $extra = $420;
   $421 = $i;
   $422 = (($mupp) + ($421<<2)|0);
   $423 = HEAP8[$422>>0]|0;
   $424 = ($423<<24>>24)!=(0);
   if ($424) {
    $425 = $2;
    $426 = $3;
    $427 = (($426) + 1084)|0;
    $428 = $i;
    $429 = (($mupp) + ($428<<2)|0);
    $430 = ((($429)) + 1|0);
    $431 = HEAP8[$430>>0]|0;
    $432 = $431&255;
    $433 = $432<<10;
    $434 = (($427) + ($433))|0;
    (_hio_seek($425,$434,0)|0);
    $j = 0;
    while(1) {
     $435 = $j;
     $436 = ($435|0)<(28);
     if (!($436)) {
      break;
     }
     $437 = $mupp_index;
     $438 = ($437*28)|0;
     $439 = (31 + ($438))|0;
     $440 = $j;
     $441 = (($439) + ($440))|0;
     $k = $441;
     $442 = $k;
     $443 = $j;
     $444 = $i;
     $445 = $mod;
     $446 = ((($445)) + 176|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = (($447) + (($444*764)|0)|0);
     $449 = ((($448)) + 756|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = (($450) + ($443<<6)|0);
     $452 = ((($451)) + 40|0);
     HEAP32[$452>>2] = $442;
     $453 = $k;
     $454 = $mod;
     $455 = ((($454)) + 180|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = (($456) + (($453*52)|0)|0);
     $458 = ((($457)) + 32|0);
     HEAP32[$458>>2] = 32;
     $459 = $k;
     $460 = $mod;
     $461 = ((($460)) + 180|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = (($462) + (($459*52)|0)|0);
     $464 = ((($463)) + 36|0);
     HEAP32[$464>>2] = 0;
     $465 = $k;
     $466 = $mod;
     $467 = ((($466)) + 180|0);
     $468 = HEAP32[$467>>2]|0;
     $469 = (($468) + (($465*52)|0)|0);
     $470 = ((($469)) + 40|0);
     HEAP32[$470>>2] = 32;
     $471 = $k;
     $472 = $mod;
     $473 = ((($472)) + 180|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = (($474) + (($471*52)|0)|0);
     $476 = ((($475)) + 44|0);
     HEAP32[$476>>2] = 2;
     $477 = $1;
     $478 = $2;
     $479 = $k;
     $480 = $mod;
     $481 = ((($480)) + 180|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = (($482) + (($479*52)|0)|0);
     $484 = (_load_sample($477,$478,0,$483,0)|0);
     $485 = ($484|0)<(0);
     if ($485) {
      label = 51;
      break L67;
     }
     $486 = $j;
     $487 = (($486) + 1)|0;
     $j = $487;
    }
    $488 = $i;
    $489 = (($mupp) + ($488<<2)|0);
    $490 = ((($489)) + 2|0);
    $491 = HEAP8[$490>>0]|0;
    $492 = $491&255;
    $493 = $extra;
    $494 = ((($493)) + 4|0);
    HEAP32[$494>>2] = $492;
    $495 = $i;
    $496 = (($mupp) + ($495<<2)|0);
    $497 = ((($496)) + 3|0);
    $498 = HEAP8[$497>>0]|0;
    $499 = $498&255;
    $500 = $extra;
    $501 = ((($500)) + 8|0);
    HEAP32[$501>>2] = $499;
    $502 = $extra;
    $503 = ((($502)) + 12|0);
    $504 = $2;
    (_hio_read($503,1,64,$504)|0);
    $505 = $extra;
    $506 = ((($505)) + 76|0);
    $507 = $2;
    (_hio_read($506,1,64,$507)|0);
    $508 = $mupp_index;
    $509 = (($508) + 1)|0;
    $mupp_index = $509;
   }
   $510 = $i;
   $511 = (($510) + 1)|0;
   $i = $511;
  }
  if ((label|0) == 51) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  else if ((label|0) == 55) {
   $0 = 0;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
 }
 return (0)|0;
}
function _mgt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $sng_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read24b($4)|0);
 $6 = ($5|0)!=(5064532);
 if ($6) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $7 = $1;
 (_hio_read8($7)|0);
 $8 = $1;
 $9 = (_hio_read32b($8)|0);
 $10 = ($9|0)!=(-1119009965);
 if ($10) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = $1;
  (_hio_seek($11,18,1)|0);
  $12 = $1;
  $13 = (_hio_read32b($12)|0);
  $sng_ptr = $13;
  $14 = $1;
  $15 = $3;
  $16 = $sng_ptr;
  $17 = (($15) + ($16))|0;
  (_hio_seek($14,$17,0)|0);
  $18 = $1;
  $19 = $2;
  _read_title($18,$19,32);
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _mgt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $b = 0, $c2spd = 0, $event = 0, $f2p = 0, $flags = 0, $i = 0, $ins_ptr = 0, $j = 0, $mod = 0, $note = 0, $offset = 0, $pat_ptr = 0, $rows = 0, $sdata = 0, $seq_ptr = 0, $smp_ptr = 0, $sng_ptr = 0;
 var $trk_ptr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sdata = sp + 24|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read24b($7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $ver = $10;
 $11 = $2;
 (_hio_read32b($11)|0);
 $12 = $1;
 $13 = $ver;
 $14 = $13 & 240;
 $15 = $14 >> 4;
 $16 = $ver;
 $17 = $16 & 15;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 _set_type($12,7968,$vararg_buffer);
 $18 = $2;
 $19 = (_hio_read16b($18)|0);
 $20 = $19&65535;
 $21 = $mod;
 $22 = ((($21)) + 136|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 (_hio_read16b($23)|0);
 $24 = $2;
 $25 = (_hio_read16b($24)|0);
 $26 = $25&65535;
 $27 = $mod;
 $28 = ((($27)) + 156|0);
 HEAP32[$28>>2] = $26;
 $29 = $2;
 $30 = (_hio_read16b($29)|0);
 $31 = $30&65535;
 $32 = $mod;
 $33 = ((($32)) + 128|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 $35 = (_hio_read16b($34)|0);
 $36 = $35&65535;
 $37 = $mod;
 $38 = ((($37)) + 132|0);
 HEAP32[$38>>2] = $36;
 $39 = $2;
 $40 = (_hio_read16b($39)|0);
 $41 = $40&65535;
 $42 = $mod;
 $43 = ((($42)) + 144|0);
 HEAP32[$43>>2] = $41;
 $44 = $mod;
 $45 = ((($44)) + 140|0);
 HEAP32[$45>>2] = $41;
 $46 = $2;
 (_hio_read16b($46)|0);
 $47 = $2;
 (_hio_read32b($47)|0);
 $48 = $2;
 $49 = (_hio_read32b($48)|0);
 $sng_ptr = $49;
 $50 = $2;
 $51 = (_hio_read32b($50)|0);
 $seq_ptr = $51;
 $52 = $2;
 $53 = (_hio_read32b($52)|0);
 $ins_ptr = $53;
 $54 = $2;
 $55 = (_hio_read32b($54)|0);
 $pat_ptr = $55;
 $56 = $2;
 $57 = (_hio_read32b($56)|0);
 $trk_ptr = $57;
 $58 = $2;
 $59 = (_hio_read32b($58)|0);
 $smp_ptr = $59;
 $60 = $2;
 (_hio_read32b($60)|0);
 $61 = $2;
 (_hio_read32b($61)|0);
 $62 = $2;
 $63 = $3;
 $64 = $sng_ptr;
 $65 = (($63) + ($64))|0;
 (_hio_seek($62,$65,0)|0);
 $66 = $mod;
 $67 = $2;
 (_hio_read($66,1,32,$67)|0);
 $68 = $2;
 $69 = (_hio_read32b($68)|0);
 $seq_ptr = $69;
 $70 = $2;
 $71 = (_hio_read16b($70)|0);
 $72 = $71&65535;
 $73 = $mod;
 $74 = ((($73)) + 156|0);
 HEAP32[$74>>2] = $72;
 $75 = $2;
 $76 = (_hio_read16b($75)|0);
 $77 = $76&65535;
 $78 = $mod;
 $79 = ((($78)) + 160|0);
 HEAP32[$79>>2] = $77;
 $80 = $2;
 $81 = (_hio_read8($80)|0);
 $82 = $81&255;
 $83 = $mod;
 $84 = ((($83)) + 152|0);
 HEAP32[$84>>2] = $82;
 $85 = $2;
 $86 = (_hio_read8($85)|0);
 $87 = $86&255;
 $88 = $mod;
 $89 = ((($88)) + 148|0);
 HEAP32[$89>>2] = $87;
 $90 = $2;
 (_hio_read16b($90)|0);
 $91 = $2;
 (_hio_read8($91)|0);
 $92 = $2;
 (_hio_read8($92)|0);
 $i = 0;
 while(1) {
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 136|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($93|0)<($96|0);
  $98 = $2;
  if (!($97)) {
   break;
  }
  (_hio_read16b($98)|0);
  $99 = $i;
  $100 = (($99) + 1)|0;
  $i = $100;
 }
 $101 = $3;
 $102 = $seq_ptr;
 $103 = (($101) + ($102))|0;
 (_hio_seek($98,$103,0)|0);
 $i = 0;
 while(1) {
  $104 = $i;
  $105 = $mod;
  $106 = ((($105)) + 156|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($104|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $2;
  $110 = (_hio_read16b($109)|0);
  $111 = $110&255;
  $112 = $i;
  $113 = $mod;
  $114 = ((($113)) + 952|0);
  $115 = (($114) + ($112)|0);
  HEAP8[$115>>0] = $111;
  $116 = $i;
  $117 = (($116) + 1)|0;
  $i = $117;
 }
 $118 = $mod;
 $119 = (_instrument_init($118)|0);
 $120 = ($119|0)<(0);
 if ($120) {
  $0 = -1;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 $121 = $2;
 $122 = $3;
 $123 = $ins_ptr;
 $124 = (($122) + ($123))|0;
 (_hio_seek($121,$124,0)|0);
 $i = 0;
 while(1) {
  $125 = $i;
  $126 = $mod;
  $127 = ((($126)) + 140|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($125|0)<($128|0);
  $130 = $mod;
  if (!($129)) {
   break;
  }
  $131 = $i;
  $132 = (_subinstrument_alloc($130,$131,1)|0);
  $133 = ($132|0)<(0);
  if ($133) {
   label = 12;
   break;
  }
  $134 = $i;
  $135 = $mod;
  $136 = ((($135)) + 176|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($137) + (($134*764)|0)|0);
  $139 = $2;
  (_hio_read($138,1,32,$139)|0);
  $140 = $2;
  $141 = (_hio_read32b($140)|0);
  $142 = $i;
  $143 = (($sdata) + ($142<<2)|0);
  HEAP32[$143>>2] = $141;
  $144 = $2;
  $145 = (_hio_read32b($144)|0);
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 180|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + (($146*52)|0)|0);
  $151 = ((($150)) + 32|0);
  HEAP32[$151>>2] = $145;
  $152 = $2;
  $153 = (_hio_read32b($152)|0);
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 180|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + (($154*52)|0)|0);
  $159 = ((($158)) + 36|0);
  HEAP32[$159>>2] = $153;
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 180|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*52)|0)|0);
  $165 = ((($164)) + 36|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $2;
  $168 = (_hio_read32b($167)|0);
  $169 = (($166) + ($168))|0;
  $170 = $i;
  $171 = $mod;
  $172 = ((($171)) + 180|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + (($170*52)|0)|0);
  $175 = ((($174)) + 40|0);
  HEAP32[$175>>2] = $169;
  $176 = $2;
  (_hio_read32b($176)|0);
  $177 = $2;
  (_hio_read32b($177)|0);
  $178 = $2;
  $179 = (_hio_read32b($178)|0);
  $c2spd = $179;
  $180 = $c2spd;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 176|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*764)|0)|0);
  $186 = ((($185)) + 756|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ((($187)) + 12|0);
  $189 = $i;
  $190 = $mod;
  $191 = ((($190)) + 176|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($192) + (($189*764)|0)|0);
  $194 = ((($193)) + 756|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ((($195)) + 16|0);
  _c2spd_to_note($180,$188,$196);
  $197 = $2;
  $198 = (_hio_read16b($197)|0);
  $199 = $198&65535;
  $200 = $199 >> 4;
  $201 = $i;
  $202 = $mod;
  $203 = ((($202)) + 176|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = (($204) + (($201*764)|0)|0);
  $206 = ((($205)) + 756|0);
  $207 = HEAP32[$206>>2]|0;
  HEAP32[$207>>2] = $200;
  $208 = $2;
  (_hio_read8($208)|0);
  $209 = $2;
  (_hio_read8($209)|0);
  $210 = $i;
  $211 = $mod;
  $212 = ((($211)) + 176|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($210*764)|0)|0);
  $215 = ((($214)) + 756|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 8|0);
  HEAP32[$217>>2] = 128;
  $218 = $2;
  $219 = (_hio_read8($218)|0);
  $220 = $219&255;
  $flags = $220;
  $221 = $flags;
  $222 = $221 & 3;
  $223 = ($222|0)!=(0);
  $224 = $223 ? 2 : 0;
  $225 = $i;
  $226 = $mod;
  $227 = ((($226)) + 180|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($228) + (($225*52)|0)|0);
  $230 = ((($229)) + 44|0);
  HEAP32[$230>>2] = $224;
  $231 = $flags;
  $232 = $231 & 2;
  $233 = ($232|0)!=(0);
  $234 = $233 ? 4 : 0;
  $235 = $i;
  $236 = $mod;
  $237 = ((($236)) + 180|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($238) + (($235*52)|0)|0);
  $240 = ((($239)) + 44|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $241 | $234;
  HEAP32[$240>>2] = $242;
  $243 = $2;
  $244 = (_hio_read8($243)|0);
  $245 = $244&255;
  $246 = 0;
  $247 = $i;
  $248 = $mod;
  $249 = ((($248)) + 176|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($250) + (($247*764)|0)|0);
  $252 = ((($251)) + 756|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = ((($253)) + 16|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (($255) + ($246))|0;
  HEAP32[$254>>2] = $256;
  $257 = $2;
  (_hio_read8($257)|0);
  $258 = $2;
  (_hio_read8($258)|0);
  $259 = $2;
  (_hio_read8($259)|0);
  $260 = $2;
  (_hio_read8($260)|0);
  $261 = $2;
  (_hio_read16b($261)|0);
  $262 = $2;
  (_hio_read32b($262)|0);
  $263 = $2;
  (_hio_read32b($263)|0);
  $264 = $i;
  $265 = $mod;
  $266 = ((($265)) + 180|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = (($267) + (($264*52)|0)|0);
  $269 = ((($268)) + 32|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)!=(0);
  $272 = $271 ^ 1;
  $273 = $272 ^ 1;
  $274 = $273&1;
  $275 = $i;
  $276 = $mod;
  $277 = ((($276)) + 176|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = (($278) + (($275*764)|0)|0);
  $280 = ((($279)) + 36|0);
  HEAP32[$280>>2] = $274;
  $281 = $i;
  $282 = $i;
  $283 = $mod;
  $284 = ((($283)) + 176|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($285) + (($282*764)|0)|0);
  $287 = ((($286)) + 756|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ((($288)) + 40|0);
  HEAP32[$289>>2] = $281;
  $290 = $i;
  $291 = (($290) + 1)|0;
  $i = $291;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 $292 = (_pattern_init($130)|0);
 $293 = ($292|0)<(0);
 if ($293) {
  $0 = -1;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 $i = 1;
 while(1) {
  $294 = $i;
  $295 = $mod;
  $296 = ((($295)) + 132|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ($294|0)<($297|0);
  if (!($298)) {
   break;
  }
  $299 = $2;
  $300 = $3;
  $301 = $trk_ptr;
  $302 = (($300) + ($301))|0;
  $303 = $i;
  $304 = $303<<2;
  $305 = (($302) + ($304))|0;
  (_hio_seek($299,$305,0)|0);
  $306 = $2;
  $307 = (_hio_read32b($306)|0);
  $offset = $307;
  $308 = $2;
  $309 = $3;
  $310 = $offset;
  $311 = (($309) + ($310))|0;
  (_hio_seek($308,$311,0)|0);
  $312 = $2;
  $313 = (_hio_read16b($312)|0);
  $314 = $313&65535;
  $rows = $314;
  $315 = $mod;
  $316 = $i;
  $317 = $rows;
  $318 = (_track_alloc($315,$316,$317)|0);
  $319 = ($318|0)<(0);
  if ($319) {
   label = 19;
   break;
  }
  $j = 0;
  while(1) {
   $320 = $j;
   $321 = $rows;
   $322 = ($320|0)<($321|0);
   if (!($322)) {
    break;
   }
   $323 = $2;
   $324 = (_hio_read8($323)|0);
   $b = $324;
   $325 = $b;
   $326 = $325&255;
   $327 = $326 & 3;
   $328 = $j;
   $329 = (($328) + ($327))|0;
   $j = $329;
   $note = 0;
   $330 = $j;
   $331 = $i;
   $332 = $mod;
   $333 = ((($332)) + 172|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (($334) + ($331<<2)|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = ((($336)) + 4|0);
   $338 = (($337) + ($330<<3)|0);
   $event = $338;
   $339 = $b;
   $340 = $339&255;
   $341 = $340 & 4;
   $342 = ($341|0)!=(0);
   if ($342) {
    $343 = $2;
    $344 = (_hio_read8($343)|0);
    $note = $344;
   }
   $345 = $b;
   $346 = $345&255;
   $347 = $346 & 8;
   $348 = ($347|0)!=(0);
   if ($348) {
    $349 = $2;
    $350 = (_hio_read8($349)|0);
    $351 = $event;
    $352 = ((($351)) + 1|0);
    HEAP8[$352>>0] = $350;
   }
   $353 = $b;
   $354 = $353&255;
   $355 = $354 & 16;
   $356 = ($355|0)!=(0);
   if ($356) {
    $357 = $2;
    $358 = (_hio_read8($357)|0);
    $359 = $event;
    $360 = ((($359)) + 2|0);
    HEAP8[$360>>0] = $358;
   }
   $361 = $b;
   $362 = $361&255;
   $363 = $362 & 32;
   $364 = ($363|0)!=(0);
   if ($364) {
    $365 = $2;
    $366 = (_hio_read8($365)|0);
    $367 = $event;
    $368 = ((($367)) + 3|0);
    HEAP8[$368>>0] = $366;
   }
   $369 = $b;
   $370 = $369&255;
   $371 = $370 & 64;
   $372 = ($371|0)!=(0);
   if ($372) {
    $373 = $2;
    $374 = (_hio_read8($373)|0);
    $375 = $event;
    $376 = ((($375)) + 4|0);
    HEAP8[$376>>0] = $374;
   }
   $377 = $b;
   $378 = $377&255;
   $379 = $378 & 128;
   $380 = ($379|0)!=(0);
   if ($380) {
    $381 = $2;
    $382 = (_hio_read8($381)|0);
    $f2p = $382;
   }
   $383 = $note;
   $384 = $383&255;
   $385 = ($384|0)==(1);
   if ($385) {
    $386 = $event;
    HEAP8[$386>>0] = -127;
   } else {
    $387 = $note;
    $388 = $387&255;
    $389 = ($388|0)>(11);
    if ($389) {
     $390 = $note;
     $391 = $390&255;
     $392 = (($391) + 1)|0;
     $393 = $392&255;
     $394 = $event;
     HEAP8[$394>>0] = $393;
    }
   }
   $395 = $event;
   $396 = ((($395)) + 3|0);
   $397 = HEAP8[$396>>0]|0;
   $398 = $397&255;
   $399 = ($398|0)<(16);
   L55: do {
    if (!($399)) {
     $400 = $event;
     $401 = ((($400)) + 3|0);
     $402 = HEAP8[$401>>0]|0;
     $403 = $402&255;
     switch ($403|0) {
     case 30: case 29: case 28: case 23: case 21: case 20: case 19:  {
      $404 = $event;
      $405 = ((($404)) + 3|0);
      HEAP8[$405>>0] = 14;
      $406 = $event;
      $407 = ((($406)) + 3|0);
      $408 = HEAP8[$407>>0]|0;
      $409 = $408&255;
      $410 = $409 & 15;
      $411 = $410 << 4;
      $412 = $event;
      $413 = ((($412)) + 4|0);
      $414 = HEAP8[$413>>0]|0;
      $415 = $414&255;
      $416 = $415 & 15;
      $417 = $411 | $416;
      $418 = $417&255;
      $419 = $event;
      $420 = ((($419)) + 4|0);
      HEAP8[$420>>0] = $418;
      break L55;
      break;
     }
     default: {
      $421 = $event;
      $422 = ((($421)) + 4|0);
      HEAP8[$422>>0] = 0;
      $423 = $event;
      $424 = ((($423)) + 3|0);
      HEAP8[$424>>0] = 0;
      break L55;
     }
     }
    }
   } while(0);
   $425 = $event;
   $426 = ((($425)) + 2|0);
   $427 = HEAP8[$426>>0]|0;
   $428 = $427&255;
   $429 = ($428|0)>=(16);
   if ($429) {
    $430 = $event;
    $431 = ((($430)) + 2|0);
    $432 = HEAP8[$431>>0]|0;
    $433 = $432&255;
    $434 = ($433|0)<=(80);
    if ($434) {
     $435 = $event;
     $436 = ((($435)) + 2|0);
     $437 = HEAP8[$436>>0]|0;
     $438 = $437&255;
     $439 = (($438) - 15)|0;
     $440 = $439&255;
     HEAP8[$436>>0] = $440;
    } else {
     label = 45;
    }
   } else {
    label = 45;
   }
   if ((label|0) == 45) {
    label = 0;
    $441 = $event;
    $442 = ((($441)) + 2|0);
    $443 = HEAP8[$442>>0]|0;
    $444 = $443&255;
    $445 = $444 >> 4;
    do {
     switch ($445|0) {
     case 10:  {
      $489 = $event;
      $490 = ((($489)) + 5|0);
      HEAP8[$490>>0] = 4;
      $491 = $event;
      $492 = ((($491)) + 2|0);
      $493 = HEAP8[$492>>0]|0;
      $494 = $493&255;
      $495 = (($494) - 160)|0;
      $496 = $495 << 4;
      $497 = $496&255;
      $498 = $event;
      $499 = ((($498)) + 6|0);
      HEAP8[$499>>0] = $497;
      break;
     }
     case 15:  {
      $543 = $event;
      $544 = ((($543)) + 5|0);
      HEAP8[$544>>0] = 3;
      $545 = $event;
      $546 = ((($545)) + 2|0);
      $547 = HEAP8[$546>>0]|0;
      $548 = $547&255;
      $549 = (($548) - 240)|0;
      $550 = $549 << 4;
      $551 = $550&255;
      $552 = $event;
      $553 = ((($552)) + 6|0);
      HEAP8[$553>>0] = $551;
      break;
     }
     case 12:  {
      $510 = $event;
      $511 = ((($510)) + 5|0);
      HEAP8[$511>>0] = 8;
      $512 = $event;
      $513 = ((($512)) + 2|0);
      $514 = HEAP8[$513>>0]|0;
      $515 = $514&255;
      $516 = (($515) - 192)|0;
      $517 = $516 << 4;
      $518 = (($517) + 8)|0;
      $519 = $518&255;
      $520 = $event;
      $521 = ((($520)) + 6|0);
      HEAP8[$521>>0] = $519;
      break;
     }
     case 7:  {
      $456 = $event;
      $457 = ((($456)) + 5|0);
      HEAP8[$457>>0] = -92;
      $458 = $event;
      $459 = ((($458)) + 2|0);
      $460 = HEAP8[$459>>0]|0;
      $461 = $460&255;
      $462 = (($461) - 112)|0;
      $463 = $462 << 4;
      $464 = $463&255;
      $465 = $event;
      $466 = ((($465)) + 6|0);
      HEAP8[$466>>0] = $464;
      break;
     }
     case 14:  {
      $533 = $event;
      $534 = ((($533)) + 5|0);
      HEAP8[$534>>0] = 25;
      $535 = $event;
      $536 = ((($535)) + 2|0);
      $537 = HEAP8[$536>>0]|0;
      $538 = $537&255;
      $539 = (($538) - 224)|0;
      $540 = $539&255;
      $541 = $event;
      $542 = ((($541)) + 6|0);
      HEAP8[$542>>0] = $540;
      break;
     }
     case 9:  {
      $478 = $event;
      $479 = ((($478)) + 5|0);
      HEAP8[$479>>0] = 14;
      $480 = $event;
      $481 = ((($480)) + 2|0);
      $482 = HEAP8[$481>>0]|0;
      $483 = $482&255;
      $484 = (($483) - 144)|0;
      $485 = 160 | $484;
      $486 = $485&255;
      $487 = $event;
      $488 = ((($487)) + 6|0);
      HEAP8[$488>>0] = $486;
      break;
     }
     case 13:  {
      $522 = $event;
      $523 = ((($522)) + 5|0);
      HEAP8[$523>>0] = 25;
      $524 = $event;
      $525 = ((($524)) + 2|0);
      $526 = HEAP8[$525>>0]|0;
      $527 = $526&255;
      $528 = (($527) - 208)|0;
      $529 = $528 << 4;
      $530 = $529&255;
      $531 = $event;
      $532 = ((($531)) + 6|0);
      HEAP8[$532>>0] = $530;
      break;
     }
     case 8:  {
      $467 = $event;
      $468 = ((($467)) + 5|0);
      HEAP8[$468>>0] = 14;
      $469 = $event;
      $470 = ((($469)) + 2|0);
      $471 = HEAP8[$470>>0]|0;
      $472 = $471&255;
      $473 = (($472) - 128)|0;
      $474 = 176 | $473;
      $475 = $474&255;
      $476 = $event;
      $477 = ((($476)) + 6|0);
      HEAP8[$477>>0] = $475;
      break;
     }
     case 11:  {
      $500 = $event;
      $501 = ((($500)) + 5|0);
      HEAP8[$501>>0] = 4;
      $502 = $event;
      $503 = ((($502)) + 2|0);
      $504 = HEAP8[$503>>0]|0;
      $505 = $504&255;
      $506 = (($505) - 176)|0;
      $507 = $506&255;
      $508 = $event;
      $509 = ((($508)) + 6|0);
      HEAP8[$509>>0] = $507;
      break;
     }
     case 6:  {
      $446 = $event;
      $447 = ((($446)) + 5|0);
      HEAP8[$447>>0] = -92;
      $448 = $event;
      $449 = ((($448)) + 2|0);
      $450 = HEAP8[$449>>0]|0;
      $451 = $450&255;
      $452 = (($451) - 96)|0;
      $453 = $452&255;
      $454 = $event;
      $455 = ((($454)) + 6|0);
      HEAP8[$455>>0] = $453;
      break;
     }
     default: {
     }
     }
    } while(0);
    $554 = $event;
    $555 = ((($554)) + 2|0);
    HEAP8[$555>>0] = 0;
   }
   $556 = $j;
   $557 = (($556) + 1)|0;
   $j = $557;
  }
  $558 = $i;
  $559 = (($558) + 1)|0;
  $i = $559;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 $560 = (_calloc(523,1)|0);
 $561 = $mod;
 $562 = ((($561)) + 172|0);
 $563 = HEAP32[$562>>2]|0;
 HEAP32[$563>>2] = $560;
 $564 = $mod;
 $565 = ((($564)) + 172|0);
 $566 = HEAP32[$565>>2]|0;
 $567 = HEAP32[$566>>2]|0;
 HEAP32[$567>>2] = 64;
 $568 = $2;
 $569 = $3;
 $570 = $pat_ptr;
 $571 = (($569) + ($570))|0;
 (_hio_seek($568,$571,0)|0);
 $i = 0;
 while(1) {
  $572 = $i;
  $573 = $mod;
  $574 = ((($573)) + 128|0);
  $575 = HEAP32[$574>>2]|0;
  $576 = ($572|0)<($575|0);
  if (!($576)) {
   break;
  }
  $577 = $mod;
  $578 = $i;
  $579 = (_pattern_alloc($577,$578)|0);
  $580 = ($579|0)<(0);
  if ($580) {
   label = 62;
   break;
  }
  $581 = $2;
  $582 = (_hio_read16b($581)|0);
  $583 = $582&65535;
  $584 = $i;
  $585 = $mod;
  $586 = ((($585)) + 168|0);
  $587 = HEAP32[$586>>2]|0;
  $588 = (($587) + ($584<<2)|0);
  $589 = HEAP32[$588>>2]|0;
  HEAP32[$589>>2] = $583;
  $j = 0;
  while(1) {
   $590 = $j;
   $591 = $mod;
   $592 = ((($591)) + 136|0);
   $593 = HEAP32[$592>>2]|0;
   $594 = ($590|0)<($593|0);
   if (!($594)) {
    break;
   }
   $595 = $2;
   $596 = (_hio_read16b($595)|0);
   $597 = $596&65535;
   $598 = (($597) - 1)|0;
   $599 = $j;
   $600 = $i;
   $601 = $mod;
   $602 = ((($601)) + 168|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = (($603) + ($600<<2)|0);
   $605 = HEAP32[$604>>2]|0;
   $606 = ((($605)) + 4|0);
   $607 = (($606) + ($599<<2)|0);
   HEAP32[$607>>2] = $598;
   $608 = $j;
   $609 = (($608) + 1)|0;
   $j = $609;
  }
  $610 = $i;
  $611 = (($610) + 1)|0;
  $i = $611;
 }
 if ((label|0) == 62) {
  $0 = -1;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 $i = 0;
 while(1) {
  $612 = $i;
  $613 = $mod;
  $614 = ((($613)) + 140|0);
  $615 = HEAP32[$614>>2]|0;
  $616 = ($612|0)<($615|0);
  if (!($616)) {
   label = 73;
   break;
  }
  $617 = $i;
  $618 = $mod;
  $619 = ((($618)) + 176|0);
  $620 = HEAP32[$619>>2]|0;
  $621 = (($620) + (($617*764)|0)|0);
  $622 = ((($621)) + 36|0);
  $623 = HEAP32[$622>>2]|0;
  $624 = ($623|0)==(0);
  if (!($624)) {
   $625 = $2;
   $626 = $3;
   $627 = $i;
   $628 = (($sdata) + ($627<<2)|0);
   $629 = HEAP32[$628>>2]|0;
   $630 = (($626) + ($629))|0;
   (_hio_seek($625,$630,0)|0);
   $631 = $1;
   $632 = $2;
   $633 = $i;
   $634 = $mod;
   $635 = ((($634)) + 180|0);
   $636 = HEAP32[$635>>2]|0;
   $637 = (($636) + (($633*52)|0)|0);
   $638 = (_load_sample($631,$632,0,$637,0)|0);
   $639 = ($638|0)<(0);
   if ($639) {
    label = 71;
    break;
   }
  }
  $640 = $i;
  $641 = (($640) + 1)|0;
  $i = $641;
 }
 if ((label|0) == 71) {
  $0 = -1;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 else if ((label|0) == 73) {
  $0 = 0;
  $642 = $0;
  STACKTOP = sp;return ($642|0);
 }
 return (0)|0;
}
function _chip_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 952)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,4,$7)|0);
 $9 = ($8>>>0)<(4);
 if ($9) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $10 = (_memcmp($buf,8024,4)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $12 = $1;
  $13 = $3;
  $14 = (($13) + 0)|0;
  (_hio_seek($12,$14,0)|0);
  $15 = $1;
  $16 = $2;
  _read_title($15,$16,20);
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _chip_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e = 0, $event = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $sub = 0, $t = 0, $t1 = 0, $tidx = 0, $tnum = 0, $vararg_buffer = 0, $xxi = 0, $xxs = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mh = sp + 64|0;
 $e = sp + 1148|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = (_calloc(1,1024)|0);
 $tidx = $7;
 $8 = ($7|0)==(0|0);
 L1: do {
  if (!($8)) {
   $9 = $2;
   (_hio_read($mh,20,1,$9)|0);
   $10 = $2;
   (_hio_read16b($10)|0);
   $i = 0;
   while(1) {
    $11 = $i;
    $12 = ($11|0)<(31);
    if (!($12)) {
     break;
    }
    $13 = $i;
    $14 = ((($mh)) + 20|0);
    $15 = (($14) + (($13*30)|0)|0);
    $16 = $2;
    (_hio_read($15,22,1,$16)|0);
    $17 = $2;
    $18 = (_hio_read16b($17)|0);
    $19 = $i;
    $20 = ((($mh)) + 20|0);
    $21 = (($20) + (($19*30)|0)|0);
    $22 = ((($21)) + 22|0);
    HEAP16[$22>>1] = $18;
    $23 = $2;
    $24 = (_hio_read8($23)|0);
    $25 = $i;
    $26 = ((($mh)) + 20|0);
    $27 = (($26) + (($25*30)|0)|0);
    $28 = ((($27)) + 24|0);
    HEAP8[$28>>0] = $24;
    $29 = $2;
    $30 = (_hio_read8($29)|0);
    $31 = $i;
    $32 = ((($mh)) + 20|0);
    $33 = (($32) + (($31*30)|0)|0);
    $34 = ((($33)) + 25|0);
    HEAP8[$34>>0] = $30;
    $35 = $2;
    $36 = (_hio_read16b($35)|0);
    $37 = $i;
    $38 = ((($mh)) + 20|0);
    $39 = (($38) + (($37*30)|0)|0);
    $40 = ((($39)) + 26|0);
    HEAP16[$40>>1] = $36;
    $41 = $2;
    $42 = (_hio_read16b($41)|0);
    $43 = $i;
    $44 = ((($mh)) + 20|0);
    $45 = (($44) + (($43*30)|0)|0);
    $46 = ((($45)) + 28|0);
    HEAP16[$46>>1] = $42;
    $47 = $i;
    $48 = (($47) + 1)|0;
    $i = $48;
   }
   $49 = ((($mh)) + 1080|0);
   $50 = $2;
   (_hio_read($49,4,1,$50)|0);
   $51 = $2;
   $52 = (_hio_read8($51)|0);
   $53 = ((($mh)) + 950|0);
   HEAP8[$53>>0] = $52;
   $54 = $2;
   $55 = (_hio_read8($54)|0);
   $56 = ((($mh)) + 951|0);
   HEAP8[$56>>0] = $55;
   $57 = $tidx;
   $58 = $2;
   (_hio_read($57,1024,1,$58)|0);
   $59 = $2;
   (_hio_read16b($59)|0);
   $60 = $mod;
   $61 = ((($60)) + 136|0);
   HEAP32[$61>>2] = 4;
   $62 = $mod;
   $63 = ((($62)) + 140|0);
   HEAP32[$63>>2] = 31;
   $64 = $mod;
   $65 = ((($64)) + 140|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $mod;
   $68 = ((($67)) + 144|0);
   HEAP32[$68>>2] = $66;
   $69 = ((($mh)) + 950|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $mod;
   $73 = ((($72)) + 156|0);
   HEAP32[$73>>2] = $71;
   $74 = ((($mh)) + 950|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $mod;
   $78 = ((($77)) + 128|0);
   HEAP32[$78>>2] = $76;
   $79 = ((($mh)) + 951|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $mod;
   $83 = ((($82)) + 160|0);
   HEAP32[$83>>2] = $81;
   $tnum = 0;
   $i = 0;
   while(1) {
    $84 = $i;
    $85 = $mod;
    $86 = ((($85)) + 156|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($84|0)<($87|0);
    if (!($88)) {
     break;
    }
    $89 = $i;
    $90 = $89&255;
    $91 = $i;
    $92 = $mod;
    $93 = ((($92)) + 952|0);
    $94 = (($93) + ($91)|0);
    HEAP8[$94>>0] = $90;
    $j = 0;
    while(1) {
     $95 = $j;
     $96 = ($95|0)<(4);
     $97 = $i;
     if (!($96)) {
      break;
     }
     $98 = $97<<2;
     $99 = $j;
     $100 = (($98) + ($99))|0;
     $101 = $100<<1;
     $102 = $tidx;
     $103 = (($102) + ($101)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104&255;
     $t = $105;
     $106 = $t;
     $107 = $tnum;
     $108 = ($106|0)>($107|0);
     if ($108) {
      $109 = $t;
      $tnum = $109;
     }
     $110 = $j;
     $111 = (($110) + 1)|0;
     $j = $111;
    }
    $112 = (($97) + 1)|0;
    $i = $112;
   }
   $113 = $tnum;
   $114 = (($113) + 1)|0;
   $115 = $mod;
   $116 = ((($115)) + 132|0);
   HEAP32[$116>>2] = $114;
   $117 = $mod;
   (_strncpy(($117|0),($mh|0),20)|0);
   $118 = $1;
   _set_type($118,8008,$vararg_buffer);
   $119 = $mod;
   $120 = (_instrument_init($119)|0);
   $121 = ($120|0)<(0);
   L18: do {
    if (!($121)) {
     $i = 0;
     while(1) {
      $122 = $i;
      $123 = $mod;
      $124 = ((($123)) + 140|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($122|0)<($125|0);
      if (!($126)) {
       break;
      }
      $127 = $i;
      $128 = $mod;
      $129 = ((($128)) + 176|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (($130) + (($127*764)|0)|0);
      $xxi = $131;
      $132 = $i;
      $133 = $mod;
      $134 = ((($133)) + 180|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (($135) + (($132*52)|0)|0);
      $xxs = $136;
      $137 = $mod;
      $138 = $i;
      $139 = (_subinstrument_alloc($137,$138,1)|0);
      $140 = ($139|0)<(0);
      if ($140) {
       break L1;
      }
      $141 = $xxi;
      $142 = ((($141)) + 756|0);
      $143 = HEAP32[$142>>2]|0;
      $sub = $143;
      $144 = $i;
      $145 = ((($mh)) + 20|0);
      $146 = (($145) + (($144*30)|0)|0);
      $147 = ((($146)) + 22|0);
      $148 = HEAP16[$147>>1]|0;
      $149 = $148&65535;
      $150 = $149<<1;
      $151 = $xxs;
      $152 = ((($151)) + 32|0);
      HEAP32[$152>>2] = $150;
      $153 = $i;
      $154 = ((($mh)) + 20|0);
      $155 = (($154) + (($153*30)|0)|0);
      $156 = ((($155)) + 26|0);
      $157 = HEAP16[$156>>1]|0;
      $158 = $157&65535;
      $159 = $xxs;
      $160 = ((($159)) + 36|0);
      HEAP32[$160>>2] = $158;
      $161 = $xxs;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $i;
      $165 = ((($mh)) + 20|0);
      $166 = (($165) + (($164*30)|0)|0);
      $167 = ((($166)) + 28|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168&65535;
      $170 = $169<<1;
      $171 = (($163) + ($170))|0;
      $172 = $xxs;
      $173 = ((($172)) + 40|0);
      HEAP32[$173>>2] = $171;
      $174 = $i;
      $175 = ((($mh)) + 20|0);
      $176 = (($175) + (($174*30)|0)|0);
      $177 = ((($176)) + 28|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178&65535;
      $180 = ($179|0)>(1);
      $181 = $180 ? 2 : 0;
      $182 = $xxs;
      $183 = ((($182)) + 44|0);
      HEAP32[$183>>2] = $181;
      $184 = $i;
      $185 = ((($mh)) + 20|0);
      $186 = (($185) + (($184*30)|0)|0);
      $187 = ((($186)) + 24|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = $188 << 24 >> 24;
      $190 = $189 << 4;
      $191 = $190&255;
      $192 = $191 << 24 >> 24;
      $193 = $sub;
      $194 = ((($193)) + 16|0);
      HEAP32[$194>>2] = $192;
      $195 = $i;
      $196 = ((($mh)) + 20|0);
      $197 = (($196) + (($195*30)|0)|0);
      $198 = ((($197)) + 25|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199 << 24 >> 24;
      $201 = $sub;
      HEAP32[$201>>2] = $200;
      $202 = $sub;
      $203 = ((($202)) + 8|0);
      HEAP32[$203>>2] = 128;
      $204 = $i;
      $205 = $sub;
      $206 = ((($205)) + 40|0);
      HEAP32[$206>>2] = $204;
      $207 = $xxs;
      $208 = ((($207)) + 32|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($209|0)>(0);
      if ($210) {
       $211 = $xxi;
       $212 = ((($211)) + 36|0);
       HEAP32[$212>>2] = 1;
      }
      $213 = $mod;
      $214 = $i;
      $215 = $i;
      $216 = ((($mh)) + 20|0);
      $217 = (($216) + (($215*30)|0)|0);
      (_instrument_name($213,$214,$217,22)|0);
      $218 = $i;
      $219 = (($218) + 1)|0;
      $i = $219;
     }
     $220 = $mod;
     $221 = (_pattern_init($220)|0);
     $222 = ($221|0)<(0);
     if (!($222)) {
      $i = 0;
      while(1) {
       $223 = $i;
       $224 = $mod;
       $225 = ((($224)) + 156|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($223|0)<($226|0);
       if (!($227)) {
        break;
       }
       $228 = $mod;
       $229 = $i;
       $230 = (_pattern_alloc($228,$229)|0);
       $231 = ($230|0)<(0);
       if ($231) {
        break L18;
       }
       $232 = $i;
       $233 = $mod;
       $234 = ((($233)) + 168|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = (($235) + ($232<<2)|0);
       $237 = HEAP32[$236>>2]|0;
       HEAP32[$237>>2] = 64;
       $j = 0;
       while(1) {
        $238 = $j;
        $239 = ($238|0)<(4);
        $240 = $i;
        if (!($239)) {
         break;
        }
        $241 = $240<<2;
        $242 = $j;
        $243 = (($241) + ($242))|0;
        $244 = $243<<1;
        $245 = $tidx;
        $246 = (($245) + ($244)|0);
        $247 = HEAP8[$246>>0]|0;
        $248 = $247&255;
        $t1 = $248;
        $249 = $t1;
        $250 = $j;
        $251 = $i;
        $252 = $mod;
        $253 = ((($252)) + 168|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = (($254) + ($251<<2)|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ((($256)) + 4|0);
        $258 = (($257) + ($250<<2)|0);
        HEAP32[$258>>2] = $249;
        $259 = $j;
        $260 = (($259) + 1)|0;
        $j = $260;
       }
       $261 = (($240) + 1)|0;
       $i = $261;
      }
      $i = 0;
      while(1) {
       $262 = $i;
       $263 = $mod;
       $264 = ((($263)) + 132|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($262|0)<($265|0);
       if (!($266)) {
        break;
       }
       $267 = $mod;
       $268 = $i;
       $269 = (_track_alloc($267,$268,64)|0);
       $270 = ($269|0)<(0);
       if ($270) {
        break L18;
       }
       $j = 0;
       while(1) {
        $271 = $j;
        $272 = ($271|0)<(64);
        if (!($272)) {
         break;
        }
        $273 = $j;
        $274 = $i;
        $275 = $mod;
        $276 = ((($275)) + 172|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = (($277) + ($274<<2)|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = ((($279)) + 4|0);
        $281 = (($280) + ($273<<3)|0);
        $event = $281;
        $282 = $2;
        (_hio_read($e,1,4,$282)|0);
        $283 = HEAP8[$e>>0]|0;
        $284 = $283&255;
        $285 = ($284|0)!=(0);
        if ($285) {
         $286 = HEAP8[$e>>0]|0;
         $287 = $286&255;
         $288 = ($287|0)!=(168);
         if ($288) {
          $289 = HEAP8[$e>>0]|0;
          $290 = $289&255;
          $291 = (($290|0) / 2)&-1;
          $292 = (13 + ($291))|0;
          $293 = $292&255;
          $294 = $event;
          HEAP8[$294>>0] = $293;
         }
        }
        $295 = ((($e)) + 1|0);
        $296 = HEAP8[$295>>0]|0;
        $297 = $event;
        $298 = ((($297)) + 1|0);
        HEAP8[$298>>0] = $296;
        $299 = ((($e)) + 2|0);
        $300 = HEAP8[$299>>0]|0;
        $301 = $300&255;
        $302 = $301 & 15;
        $303 = $302&255;
        $304 = $event;
        $305 = ((($304)) + 3|0);
        HEAP8[$305>>0] = $303;
        $306 = ((($e)) + 3|0);
        $307 = HEAP8[$306>>0]|0;
        $308 = $event;
        $309 = ((($308)) + 4|0);
        HEAP8[$309>>0] = $307;
        $310 = $j;
        $311 = (($310) + 1)|0;
        $j = $311;
       }
       $312 = $i;
       $313 = (($312) + 1)|0;
       $i = $313;
      }
      $314 = $1;
      $315 = ((($314)) + 1280|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = $316 | 8192;
      HEAP32[$315>>2] = $317;
      $i = 0;
      while(1) {
       $318 = $i;
       $319 = $mod;
       $320 = ((($319)) + 144|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = ($318|0)<($321|0);
       if (!($322)) {
        break;
       }
       $323 = $i;
       $324 = $mod;
       $325 = ((($324)) + 180|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = (($326) + (($323*52)|0)|0);
       $328 = ((($327)) + 32|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = ($329|0)==(0);
       if (!($330)) {
        $331 = $1;
        $332 = $2;
        $333 = $i;
        $334 = $mod;
        $335 = ((($334)) + 180|0);
        $336 = HEAP32[$335>>2]|0;
        $337 = (($336) + (($333*52)|0)|0);
        $338 = (_load_sample($331,$332,512,$337,0)|0);
        $339 = ($338|0)<(0);
        if ($339) {
         break L18;
        }
       }
       $340 = $i;
       $341 = (($340) + 1)|0;
       $i = $341;
      }
      $342 = $tidx;
      _free($342);
      $0 = 0;
      $344 = $0;
      STACKTOP = sp;return ($344|0);
     }
    }
   } while(0);
   $343 = $tidx;
   _free($343);
  }
 } while(0);
 $0 = -1;
 $344 = $0;
 STACKTOP = sp;return ($344|0);
}
function _pw_move_data($out,$in,$len) {
 $out = $out|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in;
 $2 = $len;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_move_data($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _pw_write_zero($out,$len) {
 $out = $out|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $l = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $out;
 $1 = $len;
 while(1) {
  $2 = $1;
  $3 = ($2|0)>(1024);
  $4 = $1;
  $5 = $3 ? 1024 : $4;
  $l = $5;
  $6 = $l;
  _memset(($buf|0),0,($6|0))|0;
  $7 = $l;
  $8 = $0;
  (_fwrite(($buf|0),1,($7|0),($8|0))|0);
  $9 = $l;
  $10 = $1;
  $11 = (($10) - ($9))|0;
  $1 = $11;
  $12 = $l;
  $13 = ($12|0)>(0);
  $14 = $1;
  $15 = ($14|0)>(0);
  $16 = $13 ? $15 : 0;
  if (!($16)) {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _pw_wizardry($in,$out,$name) {
 $in = $in|0;
 $out = $out|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $data = 0, $file_in = 0, $file_out = 0, $i = 0, $in_size = 0, $size = 0, $st = 0, $title = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $st = sp + 24|0;
 $title = sp + 116|0;
 $1 = $in;
 $2 = $out;
 $3 = $name;
 $size = -1;
 $4 = $1;
 $5 = (_dup(($4|0))|0);
 $6 = (_fdopen(($5|0),(8192|0))|0);
 $file_in = $6;
 $7 = $file_in;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $9 = $2;
 $10 = (_dup(($9|0))|0);
 $11 = (_fdopen(($10|0),(8200|0))|0);
 $file_out = $11;
 $12 = $file_out;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $0 = -1;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $14 = $file_in;
 $15 = (_fileno(($14|0))|0);
 $16 = (_fstat(($15|0),($st|0))|0);
 $17 = ($16|0)<(0);
 if ($17) {
  $in_size = -1;
 } else {
  $18 = ((($st)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $in_size = $19;
 }
 $20 = $in_size;
 $21 = ($20|0)<(2048);
 if ($21) {
  $0 = -2;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $22 = $in_size;
 $23 = (($22) + 4096)|0;
 $24 = (_malloc($23)|0);
 $data = $24;
 $25 = $data;
 $26 = ($25|0)==(0|0);
 if ($26) {
  _perror((8208|0));
  $0 = -1;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $27 = $data;
 $28 = $in_size;
 $29 = $file_in;
 (_fread(($27|0),($28|0),1,($29|0))|0);
 $i = 0;
 while(1) {
  $30 = $i;
  $31 = (8032 + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = (8032 + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $data;
  $40 = $in_size;
  $41 = (FUNCTION_TABLE_iiii[$38 & 255]($39,$title,$40)|0);
  $42 = ($41|0)>=(0);
  if ($42) {
   break;
  }
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $45 = $i;
 $46 = (8032 + ($45<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $49 = $data;
  _free($49);
  $0 = -1;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $50 = $file_in;
 (_fseek(($50|0),0,0)|0);
 $51 = $i;
 $52 = (8032 + ($51<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $file_in;
 $57 = $file_out;
 $58 = (FUNCTION_TABLE_iii[$55 & 511]($56,$57)|0);
 $size = $58;
 $59 = $size;
 $60 = ($59|0)<(0);
 if ($60) {
  $0 = -1;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $61 = $file_out;
 (_fclose(($61|0))|0);
 $62 = $file_in;
 (_fclose(($62|0))|0);
 $63 = $data;
 _free($63);
 $64 = $3;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = $i;
  $67 = (8032 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  $70 = $3;
  HEAP32[$70>>2] = $69;
 }
 $0 = 0;
 $71 = $0;
 STACKTOP = sp;return ($71|0);
}
function _pw_check($b,$s,$info) {
 $b = $b|0;
 $s = $s|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $res = 0, $title = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $title = sp + 24|0;
 $1 = $b;
 $2 = $s;
 $3 = $info;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = (8032 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = $i;
  $9 = (8032 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = $2;
  $15 = (FUNCTION_TABLE_iiii[$12 & 255]($13,$title,$14)|0);
  $res = $15;
  $16 = $res;
  $17 = ($16|0)>(0);
  $18 = $res;
  if ($17) {
   label = 4;
   break;
  }
  $19 = ($18|0)==(0);
  if ($19) {
   label = 6;
   break;
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 if ((label|0) == 4) {
  $0 = $18;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 6) {
  $20 = $3;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $3;
   dest=$22; src=$title; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $23 = $3;
   $24 = ((($23)) + 64|0);
   $25 = $i;
   $26 = (8032 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   (_strncpy(($24|0),($28|0),64)|0);
  }
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _pw_read_title($b,$t,$s) {
 $b = $b|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = $t;
 $2 = $s;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $1;
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ($8|0)>(20);
 if ($9) {
  $2 = 20;
 }
 $10 = $1;
 $11 = $0;
 $12 = $2;
 _memcpy(($10|0),($11|0),($12|0))|0;
 $13 = $2;
 $14 = $1;
 $15 = (($14) + ($13)|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function _test_AC1D($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $k = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(896);
 if ($5) {
  $6 = $3;
  $7 = (896 - ($6))|0;
  $0 = $7;
  $52 = $0;
  STACKTOP = sp;return ($52|0);
 }
 $8 = $1;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(172);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 3|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(29);
  if (!($17)) {
   $18 = $start;
   $19 = $1;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)>(127);
   if ($23) {
    $0 = -1;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
   $k = 0;
   while(1) {
    $24 = $k;
    $25 = ($24|0)<(31);
    if (!($25)) {
     break;
    }
    $26 = $start;
    $27 = (($26) + 10)|0;
    $28 = $k;
    $29 = $28<<3;
    $30 = (($27) + ($29))|0;
    $31 = $1;
    $32 = (($31) + ($30)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34|0)>(15);
    if ($35) {
     label = 11;
     break;
    }
    $36 = $k;
    $37 = (($36) + 1)|0;
    $k = $37;
   }
   if ((label|0) == 11) {
    $0 = -1;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
   $j = 0;
   while(1) {
    $38 = $j;
    $39 = ($38|0)<(128);
    if (!($39)) {
     label = 18;
     break;
    }
    $40 = $start;
    $41 = (($40) + 768)|0;
    $42 = $j;
    $43 = (($41) + ($42))|0;
    $44 = $1;
    $45 = (($44) + ($43)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = ($47|0)>(127);
    if ($48) {
     label = 16;
     break;
    }
    $49 = $j;
    $50 = (($49) + 1)|0;
    $j = $50;
   }
   if ((label|0) == 16) {
    $0 = -1;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
   else if ((label|0) == 18) {
    $51 = $2;
    _pw_read_title(0,$51,0);
    $0 = 0;
    $52 = $0;
    STACKTOP = sp;return ($52|0);
   }
  }
 }
 $0 = -1;
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _depack_AC1D($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0;
 var $c2 = 0, $c3 = 0, $c4 = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $note = 0, $npat = 0, $npos = 0, $ntk_byte = 0, $paddr = 0, $psize = 0, $saddr = 0, $size = 0, $ssize = 0, $tmp = 0, $tsize1 = 0;
 var $tsize2 = 0, $tsize3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 1088|0;
 $paddr = sp + 544|0;
 $psize = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($paddr|0),0,512)|0;
 _memset(($psize|0),0,512)|0;
 $2 = $0;
 $3 = (_read8($2)|0);
 $npos = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $ntk_byte = $5;
 $6 = $0;
 (_read16b($6)|0);
 $7 = $0;
 $8 = (_read32b($7)|0);
 $saddr = $8;
 $9 = $1;
 (_pw_write_zero($9,20)|0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(31);
  if (!($11)) {
   break;
  }
  $12 = $1;
  (_pw_write_zero($12,22)|0);
  $13 = $1;
  $14 = $0;
  $15 = (_read16b($14)|0);
  $16 = $15&65535;
  $size = $16;
  $17 = $16&65535;
  _write16b($13,$17);
  $18 = $size;
  $19 = $18<<1;
  $20 = $ssize;
  $21 = (($20) + ($19))|0;
  $ssize = $21;
  $22 = $1;
  $23 = $0;
  $24 = (_read8($23)|0);
  _write8($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_read8($26)|0);
  _write8($25,$27);
  $28 = $1;
  $29 = $0;
  $30 = (_read16b($29)|0);
  _write16b($28,$30);
  $31 = $1;
  $32 = $0;
  $33 = (_read16b($32)|0);
  _write16b($31,$33);
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $npat = 0;
 while(1) {
  $36 = $npat;
  $37 = $36&255;
  $38 = ($37|0)<(128);
  if (!($38)) {
   break;
  }
  $39 = $0;
  $40 = (_read32b($39)|0);
  $41 = $npat;
  $42 = $41&255;
  $43 = (($paddr) + ($42<<2)|0);
  HEAP32[$43>>2] = $40;
  $44 = $npat;
  $45 = $44&255;
  $46 = (($paddr) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   break;
  }
  $49 = $npat;
  $50 = (($49) + 1)<<24>>24;
  $npat = $50;
 }
 $51 = $npat;
 $52 = (($51) + -1)<<24>>24;
 $npat = $52;
 $i = 0;
 while(1) {
  $53 = $i;
  $54 = $npat;
  $55 = $54&255;
  $56 = (($55) - 1)|0;
  $57 = ($53|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = (($58) + 1)|0;
  $60 = (($paddr) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $i;
  $63 = (($paddr) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($61) - ($64))|0;
  $66 = $i;
  $67 = (($psize) + ($66<<2)|0);
  HEAP32[$67>>2] = $65;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = $1;
 $71 = $npos;
 _write8($70,$71);
 $72 = $1;
 $73 = $ntk_byte;
 _write8($72,$73);
 $74 = $0;
 (_fseek(($74|0),768,0)|0);
 $75 = $1;
 $76 = $0;
 (_pw_move_data($75,$76,128)|0);
 $77 = $1;
 _write32b($77,1294879534);
 $i = 0;
 while(1) {
  $78 = $i;
  $79 = $npat;
  $80 = $79&255;
  $81 = ($78|0)<($80|0);
  $82 = $0;
  if (!($81)) {
   break;
  }
  $83 = $i;
  $84 = (($paddr) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  (_fseek(($82|0),($85|0),0)|0);
  $86 = $0;
  $87 = (_read32b($86)|0);
  $tsize1 = $87;
  $88 = $0;
  $89 = (_read32b($88)|0);
  $tsize2 = $89;
  $90 = $0;
  $91 = (_read32b($90)|0);
  $tsize3 = $91;
  _memset(($tmp|0),0,1024)|0;
  $k = 0;
  while(1) {
   $92 = $k;
   $93 = ($92|0)<(4);
   if (!($93)) {
    break;
   }
   $j = 0;
   while(1) {
    $94 = $j;
    $95 = ($94|0)<(64);
    if (!($95)) {
     break;
    }
    $96 = $j;
    $97 = $96<<4;
    $98 = $k;
    $99 = $98<<2;
    $100 = (($97) + ($99))|0;
    $x = $100;
    $fxp = 0;
    $fxt = 0;
    $ins = 0;
    $note = 0;
    $101 = $0;
    $102 = (_read8($101)|0);
    $c1 = $102;
    $103 = $c1;
    $104 = $103&255;
    $105 = $104 & 128;
    $106 = ($105|0)!=(0);
    do {
     if ($106) {
      $107 = $c1;
      $108 = $107&255;
      $109 = $108 & 127;
      $110 = $109&255;
      $c4 = $110;
      $111 = $c4;
      $112 = $111&255;
      $113 = (($112) - 1)|0;
      $114 = $j;
      $115 = (($114) + ($113))|0;
      $j = $115;
     } else {
      $116 = $0;
      $117 = (_read8($116)|0);
      $c2 = $117;
      $118 = $c1;
      $119 = $118&255;
      $120 = $119 & 192;
      $121 = $120 >> 2;
      $122 = $c2;
      $123 = $122&255;
      $124 = $123 >> 4;
      $125 = $124 & 15;
      $126 = $121 | $125;
      $127 = $126&255;
      $ins = $127;
      $128 = $c1;
      $129 = $128&255;
      $130 = $129 & 63;
      $131 = $130&255;
      $note = $131;
      $132 = $note;
      $133 = $132&255;
      $134 = ($133|0)==(63);
      if ($134) {
       $note = -1;
      } else {
       $135 = $note;
       $136 = ($135<<24>>24)!=(0);
       if ($136) {
        $137 = $note;
        $138 = $137&255;
        $139 = (($138) - 11)|0;
        $140 = $139&255;
        $note = $140;
       }
      }
      $141 = $note;
      $142 = $141&255;
      $143 = ($142|0)==(0);
      if ($143) {
       $144 = $note;
       $145 = (($144) + 1)<<24>>24;
       $note = $145;
      }
      $146 = $ins;
      $147 = $146&255;
      $148 = $147 & 240;
      $149 = $148&255;
      $150 = $x;
      $151 = (($tmp) + ($150)|0);
      HEAP8[$151>>0] = $149;
      $152 = $note;
      $153 = $152&255;
      $154 = ($153|0)!=(255);
      if ($154) {
       $155 = $note;
       $156 = $155&255;
       $157 = (8240 + ($156<<1)|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158&255;
       $160 = $x;
       $161 = (($tmp) + ($160)|0);
       $162 = HEAP8[$161>>0]|0;
       $163 = $162&255;
       $164 = $163 | $159;
       $165 = $164&255;
       HEAP8[$161>>0] = $165;
       $166 = $note;
       $167 = $166&255;
       $168 = (8240 + ($167<<1)|0);
       $169 = ((($168)) + 1|0);
       $170 = HEAP8[$169>>0]|0;
       $171 = $x;
       $172 = (($171) + 1)|0;
       $173 = (($tmp) + ($172)|0);
       HEAP8[$173>>0] = $170;
      }
      $174 = $c2;
      $175 = $174&255;
      $176 = $175 & 15;
      $177 = ($176|0)==(7);
      if ($177) {
       $fxt = 0;
       $fxp = 0;
       $178 = $ins;
       $179 = $178&255;
       $180 = $179 << 4;
       $181 = $180 & 240;
       $182 = $181&255;
       $183 = $x;
       $184 = (($183) + 2)|0;
       $185 = (($tmp) + ($184)|0);
       HEAP8[$185>>0] = $182;
       break;
      } else {
       $186 = $0;
       $187 = (_read8($186)|0);
       $c3 = $187;
       $188 = $c2;
       $189 = $188&255;
       $190 = $189 & 15;
       $191 = $190&255;
       $fxt = $191;
       $192 = $c3;
       $fxp = $192;
       $193 = $ins;
       $194 = $193&255;
       $195 = $194 << 4;
       $196 = $195 & 240;
       $197 = $fxt;
       $198 = $197&255;
       $199 = $196 | $198;
       $200 = $199&255;
       $201 = $x;
       $202 = (($201) + 2)|0;
       $203 = (($tmp) + ($202)|0);
       HEAP8[$203>>0] = $200;
       $204 = $fxp;
       $205 = $x;
       $206 = (($205) + 3)|0;
       $207 = (($tmp) + ($206)|0);
       HEAP8[$207>>0] = $204;
       break;
      }
     }
    } while(0);
    $208 = $j;
    $209 = (($208) + 1)|0;
    $j = $209;
   }
   $210 = $k;
   $211 = (($210) + 1)|0;
   $k = $211;
  }
  $212 = $1;
  (_fwrite(($tmp|0),1024,1,($212|0))|0);
  $213 = $i;
  $214 = (($213) + 1)|0;
  $i = $214;
 }
 $215 = $saddr;
 (_fseek(($82|0),($215|0),0)|0);
 $216 = $1;
 $217 = $0;
 $218 = $ssize;
 (_pw_move_data($216,$217,$218)|0);
 STACKTOP = sp;return 0;
}
function _test_di($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $ssize = 0, $start = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(21);
 if ($5) {
  $6 = $3;
  $7 = (21 - ($6))|0;
  $0 = $7;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = (_readmem16b($10)|0);
 $12 = $11&65535;
 $k = $12;
 $13 = $k;
 $14 = ($13|0)>(31);
 if ($14) {
  $0 = -1;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 $l = 0;
 $j = 0;
 while(1) {
  $15 = $j;
  $16 = $k;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   label = 16;
   break;
  }
  $18 = $1;
  $19 = $start;
  $20 = (($18) + ($19)|0);
  $21 = ((($20)) + 14|0);
  $22 = (_readmem16b($21)|0);
  $23 = $22&65535;
  $24 = $23<<1;
  $o = $24;
  $25 = $1;
  $26 = $start;
  $27 = (($25) + ($26)|0);
  $28 = ((($27)) + 18|0);
  $29 = (_readmem16b($28)|0);
  $30 = $29&65535;
  $31 = $30<<1;
  $m = $31;
  $32 = $1;
  $33 = $start;
  $34 = (($32) + ($33)|0);
  $35 = ((($34)) + 20|0);
  $36 = (_readmem16b($35)|0);
  $37 = $36&65535;
  $38 = $37<<1;
  $n = $38;
  $39 = $o;
  $40 = ($39|0)>(65535);
  $41 = $m;
  $42 = ($41|0)>(65535);
  $or$cond = $40 | $42;
  $43 = $n;
  $44 = ($43|0)>(65535);
  $or$cond3 = $or$cond | $44;
  if ($or$cond3) {
   label = 8;
   break;
  }
  $45 = $m;
  $46 = $n;
  $47 = (($45) + ($46))|0;
  $48 = $o;
  $49 = ($47|0)>($48|0);
  if ($49) {
   label = 10;
   break;
  }
  $50 = $start;
  $51 = (($50) + 16)|0;
  $52 = $j;
  $53 = $52<<3;
  $54 = (($51) + ($53))|0;
  $55 = $1;
  $56 = (($55) + ($54)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)>(15);
  if ($59) {
   label = 12;
   break;
  }
  $60 = $start;
  $61 = (($60) + 17)|0;
  $62 = $j;
  $63 = $62<<3;
  $64 = (($61) + ($63))|0;
  $65 = $1;
  $66 = (($65) + ($64)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(64);
  if ($69) {
   label = 14;
   break;
  }
  $70 = $o;
  $71 = $l;
  $72 = (($71) + ($70))|0;
  $l = $72;
  $73 = $j;
  $74 = (($73) + 1)|0;
  $j = $74;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 else if ((label|0) == 16) {
  $75 = $l;
  $76 = ($75|0)<=(2);
  if ($76) {
   $0 = -1;
   $149 = $0;
   STACKTOP = sp;return ($149|0);
  }
  $77 = $k;
  $78 = $77<<3;
  $79 = (($78) + 2)|0;
  $ssize = $79;
  $80 = $1;
  $81 = $start;
  $82 = (($80) + ($81)|0);
  $83 = ((($82)) + 2|0);
  $84 = (_readmem32b($83)|0);
  $j = $84;
  $85 = $1;
  $86 = $start;
  $87 = (($85) + ($86)|0);
  $88 = ((($87)) + 6|0);
  $89 = (_readmem32b($88)|0);
  $k = $89;
  $90 = $1;
  $91 = $start;
  $92 = (($90) + ($91)|0);
  $93 = ((($92)) + 10|0);
  $94 = (_readmem32b($93)|0);
  $l = $94;
  $95 = $k;
  $96 = $j;
  $97 = ($95|0)<=($96|0);
  if (!($97)) {
   $98 = $l;
   $99 = $j;
   $100 = ($98|0)<=($99|0);
   if (!($100)) {
    $101 = $l;
    $102 = $k;
    $103 = ($101|0)<=($102|0);
    if (!($103)) {
     $104 = $k;
     $105 = $j;
     $106 = (($104) - ($105))|0;
     $107 = ($106|0)>(128);
     if ($107) {
      $0 = -1;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     }
     $108 = $j;
     $109 = $ssize;
     $110 = ($108|0)<($109|0);
     if ($110) {
      $0 = -1;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     }
     $111 = $3;
     $112 = $start;
     $113 = $k;
     $114 = (($112) + ($113))|0;
     $115 = (($114) - 1)|0;
     $116 = ($111|0)<($115|0);
     if ($116) {
      $117 = $start;
      $118 = $k;
      $119 = (($117) + ($118))|0;
      $120 = (($119) - 1)|0;
      $121 = $3;
      $122 = (($120) - ($121))|0;
      $0 = $122;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     }
     $123 = $j;
     $m = $123;
     while(1) {
      $124 = $m;
      $125 = $k;
      $126 = (($125) - 1)|0;
      $127 = ($124|0)<($126|0);
      $128 = $start;
      if (!($127)) {
       break;
      }
      $129 = $m;
      $130 = (($128) + ($129))|0;
      $131 = $1;
      $132 = (($131) + ($130)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134|0)>(128);
      if ($135) {
       label = 31;
       break;
      }
      $136 = $m;
      $137 = (($136) + 1)|0;
      $m = $137;
     }
     if ((label|0) == 31) {
      $0 = -1;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     }
     $138 = $k;
     $139 = (($128) + ($138))|0;
     $140 = (($139) - 1)|0;
     $141 = $1;
     $142 = (($141) + ($140)|0);
     $143 = HEAP8[$142>>0]|0;
     $144 = $143&255;
     $145 = ($144|0)!=(255);
     if ($145) {
      $0 = -1;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     }
     $146 = $l;
     $147 = ($146|0)>(65535);
     if ($147) {
      $0 = -1;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     } else {
      $148 = $2;
      _pw_read_title(0,$148,0);
      $0 = 0;
      $149 = $0;
      STACKTOP = sp;return ($149|0);
     }
    }
   }
  }
  $0 = -1;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 return (0)|0;
}
function _depack_di($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0;
 var $c3 = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $k = 0, $max = 0, $nins = 0, $note = 0, $npat = 0, $paddr = 0, $pat_offs = 0, $pos = 0, $ptable = 0, $ptk_tab = 0, $seq_offs = 0, $size = 0, $smp_offs = 0, $ssize = 0, $tmp = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptk_tab = sp + 483|0;
 $ptable = sp + 352|0;
 $paddr = sp + 40|0;
 $tmp = sp + 296|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$ptk_tab>>0]=0|0;HEAP8[$ptk_tab+1>>0]=0|0;HEAP8[$ptk_tab+2>>0]=0|0;HEAP8[$ptk_tab+3>>0]=0|0;HEAP8[$ptk_tab+4>>0]=0|0;
 dest=$paddr; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 $4 = (_read16b($3)|0);
 $5 = $4&255;
 $nins = $5;
 $6 = $0;
 $7 = (_read32b($6)|0);
 $seq_offs = $7;
 $8 = $0;
 $9 = (_read32b($8)|0);
 $pat_offs = $9;
 $10 = $0;
 $11 = (_read32b($10)|0);
 $smp_offs = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $nins;
  $14 = $13&255;
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  (_pw_write_zero($16,22)|0);
  $17 = $1;
  $18 = $0;
  $19 = (_read16b($18)|0);
  $20 = $19&65535;
  $size = $20;
  $21 = $20&65535;
  _write16b($17,$21);
  $22 = $size;
  $23 = $22<<1;
  $24 = $ssize;
  $25 = (($24) + ($23))|0;
  $ssize = $25;
  $26 = $1;
  $27 = $0;
  $28 = (_read8($27)|0);
  _write8($26,$28);
  $29 = $1;
  $30 = $0;
  $31 = (_read8($30)|0);
  _write8($29,$31);
  $32 = $1;
  $33 = $0;
  $34 = (_read16b($33)|0);
  _write16b($32,$34);
  $35 = $1;
  $36 = $0;
  $37 = (_read16b($36)|0);
  _write16b($35,$37);
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 dest=$tmp; stop=dest+50|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $40 = $nins;
 $41 = $40&255;
 $i = $41;
 while(1) {
  $42 = $i;
  $43 = ($42|0)<(31);
  if (!($43)) {
   break;
  }
  $44 = $1;
  (_fwrite(($tmp|0),30,1,($44|0))|0);
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 $47 = $0;
 $48 = (_ftell(($47|0))|0);
 $pos = $48;
 $49 = $0;
 $50 = $seq_offs;
 (_fseek(($49|0),($50|0),0)|0);
 $i = 0;
 while(1) {
  $51 = $0;
  $52 = (_read8($51)|0);
  $c1 = $52;
  $53 = $c1;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
  $56 = (($ptable) + ($54)|0);
  HEAP8[$56>>0] = $53;
  $57 = $c1;
  $58 = $57&255;
  $59 = ($58|0)!=(255);
  if (!($59)) {
   break;
  }
 }
 $60 = $i;
 $61 = (($60) - 1)|0;
 $62 = (($ptable) + ($61)|0);
 HEAP8[$62>>0] = 0;
 $63 = $1;
 $64 = $i;
 $65 = (($64) - 1)|0;
 $66 = $65&255;
 $npat = $66;
 _write8($63,$66);
 $67 = $1;
 _write8($67,127);
 $i = 0;
 $max = 0;
 while(1) {
  $68 = $i;
  $69 = ($68|0)<(128);
  $70 = $1;
  if (!($69)) {
   break;
  }
  $71 = $i;
  $72 = (($ptable) + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  _write8($70,$73);
  $74 = $i;
  $75 = (($ptable) + ($74)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $max;
  $79 = $78&255;
  $80 = ($77|0)>($79|0);
  if ($80) {
   $81 = $i;
   $82 = (($ptable) + ($81)|0);
   $83 = HEAP8[$82>>0]|0;
   $max = $83;
  }
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 _write32b($70,1294879534);
 $86 = $0;
 $87 = $pos;
 (_fseek(($86|0),($87|0),0)|0);
 $i = 0;
 while(1) {
  $88 = $i;
  $89 = $max;
  $90 = $89&255;
  $91 = ($88|0)<=($90|0);
  if (!($91)) {
   break;
  }
  $92 = $0;
  $93 = (_read16b($92)|0);
  $94 = $i;
  $95 = (($paddr) + ($94<<1)|0);
  HEAP16[$95>>1] = $93;
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $i = 0;
 while(1) {
  $98 = $i;
  $99 = $max;
  $100 = $99&255;
  $101 = ($98|0)<=($100|0);
  $102 = $0;
  if (!($101)) {
   break;
  }
  $103 = $i;
  $104 = (($paddr) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  (_fseek(($102|0),($106|0),0)|0);
  $k = 0;
  while(1) {
   $107 = $k;
   $108 = ($107|0)<(256);
   if (!($108)) {
    break;
   }
   ;HEAP8[$ptk_tab>>0]=0|0;HEAP8[$ptk_tab+1>>0]=0|0;HEAP8[$ptk_tab+2>>0]=0|0;HEAP8[$ptk_tab+3>>0]=0|0;HEAP8[$ptk_tab+4>>0]=0|0;
   $109 = $0;
   $110 = (_read8($109)|0);
   $c1 = $110;
   $111 = $c1;
   $112 = $111&255;
   $113 = $112 & 128;
   $114 = ($113|0)==(0);
   do {
    if ($114) {
     $115 = $0;
     $116 = (_read8($115)|0);
     $c2 = $116;
     $117 = $c1;
     $118 = $117&255;
     $119 = $118 << 4;
     $120 = $119 & 48;
     $121 = $c2;
     $122 = $121&255;
     $123 = $122 >> 4;
     $124 = $123 & 15;
     $125 = $120 | $124;
     $126 = $125&255;
     $note = $126;
     $127 = $note;
     $128 = $127&255;
     $129 = (8240 + ($128<<1)|0);
     $130 = HEAP8[$129>>0]|0;
     HEAP8[$ptk_tab>>0] = $130;
     $131 = $note;
     $132 = $131&255;
     $133 = (8240 + ($132<<1)|0);
     $134 = ((($133)) + 1|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = ((($ptk_tab)) + 1|0);
     HEAP8[$136>>0] = $135;
     $137 = $c1;
     $138 = $137&255;
     $139 = $138 >> 2;
     $140 = $139 & 31;
     $141 = $140&255;
     $ins = $141;
     $142 = $ins;
     $143 = $142&255;
     $144 = $143 & 240;
     $145 = HEAP8[$ptk_tab>>0]|0;
     $146 = $145&255;
     $147 = $146 | $144;
     $148 = $147&255;
     HEAP8[$ptk_tab>>0] = $148;
     $149 = $ins;
     $150 = $149&255;
     $151 = $150 << 4;
     $152 = $151 & 240;
     $153 = $152&255;
     $154 = ((($ptk_tab)) + 2|0);
     HEAP8[$154>>0] = $153;
     $155 = $c2;
     $156 = $155&255;
     $157 = $156 & 15;
     $158 = $157&255;
     $fxt = $158;
     $159 = $fxt;
     $160 = $159&255;
     $161 = ((($ptk_tab)) + 2|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = $162&255;
     $164 = $163 | $160;
     $165 = $164&255;
     HEAP8[$161>>0] = $165;
     $fxp = 0;
     $166 = $fxp;
     $167 = ((($ptk_tab)) + 3|0);
     HEAP8[$167>>0] = $166;
     $168 = $1;
     (_fwrite(($ptk_tab|0),4,1,($168|0))|0);
    } else {
     $169 = $c1;
     $170 = $169&255;
     $171 = ($170|0)==(255);
     if ($171) {
      ;HEAP8[$ptk_tab>>0]=0|0;HEAP8[$ptk_tab+1>>0]=0|0;HEAP8[$ptk_tab+2>>0]=0|0;HEAP8[$ptk_tab+3>>0]=0|0;HEAP8[$ptk_tab+4>>0]=0|0;
      $172 = $1;
      (_fwrite(($ptk_tab|0),4,1,($172|0))|0);
      break;
     } else {
      $173 = $0;
      $174 = (_read8($173)|0);
      $c2 = $174;
      $175 = $0;
      $176 = (_read8($175)|0);
      $c3 = $176;
      $177 = $c1;
      $178 = $177&255;
      $179 = $178 << 4;
      $180 = $179 & 48;
      $181 = $c2;
      $182 = $181&255;
      $183 = $182 >> 4;
      $184 = $183 & 15;
      $185 = $180 | $184;
      $186 = $185&255;
      $note = $186;
      $187 = $note;
      $188 = $187&255;
      $189 = (8240 + ($188<<1)|0);
      $190 = HEAP8[$189>>0]|0;
      HEAP8[$ptk_tab>>0] = $190;
      $191 = $note;
      $192 = $191&255;
      $193 = (8240 + ($192<<1)|0);
      $194 = ((($193)) + 1|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = ((($ptk_tab)) + 1|0);
      HEAP8[$196>>0] = $195;
      $197 = $c1;
      $198 = $197&255;
      $199 = $198 >> 2;
      $200 = $199 & 31;
      $201 = $200&255;
      $ins = $201;
      $202 = $ins;
      $203 = $202&255;
      $204 = $203 & 240;
      $205 = HEAP8[$ptk_tab>>0]|0;
      $206 = $205&255;
      $207 = $206 | $204;
      $208 = $207&255;
      HEAP8[$ptk_tab>>0] = $208;
      $209 = $ins;
      $210 = $209&255;
      $211 = $210 << 4;
      $212 = $211 & 240;
      $213 = $212&255;
      $214 = ((($ptk_tab)) + 2|0);
      HEAP8[$214>>0] = $213;
      $215 = $c2;
      $216 = $215&255;
      $217 = $216 & 15;
      $218 = $217&255;
      $fxt = $218;
      $219 = $fxt;
      $220 = $219&255;
      $221 = ((($ptk_tab)) + 2|0);
      $222 = HEAP8[$221>>0]|0;
      $223 = $222&255;
      $224 = $223 | $220;
      $225 = $224&255;
      HEAP8[$221>>0] = $225;
      $226 = $c3;
      $fxp = $226;
      $227 = $fxp;
      $228 = ((($ptk_tab)) + 3|0);
      HEAP8[$228>>0] = $227;
      $229 = $1;
      (_fwrite(($ptk_tab|0),4,1,($229|0))|0);
      break;
     }
    }
   } while(0);
   $230 = $k;
   $231 = (($230) + 1)|0;
   $k = $231;
  }
  $232 = $i;
  $233 = (($232) + 1)|0;
  $i = $233;
 }
 $234 = $smp_offs;
 (_fseek(($102|0),($234|0),0)|0);
 $235 = $1;
 $236 = $0;
 $237 = $ssize;
 (_pw_move_data($235,$236,$237)|0);
 STACKTOP = sp;return 0;
}
function _test_eu($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 $8 = $start;
 $9 = (($8) + 950)|0;
 $10 = $1;
 $11 = (($10) + ($9)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $j = $13;
 $14 = $j;
 $15 = ($14|0)==(0);
 $16 = $j;
 $17 = ($16|0)>(127);
 $or$cond = $15 | $17;
 if ($or$cond) {
  $0 = -1;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 $k = 0;
 while(1) {
  $18 = $k;
  $19 = ($18|0)<(31);
  $20 = $start;
  if (!($19)) {
   label = 15;
   break;
  }
  $21 = (($20) + 42)|0;
  $22 = $k;
  $23 = ($22*30)|0;
  $24 = (($21) + ($23))|0;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 << 8;
  $30 = $start;
  $31 = (($30) + 43)|0;
  $32 = $k;
  $33 = ($32*30)|0;
  $34 = (($31) + ($33))|0;
  $35 = $1;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($29) + ($38))|0;
  $o = $39;
  $40 = $start;
  $41 = (($40) + 46)|0;
  $42 = $k;
  $43 = ($42*30)|0;
  $44 = (($41) + ($43))|0;
  $45 = $1;
  $46 = (($45) + ($44)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 8;
  $50 = $start;
  $51 = (($50) + 47)|0;
  $52 = $k;
  $53 = ($52*30)|0;
  $54 = (($51) + ($53))|0;
  $55 = $1;
  $56 = (($55) + ($54)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (($49) + ($58))|0;
  $m = $59;
  $60 = $start;
  $61 = (($60) + 48)|0;
  $62 = $k;
  $63 = ($62*30)|0;
  $64 = (($61) + ($63))|0;
  $65 = $1;
  $66 = (($65) + ($64)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 << 8;
  $70 = $start;
  $71 = (($70) + 49)|0;
  $72 = $k;
  $73 = ($72*30)|0;
  $74 = (($71) + ($73))|0;
  $75 = $1;
  $76 = (($75) + ($74)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = (($69) + ($78))|0;
  $n = $79;
  $80 = $o;
  $81 = $80<<1;
  $o = $81;
  $82 = $m;
  $83 = $82<<1;
  $m = $83;
  $84 = $n;
  $85 = $84<<1;
  $n = $85;
  $86 = $o;
  $87 = ($86|0)>(65535);
  $88 = $m;
  $89 = ($88|0)>(65535);
  $or$cond3 = $87 | $89;
  $90 = $n;
  $91 = ($90|0)>(65535);
  $or$cond5 = $or$cond3 | $91;
  if ($or$cond5) {
   label = 8;
   break;
  }
  $92 = $m;
  $93 = $n;
  $94 = (($92) + ($93))|0;
  $95 = $o;
  $96 = (($95) + 2)|0;
  $97 = ($94|0)>($96|0);
  if ($97) {
   label = 10;
   break;
  }
  $98 = $start;
  $99 = (($98) + 44)|0;
  $100 = $k;
  $101 = ($100*30)|0;
  $102 = (($99) + ($101))|0;
  $103 = $1;
  $104 = (($103) + ($102)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = ($106|0)>(15);
  if ($107) {
   label = 13;
   break;
  }
  $108 = $start;
  $109 = (($108) + 45)|0;
  $110 = $k;
  $111 = ($110*30)|0;
  $112 = (($109) + ($111))|0;
  $113 = $1;
  $114 = (($113) + ($112)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = ($116|0)>(64);
  if ($117) {
   label = 13;
   break;
  }
  $118 = $k;
  $119 = (($118) + 1)|0;
  $k = $119;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 15) {
  $120 = (($20) + 1080)|0;
  $121 = $1;
  $122 = (($121) + ($120)|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $125 = $124 << 24;
  $126 = $start;
  $127 = (($126) + 1081)|0;
  $128 = $1;
  $129 = (($128) + ($127)|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = $131 << 16;
  $133 = (($125) + ($132))|0;
  $134 = $start;
  $135 = (($134) + 1082)|0;
  $136 = $1;
  $137 = (($136) + ($135)|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = $138&255;
  $140 = $139 << 8;
  $141 = (($133) + ($140))|0;
  $142 = $start;
  $143 = (($142) + 1083)|0;
  $144 = $1;
  $145 = (($144) + ($143)|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = (($141) + ($147))|0;
  $l = $148;
  $149 = $l;
  $150 = ($149|0)<(1084);
  if ($150) {
   $0 = -1;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  $m = 0;
  $k = 0;
  while(1) {
   $151 = $k;
   $152 = $j;
   $153 = ($151|0)<($152|0);
   if (!($153)) {
    break;
   }
   $154 = $start;
   $155 = (($154) + 952)|0;
   $156 = $k;
   $157 = (($155) + ($156))|0;
   $158 = $1;
   $159 = (($158) + ($157)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $n = $161;
   $162 = $n;
   $163 = $m;
   $164 = ($162|0)>($163|0);
   if ($164) {
    $165 = $n;
    $m = $165;
   }
   $166 = $n;
   $167 = ($166|0)>(127);
   if ($167) {
    label = 22;
    break;
   }
   $168 = $k;
   $169 = (($168) + 1)|0;
   $k = $169;
  }
  if ((label|0) == 22) {
   $0 = -1;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  $170 = $k;
  $171 = (($170) + 2)|0;
  $k = $171;
  while(1) {
   $172 = $k;
   $173 = ($172|0)!=(128);
   if (!($173)) {
    break;
   }
   $174 = $start;
   $175 = (($174) + 952)|0;
   $176 = $k;
   $177 = (($175) + ($176))|0;
   $178 = $1;
   $179 = (($178) + ($177)|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = ($181|0)!=(0);
   if ($182) {
    label = 27;
    break;
   }
   $183 = $k;
   $184 = (($183) + 1)|0;
   $k = $184;
  }
  if ((label|0) == 27) {
   $0 = -1;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  $185 = $m;
  $186 = (($185) + 1)|0;
  $m = $186;
  $n = 0;
  $j = 999999;
  $187 = $3;
  $188 = $start;
  $189 = $m;
  $190 = $189<<2;
  $191 = $190<<1;
  $192 = (($188) + ($191))|0;
  $193 = (($192) + 1085)|0;
  $194 = ($187|0)<($193|0);
  if ($194) {
   $195 = $start;
   $196 = $m;
   $197 = $196<<2;
   $198 = $197<<1;
   $199 = (($195) + ($198))|0;
   $200 = (($199) + 1085)|0;
   $201 = $3;
   $202 = (($200) - ($201))|0;
   $0 = $202;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  $k = 0;
  while(1) {
   $203 = $k;
   $204 = $m;
   $205 = $204<<2;
   $206 = ($203|0)<($205|0);
   if (!($206)) {
    break;
   }
   $207 = $start;
   $208 = $k;
   $209 = $208<<1;
   $210 = (($207) + ($209))|0;
   $211 = (($210) + 1084)|0;
   $212 = $1;
   $213 = (($212) + ($211)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 << 8;
   $217 = $start;
   $218 = $k;
   $219 = $218<<1;
   $220 = (($217) + ($219))|0;
   $221 = (($220) + 1085)|0;
   $222 = $1;
   $223 = (($222) + ($221)|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224&255;
   $226 = (($216) + ($225))|0;
   $o = $226;
   $227 = $o;
   $228 = $l;
   $229 = ($227|0)>($228|0);
   $230 = $o;
   $231 = ($230|0)<(1084);
   $or$cond7 = $229 | $231;
   if ($or$cond7) {
    label = 34;
    break;
   }
   $232 = $o;
   $233 = $n;
   $234 = ($232|0)>($233|0);
   if ($234) {
    $235 = $o;
    $n = $235;
   }
   $236 = $o;
   $237 = $j;
   $238 = ($236|0)<($237|0);
   if ($238) {
    $239 = $o;
    $j = $239;
   }
   $240 = $k;
   $241 = (($240) + 1)|0;
   $k = $241;
  }
  if ((label|0) == 34) {
   $0 = -1;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  $242 = $j;
  $k = $242;
  L61: while(1) {
   $243 = $k;
   $244 = $o;
   $245 = ($243|0)<($244|0);
   if (!($245)) {
    label = 55;
    break;
   }
   $246 = $start;
   $247 = $k;
   $248 = (($246) + ($247))|0;
   $249 = $1;
   $250 = (($249) + ($248)|0);
   $251 = HEAP8[$250>>0]|0;
   $252 = $251&255;
   $253 = $252 & 192;
   $254 = ($253|0)==(192);
   do {
    if (!($254)) {
     $255 = $start;
     $256 = $k;
     $257 = (($255) + ($256))|0;
     $258 = $1;
     $259 = (($258) + ($257)|0);
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = $261 & 192;
     $263 = ($262|0)==(128);
     if ($263) {
      $264 = $k;
      $265 = (($264) + 2)|0;
      $k = $265;
      break;
     }
     $266 = $start;
     $267 = $k;
     $268 = (($266) + ($267))|0;
     $269 = $1;
     $270 = (($269) + ($268)|0);
     $271 = HEAP8[$270>>0]|0;
     $272 = $271&255;
     $273 = $272 & 192;
     $274 = ($273|0)==(64);
     $275 = $start;
     $276 = $k;
     $277 = (($275) + ($276))|0;
     $278 = $1;
     $279 = (($278) + ($277)|0);
     $280 = HEAP8[$279>>0]|0;
     $281 = $280&255;
     if ($274) {
      $282 = $281 & 63;
      $283 = ($282|0)==(0);
      if ($283) {
       $284 = $start;
       $285 = $k;
       $286 = (($284) + ($285))|0;
       $287 = (($286) + 1)|0;
       $288 = $1;
       $289 = (($288) + ($287)|0);
       $290 = HEAP8[$289>>0]|0;
       $291 = $290&255;
       $292 = ($291|0)==(0);
       if ($292) {
        label = 48;
        break L61;
       }
      }
      $293 = $k;
      $294 = (($293) + 1)|0;
      $k = $294;
      break;
     } else {
      $295 = $281 & 192;
      $296 = ($295|0)==(0);
      if (!($296)) {
       break;
      }
      $297 = $start;
      $298 = $k;
      $299 = (($297) + ($298))|0;
      $300 = $1;
      $301 = (($300) + ($299)|0);
      $302 = HEAP8[$301>>0]|0;
      $303 = $302&255;
      $304 = ($303|0)>(19);
      if ($304) {
       label = 52;
       break L61;
      }
      $305 = $k;
      $306 = (($305) + 3)|0;
      $k = $306;
      break;
     }
    }
   } while(0);
   $307 = $k;
   $308 = (($307) + 1)|0;
   $k = $308;
  }
  if ((label|0) == 48) {
   $0 = -1;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  else if ((label|0) == 52) {
   $0 = -1;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
  else if ((label|0) == 55) {
   $309 = $1;
   $310 = $2;
   _pw_read_title($309,$310,20);
   $0 = 0;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
 }
 return (0)|0;
}
function _depack_eu($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $i = 0, $j = 0, $k = 0, $npat = 0, $smp_addr = 0, $ssize = 0, $tmp = 0, $trk_addr = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2088|0;
 $trk_addr = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $0;
 (_fread(($tmp|0),1080,1,($2|0))|0);
 $3 = $1;
 (_fwrite(($tmp|0),1080,1,($3|0))|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ($6*30)|0;
  $8 = (($tmp) + ($7)|0);
  $9 = ((($8)) + 42|0);
  $10 = (_readmem16b($9)|0);
  $11 = $10&65535;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $i = 0;
 $npat = 0;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<(128);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = (952 + ($19))|0;
  $21 = (($tmp) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $npat;
  $25 = ($23|0)>($24|0);
  if ($25) {
   $26 = $i;
   $27 = (952 + ($26))|0;
   $28 = (($tmp) + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $npat = $30;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $npat;
 $34 = (($33) + 1)|0;
 $npat = $34;
 $35 = $1;
 _write32b($35,1294879534);
 $36 = $0;
 $37 = (_read32b($36)|0);
 $smp_addr = $37;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $npat;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $j = 0;
  while(1) {
   $41 = $j;
   $42 = ($41|0)<(4);
   if (!($42)) {
    break;
   }
   $43 = $0;
   $44 = (_read16b($43)|0);
   $45 = $44&65535;
   $46 = $j;
   $47 = $i;
   $48 = (($trk_addr) + ($47<<4)|0);
   $49 = (($48) + ($46<<2)|0);
   HEAP32[$49>>2] = $45;
   $50 = $j;
   $51 = (($50) + 1)|0;
   $j = $51;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = $npat;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $57 = $j;
   $58 = ($57|0)<(4);
   if (!($58)) {
    break;
   }
   $59 = $0;
   $60 = $j;
   $61 = $i;
   $62 = (($trk_addr) + ($61<<4)|0);
   $63 = (($62) + ($60<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   (_fseek(($59|0),($64|0),0)|0);
   $k = 0;
   while(1) {
    $65 = $k;
    $66 = ($65|0)<(64);
    if (!($66)) {
     break;
    }
    $67 = $k;
    $68 = $67<<4;
    $69 = $j;
    $70 = $69<<2;
    $71 = (($68) + ($70))|0;
    $72 = (($tmp) + ($71)|0);
    $x = $72;
    $73 = $0;
    $74 = (_read8($73)|0);
    $c1 = $74;
    $75 = $c1;
    $76 = $75&255;
    $77 = $76 & 192;
    $78 = ($77|0)==(0);
    $79 = $c1;
    do {
     if ($78) {
      $80 = $x;
      $81 = ((($80)) + 1|0);
      $x = $81;
      HEAP8[$80>>0] = $79;
      $82 = $0;
      $83 = (_read8($82)|0);
      $84 = $x;
      $85 = ((($84)) + 1|0);
      $x = $85;
      HEAP8[$84>>0] = $83;
      $86 = $0;
      $87 = (_read8($86)|0);
      $88 = $x;
      $89 = ((($88)) + 1|0);
      $x = $89;
      HEAP8[$88>>0] = $87;
      $90 = $0;
      $91 = (_read8($90)|0);
      $92 = $x;
      $93 = ((($92)) + 1|0);
      $x = $93;
      HEAP8[$92>>0] = $91;
     } else {
      $94 = $79&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(192);
      $97 = $c1;
      $98 = $97&255;
      if ($96) {
       $99 = $98 & 63;
       $100 = $k;
       $101 = (($100) + ($99))|0;
       $k = $101;
       break;
      }
      $102 = $98 & 192;
      $103 = ($102|0)==(64);
      if ($103) {
       $104 = $x;
       $105 = ((($104)) + 2|0);
       $x = $105;
       $106 = $c1;
       $107 = $106&255;
       $108 = $107 & 15;
       $109 = $108&255;
       $110 = $x;
       $111 = ((($110)) + 1|0);
       $x = $111;
       HEAP8[$110>>0] = $109;
       $112 = $0;
       $113 = (_read8($112)|0);
       $114 = $x;
       $115 = ((($114)) + 1|0);
       $x = $115;
       HEAP8[$114>>0] = $113;
       break;
      }
      $116 = $c1;
      $117 = $116&255;
      $118 = $117 & 192;
      $119 = ($118|0)==(128);
      if ($119) {
       $120 = $0;
       $121 = (_read8($120)|0);
       $122 = $x;
       $123 = ((($122)) + 1|0);
       $x = $123;
       HEAP8[$122>>0] = $121;
       $124 = $0;
       $125 = (_read8($124)|0);
       $126 = $x;
       $127 = ((($126)) + 1|0);
       $x = $127;
       HEAP8[$126>>0] = $125;
       $128 = $c1;
       $129 = $128&255;
       $130 = $129 << 4;
       $131 = $130 & 240;
       $132 = $131&255;
       $133 = $x;
       $134 = ((($133)) + 1|0);
       $x = $134;
       HEAP8[$133>>0] = $132;
      }
     }
    } while(0);
    $135 = $k;
    $136 = (($135) + 1)|0;
    $k = $136;
   }
   $137 = $j;
   $138 = (($137) + 1)|0;
   $j = $138;
  }
  $139 = $1;
  (_fwrite(($tmp|0),1024,1,($139|0))|0);
  $140 = $i;
  $141 = (($140) + 1)|0;
  $i = $141;
 }
 $142 = $0;
 $143 = $smp_addr;
 (_fseek(($142|0),($143|0),0)|0);
 $144 = $1;
 $145 = $0;
 $146 = $ssize;
 (_pw_move_data($144,$145,$146)|0);
 STACKTOP = sp;return 0;
}
function _test_fcm($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0;
 var $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(285);
 if ($5) {
  $6 = $3;
  $7 = (285 - ($6))|0;
  $0 = $7;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(70);
 if (!($11)) {
  $12 = $1;
  $13 = ((($12)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(67);
  if (!($16)) {
   $17 = $1;
   $18 = ((($17)) + 2|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)!=(45);
   if (!($21)) {
    $22 = $1;
    $23 = ((($22)) + 3|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($25|0)!=(77);
    if (!($26)) {
     $27 = $start;
     $28 = (($27) + 4)|0;
     $29 = $1;
     $30 = (($29) + ($28)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = ($32|0)!=(1);
     if ($33) {
      $0 = -1;
      $58 = $0;
      STACKTOP = sp;return ($58|0);
     }
     $34 = $start;
     $35 = (($34) + 5)|0;
     $36 = $1;
     $37 = (($36) + ($35)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = ($39|0)!=(0);
     if ($40) {
      $0 = -1;
      $58 = $0;
      STACKTOP = sp;return ($58|0);
     }
     $j = 0;
     while(1) {
      $41 = $j;
      $42 = ($41|0)<(31);
      if (!($42)) {
       label = 17;
       break;
      }
      $43 = $start;
      $44 = (($43) + 37)|0;
      $45 = $j;
      $46 = $45<<3;
      $47 = (($44) + ($46))|0;
      $48 = $1;
      $49 = (($48) + ($47)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      $52 = ($51|0)>(64);
      if ($52) {
       label = 15;
       break;
      }
      $53 = $j;
      $54 = (($53) + 1)|0;
      $j = $54;
     }
     if ((label|0) == 15) {
      $0 = -1;
      $58 = $0;
      STACKTOP = sp;return ($58|0);
     }
     else if ((label|0) == 17) {
      $55 = $1;
      $56 = ((($55)) + 10|0);
      $57 = $2;
      _pw_read_title($56,$57,20);
      $0 = 0;
      $58 = $0;
      STACKTOP = sp;return ($58|0);
     }
    }
   }
  }
 }
 $0 = -1;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _depack_fcm($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $c1 = 0, $i = 0, $pat_max = 0, $pat_pos = 0, $ptable = 0, $size = 0, $ssize = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_read32b($2)|0);
 $3 = $0;
 (_read16b($3)|0);
 $4 = $0;
 (_read32b($4)|0);
 $5 = $1;
 $6 = $0;
 (_pw_move_data($5,$6,20)|0);
 $7 = $0;
 (_read32b($7)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   break;
  }
  $10 = $1;
  (_pw_write_zero($10,22)|0);
  $11 = $1;
  $12 = $0;
  $13 = (_read16b($12)|0);
  $14 = $13&65535;
  $size = $14;
  $15 = $14&65535;
  _write16b($11,$15);
  $16 = $size;
  $17 = $16<<1;
  $18 = $ssize;
  $19 = (($18) + ($17))|0;
  $ssize = $19;
  $20 = $1;
  $21 = $0;
  $22 = (_read8($21)|0);
  _write8($20,$22);
  $23 = $1;
  $24 = $0;
  $25 = (_read8($24)|0);
  _write8($23,$25);
  $26 = $1;
  $27 = $0;
  $28 = (_read16b($27)|0);
  _write16b($26,$28);
  $29 = $0;
  $30 = (_read16b($29)|0);
  $31 = $30&65535;
  $size = $31;
  $32 = $size;
  $33 = ($32|0)==(0);
  $$ = $33 ? 1 : $31;
  $size = $$;
  $34 = $1;
  $35 = $size;
  $36 = $35&65535;
  _write16b($34,$36);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $39 = $0;
 (_read32b($39)|0);
 $40 = $1;
 $41 = $0;
 $42 = (_read8($41)|0);
 $pat_pos = $42;
 _write8($40,$42);
 $43 = $1;
 $44 = $0;
 $45 = (_read8($44)|0);
 _write8($43,$45);
 $46 = $0;
 (_read32b($46)|0);
 $i = 0;
 $pat_max = 0;
 while(1) {
  $47 = $i;
  $48 = $pat_pos;
  $49 = $48&255;
  $50 = ($47|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $1;
  $52 = $0;
  $53 = (_read8($52)|0);
  $c1 = $53;
  _write8($51,$53);
  $54 = $c1;
  $55 = $54&255;
  $56 = $pat_max;
  $57 = $56&255;
  $58 = ($55|0)>($57|0);
  if ($58) {
   $59 = $c1;
   $pat_max = $59;
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 while(1) {
  $62 = $i;
  $63 = ($62|0)<(128);
  $64 = $1;
  if (!($63)) {
   break;
  }
  _write8($64,0);
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 _write32b($64,1294879534);
 $67 = $0;
 (_read32b($67)|0);
 $i = 0;
 while(1) {
  $68 = $i;
  $69 = $pat_max;
  $70 = $69&255;
  $71 = ($68|0)<=($70|0);
  if (!($71)) {
   break;
  }
  $72 = $1;
  $73 = $0;
  (_pw_move_data($72,$73,1024)|0);
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $76 = $0;
 (_read32b($76)|0);
 $77 = $1;
 $78 = $0;
 $79 = $ssize;
 (_pw_move_data($77,$78,$79)|0);
 STACKTOP = sp;return 0;
}
function _test_fuchs($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $1;
 $5 = ((($4)) + 192|0);
 $6 = (_readmem32b($5)|0);
 $7 = ($6|0)!=(1397706311);
 if ($7) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $8 = $start;
 $9 = (($8) + 10)|0;
 $10 = $1;
 $11 = (($10) + ($9)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 24;
 $15 = $start;
 $16 = (($15) + 11)|0;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = (($14) + ($21))|0;
 $23 = $start;
 $24 = (($23) + 12)|0;
 $25 = $1;
 $26 = (($25) + ($24)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $30 = (($22) + ($29))|0;
 $31 = $start;
 $32 = (($31) + 13)|0;
 $33 = $1;
 $34 = (($33) + ($32)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = (($30) + ($36))|0;
 $j = $37;
 $38 = $j;
 $39 = ($38|0)<=(2);
 $40 = $j;
 $41 = ($40|0)>=(1048560);
 $or$cond = $39 | $41;
 if ($or$cond) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 $m = 0;
 $k = 0;
 while(1) {
  $42 = $k;
  $43 = ($42|0)<(16);
  if (!($43)) {
   label = 12;
   break;
  }
  $44 = $start;
  $45 = $k;
  $46 = $45<<1;
  $47 = (($44) + ($46))|0;
  $48 = (($47) + 14)|0;
  $49 = $1;
  $50 = (($49) + ($48)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $52 << 8;
  $54 = $start;
  $55 = $k;
  $56 = $55<<1;
  $57 = (($54) + ($56))|0;
  $58 = (($57) + 15)|0;
  $59 = $1;
  $60 = (($59) + ($58)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($53) + ($62))|0;
  $o = $63;
  $64 = $start;
  $65 = $k;
  $66 = $65<<1;
  $67 = (($64) + ($66))|0;
  $68 = (($67) + 78)|0;
  $69 = $1;
  $70 = (($69) + ($68)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $72 << 8;
  $74 = $start;
  $75 = $k;
  $76 = $75<<1;
  $77 = (($74) + ($76))|0;
  $78 = (($77) + 79)|0;
  $79 = $1;
  $80 = (($79) + ($78)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = (($73) + ($82))|0;
  $n = $83;
  $84 = $start;
  $85 = (($84) + 46)|0;
  $86 = $k;
  $87 = $86<<1;
  $88 = (($85) + ($87))|0;
  $89 = $1;
  $90 = (($89) + ($88)|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)>(64);
  if ($93) {
   label = 8;
   break;
  }
  $94 = $o;
  $95 = $n;
  $96 = ($94|0)<($95|0);
  if ($96) {
   label = 10;
   break;
  }
  $97 = $o;
  $98 = $m;
  $99 = (($98) + ($97))|0;
  $m = $99;
  $100 = $k;
  $101 = (($100) + 1)|0;
  $k = $101;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 else if ((label|0) == 12) {
  $102 = $m;
  $103 = ($102|0)<=(2);
  if (!($103)) {
   $104 = $m;
   $105 = $j;
   $106 = ($104|0)>($105|0);
   if (!($106)) {
    $k = 0;
    $j = 0;
    while(1) {
     $107 = $j;
     $108 = ($107|0)<(40);
     if (!($108)) {
      label = 22;
      break;
     }
     $109 = $start;
     $110 = $j;
     $111 = $110<<1;
     $112 = (($109) + ($111))|0;
     $113 = (($112) + 113)|0;
     $114 = $1;
     $115 = (($114) + ($113)|0);
     $116 = HEAP8[$115>>0]|0;
     $117 = $116&255;
     $n = $117;
     $118 = $n;
     $119 = ($118|0)>(40);
     if ($119) {
      label = 18;
      break;
     }
     $120 = $n;
     $121 = $k;
     $122 = ($120|0)>($121|0);
     if ($122) {
      $123 = $n;
      $k = $123;
     }
     $124 = $j;
     $125 = (($124) + 1)|0;
     $j = $125;
    }
    if ((label|0) == 18) {
     $0 = -1;
     $127 = $0;
     STACKTOP = sp;return ($127|0);
    }
    else if ((label|0) == 22) {
     $126 = $2;
     _pw_read_title(0,$126,0);
     $0 = 0;
     $127 = $0;
     STACKTOP = sp;return ($127|0);
    }
   }
  }
  $0 = -1;
  $127 = $0;
  STACKTOP = sp;return ($127|0);
 }
 return (0)|0;
}
function _depack_fuchs($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $LoopStart = 0, $SampleSizes = 0, $c1 = 0, $i = 0, $j = 0, $pmax = 0, $ssize = 0, $tmp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $SampleSizes = sp + 72|0;
 $LoopStart = sp + 8|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$SampleSizes; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$LoopStart; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,1080)|0);
 $3 = $1;
 (_fseek(($3|0),0,0)|0);
 $4 = $1;
 $5 = $0;
 (_pw_move_data($4,$5,10)|0);
 $6 = $0;
 $7 = (_read32b($6)|0);
 $ssize = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(16);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = $i;
  $12 = ($11*30)|0;
  $13 = (42 + ($12))|0;
  (_fseek(($10|0),($13|0),0)|0);
  $14 = $1;
  $15 = $0;
  $16 = (_read16b($15)|0);
  $17 = $16&65535;
  $18 = $i;
  $19 = (($SampleSizes) + ($18<<2)|0);
  HEAP32[$19>>2] = $17;
  $20 = (($17|0) / 2)&-1;
  $21 = $20&65535;
  _write16b($14,$21);
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(16);
  if (!($25)) {
   break;
  }
  $26 = $1;
  $27 = $i;
  $28 = ($27*30)|0;
  $29 = (45 + ($28))|0;
  (_fseek(($26|0),($29|0),0)|0);
  $30 = $0;
  (_fseek(($30|0),1,1)|0);
  $31 = $1;
  $32 = $0;
  $33 = (_read8($32)|0);
  _write8($31,$33);
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = ($36|0)<(16);
  if (!($37)) {
   break;
  }
  $38 = $1;
  $39 = $i;
  $40 = ($39*30)|0;
  $41 = (46 + ($40))|0;
  (_fseek(($38|0),($41|0),0)|0);
  $42 = $1;
  $43 = $0;
  $44 = (_read16b($43)|0);
  $45 = $44&65535;
  $46 = $i;
  $47 = (($LoopStart) + ($46<<2)|0);
  HEAP32[$47>>2] = $45;
  $48 = (($45|0) / 2)&-1;
  $49 = $48&255;
  _write8($42,$49);
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = ($52|0)<(16);
  if (!($53)) {
   break;
  }
  $54 = $1;
  $55 = $i;
  $56 = ($55*30)|0;
  $57 = (48 + ($56))|0;
  (_fseek(($54|0),($57|0),0)|0);
  $58 = $i;
  $59 = (($SampleSizes) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $i;
  $62 = (($LoopStart) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60) - ($63))|0;
  $j = $64;
  $65 = $j;
  $66 = ($65|0)==(0);
  if ($66) {
   label = 14;
  } else {
   $67 = $i;
   $68 = (($LoopStart) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(0);
   if ($70) {
    label = 14;
   } else {
    $72 = $1;
    $73 = $j;
    $74 = (($73|0) / 2)&-1;
    $75 = $74&65535;
    _write16b($72,$75);
   }
  }
  if ((label|0) == 14) {
   label = 0;
   $71 = $1;
   _write16b($71,1);
  }
  $76 = $i;
  $77 = (($76) + 1)|0;
  $i = $77;
 }
 $i = 16;
 while(1) {
  $78 = $i;
  $79 = ($78|0)<(31);
  $80 = $1;
  if (!($79)) {
   break;
  }
  $81 = $i;
  $82 = ($81*30)|0;
  $83 = (48 + ($82))|0;
  (_fseek(($80|0),($83|0),0)|0);
  $84 = $1;
  _write16b($84,1);
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 (_fseek(($80|0),950,0)|0);
 $87 = $0;
 (_fseek(($87|0),1,1)|0);
 $88 = $1;
 $89 = $0;
 $90 = (_read8($89)|0);
 _write8($88,$90);
 $91 = $1;
 _write8($91,127);
 $i = 0;
 $pmax = 0;
 while(1) {
  $92 = $i;
  $93 = ($92|0)<(40);
  if (!($93)) {
   break;
  }
  $94 = $0;
  (_fseek(($94|0),1,1)|0);
  $95 = $1;
  $96 = $0;
  $97 = (_read8($96)|0);
  $c1 = $97;
  _write8($95,$97);
  $98 = $c1;
  $99 = $98&255;
  $100 = $pmax;
  $101 = $100&255;
  $102 = ($99|0)>($101|0);
  if ($102) {
   $103 = $c1;
   $pmax = $103;
  }
  $104 = $i;
  $105 = (($104) + 1)|0;
  $i = $105;
 }
 $106 = $1;
 (_fseek(($106|0),0,2)|0);
 $107 = $1;
 _write32b($107,1294879534);
 $108 = $0;
 (_fseek(($108|0),4,1)|0);
 $109 = $0;
 $110 = (_read32b($109)|0);
 $j = $110;
 $111 = $j;
 $112 = (_malloc($111)|0);
 $tmp = $112;
 $113 = $tmp;
 $114 = $j;
 $115 = $0;
 (_fread(($113|0),($114|0),1,($115|0))|0);
 $i = 0;
 while(1) {
  $116 = $i;
  $117 = $j;
  $118 = ($116|0)<($117|0);
  if (!($118)) {
   break;
  }
  $119 = $i;
  $120 = (($119) + 2)|0;
  $121 = $tmp;
  $122 = (($121) + ($120)|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $125 = $124 & 15;
  $126 = ($125|0)==(12);
  do {
   if ($126) {
    $127 = $i;
    $128 = (($127) + 3)|0;
    $129 = $tmp;
    $130 = (($129) + ($128)|0);
    $131 = HEAP8[$130>>0]|0;
    $c1 = $131;
    $132 = $c1;
    $133 = $132&255;
    $134 = ($133|0)<=(9);
    $135 = $c1;
    if ($134) {
     $136 = $i;
     $137 = (($136) + 3)|0;
     $138 = $tmp;
     $139 = (($138) + ($137)|0);
     HEAP8[$139>>0] = $135;
     break;
    }
    $140 = $135&255;
    $141 = ($140|0)>=(16);
    if ($141) {
     $142 = $c1;
     $143 = $142&255;
     $144 = ($143|0)<=(25);
     if ($144) {
      $145 = $c1;
      $146 = $145&255;
      $147 = (($146) - 6)|0;
      $148 = $147&255;
      $149 = $i;
      $150 = (($149) + 3)|0;
      $151 = $tmp;
      $152 = (($151) + ($150)|0);
      HEAP8[$152>>0] = $148;
      break;
     }
    }
    $153 = $c1;
    $154 = $153&255;
    $155 = ($154|0)>=(32);
    if ($155) {
     $156 = $c1;
     $157 = $156&255;
     $158 = ($157|0)<=(41);
     if ($158) {
      $159 = $c1;
      $160 = $159&255;
      $161 = (($160) - 12)|0;
      $162 = $161&255;
      $163 = $i;
      $164 = (($163) + 3)|0;
      $165 = $tmp;
      $166 = (($165) + ($164)|0);
      HEAP8[$166>>0] = $162;
      break;
     }
    }
    $167 = $c1;
    $168 = $167&255;
    $169 = ($168|0)>=(48);
    if ($169) {
     $170 = $c1;
     $171 = $170&255;
     $172 = ($171|0)<=(57);
     if ($172) {
      $173 = $c1;
      $174 = $173&255;
      $175 = (($174) - 18)|0;
      $176 = $175&255;
      $177 = $i;
      $178 = (($177) + 3)|0;
      $179 = $tmp;
      $180 = (($179) + ($178)|0);
      HEAP8[$180>>0] = $176;
      break;
     }
    }
    $181 = $c1;
    $182 = $181&255;
    $183 = ($182|0)>=(64);
    if ($183) {
     $184 = $c1;
     $185 = $184&255;
     $186 = ($185|0)<=(73);
     if ($186) {
      $187 = $c1;
      $188 = $187&255;
      $189 = (($188) - 24)|0;
      $190 = $189&255;
      $191 = $i;
      $192 = (($191) + 3)|0;
      $193 = $tmp;
      $194 = (($193) + ($192)|0);
      HEAP8[$194>>0] = $190;
      break;
     }
    }
    $195 = $c1;
    $196 = $195&255;
    $197 = ($196|0)>=(80);
    if ($197) {
     $198 = $c1;
     $199 = $198&255;
     $200 = ($199|0)<=(89);
     if ($200) {
      $201 = $c1;
      $202 = $201&255;
      $203 = (($202) - 30)|0;
      $204 = $203&255;
      $205 = $i;
      $206 = (($205) + 3)|0;
      $207 = $tmp;
      $208 = (($207) + ($206)|0);
      HEAP8[$208>>0] = $204;
      break;
     }
    }
    $209 = $c1;
    $210 = $209&255;
    $211 = ($210|0)>=(96);
    if ($211) {
     $212 = $c1;
     $213 = $212&255;
     $214 = ($213|0)<=(100);
     if ($214) {
      $215 = $c1;
      $216 = $215&255;
      $217 = (($216) - 36)|0;
      $218 = $217&255;
      $219 = $i;
      $220 = (($219) + 3)|0;
      $221 = $tmp;
      $222 = (($221) + ($220)|0);
      HEAP8[$222>>0] = $218;
     }
    }
   }
  } while(0);
  $223 = $i;
  $224 = (($223) + 4)|0;
  $i = $224;
 }
 $225 = $tmp;
 $226 = $j;
 $227 = $1;
 (_fwrite(($225|0),($226|0),1,($227|0))|0);
 $228 = $tmp;
 _free($228);
 $229 = $0;
 (_fseek(($229|0),4,1)|0);
 $i = 0;
 while(1) {
  $230 = $i;
  $231 = ($230|0)<(16);
  if (!($231)) {
   break;
  }
  $232 = $i;
  $233 = (($SampleSizes) + ($232<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ($234|0)!=(0);
  if ($235) {
   $236 = $1;
   $237 = $0;
   $238 = $i;
   $239 = (($SampleSizes) + ($238<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   (_pw_move_data($236,$237,$240)|0);
  }
  $241 = $i;
  $242 = (($241) + 1)|0;
  $i = $242;
 }
 STACKTOP = sp;return 0;
}
function _test_fuzz($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $j = 0, $k = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $ssize = 0;
 $4 = $1;
 $5 = (_readmem32b($4)|0);
 $6 = ($5|0)!=(1295068720);
 if ($6) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $k = 0;
 while(1) {
  $7 = $k;
  $8 = ($7|0)<(31);
  if (!($8)) {
   break;
  }
  $9 = $start;
  $10 = (($9) + 72)|0;
  $11 = $k;
  $12 = ($11*68)|0;
  $13 = (($10) + ($12))|0;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)>(15);
  if ($18) {
   label = 6;
   break;
  }
  $19 = $k;
  $20 = (($19) + 1)|0;
  $k = $20;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $k = 0;
 while(1) {
  $21 = $k;
  $22 = ($21|0)<(31);
  if (!($22)) {
   break;
  }
  $23 = $start;
  $24 = (($23) + 73)|0;
  $25 = $k;
  $26 = ($25*68)|0;
  $27 = (($24) + ($26))|0;
  $28 = $1;
  $29 = (($28) + ($27)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)>(64);
  if ($32) {
   label = 11;
   break;
  }
  $33 = $k;
  $34 = (($33) + 1)|0;
  $k = $34;
 }
 if ((label|0) == 11) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $k = 0;
 while(1) {
  $35 = $k;
  $36 = ($35|0)<(31);
  if (!($36)) {
   break;
  }
  $37 = $1;
  $38 = $start;
  $39 = (($37) + ($38)|0);
  $40 = $k;
  $41 = ($40*68)|0;
  $42 = (($39) + ($41)|0);
  $43 = ((($42)) + 66|0);
  $44 = (_readmem16b($43)|0);
  $45 = $44&65535;
  $j = $45;
  $46 = $j;
  $47 = ($46|0)>(32768);
  if ($47) {
   label = 16;
   break;
  }
  $48 = $j;
  $49 = $48<<1;
  $50 = $ssize;
  $51 = (($50) + ($49))|0;
  $ssize = $51;
  $52 = $k;
  $53 = (($52) + 1)|0;
  $k = $53;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $54 = $start;
 $55 = (($54) + 2114)|0;
 $56 = $1;
 $57 = (($56) + ($55)|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ($59|0)==(0);
 if ($60) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 } else {
  $61 = $2;
  _pw_read_title(0,$61,0);
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _depack_fuzz($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $data = 0, $i = 0, $j = 0, $k = 0, $l = 0, $len = 0, $lps = 0, $lsz = 0, $npat = 0, $ntrk = 0, $ord = 0, $size = 0;
 var $ssize = 0, $status = 0, $tidx = 0, $tidx_real = 0, $track = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 3768|0;
 $ord = sp + 3640|0;
 $tidx = sp + 1592|0;
 $tidx_real = sp + 1080|0;
 $track = sp + 56|0;
 $0 = $in;
 $1 = $out;
 $status = 1;
 $ssize = 0;
 _memset(($tidx|0),0,2048)|0;
 _memset(($tidx_real|0),0,512)|0;
 dest=$ord; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_read32b($2)|0);
 $3 = $0;
 (_read16b($3)|0);
 $4 = $1;
 (_pw_write_zero($4,20)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(31);
  $7 = $1;
  $8 = $0;
  if (!($6)) {
   break;
  }
  (_pw_move_data($7,$8,22)|0);
  $9 = $0;
  (_fseek(($9|0),38,1)|0);
  $10 = $1;
  $11 = $0;
  $12 = (_read16b($11)|0);
  $13 = $12&65535;
  $size = $13;
  $14 = $13&65535;
  _write16b($10,$14);
  $15 = $size;
  $16 = $15<<1;
  $17 = $ssize;
  $18 = (($17) + ($16))|0;
  $ssize = $18;
  $19 = $0;
  $20 = (_read16b($19)|0);
  $21 = $20&65535;
  $lps = $21;
  $22 = $0;
  $23 = (_read16b($22)|0);
  $24 = $23&65535;
  $lsz = $24;
  $25 = $1;
  $26 = $0;
  $27 = (_read8($26)|0);
  _write8($25,$27);
  $28 = $1;
  $29 = $0;
  $30 = (_read8($29)|0);
  _write8($28,$30);
  $31 = $1;
  $32 = $lps;
  $33 = $32&65535;
  _write16b($31,$33);
  $34 = $1;
  $35 = $lsz;
  $36 = ($35|0)>(0);
  $37 = $lsz;
  $38 = $36 ? $37 : 1;
  $39 = $38&65535;
  _write16b($34,$39);
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $42 = (_read8($8)|0);
 $43 = $42&255;
 $len = $43;
 $44 = $43&255;
 _write8($7,$44);
 $45 = $0;
 $46 = (_read8($45)|0);
 $47 = $46&255;
 $ntrk = $47;
 $48 = $1;
 _write8($48,127);
 $49 = $0;
 (_fseek(($49|0),2118,0)|0);
 $i = 0;
 while(1) {
  $50 = $i;
  $51 = ($50|0)<(4);
  if (!($51)) {
   break;
  }
  $j = 0;
  while(1) {
   $52 = $j;
   $53 = $len;
   $54 = ($52|0)<($53|0);
   $55 = $i;
   if (!($54)) {
    break;
   }
   $56 = $55<<2;
   $57 = $j;
   $58 = (($tidx) + ($57<<4)|0);
   $59 = (($58) + ($56)|0);
   $60 = $0;
   (_fread(($59|0),1,4,($60|0))|0);
   $61 = $j;
   $62 = (($61) + 1)|0;
   $j = $62;
  }
  $63 = (($55) + 1)|0;
  $i = $63;
 }
 $npat = 0;
 $i = 0;
 while(1) {
  $64 = $i;
  $65 = $len;
  $66 = ($64|0)<($65|0);
  if (!($66)) {
   break;
  }
  $67 = $i;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = $npat;
   $70 = (($69) + 1)|0;
   $npat = $70;
   $71 = $69&255;
   HEAP8[$ord>>0] = $71;
  } else {
   $j = 0;
   while(1) {
    $72 = $j;
    $73 = $i;
    $74 = ($72|0)<($73|0);
    if (!($74)) {
     break;
    }
    $status = 1;
    $k = 0;
    while(1) {
     $75 = $k;
     $76 = ($75|0)<(4);
     if (!($76)) {
      break;
     }
     $77 = $k;
     $78 = $77<<2;
     $79 = $j;
     $80 = (($tidx) + ($79<<4)|0);
     $81 = (($80) + ($78)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $k;
     $85 = $84<<2;
     $86 = $i;
     $87 = (($tidx) + ($86<<4)|0);
     $88 = (($87) + ($85)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = ($83|0)!=($90|0);
     if ($91) {
      label = 19;
      break;
     }
     $92 = $k;
     $93 = (($92) + 1)|0;
     $k = $93;
    }
    if ((label|0) == 19) {
     label = 0;
     $status = 0;
    }
    $94 = $status;
    $95 = $94&255;
    $96 = ($95|0)==(1);
    $97 = $j;
    if ($96) {
     label = 22;
     break;
    }
    $102 = (($97) + 1)|0;
    $j = $102;
   }
   if ((label|0) == 22) {
    label = 0;
    $98 = (($ord) + ($97)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $i;
    $101 = (($ord) + ($100)|0);
    HEAP8[$101>>0] = $99;
   }
   $103 = $status;
   $104 = $103&255;
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = $npat;
    $107 = (($106) + 1)|0;
    $npat = $107;
    $108 = $106&255;
    $109 = $i;
    $110 = (($ord) + ($109)|0);
    HEAP8[$110>>0] = $108;
   }
   $status = 1;
  }
  $111 = $i;
  $112 = (($111) + 1)|0;
  $i = $112;
 }
 $c1 = 0;
 $i = 0;
 while(1) {
  $113 = $i;
  $114 = $len;
  $115 = ($113|0)<($114|0);
  if (!($115)) {
   break;
  }
  $116 = $i;
  $117 = ($116|0)==(0);
  if ($117) {
   $118 = $i;
   $119 = (($tidx) + ($118<<4)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $c1;
   $122 = $121&255;
   $123 = (($tidx_real) + ($122<<2)|0);
   HEAP8[$123>>0] = $120;
   $124 = $i;
   $125 = (($tidx) + ($124<<4)|0);
   $126 = ((($125)) + 4|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = $c1;
   $129 = $128&255;
   $130 = (($tidx_real) + ($129<<2)|0);
   $131 = ((($130)) + 1|0);
   HEAP8[$131>>0] = $127;
   $132 = $i;
   $133 = (($tidx) + ($132<<4)|0);
   $134 = ((($133)) + 8|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $c1;
   $137 = $136&255;
   $138 = (($tidx_real) + ($137<<2)|0);
   $139 = ((($138)) + 2|0);
   HEAP8[$139>>0] = $135;
   $140 = $i;
   $141 = (($tidx) + ($140<<4)|0);
   $142 = ((($141)) + 12|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $c1;
   $145 = $144&255;
   $146 = (($tidx_real) + ($145<<2)|0);
   $147 = ((($146)) + 3|0);
   HEAP8[$147>>0] = $143;
   $148 = $c1;
   $149 = (($148) + 1)<<24>>24;
   $c1 = $149;
  } else {
   $j = 0;
   while(1) {
    $150 = $j;
    $151 = $i;
    $152 = ($150|0)<($151|0);
    if (!($152)) {
     break;
    }
    $status = 1;
    $153 = $i;
    $154 = (($ord) + ($153)|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155&255;
    $157 = $j;
    $158 = (($ord) + ($157)|0);
    $159 = HEAP8[$158>>0]|0;
    $160 = $159&255;
    $161 = ($156|0)==($160|0);
    if ($161) {
     label = 35;
     break;
    }
    $162 = $j;
    $163 = (($162) + 1)|0;
    $j = $163;
   }
   if ((label|0) == 35) {
    label = 0;
    $status = 0;
   }
   $164 = $status;
   $165 = $164&255;
   $166 = ($165|0)==(0);
   if (!($166)) {
    $167 = $i;
    $168 = (($tidx) + ($167<<4)|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $c1;
    $171 = $170&255;
    $172 = (($tidx_real) + ($171<<2)|0);
    HEAP8[$172>>0] = $169;
    $173 = $i;
    $174 = (($tidx) + ($173<<4)|0);
    $175 = ((($174)) + 4|0);
    $176 = HEAP8[$175>>0]|0;
    $177 = $c1;
    $178 = $177&255;
    $179 = (($tidx_real) + ($178<<2)|0);
    $180 = ((($179)) + 1|0);
    HEAP8[$180>>0] = $176;
    $181 = $i;
    $182 = (($tidx) + ($181<<4)|0);
    $183 = ((($182)) + 8|0);
    $184 = HEAP8[$183>>0]|0;
    $185 = $c1;
    $186 = $185&255;
    $187 = (($tidx_real) + ($186<<2)|0);
    $188 = ((($187)) + 2|0);
    HEAP8[$188>>0] = $184;
    $189 = $i;
    $190 = (($tidx) + ($189<<4)|0);
    $191 = ((($190)) + 12|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $c1;
    $194 = $193&255;
    $195 = (($tidx_real) + ($194<<2)|0);
    $196 = ((($195)) + 3|0);
    HEAP8[$196>>0] = $192;
    $197 = $c1;
    $198 = (($197) + 1)<<24>>24;
    $c1 = $198;
    $status = 1;
   }
  }
  $199 = $i;
  $200 = (($199) + 1)|0;
  $i = $200;
 }
 $201 = $1;
 (_fwrite(($ord|0),128,1,($201|0))|0);
 $202 = $1;
 _write32b($202,1294879534);
 $203 = $len;
 $204 = $203<<4;
 $205 = (2118 + ($204))|0;
 $l = $205;
 $i = 0;
 while(1) {
  $206 = $i;
  $207 = $npat;
  $208 = ($206|0)<($207|0);
  if (!($208)) {
   break;
  }
  _memset(($data|0),0,1024)|0;
  _memset(($track|0),0,1024)|0;
  $209 = $0;
  $210 = $l;
  $211 = $i;
  $212 = (($tidx_real) + ($211<<2)|0);
  $213 = HEAP8[$212>>0]|0;
  $214 = $213&255;
  $215 = $214 << 8;
  $216 = (($210) + ($215))|0;
  (_fseek(($209|0),($216|0),0)|0);
  $217 = $0;
  (_fread(($track|0),256,1,($217|0))|0);
  $218 = $0;
  $219 = $l;
  $220 = $i;
  $221 = (($tidx_real) + ($220<<2)|0);
  $222 = ((($221)) + 1|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 << 8;
  $226 = (($219) + ($225))|0;
  (_fseek(($218|0),($226|0),0)|0);
  $227 = ((($track)) + 256|0);
  $228 = $0;
  (_fread(($227|0),256,1,($228|0))|0);
  $229 = $0;
  $230 = $l;
  $231 = $i;
  $232 = (($tidx_real) + ($231<<2)|0);
  $233 = ((($232)) + 2|0);
  $234 = HEAP8[$233>>0]|0;
  $235 = $234&255;
  $236 = $235 << 8;
  $237 = (($230) + ($236))|0;
  (_fseek(($229|0),($237|0),0)|0);
  $238 = ((($track)) + 512|0);
  $239 = $0;
  (_fread(($238|0),256,1,($239|0))|0);
  $240 = $0;
  $241 = $l;
  $242 = $i;
  $243 = (($tidx_real) + ($242<<2)|0);
  $244 = ((($243)) + 3|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = $246 << 8;
  $248 = (($241) + ($247))|0;
  (_fseek(($240|0),($248|0),0)|0);
  $249 = ((($track)) + 768|0);
  $250 = $0;
  (_fread(($249|0),256,1,($250|0))|0);
  $j = 0;
  while(1) {
   $251 = $j;
   $252 = ($251|0)<(64);
   if (!($252)) {
    break;
   }
   $253 = $j;
   $254 = $253<<4;
   $255 = (($data) + ($254)|0);
   $256 = $j;
   $257 = $256<<2;
   $258 = (($track) + ($257)|0);
   ;HEAP8[$255>>0]=HEAP8[$258>>0]|0;HEAP8[$255+1>>0]=HEAP8[$258+1>>0]|0;HEAP8[$255+2>>0]=HEAP8[$258+2>>0]|0;HEAP8[$255+3>>0]=HEAP8[$258+3>>0]|0;
   $259 = $j;
   $260 = $259<<4;
   $261 = (($260) + 4)|0;
   $262 = (($data) + ($261)|0);
   $263 = $j;
   $264 = $263<<2;
   $265 = ((($track)) + 256|0);
   $266 = (($265) + ($264)|0);
   ;HEAP8[$262>>0]=HEAP8[$266>>0]|0;HEAP8[$262+1>>0]=HEAP8[$266+1>>0]|0;HEAP8[$262+2>>0]=HEAP8[$266+2>>0]|0;HEAP8[$262+3>>0]=HEAP8[$266+3>>0]|0;
   $267 = $j;
   $268 = $267<<4;
   $269 = (($268) + 8)|0;
   $270 = (($data) + ($269)|0);
   $271 = $j;
   $272 = $271<<2;
   $273 = ((($track)) + 512|0);
   $274 = (($273) + ($272)|0);
   ;HEAP8[$270>>0]=HEAP8[$274>>0]|0;HEAP8[$270+1>>0]=HEAP8[$274+1>>0]|0;HEAP8[$270+2>>0]=HEAP8[$274+2>>0]|0;HEAP8[$270+3>>0]=HEAP8[$274+3>>0]|0;
   $275 = $j;
   $276 = $275<<4;
   $277 = (($276) + 12)|0;
   $278 = (($data) + ($277)|0);
   $279 = $j;
   $280 = $279<<2;
   $281 = ((($track)) + 768|0);
   $282 = (($281) + ($280)|0);
   ;HEAP8[$278>>0]=HEAP8[$282>>0]|0;HEAP8[$278+1>>0]=HEAP8[$282+1>>0]|0;HEAP8[$278+2>>0]=HEAP8[$282+2>>0]|0;HEAP8[$278+3>>0]=HEAP8[$282+3>>0]|0;
   $283 = $j;
   $284 = $283<<2;
   $285 = (($284) + 3)|0;
   $286 = ((($track)) + 768|0);
   $287 = (($286) + ($285)|0);
   $288 = HEAP8[$287>>0]|0;
   $289 = $j;
   $290 = $289<<4;
   $291 = (($290) + 15)|0;
   $292 = (($data) + ($291)|0);
   HEAP8[$292>>0] = $288;
   $293 = $j;
   $294 = (($293) + 1)|0;
   $j = $294;
  }
  $295 = $1;
  (_fwrite(($data|0),1024,1,($295|0))|0);
  $296 = $i;
  $297 = (($296) + 1)|0;
  $i = $297;
 }
 $298 = $0;
 $299 = $l;
 $300 = $ntrk;
 $301 = $300 << 8;
 $302 = (($299) + ($301))|0;
 $303 = (($302) + 4)|0;
 (_fseek(($298|0),($303|0),0)|0);
 $304 = $1;
 $305 = $0;
 $306 = $ssize;
 (_pw_move_data($304,$305,$306)|0);
 STACKTOP = sp;return 0;
}
function _test_GMC($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0;
 var $offset = 0, $or$cond = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1024);
 if ($5) {
  $6 = $3;
  $7 = (1024 - ($6))|0;
  $0 = $7;
  $232 = $0;
  STACKTOP = sp;return ($232|0);
 }
 $m = 0;
 $j = 0;
 $k = 0;
 while(1) {
  $8 = $k;
  $9 = ($8|0)<(15);
  if (!($9)) {
   label = 14;
   break;
  }
  $10 = $start;
  $11 = $k;
  $12 = $11<<4;
  $13 = (($10) + ($12))|0;
  $14 = (($13) + 4)|0;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = $start;
  $21 = $k;
  $22 = $21<<4;
  $23 = (($20) + ($22))|0;
  $24 = (($23) + 5)|0;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($19) + ($28))|0;
  $o = $29;
  $30 = $start;
  $31 = $k;
  $32 = $31<<4;
  $33 = (($30) + ($32))|0;
  $34 = (($33) + 12)|0;
  $35 = $1;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 << 8;
  $40 = $start;
  $41 = $k;
  $42 = $41<<4;
  $43 = (($40) + ($42))|0;
  $44 = (($43) + 13)|0;
  $45 = $1;
  $46 = (($45) + ($44)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = (($39) + ($48))|0;
  $n = $49;
  $50 = $o;
  $51 = $50<<1;
  $o = $51;
  $52 = $start;
  $53 = (($52) + 7)|0;
  $54 = $k;
  $55 = $54<<4;
  $56 = (($53) + ($55))|0;
  $57 = $1;
  $58 = (($57) + ($56)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ($60|0)>(64);
  if ($61) {
   label = 6;
   break;
  }
  $62 = $o;
  $63 = ($62|0)>(65535);
  if ($63) {
   label = 8;
   break;
  }
  $64 = $n;
  $65 = $o;
  $66 = ($64|0)>($65|0);
  if ($66) {
   label = 10;
   break;
  }
  $67 = $o;
  $68 = $m;
  $69 = (($68) + ($67))|0;
  $m = $69;
  $70 = $o;
  $71 = ($70|0)!=(0);
  if ($71) {
   $72 = $k;
   $73 = (($72) + 1)|0;
   $j = $73;
  }
  $74 = $k;
  $75 = (($74) + 1)|0;
  $k = $75;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $232 = $0;
  STACKTOP = sp;return ($232|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $232 = $0;
  STACKTOP = sp;return ($232|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $232 = $0;
  STACKTOP = sp;return ($232|0);
 }
 else if ((label|0) == 14) {
  $76 = $m;
  $77 = ($76|0)<=(4);
  if ($77) {
   $0 = -1;
   $232 = $0;
   STACKTOP = sp;return ($232|0);
  }
  $78 = $start;
  $79 = (($78) + 243)|0;
  $80 = $1;
  $81 = (($80) + ($79)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = ($83|0)>(100);
  if (!($84)) {
   $85 = $start;
   $86 = (($85) + 243)|0;
   $87 = $1;
   $88 = (($87) + ($86)|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ($90|0)==(0);
   if (!($91)) {
    $l = 0;
    $n = 0;
    while(1) {
     $92 = $n;
     $93 = ($92|0)<(100);
     if (!($93)) {
      break;
     }
     $94 = $1;
     $95 = $start;
     $96 = (($94) + ($95)|0);
     $97 = ((($96)) + 244|0);
     $98 = $n;
     $99 = $98<<1;
     $100 = (($97) + ($99)|0);
     $101 = (_readmem16b($100)|0);
     $102 = $101&65535;
     $k = $102;
     $103 = $k;
     $104 = $103 & 1023;
     $105 = ($104|0)!=(0);
     if ($105) {
      label = 22;
      break;
     }
     $106 = $k;
     $107 = $106 >> 10;
     $108 = $l;
     $109 = ($107|0)>($108|0);
     $110 = $k;
     $111 = $110 >> 10;
     $112 = $l;
     $113 = $109 ? $111 : $112;
     $l = $113;
     $114 = $n;
     $115 = (($114) + 1)|0;
     $n = $115;
    }
    if ((label|0) == 22) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    $116 = $l;
    $117 = (($116) + 1)|0;
    $l = $117;
    $118 = $l;
    $119 = ($118|0)==(1);
    $120 = $l;
    $121 = ($120|0)>(100);
    $or$cond = $119 | $121;
    if ($or$cond) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    $122 = $3;
    $123 = $k;
    $124 = $123<<10;
    $125 = (444 + ($124))|0;
    $126 = $n;
    $127 = $126<<2;
    $128 = (($125) + ($127))|0;
    $129 = (($128) + 3)|0;
    $130 = ($122|0)<($129|0);
    if ($130) {
     $131 = $k;
     $132 = $131<<10;
     $133 = (444 + ($132))|0;
     $134 = $n;
     $135 = $134<<2;
     $136 = (($133) + ($135))|0;
     $137 = (($136) + 3)|0;
     $138 = $3;
     $139 = (($137) - ($138))|0;
     $0 = $139;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    $140 = $start;
    $141 = (($140) + 243)|0;
    $142 = $1;
    $143 = (($142) + ($141)|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $o = $145;
    $k = 0;
    L39: while(1) {
     $146 = $k;
     $147 = $l;
     $148 = ($146|0)<($147|0);
     if (!($148)) {
      label = 53;
      break;
     }
     $n = 0;
     while(1) {
      $149 = $n;
      $150 = ($149|0)<(256);
      if (!($150)) {
       break;
      }
      $151 = $start;
      $152 = (($151) + 444)|0;
      $153 = $k;
      $154 = $153<<10;
      $155 = (($152) + ($154))|0;
      $156 = $n;
      $157 = $156<<2;
      $158 = (($155) + ($157))|0;
      $offset = $158;
      $159 = $offset;
      $160 = $1;
      $161 = (($160) + ($159)|0);
      $d = $161;
      $162 = $offset;
      $163 = ($162|0)>(65532);
      if ($163) {
       label = 33;
       break L39;
      }
      $164 = $d;
      $165 = ((($164)) + 2|0);
      $166 = HEAP8[$165>>0]|0;
      $167 = $166&255;
      $168 = $167 & 15;
      $169 = ($168|0)>=(144);
      if ($169) {
       label = 35;
       break L39;
      }
      $170 = $d;
      $171 = ((($170)) + 2|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172&255;
      $174 = $173 & 15;
      $175 = ($174|0)==(3);
      if ($175) {
       $176 = $d;
       $177 = ((($176)) + 3|0);
       $178 = HEAP8[$177>>0]|0;
       $179 = $178&255;
       $180 = ($179|0)>(64);
       if ($180) {
        label = 38;
        break L39;
       }
      }
      $181 = $d;
      $182 = ((($181)) + 2|0);
      $183 = HEAP8[$182>>0]|0;
      $184 = $183&255;
      $185 = $184 & 15;
      $186 = ($185|0)==(4);
      if ($186) {
       $187 = $d;
       $188 = ((($187)) + 3|0);
       $189 = HEAP8[$188>>0]|0;
       $190 = $189&255;
       $191 = ($190|0)>(99);
       if ($191) {
        label = 41;
        break L39;
       }
      }
      $192 = $d;
      $193 = ((($192)) + 2|0);
      $194 = HEAP8[$193>>0]|0;
      $195 = $194&255;
      $196 = $195 & 15;
      $197 = ($196|0)==(5);
      if ($197) {
       $198 = $d;
       $199 = ((($198)) + 3|0);
       $200 = HEAP8[$199>>0]|0;
       $201 = $200&255;
       $202 = $o;
       $203 = (($202) + 1)|0;
       $204 = ($201|0)>($203|0);
       if ($204) {
        label = 44;
        break L39;
       }
      }
      $205 = $d;
      $206 = ((($205)) + 2|0);
      $207 = HEAP8[$206>>0]|0;
      $208 = $207&255;
      $209 = $208 & 15;
      $210 = ($209|0)==(6);
      if ($210) {
       $211 = $d;
       $212 = ((($211)) + 3|0);
       $213 = HEAP8[$212>>0]|0;
       $214 = $213&255;
       $215 = ($214|0)>=(2);
       if ($215) {
        label = 47;
        break L39;
       }
      }
      $216 = $d;
      $217 = ((($216)) + 2|0);
      $218 = HEAP8[$217>>0]|0;
      $219 = $218&255;
      $220 = $219 & 15;
      $221 = ($220|0)==(7);
      if ($221) {
       $222 = $d;
       $223 = ((($222)) + 3|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = $224&255;
       $226 = ($225|0)>=(2);
       if ($226) {
        label = 50;
        break L39;
       }
      }
      $227 = $n;
      $228 = (($227) + 1)|0;
      $n = $228;
     }
     $229 = $k;
     $230 = (($229) + 1)|0;
     $k = $230;
    }
    if ((label|0) == 33) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 35) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 38) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 41) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 44) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 47) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 50) {
     $0 = -1;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
    else if ((label|0) == 53) {
     $231 = $2;
     _pw_read_title(0,$231,0);
     $0 = 0;
     $232 = $0;
     STACKTOP = sp;return ($232|0);
    }
   }
  }
  $0 = -1;
  $232 = $0;
  STACKTOP = sp;return ($232|0);
 }
 return (0)|0;
}
function _depack_GMC($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PatPos = 0, $i = 0, $j = 0, $len = 0, $looplen = 0, $max = 0;
 var $ptable = 0, $ssize = 0, $tmp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 160|0;
 $ptable = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $i = 0;
 $j = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(15);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $0;
  (_read32b($6)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_read16b($8)|0);
  $len = $9;
  _write16b($7,$9);
  $10 = $len;
  $11 = $10&65535;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $0;
  (_read8($15)|0);
  $16 = $1;
  _write8($16,0);
  $17 = $1;
  $18 = $0;
  $19 = (_read8($18)|0);
  _write8($17,$19);
  $20 = $0;
  (_read32b($20)|0);
  $21 = $0;
  $22 = (_read16b($21)|0);
  $looplen = $22;
  $23 = $1;
  $24 = $looplen;
  $25 = $24&65535;
  $26 = ($25|0)>(2);
  if ($26) {
   $27 = $len;
   $28 = $27&65535;
   $29 = $looplen;
   $30 = $29&65535;
   $31 = (($28) - ($30))|0;
   $33 = $31;
  } else {
   $33 = 0;
  }
  $32 = $33&65535;
  _write16b($23,$32);
  $34 = $1;
  $35 = $looplen;
  $36 = $35&65535;
  $37 = ($36|0)<=(2);
  $38 = $looplen;
  $39 = $38&65535;
  $40 = $37 ? 1 : $39;
  $41 = $40&65535;
  _write16b($34,$41);
  $42 = $0;
  (_read16b($42)|0);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $45 = ((($tmp)) + 29|0);
 HEAP8[$45>>0] = 1;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = ($46|0)<(16);
  if (!($47)) {
   break;
  }
  $48 = $1;
  (_fwrite(($tmp|0),30,1,($48|0))|0);
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $0;
 (_fseek(($51|0),243,0)|0);
 $52 = $1;
 $53 = $0;
 $54 = (_read8($53)|0);
 $PatPos = $54;
 _write8($52,$54);
 $55 = $1;
 _write8($55,127);
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(100);
  if (!($57)) {
   break;
  }
  $58 = $0;
  $59 = (_read16b($58)|0);
  $60 = $59&65535;
  $61 = (($60|0) / 1024)&-1;
  $62 = $61&255;
  $63 = $i;
  $64 = (($ptable) + ($63)|0);
  HEAP8[$64>>0] = $62;
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 $67 = $1;
 (_fwrite(($ptable|0),128,1,($67|0))|0);
 $i = 0;
 $max = 0;
 while(1) {
  $68 = $i;
  $69 = ($68|0)<(128);
  if (!($69)) {
   break;
  }
  $70 = $i;
  $71 = (($ptable) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $max;
  $75 = $74&255;
  $76 = ($73|0)>($75|0);
  if ($76) {
   $77 = $i;
   $78 = (($ptable) + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $max = $79;
  }
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 $82 = $1;
 _write32b($82,1294879534);
 $83 = $0;
 (_fseek(($83|0),444,0)|0);
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = $max;
  $86 = $85&255;
  $87 = ($84|0)<=($86|0);
  if (!($87)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $88 = $0;
  (_fread(($tmp|0),1024,1,($88|0))|0);
  $j = 0;
  while(1) {
   $89 = $j;
   $90 = ($89|0)<(256);
   if (!($90)) {
    break;
   }
   $91 = $j;
   $92 = $91<<2;
   $93 = (($92) + 2)|0;
   $94 = (($tmp) + ($93)|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = $96 & 15;
   switch ($97|0) {
   case 6:  {
    $122 = $j;
    $123 = $122<<2;
    $124 = (($123) + 2)|0;
    $125 = (($tmp) + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = (($127) + 8)|0;
    $129 = $128&255;
    HEAP8[$125>>0] = $129;
    break;
   }
   case 4:  {
    $106 = $j;
    $107 = $106<<2;
    $108 = (($107) + 2)|0;
    $109 = (($tmp) + ($108)|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = (($111) + 9)|0;
    $113 = $112&255;
    HEAP8[$109>>0] = $113;
    break;
   }
   case 3:  {
    $98 = $j;
    $99 = $98<<2;
    $100 = (($99) + 2)|0;
    $101 = (($tmp) + ($100)|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = (($103) + 9)|0;
    $105 = $104&255;
    HEAP8[$101>>0] = $105;
    break;
   }
   case 8:  {
    $138 = $j;
    $139 = $138<<2;
    $140 = (($139) + 2)|0;
    $141 = (($tmp) + ($140)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142&255;
    $144 = (($143) + 7)|0;
    $145 = $144&255;
    HEAP8[$141>>0] = $145;
    break;
   }
   case 7:  {
    $130 = $j;
    $131 = $130<<2;
    $132 = (($131) + 2)|0;
    $133 = (($tmp) + ($132)|0);
    $134 = HEAP8[$133>>0]|0;
    $135 = $134&255;
    $136 = (($135) + 7)|0;
    $137 = $136&255;
    HEAP8[$133>>0] = $137;
    break;
   }
   case 5:  {
    $114 = $j;
    $115 = $114<<2;
    $116 = (($115) + 2)|0;
    $117 = (($tmp) + ($116)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = (($119) + 6)|0;
    $121 = $120&255;
    HEAP8[$117>>0] = $121;
    break;
   }
   default: {
   }
   }
   $146 = $j;
   $147 = (($146) + 1)|0;
   $j = $147;
  }
  $148 = $1;
  (_fwrite(($tmp|0),1024,1,($148|0))|0);
  $149 = $i;
  $150 = (($149) + 1)|0;
  $i = $150;
 }
 $151 = $1;
 $152 = $0;
 $153 = $ssize;
 (_pw_move_data($151,$152,$153)|0);
 STACKTOP = sp;return 0;
}
function _test_crb($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(378);
 if ($5) {
  $6 = $3;
  $7 = (378 - ($6))|0;
  $0 = $7;
  $224 = $0;
  STACKTOP = sp;return ($224|0);
 }
 $8 = $start;
 $9 = (($8) + 248)|0;
 $10 = $1;
 $11 = (($10) + ($9)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(127);
 if (!($14)) {
  $15 = $start;
  $16 = (($15) + 248)|0;
  $17 = $1;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)==(0);
  if (!($21)) {
   $22 = $start;
   $23 = (($22) + 249)|0;
   $24 = $1;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)!=(127);
   if ($28) {
    $0 = -1;
    $224 = $0;
    STACKTOP = sp;return ($224|0);
   }
   $ssize = 0;
   $k = 0;
   while(1) {
    $29 = $k;
    $30 = ($29|0)<(31);
    if (!($30)) {
     label = 22;
     break;
    }
    $31 = $start;
    $32 = (($31) + 2)|0;
    $33 = $k;
    $34 = $33<<3;
    $35 = (($32) + ($34))|0;
    $36 = $1;
    $37 = (($36) + ($35)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = ($39|0)>(15);
    if ($40) {
     label = 11;
     break;
    }
    $41 = $start;
    $42 = (($41) + 3)|0;
    $43 = $k;
    $44 = $43<<3;
    $45 = (($42) + ($44))|0;
    $46 = $1;
    $47 = (($46) + ($45)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = ($49|0)>(64);
    if ($50) {
     label = 13;
     break;
    }
    $51 = $1;
    $52 = $start;
    $53 = (($51) + ($52)|0);
    $54 = $k;
    $55 = $54<<3;
    $56 = (($53) + ($55)|0);
    $57 = (_readmem16b($56)|0);
    $58 = $57&65535;
    $59 = $58<<1;
    $j = $59;
    $60 = $1;
    $61 = $start;
    $62 = (($60) + ($61)|0);
    $63 = $k;
    $64 = $63<<3;
    $65 = (($62) + ($64)|0);
    $66 = ((($65)) + 4|0);
    $67 = (_readmem16b($66)|0);
    $68 = $67&65535;
    $69 = $68<<1;
    $m = $69;
    $70 = $1;
    $71 = $start;
    $72 = (($70) + ($71)|0);
    $73 = $k;
    $74 = $73<<3;
    $75 = (($72) + ($74)|0);
    $76 = ((($75)) + 6|0);
    $77 = (_readmem16b($76)|0);
    $78 = $77&65535;
    $79 = $78<<1;
    $n = $79;
    $80 = $j;
    $81 = ($80|0)>(65535);
    $82 = $m;
    $83 = ($82|0)>(65535);
    $or$cond = $81 | $83;
    $84 = $n;
    $85 = ($84|0)>(65535);
    $or$cond3 = $or$cond | $85;
    if ($or$cond3) {
     label = 15;
     break;
    }
    $86 = $n;
    $87 = ($86|0)!=(0);
    $88 = $n;
    $89 = ($88|0)!=(2);
    $or$cond5 = $87 & $89;
    if ($or$cond5) {
     $90 = $m;
     $91 = $n;
     $92 = (($90) + ($91))|0;
     $93 = $j;
     $94 = ($92|0)>($93|0);
     if ($94) {
      label = 18;
      break;
     }
    }
    $95 = $m;
    $96 = ($95|0)!=(0);
    $97 = $n;
    $98 = ($97|0)<=(2);
    $or$cond7 = $96 & $98;
    if ($or$cond7) {
     label = 20;
     break;
    }
    $99 = $j;
    $100 = $ssize;
    $101 = (($100) + ($99))|0;
    $ssize = $101;
    $102 = $k;
    $103 = (($102) + 1)|0;
    $k = $103;
   }
   if ((label|0) == 11) {
    $0 = -1;
    $224 = $0;
    STACKTOP = sp;return ($224|0);
   }
   else if ((label|0) == 13) {
    $0 = -1;
    $224 = $0;
    STACKTOP = sp;return ($224|0);
   }
   else if ((label|0) == 15) {
    $0 = -1;
    $224 = $0;
    STACKTOP = sp;return ($224|0);
   }
   else if ((label|0) == 18) {
    $0 = -1;
    $224 = $0;
    STACKTOP = sp;return ($224|0);
   }
   else if ((label|0) == 20) {
    $0 = -1;
    $224 = $0;
    STACKTOP = sp;return ($224|0);
   }
   else if ((label|0) == 22) {
    $104 = $ssize;
    $105 = ($104|0)<=(4);
    if ($105) {
     $0 = -1;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
    $l = 0;
    $j = 0;
    while(1) {
     $106 = $j;
     $107 = ($106|0)<(128);
     if (!($107)) {
      break;
     }
     $108 = $start;
     $109 = (($108) + 250)|0;
     $110 = $j;
     $111 = (($109) + ($110))|0;
     $112 = $1;
     $113 = (($112) + ($111)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = ($115|0)>(127);
     if ($116) {
      label = 27;
      break;
     }
     $117 = $start;
     $118 = (($117) + 250)|0;
     $119 = $j;
     $120 = (($118) + ($119))|0;
     $121 = $1;
     $122 = (($121) + ($120)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = $l;
     $126 = ($124|0)>($125|0);
     if ($126) {
      $127 = $start;
      $128 = (($127) + 250)|0;
      $129 = $j;
      $130 = (($128) + ($129))|0;
      $131 = $1;
      $132 = (($131) + ($130)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $l = $134;
     }
     $135 = $j;
     $136 = (($135) + 1)|0;
     $j = $136;
    }
    if ((label|0) == 27) {
     $0 = -1;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
    $137 = $3;
    $138 = $l;
    $139 = $138<<2;
    $140 = $139<<2;
    $141 = $140<<6;
    $142 = (379 + ($141))|0;
    $143 = ($137|0)<($142|0);
    if ($143) {
     $144 = $l;
     $145 = $144<<2;
     $146 = $145<<2;
     $147 = $146<<6;
     $148 = (379 + ($147))|0;
     $149 = $3;
     $150 = (($148) - ($149))|0;
     $0 = $150;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
    $k = 0;
    $j = 0;
    $m = 0;
    L47: while(1) {
     $151 = $m;
     $152 = $l;
     $153 = ($151|0)<=($152|0);
     if (!($153)) {
      label = 52;
      break;
     }
     $n = 0;
     while(1) {
      $154 = $n;
      $155 = ($154|0)<(4);
      if (!($155)) {
       break;
      }
      $o = 0;
      while(1) {
       $156 = $o;
       $157 = ($156|0)<(64);
       if (!($157)) {
        break;
       }
       $158 = $start;
       $159 = (($158) + 378)|0;
       $160 = $j;
       $161 = (($159) + ($160))|0;
       $162 = $1;
       $163 = (($162) + ($161)|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = $164&255;
       $166 = $165 & 192;
       if ((($166|0) == 192)) {
        $204 = $start;
        $205 = (($204) + 379)|0;
        $206 = $j;
        $207 = (($205) + ($206))|0;
        $208 = $1;
        $209 = (($208) + ($207)|0);
        $210 = HEAP8[$209>>0]|0;
        $211 = $210&255;
        $212 = ($211|0)!=(0);
        if ($212) {
         label = 47;
         break L47;
        }
        $o = 100;
        $213 = $j;
        $214 = (($213) + 4)|0;
        $j = $214;
        $215 = $k;
        $216 = (($215) + 4)|0;
        $k = $216;
       } else if ((($166|0) == 0)) {
        $167 = $start;
        $168 = (($167) + 378)|0;
        $169 = $j;
        $170 = (($168) + ($169))|0;
        $171 = $1;
        $172 = (($171) + ($170)|0);
        $173 = HEAP8[$172>>0]|0;
        $174 = $173&255;
        $175 = $174 & 15;
        $176 = ($175|0)>(3);
        if ($176) {
         label = 41;
         break L47;
        }
        $177 = $k;
        $178 = (($177) + 4)|0;
        $k = $178;
        $179 = $j;
        $180 = (($179) + 4)|0;
        $j = $180;
       } else if ((($166|0) == 128)) {
        $181 = $start;
        $182 = (($181) + 379)|0;
        $183 = $j;
        $184 = (($182) + ($183))|0;
        $185 = $1;
        $186 = (($185) + ($184)|0);
        $187 = HEAP8[$186>>0]|0;
        $188 = $187&255;
        $189 = ($188|0)!=(0);
        if ($189) {
         label = 44;
         break L47;
        }
        $190 = $start;
        $191 = (($190) + 381)|0;
        $192 = $j;
        $193 = (($191) + ($192))|0;
        $194 = $1;
        $195 = (($194) + ($193)|0);
        $196 = HEAP8[$195>>0]|0;
        $197 = $196&255;
        $198 = $o;
        $199 = (($198) + ($197))|0;
        $o = $199;
        $200 = $j;
        $201 = (($200) + 4)|0;
        $j = $201;
        $202 = $k;
        $203 = (($202) + 4)|0;
        $k = $203;
       }
       $217 = $o;
       $218 = (($217) + 1)|0;
       $o = $218;
      }
      $219 = $n;
      $220 = (($219) + 1)|0;
      $n = $220;
     }
     $221 = $m;
     $222 = (($221) + 1)|0;
     $m = $222;
    }
    if ((label|0) == 41) {
     $0 = -1;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
    else if ((label|0) == 44) {
     $0 = -1;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
    else if ((label|0) == 47) {
     $0 = -1;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
    else if ((label|0) == 52) {
     $223 = $2;
     _pw_read_title(0,$223,0);
     $0 = 0;
     $224 = $0;
     STACKTOP = sp;return ($224|0);
    }
   }
  }
 }
 $0 = -1;
 $224 = $0;
 STACKTOP = sp;return ($224|0);
}
function _depack_crb($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $l = 0, $m = 0, $pat = 0, $pat_max = 0, $pat_pos = 0, $ptable = 0, $size = 0;
 var $ssize = 0, $taddr = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 3128|0;
 $pat = sp + 2096|0;
 $taddr = sp + 40|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($taddr|0),0,2048)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  $5 = $1;
  if (!($4)) {
   break;
  }
  (_pw_write_zero($5,22)|0);
  $6 = $1;
  $7 = $0;
  $8 = (_read16b($7)|0);
  $9 = $8&65535;
  $size = $9;
  $10 = $9&65535;
  _write16b($6,$10);
  $11 = $size;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $1;
  $16 = $0;
  $17 = (_read8($16)|0);
  _write8($15,$17);
  $18 = $1;
  $19 = $0;
  $20 = (_read8($19)|0);
  _write8($18,$20);
  $21 = $1;
  $22 = $0;
  $23 = (_read16b($22)|0);
  _write16b($21,$23);
  $24 = $0;
  $25 = (_read16b($24)|0);
  $26 = $25&65535;
  $size = $26;
  $27 = $1;
  $28 = $size;
  $29 = ($28|0)!=(0);
  $30 = $size;
  $31 = $29 ? $30 : 1;
  $32 = $31&65535;
  _write16b($27,$32);
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $0;
 $36 = (_read8($35)|0);
 $pat_pos = $36;
 _write8($5,$36);
 $37 = $1;
 $38 = $0;
 $39 = (_read8($38)|0);
 _write8($37,$39);
 $i = 0;
 $pat_max = 0;
 while(1) {
  $40 = $i;
  $41 = ($40|0)<(128);
  if (!($41)) {
   break;
  }
  $42 = $1;
  $43 = $0;
  $44 = (_read8($43)|0);
  $c1 = $44;
  _write8($42,$44);
  $45 = $c1;
  $46 = $45&255;
  $47 = $pat_max;
  $48 = $47&255;
  $49 = ($46|0)>($48|0);
  if ($49) {
   $50 = $c1;
   $pat_max = $50;
  }
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $pat_max;
 $54 = (($53) + 1)<<24>>24;
 $pat_max = $54;
 $55 = $1;
 _write32b($55,1294879534);
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = $pat_max;
  $58 = $57&255;
  $59 = ($56|0)<($58|0);
  if (!($59)) {
   break;
  }
  _memset(($pat|0),0,1024)|0;
  $j = 0;
  while(1) {
   $60 = $j;
   $61 = ($60|0)<(4);
   if (!($61)) {
    break;
   }
   $62 = $0;
   $63 = (_ftell(($62|0))|0);
   $64 = $i;
   $65 = $64<<2;
   $66 = $j;
   $67 = (($65) + ($66))|0;
   $68 = (($taddr) + ($67<<2)|0);
   HEAP32[$68>>2] = $63;
   $k = 0;
   while(1) {
    $69 = $k;
    $70 = ($69|0)<(64);
    if (!($70)) {
     break;
    }
    $71 = $k;
    $72 = $71<<4;
    $73 = $j;
    $74 = $73<<2;
    $75 = (($72) + ($74))|0;
    $y = $75;
    $76 = $0;
    $77 = (_read8($76)|0);
    $c1 = $77;
    $78 = $c1;
    $79 = $78&255;
    $80 = ($79|0)==(128);
    do {
     if ($80) {
      $81 = $0;
      $82 = (_read8($81)|0);
      $c2 = $82;
      $83 = $0;
      $84 = (_read8($83)|0);
      $c3 = $84;
      $85 = $0;
      $86 = (_read8($85)|0);
      $c4 = $86;
      $87 = $c4;
      $88 = $87&255;
      $89 = $k;
      $90 = (($89) + ($88))|0;
      $k = $90;
     } else {
      $91 = $c1;
      $92 = $91&255;
      $93 = ($92|0)==(192);
      if (!($93)) {
       $158 = $c1;
       $159 = $y;
       $160 = (($pat) + ($159)|0);
       HEAP8[$160>>0] = $158;
       $161 = $0;
       $162 = (_read8($161)|0);
       $163 = $y;
       $164 = (($163) + 1)|0;
       $165 = (($pat) + ($164)|0);
       HEAP8[$165>>0] = $162;
       $166 = $0;
       $167 = (_read8($166)|0);
       $168 = $y;
       $169 = (($168) + 2)|0;
       $170 = (($pat) + ($169)|0);
       HEAP8[$170>>0] = $167;
       $171 = $0;
       $172 = (_read8($171)|0);
       $173 = $y;
       $174 = (($173) + 3)|0;
       $175 = (($pat) + ($174)|0);
       HEAP8[$175>>0] = $172;
       break;
      }
      $94 = $0;
      $95 = (_read8($94)|0);
      $c2 = $95;
      $96 = $0;
      $97 = (_read8($96)|0);
      $c3 = $97;
      $98 = $0;
      $99 = (_read8($98)|0);
      $c4 = $99;
      $100 = $0;
      $101 = (_ftell(($100|0))|0);
      $l = $101;
      $102 = $0;
      $103 = $c3;
      $104 = $103&255;
      $105 = $104 << 8;
      $106 = $c4;
      $107 = $106&255;
      $108 = (($105) + ($107))|0;
      $109 = (($108|0) / 4)&-1;
      $110 = (($taddr) + ($109<<2)|0);
      $111 = HEAP32[$110>>2]|0;
      (_fseek(($102|0),($111|0),0)|0);
      $m = 0;
      while(1) {
       $112 = $m;
       $113 = ($112|0)<(64);
       if (!($113)) {
        break;
       }
       $114 = $m;
       $115 = $114<<4;
       $116 = $j;
       $117 = $116<<2;
       $118 = (($115) + ($117))|0;
       $x = $118;
       $119 = $0;
       $120 = (_read8($119)|0);
       $c1 = $120;
       $121 = $c1;
       $122 = $121&255;
       $123 = ($122|0)==(128);
       if ($123) {
        $124 = $0;
        $125 = (_read8($124)|0);
        $c2 = $125;
        $126 = $0;
        $127 = (_read8($126)|0);
        $c3 = $127;
        $128 = $0;
        $129 = (_read8($128)|0);
        $c4 = $129;
        $130 = $c4;
        $131 = $130&255;
        $132 = $m;
        $133 = (($132) + ($131))|0;
        $m = $133;
       } else {
        $134 = $c1;
        $135 = $x;
        $136 = (($pat) + ($135)|0);
        HEAP8[$136>>0] = $134;
        $137 = $0;
        $138 = (_read8($137)|0);
        $139 = $x;
        $140 = (($139) + 1)|0;
        $141 = (($pat) + ($140)|0);
        HEAP8[$141>>0] = $138;
        $142 = $0;
        $143 = (_read8($142)|0);
        $144 = $x;
        $145 = (($144) + 2)|0;
        $146 = (($pat) + ($145)|0);
        HEAP8[$146>>0] = $143;
        $147 = $0;
        $148 = (_read8($147)|0);
        $149 = $x;
        $150 = (($149) + 3)|0;
        $151 = (($pat) + ($150)|0);
        HEAP8[$151>>0] = $148;
       }
       $152 = $m;
       $153 = (($152) + 1)|0;
       $m = $153;
      }
      $154 = $0;
      $155 = $l;
      (_fseek(($154|0),($155|0),0)|0);
      $156 = $k;
      $157 = (($156) + 100)|0;
      $k = $157;
     }
    } while(0);
    $176 = $k;
    $177 = (($176) + 1)|0;
    $k = $177;
   }
   $178 = $j;
   $179 = (($178) + 1)|0;
   $j = $179;
  }
  $180 = $1;
  (_fwrite(($pat|0),1024,1,($180|0))|0);
  $181 = $i;
  $182 = (($181) + 1)|0;
  $i = $182;
 }
 $183 = $1;
 $184 = $0;
 $185 = $ssize;
 (_pw_move_data($183,$184,$185)|0);
 STACKTOP = sp;return 0;
}
function _test_ksm($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0;
 var $k = 0, $l = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1536);
 if ($5) {
  $6 = $3;
  $7 = (1536 - ($6))|0;
  $0 = $7;
  $118 = $0;
  STACKTOP = sp;return ($118|0);
 }
 $8 = $start;
 $9 = $1;
 $10 = (($9) + ($8)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)!=(77);
 if (!($13)) {
  $14 = $start;
  $15 = (($14) + 1)|0;
  $16 = $1;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)!=(46);
  if (!($20)) {
   $21 = $start;
   $22 = (($21) + 15)|0;
   $23 = $1;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)!=(97);
   if ($27) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $k = 0;
   while(1) {
    $28 = $k;
    $29 = ($28|0)<(15);
    if (!($29)) {
     break;
    }
    $30 = $start;
    $31 = (($30) + 54)|0;
    $32 = $k;
    $33 = $32<<5;
    $34 = (($31) + ($33))|0;
    $35 = $1;
    $36 = (($35) + ($34)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)>(64);
    if ($39) {
     label = 11;
     break;
    }
    $40 = $k;
    $41 = (($40) + 1)|0;
    $k = $41;
   }
   if ((label|0) == 11) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $j = 0;
   $k = 0;
   while(1) {
    $42 = $k;
    $43 = ($42|0)<(1024);
    if (!($43)) {
     break;
    }
    $44 = $start;
    $45 = $k;
    $46 = (($44) + ($45))|0;
    $47 = (($46) + 512)|0;
    $48 = $1;
    $49 = (($48) + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($51|0)==(255);
    if ($52) {
     break;
    }
    $53 = $start;
    $54 = $k;
    $55 = (($53) + ($54))|0;
    $56 = (($55) + 512)|0;
    $57 = $1;
    $58 = (($57) + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $j;
    $62 = ($60|0)>($61|0);
    if ($62) {
     $63 = $start;
     $64 = $k;
     $65 = (($63) + ($64))|0;
     $66 = (($65) + 512)|0;
     $67 = $1;
     $68 = (($67) + ($66)|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $j = $70;
    }
    $71 = $k;
    $72 = (($71) + 1)|0;
    $k = $72;
   }
   $73 = $k;
   $74 = ($73|0)==(1024);
   if ($74) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $75 = $j;
   $76 = ($75|0)==(0);
   if ($76) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $77 = $3;
   $78 = $start;
   $79 = (($78) + 1536)|0;
   $80 = $j;
   $81 = ($80*192)|0;
   $82 = (($79) + ($81))|0;
   $83 = (($82) + 189)|0;
   $84 = ($77|0)<($83|0);
   if ($84) {
    $85 = $start;
    $86 = (($85) + 1536)|0;
    $87 = $j;
    $88 = ($87*192)|0;
    $89 = (($86) + ($88))|0;
    $90 = (($89) + 189)|0;
    $91 = $3;
    $92 = (($90) - ($91))|0;
    $0 = $92;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   $k = 0;
   L40: while(1) {
    $93 = $k;
    $94 = $j;
    $95 = ($93|0)<=($94|0);
    if (!($95)) {
     label = 33;
     break;
    }
    $l = 0;
    while(1) {
     $96 = $l;
     $97 = ($96|0)<(64);
     if (!($97)) {
      break;
     }
     $98 = $start;
     $99 = (($98) + 1536)|0;
     $100 = $k;
     $101 = ($100*192)|0;
     $102 = (($99) + ($101))|0;
     $103 = $l;
     $104 = ($103*3)|0;
     $105 = (($102) + ($104))|0;
     $106 = $1;
     $107 = (($106) + ($105)|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = $108&255;
     $110 = ($109|0)>(36);
     if ($110) {
      label = 30;
      break L40;
     }
     $111 = $l;
     $112 = (($111) + 1)|0;
     $l = $112;
    }
    $113 = $k;
    $114 = (($113) + 1)|0;
    $k = $114;
   }
   if ((label|0) == 30) {
    $0 = -1;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
   else if ((label|0) == 33) {
    $115 = $1;
    $116 = ((($115)) + 2|0);
    $117 = $2;
    _pw_read_title($116,$117,13);
    $0 = 0;
    $118 = $0;
    STACKTOP = sp;return ($118|0);
   }
  }
 }
 $0 = -1;
 $118 = $0;
 STACKTOP = sp;return ($118|0);
}
function _depack_ksm($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Max = 0, $PatPos = 0, $Status = 0, $c1 = 0, $c5 = 0;
 var $i = 0, $j = 0, $k = 0, $plist = 0, $real_tnum = 0, $ssize = 0, $tdata = 0, $tmp = 0, $trknum = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 1960|0;
 $plist = sp + 1824|0;
 $trknum = sp + 1312|0;
 $real_tnum = sp + 800|0;
 $tdata = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $Status = 1;
 $ssize = 0;
 dest=$plist; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trknum|0),0,512)|0;
 _memset(($real_tnum|0),0,512)|0;
 $2 = $0;
 (_fseek(($2|0),2,0)|0);
 $3 = $1;
 $4 = $0;
 (_pw_move_data($3,$4,13)|0);
 $5 = $1;
 (_pw_write_zero($5,7)|0);
 $6 = $0;
 (_fseek(($6|0),32,0)|0);
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(15);
  if (!($8)) {
   break;
  }
  $9 = $1;
  (_pw_write_zero($9,22)|0);
  $10 = $0;
  (_fseek(($10|0),20,1)|0);
  $11 = $1;
  $12 = $0;
  $13 = (_read16b($12)|0);
  $14 = $13&65535;
  $k = $14;
  $15 = (($14|0) / 2)&-1;
  $16 = $15&65535;
  _write16b($11,$16);
  $17 = $k;
  $18 = $ssize;
  $19 = (($18) + ($17))|0;
  $ssize = $19;
  $20 = $1;
  _write8($20,0);
  $21 = $1;
  $22 = $0;
  $23 = (_read8($22)|0);
  _write8($21,$23);
  $24 = $0;
  (_read8($24)|0);
  $25 = $1;
  $26 = $0;
  $27 = (_read16b($26)|0);
  $28 = $27&65535;
  $j = $28;
  $29 = (($28|0) / 2)&-1;
  $30 = $29&65535;
  _write16b($25,$30);
  $31 = $k;
  $32 = $j;
  $33 = (($31) - ($32))|0;
  $j = $33;
  $34 = $1;
  $35 = $j;
  $36 = $k;
  $37 = ($35|0)!=($36|0);
  $38 = $j;
  $39 = (($38|0) / 2)&-1;
  $40 = $37 ? $39 : 1;
  $41 = $40&65535;
  _write16b($34,$41);
  $42 = $0;
  (_fseek(($42|0),6,1)|0);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $45 = ((($tmp)) + 29|0);
 HEAP8[$45>>0] = 1;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = ($46|0)<(16);
  if (!($47)) {
   break;
  }
  $48 = $1;
  (_fwrite(($tmp|0),30,1,($48|0))|0);
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $0;
 (_fseek(($51|0),512,0)|0);
 $PatPos = 0;
 $Max = 0;
 while(1) {
  $52 = $PatPos;
  $53 = $52&255;
  $54 = ($53|0)<(128);
  if (!($54)) {
   break;
  }
  $55 = $PatPos;
  $56 = $55&255;
  $57 = (($trknum) + ($56<<2)|0);
  $58 = $0;
  (_fread(($57|0),1,1,($58|0))|0);
  $59 = $PatPos;
  $60 = $59&255;
  $61 = (($trknum) + ($60<<2)|0);
  $62 = ((($61)) + 1|0);
  $63 = $0;
  (_fread(($62|0),1,1,($63|0))|0);
  $64 = $PatPos;
  $65 = $64&255;
  $66 = (($trknum) + ($65<<2)|0);
  $67 = ((($66)) + 2|0);
  $68 = $0;
  (_fread(($67|0),1,1,($68|0))|0);
  $69 = $PatPos;
  $70 = $69&255;
  $71 = (($trknum) + ($70<<2)|0);
  $72 = ((($71)) + 3|0);
  $73 = $0;
  (_fread(($72|0),1,1,($73|0))|0);
  $74 = $PatPos;
  $75 = $74&255;
  $76 = (($trknum) + ($75<<2)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)==(255);
  if ($79) {
   break;
  }
  $80 = $PatPos;
  $81 = $80&255;
  $82 = (($trknum) + ($81<<2)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $Max;
  $86 = $85&255;
  $87 = ($84|0)>($86|0);
  if ($87) {
   $88 = $PatPos;
   $89 = $88&255;
   $90 = (($trknum) + ($89<<2)|0);
   $91 = HEAP8[$90>>0]|0;
   $Max = $91;
  }
  $92 = $PatPos;
  $93 = $92&255;
  $94 = (($trknum) + ($93<<2)|0);
  $95 = ((($94)) + 1|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $Max;
  $99 = $98&255;
  $100 = ($97|0)>($99|0);
  if ($100) {
   $101 = $PatPos;
   $102 = $101&255;
   $103 = (($trknum) + ($102<<2)|0);
   $104 = ((($103)) + 1|0);
   $105 = HEAP8[$104>>0]|0;
   $Max = $105;
  }
  $106 = $PatPos;
  $107 = $106&255;
  $108 = (($trknum) + ($107<<2)|0);
  $109 = ((($108)) + 2|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = $Max;
  $113 = $112&255;
  $114 = ($111|0)>($113|0);
  if ($114) {
   $115 = $PatPos;
   $116 = $115&255;
   $117 = (($trknum) + ($116<<2)|0);
   $118 = ((($117)) + 2|0);
   $119 = HEAP8[$118>>0]|0;
   $Max = $119;
  }
  $120 = $PatPos;
  $121 = $120&255;
  $122 = (($trknum) + ($121<<2)|0);
  $123 = ((($122)) + 3|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = $Max;
  $127 = $126&255;
  $128 = ($125|0)>($127|0);
  if ($128) {
   $129 = $PatPos;
   $130 = $129&255;
   $131 = (($trknum) + ($130<<2)|0);
   $132 = ((($131)) + 3|0);
   $133 = HEAP8[$132>>0]|0;
   $Max = $133;
  }
  $134 = $PatPos;
  $135 = (($134) + 1)<<24>>24;
  $PatPos = $135;
 }
 $136 = $1;
 $137 = $PatPos;
 _write8($136,$137);
 $138 = $1;
 _write8($138,127);
 $c5 = 0;
 $i = 0;
 while(1) {
  $139 = $i;
  $140 = $PatPos;
  $141 = $140&255;
  $142 = ($139|0)<($141|0);
  if (!($142)) {
   break;
  }
  $143 = $i;
  $144 = ($143|0)==(0);
  if ($144) {
   $145 = $c5;
   HEAP8[$plist>>0] = $145;
   $146 = $c5;
   $147 = $146&255;
   $148 = (($147) + 1)|0;
   $149 = $148&255;
   $c5 = $149;
  } else {
   $j = 0;
   while(1) {
    $150 = $j;
    $151 = $i;
    $152 = ($150|0)<($151|0);
    if (!($152)) {
     break;
    }
    $Status = 1;
    $k = 0;
    while(1) {
     $153 = $k;
     $154 = ($153|0)<(4);
     if (!($154)) {
      break;
     }
     $155 = $k;
     $156 = $j;
     $157 = (($trknum) + ($156<<2)|0);
     $158 = (($157) + ($155)|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     $161 = $k;
     $162 = $i;
     $163 = (($trknum) + ($162<<2)|0);
     $164 = (($163) + ($161)|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     $167 = ($160|0)!=($166|0);
     if ($167) {
      label = 28;
      break;
     }
     $168 = $k;
     $169 = (($168) + 1)|0;
     $k = $169;
    }
    if ((label|0) == 28) {
     label = 0;
     $Status = 2;
    }
    $170 = $Status;
    $171 = $170&255;
    $172 = ($171|0)==(1);
    $173 = $j;
    if ($172) {
     label = 31;
     break;
    }
    $178 = (($173) + 1)|0;
    $j = $178;
   }
   if ((label|0) == 31) {
    label = 0;
    $174 = (($plist) + ($173)|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $i;
    $177 = (($plist) + ($176)|0);
    HEAP8[$177>>0] = $175;
   }
   $179 = $Status;
   $180 = $179&255;
   $181 = ($180|0)==(2);
   if ($181) {
    $182 = $c5;
    $183 = $i;
    $184 = (($plist) + ($183)|0);
    HEAP8[$184>>0] = $182;
    $185 = $c5;
    $186 = $185&255;
    $187 = (($186) + 1)|0;
    $188 = $187&255;
    $c5 = $188;
   }
   $Status = 1;
  }
  $189 = $i;
  $190 = (($189) + 1)|0;
  $i = $190;
 }
 $c1 = 0;
 $i = 0;
 while(1) {
  $191 = $i;
  $192 = $PatPos;
  $193 = $192&255;
  $194 = ($191|0)<($193|0);
  if (!($194)) {
   break;
  }
  $195 = $i;
  $196 = ($195|0)==(0);
  if ($196) {
   $197 = $i;
   $198 = (($trknum) + ($197<<2)|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $c1;
   $201 = $200&255;
   $202 = (($real_tnum) + ($201<<2)|0);
   HEAP8[$202>>0] = $199;
   $203 = $i;
   $204 = (($trknum) + ($203<<2)|0);
   $205 = ((($204)) + 1|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $c1;
   $208 = $207&255;
   $209 = (($real_tnum) + ($208<<2)|0);
   $210 = ((($209)) + 1|0);
   HEAP8[$210>>0] = $206;
   $211 = $i;
   $212 = (($trknum) + ($211<<2)|0);
   $213 = ((($212)) + 2|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $c1;
   $216 = $215&255;
   $217 = (($real_tnum) + ($216<<2)|0);
   $218 = ((($217)) + 2|0);
   HEAP8[$218>>0] = $214;
   $219 = $i;
   $220 = (($trknum) + ($219<<2)|0);
   $221 = ((($220)) + 3|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $c1;
   $224 = $223&255;
   $225 = (($real_tnum) + ($224<<2)|0);
   $226 = ((($225)) + 3|0);
   HEAP8[$226>>0] = $222;
   $227 = $c1;
   $228 = $227&255;
   $229 = (($228) + 1)|0;
   $230 = $229&255;
   $c1 = $230;
  } else {
   $j = 0;
   while(1) {
    $231 = $j;
    $232 = $i;
    $233 = ($231|0)<($232|0);
    if (!($233)) {
     break;
    }
    $Status = 1;
    $234 = $i;
    $235 = (($plist) + ($234)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = $j;
    $239 = (($plist) + ($238)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($237|0)==($241|0);
    if ($242) {
     label = 44;
     break;
    }
    $243 = $j;
    $244 = (($243) + 1)|0;
    $j = $244;
   }
   if ((label|0) == 44) {
    label = 0;
    $Status = 2;
   }
   $245 = $Status;
   $246 = $245&255;
   $247 = ($246|0)==(2);
   if (!($247)) {
    $248 = $i;
    $249 = (($trknum) + ($248<<2)|0);
    $250 = HEAP8[$249>>0]|0;
    $251 = $c1;
    $252 = $251&255;
    $253 = (($real_tnum) + ($252<<2)|0);
    HEAP8[$253>>0] = $250;
    $254 = $i;
    $255 = (($trknum) + ($254<<2)|0);
    $256 = ((($255)) + 1|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = $c1;
    $259 = $258&255;
    $260 = (($real_tnum) + ($259<<2)|0);
    $261 = ((($260)) + 1|0);
    HEAP8[$261>>0] = $257;
    $262 = $i;
    $263 = (($trknum) + ($262<<2)|0);
    $264 = ((($263)) + 2|0);
    $265 = HEAP8[$264>>0]|0;
    $266 = $c1;
    $267 = $266&255;
    $268 = (($real_tnum) + ($267<<2)|0);
    $269 = ((($268)) + 2|0);
    HEAP8[$269>>0] = $265;
    $270 = $i;
    $271 = (($trknum) + ($270<<2)|0);
    $272 = ((($271)) + 3|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $c1;
    $275 = $274&255;
    $276 = (($real_tnum) + ($275<<2)|0);
    $277 = ((($276)) + 3|0);
    HEAP8[$277>>0] = $273;
    $278 = $c1;
    $279 = $278&255;
    $280 = (($279) + 1)|0;
    $281 = $280&255;
    $c1 = $281;
    $Status = 1;
   }
  }
  $282 = $i;
  $283 = (($282) + 1)|0;
  $i = $283;
 }
 $284 = $1;
 (_fwrite(($plist|0),128,1,($284|0))|0);
 $285 = $1;
 _write32b($285,1294879534);
 $i = 0;
 while(1) {
  $286 = $i;
  $287 = $c5;
  $288 = $287&255;
  $289 = ($286|0)<($288|0);
  if (!($289)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  _memset(($tdata|0),0,768)|0;
  $290 = $0;
  $291 = $i;
  $292 = (($real_tnum) + ($291<<2)|0);
  $293 = HEAP8[$292>>0]|0;
  $294 = $293&255;
  $295 = ($294*192)|0;
  $296 = (1536 + ($295))|0;
  (_fseek(($290|0),($296|0),0)|0);
  $297 = $0;
  (_fread(($tdata|0),192,1,($297|0))|0);
  $298 = $0;
  $299 = $i;
  $300 = (($real_tnum) + ($299<<2)|0);
  $301 = ((($300)) + 1|0);
  $302 = HEAP8[$301>>0]|0;
  $303 = $302&255;
  $304 = ($303*192)|0;
  $305 = (1536 + ($304))|0;
  (_fseek(($298|0),($305|0),0)|0);
  $306 = ((($tdata)) + 192|0);
  $307 = $0;
  (_fread(($306|0),192,1,($307|0))|0);
  $308 = $0;
  $309 = $i;
  $310 = (($real_tnum) + ($309<<2)|0);
  $311 = ((($310)) + 2|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&255;
  $314 = ($313*192)|0;
  $315 = (1536 + ($314))|0;
  (_fseek(($308|0),($315|0),0)|0);
  $316 = ((($tdata)) + 384|0);
  $317 = $0;
  (_fread(($316|0),192,1,($317|0))|0);
  $318 = $0;
  $319 = $i;
  $320 = (($real_tnum) + ($319<<2)|0);
  $321 = ((($320)) + 3|0);
  $322 = HEAP8[$321>>0]|0;
  $323 = $322&255;
  $324 = ($323*192)|0;
  $325 = (1536 + ($324))|0;
  (_fseek(($318|0),($325|0),0)|0);
  $326 = ((($tdata)) + 576|0);
  $327 = $0;
  (_fread(($326|0),192,1,($327|0))|0);
  $j = 0;
  while(1) {
   $328 = $j;
   $329 = ($328|0)<(64);
   if (!($329)) {
    break;
   }
   $330 = $j;
   $331 = $330<<4;
   $x = $331;
   $332 = $j;
   $333 = ($332*3)|0;
   $334 = (($tdata) + ($333)|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $335&255;
   $337 = (8240 + ($336<<1)|0);
   $338 = HEAP8[$337>>0]|0;
   $339 = $x;
   $340 = (($tmp) + ($339)|0);
   HEAP8[$340>>0] = $338;
   $341 = $j;
   $342 = ($341*3)|0;
   $343 = (($tdata) + ($342)|0);
   $344 = HEAP8[$343>>0]|0;
   $345 = $344&255;
   $346 = (8240 + ($345<<1)|0);
   $347 = ((($346)) + 1|0);
   $348 = HEAP8[$347>>0]|0;
   $349 = $x;
   $350 = (($349) + 1)|0;
   $351 = (($tmp) + ($350)|0);
   HEAP8[$351>>0] = $348;
   $352 = $j;
   $353 = ($352*3)|0;
   $354 = (($353) + 1)|0;
   $355 = (($tdata) + ($354)|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356&255;
   $358 = $357 & 15;
   $359 = ($358|0)==(13);
   if ($359) {
    $360 = $j;
    $361 = ($360*3)|0;
    $362 = (($361) + 1)|0;
    $363 = (($tdata) + ($362)|0);
    $364 = HEAP8[$363>>0]|0;
    $365 = $364&255;
    $366 = (($365) - 3)|0;
    $367 = $366&255;
    HEAP8[$363>>0] = $367;
   }
   $368 = $j;
   $369 = ($368*3)|0;
   $370 = (($369) + 1)|0;
   $371 = (($tdata) + ($370)|0);
   $372 = HEAP8[$371>>0]|0;
   $373 = $x;
   $374 = (($373) + 2)|0;
   $375 = (($tmp) + ($374)|0);
   HEAP8[$375>>0] = $372;
   $376 = $j;
   $377 = ($376*3)|0;
   $378 = (($377) + 2)|0;
   $379 = (($tdata) + ($378)|0);
   $380 = HEAP8[$379>>0]|0;
   $381 = $x;
   $382 = (($381) + 3)|0;
   $383 = (($tmp) + ($382)|0);
   HEAP8[$383>>0] = $380;
   $384 = $j;
   $385 = ($384*3)|0;
   $386 = ((($tdata)) + 192|0);
   $387 = (($386) + ($385)|0);
   $388 = HEAP8[$387>>0]|0;
   $389 = $388&255;
   $390 = (8240 + ($389<<1)|0);
   $391 = HEAP8[$390>>0]|0;
   $392 = $x;
   $393 = (($392) + 4)|0;
   $394 = (($tmp) + ($393)|0);
   HEAP8[$394>>0] = $391;
   $395 = $j;
   $396 = ($395*3)|0;
   $397 = ((($tdata)) + 192|0);
   $398 = (($397) + ($396)|0);
   $399 = HEAP8[$398>>0]|0;
   $400 = $399&255;
   $401 = (8240 + ($400<<1)|0);
   $402 = ((($401)) + 1|0);
   $403 = HEAP8[$402>>0]|0;
   $404 = $x;
   $405 = (($404) + 5)|0;
   $406 = (($tmp) + ($405)|0);
   HEAP8[$406>>0] = $403;
   $407 = $j;
   $408 = ($407*3)|0;
   $409 = (($408) + 1)|0;
   $410 = ((($tdata)) + 192|0);
   $411 = (($410) + ($409)|0);
   $412 = HEAP8[$411>>0]|0;
   $413 = $412&255;
   $414 = $413 & 15;
   $415 = ($414|0)==(13);
   if ($415) {
    $416 = $j;
    $417 = ($416*3)|0;
    $418 = (($417) + 1)|0;
    $419 = ((($tdata)) + 192|0);
    $420 = (($419) + ($418)|0);
    $421 = HEAP8[$420>>0]|0;
    $422 = $421&255;
    $423 = (($422) - 3)|0;
    $424 = $423&255;
    HEAP8[$420>>0] = $424;
   }
   $425 = $j;
   $426 = ($425*3)|0;
   $427 = (($426) + 1)|0;
   $428 = ((($tdata)) + 192|0);
   $429 = (($428) + ($427)|0);
   $430 = HEAP8[$429>>0]|0;
   $431 = $x;
   $432 = (($431) + 6)|0;
   $433 = (($tmp) + ($432)|0);
   HEAP8[$433>>0] = $430;
   $434 = $j;
   $435 = ($434*3)|0;
   $436 = (($435) + 2)|0;
   $437 = ((($tdata)) + 192|0);
   $438 = (($437) + ($436)|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $x;
   $441 = (($440) + 7)|0;
   $442 = (($tmp) + ($441)|0);
   HEAP8[$442>>0] = $439;
   $443 = $j;
   $444 = ($443*3)|0;
   $445 = ((($tdata)) + 384|0);
   $446 = (($445) + ($444)|0);
   $447 = HEAP8[$446>>0]|0;
   $448 = $447&255;
   $449 = (8240 + ($448<<1)|0);
   $450 = HEAP8[$449>>0]|0;
   $451 = $x;
   $452 = (($451) + 8)|0;
   $453 = (($tmp) + ($452)|0);
   HEAP8[$453>>0] = $450;
   $454 = $j;
   $455 = ($454*3)|0;
   $456 = ((($tdata)) + 384|0);
   $457 = (($456) + ($455)|0);
   $458 = HEAP8[$457>>0]|0;
   $459 = $458&255;
   $460 = (8240 + ($459<<1)|0);
   $461 = ((($460)) + 1|0);
   $462 = HEAP8[$461>>0]|0;
   $463 = $x;
   $464 = (($463) + 9)|0;
   $465 = (($tmp) + ($464)|0);
   HEAP8[$465>>0] = $462;
   $466 = $j;
   $467 = ($466*3)|0;
   $468 = (($467) + 1)|0;
   $469 = ((($tdata)) + 384|0);
   $470 = (($469) + ($468)|0);
   $471 = HEAP8[$470>>0]|0;
   $472 = $471&255;
   $473 = $472 & 15;
   $474 = ($473|0)==(13);
   if ($474) {
    $475 = $j;
    $476 = ($475*3)|0;
    $477 = (($476) + 1)|0;
    $478 = ((($tdata)) + 384|0);
    $479 = (($478) + ($477)|0);
    $480 = HEAP8[$479>>0]|0;
    $481 = $480&255;
    $482 = (($481) - 3)|0;
    $483 = $482&255;
    HEAP8[$479>>0] = $483;
   }
   $484 = $j;
   $485 = ($484*3)|0;
   $486 = (($485) + 1)|0;
   $487 = ((($tdata)) + 384|0);
   $488 = (($487) + ($486)|0);
   $489 = HEAP8[$488>>0]|0;
   $490 = $x;
   $491 = (($490) + 10)|0;
   $492 = (($tmp) + ($491)|0);
   HEAP8[$492>>0] = $489;
   $493 = $j;
   $494 = ($493*3)|0;
   $495 = (($494) + 2)|0;
   $496 = ((($tdata)) + 384|0);
   $497 = (($496) + ($495)|0);
   $498 = HEAP8[$497>>0]|0;
   $499 = $x;
   $500 = (($499) + 11)|0;
   $501 = (($tmp) + ($500)|0);
   HEAP8[$501>>0] = $498;
   $502 = $j;
   $503 = ($502*3)|0;
   $504 = ((($tdata)) + 576|0);
   $505 = (($504) + ($503)|0);
   $506 = HEAP8[$505>>0]|0;
   $507 = $506&255;
   $508 = (8240 + ($507<<1)|0);
   $509 = HEAP8[$508>>0]|0;
   $510 = $x;
   $511 = (($510) + 12)|0;
   $512 = (($tmp) + ($511)|0);
   HEAP8[$512>>0] = $509;
   $513 = $j;
   $514 = ($513*3)|0;
   $515 = ((($tdata)) + 576|0);
   $516 = (($515) + ($514)|0);
   $517 = HEAP8[$516>>0]|0;
   $518 = $517&255;
   $519 = (8240 + ($518<<1)|0);
   $520 = ((($519)) + 1|0);
   $521 = HEAP8[$520>>0]|0;
   $522 = $x;
   $523 = (($522) + 13)|0;
   $524 = (($tmp) + ($523)|0);
   HEAP8[$524>>0] = $521;
   $525 = $j;
   $526 = ($525*3)|0;
   $527 = (($526) + 1)|0;
   $528 = ((($tdata)) + 576|0);
   $529 = (($528) + ($527)|0);
   $530 = HEAP8[$529>>0]|0;
   $531 = $530&255;
   $532 = $531 & 15;
   $533 = ($532|0)==(13);
   if ($533) {
    $534 = $j;
    $535 = ($534*3)|0;
    $536 = (($535) + 1)|0;
    $537 = ((($tdata)) + 576|0);
    $538 = (($537) + ($536)|0);
    $539 = HEAP8[$538>>0]|0;
    $540 = $539&255;
    $541 = (($540) - 3)|0;
    $542 = $541&255;
    HEAP8[$538>>0] = $542;
   }
   $543 = $j;
   $544 = ($543*3)|0;
   $545 = (($544) + 1)|0;
   $546 = ((($tdata)) + 576|0);
   $547 = (($546) + ($545)|0);
   $548 = HEAP8[$547>>0]|0;
   $549 = $x;
   $550 = (($549) + 14)|0;
   $551 = (($tmp) + ($550)|0);
   HEAP8[$551>>0] = $548;
   $552 = $j;
   $553 = ($552*3)|0;
   $554 = (($553) + 2)|0;
   $555 = ((($tdata)) + 576|0);
   $556 = (($555) + ($554)|0);
   $557 = HEAP8[$556>>0]|0;
   $558 = $x;
   $559 = (($558) + 15)|0;
   $560 = (($tmp) + ($559)|0);
   HEAP8[$560>>0] = $557;
   $561 = $j;
   $562 = (($561) + 1)|0;
   $j = $562;
  }
  $563 = $1;
  (_fwrite(($tmp|0),1024,1,($563|0))|0);
  $564 = $i;
  $565 = (($564) + 1)|0;
  $i = $565;
 }
 $566 = $0;
 $567 = $Max;
 $568 = $567&255;
 $569 = (($568) + 1)|0;
 $570 = ($569*192)|0;
 $571 = (1536 + ($570))|0;
 (_fseek(($566|0),($571|0),0)|0);
 $572 = $1;
 $573 = $0;
 $574 = $ssize;
 (_pw_move_data($572,$573,$574)|0);
 STACKTOP = sp;return 0;
}
function _test_mp_id($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $j = 0, $k = 0, $l = 0, $or$cond = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $1;
 $5 = (_readmem32b($4)|0);
 $6 = ($5|0)!=(1414679345);
 if ($6) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $j = 0;
 while(1) {
  $7 = $j;
  $8 = ($7|0)<(31);
  $9 = $start;
  if (!($8)) {
   break;
  }
  $10 = (($9) + 6)|0;
  $11 = $j;
  $12 = $11<<3;
  $13 = (($10) + ($12))|0;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)>(15);
  if ($18) {
   label = 6;
   break;
  }
  $19 = $j;
  $20 = (($19) + 1)|0;
  $j = $20;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $21 = (($9) + 252)|0;
 $22 = $1;
 $23 = (($22) + ($21)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $l = $25;
 $26 = $l;
 $27 = ($26|0)>(127);
 $28 = $l;
 $29 = ($28|0)==(0);
 $or$cond = $27 | $29;
 if ($or$cond) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $k = 0;
 $j = 0;
 while(1) {
  $30 = $j;
  $31 = ($30|0)<(128);
  if (!($31)) {
   break;
  }
  $32 = $start;
  $33 = (($32) + 254)|0;
  $34 = $j;
  $35 = (($33) + ($34))|0;
  $36 = $1;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $k;
  $41 = ($39|0)>($40|0);
  if ($41) {
   $42 = $start;
   $43 = (($42) + 254)|0;
   $44 = $j;
   $45 = (($43) + ($44))|0;
   $46 = $1;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $k = $49;
  }
  $50 = $start;
  $51 = (($50) + 254)|0;
  $52 = $j;
  $53 = (($51) + ($52))|0;
  $54 = $1;
  $55 = (($54) + ($53)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = ($57|0)>(127);
  if ($58) {
   label = 15;
   break;
  }
  $59 = $j;
  $60 = (($59) + 1)|0;
  $j = $60;
 }
 if ((label|0) == 15) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $61 = $k;
 $62 = (($61) + 1)|0;
 $k = $62;
 $j = 0;
 while(1) {
  $63 = $j;
  $64 = $k;
  $65 = $64<<8;
  $66 = ($63|0)<($65|0);
  if (!($66)) {
   label = 22;
   break;
  }
  $67 = $start;
  $68 = (($67) + 382)|0;
  $69 = $j;
  $70 = $69<<2;
  $71 = (($68) + ($70))|0;
  $72 = $1;
  $73 = (($72) + ($71)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $l = $75;
  $76 = $l;
  $77 = ($76|0)>(19);
  if ($77) {
   label = 20;
   break;
  }
  $78 = $j;
  $79 = (($78) + 1)|0;
  $j = $79;
 }
 if ((label|0) == 20) {
  $0 = -1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 else if ((label|0) == 22) {
  $80 = $2;
  _pw_read_title(0,$80,0);
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _depack_mp($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $c1 = 0, $i = 0, $max = 0, $ptable = 0, $size = 0, $ssize = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 $4 = (_read32b($3)|0);
 $5 = ($4|0)!=(1414679345);
 if ($5) {
  $6 = $0;
  (_fseek(($6|0),-4,1)|0);
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(31);
  $9 = $1;
  if (!($8)) {
   break;
  }
  (_pw_write_zero($9,22)|0);
  $10 = $1;
  $11 = $0;
  $12 = (_read16b($11)|0);
  $13 = $12&65535;
  $size = $13;
  $14 = $13&65535;
  _write16b($10,$14);
  $15 = $size;
  $16 = $15<<1;
  $17 = $ssize;
  $18 = (($17) + ($16))|0;
  $ssize = $18;
  $19 = $1;
  $20 = $0;
  $21 = (_read8($20)|0);
  _write8($19,$21);
  $22 = $1;
  $23 = $0;
  $24 = (_read8($23)|0);
  _write8($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_read16b($26)|0);
  _write16b($25,$27);
  $28 = $1;
  $29 = $0;
  $30 = (_read16b($29)|0);
  _write16b($28,$30);
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $0;
 $34 = (_read8($33)|0);
 _write8($9,$34);
 $35 = $1;
 $36 = $0;
 $37 = (_read8($36)|0);
 _write8($35,$37);
 $i = 0;
 $max = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(128);
  if (!($39)) {
   break;
  }
  $40 = $1;
  $41 = $0;
  $42 = (_read8($41)|0);
  $c1 = $42;
  _write8($40,$42);
  $43 = $c1;
  $44 = $43&255;
  $45 = $max;
  $46 = $45&255;
  $47 = ($44|0)>($46|0);
  if ($47) {
   $48 = $c1;
   $max = $48;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $max;
 $52 = (($51) + 1)<<24>>24;
 $max = $52;
 $53 = $1;
 _write32b($53,1294879534);
 $54 = $0;
 $55 = (_read32b($54)|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  $58 = $1;
  $59 = $0;
  $60 = $max;
  $61 = $60&255;
  $62 = $61<<10;
  (_pw_move_data($58,$59,$62)|0);
  $63 = $1;
  $64 = $0;
  $65 = $ssize;
  (_pw_move_data($63,$64,$65)|0);
  STACKTOP = sp;return 0;
 }
 $57 = $0;
 (_fseek(($57|0),-4,1)|0);
 $58 = $1;
 $59 = $0;
 $60 = $max;
 $61 = $60&255;
 $62 = $61<<10;
 (_pw_move_data($58,$59,$62)|0);
 $63 = $1;
 $64 = $0;
 $65 = $ssize;
 (_pw_move_data($63,$64,$65)|0);
 STACKTOP = sp;return 0;
}
function _test_mp_noid($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, $x = 0, $x1 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $l = 0;
 $j = 0;
 while(1) {
  $4 = $j;
  $5 = ($4|0)<(31);
  if (!($5)) {
   label = 15;
   break;
  }
  $6 = $start;
  $7 = $j;
  $8 = $7<<3;
  $9 = (($6) + ($8))|0;
  $x = $9;
  $10 = $1;
  $11 = $x;
  $12 = (($10) + ($11)|0);
  $13 = (_readmem16b($12)|0);
  $14 = $13&65535;
  $15 = $14<<1;
  $k = $15;
  $16 = $1;
  $17 = $x;
  $18 = (($16) + ($17)|0);
  $19 = ((($18)) + 4|0);
  $20 = (_readmem16b($19)|0);
  $21 = $20&65535;
  $22 = $21<<1;
  $m = $22;
  $23 = $1;
  $24 = $x;
  $25 = (($23) + ($24)|0);
  $26 = ((($25)) + 6|0);
  $27 = (_readmem16b($26)|0);
  $28 = $27&65535;
  $29 = $28<<1;
  $n = $29;
  $30 = $k;
  $31 = $l;
  $32 = (($31) + ($30))|0;
  $l = $32;
  $33 = $x;
  $34 = (($33) + 2)|0;
  $35 = $1;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ($38|0)>(15);
  if ($39) {
   label = 4;
   break;
  }
  $40 = $n;
  $41 = ($40|0)!=(2);
  if ($41) {
   $42 = $m;
   $43 = $n;
   $44 = (($42) + ($43))|0;
   $45 = $k;
   $46 = ($44|0)>($45|0);
   if ($46) {
    label = 7;
    break;
   }
  }
  $47 = $n;
  $48 = $k;
  $49 = (($48) + 2)|0;
  $50 = ($47|0)>($49|0);
  if ($50) {
   label = 9;
   break;
  }
  $51 = $m;
  $52 = ($51|0)!=(0);
  $53 = $n;
  $54 = ($53|0)<=(2);
  $or$cond = $52 & $54;
  if ($or$cond) {
   label = 11;
   break;
  }
  $55 = $k;
  $56 = ($55|0)!=(0);
  $57 = $n;
  $58 = ($57|0)==(0);
  $or$cond3 = $56 & $58;
  if ($or$cond3) {
   label = 13;
   break;
  }
  $59 = $j;
  $60 = (($59) + 1)|0;
  $j = $60;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 9) {
  $0 = -1;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $193 = $0;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 15) {
  $61 = $l;
  $62 = ($61|0)<=(2);
  if ($62) {
   $0 = -1;
   $193 = $0;
   STACKTOP = sp;return ($193|0);
  }
  $63 = $start;
  $64 = (($63) + 248)|0;
  $65 = $1;
  $66 = (($65) + ($64)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $l = $68;
  $69 = $l;
  $70 = ($69|0)>(127);
  $71 = $l;
  $72 = ($71|0)==(0);
  $or$cond5 = $70 | $72;
  if ($or$cond5) {
   $0 = -1;
   $193 = $0;
   STACKTOP = sp;return ($193|0);
  }
  $k = 0;
  $j = 0;
  while(1) {
   $73 = $j;
   $74 = ($73|0)<(128);
   if (!($74)) {
    label = 29;
    break;
   }
   $75 = $start;
   $76 = (($75) + 250)|0;
   $77 = $j;
   $78 = (($76) + ($77))|0;
   $79 = $1;
   $80 = (($79) + ($78)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $k;
   $84 = ($82|0)>($83|0);
   if ($84) {
    $85 = $start;
    $86 = (($85) + 250)|0;
    $87 = $j;
    $88 = (($86) + ($87))|0;
    $89 = $1;
    $90 = (($89) + ($88)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $k = $92;
   }
   $93 = $start;
   $94 = (($93) + 250)|0;
   $95 = $j;
   $96 = (($94) + ($95))|0;
   $97 = $1;
   $98 = (($97) + ($96)|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = ($100|0)>(127);
   if ($101) {
    label = 24;
    break;
   }
   $102 = $j;
   $103 = $l;
   $104 = (($103) + 3)|0;
   $105 = ($102|0)>($104|0);
   if ($105) {
    $106 = $start;
    $107 = (($106) + 250)|0;
    $108 = $j;
    $109 = (($107) + ($108))|0;
    $110 = $1;
    $111 = (($110) + ($109)|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112&255;
    $114 = ($113|0)!=(0);
    if ($114) {
     label = 27;
     break;
    }
   }
   $115 = $j;
   $116 = (($115) + 1)|0;
   $j = $116;
  }
  if ((label|0) == 24) {
   $0 = -1;
   $193 = $0;
   STACKTOP = sp;return ($193|0);
  }
  else if ((label|0) == 27) {
   $0 = -1;
   $193 = $0;
   STACKTOP = sp;return ($193|0);
  }
  else if ((label|0) == 29) {
   $117 = $k;
   $118 = (($117) + 1)|0;
   $k = $118;
   $j = 0;
   while(1) {
    $119 = $j;
    $120 = $k;
    $121 = $120<<8;
    $122 = ($119|0)<($121|0);
    if (!($122)) {
     label = 36;
     break;
    }
    $123 = $start;
    $124 = $j;
    $125 = $124<<2;
    $126 = (($123) + ($125))|0;
    $x1 = $126;
    $127 = $x1;
    $128 = (($127) + 378)|0;
    $129 = $1;
    $130 = (($129) + ($128)|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    $l = $132;
    $133 = $l;
    $134 = ($133|0)>(19);
    $135 = $l;
    $136 = ($135|0)!=(74);
    $or$cond7 = $134 & $136;
    if ($or$cond7) {
     label = 32;
     break;
    }
    $137 = $x1;
    $138 = (($137) + 378)|0;
    $139 = $1;
    $140 = (($139) + ($138)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $142 & 15;
    $ssize = $143;
    $144 = $ssize;
    $145 = $144<<8;
    $ssize = $145;
    $146 = $x1;
    $147 = (($146) + 379)|0;
    $148 = $1;
    $149 = (($148) + ($147)|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = $ssize;
    $153 = (($152) + ($151))|0;
    $ssize = $153;
    $154 = $ssize;
    $155 = ($154|0)>(0);
    $156 = $ssize;
    $157 = ($156|0)<(113);
    $or$cond9 = $155 & $157;
    if ($or$cond9) {
     label = 34;
     break;
    }
    $158 = $j;
    $159 = (($158) + 1)|0;
    $j = $159;
   }
   if ((label|0) == 32) {
    $0 = -1;
    $193 = $0;
    STACKTOP = sp;return ($193|0);
   }
   else if ((label|0) == 34) {
    $0 = -1;
    $193 = $0;
    STACKTOP = sp;return ($193|0);
   }
   else if ((label|0) == 36) {
    $j = 0;
    while(1) {
     $160 = $j;
     $161 = ($160|0)<(31);
     if (!($161)) {
      label = 41;
      break;
     }
     $162 = $start;
     $163 = $j;
     $164 = $163<<3;
     $165 = (($162) + ($164))|0;
     $x2 = $165;
     $166 = $1;
     $167 = $x2;
     $168 = (($166) + ($167)|0);
     $169 = (_readmem16b($168)|0);
     $170 = $169&65535;
     $171 = $170<<1;
     $k = $171;
     $172 = $1;
     $173 = $x2;
     $174 = (($172) + ($173)|0);
     $175 = ((($174)) + 4|0);
     $176 = (_readmem16b($175)|0);
     $177 = $176&65535;
     $178 = $1;
     $179 = $x2;
     $180 = (($178) + ($179)|0);
     $181 = ((($180)) + 6|0);
     $182 = (_readmem16b($181)|0);
     $183 = $182&65535;
     $184 = (($177) + ($183))|0;
     $185 = $184<<1;
     $l = $185;
     $186 = $l;
     $187 = $k;
     $188 = (($187) + 2)|0;
     $189 = ($186|0)>($188|0);
     if ($189) {
      label = 39;
      break;
     }
     $190 = $j;
     $191 = (($190) + 1)|0;
     $j = $191;
    }
    if ((label|0) == 39) {
     $0 = -1;
     $193 = $0;
     STACKTOP = sp;return ($193|0);
    }
    else if ((label|0) == 41) {
     $192 = $2;
     _pw_read_title(0,$192,0);
     $0 = 0;
     $193 = $0;
     STACKTOP = sp;return ($193|0);
    }
   }
  }
 }
 return (0)|0;
}
function _test_np1($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $1;
 $5 = $start;
 $6 = (($4) + ($5)|0);
 $7 = ((($6)) + 2|0);
 $8 = (_readmem16b($7)|0);
 $9 = $8&65535;
 $j = $9;
 $10 = $j;
 $11 = (($10|0) % 2)&-1;
 $12 = ($11|0)!=(0);
 $13 = $j;
 $14 = ($13|0)==(0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 $15 = $start;
 $16 = (($15) + 1)|0;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 15;
 $22 = ($21|0)!=(12);
 if ($22) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 $23 = $start;
 $24 = $1;
 $25 = (($24) + ($23)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 4;
 $29 = $28 & 240;
 $30 = $start;
 $31 = (($30) + 1)|0;
 $32 = $1;
 $33 = (($32) + ($31)|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 >> 4;
 $37 = $36 & 15;
 $38 = $29 | $37;
 $l = $38;
 $39 = $l;
 $40 = ($39|0)>(31);
 $41 = $l;
 $42 = ($41|0)==(0);
 $or$cond3 = $40 | $42;
 if ($or$cond3) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 $43 = $3;
 $44 = $start;
 $45 = (($44) + 15)|0;
 $46 = $l;
 $47 = $46<<4;
 $48 = (($45) + ($47))|0;
 $49 = ($43|0)<($48|0);
 if ($49) {
  $50 = $start;
  $51 = (($50) + 15)|0;
  $52 = $l;
  $53 = $52<<4;
  $54 = (($51) + ($53))|0;
  $55 = $3;
  $56 = (($54) - ($55))|0;
  $0 = $56;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 $k = 0;
 while(1) {
  $57 = $k;
  $58 = $l;
  $59 = ($57|0)<($58|0);
  if (!($59)) {
   break;
  }
  $60 = $start;
  $61 = (($60) + 15)|0;
  $62 = $k;
  $63 = $62<<4;
  $64 = (($61) + ($63))|0;
  $65 = $1;
  $66 = (($65) + ($64)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(64);
  if ($69) {
   label = 12;
   break;
  }
  $70 = $k;
  $71 = (($70) + 1)|0;
  $k = $71;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 $ssize = 0;
 $k = 0;
 while(1) {
  $72 = $k;
  $73 = $l;
  $74 = ($72|0)<($73|0);
  if (!($74)) {
   label = 23;
   break;
  }
  $75 = $1;
  $76 = $start;
  $77 = (($75) + ($76)|0);
  $78 = $k;
  $79 = $78<<4;
  $80 = (($77) + ($79)|0);
  $81 = ((($80)) + 12|0);
  $82 = (_readmem16b($81)|0);
  $83 = $82&65535;
  $84 = $83<<1;
  $o = $84;
  $85 = $1;
  $86 = $start;
  $87 = (($85) + ($86)|0);
  $88 = $k;
  $89 = $88<<4;
  $90 = (($87) + ($89)|0);
  $91 = ((($90)) + 20|0);
  $92 = (_readmem16b($91)|0);
  $93 = $92&65535;
  $94 = $93<<1;
  $m = $94;
  $95 = $1;
  $96 = $start;
  $97 = (($95) + ($96)|0);
  $98 = $k;
  $99 = $98<<4;
  $100 = (($97) + ($99)|0);
  $101 = ((($100)) + 22|0);
  $102 = (_readmem16b($101)|0);
  $103 = $102&65535;
  $n = $103;
  $104 = $o;
  $105 = ($104|0)>(65535);
  $106 = $m;
  $107 = ($106|0)>(65535);
  $or$cond5 = $105 | $107;
  $108 = $n;
  $109 = ($108|0)>(65535);
  $or$cond7 = $or$cond5 | $109;
  if ($or$cond7) {
   label = 17;
   break;
  }
  $110 = $m;
  $111 = $n;
  $112 = (($110) + ($111))|0;
  $113 = $o;
  $114 = (($113) + 2)|0;
  $115 = ($112|0)>($114|0);
  if ($115) {
   label = 19;
   break;
  }
  $116 = $n;
  $117 = ($116|0)!=(0);
  $118 = $m;
  $119 = ($118|0)==(0);
  $or$cond9 = $117 & $119;
  if ($or$cond9) {
   label = 21;
   break;
  }
  $120 = $o;
  $121 = $ssize;
  $122 = (($121) + ($120))|0;
  $ssize = $122;
  $123 = $k;
  $124 = (($123) + 1)|0;
  $k = $124;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 else if ((label|0) == 21) {
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 else if ((label|0) == 23) {
  $125 = $ssize;
  $126 = ($125|0)<=(4);
  if ($126) {
   $0 = -1;
   $199 = $0;
   STACKTOP = sp;return ($199|0);
  }
  $127 = $l;
  $128 = $127<<4;
  $129 = (($128) + 8)|0;
  $130 = (($129) + 4)|0;
  $l = $130;
  $n = 0;
  $k = 0;
  while(1) {
   $131 = $k;
   $132 = $j;
   $133 = ($131|0)<($132|0);
   if (!($133)) {
    break;
   }
   $134 = $1;
   $135 = $start;
   $136 = (($134) + ($135)|0);
   $137 = $l;
   $138 = (($136) + ($137)|0);
   $139 = $k;
   $140 = (($138) + ($139)|0);
   $141 = (_readmem16b($140)|0);
   $142 = $141&65535;
   $m = $142;
   $143 = $m;
   $144 = (($143|0) % 8)&-1;
   $145 = ($144|0)!=(0);
   if ($145) {
    label = 28;
    break;
   }
   $146 = $m;
   $147 = $n;
   $148 = ($146|0)>($147|0);
   if ($148) {
    $149 = $m;
    $n = $149;
   }
   $150 = $k;
   $151 = (($150) + 2)|0;
   $k = $151;
  }
  if ((label|0) == 28) {
   $0 = -1;
   $199 = $0;
   STACKTOP = sp;return ($199|0);
  }
  $152 = $j;
  $153 = $n;
  $154 = (($152) + ($153))|0;
  $155 = (($154) + 8)|0;
  $156 = $l;
  $157 = (($156) + ($155))|0;
  $l = $157;
  $158 = $1;
  $159 = $start;
  $160 = (($158) + ($159)|0);
  $161 = ((($160)) + 6|0);
  $162 = (_readmem16b($161)|0);
  $163 = $162&65535;
  $k = $163;
  $164 = $k;
  $165 = ($164|0)<(192);
  if (!($165)) {
   $166 = $k;
   $167 = (($166|0) % 192)&-1;
   $168 = ($167|0)!=(0);
   if (!($168)) {
    $169 = $3;
    $170 = $start;
    $171 = $l;
    $172 = (($170) + ($171))|0;
    $173 = $k;
    $174 = (($172) + ($173))|0;
    $175 = ($169|0)<($174|0);
    if ($175) {
     $176 = $start;
     $177 = $l;
     $178 = (($176) + ($177))|0;
     $179 = $k;
     $180 = (($178) + ($179))|0;
     $181 = $3;
     $182 = (($180) - ($181))|0;
     $0 = $182;
     $199 = $0;
     STACKTOP = sp;return ($199|0);
    }
    $m = 0;
    while(1) {
     $183 = $m;
     $184 = $k;
     $185 = ($183|0)<($184|0);
     if (!($185)) {
      label = 42;
      break;
     }
     $186 = $start;
     $187 = $l;
     $188 = (($186) + ($187))|0;
     $189 = $m;
     $190 = (($188) + ($189))|0;
     $191 = $1;
     $192 = (($191) + ($190)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194|0)>(73);
     if ($195) {
      label = 40;
      break;
     }
     $196 = $m;
     $197 = (($196) + 3)|0;
     $m = $197;
    }
    if ((label|0) == 40) {
     $0 = -1;
     $199 = $0;
     STACKTOP = sp;return ($199|0);
    }
    else if ((label|0) == 42) {
     $198 = $2;
     _pw_read_title(0,$198,0);
     $0 = 0;
     $199 = $0;
     STACKTOP = sp;return ($199|0);
    }
   }
  }
  $0 = -1;
  $199 = $0;
  STACKTOP = sp;return ($199|0);
 }
 return (0)|0;
}
function _depack_np1($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0;
 var $j = 0, $k = 0, $len = 0, $max_addr = 0, $nins = 0, $npat = 0, $ptable = 0, $size = 0, $ssize = 0, $taddr = 0, $tdata = 0, $tmp = 0, $tsize = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2240|0;
 $ptable = sp + 2104|0;
 $taddr = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $npat = 0;
 $ssize = 0;
 $i = 0;
 $j = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($taddr|0),0,2048)|0;
 $2 = $0;
 $3 = (_read8($2)|0);
 $c1 = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $c2 = $5;
 $6 = $c1;
 $7 = $6&255;
 $8 = $7 << 4;
 $9 = $8 & 240;
 $10 = $c2;
 $11 = $10&255;
 $12 = $11 >> 4;
 $13 = $12 & 15;
 $14 = $9 | $13;
 $15 = $14&255;
 $nins = $15;
 $16 = $1;
 (_pw_write_zero($16,20)|0);
 $17 = $0;
 $18 = (_read16b($17)|0);
 $19 = $18&65535;
 $20 = (($19|0) / 2)&-1;
 $21 = $20&255;
 $len = $21;
 $22 = $0;
 (_read16b($22)|0);
 $23 = $0;
 $24 = (_read16b($23)|0);
 $25 = $24&65535;
 $tsize = $25;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $nins;
  $28 = $27&255;
  $29 = ($26|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $0;
  (_read32b($30)|0);
  $31 = $1;
  (_pw_write_zero($31,22)|0);
  $32 = $1;
  $33 = $0;
  $34 = (_read16b($33)|0);
  $35 = $34&65535;
  $size = $35;
  $36 = $35&65535;
  _write16b($32,$36);
  $37 = $size;
  $38 = $37<<1;
  $39 = $ssize;
  $40 = (($39) + ($38))|0;
  $ssize = $40;
  $41 = $1;
  $42 = $0;
  $43 = (_read8($42)|0);
  _write8($41,$43);
  $44 = $1;
  $45 = $0;
  $46 = (_read8($45)|0);
  _write8($44,$46);
  $47 = $0;
  (_read32b($47)|0);
  $48 = $0;
  $49 = (_read16b($48)|0);
  $50 = $49&65535;
  $size = $50;
  $51 = $1;
  $52 = $0;
  $53 = (_read16b($52)|0);
  $54 = $53&65535;
  $55 = (($54|0) / 2)&-1;
  $56 = $55&65535;
  _write16b($51,$56);
  $57 = $1;
  $58 = $size;
  $59 = $58&65535;
  _write16b($57,$59);
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $62 = ((($tmp)) + 29|0);
 HEAP8[$62>>0] = 1;
 while(1) {
  $63 = $i;
  $64 = ($63|0)<(31);
  if (!($64)) {
   break;
  }
  $65 = $1;
  (_fwrite(($tmp|0),30,1,($65|0))|0);
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = $1;
 $69 = $len;
 _write8($68,$69);
 $70 = $1;
 _write8($70,127);
 $71 = $0;
 (_read16b($71)|0);
 $72 = $0;
 (_read16b($72)|0);
 $npat = 0;
 $i = 0;
 while(1) {
  $73 = $i;
  $74 = $len;
  $75 = $74&255;
  $76 = ($73|0)<($75|0);
  if (!($76)) {
   break;
  }
  $77 = $0;
  $78 = (_read16b($77)|0);
  $79 = $78&255;
  $80 = $i;
  $81 = (($ptable) + ($80)|0);
  HEAP8[$81>>0] = $79;
  $82 = $i;
  $83 = (($ptable) + ($82)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $npat;
  $87 = $86&255;
  $88 = ($85|0)>($87|0);
  if ($88) {
   $89 = $i;
   $90 = (($ptable) + ($89)|0);
   $91 = HEAP8[$90>>0]|0;
   $npat = $91;
  }
  $92 = $i;
  $93 = (($92) + 1)|0;
  $i = $93;
 }
 $94 = $npat;
 $95 = (($94) + 1)<<24>>24;
 $npat = $95;
 $96 = $1;
 (_fwrite(($ptable|0),128,1,($96|0))|0);
 $97 = $1;
 _write32b($97,1294879534);
 $max_addr = 0;
 $i = 0;
 while(1) {
  $98 = $i;
  $99 = $npat;
  $100 = $99&255;
  $101 = ($98|0)<($100|0);
  $102 = $0;
  if (!($101)) {
   break;
  }
  $103 = (_read16b($102)|0);
  $104 = $103&65535;
  $105 = $i;
  $106 = (($taddr) + ($105<<4)|0);
  HEAP32[$106>>2] = $104;
  $107 = $max_addr;
  $108 = ($104|0)>($107|0);
  if ($108) {
   $109 = $i;
   $110 = (($taddr) + ($109<<4)|0);
   $111 = HEAP32[$110>>2]|0;
   $max_addr = $111;
  }
  $112 = $0;
  $113 = (_read16b($112)|0);
  $114 = $113&65535;
  $115 = $i;
  $116 = (($taddr) + ($115<<4)|0);
  $117 = ((($116)) + 4|0);
  HEAP32[$117>>2] = $114;
  $118 = $max_addr;
  $119 = ($114|0)>($118|0);
  if ($119) {
   $120 = $i;
   $121 = (($taddr) + ($120<<4)|0);
   $122 = ((($121)) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $max_addr = $123;
  }
  $124 = $0;
  $125 = (_read16b($124)|0);
  $126 = $125&65535;
  $127 = $i;
  $128 = (($taddr) + ($127<<4)|0);
  $129 = ((($128)) + 8|0);
  HEAP32[$129>>2] = $126;
  $130 = $max_addr;
  $131 = ($126|0)>($130|0);
  if ($131) {
   $132 = $i;
   $133 = (($taddr) + ($132<<4)|0);
   $134 = ((($133)) + 8|0);
   $135 = HEAP32[$134>>2]|0;
   $max_addr = $135;
  }
  $136 = $0;
  $137 = (_read16b($136)|0);
  $138 = $137&65535;
  $139 = $i;
  $140 = (($taddr) + ($139<<4)|0);
  $141 = ((($140)) + 12|0);
  HEAP32[$141>>2] = $138;
  $142 = $max_addr;
  $143 = ($138|0)>($142|0);
  if ($143) {
   $144 = $i;
   $145 = (($taddr) + ($144<<4)|0);
   $146 = ((($145)) + 12|0);
   $147 = HEAP32[$146>>2]|0;
   $max_addr = $147;
  }
  $148 = $i;
  $149 = (($148) + 1)|0;
  $i = $149;
 }
 $150 = (_ftell(($102|0))|0);
 $tdata = $150;
 $i = 0;
 while(1) {
  $151 = $i;
  $152 = $npat;
  $153 = $152&255;
  $154 = ($151|0)<($153|0);
  if (!($154)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $155 = $j;
   $156 = ($155|0)<(4);
   if (!($156)) {
    break;
   }
   $157 = $0;
   $158 = $tdata;
   $159 = $j;
   $160 = (3 - ($159))|0;
   $161 = $i;
   $162 = (($taddr) + ($161<<4)|0);
   $163 = (($162) + ($160<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($158) + ($164))|0;
   (_fseek(($157|0),($165|0),0)|0);
   $k = 0;
   while(1) {
    $166 = $k;
    $167 = ($166|0)<(64);
    if (!($167)) {
     break;
    }
    $168 = $k;
    $169 = $168<<4;
    $170 = $j;
    $171 = $170<<2;
    $172 = (($169) + ($171))|0;
    $x = $172;
    $173 = $0;
    $174 = (_read8($173)|0);
    $c1 = $174;
    $175 = $0;
    $176 = (_read8($175)|0);
    $c2 = $176;
    $177 = $0;
    $178 = (_read8($177)|0);
    $c3 = $178;
    $179 = $c1;
    $180 = $179&255;
    $181 = $180 & 254;
    $182 = (($181|0) / 2)&-1;
    $183 = $182&255;
    $c4 = $183;
    $184 = $c1;
    $185 = $184&255;
    $186 = $185 << 4;
    $187 = $186 & 16;
    $188 = $c4;
    $189 = $188&255;
    $190 = (8240 + ($189<<1)|0);
    $191 = HEAP8[$190>>0]|0;
    $192 = $191&255;
    $193 = $187 | $192;
    $194 = $193&255;
    $195 = $x;
    $196 = (($tmp) + ($195)|0);
    HEAP8[$196>>0] = $194;
    $197 = $c4;
    $198 = $197&255;
    $199 = (8240 + ($198<<1)|0);
    $200 = ((($199)) + 1|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $x;
    $203 = (($202) + 1)|0;
    $204 = (($tmp) + ($203)|0);
    HEAP8[$204>>0] = $201;
    $205 = $c2;
    $206 = $205&255;
    $207 = $206 & 15;
    switch ($207|0) {
    case 7:  {
     $212 = $c2;
     $213 = $212&255;
     $214 = $213 & 240;
     $215 = (($214) + 10)|0;
     $216 = $215&255;
     $c2 = $216;
     label = 32;
     break;
    }
    case 11:  {
     $227 = $c3;
     $228 = $227&255;
     $229 = (($228) + 4)|0;
     $230 = (($229|0) / 2)&-1;
     $231 = $230&255;
     $c3 = $231;
     break;
    }
    case 8:  {
     $208 = $c2;
     $209 = $208&255;
     $210 = $209 & 240;
     $211 = $210&255;
     $c2 = $211;
     break;
    }
    case 5: case 6:  {
     label = 32;
     break;
    }
    default: {
    }
    }
    if ((label|0) == 32) {
     label = 0;
     $217 = $c3;
     $218 = $217&255;
     $219 = ($218|0)>(128);
     $220 = $c3;
     $221 = $220&255;
     $222 = (256 - ($221))|0;
     $223 = $221 << 4;
     $224 = $223 & 240;
     $225 = $219 ? $222 : $224;
     $226 = $225&255;
     $c3 = $226;
    }
    $232 = $c2;
    $233 = $x;
    $234 = (($233) + 2)|0;
    $235 = (($tmp) + ($234)|0);
    HEAP8[$235>>0] = $232;
    $236 = $c3;
    $237 = $x;
    $238 = (($237) + 3)|0;
    $239 = (($tmp) + ($238)|0);
    HEAP8[$239>>0] = $236;
    $240 = $k;
    $241 = (($240) + 1)|0;
    $k = $241;
   }
   $242 = $j;
   $243 = (($242) + 1)|0;
   $j = $243;
  }
  $244 = $1;
  (_fwrite(($tmp|0),1024,1,($244|0))|0);
  $245 = $i;
  $246 = (($245) + 1)|0;
  $i = $246;
 }
 $247 = $0;
 $248 = $max_addr;
 $249 = (($248) + 192)|0;
 $250 = $tdata;
 $251 = (($249) + ($250))|0;
 (_fseek(($247|0),($251|0),0)|0);
 $252 = $1;
 $253 = $0;
 $254 = $ssize;
 (_pw_move_data($252,$253,$254)|0);
 STACKTOP = sp;return 0;
}
function _test_np2($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $ssize = 0, $start = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer10 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1024);
 if ($5) {
  $6 = $3;
  $7 = (1024 - ($6))|0;
  $0 = $7;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 $start = 0;
 $8 = $start;
 $9 = (($8) + 2)|0;
 $10 = $1;
 $11 = (($10) + ($9)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $start;
 $16 = (($15) + 3)|0;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($14) + ($20))|0;
 $j = $21;
 $22 = $j;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 $25 = $j;
 $26 = ($25|0)==(0);
 $or$cond = $24 | $26;
 if ($or$cond) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 $27 = $start;
 $28 = (($27) + 1)|0;
 $29 = $1;
 $30 = (($29) + ($28)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 15;
 $34 = ($33|0)!=(12);
 if ($34) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 $35 = $start;
 $36 = $1;
 $37 = (($36) + ($35)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 4;
 $41 = $40 & 240;
 $42 = $start;
 $43 = (($42) + 1)|0;
 $44 = $1;
 $45 = (($44) + ($43)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 >> 4;
 $49 = $48 & 15;
 $50 = $41 | $49;
 $l = $50;
 $51 = $l;
 $52 = ($51|0)>(31);
 $53 = $l;
 $54 = ($53|0)==(0);
 $or$cond3 = $52 | $54;
 if ($or$cond3) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 $k = 0;
 while(1) {
  $55 = $k;
  $56 = $l;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $start;
  $59 = (($58) + 15)|0;
  $60 = $k;
  $61 = $60<<4;
  $62 = (($59) + ($61))|0;
  $63 = $1;
  $64 = (($63) + ($62)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = ($66|0)>(64);
  if ($67) {
   label = 12;
   break;
  }
  $68 = $k;
  $69 = (($68) + 1)|0;
  $k = $69;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 $ssize = 0;
 $k = 0;
 while(1) {
  $70 = $k;
  $71 = $l;
  $72 = ($70|0)<($71|0);
  if (!($72)) {
   label = 23;
   break;
  }
  $73 = $start;
  $74 = $k;
  $75 = $74<<4;
  $76 = (($73) + ($75))|0;
  $x = $76;
  $77 = $x;
  $78 = (($77) + 12)|0;
  $79 = $1;
  $80 = (($79) + ($78)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 << 8;
  $84 = $x;
  $85 = (($84) + 13)|0;
  $86 = $1;
  $87 = (($86) + ($85)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = (($83) + ($89))|0;
  $91 = $90<<1;
  $o = $91;
  $92 = $x;
  $93 = (($92) + 20)|0;
  $94 = $1;
  $95 = (($94) + ($93)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $97 << 8;
  $99 = $x;
  $100 = (($99) + 21)|0;
  $101 = $1;
  $102 = (($101) + ($100)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = (($98) + ($104))|0;
  $106 = $105<<1;
  $m = $106;
  $107 = $x;
  $108 = (($107) + 22)|0;
  $109 = $1;
  $110 = (($109) + ($108)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = $112 << 8;
  $114 = $x;
  $115 = (($114) + 23)|0;
  $116 = $1;
  $117 = (($116) + ($115)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = (($113) + ($119))|0;
  $121 = $120<<1;
  $n = $121;
  $122 = $o;
  $123 = ($122|0)>(65535);
  $124 = $m;
  $125 = ($124|0)>(65535);
  $or$cond5 = $123 | $125;
  $126 = $n;
  $127 = ($126|0)>(65535);
  $or$cond7 = $or$cond5 | $127;
  if ($or$cond7) {
   label = 17;
   break;
  }
  $128 = $m;
  $129 = $n;
  $130 = (($128) + ($129))|0;
  $131 = $o;
  $132 = (($131) + 2)|0;
  $133 = ($130|0)>($132|0);
  if ($133) {
   label = 19;
   break;
  }
  $134 = $n;
  $135 = ($134|0)!=(0);
  $136 = $m;
  $137 = ($136|0)==(0);
  $or$cond9 = $135 & $137;
  if ($or$cond9) {
   label = 21;
   break;
  }
  $138 = $o;
  $139 = $ssize;
  $140 = (($139) + ($138))|0;
  $ssize = $140;
  $141 = $k;
  $142 = (($141) + 1)|0;
  $k = $142;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 else if ((label|0) == 21) {
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 else if ((label|0) == 23) {
  $143 = $ssize;
  $144 = ($143|0)<=(4);
  if ($144) {
   $0 = -1;
   $308 = $0;
   STACKTOP = sp;return ($308|0);
  }
  $145 = $l;
  $146 = $145<<4;
  $l = $146;
  $147 = $l;
  $148 = (($147) + 12)|0;
  $l = $148;
  $n = 0;
  $k = 0;
  while(1) {
   $149 = $k;
   $150 = $j;
   $151 = ($149|0)<($150|0);
   if (!($151)) {
    break;
   }
   $152 = $start;
   $153 = $l;
   $154 = (($152) + ($153))|0;
   $155 = $k;
   $156 = (($154) + ($155))|0;
   $157 = $1;
   $158 = (($157) + ($156)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = $160 << 8;
   $162 = $start;
   $163 = $l;
   $164 = (($162) + ($163))|0;
   $165 = $k;
   $166 = (($164) + ($165))|0;
   $167 = (($166) + 1)|0;
   $168 = $1;
   $169 = (($168) + ($167)|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = (($161) + ($171))|0;
   $m = $172;
   $173 = $m;
   $174 = (($173|0) / 8)&-1;
   $175 = $174<<3;
   $176 = $m;
   $177 = ($175|0)!=($176|0);
   if ($177) {
    label = 28;
    break;
   }
   $178 = $m;
   $179 = $n;
   $180 = ($178|0)>($179|0);
   if ($180) {
    $181 = $m;
    $n = $181;
   }
   $182 = $k;
   $183 = (($182) + 2)|0;
   $k = $183;
  }
  if ((label|0) == 28) {
   $0 = -1;
   $308 = $0;
   STACKTOP = sp;return ($308|0);
  }
  $184 = $j;
  $185 = $n;
  $186 = (($184) + ($185))|0;
  $187 = (($186) + 8)|0;
  $188 = $l;
  $189 = (($188) + ($187))|0;
  $l = $189;
  $190 = $start;
  $191 = (($190) + 6)|0;
  $192 = $1;
  $193 = (($192) + ($191)|0);
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 << 8;
  $197 = $start;
  $198 = (($197) + 7)|0;
  $199 = $1;
  $200 = (($199) + ($198)|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = (($196) + ($202))|0;
  $k = $203;
  $204 = $k;
  $205 = ($204|0)<(192);
  if (!($205)) {
   $206 = $k;
   $207 = (($206|0) / 192)&-1;
   $208 = ($207*192)|0;
   $209 = $k;
   $210 = ($208|0)!=($209|0);
   if (!($210)) {
    $211 = $3;
    $212 = $k;
    $213 = $l;
    $214 = (($212) + ($213))|0;
    $215 = (($214) + 16)|0;
    $216 = ($211|0)<($215|0);
    if ($216) {
     $217 = $k;
     $218 = $l;
     $219 = (($217) + ($218))|0;
     $220 = (($219) + 16)|0;
     $221 = $3;
     $222 = (($220) - ($221))|0;
     $0 = $222;
     $308 = $0;
     STACKTOP = sp;return ($308|0);
    }
    $223 = $start;
    $224 = $1;
    $225 = (($224) + ($223)|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = $226&255;
    $228 = $227 << 4;
    $229 = $228 & 240;
    $230 = $start;
    $231 = (($230) + 1)|0;
    $232 = $1;
    $233 = (($232) + ($231)|0);
    $234 = HEAP8[$233>>0]|0;
    $235 = $234&255;
    $236 = $235 >> 4;
    $237 = $236 & 15;
    $238 = $229 | $237;
    $j = $238;
    $m = 0;
    while(1) {
     $239 = $m;
     $240 = $k;
     $241 = ($239|0)<($240|0);
     if (!($241)) {
      label = 47;
      break;
     }
     $242 = $start;
     $243 = $l;
     $244 = (($242) + ($243))|0;
     $245 = $m;
     $246 = (($244) + ($245))|0;
     $247 = $1;
     $248 = (($247) + ($246)|0);
     $249 = HEAP8[$248>>0]|0;
     $250 = $249&255;
     $251 = ($250|0)>(73);
     if ($251) {
      label = 40;
      break;
     }
     $253 = $start;
     $254 = $l;
     $255 = (($253) + ($254))|0;
     $256 = $m;
     $257 = (($255) + ($256))|0;
     $258 = $1;
     $259 = (($258) + ($257)|0);
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = $261 << 4;
     $263 = $262 & 16;
     $264 = $start;
     $265 = $l;
     $266 = (($264) + ($265))|0;
     $267 = $m;
     $268 = (($266) + ($267))|0;
     $269 = (($268) + 1)|0;
     $270 = $1;
     $271 = (($270) + ($269)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = $272&255;
     $274 = $273 >> 4;
     $275 = $274 & 15;
     $276 = $263 | $275;
     $277 = $j;
     $278 = ($276|0)>($277|0);
     if ($278) {
      label = 42;
      break;
     }
     $280 = $start;
     $281 = $l;
     $282 = (($280) + ($281))|0;
     $283 = $m;
     $284 = (($282) + ($283))|0;
     $285 = (($284) + 1)|0;
     $286 = $1;
     $287 = (($286) + ($285)|0);
     $288 = HEAP8[$287>>0]|0;
     $289 = $288&255;
     $290 = $289 & 15;
     $n = $290;
     $291 = $n;
     $292 = ($291|0)==(0);
     if ($292) {
      $293 = $start;
      $294 = $l;
      $295 = (($293) + ($294))|0;
      $296 = $m;
      $297 = (($295) + ($296))|0;
      $298 = (($297) + 2)|0;
      $299 = $1;
      $300 = (($299) + ($298)|0);
      $301 = HEAP8[$300>>0]|0;
      $302 = $301&255;
      $303 = ($302|0)!=(0);
      if ($303) {
       label = 45;
       break;
      }
     }
     $305 = $m;
     $306 = (($305) + 3)|0;
     $m = $306;
    }
    if ((label|0) == 40) {
     $252 = $m;
     HEAP32[$vararg_buffer>>2] = $252;
     (_printf((10032|0),($vararg_buffer|0))|0);
     $0 = -1;
     $308 = $0;
     STACKTOP = sp;return ($308|0);
    }
    else if ((label|0) == 42) {
     $279 = $m;
     HEAP32[$vararg_buffer10>>2] = $279;
     (_printf((10056|0),($vararg_buffer10|0))|0);
     $0 = -1;
     $308 = $0;
     STACKTOP = sp;return ($308|0);
    }
    else if ((label|0) == 45) {
     $304 = $m;
     HEAP32[$vararg_buffer13>>2] = $304;
     (_printf((10080|0),($vararg_buffer13|0))|0);
     $0 = -1;
     $308 = $0;
     STACKTOP = sp;return ($308|0);
    }
    else if ((label|0) == 47) {
     $307 = $2;
     _pw_read_title(0,$307,0);
     $0 = 0;
     $308 = $0;
     STACKTOP = sp;return ($308|0);
    }
   }
  }
  $0 = -1;
  $308 = $0;
  STACKTOP = sp;return ($308|0);
 }
 return (0)|0;
}
function _depack_np2($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $len = 0;
 var $max_addr = 0, $nins = 0, $npat = 0, $ptable = 0, $size = 0, $ssize = 0, $tmp = 0, $trk_addr = 0, $trk_start = 0, $tsize = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2248|0;
 $ptable = sp + 2112|0;
 $trk_addr = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk_addr|0),0,2048)|0;
 $2 = $0;
 $3 = (_read8($2)|0);
 $c1 = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $c2 = $5;
 $6 = $c1;
 $7 = $6&255;
 $8 = $7 << 4;
 $9 = $8 & 240;
 $10 = $c2;
 $11 = $10&255;
 $12 = $11 >> 4;
 $13 = $12 & 15;
 $14 = $9 | $13;
 $nins = $14;
 $15 = $1;
 (_pw_write_zero($15,20)|0);
 $16 = $0;
 (_read8($16)|0);
 $17 = $0;
 $18 = (_read8($17)|0);
 $19 = $18&255;
 $20 = (($19|0) / 2)&-1;
 $len = $20;
 $21 = $0;
 (_read16b($21)|0);
 $22 = $0;
 $23 = (_read16b($22)|0);
 $24 = $23&65535;
 $tsize = $24;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $nins;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $0;
  (_read32b($28)|0);
  $29 = $1;
  (_pw_write_zero($29,22)|0);
  $30 = $1;
  $31 = $0;
  $32 = (_read16b($31)|0);
  $33 = $32&65535;
  $size = $33;
  $34 = $33&65535;
  _write16b($30,$34);
  $35 = $size;
  $36 = $35<<1;
  $37 = $ssize;
  $38 = (($37) + ($36))|0;
  $ssize = $38;
  $39 = $1;
  $40 = $0;
  $41 = (_read8($40)|0);
  _write8($39,$41);
  $42 = $1;
  $43 = $0;
  $44 = (_read8($43)|0);
  _write8($42,$44);
  $45 = $0;
  (_read32b($45)|0);
  $46 = $0;
  $47 = (_read16b($46)|0);
  $48 = $47&65535;
  $size = $48;
  $49 = $1;
  $50 = $0;
  $51 = (_read16b($50)|0);
  _write16b($49,$51);
  $52 = $1;
  $53 = $size;
  $54 = $53&65535;
  _write16b($52,$54);
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $57 = ((($tmp)) + 29|0);
 HEAP8[$57>>0] = 1;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(31);
  if (!($59)) {
   break;
  }
  $60 = $1;
  (_fwrite(($tmp|0),30,1,($60|0))|0);
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = $1;
 $64 = $len;
 $65 = $64&255;
 _write8($63,$65);
 $66 = $1;
 _write8($66,127);
 $67 = $0;
 (_fseek(($67|0),2,1)|0);
 $68 = $0;
 (_fseek(($68|0),2,1)|0);
 $i = 0;
 $npat = 0;
 while(1) {
  $69 = $i;
  $70 = $len;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   break;
  }
  $72 = $0;
  $73 = (_read16b($72)|0);
  $74 = $73&65535;
  $75 = (($74|0) / 8)&-1;
  $76 = $75&255;
  $77 = $i;
  $78 = (($ptable) + ($77)|0);
  HEAP8[$78>>0] = $76;
  $79 = $i;
  $80 = (($ptable) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $npat;
  $84 = ($82|0)>($83|0);
  if ($84) {
   $85 = $i;
   $86 = (($ptable) + ($85)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $npat = $88;
  }
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 $91 = $npat;
 $92 = (($91) + 1)|0;
 $npat = $92;
 $93 = $1;
 (_fwrite(($ptable|0),128,1,($93|0))|0);
 $94 = $1;
 _write32b($94,1294879534);
 $i = 0;
 $max_addr = 0;
 while(1) {
  $95 = $i;
  $96 = $npat;
  $97 = ($95|0)<($96|0);
  $98 = $0;
  if (!($97)) {
   break;
  }
  $99 = (_read16b($98)|0);
  $100 = $99&65535;
  $101 = $i;
  $102 = (($trk_addr) + ($101<<4)|0);
  HEAP32[$102>>2] = $100;
  $103 = $max_addr;
  $104 = ($100|0)>($103|0);
  if ($104) {
   $105 = $i;
   $106 = (($trk_addr) + ($105<<4)|0);
   $107 = HEAP32[$106>>2]|0;
   $max_addr = $107;
  }
  $108 = $0;
  $109 = (_read16b($108)|0);
  $110 = $109&65535;
  $111 = $i;
  $112 = (($trk_addr) + ($111<<4)|0);
  $113 = ((($112)) + 4|0);
  HEAP32[$113>>2] = $110;
  $114 = $max_addr;
  $115 = ($110|0)>($114|0);
  if ($115) {
   $116 = $i;
   $117 = (($trk_addr) + ($116<<4)|0);
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $max_addr = $119;
  }
  $120 = $0;
  $121 = (_read16b($120)|0);
  $122 = $121&65535;
  $123 = $i;
  $124 = (($trk_addr) + ($123<<4)|0);
  $125 = ((($124)) + 8|0);
  HEAP32[$125>>2] = $122;
  $126 = $max_addr;
  $127 = ($122|0)>($126|0);
  if ($127) {
   $128 = $i;
   $129 = (($trk_addr) + ($128<<4)|0);
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $max_addr = $131;
  }
  $132 = $0;
  $133 = (_read16b($132)|0);
  $134 = $133&65535;
  $135 = $i;
  $136 = (($trk_addr) + ($135<<4)|0);
  $137 = ((($136)) + 12|0);
  HEAP32[$137>>2] = $134;
  $138 = $max_addr;
  $139 = ($134|0)>($138|0);
  if ($139) {
   $140 = $i;
   $141 = (($trk_addr) + ($140<<4)|0);
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $max_addr = $143;
  }
  $144 = $i;
  $145 = (($144) + 1)|0;
  $i = $145;
 }
 $146 = (_ftell(($98|0))|0);
 $trk_start = $146;
 $i = 0;
 while(1) {
  $147 = $i;
  $148 = $npat;
  $149 = ($147|0)<($148|0);
  if (!($149)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $150 = $j;
   $151 = ($150|0)<(4);
   if (!($151)) {
    break;
   }
   $152 = $0;
   $153 = $trk_start;
   $154 = $j;
   $155 = (3 - ($154))|0;
   $156 = $i;
   $157 = (($trk_addr) + ($156<<4)|0);
   $158 = (($157) + ($155<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($153) + ($159))|0;
   (_fseek(($152|0),($160|0),0)|0);
   $k = 0;
   while(1) {
    $161 = $k;
    $162 = ($161|0)<(64);
    if (!($162)) {
     break;
    }
    $163 = $k;
    $164 = $163<<4;
    $165 = $j;
    $166 = $165<<2;
    $167 = (($164) + ($166))|0;
    $x = $167;
    $168 = $0;
    $169 = (_read8($168)|0);
    $c1 = $169;
    $170 = $0;
    $171 = (_read8($170)|0);
    $c2 = $171;
    $172 = $0;
    $173 = (_read8($172)|0);
    $c3 = $173;
    $174 = $c1;
    $175 = $174&255;
    $176 = $175 & 254;
    $177 = (($176|0) / 2)&-1;
    $178 = $177&255;
    $c4 = $178;
    $179 = $c1;
    $180 = $179&255;
    $181 = $180 << 4;
    $182 = $181 & 16;
    $183 = $c4;
    $184 = $183&255;
    $185 = (8240 + ($184<<1)|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = $182 | $187;
    $189 = $188&255;
    $190 = $x;
    $191 = (($tmp) + ($190)|0);
    HEAP8[$191>>0] = $189;
    $192 = $c4;
    $193 = $192&255;
    $194 = (8240 + ($193<<1)|0);
    $195 = ((($194)) + 1|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $x;
    $198 = (($197) + 1)|0;
    $199 = (($tmp) + ($198)|0);
    HEAP8[$199>>0] = $196;
    $200 = $c2;
    $201 = $200&255;
    $202 = $201 & 15;
    switch ($202|0) {
    case 11:  {
     $224 = $c3;
     $225 = $224&255;
     $226 = (($225) + 4)|0;
     $227 = (($226|0) / 2)&-1;
     $228 = $227&255;
     $c3 = $228;
     break;
    }
    case 5: case 6:  {
     label = 32;
     break;
    }
    case 14:  {
     $222 = $c3;
     $223 = (($222) + -1)<<24>>24;
     $c3 = $223;
     break;
    }
    case 8:  {
     $203 = $c2;
     $204 = $203&255;
     $205 = $204 & 240;
     $206 = $205&255;
     $c2 = $206;
     break;
    }
    case 7:  {
     $207 = $c2;
     $208 = $207&255;
     $209 = $208 & 240;
     $210 = (($209) + 10)|0;
     $211 = $210&255;
     $c2 = $211;
     label = 32;
     break;
    }
    default: {
    }
    }
    if ((label|0) == 32) {
     label = 0;
     $212 = $c3;
     $213 = $212&255;
     $214 = ($213|0)>(128);
     $215 = $c3;
     $216 = $215&255;
     $217 = (256 - ($216))|0;
     $218 = $216 << 4;
     $219 = $218 & 240;
     $220 = $214 ? $217 : $219;
     $221 = $220&255;
     $c3 = $221;
    }
    $229 = $c2;
    $230 = $x;
    $231 = (($230) + 2)|0;
    $232 = (($tmp) + ($231)|0);
    HEAP8[$232>>0] = $229;
    $233 = $c3;
    $234 = $x;
    $235 = (($234) + 3)|0;
    $236 = (($tmp) + ($235)|0);
    HEAP8[$236>>0] = $233;
    $237 = $k;
    $238 = (($237) + 1)|0;
    $k = $238;
   }
   $239 = $j;
   $240 = (($239) + 1)|0;
   $j = $240;
  }
  $241 = $1;
  (_fwrite(($tmp|0),1024,1,($241|0))|0);
  $242 = $i;
  $243 = (($242) + 1)|0;
  $i = $243;
 }
 $244 = $0;
 $245 = $max_addr;
 $246 = (($245) + 192)|0;
 $247 = $trk_start;
 $248 = (($246) + ($247))|0;
 (_fseek(($244|0),($248|0),0)|0);
 $249 = $1;
 $250 = $0;
 $251 = $ssize;
 (_pw_move_data($249,$250,$251)|0);
 STACKTOP = sp;return 0;
}
function _test_np3($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = $3;
  $7 = (10 - ($6))|0;
  $0 = $7;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 2|0);
 $12 = (_readmem16b($11)|0);
 $13 = $12&65535;
 $j = $13;
 $14 = $j;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 $17 = $j;
 $18 = ($17|0)==(0);
 $or$cond = $16 | $18;
 if ($or$cond) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $19 = $start;
 $20 = (($19) + 1)|0;
 $21 = $1;
 $22 = (($21) + ($20)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 15;
 $26 = ($25|0)!=(12);
 if ($26) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $27 = $start;
 $28 = $1;
 $29 = (($28) + ($27)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 << 4;
 $33 = $32 & 240;
 $34 = $start;
 $35 = (($34) + 1)|0;
 $36 = $1;
 $37 = (($36) + ($35)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 >> 4;
 $41 = $40 & 15;
 $42 = $33 | $41;
 $l = $42;
 $43 = $l;
 $44 = ($43|0)>(31);
 $45 = $l;
 $46 = ($45|0)==(0);
 $or$cond3 = $44 | $46;
 if ($or$cond3) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $k = 0;
 while(1) {
  $47 = $k;
  $48 = $l;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $start;
  $51 = (($50) + 9)|0;
  $52 = $k;
  $53 = $52<<4;
  $54 = (($51) + ($53))|0;
  $55 = $1;
  $56 = (($55) + ($54)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)>(64);
  if ($59) {
   label = 12;
   break;
  }
  $60 = $k;
  $61 = (($60) + 1)|0;
  $k = $61;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $ssize = 0;
 $k = 0;
 while(1) {
  $62 = $k;
  $63 = $l;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   label = 23;
   break;
  }
  $65 = $1;
  $66 = $start;
  $67 = (($65) + ($66)|0);
  $68 = $k;
  $69 = $68<<4;
  $70 = (($67) + ($69)|0);
  $71 = ((($70)) + 14|0);
  $72 = (_readmem16b($71)|0);
  $73 = $72&65535;
  $74 = $73<<1;
  $o = $74;
  $75 = $1;
  $76 = $start;
  $77 = (($75) + ($76)|0);
  $78 = $k;
  $79 = $78<<4;
  $80 = (($77) + ($79)|0);
  $81 = ((($80)) + 20|0);
  $82 = (_readmem16b($81)|0);
  $83 = $82&65535;
  $84 = $83<<1;
  $m = $84;
  $85 = $1;
  $86 = $start;
  $87 = (($85) + ($86)|0);
  $88 = $k;
  $89 = $88<<4;
  $90 = (($87) + ($89)|0);
  $91 = ((($90)) + 22|0);
  $92 = (_readmem16b($91)|0);
  $93 = $92&65535;
  $94 = $93<<1;
  $n = $94;
  $95 = $o;
  $96 = ($95|0)>(65535);
  $97 = $m;
  $98 = ($97|0)>(65535);
  $or$cond5 = $96 | $98;
  $99 = $n;
  $100 = ($99|0)>(65535);
  $or$cond7 = $or$cond5 | $100;
  if ($or$cond7) {
   label = 17;
   break;
  }
  $101 = $m;
  $102 = $n;
  $103 = (($101) + ($102))|0;
  $104 = $o;
  $105 = (($104) + 2)|0;
  $106 = ($103|0)>($105|0);
  if ($106) {
   label = 19;
   break;
  }
  $107 = $n;
  $108 = ($107|0)!=(0);
  $109 = $m;
  $110 = ($109|0)==(0);
  $or$cond9 = $108 & $110;
  if ($or$cond9) {
   label = 21;
   break;
  }
  $111 = $o;
  $112 = $ssize;
  $113 = (($112) + ($111))|0;
  $ssize = $113;
  $114 = $k;
  $115 = (($114) + 1)|0;
  $k = $115;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 else if ((label|0) == 21) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 else if ((label|0) == 23) {
  $116 = $ssize;
  $117 = ($116|0)<=(4);
  if ($117) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  $118 = $l;
  $119 = $118<<4;
  $120 = (($119) + 8)|0;
  $121 = (($120) + 4)|0;
  $l = $121;
  $n = 0;
  $k = 0;
  while(1) {
   $122 = $k;
   $123 = $j;
   $124 = ($122|0)<($123|0);
   if (!($124)) {
    break;
   }
   $125 = $1;
   $126 = $start;
   $127 = (($125) + ($126)|0);
   $128 = $l;
   $129 = (($127) + ($128)|0);
   $130 = $k;
   $131 = (($129) + ($130)|0);
   $132 = (_readmem16b($131)|0);
   $133 = $132&65535;
   $m = $133;
   $134 = $m;
   $135 = $134 & 7;
   $136 = ($135|0)!=(0);
   if ($136) {
    label = 28;
    break;
   }
   $137 = $m;
   $138 = $n;
   $139 = ($137|0)>($138|0);
   if ($139) {
    $140 = $m;
    $n = $140;
   }
   $141 = $k;
   $142 = (($141) + 2)|0;
   $k = $142;
  }
  if ((label|0) == 28) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  $143 = $j;
  $144 = $n;
  $145 = (($143) + ($144))|0;
  $146 = (($145) + 8)|0;
  $147 = $l;
  $148 = (($147) + ($146))|0;
  $l = $148;
  $149 = $1;
  $150 = $start;
  $151 = (($149) + ($150)|0);
  $152 = ((($151)) + 6|0);
  $153 = (_readmem16b($152)|0);
  $154 = $153&65535;
  $k = $154;
  $155 = $k;
  $156 = ($155|0)<=(63);
  if ($156) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  $157 = $3;
  $158 = $start;
  $159 = $l;
  $160 = (($158) + ($159))|0;
  $161 = $k;
  $162 = (($160) + ($161))|0;
  $163 = ($157|0)<($162|0);
  $164 = $start;
  if ($163) {
   $165 = $l;
   $166 = (($164) + ($165))|0;
   $167 = $k;
   $168 = (($166) + ($167))|0;
   $169 = $3;
   $170 = (($168) - ($169))|0;
   $0 = $170;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  $171 = $1;
  $172 = (($171) + ($164)|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 << 4;
  $176 = $175 & 240;
  $177 = $start;
  $178 = (($177) + 1)|0;
  $179 = $1;
  $180 = (($179) + ($178)|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $182 >> 4;
  $184 = $183 & 15;
  $185 = $176 | $184;
  $j = $185;
  $m = 0;
  while(1) {
   $186 = $m;
   $187 = $k;
   $188 = ($186|0)<($187|0);
   if (!($188)) {
    label = 54;
    break;
   }
   $189 = $start;
   $190 = $l;
   $191 = (($189) + ($190))|0;
   $192 = $m;
   $193 = (($191) + ($192))|0;
   $194 = $1;
   $195 = (($194) + ($193)|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = $197 & 128;
   $199 = ($198|0)!=(0);
   if (!($199)) {
    $200 = $start;
    $201 = $l;
    $202 = (($200) + ($201))|0;
    $203 = $m;
    $204 = (($202) + ($203))|0;
    $205 = $1;
    $206 = (($205) + ($204)|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $209 = ($208|0)>(73);
    if ($209) {
     label = 41;
     break;
    }
    $210 = $start;
    $211 = $l;
    $212 = (($210) + ($211))|0;
    $213 = $m;
    $214 = (($212) + ($213))|0;
    $215 = (($214) + 1)|0;
    $216 = $1;
    $217 = (($216) + ($215)|0);
    $218 = HEAP8[$217>>0]|0;
    $219 = $218&255;
    $220 = $219 & 15;
    $221 = ($220|0)==(10);
    if ($221) {
     label = 41;
     break;
    }
    $222 = $start;
    $223 = $l;
    $224 = (($222) + ($223))|0;
    $225 = $m;
    $226 = (($224) + ($225))|0;
    $227 = (($226) + 1)|0;
    $228 = $1;
    $229 = (($228) + ($227)|0);
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = $231 & 15;
    $233 = ($232|0)==(13);
    if ($233) {
     $234 = $start;
     $235 = $l;
     $236 = (($234) + ($235))|0;
     $237 = $m;
     $238 = (($236) + ($237))|0;
     $239 = (($238) + 2)|0;
     $240 = $1;
     $241 = (($240) + ($239)|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242&255;
     $244 = ($243|0)>(64);
     if ($244) {
      label = 44;
      break;
     }
    }
    $245 = $start;
    $246 = $l;
    $247 = (($245) + ($246))|0;
    $248 = $m;
    $249 = (($247) + ($248))|0;
    $250 = $1;
    $251 = (($250) + ($249)|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = $252&255;
    $254 = $253 << 4;
    $255 = $254 & 16;
    $256 = $start;
    $257 = $l;
    $258 = (($256) + ($257))|0;
    $259 = $m;
    $260 = (($258) + ($259))|0;
    $261 = (($260) + 1)|0;
    $262 = $1;
    $263 = (($262) + ($261)|0);
    $264 = HEAP8[$263>>0]|0;
    $265 = $264&255;
    $266 = $265 >> 4;
    $267 = $266 & 15;
    $268 = $255 | $267;
    $269 = $j;
    $270 = ($268|0)>($269|0);
    if ($270) {
     label = 46;
     break;
    }
    $271 = $start;
    $272 = $l;
    $273 = (($271) + ($272))|0;
    $274 = $m;
    $275 = (($273) + ($274))|0;
    $276 = $1;
    $277 = (($276) + ($275)|0);
    $278 = HEAP8[$277>>0]|0;
    $279 = $278&255;
    $280 = ($279|0)==(0);
    if ($280) {
     $281 = $start;
     $282 = $l;
     $283 = (($281) + ($282))|0;
     $284 = $m;
     $285 = (($283) + ($284))|0;
     $286 = (($285) + 1)|0;
     $287 = $1;
     $288 = (($287) + ($286)|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $289&255;
     $291 = ($290|0)==(0);
     if ($291) {
      $292 = $start;
      $293 = $l;
      $294 = (($292) + ($293))|0;
      $295 = $m;
      $296 = (($294) + ($295))|0;
      $297 = (($296) + 2)|0;
      $298 = $1;
      $299 = (($298) + ($297)|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = $300&255;
      $302 = ($301|0)==(0);
      if ($302) {
       $303 = $m;
       $304 = $k;
       $305 = (($304) - 3)|0;
       $306 = ($303|0)<($305|0);
       if ($306) {
        label = 51;
        break;
       }
      }
     }
    }
    $307 = $m;
    $308 = (($307) + 2)|0;
    $m = $308;
   }
   $309 = $m;
   $310 = (($309) + 1)|0;
   $m = $310;
  }
  if ((label|0) == 41) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  else if ((label|0) == 44) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  else if ((label|0) == 46) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  else if ((label|0) == 51) {
   $0 = -1;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
  else if ((label|0) == 54) {
   $311 = $2;
   _pw_read_title(0,$311,0);
   $0 = 0;
   $312 = $0;
   STACKTOP = sp;return ($312|0);
  }
 }
 return (0)|0;
}
function _depack_np3($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $max_addr = 0, $nins = 0, $npat = 0, $ptable = 0, $size = 0, $smp_addr = 0, $ssize = 0, $tmp = 0, $trk_addr = 0;
 var $trk_start = 0, $tsize = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2248|0;
 $ptable = sp + 2112|0;
 $trk_addr = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $smp_addr = 0;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk_addr|0),0,2048)|0;
 $2 = $0;
 $3 = (_read8($2)|0);
 $c1 = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $c2 = $5;
 $6 = $c1;
 $7 = $6&255;
 $8 = $7 << 4;
 $9 = $8 & 240;
 $10 = $c2;
 $11 = $10&255;
 $12 = $11 >> 4;
 $13 = $12 & 15;
 $14 = $9 | $13;
 $nins = $14;
 $15 = $1;
 (_pw_write_zero($15,20)|0);
 $16 = $0;
 (_read8($16)|0);
 $17 = $0;
 $18 = (_read8($17)|0);
 $19 = $18&255;
 $20 = (($19|0) / 2)&-1;
 $len = $20;
 $21 = $0;
 (_read16b($21)|0);
 $22 = $0;
 $23 = (_read16b($22)|0);
 $24 = $23&65535;
 $tsize = $24;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $nins;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $0;
  (_fread(($tmp|0),1,16,($28|0))|0);
  $29 = $1;
  (_pw_write_zero($29,22)|0);
  $30 = $1;
  $31 = ((($tmp)) + 6|0);
  $32 = (_readmem16b($31)|0);
  $33 = $32&65535;
  $size = $33;
  $34 = $33&65535;
  _write16b($30,$34);
  $35 = $size;
  $36 = $35<<1;
  $37 = $ssize;
  $38 = (($37) + ($36))|0;
  $ssize = $38;
  $39 = $1;
  $40 = HEAP8[$tmp>>0]|0;
  _write8($39,$40);
  $41 = $1;
  $42 = ((($tmp)) + 1|0);
  $43 = HEAP8[$42>>0]|0;
  _write8($41,$43);
  $44 = ((($tmp)) + 14|0);
  $45 = $1;
  (_fwrite(($44|0),2,1,($45|0))|0);
  $46 = ((($tmp)) + 12|0);
  $47 = $1;
  (_fwrite(($46|0),2,1,($47|0))|0);
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $50 = ((($tmp)) + 29|0);
 HEAP8[$50>>0] = 1;
 while(1) {
  $51 = $i;
  $52 = ($51|0)<(31);
  if (!($52)) {
   break;
  }
  $53 = $1;
  (_fwrite(($tmp|0),30,1,($53|0))|0);
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $56 = $1;
 $57 = $len;
 $58 = $57&255;
 _write8($56,$58);
 $59 = $1;
 _write8($59,127);
 $60 = $0;
 (_read16b($60)|0);
 $61 = $0;
 (_read16b($61)|0);
 $i = 0;
 $npat = 0;
 while(1) {
  $62 = $i;
  $63 = $len;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   break;
  }
  $65 = $0;
  $66 = (_read16b($65)|0);
  $67 = $66&65535;
  $68 = (($67|0) / 8)&-1;
  $69 = $68&255;
  $70 = $i;
  $71 = (($ptable) + ($70)|0);
  HEAP8[$71>>0] = $69;
  $72 = $i;
  $73 = (($ptable) + ($72)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $npat;
  $77 = ($75|0)>($76|0);
  if ($77) {
   $78 = $i;
   $79 = (($ptable) + ($78)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $npat = $81;
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $84 = $npat;
 $85 = (($84) + 1)|0;
 $npat = $85;
 $86 = $1;
 (_fwrite(($ptable|0),128,1,($86|0))|0);
 $87 = $1;
 _write32b($87,1294879534);
 $i = 0;
 $max_addr = 0;
 while(1) {
  $88 = $i;
  $89 = $npat;
  $90 = ($88|0)<($89|0);
  $91 = $0;
  if (!($90)) {
   break;
  }
  $92 = (_read16b($91)|0);
  $93 = $92&65535;
  $94 = $i;
  $95 = (($trk_addr) + ($94<<4)|0);
  HEAP32[$95>>2] = $93;
  $96 = $max_addr;
  $97 = ($93|0)>($96|0);
  if ($97) {
   $98 = $i;
   $99 = (($trk_addr) + ($98<<4)|0);
   $100 = HEAP32[$99>>2]|0;
   $max_addr = $100;
  }
  $101 = $0;
  $102 = (_read16b($101)|0);
  $103 = $102&65535;
  $104 = $i;
  $105 = (($trk_addr) + ($104<<4)|0);
  $106 = ((($105)) + 4|0);
  HEAP32[$106>>2] = $103;
  $107 = $max_addr;
  $108 = ($103|0)>($107|0);
  if ($108) {
   $109 = $i;
   $110 = (($trk_addr) + ($109<<4)|0);
   $111 = ((($110)) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $max_addr = $112;
  }
  $113 = $0;
  $114 = (_read16b($113)|0);
  $115 = $114&65535;
  $116 = $i;
  $117 = (($trk_addr) + ($116<<4)|0);
  $118 = ((($117)) + 8|0);
  HEAP32[$118>>2] = $115;
  $119 = $max_addr;
  $120 = ($115|0)>($119|0);
  if ($120) {
   $121 = $i;
   $122 = (($trk_addr) + ($121<<4)|0);
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $max_addr = $124;
  }
  $125 = $0;
  $126 = (_read16b($125)|0);
  $127 = $126&65535;
  $128 = $i;
  $129 = (($trk_addr) + ($128<<4)|0);
  $130 = ((($129)) + 12|0);
  HEAP32[$130>>2] = $127;
  $131 = $max_addr;
  $132 = ($127|0)>($131|0);
  if ($132) {
   $133 = $i;
   $134 = (($trk_addr) + ($133<<4)|0);
   $135 = ((($134)) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $max_addr = $136;
  }
  $137 = $i;
  $138 = (($137) + 1)|0;
  $i = $138;
 }
 $139 = (_ftell(($91|0))|0);
 $trk_start = $139;
 $i = 0;
 while(1) {
  $140 = $i;
  $141 = $npat;
  $142 = ($140|0)<($141|0);
  if (!($142)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $143 = $j;
   $144 = ($143|0)<(4);
   if (!($144)) {
    break;
   }
   $145 = $0;
   $146 = $trk_start;
   $147 = $j;
   $148 = (3 - ($147))|0;
   $149 = $i;
   $150 = (($trk_addr) + ($149<<4)|0);
   $151 = (($150) + ($148<<2)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($146) + ($152))|0;
   (_fseek(($145|0),($153|0),0)|0);
   $k = 0;
   while(1) {
    $154 = $k;
    $155 = ($154|0)<(64);
    if (!($155)) {
     break;
    }
    $156 = $k;
    $157 = $156<<4;
    $158 = $j;
    $159 = $158<<2;
    $160 = (($157) + ($159))|0;
    $x = $160;
    $161 = $0;
    $162 = (_read8($161)|0);
    $c1 = $162;
    $163 = $162&255;
    $164 = ($163|0)>=(128);
    if ($164) {
     $165 = $c1;
     $166 = $165&255;
     $167 = (256 - ($166))|0;
     $168 = (($167) - 1)|0;
     $169 = $k;
     $170 = (($169) + ($168))|0;
     $k = $170;
    } else {
     $171 = $0;
     $172 = (_read8($171)|0);
     $c2 = $172;
     $173 = $0;
     $174 = (_read8($173)|0);
     $c3 = $174;
     $175 = $c1;
     $176 = $175&255;
     $177 = $176 & 254;
     $178 = (($177|0) / 2)&-1;
     $179 = $178&255;
     $c4 = $179;
     $180 = $c1;
     $181 = $180&255;
     $182 = $181 << 4;
     $183 = $182 & 16;
     $184 = $c4;
     $185 = $184&255;
     $186 = (8240 + ($185<<1)|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = $183 | $188;
     $190 = $189&255;
     $191 = $x;
     $192 = (($tmp) + ($191)|0);
     HEAP8[$192>>0] = $190;
     $193 = $c4;
     $194 = $193&255;
     $195 = (8240 + ($194<<1)|0);
     $196 = ((($195)) + 1|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $x;
     $199 = (($198) + 1)|0;
     $200 = (($tmp) + ($199)|0);
     HEAP8[$200>>0] = $197;
     $201 = $c2;
     $202 = $201&255;
     $203 = $202 & 15;
     switch ($203|0) {
     case 7:  {
      $208 = $c2;
      $209 = $208&255;
      $210 = $209 & 240;
      $211 = (($210) + 10)|0;
      $212 = $211&255;
      $c2 = $212;
      label = 34;
      break;
     }
     case 11:  {
      $223 = $c3;
      $224 = $223&255;
      $225 = (($224) + 4)|0;
      $226 = (($225|0) / 2)&-1;
      $227 = $226&255;
      $c3 = $227;
      break;
     }
     case 8:  {
      $204 = $c2;
      $205 = $204&255;
      $206 = $205 & 240;
      $207 = $206&255;
      $c2 = $207;
      break;
     }
     case 14:  {
      $c3 = 1;
      break;
     }
     case 5: case 6:  {
      label = 34;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 34) {
      label = 0;
      $213 = $c3;
      $214 = $213&255;
      $215 = ($214|0)>(128);
      $216 = $c3;
      $217 = $216&255;
      $218 = (256 - ($217))|0;
      $219 = $217 << 4;
      $220 = $219 & 240;
      $221 = $215 ? $218 : $220;
      $222 = $221&255;
      $c3 = $222;
     }
     $228 = $c2;
     $229 = $x;
     $230 = (($229) + 2)|0;
     $231 = (($tmp) + ($230)|0);
     HEAP8[$231>>0] = $228;
     $232 = $c3;
     $233 = $x;
     $234 = (($233) + 3)|0;
     $235 = (($tmp) + ($234)|0);
     HEAP8[$235>>0] = $232;
     $236 = $c2;
     $237 = $236&255;
     $238 = $237 & 15;
     $239 = ($238|0)==(13);
     if ($239) {
      break;
     }
    }
    $240 = $k;
    $241 = (($240) + 1)|0;
    $k = $241;
   }
   $242 = $0;
   $243 = (_ftell(($242|0))|0);
   $244 = $smp_addr;
   $245 = ($243|0)>($244|0);
   if ($245) {
    $246 = $0;
    $247 = (_ftell(($246|0))|0);
    $smp_addr = $247;
   }
   $248 = $j;
   $249 = (($248) + 1)|0;
   $j = $249;
  }
  $250 = $1;
  (_fwrite(($tmp|0),1024,1,($250|0))|0);
  $251 = $i;
  $252 = (($251) + 1)|0;
  $i = $252;
 }
 $253 = $smp_addr;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if (!($255)) {
  $258 = $0;
  $259 = $smp_addr;
  (_fseek(($258|0),($259|0),0)|0);
  $260 = $1;
  $261 = $0;
  $262 = $ssize;
  (_pw_move_data($260,$261,$262)|0);
  STACKTOP = sp;return 0;
 }
 $256 = $smp_addr;
 $257 = (($256) + 1)|0;
 $smp_addr = $257;
 $258 = $0;
 $259 = $smp_addr;
 (_fseek(($258|0),($259|0),0)|0);
 $260 = $1;
 $261 = $0;
 $262 = $ssize;
 (_pw_move_data($260,$261,$262)|0);
 STACKTOP = sp;return 0;
}
function _test_p61a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $d = 0, $e = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $start;
 $5 = (($4) + 2)|0;
 $6 = $1;
 $7 = (($6) + ($5)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $m = $9;
 $10 = $m;
 $11 = ($10|0)>(127);
 $12 = $m;
 $13 = ($12|0)==(0);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 $14 = $start;
 $15 = (($14) + 3)|0;
 $16 = $1;
 $17 = (($16) + ($15)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 63;
 $k = $20;
 $21 = $k;
 $22 = ($21|0)>(31);
 $23 = $k;
 $24 = ($23|0)==(0);
 $or$cond3 = $22 | $24;
 if ($or$cond3) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 $l = 0;
 while(1) {
  $25 = $l;
  $26 = $k;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   label = 12;
   break;
  }
  $28 = $start;
  $29 = (($28) + 7)|0;
  $30 = $l;
  $31 = ($30*6)|0;
  $32 = (($29) + ($31))|0;
  $33 = $1;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)>(64);
  if ($37) {
   label = 8;
   break;
  }
  $38 = $start;
  $39 = (($38) + 6)|0;
  $40 = $l;
  $41 = ($40*6)|0;
  $42 = (($39) + ($41))|0;
  $43 = $1;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)>(15);
  if ($47) {
   label = 10;
   break;
  }
  $48 = $l;
  $49 = (($48) + 1)|0;
  $l = $49;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 else if ((label|0) == 12) {
  $ssize = 0;
  $n = 0;
  while(1) {
   $50 = $n;
   $51 = $k;
   $52 = ($50|0)<($51|0);
   $53 = $1;
   $54 = $start;
   $55 = (($53) + ($54)|0);
   if (!($52)) {
    label = 25;
    break;
   }
   $56 = $n;
   $57 = ($56*6)|0;
   $58 = (($55) + ($57)|0);
   $59 = ((($58)) + 4|0);
   $60 = (_readmem16b($59)|0);
   $61 = $60&65535;
   $o = $61;
   $62 = $o;
   $63 = ($62|0)<(65503);
   $64 = $o;
   $65 = ($64|0)>(32768);
   $or$cond5 = $63 & $65;
   $66 = $o;
   $67 = ($66|0)==(0);
   $or$cond7 = $or$cond5 | $67;
   if ($or$cond7) {
    label = 15;
    break;
   }
   $68 = $o;
   $69 = ($68|0)<(65280);
   if ($69) {
    $70 = $o;
    $71 = $70<<1;
    $72 = $ssize;
    $73 = (($72) + ($71))|0;
    $ssize = $73;
   }
   $74 = $1;
   $75 = $start;
   $76 = (($74) + ($75)|0);
   $77 = $n;
   $78 = ($77*6)|0;
   $79 = (($76) + ($78)|0);
   $80 = ((($79)) + 8|0);
   $81 = (_readmem16b($80)|0);
   $82 = $81&65535;
   $j = $82;
   $83 = $j;
   $84 = ($83|0)!=(65535);
   if ($84) {
    $85 = $j;
    $86 = $o;
    $87 = ($85|0)>=($86|0);
    if ($87) {
     label = 20;
     break;
    }
   }
   $88 = $o;
   $89 = ($88|0)>(65503);
   if ($89) {
    $90 = $o;
    $91 = (65535 - ($90))|0;
    $92 = $k;
    $93 = ($91|0)>($92|0);
    if ($93) {
     label = 23;
     break;
    }
   }
   $94 = $n;
   $95 = (($94) + 1)|0;
   $n = $95;
  }
  if ((label|0) == 15) {
   $0 = -1;
   $322 = $0;
   STACKTOP = sp;return ($322|0);
  }
  else if ((label|0) == 20) {
   $0 = -1;
   $322 = $0;
   STACKTOP = sp;return ($322|0);
  }
  else if ((label|0) == 23) {
   $0 = -1;
   $322 = $0;
   STACKTOP = sp;return ($322|0);
  }
  else if ((label|0) == 25) {
   $96 = (_readmem16b($55)|0);
   $97 = $96&65535;
   $j = $97;
   $98 = $j;
   $99 = $k;
   $100 = ($99*6)|0;
   $101 = (($100) + 4)|0;
   $102 = $m;
   $103 = $102<<3;
   $104 = (($101) + ($103))|0;
   $105 = ($98|0)<($104|0);
   if ($105) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $l = 0;
   while(1) {
    $106 = $l;
    $107 = $m;
    $108 = $107<<2;
    $109 = ($106|0)<($108|0);
    if (!($109)) {
     break;
    }
    $110 = $1;
    $111 = $start;
    $112 = (($110) + ($111)|0);
    $113 = ((($112)) + 4|0);
    $114 = $k;
    $115 = ($114*6)|0;
    $116 = (($113) + ($115)|0);
    $117 = $l;
    $118 = $117<<1;
    $119 = (($116) + ($118)|0);
    $120 = (_readmem16b($119)|0);
    $121 = $120&65535;
    $o = $121;
    $122 = $o;
    $123 = $k;
    $124 = ($123*6)|0;
    $125 = (($122) + ($124))|0;
    $126 = (($125) + 4)|0;
    $127 = $m;
    $128 = $127<<3;
    $129 = (($126) + ($128))|0;
    $130 = $j;
    $131 = ($129|0)>($130|0);
    if ($131) {
     label = 30;
     break;
    }
    $132 = $l;
    $133 = (($132) + 1)|0;
    $l = $133;
   }
   if ((label|0) == 30) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $l = 0;
   $o = 0;
   $134 = $k;
   $135 = ($134*6)|0;
   $136 = (($135) + 4)|0;
   $137 = $m;
   $138 = $137<<3;
   $139 = (($136) + ($138))|0;
   $x = $139;
   $140 = $3;
   $141 = $start;
   $142 = $x;
   $143 = (($141) + ($142))|0;
   $144 = ($140|0)<($143|0);
   if ($144) {
    $145 = $start;
    $146 = $x;
    $147 = (($145) + ($146))|0;
    $148 = $3;
    $149 = (($147) - ($148))|0;
    $0 = $149;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   while(1) {
    $150 = $start;
    $151 = $x;
    $152 = (($150) + ($151))|0;
    $153 = $l;
    $154 = (($152) + ($153))|0;
    $155 = $1;
    $156 = (($155) + ($154)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = ($158|0)!=(255);
    $160 = $l;
    $161 = ($160|0)<(128);
    $162 = $159 ? $161 : 0;
    if (!($162)) {
     break;
    }
    $163 = $start;
    $164 = $x;
    $165 = (($163) + ($164))|0;
    $166 = $l;
    $167 = (($165) + ($166))|0;
    $168 = $1;
    $169 = (($168) + ($167)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = $m;
    $173 = (($172) - 1)|0;
    $174 = ($171|0)>($173|0);
    if ($174) {
     label = 36;
     break;
    }
    $175 = $start;
    $176 = $x;
    $177 = (($175) + ($176))|0;
    $178 = $l;
    $179 = (($177) + ($178))|0;
    $180 = $1;
    $181 = (($180) + ($179)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = $o;
    $185 = ($183|0)>($184|0);
    if ($185) {
     $186 = $start;
     $187 = $x;
     $188 = (($186) + ($187))|0;
     $189 = $l;
     $190 = (($188) + ($189))|0;
     $191 = $1;
     $192 = (($191) + ($190)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $o = $194;
    }
    $195 = $l;
    $196 = (($195) + 1)|0;
    $l = $196;
   }
   if ((label|0) == 36) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $197 = $x;
   $198 = $l;
   $199 = (($197) + ($198))|0;
   $200 = $j;
   $201 = ($199|0)>($200|0);
   if ($201) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $202 = $l;
   $203 = ($202|0)==(0);
   $204 = $l;
   $205 = ($204|0)==(128);
   $or$cond9 = $203 | $205;
   if ($or$cond9) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $206 = $o;
   $207 = (($206) + 1)|0;
   $o = $207;
   $208 = $3;
   $209 = $start;
   $210 = $j;
   $211 = (($209) + ($210))|0;
   $212 = (($211) + 1)|0;
   $213 = ($208|0)<($212|0);
   if ($213) {
    $214 = $start;
    $215 = $j;
    $216 = (($214) + ($215))|0;
    $217 = (($216) + 1)|0;
    $218 = $3;
    $219 = (($217) - ($218))|0;
    $0 = $219;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $220 = $l;
   $221 = (($220) + 1)|0;
   $l = $221;
   $222 = $x;
   $223 = $l;
   $224 = (($222) + ($223))|0;
   $n = $224;
   L73: while(1) {
    $225 = $n;
    $226 = $j;
    $227 = ($225|0)<($226|0);
    if (!($227)) {
     label = 76;
     break;
    }
    $228 = $start;
    $229 = $n;
    $230 = (($228) + ($229))|0;
    $231 = $1;
    $232 = (($231) + ($230)|0);
    $233 = HEAP8[$232>>0]|0;
    $d = $233;
    $234 = $start;
    $235 = $n;
    $236 = (($234) + ($235))|0;
    $237 = (($236) + 1)|0;
    $238 = $1;
    $239 = (($238) + ($237)|0);
    $240 = HEAP8[$239>>0]|0;
    $e = $240;
    $241 = $d;
    $242 = $241&255;
    $243 = $242 & 255;
    $244 = ($243|0)==(255);
    do {
     if ($244) {
      $245 = $e;
      $246 = $245&255;
      $247 = $246 & 192;
      $248 = ($247|0)==(0);
      if ($248) {
       $249 = $n;
       $250 = (($249) + 1)|0;
       $n = $250;
       break;
      }
      $251 = $e;
      $252 = $251&255;
      $253 = $252 & 192;
      $254 = ($253|0)==(64);
      if ($254) {
       $255 = $n;
       $256 = (($255) + 2)|0;
       $n = $256;
       break;
      }
      $257 = $e;
      $258 = $257&255;
      $259 = $258 & 192;
      $260 = ($259|0)==(192);
      if ($260) {
       $261 = $n;
       $262 = (($261) + 3)|0;
       $n = $262;
      } else {
       label = 55;
      }
     } else {
      label = 55;
     }
    } while(0);
    do {
     if ((label|0) == 55) {
      label = 0;
      $263 = $d;
      $264 = $263&255;
      $265 = $264 & 255;
      $266 = ($265|0)==(127);
      if (!($266)) {
       $267 = $d;
       $268 = $267&255;
       $269 = $268 & 240;
       $270 = ($269|0)==(240);
       if ($270) {
        $271 = $e;
        $272 = $271&255;
        $273 = $272 & 31;
        $274 = $k;
        $275 = ($273|0)>($274|0);
        if ($275) {
         label = 58;
         break L73;
        }
        $276 = $n;
        $277 = (($276) + 2)|0;
        $n = $277;
        break;
       }
       $278 = $d;
       $279 = $278&255;
       $280 = $279 & 240;
       $281 = ($280|0)==(112);
       if ($281) {
        $282 = $e;
        $283 = $282&255;
        $284 = $283 & 31;
        $285 = $k;
        $286 = ($284|0)>($285|0);
        if ($286) {
         label = 62;
         break L73;
        }
        $287 = $n;
        $288 = (($287) + 1)|0;
        $n = $288;
        break;
       }
       $289 = $d;
       $290 = $289&255;
       $291 = $290 & 240;
       $292 = ($291|0)==(224);
       if ($292) {
        $293 = $n;
        $294 = (($293) + 2)|0;
        $n = $294;
        break;
       }
       $295 = $d;
       $296 = $295&255;
       $297 = $296 & 240;
       $298 = ($297|0)==(96);
       if ($298) {
        $299 = $n;
        $300 = (($299) + 1)|0;
        $n = $300;
        break;
       }
       $301 = $d;
       $302 = $301&255;
       $303 = $302 & 128;
       $304 = ($303|0)==(128);
       $305 = $d;
       $306 = $305&255;
       $307 = $306 << 4;
       $308 = $307 & 16;
       $309 = $e;
       $310 = $309&255;
       $311 = $310 >> 4;
       $312 = $311 & 15;
       $313 = $308 | $312;
       $314 = $k;
       $315 = ($313|0)>($314|0);
       if ($304) {
        if ($315) {
         label = 70;
         break L73;
        }
        $316 = $n;
        $317 = (($316) + 3)|0;
        $n = $317;
        break;
       } else {
        if ($315) {
         label = 73;
         break L73;
        }
        $318 = $n;
        $319 = (($318) + 2)|0;
        $n = $319;
        break;
       }
      }
     }
    } while(0);
    $320 = $n;
    $321 = (($320) + 1)|0;
    $n = $321;
   }
   if ((label|0) == 58) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 62) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 70) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 73) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 76) {
    $0 = 0;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
  }
 }
 return (0)|0;
}
function _depack_p61a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $PACK = 0, $Unpacked_Sample_Data_Size = 0, $a = 0, $b = 0, $c1 = 0, $c2 = 0, $c3 = 0;
 var $c4 = 0, $c5 = 0, $c6 = 0, $i = 0, $isize = 0, $j = 0, $k = 0, $l = 0, $len = 0, $max_row = 0, $nins = 0, $npat = 0, $ptable = 0, $saddr = 0, $sdata_addr = 0, $smp_buffer = 0, $smp_size = 0, $ssize = 0, $taddr = 0, $tdata = 0;
 var $tdata_addr = 0, $tmp = 0, $use_delta = 0, $use_packed = 0, $x = 0, $x1 = 0, $z = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 134784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 133744|0;
 $tdata = sp + 2672|0;
 $ptable = sp + 2544|0;
 $isize = sp + 2352|0;
 $PACK = sp + 2510|0;
 $taddr = sp + 304|0;
 $smp_size = sp + 136|0;
 $saddr = sp + 12|0;
 $1 = $in;
 $2 = $out;
 $len = 0;
 $npat = 0;
 $nins = 0;
 $use_delta = 0;
 $use_packed = 0;
 $tdata_addr = 0;
 $sdata_addr = 0;
 $ssize = 0;
 $i = 0;
 _memset(($taddr|0),0,2048)|0;
 _memset(($tdata|0),0,131072)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$smp_size; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$isize; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$isize+60>>1]=0|0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (($PACK) + ($5)|0);
  HEAP8[$6>>0] = 0;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $i = $8;
 }
 HEAP32[$saddr>>2] = 0;
 $9 = $1;
 $10 = (_read16b($9)|0);
 $11 = $10&65535;
 $sdata_addr = $11;
 $12 = $1;
 $13 = (_read8($12)|0);
 $14 = $13&255;
 $npat = $14;
 $15 = $1;
 $16 = (_read8($15)|0);
 $17 = $16&255;
 $nins = $17;
 $18 = $nins;
 $19 = $18 & 128;
 $20 = ($19|0)!=(0);
 if ($20) {
  $use_delta = 1;
 }
 $21 = $nins;
 $22 = $21 & 64;
 $23 = ($22|0)!=(0);
 if ($23) {
  $use_packed = 1;
  $0 = -1;
  $1251 = $0;
  STACKTOP = sp;return ($1251|0);
 }
 $24 = $nins;
 $25 = $24 & 63;
 $nins = $25;
 $26 = $use_packed;
 $27 = $26&255;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = $1;
  $30 = (_read32b($29)|0);
  $Unpacked_Sample_Data_Size = $30;
 }
 $31 = $2;
 (_pw_write_zero($31,20)|0);
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = $nins;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $2;
  (_pw_write_zero($35,22)|0);
  $36 = $1;
  $37 = (_read16b($36)|0);
  $38 = $37&65535;
  $39 = $i;
  $40 = (($isize) + ($39<<2)|0);
  HEAP32[$40>>2] = $38;
  $j = $38;
  $41 = $j;
  $42 = ($41|0)>(65280);
  if ($42) {
   $43 = $j;
   $44 = (65535 - ($43))|0;
   $45 = (($smp_size) + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $i;
   $48 = (($smp_size) + ($47<<2)|0);
   HEAP32[$48>>2] = $46;
   $49 = $j;
   $50 = (65535 - ($49))|0;
   $51 = (($isize) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $i;
   $54 = (($isize) + ($53<<2)|0);
   HEAP32[$54>>2] = $52;
   $55 = $j;
   $56 = (65535 - ($55))|0;
   $57 = (($saddr) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $i;
   $60 = (($saddr) + ($59<<2)|0);
   HEAP32[$60>>2] = $58;
  } else {
   $61 = $i;
   $62 = ($61|0)>(0);
   if ($62) {
    $63 = $i;
    $64 = (($63) - 1)|0;
    $65 = (($saddr) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $i;
    $68 = (($67) - 1)|0;
    $69 = (($smp_size) + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($66) + ($70))|0;
    $72 = $i;
    $73 = (($saddr) + ($72<<2)|0);
    HEAP32[$73>>2] = $71;
   }
   $74 = $j;
   $75 = $74<<1;
   $76 = $i;
   $77 = (($smp_size) + ($76<<2)|0);
   HEAP32[$77>>2] = $75;
   $78 = $i;
   $79 = (($smp_size) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $ssize;
   $82 = (($81) + ($80))|0;
   $ssize = $82;
  }
  $83 = $i;
  $84 = (($smp_size) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85|0) / 2)&-1;
  $j = $86;
  $87 = $2;
  $88 = $i;
  $89 = (($isize) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90&65535;
  _write16b($87,$91);
  $92 = $1;
  $93 = (_read8($92)|0);
  $c1 = $93;
  $94 = $c1;
  $95 = $94&255;
  $96 = $95 & 64;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = $i;
   $99 = (($PACK) + ($98)|0);
   HEAP8[$99>>0] = 1;
  }
  $100 = $c1;
  $101 = $100&255;
  $102 = $101 & 63;
  $103 = $102&255;
  $c1 = $103;
  $104 = $2;
  $105 = $c1;
  _write8($104,$105);
  $106 = $2;
  $107 = $1;
  $108 = (_read8($107)|0);
  _write8($106,$108);
  $109 = $1;
  $110 = (_read16b($109)|0);
  $111 = $110&65535;
  $x = $111;
  $112 = $x;
  $113 = ($112|0)==(65535);
  $114 = $2;
  if ($113) {
   _write16b($114,0);
   $115 = $2;
   _write16b($115,1);
  } else {
   $116 = $x;
   $117 = $116&65535;
   _write16b($114,$117);
   $118 = $2;
   $119 = $j;
   $120 = $x;
   $121 = (($119) - ($120))|0;
   $122 = $121&65535;
   _write16b($118,$122);
  }
  $123 = $i;
  $124 = (($123) + 1)|0;
  $i = $124;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $125 = ((($tmp)) + 29|0);
 HEAP8[$125>>0] = 1;
 while(1) {
  $126 = $i;
  $127 = ($126|0)<(31);
  if (!($127)) {
   break;
  }
  $128 = $2;
  (_fwrite(($tmp|0),30,1,($128|0))|0);
  $129 = $i;
  $130 = (($129) + 1)|0;
  $i = $130;
 }
 $i = 0;
 while(1) {
  $131 = $i;
  $132 = $npat;
  $133 = ($131|0)<($132|0);
  if (!($133)) {
   break;
  }
  $j = 0;
  while(1) {
   $134 = $j;
   $135 = ($134|0)<(4);
   if (!($135)) {
    break;
   }
   $136 = $1;
   $137 = (_read16b($136)|0);
   $138 = $137&65535;
   $139 = $j;
   $140 = $i;
   $141 = (($taddr) + ($140<<4)|0);
   $142 = (($141) + ($139<<2)|0);
   HEAP32[$142>>2] = $138;
   $143 = $j;
   $144 = (($143) + 1)|0;
   $j = $144;
  }
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 $len = 0;
 while(1) {
  $147 = $len;
  $148 = ($147|0)<(128);
  if (!($148)) {
   break;
  }
  $149 = $1;
  $150 = (_read8($149)|0);
  $c1 = $150;
  $151 = $c1;
  $152 = $151&255;
  $153 = ($152|0)==(255);
  if ($153) {
   break;
  }
  $154 = $c1;
  $155 = $len;
  $156 = (($ptable) + ($155)|0);
  HEAP8[$156>>0] = $154;
  $157 = $len;
  $158 = (($157) + 1)|0;
  $len = $158;
 }
 $159 = $2;
 $160 = $len;
 $161 = $160&255;
 _write8($159,$161);
 $162 = $2;
 _write8($162,127);
 $163 = $2;
 (_fwrite(($ptable|0),128,1,($163|0))|0);
 $164 = $2;
 _write32b($164,1294879534);
 $165 = $1;
 $166 = (_ftell(($165|0))|0);
 $tdata_addr = $166;
 $i = 0;
 while(1) {
  $167 = $i;
  $168 = $npat;
  $169 = ($167|0)<($168|0);
  if (!($169)) {
   break;
  }
  $max_row = 63;
  $j = 0;
  while(1) {
   $170 = $j;
   $171 = ($170|0)<(4);
   if (!($171)) {
    break;
   }
   $172 = $1;
   $173 = $j;
   $174 = $i;
   $175 = (($taddr) + ($174<<4)|0);
   $176 = (($175) + ($173<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $tdata_addr;
   $179 = (($177) + ($178))|0;
   (_fseek(($172|0),($179|0),0)|0);
   $k = 0;
   L56: while(1) {
    $180 = $k;
    $181 = $max_row;
    $182 = ($180|0)<=($181|0);
    if (!($182)) {
     break;
    }
    $183 = $k;
    $184 = $183<<2;
    $185 = $i;
    $186 = $185<<2;
    $187 = $j;
    $188 = (($186) + ($187))|0;
    $189 = (($tdata) + ($188<<8)|0);
    $190 = (($189) + ($184)|0);
    $x1 = $190;
    $191 = $1;
    $192 = (_read8($191)|0);
    $c1 = $192;
    $193 = $c1;
    $194 = $193&255;
    $195 = $194 & 112;
    $196 = ($195|0)==(112);
    L59: do {
     if ($196) {
      $197 = $c1;
      $198 = $197&255;
      $199 = ($198|0)!=(255);
      if ($199) {
       $200 = $c1;
       $201 = $200&255;
       $202 = ($201|0)!=(127);
       if ($202) {
        $203 = $1;
        $204 = (_read8($203)|0);
        $c2 = $204;
        $205 = $c1;
        $206 = $205&255;
        $207 = $206 << 4;
        $208 = $207 & 240;
        $209 = $c2;
        $210 = $209&255;
        $211 = $210 >> 4;
        $212 = $211 & 14;
        $213 = $208 | $212;
        $214 = $213&255;
        $c6 = $214;
        $215 = $c2;
        $216 = $215&255;
        $217 = $216 & 16;
        $218 = $c6;
        $219 = $218&255;
        $220 = (($219|0) / 2)&-1;
        $221 = (8240 + ($220<<1)|0);
        $222 = HEAP8[$221>>0]|0;
        $223 = $222&255;
        $224 = $217 | $223;
        $225 = $224&255;
        $226 = $x1;
        $227 = ((($226)) + 1|0);
        $x1 = $227;
        HEAP8[$226>>0] = $225;
        $228 = $c6;
        $229 = $228&255;
        $230 = (($229|0) / 2)&-1;
        $231 = (8240 + ($230<<1)|0);
        $232 = ((($231)) + 1|0);
        $233 = HEAP8[$232>>0]|0;
        $234 = $x1;
        $235 = ((($234)) + 1|0);
        $x1 = $235;
        HEAP8[$234>>0] = $233;
        $236 = $c2;
        $237 = $236&255;
        $238 = $237 << 4;
        $239 = $238 & 240;
        $240 = $239&255;
        $241 = $x1;
        $242 = ((($241)) + 1|0);
        $x1 = $242;
        HEAP8[$241>>0] = $240;
        $243 = $c1;
        $244 = $243&255;
        $245 = $244 & 128;
        $246 = ($245|0)!=(0);
        if ($246) {
         $247 = $1;
         $248 = (_read8($247)|0);
         $c3 = $248;
         $249 = $c3;
         $250 = $249&255;
         $251 = ($250|0)<(128);
         $252 = $c3;
         $253 = $252&255;
         if ($251) {
          $254 = $k;
          $255 = (($254) + ($253))|0;
          $k = $255;
          break;
         }
         $256 = (($253) - 128)|0;
         $257 = $256&255;
         $c4 = $257;
         $l = 0;
         while(1) {
          $258 = $l;
          $259 = $c4;
          $260 = $259&255;
          $261 = ($258|0)<($260|0);
          if (!($261)) {
           break L59;
          }
          $262 = $k;
          $263 = (($262) + 1)|0;
          $k = $263;
          $264 = $k;
          $265 = $264<<2;
          $266 = $i;
          $267 = $266<<2;
          $268 = $j;
          $269 = (($267) + ($268))|0;
          $270 = (($tdata) + ($269<<8)|0);
          $271 = (($270) + ($265)|0);
          $x1 = $271;
          $272 = $c2;
          $273 = $272&255;
          $274 = $273 & 16;
          $275 = $c6;
          $276 = $275&255;
          $277 = (($276|0) / 2)&-1;
          $278 = (8240 + ($277<<1)|0);
          $279 = HEAP8[$278>>0]|0;
          $280 = $279&255;
          $281 = $274 | $280;
          $282 = $281&255;
          $283 = $x1;
          $284 = ((($283)) + 1|0);
          $x1 = $284;
          HEAP8[$283>>0] = $282;
          $285 = $c6;
          $286 = $285&255;
          $287 = (($286|0) / 2)&-1;
          $288 = (8240 + ($287<<1)|0);
          $289 = ((($288)) + 1|0);
          $290 = HEAP8[$289>>0]|0;
          $291 = $x1;
          $292 = ((($291)) + 1|0);
          $x1 = $292;
          HEAP8[$291>>0] = $290;
          $293 = $c2;
          $294 = $293&255;
          $295 = $294 << 4;
          $296 = $295 & 240;
          $297 = $296&255;
          $298 = $x1;
          $299 = ((($298)) + 1|0);
          $x1 = $299;
          HEAP8[$298>>0] = $297;
          $300 = $l;
          $301 = (($300) + 1)|0;
          $l = $301;
         }
        }
       } else {
        label = 51;
       }
      } else {
       label = 51;
      }
     } else {
      label = 51;
     }
    } while(0);
    L70: do {
     if ((label|0) == 51) {
      label = 0;
      $302 = $c1;
      $303 = $302&255;
      $304 = $303 & 112;
      $305 = ($304|0)==(96);
      if ($305) {
       $306 = $c1;
       $307 = $306&255;
       $308 = ($307|0)!=(255);
       if ($308) {
        $309 = $1;
        $310 = (_read8($309)|0);
        $c2 = $310;
        $311 = $c1;
        $312 = $311&255;
        $313 = $312 & 15;
        $314 = $313&255;
        $c6 = $314;
        $315 = $c6;
        $316 = $315&255;
        $317 = ($316|0)==(8);
        if ($317) {
         $318 = $c1;
         $319 = $318&255;
         $320 = (($319) - 8)|0;
         $321 = $320&255;
         $c1 = $321;
        }
        $322 = $x1;
        $323 = ((($322)) + 2|0);
        $x1 = $323;
        $324 = $c1;
        $325 = $324&255;
        $326 = $325 & 15;
        $327 = $326&255;
        $328 = $x1;
        $329 = ((($328)) + 1|0);
        $x1 = $329;
        HEAP8[$328>>0] = $327;
        $330 = $c6;
        $331 = $330&255;
        $332 = ($331|0)==(5);
        if ($332) {
         label = 58;
        } else {
         $333 = $c6;
         $334 = $333&255;
         $335 = ($334|0)==(6);
         if ($335) {
          label = 58;
         } else {
          $336 = $c6;
          $337 = $336&255;
          $338 = ($337|0)==(10);
          if ($338) {
           label = 58;
          }
         }
        }
        if ((label|0) == 58) {
         label = 0;
         $339 = $c2;
         $340 = $339&255;
         $341 = ($340|0)>(127);
         $342 = $c2;
         $343 = $342&255;
         $344 = (256 - ($343))|0;
         $345 = $344 << 4;
         $346 = $341 ? $345 : $343;
         $347 = $346&255;
         $c2 = $347;
        }
        $348 = $c2;
        $349 = $x1;
        $350 = ((($349)) + 1|0);
        $x1 = $350;
        HEAP8[$349>>0] = $348;
        $351 = $c6;
        $352 = $351&255;
        $353 = ($352|0)==(13);
        if ($353) {
         label = 60;
         break L56;
        }
        $355 = $c6;
        $356 = $355&255;
        $357 = ($356|0)==(11);
        if ($357) {
         label = 62;
         break L56;
        }
        $359 = $c1;
        $360 = $359&255;
        $361 = $360 & 128;
        $362 = ($361|0)!=(0);
        if (!($362)) {
         break;
        }
        $363 = $1;
        $364 = (_read8($363)|0);
        $c3 = $364;
        $365 = $c3;
        $366 = $365&255;
        $367 = ($366|0)<(128);
        $368 = $c3;
        $369 = $368&255;
        if ($367) {
         $370 = $k;
         $371 = (($370) + ($369))|0;
         $k = $371;
         break;
        }
        $372 = (($369) - 128)|0;
        $373 = $372&255;
        $c4 = $373;
        $l = 0;
        while(1) {
         $374 = $l;
         $375 = $c4;
         $376 = $375&255;
         $377 = ($374|0)<($376|0);
         if (!($377)) {
          break L70;
         }
         $378 = $k;
         $379 = (($378) + 1)|0;
         $k = $379;
         $380 = $k;
         $381 = $380<<2;
         $382 = $i;
         $383 = $382<<2;
         $384 = $j;
         $385 = (($383) + ($384))|0;
         $386 = (($tdata) + ($385<<8)|0);
         $387 = (($386) + ($381)|0);
         $388 = ((($387)) + 2|0);
         $x1 = $388;
         $389 = $c1;
         $390 = $389&255;
         $391 = $390 & 15;
         $392 = $391&255;
         $393 = $x1;
         $394 = ((($393)) + 1|0);
         $x1 = $394;
         HEAP8[$393>>0] = $392;
         $395 = $c2;
         $396 = $x1;
         $397 = ((($396)) + 1|0);
         $x1 = $397;
         HEAP8[$396>>0] = $395;
         $398 = $l;
         $399 = (($398) + 1)|0;
         $l = $399;
        }
       }
      }
      $400 = $c1;
      $401 = $400&255;
      $402 = $401 & 128;
      $403 = ($402|0)==(128);
      if ($403) {
       $404 = $c1;
       $405 = $404&255;
       $406 = ($405|0)!=(255);
       if ($406) {
        $407 = $1;
        $408 = (_read8($407)|0);
        $c2 = $408;
        $409 = $1;
        $410 = (_read8($409)|0);
        $c3 = $410;
        $411 = $1;
        $412 = (_read8($411)|0);
        $c4 = $412;
        $413 = $c1;
        $414 = $413&255;
        $415 = $414 & 127;
        $416 = $415&255;
        $c1 = $416;
        $417 = $c1;
        $418 = $417&255;
        $419 = $418 << 4;
        $420 = $419 & 16;
        $421 = $c1;
        $422 = $421&255;
        $423 = (($422|0) / 2)&-1;
        $424 = (8240 + ($423<<1)|0);
        $425 = HEAP8[$424>>0]|0;
        $426 = $425&255;
        $427 = $420 | $426;
        $428 = $427&255;
        $429 = $x1;
        $430 = ((($429)) + 1|0);
        $x1 = $430;
        HEAP8[$429>>0] = $428;
        $431 = $c1;
        $432 = $431&255;
        $433 = (($432|0) / 2)&-1;
        $434 = (8240 + ($433<<1)|0);
        $435 = ((($434)) + 1|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $x1;
        $438 = ((($437)) + 1|0);
        $x1 = $438;
        HEAP8[$437>>0] = $436;
        $439 = $c2;
        $440 = $439&255;
        $441 = $440 & 15;
        $442 = $441&255;
        $c6 = $442;
        $443 = $c6;
        $444 = $443&255;
        $445 = ($444|0)==(8);
        if ($445) {
         $446 = $c2;
         $447 = $446&255;
         $448 = (($447) - 8)|0;
         $449 = $448&255;
         $c2 = $449;
        }
        $450 = $c2;
        $451 = $x1;
        $452 = ((($451)) + 1|0);
        $x1 = $452;
        HEAP8[$451>>0] = $450;
        $453 = $c6;
        $454 = $453&255;
        $455 = ($454|0)==(5);
        if ($455) {
         label = 76;
        } else {
         $456 = $c6;
         $457 = $456&255;
         $458 = ($457|0)==(6);
         if ($458) {
          label = 76;
         } else {
          $459 = $c6;
          $460 = $459&255;
          $461 = ($460|0)==(10);
          if ($461) {
           label = 76;
          }
         }
        }
        if ((label|0) == 76) {
         label = 0;
         $462 = $c3;
         $463 = $462&255;
         $464 = ($463|0)>(127);
         $465 = $c3;
         $466 = $465&255;
         $467 = (256 - ($466))|0;
         $468 = $467 << 4;
         $469 = $464 ? $468 : $466;
         $470 = $469&255;
         $c3 = $470;
        }
        $471 = $c3;
        $472 = $x1;
        $473 = ((($472)) + 1|0);
        $x1 = $473;
        HEAP8[$472>>0] = $471;
        $474 = $c6;
        $475 = $474&255;
        $476 = ($475|0)==(13);
        if ($476) {
         label = 78;
         break L56;
        }
        $478 = $c6;
        $479 = $478&255;
        $480 = ($479|0)==(11);
        if ($480) {
         label = 80;
         break L56;
        }
        $482 = $c4;
        $483 = $482&255;
        $484 = ($483|0)<(128);
        $485 = $c4;
        $486 = $485&255;
        if ($484) {
         $487 = $k;
         $488 = (($487) + ($486))|0;
         $k = $488;
         break;
        }
        $489 = (($486) - 128)|0;
        $490 = $489&255;
        $c4 = $490;
        $l = 0;
        while(1) {
         $491 = $l;
         $492 = $c4;
         $493 = $492&255;
         $494 = ($491|0)<($493|0);
         if (!($494)) {
          break L70;
         }
         $495 = $k;
         $496 = (($495) + 1)|0;
         $k = $496;
         $497 = $k;
         $498 = $497<<2;
         $499 = $i;
         $500 = $499<<2;
         $501 = $j;
         $502 = (($500) + ($501))|0;
         $503 = (($tdata) + ($502<<8)|0);
         $504 = (($503) + ($498)|0);
         $x1 = $504;
         $505 = $c1;
         $506 = $505&255;
         $507 = $506 << 4;
         $508 = $507 & 16;
         $509 = $c1;
         $510 = $509&255;
         $511 = (($510|0) / 2)&-1;
         $512 = (8240 + ($511<<1)|0);
         $513 = HEAP8[$512>>0]|0;
         $514 = $513&255;
         $515 = $508 | $514;
         $516 = $515&255;
         $517 = $x1;
         $518 = ((($517)) + 1|0);
         $x1 = $518;
         HEAP8[$517>>0] = $516;
         $519 = $c1;
         $520 = $519&255;
         $521 = (($520|0) / 2)&-1;
         $522 = (8240 + ($521<<1)|0);
         $523 = ((($522)) + 1|0);
         $524 = HEAP8[$523>>0]|0;
         $525 = $x1;
         $526 = ((($525)) + 1|0);
         $x1 = $526;
         HEAP8[$525>>0] = $524;
         $527 = $c2;
         $528 = $527&255;
         $529 = $528 & 15;
         $530 = $529&255;
         $c6 = $530;
         $531 = $c6;
         $532 = $531&255;
         $533 = ($532|0)==(8);
         if ($533) {
          $534 = $c2;
          $535 = $534&255;
          $536 = (($535) - 8)|0;
          $537 = $536&255;
          $c2 = $537;
         }
         $538 = $c2;
         $539 = $x1;
         $540 = ((($539)) + 1|0);
         $x1 = $540;
         HEAP8[$539>>0] = $538;
         $541 = $c6;
         $542 = $541&255;
         $543 = ($542|0)==(5);
         do {
          if ($543) {
           label = 90;
          } else {
           $544 = $c6;
           $545 = $544&255;
           $546 = ($545|0)==(6);
           if ($546) {
            label = 90;
            break;
           }
           $547 = $c6;
           $548 = $547&255;
           $549 = ($548|0)==(10);
           if ($549) {
            label = 90;
           }
          }
         } while(0);
         if ((label|0) == 90) {
          label = 0;
          $550 = $c3;
          $551 = $550&255;
          $552 = ($551|0)>(127);
          $553 = $c3;
          $554 = $553&255;
          $555 = (256 - ($554))|0;
          $556 = $555 << 4;
          $557 = $552 ? $556 : $554;
          $558 = $557&255;
          $c3 = $558;
         }
         $559 = $c3;
         $560 = $x1;
         $561 = ((($560)) + 1|0);
         $x1 = $561;
         HEAP8[$560>>0] = $559;
         $562 = $l;
         $563 = (($562) + 1)|0;
         $l = $563;
        }
       }
      }
      $564 = $c1;
      $565 = $564&255;
      $566 = $565 & 127;
      $567 = ($566|0)==(127);
      if (!($567)) {
       $1088 = $1;
       $1089 = (_read8($1088)|0);
       $c2 = $1089;
       $1090 = $1;
       $1091 = (_read8($1090)|0);
       $c3 = $1091;
       $1092 = $c1;
       $1093 = $1092&255;
       $1094 = $1093 << 4;
       $1095 = $1094 & 16;
       $1096 = $c1;
       $1097 = $1096&255;
       $1098 = (($1097|0) / 2)&-1;
       $1099 = (8240 + ($1098<<1)|0);
       $1100 = HEAP8[$1099>>0]|0;
       $1101 = $1100&255;
       $1102 = $1095 | $1101;
       $1103 = $1102&255;
       $1104 = $x1;
       $1105 = ((($1104)) + 1|0);
       $x1 = $1105;
       HEAP8[$1104>>0] = $1103;
       $1106 = $c1;
       $1107 = $1106&255;
       $1108 = (($1107|0) / 2)&-1;
       $1109 = (8240 + ($1108<<1)|0);
       $1110 = ((($1109)) + 1|0);
       $1111 = HEAP8[$1110>>0]|0;
       $1112 = $x1;
       $1113 = ((($1112)) + 1|0);
       $x1 = $1113;
       HEAP8[$1112>>0] = $1111;
       $1114 = $c2;
       $1115 = $1114&255;
       $1116 = $1115 & 15;
       $1117 = $1116&255;
       $c6 = $1117;
       $1118 = $c6;
       $1119 = $1118&255;
       $1120 = ($1119|0)==(8);
       if ($1120) {
        $1121 = $c2;
        $1122 = $1121&255;
        $1123 = (($1122) - 8)|0;
        $1124 = $1123&255;
        $c2 = $1124;
       }
       $1125 = $c2;
       $1126 = $x1;
       $1127 = ((($1126)) + 1|0);
       $x1 = $1127;
       HEAP8[$1126>>0] = $1125;
       $1128 = $c6;
       $1129 = $1128&255;
       $1130 = ($1129|0)==(5);
       if ($1130) {
        label = 172;
       } else {
        $1131 = $c6;
        $1132 = $1131&255;
        $1133 = ($1132|0)==(6);
        if ($1133) {
         label = 172;
        } else {
         $1134 = $c6;
         $1135 = $1134&255;
         $1136 = ($1135|0)==(10);
         if ($1136) {
          label = 172;
         }
        }
       }
       if ((label|0) == 172) {
        label = 0;
        $1137 = $c3;
        $1138 = $1137&255;
        $1139 = ($1138|0)>(127);
        $1140 = $c3;
        $1141 = $1140&255;
        $1142 = (256 - ($1141))|0;
        $1143 = $1142 << 4;
        $1144 = $1139 ? $1143 : $1141;
        $1145 = $1144&255;
        $c3 = $1145;
       }
       $1146 = $c3;
       $1147 = $x1;
       $1148 = ((($1147)) + 1|0);
       $x1 = $1148;
       HEAP8[$1147>>0] = $1146;
       $1149 = $c6;
       $1150 = $1149&255;
       $1151 = ($1150|0)==(13);
       if ($1151) {
        label = 174;
        break L56;
       }
       $1153 = $c6;
       $1154 = $1153&255;
       $1155 = ($1154|0)==(11);
       if ($1155) {
        label = 176;
        break L56;
       } else {
        break;
       }
      }
      $568 = $c1;
      $569 = $568&255;
      $570 = $569 ^ -1;
      $571 = $570 & 128;
      $572 = ($571|0)!=(0);
      if (!($572)) {
       $573 = $1;
       $574 = (_read8($573)|0);
       $c2 = $574;
       $575 = $c2;
       $576 = $575&255;
       $577 = ($576|0)<(64);
       $578 = $c2;
       $579 = $578&255;
       if ($577) {
        $580 = $k;
        $581 = (($580) + ($579))|0;
        $k = $581;
        break;
       }
       $582 = (($579) - 64)|0;
       $583 = $582&255;
       $c2 = $583;
       $584 = $1;
       $585 = (_read8($584)|0);
       $c3 = $585;
       $586 = $c3;
       $587 = $586&255;
       $z = $587;
       $588 = $c2;
       $589 = $588&255;
       $590 = ($589|0)>=(128);
       if ($590) {
        $591 = $c2;
        $592 = $591&255;
        $593 = (($592) - 128)|0;
        $594 = $593&255;
        $c2 = $594;
        $595 = $1;
        $596 = (_read8($595)|0);
        $c4 = $596;
        $597 = $c3;
        $598 = $597&255;
        $599 = $598 << 8;
        $600 = $c4;
        $601 = $600&255;
        $602 = (($599) + ($601))|0;
        $z = $602;
       }
       $603 = $1;
       $604 = (_ftell(($603|0))|0);
       $a = $604;
       $605 = $c2;
       $c5 = $605;
       $606 = $1;
       $607 = $z;
       $608 = (0 - ($607))|0;
       (_fseek(($606|0),($608|0),1)|0);
       $l = 0;
       while(1) {
        $609 = $l;
        $610 = $c5;
        $611 = $610&255;
        $612 = ($609|0)<=($611|0);
        if ($612) {
         $613 = $k;
         $614 = $max_row;
         $615 = ($613|0)<=($614|0);
         $1252 = $615;
        } else {
         $1252 = 0;
        }
        $616 = $1;
        if (!($1252)) {
         break;
        }
        $617 = (_read8($616)|0);
        $c1 = $617;
        $618 = $k;
        $619 = $618<<2;
        $620 = $i;
        $621 = $620<<2;
        $622 = $j;
        $623 = (($621) + ($622))|0;
        $624 = (($tdata) + ($623<<8)|0);
        $625 = (($624) + ($619)|0);
        $x1 = $625;
        $626 = $c1;
        $627 = $626&255;
        $628 = $627 & 112;
        $629 = ($628|0)==(112);
        L150: do {
         if ($629) {
          $630 = $c1;
          $631 = $630&255;
          $632 = ($631|0)!=(255);
          if (!($632)) {
           label = 111;
           break;
          }
          $633 = $c1;
          $634 = $633&255;
          $635 = ($634|0)!=(127);
          if (!($635)) {
           label = 111;
           break;
          }
          $636 = $1;
          $637 = (_read8($636)|0);
          $c2 = $637;
          $638 = $c1;
          $639 = $638&255;
          $640 = $639 << 4;
          $641 = $640 & 240;
          $642 = $c2;
          $643 = $642&255;
          $644 = $643 >> 4;
          $645 = $644 & 14;
          $646 = $641 | $645;
          $647 = $646&255;
          $c6 = $647;
          $648 = $c2;
          $649 = $648&255;
          $650 = $649 & 16;
          $651 = $c6;
          $652 = $651&255;
          $653 = (($652|0) / 2)&-1;
          $654 = (8240 + ($653<<1)|0);
          $655 = HEAP8[$654>>0]|0;
          $656 = $655&255;
          $657 = $650 | $656;
          $658 = $657&255;
          $659 = $x1;
          $660 = ((($659)) + 1|0);
          $x1 = $660;
          HEAP8[$659>>0] = $658;
          $661 = $c6;
          $662 = $661&255;
          $663 = (($662|0) / 2)&-1;
          $664 = (8240 + ($663<<1)|0);
          $665 = ((($664)) + 1|0);
          $666 = HEAP8[$665>>0]|0;
          $667 = $x1;
          $668 = ((($667)) + 1|0);
          $x1 = $668;
          HEAP8[$667>>0] = $666;
          $669 = $c2;
          $670 = $669&255;
          $671 = $670 << 4;
          $672 = $671 & 240;
          $673 = $672&255;
          $674 = $x1;
          $675 = ((($674)) + 1|0);
          $x1 = $675;
          HEAP8[$674>>0] = $673;
          $676 = $c1;
          $677 = $676&255;
          $678 = $677 & 128;
          $679 = ($678|0)!=(0);
          if (!($679)) {
           break;
          }
          $680 = $1;
          $681 = (_read8($680)|0);
          $c3 = $681;
          $682 = $c3;
          $683 = $682&255;
          $684 = ($683|0)<(128);
          $685 = $c3;
          $686 = $685&255;
          if ($684) {
           $687 = $k;
           $688 = (($687) + ($686))|0;
           $k = $688;
           break;
          }
          $689 = (($686) - 128)|0;
          $690 = $689&255;
          $c4 = $690;
          $b = 0;
          while(1) {
           $691 = $b;
           $692 = $c4;
           $693 = $692&255;
           $694 = ($691|0)<($693|0);
           if (!($694)) {
            break L150;
           }
           $695 = $k;
           $696 = (($695) + 1)|0;
           $k = $696;
           $697 = $k;
           $698 = $697<<2;
           $699 = $i;
           $700 = $699<<2;
           $701 = $j;
           $702 = (($700) + ($701))|0;
           $703 = (($tdata) + ($702<<8)|0);
           $704 = (($703) + ($698)|0);
           $x1 = $704;
           $705 = $c2;
           $706 = $705&255;
           $707 = $706 & 16;
           $708 = $c6;
           $709 = $708&255;
           $710 = (($709|0) / 2)&-1;
           $711 = (8240 + ($710<<1)|0);
           $712 = HEAP8[$711>>0]|0;
           $713 = $712&255;
           $714 = $707 | $713;
           $715 = $714&255;
           $716 = $x1;
           $717 = ((($716)) + 1|0);
           $x1 = $717;
           HEAP8[$716>>0] = $715;
           $718 = $c6;
           $719 = $718&255;
           $720 = (($719|0) / 2)&-1;
           $721 = (8240 + ($720<<1)|0);
           $722 = ((($721)) + 1|0);
           $723 = HEAP8[$722>>0]|0;
           $724 = $x1;
           $725 = ((($724)) + 1|0);
           $x1 = $725;
           HEAP8[$724>>0] = $723;
           $726 = $c2;
           $727 = $726&255;
           $728 = $727 << 4;
           $729 = $728 & 240;
           $730 = $729&255;
           $731 = $x1;
           $732 = ((($731)) + 1|0);
           $x1 = $732;
           HEAP8[$731>>0] = $730;
           $733 = $b;
           $734 = (($733) + 1)|0;
           $b = $734;
          }
         } else {
          label = 111;
         }
        } while(0);
        L161: do {
         if ((label|0) == 111) {
          label = 0;
          $735 = $c1;
          $736 = $735&255;
          $737 = $736 & 96;
          $738 = ($737|0)==(96);
          do {
           if ($738) {
            $739 = $c1;
            $740 = $739&255;
            $741 = ($740|0)!=(255);
            if (!($741)) {
             break;
            }
            $742 = $c1;
            $743 = $742&255;
            $744 = ($743|0)!=(127);
            if (!($744)) {
             break;
            }
            $745 = $1;
            $746 = (_read8($745)|0);
            $c2 = $746;
            $747 = $c1;
            $748 = $747&255;
            $749 = $748 & 15;
            $750 = $749&255;
            $c6 = $750;
            $751 = $c6;
            $752 = $751&255;
            $753 = ($752|0)==(8);
            if ($753) {
             $754 = $c1;
             $755 = $754&255;
             $756 = (($755) - 8)|0;
             $757 = $756&255;
             $c1 = $757;
            }
            $758 = $x1;
            $759 = ((($758)) + 2|0);
            $x1 = $759;
            $760 = $c1;
            $761 = $760&255;
            $762 = $761 & 15;
            $763 = $762&255;
            $764 = $x1;
            $765 = ((($764)) + 1|0);
            $x1 = $765;
            HEAP8[$764>>0] = $763;
            $766 = $c6;
            $767 = $766&255;
            $768 = ($767|0)==(5);
            do {
             if ($768) {
              label = 119;
             } else {
              $769 = $c6;
              $770 = $769&255;
              $771 = ($770|0)==(6);
              if ($771) {
               label = 119;
               break;
              }
              $772 = $c6;
              $773 = $772&255;
              $774 = ($773|0)==(10);
              if ($774) {
               label = 119;
              }
             }
            } while(0);
            if ((label|0) == 119) {
             label = 0;
             $775 = $c2;
             $776 = $775&255;
             $777 = ($776|0)>(127);
             $778 = $c2;
             $779 = $778&255;
             $780 = (256 - ($779))|0;
             $781 = $780 << 4;
             $782 = $777 ? $781 : $779;
             $783 = $782&255;
             $c2 = $783;
            }
            $784 = $c2;
            $785 = $x1;
            $786 = ((($785)) + 1|0);
            $x1 = $786;
            HEAP8[$785>>0] = $784;
            $787 = $c6;
            $788 = $787&255;
            $789 = ($788|0)==(13);
            if ($789) {
             label = 121;
             break L56;
            }
            $791 = $c6;
            $792 = $791&255;
            $793 = ($792|0)==(11);
            if ($793) {
             label = 123;
             break L56;
            }
            $795 = $c1;
            $796 = $795&255;
            $797 = $796 & 128;
            $798 = ($797|0)!=(0);
            if (!($798)) {
             break L161;
            }
            $799 = $1;
            $800 = (_read8($799)|0);
            $c3 = $800;
            $801 = $c3;
            $802 = $801&255;
            $803 = ($802|0)<(128);
            $804 = $c3;
            $805 = $804&255;
            if ($803) {
             $806 = $k;
             $807 = (($806) + ($805))|0;
             $k = $807;
             break L161;
            }
            $808 = (($805) - 128)|0;
            $809 = $808&255;
            $c4 = $809;
            $b = 0;
            while(1) {
             $810 = $b;
             $811 = $c4;
             $812 = $811&255;
             $813 = ($810|0)<($812|0);
             if (!($813)) {
              break L161;
             }
             $814 = $k;
             $815 = (($814) + 1)|0;
             $k = $815;
             $816 = $k;
             $817 = $816<<2;
             $818 = $i;
             $819 = $818<<2;
             $820 = $j;
             $821 = (($819) + ($820))|0;
             $822 = (($tdata) + ($821<<8)|0);
             $823 = (($822) + ($817)|0);
             $824 = ((($823)) + 2|0);
             $x1 = $824;
             $825 = $c1;
             $826 = $825&255;
             $827 = $826 & 15;
             $828 = $827&255;
             $829 = $x1;
             $830 = ((($829)) + 1|0);
             $x1 = $830;
             HEAP8[$829>>0] = $828;
             $831 = $c2;
             $832 = $x1;
             $833 = ((($832)) + 1|0);
             $x1 = $833;
             HEAP8[$832>>0] = $831;
             $834 = $b;
             $835 = (($834) + 1)|0;
             $b = $835;
            }
           }
          } while(0);
          $836 = $c1;
          $837 = $836&255;
          $838 = $837 & 128;
          $839 = ($838|0)!=(0);
          do {
           if ($839) {
            $840 = $c1;
            $841 = $840&255;
            $842 = ($841|0)!=(255);
            if (!($842)) {
             break;
            }
            $843 = $c1;
            $844 = $843&255;
            $845 = ($844|0)!=(127);
            if (!($845)) {
             break;
            }
            $846 = $1;
            $847 = (_read8($846)|0);
            $c2 = $847;
            $848 = $1;
            $849 = (_read8($848)|0);
            $c3 = $849;
            $850 = $1;
            $851 = (_read8($850)|0);
            $c4 = $851;
            $852 = $c1;
            $853 = $852&255;
            $854 = $853 & 127;
            $855 = $854&255;
            $c1 = $855;
            $856 = $c1;
            $857 = $856&255;
            $858 = $857 << 4;
            $859 = $858 & 16;
            $860 = $c1;
            $861 = $860&255;
            $862 = (($861|0) / 2)&-1;
            $863 = (8240 + ($862<<1)|0);
            $864 = HEAP8[$863>>0]|0;
            $865 = $864&255;
            $866 = $859 | $865;
            $867 = $866&255;
            $868 = $x1;
            $869 = ((($868)) + 1|0);
            $x1 = $869;
            HEAP8[$868>>0] = $867;
            $870 = $c1;
            $871 = $870&255;
            $872 = (($871|0) / 2)&-1;
            $873 = (8240 + ($872<<1)|0);
            $874 = ((($873)) + 1|0);
            $875 = HEAP8[$874>>0]|0;
            $876 = $x1;
            $877 = ((($876)) + 1|0);
            $x1 = $877;
            HEAP8[$876>>0] = $875;
            $878 = $c2;
            $879 = $878&255;
            $880 = $879 & 15;
            $881 = $880&255;
            $c6 = $881;
            $882 = $c6;
            $883 = $882&255;
            $884 = ($883|0)==(8);
            if ($884) {
             $885 = $c2;
             $886 = $885&255;
             $887 = (($886) - 8)|0;
             $888 = $887&255;
             $c2 = $888;
            }
            $889 = $c2;
            $890 = $x1;
            $891 = ((($890)) + 1|0);
            $x1 = $891;
            HEAP8[$890>>0] = $889;
            $892 = $c6;
            $893 = $892&255;
            $894 = ($893|0)==(5);
            do {
             if ($894) {
              label = 138;
             } else {
              $895 = $c6;
              $896 = $895&255;
              $897 = ($896|0)==(6);
              if ($897) {
               label = 138;
               break;
              }
              $898 = $c6;
              $899 = $898&255;
              $900 = ($899|0)==(10);
              if ($900) {
               label = 138;
              }
             }
            } while(0);
            if ((label|0) == 138) {
             label = 0;
             $901 = $c3;
             $902 = $901&255;
             $903 = ($902|0)>(127);
             $904 = $c3;
             $905 = $904&255;
             $906 = (256 - ($905))|0;
             $907 = $906 << 4;
             $908 = $903 ? $907 : $905;
             $909 = $908&255;
             $c3 = $909;
            }
            $910 = $c3;
            $911 = $x1;
            $912 = ((($911)) + 1|0);
            $x1 = $912;
            HEAP8[$911>>0] = $910;
            $913 = $c6;
            $914 = $913&255;
            $915 = ($914|0)==(13);
            if ($915) {
             label = 140;
             break L56;
            }
            $917 = $c6;
            $918 = $917&255;
            $919 = ($918|0)==(11);
            if ($919) {
             label = 142;
             break L56;
            }
            $921 = $c4;
            $922 = $921&255;
            $923 = ($922|0)<(128);
            $924 = $c4;
            $925 = $924&255;
            if ($923) {
             $926 = $k;
             $927 = (($926) + ($925))|0;
             $k = $927;
             break L161;
            }
            $928 = (($925) - 128)|0;
            $929 = $928&255;
            $c4 = $929;
            $b = 0;
            while(1) {
             $930 = $b;
             $931 = $c4;
             $932 = $931&255;
             $933 = ($930|0)<($932|0);
             if (!($933)) {
              break L161;
             }
             $934 = $k;
             $935 = (($934) + 1)|0;
             $k = $935;
             $936 = $k;
             $937 = $936<<2;
             $938 = $i;
             $939 = $938<<2;
             $940 = $j;
             $941 = (($939) + ($940))|0;
             $942 = (($tdata) + ($941<<8)|0);
             $943 = (($942) + ($937)|0);
             $x1 = $943;
             $944 = $c1;
             $945 = $944&255;
             $946 = $945 << 4;
             $947 = $946 & 16;
             $948 = $c1;
             $949 = $948&255;
             $950 = (($949|0) / 2)&-1;
             $951 = (8240 + ($950<<1)|0);
             $952 = HEAP8[$951>>0]|0;
             $953 = $952&255;
             $954 = $947 | $953;
             $955 = $954&255;
             $956 = $x1;
             $957 = ((($956)) + 1|0);
             $x1 = $957;
             HEAP8[$956>>0] = $955;
             $958 = $c1;
             $959 = $958&255;
             $960 = (($959|0) / 2)&-1;
             $961 = (8240 + ($960<<1)|0);
             $962 = ((($961)) + 1|0);
             $963 = HEAP8[$962>>0]|0;
             $964 = $x1;
             $965 = ((($964)) + 1|0);
             $x1 = $965;
             HEAP8[$964>>0] = $963;
             $966 = $c2;
             $967 = $966&255;
             $968 = $967 & 15;
             $969 = $968&255;
             $c6 = $969;
             $970 = $c6;
             $971 = $970&255;
             $972 = ($971|0)==(8);
             if ($972) {
              $973 = $c2;
              $974 = $973&255;
              $975 = (($974) - 8)|0;
              $976 = $975&255;
              $c2 = $976;
             }
             $977 = $c2;
             $978 = $x1;
             $979 = ((($978)) + 1|0);
             $x1 = $979;
             HEAP8[$978>>0] = $977;
             $980 = $c6;
             $981 = $980&255;
             $982 = ($981|0)==(5);
             do {
              if ($982) {
               label = 152;
              } else {
               $983 = $c6;
               $984 = $983&255;
               $985 = ($984|0)==(6);
               if ($985) {
                label = 152;
                break;
               }
               $986 = $c6;
               $987 = $986&255;
               $988 = ($987|0)==(10);
               if ($988) {
                label = 152;
               }
              }
             } while(0);
             if ((label|0) == 152) {
              label = 0;
              $989 = $c3;
              $990 = $989&255;
              $991 = ($990|0)>(127);
              $992 = $c3;
              $993 = $992&255;
              $994 = (256 - ($993))|0;
              $995 = $994 << 4;
              $996 = $991 ? $995 : $993;
              $997 = $996&255;
              $c3 = $997;
             }
             $998 = $c3;
             $999 = $x1;
             $1000 = ((($999)) + 1|0);
             $x1 = $1000;
             HEAP8[$999>>0] = $998;
             $1001 = $b;
             $1002 = (($1001) + 1)|0;
             $b = $1002;
            }
           }
          } while(0);
          $1003 = $c1;
          $1004 = $1003&255;
          $1005 = $1004 & 127;
          $1006 = ($1005|0)==(127);
          if ($1006) {
           $1007 = $c1;
           $1008 = $1007&255;
           $1009 = $1008 & 128;
           $1010 = ($1009|0)==(0);
           if ($1010) {
            break;
           }
           $1011 = $1;
           $1012 = (_read8($1011)|0);
           $c2 = $1012;
           $1013 = $c2;
           $1014 = $1013&255;
           $1015 = ($1014|0)<(64);
           if (!($1015)) {
            break;
           }
           $1016 = $c2;
           $1017 = $1016&255;
           $1018 = $k;
           $1019 = (($1018) + ($1017))|0;
           $k = $1019;
           break;
          }
          $1020 = $1;
          $1021 = (_read8($1020)|0);
          $c2 = $1021;
          $1022 = $1;
          $1023 = (_read8($1022)|0);
          $c3 = $1023;
          $1024 = $c1;
          $1025 = $1024&255;
          $1026 = $1025 << 4;
          $1027 = $1026 & 16;
          $1028 = $c1;
          $1029 = $1028&255;
          $1030 = (($1029|0) / 2)&-1;
          $1031 = (8240 + ($1030<<1)|0);
          $1032 = HEAP8[$1031>>0]|0;
          $1033 = $1032&255;
          $1034 = $1027 | $1033;
          $1035 = $1034&255;
          $1036 = $x1;
          $1037 = ((($1036)) + 1|0);
          $x1 = $1037;
          HEAP8[$1036>>0] = $1035;
          $1038 = $c1;
          $1039 = $1038&255;
          $1040 = (($1039|0) / 2)&-1;
          $1041 = (8240 + ($1040<<1)|0);
          $1042 = ((($1041)) + 1|0);
          $1043 = HEAP8[$1042>>0]|0;
          $1044 = $x1;
          $1045 = ((($1044)) + 1|0);
          $x1 = $1045;
          HEAP8[$1044>>0] = $1043;
          $1046 = $c2;
          $1047 = $1046&255;
          $1048 = $1047 & 15;
          $1049 = $1048&255;
          $c6 = $1049;
          $1050 = $c6;
          $1051 = $1050&255;
          $1052 = ($1051|0)==(8);
          if ($1052) {
           $1053 = $c2;
           $1054 = $1053&255;
           $1055 = (($1054) - 8)|0;
           $1056 = $1055&255;
           $c2 = $1056;
          }
          $1057 = $c2;
          $1058 = $x1;
          $1059 = ((($1058)) + 1|0);
          $x1 = $1059;
          HEAP8[$1058>>0] = $1057;
          $1060 = $c6;
          $1061 = $1060&255;
          $1062 = ($1061|0)==(5);
          do {
           if ($1062) {
            label = 163;
           } else {
            $1063 = $c6;
            $1064 = $1063&255;
            $1065 = ($1064|0)==(6);
            if ($1065) {
             label = 163;
             break;
            }
            $1066 = $c6;
            $1067 = $1066&255;
            $1068 = ($1067|0)==(10);
            if ($1068) {
             label = 163;
            }
           }
          } while(0);
          if ((label|0) == 163) {
           label = 0;
           $1069 = $c3;
           $1070 = $1069&255;
           $1071 = ($1070|0)>(127);
           $1072 = $c3;
           $1073 = $1072&255;
           $1074 = (256 - ($1073))|0;
           $1075 = $1074 << 4;
           $1076 = $1071 ? $1075 : $1073;
           $1077 = $1076&255;
           $c3 = $1077;
          }
          $1078 = $c3;
          $1079 = $x1;
          $1080 = ((($1079)) + 1|0);
          $x1 = $1080;
          HEAP8[$1079>>0] = $1078;
         }
        } while(0);
        $1081 = $l;
        $1082 = (($1081) + 1)|0;
        $l = $1082;
        $1083 = $k;
        $1084 = (($1083) + 1)|0;
        $k = $1084;
       }
       $1085 = $a;
       (_fseek(($616|0),($1085|0),0)|0);
       $1086 = $k;
       $1087 = (($1086) - 1)|0;
       $k = $1087;
      }
     }
    } while(0);
    $1157 = $k;
    $1158 = (($1157) + 1)|0;
    $k = $1158;
   }
   switch (label|0) {
    case 60: {
     label = 0;
     $354 = $k;
     $max_row = $354;
     break;
    }
    case 62: {
     label = 0;
     $358 = $k;
     $max_row = $358;
     break;
    }
    case 78: {
     label = 0;
     $477 = $k;
     $max_row = $477;
     break;
    }
    case 80: {
     label = 0;
     $481 = $k;
     $max_row = $481;
     break;
    }
    case 121: {
     label = 0;
     $790 = $k;
     $max_row = $790;
     break;
    }
    case 123: {
     label = 0;
     $794 = $k;
     $max_row = $794;
     break;
    }
    case 140: {
     label = 0;
     $916 = $k;
     $max_row = $916;
     break;
    }
    case 142: {
     label = 0;
     $920 = $k;
     $max_row = $920;
     break;
    }
    case 174: {
     label = 0;
     $1152 = $k;
     $max_row = $1152;
     break;
    }
    case 176: {
     label = 0;
     $1156 = $k;
     $max_row = $1156;
     break;
    }
   }
   $1159 = $j;
   $1160 = (($1159) + 1)|0;
   $j = $1160;
  }
  $1161 = $i;
  $1162 = (($1161) + 1)|0;
  $i = $1162;
 }
 $i = 0;
 while(1) {
  $1163 = $i;
  $1164 = $npat;
  $1165 = ($1163|0)<($1164|0);
  if (!($1165)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $1166 = $j;
   $1167 = ($1166|0)<(64);
   if (!($1167)) {
    break;
   }
   $k = 0;
   while(1) {
    $1168 = $k;
    $1169 = ($1168|0)<(4);
    $1170 = $j;
    if (!($1169)) {
     break;
    }
    $1171 = $1170<<4;
    $1172 = $k;
    $1173 = $1172<<2;
    $1174 = (($1171) + ($1173))|0;
    $1175 = (($tmp) + ($1174)|0);
    $1176 = $j;
    $1177 = $1176<<2;
    $1178 = $k;
    $1179 = $i;
    $1180 = $1179<<2;
    $1181 = (($1178) + ($1180))|0;
    $1182 = (($tdata) + ($1181<<8)|0);
    $1183 = (($1182) + ($1177)|0);
    ;HEAP8[$1175>>0]=HEAP8[$1183>>0]|0;HEAP8[$1175+1>>0]=HEAP8[$1183+1>>0]|0;HEAP8[$1175+2>>0]=HEAP8[$1183+2>>0]|0;HEAP8[$1175+3>>0]=HEAP8[$1183+3>>0]|0;
    $1184 = $k;
    $1185 = (($1184) + 1)|0;
    $k = $1185;
   }
   $1186 = (($1170) + 1)|0;
   $j = $1186;
  }
  $1187 = $2;
  (_fwrite(($tmp|0),1024,1,($1187|0))|0);
  $1188 = $i;
  $1189 = (($1188) + 1)|0;
  $i = $1189;
 }
 $1190 = $1;
 $1191 = $sdata_addr;
 (_fseek(($1190|0),($1191|0),0)|0);
 $i = 0;
 while(1) {
  $1192 = $i;
  $1193 = $nins;
  $1194 = ($1192|0)<($1193|0);
  if (!($1194)) {
   break;
  }
  $1195 = $1;
  $1196 = $sdata_addr;
  $1197 = $i;
  $1198 = (($saddr) + ($1197<<2)|0);
  $1199 = HEAP32[$1198>>2]|0;
  $1200 = (($1196) + ($1199))|0;
  (_fseek(($1195|0),($1200|0),0)|0);
  $1201 = $i;
  $1202 = (($smp_size) + ($1201<<2)|0);
  $1203 = HEAP32[$1202>>2]|0;
  $1204 = (_malloc($1203)|0);
  $smp_buffer = $1204;
  $1205 = $smp_buffer;
  $1206 = $i;
  $1207 = (($smp_size) + ($1206<<2)|0);
  $1208 = HEAP32[$1207>>2]|0;
  _memset(($1205|0),0,($1208|0))|0;
  $1209 = $smp_buffer;
  $1210 = $i;
  $1211 = (($smp_size) + ($1210<<2)|0);
  $1212 = HEAP32[$1211>>2]|0;
  $1213 = $1;
  (_fread(($1209|0),($1212|0),1,($1213|0))|0);
  $1214 = $use_delta;
  $1215 = $1214&255;
  $1216 = ($1215|0)==(1);
  L263: do {
   if ($1216) {
    $c1 = 0;
    $j = 1;
    while(1) {
     $1217 = $j;
     $1218 = $i;
     $1219 = (($smp_size) + ($1218<<2)|0);
     $1220 = HEAP32[$1219>>2]|0;
     $1221 = ($1217|0)<($1220|0);
     if (!($1221)) {
      break L263;
     }
     $1222 = $j;
     $1223 = $smp_buffer;
     $1224 = (($1223) + ($1222)|0);
     $1225 = HEAP8[$1224>>0]|0;
     $c2 = $1225;
     $1226 = $c2;
     $1227 = $1226&255;
     $1228 = (256 - ($1227))|0;
     $1229 = $1228&255;
     $c2 = $1229;
     $1230 = $c2;
     $1231 = $1230&255;
     $1232 = $c1;
     $1233 = $1232&255;
     $1234 = (($1231) + ($1233))|0;
     $1235 = $1234&255;
     $c3 = $1235;
     $1236 = $c3;
     $1237 = $j;
     $1238 = $smp_buffer;
     $1239 = (($1238) + ($1237)|0);
     HEAP8[$1239>>0] = $1236;
     $1240 = $c3;
     $c1 = $1240;
     $1241 = $j;
     $1242 = (($1241) + 1)|0;
     $j = $1242;
    }
   }
  } while(0);
  $1243 = $smp_buffer;
  $1244 = $i;
  $1245 = (($smp_size) + ($1244<<2)|0);
  $1246 = HEAP32[$1245>>2]|0;
  $1247 = $2;
  (_fwrite(($1243|0),($1246|0),1,($1247|0))|0);
  $1248 = $smp_buffer;
  _free($1248);
  $1249 = $i;
  $1250 = (($1249) + 1)|0;
  $i = $1250;
 }
 $0 = 0;
 $1251 = $0;
 STACKTOP = sp;return ($1251|0);
}
function _test_p10c($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0, $start = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic = sp + 24|0;
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 dest=$magic; src=10224; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = $3;
 $5 = ($4|0)<(22);
 do {
  if ($5) {
   $6 = $3;
   $7 = (22 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = $start;
   $10 = (($8) + ($9)|0);
   $11 = (_memcmp($10,$magic,16)|0);
   $12 = ($11|0)!=(0);
   if ($12) {
    $0 = -1;
    break;
   }
   $13 = $start;
   $14 = (($13) + 21)|0;
   $15 = $1;
   $16 = (($15) + ($14)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)!=(206);
   if ($19) {
    $0 = -1;
    break;
   }
   $20 = $3;
   $21 = ($20|0)<(4714);
   if ($21) {
    $22 = $3;
    $23 = (4714 - ($22))|0;
    $0 = $23;
    break;
   }
   $24 = $1;
   $25 = $start;
   $26 = (($24) + ($25)|0);
   $27 = ((($26)) + 4712|0);
   $28 = (_readmem16b($27)|0);
   $29 = $28&65535;
   $30 = $29 & 3;
   $31 = ($30|0)!=(0);
   if ($31) {
    $0 = -1;
    break;
   }
   $32 = $start;
   $33 = (($32) + 36)|0;
   $34 = $1;
   $35 = (($34) + ($33)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)!=(16);
   if ($38) {
    $0 = -1;
    break;
   }
   $39 = $start;
   $40 = (($39) + 37)|0;
   $41 = $1;
   $42 = (($41) + ($40)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = ($44|0)!=(252);
   if ($45) {
    $0 = -1;
    break;
   } else {
    $46 = $2;
    _pw_read_title(0,$46,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _depack_p10c($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $FLAG = 0, $NOP = 0, $SDAV = 0, $c1 = 0, $c2 = 0, $c3 = 0, $fin = 0, $i = 0, $j = 0, $k = 0, $l = 0, $oldins = 0, $paddr = 0, $paddr1 = 0, $paddr2 = 0, $pat = 0, $pat_max = 0;
 var $per = 0, $pnum = 0, $pnum1 = 0, $pptr = 0, $psize = 0, $refmax = 0, $reftab = 0, $size = 0, $ssize = 0, $tmp1 = 0, $tmp2 = 0, $tmp_ptr = 0, $x = 0, $x1 = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 165760|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 165624|0;
 $pnum1 = sp + 165496|0;
 $paddr = sp + 1072|0;
 $paddr1 = sp + 560|0;
 $paddr2 = sp + 48|0;
 $pptr = sp + 1608|0;
 $pat = sp + 34416|0;
 $fin = sp + 34384|0;
 $oldins = sp + 34380|0;
 $0 = $in;
 $1 = $out;
 $pat_max = 0;
 $refmax = 0;
 $NOP = 0;
 $ssize = 0;
 $FLAG = 1;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$pnum1; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($pptr|0),0,16384)|0;
 _memset(($pat|0),0,131072)|0;
 dest=$fin; stop=dest+31|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$oldins>>0]=0|0;HEAP8[$oldins+1>>0]=0|0;HEAP8[$oldins+2>>0]=0|0;HEAP8[$oldins+3>>0]=0|0;
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr1|0),0,512)|0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(128);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($paddr2) + ($4<<2)|0);
  HEAP32[$5>>2] = 9999;
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = $1;
 (_pw_write_zero($8,20)|0);
 $9 = $0;
 (_fseek(($9|0),4460,0)|0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(31);
  $12 = $1;
  if (!($11)) {
   break;
  }
  (_pw_write_zero($12,22)|0);
  $13 = $1;
  $14 = $0;
  $15 = (_read16b($14)|0);
  $16 = $15&65535;
  $size = $16;
  $17 = $16&65535;
  _write16b($13,$17);
  $18 = $size;
  $19 = $18<<1;
  $20 = $ssize;
  $21 = (($20) + ($19))|0;
  $ssize = $21;
  $22 = $1;
  $23 = $0;
  $24 = (_read8($23)|0);
  $25 = $i;
  $26 = (($fin) + ($25)|0);
  HEAP8[$26>>0] = $24;
  _write8($22,$24);
  $27 = $1;
  $28 = $0;
  $29 = (_read8($28)|0);
  _write8($27,$29);
  $30 = $1;
  $31 = $0;
  $32 = (_read16b($31)|0);
  _write16b($30,$32);
  $33 = $1;
  $34 = $0;
  $35 = (_read16b($34)|0);
  _write16b($33,$35);
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $0;
 $39 = (_read16b($38)|0);
 $40 = $39&65535;
 $41 = (($40|0) / 4)&-1;
 $42 = $41&255;
 $NOP = $42;
 _write8($12,$42);
 $43 = $1;
 _write8($43,127);
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(128);
  if (!($45)) {
   break;
  }
  $46 = $0;
  $47 = (_read32b($46)|0);
  $48 = $i;
  $49 = (($paddr) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $NOP;
  $54 = $53&255;
  $55 = ($52|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $i;
  $57 = ($56|0)==(0);
  if ($57) {
   HEAP8[$pnum>>0] = 0;
   $58 = $tmp_ptr;
   $59 = (($58) + 1)|0;
   $tmp_ptr = $59;
  } else {
   $j = 0;
   while(1) {
    $60 = $j;
    $61 = $i;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break;
    }
    $63 = $i;
    $64 = (($paddr) + ($63<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $j;
    $67 = (($paddr) + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($65|0)==($68|0);
    $70 = $j;
    if ($69) {
     label = 17;
     break;
    }
    $75 = (($70) + 1)|0;
    $j = $75;
   }
   if ((label|0) == 17) {
    label = 0;
    $71 = (($pnum) + ($70)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $i;
    $74 = (($pnum) + ($73)|0);
    HEAP8[$74>>0] = $72;
   }
   $76 = $j;
   $77 = $i;
   $78 = ($76|0)==($77|0);
   if ($78) {
    $79 = $tmp_ptr;
    $80 = (($79) + 1)|0;
    $tmp_ptr = $80;
    $81 = $79&255;
    $82 = $i;
    $83 = (($pnum) + ($82)|0);
    HEAP8[$83>>0] = $81;
   }
  }
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $86 = $tmp_ptr;
 $87 = (($86) - 1)|0;
 $88 = $87&65535;
 $pat_max = $88;
 $i = 0;
 while(1) {
  $89 = $i;
  $90 = $NOP;
  $91 = $90&255;
  $92 = ($89|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $i;
  $94 = (($paddr) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $i;
  $97 = (($paddr1) + ($96<<2)|0);
  HEAP32[$97>>2] = $95;
  $98 = $i;
  $99 = (($98) + 1)|0;
  $i = $99;
 }
 L32: while(1) {
  $i = 0;
  L34: while(1) {
   $100 = $i;
   $101 = $NOP;
   $102 = $101&255;
   $103 = ($100|0)<($102|0);
   if (!($103)) {
    break L32;
   }
   $j = 0;
   while(1) {
    $104 = $j;
    $105 = $i;
    $106 = ($104|0)<($105|0);
    $107 = $i;
    if (!($106)) {
     break;
    }
    $108 = (($paddr1) + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $j;
    $111 = (($paddr1) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($109|0)<($112|0);
    $114 = $j;
    if ($113) {
     break L34;
    }
    $138 = (($114) + 1)|0;
    $j = $138;
   }
   $139 = (($107) + 1)|0;
   $i = $139;
  }
  $115 = (($pnum) + ($114)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  $tmp2 = $117;
  $118 = $i;
  $119 = (($pnum) + ($118)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $j;
  $122 = (($pnum) + ($121)|0);
  HEAP8[$122>>0] = $120;
  $123 = $tmp2;
  $124 = $123&255;
  $125 = $i;
  $126 = (($pnum) + ($125)|0);
  HEAP8[$126>>0] = $124;
  $127 = $j;
  $128 = (($paddr1) + ($127<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  $tmp1 = $129;
  $130 = $i;
  $131 = (($paddr1) + ($130<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $j;
  $134 = (($paddr1) + ($133<<2)|0);
  HEAP32[$134>>2] = $132;
  $135 = $tmp1;
  $136 = $i;
  $137 = (($paddr1) + ($136<<2)|0);
  HEAP32[$137>>2] = $135;
 }
 $i = 0;
 $j = 0;
 while(1) {
  $140 = $i;
  $141 = $NOP;
  $142 = $141&255;
  $143 = ($140|0)<($142|0);
  if (!($143)) {
   break;
  }
  $144 = $i;
  $145 = ($144|0)==(0);
  $146 = $i;
  $147 = (($paddr1) + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $j;
  $150 = (($paddr2) + ($149<<2)|0);
  if ($145) {
   HEAP32[$150>>2] = $148;
  } else {
   $151 = HEAP32[$150>>2]|0;
   $152 = ($148|0)==($151|0);
   if (!($152)) {
    $153 = $i;
    $154 = (($paddr1) + ($153<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $j;
    $157 = (($156) + 1)|0;
    $j = $157;
    $158 = (($paddr2) + ($157<<2)|0);
    HEAP32[$158>>2] = $155;
   }
  }
  $159 = $i;
  $160 = (($159) + 1)|0;
  $i = $160;
 }
 $c1 = 0;
 while(1) {
  $161 = $c1;
  $162 = $161&255;
  $163 = $NOP;
  $164 = $163&255;
  $165 = ($162|0)<($164|0);
  if (!($165)) {
   break;
  }
  $c2 = 0;
  while(1) {
   $166 = $c2;
   $167 = $166&255;
   $168 = $NOP;
   $169 = $168&255;
   $170 = ($167|0)<($169|0);
   $171 = $c1;
   if (!($170)) {
    break;
   }
   $172 = $171&255;
   $173 = (($paddr) + ($172<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $c2;
   $176 = $175&255;
   $177 = (($paddr2) + ($176<<2)|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($174|0)==($178|0);
   if ($179) {
    $180 = $c2;
    $181 = $c1;
    $182 = $181&255;
    $183 = (($pnum1) + ($182)|0);
    HEAP8[$183>>0] = $180;
   }
   $184 = $c2;
   $185 = (($184) + 1)<<24>>24;
   $c2 = $185;
  }
  $186 = (($171) + 1)<<24>>24;
  $c1 = $186;
 }
 $i = 0;
 while(1) {
  $187 = $i;
  $188 = $NOP;
  $189 = $188&255;
  $190 = ($187|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $i;
  $192 = (($pnum1) + ($191)|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $i;
  $195 = (($pnum) + ($194)|0);
  HEAP8[$195>>0] = $193;
  $196 = $i;
  $197 = (($196) + 1)|0;
  $i = $197;
 }
 $c1 = 0;
 while(1) {
  $198 = $c1;
  $199 = $198&255;
  $200 = ($199|0)<(128);
  if (!($200)) {
   break;
  }
  $201 = $c1;
  $202 = $201&255;
  $203 = (($pnum) + ($202)|0);
  $204 = $1;
  (_fwrite(($203|0),1,1,($204|0))|0);
  $205 = $c1;
  $206 = (($205) + 1)<<24>>24;
  $c1 = $206;
 }
 $207 = $1;
 _write32b($207,1294879534);
 $208 = $0;
 (_fseek(($208|0),4456,0)|0);
 $209 = $0;
 $210 = (_read32b($209)|0);
 $psize = $210;
 $211 = $0;
 (_fseek(($211|0),5222,0)|0);
 $j = 0;
 while(1) {
  $212 = $j;
  $213 = $psize;
  $214 = ($212|0)<($213|0);
  if (!($214)) {
   break;
  }
  $215 = $0;
  $216 = (_read16b($215)|0);
  $217 = $216&65535;
  $x = $217;
  $218 = $refmax;
  $219 = $218 << 16 >> 16;
  $220 = ($217|0)>($219|0);
  if ($220) {
   $221 = $x;
   $222 = $221&65535;
   $refmax = $222;
  }
  $223 = $j;
  $224 = (($223) + 2)|0;
  $j = $224;
 }
 $225 = $refmax;
 $226 = $225 << 16 >> 16;
 $227 = (($226) + 1)|0;
 $228 = $227&65535;
 $refmax = $228;
 $229 = $refmax;
 $230 = $229 << 16 >> 16;
 $231 = $230<<2;
 $i = $231;
 $232 = $i;
 $233 = (_malloc($232)|0);
 $reftab = $233;
 $234 = $reftab;
 $235 = $i;
 $236 = $0;
 (_fread(($234|0),($235|0),1,($236|0))|0);
 $237 = $0;
 (_fseek(($237|0),5222,0)|0);
 $j = 0;
 $k = 0;
 while(1) {
  $238 = $j;
  $239 = $pat_max;
  $240 = $239 << 16 >> 16;
  $241 = ($238|0)<=($240|0);
  if (!($241)) {
   break;
  }
  $i = 0;
  while(1) {
   $242 = $i;
   $243 = ($242|0)<(64);
   if (!($243)) {
    break;
   }
   $244 = $i;
   $245 = $244<<4;
   $y = $245;
   $246 = $0;
   $247 = (_read16b($246)|0);
   $248 = $247&65535;
   $x1 = $248;
   $249 = $k;
   $250 = (($249) + 2)|0;
   $k = $250;
   $251 = $x1;
   $252 = $251<<2;
   $253 = $reftab;
   $254 = (($253) + ($252)|0);
   $255 = HEAP8[$254>>0]|0;
   $256 = $y;
   $257 = (($256) + 0)|0;
   $258 = $j;
   $259 = (($pat) + ($258<<10)|0);
   $260 = (($259) + ($257)|0);
   HEAP8[$260>>0] = $255;
   $261 = $x1;
   $262 = $261<<2;
   $263 = (($262) + 1)|0;
   $264 = $reftab;
   $265 = (($264) + ($263)|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $y;
   $268 = (($267) + 1)|0;
   $269 = $j;
   $270 = (($pat) + ($269<<10)|0);
   $271 = (($270) + ($268)|0);
   HEAP8[$271>>0] = $266;
   $272 = $x1;
   $273 = $272<<2;
   $274 = (($273) + 2)|0;
   $275 = $reftab;
   $276 = (($275) + ($274)|0);
   $277 = HEAP8[$276>>0]|0;
   $278 = $y;
   $279 = (($278) + 2)|0;
   $280 = $j;
   $281 = (($pat) + ($280<<10)|0);
   $282 = (($281) + ($279)|0);
   HEAP8[$282>>0] = $277;
   $283 = $x1;
   $284 = $283<<2;
   $285 = (($284) + 3)|0;
   $286 = $reftab;
   $287 = (($286) + ($285)|0);
   $288 = HEAP8[$287>>0]|0;
   $289 = $y;
   $290 = (($289) + 3)|0;
   $291 = $j;
   $292 = (($pat) + ($291<<10)|0);
   $293 = (($292) + ($290)|0);
   HEAP8[$293>>0] = $288;
   $294 = $y;
   $295 = (($294) + 2)|0;
   $296 = $j;
   $297 = (($pat) + ($296<<10)|0);
   $298 = (($297) + ($295)|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = $300 >> 4;
   $302 = $301 & 15;
   $303 = $y;
   $304 = $j;
   $305 = (($pat) + ($304<<10)|0);
   $306 = (($305) + ($303)|0);
   $307 = HEAP8[$306>>0]|0;
   $308 = $307&255;
   $309 = $308 & 240;
   $310 = $302 | $309;
   $311 = $310&255;
   $c3 = $311;
   $312 = $c3;
   $313 = $312&255;
   $314 = ($313|0)!=(0);
   if ($314) {
    $315 = $c3;
    HEAP8[$oldins>>0] = $315;
   }
   $316 = $y;
   $317 = $j;
   $318 = (($pat) + ($317<<10)|0);
   $319 = (($318) + ($316)|0);
   $320 = HEAP8[$319>>0]|0;
   $321 = $320&255;
   $322 = $321 & 15;
   $323 = $322 << 8;
   $324 = $y;
   $325 = (($324) + 1)|0;
   $326 = $j;
   $327 = (($pat) + ($326<<10)|0);
   $328 = (($327) + ($325)|0);
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = (($323) + ($330))|0;
   $332 = $331&65535;
   $per = $332;
   $333 = $per;
   $334 = $333 << 16 >> 16;
   $335 = ($334|0)!=(0);
   L88: do {
    if ($335) {
     $336 = HEAP8[$oldins>>0]|0;
     $337 = $336&255;
     $338 = (($337) - 1)|0;
     $339 = (($fin) + ($338)|0);
     $340 = HEAP8[$339>>0]|0;
     $341 = $340&255;
     $342 = ($341|0)!=(0);
     if ($342) {
      $l = 0;
      while(1) {
       $343 = $l;
       $344 = ($343|0)<(36);
       if (!($344)) {
        break L88;
       }
       $345 = $l;
       $346 = HEAP8[$oldins>>0]|0;
       $347 = $346&255;
       $348 = (($347) - 1)|0;
       $349 = (($fin) + ($348)|0);
       $350 = HEAP8[$349>>0]|0;
       $351 = $350&255;
       $352 = (8320 + (($351*72)|0)|0);
       $353 = (($352) + ($345<<1)|0);
       $354 = HEAP16[$353>>1]|0;
       $355 = $354 << 16 >> 16;
       $356 = $per;
       $357 = $356 << 16 >> 16;
       $358 = ($355|0)==($357|0);
       if ($358) {
        break;
       }
       $390 = $l;
       $391 = (($390) + 1)|0;
       $l = $391;
      }
      $359 = $y;
      $360 = $j;
      $361 = (($pat) + ($360<<10)|0);
      $362 = (($361) + ($359)|0);
      $363 = HEAP8[$362>>0]|0;
      $364 = $363&255;
      $365 = $364 & 240;
      $366 = $365&255;
      HEAP8[$362>>0] = $366;
      $367 = $l;
      $368 = (($367) + 1)|0;
      $369 = (8240 + ($368<<1)|0);
      $370 = HEAP8[$369>>0]|0;
      $371 = $370&255;
      $372 = $y;
      $373 = $j;
      $374 = (($pat) + ($373<<10)|0);
      $375 = (($374) + ($372)|0);
      $376 = HEAP8[$375>>0]|0;
      $377 = $376&255;
      $378 = $377 | $371;
      $379 = $378&255;
      HEAP8[$375>>0] = $379;
      $380 = $l;
      $381 = (($380) + 1)|0;
      $382 = (8240 + ($381<<1)|0);
      $383 = ((($382)) + 1|0);
      $384 = HEAP8[$383>>0]|0;
      $385 = $y;
      $386 = (($385) + 1)|0;
      $387 = $j;
      $388 = (($pat) + ($387<<10)|0);
      $389 = (($388) + ($386)|0);
      HEAP8[$389>>0] = $384;
     }
    }
   } while(0);
   $392 = $y;
   $393 = (($392) + 2)|0;
   $394 = $j;
   $395 = (($pat) + ($394<<10)|0);
   $396 = (($395) + ($393)|0);
   $397 = HEAP8[$396>>0]|0;
   $398 = $397&255;
   $399 = $398 & 15;
   $400 = ($399|0)==(13);
   if ($400) {
    label = 74;
   } else {
    $401 = $y;
    $402 = (($401) + 2)|0;
    $403 = $j;
    $404 = (($pat) + ($403<<10)|0);
    $405 = (($404) + ($402)|0);
    $406 = HEAP8[$405>>0]|0;
    $407 = $406&255;
    $408 = $407 & 15;
    $409 = ($408|0)==(11);
    if ($409) {
     label = 74;
    }
   }
   if ((label|0) == 74) {
    label = 0;
    $FLAG = 0;
   }
   $410 = $0;
   $411 = (_read16b($410)|0);
   $412 = $411&65535;
   $x1 = $412;
   $413 = $k;
   $414 = (($413) + 2)|0;
   $k = $414;
   $415 = $x1;
   $416 = $415<<2;
   $417 = $reftab;
   $418 = (($417) + ($416)|0);
   $419 = HEAP8[$418>>0]|0;
   $420 = $y;
   $421 = (($420) + 4)|0;
   $422 = $j;
   $423 = (($pat) + ($422<<10)|0);
   $424 = (($423) + ($421)|0);
   HEAP8[$424>>0] = $419;
   $425 = $x1;
   $426 = $425<<2;
   $427 = (($426) + 1)|0;
   $428 = $reftab;
   $429 = (($428) + ($427)|0);
   $430 = HEAP8[$429>>0]|0;
   $431 = $y;
   $432 = (($431) + 5)|0;
   $433 = $j;
   $434 = (($pat) + ($433<<10)|0);
   $435 = (($434) + ($432)|0);
   HEAP8[$435>>0] = $430;
   $436 = $x1;
   $437 = $436<<2;
   $438 = (($437) + 2)|0;
   $439 = $reftab;
   $440 = (($439) + ($438)|0);
   $441 = HEAP8[$440>>0]|0;
   $442 = $y;
   $443 = (($442) + 6)|0;
   $444 = $j;
   $445 = (($pat) + ($444<<10)|0);
   $446 = (($445) + ($443)|0);
   HEAP8[$446>>0] = $441;
   $447 = $x1;
   $448 = $447<<2;
   $449 = (($448) + 3)|0;
   $450 = $reftab;
   $451 = (($450) + ($449)|0);
   $452 = HEAP8[$451>>0]|0;
   $453 = $y;
   $454 = (($453) + 7)|0;
   $455 = $j;
   $456 = (($pat) + ($455<<10)|0);
   $457 = (($456) + ($454)|0);
   HEAP8[$457>>0] = $452;
   $458 = $y;
   $459 = (($458) + 6)|0;
   $460 = $j;
   $461 = (($pat) + ($460<<10)|0);
   $462 = (($461) + ($459)|0);
   $463 = HEAP8[$462>>0]|0;
   $464 = $463&255;
   $465 = $464 >> 4;
   $466 = $465 & 15;
   $467 = $y;
   $468 = (($467) + 4)|0;
   $469 = $j;
   $470 = (($pat) + ($469<<10)|0);
   $471 = (($470) + ($468)|0);
   $472 = HEAP8[$471>>0]|0;
   $473 = $472&255;
   $474 = $473 & 240;
   $475 = $466 | $474;
   $476 = $475&255;
   $c3 = $476;
   $477 = $c3;
   $478 = $477&255;
   $479 = ($478|0)!=(0);
   if ($479) {
    $480 = $c3;
    $481 = ((($oldins)) + 1|0);
    HEAP8[$481>>0] = $480;
   }
   $482 = $y;
   $483 = (($482) + 4)|0;
   $484 = $j;
   $485 = (($pat) + ($484<<10)|0);
   $486 = (($485) + ($483)|0);
   $487 = HEAP8[$486>>0]|0;
   $488 = $487&255;
   $489 = $488 & 15;
   $490 = $489 << 8;
   $491 = $y;
   $492 = (($491) + 5)|0;
   $493 = $j;
   $494 = (($pat) + ($493<<10)|0);
   $495 = (($494) + ($492)|0);
   $496 = HEAP8[$495>>0]|0;
   $497 = $496&255;
   $498 = (($490) + ($497))|0;
   $499 = $498&65535;
   $per = $499;
   $500 = $per;
   $501 = $500 << 16 >> 16;
   $502 = ($501|0)!=(0);
   L105: do {
    if ($502) {
     $503 = ((($oldins)) + 1|0);
     $504 = HEAP8[$503>>0]|0;
     $505 = $504&255;
     $506 = (($505) - 1)|0;
     $507 = (($fin) + ($506)|0);
     $508 = HEAP8[$507>>0]|0;
     $509 = $508&255;
     $510 = ($509|0)!=(0);
     if ($510) {
      $l = 0;
      while(1) {
       $511 = $l;
       $512 = ($511|0)<(36);
       if (!($512)) {
        break L105;
       }
       $513 = $l;
       $514 = ((($oldins)) + 1|0);
       $515 = HEAP8[$514>>0]|0;
       $516 = $515&255;
       $517 = (($516) - 1)|0;
       $518 = (($fin) + ($517)|0);
       $519 = HEAP8[$518>>0]|0;
       $520 = $519&255;
       $521 = (8320 + (($520*72)|0)|0);
       $522 = (($521) + ($513<<1)|0);
       $523 = HEAP16[$522>>1]|0;
       $524 = $523 << 16 >> 16;
       $525 = $per;
       $526 = $525 << 16 >> 16;
       $527 = ($524|0)==($526|0);
       if ($527) {
        break;
       }
       $561 = $l;
       $562 = (($561) + 1)|0;
       $l = $562;
      }
      $528 = $y;
      $529 = (($528) + 4)|0;
      $530 = $j;
      $531 = (($pat) + ($530<<10)|0);
      $532 = (($531) + ($529)|0);
      $533 = HEAP8[$532>>0]|0;
      $534 = $533&255;
      $535 = $534 & 240;
      $536 = $535&255;
      HEAP8[$532>>0] = $536;
      $537 = $l;
      $538 = (($537) + 1)|0;
      $539 = (8240 + ($538<<1)|0);
      $540 = HEAP8[$539>>0]|0;
      $541 = $540&255;
      $542 = $y;
      $543 = (($542) + 4)|0;
      $544 = $j;
      $545 = (($pat) + ($544<<10)|0);
      $546 = (($545) + ($543)|0);
      $547 = HEAP8[$546>>0]|0;
      $548 = $547&255;
      $549 = $548 | $541;
      $550 = $549&255;
      HEAP8[$546>>0] = $550;
      $551 = $l;
      $552 = (($551) + 1)|0;
      $553 = (8240 + ($552<<1)|0);
      $554 = ((($553)) + 1|0);
      $555 = HEAP8[$554>>0]|0;
      $556 = $y;
      $557 = (($556) + 5)|0;
      $558 = $j;
      $559 = (($pat) + ($558<<10)|0);
      $560 = (($559) + ($557)|0);
      HEAP8[$560>>0] = $555;
     }
    }
   } while(0);
   $563 = $y;
   $564 = (($563) + 6)|0;
   $565 = $j;
   $566 = (($pat) + ($565<<10)|0);
   $567 = (($566) + ($564)|0);
   $568 = HEAP8[$567>>0]|0;
   $569 = $568&255;
   $570 = $569 & 15;
   $571 = ($570|0)==(13);
   if ($571) {
    label = 86;
   } else {
    $572 = $y;
    $573 = (($572) + 6)|0;
    $574 = $j;
    $575 = (($pat) + ($574<<10)|0);
    $576 = (($575) + ($573)|0);
    $577 = HEAP8[$576>>0]|0;
    $578 = $577&255;
    $579 = $578 & 15;
    $580 = ($579|0)==(11);
    if ($580) {
     label = 86;
    }
   }
   if ((label|0) == 86) {
    label = 0;
    $FLAG = 0;
   }
   $581 = $0;
   $582 = (_read16b($581)|0);
   $583 = $582&65535;
   $x1 = $583;
   $584 = $k;
   $585 = (($584) + 2)|0;
   $k = $585;
   $586 = $x1;
   $587 = $586<<2;
   $588 = $reftab;
   $589 = (($588) + ($587)|0);
   $590 = HEAP8[$589>>0]|0;
   $591 = $y;
   $592 = (($591) + 8)|0;
   $593 = $j;
   $594 = (($pat) + ($593<<10)|0);
   $595 = (($594) + ($592)|0);
   HEAP8[$595>>0] = $590;
   $596 = $x1;
   $597 = $596<<2;
   $598 = (($597) + 1)|0;
   $599 = $reftab;
   $600 = (($599) + ($598)|0);
   $601 = HEAP8[$600>>0]|0;
   $602 = $y;
   $603 = (($602) + 9)|0;
   $604 = $j;
   $605 = (($pat) + ($604<<10)|0);
   $606 = (($605) + ($603)|0);
   HEAP8[$606>>0] = $601;
   $607 = $x1;
   $608 = $607<<2;
   $609 = (($608) + 2)|0;
   $610 = $reftab;
   $611 = (($610) + ($609)|0);
   $612 = HEAP8[$611>>0]|0;
   $613 = $y;
   $614 = (($613) + 10)|0;
   $615 = $j;
   $616 = (($pat) + ($615<<10)|0);
   $617 = (($616) + ($614)|0);
   HEAP8[$617>>0] = $612;
   $618 = $x1;
   $619 = $618<<2;
   $620 = (($619) + 3)|0;
   $621 = $reftab;
   $622 = (($621) + ($620)|0);
   $623 = HEAP8[$622>>0]|0;
   $624 = $y;
   $625 = (($624) + 11)|0;
   $626 = $j;
   $627 = (($pat) + ($626<<10)|0);
   $628 = (($627) + ($625)|0);
   HEAP8[$628>>0] = $623;
   $629 = $y;
   $630 = (($629) + 10)|0;
   $631 = $j;
   $632 = (($pat) + ($631<<10)|0);
   $633 = (($632) + ($630)|0);
   $634 = HEAP8[$633>>0]|0;
   $635 = $634&255;
   $636 = $635 >> 4;
   $637 = $636 & 15;
   $638 = $y;
   $639 = (($638) + 8)|0;
   $640 = $j;
   $641 = (($pat) + ($640<<10)|0);
   $642 = (($641) + ($639)|0);
   $643 = HEAP8[$642>>0]|0;
   $644 = $643&255;
   $645 = $644 & 240;
   $646 = $637 | $645;
   $647 = $646&255;
   $c3 = $647;
   $648 = $c3;
   $649 = $648&255;
   $650 = ($649|0)!=(0);
   if ($650) {
    $651 = $c3;
    $652 = ((($oldins)) + 2|0);
    HEAP8[$652>>0] = $651;
   }
   $653 = $y;
   $654 = (($653) + 8)|0;
   $655 = $j;
   $656 = (($pat) + ($655<<10)|0);
   $657 = (($656) + ($654)|0);
   $658 = HEAP8[$657>>0]|0;
   $659 = $658&255;
   $660 = $659 & 15;
   $661 = $660 << 8;
   $662 = $y;
   $663 = (($662) + 9)|0;
   $664 = $j;
   $665 = (($pat) + ($664<<10)|0);
   $666 = (($665) + ($663)|0);
   $667 = HEAP8[$666>>0]|0;
   $668 = $667&255;
   $669 = (($661) + ($668))|0;
   $670 = $669&65535;
   $per = $670;
   $671 = $per;
   $672 = $671 << 16 >> 16;
   $673 = ($672|0)!=(0);
   L122: do {
    if ($673) {
     $674 = ((($oldins)) + 2|0);
     $675 = HEAP8[$674>>0]|0;
     $676 = $675&255;
     $677 = (($676) - 1)|0;
     $678 = (($fin) + ($677)|0);
     $679 = HEAP8[$678>>0]|0;
     $680 = $679&255;
     $681 = ($680|0)!=(0);
     if ($681) {
      $l = 0;
      while(1) {
       $682 = $l;
       $683 = ($682|0)<(36);
       if (!($683)) {
        break L122;
       }
       $684 = $l;
       $685 = ((($oldins)) + 2|0);
       $686 = HEAP8[$685>>0]|0;
       $687 = $686&255;
       $688 = (($687) - 1)|0;
       $689 = (($fin) + ($688)|0);
       $690 = HEAP8[$689>>0]|0;
       $691 = $690&255;
       $692 = (8320 + (($691*72)|0)|0);
       $693 = (($692) + ($684<<1)|0);
       $694 = HEAP16[$693>>1]|0;
       $695 = $694 << 16 >> 16;
       $696 = $per;
       $697 = $696 << 16 >> 16;
       $698 = ($695|0)==($697|0);
       if ($698) {
        break;
       }
       $732 = $l;
       $733 = (($732) + 1)|0;
       $l = $733;
      }
      $699 = $y;
      $700 = (($699) + 8)|0;
      $701 = $j;
      $702 = (($pat) + ($701<<10)|0);
      $703 = (($702) + ($700)|0);
      $704 = HEAP8[$703>>0]|0;
      $705 = $704&255;
      $706 = $705 & 240;
      $707 = $706&255;
      HEAP8[$703>>0] = $707;
      $708 = $l;
      $709 = (($708) + 1)|0;
      $710 = (8240 + ($709<<1)|0);
      $711 = HEAP8[$710>>0]|0;
      $712 = $711&255;
      $713 = $y;
      $714 = (($713) + 8)|0;
      $715 = $j;
      $716 = (($pat) + ($715<<10)|0);
      $717 = (($716) + ($714)|0);
      $718 = HEAP8[$717>>0]|0;
      $719 = $718&255;
      $720 = $719 | $712;
      $721 = $720&255;
      HEAP8[$717>>0] = $721;
      $722 = $l;
      $723 = (($722) + 1)|0;
      $724 = (8240 + ($723<<1)|0);
      $725 = ((($724)) + 1|0);
      $726 = HEAP8[$725>>0]|0;
      $727 = $y;
      $728 = (($727) + 9)|0;
      $729 = $j;
      $730 = (($pat) + ($729<<10)|0);
      $731 = (($730) + ($728)|0);
      HEAP8[$731>>0] = $726;
     }
    }
   } while(0);
   $734 = $y;
   $735 = (($734) + 10)|0;
   $736 = $j;
   $737 = (($pat) + ($736<<10)|0);
   $738 = (($737) + ($735)|0);
   $739 = HEAP8[$738>>0]|0;
   $740 = $739&255;
   $741 = $740 & 15;
   $742 = ($741|0)==(13);
   if ($742) {
    label = 98;
   } else {
    $743 = $y;
    $744 = (($743) + 10)|0;
    $745 = $j;
    $746 = (($pat) + ($745<<10)|0);
    $747 = (($746) + ($744)|0);
    $748 = HEAP8[$747>>0]|0;
    $749 = $748&255;
    $750 = $749 & 15;
    $751 = ($750|0)==(11);
    if ($751) {
     label = 98;
    }
   }
   if ((label|0) == 98) {
    label = 0;
    $FLAG = 0;
   }
   $752 = $0;
   $753 = (_read16b($752)|0);
   $754 = $753&65535;
   $x1 = $754;
   $755 = $k;
   $756 = (($755) + 2)|0;
   $k = $756;
   $757 = $x1;
   $758 = $757<<2;
   $759 = $reftab;
   $760 = (($759) + ($758)|0);
   $761 = HEAP8[$760>>0]|0;
   $762 = $y;
   $763 = (($762) + 12)|0;
   $764 = $j;
   $765 = (($pat) + ($764<<10)|0);
   $766 = (($765) + ($763)|0);
   HEAP8[$766>>0] = $761;
   $767 = $x1;
   $768 = $767<<2;
   $769 = (($768) + 1)|0;
   $770 = $reftab;
   $771 = (($770) + ($769)|0);
   $772 = HEAP8[$771>>0]|0;
   $773 = $y;
   $774 = (($773) + 13)|0;
   $775 = $j;
   $776 = (($pat) + ($775<<10)|0);
   $777 = (($776) + ($774)|0);
   HEAP8[$777>>0] = $772;
   $778 = $x1;
   $779 = $778<<2;
   $780 = (($779) + 2)|0;
   $781 = $reftab;
   $782 = (($781) + ($780)|0);
   $783 = HEAP8[$782>>0]|0;
   $784 = $y;
   $785 = (($784) + 14)|0;
   $786 = $j;
   $787 = (($pat) + ($786<<10)|0);
   $788 = (($787) + ($785)|0);
   HEAP8[$788>>0] = $783;
   $789 = $x1;
   $790 = $789<<2;
   $791 = (($790) + 3)|0;
   $792 = $reftab;
   $793 = (($792) + ($791)|0);
   $794 = HEAP8[$793>>0]|0;
   $795 = $y;
   $796 = (($795) + 15)|0;
   $797 = $j;
   $798 = (($pat) + ($797<<10)|0);
   $799 = (($798) + ($796)|0);
   HEAP8[$799>>0] = $794;
   $800 = $y;
   $801 = (($800) + 14)|0;
   $802 = $j;
   $803 = (($pat) + ($802<<10)|0);
   $804 = (($803) + ($801)|0);
   $805 = HEAP8[$804>>0]|0;
   $806 = $805&255;
   $807 = $806 >> 4;
   $808 = $807 & 15;
   $809 = $y;
   $810 = (($809) + 12)|0;
   $811 = $j;
   $812 = (($pat) + ($811<<10)|0);
   $813 = (($812) + ($810)|0);
   $814 = HEAP8[$813>>0]|0;
   $815 = $814&255;
   $816 = $815 & 240;
   $817 = $808 | $816;
   $818 = $817&255;
   $c3 = $818;
   $819 = $c3;
   $820 = $819&255;
   $821 = ($820|0)!=(0);
   if ($821) {
    $822 = $c3;
    $823 = ((($oldins)) + 3|0);
    HEAP8[$823>>0] = $822;
   }
   $824 = $y;
   $825 = (($824) + 12)|0;
   $826 = $j;
   $827 = (($pat) + ($826<<10)|0);
   $828 = (($827) + ($825)|0);
   $829 = HEAP8[$828>>0]|0;
   $830 = $829&255;
   $831 = $830 & 15;
   $832 = $831 << 8;
   $833 = $y;
   $834 = (($833) + 13)|0;
   $835 = $j;
   $836 = (($pat) + ($835<<10)|0);
   $837 = (($836) + ($834)|0);
   $838 = HEAP8[$837>>0]|0;
   $839 = $838&255;
   $840 = (($832) + ($839))|0;
   $841 = $840&65535;
   $per = $841;
   $842 = $per;
   $843 = $842 << 16 >> 16;
   $844 = ($843|0)!=(0);
   L139: do {
    if ($844) {
     $845 = ((($oldins)) + 3|0);
     $846 = HEAP8[$845>>0]|0;
     $847 = $846&255;
     $848 = (($847) - 1)|0;
     $849 = (($fin) + ($848)|0);
     $850 = HEAP8[$849>>0]|0;
     $851 = $850&255;
     $852 = ($851|0)!=(0);
     if ($852) {
      $l = 0;
      while(1) {
       $853 = $l;
       $854 = ($853|0)<(36);
       if (!($854)) {
        break L139;
       }
       $855 = $l;
       $856 = ((($oldins)) + 3|0);
       $857 = HEAP8[$856>>0]|0;
       $858 = $857&255;
       $859 = (($858) - 1)|0;
       $860 = (($fin) + ($859)|0);
       $861 = HEAP8[$860>>0]|0;
       $862 = $861&255;
       $863 = (8320 + (($862*72)|0)|0);
       $864 = (($863) + ($855<<1)|0);
       $865 = HEAP16[$864>>1]|0;
       $866 = $865 << 16 >> 16;
       $867 = $per;
       $868 = $867 << 16 >> 16;
       $869 = ($866|0)==($868|0);
       if ($869) {
        break;
       }
       $903 = $l;
       $904 = (($903) + 1)|0;
       $l = $904;
      }
      $870 = $y;
      $871 = (($870) + 12)|0;
      $872 = $j;
      $873 = (($pat) + ($872<<10)|0);
      $874 = (($873) + ($871)|0);
      $875 = HEAP8[$874>>0]|0;
      $876 = $875&255;
      $877 = $876 & 240;
      $878 = $877&255;
      HEAP8[$874>>0] = $878;
      $879 = $l;
      $880 = (($879) + 1)|0;
      $881 = (8240 + ($880<<1)|0);
      $882 = HEAP8[$881>>0]|0;
      $883 = $882&255;
      $884 = $y;
      $885 = (($884) + 12)|0;
      $886 = $j;
      $887 = (($pat) + ($886<<10)|0);
      $888 = (($887) + ($885)|0);
      $889 = HEAP8[$888>>0]|0;
      $890 = $889&255;
      $891 = $890 | $883;
      $892 = $891&255;
      HEAP8[$888>>0] = $892;
      $893 = $l;
      $894 = (($893) + 1)|0;
      $895 = (8240 + ($894<<1)|0);
      $896 = ((($895)) + 1|0);
      $897 = HEAP8[$896>>0]|0;
      $898 = $y;
      $899 = (($898) + 13)|0;
      $900 = $j;
      $901 = (($pat) + ($900<<10)|0);
      $902 = (($901) + ($899)|0);
      HEAP8[$902>>0] = $897;
     }
    }
   } while(0);
   $905 = $y;
   $906 = (($905) + 14)|0;
   $907 = $j;
   $908 = (($pat) + ($907<<10)|0);
   $909 = (($908) + ($906)|0);
   $910 = HEAP8[$909>>0]|0;
   $911 = $910&255;
   $912 = $911 & 15;
   $913 = ($912|0)==(13);
   if ($913) {
    label = 110;
   } else {
    $914 = $y;
    $915 = (($914) + 14)|0;
    $916 = $j;
    $917 = (($pat) + ($916<<10)|0);
    $918 = (($917) + ($915)|0);
    $919 = HEAP8[$918>>0]|0;
    $920 = $919&255;
    $921 = $920 & 15;
    $922 = ($921|0)==(11);
    if ($922) {
     label = 110;
    }
   }
   if ((label|0) == 110) {
    label = 0;
    $FLAG = 0;
   }
   $923 = $FLAG;
   $924 = $923&255;
   $925 = ($924|0)==(0);
   if ($925) {
    label = 112;
    break;
   }
   $926 = $i;
   $927 = (($926) + 1)|0;
   $i = $927;
  }
  if ((label|0) == 112) {
   label = 0;
   $FLAG = 1;
  }
  $928 = $j;
  $929 = (($pat) + ($928<<10)|0);
  $930 = $1;
  (_fwrite(($929|0),1024,1,($930|0))|0);
  $931 = $j;
  $932 = (($931) + 1)|0;
  $j = $932;
 }
 $933 = $reftab;
 _free($933);
 $934 = $0;
 (_fseek(($934|0),4452,0)|0);
 $935 = $0;
 $936 = (_read32b($935)|0);
 $SDAV = $936;
 $937 = $0;
 $938 = $SDAV;
 $939 = (4456 + ($938))|0;
 (_fseek(($937|0),($939|0),0)|0);
 $940 = $1;
 $941 = $0;
 $942 = $ssize;
 (_pw_move_data($940,$941,$942)|0);
 STACKTOP = sp;return 0;
}
function _test_p18a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $i = 0;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(22);
 if ($5) {
  $6 = $3;
  $7 = (22 - ($6))|0;
  $0 = $7;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 $8 = $i;
 $9 = $1;
 $10 = (($9) + ($8)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)!=(96);
 if (!($13)) {
  $14 = $i;
  $15 = (($14) + 1)|0;
  $16 = $1;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)!=(56);
  if (!($20)) {
   $21 = $i;
   $22 = (($21) + 2)|0;
   $23 = $1;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = ($26|0)!=(96);
   if (!($27)) {
    $28 = $i;
    $29 = (($28) + 3)|0;
    $30 = $1;
    $31 = (($30) + ($29)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($33|0)!=(0);
    if (!($34)) {
     $35 = $i;
     $36 = (($35) + 4)|0;
     $37 = $1;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)!=(0);
     if (!($41)) {
      $42 = $i;
      $43 = (($42) + 5)|0;
      $44 = $1;
      $45 = (($44) + ($43)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = $46&255;
      $48 = ($47|0)!=(160);
      if (!($48)) {
       $49 = $i;
       $50 = (($49) + 6)|0;
       $51 = $1;
       $52 = (($51) + ($50)|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $53&255;
       $55 = ($54|0)!=(96);
       if (!($55)) {
        $56 = $i;
        $57 = (($56) + 7)|0;
        $58 = $1;
        $59 = (($58) + ($57)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60&255;
        $62 = ($61|0)!=(0);
        if (!($62)) {
         $63 = $i;
         $64 = (($63) + 8)|0;
         $65 = $1;
         $66 = (($65) + ($64)|0);
         $67 = HEAP8[$66>>0]|0;
         $68 = $67&255;
         $69 = ($68|0)!=(1);
         if (!($69)) {
          $70 = $i;
          $71 = (($70) + 9)|0;
          $72 = $1;
          $73 = (($72) + ($71)|0);
          $74 = HEAP8[$73>>0]|0;
          $75 = $74&255;
          $76 = ($75|0)!=(62);
          if (!($76)) {
           $77 = $i;
           $78 = (($77) + 10)|0;
           $79 = $1;
           $80 = (($79) + ($78)|0);
           $81 = HEAP8[$80>>0]|0;
           $82 = $81&255;
           $83 = ($82|0)!=(96);
           if (!($83)) {
            $84 = $i;
            $85 = (($84) + 11)|0;
            $86 = $1;
            $87 = (($86) + ($85)|0);
            $88 = HEAP8[$87>>0]|0;
            $89 = $88&255;
            $90 = ($89|0)!=(0);
            if (!($90)) {
             $91 = $i;
             $92 = (($91) + 12)|0;
             $93 = $1;
             $94 = (($93) + ($92)|0);
             $95 = HEAP8[$94>>0]|0;
             $96 = $95&255;
             $97 = ($96|0)!=(1);
             if (!($97)) {
              $98 = $i;
              $99 = (($98) + 13)|0;
              $100 = $1;
              $101 = (($100) + ($99)|0);
              $102 = HEAP8[$101>>0]|0;
              $103 = $102&255;
              $104 = ($103|0)!=(12);
              if (!($104)) {
               $105 = $i;
               $106 = (($105) + 14)|0;
               $107 = $1;
               $108 = (($107) + ($106)|0);
               $109 = HEAP8[$108>>0]|0;
               $110 = $109&255;
               $111 = ($110|0)!=(72);
               if (!($111)) {
                $112 = $i;
                $113 = (($112) + 15)|0;
                $114 = $1;
                $115 = (($114) + ($113)|0);
                $116 = HEAP8[$115>>0]|0;
                $117 = $116&255;
                $118 = ($117|0)!=(231);
                if (!($118)) {
                 $119 = $start;
                 $120 = (($119) + 21)|0;
                 $121 = $1;
                 $122 = (($121) + ($120)|0);
                 $123 = HEAP8[$122>>0]|0;
                 $124 = $123&255;
                 $125 = ($124|0)!=(210);
                 if ($125) {
                  $0 = -1;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 }
                 $126 = $3;
                 $127 = ($126|0)<(4460);
                 if ($127) {
                  $128 = $3;
                  $129 = (4460 - ($128))|0;
                  $0 = $129;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 }
                 $130 = $1;
                 $131 = $start;
                 $132 = (($130) + ($131)|0);
                 $133 = ((($132)) + 4456|0);
                 $134 = (_readmem32b($133)|0);
                 $j = $134;
                 $135 = $3;
                 $136 = ($135|0)<(4714);
                 if ($136) {
                  $137 = $3;
                  $138 = (4714 - ($137))|0;
                  $0 = $138;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 }
                 $139 = $1;
                 $140 = $start;
                 $141 = (($139) + ($140)|0);
                 $142 = ((($141)) + 4712|0);
                 $143 = (_readmem16b($142)|0);
                 $144 = $143&65535;
                 $k = $144;
                 $145 = $k;
                 $146 = $145 & 3;
                 $147 = ($146|0)!=(0);
                 if ($147) {
                  $0 = -1;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 }
                 $148 = $start;
                 $149 = (($148) + 36)|0;
                 $150 = $1;
                 $151 = (($150) + ($149)|0);
                 $152 = HEAP8[$151>>0]|0;
                 $153 = $152&255;
                 $154 = ($153|0)!=(17);
                 if ($154) {
                  $0 = -1;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 }
                 $155 = $start;
                 $156 = (($155) + 37)|0;
                 $157 = $1;
                 $158 = (($157) + ($156)|0);
                 $159 = HEAP8[$158>>0]|0;
                 $160 = $159&255;
                 $161 = ($160|0)!=(0);
                 if ($161) {
                  $0 = -1;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 } else {
                  $162 = $2;
                  _pw_read_title(0,$162,0);
                  $0 = 0;
                  $163 = $0;
                  STACKTOP = sp;return ($163|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $0 = -1;
 $163 = $0;
 STACKTOP = sp;return ($163|0);
}
function _depack_p18a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $FLAG = 0, $NOP = 0, $SDAV = 0, $c3 = 0, $fin = 0, $i = 0, $j = 0, $k = 0, $l = 0, $oins = 0, $paddr = 0, $pat = 0, $pat_max = 0, $per = 0, $pnum = 0;
 var $pptr = 0, $psize = 0, $refmax = 0, $reftab = 0, $size = 0, $ssize = 0, $tmp_ptr = 0, $x = 0, $x1 = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 164608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 164472|0;
 $paddr = sp + 48|0;
 $pptr = sp + 584|0;
 $pat = sp + 33392|0;
 $fin = sp + 33360|0;
 $oins = sp + 33356|0;
 $0 = $in;
 $1 = $out;
 $NOP = 0;
 $i = 0;
 $j = 0;
 $k = 0;
 $l = 0;
 $FLAG = 1;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($pptr|0),0,16384)|0;
 _memset(($pat|0),0,131072)|0;
 dest=$fin; stop=dest+31|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$oins>>0]=0|0;HEAP8[$oins+1>>0]=0|0;HEAP8[$oins+2>>0]=0|0;HEAP8[$oins+3>>0]=0|0;
 _memset(($paddr|0),0,512)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 (_fseek(($3|0),4464,0)|0);
 $ssize = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $1;
  if (!($5)) {
   break;
  }
  (_pw_write_zero($6,22)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $1;
  $17 = $0;
  $18 = (_read8($17)|0);
  $19 = $i;
  $20 = (($fin) + ($19)|0);
  HEAP8[$20>>0] = $18;
  _write8($16,$18);
  $21 = $1;
  $22 = $0;
  $23 = (_read8($22)|0);
  _write8($21,$23);
  $24 = $1;
  $25 = $0;
  $26 = (_read16b($25)|0);
  _write16b($24,$26);
  $27 = $1;
  $28 = $0;
  $29 = (_read16b($28)|0);
  _write16b($27,$29);
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 $32 = $0;
 $33 = (_read16b($32)|0);
 $34 = $33&65535;
 $35 = (($34|0) / 4)&-1;
 $36 = $35&255;
 $NOP = $36;
 _write8($6,$36);
 $37 = $1;
 _write8($37,127);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(128);
  if (!($39)) {
   break;
  }
  $40 = $0;
  $41 = (_read32b($40)|0);
  $42 = $i;
  $43 = (($paddr) + ($42<<2)|0);
  HEAP32[$43>>2] = $41;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = $NOP;
  $48 = $47&255;
  $49 = ($46|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = ($50|0)==(0);
  if ($51) {
   HEAP8[$pnum>>0] = 0;
   $52 = $tmp_ptr;
   $53 = (($52) + 1)|0;
   $tmp_ptr = $53;
  } else {
   $j = 0;
   while(1) {
    $54 = $j;
    $55 = $i;
    $56 = ($54|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $i;
    $58 = (($paddr) + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $j;
    $61 = (($paddr) + ($60<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($59|0)==($62|0);
    $64 = $j;
    if ($63) {
     label = 14;
     break;
    }
    $69 = (($64) + 1)|0;
    $j = $69;
   }
   if ((label|0) == 14) {
    label = 0;
    $65 = (($pnum) + ($64)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $i;
    $68 = (($pnum) + ($67)|0);
    HEAP8[$68>>0] = $66;
   }
   $70 = $j;
   $71 = $i;
   $72 = ($70|0)==($71|0);
   if ($72) {
    $73 = $tmp_ptr;
    $74 = (($73) + 1)|0;
    $tmp_ptr = $74;
    $75 = $73&255;
    $76 = $i;
    $77 = (($pnum) + ($76)|0);
    HEAP8[$77>>0] = $75;
   }
  }
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $80 = $tmp_ptr;
 $81 = (($80) - 1)|0;
 $82 = $81&65535;
 $pat_max = $82;
 $83 = $1;
 (_fwrite(($pnum|0),128,1,($83|0))|0);
 $84 = $1;
 _write32b($84,1294879534);
 $85 = $0;
 (_fseek(($85|0),4460,0)|0);
 $86 = $0;
 $87 = (_read32b($86)|0);
 $psize = $87;
 $88 = $0;
 (_fseek(($88|0),5226,0)|0);
 $refmax = 0;
 $j = 0;
 while(1) {
  $89 = $j;
  $90 = $psize;
  $91 = ($89|0)<($90|0);
  if (!($91)) {
   break;
  }
  $92 = $0;
  $93 = (_read16b($92)|0);
  $94 = $93&65535;
  $x = $94;
  $95 = $x;
  $96 = $refmax;
  $97 = ($95|0)>($96|0);
  if ($97) {
   $98 = $x;
   $refmax = $98;
  }
  $99 = $j;
  $100 = (($99) + 2)|0;
  $j = $100;
 }
 $101 = $refmax;
 $102 = (($101) + 1)|0;
 $refmax = $102;
 $103 = $refmax;
 $104 = $103<<2;
 $i = $104;
 $105 = $i;
 $106 = (_malloc($105)|0);
 $reftab = $106;
 $107 = $reftab;
 $108 = $i;
 $109 = $0;
 (_fread(($107|0),($108|0),1,($109|0))|0);
 $110 = $0;
 (_fseek(($110|0),5226,0)|0);
 $k = 0;
 $j = 0;
 while(1) {
  $111 = $j;
  $112 = $pat_max;
  $113 = $112 << 16 >> 16;
  $114 = ($111|0)<=($113|0);
  if (!($114)) {
   break;
  }
  $115 = $0;
  $116 = $j;
  $117 = (($paddr) + ($116<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 5226)|0;
  (_fseek(($115|0),($119|0),0)|0);
  $i = 0;
  while(1) {
   $120 = $i;
   $121 = ($120|0)<(64);
   if (!($121)) {
    break;
   }
   $122 = $0;
   $123 = (_read16b($122)|0);
   $124 = $123&65535;
   $125 = $124<<2;
   $x1 = $125;
   $126 = $i;
   $127 = $126<<4;
   $y = $127;
   $128 = $k;
   $129 = (($128) + 2)|0;
   $k = $129;
   $130 = $x1;
   $131 = $reftab;
   $132 = (($131) + ($130)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $y;
   $135 = $j;
   $136 = (($pat) + ($135<<10)|0);
   $137 = (($136) + ($134)|0);
   HEAP8[$137>>0] = $133;
   $138 = $x1;
   $139 = (($138) + 1)|0;
   $140 = $reftab;
   $141 = (($140) + ($139)|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $y;
   $144 = (($143) + 1)|0;
   $145 = $j;
   $146 = (($pat) + ($145<<10)|0);
   $147 = (($146) + ($144)|0);
   HEAP8[$147>>0] = $142;
   $148 = $x1;
   $149 = (($148) + 2)|0;
   $150 = $reftab;
   $151 = (($150) + ($149)|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $y;
   $154 = (($153) + 2)|0;
   $155 = $j;
   $156 = (($pat) + ($155<<10)|0);
   $157 = (($156) + ($154)|0);
   HEAP8[$157>>0] = $152;
   $158 = $x1;
   $159 = (($158) + 3)|0;
   $160 = $reftab;
   $161 = (($160) + ($159)|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $y;
   $164 = (($163) + 3)|0;
   $165 = $j;
   $166 = (($pat) + ($165<<10)|0);
   $167 = (($166) + ($164)|0);
   HEAP8[$167>>0] = $162;
   $168 = $y;
   $169 = (($168) + 2)|0;
   $170 = $j;
   $171 = (($pat) + ($170<<10)|0);
   $172 = (($171) + ($169)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $174 >> 4;
   $176 = $175 & 15;
   $177 = $y;
   $178 = $j;
   $179 = (($pat) + ($178<<10)|0);
   $180 = (($179) + ($177)|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = $182 & 240;
   $184 = $176 | $183;
   $185 = $184&255;
   $c3 = $185;
   $186 = $c3;
   $187 = ($186<<24>>24)!=(0);
   if ($187) {
    $188 = $c3;
    HEAP8[$oins>>0] = $188;
   }
   $189 = $y;
   $190 = $j;
   $191 = (($pat) + ($190<<10)|0);
   $192 = (($191) + ($189)|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = $194 & 15;
   $196 = $195 << 8;
   $197 = $y;
   $198 = (($197) + 1)|0;
   $199 = $j;
   $200 = (($pat) + ($199<<10)|0);
   $201 = (($200) + ($198)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = (($196) + ($203))|0;
   $205 = $204&65535;
   $per = $205;
   $206 = $per;
   $207 = $206 << 16 >> 16;
   $208 = ($207|0)!=(0);
   L41: do {
    if ($208) {
     $209 = HEAP8[$oins>>0]|0;
     $210 = $209&255;
     $211 = (($210) - 1)|0;
     $212 = (($fin) + ($211)|0);
     $213 = HEAP8[$212>>0]|0;
     $214 = $213&255;
     $215 = ($214|0)!=(0);
     if ($215) {
      $l = 0;
      while(1) {
       $216 = $l;
       $217 = ($216|0)<(36);
       if (!($217)) {
        break L41;
       }
       $218 = $l;
       $219 = HEAP8[$oins>>0]|0;
       $220 = $219&255;
       $221 = (($220) - 1)|0;
       $222 = (($fin) + ($221)|0);
       $223 = HEAP8[$222>>0]|0;
       $224 = $223&255;
       $225 = (8320 + (($224*72)|0)|0);
       $226 = (($225) + ($218<<1)|0);
       $227 = HEAP16[$226>>1]|0;
       $228 = $227 << 16 >> 16;
       $229 = $per;
       $230 = $229 << 16 >> 16;
       $231 = ($228|0)==($230|0);
       if ($231) {
        break;
       }
       $263 = $l;
       $264 = (($263) + 1)|0;
       $l = $264;
      }
      $232 = $y;
      $233 = $j;
      $234 = (($pat) + ($233<<10)|0);
      $235 = (($234) + ($232)|0);
      $236 = HEAP8[$235>>0]|0;
      $237 = $236&255;
      $238 = $237 & 240;
      $239 = $238&255;
      HEAP8[$235>>0] = $239;
      $240 = $l;
      $241 = (($240) + 1)|0;
      $242 = (8240 + ($241<<1)|0);
      $243 = HEAP8[$242>>0]|0;
      $244 = $243&255;
      $245 = $y;
      $246 = $j;
      $247 = (($pat) + ($246<<10)|0);
      $248 = (($247) + ($245)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = $249&255;
      $251 = $250 | $244;
      $252 = $251&255;
      HEAP8[$248>>0] = $252;
      $253 = $l;
      $254 = (($253) + 1)|0;
      $255 = (8240 + ($254<<1)|0);
      $256 = ((($255)) + 1|0);
      $257 = HEAP8[$256>>0]|0;
      $258 = $y;
      $259 = (($258) + 1)|0;
      $260 = $j;
      $261 = (($pat) + ($260<<10)|0);
      $262 = (($261) + ($259)|0);
      HEAP8[$262>>0] = $257;
     }
    }
   } while(0);
   $265 = $y;
   $266 = (($265) + 2)|0;
   $267 = $j;
   $268 = (($pat) + ($267<<10)|0);
   $269 = (($268) + ($266)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = $270&255;
   $272 = $271 & 15;
   $273 = ($272|0)==(13);
   if ($273) {
    label = 39;
   } else {
    $274 = $y;
    $275 = (($274) + 2)|0;
    $276 = $j;
    $277 = (($pat) + ($276<<10)|0);
    $278 = (($277) + ($275)|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = $280 & 15;
    $282 = ($281|0)==(11);
    if ($282) {
     label = 39;
    }
   }
   if ((label|0) == 39) {
    label = 0;
    $FLAG = 0;
   }
   $283 = $0;
   $284 = (_read16b($283)|0);
   $285 = $284&65535;
   $286 = $285<<2;
   $x1 = $286;
   $287 = $k;
   $288 = (($287) + 2)|0;
   $k = $288;
   $289 = $x1;
   $290 = $reftab;
   $291 = (($290) + ($289)|0);
   $292 = HEAP8[$291>>0]|0;
   $293 = $y;
   $294 = (($293) + 4)|0;
   $295 = $j;
   $296 = (($pat) + ($295<<10)|0);
   $297 = (($296) + ($294)|0);
   HEAP8[$297>>0] = $292;
   $298 = $x1;
   $299 = (($298) + 1)|0;
   $300 = $reftab;
   $301 = (($300) + ($299)|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $y;
   $304 = (($303) + 5)|0;
   $305 = $j;
   $306 = (($pat) + ($305<<10)|0);
   $307 = (($306) + ($304)|0);
   HEAP8[$307>>0] = $302;
   $308 = $x1;
   $309 = (($308) + 2)|0;
   $310 = $reftab;
   $311 = (($310) + ($309)|0);
   $312 = HEAP8[$311>>0]|0;
   $313 = $y;
   $314 = (($313) + 6)|0;
   $315 = $j;
   $316 = (($pat) + ($315<<10)|0);
   $317 = (($316) + ($314)|0);
   HEAP8[$317>>0] = $312;
   $318 = $x1;
   $319 = (($318) + 3)|0;
   $320 = $reftab;
   $321 = (($320) + ($319)|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $y;
   $324 = (($323) + 7)|0;
   $325 = $j;
   $326 = (($pat) + ($325<<10)|0);
   $327 = (($326) + ($324)|0);
   HEAP8[$327>>0] = $322;
   $328 = $y;
   $329 = (($328) + 6)|0;
   $330 = $j;
   $331 = (($pat) + ($330<<10)|0);
   $332 = (($331) + ($329)|0);
   $333 = HEAP8[$332>>0]|0;
   $334 = $333&255;
   $335 = $334 >> 4;
   $336 = $335 & 15;
   $337 = $y;
   $338 = (($337) + 4)|0;
   $339 = $j;
   $340 = (($pat) + ($339<<10)|0);
   $341 = (($340) + ($338)|0);
   $342 = HEAP8[$341>>0]|0;
   $343 = $342&255;
   $344 = $343 & 240;
   $345 = $336 | $344;
   $346 = $345&255;
   $c3 = $346;
   $347 = $c3;
   $348 = ($347<<24>>24)!=(0);
   if ($348) {
    $349 = $c3;
    $350 = ((($oins)) + 1|0);
    HEAP8[$350>>0] = $349;
   }
   $351 = $y;
   $352 = (($351) + 4)|0;
   $353 = $j;
   $354 = (($pat) + ($353<<10)|0);
   $355 = (($354) + ($352)|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356&255;
   $358 = $357 & 15;
   $359 = $358 << 8;
   $360 = $y;
   $361 = (($360) + 5)|0;
   $362 = $j;
   $363 = (($pat) + ($362<<10)|0);
   $364 = (($363) + ($361)|0);
   $365 = HEAP8[$364>>0]|0;
   $366 = $365&255;
   $367 = (($359) + ($366))|0;
   $368 = $367&65535;
   $per = $368;
   $369 = $per;
   $370 = $369 << 16 >> 16;
   $371 = ($370|0)!=(0);
   L58: do {
    if ($371) {
     $372 = ((($oins)) + 1|0);
     $373 = HEAP8[$372>>0]|0;
     $374 = $373&255;
     $375 = (($374) - 1)|0;
     $376 = (($fin) + ($375)|0);
     $377 = HEAP8[$376>>0]|0;
     $378 = $377&255;
     $379 = ($378|0)!=(0);
     if ($379) {
      $l = 0;
      while(1) {
       $380 = $l;
       $381 = ($380|0)<(36);
       if (!($381)) {
        break L58;
       }
       $382 = $l;
       $383 = ((($oins)) + 1|0);
       $384 = HEAP8[$383>>0]|0;
       $385 = $384&255;
       $386 = (($385) - 1)|0;
       $387 = (($fin) + ($386)|0);
       $388 = HEAP8[$387>>0]|0;
       $389 = $388&255;
       $390 = (8320 + (($389*72)|0)|0);
       $391 = (($390) + ($382<<1)|0);
       $392 = HEAP16[$391>>1]|0;
       $393 = $392 << 16 >> 16;
       $394 = $per;
       $395 = $394 << 16 >> 16;
       $396 = ($393|0)==($395|0);
       if ($396) {
        break;
       }
       $430 = $l;
       $431 = (($430) + 1)|0;
       $l = $431;
      }
      $397 = $y;
      $398 = (($397) + 4)|0;
      $399 = $j;
      $400 = (($pat) + ($399<<10)|0);
      $401 = (($400) + ($398)|0);
      $402 = HEAP8[$401>>0]|0;
      $403 = $402&255;
      $404 = $403 & 240;
      $405 = $404&255;
      HEAP8[$401>>0] = $405;
      $406 = $l;
      $407 = (($406) + 1)|0;
      $408 = (8240 + ($407<<1)|0);
      $409 = HEAP8[$408>>0]|0;
      $410 = $409&255;
      $411 = $y;
      $412 = (($411) + 4)|0;
      $413 = $j;
      $414 = (($pat) + ($413<<10)|0);
      $415 = (($414) + ($412)|0);
      $416 = HEAP8[$415>>0]|0;
      $417 = $416&255;
      $418 = $417 | $410;
      $419 = $418&255;
      HEAP8[$415>>0] = $419;
      $420 = $l;
      $421 = (($420) + 1)|0;
      $422 = (8240 + ($421<<1)|0);
      $423 = ((($422)) + 1|0);
      $424 = HEAP8[$423>>0]|0;
      $425 = $y;
      $426 = (($425) + 5)|0;
      $427 = $j;
      $428 = (($pat) + ($427<<10)|0);
      $429 = (($428) + ($426)|0);
      HEAP8[$429>>0] = $424;
     }
    }
   } while(0);
   $432 = $y;
   $433 = (($432) + 6)|0;
   $434 = $j;
   $435 = (($pat) + ($434<<10)|0);
   $436 = (($435) + ($433)|0);
   $437 = HEAP8[$436>>0]|0;
   $438 = $437&255;
   $439 = $438 & 15;
   $440 = ($439|0)==(13);
   if ($440) {
    label = 51;
   } else {
    $441 = $y;
    $442 = (($441) + 6)|0;
    $443 = $j;
    $444 = (($pat) + ($443<<10)|0);
    $445 = (($444) + ($442)|0);
    $446 = HEAP8[$445>>0]|0;
    $447 = $446&255;
    $448 = $447 & 15;
    $449 = ($448|0)==(11);
    if ($449) {
     label = 51;
    }
   }
   if ((label|0) == 51) {
    label = 0;
    $FLAG = 0;
   }
   $450 = $0;
   $451 = (_read16b($450)|0);
   $452 = $451&65535;
   $453 = $452<<2;
   $x1 = $453;
   $454 = $k;
   $455 = (($454) + 2)|0;
   $k = $455;
   $456 = $x1;
   $457 = $reftab;
   $458 = (($457) + ($456)|0);
   $459 = HEAP8[$458>>0]|0;
   $460 = $y;
   $461 = (($460) + 8)|0;
   $462 = $j;
   $463 = (($pat) + ($462<<10)|0);
   $464 = (($463) + ($461)|0);
   HEAP8[$464>>0] = $459;
   $465 = $x1;
   $466 = (($465) + 1)|0;
   $467 = $reftab;
   $468 = (($467) + ($466)|0);
   $469 = HEAP8[$468>>0]|0;
   $470 = $y;
   $471 = (($470) + 9)|0;
   $472 = $j;
   $473 = (($pat) + ($472<<10)|0);
   $474 = (($473) + ($471)|0);
   HEAP8[$474>>0] = $469;
   $475 = $x1;
   $476 = (($475) + 2)|0;
   $477 = $reftab;
   $478 = (($477) + ($476)|0);
   $479 = HEAP8[$478>>0]|0;
   $480 = $y;
   $481 = (($480) + 10)|0;
   $482 = $j;
   $483 = (($pat) + ($482<<10)|0);
   $484 = (($483) + ($481)|0);
   HEAP8[$484>>0] = $479;
   $485 = $x1;
   $486 = (($485) + 3)|0;
   $487 = $reftab;
   $488 = (($487) + ($486)|0);
   $489 = HEAP8[$488>>0]|0;
   $490 = $y;
   $491 = (($490) + 11)|0;
   $492 = $j;
   $493 = (($pat) + ($492<<10)|0);
   $494 = (($493) + ($491)|0);
   HEAP8[$494>>0] = $489;
   $495 = $y;
   $496 = (($495) + 10)|0;
   $497 = $j;
   $498 = (($pat) + ($497<<10)|0);
   $499 = (($498) + ($496)|0);
   $500 = HEAP8[$499>>0]|0;
   $501 = $500&255;
   $502 = $501 >> 4;
   $503 = $502 & 15;
   $504 = $y;
   $505 = (($504) + 8)|0;
   $506 = $j;
   $507 = (($pat) + ($506<<10)|0);
   $508 = (($507) + ($505)|0);
   $509 = HEAP8[$508>>0]|0;
   $510 = $509&255;
   $511 = $510 & 240;
   $512 = $503 | $511;
   $513 = $512&255;
   $c3 = $513;
   $514 = $c3;
   $515 = ($514<<24>>24)!=(0);
   if ($515) {
    $516 = $c3;
    $517 = ((($oins)) + 2|0);
    HEAP8[$517>>0] = $516;
   }
   $518 = $y;
   $519 = (($518) + 8)|0;
   $520 = $j;
   $521 = (($pat) + ($520<<10)|0);
   $522 = (($521) + ($519)|0);
   $523 = HEAP8[$522>>0]|0;
   $524 = $523&255;
   $525 = $524 & 15;
   $526 = $525 << 8;
   $527 = $y;
   $528 = (($527) + 9)|0;
   $529 = $j;
   $530 = (($pat) + ($529<<10)|0);
   $531 = (($530) + ($528)|0);
   $532 = HEAP8[$531>>0]|0;
   $533 = $532&255;
   $534 = (($526) + ($533))|0;
   $535 = $534&65535;
   $per = $535;
   $536 = $per;
   $537 = $536 << 16 >> 16;
   $538 = ($537|0)!=(0);
   L75: do {
    if ($538) {
     $539 = ((($oins)) + 2|0);
     $540 = HEAP8[$539>>0]|0;
     $541 = $540&255;
     $542 = (($541) - 1)|0;
     $543 = (($fin) + ($542)|0);
     $544 = HEAP8[$543>>0]|0;
     $545 = $544&255;
     $546 = ($545|0)!=(0);
     if ($546) {
      $l = 0;
      while(1) {
       $547 = $l;
       $548 = ($547|0)<(36);
       if (!($548)) {
        break L75;
       }
       $549 = $l;
       $550 = ((($oins)) + 2|0);
       $551 = HEAP8[$550>>0]|0;
       $552 = $551&255;
       $553 = (($552) - 1)|0;
       $554 = (($fin) + ($553)|0);
       $555 = HEAP8[$554>>0]|0;
       $556 = $555&255;
       $557 = (8320 + (($556*72)|0)|0);
       $558 = (($557) + ($549<<1)|0);
       $559 = HEAP16[$558>>1]|0;
       $560 = $559 << 16 >> 16;
       $561 = $per;
       $562 = $561 << 16 >> 16;
       $563 = ($560|0)==($562|0);
       if ($563) {
        break;
       }
       $597 = $l;
       $598 = (($597) + 1)|0;
       $l = $598;
      }
      $564 = $y;
      $565 = (($564) + 8)|0;
      $566 = $j;
      $567 = (($pat) + ($566<<10)|0);
      $568 = (($567) + ($565)|0);
      $569 = HEAP8[$568>>0]|0;
      $570 = $569&255;
      $571 = $570 & 240;
      $572 = $571&255;
      HEAP8[$568>>0] = $572;
      $573 = $l;
      $574 = (($573) + 1)|0;
      $575 = (8240 + ($574<<1)|0);
      $576 = HEAP8[$575>>0]|0;
      $577 = $576&255;
      $578 = $y;
      $579 = (($578) + 8)|0;
      $580 = $j;
      $581 = (($pat) + ($580<<10)|0);
      $582 = (($581) + ($579)|0);
      $583 = HEAP8[$582>>0]|0;
      $584 = $583&255;
      $585 = $584 | $577;
      $586 = $585&255;
      HEAP8[$582>>0] = $586;
      $587 = $l;
      $588 = (($587) + 1)|0;
      $589 = (8240 + ($588<<1)|0);
      $590 = ((($589)) + 1|0);
      $591 = HEAP8[$590>>0]|0;
      $592 = $y;
      $593 = (($592) + 9)|0;
      $594 = $j;
      $595 = (($pat) + ($594<<10)|0);
      $596 = (($595) + ($593)|0);
      HEAP8[$596>>0] = $591;
     }
    }
   } while(0);
   $599 = $y;
   $600 = (($599) + 10)|0;
   $601 = $j;
   $602 = (($pat) + ($601<<10)|0);
   $603 = (($602) + ($600)|0);
   $604 = HEAP8[$603>>0]|0;
   $605 = $604&255;
   $606 = $605 & 15;
   $607 = ($606|0)==(13);
   if ($607) {
    label = 63;
   } else {
    $608 = $y;
    $609 = (($608) + 10)|0;
    $610 = $j;
    $611 = (($pat) + ($610<<10)|0);
    $612 = (($611) + ($609)|0);
    $613 = HEAP8[$612>>0]|0;
    $614 = $613&255;
    $615 = $614 & 15;
    $616 = ($615|0)==(11);
    if ($616) {
     label = 63;
    }
   }
   if ((label|0) == 63) {
    label = 0;
    $FLAG = 0;
   }
   $617 = $0;
   $618 = (_read16b($617)|0);
   $619 = $618&65535;
   $620 = $619<<2;
   $x1 = $620;
   $621 = $k;
   $622 = (($621) + 2)|0;
   $k = $622;
   $623 = $x1;
   $624 = $reftab;
   $625 = (($624) + ($623)|0);
   $626 = HEAP8[$625>>0]|0;
   $627 = $y;
   $628 = (($627) + 12)|0;
   $629 = $j;
   $630 = (($pat) + ($629<<10)|0);
   $631 = (($630) + ($628)|0);
   HEAP8[$631>>0] = $626;
   $632 = $x1;
   $633 = (($632) + 1)|0;
   $634 = $reftab;
   $635 = (($634) + ($633)|0);
   $636 = HEAP8[$635>>0]|0;
   $637 = $y;
   $638 = (($637) + 13)|0;
   $639 = $j;
   $640 = (($pat) + ($639<<10)|0);
   $641 = (($640) + ($638)|0);
   HEAP8[$641>>0] = $636;
   $642 = $x1;
   $643 = (($642) + 2)|0;
   $644 = $reftab;
   $645 = (($644) + ($643)|0);
   $646 = HEAP8[$645>>0]|0;
   $647 = $y;
   $648 = (($647) + 14)|0;
   $649 = $j;
   $650 = (($pat) + ($649<<10)|0);
   $651 = (($650) + ($648)|0);
   HEAP8[$651>>0] = $646;
   $652 = $x1;
   $653 = (($652) + 3)|0;
   $654 = $reftab;
   $655 = (($654) + ($653)|0);
   $656 = HEAP8[$655>>0]|0;
   $657 = $y;
   $658 = (($657) + 15)|0;
   $659 = $j;
   $660 = (($pat) + ($659<<10)|0);
   $661 = (($660) + ($658)|0);
   HEAP8[$661>>0] = $656;
   $662 = $y;
   $663 = (($662) + 14)|0;
   $664 = $j;
   $665 = (($pat) + ($664<<10)|0);
   $666 = (($665) + ($663)|0);
   $667 = HEAP8[$666>>0]|0;
   $668 = $667&255;
   $669 = $668 >> 4;
   $670 = $669 & 15;
   $671 = $y;
   $672 = (($671) + 12)|0;
   $673 = $j;
   $674 = (($pat) + ($673<<10)|0);
   $675 = (($674) + ($672)|0);
   $676 = HEAP8[$675>>0]|0;
   $677 = $676&255;
   $678 = $677 & 240;
   $679 = $670 | $678;
   $680 = $679&255;
   $c3 = $680;
   $681 = $c3;
   $682 = $681&255;
   $683 = ($682|0)!=(0);
   if ($683) {
    $684 = $c3;
    $685 = ((($oins)) + 3|0);
    HEAP8[$685>>0] = $684;
   }
   $686 = $y;
   $687 = (($686) + 12)|0;
   $688 = $j;
   $689 = (($pat) + ($688<<10)|0);
   $690 = (($689) + ($687)|0);
   $691 = HEAP8[$690>>0]|0;
   $692 = $691&255;
   $693 = $692 & 15;
   $694 = $693 << 8;
   $695 = $y;
   $696 = (($695) + 13)|0;
   $697 = $j;
   $698 = (($pat) + ($697<<10)|0);
   $699 = (($698) + ($696)|0);
   $700 = HEAP8[$699>>0]|0;
   $701 = $700&255;
   $702 = (($694) + ($701))|0;
   $703 = $702&65535;
   $per = $703;
   $704 = $per;
   $705 = $704 << 16 >> 16;
   $706 = ($705|0)!=(0);
   L92: do {
    if ($706) {
     $707 = ((($oins)) + 3|0);
     $708 = HEAP8[$707>>0]|0;
     $709 = $708&255;
     $710 = (($709) - 1)|0;
     $711 = (($fin) + ($710)|0);
     $712 = HEAP8[$711>>0]|0;
     $713 = $712&255;
     $714 = ($713|0)!=(0);
     if ($714) {
      $l = 0;
      while(1) {
       $715 = $l;
       $716 = ($715|0)<(36);
       if (!($716)) {
        break L92;
       }
       $717 = $l;
       $718 = ((($oins)) + 3|0);
       $719 = HEAP8[$718>>0]|0;
       $720 = $719&255;
       $721 = (($720) - 1)|0;
       $722 = (($fin) + ($721)|0);
       $723 = HEAP8[$722>>0]|0;
       $724 = $723&255;
       $725 = (8320 + (($724*72)|0)|0);
       $726 = (($725) + ($717<<1)|0);
       $727 = HEAP16[$726>>1]|0;
       $728 = $727 << 16 >> 16;
       $729 = $per;
       $730 = $729 << 16 >> 16;
       $731 = ($728|0)==($730|0);
       if ($731) {
        break;
       }
       $765 = $l;
       $766 = (($765) + 1)|0;
       $l = $766;
      }
      $732 = $y;
      $733 = (($732) + 12)|0;
      $734 = $j;
      $735 = (($pat) + ($734<<10)|0);
      $736 = (($735) + ($733)|0);
      $737 = HEAP8[$736>>0]|0;
      $738 = $737&255;
      $739 = $738 & 240;
      $740 = $739&255;
      HEAP8[$736>>0] = $740;
      $741 = $l;
      $742 = (($741) + 1)|0;
      $743 = (8240 + ($742<<1)|0);
      $744 = HEAP8[$743>>0]|0;
      $745 = $744&255;
      $746 = $y;
      $747 = (($746) + 12)|0;
      $748 = $j;
      $749 = (($pat) + ($748<<10)|0);
      $750 = (($749) + ($747)|0);
      $751 = HEAP8[$750>>0]|0;
      $752 = $751&255;
      $753 = $752 | $745;
      $754 = $753&255;
      HEAP8[$750>>0] = $754;
      $755 = $l;
      $756 = (($755) + 1)|0;
      $757 = (8240 + ($756<<1)|0);
      $758 = ((($757)) + 1|0);
      $759 = HEAP8[$758>>0]|0;
      $760 = $y;
      $761 = (($760) + 13)|0;
      $762 = $j;
      $763 = (($pat) + ($762<<10)|0);
      $764 = (($763) + ($761)|0);
      HEAP8[$764>>0] = $759;
     }
    }
   } while(0);
   $767 = $y;
   $768 = (($767) + 14)|0;
   $769 = $j;
   $770 = (($pat) + ($769<<10)|0);
   $771 = (($770) + ($768)|0);
   $772 = HEAP8[$771>>0]|0;
   $773 = $772&255;
   $774 = $773 & 15;
   $775 = ($774|0)==(13);
   if ($775) {
    label = 75;
   } else {
    $776 = $y;
    $777 = (($776) + 14)|0;
    $778 = $j;
    $779 = (($pat) + ($778<<10)|0);
    $780 = (($779) + ($777)|0);
    $781 = HEAP8[$780>>0]|0;
    $782 = $781&255;
    $783 = $782 & 15;
    $784 = ($783|0)==(11);
    if ($784) {
     label = 75;
    }
   }
   if ((label|0) == 75) {
    label = 0;
    $FLAG = 0;
   }
   $785 = $FLAG;
   $786 = $785&255;
   $787 = ($786|0)==(0);
   if ($787) {
    label = 77;
    break;
   }
   $788 = $i;
   $789 = (($788) + 1)|0;
   $i = $789;
  }
  if ((label|0) == 77) {
   label = 0;
   $FLAG = 1;
  }
  $790 = $j;
  $791 = (($pat) + ($790<<10)|0);
  $792 = $1;
  (_fwrite(($791|0),1024,1,($792|0))|0);
  $793 = $j;
  $794 = (($793) + 1)|0;
  $j = $794;
 }
 $795 = $reftab;
 _free($795);
 $796 = $0;
 (_fseek(($796|0),4456,0)|0);
 $797 = $0;
 $798 = (_read32b($797)|0);
 $SDAV = $798;
 $799 = $0;
 $800 = $SDAV;
 $801 = (4460 + ($800))|0;
 (_fseek(($799|0),($801|0),0)|0);
 $802 = $1;
 $803 = $0;
 $804 = $ssize;
 (_pw_move_data($802,$803,$804)|0);
 STACKTOP = sp;return 0;
}
function _test_pha($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0;
 var $or$cond = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(963);
 if ($5) {
  $6 = $3;
  $7 = (963 - ($6))|0;
  $0 = $7;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 $8 = $1;
 $9 = ((($8)) + 10|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(3);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(192);
  if (!($17)) {
   $l = 0;
   $j = 0;
   while(1) {
    $18 = $j;
    $19 = ($18|0)<(31);
    if (!($19)) {
     label = 15;
     break;
    }
    $20 = $1;
    $21 = $start;
    $22 = (($20) + ($21)|0);
    $23 = $j;
    $24 = ($23*14)|0;
    $25 = (($22) + ($24)|0);
    $26 = (_readmem16b($25)|0);
    $27 = $26&65535;
    $28 = $27<<1;
    $n = $28;
    $29 = $n;
    $30 = $l;
    $31 = (($30) + ($29))|0;
    $l = $31;
    $32 = $start;
    $33 = $j;
    $34 = ($33*14)|0;
    $35 = (($32) + ($34))|0;
    $36 = (($35) + 3)|0;
    $37 = $1;
    $38 = (($37) + ($36)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = ($40|0)>(64);
    if ($41) {
     label = 9;
     break;
    }
    $42 = $1;
    $43 = $start;
    $44 = (($42) + ($43)|0);
    $45 = $j;
    $46 = ($45*14)|0;
    $47 = (($44) + ($46)|0);
    $48 = ((($47)) + 4|0);
    $49 = (_readmem16b($48)|0);
    $50 = $49&65535;
    $51 = $50<<1;
    $m = $51;
    $52 = $m;
    $53 = $l;
    $54 = ($52|0)>($53|0);
    if ($54) {
     label = 11;
     break;
    }
    $55 = $1;
    $56 = $start;
    $57 = (($55) + ($56)|0);
    $58 = $j;
    $59 = ($58*14)|0;
    $60 = (($57) + ($59)|0);
    $61 = ((($60)) + 8|0);
    $62 = (_readmem32b($61)|0);
    $k = $62;
    $63 = $k;
    $64 = ($63|0)<(960);
    if ($64) {
     label = 13;
     break;
    }
    $65 = $j;
    $66 = (($65) + 1)|0;
    $j = $66;
   }
   if ((label|0) == 9) {
    $0 = -1;
    $94 = $0;
    STACKTOP = sp;return ($94|0);
   }
   else if ((label|0) == 11) {
    $0 = -1;
    $94 = $0;
    STACKTOP = sp;return ($94|0);
   }
   else if ((label|0) == 13) {
    $0 = -1;
    $94 = $0;
    STACKTOP = sp;return ($94|0);
   }
   else if ((label|0) == 15) {
    $67 = $l;
    $68 = ($67|0)<=(2);
    $69 = $l;
    $70 = ($69|0)>(2031585);
    $or$cond = $68 | $70;
    if ($or$cond) {
     $0 = -1;
     $94 = $0;
     STACKTOP = sp;return ($94|0);
    }
    $71 = $l;
    $72 = (($71) + 960)|0;
    $l = $72;
    $k = 0;
    $j = 0;
    while(1) {
     $73 = $j;
     $74 = ($73|0)<(128);
     if (!($74)) {
      label = 24;
      break;
     }
     $75 = $1;
     $76 = $start;
     $77 = (($75) + ($76)|0);
     $78 = ((($77)) + 448|0);
     $79 = $j;
     $80 = $79<<2;
     $81 = (($78) + ($80)|0);
     $82 = (_readmem32b($81)|0);
     $ssize = $82;
     $83 = $ssize;
     $84 = $k;
     $85 = ($83|0)>($84|0);
     if ($85) {
      $86 = $ssize;
      $k = $86;
     }
     $87 = $ssize;
     $88 = (($87) + 2)|0;
     $89 = $l;
     $90 = ($88|0)<($89|0);
     if ($90) {
      label = 22;
      break;
     }
     $91 = $j;
     $92 = (($91) + 1)|0;
     $j = $92;
    }
    if ((label|0) == 22) {
     $0 = -1;
     $94 = $0;
     STACKTOP = sp;return ($94|0);
    }
    else if ((label|0) == 24) {
     $ssize = 0;
     $93 = $2;
     _pw_read_title(0,$93,0);
     $0 = 0;
     $94 = $0;
     STACKTOP = sp;return ($94|0);
    }
   }
  }
 }
 $0 = -1;
 $94 = $0;
 STACKTOP = sp;return ($94|0);
}
function _depack_pha($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $nop = 0, $note = 0, $npat = 0, $ocpt = 0;
 var $onote = 0, $paddr = 0, $paddr1 = 0, $paddr2 = 0, $pat = 0, $pat_addr = 0, $pdata = 0, $pnum = 0, $pnum1 = 0, $psize = 0, $size = 0, $smp_addr = 0, $ssize = 0, $tmp1 = 0, $tmp2 = 0, $tmp_ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1904|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 1768|0;
 $pnum1 = sp + 1640|0;
 $onote = sp + 1616|0;
 $paddr = sp + 1072|0;
 $paddr1 = sp + 544|0;
 $paddr2 = sp + 32|0;
 $ocpt = sp + 1600|0;
 $0 = $in;
 $1 = $out;
 $npat = 0;
 $ssize = 0;
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr1|0),0,512)|0;
 _memset(($paddr2|0),0,512)|0;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$pnum1; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$onote; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP16[$ocpt>>1]=0|0;HEAP16[$ocpt+2>>1]=0|0;HEAP16[$ocpt+4>>1]=0|0;HEAP16[$ocpt+6>>1]=0|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $1;
  $7 = $0;
  $8 = (_read16b($7)|0);
  $9 = $8&65535;
  $size = $9;
  $10 = $9&65535;
  _write16b($6,$10);
  $11 = $size;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $0;
  (_read8($15)|0);
  $16 = $1;
  _write8($16,0);
  $17 = $1;
  $18 = $0;
  $19 = (_read8($18)|0);
  _write8($17,$19);
  $20 = $1;
  $21 = $0;
  $22 = (_read16b($21)|0);
  _write16b($20,$22);
  $23 = $1;
  $24 = $0;
  $25 = (_read16b($24)|0);
  _write16b($23,$25);
  $26 = $0;
  (_read32b($26)|0);
  $27 = $0;
  $28 = (_read8($27)|0);
  $c1 = $28;
  $29 = $c1;
  $30 = $29&255;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $c1;
   $33 = $32&255;
   $34 = (($33) + 11)|0;
   $35 = $34&255;
   $c1 = $35;
  }
  $36 = $1;
  (_fseek(($36|0),-6,2)|0);
  $37 = $1;
  $38 = $c1;
  _write8($37,$38);
  $39 = $1;
  (_fseek(($39|0),0,2)|0);
  $40 = $0;
  (_fseek(($40|0),1,1)|0);
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $0;
 (_fseek(($43|0),14,1)|0);
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(128);
  if (!($45)) {
   break;
  }
  $46 = $0;
  $47 = (_read32b($46)|0);
  $48 = $i;
  $49 = (($paddr) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = ($52|0)<(128);
  if (!($53)) {
   break;
  }
  $54 = $i;
  $55 = ($54|0)==(0);
  if ($55) {
   HEAP8[$pnum>>0] = 0;
   $56 = $tmp_ptr;
   $57 = (($56) + 1)|0;
   $tmp_ptr = $57;
  } else {
   $j = 0;
   while(1) {
    $58 = $j;
    $59 = $i;
    $60 = ($58|0)<($59|0);
    if (!($60)) {
     break;
    }
    $61 = $i;
    $62 = (($paddr) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $j;
    $65 = (($paddr) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)==($66|0);
    $68 = $j;
    if ($67) {
     label = 16;
     break;
    }
    $73 = (($68) + 1)|0;
    $j = $73;
   }
   if ((label|0) == 16) {
    label = 0;
    $69 = (($pnum) + ($68)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $i;
    $72 = (($pnum) + ($71)|0);
    HEAP8[$72>>0] = $70;
   }
   $74 = $j;
   $75 = $i;
   $76 = ($74|0)==($75|0);
   if ($76) {
    $77 = $tmp_ptr;
    $78 = (($77) + 1)|0;
    $tmp_ptr = $78;
    $79 = $77&255;
    $80 = $i;
    $81 = (($pnum) + ($80)|0);
    HEAP8[$81>>0] = $79;
   }
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = ($84|0)<(128);
  if (!($85)) {
   break;
  }
  $86 = $i;
  $87 = (($paddr) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $i;
  $90 = (($paddr1) + ($89<<2)|0);
  HEAP32[$90>>2] = $88;
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 L31: while(1) {
  $i = 0;
  L33: while(1) {
   $93 = $i;
   $94 = ($93|0)<(128);
   $j = 0;
   if (!($94)) {
    break L31;
   }
   while(1) {
    $95 = $j;
    $96 = $i;
    $97 = ($95|0)<($96|0);
    $98 = $i;
    if (!($97)) {
     break;
    }
    $99 = (($paddr1) + ($98<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $j;
    $102 = (($paddr1) + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($100|0)<($103|0);
    $105 = $j;
    if ($104) {
     break L33;
    }
    $129 = (($105) + 1)|0;
    $j = $129;
   }
   $130 = (($98) + 1)|0;
   $i = $130;
  }
  $106 = (($pnum) + ($105)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $tmp2 = $108;
  $109 = $i;
  $110 = (($pnum) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $j;
  $113 = (($pnum) + ($112)|0);
  HEAP8[$113>>0] = $111;
  $114 = $tmp2;
  $115 = $114&255;
  $116 = $i;
  $117 = (($pnum) + ($116)|0);
  HEAP8[$117>>0] = $115;
  $118 = $j;
  $119 = (($paddr1) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $tmp1 = $120;
  $121 = $i;
  $122 = (($paddr1) + ($121<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $j;
  $125 = (($paddr1) + ($124<<2)|0);
  HEAP32[$125>>2] = $123;
  $126 = $tmp1;
  $127 = $i;
  $128 = (($paddr1) + ($127<<2)|0);
  HEAP32[$128>>2] = $126;
 }
 $i = 0;
 while(1) {
  $131 = $i;
  $132 = ($131|0)<(128);
  if (!($132)) {
   break;
  }
  $133 = $i;
  $134 = ($133|0)==(0);
  $135 = $i;
  $136 = (($paddr1) + ($135<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $j;
  $139 = (($paddr2) + ($138<<2)|0);
  if ($134) {
   HEAP32[$139>>2] = $137;
  } else {
   $140 = HEAP32[$139>>2]|0;
   $141 = ($137|0)==($140|0);
   if (!($141)) {
    $142 = $i;
    $143 = (($paddr1) + ($142<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $j;
    $146 = (($145) + 1)|0;
    $j = $146;
    $147 = (($paddr2) + ($146<<2)|0);
    HEAP32[$147>>2] = $144;
   }
  }
  $148 = $i;
  $149 = (($148) + 1)|0;
  $i = $149;
 }
 _memset(($paddr1|0),0,512)|0;
 $j = 0;
 $150 = HEAP32[$paddr>>2]|0;
 $k = $150;
 $i = 0;
 while(1) {
  $151 = $i;
  $152 = ($151|0)<(120);
  if (!($152)) {
   break;
  }
  $153 = $i;
  $154 = (($paddr2) + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $j;
  $157 = (($paddr1) + ($156<<2)|0);
  HEAP32[$157>>2] = $155;
  $158 = $j;
  $159 = (($158) + 1)|0;
  $j = $159;
  $160 = $i;
  $161 = (($160) + 1)|0;
  $162 = (($paddr2) + ($161<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $i;
  $165 = (($paddr2) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($163) - ($166))|0;
  $168 = ($167|0)>(1024);
  if ($168) {
   $169 = $i;
   $170 = (($paddr2) + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 1024)|0;
   $173 = $j;
   $174 = (($paddr1) + ($173<<2)|0);
   HEAP32[$174>>2] = $172;
   $175 = $j;
   $176 = (($175) + 1)|0;
   $j = $176;
  }
  $177 = $i;
  $178 = (($177) + 1)|0;
  $i = $178;
 }
 $c1 = 0;
 while(1) {
  $179 = $c1;
  $180 = $179&255;
  $181 = ($180|0)<(128);
  if (!($181)) {
   break;
  }
  $c2 = 0;
  while(1) {
   $182 = $c2;
   $183 = $182&255;
   $184 = ($183|0)<(128);
   $185 = $c1;
   if (!($184)) {
    break;
   }
   $186 = $185&255;
   $187 = (($paddr) + ($186<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $c2;
   $190 = $189&255;
   $191 = (($paddr1) + ($190<<2)|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($188|0)==($192|0);
   if ($193) {
    $194 = $c2;
    $195 = $c1;
    $196 = $195&255;
    $197 = (($pnum1) + ($196)|0);
    HEAP8[$197>>0] = $194;
   }
   $198 = $c2;
   $199 = (($198) + 1)<<24>>24;
   $c2 = $199;
  }
  $200 = (($185) + 1)<<24>>24;
  $c1 = $200;
 }
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $pat_addr = 999999;
 $i = 0;
 while(1) {
  $201 = $i;
  $202 = ($201|0)<(128);
  if (!($202)) {
   break;
  }
  $203 = $i;
  $204 = (($pnum1) + ($203)|0);
  $205 = HEAP8[$204>>0]|0;
  $206 = $i;
  $207 = (($pnum) + ($206)|0);
  HEAP8[$207>>0] = $205;
  $208 = $i;
  $209 = (($paddr) + ($208<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $pat_addr;
  $212 = ($210|0)<($211|0);
  if ($212) {
   $213 = $i;
   $214 = (($paddr) + ($213<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $pat_addr = $215;
  }
  $216 = $i;
  $217 = (($216) + 1)|0;
  $i = $217;
 }
 $nop = -128;
 while(1) {
  $218 = $nop;
  $219 = $218&255;
  $220 = ($219|0)>(0);
  if (!($220)) {
   break;
  }
  $221 = $nop;
  $222 = $221&255;
  $223 = (($222) - 1)|0;
  $224 = (($pnum) + ($223)|0);
  $225 = HEAP8[$224>>0]|0;
  $226 = $225&255;
  $227 = ($226|0)!=(0);
  if ($227) {
   break;
  }
  $228 = $nop;
  $229 = (($228) + -1)<<24>>24;
  $nop = $229;
 }
 $230 = $1;
 $231 = $nop;
 _write8($230,$231);
 $i = 0;
 while(1) {
  $232 = $i;
  $233 = $nop;
  $234 = $233&255;
  $235 = ($232|0)<($234|0);
  if (!($235)) {
   break;
  }
  $236 = $i;
  $237 = (($pnum) + ($236)|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = $238&255;
  $240 = $npat;
  $241 = $240&255;
  $242 = ($239|0)>($241|0);
  if ($242) {
   $243 = $i;
   $244 = (($pnum) + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $npat = $245;
  }
  $246 = $i;
  $247 = (($246) + 1)|0;
  $i = $247;
 }
 $248 = $1;
 _write8($248,127);
 $i = 0;
 while(1) {
  $249 = $i;
  $250 = ($249|0)<(128);
  $251 = $1;
  if (!($250)) {
   break;
  }
  $252 = $i;
  $253 = (($pnum) + ($252)|0);
  $254 = HEAP8[$253>>0]|0;
  _write8($251,$254);
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 _write32b($251,1294879534);
 $257 = $0;
 $258 = (_ftell(($257|0))|0);
 $smp_addr = $258;
 $259 = $0;
 $260 = $pat_addr;
 (_fseek(($259|0),($260|0),0)|0);
 $261 = $npat;
 $262 = $261&255;
 $263 = $262<<10;
 $psize = $263;
 $264 = $psize;
 $265 = (_malloc($264)|0);
 $pdata = $265;
 $266 = $pdata;
 $267 = $psize;
 $268 = $0;
 $269 = (_fread(($266|0),1,($267|0),($268|0))|0);
 $psize = $269;
 $270 = $npat;
 $271 = $270&255;
 $272 = (($271) + 1)|0;
 $273 = $272&255;
 $npat = $273;
 $274 = $npat;
 $275 = $274&255;
 $276 = $275<<10;
 $277 = (_malloc($276)|0);
 $pat = $277;
 $278 = $pat;
 $279 = $npat;
 $280 = $279&255;
 $281 = $280<<10;
 _memset(($278|0),0,($281|0))|0;
 $j = 0;
 $i = 0;
 while(1) {
  $282 = $j;
  $283 = $psize;
  $284 = ($282|0)<($283|0);
  if (!($284)) {
   break;
  }
  $285 = $i;
  $286 = $pdata;
  $287 = (($286) + ($285)|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = $288&255;
  $290 = ($289|0)==(255);
  do {
   if ($290) {
    $291 = $i;
    $292 = (($291) + 1)|0;
    $i = $292;
    $293 = $i;
    $294 = $pdata;
    $295 = (($294) + ($293)|0);
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = (255 - ($297))|0;
    $299 = $298&65535;
    $300 = $k;
    $301 = (($300) + 3)|0;
    $302 = (($301|0) % 4)&-1;
    $303 = (($ocpt) + ($302<<1)|0);
    HEAP16[$303>>1] = $299;
   } else {
    $304 = $k;
    $305 = (($304|0) % 4)&-1;
    $306 = (($ocpt) + ($305<<1)|0);
    $307 = HEAP16[$306>>1]|0;
    $308 = $307 << 16 >> 16;
    $309 = ($308|0)!=(0);
    if ($309) {
     $310 = $k;
     $311 = (($310|0) % 4)&-1;
     $312 = (($onote) + ($311<<2)|0);
     $313 = HEAP8[$312>>0]|0;
     $ins = $313;
     $314 = $k;
     $315 = (($314|0) % 4)&-1;
     $316 = (($onote) + ($315<<2)|0);
     $317 = ((($316)) + 1|0);
     $318 = HEAP8[$317>>0]|0;
     $note = $318;
     $319 = $k;
     $320 = (($319|0) % 4)&-1;
     $321 = (($onote) + ($320<<2)|0);
     $322 = ((($321)) + 2|0);
     $323 = HEAP8[$322>>0]|0;
     $fxt = $323;
     $324 = $k;
     $325 = (($324|0) % 4)&-1;
     $326 = (($onote) + ($325<<2)|0);
     $327 = ((($326)) + 3|0);
     $328 = HEAP8[$327>>0]|0;
     $fxp = $328;
     $329 = $k;
     $330 = (($329|0) % 4)&-1;
     $331 = (($ocpt) + ($330<<1)|0);
     $332 = HEAP16[$331>>1]|0;
     $333 = $332 << 16 >> 16;
     $334 = (($333) - 1)|0;
     $335 = $334&65535;
     HEAP16[$331>>1] = $335;
     $336 = $ins;
     $337 = $336&255;
     $338 = $337 & 240;
     $339 = $338&255;
     $340 = $j;
     $341 = $pat;
     $342 = (($341) + ($340)|0);
     HEAP8[$342>>0] = $339;
     $343 = $note;
     $344 = $343&255;
     $345 = (($344|0) / 2)&-1;
     $346 = (8240 + ($345<<1)|0);
     $347 = HEAP8[$346>>0]|0;
     $348 = $347&255;
     $349 = $j;
     $350 = $pat;
     $351 = (($350) + ($349)|0);
     $352 = HEAP8[$351>>0]|0;
     $353 = $352&255;
     $354 = $353 | $348;
     $355 = $354&255;
     HEAP8[$351>>0] = $355;
     $356 = $note;
     $357 = $356&255;
     $358 = (($357|0) / 2)&-1;
     $359 = (8240 + ($358<<1)|0);
     $360 = ((($359)) + 1|0);
     $361 = HEAP8[$360>>0]|0;
     $362 = $j;
     $363 = (($362) + 1)|0;
     $364 = $pat;
     $365 = (($364) + ($363)|0);
     HEAP8[$365>>0] = $361;
     $366 = $ins;
     $367 = $366&255;
     $368 = $367 << 4;
     $369 = $368 & 240;
     $370 = $369&255;
     $371 = $j;
     $372 = (($371) + 2)|0;
     $373 = $pat;
     $374 = (($373) + ($372)|0);
     HEAP8[$374>>0] = $370;
     $375 = $fxt;
     $376 = $375&255;
     $377 = $j;
     $378 = (($377) + 2)|0;
     $379 = $pat;
     $380 = (($379) + ($378)|0);
     $381 = HEAP8[$380>>0]|0;
     $382 = $381&255;
     $383 = $382 | $376;
     $384 = $383&255;
     HEAP8[$380>>0] = $384;
     $385 = $fxp;
     $386 = $j;
     $387 = (($386) + 3)|0;
     $388 = $pat;
     $389 = (($388) + ($387)|0);
     HEAP8[$389>>0] = $385;
     $390 = $k;
     $391 = (($390) + 1)|0;
     $k = $391;
     $392 = $j;
     $393 = (($392) + 4)|0;
     $j = $393;
     $394 = $i;
     $395 = (($394) - 1)|0;
     $i = $395;
     break;
    } else {
     $396 = $i;
     $397 = $pdata;
     $398 = (($397) + ($396)|0);
     $399 = HEAP8[$398>>0]|0;
     $ins = $399;
     $400 = $i;
     $401 = (($400) + 1)|0;
     $402 = $pdata;
     $403 = (($402) + ($401)|0);
     $404 = HEAP8[$403>>0]|0;
     $note = $404;
     $405 = $i;
     $406 = (($405) + 2)|0;
     $407 = $pdata;
     $408 = (($407) + ($406)|0);
     $409 = HEAP8[$408>>0]|0;
     $fxt = $409;
     $410 = $i;
     $411 = (($410) + 3)|0;
     $412 = $pdata;
     $413 = (($412) + ($411)|0);
     $414 = HEAP8[$413>>0]|0;
     $fxp = $414;
     $415 = $ins;
     $416 = $k;
     $417 = (($416|0) % 4)&-1;
     $418 = (($onote) + ($417<<2)|0);
     HEAP8[$418>>0] = $415;
     $419 = $note;
     $420 = $k;
     $421 = (($420|0) % 4)&-1;
     $422 = (($onote) + ($421<<2)|0);
     $423 = ((($422)) + 1|0);
     HEAP8[$423>>0] = $419;
     $424 = $fxt;
     $425 = $k;
     $426 = (($425|0) % 4)&-1;
     $427 = (($onote) + ($426<<2)|0);
     $428 = ((($427)) + 2|0);
     HEAP8[$428>>0] = $424;
     $429 = $fxp;
     $430 = $k;
     $431 = (($430|0) % 4)&-1;
     $432 = (($onote) + ($431<<2)|0);
     $433 = ((($432)) + 3|0);
     HEAP8[$433>>0] = $429;
     $434 = $i;
     $435 = (($434) + 3)|0;
     $i = $435;
     $436 = $ins;
     $437 = $436&255;
     $438 = $437 & 240;
     $439 = $438&255;
     $440 = $j;
     $441 = $pat;
     $442 = (($441) + ($440)|0);
     HEAP8[$442>>0] = $439;
     $443 = $note;
     $444 = $443&255;
     $445 = (($444|0) / 2)&-1;
     $446 = (8240 + ($445<<1)|0);
     $447 = HEAP8[$446>>0]|0;
     $448 = $447&255;
     $449 = $j;
     $450 = $pat;
     $451 = (($450) + ($449)|0);
     $452 = HEAP8[$451>>0]|0;
     $453 = $452&255;
     $454 = $453 | $448;
     $455 = $454&255;
     HEAP8[$451>>0] = $455;
     $456 = $note;
     $457 = $456&255;
     $458 = (($457|0) / 2)&-1;
     $459 = (8240 + ($458<<1)|0);
     $460 = ((($459)) + 1|0);
     $461 = HEAP8[$460>>0]|0;
     $462 = $j;
     $463 = (($462) + 1)|0;
     $464 = $pat;
     $465 = (($464) + ($463)|0);
     HEAP8[$465>>0] = $461;
     $466 = $ins;
     $467 = $466&255;
     $468 = $467 << 4;
     $469 = $468 & 240;
     $470 = $469&255;
     $471 = $j;
     $472 = (($471) + 2)|0;
     $473 = $pat;
     $474 = (($473) + ($472)|0);
     HEAP8[$474>>0] = $470;
     $475 = $fxt;
     $476 = $475&255;
     $477 = $j;
     $478 = (($477) + 2)|0;
     $479 = $pat;
     $480 = (($479) + ($478)|0);
     $481 = HEAP8[$480>>0]|0;
     $482 = $481&255;
     $483 = $482 | $476;
     $484 = $483&255;
     HEAP8[$480>>0] = $484;
     $485 = $fxp;
     $486 = $j;
     $487 = (($486) + 3)|0;
     $488 = $pat;
     $489 = (($488) + ($487)|0);
     HEAP8[$489>>0] = $485;
     $490 = $k;
     $491 = (($490) + 1)|0;
     $k = $491;
     $492 = $j;
     $493 = (($492) + 4)|0;
     $j = $493;
     break;
    }
   }
  } while(0);
  $494 = $i;
  $495 = (($494) + 1)|0;
  $i = $495;
 }
 $496 = $pat;
 $497 = $npat;
 $498 = $497&255;
 $499 = $498<<10;
 $500 = $1;
 (_fwrite(($496|0),($499|0),1,($500|0))|0);
 $501 = $pdata;
 _free($501);
 $502 = $pat;
 _free($502);
 $503 = $0;
 $504 = $smp_addr;
 (_fseek(($503|0),($504|0),0)|0);
 $505 = $1;
 $506 = $0;
 $507 = $ssize;
 (_pw_move_data($505,$506,$507)|0);
 STACKTOP = sp;return 0;
}
function _test_pru1($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1080);
 if ($5) {
  $6 = $3;
  $7 = (1080 - ($6))|0;
  $0 = $7;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1080|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(83);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 1081|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(78);
  if (!($17)) {
   $18 = $1;
   $19 = ((($18)) + 1082|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)!=(84);
   if (!($22)) {
    $23 = $1;
    $24 = ((($23)) + 1083|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($26|0)!=(46);
    if (!($27)) {
     $28 = $start;
     $29 = (($28) + 951)|0;
     $30 = $1;
     $31 = (($30) + ($29)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = ($33|0)!=(127);
     if ($34) {
      $0 = -1;
      $44 = $0;
      STACKTOP = sp;return ($44|0);
     }
     $35 = $start;
     $36 = (($35) + 950)|0;
     $37 = $1;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)>(127);
     if ($41) {
      $0 = -1;
      $44 = $0;
      STACKTOP = sp;return ($44|0);
     } else {
      $42 = $1;
      $43 = $2;
      _pw_read_title($42,$43,20);
      $0 = 0;
      $44 = $0;
      STACKTOP = sp;return ($44|0);
     }
    }
   }
  }
 }
 $0 = -1;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _depack_pru1($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $header = 0, $i = 0, $j = 0, $max = 0, $npat = 0, $ptable = 0, $ssize = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 160|0;
 $ptable = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($header|0),0,2048)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_fread(($header|0),950,1,($2|0))|0);
 $3 = $1;
 (_fwrite(($header|0),950,1,($3|0))|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ($6*30)|0;
  $8 = (($header) + ($7)|0);
  $9 = ((($8)) + 42|0);
  $10 = (_readmem16b($9)|0);
  $11 = $10&65535;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $1;
 $18 = $0;
 $19 = (_read8($18)|0);
 $npat = $19;
 _write8($17,$19);
 _memset(($header|0),0,2048)|0;
 $20 = $0;
 (_fread(($header|0),129,1,($20|0))|0);
 $21 = $1;
 (_fwrite(($header|0),129,1,($21|0))|0);
 $22 = $1;
 _write32b($22,1294879534);
 $max = 0;
 $i = 1;
 while(1) {
  $23 = $i;
  $24 = ($23|0)<(129);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (($header) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $max;
  $30 = $29&255;
  $31 = ($28|0)>($30|0);
  if ($31) {
   $32 = $i;
   $33 = (($header) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $max = $34;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $37 = $0;
 (_fseek(($37|0),1084,0)|0);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $max;
  $40 = $39&255;
  $41 = ($38|0)<=($40|0);
  if (!($41)) {
   break;
  }
  $j = 0;
  while(1) {
   $42 = $j;
   $43 = ($42|0)<(256);
   if (!($43)) {
    break;
   }
   $44 = $0;
   $45 = (_read8($44)|0);
   HEAP8[$header>>0] = $45;
   $46 = $0;
   $47 = (_read8($46)|0);
   $48 = ((($header)) + 1|0);
   HEAP8[$48>>0] = $47;
   $49 = $0;
   $50 = (_read8($49)|0);
   $51 = ((($header)) + 2|0);
   HEAP8[$51>>0] = $50;
   $52 = $0;
   $53 = (_read8($52)|0);
   $54 = ((($header)) + 3|0);
   HEAP8[$54>>0] = $53;
   $55 = HEAP8[$header>>0]|0;
   $56 = $55&255;
   $57 = $56 & 240;
   $58 = $57&255;
   $c1 = $58;
   $59 = HEAP8[$header>>0]|0;
   $60 = $59&255;
   $61 = $60 & 15;
   $62 = $61 << 4;
   $63 = $62&255;
   $c3 = $63;
   $64 = ((($header)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $c3;
   $68 = $67&255;
   $69 = $68 | $66;
   $70 = $69&255;
   $c3 = $70;
   $71 = ((($header)) + 3|0);
   $72 = HEAP8[$71>>0]|0;
   $c4 = $72;
   $73 = ((($header)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = (8240 + ($75<<1)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = $c1;
   $80 = $79&255;
   $81 = $80 | $78;
   $82 = $81&255;
   $c1 = $82;
   $83 = ((($header)) + 1|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (8240 + ($85<<1)|0);
   $87 = ((($86)) + 1|0);
   $88 = HEAP8[$87>>0]|0;
   $c2 = $88;
   $89 = $1;
   $90 = $c1;
   _write8($89,$90);
   $91 = $1;
   $92 = $c2;
   _write8($91,$92);
   $93 = $1;
   $94 = $c3;
   _write8($93,$94);
   $95 = $1;
   $96 = $c4;
   _write8($95,$96);
   $97 = $j;
   $98 = (($97) + 1)|0;
   $j = $98;
  }
  $99 = $i;
  $100 = (($99) + 1)|0;
  $i = $100;
 }
 $101 = $1;
 $102 = $0;
 $103 = $ssize;
 (_pw_move_data($101,$102,$103)|0);
 STACKTOP = sp;return 0;
}
function _test_pru2($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $start = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(260);
 if ($5) {
  $6 = $3;
  $7 = (260 - ($6))|0;
  $0 = $7;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(83);
 if (!($11)) {
  $12 = $1;
  $13 = ((($12)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(78);
  if (!($16)) {
   $17 = $1;
   $18 = ((($17)) + 2|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)!=(84);
   if (!($21)) {
    $22 = $1;
    $23 = ((($22)) + 3|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($25|0)!=(33);
    if (!($26)) {
     $k = 0;
     while(1) {
      $27 = $k;
      $28 = ($27|0)<(31);
      if (!($28)) {
       break;
      }
      $29 = $start;
      $30 = (($29) + 11)|0;
      $31 = $k;
      $32 = $31<<3;
      $33 = (($30) + ($32))|0;
      $34 = $1;
      $35 = (($34) + ($33)|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36&255;
      $38 = ($37|0)>(64);
      if ($38) {
       label = 11;
       break;
      }
      $39 = $k;
      $40 = (($39) + 1)|0;
      $k = $40;
     }
     if ((label|0) == 11) {
      $0 = -1;
      $56 = $0;
      STACKTOP = sp;return ($56|0);
     }
     $k = 0;
     while(1) {
      $41 = $k;
      $42 = ($41|0)<(31);
      if (!($42)) {
       label = 18;
       break;
      }
      $43 = $start;
      $44 = (($43) + 10)|0;
      $45 = $k;
      $46 = $45<<3;
      $47 = (($44) + ($46))|0;
      $48 = $1;
      $49 = (($48) + ($47)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      $52 = ($51|0)>(15);
      if ($52) {
       label = 16;
       break;
      }
      $53 = $k;
      $54 = (($53) + 1)|0;
      $k = $54;
     }
     if ((label|0) == 16) {
      $0 = -1;
      $56 = $0;
      STACKTOP = sp;return ($56|0);
     }
     else if ((label|0) == 18) {
      $55 = $2;
      _pw_read_title(0,$55,0);
      $0 = 0;
      $56 = $0;
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  }
 }
 $0 = -1;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _depack_pru2($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $header = 0, $i = 0, $j = 0, $max = 0, $npat = 0, $ptable = 0;
 var $size = 0, $ssize = 0, $v = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 184|0;
 $ptable = sp + 48|0;
 $v = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $ssize = 0;
 _memset(($header|0),0,2048)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 (_fseek(($3|0),8,0)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $1;
  if (!($5)) {
   break;
  }
  (_pw_write_zero($6,22)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $1;
  $17 = $0;
  $18 = (_read8($17)|0);
  _write8($16,$18);
  $19 = $1;
  $20 = $0;
  $21 = (_read8($20)|0);
  _write8($19,$21);
  $22 = $1;
  $23 = $0;
  $24 = (_read16b($23)|0);
  _write16b($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_read16b($26)|0);
  _write16b($25,$27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = (_read8($30)|0);
 $npat = $31;
 _write8($6,$31);
 $32 = $1;
 $33 = $0;
 $34 = (_read8($33)|0);
 _write8($32,$34);
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ($35|0)<(128);
  $37 = $1;
  if (!($36)) {
   break;
  }
  $38 = $0;
  $39 = (_read8($38)|0);
  $c1 = $39;
  _write8($37,$39);
  $40 = $c1;
  $41 = $40&255;
  $42 = $max;
  $43 = $42&255;
  $44 = ($41|0)>($43|0);
  $45 = $c1;
  $46 = $max;
  $$sink = $44 ? $45 : $46;
  $47 = $$sink&255;
  $48 = $47&255;
  $max = $48;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 _write32b($37,1294879534);
 $51 = $0;
 (_fseek(($51|0),770,0)|0);
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $max;
  $54 = $53&255;
  $55 = ($52|0)<=($54|0);
  if (!($55)) {
   break;
  }
  $j = 0;
  while(1) {
   $56 = $j;
   $57 = ($56|0)<(256);
   if (!($57)) {
    break;
   }
   $c4 = 0;
   $c3 = 0;
   $c2 = 0;
   $c1 = 0;
   $58 = $0;
   $59 = (_read8($58)|0);
   HEAP8[$header>>0] = $59;
   $60 = HEAP8[$header>>0]|0;
   $61 = $60&255;
   $62 = ($61|0)==(128);
   do {
    if ($62) {
     $63 = $1;
     _write32b($63,0);
    } else {
     $64 = HEAP8[$header>>0]|0;
     $65 = $64&255;
     $66 = ($65|0)==(192);
     if ($66) {
      $67 = $1;
      (_fwrite(($v|0),4,1,($67|0))|0);
      $68 = HEAP8[$v>>0]|0;
      $c1 = $68;
      $69 = ((($v)) + 1|0);
      $70 = HEAP8[$69>>0]|0;
      $c2 = $70;
      $71 = ((($v)) + 2|0);
      $72 = HEAP8[$71>>0]|0;
      $c3 = $72;
      $73 = ((($v)) + 3|0);
      $74 = HEAP8[$73>>0]|0;
      $c4 = $74;
      break;
     }
     $75 = HEAP8[$header>>0]|0;
     $76 = $75&255;
     $77 = ($76|0)!=(192);
     if ($77) {
      $78 = HEAP8[$header>>0]|0;
      $79 = $78&255;
      $80 = ($79|0)!=(192);
      if ($80) {
       $81 = $0;
       $82 = (_read8($81)|0);
       $83 = ((($header)) + 1|0);
       HEAP8[$83>>0] = $82;
       $84 = $0;
       $85 = (_read8($84)|0);
       $86 = ((($header)) + 2|0);
       HEAP8[$86>>0] = $85;
       $87 = ((($header)) + 1|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = $88&255;
       $90 = $89 & 128;
       $91 = $90 >> 3;
       $92 = $91&255;
       $c1 = $92;
       $93 = HEAP8[$header>>0]|0;
       $94 = $93&255;
       $95 = $94 >> 1;
       $96 = (8240 + ($95<<1)|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97&255;
       $99 = $c1;
       $100 = $99&255;
       $101 = $100 | $98;
       $102 = $101&255;
       $c1 = $102;
       $103 = HEAP8[$header>>0]|0;
       $104 = $103&255;
       $105 = $104 >> 1;
       $106 = (8240 + ($105<<1)|0);
       $107 = ((($106)) + 1|0);
       $108 = HEAP8[$107>>0]|0;
       $c2 = $108;
       $109 = ((($header)) + 1|0);
       $110 = HEAP8[$109>>0]|0;
       $111 = $110&255;
       $112 = $111 & 112;
       $113 = $112 << 1;
       $114 = $113&255;
       $c3 = $114;
       $115 = HEAP8[$header>>0]|0;
       $116 = $115&255;
       $117 = $116 & 1;
       $118 = $117 << 4;
       $119 = $c3;
       $120 = $119&255;
       $121 = $120 | $118;
       $122 = $121&255;
       $c3 = $122;
       $123 = ((($header)) + 1|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = $125 & 15;
       $127 = $c3;
       $128 = $127&255;
       $129 = $128 | $126;
       $130 = $129&255;
       $c3 = $130;
       $131 = ((($header)) + 2|0);
       $132 = HEAP8[$131>>0]|0;
       $c4 = $132;
       $133 = $1;
       $134 = $c1;
       _write8($133,$134);
       $135 = $1;
       $136 = $c2;
       _write8($135,$136);
       $137 = $1;
       $138 = $c3;
       _write8($137,$138);
       $139 = $1;
       $140 = $c4;
       _write8($139,$140);
      }
     }
    }
   } while(0);
   $141 = ((($v)) + 4|0);
   $142 = HEAP8[$141>>0]|0;
   HEAP8[$v>>0] = $142;
   $143 = ((($v)) + 4|0);
   $144 = ((($143)) + 1|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = ((($v)) + 1|0);
   HEAP8[$146>>0] = $145;
   $147 = ((($v)) + 4|0);
   $148 = ((($147)) + 2|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = ((($v)) + 2|0);
   HEAP8[$150>>0] = $149;
   $151 = ((($v)) + 4|0);
   $152 = ((($151)) + 3|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = ((($v)) + 3|0);
   HEAP8[$154>>0] = $153;
   $155 = ((($v)) + 8|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = ((($v)) + 4|0);
   HEAP8[$157>>0] = $156;
   $158 = ((($v)) + 8|0);
   $159 = ((($158)) + 1|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = ((($v)) + 4|0);
   $162 = ((($161)) + 1|0);
   HEAP8[$162>>0] = $160;
   $163 = ((($v)) + 8|0);
   $164 = ((($163)) + 2|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = ((($v)) + 4|0);
   $167 = ((($166)) + 2|0);
   HEAP8[$167>>0] = $165;
   $168 = ((($v)) + 8|0);
   $169 = ((($168)) + 3|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = ((($v)) + 4|0);
   $172 = ((($171)) + 3|0);
   HEAP8[$172>>0] = $170;
   $173 = ((($v)) + 12|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = ((($v)) + 8|0);
   HEAP8[$175>>0] = $174;
   $176 = ((($v)) + 12|0);
   $177 = ((($176)) + 1|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = ((($v)) + 8|0);
   $180 = ((($179)) + 1|0);
   HEAP8[$180>>0] = $178;
   $181 = ((($v)) + 12|0);
   $182 = ((($181)) + 2|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = ((($v)) + 8|0);
   $185 = ((($184)) + 2|0);
   HEAP8[$185>>0] = $183;
   $186 = ((($v)) + 12|0);
   $187 = ((($186)) + 3|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = ((($v)) + 8|0);
   $190 = ((($189)) + 3|0);
   HEAP8[$190>>0] = $188;
   $191 = $c1;
   $192 = ((($v)) + 12|0);
   HEAP8[$192>>0] = $191;
   $193 = $c2;
   $194 = ((($v)) + 12|0);
   $195 = ((($194)) + 1|0);
   HEAP8[$195>>0] = $193;
   $196 = $c3;
   $197 = ((($v)) + 12|0);
   $198 = ((($197)) + 2|0);
   HEAP8[$198>>0] = $196;
   $199 = $c4;
   $200 = ((($v)) + 12|0);
   $201 = ((($200)) + 3|0);
   HEAP8[$201>>0] = $199;
   $202 = $j;
   $203 = (($202) + 1)|0;
   $j = $203;
  }
  $204 = $i;
  $205 = (($204) + 1)|0;
  $i = $205;
 }
 $206 = $1;
 $207 = $0;
 $208 = $ssize;
 (_pw_move_data($206,$207,$208)|0);
 STACKTOP = sp;return 0;
}
function _test_tdd($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $d = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(564);
 if ($5) {
  $6 = $3;
  $7 = (564 - ($6))|0;
  $0 = $7;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 $ssize = 0;
 $j = 0;
 while(1) {
  $8 = $j;
  $9 = ($8|0)<(31);
  if (!($9)) {
   label = 16;
   break;
  }
  $10 = $1;
  $11 = $start;
  $12 = (($10) + ($11)|0);
  $13 = $j;
  $14 = ($13*14)|0;
  $15 = (($12) + ($14)|0);
  $d = $15;
  $16 = $d;
  $17 = ((($16)) + 130|0);
  $18 = (_readmem32b($17)|0);
  $k = $18;
  $19 = $d;
  $20 = ((($19)) + 134|0);
  $21 = (_readmem16b($20)|0);
  $22 = $21&65535;
  $l = $22;
  $23 = $d;
  $24 = ((($23)) + 138|0);
  $25 = (_readmem32b($24)|0);
  $m = $25;
  $26 = $d;
  $27 = ((($26)) + 142|0);
  $28 = (_readmem16b($27)|0);
  $29 = $28&65535;
  $n = $29;
  $30 = $start;
  $31 = $j;
  $32 = ($31*14)|0;
  $33 = (($30) + ($32))|0;
  $34 = (($33) + 137)|0;
  $35 = $1;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ($38|0)>(64);
  if ($39) {
   label = 6;
   break;
  }
  $40 = $m;
  $41 = $k;
  $42 = ($40|0)<($41|0);
  if ($42) {
   label = 8;
   break;
  }
  $43 = $k;
  $44 = ($43|0)<(564);
  $45 = $m;
  $46 = ($45|0)<(564);
  $or$cond = $44 | $46;
  if ($or$cond) {
   label = 10;
   break;
  }
  $47 = $m;
  $48 = $k;
  $49 = (($47) - ($48))|0;
  $50 = $l;
  $51 = ($49|0)>($50|0);
  if ($51) {
   label = 12;
   break;
  }
  $52 = $m;
  $53 = $k;
  $54 = (($52) - ($53))|0;
  $55 = $n;
  $56 = (($54) + ($55))|0;
  $57 = $l;
  $58 = (($57) + 2)|0;
  $59 = ($56|0)>($58|0);
  if ($59) {
   label = 14;
   break;
  }
  $60 = $l;
  $61 = $ssize;
  $62 = (($61) + ($60))|0;
  $ssize = $62;
  $63 = $j;
  $64 = (($63) + 1)|0;
  $j = $64;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 else if ((label|0) == 16) {
  $65 = $ssize;
  $66 = ($65|0)<=(2);
  $67 = $ssize;
  $68 = ($67|0)>(2031585);
  $or$cond3 = $66 | $68;
  if ($or$cond3) {
   $0 = -1;
   $219 = $0;
   STACKTOP = sp;return ($219|0);
  }
  $69 = $start;
  $70 = $1;
  $71 = (($70) + ($69)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = ($73|0)>(127);
  if (!($74)) {
   $75 = $start;
   $76 = $1;
   $77 = (($76) + ($75)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = ($79|0)==(0);
   if (!($80)) {
    $k = 0;
    $j = 0;
    while(1) {
     $81 = $j;
     $82 = ($81|0)<(128);
     if (!($82)) {
      break;
     }
     $83 = $start;
     $84 = $j;
     $85 = (($83) + ($84))|0;
     $86 = (($85) + 2)|0;
     $87 = $1;
     $88 = (($87) + ($86)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = ($90|0)>(127);
     if ($91) {
      label = 24;
      break;
     }
     $92 = $start;
     $93 = $j;
     $94 = (($92) + ($93))|0;
     $95 = (($94) + 2)|0;
     $96 = $1;
     $97 = (($96) + ($95)|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = $k;
     $101 = ($99|0)>($100|0);
     if ($101) {
      $102 = $start;
      $103 = $j;
      $104 = (($102) + ($103))|0;
      $105 = (($104) + 2)|0;
      $106 = $1;
      $107 = (($106) + ($105)|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108&255;
      $k = $109;
     }
     $110 = $j;
     $111 = (($110) + 1)|0;
     $j = $111;
    }
    if ((label|0) == 24) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    $112 = $k;
    $113 = (($112) + 1)|0;
    $k = $113;
    $114 = $k;
    $115 = $114<<10;
    $k = $115;
    $116 = $start;
    $117 = $1;
    $118 = (($117) + ($116)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119&255;
    $121 = (($120) + 2)|0;
    $j = $121;
    while(1) {
     $122 = $j;
     $123 = ($122|0)<(128);
     $124 = $start;
     if (!($123)) {
      break;
     }
     $125 = $j;
     $126 = (($124) + ($125))|0;
     $127 = (($126) + 2)|0;
     $128 = $1;
     $129 = (($128) + ($127)|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130&255;
     $132 = ($131|0)!=(0);
     if ($132) {
      label = 31;
      break;
     }
     $133 = $j;
     $134 = (($133) + 1)|0;
     $j = $134;
    }
    if ((label|0) == 31) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    $135 = (($124) + 564)|0;
    $136 = $ssize;
    $137 = (($135) + ($136))|0;
    $l = $137;
    $j = 0;
    while(1) {
     $138 = $j;
     $139 = $k;
     $140 = ($138|0)<($139|0);
     if (!($140)) {
      label = 49;
      break;
     }
     $141 = $l;
     $142 = $j;
     $143 = (($141) + ($142))|0;
     $144 = $1;
     $145 = (($144) + ($143)|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = $146&255;
     $148 = ($147|0)>(31);
     if ($148) {
      label = 36;
      break;
     }
     $149 = $l;
     $150 = $j;
     $151 = (($149) + ($150))|0;
     $152 = (($151) + 1)|0;
     $153 = $1;
     $154 = (($153) + ($152)|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = ($156|0)>(72);
     if ($157) {
      label = 39;
      break;
     }
     $158 = $l;
     $159 = $j;
     $160 = (($158) + ($159))|0;
     $161 = (($160) + 1)|0;
     $162 = $1;
     $163 = (($162) + ($161)|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = $165 & 1;
     $167 = ($166|0)==(1);
     if ($167) {
      label = 39;
      break;
     }
     $168 = $l;
     $169 = $j;
     $170 = (($168) + ($169))|0;
     $171 = (($170) + 2)|0;
     $172 = $1;
     $173 = (($172) + ($171)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = $175 & 15;
     $177 = ($176|0)==(12);
     if ($177) {
      $178 = $l;
      $179 = $j;
      $180 = (($178) + ($179))|0;
      $181 = (($180) + 3)|0;
      $182 = $1;
      $183 = (($182) + ($181)|0);
      $184 = HEAP8[$183>>0]|0;
      $185 = $184&255;
      $186 = ($185|0)>(64);
      if ($186) {
       label = 42;
       break;
      }
     }
     $187 = $l;
     $188 = $j;
     $189 = (($187) + ($188))|0;
     $190 = (($189) + 2)|0;
     $191 = $1;
     $192 = (($191) + ($190)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = $194 & 15;
     $196 = ($195|0)==(13);
     if ($196) {
      $197 = $l;
      $198 = $j;
      $199 = (($197) + ($198))|0;
      $200 = (($199) + 3)|0;
      $201 = $1;
      $202 = (($201) + ($200)|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = $203&255;
      $205 = ($204|0)>(64);
      if ($205) {
       label = 45;
       break;
      }
     }
     $206 = $l;
     $207 = $j;
     $208 = (($206) + ($207))|0;
     $209 = (($208) + 2)|0;
     $210 = $1;
     $211 = (($210) + ($209)|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $214 = $213 & 15;
     $215 = ($214|0)==(11);
     if ($215) {
      label = 47;
      break;
     }
     $216 = $j;
     $217 = (($216) + 4)|0;
     $j = $217;
    }
    if ((label|0) == 36) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    else if ((label|0) == 39) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    else if ((label|0) == 42) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    else if ((label|0) == 45) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    else if ((label|0) == 47) {
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
    else if ((label|0) == 49) {
     $218 = $2;
     _pw_read_title(0,$218,0);
     $0 = -1;
     $219 = $0;
     STACKTOP = sp;return ($219|0);
    }
   }
  }
  $0 = -1;
  $219 = $0;
  STACKTOP = sp;return ($219|0);
 }
 return (0)|0;
}
function _depack_tdd($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $pat = 0, $pmax = 0, $saddr = 0, $size = 0, $ssize = 0, $ssizes = 0, $tmp = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pat = sp + 288|0;
 $saddr = sp + 128|0;
 $ssizes = sp + 4|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$saddr; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$ssizes; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,1080)|0);
 $3 = (_malloc(130)|0);
 $tmp = $3;
 $4 = $tmp;
 _memset(($4|0),0,130)|0;
 $5 = $1;
 (_fseek(($5|0),950,0)|0);
 $6 = $tmp;
 $7 = $0;
 (_fread(($6|0),130,1,($7|0))|0);
 $8 = $tmp;
 $9 = $1;
 (_fwrite(($8|0),130,1,($9|0))|0);
 $i = 0;
 $pmax = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(128);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = (($12) + 2)|0;
  $14 = $tmp;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $pmax;
  $19 = $18&255;
  $20 = ($17|0)>($19|0);
  if ($20) {
   $21 = $i;
   $22 = (($21) + 2)|0;
   $23 = $tmp;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $pmax = $25;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $tmp;
 _free($28);
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(31);
  if (!($30)) {
   break;
  }
  $31 = $1;
  $32 = $i;
  $33 = ($32*30)|0;
  $34 = (42 + ($33))|0;
  (_fseek(($31|0),($34|0),0)|0);
  $35 = $0;
  $36 = (_read32b($35)|0);
  $37 = $i;
  $38 = (($saddr) + ($37<<2)|0);
  HEAP32[$38>>2] = $36;
  $39 = $1;
  $40 = $0;
  $41 = (_read16b($40)|0);
  $42 = $41&65535;
  $size = $42;
  $43 = $42&65535;
  _write16b($39,$43);
  $44 = $size;
  $45 = $ssize;
  $46 = (($45) + ($44))|0;
  $ssize = $46;
  $47 = $size;
  $48 = $i;
  $49 = (($ssizes) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $1;
  $51 = $0;
  $52 = (_read8($51)|0);
  _write8($50,$52);
  $53 = $1;
  $54 = $0;
  $55 = (_read8($54)|0);
  _write8($53,$55);
  $56 = $1;
  $57 = $0;
  $58 = (_read32b($57)|0);
  $59 = $i;
  $60 = (($saddr) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) - ($61))|0;
  $63 = (($62>>>0) / 2)&-1;
  $64 = $63&65535;
  _write16b($56,$64);
  $65 = $1;
  $66 = $0;
  $67 = (_read16b($66)|0);
  _write16b($65,$67);
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = $0;
 $71 = $ssize;
 (_fseek(($70|0),($71|0),1)|0);
 $72 = $1;
 (_fseek(($72|0),0,2)|0);
 $73 = $1;
 _write32b($73,1294879534);
 $74 = (_malloc(1024)|0);
 $tmp = $74;
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = $pmax;
  $77 = $76&255;
  $78 = ($75|0)<=($77|0);
  $79 = $tmp;
  if (!($78)) {
   break;
  }
  _memset(($79|0),0,1024)|0;
  _memset(($pat|0),0,1024)|0;
  $80 = $tmp;
  $81 = $0;
  (_fread(($80|0),1024,1,($81|0))|0);
  $j = 0;
  while(1) {
   $82 = $j;
   $83 = ($82|0)<(64);
   if (!($83)) {
    break;
   }
   $k = 0;
   while(1) {
    $84 = $k;
    $85 = ($84|0)<(4);
    $86 = $j;
    if (!($85)) {
     break;
    }
    $87 = $86<<4;
    $88 = $k;
    $89 = $88<<2;
    $90 = (($87) + ($89))|0;
    $x = $90;
    $91 = $x;
    $92 = (($91) + 3)|0;
    $93 = $tmp;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $x;
    $97 = (($96) + 3)|0;
    $98 = (($pat) + ($97)|0);
    HEAP8[$98>>0] = $95;
    $99 = $x;
    $100 = (($99) + 2)|0;
    $101 = $tmp;
    $102 = (($101) + ($100)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = $104 & 15;
    $106 = $105&255;
    $107 = $x;
    $108 = (($107) + 2)|0;
    $109 = (($pat) + ($108)|0);
    HEAP8[$109>>0] = $106;
    $110 = $x;
    $111 = $tmp;
    $112 = (($111) + ($110)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $114 & 240;
    $116 = $115&255;
    $117 = $x;
    $118 = (($pat) + ($117)|0);
    HEAP8[$118>>0] = $116;
    $119 = $x;
    $120 = $tmp;
    $121 = (($120) + ($119)|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = $123 << 4;
    $125 = $124 & 240;
    $126 = $x;
    $127 = (($126) + 2)|0;
    $128 = (($pat) + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $130 | $125;
    $132 = $131&255;
    HEAP8[$128>>0] = $132;
    $133 = $x;
    $134 = (($133) + 1)|0;
    $135 = $tmp;
    $136 = (($135) + ($134)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = (($138|0) / 2)&-1;
    $140 = (8240 + ($139<<1)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $x;
    $144 = (($pat) + ($143)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $146 | $142;
    $148 = $147&255;
    HEAP8[$144>>0] = $148;
    $149 = $x;
    $150 = (($149) + 1)|0;
    $151 = $tmp;
    $152 = (($151) + ($150)|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = (($154|0) / 2)&-1;
    $156 = (8240 + ($155<<1)|0);
    $157 = ((($156)) + 1|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $x;
    $160 = (($159) + 1)|0;
    $161 = (($pat) + ($160)|0);
    HEAP8[$161>>0] = $158;
    $162 = $k;
    $163 = (($162) + 1)|0;
    $k = $163;
   }
   $164 = (($86) + 1)|0;
   $j = $164;
  }
  $165 = $1;
  (_fwrite(($pat|0),1024,1,($165|0))|0);
  $166 = $i;
  $167 = (($166) + 1)|0;
  $i = $167;
 }
 _free($79);
 $i = 0;
 while(1) {
  $168 = $i;
  $169 = ($168|0)<(31);
  if (!($169)) {
   break;
  }
  $170 = $i;
  $171 = (($ssizes) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ($172|0)==(0);
  if (!($173)) {
   $174 = $0;
   $175 = $i;
   $176 = (($saddr) + ($175<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   (_fseek(($174|0),($177|0),0)|0);
   $178 = $1;
   $179 = $0;
   $180 = $i;
   $181 = (($ssizes) + ($180<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   (_pw_move_data($178,$179,$182)|0);
  }
  $183 = $i;
  $184 = (($183) + 1)|0;
  $i = $184;
 }
 STACKTOP = sp;return 0;
}
function _test_unic_id($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $n = 0, $or$cond = 0, $ssize = 0, $start = 0, $x = 0, $x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 1080|0);
 $12 = (_readmem32b($11)|0);
 $13 = ($12|0)!=(1294879534);
 if ($13) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $ssize = 0;
 $k = 0;
 while(1) {
  $14 = $k;
  $15 = ($14|0)<(31);
  if (!($15)) {
   break;
  }
  $16 = $start;
  $17 = $k;
  $18 = ($17*30)|0;
  $19 = (($16) + ($18))|0;
  $x = $19;
  $20 = $1;
  $21 = $x;
  $22 = (($20) + ($21)|0);
  $23 = ((($22)) + 42|0);
  $24 = (_readmem16b($23)|0);
  $25 = $24&65535;
  $26 = $25<<1;
  $j = $26;
  $27 = $j;
  $28 = $ssize;
  $29 = (($28) + ($27))|0;
  $ssize = $29;
  $30 = $1;
  $31 = $x;
  $32 = (($30) + ($31)|0);
  $33 = ((($32)) + 46|0);
  $34 = (_readmem16b($33)|0);
  $35 = $34&65535;
  $36 = $1;
  $37 = $x;
  $38 = (($36) + ($37)|0);
  $39 = ((($38)) + 48|0);
  $40 = (_readmem16b($39)|0);
  $41 = $40&65535;
  $42 = (($35) + ($41))|0;
  $43 = $42<<1;
  $n = $43;
  $44 = $j;
  $45 = (($44) + 2)|0;
  $46 = $n;
  $47 = ($45|0)<($46|0);
  if ($47) {
   label = 8;
   break;
  }
  $48 = $k;
  $49 = (($48) + 1)|0;
  $k = $49;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $50 = $ssize;
 $51 = ($50|0)<=(2);
 if ($51) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $k = 0;
 while(1) {
  $52 = $k;
  $53 = ($52|0)<(31);
  $54 = $start;
  if (!($53)) {
   break;
  }
  $55 = $k;
  $56 = ($55*30)|0;
  $57 = (($54) + ($56))|0;
  $x1 = $57;
  $58 = $x1;
  $59 = (($58) + 40)|0;
  $60 = $1;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)>(15);
  if ($64) {
   label = 17;
   break;
  }
  $65 = $x1;
  $66 = (($65) + 44)|0;
  $67 = $1;
  $68 = (($67) + ($66)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)!=(0);
  if ($71) {
   label = 17;
   break;
  }
  $72 = $x1;
  $73 = (($72) + 45)|0;
  $74 = $1;
  $75 = (($74) + ($73)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)>(64);
  if ($78) {
   label = 17;
   break;
  }
  $79 = $k;
  $80 = (($79) + 1)|0;
  $k = $80;
 }
 if ((label|0) == 17) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $81 = (($54) + 950)|0;
 $82 = $1;
 $83 = (($82) + ($81)|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $l = $85;
 $86 = $l;
 $87 = ($86|0)>(127);
 $88 = $l;
 $89 = ($88|0)==(0);
 $or$cond = $87 | $89;
 if ($or$cond) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $k = 0;
 $j = 0;
 while(1) {
  $90 = $j;
  $91 = $l;
  $92 = ($90|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $start;
  $94 = (($93) + 952)|0;
  $95 = $j;
  $96 = (($94) + ($95))|0;
  $97 = $1;
  $98 = (($97) + ($96)|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $k;
  $102 = ($100|0)>($101|0);
  if ($102) {
   $103 = $start;
   $104 = (($103) + 952)|0;
   $105 = $j;
   $106 = (($104) + ($105))|0;
   $107 = $1;
   $108 = (($107) + ($106)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $k = $110;
  }
  $111 = $start;
  $112 = (($111) + 952)|0;
  $113 = $j;
  $114 = (($112) + ($113))|0;
  $115 = $1;
  $116 = (($115) + ($114)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = ($118|0)>(127);
  if ($119) {
   label = 26;
   break;
  }
  $120 = $j;
  $121 = (($120) + 1)|0;
  $j = $121;
 }
 if ((label|0) == 26) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 while(1) {
  $122 = $j;
  $123 = ($122|0)!=(128);
  if (!($123)) {
   break;
  }
  $124 = $start;
  $125 = (($124) + 952)|0;
  $126 = $j;
  $127 = (($125) + ($126))|0;
  $128 = $1;
  $129 = (($128) + ($127)|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = ($131|0)!=(0);
  if ($132) {
   label = 30;
   break;
  }
  $133 = $j;
  $134 = (($133) + 1)|0;
  $j = $134;
 }
 if ((label|0) == 30) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $135 = $k;
 $136 = (($135) + 1)|0;
 $k = $136;
 $137 = $3;
 $138 = $k;
 $139 = $138<<8;
 $140 = ($139*3)|0;
 $141 = (1084 + ($140))|0;
 $142 = ($137|0)<($141|0);
 if ($142) {
  $143 = $k;
  $144 = $143<<8;
  $145 = ($144*3)|0;
  $146 = (1084 + ($145))|0;
  $147 = $3;
  $148 = (($146) - ($147))|0;
  $0 = $148;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $j = 0;
 while(1) {
  $149 = $j;
  $150 = $k;
  $151 = $150 << 8;
  $152 = ($149|0)<($151|0);
  if (!($152)) {
   label = 39;
   break;
  }
  $153 = $start;
  $154 = (($153) + 1084)|0;
  $155 = $j;
  $156 = ($155*3)|0;
  $157 = (($154) + ($156))|0;
  $158 = $1;
  $159 = (($158) + ($157)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = ($161|0)>(116);
  if ($162) {
   label = 37;
   break;
  }
  $163 = $j;
  $164 = (($163) + 1)|0;
  $j = $164;
 }
 if ((label|0) == 37) {
  $0 = -1;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 else if ((label|0) == 39) {
  $165 = $1;
  $166 = $2;
  _pw_read_title($165,$166,20);
  $0 = 0;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 return (0)|0;
}
function _depack_unic($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0;
 var $c4 = 0, $fine = 0, $fxp = 0, $fxt = 0, $i = 0, $id = 0, $ins = 0, $j = 0, $k = 0, $l = 0, $loop_status = 0, $max = 0, $note = 0, $npat = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ssize = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 33|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $loop_status = 2;
 $i = 0;
 $j = 0;
 $k = 0;
 $l = 0;
 $ssize = 0;
 $2 = $1;
 $3 = $0;
 (_pw_move_data($2,$3,20)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $1;
  $7 = $0;
  if (!($5)) {
   break;
  }
  (_pw_move_data($6,$7,20)|0);
  $8 = $1;
  _write8($8,0);
  $9 = $1;
  _write8($9,0);
  $10 = $0;
  $11 = (_read8($10)|0);
  $c1 = $11;
  $12 = $0;
  $13 = (_read8($12)|0);
  $c2 = $13;
  $14 = $c1;
  $15 = $14&255;
  $16 = $15 << 8;
  $17 = $c2;
  $18 = $17&255;
  $19 = (($16) + ($18))|0;
  $j = $19;
  $20 = $j;
  $21 = ($20|0)!=(0);
  do {
   if ($21) {
    $22 = $j;
    $23 = ($22|0)<(256);
    $24 = $c2;
    $25 = $24&255;
    if ($23) {
     $26 = (16 - ($25))|0;
     $27 = $26&255;
     $fine = $27;
     break;
    } else {
     $28 = (256 - ($25))|0;
     $29 = $28&255;
     $fine = $29;
     break;
    }
   } else {
    $fine = 0;
   }
  } while(0);
  $30 = $1;
  $31 = $0;
  $32 = (_read16b($31)|0);
  $33 = $32&65535;
  $l = $33;
  $34 = $33&65535;
  _write16b($30,$34);
  $35 = $l;
  $36 = $35<<1;
  $37 = $ssize;
  $38 = (($37) + ($36))|0;
  $ssize = $38;
  $39 = $0;
  (_read8($39)|0);
  $40 = $1;
  $41 = $fine;
  _write8($40,$41);
  $42 = $1;
  $43 = $0;
  $44 = (_read8($43)|0);
  _write8($42,$44);
  $45 = $0;
  $46 = (_read16b($45)|0);
  $47 = $46&65535;
  $j = $47;
  $48 = $0;
  $49 = (_read16b($48)|0);
  $50 = $49&65535;
  $k = $50;
  $51 = $j;
  $52 = $51<<1;
  $53 = $k;
  $54 = (($52) + ($53))|0;
  $55 = $l;
  $56 = ($54|0)<=($55|0);
  $57 = $j;
  $58 = ($57|0)!=(0);
  $or$cond = $56 & $58;
  if ($or$cond) {
   $loop_status = 1;
   $59 = $j;
   $60 = $59<<1;
   $j = $60;
  }
  $61 = $1;
  $62 = $j;
  $63 = $62&65535;
  _write16b($61,$63);
  $64 = $1;
  $65 = $k;
  $66 = $65&65535;
  _write16b($64,$66);
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $69 = (_read8($7)|0);
 $npat = $69;
 _write8($6,$69);
 $70 = $1;
 _write8($70,127);
 $71 = $0;
 (_read8($71)|0);
 $72 = $0;
 (_fread(($tmp|0),128,1,($72|0))|0);
 $73 = $1;
 (_fwrite(($tmp|0),128,1,($73|0))|0);
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = ($74|0)<(128);
  if (!($75)) {
   break;
  }
  $76 = $i;
  $77 = (($tmp) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $max;
  $81 = $80&255;
  $82 = ($79|0)>($81|0);
  if ($82) {
   $83 = $i;
   $84 = (($tmp) + ($83)|0);
   $85 = HEAP8[$84>>0]|0;
   $max = $85;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $88 = $max;
 $89 = (($88) + 1)<<24>>24;
 $max = $89;
 $90 = $1;
 _write32b($90,1294879534);
 $91 = $0;
 (_fseek(($91|0),1080,0)|0);
 $92 = $0;
 $93 = (_read32b($92)|0);
 $id = $93;
 $94 = $id;
 $95 = ($94|0)!=(0);
 $96 = $id;
 $97 = ($96|0)!=(1294879534);
 $or$cond3 = $95 & $97;
 $98 = $id;
 $99 = ($98|0)!=(1431193923);
 $or$cond5 = $or$cond3 & $99;
 if ($or$cond5) {
  $100 = $0;
  (_fseek(($100|0),-4,1)|0);
 }
 $i = 0;
 while(1) {
  $101 = $i;
  $102 = $max;
  $103 = $102&255;
  $104 = ($101|0)<($103|0);
  if (!($104)) {
   break;
  }
  $j = 0;
  while(1) {
   $105 = $j;
   $106 = ($105|0)<(256);
   if (!($106)) {
    break;
   }
   $107 = $0;
   $108 = (_read8($107)|0);
   $c1 = $108;
   $109 = $0;
   $110 = (_read8($109)|0);
   $c2 = $110;
   $111 = $0;
   $112 = (_read8($111)|0);
   $c3 = $112;
   $113 = $c1;
   $114 = $113&255;
   $115 = $114 >> 2;
   $116 = $115 & 16;
   $117 = $c2;
   $118 = $117&255;
   $119 = $118 >> 4;
   $120 = $119 & 15;
   $121 = $116 | $120;
   $122 = $121&255;
   $ins = $122;
   $123 = $c1;
   $124 = $123&255;
   $125 = $124 & 63;
   $126 = $125&255;
   $note = $126;
   $127 = $c2;
   $128 = $127&255;
   $129 = $128 & 15;
   $130 = $129&255;
   $fxt = $130;
   $131 = $c3;
   $fxp = $131;
   $132 = $fxt;
   $133 = $132&255;
   $134 = ($133|0)==(13);
   if ($134) {
    $135 = $fxp;
    $136 = $135&255;
    $137 = (($136|0) / 10)&-1;
    $138 = $137&255;
    $c3 = $138;
    $139 = $fxp;
    $140 = $139&255;
    $141 = (($140|0) % 10)&-1;
    $142 = $141&255;
    $c4 = $142;
    $143 = $c3;
    $144 = $143&255;
    $145 = $144<<4;
    $146 = $c4;
    $147 = $146&255;
    $148 = (($145) + ($147))|0;
    $149 = $148&255;
    $fxp = $149;
   }
   $150 = $ins;
   $151 = $150&255;
   $152 = $151 & 240;
   $153 = $note;
   $154 = $153&255;
   $155 = (8240 + ($154<<1)|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = $152 | $157;
   $159 = $158&255;
   $160 = $j;
   $161 = $160<<2;
   $162 = (($tmp) + ($161)|0);
   HEAP8[$162>>0] = $159;
   $163 = $note;
   $164 = $163&255;
   $165 = (8240 + ($164<<1)|0);
   $166 = ((($165)) + 1|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $j;
   $169 = $168<<2;
   $170 = (($169) + 1)|0;
   $171 = (($tmp) + ($170)|0);
   HEAP8[$171>>0] = $167;
   $172 = $ins;
   $173 = $172&255;
   $174 = $173 << 4;
   $175 = $174 & 240;
   $176 = $fxt;
   $177 = $176&255;
   $178 = $175 | $177;
   $179 = $178&255;
   $180 = $j;
   $181 = $180<<2;
   $182 = (($181) + 2)|0;
   $183 = (($tmp) + ($182)|0);
   HEAP8[$183>>0] = $179;
   $184 = $fxp;
   $185 = $j;
   $186 = $185<<2;
   $187 = (($186) + 3)|0;
   $188 = (($tmp) + ($187)|0);
   HEAP8[$188>>0] = $184;
   $189 = $j;
   $190 = (($189) + 1)|0;
   $j = $190;
  }
  $191 = $1;
  (_fwrite(($tmp|0),1024,1,($191|0))|0);
  $192 = $i;
  $193 = (($192) + 1)|0;
  $i = $193;
 }
 $194 = $1;
 $195 = $0;
 $196 = $ssize;
 (_pw_move_data($194,$195,$196)|0);
 STACKTOP = sp;return 0;
}
function _test_unic_noid($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, $x = 0, $y = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 1080|0);
 $12 = (_readmem32b($11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 $ssize = 0;
 $o = 0;
 $k = 0;
 while(1) {
  $14 = $k;
  $15 = ($14|0)<(31);
  if (!($15)) {
   label = 24;
   break;
  }
  $16 = $start;
  $17 = $k;
  $18 = ($17*30)|0;
  $19 = (($16) + ($18))|0;
  $x = $19;
  $20 = $1;
  $21 = $x;
  $22 = (($20) + ($21)|0);
  $23 = ((($22)) + 42|0);
  $24 = (_readmem16b($23)|0);
  $25 = $24&65535;
  $26 = $25<<1;
  $j = $26;
  $27 = $1;
  $28 = $x;
  $29 = (($27) + ($28)|0);
  $30 = ((($29)) + 46|0);
  $31 = (_readmem16b($30)|0);
  $32 = $31&65535;
  $33 = $32<<1;
  $m = $33;
  $34 = $1;
  $35 = $x;
  $36 = (($34) + ($35)|0);
  $37 = ((($36)) + 48|0);
  $38 = (_readmem16b($37)|0);
  $39 = $38&65535;
  $40 = $39<<1;
  $n = $40;
  $41 = $j;
  $42 = $ssize;
  $43 = (($42) + ($41))|0;
  $ssize = $43;
  $44 = $n;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $j;
   $47 = (($46) + 2)|0;
   $48 = $m;
   $49 = $n;
   $50 = (($48) + ($49))|0;
   $51 = ($47|0)<($50|0);
   if ($51) {
    label = 9;
    break;
   }
  }
  $52 = $j;
  $53 = ($52|0)>(65535);
  $54 = $m;
  $55 = ($54|0)>(65535);
  $or$cond = $53 | $55;
  $56 = $n;
  $57 = ($56|0)>(65535);
  $or$cond3 = $or$cond | $57;
  if ($or$cond3) {
   label = 11;
   break;
  }
  $58 = $x;
  $59 = (($58) + 45)|0;
  $60 = $1;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)>(64);
  if ($64) {
   label = 13;
   break;
  }
  $65 = $1;
  $66 = $x;
  $67 = (($65) + ($66)|0);
  $68 = ((($67)) + 40|0);
  $69 = (_readmem16b($68)|0);
  $70 = $69&65535;
  $y = $70;
  $71 = $y;
  $72 = ($71|0)!=(0);
  $73 = $j;
  $74 = ($73|0)==(0);
  $or$cond5 = $72 & $74;
  if ($or$cond5) {
   label = 16;
   break;
  }
  $75 = $y;
  $76 = ($75|0)>(8);
  $77 = $y;
  $78 = ($77|0)<(247);
  $or$cond7 = $76 & $78;
  if ($or$cond7) {
   label = 16;
   break;
  }
  $79 = $m;
  $80 = ($79|0)!=(0);
  $81 = $n;
  $82 = ($81|0)<=(2);
  $or$cond9 = $80 & $82;
  if ($or$cond9) {
   label = 18;
   break;
  }
  $83 = $x;
  $84 = (($83) + 45)|0;
  $85 = $1;
  $86 = (($85) + ($84)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = ($88|0)!=(0);
  $90 = $j;
  $91 = ($90|0)==(0);
  $or$cond11 = $89 & $91;
  if ($or$cond11) {
   label = 20;
   break;
  }
  $92 = $j;
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = $j;
   $95 = (($94) + 1)|0;
   $o = $95;
  }
  $96 = $k;
  $97 = (($96) + 1)|0;
  $k = $97;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 else if ((label|0) == 16) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 else if ((label|0) == 18) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 else if ((label|0) == 20) {
  $0 = -1;
  $293 = $0;
  STACKTOP = sp;return ($293|0);
 }
 else if ((label|0) == 24) {
  $98 = $ssize;
  $99 = ($98|0)<=(2);
  if ($99) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  $100 = $start;
  $101 = (($100) + 950)|0;
  $102 = $1;
  $103 = (($102) + ($101)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $l = $105;
  $106 = $l;
  $107 = ($106|0)>(127);
  $108 = $l;
  $109 = ($108|0)==(0);
  $or$cond13 = $107 | $109;
  if ($or$cond13) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  $k = 0;
  $j = 0;
  while(1) {
   $110 = $j;
   $111 = $l;
   $112 = ($110|0)<($111|0);
   if (!($112)) {
    break;
   }
   $113 = $start;
   $114 = (($113) + 952)|0;
   $115 = $j;
   $116 = (($114) + ($115))|0;
   $117 = $1;
   $118 = (($117) + ($116)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = $k;
   $122 = ($120|0)>($121|0);
   if ($122) {
    $123 = $start;
    $124 = (($123) + 952)|0;
    $125 = $j;
    $126 = (($124) + ($125))|0;
    $127 = $1;
    $128 = (($127) + ($126)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $k = $130;
   }
   $131 = $start;
   $132 = (($131) + 952)|0;
   $133 = $j;
   $134 = (($132) + ($133))|0;
   $135 = $1;
   $136 = (($135) + ($134)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = ($138|0)>(127);
   if ($139) {
    label = 33;
    break;
   }
   $140 = $j;
   $141 = (($140) + 1)|0;
   $j = $141;
  }
  if ((label|0) == 33) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  while(1) {
   $142 = $j;
   $143 = ($142|0)!=(128);
   if (!($143)) {
    break;
   }
   $144 = $start;
   $145 = (($144) + 952)|0;
   $146 = $j;
   $147 = (($145) + ($146))|0;
   $148 = $1;
   $149 = (($148) + ($147)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = ($151|0)!=(0);
   if ($152) {
    label = 37;
    break;
   }
   $153 = $j;
   $154 = (($153) + 1)|0;
   $j = $154;
  }
  if ((label|0) == 37) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  $155 = $k;
  $156 = (($155) + 1)|0;
  $k = $156;
  $157 = $3;
  $158 = $k;
  $159 = $158<<8;
  $160 = ($159*3)|0;
  $161 = (1080 + ($160))|0;
  $162 = (($161) + 2)|0;
  $163 = ($157|0)<($162|0);
  if ($163) {
   $164 = $k;
   $165 = $164<<8;
   $166 = ($165*3)|0;
   $167 = (1080 + ($166))|0;
   $168 = (($167) + 2)|0;
   $169 = $3;
   $170 = (($168) - ($169))|0;
   $0 = $170;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  $j = 0;
  while(1) {
   $171 = $j;
   $172 = $k;
   $173 = $172 << 8;
   $174 = ($171|0)<($173|0);
   if (!($174)) {
    label = 59;
    break;
   }
   $175 = $start;
   $176 = (($175) + 1080)|0;
   $177 = $j;
   $178 = ($177*3)|0;
   $179 = (($176) + ($178))|0;
   $y1 = $179;
   $180 = $y1;
   $181 = $1;
   $182 = (($181) + ($180)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = ($184|0)>(116);
   if ($185) {
    label = 44;
    break;
   }
   $186 = $y1;
   $187 = $1;
   $188 = (($187) + ($186)|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = $190 & 63;
   $192 = ($191|0)>(36);
   if ($192) {
    label = 46;
    break;
   }
   $193 = $y1;
   $194 = (($193) + 1)|0;
   $195 = $1;
   $196 = (($195) + ($194)|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = $198 & 15;
   $200 = ($199|0)==(12);
   if ($200) {
    $201 = $y1;
    $202 = (($201) + 2)|0;
    $203 = $1;
    $204 = (($203) + ($202)|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&255;
    $207 = ($206|0)>(64);
    if ($207) {
     label = 49;
     break;
    }
   }
   $208 = $y1;
   $209 = (($208) + 1)|0;
   $210 = $1;
   $211 = (($210) + ($209)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = $213 & 15;
   $215 = ($214|0)==(11);
   if ($215) {
    $216 = $y1;
    $217 = (($216) + 2)|0;
    $218 = $1;
    $219 = (($218) + ($217)|0);
    $220 = HEAP8[$219>>0]|0;
    $221 = $220&255;
    $222 = ($221|0)>(127);
    if ($222) {
     label = 52;
     break;
    }
   }
   $223 = $y1;
   $224 = (($223) + 1)|0;
   $225 = $1;
   $226 = (($225) + ($224)|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = $227&255;
   $229 = $228 & 15;
   $230 = ($229|0)==(13);
   if ($230) {
    $231 = $y1;
    $232 = (($231) + 2)|0;
    $233 = $1;
    $234 = (($233) + ($232)|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = ($236|0)>(64);
    if ($237) {
     label = 55;
     break;
    }
   }
   $238 = $y1;
   $239 = $1;
   $240 = (($239) + ($238)|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241&255;
   $243 = $242 >> 2;
   $244 = $243 & 48;
   $245 = $start;
   $246 = (($245) + 1081)|0;
   $247 = $j;
   $248 = ($247*3)|0;
   $249 = (($246) + ($248))|0;
   $250 = (($249) + 1)|0;
   $251 = $1;
   $252 = (($251) + ($250)|0);
   $253 = HEAP8[$252>>0]|0;
   $254 = $253&255;
   $255 = $254 >> 4;
   $256 = $255 & 15;
   $257 = $244 | $256;
   $n = $257;
   $258 = $n;
   $259 = $o;
   $260 = ($258|0)>($259|0);
   if ($260) {
    label = 57;
    break;
   }
   $261 = $j;
   $262 = (($261) + 1)|0;
   $j = $262;
  }
  if ((label|0) == 44) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  else if ((label|0) == 46) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  else if ((label|0) == 49) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  else if ((label|0) == 52) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  else if ((label|0) == 55) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  else if ((label|0) == 57) {
   $0 = -1;
   $293 = $0;
   STACKTOP = sp;return ($293|0);
  }
  else if ((label|0) == 59) {
   $j = 0;
   while(1) {
    $263 = $j;
    $264 = ($263|0)<(20);
    if (!($264)) {
     label = 66;
     break;
    }
    $265 = $start;
    $266 = $j;
    $267 = (($265) + ($266))|0;
    $268 = $1;
    $269 = (($268) + ($267)|0);
    $270 = HEAP8[$269>>0]|0;
    $271 = $270&255;
    $272 = ($271|0)!=(0);
    if ($272) {
     $273 = $start;
     $274 = $j;
     $275 = (($273) + ($274))|0;
     $276 = $1;
     $277 = (($276) + ($275)|0);
     $278 = HEAP8[$277>>0]|0;
     $279 = $278&255;
     $280 = ($279|0)<(32);
     if ($280) {
      label = 64;
      break;
     }
    }
    $281 = $start;
    $282 = $j;
    $283 = (($281) + ($282))|0;
    $284 = $1;
    $285 = (($284) + ($283)|0);
    $286 = HEAP8[$285>>0]|0;
    $287 = $286&255;
    $288 = ($287|0)>(180);
    if ($288) {
     label = 64;
     break;
    }
    $289 = $j;
    $290 = (($289) + 1)|0;
    $j = $290;
   }
   if ((label|0) == 64) {
    $0 = -1;
    $293 = $0;
    STACKTOP = sp;return ($293|0);
   }
   else if ((label|0) == 66) {
    $291 = $1;
    $292 = $2;
    _pw_read_title($291,$292,20);
    $0 = 0;
    $293 = $0;
    STACKTOP = sp;return ($293|0);
   }
  }
 }
 return (0)|0;
}
function _test_unic_emptyid($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0;
 var $start = 0, $x = 0, $y = 0, $y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 1080|0);
 $12 = (_readmem32b($11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 $ssize = 0;
 $o = 0;
 $k = 0;
 while(1) {
  $14 = $k;
  $15 = ($14|0)<(31);
  if (!($15)) {
   label = 24;
   break;
  }
  $16 = $start;
  $17 = $k;
  $18 = ($17*30)|0;
  $19 = (($16) + ($18))|0;
  $x = $19;
  $20 = $1;
  $21 = $x;
  $22 = (($20) + ($21)|0);
  $23 = ((($22)) + 42|0);
  $24 = (_readmem16b($23)|0);
  $25 = $24&65535;
  $26 = $25<<1;
  $j = $26;
  $27 = $1;
  $28 = $x;
  $29 = (($27) + ($28)|0);
  $30 = ((($29)) + 46|0);
  $31 = (_readmem16b($30)|0);
  $32 = $31&65535;
  $33 = $32<<1;
  $m = $33;
  $34 = $1;
  $35 = $x;
  $36 = (($34) + ($35)|0);
  $37 = ((($36)) + 48|0);
  $38 = (_readmem16b($37)|0);
  $39 = $38&65535;
  $40 = $39<<1;
  $n = $40;
  $41 = $j;
  $42 = $ssize;
  $43 = (($42) + ($41))|0;
  $ssize = $43;
  $44 = $n;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $j;
   $47 = (($46) + 2)|0;
   $48 = $m;
   $49 = $n;
   $50 = (($48) + ($49))|0;
   $51 = ($47|0)<($50|0);
   if ($51) {
    label = 9;
    break;
   }
  }
  $52 = $j;
  $53 = ($52|0)>(65535);
  $54 = $m;
  $55 = ($54|0)>(65535);
  $or$cond = $53 | $55;
  $56 = $n;
  $57 = ($56|0)>(65535);
  $or$cond3 = $or$cond | $57;
  if ($or$cond3) {
   label = 11;
   break;
  }
  $58 = $x;
  $59 = (($58) + 45)|0;
  $60 = $1;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)>(64);
  if ($64) {
   label = 13;
   break;
  }
  $65 = $1;
  $66 = $x;
  $67 = (($65) + ($66)|0);
  $68 = ((($67)) + 40|0);
  $69 = (_readmem16b($68)|0);
  $70 = $69&65535;
  $y = $70;
  $71 = $y;
  $72 = ($71|0)!=(0);
  $73 = $j;
  $74 = ($73|0)==(0);
  $or$cond5 = $72 & $74;
  if ($or$cond5) {
   label = 16;
   break;
  }
  $75 = $y;
  $76 = ($75|0)>(8);
  $77 = $y;
  $78 = ($77|0)<(247);
  $or$cond7 = $76 & $78;
  if ($or$cond7) {
   label = 16;
   break;
  }
  $79 = $m;
  $80 = ($79|0)!=(0);
  $81 = $n;
  $82 = ($81|0)<=(2);
  $or$cond9 = $80 & $82;
  if ($or$cond9) {
   label = 18;
   break;
  }
  $83 = $x;
  $84 = (($83) + 45)|0;
  $85 = $1;
  $86 = (($85) + ($84)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = ($88|0)!=(0);
  $90 = $j;
  $91 = ($90|0)==(0);
  $or$cond11 = $89 & $91;
  if ($or$cond11) {
   label = 20;
   break;
  }
  $92 = $j;
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = $j;
   $95 = (($94) + 1)|0;
   $o = $95;
  }
  $96 = $k;
  $97 = (($96) + 1)|0;
  $k = $97;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 16) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 18) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 20) {
  $0 = -1;
  $265 = $0;
  STACKTOP = sp;return ($265|0);
 }
 else if ((label|0) == 24) {
  $98 = $ssize;
  $99 = ($98|0)<=(2);
  if ($99) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  $100 = $start;
  $101 = (($100) + 950)|0;
  $102 = $1;
  $103 = (($102) + ($101)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $l = $105;
  $106 = $l;
  $107 = ($106|0)>(127);
  $108 = $l;
  $109 = ($108|0)==(0);
  $or$cond13 = $107 | $109;
  if ($or$cond13) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  $k = 0;
  $j = 0;
  while(1) {
   $110 = $j;
   $111 = $l;
   $112 = ($110|0)<($111|0);
   if (!($112)) {
    break;
   }
   $113 = $start;
   $114 = (($113) + 952)|0;
   $115 = $j;
   $116 = (($114) + ($115))|0;
   $117 = $1;
   $118 = (($117) + ($116)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = $k;
   $122 = ($120|0)>($121|0);
   if ($122) {
    $123 = $start;
    $124 = (($123) + 952)|0;
    $125 = $j;
    $126 = (($124) + ($125))|0;
    $127 = $1;
    $128 = (($127) + ($126)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $k = $130;
   }
   $131 = $start;
   $132 = (($131) + 952)|0;
   $133 = $j;
   $134 = (($132) + ($133))|0;
   $135 = $1;
   $136 = (($135) + ($134)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = ($138|0)>(127);
   if ($139) {
    label = 33;
    break;
   }
   $140 = $j;
   $141 = (($140) + 1)|0;
   $j = $141;
  }
  if ((label|0) == 33) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  while(1) {
   $142 = $j;
   $143 = ($142|0)!=(128);
   if (!($143)) {
    break;
   }
   $144 = $start;
   $145 = (($144) + 952)|0;
   $146 = $j;
   $147 = (($145) + ($146))|0;
   $148 = $1;
   $149 = (($148) + ($147)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = ($151|0)!=(0);
   if ($152) {
    label = 37;
    break;
   }
   $153 = $j;
   $154 = (($153) + 1)|0;
   $j = $154;
  }
  if ((label|0) == 37) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  $155 = $k;
  $156 = (($155) + 1)|0;
  $k = $156;
  $157 = $3;
  $158 = $k;
  $159 = $158<<8;
  $160 = ($159*3)|0;
  $161 = (1084 + ($160))|0;
  $162 = (($161) + 2)|0;
  $163 = ($157|0)<($162|0);
  if ($163) {
   $164 = $k;
   $165 = $164<<8;
   $166 = ($165*3)|0;
   $167 = (1084 + ($166))|0;
   $168 = (($167) + 2)|0;
   $169 = $3;
   $170 = (($168) - ($169))|0;
   $0 = $170;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  $j = 0;
  while(1) {
   $171 = $j;
   $172 = $k;
   $173 = $172 << 8;
   $174 = ($171|0)<($173|0);
   if (!($174)) {
    label = 59;
    break;
   }
   $175 = $start;
   $176 = (($175) + 1084)|0;
   $177 = $j;
   $178 = ($177*3)|0;
   $179 = (($176) + ($178))|0;
   $y1 = $179;
   $180 = $y1;
   $181 = $1;
   $182 = (($181) + ($180)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = ($184|0)>(116);
   if ($185) {
    label = 44;
    break;
   }
   $186 = $y1;
   $187 = $1;
   $188 = (($187) + ($186)|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = $190 & 63;
   $192 = ($191|0)>(36);
   if ($192) {
    label = 46;
    break;
   }
   $193 = $y1;
   $194 = (($193) + 1)|0;
   $195 = $1;
   $196 = (($195) + ($194)|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = $198 & 15;
   $200 = ($199|0)==(12);
   if ($200) {
    $201 = $y1;
    $202 = (($201) + 2)|0;
    $203 = $1;
    $204 = (($203) + ($202)|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&255;
    $207 = ($206|0)>(64);
    if ($207) {
     label = 49;
     break;
    }
   }
   $208 = $y1;
   $209 = (($208) + 1)|0;
   $210 = $1;
   $211 = (($210) + ($209)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = $213 & 15;
   $215 = ($214|0)==(11);
   if ($215) {
    $216 = $y1;
    $217 = (($216) + 2)|0;
    $218 = $1;
    $219 = (($218) + ($217)|0);
    $220 = HEAP8[$219>>0]|0;
    $221 = $220&255;
    $222 = ($221|0)>(127);
    if ($222) {
     label = 52;
     break;
    }
   }
   $223 = $y1;
   $224 = (($223) + 1)|0;
   $225 = $1;
   $226 = (($225) + ($224)|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = $227&255;
   $229 = $228 & 15;
   $230 = ($229|0)==(13);
   if ($230) {
    $231 = $y1;
    $232 = (($231) + 2)|0;
    $233 = $1;
    $234 = (($233) + ($232)|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = ($236|0)>(64);
    if ($237) {
     label = 55;
     break;
    }
   }
   $238 = $y1;
   $239 = $1;
   $240 = (($239) + ($238)|0);
   $241 = HEAP8[$240>>0]|0;
   $242 = $241&255;
   $243 = $242 >> 2;
   $244 = $243 & 48;
   $245 = $start;
   $246 = (($245) + 1085)|0;
   $247 = $j;
   $248 = ($247*3)|0;
   $249 = (($246) + ($248))|0;
   $250 = (($249) + 1)|0;
   $251 = $1;
   $252 = (($251) + ($250)|0);
   $253 = HEAP8[$252>>0]|0;
   $254 = $253&255;
   $255 = $254 >> 4;
   $256 = $255 & 15;
   $257 = $244 | $256;
   $n = $257;
   $258 = $n;
   $259 = $o;
   $260 = ($258|0)>($259|0);
   if ($260) {
    label = 57;
    break;
   }
   $261 = $j;
   $262 = (($261) + 1)|0;
   $j = $262;
  }
  if ((label|0) == 44) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  else if ((label|0) == 46) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  else if ((label|0) == 49) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  else if ((label|0) == 52) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  else if ((label|0) == 55) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  else if ((label|0) == 57) {
   $0 = -1;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
  else if ((label|0) == 59) {
   $263 = $1;
   $264 = $2;
   _pw_read_title($263,$264,20);
   $0 = 0;
   $265 = $0;
   STACKTOP = sp;return ($265|0);
  }
 }
 return (0)|0;
}
function _test_unic2($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 1080|0);
 $12 = (_readmem32b($11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $0 = -1;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 $o = 0;
 $ssize = 0;
 $k = 0;
 while(1) {
  $14 = $k;
  $15 = ($14|0)<(31);
  if (!($15)) {
   label = 20;
   break;
  }
  $16 = $start;
  $17 = $k;
  $18 = ($17*30)|0;
  $19 = (($16) + ($18))|0;
  $x = $19;
  $20 = $1;
  $21 = $x;
  $22 = (($20) + ($21)|0);
  $23 = ((($22)) + 22|0);
  $24 = (_readmem16b($23)|0);
  $25 = $24&65535;
  $26 = $25<<1;
  $j = $26;
  $27 = $1;
  $28 = $x;
  $29 = (($27) + ($28)|0);
  $30 = ((($29)) + 26|0);
  $31 = (_readmem16b($30)|0);
  $32 = $31&65535;
  $33 = $32<<1;
  $m = $33;
  $34 = $1;
  $35 = $x;
  $36 = (($34) + ($35)|0);
  $37 = ((($36)) + 28|0);
  $38 = (_readmem16b($37)|0);
  $39 = $38&65535;
  $40 = $39<<1;
  $n = $40;
  $41 = $j;
  $42 = $ssize;
  $43 = (($42) + ($41))|0;
  $ssize = $43;
  $44 = $j;
  $45 = (($44) + 2)|0;
  $46 = $m;
  $47 = $n;
  $48 = (($46) + ($47))|0;
  $49 = ($45|0)<($48|0);
  if ($49) {
   label = 8;
   break;
  }
  $50 = $j;
  $51 = ($50|0)>(65535);
  $52 = $m;
  $53 = ($52|0)>(65535);
  $or$cond = $51 | $53;
  $54 = $n;
  $55 = ($54|0)>(65535);
  $or$cond3 = $or$cond | $55;
  if ($or$cond3) {
   label = 10;
   break;
  }
  $56 = $x;
  $57 = (($56) + 25)|0;
  $58 = $1;
  $59 = (($58) + ($57)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($61|0)>(64);
  if ($62) {
   label = 12;
   break;
  }
  $63 = $1;
  $64 = $x;
  $65 = (($63) + ($64)|0);
  $66 = ((($65)) + 20|0);
  $67 = (_readmem16b($66)|0);
  $68 = $67&65535;
  $69 = ($68|0)!=(0);
  $70 = $j;
  $71 = ($70|0)==(0);
  $or$cond5 = $69 & $71;
  if ($or$cond5) {
   label = 14;
   break;
  }
  $72 = $x;
  $73 = (($72) + 25)|0;
  $74 = $1;
  $75 = (($74) + ($73)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)!=(0);
  $79 = $j;
  $80 = ($79|0)==(0);
  $or$cond7 = $78 & $80;
  if ($or$cond7) {
   label = 16;
   break;
  }
  $81 = $j;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $j;
   $84 = (($83) + 1)|0;
   $o = $84;
  }
  $85 = $k;
  $86 = (($85) + 1)|0;
  $k = $86;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 else if ((label|0) == 16) {
  $0 = -1;
  $251 = $0;
  STACKTOP = sp;return ($251|0);
 }
 else if ((label|0) == 20) {
  $87 = $ssize;
  $88 = ($87|0)<=(2);
  if ($88) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  $89 = $start;
  $90 = (($89) + 930)|0;
  $91 = $1;
  $92 = (($91) + ($90)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $l = $94;
  $95 = $l;
  $96 = ($95|0)>(127);
  $97 = $l;
  $98 = ($97|0)==(0);
  $or$cond9 = $96 | $98;
  if ($or$cond9) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  $k = 0;
  $j = 0;
  while(1) {
   $99 = $j;
   $100 = $l;
   $101 = ($99|0)<($100|0);
   if (!($101)) {
    break;
   }
   $102 = $start;
   $103 = (($102) + 932)|0;
   $104 = $j;
   $105 = (($103) + ($104))|0;
   $106 = $1;
   $107 = (($106) + ($105)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $k;
   $111 = ($109|0)>($110|0);
   if ($111) {
    $112 = $start;
    $113 = (($112) + 932)|0;
    $114 = $j;
    $115 = (($113) + ($114))|0;
    $116 = $1;
    $117 = (($116) + ($115)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $k = $119;
   }
   $120 = $start;
   $121 = (($120) + 932)|0;
   $122 = $j;
   $123 = (($121) + ($122))|0;
   $124 = $1;
   $125 = (($124) + ($123)|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)>(127);
   if ($128) {
    label = 29;
    break;
   }
   $129 = $j;
   $130 = (($129) + 1)|0;
   $j = $130;
  }
  if ((label|0) == 29) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  $131 = $j;
  $132 = (($131) + 2)|0;
  $j = $132;
  while(1) {
   $133 = $j;
   $134 = ($133|0)!=(128);
   if (!($134)) {
    break;
   }
   $135 = $start;
   $136 = (($135) + 932)|0;
   $137 = $j;
   $138 = (($136) + ($137))|0;
   $139 = $1;
   $140 = (($139) + ($138)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = ($142|0)!=(0);
   if ($143) {
    label = 34;
    break;
   }
   $144 = $j;
   $145 = (($144) + 1)|0;
   $j = $145;
  }
  if ((label|0) == 34) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  $146 = $k;
  $147 = (($146) + 1)|0;
  $k = $147;
  $148 = $3;
  $149 = $k;
  $150 = $149<<8;
  $151 = ($150*3)|0;
  $152 = (1060 + ($151))|0;
  $153 = (($152) + 2)|0;
  $154 = ($148|0)<($153|0);
  if ($154) {
   $155 = $k;
   $156 = $155<<8;
   $157 = ($156*3)|0;
   $158 = (1060 + ($157))|0;
   $159 = (($158) + 2)|0;
   $160 = $3;
   $161 = (($159) - ($160))|0;
   $0 = $161;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  $j = 0;
  while(1) {
   $162 = $j;
   $163 = $k;
   $164 = $163 << 8;
   $165 = ($162|0)<($164|0);
   if (!($165)) {
    label = 56;
    break;
   }
   $166 = $start;
   $167 = (($166) + 1060)|0;
   $168 = $j;
   $169 = ($168*3)|0;
   $170 = (($167) + ($169))|0;
   $y = $170;
   $171 = $y;
   $172 = $1;
   $173 = (($172) + ($171)|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = ($175|0)>(116);
   if ($176) {
    label = 41;
    break;
   }
   $177 = $y;
   $178 = $1;
   $179 = (($178) + ($177)|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = $181 & 63;
   $183 = ($182|0)>(36);
   if ($183) {
    label = 43;
    break;
   }
   $184 = $y;
   $185 = (($184) + 1)|0;
   $186 = $1;
   $187 = (($186) + ($185)|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = $189 & 15;
   $191 = ($190|0)==(12);
   if ($191) {
    $192 = $y;
    $193 = (($192) + 2)|0;
    $194 = $1;
    $195 = (($194) + ($193)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = ($197|0)>(64);
    if ($198) {
     label = 46;
     break;
    }
   }
   $199 = $y;
   $200 = (($199) + 1)|0;
   $201 = $1;
   $202 = (($201) + ($200)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203&255;
   $205 = $204 & 15;
   $206 = ($205|0)==(11);
   if ($206) {
    $207 = $y;
    $208 = (($207) + 2)|0;
    $209 = $1;
    $210 = (($209) + ($208)|0);
    $211 = HEAP8[$210>>0]|0;
    $212 = $211&255;
    $213 = ($212|0)>(127);
    if ($213) {
     label = 49;
     break;
    }
   }
   $214 = $y;
   $215 = (($214) + 1)|0;
   $216 = $1;
   $217 = (($216) + ($215)|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = $219 & 15;
   $221 = ($220|0)==(13);
   if ($221) {
    $222 = $y;
    $223 = (($222) + 2)|0;
    $224 = $1;
    $225 = (($224) + ($223)|0);
    $226 = HEAP8[$225>>0]|0;
    $227 = $226&255;
    $228 = ($227|0)>(64);
    if ($228) {
     label = 52;
     break;
    }
   }
   $229 = $y;
   $230 = $1;
   $231 = (($230) + ($229)|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232&255;
   $234 = $233 >> 2;
   $235 = $234 & 48;
   $236 = $y;
   $237 = (($236) + 2)|0;
   $238 = $1;
   $239 = (($238) + ($237)|0);
   $240 = HEAP8[$239>>0]|0;
   $241 = $240&255;
   $242 = $241 >> 4;
   $243 = $242 & 15;
   $244 = $235 | $243;
   $n = $244;
   $245 = $n;
   $246 = $o;
   $247 = ($245|0)>($246|0);
   if ($247) {
    label = 54;
    break;
   }
   $248 = $j;
   $249 = (($248) + 1)|0;
   $j = $249;
  }
  if ((label|0) == 41) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  else if ((label|0) == 43) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  else if ((label|0) == 46) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  else if ((label|0) == 49) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  else if ((label|0) == 52) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  else if ((label|0) == 54) {
   $0 = -1;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
  else if ((label|0) == 56) {
   $250 = $2;
   _pw_read_title(0,$250,0);
   $0 = 0;
   $251 = $0;
   STACKTOP = sp;return ($251|0);
  }
 }
 return (0)|0;
}
function _depack_unic2($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $fine = 0, $fxp = 0, $fxt = 0, $i = 0;
 var $ins = 0, $j = 0, $k = 0, $l = 0, $loop_status = 0, $maxpat = 0, $note = 0, $npat = 0, $or$cond = 0, $ssize = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 29|0;
 $0 = $in;
 $1 = $out;
 $fine = 0;
 $loop_status = 2;
 $ssize = 0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  $5 = $1;
  $6 = $0;
  if (!($4)) {
   break;
  }
  (_pw_move_data($5,$6,20)|0);
  $7 = $1;
  _write8($7,0);
  $8 = $1;
  _write8($8,0);
  $9 = $0;
  $10 = (_read8($9)|0);
  $c1 = $10;
  $11 = $0;
  $12 = (_read8($11)|0);
  $c2 = $12;
  $13 = $c1;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = $c2;
  $17 = $16&255;
  $18 = (($15) + ($17))|0;
  $j = $18;
  $19 = $j;
  $20 = ($19|0)!=(0);
  do {
   if ($20) {
    $21 = $j;
    $22 = ($21|0)<(256);
    $23 = $c2;
    $24 = $23&255;
    if ($22) {
     $25 = (16 - ($24))|0;
     $26 = $25&255;
     $fine = $26;
     break;
    } else {
     $27 = (256 - ($24))|0;
     $28 = $27&255;
     $fine = $28;
     break;
    }
   } else {
    $fine = 0;
   }
  } while(0);
  $29 = $1;
  $30 = $0;
  $31 = (_read16b($30)|0);
  $32 = $31&65535;
  $l = $32;
  $33 = $32&65535;
  _write16b($29,$33);
  $34 = $l;
  $35 = $34<<1;
  $36 = $ssize;
  $37 = (($36) + ($35))|0;
  $ssize = $37;
  $38 = $0;
  (_read8($38)|0);
  $39 = $1;
  $40 = $fine;
  _write8($39,$40);
  $41 = $1;
  $42 = $0;
  $43 = (_read8($42)|0);
  _write8($41,$43);
  $44 = $0;
  $45 = (_read16b($44)|0);
  $46 = $45&65535;
  $j = $46;
  $47 = $0;
  $48 = (_read16b($47)|0);
  $49 = $48&65535;
  $k = $49;
  $50 = $j;
  $51 = $50<<1;
  $52 = $k;
  $53 = (($51) + ($52))|0;
  $54 = $l;
  $55 = ($53|0)<=($54|0);
  $56 = $j;
  $57 = ($56|0)!=(0);
  $or$cond = $55 & $57;
  if ($or$cond) {
   $loop_status = 1;
   $58 = $j;
   $59 = $58<<1;
   $j = $59;
  }
  $60 = $1;
  $61 = $j;
  $62 = $61&65535;
  _write16b($60,$62);
  $63 = $1;
  $64 = $k;
  $65 = $64&65535;
  _write16b($63,$65);
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = (_read8($6)|0);
 $npat = $68;
 _write8($5,$68);
 $69 = $1;
 _write8($69,127);
 $70 = $0;
 (_read8($70)|0);
 $71 = $0;
 (_fread(($tmp|0),128,1,($71|0))|0);
 $72 = $1;
 (_fwrite(($tmp|0),128,1,($72|0))|0);
 $i = 0;
 $maxpat = 0;
 while(1) {
  $73 = $i;
  $74 = ($73|0)<(128);
  if (!($74)) {
   break;
  }
  $75 = $i;
  $76 = (($tmp) + ($75)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $maxpat;
  $80 = $79&255;
  $81 = ($78|0)>($80|0);
  if ($81) {
   $82 = $i;
   $83 = (($tmp) + ($82)|0);
   $84 = HEAP8[$83>>0]|0;
   $maxpat = $84;
  }
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 $87 = $maxpat;
 $88 = (($87) + 1)<<24>>24;
 $maxpat = $88;
 $89 = $1;
 _write32b($89,1294879534);
 $i = 0;
 while(1) {
  $90 = $i;
  $91 = $maxpat;
  $92 = $91&255;
  $93 = ($90|0)<($92|0);
  if (!($93)) {
   break;
  }
  $j = 0;
  while(1) {
   $94 = $j;
   $95 = ($94|0)<(256);
   if (!($95)) {
    break;
   }
   $96 = $0;
   $97 = (_read8($96)|0);
   $c1 = $97;
   $98 = $0;
   $99 = (_read8($98)|0);
   $c2 = $99;
   $100 = $0;
   $101 = (_read8($100)|0);
   $c3 = $101;
   $102 = $c1;
   $103 = $102&255;
   $104 = $103 >> 2;
   $105 = $104 & 16;
   $106 = $c2;
   $107 = $106&255;
   $108 = $107 >> 4;
   $109 = $108 & 15;
   $110 = $105 | $109;
   $111 = $110&255;
   $ins = $111;
   $112 = $c1;
   $113 = $112&255;
   $114 = $113 & 63;
   $115 = $114&255;
   $note = $115;
   $116 = $c2;
   $117 = $116&255;
   $118 = $117 & 15;
   $119 = $118&255;
   $fxt = $119;
   $120 = $c3;
   $fxp = $120;
   $121 = $fxt;
   $122 = $121&255;
   $123 = ($122|0)==(13);
   if ($123) {
    $124 = $fxp;
    $125 = $124&255;
    $126 = (($125|0) % 10)&-1;
    $127 = $126&255;
    $c4 = $127;
    $128 = $fxp;
    $129 = $128&255;
    $130 = (($129|0) / 10)&-1;
    $131 = $130&255;
    $c3 = $131;
    $132 = $c3;
    $133 = $132&255;
    $134 = $133<<4;
    $135 = $c4;
    $136 = $135&255;
    $137 = (($134) + ($136))|0;
    $138 = $137&255;
    $fxp = $138;
   }
   $139 = $ins;
   $140 = $139&255;
   $141 = $140 & 240;
   $142 = $141&255;
   $143 = $j;
   $144 = $143<<2;
   $145 = (($tmp) + ($144)|0);
   HEAP8[$145>>0] = $142;
   $146 = $note;
   $147 = $146&255;
   $148 = (8240 + ($147<<1)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $j;
   $152 = $151<<2;
   $153 = (($tmp) + ($152)|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = $155 | $150;
   $157 = $156&255;
   HEAP8[$153>>0] = $157;
   $158 = $note;
   $159 = $158&255;
   $160 = (8240 + ($159<<1)|0);
   $161 = ((($160)) + 1|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $j;
   $164 = $163<<2;
   $165 = (($164) + 1)|0;
   $166 = (($tmp) + ($165)|0);
   HEAP8[$166>>0] = $162;
   $167 = $ins;
   $168 = $167&255;
   $169 = $168 << 4;
   $170 = $169 & 240;
   $171 = $fxt;
   $172 = $171&255;
   $173 = $170 | $172;
   $174 = $173&255;
   $175 = $j;
   $176 = $175<<2;
   $177 = (($176) + 2)|0;
   $178 = (($tmp) + ($177)|0);
   HEAP8[$178>>0] = $174;
   $179 = $fxp;
   $180 = $j;
   $181 = $180<<2;
   $182 = (($181) + 3)|0;
   $183 = (($tmp) + ($182)|0);
   HEAP8[$183>>0] = $179;
   $184 = $j;
   $185 = (($184) + 1)|0;
   $j = $185;
  }
  $186 = $1;
  (_fwrite(($tmp|0),1024,1,($186|0))|0);
  $187 = $i;
  $188 = (($187) + 1)|0;
  $i = $188;
 }
 $189 = $1;
 $190 = $0;
 $191 = $ssize;
 (_pw_move_data($189,$190,$191)|0);
 STACKTOP = sp;return 0;
}
function _test_wn($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1082);
 do {
  if ($5) {
   $6 = $3;
   $7 = (1082 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 1080|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)!=(87);
   if (!($12)) {
    $13 = $1;
    $14 = ((($13)) + 1081|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ($16|0)!=(78);
    if (!($17)) {
     $18 = $start;
     $19 = (($18) + 951)|0;
     $20 = $1;
     $21 = (($20) + ($19)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = ($23|0)!=(127);
     if ($24) {
      $0 = -1;
      break;
     }
     $25 = $start;
     $26 = (($25) + 950)|0;
     $27 = $1;
     $28 = (($27) + ($26)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = ($30|0)>(127);
     if ($31) {
      $0 = -1;
      break;
     } else {
      $32 = $1;
      $33 = $2;
      _pw_read_title($32,$33,20);
      $0 = 0;
      break;
     }
    }
   }
   $0 = -1;
  }
 } while(0);
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _depack_wn($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0;
 var $max = 0, $npat = 0, $ssize = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $1;
 $3 = $0;
 (_pw_move_data($2,$3,950)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $0;
  if (!($5)) {
   break;
  }
  $7 = $i;
  $8 = ($7*30)|0;
  $9 = (42 + ($8))|0;
  (_fseek(($6|0),($9|0),0)|0);
  $10 = $0;
  $11 = (_read16b($10)|0);
  $12 = $11&65535;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 (_fseek(($6|0),950,0)|0);
 $18 = $1;
 $19 = $0;
 $20 = (_read8($19)|0);
 $npat = $20;
 _write8($18,$20);
 $21 = $0;
 (_fread(($tmp|0),129,1,($21|0))|0);
 $22 = $1;
 (_fwrite(($tmp|0),129,1,($22|0))|0);
 $23 = $1;
 _write32b($23,1294879534);
 $i = 0;
 $max = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(128);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $28 = (($tmp) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $max;
  $32 = $31&255;
  $33 = ($30|0)>($32|0);
  if ($33) {
   $34 = $i;
   $35 = (($34) + 1)|0;
   $36 = (($tmp) + ($35)|0);
   $37 = HEAP8[$36>>0]|0;
   $max = $37;
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = $max;
 $41 = (($40) + 1)<<24>>24;
 $max = $41;
 $42 = $0;
 (_fseek(($42|0),1084,0)|0);
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = $max;
  $45 = $44&255;
  $46 = ($43|0)<($45|0);
  if (!($46)) {
   break;
  }
  $j = 0;
  while(1) {
   $47 = $j;
   $48 = ($47|0)<(256);
   if (!($48)) {
    break;
   }
   $49 = $0;
   $50 = (_read8($49)|0);
   $c1 = $50;
   $51 = $0;
   $52 = (_read8($51)|0);
   $c2 = $52;
   $53 = $0;
   $54 = (_read8($53)|0);
   $c3 = $54;
   $55 = $0;
   $56 = (_read8($55)|0);
   $c4 = $56;
   $57 = $1;
   $58 = $c1;
   $59 = $58&255;
   $60 = ($59*240)|0;
   $61 = $c1;
   $62 = $61&255;
   $63 = (($62|0) / 2)&-1;
   $64 = (8240 + ($63<<1)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $60 | $66;
   $68 = $67&255;
   _write8($57,$68);
   $69 = $1;
   $70 = $c1;
   $71 = $70&255;
   $72 = (($71|0) / 2)&-1;
   $73 = (8240 + ($72<<1)|0);
   $74 = ((($73)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   _write8($69,$75);
   $76 = $1;
   $77 = $c2;
   $78 = $77&255;
   $79 = $78 << 4;
   $80 = $79 & 240;
   $81 = $c3;
   $82 = $81&255;
   $83 = $80 | $82;
   $84 = $83&255;
   _write8($76,$84);
   $85 = $1;
   $86 = $c4;
   _write8($85,$86);
   $87 = $j;
   $88 = (($87) + 1)|0;
   $j = $88;
  }
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 $91 = $1;
 $92 = $0;
 $93 = $ssize;
 (_pw_move_data($91,$92,$93)|0);
 STACKTOP = sp;return 0;
}
function _test_zen($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(505);
 if ($5) {
  $6 = $3;
  $7 = (505 - ($6))|0;
  $0 = $7;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = (_readmem32b($10)|0);
 $l = $11;
 $12 = $l;
 $13 = ($12|0)<(502);
 $14 = $l;
 $15 = ($14|0)>(2163190);
 $or$cond = $13 | $15;
 if ($or$cond) {
  $0 = -1;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 $k = 0;
 while(1) {
  $16 = $k;
  $17 = ($16|0)<(31);
  if (!($17)) {
   label = 12;
   break;
  }
  $18 = $start;
  $19 = (($18) + 9)|0;
  $20 = $k;
  $21 = $20<<4;
  $22 = (($19) + ($21))|0;
  $23 = $1;
  $24 = (($23) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)>(64);
  if ($27) {
   label = 8;
   break;
  }
  $28 = $1;
  $29 = $start;
  $30 = (($28) + ($29)|0);
  $31 = ((($30)) + 6|0);
  $32 = $k;
  $33 = $32<<4;
  $34 = (($31) + ($33)|0);
  $35 = (_readmem16b($34)|0);
  $36 = $35&65535;
  $37 = (($36|0) % 72)&-1;
  $38 = ($37|0)!=(0);
  if ($38) {
   label = 10;
   break;
  }
  $39 = $k;
  $40 = (($39) + 1)|0;
  $k = $40;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 else if ((label|0) == 12) {
  $n = 0;
  $k = 0;
  while(1) {
   $41 = $k;
   $42 = ($41|0)<(31);
   if (!($42)) {
    label = 21;
    break;
   }
   $43 = $1;
   $44 = $start;
   $45 = (($43) + ($44)|0);
   $46 = ((($45)) + 10|0);
   $47 = $k;
   $48 = $47<<4;
   $49 = (($46) + ($48)|0);
   $50 = (_readmem16b($49)|0);
   $51 = $50&65535;
   $52 = $51<<1;
   $o = $52;
   $53 = $1;
   $54 = $start;
   $55 = (($53) + ($54)|0);
   $56 = ((($55)) + 12|0);
   $57 = $k;
   $58 = $57<<4;
   $59 = (($56) + ($58)|0);
   $60 = (_readmem16b($59)|0);
   $61 = $60&65535;
   $62 = $61<<1;
   $m = $62;
   $63 = $1;
   $64 = $start;
   $65 = (($63) + ($64)|0);
   $66 = ((($65)) + 14|0);
   $67 = $k;
   $68 = $67<<4;
   $69 = (($66) + ($68)|0);
   $70 = (_readmem32b($69)|0);
   $j = $70;
   $71 = $o;
   $72 = ($71|0)>(65535);
   $73 = $m;
   $74 = ($73|0)>(65535);
   $or$cond3 = $72 | $74;
   if ($or$cond3) {
    label = 15;
    break;
   }
   $75 = $j;
   $76 = $l;
   $77 = ($75|0)<($76|0);
   if ($77) {
    label = 17;
    break;
   }
   $78 = $j;
   $79 = $n;
   $80 = ($78|0)>($79|0);
   if ($80) {
    $81 = $j;
    $n = $81;
    $82 = $o;
    $ssize = $82;
   }
   $83 = $k;
   $84 = (($83) + 1)|0;
   $k = $84;
  }
  if ((label|0) == 15) {
   $0 = -1;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  else if ((label|0) == 17) {
   $0 = -1;
   $124 = $0;
   STACKTOP = sp;return ($124|0);
  }
  else if ((label|0) == 21) {
   $85 = $start;
   $86 = (($85) + 5)|0;
   $87 = $1;
   $88 = (($87) + ($86)|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $j = $90;
   $91 = $j;
   $92 = ($91|0)>(127);
   $93 = $j;
   $94 = ($93|0)==(0);
   $or$cond5 = $92 | $94;
   if ($or$cond5) {
    $0 = -1;
    $124 = $0;
    STACKTOP = sp;return ($124|0);
   }
   $95 = $3;
   $96 = $start;
   $97 = $l;
   $98 = (($96) + ($97))|0;
   $99 = $j;
   $100 = $99<<2;
   $101 = (($98) + ($100))|0;
   $102 = (($101) + 4)|0;
   $103 = ($95|0)<($102|0);
   if ($103) {
    $104 = $start;
    $105 = $l;
    $106 = (($104) + ($105))|0;
    $107 = $j;
    $108 = $107<<2;
    $109 = (($106) + ($108))|0;
    $110 = (($109) + 4)|0;
    $111 = $3;
    $112 = (($110) - ($111))|0;
    $0 = $112;
    $124 = $0;
    STACKTOP = sp;return ($124|0);
   }
   $113 = $1;
   $114 = $start;
   $115 = (($113) + ($114)|0);
   $116 = $l;
   $117 = (($115) + ($116)|0);
   $118 = $j;
   $119 = $118<<2;
   $120 = (($117) + ($119)|0);
   $121 = (_readmem32b($120)|0);
   $122 = ($121|0)!=(-1);
   if ($122) {
    $0 = -1;
    $124 = $0;
    STACKTOP = sp;return ($124|0);
   } else {
    $123 = $2;
    _pw_read_title(0,$123,0);
    $0 = 0;
    $124 = $0;
    STACKTOP = sp;return ($124|0);
   }
  }
 }
 return (0)|0;
}
function _depack_zen($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $finetune = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0;
 var $note = 0, $paddr = 0, $paddr_Real = 0, $pat = 0, $pat_max = 0, $pat_pos = 0, $ptable = 0, $ptable_addr = 0, $sdata_addr = 0, $size = 0, $ssize = 0, $vol = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pat = sp + 1192|0;
 $ptable = sp + 1064|0;
 $paddr = sp + 536|0;
 $paddr_Real = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $sdata_addr = 999999;
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr_Real|0),0,512)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = (_read32b($2)|0);
 $ptable_addr = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $pat_max = $5;
 $6 = $0;
 $7 = (_read8($6)|0);
 $pat_pos = $7;
 $8 = $1;
 (_pw_write_zero($8,20)|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(31);
  $11 = $1;
  if (!($10)) {
   break;
  }
  (_pw_write_zero($11,22)|0);
  $12 = $0;
  $13 = (_read16b($12)|0);
  $14 = $13&65535;
  $15 = (($14|0) / 72)&-1;
  $16 = $15&255;
  $finetune = $16;
  $17 = $0;
  (_read8($17)|0);
  $18 = $0;
  $19 = (_read8($18)|0);
  $vol = $19;
  $20 = $1;
  $21 = $0;
  $22 = (_read16b($21)|0);
  $23 = $22&65535;
  $size = $23;
  $24 = $23&65535;
  _write16b($20,$24);
  $25 = $size;
  $26 = $25<<1;
  $27 = $ssize;
  $28 = (($27) + ($26))|0;
  $ssize = $28;
  $29 = $1;
  $30 = $finetune;
  _write8($29,$30);
  $31 = $1;
  $32 = $vol;
  _write8($31,$32);
  $33 = $0;
  $34 = (_read16b($33)|0);
  $35 = $34&65535;
  $size = $35;
  $36 = $0;
  $37 = (_read32b($36)|0);
  $k = $37;
  $38 = $k;
  $39 = $sdata_addr;
  $40 = ($38|0)<($39|0);
  if ($40) {
   $41 = $k;
   $sdata_addr = $41;
  }
  $42 = $0;
  $43 = (_read32b($42)|0);
  $44 = $k;
  $45 = (($43) - ($44))|0;
  $46 = (($45>>>0) / 2)&-1;
  $j = $46;
  $47 = $1;
  $48 = $j;
  $49 = $48&65535;
  _write16b($47,$49);
  $50 = $1;
  $51 = $size;
  $52 = $51&65535;
  _write16b($50,$52);
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $55 = $pat_pos;
 _write8($11,$55);
 $56 = $1;
 _write8($56,127);
 $57 = $0;
 $58 = $ptable_addr;
 (_fseek(($57|0),($58|0),0)|0);
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = $pat_pos;
  $61 = $60&255;
  $62 = ($59|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $0;
  $64 = (_read32b($63)|0);
  $65 = $i;
  $66 = (($paddr) + ($65<<2)|0);
  HEAP32[$66>>2] = $64;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $c4 = 0;
 $i = 0;
 while(1) {
  $69 = $i;
  $70 = $pat_pos;
  $71 = $70&255;
  $72 = ($69|0)<($71|0);
  if (!($72)) {
   break;
  }
  $73 = $i;
  $74 = ($73|0)==(0);
  if ($74) {
   HEAP8[$ptable>>0] = 0;
   $75 = HEAP32[$paddr>>2]|0;
   HEAP32[$paddr_Real>>2] = $75;
   $76 = $c4;
   $77 = (($76) + 1)<<24>>24;
   $c4 = $77;
  } else {
   $j = 0;
   while(1) {
    $78 = $j;
    $79 = $i;
    $80 = ($78|0)<($79|0);
    if (!($80)) {
     break;
    }
    $81 = $i;
    $82 = (($paddr) + ($81<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $j;
    $85 = (($paddr) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($83|0)==($86|0);
    $88 = $j;
    if ($87) {
     label = 16;
     break;
    }
    $93 = (($88) + 1)|0;
    $j = $93;
   }
   if ((label|0) == 16) {
    label = 0;
    $89 = (($ptable) + ($88)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $i;
    $92 = (($ptable) + ($91)|0);
    HEAP8[$92>>0] = $90;
   }
   $94 = $j;
   $95 = $i;
   $96 = ($94|0)==($95|0);
   if ($96) {
    $97 = $i;
    $98 = (($paddr) + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $c4;
    $101 = $100&255;
    $102 = (($paddr_Real) + ($101<<2)|0);
    HEAP32[$102>>2] = $99;
    $103 = $c4;
    $104 = $i;
    $105 = (($ptable) + ($104)|0);
    HEAP8[$105>>0] = $103;
    $106 = $c4;
    $107 = (($106) + 1)<<24>>24;
    $c4 = $107;
   }
  }
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 $110 = $1;
 (_fwrite(($ptable|0),128,1,($110|0))|0);
 $111 = $1;
 _write32b($111,1294879534);
 $i = 0;
 while(1) {
  $112 = $i;
  $113 = $pat_max;
  $114 = $113&255;
  $115 = ($112|0)<=($114|0);
  if (!($115)) {
   break;
  }
  _memset(($pat|0),0,1024)|0;
  $116 = $0;
  $117 = $i;
  $118 = (($paddr_Real) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  (_fseek(($116|0),($119|0),0)|0);
  $j = 0;
  while(1) {
   $120 = $j;
   $121 = ($120|0)<(256);
   if (!($121)) {
    break;
   }
   $122 = $0;
   $123 = (_read8($122)|0);
   $c1 = $123;
   $124 = $0;
   $125 = (_read8($124)|0);
   $c2 = $125;
   $126 = $0;
   $127 = (_read8($126)|0);
   $c3 = $127;
   $128 = $0;
   $129 = (_read8($128)|0);
   $c4 = $129;
   $130 = $c2;
   $131 = $130&255;
   $132 = $131 & 127;
   $133 = (($132|0) / 2)&-1;
   $134 = $133&255;
   $note = $134;
   $135 = $c4;
   $fxp = $135;
   $136 = $c2;
   $137 = $136&255;
   $138 = $137 << 4;
   $139 = $138 & 16;
   $140 = $c3;
   $141 = $140&255;
   $142 = $141 >> 4;
   $143 = $142 & 15;
   $144 = $139 | $143;
   $145 = $144&255;
   $ins = $145;
   $146 = $c3;
   $147 = $146&255;
   $148 = $147 & 15;
   $149 = $148&255;
   $fxt = $149;
   $150 = $c1;
   $151 = $150&255;
   $k = $151;
   $152 = $ins;
   $153 = $152&255;
   $154 = $153 & 240;
   $155 = $154&255;
   $156 = $k;
   $157 = $156<<2;
   $158 = (($pat) + ($157)|0);
   HEAP8[$158>>0] = $155;
   $159 = $note;
   $160 = $159&255;
   $161 = (8240 + ($160<<1)|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = $k;
   $165 = $164<<2;
   $166 = (($pat) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = $168 | $163;
   $170 = $169&255;
   HEAP8[$166>>0] = $170;
   $171 = $note;
   $172 = $171&255;
   $173 = (8240 + ($172<<1)|0);
   $174 = ((($173)) + 1|0);
   $175 = HEAP8[$174>>0]|0;
   $176 = $k;
   $177 = $176<<2;
   $178 = (($177) + 1)|0;
   $179 = (($pat) + ($178)|0);
   HEAP8[$179>>0] = $175;
   $180 = $fxt;
   $181 = $180&255;
   $182 = $ins;
   $183 = $182&255;
   $184 = $183 << 4;
   $185 = $184 & 240;
   $186 = $181 | $185;
   $187 = $186&255;
   $188 = $k;
   $189 = $188<<2;
   $190 = (($189) + 2)|0;
   $191 = (($pat) + ($190)|0);
   HEAP8[$191>>0] = $187;
   $192 = $fxp;
   $193 = $k;
   $194 = $193<<2;
   $195 = (($194) + 3)|0;
   $196 = (($pat) + ($195)|0);
   HEAP8[$196>>0] = $192;
   $197 = $c1;
   $198 = $197&255;
   $j = $198;
   $199 = $j;
   $200 = (($199) + 1)|0;
   $j = $200;
  }
  $201 = $1;
  (_fwrite(($pat|0),1024,1,($201|0))|0);
  $202 = $i;
  $203 = (($202) + 1)|0;
  $i = $203;
 }
 $204 = $0;
 $205 = $sdata_addr;
 (_fseek(($204|0),($205|0),0)|0);
 $206 = $1;
 $207 = $0;
 $208 = $ssize;
 (_pw_move_data($206,$207,$208)|0);
 STACKTOP = sp;return 0;
}
function _test_tp3($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1024);
 if ($5) {
  $6 = $3;
  $7 = (1024 - ($6))|0;
  $0 = $7;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $8 = $1;
 $9 = (_memcmp($8,10744,8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $11 = $1;
 $12 = $start;
 $13 = (($11) + ($12)|0);
 $14 = ((($13)) + 28|0);
 $15 = (_readmem16b($14)|0);
 $16 = $15&65535;
 $l = $16;
 $17 = $l;
 $18 = $17 & 7;
 $19 = ($18|0)!=(0);
 $20 = $l;
 $21 = ($20|0)==(0);
 $or$cond = $19 | $21;
 if ($or$cond) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $22 = $l;
 $23 = (($22|0) / 8)&-1;
 $l = $23;
 $k = 0;
 while(1) {
  $24 = $k;
  $25 = $l;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $start;
  $28 = (($27) + 30)|0;
  $29 = $k;
  $30 = $29<<3;
  $31 = (($28) + ($30))|0;
  $32 = $1;
  $33 = (($32) + ($31)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)>(15);
  if ($36) {
   label = 10;
   break;
  }
  $37 = $k;
  $38 = (($37) + 1)|0;
  $k = $38;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $k = 0;
 while(1) {
  $39 = $k;
  $40 = $l;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $start;
  $43 = (($42) + 31)|0;
  $44 = $k;
  $45 = $44<<3;
  $46 = (($43) + ($45))|0;
  $47 = $1;
  $48 = (($47) + ($46)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)>(64);
  if ($51) {
   label = 15;
   break;
  }
  $52 = $k;
  $53 = (($52) + 1)|0;
  $k = $53;
 }
 if ((label|0) == 15) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $ssize = 0;
 $k = 0;
 while(1) {
  $54 = $k;
  $55 = $l;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   label = 26;
   break;
  }
  $57 = $start;
  $58 = $k;
  $59 = $58<<3;
  $60 = (($57) + ($59))|0;
  $x = $60;
  $61 = $1;
  $62 = $x;
  $63 = (($61) + ($62)|0);
  $64 = ((($63)) + 32|0);
  $65 = (_readmem16b($64)|0);
  $66 = $65&65535;
  $67 = $66<<1;
  $j = $67;
  $68 = $1;
  $69 = $x;
  $70 = (($68) + ($69)|0);
  $71 = ((($70)) + 34|0);
  $72 = (_readmem16b($71)|0);
  $73 = $72&65535;
  $74 = $73<<1;
  $m = $74;
  $75 = $1;
  $76 = $x;
  $77 = (($75) + ($76)|0);
  $78 = ((($77)) + 36|0);
  $79 = (_readmem16b($78)|0);
  $80 = $79&65535;
  $81 = $80<<1;
  $n = $81;
  $82 = $j;
  $83 = ($82|0)>(65535);
  $84 = $m;
  $85 = ($84|0)>(65535);
  $or$cond3 = $83 | $85;
  $86 = $n;
  $87 = ($86|0)>(65535);
  $or$cond5 = $or$cond3 | $87;
  if ($or$cond5) {
   label = 20;
   break;
  }
  $88 = $m;
  $89 = $n;
  $90 = (($88) + ($89))|0;
  $91 = $j;
  $92 = (($91) + 2)|0;
  $93 = ($90|0)>($92|0);
  if ($93) {
   label = 22;
   break;
  }
  $94 = $m;
  $95 = ($94|0)!=(0);
  $96 = $n;
  $97 = ($96|0)==(0);
  $or$cond7 = $95 & $97;
  if ($or$cond7) {
   label = 24;
   break;
  }
  $98 = $j;
  $99 = $ssize;
  $100 = (($99) + ($98))|0;
  $ssize = $100;
  $101 = $k;
  $102 = (($101) + 1)|0;
  $k = $102;
 }
 if ((label|0) == 20) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 22) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 24) {
  $0 = -1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 else if ((label|0) == 26) {
  $103 = $ssize;
  $104 = ($103|0)<=(4);
  if ($104) {
   $0 = -1;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
  $105 = $start;
  $106 = $l;
  $107 = $106<<3;
  $108 = (($105) + ($107))|0;
  $109 = (($108) + 31)|0;
  $110 = $1;
  $111 = (($110) + ($109)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $j = $113;
  $114 = $l;
  $115 = ($114|0)==(0);
  $116 = $l;
  $117 = ($116|0)>(128);
  $or$cond9 = $115 | $117;
  if ($or$cond9) {
   $0 = -1;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  } else {
   $118 = $1;
   $119 = ((($118)) + 8|0);
   $120 = $2;
   _pw_read_title($119,$120,20);
   $0 = 0;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
 }
 return (0)|0;
}
function _depack_tp3($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $len = 0, $max_trk_ofs = 0, $note = 0, $npat = 0, $nsmp = 0, $pat_ofs = 0, $pdata = 0, $pnum = 0;
 var $size = 0, $ssize = 0, $tmp = 0, $trk_ofs = 0, $where = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 3184|0;
 $pdata = sp + 2160|0;
 $tmp = sp + 2104|0;
 $trk_ofs = sp + 40|0;
 $0 = $in;
 $1 = $out;
 $i = 0;
 $j = 0;
 $pat_ofs = 999999;
 $ssize = 0;
 $max_trk_ofs = 0;
 _memset(($trk_ofs|0),0,2048)|0;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_fseek(($2|0),8,1)|0);
 $3 = $1;
 $4 = $0;
 (_pw_move_data($3,$4,20)|0);
 $5 = $0;
 $6 = (_read16b($5)|0);
 $7 = $6&65535;
 $8 = (($7|0) / 8)&-1;
 $9 = $8&255;
 $nsmp = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $nsmp;
  $12 = $11&255;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $1;
  (_pw_write_zero($14,22)|0);
  $15 = $0;
  $16 = (_read8($15)|0);
  $c3 = $16;
  $17 = $0;
  $18 = (_read8($17)|0);
  $c4 = $18;
  $19 = $1;
  $20 = $0;
  $21 = (_read16b($20)|0);
  $22 = $21&65535;
  $size = $22;
  $23 = $22&65535;
  _write16b($19,$23);
  $24 = $size;
  $25 = $24<<1;
  $26 = $ssize;
  $27 = (($26) + ($25))|0;
  $ssize = $27;
  $28 = $1;
  $29 = $c3;
  _write8($28,$29);
  $30 = $1;
  $31 = $c4;
  _write8($30,$31);
  $32 = $1;
  $33 = $0;
  $34 = (_read16b($33)|0);
  _write16b($32,$34);
  $35 = $1;
  $36 = $0;
  $37 = (_read16b($36)|0);
  _write16b($35,$37);
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $40 = ((($tmp)) + 29|0);
 HEAP8[$40>>0] = 1;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(31);
  if (!($42)) {
   break;
  }
  $43 = $1;
  (_fwrite(($tmp|0),30,1,($43|0))|0);
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $0;
 (_read8($46)|0);
 $47 = $1;
 $48 = $0;
 $49 = (_read8($48)|0);
 $len = $49;
 _write8($47,$49);
 $50 = $1;
 _write8($50,127);
 $i = 0;
 $npat = 0;
 while(1) {
  $51 = $i;
  $52 = $len;
  $53 = $52&255;
  $54 = ($51|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = $0;
  $56 = (_read16b($55)|0);
  $57 = $56&65535;
  $58 = (($57|0) / 8)&-1;
  $59 = $58&255;
  $60 = $i;
  $61 = (($pnum) + ($60)|0);
  HEAP8[$61>>0] = $59;
  $62 = $i;
  $63 = (($pnum) + ($62)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $npat;
  $67 = $66&255;
  $68 = ($65|0)>($67|0);
  if ($68) {
   $69 = $i;
   $70 = (($pnum) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $npat = $71;
  }
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = $npat;
  $76 = $75&255;
  $77 = ($74|0)<=($76|0);
  if (!($77)) {
   break;
  }
  $j = 0;
  while(1) {
   $78 = $j;
   $79 = ($78|0)<(4);
   if (!($79)) {
    break;
   }
   $80 = $0;
   $81 = (_read16b($80)|0);
   $82 = $81&65535;
   $83 = $j;
   $84 = $i;
   $85 = (($trk_ofs) + ($84<<4)|0);
   $86 = (($85) + ($83<<2)|0);
   HEAP32[$86>>2] = $82;
   $87 = $j;
   $88 = $i;
   $89 = (($trk_ofs) + ($88<<4)|0);
   $90 = (($89) + ($87<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $max_trk_ofs;
   $93 = ($91|0)>($92|0);
   if ($93) {
    $94 = $j;
    $95 = $i;
    $96 = (($trk_ofs) + ($95<<4)|0);
    $97 = (($96) + ($94<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $max_trk_ofs = $98;
   }
   $99 = $j;
   $100 = (($99) + 1)|0;
   $j = $100;
  }
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 $103 = $1;
 (_fwrite(($pnum|0),128,1,($103|0))|0);
 $104 = $1;
 _write32b($104,1294879534);
 $105 = $0;
 $106 = (_ftell(($105|0))|0);
 $107 = (($106) + 2)|0;
 $pat_ofs = $107;
 $i = 0;
 while(1) {
  $108 = $i;
  $109 = $npat;
  $110 = $109&255;
  $111 = ($108|0)<=($110|0);
  if (!($111)) {
   break;
  }
  _memset(($pdata|0),0,1024)|0;
  $j = 0;
  while(1) {
   $112 = $j;
   $113 = ($112|0)<(4);
   if (!($113)) {
    break;
   }
   $114 = $0;
   $115 = $pat_ofs;
   $116 = $j;
   $117 = $i;
   $118 = (($trk_ofs) + ($117<<4)|0);
   $119 = (($118) + ($116<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($115) + ($120))|0;
   (_fseek(($114|0),($121|0),0)|0);
   $k = 0;
   while(1) {
    $122 = $k;
    $123 = ($122|0)<(64);
    if (!($123)) {
     break;
    }
    $124 = $k;
    $125 = $124<<4;
    $126 = $j;
    $127 = $126<<2;
    $128 = (($125) + ($127))|0;
    $x = $128;
    $129 = $0;
    $130 = (_read8($129)|0);
    $c1 = $130;
    $131 = $c1;
    $132 = $131&255;
    $133 = $132 & 192;
    $134 = ($133|0)==(192);
    $135 = $c1;
    $136 = $135&255;
    do {
     if ($134) {
      $137 = (256 - ($136))|0;
      $138 = $k;
      $139 = (($138) + ($137))|0;
      $k = $139;
      $140 = $k;
      $141 = (($140) - 1)|0;
      $k = $141;
     } else {
      $142 = $136 & 192;
      $143 = ($142|0)==(128);
      $144 = $0;
      $145 = (_read8($144)|0);
      $c2 = $145;
      if ($143) {
       $146 = $c1;
       $147 = $146&255;
       $148 = $147 >> 1;
       $149 = $148 & 15;
       $150 = $149&255;
       $fxt = $150;
       $151 = $c2;
       $fxp = $151;
       $152 = $fxt;
       $153 = $152&255;
       $154 = ($153|0)==(5);
       if ($154) {
        label = 32;
       } else {
        $155 = $fxt;
        $156 = $155&255;
        $157 = ($156|0)==(6);
        if ($157) {
         label = 32;
        } else {
         $158 = $fxt;
         $159 = $158&255;
         $160 = ($159|0)==(10);
         if ($160) {
          label = 32;
         }
        }
       }
       do {
        if ((label|0) == 32) {
         label = 0;
         $161 = $fxp;
         $162 = $161&255;
         $163 = ($162|0)>(128);
         $164 = $fxp;
         $165 = $164&255;
         if ($163) {
          $166 = (256 - ($165))|0;
          $167 = $166&255;
          $fxp = $167;
          break;
         }
         $168 = ($165|0)<=(128);
         if ($168) {
          $169 = $fxp;
          $170 = $169&255;
          $171 = $170 << 4;
          $172 = $171 & 240;
          $173 = $172&255;
          $fxp = $173;
         }
        }
       } while(0);
       $174 = $fxt;
       $175 = $174&255;
       $176 = ($175|0)==(8);
       if ($176) {
        $fxt = 0;
       }
       $177 = $fxt;
       $178 = $x;
       $179 = (($178) + 2)|0;
       $180 = (($pdata) + ($179)|0);
       HEAP8[$180>>0] = $177;
       $181 = $fxp;
       $182 = $x;
       $183 = (($182) + 3)|0;
       $184 = (($pdata) + ($183)|0);
       HEAP8[$184>>0] = $181;
       break;
      }
      $185 = $c2;
      $186 = $185&255;
      $187 = $186 >> 4;
      $188 = $187 & 15;
      $189 = $c1;
      $190 = $189&255;
      $191 = $190 >> 2;
      $192 = $191 & 16;
      $193 = $188 | $192;
      $194 = $193&255;
      $ins = $194;
      $195 = $c1;
      $196 = $195&255;
      $197 = $196 & 64;
      $198 = ($197|0)==(64);
      $199 = $c1;
      $200 = $199&255;
      if ($198) {
       $201 = (127 - ($200))|0;
       $202 = $201&255;
       $note = $202;
      } else {
       $203 = $200 & 63;
       $204 = $203&255;
       $note = $204;
      }
      $205 = $c2;
      $206 = $205&255;
      $207 = $206 & 15;
      $208 = $207&255;
      $fxt = $208;
      $209 = $fxt;
      $210 = $209&255;
      $211 = ($210|0)==(0);
      if ($211) {
       $212 = $ins;
       $213 = $212&255;
       $214 = $213 & 240;
       $215 = $214&255;
       $216 = $x;
       $217 = (($pdata) + ($216)|0);
       HEAP8[$217>>0] = $215;
       $218 = $note;
       $219 = $218&255;
       $220 = (8240 + ($219<<1)|0);
       $221 = HEAP8[$220>>0]|0;
       $222 = $221&255;
       $223 = $x;
       $224 = (($pdata) + ($223)|0);
       $225 = HEAP8[$224>>0]|0;
       $226 = $225&255;
       $227 = $226 | $222;
       $228 = $227&255;
       HEAP8[$224>>0] = $228;
       $229 = $note;
       $230 = $229&255;
       $231 = (8240 + ($230<<1)|0);
       $232 = ((($231)) + 1|0);
       $233 = HEAP8[$232>>0]|0;
       $234 = $x;
       $235 = (($234) + 1)|0;
       $236 = (($pdata) + ($235)|0);
       HEAP8[$236>>0] = $233;
       $237 = $ins;
       $238 = $237&255;
       $239 = $238 << 4;
       $240 = $239 & 240;
       $241 = $240&255;
       $242 = $x;
       $243 = (($242) + 2)|0;
       $244 = (($pdata) + ($243)|0);
       HEAP8[$244>>0] = $241;
       break;
      }
      $245 = $0;
      $246 = (_read8($245)|0);
      $c3 = $246;
      $247 = $fxt;
      $248 = $247&255;
      $249 = ($248|0)==(8);
      if ($249) {
       $fxt = 0;
      }
      $250 = $c3;
      $fxp = $250;
      $251 = $fxt;
      $252 = $251&255;
      $253 = ($252|0)==(5);
      if ($253) {
       label = 49;
      } else {
       $254 = $fxt;
       $255 = $254&255;
       $256 = ($255|0)==(6);
       if ($256) {
        label = 49;
       } else {
        $257 = $fxt;
        $258 = $257&255;
        $259 = ($258|0)==(10);
        if ($259) {
         label = 49;
        }
       }
      }
      do {
       if ((label|0) == 49) {
        label = 0;
        $260 = $fxp;
        $261 = $260&255;
        $262 = ($261|0)>(128);
        $263 = $fxp;
        $264 = $263&255;
        if ($262) {
         $265 = (256 - ($264))|0;
         $266 = $265&255;
         $fxp = $266;
         break;
        }
        $267 = ($264|0)<=(128);
        if ($267) {
         $268 = $fxp;
         $269 = $268&255;
         $270 = $269 << 4;
         $271 = $270 & 240;
         $272 = $271&255;
         $fxp = $272;
        }
       }
      } while(0);
      $273 = $ins;
      $274 = $273&255;
      $275 = $274 & 240;
      $276 = $275&255;
      $277 = $x;
      $278 = (($pdata) + ($277)|0);
      HEAP8[$278>>0] = $276;
      $279 = $note;
      $280 = $279&255;
      $281 = (8240 + ($280<<1)|0);
      $282 = HEAP8[$281>>0]|0;
      $283 = $282&255;
      $284 = $x;
      $285 = (($pdata) + ($284)|0);
      $286 = HEAP8[$285>>0]|0;
      $287 = $286&255;
      $288 = $287 | $283;
      $289 = $288&255;
      HEAP8[$285>>0] = $289;
      $290 = $note;
      $291 = $290&255;
      $292 = (8240 + ($291<<1)|0);
      $293 = ((($292)) + 1|0);
      $294 = HEAP8[$293>>0]|0;
      $295 = $x;
      $296 = (($295) + 1)|0;
      $297 = (($pdata) + ($296)|0);
      HEAP8[$297>>0] = $294;
      $298 = $ins;
      $299 = $298&255;
      $300 = $299 << 4;
      $301 = $300 & 240;
      $302 = $301&255;
      $303 = $x;
      $304 = (($303) + 2)|0;
      $305 = (($pdata) + ($304)|0);
      HEAP8[$305>>0] = $302;
      $306 = $fxt;
      $307 = $306&255;
      $308 = $x;
      $309 = (($308) + 2)|0;
      $310 = (($pdata) + ($309)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $312 | $307;
      $314 = $313&255;
      HEAP8[$310>>0] = $314;
      $315 = $fxp;
      $316 = $x;
      $317 = (($316) + 3)|0;
      $318 = (($pdata) + ($317)|0);
      HEAP8[$318>>0] = $315;
     }
    } while(0);
    $319 = $k;
    $320 = (($319) + 1)|0;
    $k = $320;
   }
   $321 = $0;
   $322 = (_ftell(($321|0))|0);
   $where = $322;
   $323 = $where;
   $324 = $max_trk_ofs;
   $325 = ($323|0)>($324|0);
   if ($325) {
    $326 = $where;
    $max_trk_ofs = $326;
   }
   $327 = $j;
   $328 = (($327) + 1)|0;
   $j = $328;
  }
  $329 = $1;
  (_fwrite(($pdata|0),1024,1,($329|0))|0);
  $330 = $i;
  $331 = (($330) + 1)|0;
  $i = $331;
 }
 $332 = $max_trk_ofs;
 $333 = $332 & 1;
 $334 = ($333|0)!=(0);
 if (!($334)) {
  $337 = $0;
  $338 = $max_trk_ofs;
  (_fseek(($337|0),($338|0),0)|0);
  $339 = $1;
  $340 = $0;
  $341 = $ssize;
  (_pw_move_data($339,$340,$341)|0);
  STACKTOP = sp;return 0;
 }
 $335 = $max_trk_ofs;
 $336 = (($335) + 1)|0;
 $max_trk_ofs = $336;
 $337 = $0;
 $338 = $max_trk_ofs;
 (_fseek(($337|0),($338|0),0)|0);
 $339 = $1;
 $340 = $0;
 $341 = $ssize;
 (_pw_move_data($339,$340,$341)|0);
 STACKTOP = sp;return 0;
}
function _test_p4x($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $1;
 $5 = (_readmem32b($4)|0);
 $id = $5;
 $6 = $id;
 $7 = ($6|0)!=(1345597505);
 $8 = $id;
 $9 = ($8|0)!=(1345597506);
 $or$cond = $7 & $9;
 $10 = $id;
 $11 = ($10|0)!=(1345597761);
 $or$cond3 = $or$cond & $11;
 if ($or$cond3) {
  $0 = -1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = $2;
  _pw_read_title(0,$12,0);
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _depack_p4x($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SampleAddress = 0, $SampleSize = 0, $a = 0, $b = 0, $c = 0;
 var $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $i = 0, $id = 0, $ins = 0, $j = 0, $k = 0, $l = 0, $len = 0, $mynote = 0, $note = 0, $npat = 0, $nsmp = 0, $or$cond = 0, $sample = 0, $smp_ofs = 0, $ssize = 0;
 var $tmp = 0, $tr = 0, $track_addr = 0, $trkdat_ofs = 0, $trktab_ofs = 0, $x = 0, $x1 = 0, $y = 0, $y2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 133504|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 132472|0;
 $note = sp + 132464|0;
 $tr = sp + 1392|0;
 $track_addr = sp + 368|0;
 $SampleAddress = sp + 216|0;
 $SampleSize = sp + 92|0;
 $ins = sp + 20|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($track_addr|0),0,1024)|0;
 _memset(($tr|0),0,131072)|0;
 dest=$SampleAddress; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$SampleSize; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = (_read32b($2)|0);
 $id = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $npat = $5;
 $6 = $0;
 $7 = (_read8($6)|0);
 $len = $7;
 $8 = $0;
 $9 = (_read8($8)|0);
 $nsmp = $9;
 $10 = $0;
 (_read8($10)|0);
 $11 = $0;
 $12 = (_read32b($11)|0);
 $trkdat_ofs = $12;
 $13 = $0;
 $14 = (_read32b($13)|0);
 $trktab_ofs = $14;
 $15 = $0;
 $16 = (_read32b($15)|0);
 $smp_ofs = $16;
 $17 = $1;
 (_pw_write_zero($17,20)|0);
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $nsmp;
  $20 = $19&255;
  $21 = ($18|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $0;
  $23 = (_read32b($22)|0);
  $24 = ((($ins)) + 24|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($ins)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $i;
  $28 = (($SampleAddress) + ($27<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = $0;
  $30 = (_read16b($29)|0);
  $31 = ((($ins)) + 28|0);
  HEAP16[$31>>1] = $30;
  $32 = ((($ins)) + 28|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = $34<<1;
  $36 = $i;
  $37 = (($SampleSize) + ($36<<2)|0);
  HEAP32[$37>>2] = $35;
  $38 = $i;
  $39 = (($SampleSize) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $ssize;
  $42 = (($41) + ($40))|0;
  $ssize = $42;
  $43 = $0;
  $44 = (_read32b($43)|0);
  $45 = ((($ins)) + 32|0);
  HEAP32[$45>>2] = $44;
  $46 = $0;
  $47 = (_read16b($46)|0);
  $48 = ((($ins)) + 36|0);
  HEAP16[$48>>1] = $47;
  $49 = ((($ins)) + 38|0);
  HEAP16[$49>>1] = 0;
  $50 = $id;
  $51 = ($50|0)==(1345597505);
  $52 = $id;
  $53 = ($52|0)==(1345597506);
  $or$cond = $51 | $53;
  if ($or$cond) {
   $54 = $0;
   $55 = (_read16b($54)|0);
   $56 = ((($ins)) + 38|0);
   HEAP16[$56>>1] = $55;
  }
  $57 = $0;
  (_read8($57)|0);
  $58 = $0;
  $59 = (_read8($58)|0);
  $60 = ((($ins)) + 40|0);
  HEAP8[$60>>0] = $59;
  $61 = $id;
  $62 = ($61|0)==(1345597761);
  if ($62) {
   $63 = $0;
   $64 = (_read16b($63)|0);
   $65 = ((($ins)) + 38|0);
   HEAP16[$65>>1] = $64;
  }
  $66 = $1;
  (_pw_write_zero($66,22)|0);
  $67 = $1;
  $68 = ((($ins)) + 28|0);
  $69 = HEAP16[$68>>1]|0;
  _write16b($67,$69);
  $70 = $1;
  $71 = ((($ins)) + 38|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = (($73|0) / 74)&-1;
  $75 = $74&255;
  _write8($70,$75);
  $76 = $1;
  $77 = ((($ins)) + 40|0);
  $78 = HEAP8[$77>>0]|0;
  _write8($76,$78);
  $79 = $1;
  $80 = ((($ins)) + 32|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($ins)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) - ($83))|0;
  $85 = (($84|0) / 2)&-1;
  $86 = $85&65535;
  _write16b($79,$86);
  $87 = $1;
  $88 = ((($ins)) + 36|0);
  $89 = HEAP16[$88>>1]|0;
  _write16b($87,$89);
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $92 = ((($tmp)) + 29|0);
 HEAP8[$92>>0] = 1;
 while(1) {
  $93 = $i;
  $94 = ($93|0)<(31);
  if (!($94)) {
   break;
  }
  $95 = $1;
  (_fwrite(($tmp|0),30,1,($95|0))|0);
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $98 = $1;
 $99 = $len;
 _write8($98,$99);
 $100 = $1;
 _write8($100,127);
 $101 = $0;
 $102 = $trktab_ofs;
 $103 = (($102) + 4)|0;
 (_fseek(($101|0),($103|0),0)|0);
 $c1 = 0;
 while(1) {
  $104 = $c1;
  $105 = $104&255;
  $106 = $len;
  $107 = $106&255;
  $108 = ($105|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $1;
  $110 = $c1;
  _write8($109,$110);
  $111 = $c1;
  $112 = (($111) + 1)<<24>>24;
  $c1 = $112;
 }
 while(1) {
  $113 = $c1;
  $114 = $113&255;
  $115 = ($114|0)<(128);
  $116 = $1;
  if (!($115)) {
   break;
  }
  _write8($116,0);
  $117 = $c1;
  $118 = (($117) + 1)<<24>>24;
  $c1 = $118;
 }
 _write32b($116,1294879534);
 $i = 0;
 while(1) {
  $119 = $i;
  $120 = $len;
  $121 = $120&255;
  $122 = ($119|0)<($121|0);
  if (!($122)) {
   break;
  }
  $j = 0;
  while(1) {
   $123 = $j;
   $124 = ($123|0)<(4);
   if (!($124)) {
    break;
   }
   $125 = $0;
   $126 = (_read16b($125)|0);
   $127 = $126&65535;
   $128 = $trkdat_ofs;
   $129 = (($127) + ($128))|0;
   $130 = (($129) + 4)|0;
   $131 = $130&65535;
   $132 = $j;
   $133 = $i;
   $134 = (($track_addr) + ($133<<3)|0);
   $135 = (($134) + ($132<<1)|0);
   HEAP16[$135>>1] = $131;
   $136 = $j;
   $137 = (($136) + 1)|0;
   $j = $137;
  }
  $138 = $i;
  $139 = (($138) + 1)|0;
  $i = $139;
 }
 $140 = $0;
 $141 = $trkdat_ofs;
 $142 = (($141) + 4)|0;
 (_fseek(($140|0),($142|0),0)|0);
 $i = 0;
 while(1) {
  $143 = $i;
  $144 = $len;
  $145 = $144&255;
  $146 = ($143|0)<($145|0);
  if (!($146)) {
   break;
  }
  $j = 0;
  while(1) {
   $147 = $j;
   $148 = ($147|0)<(4);
   $149 = $i;
   if (!($148)) {
    break;
   }
   $150 = $149<<2;
   $151 = $j;
   $152 = (($150) + ($151))|0;
   $x = $152;
   $153 = $0;
   $154 = $j;
   $155 = $i;
   $156 = (($track_addr) + ($155<<3)|0);
   $157 = (($156) + ($154<<1)|0);
   $158 = HEAP16[$157>>1]|0;
   $159 = $158 << 16 >> 16;
   (_fseek(($153|0),($159|0),0)|0);
   $k = 0;
   while(1) {
    $160 = $k;
    $161 = ($160|0)<(64);
    if (!($161)) {
     break;
    }
    $162 = $0;
    $163 = (_read8($162)|0);
    $c1 = $163;
    $164 = $0;
    $165 = (_read8($164)|0);
    $c2 = $165;
    $166 = $0;
    $167 = (_read8($166)|0);
    $c3 = $167;
    $168 = $0;
    $169 = (_read8($168)|0);
    $c4 = $169;
    $170 = $c1;
    $171 = $170&255;
    $172 = ($171|0)!=(128);
    if ($172) {
     $173 = $c1;
     $174 = $173&255;
     $175 = $174 << 4;
     $176 = $175 & 16;
     $177 = $c2;
     $178 = $177&255;
     $179 = $178 >> 4;
     $180 = $179 & 15;
     $181 = $176 | $180;
     $182 = $181&255;
     $sample = $182;
     ;HEAP8[$note>>0]=0|0;HEAP8[$note+1>>0]=0|0;
     $183 = $c1;
     $184 = $183&255;
     $185 = $184 & 127;
     $186 = $185&255;
     $mynote = $186;
     $187 = $mynote;
     $188 = $187&255;
     $189 = (($188|0) / 2)&-1;
     $190 = (8240 + ($189<<1)|0);
     $191 = HEAP8[$190>>0]|0;
     HEAP8[$note>>0] = $191;
     $192 = $mynote;
     $193 = $192&255;
     $194 = (($193|0) / 2)&-1;
     $195 = (8240 + ($194<<1)|0);
     $196 = ((($195)) + 1|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = ((($note)) + 1|0);
     HEAP8[$198>>0] = $197;
     $199 = $c2;
     $200 = $199&255;
     $201 = $200 & 15;
     if ((($201|0) == 10) | (($201|0) == 6) | (($201|0) == 5)) {
      $206 = $c3;
      $207 = $206&255;
      $208 = ($207|0)>=(128);
      if ($208) {
       $209 = $c3;
       $210 = $209&255;
       $211 = $210 << 4;
       $212 = $211 & 240;
       $213 = $212&255;
       $c3 = $213;
      }
     } else if ((($201|0) == 8)) {
      $202 = $c2;
      $203 = $202&255;
      $204 = (($203) - 8)|0;
      $205 = $204&255;
      $c2 = $205;
     }
     $214 = $k;
     $215 = $214<<2;
     $y = $215;
     $216 = $sample;
     $217 = $216&255;
     $218 = $217 & 240;
     $219 = HEAP8[$note>>0]|0;
     $220 = $219&255;
     $221 = $220 & 15;
     $222 = $218 | $221;
     $223 = $222&255;
     $224 = $y;
     $225 = $x;
     $226 = (($tr) + ($225<<8)|0);
     $227 = (($226) + ($224)|0);
     HEAP8[$227>>0] = $223;
     $228 = ((($note)) + 1|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $y;
     $231 = (($230) + 1)|0;
     $232 = $x;
     $233 = (($tr) + ($232<<8)|0);
     $234 = (($233) + ($231)|0);
     HEAP8[$234>>0] = $229;
     $235 = $c2;
     $236 = $y;
     $237 = (($236) + 2)|0;
     $238 = $x;
     $239 = (($tr) + ($238<<8)|0);
     $240 = (($239) + ($237)|0);
     HEAP8[$240>>0] = $235;
     $241 = $c3;
     $242 = $y;
     $243 = (($242) + 3)|0;
     $244 = $x;
     $245 = (($tr) + ($244<<8)|0);
     $246 = (($245) + ($243)|0);
     HEAP8[$246>>0] = $241;
     $247 = $c4;
     $248 = $247&255;
     $249 = ($248|0)>(0);
     if ($249) {
      $250 = $c4;
      $251 = $250&255;
      $252 = ($251|0)<(128);
      if ($252) {
       $253 = $c4;
       $254 = $253&255;
       $255 = $k;
       $256 = (($255) + ($254))|0;
       $k = $256;
      }
     }
     $257 = $c4;
     $258 = $257&255;
     $259 = ($258|0)>(127);
     if ($259) {
      $260 = $k;
      $261 = (($260) + 1)|0;
      $k = $261;
      $l = 256;
      while(1) {
       $262 = $l;
       $263 = $c4;
       $264 = $263&255;
       $265 = ($262|0)>($264|0);
       $266 = $k;
       if (!($265)) {
        break;
       }
       $267 = $266<<2;
       $y = $267;
       $268 = $sample;
       $269 = $268&255;
       $270 = $269 & 240;
       $271 = HEAP8[$note>>0]|0;
       $272 = $271&255;
       $273 = $272 & 15;
       $274 = $270 | $273;
       $275 = $274&255;
       $276 = $y;
       $277 = $x;
       $278 = (($tr) + ($277<<8)|0);
       $279 = (($278) + ($276)|0);
       HEAP8[$279>>0] = $275;
       $280 = ((($note)) + 1|0);
       $281 = HEAP8[$280>>0]|0;
       $282 = $y;
       $283 = (($282) + 1)|0;
       $284 = $x;
       $285 = (($tr) + ($284<<8)|0);
       $286 = (($285) + ($283)|0);
       HEAP8[$286>>0] = $281;
       $287 = $c2;
       $288 = $y;
       $289 = (($288) + 2)|0;
       $290 = $x;
       $291 = (($tr) + ($290<<8)|0);
       $292 = (($291) + ($289)|0);
       HEAP8[$292>>0] = $287;
       $293 = $c3;
       $294 = $y;
       $295 = (($294) + 3)|0;
       $296 = $x;
       $297 = (($tr) + ($296<<8)|0);
       $298 = (($297) + ($295)|0);
       HEAP8[$298>>0] = $293;
       $299 = $k;
       $300 = (($299) + 1)|0;
       $k = $300;
       $301 = $l;
       $302 = (($301) + -1)|0;
       $l = $302;
      }
      $303 = (($266) + -1)|0;
      $k = $303;
     }
    } else {
     $304 = $0;
     $305 = (_ftell(($304|0))|0);
     $a = $305;
     $306 = $c2;
     $c5 = $306;
     $307 = $c3;
     $308 = $307&255;
     $309 = $308 << 8;
     $310 = $c4;
     $311 = $310&255;
     $312 = (($309) + ($311))|0;
     $313 = $trkdat_ofs;
     $314 = (($312) + ($313))|0;
     $315 = (($314) + 4)|0;
     $b = $315;
     $316 = $0;
     $317 = $b;
     (_fseek(($316|0),($317|0),0)|0);
     $c = 0;
     while(1) {
      $318 = $c;
      $319 = $c5;
      $320 = $319&255;
      $321 = ($318|0)<=($320|0);
      if (!($321)) {
       break;
      }
      $322 = $0;
      $323 = (_read8($322)|0);
      $c1 = $323;
      $324 = $0;
      $325 = (_read8($324)|0);
      $c2 = $325;
      $326 = $0;
      $327 = (_read8($326)|0);
      $c3 = $327;
      $328 = $0;
      $329 = (_read8($328)|0);
      $c4 = $329;
      $330 = $c1;
      $331 = $330&255;
      $332 = $331 << 4;
      $333 = $332 & 16;
      $334 = $c2;
      $335 = $334&255;
      $336 = $335 >> 4;
      $337 = $336 & 15;
      $338 = $333 | $337;
      $339 = $338&255;
      $sample = $339;
      ;HEAP8[$note>>0]=0|0;HEAP8[$note+1>>0]=0|0;
      $340 = $c1;
      $341 = $340&255;
      $342 = $341 & 127;
      $343 = $342&255;
      $mynote = $343;
      $344 = $mynote;
      $345 = $344&255;
      $346 = (($345|0) / 2)&-1;
      $347 = (8240 + ($346<<1)|0);
      $348 = HEAP8[$347>>0]|0;
      HEAP8[$note>>0] = $348;
      $349 = $mynote;
      $350 = $349&255;
      $351 = (($350|0) / 2)&-1;
      $352 = (8240 + ($351<<1)|0);
      $353 = ((($352)) + 1|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = ((($note)) + 1|0);
      HEAP8[$355>>0] = $354;
      $356 = $c2;
      $357 = $356&255;
      $358 = $357 & 15;
      if ((($358|0) == 10) | (($358|0) == 6) | (($358|0) == 5)) {
       $363 = $c3;
       $364 = $363&255;
       $365 = ($364|0)>=(128);
       if ($365) {
        $366 = $c3;
        $367 = $366&255;
        $368 = $367 << 4;
        $369 = $368 & 240;
        $370 = $369&255;
        $c3 = $370;
       }
      } else if ((($358|0) == 8)) {
       $359 = $c2;
       $360 = $359&255;
       $361 = (($360) - 8)|0;
       $362 = $361&255;
       $c2 = $362;
      }
      $371 = $sample;
      $372 = $371&255;
      $373 = $372 & 240;
      $374 = HEAP8[$note>>0]|0;
      $375 = $374&255;
      $376 = $375 & 15;
      $377 = $373 | $376;
      $378 = $377&255;
      $379 = $k;
      $380 = $379<<2;
      $381 = $x;
      $382 = (($tr) + ($381<<8)|0);
      $383 = (($382) + ($380)|0);
      HEAP8[$383>>0] = $378;
      $384 = ((($note)) + 1|0);
      $385 = HEAP8[$384>>0]|0;
      $386 = $k;
      $387 = $386<<2;
      $388 = (($387) + 1)|0;
      $389 = $x;
      $390 = (($tr) + ($389<<8)|0);
      $391 = (($390) + ($388)|0);
      HEAP8[$391>>0] = $385;
      $392 = $c2;
      $393 = $k;
      $394 = $393<<2;
      $395 = (($394) + 2)|0;
      $396 = $x;
      $397 = (($tr) + ($396<<8)|0);
      $398 = (($397) + ($395)|0);
      HEAP8[$398>>0] = $392;
      $399 = $c3;
      $400 = $k;
      $401 = $400<<2;
      $402 = (($401) + 3)|0;
      $403 = $x;
      $404 = (($tr) + ($403<<8)|0);
      $405 = (($404) + ($402)|0);
      HEAP8[$405>>0] = $399;
      $406 = $c4;
      $407 = $406&255;
      $408 = ($407|0)>(0);
      if ($408) {
       $409 = $c4;
       $410 = $409&255;
       $411 = ($410|0)<(128);
       if ($411) {
        $412 = $c4;
        $413 = $412&255;
        $414 = $k;
        $415 = (($414) + ($413))|0;
        $k = $415;
       }
      }
      $416 = $c4;
      $417 = $416&255;
      $418 = ($417|0)>(127);
      if ($418) {
       $419 = $k;
       $420 = (($419) + 1)|0;
       $k = $420;
       $l = 256;
       while(1) {
        $421 = $l;
        $422 = $c4;
        $423 = $422&255;
        $424 = ($421|0)>($423|0);
        $425 = $k;
        if (!($424)) {
         break;
        }
        $426 = $425<<2;
        $y = $426;
        $427 = $sample;
        $428 = $427&255;
        $429 = $428 & 240;
        $430 = HEAP8[$note>>0]|0;
        $431 = $430&255;
        $432 = $431 & 15;
        $433 = $429 | $432;
        $434 = $433&255;
        $435 = $y;
        $436 = $x;
        $437 = (($tr) + ($436<<8)|0);
        $438 = (($437) + ($435)|0);
        HEAP8[$438>>0] = $434;
        $439 = ((($note)) + 1|0);
        $440 = HEAP8[$439>>0]|0;
        $441 = $y;
        $442 = (($441) + 1)|0;
        $443 = $x;
        $444 = (($tr) + ($443<<8)|0);
        $445 = (($444) + ($442)|0);
        HEAP8[$445>>0] = $440;
        $446 = $c2;
        $447 = $y;
        $448 = (($447) + 2)|0;
        $449 = $x;
        $450 = (($tr) + ($449<<8)|0);
        $451 = (($450) + ($448)|0);
        HEAP8[$451>>0] = $446;
        $452 = $c3;
        $453 = $y;
        $454 = (($453) + 3)|0;
        $455 = $x;
        $456 = (($tr) + ($455<<8)|0);
        $457 = (($456) + ($454)|0);
        HEAP8[$457>>0] = $452;
        $458 = $k;
        $459 = (($458) + 1)|0;
        $k = $459;
        $460 = $l;
        $461 = (($460) + -1)|0;
        $l = $461;
       }
       $462 = (($425) + -1)|0;
       $k = $462;
      }
      $463 = $k;
      $464 = (($463) + 1)|0;
      $k = $464;
      $465 = $c;
      $466 = (($465) + 1)|0;
      $c = $466;
     }
     $467 = $k;
     $468 = (($467) + -1)|0;
     $k = $468;
     $469 = $0;
     $470 = $a;
     (_fseek(($469|0),($470|0),0)|0);
    }
    $471 = $k;
    $472 = (($471) + 1)|0;
    $k = $472;
   }
   $473 = $j;
   $474 = (($473) + 1)|0;
   $j = $474;
  }
  $475 = (($149) + 1)|0;
  $i = $475;
 }
 $i = 0;
 while(1) {
  $476 = $i;
  $477 = $len;
  $478 = $477&255;
  $479 = ($476|0)<($478|0);
  if (!($479)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $480 = $j;
   $481 = ($480|0)<(64);
   if (!($481)) {
    break;
   }
   $k = 0;
   while(1) {
    $482 = $k;
    $483 = ($482|0)<(4);
    $484 = $j;
    if (!($483)) {
     break;
    }
    $485 = $484<<4;
    $486 = $k;
    $487 = $486<<2;
    $488 = (($485) + ($487))|0;
    $x1 = $488;
    $489 = $k;
    $490 = $i;
    $491 = $490<<2;
    $492 = (($489) + ($491))|0;
    $y2 = $492;
    $493 = $j;
    $494 = $493<<2;
    $495 = $y2;
    $496 = (($tr) + ($495<<8)|0);
    $497 = (($496) + ($494)|0);
    $498 = HEAP8[$497>>0]|0;
    $499 = $x1;
    $500 = (($499) + 0)|0;
    $501 = (($tmp) + ($500)|0);
    HEAP8[$501>>0] = $498;
    $502 = $j;
    $503 = $502<<2;
    $504 = (($503) + 1)|0;
    $505 = $y2;
    $506 = (($tr) + ($505<<8)|0);
    $507 = (($506) + ($504)|0);
    $508 = HEAP8[$507>>0]|0;
    $509 = $x1;
    $510 = (($509) + 1)|0;
    $511 = (($tmp) + ($510)|0);
    HEAP8[$511>>0] = $508;
    $512 = $j;
    $513 = $512<<2;
    $514 = (($513) + 2)|0;
    $515 = $y2;
    $516 = (($tr) + ($515<<8)|0);
    $517 = (($516) + ($514)|0);
    $518 = HEAP8[$517>>0]|0;
    $519 = $x1;
    $520 = (($519) + 2)|0;
    $521 = (($tmp) + ($520)|0);
    HEAP8[$521>>0] = $518;
    $522 = $j;
    $523 = $522<<2;
    $524 = (($523) + 3)|0;
    $525 = $y2;
    $526 = (($tr) + ($525<<8)|0);
    $527 = (($526) + ($524)|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $x1;
    $530 = (($529) + 3)|0;
    $531 = (($tmp) + ($530)|0);
    HEAP8[$531>>0] = $528;
    $532 = $k;
    $533 = (($532) + 1)|0;
    $k = $533;
   }
   $534 = (($484) + 1)|0;
   $j = $534;
  }
  $535 = $1;
  (_fwrite(($tmp|0),1024,1,($535|0))|0);
  $536 = $i;
  $537 = (($536) + 1)|0;
  $i = $537;
 }
 $i = 0;
 while(1) {
  $538 = $i;
  $539 = $nsmp;
  $540 = $539&255;
  $541 = ($538|0)<($540|0);
  if (!($541)) {
   break;
  }
  $542 = $0;
  $543 = $i;
  $544 = (($SampleAddress) + ($543<<2)|0);
  $545 = HEAP32[$544>>2]|0;
  $546 = $smp_ofs;
  $547 = (($545) + ($546))|0;
  (_fseek(($542|0),($547|0),0)|0);
  $548 = $1;
  $549 = $0;
  $550 = $i;
  $551 = (($SampleSize) + ($550<<2)|0);
  $552 = HEAP32[$551>>2]|0;
  (_pw_move_data($548,$549,$552)|0);
  $553 = $i;
  $554 = (($553) + 1)|0;
  $i = $554;
 }
 STACKTOP = sp;return 0;
}
function _test_xann($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $l = 0, $m = 0, $or$cond = 0, $or$cond3 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $i = 0;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(2048);
 if ($5) {
  $6 = $3;
  $7 = (2048 - ($6))|0;
  $0 = $7;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $8 = $i;
 $9 = (($8) + 3)|0;
 $10 = $1;
 $11 = (($10) + ($9)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)!=(60);
 if ($14) {
  $0 = -1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $l = 0;
 while(1) {
  $15 = $l;
  $16 = ($15|0)<(128);
  if (!($16)) {
   break;
  }
  $17 = $start;
  $18 = $l;
  $19 = $18<<2;
  $20 = (($17) + ($19))|0;
  $21 = $1;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 << 24;
  $26 = $start;
  $27 = $l;
  $28 = $27<<2;
  $29 = (($26) + ($28))|0;
  $30 = (($29) + 1)|0;
  $31 = $1;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 << 16;
  $36 = (($25) + ($35))|0;
  $37 = $start;
  $38 = $l;
  $39 = $38<<2;
  $40 = (($37) + ($39))|0;
  $41 = (($40) + 2)|0;
  $42 = $1;
  $43 = (($42) + ($41)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = (($36) + ($46))|0;
  $48 = $start;
  $49 = $l;
  $50 = $49<<2;
  $51 = (($48) + ($50))|0;
  $52 = (($51) + 3)|0;
  $53 = $1;
  $54 = (($53) + ($52)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($47) + ($56))|0;
  $j = $57;
  $58 = $j;
  $59 = (($58|0) / 4)&-1;
  $60 = $59<<2;
  $k = $60;
  $61 = $k;
  $62 = $j;
  $63 = ($61|0)!=($62|0);
  $64 = $j;
  $65 = ($64|0)>(132156);
  $or$cond = $63 | $65;
  if ($or$cond) {
   label = 8;
   break;
  }
  $66 = $l;
  $67 = (($66) + 1)|0;
  $l = $67;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $j = 0;
 while(1) {
  $68 = $j;
  $69 = ($68|0)<(64);
  if (!($69)) {
   break;
  }
  $70 = $start;
  $71 = (($70) + 3)|0;
  $72 = $j;
  $73 = $72<<2;
  $74 = (($71) + ($73))|0;
  $75 = $1;
  $76 = (($75) + ($74)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)!=(60);
  if ($79) {
   $80 = $start;
   $81 = (($80) + 3)|0;
   $82 = $j;
   $83 = $82<<2;
   $84 = (($81) + ($83))|0;
   $85 = $1;
   $86 = (($85) + ($84)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = ($88|0)!=(0);
   if ($89) {
    label = 14;
    break;
   }
  }
  $90 = $j;
  $91 = (($90) + 1)|0;
  $j = $91;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $j = 0;
 while(1) {
  $92 = $j;
  $93 = ($92|0)<(31);
  if (!($93)) {
   break;
  }
  $94 = $start;
  $95 = (($94) + 519)|0;
  $96 = $j;
  $97 = $96<<4;
  $98 = (($95) + ($97))|0;
  $99 = $1;
  $100 = (($99) + ($98)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = ($102|0)>(64);
  if ($103) {
   label = 19;
   break;
  }
  $104 = $j;
  $105 = (($104) + 1)|0;
  $j = $105;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 $l = 0;
 while(1) {
  $106 = $l;
  $107 = ($106|0)<(30);
  if (!($107)) {
   label = 28;
   break;
  }
  $108 = $1;
  $109 = $start;
  $110 = (($108) + ($109)|0);
  $111 = ((($110)) + 526|0);
  $112 = $l;
  $113 = $112<<4;
  $114 = (($111) + ($113)|0);
  $115 = (_readmem32b($114)|0);
  $k = $115;
  $116 = $1;
  $117 = $start;
  $118 = (($116) + ($117)|0);
  $119 = ((($118)) + 524|0);
  $120 = $l;
  $121 = $120<<4;
  $122 = (($119) + ($121)|0);
  $123 = (_readmem16b($122)|0);
  $124 = $123&65535;
  $125 = $124<<1;
  $j = $125;
  $126 = $1;
  $127 = $start;
  $128 = (($126) + ($127)|0);
  $129 = ((($128)) + 520|0);
  $130 = $l;
  $131 = (($130) + 1)|0;
  $132 = $131<<4;
  $133 = (($129) + ($132)|0);
  $134 = (_readmem32b($133)|0);
  $m = $134;
  $135 = $k;
  $136 = ($135|0)<(2108);
  $137 = $m;
  $138 = ($137|0)<(2108);
  $or$cond3 = $136 | $138;
  if ($or$cond3) {
   label = 24;
   break;
  }
  $139 = $k;
  $140 = $m;
  $141 = ($139|0)>($140|0);
  if ($141) {
   label = 26;
   break;
  }
  $142 = $l;
  $143 = (($142) + 1)|0;
  $l = $143;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 else if ((label|0) == 26) {
  $0 = -1;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 else if ((label|0) == 28) {
  $144 = $2;
  _pw_read_title(0,$144,0);
  $0 = 0;
  $145 = $0;
  STACKTOP = sp;return ($145|0);
 }
 return (0)|0;
}
function _depack_xann($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c5 = 0, $fine = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $l = 0, $lsize = 0, $note = 0, $pat = 0, $pdata = 0, $ptable = 0, $size = 0;
 var $ssize = 0, $vol = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 1064|0;
 $pdata = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $pat = 0;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($pdata|0),0,1025)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 (_fseek(($3|0),518,0)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $1;
  (_pw_write_zero($6,22)|0);
  $7 = $0;
  $8 = (_read8($7)|0);
  $fine = $8;
  $9 = $0;
  $10 = (_read8($9)|0);
  $vol = $10;
  $11 = $0;
  $12 = (_read32b($11)|0);
  $j = $12;
  $13 = $0;
  $14 = (_read16b($13)|0);
  $15 = $14&65535;
  $lsize = $15;
  $16 = $0;
  $17 = (_read32b($16)|0);
  $l = $17;
  $18 = $1;
  $19 = $0;
  $20 = (_read16b($19)|0);
  $21 = $20&65535;
  $size = $21;
  $22 = $21&65535;
  _write16b($18,$22);
  $23 = $size;
  $24 = $23<<1;
  $25 = $ssize;
  $26 = (($25) + ($24))|0;
  $ssize = $26;
  $27 = $j;
  $28 = $l;
  $29 = (($27) - ($28))|0;
  $j = $29;
  $30 = $1;
  $31 = $fine;
  _write8($30,$31);
  $32 = $1;
  $33 = $vol;
  _write8($32,$33);
  $34 = $1;
  $35 = $j;
  $36 = (($35|0) / 2)&-1;
  $37 = $36&65535;
  _write16b($34,$37);
  $38 = $1;
  $39 = $lsize;
  $40 = $39&65535;
  _write16b($38,$40);
  $41 = $0;
  (_read16b($41)|0);
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $44 = $0;
 (_fseek(($44|0),0,0)|0);
 $c5 = 0;
 $pat = 0;
 while(1) {
  $45 = $c5;
  $46 = $45&255;
  $47 = ($46|0)<(128);
  if (!($47)) {
   break;
  }
  $48 = $0;
  $49 = (_read32b($48)|0);
  $l = $49;
  $50 = $l;
  $51 = ($50|0)==(0);
  if ($51) {
   break;
  }
  $52 = $l;
  $53 = (($52) - 60)|0;
  $54 = (($53|0) / 1024)&-1;
  $55 = (($54) - 1)|0;
  $56 = $55&255;
  $57 = $c5;
  $58 = $57&255;
  $59 = (($ptable) + ($58)|0);
  HEAP8[$59>>0] = $56;
  $60 = $c5;
  $61 = $60&255;
  $62 = (($ptable) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $pat;
  $66 = $65&255;
  $67 = ($64|0)>($66|0);
  if ($67) {
   $68 = $c5;
   $69 = $68&255;
   $70 = (($ptable) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $pat = $71;
  }
  $72 = $c5;
  $73 = (($72) + 1)<<24>>24;
  $c5 = $73;
 }
 $74 = $pat;
 $75 = (($74) + 1)<<24>>24;
 $pat = $75;
 $76 = $1;
 $77 = $c5;
 _write8($76,$77);
 $78 = $1;
 _write8($78,127);
 $79 = $1;
 (_fwrite(($ptable|0),128,1,($79|0))|0);
 $80 = $1;
 _write32b($80,1294879534);
 $81 = $0;
 (_fseek(($81|0),1084,0)|0);
 $i = 0;
 while(1) {
  $82 = $i;
  $83 = $pat;
  $84 = $83&255;
  $85 = ($82|0)<($84|0);
  if (!($85)) {
   break;
  }
  $j = 0;
  while(1) {
   $86 = $j;
   $87 = ($86|0)<(256);
   if (!($87)) {
    break;
   }
   $88 = $0;
   $89 = (_read8($88)|0);
   $90 = $89&255;
   $91 = $90 >> 3;
   $92 = $91 & 31;
   $93 = $92&255;
   $ins = $93;
   $94 = $0;
   $95 = (_read8($94)|0);
   $note = $95;
   $96 = $0;
   $97 = (_read8($96)|0);
   $fxt = $97;
   $98 = $0;
   $99 = (_read8($98)|0);
   $fxp = $99;
   $100 = $fxt;
   $101 = $100&255;
   do {
    switch ($101|0) {
    case 76:  {
     $fxt = 13;
     break;
    }
    case 92:  {
     $fxt = 14;
     $134 = $fxp;
     $135 = $134&255;
     $136 = $135 | 16;
     $137 = $136&255;
     $fxp = $137;
     break;
    }
    case 8:  {
     $fxt = 1;
     break;
    }
    case 16:  {
     $fxt = 3;
     break;
    }
    case 148:  {
     $fxt = 14;
     $154 = $fxp;
     $155 = $154&255;
     $156 = $155 | 208;
     $157 = $156&255;
     $fxp = $157;
     break;
    }
    case 68:  {
     $fxt = 11;
     break;
    }
    case 4:  {
     $fxt = 0;
     break;
    }
    case 40:  {
     $fxt = 6;
     $102 = $fxp;
     $103 = $102&255;
     $104 = $103 << 4;
     $105 = $104 & 240;
     $106 = $105&255;
     $c1 = $106;
     $107 = $fxp;
     $108 = $107&255;
     $109 = $108 >> 4;
     $110 = $109 & 15;
     $111 = $110&255;
     $c2 = $111;
     $112 = $c1;
     $113 = $112&255;
     $114 = $c2;
     $115 = $114&255;
     $116 = $113 | $115;
     $117 = $116&255;
     $fxp = $117;
     break;
    }
    case 36:  {
     $fxt = 5;
     break;
    }
    case 96:  {
     $fxt = 14;
     $138 = $fxp;
     $139 = $138&255;
     $140 = $139 | 32;
     $141 = $140&255;
     $fxp = $141;
     break;
    }
    case 60:  {
     $fxt = 10;
     $118 = $fxp;
     $119 = $118&255;
     $120 = $119 << 4;
     $121 = $120 & 240;
     $122 = $121&255;
     $c1 = $122;
     $123 = $fxp;
     $124 = $123&255;
     $125 = $124 >> 4;
     $126 = $125 & 15;
     $127 = $126&255;
     $c2 = $127;
     $128 = $c1;
     $129 = $128&255;
     $130 = $c2;
     $131 = $130&255;
     $132 = $129 | $131;
     $133 = $132&255;
     $fxp = $133;
     break;
    }
    case 132:  {
     $fxt = 14;
     $142 = $fxp;
     $143 = $142&255;
     $144 = $143 | 144;
     $145 = $144&255;
     $fxp = $145;
     break;
    }
    case 12:  {
     $fxt = 2;
     break;
    }
    case 88:  {
     $fxt = 14;
     $fxp = 1;
     break;
    }
    case 140:  {
     $fxt = 14;
     $150 = $fxp;
     $151 = $150&255;
     $152 = $151 | 176;
     $153 = $152&255;
     $fxp = $153;
     break;
    }
    case 72:  {
     $fxt = 12;
     break;
    }
    case 80:  {
     $fxt = 15;
     break;
    }
    case 0:  {
     $fxt = 0;
     break;
    }
    case 56:  {
     $fxt = 9;
     break;
    }
    case 24:  {
     $fxt = 4;
     break;
    }
    case 28:  {
     $fxt = 4;
     break;
    }
    case 136:  {
     $fxt = 14;
     $146 = $fxp;
     $147 = $146&255;
     $148 = $147 | 160;
     $149 = $148&255;
     $fxp = $149;
     break;
    }
    case 152:  {
     $fxt = 14;
     $158 = $fxp;
     $159 = $158&255;
     $160 = $159 | 224;
     $161 = $160&255;
     $fxp = $161;
     break;
    }
    case 44:  {
     $fxt = 6;
     break;
    }
    case 64:  {
     $fxt = 10;
     break;
    }
    case 20:  {
     $fxt = 3;
     break;
    }
    default: {
     $fxp = 0;
     $fxt = 0;
    }
    }
   } while(0);
   $162 = $ins;
   $163 = $162&255;
   $164 = $163 & 240;
   $165 = $164&255;
   $166 = $j;
   $167 = $166<<2;
   $168 = (($pdata) + ($167)|0);
   HEAP8[$168>>0] = $165;
   $169 = $note;
   $170 = $169&255;
   $171 = (($170|0) / 2)&-1;
   $172 = (8240 + ($171<<1)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $j;
   $176 = $175<<2;
   $177 = (($pdata) + ($176)|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $179 | $174;
   $181 = $180&255;
   HEAP8[$177>>0] = $181;
   $182 = $note;
   $183 = $182&255;
   $184 = (($183|0) / 2)&-1;
   $185 = (8240 + ($184<<1)|0);
   $186 = ((($185)) + 1|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $j;
   $189 = $188<<2;
   $190 = (($189) + 1)|0;
   $191 = (($pdata) + ($190)|0);
   HEAP8[$191>>0] = $187;
   $192 = $ins;
   $193 = $192&255;
   $194 = $193 << 4;
   $195 = $194 & 240;
   $196 = $195&255;
   $197 = $j;
   $198 = $197<<2;
   $199 = (($198) + 2)|0;
   $200 = (($pdata) + ($199)|0);
   HEAP8[$200>>0] = $196;
   $201 = $fxt;
   $202 = $201&255;
   $203 = $j;
   $204 = $203<<2;
   $205 = (($204) + 2)|0;
   $206 = (($pdata) + ($205)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = $208 | $202;
   $210 = $209&255;
   HEAP8[$206>>0] = $210;
   $211 = $fxp;
   $212 = $j;
   $213 = $212<<2;
   $214 = (($213) + 3)|0;
   $215 = (($pdata) + ($214)|0);
   HEAP8[$215>>0] = $211;
   $216 = $j;
   $217 = (($216) + 1)|0;
   $j = $217;
  }
  $218 = $1;
  (_fwrite(($pdata|0),1024,1,($218|0))|0);
  $219 = $i;
  $220 = (($219) + 1)|0;
  $i = $220;
 }
 $221 = $1;
 $222 = $0;
 $223 = $ssize;
 (_pw_move_data($221,$222,$223)|0);
 STACKTOP = sp;return 0;
}
function _test_p50a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $t;
 $2 = $s;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_theplayer_test($3,$4,$5,80)|0);
 STACKTOP = sp;return ($6|0);
}
function _depack_p50a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 $4 = (_theplayer_depack($2,$3,80)|0);
 STACKTOP = sp;return ($4|0);
}
function _test_p60a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $t;
 $2 = $s;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_theplayer_test($3,$4,$5,96)|0);
 STACKTOP = sp;return ($6|0);
}
function _depack_p60a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 $4 = (_theplayer_depack($2,$3,96)|0);
 STACKTOP = sp;return ($4|0);
}
function _theplayer_depack($in,$out,$version) {
 $in = $in|0;
 $out = $out|0;
 $version = $version|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buf = 0, $c1 = 0, $c3 = 0, $delta = 0, $i = 0, $isize = 0, $j = 0, $k = 0, $nins = 0, $npat = 0, $pack = 0, $pat_pos = 0, $ptable = 0, $saddr = 0, $sdata_addr = 0, $smp_buffer = 0, $smp_size = 0, $ssize = 0, $taddr = 0, $tdata = 0;
 var $tdata_addr = 0, $unpacked_ssize = 0, $val = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3664|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 3520|0;
 $isize = sp + 2328|0;
 $taddr = sp + 280|0;
 $smp_size = sp + 132|0;
 $saddr = sp + 8|0;
 $buf = sp + 2488|0;
 $1 = $in;
 $2 = $out;
 $3 = $version;
 $pat_pos = 0;
 $npat = 0;
 $nins = 0;
 $delta = 0;
 $pack = 0;
 $tdata_addr = 0;
 $sdata_addr = 0;
 $ssize = 0;
 $4 = (_calloc(512,256)|0);
 $tdata = $4;
 $5 = $tdata;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = -1;
  $259 = $0;
  STACKTOP = sp;return ($259|0);
 }
 _memset(($taddr|0),0,2048)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$smp_size; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$isize; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$saddr>>2] = 0;
 $7 = $1;
 $8 = (_read16b($7)|0);
 $9 = $8&65535;
 $sdata_addr = $9;
 $10 = $1;
 $11 = (_read8($10)|0);
 $12 = $11&255;
 $npat = $12;
 $13 = $1;
 $14 = (_read8($13)|0);
 $15 = $14&255;
 $nins = $15;
 $16 = $nins;
 $17 = $16 & 128;
 $18 = ($17|0)!=(0);
 if ($18) {
  $delta = 1;
 }
 $19 = $3;
 $20 = ($19|0)>=(96);
 if ($20) {
  $21 = $nins;
  $22 = $21 & 64;
  $23 = ($22|0)!=(0);
  if ($23) {
   $pack = 1;
   $24 = $tdata;
   _free($24);
   $0 = -1;
   $259 = $0;
   STACKTOP = sp;return ($259|0);
  }
 }
 $25 = $nins;
 $26 = $25 & 63;
 $nins = $26;
 $27 = $pack;
 $28 = $27&255;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $1;
  $31 = (_read32b($30)|0);
  $unpacked_ssize = $31;
 }
 $32 = $2;
 (_pw_write_zero($32,20)|0);
 $i = 0;
 while(1) {
  $33 = $i;
  $34 = $nins;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $2;
  (_pw_write_zero($36,22)|0);
  $37 = $1;
  $38 = (_read16b($37)|0);
  $39 = $38&65535;
  $40 = $i;
  $41 = (($isize) + ($40<<2)|0);
  HEAP32[$41>>2] = $39;
  $j = $39;
  $42 = $j;
  $43 = ($42|0)>(65280);
  if ($43) {
   $44 = $j;
   $45 = (65535 - ($44))|0;
   $46 = (($smp_size) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $i;
   $49 = (($smp_size) + ($48<<2)|0);
   HEAP32[$49>>2] = $47;
   $50 = $j;
   $51 = (65535 - ($50))|0;
   $52 = (($isize) + ($51<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $i;
   $55 = (($isize) + ($54<<2)|0);
   HEAP32[$55>>2] = $53;
   $56 = $j;
   $57 = (65535 - ($56))|0;
   $58 = (($saddr) + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $i;
   $61 = (($saddr) + ($60<<2)|0);
   HEAP32[$61>>2] = $59;
  } else {
   $62 = $i;
   $63 = ($62|0)>(0);
   if ($63) {
    $64 = $i;
    $65 = (($64) - 1)|0;
    $66 = (($saddr) + ($65<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $i;
    $69 = (($68) - 1)|0;
    $70 = (($smp_size) + ($69<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($67) + ($71))|0;
    $73 = $i;
    $74 = (($saddr) + ($73<<2)|0);
    HEAP32[$74>>2] = $72;
   }
   $75 = $j;
   $76 = $75<<1;
   $77 = $i;
   $78 = (($smp_size) + ($77<<2)|0);
   HEAP32[$78>>2] = $76;
   $79 = $i;
   $80 = (($smp_size) + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $ssize;
   $83 = (($82) + ($81))|0;
   $ssize = $83;
  }
  $84 = $i;
  $85 = (($smp_size) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86|0) / 2)&-1;
  $j = $87;
  $88 = $2;
  $89 = $i;
  $90 = (($isize) + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $91&65535;
  _write16b($88,$92);
  $93 = $1;
  $94 = (_read8($93)|0);
  $c1 = $94;
  $95 = $2;
  $96 = $c1;
  $97 = $96&255;
  $98 = $97 & 63;
  $99 = $98&255;
  _write8($95,$99);
  $100 = $2;
  $101 = $1;
  $102 = (_read8($101)|0);
  _write8($100,$102);
  $103 = $1;
  $104 = (_read16b($103)|0);
  $105 = $104&65535;
  $val = $105;
  $106 = $val;
  $107 = ($106|0)==(65535);
  $108 = $2;
  if ($107) {
   _write16b($108,0);
   $109 = $2;
   _write16b($109,1);
  } else {
   $110 = $val;
   $111 = $110&65535;
   _write16b($108,$111);
   $112 = $2;
   $113 = $j;
   $114 = $val;
   $115 = (($113) - ($114))|0;
   $116 = $115&65535;
   _write16b($112,$116);
  }
  $117 = $i;
  $118 = (($117) + 1)|0;
  $i = $118;
 }
 dest=$buf; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $119 = ((($buf)) + 29|0);
 HEAP8[$119>>0] = 1;
 while(1) {
  $120 = $i;
  $121 = ($120|0)<(31);
  if (!($121)) {
   break;
  }
  $122 = $2;
  (_fwrite(($buf|0),30,1,($122|0))|0);
  $123 = $i;
  $124 = (($123) + 1)|0;
  $i = $124;
 }
 $i = 0;
 while(1) {
  $125 = $i;
  $126 = $npat;
  $127 = ($125|0)<($126|0);
  if (!($127)) {
   break;
  }
  $j = 0;
  while(1) {
   $128 = $j;
   $129 = ($128|0)<(4);
   if (!($129)) {
    break;
   }
   $130 = $1;
   $131 = (_read16b($130)|0);
   $132 = $131&65535;
   $133 = $j;
   $134 = $i;
   $135 = (($taddr) + ($134<<4)|0);
   $136 = (($135) + ($133<<2)|0);
   HEAP32[$136>>2] = $132;
   $137 = $j;
   $138 = (($137) + 1)|0;
   $j = $138;
  }
  $139 = $i;
  $140 = (($139) + 1)|0;
  $i = $140;
 }
 $pat_pos = 0;
 while(1) {
  $141 = $pat_pos;
  $142 = ($141|0)<(128);
  if (!($142)) {
   break;
  }
  $143 = $1;
  $144 = (_read8($143)|0);
  $c1 = $144;
  $145 = $c1;
  $146 = $145&255;
  $147 = ($146|0)==(255);
  if ($147) {
   break;
  }
  $148 = $3;
  $149 = ($148|0)>=(96);
  $150 = $c1;
  $151 = $150&255;
  $152 = (($151|0) / 2)&-1;
  $153 = $149 ? $151 : $152;
  $154 = $153&255;
  $155 = $pat_pos;
  $156 = (($ptable) + ($155)|0);
  HEAP8[$156>>0] = $154;
  $157 = $pat_pos;
  $158 = (($157) + 1)|0;
  $pat_pos = $158;
 }
 $159 = $2;
 $160 = $pat_pos;
 $161 = $160&255;
 _write8($159,$161);
 $162 = $2;
 _write8($162,127);
 $163 = $2;
 (_fwrite(($ptable|0),128,1,($163|0))|0);
 $164 = $2;
 _write32b($164,1294879534);
 $165 = $1;
 $166 = (_ftell(($165|0))|0);
 $tdata_addr = $166;
 $167 = $1;
 $168 = $npat;
 $169 = $tdata;
 $170 = $tdata_addr;
 _decode_pattern($167,$168,$169,$170,$taddr);
 $i = 0;
 while(1) {
  $171 = $i;
  $172 = $npat;
  $173 = ($171|0)<($172|0);
  if (!($173)) {
   break;
  }
  _memset(($buf|0),0,1024)|0;
  $j = 0;
  while(1) {
   $174 = $j;
   $175 = ($174|0)<(64);
   if (!($175)) {
    break;
   }
   $k = 0;
   while(1) {
    $176 = $k;
    $177 = ($176|0)<(4);
    $178 = $j;
    if (!($177)) {
     break;
    }
    $179 = $178<<4;
    $180 = $k;
    $181 = $180<<2;
    $182 = (($179) + ($181))|0;
    $183 = (($buf) + ($182)|0);
    $184 = $i;
    $185 = $184<<2;
    $186 = $k;
    $187 = (($185) + ($186))|0;
    $188 = $187<<9;
    $189 = $j;
    $190 = $189<<2;
    $191 = (($188) + ($190))|0;
    $192 = $tdata;
    $193 = (($192) + ($191)|0);
    ;HEAP8[$183>>0]=HEAP8[$193>>0]|0;HEAP8[$183+1>>0]=HEAP8[$193+1>>0]|0;HEAP8[$183+2>>0]=HEAP8[$193+2>>0]|0;HEAP8[$183+3>>0]=HEAP8[$193+3>>0]|0;
    $194 = $k;
    $195 = (($194) + 1)|0;
    $k = $195;
   }
   $196 = (($178) + 1)|0;
   $j = $196;
  }
  $197 = $2;
  (_fwrite(($buf|0),1024,1,($197|0))|0);
  $198 = $i;
  $199 = (($198) + 1)|0;
  $i = $199;
 }
 $200 = $tdata;
 _free($200);
 $i = 0;
 while(1) {
  $201 = $i;
  $202 = $nins;
  $203 = ($201|0)<($202|0);
  if (!($203)) {
   break;
  }
  $204 = $1;
  $205 = $sdata_addr;
  $206 = $i;
  $207 = (($saddr) + ($206<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($205) + ($208))|0;
  (_fseek(($204|0),($209|0),0)|0);
  $210 = $i;
  $211 = (($smp_size) + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (_malloc($212)|0);
  $smp_buffer = $213;
  $214 = $smp_buffer;
  $215 = $i;
  $216 = (($smp_size) + ($215<<2)|0);
  $217 = HEAP32[$216>>2]|0;
  _memset(($214|0),0,($217|0))|0;
  $218 = $smp_buffer;
  $219 = $i;
  $220 = (($smp_size) + ($219<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $1;
  (_fread(($218|0),($221|0),1,($222|0))|0);
  $223 = $delta;
  $224 = $223&255;
  $225 = ($224|0)==(1);
  L63: do {
   if ($225) {
    $j = 1;
    while(1) {
     $226 = $j;
     $227 = $i;
     $228 = (($smp_size) + ($227<<2)|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = ($226|0)<($229|0);
     if (!($230)) {
      break L63;
     }
     $231 = $j;
     $232 = $smp_buffer;
     $233 = (($232) + ($231)|0);
     $234 = HEAP8[$233>>0]|0;
     $235 = $234 << 24 >> 24;
     $236 = (256 - ($235))|0;
     $237 = $j;
     $238 = (($237) - 1)|0;
     $239 = $smp_buffer;
     $240 = (($239) + ($238)|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = $241 << 24 >> 24;
     $243 = (($236) + ($242))|0;
     $244 = $243&255;
     $c3 = $244;
     $245 = $c3;
     $246 = $j;
     $247 = $smp_buffer;
     $248 = (($247) + ($246)|0);
     HEAP8[$248>>0] = $245;
     $249 = $j;
     $250 = (($249) + 1)|0;
     $j = $250;
    }
   }
  } while(0);
  $251 = $smp_buffer;
  $252 = $i;
  $253 = (($smp_size) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $2;
  (_fwrite(($251|0),($254|0),1,($255|0))|0);
  $256 = $smp_buffer;
  _free($256);
  $257 = $i;
  $258 = (($257) + 1)|0;
  $i = $258;
 }
 $0 = 0;
 $259 = $0;
 STACKTOP = sp;return ($259|0);
}
function _decode_pattern($in,$npat,$tdata,$tdata_addr,$taddr) {
 $in = $in|0;
 $npat = $npat|0;
 $tdata = $tdata|0;
 $tdata_addr = $tdata_addr|0;
 $taddr = $taddr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $effect = 0, $i = 0, $j = 0, $k = 0, $l = 0, $lines = 0, $max_row = 0, $pos = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $npat;
 $2 = $tdata;
 $3 = $tdata_addr;
 $4 = $taddr;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $max_row = 63;
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = ($8|0)<(4);
   if (!($9)) {
    break;
   }
   $10 = $0;
   $11 = $j;
   $12 = $i;
   $13 = $4;
   $14 = (($13) + ($12<<4)|0);
   $15 = (($14) + ($11<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $3;
   $18 = (($16) + ($17))|0;
   (_fseek(($10|0),($18|0),0)|0);
   $k = 0;
   L7: while(1) {
    $19 = $k;
    $20 = $max_row;
    $21 = ($19|0)<=($20|0);
    if (!($21)) {
     break;
    }
    $22 = $i;
    $23 = $22<<2;
    $24 = $j;
    $25 = (($23) + ($24))|0;
    $26 = $25<<9;
    $27 = $k;
    $28 = $27<<2;
    $29 = (($26) + ($28))|0;
    $30 = $2;
    $31 = (($30) + ($29)|0);
    $x = $31;
    $32 = $0;
    $33 = (_read8($32)|0);
    $c1 = $33;
    $34 = $0;
    $35 = (_read8($34)|0);
    $c2 = $35;
    $36 = $0;
    $37 = (_read8($36)|0);
    $c3 = $37;
    $38 = $c1;
    $39 = $38&255;
    $40 = $39 & 128;
    $41 = ($40|0)!=(0);
    L10: do {
     if ($41) {
      $42 = $c1;
      $43 = $42&255;
      $44 = ($43|0)!=(128);
      if ($44) {
       $45 = $0;
       $46 = (_read8($45)|0);
       $c4 = $46;
       $47 = $c1;
       $48 = $47&255;
       $49 = (255 - ($48))|0;
       $50 = $49&255;
       $c1 = $50;
       $51 = $x;
       $52 = $c1;
       $53 = $c2;
       $54 = $c3;
       $55 = (_set_event($51,$52,$53,$54)|0);
       $56 = $55&255;
       $effect = $56;
       $57 = $effect;
       $58 = ($57|0)==(13);
       if ($58) {
        label = 10;
        break L7;
       }
       $60 = $effect;
       $61 = ($60|0)==(11);
       if ($61) {
        label = 12;
        break L7;
       }
       $63 = $c4;
       $64 = $63&255;
       $65 = ($64|0)<(128);
       $66 = $c4;
       $67 = $66&255;
       if ($65) {
        $68 = $k;
        $69 = (($68) + ($67))|0;
        $k = $69;
        break;
       }
       $70 = (256 - ($67))|0;
       $71 = $70&255;
       $c4 = $71;
       $l = 0;
       while(1) {
        $72 = $l;
        $73 = $c4;
        $74 = $73&255;
        $75 = ($72|0)<($74|0);
        if (!($75)) {
         break L10;
        }
        $76 = $k;
        $77 = (($76) + 1)|0;
        $k = $77;
        $78 = ($77|0)>=(64);
        if ($78) {
         break L10;
        }
        $79 = $i;
        $80 = $79<<2;
        $81 = $j;
        $82 = (($80) + ($81))|0;
        $83 = $82<<9;
        $84 = $k;
        $85 = $84<<2;
        $86 = (($83) + ($85))|0;
        $87 = $2;
        $88 = (($87) + ($86)|0);
        $x = $88;
        $89 = $x;
        $90 = $c1;
        $91 = $c2;
        $92 = $c3;
        (_set_event($89,$90,$91,$92)|0);
        $93 = $l;
        $94 = (($93) + 1)|0;
        $l = $94;
       }
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
    } while(0);
    do {
     if ((label|0) == 19) {
      label = 0;
      $95 = $c1;
      $96 = $95&255;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $212 = $i;
       $213 = $212<<2;
       $214 = $j;
       $215 = (($213) + ($214))|0;
       $216 = $215<<9;
       $217 = $k;
       $218 = $217<<2;
       $219 = (($216) + ($218))|0;
       $220 = $2;
       $221 = (($220) + ($219)|0);
       $x = $221;
       $222 = $x;
       $223 = $c1;
       $224 = $c2;
       $225 = $c3;
       $226 = (_set_event($222,$223,$224,$225)|0);
       $227 = $226&255;
       $effect = $227;
       $228 = $effect;
       $229 = ($228|0)==(13);
       if ($229) {
        label = 39;
        break L7;
       }
       $231 = $effect;
       $232 = ($231|0)==(11);
       if ($232) {
        label = 41;
        break L7;
       } else {
        break;
       }
      }
      $98 = $0;
      $99 = (_read8($98)|0);
      $c4 = $99;
      $100 = $0;
      $101 = (_ftell(($100|0))|0);
      $pos = $101;
      $102 = $c2;
      $103 = $102&255;
      $lines = $103;
      $104 = $0;
      $105 = $c3;
      $106 = $105&255;
      $107 = $106 << 8;
      $108 = $c4;
      $109 = $108&255;
      $110 = (($107) + ($109))|0;
      $111 = (0 - ($110))|0;
      (_fseek(($104|0),($111|0),1)|0);
      $l = 0;
      while(1) {
       $112 = $l;
       $113 = $lines;
       $114 = ($112|0)<=($113|0);
       if (!($114)) {
        break;
       }
       $115 = $i;
       $116 = $115<<2;
       $117 = $j;
       $118 = (($116) + ($117))|0;
       $119 = $118<<9;
       $120 = $k;
       $121 = $120<<2;
       $122 = (($119) + ($121))|0;
       $123 = $2;
       $124 = (($123) + ($122)|0);
       $x = $124;
       $125 = $0;
       $126 = (_read8($125)|0);
       $c1 = $126;
       $127 = $0;
       $128 = (_read8($127)|0);
       $c2 = $128;
       $129 = $0;
       $130 = (_read8($129)|0);
       $c3 = $130;
       $131 = $c1;
       $132 = $131&255;
       $133 = $132 & 128;
       $134 = ($133|0)!=(0);
       L31: do {
        if ($134) {
         $135 = $c1;
         $136 = $135&255;
         $137 = ($136|0)!=(128);
         if ($137) {
          $138 = $0;
          $139 = (_read8($138)|0);
          $c4 = $139;
          $140 = $c1;
          $141 = $140&255;
          $142 = (255 - ($141))|0;
          $143 = $142&255;
          $c1 = $143;
          $144 = $k;
          $145 = ($144|0)>=(64);
          if (!($145)) {
           $146 = $x;
           $147 = $c1;
           $148 = $c2;
           $149 = $c3;
           $150 = (_set_event($146,$147,$148,$149)|0);
           $151 = $150&255;
           $effect = $151;
           $152 = $effect;
           $153 = ($152|0)==(13);
           if ($153) {
            $154 = $k;
            $max_row = $154;
            $l = 9999;
            $k = 9999;
            break;
           }
           $155 = $effect;
           $156 = ($155|0)==(11);
           if ($156) {
            $157 = $k;
            $max_row = $157;
            $l = 9999;
            $k = 9999;
            break;
           }
           $158 = $c4;
           $159 = $158&255;
           $160 = ($159|0)<(128);
           $161 = $c4;
           $162 = $161&255;
           if ($160) {
            $163 = $k;
            $164 = (($163) + ($162))|0;
            $k = $164;
            break;
           }
           $165 = (256 - ($162))|0;
           $166 = $165&255;
           $c4 = $166;
           $l = 0;
           while(1) {
            $167 = $l;
            $168 = $c4;
            $169 = $168&255;
            $170 = ($167|0)<($169|0);
            if (!($170)) {
             label = 35;
             break L31;
            }
            $171 = $k;
            $172 = (($171) + 1)|0;
            $k = $172;
            $173 = ($172|0)>=(64);
            if ($173) {
             label = 35;
             break L31;
            }
            $174 = $i;
            $175 = $174<<2;
            $176 = $j;
            $177 = (($175) + ($176))|0;
            $178 = $177<<9;
            $179 = $k;
            $180 = $179<<2;
            $181 = (($178) + ($180))|0;
            $182 = $2;
            $183 = (($182) + ($181)|0);
            $x = $183;
            $184 = $x;
            $185 = $c1;
            $186 = $c2;
            $187 = $c3;
            (_set_event($184,$185,$186,$187)|0);
            $188 = $l;
            $189 = (($188) + 1)|0;
            $l = $189;
           }
          }
         } else {
          label = 35;
         }
        } else {
         label = 35;
        }
       } while(0);
       if ((label|0) == 35) {
        label = 0;
        $190 = $i;
        $191 = $190<<2;
        $192 = $j;
        $193 = (($191) + ($192))|0;
        $194 = $193<<9;
        $195 = $k;
        $196 = $195<<2;
        $197 = (($194) + ($196))|0;
        $198 = $2;
        $199 = (($198) + ($197)|0);
        $x = $199;
        $200 = $x;
        $201 = $c1;
        $202 = $c2;
        $203 = $c3;
        (_set_event($200,$201,$202,$203)|0);
       }
       $204 = $l;
       $205 = (($204) + 1)|0;
       $l = $205;
       $206 = $k;
       $207 = (($206) + 1)|0;
       $k = $207;
      }
      $208 = $0;
      $209 = $pos;
      (_fseek(($208|0),($209|0),0)|0);
      $210 = $k;
      $211 = (($210) + -1)|0;
      $k = $211;
     }
    } while(0);
    $234 = $k;
    $235 = (($234) + 1)|0;
    $k = $235;
   }
   if ((label|0) == 10) {
    label = 0;
    $59 = $k;
    $max_row = $59;
   }
   else if ((label|0) == 12) {
    label = 0;
    $62 = $k;
    $max_row = $62;
   }
   else if ((label|0) == 39) {
    label = 0;
    $230 = $k;
    $max_row = $230;
   }
   else if ((label|0) == 41) {
    label = 0;
    $233 = $k;
    $max_row = $233;
   }
   $236 = $j;
   $237 = (($236) + 1)|0;
   $j = $237;
  }
  $238 = $i;
  $239 = (($238) + 1)|0;
  $i = $239;
 }
 STACKTOP = sp;return;
}
function _set_event($x,$c1,$c2,$c3) {
 $x = $x|0;
 $c1 = $c1|0;
 $c2 = $c2|0;
 $c3 = $c3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $c1;
 $2 = $c2;
 $3 = $c3;
 $4 = $1;
 $5 = $4&255;
 $6 = $5 << 4;
 $7 = $6 & 16;
 $8 = $1;
 $9 = $8&255;
 $10 = (($9|0) / 2)&-1;
 $11 = (8240 + ($10<<1)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $7 | $13;
 $15 = $14&255;
 $16 = $0;
 $17 = ((($16)) + 1|0);
 $0 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $1;
 $19 = $18&255;
 $20 = (($19|0) / 2)&-1;
 $21 = (8240 + ($20<<1)|0);
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $0;
 $25 = ((($24)) + 1|0);
 $0 = $25;
 HEAP8[$24>>0] = $23;
 $26 = $2;
 $27 = $26&255;
 $28 = $27 & 15;
 $29 = $28&255;
 $b = $29;
 $30 = $b;
 $31 = $30&255;
 $32 = ($31|0)==(8);
 if ($32) {
  $33 = $2;
  $34 = $33&255;
  $35 = (($34) - 8)|0;
  $36 = $35&255;
  $2 = $36;
 }
 $37 = $2;
 $38 = $0;
 $39 = ((($38)) + 1|0);
 $0 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $b;
 $41 = $40&255;
 $42 = ($41|0)==(5);
 if (!($42)) {
  $43 = $b;
  $44 = $43&255;
  $45 = ($44|0)==(6);
  if (!($45)) {
   $46 = $b;
   $47 = $46&255;
   $48 = ($47|0)==(10);
   if (!($48)) {
    $58 = $3;
    $59 = $0;
    $60 = ((($59)) + 1|0);
    $0 = $60;
    HEAP8[$59>>0] = $58;
    $61 = $b;
    STACKTOP = sp;return ($61|0);
   }
  }
 }
 $49 = $3;
 $50 = $49&255;
 $51 = ($50|0)>(127);
 $52 = $3;
 $53 = $52&255;
 $54 = (256 - ($53))|0;
 $55 = $54 << 4;
 $56 = $51 ? $55 : $53;
 $57 = $56&255;
 $3 = $57;
 $58 = $3;
 $59 = $0;
 $60 = ((($59)) + 1|0);
 $0 = $60;
 HEAP8[$59>>0] = $58;
 $61 = $b;
 STACKTOP = sp;return ($61|0);
}
function _theplayer_test($data,$t,$s,$version) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 $version = $version|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0;
 var $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $version;
 $start = 0;
 $5 = $start;
 $6 = (($5) + 2)|0;
 $7 = $1;
 $8 = (($7) + ($6)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $m = $10;
 $11 = $m;
 $12 = ($11|0)>(127);
 $13 = $m;
 $14 = ($13|0)==(0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 $15 = $start;
 $16 = (($15) + 3)|0;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 63;
 $k = $21;
 $22 = $k;
 $23 = ($22|0)>(31);
 $24 = $k;
 $25 = ($24|0)==(0);
 $or$cond3 = $23 | $25;
 if ($or$cond3) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 $l = 0;
 while(1) {
  $26 = $l;
  $27 = $k;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   label = 12;
   break;
  }
  $29 = $start;
  $30 = (($29) + 7)|0;
  $31 = $l;
  $32 = ($31*6)|0;
  $33 = (($30) + ($32))|0;
  $34 = $1;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($37|0)>(64);
  if ($38) {
   label = 8;
   break;
  }
  $39 = $start;
  $40 = (($39) + 6)|0;
  $41 = $l;
  $42 = ($41*6)|0;
  $43 = (($40) + ($42))|0;
  $44 = $1;
  $45 = (($44) + ($43)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ($47|0)>(15);
  if ($48) {
   label = 10;
   break;
  }
  $49 = $l;
  $50 = (($49) + 1)|0;
  $l = $50;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $335 = $0;
  STACKTOP = sp;return ($335|0);
 }
 else if ((label|0) == 12) {
  $ssize = 0;
  $n = 0;
  while(1) {
   $51 = $n;
   $52 = $k;
   $53 = ($51|0)<($52|0);
   $54 = $1;
   $55 = $start;
   $56 = (($54) + ($55)|0);
   if (!($53)) {
    label = 25;
    break;
   }
   $57 = $n;
   $58 = ($57*6)|0;
   $59 = (($56) + ($58)|0);
   $60 = ((($59)) + 4|0);
   $61 = (_readmem16b($60)|0);
   $62 = $61&65535;
   $o = $62;
   $63 = $o;
   $64 = ($63|0)<(65503);
   $65 = $o;
   $66 = ($65|0)>(32768);
   $or$cond5 = $64 & $66;
   $67 = $o;
   $68 = ($67|0)==(0);
   $or$cond7 = $or$cond5 | $68;
   if ($or$cond7) {
    label = 15;
    break;
   }
   $69 = $o;
   $70 = ($69|0)<(65280);
   if ($70) {
    $71 = $o;
    $72 = $71<<1;
    $73 = $ssize;
    $74 = (($73) + ($72))|0;
    $ssize = $74;
   }
   $75 = $1;
   $76 = $start;
   $77 = (($75) + ($76)|0);
   $78 = ((($77)) + 8|0);
   $79 = $n;
   $80 = ($79*6)|0;
   $81 = (($78) + ($80)|0);
   $82 = (_readmem16b($81)|0);
   $83 = $82&65535;
   $j = $83;
   $84 = $j;
   $85 = ($84|0)!=(65535);
   if ($85) {
    $86 = $j;
    $87 = $o;
    $88 = ($86|0)>=($87|0);
    if ($88) {
     label = 20;
     break;
    }
   }
   $89 = $o;
   $90 = ($89|0)>(65503);
   if ($90) {
    $91 = $o;
    $92 = (65535 - ($91))|0;
    $93 = $k;
    $94 = ($92|0)>($93|0);
    if ($94) {
     label = 23;
     break;
    }
   }
   $95 = $n;
   $96 = (($95) + 1)|0;
   $n = $96;
  }
  if ((label|0) == 15) {
   $0 = -1;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
  else if ((label|0) == 20) {
   $0 = -1;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
  else if ((label|0) == 23) {
   $0 = -1;
   $335 = $0;
   STACKTOP = sp;return ($335|0);
  }
  else if ((label|0) == 25) {
   $97 = (_readmem16b($56)|0);
   $98 = $97&65535;
   $j = $98;
   $99 = $j;
   $100 = $k;
   $101 = ($100*6)|0;
   $102 = (($101) + 4)|0;
   $103 = $m;
   $104 = $103<<3;
   $105 = (($102) + ($104))|0;
   $106 = ($99|0)<($105|0);
   if ($106) {
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
   $l = 0;
   while(1) {
    $107 = $l;
    $108 = $m;
    $109 = $108<<2;
    $110 = ($107|0)<($109|0);
    if (!($110)) {
     break;
    }
    $111 = $1;
    $112 = $start;
    $113 = (($111) + ($112)|0);
    $114 = ((($113)) + 4|0);
    $115 = $k;
    $116 = ($115*6)|0;
    $117 = (($114) + ($116)|0);
    $118 = $l;
    $119 = $118<<1;
    $120 = (($117) + ($119)|0);
    $121 = (_readmem16b($120)|0);
    $122 = $121&65535;
    $o = $122;
    $123 = $o;
    $124 = $k;
    $125 = ($124*6)|0;
    $126 = (($123) + ($125))|0;
    $127 = (($126) + 4)|0;
    $128 = $m;
    $129 = $128<<3;
    $130 = (($127) + ($129))|0;
    $131 = $j;
    $132 = ($130|0)>($131|0);
    if ($132) {
     label = 30;
     break;
    }
    $133 = $l;
    $134 = (($133) + 1)|0;
    $l = $134;
   }
   if ((label|0) == 30) {
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
   $l = 0;
   $o = 0;
   $135 = $3;
   $136 = $start;
   $137 = $k;
   $138 = ($137*6)|0;
   $139 = (($136) + ($138))|0;
   $140 = (($139) + 4)|0;
   $141 = $m;
   $142 = $141<<3;
   $143 = (($140) + ($142))|0;
   $144 = ($135|0)<($143|0);
   if ($144) {
    $145 = $start;
    $146 = $k;
    $147 = ($146*6)|0;
    $148 = (($145) + ($147))|0;
    $149 = (($148) + 4)|0;
    $150 = $m;
    $151 = $150<<3;
    $152 = (($149) + ($151))|0;
    $153 = $3;
    $154 = (($152) - ($153))|0;
    $0 = $154;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
   while(1) {
    $155 = $start;
    $156 = $k;
    $157 = ($156*6)|0;
    $158 = (($155) + ($157))|0;
    $159 = (($158) + 4)|0;
    $160 = $m;
    $161 = $160<<3;
    $162 = (($159) + ($161))|0;
    $163 = $l;
    $164 = (($162) + ($163))|0;
    $165 = $1;
    $166 = (($165) + ($164)|0);
    $167 = HEAP8[$166>>0]|0;
    $168 = $167&255;
    $169 = ($168|0)!=(255);
    $170 = $l;
    $171 = ($170|0)<(128);
    $172 = $169 ? $171 : 0;
    if (!($172)) {
     label = 45;
     break;
    }
    $173 = $4;
    $174 = ($173|0)>=(96);
    $175 = $start;
    $176 = $k;
    $177 = ($176*6)|0;
    $178 = (($175) + ($177))|0;
    $179 = (($178) + 4)|0;
    $180 = $m;
    $181 = $180<<3;
    $182 = (($179) + ($181))|0;
    $183 = $l;
    $184 = (($182) + ($183))|0;
    $185 = $1;
    $186 = (($185) + ($184)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    if ($174) {
     $189 = $m;
     $190 = (($189) - 1)|0;
     $191 = ($188|0)>($190|0);
     if ($191) {
      label = 37;
      break;
     }
    } else {
     $192 = $188 & 1;
     $193 = ($192|0)!=(0);
     if ($193) {
      label = 39;
      break;
     }
     $194 = $start;
     $195 = $k;
     $196 = ($195*6)|0;
     $197 = (($194) + ($196))|0;
     $198 = (($197) + 4)|0;
     $199 = $m;
     $200 = $199<<3;
     $201 = (($198) + ($200))|0;
     $202 = $l;
     $203 = (($201) + ($202))|0;
     $204 = $1;
     $205 = (($204) + ($203)|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = $206&255;
     $208 = $m;
     $209 = $208<<1;
     $210 = ($207|0)>($209|0);
     if ($210) {
      label = 41;
      break;
     }
    }
    $211 = $start;
    $212 = $k;
    $213 = ($212*6)|0;
    $214 = (($211) + ($213))|0;
    $215 = (($214) + 4)|0;
    $216 = $m;
    $217 = $216<<3;
    $218 = (($215) + ($217))|0;
    $219 = $l;
    $220 = (($218) + ($219))|0;
    $221 = $1;
    $222 = (($221) + ($220)|0);
    $223 = HEAP8[$222>>0]|0;
    $224 = $223&255;
    $225 = $o;
    $226 = ($224|0)>($225|0);
    if ($226) {
     $227 = $start;
     $228 = $k;
     $229 = ($228*6)|0;
     $230 = (($227) + ($229))|0;
     $231 = (($230) + 4)|0;
     $232 = $m;
     $233 = $232<<3;
     $234 = (($231) + ($233))|0;
     $235 = $l;
     $236 = (($234) + ($235))|0;
     $237 = $1;
     $238 = (($237) + ($236)|0);
     $239 = HEAP8[$238>>0]|0;
     $240 = $239&255;
     $o = $240;
    }
    $241 = $l;
    $242 = (($241) + 1)|0;
    $l = $242;
   }
   if ((label|0) == 37) {
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
   else if ((label|0) == 39) {
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
   else if ((label|0) == 41) {
    $0 = -1;
    $335 = $0;
    STACKTOP = sp;return ($335|0);
   }
   else if ((label|0) == 45) {
    $243 = $k;
    $244 = ($243*6)|0;
    $245 = (($244) + 4)|0;
    $246 = $m;
    $247 = $246<<3;
    $248 = (($245) + ($247))|0;
    $249 = $l;
    $250 = (($248) + ($249))|0;
    $251 = $j;
    $252 = ($250|0)>($251|0);
    if ($252) {
     $0 = -1;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
    $253 = $l;
    $254 = ($253|0)==(0);
    $255 = $l;
    $256 = ($255|0)==(128);
    $or$cond9 = $254 | $256;
    if ($or$cond9) {
     $0 = -1;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
    $257 = $4;
    $258 = ($257|0)>=(96);
    $259 = $o;
    if ($258) {
     $260 = (($259) + 1)|0;
     $o = $260;
    } else {
     $261 = (($259|0) / 2)&-1;
     $262 = (($261) + 1)|0;
     $o = $262;
    }
    $263 = $3;
    $264 = $start;
    $265 = $j;
    $266 = (($264) + ($265))|0;
    $267 = (($266) + 1)|0;
    $268 = ($263|0)<($267|0);
    if ($268) {
     $269 = $start;
     $270 = $j;
     $271 = (($269) + ($270))|0;
     $272 = (($271) + 1)|0;
     $273 = $3;
     $274 = (($272) - ($273))|0;
     $0 = $274;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
    $275 = $l;
    $276 = (($275) + 1)|0;
    $l = $276;
    $277 = $k;
    $278 = ($277*6)|0;
    $279 = (($278) + 4)|0;
    $280 = $m;
    $281 = $280<<3;
    $282 = (($279) + ($281))|0;
    $283 = $l;
    $284 = (($282) + ($283))|0;
    $n = $284;
    while(1) {
     $285 = $n;
     $286 = $j;
     $287 = ($285|0)<($286|0);
     if (!($287)) {
      label = 64;
      break;
     }
     $288 = $start;
     $289 = $n;
     $290 = (($288) + ($289))|0;
     $291 = $1;
     $292 = (($291) + ($290)|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = $294 ^ -1;
     $296 = $295 & 128;
     $297 = ($296|0)!=(0);
     if ($297) {
      $298 = $start;
      $299 = $n;
      $300 = (($298) + ($299))|0;
      $301 = $1;
      $302 = (($301) + ($300)|0);
      $303 = HEAP8[$302>>0]|0;
      $304 = $303&255;
      $305 = ($304|0)>(73);
      if ($305) {
       label = 58;
       break;
      }
      $306 = $start;
      $307 = $n;
      $308 = (($306) + ($307))|0;
      $309 = $1;
      $310 = (($309) + ($308)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $312 << 4;
      $314 = $313 & 16;
      $315 = $start;
      $316 = $n;
      $317 = (($315) + ($316))|0;
      $318 = (($317) + 1)|0;
      $319 = $1;
      $320 = (($319) + ($318)|0);
      $321 = HEAP8[$320>>0]|0;
      $322 = $321&255;
      $323 = $322 >> 4;
      $324 = $323 & 15;
      $325 = $314 | $324;
      $326 = $k;
      $327 = ($325|0)>($326|0);
      if ($327) {
       label = 60;
       break;
      }
      $328 = $n;
      $329 = (($328) + 2)|0;
      $n = $329;
     } else {
      $330 = $n;
      $331 = (($330) + 3)|0;
      $n = $331;
     }
     $332 = $n;
     $333 = (($332) + 1)|0;
     $n = $333;
    }
    if ((label|0) == 58) {
     $0 = -1;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
    else if ((label|0) == 60) {
     $0 = -1;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
    else if ((label|0) == 64) {
     $334 = $2;
     _pw_read_title(0,$334,0);
     $0 = 0;
     $335 = $0;
     STACKTOP = sp;return ($335|0);
    }
   }
  }
 }
 return (0)|0;
}
function _test_pp21($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $or$cond = 0, $ssize = 0, $start = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $l = 0;
 $j = 0;
 while(1) {
  $4 = $j;
  $5 = ($4|0)<(31);
  if (!($5)) {
   label = 8;
   break;
  }
  $6 = $start;
  $7 = $j;
  $8 = $7<<3;
  $9 = (($6) + ($8))|0;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 << 8;
  $15 = $start;
  $16 = (($15) + 1)|0;
  $17 = $j;
  $18 = $17<<3;
  $19 = (($16) + ($18))|0;
  $20 = $1;
  $21 = (($20) + ($19)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($14) + ($23))|0;
  $25 = $24<<1;
  $k = $25;
  $26 = $k;
  $27 = $l;
  $28 = (($27) + ($26))|0;
  $l = $28;
  $29 = $start;
  $30 = (($29) + 2)|0;
  $31 = $j;
  $32 = $31<<3;
  $33 = (($30) + ($32))|0;
  $34 = $1;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($37|0)>(15);
  if ($38) {
   label = 4;
   break;
  }
  $39 = $start;
  $40 = (($39) + 4)|0;
  $41 = $j;
  $42 = $41<<3;
  $43 = (($40) + ($42))|0;
  $44 = $1;
  $45 = (($44) + ($43)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 << 8;
  $49 = $start;
  $50 = (($49) + 5)|0;
  $51 = $j;
  $52 = $51<<3;
  $53 = (($50) + ($52))|0;
  $54 = $1;
  $55 = (($54) + ($53)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (($48) + ($57))|0;
  $59 = $58<<1;
  $60 = $k;
  $61 = ($59|0)>($60|0);
  if ($61) {
   label = 6;
   break;
  }
  $62 = $j;
  $63 = (($62) + 1)|0;
  $j = $63;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 8) {
  $64 = $l;
  $65 = ($64|0)<=(2);
  if ($65) {
   $0 = -1;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  }
  $66 = $start;
  $67 = (($66) + 248)|0;
  $68 = $1;
  $69 = (($68) + ($67)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $l = $71;
  $72 = $l;
  $73 = ($72|0)>(127);
  $74 = $l;
  $75 = ($74|0)==(0);
  $or$cond = $73 | $75;
  if ($or$cond) {
   $0 = -1;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  }
  $k = 0;
  $j = 0;
  while(1) {
   $76 = $j;
   $77 = ($76|0)<(512);
   if (!($77)) {
    break;
   }
   $78 = $start;
   $79 = (($78) + 250)|0;
   $80 = $j;
   $81 = (($79) + ($80))|0;
   $82 = $1;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $l = $85;
   $86 = $l;
   $87 = $k;
   $88 = ($86|0)>($87|0);
   if ($88) {
    $89 = $l;
    $k = $89;
   }
   $90 = $j;
   $91 = (($90) + 1)|0;
   $j = $91;
  }
  $92 = $k;
  $93 = (($92) + 1)|0;
  $k = $93;
  $94 = $k;
  $95 = $94<<6;
  $k = $95;
  $ssize = 0;
  $j = 0;
  while(1) {
   $96 = $j;
   $97 = $k;
   $98 = ($96|0)<($97|0);
   if (!($98)) {
    break;
   }
   $99 = $start;
   $100 = (($99) + 762)|0;
   $101 = $j;
   $102 = $101<<1;
   $103 = (($100) + ($102))|0;
   $104 = $1;
   $105 = (($104) + ($103)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $107 << 8;
   $109 = $start;
   $110 = (($109) + 763)|0;
   $111 = $j;
   $112 = $111<<1;
   $113 = (($110) + ($112))|0;
   $114 = $1;
   $115 = (($114) + ($113)|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = (($108) + ($117))|0;
   $l = $118;
   $119 = $l;
   $120 = $ssize;
   $121 = ($119|0)>($120|0);
   if ($121) {
    $122 = $l;
    $ssize = $122;
   }
   $123 = $l;
   $124 = ($123|0)>(16384);
   if ($124) {
    label = 22;
    break;
   }
   $125 = $j;
   $126 = (($125) + 1)|0;
   $j = $126;
  }
  if ((label|0) == 22) {
   $0 = -1;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  }
  $127 = $k;
  $128 = $127<<1;
  $k = $128;
  $129 = $start;
  $130 = $k;
  $131 = (($129) + ($130))|0;
  $132 = (($131) + 762)|0;
  $133 = $1;
  $134 = (($133) + ($132)|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = $136 << 24;
  $138 = $start;
  $139 = $k;
  $140 = (($138) + ($139))|0;
  $141 = (($140) + 763)|0;
  $142 = $1;
  $143 = (($142) + ($141)|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&255;
  $146 = $145 << 16;
  $147 = (($137) + ($146))|0;
  $148 = $start;
  $149 = $k;
  $150 = (($148) + ($149))|0;
  $151 = (($150) + 764)|0;
  $152 = $1;
  $153 = (($152) + ($151)|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = $155 << 8;
  $157 = (($147) + ($156))|0;
  $158 = $start;
  $159 = $k;
  $160 = (($158) + ($159))|0;
  $161 = (($160) + 765)|0;
  $162 = $1;
  $163 = (($162) + ($161)|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = (($157) + ($165))|0;
  $l = $166;
  $167 = $l;
  $168 = $ssize;
  $169 = (($168) + 1)|0;
  $170 = $169<<2;
  $171 = ($167|0)!=($170|0);
  if ($171) {
   $0 = -1;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  } else {
   $172 = $2;
   _pw_read_title(0,$172,0);
   $0 = 0;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  }
 }
 return (0)|0;
}
function _depack_pp21($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0, $i = 0, $j = 0, $max = 0, $numpat = 0, $ptable = 0, $size = 0, $ssize = 0, $tab = 0, $tabsize = 0, $tptr = 0;
 var $trk = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 132800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 132664|0;
 $trk = sp + 132152|0;
 $tptr = sp + 32|0;
 $buf = sp + 131120|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $ssize = 0;
 $tabsize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk|0),0,512)|0;
 _memset(($tptr|0),0,65536)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  $5 = $1;
  if (!($4)) {
   break;
  }
  (_pw_write_zero($5,22)|0);
  $6 = $1;
  $7 = $0;
  $8 = (_read16b($7)|0);
  $9 = $8&65535;
  $size = $9;
  $10 = $9&65535;
  _write16b($6,$10);
  $11 = $size;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $1;
  $16 = $0;
  $17 = (_read8($16)|0);
  _write8($15,$17);
  $18 = $1;
  $19 = $0;
  $20 = (_read8($19)|0);
  _write8($18,$20);
  $21 = $1;
  $22 = $0;
  $23 = (_read16b($22)|0);
  _write16b($21,$23);
  $24 = $1;
  $25 = $0;
  $26 = (_read16b($25)|0);
  _write16b($24,$26);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = $0;
 $30 = (_read8($29)|0);
 $numpat = $30;
 _write8($5,$30);
 $31 = $1;
 $32 = $0;
 $33 = (_read8($32)|0);
 _write8($31,$33);
 $max = 0;
 $j = 0;
 while(1) {
  $34 = $j;
  $35 = ($34|0)<(4);
  $i = 0;
  if (!($35)) {
   break;
  }
  while(1) {
   $36 = $i;
   $37 = ($36|0)<(128);
   if (!($37)) {
    break;
   }
   $38 = $0;
   $39 = (_read8($38)|0);
   $40 = $i;
   $41 = $j;
   $42 = (($trk) + ($41<<7)|0);
   $43 = (($42) + ($40)|0);
   HEAP8[$43>>0] = $39;
   $44 = $i;
   $45 = $j;
   $46 = (($trk) + ($45<<7)|0);
   $47 = (($46) + ($44)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $max;
   $51 = ($49|0)>($50|0);
   if ($51) {
    $52 = $i;
    $53 = $j;
    $54 = (($trk) + ($53<<7)|0);
    $55 = (($54) + ($52)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $max = $57;
   }
   $58 = $i;
   $59 = (($58) + 1)|0;
   $i = $59;
  }
  $60 = $j;
  $61 = (($60) + 1)|0;
  $j = $61;
 }
 while(1) {
  $62 = $i;
  $63 = $numpat;
  $64 = $63&255;
  $65 = ($62|0)<($64|0);
  $66 = $1;
  $67 = $i;
  if (!($65)) {
   break;
  }
  $68 = $67&255;
  _write8($66,$68);
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = (128 - ($67))|0;
 (_pw_write_zero($66,$71)|0);
 $72 = $1;
 _write32b($72,1294879534);
 $j = 0;
 while(1) {
  $73 = $j;
  $74 = $max;
  $75 = ($73|0)<=($74|0);
  if (!($75)) {
   break;
  }
  $i = 0;
  while(1) {
   $76 = $i;
   $77 = ($76|0)<(64);
   if (!($77)) {
    break;
   }
   $78 = $0;
   $79 = (_read16b($78)|0);
   $80 = $79&65535;
   $81 = $i;
   $82 = $j;
   $83 = (($tptr) + ($82<<8)|0);
   $84 = (($83) + ($81<<2)|0);
   HEAP32[$84>>2] = $80;
   $85 = $i;
   $86 = (($85) + 1)|0;
   $i = $86;
  }
  $87 = $j;
  $88 = (($87) + 1)|0;
  $j = $88;
 }
 $89 = $0;
 $90 = (_read32b($89)|0);
 $tabsize = $90;
 $91 = $tabsize;
 $92 = (_malloc($91)|0);
 $tab = $92;
 $93 = $tab;
 $94 = $tabsize;
 $95 = $0;
 (_fread(($93|0),($94|0),1,($95|0))|0);
 $i = 0;
 while(1) {
  $96 = $i;
  $97 = $numpat;
  $98 = $97&255;
  $99 = ($96|0)<($98|0);
  if (!($99)) {
   break;
  }
  _memset(($buf|0),0,1024)|0;
  $j = 0;
  while(1) {
   $100 = $j;
   $101 = ($100|0)<(64);
   if (!($101)) {
    break;
   }
   $102 = $j;
   $103 = $102<<4;
   $104 = (($buf) + ($103)|0);
   $b = $104;
   $105 = $b;
   $106 = $tab;
   $107 = $j;
   $108 = $i;
   $109 = (($trk) + ($108)|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110&255;
   $112 = (($tptr) + ($111<<8)|0);
   $113 = (($112) + ($107<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $114<<2;
   $116 = (($106) + ($115)|0);
   ;HEAP8[$105>>0]=HEAP8[$116>>0]|0;HEAP8[$105+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$105+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$105+3>>0]=HEAP8[$116+3>>0]|0;
   $117 = $b;
   $118 = ((($117)) + 4|0);
   $119 = $tab;
   $120 = $j;
   $121 = $i;
   $122 = ((($trk)) + 128|0);
   $123 = (($122) + ($121)|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = (($tptr) + ($125<<8)|0);
   $127 = (($126) + ($120<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $128<<2;
   $130 = (($119) + ($129)|0);
   ;HEAP8[$118>>0]=HEAP8[$130>>0]|0;HEAP8[$118+1>>0]=HEAP8[$130+1>>0]|0;HEAP8[$118+2>>0]=HEAP8[$130+2>>0]|0;HEAP8[$118+3>>0]=HEAP8[$130+3>>0]|0;
   $131 = $b;
   $132 = ((($131)) + 8|0);
   $133 = $tab;
   $134 = $j;
   $135 = $i;
   $136 = ((($trk)) + 256|0);
   $137 = (($136) + ($135)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($tptr) + ($139<<8)|0);
   $141 = (($140) + ($134<<2)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142<<2;
   $144 = (($133) + ($143)|0);
   ;HEAP8[$132>>0]=HEAP8[$144>>0]|0;HEAP8[$132+1>>0]=HEAP8[$144+1>>0]|0;HEAP8[$132+2>>0]=HEAP8[$144+2>>0]|0;HEAP8[$132+3>>0]=HEAP8[$144+3>>0]|0;
   $145 = $b;
   $146 = ((($145)) + 12|0);
   $147 = $tab;
   $148 = $j;
   $149 = $i;
   $150 = ((($trk)) + 384|0);
   $151 = (($150) + ($149)|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = (($tptr) + ($153<<8)|0);
   $155 = (($154) + ($148<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $156<<2;
   $158 = (($147) + ($157)|0);
   ;HEAP8[$146>>0]=HEAP8[$158>>0]|0;HEAP8[$146+1>>0]=HEAP8[$158+1>>0]|0;HEAP8[$146+2>>0]=HEAP8[$158+2>>0]|0;HEAP8[$146+3>>0]=HEAP8[$158+3>>0]|0;
   $159 = $j;
   $160 = (($159) + 1)|0;
   $j = $160;
  }
  $161 = $1;
  (_fwrite(($buf|0),1024,1,($161|0))|0);
  $162 = $i;
  $163 = (($162) + 1)|0;
  $i = $163;
 }
 $164 = $tab;
 _free($164);
 $165 = $1;
 $166 = $0;
 $167 = $ssize;
 (_pw_move_data($165,$166,$167)|0);
 STACKTOP = sp;return 0;
}
function _test_starpack($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0;
 var $k = 0, $l = 0, $m = 0, $or$cond = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $start;
 $5 = (($4) + 268)|0;
 $6 = $1;
 $7 = (($6) + ($5)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 8;
 $11 = $start;
 $12 = (($11) + 269)|0;
 $13 = $1;
 $14 = (($13) + ($12)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($10) + ($16))|0;
 $l = $17;
 $18 = $l;
 $19 = $18 & 3;
 $20 = ($19|0)!=(0);
 if ($20) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $21 = $l;
 $22 = (($21|0) / 4)&-1;
 $k = $22;
 $23 = $k;
 $24 = ($23|0)==(0);
 $25 = $k;
 $26 = ($25|0)>(127);
 $or$cond = $24 | $26;
 if ($or$cond) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $27 = $start;
 $28 = (($27) + 784)|0;
 $29 = $1;
 $30 = (($29) + ($28)|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)!=(0);
 if ($33) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $k = 0;
 while(1) {
  $34 = $k;
  $35 = ($34|0)<(31);
  if (!($35)) {
   break;
  }
  $36 = $start;
  $37 = (($36) + 20)|0;
  $38 = $k;
  $39 = $38<<3;
  $40 = (($37) + ($39))|0;
  $41 = $1;
  $42 = (($41) + ($40)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $44 << 8;
  $46 = $start;
  $47 = (($46) + 21)|0;
  $48 = $k;
  $49 = $48<<3;
  $50 = (($47) + ($49))|0;
  $51 = $1;
  $52 = (($51) + ($50)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($45) + ($54))|0;
  $56 = $55<<1;
  $j = $56;
  $57 = $start;
  $58 = (($57) + 24)|0;
  $59 = $k;
  $60 = $59<<3;
  $61 = (($58) + ($60))|0;
  $62 = $1;
  $63 = (($62) + ($61)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $65 << 8;
  $67 = $start;
  $68 = (($67) + 25)|0;
  $69 = $k;
  $70 = $69<<3;
  $71 = (($68) + ($70))|0;
  $72 = $1;
  $73 = (($72) + ($71)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = (($66) + ($75))|0;
  $77 = $76<<1;
  $78 = $start;
  $79 = (($78) + 26)|0;
  $80 = $k;
  $81 = $80<<3;
  $82 = (($79) + ($81))|0;
  $83 = $1;
  $84 = (($83) + ($82)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $86 << 8;
  $88 = $start;
  $89 = (($88) + 27)|0;
  $90 = $k;
  $91 = $90<<3;
  $92 = (($89) + ($91))|0;
  $93 = $1;
  $94 = (($93) + ($92)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = (($87) + ($96))|0;
  $98 = $97<<1;
  $99 = (($77) + ($98))|0;
  $ssize = $99;
  $100 = $j;
  $101 = (($100) + 2)|0;
  $102 = $ssize;
  $103 = ($101|0)<($102|0);
  if ($103) {
   label = 10;
   break;
  }
  $104 = $k;
  $105 = (($104) + 1)|0;
  $k = $105;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $k = 0;
 while(1) {
  $106 = $k;
  $107 = ($106|0)<(31);
  $108 = $start;
  if (!($107)) {
   break;
  }
  $109 = (($108) + 22)|0;
  $110 = $k;
  $111 = $110<<3;
  $112 = (($109) + ($111))|0;
  $113 = $1;
  $114 = (($113) + ($112)|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = ($116|0)>(15);
  if ($117) {
   label = 16;
   break;
  }
  $118 = $start;
  $119 = (($118) + 23)|0;
  $120 = $k;
  $121 = $120<<3;
  $122 = (($119) + ($121))|0;
  $123 = $1;
  $124 = (($123) + ($122)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = ($126|0)>(64);
  if ($127) {
   label = 16;
   break;
  }
  $128 = $k;
  $129 = (($128) + 1)|0;
  $k = $129;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $130 = (($108) + 784)|0;
 $131 = $1;
 $132 = (($131) + ($130)|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 $135 = $134 << 24;
 $136 = $start;
 $137 = (($136) + 785)|0;
 $138 = $1;
 $139 = (($138) + ($137)|0);
 $140 = HEAP8[$139>>0]|0;
 $141 = $140&255;
 $142 = $141 << 16;
 $143 = (($135) + ($142))|0;
 $144 = $start;
 $145 = (($144) + 786)|0;
 $146 = $1;
 $147 = (($146) + ($145)|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = $149 << 8;
 $151 = (($143) + ($150))|0;
 $152 = $start;
 $153 = (($152) + 787)|0;
 $154 = $1;
 $155 = (($154) + ($153)|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = $156&255;
 $158 = (($151) + ($157))|0;
 $k = $158;
 $159 = $k;
 $160 = ($159|0)<(788);
 if ($160) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $j = 0;
 while(1) {
  $161 = $j;
  $162 = $l;
  $163 = ($161|0)<($162|0);
  if (!($163)) {
   break;
  }
  $164 = $start;
  $165 = (($164) + 272)|0;
  $166 = $j;
  $167 = (($165) + ($166))|0;
  $168 = $1;
  $169 = (($168) + ($167)|0);
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 << 24;
  $173 = $start;
  $174 = (($173) + 273)|0;
  $175 = $j;
  $176 = (($174) + ($175))|0;
  $177 = $1;
  $178 = (($177) + ($176)|0);
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = $180 << 16;
  $182 = (($172) + ($181))|0;
  $183 = $start;
  $184 = (($183) + 274)|0;
  $185 = $j;
  $186 = (($184) + ($185))|0;
  $187 = $1;
  $188 = (($187) + ($186)|0);
  $189 = HEAP8[$188>>0]|0;
  $190 = $189&255;
  $191 = $190 << 8;
  $192 = (($182) + ($191))|0;
  $193 = $start;
  $194 = (($193) + 275)|0;
  $195 = $j;
  $196 = (($194) + ($195))|0;
  $197 = $1;
  $198 = (($197) + ($196)|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $199&255;
  $201 = (($192) + ($200))|0;
  $m = $201;
  $202 = $m;
  $203 = $k;
  $204 = ($202|0)>($203|0);
  if ($204) {
   label = 23;
   break;
  }
  $205 = $j;
  $206 = (($205) + 4)|0;
  $j = $206;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $207 = $j;
 $208 = (($207) + 2)|0;
 $j = $208;
 while(1) {
  $209 = $j;
  $210 = ($209|0)<(128);
  $211 = $start;
  if (!($210)) {
   break;
  }
  $212 = (($211) + 272)|0;
  $213 = $j;
  $214 = $213<<2;
  $215 = (($212) + ($214))|0;
  $216 = $1;
  $217 = (($216) + ($215)|0);
  $218 = HEAP8[$217>>0]|0;
  $219 = $218&255;
  $220 = $219 << 24;
  $221 = $start;
  $222 = (($221) + 273)|0;
  $223 = $j;
  $224 = $223<<2;
  $225 = (($222) + ($224))|0;
  $226 = $1;
  $227 = (($226) + ($225)|0);
  $228 = HEAP8[$227>>0]|0;
  $229 = $228&255;
  $230 = $229 << 16;
  $231 = (($220) + ($230))|0;
  $232 = $start;
  $233 = (($232) + 274)|0;
  $234 = $j;
  $235 = $234<<2;
  $236 = (($233) + ($235))|0;
  $237 = $1;
  $238 = (($237) + ($236)|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239&255;
  $241 = $240 << 8;
  $242 = (($231) + ($241))|0;
  $243 = $start;
  $244 = (($243) + 275)|0;
  $245 = $j;
  $246 = $245<<2;
  $247 = (($244) + ($246))|0;
  $248 = $1;
  $249 = (($248) + ($247)|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $250&255;
  $252 = (($242) + ($251))|0;
  $m = $252;
  $253 = $m;
  $254 = ($253|0)!=(0);
  if ($254) {
   label = 28;
   break;
  }
  $255 = $j;
  $256 = (($255) + 1)|0;
  $j = $256;
 }
 if ((label|0) == 28) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 $257 = (($211) + 788)|0;
 $j = $257;
 while(1) {
  $258 = $j;
  $259 = $k;
  $260 = $start;
  $261 = (($259) + ($260))|0;
  $262 = (($261) - 4)|0;
  $263 = ($258|0)<($262|0);
  if (!($263)) {
   label = 48;
   break;
  }
  $264 = $j;
  $265 = $1;
  $266 = (($265) + ($264)|0);
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = ($268|0)==(128);
  $270 = $j;
  if ($269) {
   $271 = (($270) + 1)|0;
   $j = $271;
   continue;
  }
  $272 = $1;
  $273 = (($272) + ($270)|0);
  $274 = HEAP8[$273>>0]|0;
  $275 = $274&255;
  $276 = ($275|0)>(128);
  if ($276) {
   label = 35;
   break;
  }
  $277 = $j;
  $278 = $1;
  $279 = (($278) + ($277)|0);
  $280 = HEAP8[$279>>0]|0;
  $281 = $280&255;
  $282 = ($281|0)==(0);
  if ($282) {
   $283 = $j;
   $284 = (($283) + 1)|0;
   $285 = $1;
   $286 = (($285) + ($284)|0);
   $287 = HEAP8[$286>>0]|0;
   $288 = $287&255;
   $289 = ($288|0)==(0);
   if ($289) {
    $290 = $j;
    $291 = (($290) + 2)|0;
    $292 = $1;
    $293 = (($292) + ($291)|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294&255;
    $296 = ($295|0)==(0);
    if ($296) {
     $297 = $j;
     $298 = (($297) + 3)|0;
     $299 = $1;
     $300 = (($299) + ($298)|0);
     $301 = HEAP8[$300>>0]|0;
     $302 = $301&255;
     $303 = ($302|0)==(0);
     if ($303) {
      label = 40;
      break;
     }
    }
   }
  }
  $304 = $j;
  $305 = (($304) + 2)|0;
  $306 = $1;
  $307 = (($306) + ($305)|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = ($309*15)|0;
  $311 = ($310|0)==(12);
  if ($311) {
   $312 = $j;
   $313 = (($312) + 3)|0;
   $314 = $1;
   $315 = (($314) + ($313)|0);
   $316 = HEAP8[$315>>0]|0;
   $317 = $316&255;
   $318 = ($317|0)>(64);
   if ($318) {
    label = 43;
    break;
   }
  }
  $319 = $j;
  $320 = (($319) + 2)|0;
  $321 = $1;
  $322 = (($321) + ($320)|0);
  $323 = HEAP8[$322>>0]|0;
  $324 = $323&255;
  $325 = ($324*15)|0;
  $326 = ($325|0)==(13);
  if ($326) {
   $327 = $j;
   $328 = (($327) + 3)|0;
   $329 = $1;
   $330 = (($329) + ($328)|0);
   $331 = HEAP8[$330>>0]|0;
   $332 = $331&255;
   $333 = ($332|0)>(64);
   if ($333) {
    label = 46;
    break;
   }
  }
  $334 = $j;
  $335 = (($334) + 4)|0;
  $j = $335;
 }
 if ((label|0) == 35) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 else if ((label|0) == 40) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 else if ((label|0) == 43) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 else if ((label|0) == 46) {
  $0 = -1;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 else if ((label|0) == 48) {
  $336 = $1;
  $337 = $2;
  _pw_read_title($336,$337,20);
  $0 = 0;
  $338 = $0;
  STACKTOP = sp;return ($338|0);
 }
 return (0)|0;
}
function _depack_starpack($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0;
 var $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $i = 0, $j = 0, $k = 0, $num_pat = 0, $ofs = 0, $paddr = 0, $paddr_tmp = 0, $paddr_tmp2 = 0, $pat_pos = 0, $pnum = 0, $pnum_tmp = 0, $size = 0, $smp_addr = 0, $ssize = 0, $tmp1 = 0;
 var $tmp2 = 0, $tmp_ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 2752|0;
 $pnum_tmp = sp + 2624|0;
 $buffer = sp + 1592|0;
 $paddr = sp + 1048|0;
 $paddr_tmp = sp + 536|0;
 $paddr_tmp2 = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $num_pat = 0;
 $i = 0;
 $j = 0;
 $k = 0;
 $ssize = 0;
 $smp_addr = 0;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$pnum_tmp; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr_tmp|0),0,512)|0;
 _memset(($paddr_tmp2|0),0,512)|0;
 $2 = $1;
 $3 = $0;
 (_pw_move_data($2,$3,20)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $1;
  (_pw_write_zero($6,22)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $1;
  $17 = $0;
  $18 = (_read8($17)|0);
  _write8($16,$18);
  $19 = $1;
  $20 = $0;
  $21 = (_read8($20)|0);
  _write8($19,$21);
  $22 = $1;
  $23 = $0;
  $24 = (_read16b($23)|0);
  _write16b($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_read16b($26)|0);
  _write16b($25,$27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = (_read16b($30)|0);
 $32 = $31&255;
 $pat_pos = $32;
 $33 = $0;
 (_fseek(($33|0),2,1)|0);
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = ($34|0)<(128);
  if (!($35)) {
   break;
  }
  $36 = $0;
  $37 = (_read32b($36)|0);
  $38 = $i;
  $39 = (($paddr) + ($38<<2)|0);
  HEAP32[$39>>2] = $37;
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $pat_pos;
  $44 = $43&255;
  $45 = ($42|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $i;
  $47 = ($46|0)==(0);
  if ($47) {
   HEAP8[$pnum>>0] = 0;
   $48 = $tmp_ptr;
   $49 = (($48) + 1)|0;
   $tmp_ptr = $49;
  } else {
   $j = 0;
   while(1) {
    $50 = $j;
    $51 = $i;
    $52 = ($50|0)<($51|0);
    if (!($52)) {
     break;
    }
    $53 = $i;
    $54 = (($paddr) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $j;
    $57 = (($paddr) + ($56<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($55|0)==($58|0);
    $60 = $j;
    if ($59) {
     label = 14;
     break;
    }
    $65 = (($60) + 1)|0;
    $j = $65;
   }
   if ((label|0) == 14) {
    label = 0;
    $61 = (($pnum) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $i;
    $64 = (($pnum) + ($63)|0);
    HEAP8[$64>>0] = $62;
   }
   $66 = $j;
   $67 = $i;
   $68 = ($66|0)==($67|0);
   if ($68) {
    $69 = $tmp_ptr;
    $70 = (($69) + 1)|0;
    $tmp_ptr = $70;
    $71 = $69&255;
    $72 = $i;
    $73 = (($pnum) + ($72)|0);
    HEAP8[$73>>0] = $71;
   }
  }
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(128);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = (($paddr) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $i;
  $82 = (($paddr_tmp) + ($81<<2)|0);
  HEAP32[$82>>2] = $80;
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 L28: while(1) {
  $i = 0;
  L30: while(1) {
   $85 = $i;
   $86 = $pat_pos;
   $87 = $86&255;
   $88 = ($85|0)<($87|0);
   $j = 0;
   if (!($88)) {
    break L28;
   }
   while(1) {
    $89 = $j;
    $90 = $i;
    $91 = ($89|0)<($90|0);
    $92 = $i;
    if (!($91)) {
     break;
    }
    $93 = (($paddr_tmp) + ($92<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $j;
    $96 = (($paddr_tmp) + ($95<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($94|0)<($97|0);
    $99 = $j;
    if ($98) {
     break L30;
    }
    $123 = (($99) + 1)|0;
    $j = $123;
   }
   $124 = (($92) + 1)|0;
   $i = $124;
  }
  $100 = (($pnum) + ($99)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $tmp2 = $102;
  $103 = $i;
  $104 = (($pnum) + ($103)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $j;
  $107 = (($pnum) + ($106)|0);
  HEAP8[$107>>0] = $105;
  $108 = $tmp2;
  $109 = $108&255;
  $110 = $i;
  $111 = (($pnum) + ($110)|0);
  HEAP8[$111>>0] = $109;
  $112 = $j;
  $113 = (($paddr_tmp) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $tmp1 = $114;
  $115 = $i;
  $116 = (($paddr_tmp) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $j;
  $119 = (($paddr_tmp) + ($118<<2)|0);
  HEAP32[$119>>2] = $117;
  $120 = $tmp1;
  $121 = $i;
  $122 = (($paddr_tmp) + ($121<<2)|0);
  HEAP32[$122>>2] = $120;
 }
 $i = 0;
 while(1) {
  $125 = $i;
  $126 = ($125|0)<(128);
  if (!($126)) {
   break;
  }
  $127 = $i;
  $128 = ($127|0)==(0);
  $129 = $i;
  $130 = (($paddr_tmp) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $j;
  $133 = (($paddr_tmp2) + ($132<<2)|0);
  if ($128) {
   HEAP32[$133>>2] = $131;
  } else {
   $134 = HEAP32[$133>>2]|0;
   $135 = ($131|0)==($134|0);
   if (!($135)) {
    $136 = $i;
    $137 = (($paddr_tmp) + ($136<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $j;
    $140 = (($139) + 1)|0;
    $j = $140;
    $141 = (($paddr_tmp2) + ($140<<2)|0);
    HEAP32[$141>>2] = $138;
   }
  }
  $142 = $i;
  $143 = (($142) + 1)|0;
  $i = $143;
 }
 $j = 0;
 $i = 0;
 while(1) {
  $144 = $i;
  $145 = $pat_pos;
  $146 = $145&255;
  $147 = (($146) - 1)|0;
  $148 = ($144|0)<($147|0);
  if (!($148)) {
   break;
  }
  $149 = $i;
  $150 = (($paddr_tmp2) + ($149<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $j;
  $153 = (($paddr_tmp) + ($152<<2)|0);
  HEAP32[$153>>2] = $151;
  $154 = $j;
  $155 = (($154) + 1)|0;
  $j = $155;
  $156 = $i;
  $157 = (($156) + 1)|0;
  $158 = (($paddr_tmp2) + ($157<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $i;
  $161 = (($paddr_tmp2) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($159) - ($162))|0;
  $164 = ($163|0)>(1024);
  if ($164) {
   $165 = $i;
   $166 = (($paddr_tmp2) + ($165<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + 1024)|0;
   $169 = $j;
   $170 = (($paddr_tmp) + ($169<<2)|0);
   HEAP32[$170>>2] = $168;
   $171 = $j;
   $172 = (($171) + 1)|0;
   $j = $172;
  }
  $173 = $i;
  $174 = (($173) + 1)|0;
  $i = $174;
 }
 $i = 0;
 while(1) {
  $175 = $i;
  $176 = ($175|0)<(128);
  if (!($176)) {
   break;
  }
  $j = 0;
  while(1) {
   $177 = $j;
   $178 = ($177|0)<(128);
   if (!($178)) {
    break;
   }
   $179 = $i;
   $180 = (($paddr) + ($179<<2)|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $j;
   $183 = (($paddr_tmp) + ($182<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($181|0)==($184|0);
   $186 = $j;
   if ($185) {
    label = 46;
    break;
   }
   $190 = (($186) + 1)|0;
   $j = $190;
  }
  if ((label|0) == 46) {
   label = 0;
   $187 = $186&255;
   $188 = $i;
   $189 = (($pnum_tmp) + ($188)|0);
   HEAP8[$189>>0] = $187;
  }
  $191 = $i;
  $192 = (($191) + 1)|0;
  $i = $192;
 }
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $193 = $i;
  $194 = $pat_pos;
  $195 = $194&255;
  $196 = ($193|0)<($195|0);
  if (!($196)) {
   break;
  }
  $197 = $i;
  $198 = (($pnum_tmp) + ($197)|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $i;
  $201 = (($pnum) + ($200)|0);
  HEAP8[$201>>0] = $199;
  $202 = $i;
  $203 = (($202) + 1)|0;
  $i = $203;
 }
 $204 = $1;
 $205 = $pat_pos;
 _write8($204,$205);
 $i = 0;
 while(1) {
  $206 = $i;
  $207 = $pat_pos;
  $208 = $207&255;
  $209 = ($206|0)<($208|0);
  if (!($209)) {
   break;
  }
  $210 = $i;
  $211 = (($pnum) + ($210)|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&255;
  $214 = $num_pat;
  $215 = $214&255;
  $216 = ($213|0)>($215|0);
  if ($216) {
   $217 = $i;
   $218 = (($pnum) + ($217)|0);
   $219 = HEAP8[$218>>0]|0;
   $num_pat = $219;
  }
  $220 = $i;
  $221 = (($220) + 1)|0;
  $i = $221;
 }
 $222 = $1;
 _write8($222,127);
 $223 = $1;
 (_fwrite(($pnum|0),128,1,($223|0))|0);
 $224 = $1;
 _write32b($224,1294879534);
 $225 = $0;
 (_fseek(($225|0),784,0)|0);
 $226 = $0;
 $227 = (_read32b($226)|0);
 $228 = (($227) + 788)|0;
 $smp_addr = $228;
 $229 = $num_pat;
 $230 = $229&255;
 $231 = (($230) + 1)|0;
 $232 = $231&255;
 $num_pat = $232;
 $i = 0;
 while(1) {
  $233 = $i;
  $234 = $num_pat;
  $235 = $234&255;
  $236 = ($233|0)<($235|0);
  if (!($236)) {
   break;
  }
  _memset(($buffer|0),0,1024)|0;
  $j = 0;
  while(1) {
   $237 = $j;
   $238 = ($237|0)<(64);
   if (!($238)) {
    break;
   }
   $k = 0;
   while(1) {
    $239 = $k;
    $240 = ($239|0)<(4);
    $241 = $j;
    if (!($240)) {
     break;
    }
    $242 = $241<<4;
    $243 = $k;
    $244 = $243<<2;
    $245 = (($242) + ($244))|0;
    $ofs = $245;
    $246 = $0;
    $247 = (_read8($246)|0);
    $c1 = $247;
    $248 = $c1;
    $249 = $248&255;
    $250 = ($249|0)==(128);
    if (!($250)) {
     $251 = $0;
     $252 = (_read8($251)|0);
     $c2 = $252;
     $253 = $0;
     $254 = (_read8($253)|0);
     $c3 = $254;
     $255 = $0;
     $256 = (_read8($255)|0);
     $c4 = $256;
     $257 = $c1;
     $258 = $257&255;
     $259 = $258 & 15;
     $260 = $259&255;
     $261 = $ofs;
     $262 = (($buffer) + ($261)|0);
     HEAP8[$262>>0] = $260;
     $263 = $c2;
     $264 = $ofs;
     $265 = (($264) + 1)|0;
     $266 = (($buffer) + ($265)|0);
     HEAP8[$266>>0] = $263;
     $267 = $c3;
     $268 = $267&255;
     $269 = $268 & 15;
     $270 = $269&255;
     $271 = $ofs;
     $272 = (($271) + 2)|0;
     $273 = (($buffer) + ($272)|0);
     HEAP8[$273>>0] = $270;
     $274 = $c4;
     $275 = $ofs;
     $276 = (($275) + 3)|0;
     $277 = (($buffer) + ($276)|0);
     HEAP8[$277>>0] = $274;
     $278 = $c1;
     $279 = $278&255;
     $280 = $279 & 240;
     $281 = $c3;
     $282 = $281&255;
     $283 = $282 >> 4;
     $284 = $283 & 15;
     $285 = $280 | $284;
     $286 = $285 >> 2;
     $287 = $286&255;
     $c5 = $287;
     $288 = $c5;
     $289 = $288&255;
     $290 = $289 & 240;
     $291 = $ofs;
     $292 = (($buffer) + ($291)|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = $294 | $290;
     $296 = $295&255;
     HEAP8[$292>>0] = $296;
     $297 = $c5;
     $298 = $297&255;
     $299 = $298 << 4;
     $300 = $299 & 240;
     $301 = $ofs;
     $302 = (($301) + 2)|0;
     $303 = (($buffer) + ($302)|0);
     $304 = HEAP8[$303>>0]|0;
     $305 = $304&255;
     $306 = $305 | $300;
     $307 = $306&255;
     HEAP8[$303>>0] = $307;
    }
    $308 = $k;
    $309 = (($308) + 1)|0;
    $k = $309;
   }
   $310 = (($241) + 1)|0;
   $j = $310;
  }
  $311 = $1;
  (_fwrite(($buffer|0),1024,1,($311|0))|0);
  $312 = $i;
  $313 = (($312) + 1)|0;
  $i = $313;
 }
 $314 = $0;
 $315 = $smp_addr;
 (_fseek(($314|0),($315|0),0)|0);
 $316 = $1;
 $317 = $0;
 $318 = $ssize;
 (_pw_move_data($316,$317,$318)|0);
 STACKTOP = sp;return 0;
}
function _test_titanics($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(182);
 if ($5) {
  $6 = $3;
  $7 = (182 - ($6))|0;
  $0 = $7;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $ssize = 0;
 $n = 0;
 $k = 0;
 while(1) {
  $8 = $k;
  $9 = ($8|0)<(15);
  if (!($9)) {
   label = 20;
   break;
  }
  $10 = $start;
  $11 = (($10) + 7)|0;
  $12 = $k;
  $13 = ($12*12)|0;
  $14 = (($11) + ($13))|0;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)>(64);
  if ($19) {
   label = 6;
   break;
  }
  $20 = $start;
  $21 = (($20) + 6)|0;
  $22 = $k;
  $23 = ($22*12)|0;
  $24 = (($21) + ($23))|0;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)!=(0);
  if ($29) {
   label = 8;
   break;
  }
  $30 = $1;
  $31 = $start;
  $32 = (($30) + ($31)|0);
  $33 = $k;
  $34 = ($33*12)|0;
  $35 = (($32) + ($34)|0);
  $36 = (_readmem32b($35)|0);
  $o = $36;
  $37 = $o;
  $38 = ($37|0)<(180);
  $39 = $o;
  $40 = ($39|0)!=(0);
  $or$cond = $38 & $40;
  if ($or$cond) {
   label = 10;
   break;
  }
  $41 = $1;
  $42 = $start;
  $43 = (($41) + ($42)|0);
  $44 = $k;
  $45 = ($44*12)|0;
  $46 = (($43) + ($45)|0);
  $47 = ((($46)) + 4|0);
  $48 = (_readmem16b($47)|0);
  $49 = $48&65535;
  $j = $49;
  $50 = $1;
  $51 = $start;
  $52 = (($50) + ($51)|0);
  $53 = $k;
  $54 = ($53*12)|0;
  $55 = (($52) + ($54)|0);
  $56 = ((($55)) + 8|0);
  $57 = (_readmem16b($56)|0);
  $58 = $57&65535;
  $l = $58;
  $59 = $1;
  $60 = $start;
  $61 = (($59) + ($60)|0);
  $62 = $k;
  $63 = ($62*12)|0;
  $64 = (($61) + ($63)|0);
  $65 = ((($64)) + 10|0);
  $66 = (_readmem16b($65)|0);
  $67 = $66&65535;
  $m = $67;
  $68 = $l;
  $69 = $j;
  $70 = ($68|0)>($69|0);
  if ($70) {
   label = 13;
   break;
  }
  $71 = $m;
  $72 = $j;
  $73 = (($72) + 1)|0;
  $74 = ($71|0)>($73|0);
  $75 = $j;
  $76 = ($75|0)>(32768);
  $or$cond3 = $74 | $76;
  if ($or$cond3) {
   label = 13;
   break;
  }
  $77 = $m;
  $78 = ($77|0)==(0);
  if ($78) {
   label = 15;
   break;
  }
  $79 = $j;
  $80 = ($79|0)==(0);
  if ($80) {
   $81 = $l;
   $82 = ($81|0)!=(0);
   $83 = $m;
   $84 = ($83|0)!=(1);
   $or$cond5 = $82 | $84;
   if ($or$cond5) {
    label = 18;
    break;
   }
  }
  $85 = $j;
  $86 = $ssize;
  $87 = (($86) + ($85))|0;
  $ssize = $87;
  $88 = $k;
  $89 = (($88) + 1)|0;
  $k = $89;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 18) {
  $0 = -1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 20) {
  $90 = $ssize;
  $91 = ($90|0)<(2);
  if ($91) {
   $0 = -1;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
  $o = -1;
  $k = 0;
  $l = 0;
  while(1) {
   $92 = $k;
   $93 = ($92|0)<(256);
   if (!($93)) {
    break;
   }
   $94 = $1;
   $95 = $start;
   $96 = (($94) + ($95)|0);
   $97 = $k;
   $98 = (($96) + ($97)|0);
   $99 = ((($98)) + 180|0);
   $100 = (_readmem16b($99)|0);
   $101 = $100&65535;
   $102 = ($101|0)==(65535);
   if ($102) {
    label = 25;
    break;
   }
   $103 = $1;
   $104 = $start;
   $105 = (($103) + ($104)|0);
   $106 = $k;
   $107 = (($105) + ($106)|0);
   $108 = ((($107)) + 180|0);
   $109 = (_readmem16b($108)|0);
   $110 = $109&65535;
   $j = $110;
   $111 = $j;
   $112 = ($111|0)<(180);
   if ($112) {
    label = 27;
    break;
   }
   $113 = $j;
   $114 = $l;
   $115 = ($113|0)>($114|0);
   if ($115) {
    $116 = $j;
    $l = $116;
   }
   $117 = $k;
   $118 = (($117) + 2)|0;
   $k = $118;
  }
  if ((label|0) == 25) {
   $o = 0;
  }
  else if ((label|0) == 27) {
   $0 = -1;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
  $119 = $o;
  $120 = ($119|0)==(-1);
  if ($120) {
   $0 = -1;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  } else {
   $121 = $2;
   _pw_read_title(0,$121,0);
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 }
 return (0)|0;
}
function _depack_titanics($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c = 0, $i = 0, $j = 0, $k = 0, $max = 0, $note = 0, $pat = 0, $pat_addr = 0, $pat_addr_final = 0, $pat_addr_ord = 0, $smp_addr = 0;
 var $smp_size = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 1664|0;
 $pat_addr = sp + 1104|0;
 $pat_addr_ord = sp + 592|0;
 $pat_addr_final = sp + 80|0;
 $smp_addr = sp + 16|0;
 $smp_size = sp + 1624|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(128);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($pat_addr_final) + ($4<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = $i;
  $7 = (($pat_addr_ord) + ($6<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = $i;
  $9 = (($pat_addr) + ($8<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $1;
 (_pw_write_zero($12,20)|0);
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(15);
  if (!($14)) {
   break;
  }
  $15 = $0;
  $16 = (_read32b($15)|0);
  $17 = $i;
  $18 = (($smp_addr) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $1;
  (_pw_write_zero($19,22)|0);
  $20 = $1;
  $21 = $0;
  $22 = (_read16b($21)|0);
  $23 = $i;
  $24 = (($smp_size) + ($23<<1)|0);
  HEAP16[$24>>1] = $22;
  _write16b($20,$22);
  $25 = $i;
  $26 = (($smp_size) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28<<1;
  $30 = $29&65535;
  HEAP16[$26>>1] = $30;
  $31 = $1;
  $32 = $0;
  $33 = (_read8($32)|0);
  _write8($31,$33);
  $34 = $1;
  $35 = $0;
  $36 = (_read8($35)|0);
  _write8($34,$36);
  $37 = $1;
  $38 = $0;
  $39 = (_read16b($38)|0);
  _write16b($37,$39);
  $40 = $1;
  $41 = $0;
  $42 = (_read16b($41)|0);
  _write16b($40,$42);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $i = 15;
 while(1) {
  $45 = $i;
  $46 = ($45|0)<(31);
  if (!($46)) {
   break;
  }
  $47 = $1;
  (_pw_write_zero($47,22)|0);
  $48 = $1;
  _write16b($48,0);
  $49 = $1;
  _write8($49,0);
  $50 = $1;
  _write8($50,64);
  $51 = $1;
  _write16b($51,0);
  $52 = $1;
  _write16b($52,1);
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $55 = $0;
 (_fread(($buf|0),2,128,($55|0))|0);
 $pat = 0;
 while(1) {
  $56 = $pat;
  $57 = $56&255;
  $58 = ($57|0)<(128);
  if (!($58)) {
   break;
  }
  $59 = $pat;
  $60 = $59&255;
  $61 = $60<<1;
  $62 = (($buf) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($64|0)==(255);
  if ($65) {
   break;
  }
  $66 = $pat;
  $67 = $66&255;
  $68 = $67<<1;
  $69 = (($buf) + ($68)|0);
  $70 = (_readmem16b($69)|0);
  $71 = $70&65535;
  $72 = $pat;
  $73 = $72&255;
  $74 = (($pat_addr) + ($73<<2)|0);
  HEAP32[$74>>2] = $71;
  $75 = $pat;
  $76 = $75&255;
  $77 = (($pat_addr_ord) + ($76<<2)|0);
  HEAP32[$77>>2] = $71;
  $78 = $pat;
  $79 = (($78) + 1)<<24>>24;
  $pat = $79;
 }
 $80 = $1;
 $81 = $pat;
 _write8($80,$81);
 $82 = $1;
 _write8($82,127);
 $83 = $pat;
 $84 = $83&255;
 _qsort($pat_addr_ord,$84,4,282);
 $i = 0;
 $j = 0;
 while(1) {
  $85 = $i;
  $86 = $pat;
  $87 = $86&255;
  $88 = ($85|0)<($87|0);
  if (!($88)) {
   break;
  }
  $89 = $i;
  $90 = (($pat_addr_ord) + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $j;
  $93 = (($92) + 1)|0;
  $j = $93;
  $94 = (($pat_addr_final) + ($92<<2)|0);
  HEAP32[$94>>2] = $91;
  while(1) {
   $95 = $i;
   $96 = (($95) + 1)|0;
   $97 = (($pat_addr_ord) + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $i;
   $100 = (($pat_addr_ord) + ($99<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($98|0)==($101|0);
   if (!($102)) {
    break;
   }
   $103 = $i;
   $104 = $pat;
   $105 = $104&255;
   $106 = ($103|0)<($105|0);
   if (!($106)) {
    break;
   }
   $107 = $i;
   $108 = (($107) + 1)|0;
   $i = $108;
  }
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $111 = $i;
  $112 = $pat;
  $113 = $112&255;
  $114 = ($111|0)<($113|0);
  if (!($114)) {
   break;
  }
  $j = 0;
  while(1) {
   $115 = $i;
   $116 = (($pat_addr) + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $j;
   $119 = (($pat_addr_final) + ($118<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($117|0)!=($120|0);
   $122 = $j;
   if (!($121)) {
    break;
   }
   $123 = (($122) + 1)|0;
   $j = $123;
  }
  $124 = $122&255;
  $125 = $i;
  $126 = (($buf) + ($125)|0);
  HEAP8[$126>>0] = $124;
  $127 = $j;
  $128 = $max;
  $129 = ($127|0)>($128|0);
  if ($129) {
   $130 = $j;
   $max = $130;
  }
  $131 = $i;
  $132 = (($131) + 1)|0;
  $i = $132;
 }
 $133 = $1;
 (_fwrite(($buf|0),128,1,($133|0))|0);
 $134 = $1;
 _write32b($134,1294879534);
 $i = 0;
 while(1) {
  $135 = $i;
  $136 = $max;
  $137 = ($135|0)<=($136|0);
  if (!($137)) {
   break;
  }
  $138 = $0;
  $139 = $i;
  $140 = (($pat_addr_final) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  (_fseek(($138|0),($141|0),0)|0);
  _memset(($buf|0),0,1024)|0;
  $142 = $0;
  $143 = (_read8($142)|0);
  $x = $143;
  $k = 0;
  while(1) {
   $144 = $k;
   $145 = ($144|0)<(64);
   if (!($145)) {
    break;
   }
   $146 = $0;
   $147 = (_read8($146)|0);
   $y = $147;
   $148 = $y;
   $149 = $148&255;
   $150 = $149 >> 6;
   $151 = $150<<2;
   $152 = $151&255;
   $c = $152;
   $153 = $y;
   $154 = $153&255;
   $155 = $154 & 63;
   $note = $155;
   $156 = $note;
   $157 = ($156|0)<=(36);
   if ($157) {
    $158 = $note;
    $159 = (8240 + ($158<<1)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $k;
    $162 = $161<<4;
    $163 = $c;
    $164 = $163&255;
    $165 = (($162) + ($164))|0;
    $166 = (($buf) + ($165)|0);
    HEAP8[$166>>0] = $160;
    $167 = $note;
    $168 = (8240 + ($167<<1)|0);
    $169 = ((($168)) + 1|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $k;
    $172 = $171<<4;
    $173 = $c;
    $174 = $173&255;
    $175 = (($172) + ($174))|0;
    $176 = (($175) + 1)|0;
    $177 = (($buf) + ($176)|0);
    HEAP8[$177>>0] = $170;
   }
   $178 = $0;
   $179 = (_read8($178)|0);
   $180 = $k;
   $181 = $180<<4;
   $182 = $c;
   $183 = $182&255;
   $184 = (($181) + ($183))|0;
   $185 = (($184) + 2)|0;
   $186 = (($buf) + ($185)|0);
   HEAP8[$186>>0] = $179;
   $187 = $0;
   $188 = (_read8($187)|0);
   $189 = $k;
   $190 = $189<<4;
   $191 = $c;
   $192 = $191&255;
   $193 = (($190) + ($192))|0;
   $194 = (($193) + 3)|0;
   $195 = (($buf) + ($194)|0);
   HEAP8[$195>>0] = $188;
   $196 = $x;
   $197 = $196&255;
   $198 = $197 & 128;
   $199 = ($198|0)!=(0);
   if ($199) {
    break;
   }
   $200 = $0;
   $201 = (_read8($200)|0);
   $x = $201;
   $202 = $x;
   $203 = $202&255;
   $204 = $203 & 127;
   $205 = $k;
   $206 = (($205) + ($204))|0;
   $k = $206;
  }
  $207 = $1;
  (_fwrite(($buf|0),1024,1,($207|0))|0);
  $208 = $i;
  $209 = (($208) + 1)|0;
  $i = $209;
 }
 $i = 0;
 while(1) {
  $210 = $i;
  $211 = ($210|0)<(15);
  if (!($211)) {
   break;
  }
  $212 = $i;
  $213 = (($smp_addr) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)!=(0);
  if ($215) {
   $216 = $0;
   $217 = $i;
   $218 = (($smp_addr) + ($217<<2)|0);
   $219 = HEAP32[$218>>2]|0;
   (_fseek(($216|0),($219|0),0)|0);
   $220 = $1;
   $221 = $0;
   $222 = $i;
   $223 = (($smp_size) + ($222<<1)|0);
   $224 = HEAP16[$223>>1]|0;
   $225 = $224&65535;
   (_pw_move_data($220,$221,$225)|0);
  }
  $226 = $i;
  $227 = (($226) + 1)|0;
  $i = $227;
 }
 STACKTOP = sp;return 0;
}
function _cmplong($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)>($10|0);
 $12 = $11 ? 1 : -1;
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function _test_skyt($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(260);
 do {
  if ($5) {
   $6 = $3;
   $7 = (260 - ($6))|0;
   $0 = $7;
  } else {
   $i = 0;
   while(1) {
    $8 = $i;
    $9 = ($8|0)<(31);
    if (!($9)) {
     break;
    }
    $10 = $start;
    $11 = $i;
    $12 = $11<<3;
    $13 = (($10) + ($12))|0;
    $14 = (($13) + 4)|0;
    $15 = $1;
    $16 = (($15) + ($14)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = ($18|0)>(64);
    if ($19) {
     label = 6;
     break;
    }
    $20 = $i;
    $21 = (($20) + 1)|0;
    $i = $21;
   }
   if ((label|0) == 6) {
    $0 = -1;
    break;
   }
   $22 = $1;
   $23 = $start;
   $24 = (($22) + ($23)|0);
   $25 = ((($24)) + 256|0);
   $26 = (_readmem32b($25)|0);
   $27 = ($26|0)!=(1397446996);
   if ($27) {
    $0 = -1;
    break;
   } else {
    $28 = $2;
    _pw_read_title(0,$28,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _depack_skyt($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $pat = 0, $pat_pos = 0, $ptable = 0, $size = 0, $ssize = 0, $trk_addr = 0;
 var $trkval = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 3120|0;
 $pat = sp + 2088|0;
 $trkval = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $i = 0;
 $j = 0;
 $k = 0;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trkval|0),0,512)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $1;
  $7 = $0;
  $8 = (_read16b($7)|0);
  $9 = $8&65535;
  $size = $9;
  $10 = $9&65535;
  _write16b($6,$10);
  $11 = $size;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $1;
  $16 = $0;
  $17 = (_read8($16)|0);
  _write8($15,$17);
  $18 = $1;
  $19 = $0;
  $20 = (_read8($19)|0);
  _write8($18,$20);
  $21 = $1;
  $22 = $0;
  $23 = (_read16b($22)|0);
  _write16b($21,$23);
  $24 = $1;
  $25 = $0;
  $26 = (_read16b($25)|0);
  _write16b($24,$26);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = $0;
 (_read32b($29)|0);
 $30 = $0;
 (_read32b($30)|0);
 $31 = $0;
 (_read32b($31)|0);
 $32 = $1;
 $33 = $0;
 $34 = (_read8($33)|0);
 $35 = $34&255;
 $36 = (($35) + 1)|0;
 $37 = $36&255;
 $pat_pos = $37;
 _write8($32,$37);
 $38 = $1;
 _write8($38,127);
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $pat_pos;
  $41 = $40&255;
  $42 = ($39|0)<($41|0);
  if (!($42)) {
   break;
  }
  $j = 0;
  while(1) {
   $43 = $j;
   $44 = ($43|0)<(4);
   if (!($44)) {
    break;
   }
   $45 = $0;
   $46 = (_read16b($45)|0);
   $47 = $46&65535;
   $48 = $j;
   $49 = $i;
   $50 = (($trkval) + ($49<<4)|0);
   $51 = (($50) + ($48<<2)|0);
   HEAP32[$51>>2] = $47;
   $52 = $j;
   $53 = (($52) + 1)|0;
   $j = $53;
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(128);
  $58 = $1;
  if (!($57)) {
   break;
  }
  $59 = $i;
  $60 = $pat_pos;
  $61 = $60&255;
  $62 = ($59|0)<($61|0);
  $63 = $i;
  $64 = $62 ? $63 : 0;
  $65 = $64&255;
  _write8($58,$65);
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 _write32b($58,1294879534);
 $68 = $0;
 (_read8($68)|0);
 $69 = $0;
 $70 = (_ftell(($69|0))|0);
 $trk_addr = $70;
 $i = 0;
 while(1) {
  $71 = $i;
  $72 = $pat_pos;
  $73 = $72&255;
  $74 = ($71|0)<($73|0);
  if (!($74)) {
   break;
  }
  _memset(($pat|0),0,1024)|0;
  $j = 0;
  while(1) {
   $75 = $j;
   $76 = ($75|0)<(4);
   if (!($76)) {
    break;
   }
   $77 = $0;
   $78 = $trk_addr;
   $79 = $j;
   $80 = $i;
   $81 = (($trkval) + ($80<<4)|0);
   $82 = (($81) + ($79<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) - 1)|0;
   $85 = $84 << 8;
   $86 = (($78) + ($85))|0;
   (_fseek(($77|0),($86|0),0)|0);
   $k = 0;
   while(1) {
    $87 = $k;
    $88 = ($87|0)<(64);
    if (!($88)) {
     break;
    }
    $89 = $k;
    $90 = $89<<4;
    $91 = $j;
    $92 = $91<<2;
    $93 = (($90) + ($92))|0;
    $x = $93;
    $94 = $0;
    $95 = (_read8($94)|0);
    $c1 = $95;
    $96 = $0;
    $97 = (_read8($96)|0);
    $c2 = $97;
    $98 = $0;
    $99 = (_read8($98)|0);
    $c3 = $99;
    $100 = $0;
    $101 = (_read8($100)|0);
    $c4 = $101;
    $102 = $c2;
    $103 = $102&255;
    $104 = $103 & 240;
    $105 = $c1;
    $106 = $105&255;
    $107 = (8240 + ($106<<1)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = $104 | $109;
    $111 = $110&255;
    $112 = $x;
    $113 = (($pat) + ($112)|0);
    HEAP8[$113>>0] = $111;
    $114 = $c1;
    $115 = $114&255;
    $116 = (8240 + ($115<<1)|0);
    $117 = ((($116)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $x;
    $120 = (($119) + 1)|0;
    $121 = (($pat) + ($120)|0);
    HEAP8[$121>>0] = $118;
    $122 = $c2;
    $123 = $122&255;
    $124 = $123 << 4;
    $125 = $124 & 240;
    $126 = $c3;
    $127 = $126&255;
    $128 = $125 | $127;
    $129 = $128&255;
    $130 = $x;
    $131 = (($130) + 2)|0;
    $132 = (($pat) + ($131)|0);
    HEAP8[$132>>0] = $129;
    $133 = $c4;
    $134 = $x;
    $135 = (($134) + 3)|0;
    $136 = (($pat) + ($135)|0);
    HEAP8[$136>>0] = $133;
    $137 = $k;
    $138 = (($137) + 1)|0;
    $k = $138;
   }
   $139 = $j;
   $140 = (($139) + 1)|0;
   $j = $140;
  }
  $141 = $1;
  (_fwrite(($pat|0),1024,1,($141|0))|0);
  $142 = $i;
  $143 = (($142) + 1)|0;
  $i = $143;
 }
 $144 = $1;
 $145 = $0;
 $146 = $ssize;
 (_pw_move_data($144,$145,$146)|0);
 STACKTOP = sp;return 0;
}
function _test_ntp($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $j = 0, $k = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(64);
 if ($5) {
  $6 = $3;
  $7 = (64 - ($6))|0;
  $0 = $7;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = (_readmem32b($10)|0);
 $12 = ($11|0)!=(1297040469);
 if ($12) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $13 = $1;
 $14 = $start;
 $15 = (($13) + ($14)|0);
 $16 = ((($15)) + 20|0);
 $17 = (_readmem16b($16)|0);
 $18 = $17&65535;
 $19 = (($18) + 4)|0;
 $j = $19;
 $20 = $1;
 $21 = $start;
 $22 = (($20) + ($21)|0);
 $23 = ((($22)) + 28|0);
 $24 = (_readmem16b($23)|0);
 $25 = $24&65535;
 $26 = $j;
 $27 = (($25) + ($26))|0;
 $28 = (($27) + 4)|0;
 $k = $28;
 $29 = $3;
 $30 = $j;
 $31 = (($30) + 4)|0;
 $32 = ($29|0)<($31|0);
 if ($32) {
  $33 = $j;
  $34 = (($33) + 4)|0;
  $35 = $3;
  $36 = (($34) - ($35))|0;
  $0 = $36;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $37 = $1;
 $38 = $start;
 $39 = (($37) + ($38)|0);
 $40 = $j;
 $41 = (($39) + ($40)|0);
 $42 = (_readmem32b($41)|0);
 $43 = ($42|0)!=(1112491097);
 if ($43) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $44 = $3;
 $45 = $k;
 $46 = (($45) + 4)|0;
 $47 = ($44|0)<($46|0);
 if ($47) {
  $48 = $k;
  $49 = (($48) + 4)|0;
  $50 = $3;
  $51 = (($49) - ($50))|0;
  $0 = $51;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $52 = $1;
 $53 = $start;
 $54 = (($52) + ($53)|0);
 $55 = $k;
 $56 = (($54) + ($55)|0);
 $57 = (_readmem32b($56)|0);
 $58 = ($57|0)!=(1396788560);
 if ($58) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 } else {
  $59 = $1;
  $60 = ((($59)) + 4|0);
  $61 = $2;
  _pw_read_title($60,$61,16);
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _depack_ntp($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $body_addr = 0, $buf = 0, $i = 0, $j = 0, $len = 0, $nins = 0, $npat = 0, $pat_addr = 0, $size = 0, $smp_addr = 0;
 var $ssize = 0, $x = 0, $x1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 560|0;
 $pat_addr = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $0;
 (_read32b($2)|0);
 $3 = $1;
 $4 = $0;
 (_pw_move_data($3,$4,16)|0);
 $5 = $1;
 _write32b($5,0);
 $6 = $0;
 $7 = (_read16b($6)|0);
 $8 = $7&65535;
 $9 = (($8) + 4)|0;
 $10 = $9&65535;
 $body_addr = $10;
 $11 = $0;
 $12 = (_read16b($11)|0);
 $nins = $12;
 $13 = $0;
 $14 = (_read16b($13)|0);
 $len = $14;
 $15 = $0;
 $16 = (_read16b($15)|0);
 $npat = $16;
 $17 = $0;
 $18 = (_read16b($17)|0);
 $19 = $18&65535;
 $20 = $body_addr;
 $21 = $20 << 16 >> 16;
 $22 = (($19) + ($21))|0;
 $23 = (($22) + 4)|0;
 $24 = $23&65535;
 $smp_addr = $24;
 _memset(($buf|0),0,930)|0;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $nins;
  $27 = $26 << 16 >> 16;
  $28 = ($25|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $0;
  $30 = (_read8($29)|0);
  $31 = $30&255;
  $x = $31;
  $32 = $x;
  $33 = ($32|0)>(30);
  if ($33) {
   $34 = $0;
   (_fseek(($34|0),7,1)|0);
  } else {
   $35 = $x;
   $36 = ($35*30)|0;
   $x = $36;
   $37 = $0;
   $38 = (_read8($37)|0);
   $39 = $x;
   $40 = (($39) + 25)|0;
   $41 = (($buf) + ($40)|0);
   HEAP8[$41>>0] = $38;
   $42 = $0;
   $43 = (_read16b($42)|0);
   $44 = $43&65535;
   $size = $44;
   $45 = $size;
   $46 = $45 >> 8;
   $47 = $46&255;
   $48 = $x;
   $49 = (($48) + 22)|0;
   $50 = (($buf) + ($49)|0);
   HEAP8[$50>>0] = $47;
   $51 = $size;
   $52 = $51 & 255;
   $53 = $52&255;
   $54 = $x;
   $55 = (($54) + 23)|0;
   $56 = (($buf) + ($55)|0);
   HEAP8[$56>>0] = $53;
   $57 = $size;
   $58 = $57<<1;
   $59 = $ssize;
   $60 = (($59) + ($58))|0;
   $ssize = $60;
   $61 = $0;
   $62 = (_read8($61)|0);
   $63 = $x;
   $64 = (($63) + 26)|0;
   $65 = (($buf) + ($64)|0);
   HEAP8[$65>>0] = $62;
   $66 = $0;
   $67 = (_read8($66)|0);
   $68 = $x;
   $69 = (($68) + 27)|0;
   $70 = (($buf) + ($69)|0);
   HEAP8[$70>>0] = $67;
   $71 = $0;
   $72 = (_read8($71)|0);
   $73 = $x;
   $74 = (($73) + 28)|0;
   $75 = (($buf) + ($74)|0);
   HEAP8[$75>>0] = $72;
   $76 = $0;
   $77 = (_read8($76)|0);
   $78 = $x;
   $79 = (($78) + 29)|0;
   $80 = (($buf) + ($79)|0);
   HEAP8[$80>>0] = $77;
  }
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $83 = $1;
 (_fwrite(($buf|0),930,1,($83|0))|0);
 $84 = $1;
 $85 = $len;
 $86 = $85&255;
 _write8($84,$86);
 $87 = $1;
 _write8($87,127);
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $88 = $i;
  $89 = $len;
  $90 = $89 << 16 >> 16;
  $91 = ($88|0)<($90|0);
  if (!($91)) {
   break;
  }
  $92 = $0;
  $93 = (_read16b($92)|0);
  $94 = $93&255;
  $95 = $i;
  $96 = (($buf) + ($95)|0);
  HEAP8[$96>>0] = $94;
  $97 = $i;
  $98 = (($97) + 1)|0;
  $i = $98;
 }
 $99 = $1;
 (_fwrite(($buf|0),128,1,($99|0))|0);
 _memset(($pat_addr|0),0,256)|0;
 $i = 0;
 while(1) {
  $100 = $i;
  $101 = $npat;
  $102 = $101 << 16 >> 16;
  $103 = ($100|0)<($102|0);
  if (!($103)) {
   break;
  }
  $104 = $0;
  $105 = (_read16b($104)|0);
  $106 = $105&65535;
  $107 = $i;
  $108 = (($pat_addr) + ($107<<2)|0);
  HEAP32[$108>>2] = $106;
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 $111 = $1;
 _write32b($111,1294879534);
 $i = 0;
 while(1) {
  $112 = $i;
  $113 = $npat;
  $114 = $113 << 16 >> 16;
  $115 = ($112|0)<($114|0);
  $116 = $0;
  if (!($115)) {
   break;
  }
  $117 = $body_addr;
  $118 = $117 << 16 >> 16;
  $119 = (($118) + 4)|0;
  $120 = $i;
  $121 = (($pat_addr) + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) + ($122))|0;
  (_fseek(($116|0),($123|0),0)|0);
  _memset(($buf|0),0,1024)|0;
  $j = 0;
  while(1) {
   $124 = $j;
   $125 = ($124|0)<(64);
   if (!($125)) {
    break;
   }
   $126 = $0;
   $127 = (_read16b($126)|0);
   $128 = $127&65535;
   $x1 = $128;
   $129 = $x1;
   $130 = $129 & 1;
   $131 = ($130|0)!=(0);
   if ($131) {
    $132 = $j;
    $133 = $132<<4;
    $134 = (($buf) + ($133)|0);
    $135 = $0;
    (_fread(($134|0),1,4,($135|0))|0);
   }
   $136 = $x1;
   $137 = $136 & 2;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = $j;
    $140 = $139<<4;
    $141 = (($buf) + ($140)|0);
    $142 = ((($141)) + 4|0);
    $143 = $0;
    (_fread(($142|0),1,4,($143|0))|0);
   }
   $144 = $x1;
   $145 = $144 & 4;
   $146 = ($145|0)!=(0);
   if ($146) {
    $147 = $j;
    $148 = $147<<4;
    $149 = (($buf) + ($148)|0);
    $150 = ((($149)) + 8|0);
    $151 = $0;
    (_fread(($150|0),1,4,($151|0))|0);
   }
   $152 = $x1;
   $153 = $152 & 8;
   $154 = ($153|0)!=(0);
   if ($154) {
    $155 = $j;
    $156 = $155<<4;
    $157 = (($buf) + ($156)|0);
    $158 = ((($157)) + 12|0);
    $159 = $0;
    (_fread(($158|0),1,4,($159|0))|0);
   }
   $160 = $j;
   $161 = (($160) + 1)|0;
   $j = $161;
  }
  $162 = $1;
  (_fwrite(($buf|0),1024,1,($162|0))|0);
  $163 = $i;
  $164 = (($163) + 1)|0;
  $i = $164;
 }
 $165 = $smp_addr;
 $166 = $165 << 16 >> 16;
 (_fseek(($116|0),($166|0),0)|0);
 $167 = $1;
 $168 = $0;
 $169 = $ssize;
 (_pw_move_data($167,$168,$169)|0);
 STACKTOP = sp;return 0;
}
function _test_hrt($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1080|0);
 $10 = (_readmem32b($9)|0);
 $11 = ($10|0)!=(1213355041);
 if ($11) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(31);
  if (!($13)) {
   label = 12;
   break;
  }
  $14 = $start;
  $15 = (($14) + 20)|0;
  $16 = $i;
  $17 = ($16*30)|0;
  $18 = (($15) + ($17))|0;
  $19 = (($18) + 24)|0;
  $20 = $1;
  $21 = (($20) + ($19)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)>(15);
  if ($24) {
   label = 8;
   break;
  }
  $25 = $start;
  $26 = (($25) + 20)|0;
  $27 = $i;
  $28 = ($27*30)|0;
  $29 = (($26) + ($28))|0;
  $30 = (($29) + 25)|0;
  $31 = $1;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = ($34|0)>(64);
  if ($35) {
   label = 10;
   break;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 12) {
  $38 = $1;
  $39 = $2;
  _pw_read_title($38,$39,20);
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _depack_hrt($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $len = 0, $npat = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($buf|0),0,950)|0;
 $2 = $0;
 (_fread(($buf|0),950,1,($2|0))|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = ((($buf)) + 38|0);
  $6 = $i;
  $7 = ($6*30)|0;
  $8 = (($5) + ($7)|0);
  HEAP32[$8>>2] = 0;
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $11 = $1;
 (_fwrite(($buf|0),950,1,($11|0))|0);
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(31);
  if (!($13)) {
   break;
  }
  $14 = ((($buf)) + 42|0);
  $15 = $i;
  $16 = ($15*30)|0;
  $17 = (($14) + ($16)|0);
  $18 = (_readmem16b($17)|0);
  $19 = $18&65535;
  $20 = $19<<1;
  $21 = $ssize;
  $22 = (($21) + ($20))|0;
  $ssize = $22;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $1;
 $26 = $0;
 $27 = (_read8($26)|0);
 $28 = $27&255;
 $len = $28;
 $29 = $28&255;
 _write8($25,$29);
 $30 = $1;
 $31 = $0;
 $32 = (_read8($31)|0);
 _write8($30,$32);
 $33 = $0;
 (_fread(($buf|0),1,128,($33|0))|0);
 $npat = 0;
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = ($34|0)<(128);
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = (($buf) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $npat;
  $41 = ($39|0)>($40|0);
  if ($41) {
   $42 = $i;
   $43 = (($buf) + ($42)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $npat = $45;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $npat;
 $49 = (($48) + 1)|0;
 $npat = $49;
 $50 = $1;
 _write32b($50,1294879534);
 $51 = $0;
 (_fseek(($51|0),1084,0)|0);
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $npat;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   break;
  }
  $j = 0;
  while(1) {
   $55 = $j;
   $56 = ($55|0)<(256);
   if (!($56)) {
    break;
   }
   $57 = $0;
   $58 = (_read8($57)|0);
   HEAP8[$buf>>0] = $58;
   $59 = $0;
   $60 = (_read8($59)|0);
   $61 = ((($buf)) + 1|0);
   HEAP8[$61>>0] = $60;
   $62 = $0;
   $63 = (_read8($62)|0);
   $64 = ((($buf)) + 2|0);
   HEAP8[$64>>0] = $63;
   $65 = $0;
   $66 = (_read8($65)|0);
   $67 = ((($buf)) + 3|0);
   HEAP8[$67>>0] = $66;
   $68 = HEAP8[$buf>>0]|0;
   $69 = $68&255;
   $70 = (($69|0) / 2)&-1;
   $71 = $70&255;
   HEAP8[$buf>>0] = $71;
   $72 = HEAP8[$buf>>0]|0;
   $73 = $72&255;
   $74 = $73 & 240;
   $75 = $74&255;
   $c1 = $75;
   $76 = ((($buf)) + 1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = ($78|0)==(0);
   if ($79) {
    $c2 = 0;
   } else {
    $80 = ((($buf)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = (($82|0) / 2)&-1;
    $84 = (8240 + ($83<<1)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $c1;
    $88 = $87&255;
    $89 = $88 | $86;
    $90 = $89&255;
    $c1 = $90;
    $91 = ((($buf)) + 1|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = (($93|0) / 2)&-1;
    $95 = (8240 + ($94<<1)|0);
    $96 = ((($95)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $c2 = $97;
   }
   $98 = HEAP8[$buf>>0]|0;
   $99 = $98&255;
   $100 = $99 << 4;
   $101 = $100 & 240;
   $102 = ((($buf)) + 2|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $101 | $104;
   $106 = $105&255;
   $c3 = $106;
   $107 = ((($buf)) + 3|0);
   $108 = HEAP8[$107>>0]|0;
   $c4 = $108;
   $109 = $1;
   $110 = $c1;
   _write8($109,$110);
   $111 = $1;
   $112 = $c2;
   _write8($111,$112);
   $113 = $1;
   $114 = $c3;
   _write8($113,$114);
   $115 = $1;
   $116 = $c4;
   _write8($115,$116);
   $117 = $j;
   $118 = (($117) + 1)|0;
   $j = $118;
  }
  $119 = $i;
  $120 = (($119) + 1)|0;
  $i = $120;
 }
 $121 = $1;
 $122 = $0;
 $123 = $ssize;
 (_pw_move_data($121,$122,$123)|0);
 STACKTOP = sp;return 0;
}
function _test_nru($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $l = 0, $or$cond = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $3;
 $5 = ($4|0)<(1500);
 if ($5) {
  $6 = $3;
  $7 = (1500 - ($6))|0;
  $0 = $7;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $8 = $1;
 $9 = $start;
 $10 = (($8) + ($9)|0);
 $11 = ((($10)) + 1080|0);
 $12 = (_readmem32b($11)|0);
 $13 = ($12|0)!=(1294879534);
 if ($13) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $ssize = 0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ($14|0)<(31);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = $start;
  $18 = (($16) + ($17)|0);
  $19 = ((($18)) + 6|0);
  $20 = $i;
  $21 = $20<<4;
  $22 = (($19) + ($21)|0);
  $23 = (_readmem16b($22)|0);
  $24 = $23&65535;
  $25 = $24<<1;
  $26 = $ssize;
  $27 = (($26) + ($25))|0;
  $ssize = $27;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $ssize;
 $31 = ($30|0)==(0);
 if ($31) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = ($32|0)<(31);
  $34 = $start;
  if (!($33)) {
   break;
  }
  $35 = (($34) + 1)|0;
  $36 = $i;
  $37 = $36<<4;
  $38 = (($35) + ($37))|0;
  $39 = $1;
  $40 = (($39) + ($38)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)>(64);
  if ($43) {
   label = 13;
   break;
  }
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $46 = (($34) + 950)|0;
 $47 = $1;
 $48 = (($47) + ($46)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $l = $50;
 $51 = $l;
 $52 = ($51|0)>(127);
 $53 = $l;
 $54 = ($53|0)==(0);
 $or$cond = $52 | $54;
 if ($or$cond) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $k = 0;
 $j = 0;
 while(1) {
  $55 = $j;
  $56 = $l;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $start;
  $59 = (($58) + 952)|0;
  $60 = $j;
  $61 = (($59) + ($60))|0;
  $62 = $1;
  $63 = (($62) + ($61)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $k;
  $67 = ($65|0)>($66|0);
  if ($67) {
   $68 = $start;
   $69 = (($68) + 952)|0;
   $70 = $j;
   $71 = (($69) + ($70))|0;
   $72 = $1;
   $73 = (($72) + ($71)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $k = $75;
  }
  $76 = $start;
  $77 = (($76) + 952)|0;
  $78 = $j;
  $79 = (($77) + ($78))|0;
  $80 = $1;
  $81 = (($80) + ($79)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = ($83|0)>(127);
  if ($84) {
   label = 22;
   break;
  }
  $85 = $j;
  $86 = (($85) + 1)|0;
  $j = $86;
 }
 if ((label|0) == 22) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 while(1) {
  $87 = $j;
  $88 = ($87|0)!=(128);
  if (!($88)) {
   break;
  }
  $89 = $start;
  $90 = (($89) + 952)|0;
  $91 = $j;
  $92 = (($90) + ($91))|0;
  $93 = $1;
  $94 = (($93) + ($92)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = ($96|0)!=(0);
  if ($97) {
   label = 26;
   break;
  }
  $98 = $j;
  $99 = (($98) + 1)|0;
  $j = $99;
 }
 if ((label|0) == 26) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $100 = $k;
 $101 = (($100) + 1)|0;
 $k = $101;
 $j = 0;
 while(1) {
  $102 = $j;
  $103 = $k;
  $104 = $103 << 8;
  $105 = ($102|0)<($104|0);
  if (!($105)) {
   label = 37;
   break;
  }
  $106 = $start;
  $107 = (($106) + 1086)|0;
  $108 = $j;
  $109 = $108<<2;
  $110 = (($107) + ($109))|0;
  $111 = $1;
  $112 = (($111) + ($110)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = ($114|0)>(72);
  if ($115) {
   label = 31;
   break;
  }
  $116 = $start;
  $117 = (($116) + 1087)|0;
  $118 = $j;
  $119 = $118<<2;
  $120 = (($117) + ($119))|0;
  $121 = $1;
  $122 = (($121) + ($120)|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $l = $124;
  $125 = $l;
  $126 = $125 & 7;
  $127 = ($126|0)!=(0);
  if ($127) {
   label = 33;
   break;
  }
  $128 = $start;
  $129 = (($128) + 1084)|0;
  $130 = $j;
  $131 = $130<<2;
  $132 = (($129) + ($131))|0;
  $133 = $1;
  $134 = (($133) + ($132)|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $l = $136;
  $137 = $l;
  $138 = $137 & 3;
  $139 = ($138|0)!=(0);
  if ($139) {
   label = 35;
   break;
  }
  $140 = $j;
  $141 = (($140) + 1)|0;
  $j = $141;
 }
 if ((label|0) == 31) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 else if ((label|0) == 33) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 else if ((label|0) == 35) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 else if ((label|0) == 37) {
  $142 = $2;
  _pw_read_title(0,$142,0);
  $0 = 0;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 return (0)|0;
}
function _depack_nru($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $addr = 0, $fine = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $lsize = 0, $max_pat = 0, $note = 0, $pat_data = 0, $ptable = 0, $size = 0, $ssize = 0, $start = 0, $tmp = 0, $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 1208|0;
 $ptable = sp + 1080|0;
 $pat_data = sp + 48|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $0;
  (_read8($6)|0);
  $7 = $0;
  $8 = (_read8($7)|0);
  $9 = $8&255;
  $vol = $9;
  $10 = $0;
  $11 = (_read32b($10)|0);
  $addr = $11;
  $12 = $1;
  $13 = $0;
  $14 = (_read16b($13)|0);
  $15 = $14&65535;
  $size = $15;
  $16 = $15&65535;
  _write16b($12,$16);
  $17 = $size;
  $18 = $17<<1;
  $19 = $ssize;
  $20 = (($19) + ($18))|0;
  $ssize = $20;
  $21 = $0;
  $22 = (_read32b($21)|0);
  $start = $22;
  $23 = $0;
  $24 = (_read16b($23)|0);
  $25 = $24&65535;
  $lsize = $25;
  $26 = $0;
  $27 = (_read16b($26)|0);
  $28 = $27&65535;
  $fine = $28;
  $j = 0;
  while(1) {
   $29 = $j;
   $30 = ($29|0)<(16);
   if (!($30)) {
    break;
   }
   $31 = $fine;
   $32 = $j;
   $33 = (11216 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($31|0)==($34|0);
   $36 = $j;
   if ($35) {
    label = 6;
    break;
   }
   $37 = (($36) + 1)|0;
   $j = $37;
  }
  if ((label|0) == 6) {
   label = 0;
   $fine = $36;
  }
  $38 = $j;
  $39 = ($38|0)==(16);
  if ($39) {
   $fine = 0;
  }
  $40 = $1;
  $41 = $fine;
  $42 = $41&255;
  _write8($40,$42);
  $43 = $1;
  $44 = $vol;
  $45 = $44&255;
  _write8($43,$45);
  $46 = $1;
  $47 = $start;
  $48 = $addr;
  $49 = (($47) - ($48))|0;
  $50 = (($49|0) / 2)&-1;
  $51 = $50&65535;
  _write16b($46,$51);
  $52 = $1;
  $53 = $lsize;
  $54 = $53&65535;
  _write16b($52,$54);
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = $0;
 (_fseek(($57|0),950,0)|0);
 $58 = $1;
 $59 = $0;
 $60 = (_read8($59)|0);
 _write8($58,$60);
 $61 = $1;
 $62 = $0;
 $63 = (_read8($62)|0);
 _write8($61,$63);
 $max_pat = 0;
 $64 = $0;
 (_fread(($ptable|0),128,1,($64|0))|0);
 $65 = $1;
 (_fwrite(($ptable|0),128,1,($65|0))|0);
 $i = 0;
 while(1) {
  $66 = $i;
  $67 = ($66|0)<(128);
  if (!($67)) {
   break;
  }
  $68 = $i;
  $69 = (($ptable) + ($68)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $max_pat;
  $73 = ($71|0)>($72|0);
  if ($73) {
   $74 = $i;
   $75 = (($ptable) + ($74)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $max_pat = $77;
  }
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $80 = $max_pat;
 $81 = (($80) + 1)|0;
 $max_pat = $81;
 $82 = $1;
 _write32b($82,1294879534);
 $83 = $0;
 (_fseek(($83|0),1084,0)|0);
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = $max_pat;
  $86 = ($84|0)<($85|0);
  if (!($86)) {
   break;
  }
  _memset(($pat_data|0),0,1025)|0;
  $87 = $0;
  (_fread(($tmp|0),1024,1,($87|0))|0);
  $j = 0;
  while(1) {
   $88 = $j;
   $89 = ($88|0)<(256);
   if (!($89)) {
    break;
   }
   $90 = $j;
   $91 = $90<<2;
   $92 = (($91) + 3)|0;
   $93 = (($tmp) + ($92)|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $95 >> 3;
   $97 = $96 & 31;
   $98 = $97&255;
   $ins = $98;
   $99 = $j;
   $100 = $99<<2;
   $101 = (($100) + 2)|0;
   $102 = (($tmp) + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $note = $103;
   $104 = $j;
   $105 = $104<<2;
   $106 = (($tmp) + ($105)|0);
   $107 = HEAP8[$106>>0]|0;
   $fxt = $107;
   $108 = $j;
   $109 = $108<<2;
   $110 = (($109) + 1)|0;
   $111 = (($tmp) + ($110)|0);
   $112 = HEAP8[$111>>0]|0;
   $fxp = $112;
   $113 = $fxt;
   $114 = $113&255;
   if ((($114|0) == 12)) {
    $fxt = 0;
   } else if ((($114|0) == 0)) {
    $fxt = 3;
   } else {
    $115 = $fxt;
    $116 = $115&255;
    $117 = $116 >> 2;
    $118 = $117&255;
    $fxt = $118;
   }
   $119 = $ins;
   $120 = $119&255;
   $121 = $120 & 240;
   $122 = $121&255;
   $123 = $j;
   $124 = $123<<2;
   $125 = (($pat_data) + ($124)|0);
   HEAP8[$125>>0] = $122;
   $126 = $note;
   $127 = $126&255;
   $128 = (($127|0) / 2)&-1;
   $129 = (8240 + ($128<<1)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $j;
   $133 = $132<<2;
   $134 = (($pat_data) + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = $136 | $131;
   $138 = $137&255;
   HEAP8[$134>>0] = $138;
   $139 = $note;
   $140 = $139&255;
   $141 = (($140|0) / 2)&-1;
   $142 = (8240 + ($141<<1)|0);
   $143 = ((($142)) + 1|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $j;
   $146 = $145<<2;
   $147 = (($146) + 1)|0;
   $148 = (($pat_data) + ($147)|0);
   HEAP8[$148>>0] = $144;
   $149 = $ins;
   $150 = $149&255;
   $151 = $150 << 4;
   $152 = $151 & 240;
   $153 = $152&255;
   $154 = $j;
   $155 = $154<<2;
   $156 = (($155) + 2)|0;
   $157 = (($pat_data) + ($156)|0);
   HEAP8[$157>>0] = $153;
   $158 = $fxt;
   $159 = $158&255;
   $160 = $j;
   $161 = $160<<2;
   $162 = (($161) + 2)|0;
   $163 = (($pat_data) + ($162)|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = $165 | $159;
   $167 = $166&255;
   HEAP8[$163>>0] = $167;
   $168 = $fxp;
   $169 = $j;
   $170 = $169<<2;
   $171 = (($170) + 3)|0;
   $172 = (($pat_data) + ($171)|0);
   HEAP8[$172>>0] = $168;
   $173 = $j;
   $174 = (($173) + 1)|0;
   $j = $174;
  }
  $175 = $1;
  (_fwrite(($pat_data|0),1024,1,($175|0))|0);
  $176 = $i;
  $177 = (($176) + 1)|0;
  $i = $177;
 }
 $178 = $1;
 $179 = $0;
 $180 = $ssize;
 (_pw_move_data($178,$179,$180)|0);
 STACKTOP = sp;return 0;
}
function _virt_getroot($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($4<<3)|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $voc = $11;
 $12 = $voc;
 $13 = ($12|0)<(0);
 if ($13) {
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $14 = $voc;
  $15 = $p;
  $16 = ((($15)) + 948|0);
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($14*116)|0)|0);
  $vi = $19;
  $20 = $vi;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _virt_resetvoice($ctx,$voc,$mute) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $mute = $mute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $mute;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $1;
 $11 = $p;
 $12 = ((($11)) + 948|0);
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $0;
  $19 = $1;
  _mixer_setvol($18,$19,0);
 }
 $20 = $p;
 $21 = ((($20)) + 948|0);
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[$22>>2] = $24;
 $25 = $vi;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $p;
 $29 = ((($28)) + 948|0);
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($27<<3)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + -1)|0;
 HEAP32[$32>>2] = $34;
 $35 = $vi;
 $36 = HEAP32[$35>>2]|0;
 $37 = $p;
 $38 = ((($37)) + 948|0);
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($36<<3)|0);
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = -1;
 $43 = $vi;
 dest=$43; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $44 = $vi;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = -1;
 $46 = $vi;
 HEAP32[$46>>2] = -1;
 STACKTOP = sp;return;
}
function _virt_on($ctx,$num) {
 $ctx = $ctx|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $m = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $num;
 $3 = $1;
 $p = $3;
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $2;
 $7 = $p;
 $8 = ((($7)) + 948|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = (_mixer_numvoices($9,-1)|0);
 $2 = $10;
 $11 = $p;
 $12 = ((($11)) + 948|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $p;
 $15 = ((($14)) + 948|0);
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $13;
 $17 = $m;
 $18 = ((($17)) + 1280|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 32768;
 $21 = ($20|0)!=(0);
 $22 = $2;
 $23 = $p;
 $24 = ((($23)) + 948|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 if ($21) {
  $27 = (($26) + ($22))|0;
  HEAP32[$25>>2] = $27;
 } else {
  $28 = ($22|0)>($26|0);
  if ($28) {
   $29 = $p;
   $30 = ((($29)) + 948|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $2 = $32;
  }
 }
 $33 = $1;
 $34 = $2;
 $35 = (_mixer_numvoices($33,$34)|0);
 $36 = $p;
 $37 = ((($36)) + 948|0);
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = $35;
 $39 = $p;
 $40 = ((($39)) + 948|0);
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_calloc($42,116)|0);
 $44 = $p;
 $45 = ((($44)) + 948|0);
 $46 = ((($45)) + 20|0);
 HEAP32[$46>>2] = $43;
 $47 = $p;
 $48 = ((($47)) + 948|0);
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 do {
  if (!($51)) {
   $i = 0;
   while(1) {
    $52 = $i;
    $53 = $p;
    $54 = ((($53)) + 948|0);
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($52|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $i;
    $59 = $p;
    $60 = ((($59)) + 948|0);
    $61 = ((($60)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + (($58*116)|0)|0);
    HEAP32[$63>>2] = -1;
    $64 = $i;
    $65 = $p;
    $66 = ((($65)) + 948|0);
    $67 = ((($66)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + (($64*116)|0)|0);
    $70 = ((($69)) + 4|0);
    HEAP32[$70>>2] = -1;
    $71 = $i;
    $72 = (($71) + 1)|0;
    $i = $72;
   }
   $73 = $p;
   $74 = ((($73)) + 948|0);
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76<<3;
   $78 = (_malloc($77)|0);
   $79 = $p;
   $80 = ((($79)) + 948|0);
   $81 = ((($80)) + 16|0);
   HEAP32[$81>>2] = $78;
   $82 = $p;
   $83 = ((($82)) + 948|0);
   $84 = ((($83)) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0|0);
   if ($86) {
    $111 = $p;
    $112 = ((($111)) + 948|0);
    $113 = ((($112)) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    _free($114);
    break;
   }
   $i = 0;
   while(1) {
    $87 = $i;
    $88 = $p;
    $89 = ((($88)) + 948|0);
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($87|0)<($91|0);
    if (!($92)) {
     break;
    }
    $93 = $i;
    $94 = $p;
    $95 = ((($94)) + 948|0);
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + ($93<<3)|0);
    $99 = ((($98)) + 4|0);
    HEAP32[$99>>2] = -1;
    $100 = $i;
    $101 = $p;
    $102 = ((($101)) + 948|0);
    $103 = ((($102)) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($100<<3)|0);
    HEAP32[$105>>2] = 0;
    $106 = $i;
    $107 = (($106) + 1)|0;
    $i = $107;
   }
   $108 = $p;
   $109 = ((($108)) + 948|0);
   $110 = ((($109)) + 8|0);
   HEAP32[$110>>2] = 0;
   $0 = 0;
   $115 = $0;
   STACKTOP = sp;return ($115|0);
  }
 } while(0);
 $0 = -1;
 $115 = $0;
 STACKTOP = sp;return ($115|0);
}
function _virt_off($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 948|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $p;
 $8 = ((($7)) + 948|0);
 $9 = ((($8)) + 12|0);
 HEAP32[$9>>2] = 0;
 $10 = $p;
 $11 = ((($10)) + 948|0);
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $p;
 $14 = ((($13)) + 948|0);
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = $p;
 $17 = ((($16)) + 948|0);
 HEAP32[$17>>2] = 0;
 $18 = $p;
 $19 = ((($18)) + 948|0);
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $p;
 $23 = ((($22)) + 948|0);
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 _free($25);
 STACKTOP = sp;return;
}
function _virt_reset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 948|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $p;
 $9 = ((($8)) + 948|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 (_mixer_numvoices($7,$11)|0);
 $12 = $p;
 $13 = ((($12)) + 948|0);
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $p;
 $17 = ((($16)) + 948|0);
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19*116)|0;
 _memset(($15|0),0,($20|0))|0;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $p;
  $23 = ((($22)) + 948|0);
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = $p;
  $29 = ((($28)) + 948|0);
  $30 = ((($29)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($27*116)|0)|0);
  HEAP32[$32>>2] = -1;
  $33 = $i;
  $34 = $p;
  $35 = ((($34)) + 948|0);
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($33*116)|0)|0);
  $39 = ((($38)) + 4|0);
  HEAP32[$39>>2] = -1;
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $p;
  $44 = ((($43)) + 948|0);
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($42|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $i;
  $49 = $p;
  $50 = ((($49)) + 948|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($48<<3)|0);
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = -1;
  $55 = $i;
  $56 = $p;
  $57 = ((($56)) + 948|0);
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($55<<3)|0);
  HEAP32[$60>>2] = 0;
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = $p;
 $64 = ((($63)) + 948|0);
 $65 = ((($64)) + 8|0);
 HEAP32[$65>>2] = 0;
 STACKTOP = sp;return;
}
function _virt_mapchannel($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $3 = $1;
 $4 = (_map_virt_channel($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _virt_resetchannel($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $p;
 $4 = $1;
 $5 = (_map_virt_channel($3,$4)|0);
 $voc = $5;
 $6 = ($5|0)<(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $voc;
 _mixer_setvol($7,$8,0);
 $9 = $p;
 $10 = ((($9)) + 948|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -1)|0;
 HEAP32[$11>>2] = $13;
 $14 = $voc;
 $15 = $p;
 $16 = ((($15)) + 948|0);
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($14*116)|0)|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $p;
 $23 = ((($22)) + 948|0);
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($21<<3)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + -1)|0;
 HEAP32[$26>>2] = $28;
 $29 = $1;
 $30 = $p;
 $31 = ((($30)) + 948|0);
 $32 = ((($31)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($29<<3)|0);
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = -1;
 $36 = $voc;
 $37 = $p;
 $38 = ((($37)) + 948|0);
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + (($36*116)|0)|0);
 dest=$41; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $42 = $voc;
 $43 = $p;
 $44 = ((($43)) + 948|0);
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($42*116)|0)|0);
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = -1;
 $49 = $voc;
 $50 = $p;
 $51 = ((($50)) + 948|0);
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + (($49*116)|0)|0);
 HEAP32[$54>>2] = -1;
 STACKTOP = sp;return;
}
function _virt_setvol($ctx,$chn,$vol) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $root = 0, $voc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $vol;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $voc;
 $9 = $p;
 $10 = ((($9)) + 948|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($8*116)|0)|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $root = $15;
 $16 = $root;
 $17 = ($16|0)<(64);
 if ($17) {
  $18 = $root;
  $19 = $p;
  $20 = ((($19)) + 884|0);
  $21 = (($20) + ($18)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if ($24) {
   $2 = 0;
  }
 }
 $25 = $0;
 $26 = $voc;
 $27 = $2;
 _mixer_setvol($25,$26,$27);
 $28 = $2;
 $29 = ($28|0)!=(0);
 if ($29) {
  STACKTOP = sp;return;
 }
 $30 = $1;
 $31 = $p;
 $32 = ((($31)) + 948|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)<($33|0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = $voc;
 _virt_resetvoice($35,$36,1);
 STACKTOP = sp;return;
}
function _virt_setpan($ctx,$chn,$pan) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $pan = $pan|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $pan;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_setpan($8,$9,$10);
 STACKTOP = sp;return;
}
function _virt_seteffect($ctx,$chn,$type,$val) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $type = $type|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $type;
 $3 = $val;
 $4 = $0;
 $p = $4;
 $5 = $p;
 $6 = $1;
 $7 = (_map_virt_channel($5,$6)|0);
 $voc = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $voc;
 $11 = $2;
 $12 = $3;
 _mixer_seteffect($9,$10,$11,$12);
 STACKTOP = sp;return;
}
function _virt_getvoicepos($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $p;
 $5 = $2;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $0 = -1;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = $1;
  $9 = $voc;
  $10 = (_mixer_getvoicepos($8,$9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _virt_setsmp($ctx,$chn,$smp) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $smp = $smp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0, $p = 0, $pos = 0, $vi = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $smp;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $voc;
 $9 = $p;
 $10 = ((($9)) + 948|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($8*116)|0)|0);
 $vi = $13;
 $14 = $vi;
 $15 = ((($14)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ($16|0)==($17|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = $vi;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $pos = $21;
 $22 = $vi;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $frac = $24;
 $25 = $0;
 $26 = $voc;
 $27 = $2;
 _mixer_setpatch($25,$26,$27);
 $28 = $0;
 $29 = $voc;
 $30 = $pos;
 $31 = $frac;
 _mixer_voicepos($28,$29,$30,$31);
 STACKTOP = sp;return;
}
function _virt_setnna($ctx,$chn,$nna) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $nna = $nna|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $nna;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = $voc;
 $10 = $p;
 $11 = ((($10)) + 948|0);
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($9*116)|0)|0);
 $15 = ((($14)) + 56|0);
 HEAP32[$15>>2] = $8;
 STACKTOP = sp;return;
}
function _virt_setpatch($ctx,$chn,$ins,$smp,$note,$nna,$dct,$dca) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $ins = $ins|0;
 $smp = $smp|0;
 $note = $note|0;
 $nna = $nna|0;
 $dct = $dct|0;
 $dca = $dca|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $i = 0, $p = 0, $vfree = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $ins;
 $4 = $smp;
 $5 = $note;
 $6 = $nna;
 $7 = $dct;
 $8 = $dca;
 $9 = $1;
 $p = $9;
 $10 = $2;
 $11 = $p;
 $12 = ((($11)) + 948|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  $0 = -1;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $16 = $3;
 $17 = ($16|0)<(0);
 if ($17) {
  $4 = -1;
 }
 $18 = $7;
 $19 = ($18|0)!=(0);
 L8: do {
  if ($19) {
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $p;
    $22 = ((($21)) + 948|0);
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($20|0)<($24|0);
    if (!($25)) {
     break L8;
    }
    $26 = $1;
    $27 = $i;
    $28 = $2;
    $29 = $3;
    $30 = $4;
    $31 = $5;
    $32 = $7;
    $33 = $8;
    _check_dct($26,$27,$28,$29,$30,$31,$32,$33);
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
  }
 } while(0);
 $36 = $2;
 $37 = $p;
 $38 = ((($37)) + 948|0);
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($36<<3)|0);
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $voc = $43;
 $44 = $voc;
 $45 = ($44|0)>(-1);
 if ($45) {
  $46 = $voc;
  $47 = $p;
  $48 = ((($47)) + 948|0);
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($46*116)|0)|0);
  $52 = ((($51)) + 56|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $1;
   $56 = $2;
   $57 = (_alloc_voice($55,$56)|0);
   $vfree = $57;
   $58 = $p;
   $59 = ((($58)) + 948|0);
   $60 = HEAP32[$59>>2]|0;
   $2 = $60;
   while(1) {
    $61 = $2;
    $62 = (($61) + 1)|0;
    $2 = $62;
    $63 = $p;
    $64 = ((($63)) + 948|0);
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($61<<3)|0);
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)>(-1);
    if (!($70)) {
     break;
    }
   }
   $71 = $2;
   $72 = (($71) + -1)|0;
   $2 = $72;
   $73 = $voc;
   $74 = $p;
   $75 = ((($74)) + 948|0);
   $76 = ((($75)) + 20|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + (($73*116)|0)|0);
   HEAP32[$78>>2] = $72;
   $79 = $voc;
   $80 = $2;
   $81 = $p;
   $82 = ((($81)) + 948|0);
   $83 = ((($82)) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($80<<3)|0);
   $86 = ((($85)) + 4|0);
   HEAP32[$86>>2] = $79;
   $87 = $vfree;
   $voc = $87;
  }
 } else {
  $88 = $1;
  $89 = $2;
  $90 = (_alloc_voice($88,$89)|0);
  $voc = $90;
 }
 $91 = $4;
 $92 = ($91|0)<(0);
 $93 = $1;
 $94 = $voc;
 if ($92) {
  _virt_resetvoice($93,$94,1);
  $95 = $2;
  $0 = $95;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $96 = $4;
 _mixer_setpatch($93,$94,$96);
 $97 = $5;
 $98 = ($97|0)>(149);
 if ($98) {
  $5 = 149;
 }
 $99 = $1;
 $100 = $voc;
 $101 = $5;
 _mixer_setnote($99,$100,$101);
 $102 = $3;
 $103 = $voc;
 $104 = $p;
 $105 = ((($104)) + 948|0);
 $106 = ((($105)) + 20|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (($107) + (($103*116)|0)|0);
 $109 = ((($108)) + 44|0);
 HEAP32[$109>>2] = $102;
 $110 = $6;
 $111 = $voc;
 $112 = $p;
 $113 = ((($112)) + 948|0);
 $114 = ((($113)) + 20|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + (($111*116)|0)|0);
 $117 = ((($116)) + 56|0);
 HEAP32[$117>>2] = $110;
 $118 = $2;
 $0 = $118;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _virt_setbend($ctx,$chn,$bend) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $bend = $bend|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $bend;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_setbend($8,$9,$10);
 STACKTOP = sp;return;
}
function _virt_voicepos($ctx,$chn,$pos) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $pos;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_voicepos($8,$9,$10,0);
 STACKTOP = sp;return;
}
function _virt_pastnote($ctx,$chn,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $p = 0, $voc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $act;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = ((($4)) + 948|0);
 $6 = HEAP32[$5>>2]|0;
 $c = $6;
 while(1) {
  $7 = $c;
  $8 = $p;
  $9 = ((($8)) + 948|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($7|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $p;
  $14 = $c;
  $15 = (_map_virt_channel($13,$14)|0);
  $voc = $15;
  $16 = ($15|0)<(0);
  do {
   if (!($16)) {
    $17 = $voc;
    $18 = $p;
    $19 = ((($18)) + 948|0);
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + (($17*116)|0)|0);
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $1;
    $26 = ($24|0)==($25|0);
    if ($26) {
     $27 = $2;
     if ((($27|0) == 0)) {
      $28 = $0;
      $29 = $voc;
      _virt_resetvoice($28,$29,1);
      break;
     } else if ((($27|0) == 2)) {
      $30 = $0;
      $31 = $c;
      _player_set_release($30,$31);
      break;
     } else if ((($27|0) == 3)) {
      $32 = $0;
      $33 = $c;
      _player_set_fadeout($32,$33);
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $34 = $c;
  $35 = (($34) + 1)|0;
  $c = $35;
 }
 STACKTOP = sp;return;
}
function _virt_cstat($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $p;
 $5 = $2;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $8 = $2;
 $9 = $p;
 $10 = ((($9)) + 948|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)<($11|0);
 if ($12) {
  $0 = 256;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $13 = $voc;
  $14 = $p;
  $15 = ((($14)) + 948|0);
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + (($13*116)|0)|0);
  $19 = ((($18)) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _map_virt_channel($p,$chn) {
 $p = $p|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $chn;
 $3 = $2;
 $4 = $1;
 $5 = ((($4)) + 948|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($3>>>0)>=($7>>>0);
 if ($8) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 948|0);
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($9<<3)|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $voc = $16;
 $17 = $voc;
 $18 = $1;
 $19 = ((($18)) + 948|0);
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($17>>>0)>=($21>>>0);
 if ($22) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $23 = $voc;
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _check_dct($ctx,$i,$chn,$ins,$smp,$note,$dct,$dca) {
 $ctx = $ctx|0;
 $i = $i|0;
 $chn = $chn|0;
 $ins = $ins|0;
 $smp = $smp|0;
 $note = $note|0;
 $dct = $dct|0;
 $dca = $dca|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $i;
 $2 = $chn;
 $3 = $ins;
 $4 = $smp;
 $5 = $note;
 $6 = $dct;
 $7 = $dca;
 $8 = $0;
 $p = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 948|0);
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($9*116)|0)|0);
 $vi = $14;
 $15 = $2;
 $16 = $p;
 $17 = ((($16)) + 948|0);
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($15<<3)|0);
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $voc = $22;
 $23 = $vi;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $2;
 $27 = ($25|0)==($26|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $vi;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = ($30|0)==($31|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $6;
 $34 = ($33|0)==(3);
 do {
  if (!($34)) {
   $35 = $6;
   $36 = ($35|0)==(2);
   if ($36) {
    $37 = $vi;
    $38 = ((($37)) + 48|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = ($39|0)==($40|0);
    if ($41) {
     break;
    }
   }
   $42 = $6;
   $43 = ($42|0)==(1);
   if (!($43)) {
    STACKTOP = sp;return;
   }
   $44 = $vi;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $5;
   $48 = ($46|0)==($47|0);
   if (!($48)) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $49 = $7;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  $61 = $0;
  $62 = $1;
  _virt_resetvoice($61,$62,1);
  STACKTOP = sp;return;
 }
 $51 = $1;
 $52 = $voc;
 $53 = ($51|0)!=($52|0);
 if (!($53)) {
  $54 = $vi;
  $55 = ((($54)) + 56|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   STACKTOP = sp;return;
  }
 }
 $58 = $7;
 $59 = $vi;
 $60 = ((($59)) + 56|0);
 HEAP32[$60>>2] = $58;
 STACKTOP = sp;return;
}
function _alloc_voice($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $p;
  $5 = ((($4)) + 948|0);
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $p;
  $11 = ((($10)) + 948|0);
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + (($9*116)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(-1);
  if ($16) {
   break;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $19 = $i;
 $20 = $p;
 $21 = ((($20)) + 948|0);
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($19|0)==($23|0);
 if ($24) {
  $25 = $0;
  $26 = (_free_voice($25)|0);
  $i = $26;
 }
 $27 = $1;
 $28 = $p;
 $29 = ((($28)) + 948|0);
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($27<<3)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$32>>2] = $34;
 $35 = $p;
 $36 = ((($35)) + 948|0);
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 $40 = $1;
 $41 = $i;
 $42 = $p;
 $43 = ((($42)) + 948|0);
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + (($41*116)|0)|0);
 HEAP32[$46>>2] = $40;
 $47 = $1;
 $48 = $i;
 $49 = $p;
 $50 = ((($49)) + 948|0);
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + (($48*116)|0)|0);
 $54 = ((($53)) + 4|0);
 HEAP32[$54>>2] = $47;
 $55 = $i;
 $56 = $1;
 $57 = $p;
 $58 = ((($57)) + 948|0);
 $59 = ((($58)) + 16|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($56<<3)|0);
 $62 = ((($61)) + 4|0);
 HEAP32[$62>>2] = $55;
 $63 = $i;
 STACKTOP = sp;return ($63|0);
}
function _free_voice($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $num = 0, $p = 0, $vi = 0, $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $num = -1;
 $vol = 2147483647;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $p;
  $4 = ((($3)) + 948|0);
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($2|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $p;
  $10 = ((($9)) + 948|0);
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + (($8*116)|0)|0);
  $vi = $13;
  $14 = $vi;
  $15 = HEAP32[$14>>2]|0;
  $16 = $p;
  $17 = ((($16)) + 948|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)>=($18|0);
  if ($19) {
   $20 = $vi;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $vol;
   $24 = ($22|0)<($23|0);
   if ($24) {
    $25 = $i;
    $num = $25;
    $26 = $vi;
    $27 = ((($26)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    $vol = $28;
   }
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $num;
 $32 = $p;
 $33 = ((($32)) + 948|0);
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($31*116)|0)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $p;
 $39 = ((($38)) + 948|0);
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($37<<3)|0);
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = -1;
 $44 = $num;
 $45 = $p;
 $46 = ((($45)) + 948|0);
 $47 = ((($46)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + (($44*116)|0)|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $p;
 $53 = ((($52)) + 948|0);
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($51<<3)|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + -1)|0;
 HEAP32[$56>>2] = $58;
 $59 = $p;
 $60 = ((($59)) + 948|0);
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + -1)|0;
 HEAP32[$61>>2] = $63;
 $64 = $num;
 STACKTOP = sp;return ($64|0);
}
function _note_to_period($n,$f,$type,$adj) {
 $n = $n|0;
 $f = $f|0;
 $type = $type|0;
 $adj = +$adj;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $per = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $f;
 $2 = $type;
 $3 = $adj;
 $4 = $0;
 $5 = (+($4|0));
 $6 = $1;
 $7 = (+($6|0));
 $8 = $7 / 128.0;
 $9 = $5 + $8;
 $d = $9;
 $10 = $2;
 $11 = ($10|0)!=(0);
 $12 = $d;
 if ($11) {
  $13 = 240.0 - $12;
  $14 = $13 * 16.0;
  $18 = $14;
 } else {
  $15 = $12 / 12.0;
  $16 = (+Math_pow(2.0,(+$15)));
  $17 = 13694.0 / $16;
  $18 = $17;
 }
 $per = $18;
 $19 = $3;
 $20 = $19 > 0.10000000000000001;
 if (!($20)) {
  $24 = $per;
  STACKTOP = sp;return (+$24);
 }
 $21 = $3;
 $22 = $per;
 $23 = $22 * $21;
 $per = $23;
 $24 = $per;
 STACKTOP = sp;return (+$24);
}
function _note_to_period_mix($n,$b) {
 $n = $n|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $b;
 $2 = $0;
 $3 = (+($2|0));
 $4 = $1;
 $5 = (+($4|0));
 $6 = $5 / 12800.0;
 $7 = $3 + $6;
 $d = $7;
 $8 = $d;
 $9 = $8 / 12.0;
 $10 = (+Math_pow(2.0,(+$9)));
 $11 = 56090624.0 / $10;
 $12 = (~~(($11)));
 STACKTOP = sp;return ($12|0);
}
function _period_to_note($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $n = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $t = (11848);
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $n = 24;
 while(1) {
  $4 = $1;
  $5 = ($4|0)<=(3627);
  if (!($5)) {
   break;
  }
  $6 = $n;
  $7 = (($6) + 12)|0;
  $n = $7;
  $8 = $1;
  $9 = $8 << 1;
  $1 = $9;
 }
 while(1) {
  $10 = $1;
  $11 = $t;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)>($12|0);
  if (!($13)) {
   break;
  }
  $14 = $t;
  $15 = ((($14)) + -32|0);
  $t = $15;
  $16 = $n;
  $17 = (($16) + -1)|0;
  $n = $17;
 }
 $f = 7;
 while(1) {
  $18 = $f;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $t;
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = ($21|0)>($22|0);
  if (!($23)) {
   break;
  }
  $24 = $t;
  $25 = ((($24)) + 4|0);
  $t = $25;
  $26 = $f;
  $27 = (($26) + -1)|0;
  $f = $27;
 }
 $28 = $n;
 $29 = $f;
 $30 = $29 >> 2;
 $31 = (($28) - ($30))|0;
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _period_to_bend($p,$n,$gliss,$type,$adj) {
 $p = +$p;
 $n = $n|0;
 $gliss = $gliss|0;
 $type = $type|0;
 $adj = +$adj;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, $d = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $n;
 $3 = $gliss;
 $4 = $type;
 $5 = $adj;
 $6 = $2;
 $7 = ($6|0)==(0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $4;
 $9 = ($8|0)!=(0);
 $10 = $2;
 if ($9) {
  $11 = (240 - ($10))|0;
  $12 = $11 << 4;
  $13 = (+($12|0));
  $14 = $1;
  $15 = $13 - $14;
  $16 = 8.0 * $15;
  $17 = 100.0 * $16;
  $18 = (~~(($17)));
  $b = $18;
  $19 = $3;
  $20 = ($19|0)!=(0);
  $21 = $b;
  $22 = (($21|0) / 12800)&-1;
  $23 = ($22*12800)|0;
  $24 = $20 ? $23 : $21;
  $0 = $24;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $25 = $5;
  $26 = (+_note_to_period($10,0,0,$25));
  $d = $26;
  $27 = $d;
  $28 = $1;
  $29 = $27 / $28;
  $30 = (+Math_log((+$29)));
  $31 = 1536.0 * $30;
  $32 = $31 / 0.69314718055994529;
  $33 = 100.0 * $32;
  $34 = (+_round($33));
  $35 = (~~(($34)));
  $b = $35;
  $36 = $3;
  $37 = ($36|0)!=(0);
  $38 = $b;
  $39 = (($38|0) / 12800)&-1;
  $40 = ($39*12800)|0;
  $41 = $37 ? $40 : $38;
  $0 = $41;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _c2spd_to_note($c2spd,$n,$f) {
 $c2spd = $c2spd|0;
 $n = $n|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c2spd;
 $1 = $n;
 $2 = $f;
 $3 = $0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $2;
  HEAP32[$5>>2] = 0;
  $6 = $1;
  HEAP32[$6>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = (+($7|0));
  $9 = $8 / 8363.0;
  $10 = (+Math_log((+$9)));
  $11 = 1536.0 * $10;
  $12 = $11 / 0.69314718055994529;
  $13 = (~~(($12)));
  $c = $13;
  $14 = $c;
  $15 = (($14|0) / 128)&-1;
  $16 = $1;
  HEAP32[$16>>2] = $15;
  $17 = $c;
  $18 = (($17|0) % 128)&-1;
  $19 = $2;
  HEAP32[$19>>2] = $18;
  STACKTOP = sp;return;
 }
}
function _player_set_release($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 624|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + (($3*440)|0)|0);
 $xc = $7;
 $8 = $xc;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 | 2;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _player_set_fadeout($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 624|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + (($3*440)|0)|0);
 $xc = $7;
 $8 = $xc;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 | 1;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _xmp_start_player($opaque,$rate,$format) {
 $opaque = $opaque|0;
 $rate = $rate|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ctx = 0, $f = 0, $i = 0, $m = 0, $mod = 0, $or$cond = 0, $p = 0, $ret = 0, $s = 0, $smix = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $rate;
 $3 = $format;
 $4 = $1;
 $ctx = $4;
 $5 = $ctx;
 $p = $5;
 $6 = $ctx;
 $7 = ((($6)) + 1496|0);
 $s = $7;
 $8 = $ctx;
 $9 = ((($8)) + 8120|0);
 $smix = $9;
 $10 = $ctx;
 $11 = ((($10)) + 1552|0);
 $m = $11;
 $12 = $m;
 $mod = $12;
 $13 = $p;
 $14 = ((($13)) + 324|0);
 $f = $14;
 $ret = 0;
 $15 = $2;
 $16 = ($15|0)<(4000);
 $17 = $2;
 $18 = ($17|0)>(49170);
 $or$cond = $16 | $18;
 if ($or$cond) {
  $0 = -7;
  $258 = $0;
  STACKTOP = sp;return ($258|0);
 }
 $19 = $ctx;
 $20 = ((($19)) + 8140|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<(1);
 if ($22) {
  $0 = -8;
  $258 = $0;
  STACKTOP = sp;return ($258|0);
 }
 $23 = $ctx;
 $24 = ((($23)) + 8140|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)>(1);
 if ($26) {
  $27 = $1;
  _xmp_end_player($27);
 }
 $28 = $ctx;
 $29 = $2;
 $30 = $3;
 $31 = $m;
 $32 = ((($31)) + 1264|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_mixer_on($28,$29,$30,$33)|0);
 $35 = ($34|0)<(0);
 if ($35) {
  $0 = -2;
  $258 = $0;
  STACKTOP = sp;return ($258|0);
 }
 $36 = $p;
 $37 = ((($36)) + 316|0);
 HEAP32[$37>>2] = 100;
 $38 = $p;
 $39 = ((($38)) + 312|0);
 HEAP32[$39>>2] = 100;
 $40 = $m;
 $41 = ((($40)) + 1268|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $p;
 $44 = ((($43)) + 320|0);
 HEAP32[$44>>2] = $42;
 $45 = $p;
 HEAP32[$45>>2] = 0;
 $46 = $p;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = 0;
 $48 = $p;
 $49 = ((($48)) + 12|0);
 HEAP32[$49>>2] = -1;
 $50 = $p;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = 0;
 $52 = $p;
 $53 = ((($52)) + 32|0);
 HEAPF64[$53>>3] = 0.0;
 $54 = $p;
 $55 = ((($54)) + 48|0);
 HEAP32[$55>>2] = 0;
 $56 = $p;
 $57 = ((($56)) + 52|0);
 HEAP32[$57>>2] = 0;
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(64);
  if (!($59)) {
   break;
  }
  $60 = $i;
  $61 = $p;
  $62 = ((($61)) + 884|0);
  $63 = (($62) + ($60)|0);
  HEAP8[$63>>0] = 0;
  $64 = $i;
  $65 = $p;
  $66 = ((($65)) + 628|0);
  $67 = (($66) + ($64<<2)|0);
  HEAP32[$67>>2] = 100;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 while(1) {
  $70 = $p;
  $71 = HEAP32[$70>>2]|0;
  $72 = $mod;
  $73 = ((($72)) + 156|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($71|0)<($74|0);
  if ($75) {
   $76 = $p;
   $77 = HEAP32[$76>>2]|0;
   $78 = $mod;
   $79 = ((($78)) + 952|0);
   $80 = (($79) + ($77)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $mod;
   $84 = ((($83)) + 128|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($82|0)>=($85|0);
   $259 = $86;
  } else {
   $259 = 0;
  }
  $87 = $p;
  $88 = HEAP32[$87>>2]|0;
  if (!($259)) {
   break;
  }
  $89 = (($88) + 1)|0;
  HEAP32[$87>>2] = $89;
 }
 $90 = $mod;
 $91 = ((($90)) + 156|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($88|0)>=($92|0);
 if ($93) {
  $94 = $mod;
  $95 = ((($94)) + 156|0);
  HEAP32[$95>>2] = 0;
 }
 $96 = $mod;
 $97 = ((($96)) + 156|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 if ($99) {
  label = 20;
 } else {
  $100 = $mod;
  $101 = ((($100)) + 136|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if ($103) {
   label = 20;
  } else {
   $117 = $p;
   $118 = HEAP32[$117>>2]|0;
   $119 = $mod;
   $120 = ((($119)) + 952|0);
   $121 = (($120) + ($118)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = $mod;
   $125 = ((($124)) + 168|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + ($123<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = HEAP32[$128>>2]|0;
   $130 = $f;
   $131 = ((($130)) + 28|0);
   HEAP32[$131>>2] = $129;
   $132 = $p;
   $133 = ((($132)) + 368|0);
   $134 = ((($133)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $f;
   $137 = ((($136)) + 32|0);
   HEAP32[$137>>2] = $135;
  }
 }
 if ((label|0) == 20) {
  $104 = $p;
  $105 = ((($104)) + 368|0);
  $106 = ((($105)) + 4|0);
  HEAP32[$106>>2] = 0;
  $107 = $p;
  HEAP32[$107>>2] = 0;
  $108 = $p;
  $109 = ((($108)) + 368|0);
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = 0;
  $111 = $p;
  $112 = ((($111)) + 8|0);
  HEAP32[$112>>2] = 0;
  $113 = $f;
  $114 = ((($113)) + 32|0);
  HEAP32[$114>>2] = 0;
  $115 = $f;
  $116 = ((($115)) + 28|0);
  HEAP32[$116>>2] = 0;
 }
 $138 = $p;
 $139 = HEAP32[$138>>2]|0;
 $140 = $m;
 $141 = ((($140)) + 1296|0);
 $142 = (($141) + (($139*20)|0)|0);
 $143 = ((($142)) + 8|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = $p;
 $146 = ((($145)) + 320|0);
 HEAP32[$146>>2] = $144;
 $147 = $p;
 $148 = HEAP32[$147>>2]|0;
 $149 = $m;
 $150 = ((($149)) + 1296|0);
 $151 = (($150) + (($148*20)|0)|0);
 $152 = ((($151)) + 4|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $p;
 $155 = ((($154)) + 20|0);
 HEAP32[$155>>2] = $153;
 $156 = $p;
 $157 = HEAP32[$156>>2]|0;
 $158 = $m;
 $159 = ((($158)) + 1296|0);
 $160 = (($159) + (($157*20)|0)|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $p;
 $163 = ((($162)) + 16|0);
 HEAP32[$163>>2] = $161;
 $164 = $m;
 $165 = ((($164)) + 1256|0);
 $166 = +HEAPF64[$165>>3];
 $167 = $m;
 $168 = ((($167)) + 1248|0);
 $169 = +HEAPF64[$168>>3];
 $170 = $166 * $169;
 $171 = $p;
 $172 = ((($171)) + 20|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (+($173|0));
 $175 = $170 / $174;
 $176 = $p;
 $177 = ((($176)) + 40|0);
 HEAPF64[$177>>3] = $175;
 $178 = $ctx;
 $179 = $mod;
 $180 = ((($179)) + 136|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $smix;
 $183 = HEAP32[$182>>2]|0;
 $184 = (($181) + ($183))|0;
 $185 = (_virt_on($178,$184)|0);
 $186 = ($185|0)!=(0);
 do {
  if ($186) {
   $ret = -2;
  } else {
   $187 = $f;
   $188 = ((($187)) + 16|0);
   HEAP32[$188>>2] = 0;
   $189 = $f;
   $190 = ((($189)) + 4|0);
   HEAP32[$190>>2] = -1;
   $191 = $f;
   HEAP32[$191>>2] = 0;
   $192 = $f;
   $193 = ((($192)) + 40|0);
   HEAP32[$193>>2] = 0;
   $194 = $p;
   $195 = ((($194)) + 948|0);
   $196 = ((($195)) + 4|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (_calloc($197,8)|0);
   $199 = $f;
   $200 = ((($199)) + 24|0);
   HEAP32[$200>>2] = $198;
   $201 = $f;
   $202 = ((($201)) + 24|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($203|0)==(0|0);
   if ($204) {
    $ret = -6;
    break;
   }
   $205 = $p;
   $206 = ((($205)) + 948|0);
   $207 = ((($206)) + 4|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = (_calloc($208,440)|0);
   $210 = $p;
   $211 = ((($210)) + 624|0);
   HEAP32[$211>>2] = $209;
   $212 = $p;
   $213 = ((($212)) + 624|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($214|0)==(0|0);
   if ($215) {
    $ret = -6;
   } else {
    $i = 0;
    while(1) {
     $216 = $i;
     $217 = $p;
     $218 = ((($217)) + 948|0);
     $219 = ((($218)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($216|0)<($220|0);
     if (!($221)) {
      label = 32;
      break;
     }
     $222 = $i;
     $223 = $p;
     $224 = ((($223)) + 624|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + (($222*440)|0)|0);
     $xc = $226;
     $227 = $ctx;
     $228 = $xc;
     $229 = (_new_channel_extras($227,$228)|0);
     $230 = ($229|0)<(0);
     if ($230) {
      break;
     }
     $231 = $i;
     $232 = (($231) + 1)|0;
     $i = $232;
    }
    do {
     if ((label|0) == 32) {
      $233 = $m;
      $234 = ((($233)) + 6556|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = HEAP32[$235>>2]|0;
      $237 = $ctx;
      $238 = $s;
      $239 = HEAP32[$238>>2]|0;
      $240 = (FUNCTION_TABLE_iii[$236 & 511]($237,$239)|0);
      $241 = ($240|0)<(0);
      if ($241) {
       $ret = -2;
       break;
      }
      $242 = $m;
      $243 = ((($242)) + 6556|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = ((($244)) + 8|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = $ctx;
      (FUNCTION_TABLE_ii[$246 & 255]($247)|0);
      $248 = $ctx;
      _reset_channels($248);
      $249 = $ctx;
      $250 = ((($249)) + 8140|0);
      HEAP32[$250>>2] = 2;
      $0 = 0;
      $258 = $0;
      STACKTOP = sp;return ($258|0);
     }
    } while(0);
    $251 = $p;
    $252 = ((($251)) + 624|0);
    $253 = HEAP32[$252>>2]|0;
    _free($253);
   }
   $254 = $f;
   $255 = ((($254)) + 24|0);
   $256 = HEAP32[$255>>2]|0;
   _free($256);
  }
 } while(0);
 $257 = $ret;
 $0 = $257;
 $258 = $0;
 STACKTOP = sp;return ($258|0);
}
function _xmp_end_player($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $f = 0, $i = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $ctx = $1;
 $2 = $ctx;
 $p = $2;
 $3 = $p;
 $4 = ((($3)) + 324|0);
 $f = $4;
 $5 = $ctx;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $ctx;
 $8 = ((($7)) + 8140|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(2);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $ctx;
 $12 = ((($11)) + 8140|0);
 HEAP32[$12>>2] = 1;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $p;
  $15 = ((($14)) + 948|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $p;
  $21 = ((($20)) + 624|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($19*440)|0)|0);
  $xc = $23;
  $24 = $ctx;
  $25 = $xc;
  _release_channel_extras($24,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $ctx;
 _virt_off($28);
 $29 = $m;
 $30 = ((($29)) + 6556|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $ctx;
 (FUNCTION_TABLE_ii[$33 & 255]($34)|0);
 $35 = $p;
 $36 = ((($35)) + 624|0);
 $37 = HEAP32[$36>>2]|0;
 _free($37);
 $38 = $f;
 $39 = ((($38)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 _free($40);
 $41 = $p;
 $42 = ((($41)) + 624|0);
 HEAP32[$42>>2] = 0;
 $43 = $f;
 $44 = ((($43)) + 24|0);
 HEAP32[$44>>2] = 0;
 $45 = $ctx;
 _mixer_off($45);
 STACKTOP = sp;return;
}
function _xmp_play_frame($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctx = 0, $f = 0, $i = 0, $m = 0, $mod = 0, $p = 0, $start = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $1;
 $ctx = $2;
 $3 = $ctx;
 $p = $3;
 $4 = $ctx;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $p;
 $8 = ((($7)) + 324|0);
 $f = $8;
 $9 = $ctx;
 $10 = ((($9)) + 8140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(2);
 if ($12) {
  $0 = -8;
  $252 = $0;
  STACKTOP = sp;return ($252|0);
 }
 $13 = $mod;
 $14 = ((($13)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<=(0);
 if (!($16)) {
  $17 = $p;
  $18 = HEAP32[$17>>2]|0;
  $19 = $mod;
  $20 = ((($19)) + 952|0);
  $21 = (($20) + ($18)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(255);
  if (!($24)) {
   $25 = $p;
   $26 = HEAP32[$25>>2]|0;
   $27 = $p;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26|0)!=($29|0);
   $31 = $p;
   if ($30) {
    $32 = ((($31)) + 52|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $m;
    $35 = ((($34)) + 6420|0);
    $36 = (($35) + ($33<<3)|0);
    $37 = HEAP32[$36>>2]|0;
    $start = $37;
    $38 = $p;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(-2);
    if ($41) {
     $0 = -1;
     $252 = $0;
     STACKTOP = sp;return ($252|0);
    }
    $42 = $p;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(-1);
    if ($45) {
     $46 = $start;
     $47 = $p;
     $48 = ((($47)) + 4|0);
     HEAP32[$48>>2] = $46;
    }
    $49 = $p;
    $50 = ((($49)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $start;
    $53 = ($51|0)==($52|0);
    if ($53) {
     $54 = $p;
     $55 = ((($54)) + 52|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $p;
     $58 = ((($57)) + 368|0);
     $59 = (($58) + ($56<<4)|0);
     $60 = ((($59)) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $f;
     $63 = ((($62)) + 32|0);
     HEAP32[$63>>2] = $61;
    }
    $64 = $p;
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $p;
    $68 = ((($67)) + 52|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $p;
    $71 = ((($70)) + 368|0);
    $72 = (($71) + ($69<<4)|0);
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($66|0)>($74|0);
    if ($75) {
     $76 = $f;
     $77 = ((($76)) + 32|0);
     HEAP32[$77>>2] = 0;
    }
    $78 = $f;
    $79 = ((($78)) + 16|0);
    HEAP32[$79>>2] = 0;
    $80 = $f;
    $81 = ((($80)) + 4|0);
    HEAP32[$81>>2] = -1;
    $82 = $p;
    $83 = ((($82)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) - 1)|0;
    $86 = $p;
    HEAP32[$86>>2] = $85;
    $87 = $p;
    $88 = HEAP32[$87>>2]|0;
    $89 = $start;
    $90 = ($88|0)<($89|0);
    if ($90) {
     $91 = $start;
     $92 = (($91) - 1)|0;
     $93 = $p;
     HEAP32[$93>>2] = $92;
    }
    $94 = $ctx;
    _next_order($94);
    $95 = $p;
    $96 = HEAP32[$95>>2]|0;
    $97 = $m;
    $98 = ((($97)) + 1296|0);
    $99 = (($98) + (($96*20)|0)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)!=(0);
    if ($101) {
     $102 = $p;
     $103 = HEAP32[$102>>2]|0;
     $104 = $m;
     $105 = ((($104)) + 1296|0);
     $106 = (($105) + (($103*20)|0)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $p;
     $109 = ((($108)) + 16|0);
     HEAP32[$109>>2] = $107;
    }
    $110 = $p;
    $111 = HEAP32[$110>>2]|0;
    $112 = $m;
    $113 = ((($112)) + 1296|0);
    $114 = (($113) + (($111*20)|0)|0);
    $115 = ((($114)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $p;
    $118 = ((($117)) + 20|0);
    HEAP32[$118>>2] = $116;
    $119 = $p;
    $120 = HEAP32[$119>>2]|0;
    $121 = $m;
    $122 = ((($121)) + 1296|0);
    $123 = (($122) + (($120*20)|0)|0);
    $124 = ((($123)) + 8|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $p;
    $127 = ((($126)) + 320|0);
    HEAP32[$127>>2] = $125;
    $128 = $p;
    $129 = HEAP32[$128>>2]|0;
    $130 = $m;
    $131 = ((($130)) + 1296|0);
    $132 = (($131) + (($129*20)|0)|0);
    $133 = ((($132)) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (+($134|0));
    $136 = $p;
    $137 = ((($136)) + 32|0);
    HEAPF64[$137>>3] = $135;
    $138 = $ctx;
    _virt_reset($138);
    $139 = $ctx;
    _reset_channels($139);
   } else {
    $140 = ((($31)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + 1)|0;
    HEAP32[$140>>2] = $142;
    $143 = $p;
    $144 = ((($143)) + 12|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $p;
    $147 = ((($146)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $f;
    $150 = ((($149)) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (1 + ($151))|0;
    $153 = Math_imul($148, $152)|0;
    $154 = ($145|0)>=($153|0);
    if ($154) {
     $155 = $ctx;
     _next_row($155);
    }
   }
   $156 = $p;
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(0);
   if ($159) {
    $160 = $p;
    $161 = HEAP32[$160>>2]|0;
    $162 = $p;
    $163 = ((($162)) + 52|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $p;
    $166 = ((($165)) + 368|0);
    $167 = (($166) + ($164<<4)|0);
    $168 = ((($167)) + 4|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($161|0)==($169|0);
    if ($170) {
     $171 = $p;
     $172 = ((($171)) + 8|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $p;
     $175 = ((($174)) + 52|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $p;
     $178 = ((($177)) + 368|0);
     $179 = (($178) + ($176<<4)|0);
     $180 = ((($179)) + 8|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($173|0)==($181|0);
     if ($182) {
      $183 = $f;
      $184 = ((($183)) + 32|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)==(0);
      if ($186) {
       $187 = $p;
       $188 = ((($187)) + 48|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = (($189) + 1)|0;
       HEAP32[$188>>2] = $190;
       $191 = $p;
       $192 = ((($191)) + 52|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = $p;
       $195 = ((($194)) + 368|0);
       $196 = (($195) + ($193<<4)|0);
       $197 = ((($196)) + 12|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $f;
       $200 = ((($199)) + 32|0);
       HEAP32[$200>>2] = $198;
      }
      $201 = $f;
      $202 = ((($201)) + 32|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = (($203) + -1)|0;
      HEAP32[$202>>2] = $204;
     }
    }
    $205 = $ctx;
    $206 = $p;
    $207 = HEAP32[$206>>2]|0;
    $208 = $mod;
    $209 = ((($208)) + 952|0);
    $210 = (($209) + ($207)|0);
    $211 = HEAP8[$210>>0]|0;
    $212 = $211&255;
    $213 = $p;
    $214 = ((($213)) + 8|0);
    $215 = HEAP32[$214>>2]|0;
    _read_row($205,$212,$215);
   }
   $216 = $ctx;
   _inject_event($216);
   $i = 0;
   while(1) {
    $217 = $i;
    $218 = $p;
    $219 = ((($218)) + 948|0);
    $220 = ((($219)) + 4|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = ($217|0)<($221|0);
    if (!($222)) {
     break;
    }
    $223 = $ctx;
    $224 = $i;
    $225 = $p;
    $226 = ((($225)) + 12|0);
    $227 = HEAP32[$226>>2]|0;
    _play_channel($223,$224,$227);
    $228 = $i;
    $229 = (($228) + 1)|0;
    $i = $229;
   }
   $230 = $m;
   $231 = ((($230)) + 1256|0);
   $232 = +HEAPF64[$231>>3];
   $233 = $m;
   $234 = ((($233)) + 1248|0);
   $235 = +HEAPF64[$234>>3];
   $236 = $232 * $235;
   $237 = $p;
   $238 = ((($237)) + 20|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = (+($239|0));
   $241 = $236 / $240;
   $242 = $p;
   $243 = ((($242)) + 40|0);
   HEAPF64[$243>>3] = $241;
   $244 = $p;
   $245 = ((($244)) + 40|0);
   $246 = +HEAPF64[$245>>3];
   $247 = $p;
   $248 = ((($247)) + 32|0);
   $249 = +HEAPF64[$248>>3];
   $250 = $249 + $246;
   HEAPF64[$248>>3] = $250;
   $251 = $ctx;
   _mixer_softmixer($251);
   $0 = 0;
   $252 = $0;
   STACKTOP = sp;return ($252|0);
  }
 }
 $0 = -1;
 $252 = $0;
 STACKTOP = sp;return ($252|0);
}
function _xmp_get_frame_info($opaque,$info) {
 $opaque = $opaque|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $c = 0, $chn = 0, $ci = 0, $ctx = 0;
 var $event = 0, $i = 0, $m = 0, $mod = 0, $p = 0, $s = 0, $track = 0, $trk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $info;
 $2 = $0;
 $ctx = $2;
 $3 = $ctx;
 $p = $3;
 $4 = $ctx;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $ctx;
 $7 = ((($6)) + 1552|0);
 $m = $7;
 $8 = $m;
 $mod = $8;
 $9 = $ctx;
 $10 = ((($9)) + 8140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(1);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $mod;
 $14 = ((($13)) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $chn = $15;
 $16 = $p;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>=(0);
 if ($19) {
  $20 = $p;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $mod;
  $24 = ((($23)) + 156|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)<($25|0);
  if ($26) {
   $27 = $p;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   HEAP32[$30>>2] = $29;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $31 = $1;
  HEAP32[$31>>2] = 0;
 }
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $mod;
 $35 = ((($34)) + 952|0);
 $36 = (($35) + ($33)|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $1;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $38;
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $mod;
 $45 = ((($44)) + 128|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43|0)<($46|0);
 $48 = $1;
 if ($47) {
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $mod;
  $52 = ((($51)) + 168|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $1;
  $58 = ((($57)) + 12|0);
  HEAP32[$58>>2] = $56;
 } else {
  $59 = ((($48)) + 12|0);
  HEAP32[$59>>2] = 0;
 }
 $60 = $p;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = ((($63)) + 8|0);
 HEAP32[$64>>2] = $62;
 $65 = $p;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $1;
 $69 = ((($68)) + 16|0);
 HEAP32[$69>>2] = $67;
 $70 = $p;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $1;
 $74 = ((($73)) + 20|0);
 HEAP32[$74>>2] = $72;
 $75 = $p;
 $76 = ((($75)) + 20|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $1;
 $79 = ((($78)) + 24|0);
 HEAP32[$79>>2] = $77;
 $80 = $p;
 $81 = ((($80)) + 52|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $p;
 $84 = ((($83)) + 368|0);
 $85 = (($84) + ($82<<4)|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $1;
 $88 = ((($87)) + 32|0);
 HEAP32[$88>>2] = $86;
 $89 = $p;
 $90 = ((($89)) + 40|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $91 * 1000.0;
 $93 = (~~(($92)));
 $94 = $1;
 $95 = ((($94)) + 36|0);
 HEAP32[$95>>2] = $93;
 $96 = $p;
 $97 = ((($96)) + 32|0);
 $98 = +HEAPF64[$97>>3];
 $99 = (~~(($98)));
 $100 = $1;
 $101 = ((($100)) + 28|0);
 HEAP32[$101>>2] = $99;
 $102 = $s;
 $103 = ((($102)) + 24|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $1;
 $106 = ((($105)) + 40|0);
 HEAP32[$106>>2] = $104;
 $107 = $1;
 $108 = ((($107)) + 48|0);
 HEAP32[$108>>2] = 24585;
 $109 = $s;
 $110 = ((($109)) + 36|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $1;
 $113 = ((($112)) + 44|0);
 HEAP32[$113>>2] = $111;
 $114 = $s;
 $115 = ((($114)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 ^ -1;
 $118 = $117 & 4;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $1;
  $121 = ((($120)) + 44|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122<<1;
  HEAP32[$121>>2] = $123;
 }
 $124 = $s;
 $125 = ((($124)) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 ^ -1;
 $128 = $127 & 1;
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $1;
  $131 = ((($130)) + 44|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132<<1;
  HEAP32[$131>>2] = $133;
 }
 $134 = $p;
 $135 = ((($134)) + 320|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = ((($137)) + 52|0);
 HEAP32[$138>>2] = $136;
 $139 = $p;
 $140 = ((($139)) + 48|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $1;
 $143 = ((($142)) + 56|0);
 HEAP32[$143>>2] = $141;
 $144 = $p;
 $145 = ((($144)) + 948|0);
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $1;
 $149 = ((($148)) + 60|0);
 HEAP32[$149>>2] = $147;
 $150 = $p;
 $151 = ((($150)) + 948|0);
 $152 = ((($151)) + 8|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $1;
 $155 = ((($154)) + 64|0);
 HEAP32[$155>>2] = $153;
 $156 = $p;
 $157 = ((($156)) + 52|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $1;
 $160 = ((($159)) + 68|0);
 HEAP32[$160>>2] = $158;
 $161 = $p;
 $162 = ((($161)) + 624|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if (!($164)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $165 = $i;
  $166 = $chn;
  $167 = ($165|0)<($166|0);
  if (!($167)) {
   break;
  }
  $168 = $i;
  $169 = $p;
  $170 = ((($169)) + 624|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + (($168*440)|0)|0);
  $c = $172;
  $173 = $i;
  $174 = $1;
  $175 = ((($174)) + 72|0);
  $176 = (($175) + (($173*24)|0)|0);
  $ci = $176;
  $177 = $c;
  $178 = ((($177)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179&255;
  $181 = $ci;
  $182 = ((($181)) + 10|0);
  HEAP8[$182>>0] = $180;
  $183 = $c;
  $184 = ((($183)) + 420|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $185&65535;
  $187 = $ci;
  $188 = ((($187)) + 8|0);
  HEAP16[$188>>1] = $186;
  $189 = $c;
  $190 = ((($189)) + 416|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $ci;
  HEAP32[$192>>2] = $191;
  $193 = $c;
  $194 = ((($193)) + 424|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $ci;
  $197 = ((($196)) + 4|0);
  HEAP32[$197>>2] = $195;
  $198 = $c;
  $199 = ((($198)) + 44|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $200&255;
  $202 = $ci;
  $203 = ((($202)) + 11|0);
  HEAP8[$203>>0] = $201;
  $204 = $c;
  $205 = ((($204)) + 56|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $206&255;
  $208 = $ci;
  $209 = ((($208)) + 12|0);
  HEAP8[$209>>0] = $207;
  $210 = $c;
  $211 = ((($210)) + 428|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $212 >> 4;
  $214 = $213&255;
  $215 = $ci;
  $216 = ((($215)) + 13|0);
  HEAP8[$216>>0] = $214;
  $217 = $c;
  $218 = ((($217)) + 432|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $219&255;
  $221 = $ci;
  $222 = ((($221)) + 14|0);
  HEAP8[$222>>0] = $220;
  $223 = $ci;
  $224 = ((($223)) + 15|0);
  HEAP8[$224>>0] = 0;
  $225 = $ci;
  $226 = ((($225)) + 16|0);
  ;HEAP8[$226>>0]=0|0;HEAP8[$226+1>>0]=0|0;HEAP8[$226+2>>0]=0|0;HEAP8[$226+3>>0]=0|0;HEAP8[$226+4>>0]=0|0;HEAP8[$226+5>>0]=0|0;HEAP8[$226+6>>0]=0|0;HEAP8[$226+7>>0]=0|0;
  $227 = $1;
  $228 = ((($227)) + 4|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $mod;
  $231 = ((($230)) + 128|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($229|0)<($232|0);
  if ($233) {
   $234 = $1;
   $235 = ((($234)) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $1;
   $238 = ((($237)) + 12|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ($236|0)<($239|0);
   if ($240) {
    $241 = $i;
    $242 = $1;
    $243 = ((($242)) + 4|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $mod;
    $246 = ((($245)) + 168|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + ($244<<2)|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ((($249)) + 4|0);
    $251 = (($250) + ($241<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $trk = $252;
    $253 = $trk;
    $254 = $mod;
    $255 = ((($254)) + 172|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = (($256) + ($253<<2)|0);
    $258 = HEAP32[$257>>2]|0;
    $track = $258;
    $259 = $1;
    $260 = ((($259)) + 8|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = $track;
    $263 = HEAP32[$262>>2]|0;
    $264 = ($261|0)<($263|0);
    if ($264) {
     $265 = $1;
     $266 = ((($265)) + 8|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $track;
     $269 = ((($268)) + 4|0);
     $270 = (($269) + ($267<<3)|0);
     $event = $270;
     $271 = $ci;
     $272 = ((($271)) + 16|0);
     $273 = $event;
     ;HEAP8[$272>>0]=HEAP8[$273>>0]|0;HEAP8[$272+1>>0]=HEAP8[$273+1>>0]|0;HEAP8[$272+2>>0]=HEAP8[$273+2>>0]|0;HEAP8[$272+3>>0]=HEAP8[$273+3>>0]|0;HEAP8[$272+4>>0]=HEAP8[$273+4>>0]|0;HEAP8[$272+5>>0]=HEAP8[$273+5>>0]|0;HEAP8[$272+6>>0]=HEAP8[$273+6>>0]|0;HEAP8[$272+7>>0]=HEAP8[$273+7>>0]|0;
    }
   }
  }
  $274 = $i;
  $275 = (($274) + 1)|0;
  $i = $275;
 }
 STACKTOP = sp;return;
}
function _xmp_get_module_info($opaque,$info) {
 $opaque = $opaque|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $m = 0, $mod = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $info;
 $2 = $0;
 $ctx = $2;
 $3 = $ctx;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $mod = $5;
 $6 = $ctx;
 $7 = ((($6)) + 8140|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(1);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = $m;
 $12 = ((($11)) + 1224|0);
 dest=$10; src=$12; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $13 = $mod;
 $14 = $1;
 $15 = ((($14)) + 20|0);
 HEAP32[$15>>2] = $13;
 $16 = $m;
 $17 = ((($16)) + 1220|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = $18;
 $21 = $m;
 $22 = ((($21)) + 6416|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 28|0);
 HEAP32[$25>>2] = $23;
 $26 = $m;
 $27 = ((($26)) + 6420|0);
 $28 = $1;
 $29 = ((($28)) + 32|0);
 HEAP32[$29>>2] = $27;
 $30 = $m;
 $31 = ((($30)) + 1268|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $1;
 $34 = ((($33)) + 16|0);
 HEAP32[$34>>2] = $32;
 STACKTOP = sp;return;
}
function _reset_channels($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $extra = 0, $i = 0, $m = 0, $mod = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $m;
 $6 = ((($5)) + 6556|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 (FUNCTION_TABLE_ii[$9 & 255]($10)|0);
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $p;
  $13 = ((($12)) + 948|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($11|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $p;
  $19 = ((($18)) + 624|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + (($17*440)|0)|0);
  $xc = $21;
  $22 = $xc;
  $23 = ((($22)) + 400|0);
  $24 = HEAP32[$23>>2]|0;
  $extra = $24;
  $25 = $xc;
  _memset(($25|0),0,440)|0;
  $26 = $extra;
  $27 = $xc;
  $28 = ((($27)) + 400|0);
  HEAP32[$28>>2] = $26;
  $29 = $0;
  $30 = $xc;
  _reset_channel_extras($29,$30);
  $31 = $xc;
  $32 = ((($31)) + 16|0);
  HEAP32[$32>>2] = -1;
  $33 = $xc;
  $34 = ((($33)) + 44|0);
  HEAP32[$34>>2] = -1;
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = $p;
  $39 = ((($38)) + 948|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = $p;
  $44 = ((($43)) + 624|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + (($42*440)|0)|0);
  $xc = $46;
  $47 = $i;
  $48 = $mod;
  $49 = ((($48)) + 184|0);
  $50 = (($49) + (($47*12)|0)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $xc;
  $53 = ((($52)) + 344|0);
  HEAP32[$53>>2] = $51;
  $54 = $i;
  $55 = $mod;
  $56 = ((($55)) + 184|0);
  $57 = (($56) + (($54*12)|0)|0);
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $xc;
  $61 = ((($60)) + 60|0);
  HEAP32[$61>>2] = $59;
  $62 = $xc;
  $63 = ((($62)) + 376|0);
  HEAP32[$63>>2] = 255;
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 STACKTOP = sp;return;
}
function _next_order($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chn = 0, $f = 0, $m = 0, $mod = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 324|0);
 $f = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 while(1) {
  $7 = $p;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $p;
  $11 = HEAP32[$10>>2]|0;
  $12 = $mod;
  $13 = ((($12)) + 156|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)>=($14|0);
  if ($15) {
   label = 4;
  } else {
   $16 = $p;
   $17 = HEAP32[$16>>2]|0;
   $18 = $mod;
   $19 = ((($18)) + 952|0);
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)==(255);
   if ($23) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   label = 0;
   $24 = $mod;
   $25 = ((($24)) + 160|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $mod;
   $28 = ((($27)) + 156|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26|0)>($29|0);
   do {
    if ($30) {
     label = 7;
    } else {
     $31 = $mod;
     $32 = ((($31)) + 160|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $mod;
     $35 = ((($34)) + 952|0);
     $36 = (($35) + ($33)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = $mod;
     $40 = ((($39)) + 128|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($38|0)>=($41|0);
     if ($42) {
      label = 7;
     } else {
      $43 = $p;
      $44 = HEAP32[$43>>2]|0;
      $45 = $p;
      $46 = ((($45)) + 52|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $m;
      $49 = ((($48)) + 6420|0);
      $50 = (($49) + ($47<<3)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($44|0)<($51|0);
      if ($52) {
       label = 7;
      } else {
       $61 = $0;
       $62 = $mod;
       $63 = ((($62)) + 160|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (_get_sequence($61,$64)|0);
       $66 = $p;
       $67 = ((($66)) + 52|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($65|0)==($68|0);
       if ($69) {
        $70 = $mod;
        $71 = ((($70)) + 160|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = $p;
        HEAP32[$73>>2] = $72;
        break;
       } else {
        $74 = $p;
        $75 = ((($74)) + 52|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = $m;
        $78 = ((($77)) + 6420|0);
        $79 = (($78) + ($76<<3)|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = $p;
        HEAP32[$81>>2] = $80;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 7) {
    label = 0;
    $53 = $p;
    $54 = ((($53)) + 52|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $m;
    $57 = ((($56)) + 6420|0);
    $58 = (($57) + ($55<<3)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $p;
    HEAP32[$60>>2] = $59;
   }
   $82 = $p;
   $83 = HEAP32[$82>>2]|0;
   $84 = $m;
   $85 = ((($84)) + 1296|0);
   $86 = (($85) + (($83*20)|0)|0);
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $p;
   $90 = ((($89)) + 320|0);
   HEAP32[$90>>2] = $88;
  }
  $91 = $p;
  $92 = HEAP32[$91>>2]|0;
  $93 = $mod;
  $94 = ((($93)) + 952|0);
  $95 = (($94) + ($92)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $mod;
  $99 = ((($98)) + 128|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($97|0)>=($100|0);
  if (!($101)) {
   break;
  }
 }
 $102 = $p;
 $103 = HEAP32[$102>>2]|0;
 $104 = $m;
 $105 = ((($104)) + 1296|0);
 $106 = (($105) + (($103*20)|0)|0);
 $107 = ((($106)) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (+($108|0));
 $110 = $p;
 $111 = ((($110)) + 32|0);
 HEAPF64[$111>>3] = $109;
 $112 = $p;
 $113 = HEAP32[$112>>2]|0;
 $114 = $mod;
 $115 = ((($114)) + 952|0);
 $116 = (($115) + ($113)|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = $mod;
 $120 = ((($119)) + 168|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + ($118<<2)|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = HEAP32[$123>>2]|0;
 $125 = $f;
 $126 = ((($125)) + 28|0);
 HEAP32[$126>>2] = $124;
 $127 = $f;
 $128 = ((($127)) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $f;
 $131 = ((($130)) + 28|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($129|0)>=($132|0);
 if ($133) {
  $134 = $f;
  $135 = ((($134)) + 16|0);
  HEAP32[$135>>2] = 0;
 }
 $136 = $f;
 $137 = ((($136)) + 16|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $p;
 $140 = ((($139)) + 8|0);
 HEAP32[$140>>2] = $138;
 $141 = $f;
 $142 = ((($141)) + 16|0);
 HEAP32[$142>>2] = 0;
 $143 = $p;
 $144 = HEAP32[$143>>2]|0;
 $145 = $p;
 $146 = ((($145)) + 4|0);
 HEAP32[$146>>2] = $144;
 $147 = $p;
 $148 = ((($147)) + 12|0);
 HEAP32[$148>>2] = 0;
 $149 = $m;
 $150 = ((($149)) + 1280|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 & 256;
 $153 = ($152|0)!=(0);
 if (!($153)) {
  STACKTOP = sp;return;
 }
 $chn = 0;
 while(1) {
  $154 = $chn;
  $155 = $mod;
  $156 = ((($155)) + 136|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($154|0)<($157|0);
  if (!($158)) {
   break;
  }
  $159 = $chn;
  $160 = $p;
  $161 = ((($160)) + 624|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + (($159*440)|0)|0);
  $164 = ((($163)) + 4|0);
  HEAP32[$164>>2] = 0;
  $165 = $chn;
  $166 = (($165) + 1)|0;
  $chn = $166;
 }
 STACKTOP = sp;return;
}
function _next_row($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $f = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 324|0);
 $f = $3;
 $4 = $f;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $f;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = $f;
   $12 = ((($11)) + 12|0);
   HEAP32[$12>>2] = 1;
  }
 }
 $13 = $p;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = 0;
 $15 = $f;
 $16 = ((($15)) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = $f;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = $f;
 if ($19) {
  HEAP32[$20>>2] = 0;
  $21 = $f;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(-1);
  if ($24) {
   $25 = $f;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) - 1)|0;
   $29 = $p;
   HEAP32[$29>>2] = $28;
   $30 = $f;
   $31 = ((($30)) + 4|0);
   HEAP32[$31>>2] = -1;
  }
  $32 = $0;
  _next_order($32);
  STACKTOP = sp;return;
 }
 $33 = ((($20)) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $f;
  $37 = ((($36)) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) - 1)|0;
  $40 = $f;
  $41 = ((($40)) + 24|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39<<3)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) - 1)|0;
  $46 = $p;
  $47 = ((($46)) + 8|0);
  HEAP32[$47>>2] = $45;
  $48 = $f;
  $49 = ((($48)) + 20|0);
  HEAP32[$49>>2] = 0;
 }
 $50 = $f;
 $51 = ((($50)) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0);
 if ($53) {
  $54 = $p;
  $55 = ((($54)) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[$55>>2] = $57;
  $58 = $f;
  $59 = ((($58)) + 40|0);
  HEAP32[$59>>2] = 0;
 } else {
  $60 = $f;
  $61 = ((($60)) + 36|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + -1)|0;
  HEAP32[$61>>2] = $63;
 }
 $64 = $p;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $f;
 $68 = ((($67)) + 28|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($66|0)>=($69|0);
 if (!($70)) {
  STACKTOP = sp;return;
 }
 $71 = $0;
 _next_order($71);
 STACKTOP = sp;return;
}
function _read_row($ctx,$pat,$row) {
 $ctx = $ctx|0;
 $pat = $pat|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $chn = 0;
 var $event = 0, $f = 0, $m = 0, $mod = 0, $num_rows = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $pat;
 $2 = $row;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $mod = $5;
 $6 = $0;
 $p = $6;
 $7 = $p;
 $8 = ((($7)) + 324|0);
 $f = $8;
 $9 = $f;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $f;
  $14 = ((($13)) + 12|0);
  HEAP32[$14>>2] = 0;
  STACKTOP = sp;return;
 }
 $chn = 0;
 while(1) {
  $15 = $chn;
  $16 = $mod;
  $17 = ((($16)) + 136|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $chn;
  $21 = $1;
  $22 = $m;
  $23 = ((($22)) + 168|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = (($27) + ($20<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $mod;
  $31 = ((($30)) + 172|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $num_rows = $35;
  $36 = $2;
  $37 = $num_rows;
  $38 = ($36|0)<($37|0);
  if ($38) {
   $39 = $2;
   $40 = $chn;
   $41 = $1;
   $42 = $m;
   $43 = ((($42)) + 168|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($46)) + 4|0);
   $48 = (($47) + ($40<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $m;
   $51 = ((($50)) + 172|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($49<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 4|0);
   $56 = (($55) + ($39<<3)|0);
   $event = $56;
  } else {
   $event = 12184;
  }
  $57 = $0;
  $58 = $event;
  $59 = $chn;
  $60 = (_check_delay($57,$58,$59)|0);
  $61 = ($60|0)==(0);
  do {
   if ($61) {
    $62 = $f;
    $63 = ((($62)) + 40|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = $f;
     $67 = ((($66)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)>(0);
     if (!($69)) {
      break;
     }
    }
    $70 = $0;
    $71 = $event;
    $72 = $chn;
    (_read_event($70,$71,$72)|0);
    $73 = $0;
    $74 = $1;
    $75 = $chn;
    $76 = $2;
    _med_hold_hack($73,$74,$75,$76);
   }
  } while(0);
  $77 = $chn;
  $78 = (($77) + 1)|0;
  $chn = $78;
 }
 STACKTOP = sp;return;
}
function _inject_event($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chn = 0, $e = 0, $m = 0, $mod = 0, $p = 0, $smix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $0;
 $6 = ((($5)) + 8120|0);
 $smix = $6;
 $chn = 0;
 while(1) {
  $7 = $chn;
  $8 = $mod;
  $9 = ((($8)) + 136|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $smix;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + ($12))|0;
  $14 = ($7|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $chn;
  $16 = $p;
  $17 = ((($16)) + 972|0);
  $18 = (($17) + ($15<<3)|0);
  $e = $18;
  $19 = $e;
  $20 = ((($19)) + 7|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = $0;
   $25 = $e;
   $26 = $chn;
   (_read_event($24,$25,$26)|0);
   $27 = $e;
   $28 = ((($27)) + 7|0);
   HEAP8[$28>>0] = 0;
  }
  $29 = $chn;
  $30 = (($29) + 1)|0;
  $chn = $30;
 }
 STACKTOP = sp;return;
}
function _play_channel($ctx,$chn,$t) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 var $$old = 0, $$old2 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $act = 0, $cond = 0, $m = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $smix = 0;
 var $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 8120|0);
 $smix = $5;
 $6 = $0;
 $7 = ((($6)) + 1552|0);
 $m = $7;
 $8 = $m;
 $mod = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 624|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*440)|0)|0);
 $xc = $13;
 $14 = $xc;
 $15 = ((($14)) + 428|0);
 HEAP32[$15>>2] = 0;
 $16 = $xc;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 2097152;
 $19 = ($18|0)!=(0);
 do {
  if ($19) {
   $20 = $p;
   $21 = ((($20)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $xc;
    $25 = ((($24)) + 372|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $p;
    $28 = ((($27)) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26))|0;
    HEAP32[$28>>2] = $30;
    $31 = $p;
    $32 = ((($31)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)<(32);
    $35 = $p;
    $36 = ((($35)) + 20|0);
    if ($34) {
     HEAP32[$36>>2] = 32;
     break;
    }
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)>(255);
    if ($38) {
     $39 = $p;
     $40 = ((($39)) + 20|0);
     HEAP32[$40>>2] = 255;
    }
   }
  }
 } while(0);
 $41 = $xc;
 $42 = ((($41)) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)>(0);
 if ($44) {
  $45 = $xc;
  $46 = ((($45)) + 64|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + -1)|0;
  HEAP32[$46>>2] = $48;
  $49 = ($48|0)==(0);
  if ($49) {
   $50 = $0;
   $51 = $xc;
   $52 = ((($51)) + 404|0);
   $53 = $1;
   (_read_event($50,$52,$53)|0);
  }
 }
 $54 = $0;
 $55 = $1;
 $56 = (_virt_cstat($54,$55)|0);
 $act = $56;
 $57 = $act;
 $58 = ($57|0)==(-1);
 if ($58) {
  $59 = $0;
  $60 = $1;
  $61 = $2;
  _update_volume($59,$60,$61);
  STACKTOP = sp;return;
 }
 $62 = $2;
 $63 = ($62|0)==(0);
 $64 = $act;
 $65 = ($64|0)!=(256);
 $or$cond = $63 & $65;
 do {
  if ($or$cond) {
   $66 = $xc;
   $67 = ((($66)) + 44|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $mod;
   $70 = ((($69)) + 140|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($68>>>0)<($71>>>0);
   if ($72) {
    $73 = $xc;
    $74 = ((($73)) + 44|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $mod;
    $77 = ((($76)) + 176|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + (($75*764)|0)|0);
    $80 = ((($79)) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)>(0);
    if ($82) {
     $$old = $act;
     $$old2 = ($$old|0)==(0);
     if (!($$old2)) {
      break;
     }
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
   if ((label|0) == 15) {
    $83 = $smix;
    $84 = ((($83)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)>(0);
    if ($86) {
     $87 = $xc;
     $88 = ((($87)) + 44|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $mod;
     $91 = ((($90)) + 140|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $smix;
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($92) + ($95))|0;
     $97 = ($89>>>0)>=($96>>>0);
     $98 = $act;
     $99 = ($98|0)==(0);
     $or$cond3 = $97 | $99;
     if (!($or$cond3)) {
      break;
     }
    }
   }
   $100 = $0;
   $101 = $1;
   _virt_resetchannel($100,$101);
   STACKTOP = sp;return;
  }
 } while(0);
 $102 = $xc;
 $103 = ((($102)) + 44|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $mod;
 $106 = ((($105)) + 140|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($104>>>0)<($107>>>0);
 if ($108) {
  $109 = $xc;
  $110 = ((($109)) + 44|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $mod;
  $113 = ((($112)) + 176|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + (($111*764)|0)|0);
  $116 = ((($115)) + 36|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($117|0)>(0);
  if (!($118)) {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $119 = $smix;
  $120 = ((($119)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($121|0)>(0);
  if (!($122)) {
   STACKTOP = sp;return;
  }
  $123 = $xc;
  $124 = ((($123)) + 44|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $mod;
  $127 = ((($126)) + 140|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $smix;
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($128) + ($131))|0;
  $133 = ($125>>>0)<($132>>>0);
  if (!($133)) {
   STACKTOP = sp;return;
  }
 }
 $134 = $0;
 $135 = $xc;
 $136 = $1;
 $137 = $2;
 _play_extras($134,$135,$136,$137);
 $138 = $xc;
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 262144;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = $m;
  $143 = ((($142)) + 1280|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 & 16777216;
  $146 = ($145|0)!=(0);
  $147 = $xc;
  $148 = ((($147)) + 212|0);
  $149 = ((($148)) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + -1)|0;
  HEAP32[$149>>2] = $151;
  $152 = ($151|0)<=(0);
  $153 = ($151|0)==(0);
  $$sink = $146 ? $152 : $153;
  $154 = $$sink&1;
  $cond = $154;
  $155 = $cond;
  $156 = ($155|0)!=(0);
  if ($156) {
   $157 = $xc;
   $158 = ((($157)) + 212|0);
   $159 = ((($158)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ($160|0)<(16);
   if ($161) {
    $162 = $0;
    $163 = $1;
    _virt_voicepos($162,$163,0);
   }
   $164 = $xc;
   $165 = ((($164)) + 212|0);
   $166 = ((($165)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (11912 + (($167*12)|0)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $xc;
   $171 = ((($170)) + 80|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + ($169))|0;
   HEAP32[$171>>2] = $173;
   $174 = $xc;
   $175 = ((($174)) + 212|0);
   $176 = ((($175)) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (11912 + (($177*12)|0)|0);
   $179 = ((($178)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $xc;
   $182 = ((($181)) + 80|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = Math_imul($183, $180)|0;
   HEAP32[$182>>2] = $184;
   $185 = $xc;
   $186 = ((($185)) + 212|0);
   $187 = ((($186)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = (11912 + (($188*12)|0)|0);
   $190 = ((($189)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $xc;
   $193 = ((($192)) + 80|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (($194|0) / ($191|0))&-1;
   HEAP32[$193>>2] = $195;
   $196 = $xc;
   $197 = ((($196)) + 212|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198 & 15;
   $200 = $xc;
   $201 = ((($200)) + 212|0);
   $202 = ((($201)) + 4|0);
   HEAP32[$202>>2] = $199;
  }
 }
 $203 = $0;
 $204 = $1;
 $205 = $2;
 $206 = $act;
 _process_volume($203,$204,$205,$206);
 $207 = $0;
 $208 = $1;
 $209 = $2;
 $210 = $act;
 _process_frequency($207,$208,$209,$210);
 $211 = $0;
 $212 = $1;
 $213 = $2;
 $214 = $act;
 _process_pan($211,$212,$213,$214);
 $215 = $0;
 $216 = $1;
 $217 = $2;
 _update_volume($215,$216,$217);
 $218 = $0;
 $219 = $1;
 $220 = $2;
 _update_frequency($218,$219,$220);
 $221 = $0;
 $222 = $1;
 $223 = $2;
 _update_pan($221,$222,$223);
 $224 = $xc;
 $225 = ((($224)) + 68|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)!=(0);
 if ($227) {
  $228 = $xc;
  $229 = ((($228)) + 68|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + -1)|0;
  HEAP32[$229>>2] = $231;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $xc;
   $234 = ((($233)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $235 | 2;
   HEAP32[$234>>2] = $236;
  }
 }
 $237 = $m;
 $238 = ((($237)) + 1280|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $239 & 4;
 $241 = ($240|0)!=(0);
 if ($241) {
  $242 = $m;
  $243 = $xc;
  _update_invloop($242,$243);
 }
 $244 = $0;
 $245 = $1;
 $246 = (_virt_getvoicepos($244,$245)|0);
 $247 = $xc;
 $248 = ((($247)) + 424|0);
 HEAP32[$248>>2] = $246;
 STACKTOP = sp;return;
}
function _update_volume($ctx,$chn,$t) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = $p;
 $8 = ((($7)) + 624|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($6*440)|0)|0);
 $xc = $10;
 $11 = $2;
 $12 = $p;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11|0) % ($14|0))&-1;
 $16 = ($15|0)!=(0);
 if ($16) {
  label = 3;
 } else {
  $17 = $m;
  $18 = ((($17)) + 1280|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 64;
  $21 = ($20|0)!=(0);
  if ($21) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $22 = $xc;
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 1048576;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $xc;
   $27 = ((($26)) + 260|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $p;
   $30 = ((($29)) + 320|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($28))|0;
   HEAP32[$30>>2] = $32;
  }
  $33 = $xc;
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 1;
  $36 = ($35|0)!=(0);
  if ($36) {
   label = 7;
  } else {
   $37 = $xc;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 & 1;
   $41 = ($40|0)!=(0);
   if ($41) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   $42 = $xc;
   $43 = ((($42)) + 236|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $xc;
   $46 = ((($45)) + 80|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44))|0;
   HEAP32[$46>>2] = $48;
  }
  $49 = $xc;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 & 1;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $xc;
   $55 = ((($54)) + 236|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)>(0);
   if ($57) {
    $58 = $xc;
    $59 = ((($58)) + 80|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $m;
    $62 = ((($61)) + 1268|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($60|0)>($63|0);
    if ($64) {
     $65 = $m;
     $66 = ((($65)) + 1268|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $xc;
     $69 = ((($68)) + 80|0);
     HEAP32[$69>>2] = $67;
     $70 = $xc;
     $71 = ((($70)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 & -2;
     HEAP32[$71>>2] = $73;
    }
   }
   $74 = $xc;
   $75 = ((($74)) + 236|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)<(0);
   if ($77) {
    $78 = $xc;
    $79 = ((($78)) + 80|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)<(0);
    if ($81) {
     $82 = $xc;
     $83 = ((($82)) + 80|0);
     HEAP32[$83>>2] = 0;
     $84 = $xc;
     $85 = ((($84)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $86 & -2;
     HEAP32[$85>>2] = $87;
    }
   }
  }
  $88 = $xc;
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 & 8192;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $xc;
   $93 = ((($92)) + 236|0);
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $xc;
   $97 = ((($96)) + 80|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95))|0;
   HEAP32[$97>>2] = $99;
  }
  $100 = $xc;
  $101 = HEAP32[$100>>2]|0;
  $102 = $101 & 512;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = $xc;
   $105 = ((($104)) + 272|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $xc;
   $108 = ((($107)) + 60|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + ($106))|0;
   HEAP32[$108>>2] = $110;
  }
 }
 $111 = $2;
 $112 = $p;
 $113 = ((($112)) + 16|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($111|0) % ($114|0))&-1;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = $xc;
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 & 64;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $xc;
   $122 = ((($121)) + 236|0);
   $123 = ((($122)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $xc;
   $126 = ((($125)) + 80|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124))|0;
   HEAP32[$126>>2] = $128;
  }
  $129 = $xc;
  $130 = HEAP32[$129>>2]|0;
  $131 = $130 & 1024;
  $132 = ($131|0)!=(0);
  if ($132) {
   $133 = $xc;
   $134 = ((($133)) + 272|0);
   $135 = ((($134)) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $xc;
   $138 = ((($137)) + 60|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + ($136))|0;
   HEAP32[$138>>2] = $140;
  }
  $141 = $xc;
  $142 = HEAP32[$141>>2]|0;
  $143 = $142 & 1048576;
  $144 = ($143|0)!=(0);
  if ($144) {
   $145 = $xc;
   $146 = ((($145)) + 260|0);
   $147 = ((($146)) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $p;
   $150 = ((($149)) + 320|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + ($148))|0;
   HEAP32[$150>>2] = $152;
  }
 }
 $153 = $xc;
 $154 = ((($153)) + 80|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)<(0);
 $157 = $xc;
 $158 = ((($157)) + 80|0);
 if ($156) {
  HEAP32[$158>>2] = 0;
 } else {
  $159 = HEAP32[$158>>2]|0;
  $160 = $m;
  $161 = ((($160)) + 1268|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($159|0)>($162|0);
  if ($163) {
   $164 = $m;
   $165 = ((($164)) + 1268|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $xc;
   $168 = ((($167)) + 80|0);
   HEAP32[$168>>2] = $166;
  }
 }
 $169 = $p;
 $170 = ((($169)) + 320|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)<(0);
 $173 = $p;
 $174 = ((($173)) + 320|0);
 if ($172) {
  HEAP32[$174>>2] = 0;
 } else {
  $175 = HEAP32[$174>>2]|0;
  $176 = $m;
  $177 = ((($176)) + 1272|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($175|0)>($178|0);
  if ($179) {
   $180 = $m;
   $181 = ((($180)) + 1272|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $p;
   $184 = ((($183)) + 320|0);
   HEAP32[$184>>2] = $182;
  }
 }
 $185 = $xc;
 $186 = ((($185)) + 60|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)<(0);
 $189 = $xc;
 $190 = ((($189)) + 60|0);
 if ($188) {
  HEAP32[$190>>2] = 0;
  STACKTOP = sp;return;
 }
 $191 = HEAP32[$190>>2]|0;
 $192 = $m;
 $193 = ((($192)) + 1268|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ($191|0)>($194|0);
 if (!($195)) {
  STACKTOP = sp;return;
 }
 $196 = $m;
 $197 = ((($196)) + 1268|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = $xc;
 $200 = ((($199)) + 60|0);
 HEAP32[$200>>2] = $198;
 STACKTOP = sp;return;
}
function _process_volume($ctx,$chn,$t,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $end = 0, $finalvol = 0, $gvol = 0, $instrument = 0, $m = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $vol_envelope = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end = sp;
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $act;
 $4 = $0;
 $p = $4;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $1;
 $8 = $p;
 $9 = ((($8)) + 624|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($7*440)|0)|0);
 $xc = $11;
 $12 = $0;
 $13 = $xc;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_get_instrument($12,$15)|0);
 $instrument = $16;
 $17 = $m;
 $18 = ((($17)) + 1280|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 262144;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $22 = $xc;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 2;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $instrument;
   $28 = ((($27)) + 44|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 & 1;
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $32 = $xc;
    $33 = ((($32)) + 72|0);
    HEAP32[$33>>2] = 0;
   }
  }
 }
 $34 = $xc;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 3;
 $38 = ($37|0)!=(0);
 $39 = $3;
 $40 = ($39|0)==(3);
 $or$cond = $38 | $40;
 $41 = $3;
 $42 = ($41|0)==(2);
 $or$cond3 = $or$cond | $42;
 do {
  if ($or$cond3) {
   $43 = $xc;
   $44 = ((($43)) + 72|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $instrument;
   $47 = ((($46)) + 40|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)>($48|0);
   if ($49) {
    $50 = $instrument;
    $51 = ((($50)) + 40|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $xc;
    $54 = ((($53)) + 72|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) - ($52))|0;
    HEAP32[$54>>2] = $56;
    break;
   } else {
    $57 = $xc;
    $58 = ((($57)) + 72|0);
    HEAP32[$58>>2] = 0;
    $59 = $xc;
    $60 = ((($59)) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $61 | 4;
    HEAP32[$60>>2] = $62;
    break;
   }
  }
 } while(0);
 $63 = $instrument;
 $64 = ((($63)) + 44|0);
 $65 = $xc;
 $66 = ((($65)) + 96|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67&65535;
 $69 = (_check_envelope_fade($64,$68)|0);
 if ((($69|0) == -1)) {
  $70 = $xc;
  $71 = ((($70)) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 | 4;
  HEAP32[$71>>2] = $73;
 } else if (!((($69|0) == 0))) {
  $74 = $m;
  $75 = ((($74)) + 1280|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 & 2;
  $78 = ($77|0)!=(0);
  if ($78) {
   $79 = $xc;
   $80 = ((($79)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 | 1;
   HEAP32[$80>>2] = $82;
  }
 }
 $83 = $instrument;
 $84 = ((($83)) + 44|0);
 $85 = $xc;
 $86 = ((($85)) + 96|0);
 $87 = HEAP16[$86>>1]|0;
 $88 = $87&65535;
 $89 = (_get_envelope($84,$88,64,$end)|0);
 $90 = $89&65535;
 $vol_envelope = $90;
 $91 = $instrument;
 $92 = ((($91)) + 44|0);
 $93 = $xc;
 $94 = ((($93)) + 96|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = $95&65535;
 $97 = $xc;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & 2;
 $101 = ($100|0)!=(0);
 $102 = $3;
 $103 = ($102|0)==(2);
 $104 = $101 ? 1 : $103;
 $105 = $104&1;
 $106 = $m;
 $107 = ((($106)) + 1280|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 & 134217728;
 $110 = (_update_envelope($92,$96,$105,$109)|0);
 $111 = $110&65535;
 $112 = $xc;
 $113 = ((($112)) + 96|0);
 HEAP16[$113>>1] = $111;
 $114 = HEAP32[$end>>2]|0;
 $115 = ($114|0)!=(0);
 if ($115) {
  $116 = $vol_envelope;
  $117 = $116&65535;
  $118 = ($117|0)==(0);
  if ($118) {
   $119 = $xc;
   $120 = ((($119)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 | 4;
   HEAP32[$120>>2] = $122;
  }
  $123 = $xc;
  $124 = ((($123)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 | 16;
  HEAP32[$124>>2] = $126;
 }
 $127 = $xc;
 $128 = ((($127)) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 & 4;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $1;
  $133 = $p;
  $134 = ((($133)) + 948|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132|0)>=($135|0);
  if ($136) {
   $137 = $0;
   $138 = $1;
   _virt_resetchannel($137,$138);
   STACKTOP = sp;return;
  }
 }
 $139 = $0;
 $140 = $xc;
 $141 = (_extras_get_volume($139,$140)|0);
 $finalvol = $141;
 $142 = $xc;
 $143 = HEAP32[$142>>2]|0;
 $144 = $143 & 32;
 $145 = ($144|0)!=(0);
 if ($145) {
  $146 = $xc;
  $147 = ((($146)) + 124|0);
  $148 = (_get_lfo($147,64)|0);
  $149 = $finalvol;
  $150 = (($149) + ($148))|0;
  $finalvol = $150;
  $151 = $xc;
  $152 = ((($151)) + 124|0);
  _update_lfo($152);
 }
 $153 = $finalvol;
 $154 = ($153|0)<(0);
 if ($154) {
  $finalvol = 0;
 } else {
  $155 = $finalvol;
  $156 = $m;
  $157 = ((($156)) + 1268|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($155|0)>($158|0);
  if ($159) {
   $160 = $m;
   $161 = ((($160)) + 1268|0);
   $162 = HEAP32[$161>>2]|0;
   $finalvol = $162;
  }
 }
 $163 = $finalvol;
 $164 = $xc;
 $165 = ((($164)) + 72|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = Math_imul($163, $166)|0;
 $168 = $167 >> 6;
 $finalvol = $168;
 $169 = $m;
 $170 = ((($169)) + 1280|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $171 & 16;
 $173 = ($172|0)!=(0);
 if ($173) {
  $gvol = 64;
 } else {
  $174 = $p;
  $175 = ((($174)) + 320|0);
  $176 = HEAP32[$175>>2]|0;
  $gvol = $176;
 }
 $177 = $vol_envelope;
 $178 = $177&65535;
 $179 = $gvol;
 $180 = Math_imul($178, $179)|0;
 $181 = $xc;
 $182 = ((($181)) + 60|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = Math_imul($180, $183)|0;
 $185 = $m;
 $186 = ((($185)) + 1272|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = (($184|0) / ($187|0))&-1;
 $189 = $finalvol;
 $190 = $189<<6;
 $191 = $m;
 $192 = ((($191)) + 1268|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($190|0) / ($193|0))&-1;
 $195 = Math_imul($188, $194)|0;
 $196 = $195 >>> 18;
 $finalvol = $196;
 $197 = $finalvol;
 $198 = $0;
 $199 = $1;
 $200 = (_get_channel_vol($198,$199)|0);
 $201 = Math_imul($197, $200)|0;
 $202 = (($201|0) / 100)&-1;
 $finalvol = $202;
 $203 = $m;
 $204 = ((($203)) + 1276|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)!=(0|0);
 if ($206) {
  $207 = $m;
  $208 = ((($207)) + 1268|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)==(255);
  $211 = $finalvol;
  if ($210) {
   $212 = $211 >> 2;
   $213 = $m;
   $214 = ((($213)) + 1276|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + ($212<<2)|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = $217 << 2;
   $226 = $218;
  } else {
   $219 = $211 >> 4;
   $220 = $m;
   $221 = ((($220)) + 1276|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($219<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $224 << 4;
   $226 = $225;
  }
  $finalvol = $226;
 }
 $227 = $m;
 $228 = ((($227)) + 1280|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = $229 & 16384;
 $231 = ($230|0)!=(0);
 if ($231) {
  $232 = $finalvol;
  $233 = $instrument;
  $234 = ((($233)) + 32|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = Math_imul($232, $235)|0;
  $237 = $xc;
  $238 = ((($237)) + 84|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = Math_imul($236, $239)|0;
  $241 = $240 >> 12;
  $finalvol = $241;
 }
 $242 = $xc;
 $243 = ((($242)) + 224|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ($244|0)!=(0);
 if ($245) {
  $246 = $xc;
  $247 = ((($246)) + 224|0);
  $248 = ((($247)) + 4|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ($249|0)==(0);
  $251 = $xc;
  $252 = ((($251)) + 224|0);
  if ($250) {
   $253 = HEAP32[$252>>2]|0;
   $254 = $253 & 240;
   $255 = $254 >> 4;
   $256 = $255 | 128;
   $257 = $xc;
   $258 = ((($257)) + 224|0);
   $259 = ((($258)) + 4|0);
   HEAP32[$259>>2] = $256;
  } else {
   $260 = ((($252)) + 4|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = ($261|0)==(128);
   if ($262) {
    $263 = $xc;
    $264 = ((($263)) + 224|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $265 & 15;
    $267 = $xc;
    $268 = ((($267)) + 224|0);
    $269 = ((($268)) + 4|0);
    HEAP32[$269>>2] = $266;
   }
  }
  $270 = $xc;
  $271 = ((($270)) + 224|0);
  $272 = ((($271)) + 4|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($273) + -1)|0;
  HEAP32[$272>>2] = $274;
  $275 = $xc;
  $276 = ((($275)) + 224|0);
  $277 = ((($276)) + 4|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $278 ^ -1;
  $280 = $279 & 128;
  $281 = ($280|0)!=(0);
  if ($281) {
   $finalvol = 0;
  }
 }
 $282 = $1;
 $283 = $m;
 $284 = ((($283)) + 136|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = ($282|0)<($285|0);
 $287 = $finalvol;
 $288 = $p;
 if ($286) {
  $289 = ((($288)) + 316|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = Math_imul($287, $290)|0;
  $292 = (($291|0) / 100)&-1;
  $finalvol = $292;
 } else {
  $293 = ((($288)) + 312|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = Math_imul($287, $294)|0;
  $296 = (($295|0) / 100)&-1;
  $finalvol = $296;
 }
 $297 = $finalvol;
 $298 = $xc;
 $299 = ((($298)) + 428|0);
 HEAP32[$299>>2] = $297;
 $300 = $0;
 $301 = $1;
 $302 = $finalvol;
 _virt_setvol($300,$301,$302);
 STACKTOP = sp;return;
}
function _process_frequency($ctx,$chn,$t,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $arp = 0, $b0 = 0, $b1 = 0, $cutoff = 0, $end = 0, $frq_envelope = 0;
 var $instrument = 0, $linear_bend = 0, $m = 0, $p = 0, $period = 0.0, $resonance = 0, $s = 0, $shift = 0, $vib = 0, $vibrato = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end = sp + 28|0;
 $a0 = sp + 16|0;
 $b0 = sp + 12|0;
 $b1 = sp + 8|0;
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $act;
 $4 = $0;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $0;
 $p = $6;
 $7 = $0;
 $8 = ((($7)) + 1552|0);
 $m = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 624|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*440)|0)|0);
 $xc = $13;
 $14 = $0;
 $15 = $xc;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_get_instrument($14,$17)|0);
 $instrument = $18;
 $19 = $instrument;
 $20 = ((($19)) + 356|0);
 $21 = $xc;
 $22 = ((($21)) + 100|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (_get_envelope($20,$24,0,$end)|0);
 $frq_envelope = $25;
 $26 = $instrument;
 $27 = ((($26)) + 356|0);
 $28 = $xc;
 $29 = ((($28)) + 100|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = $xc;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 2;
 $36 = ($35|0)!=(0);
 $37 = $3;
 $38 = ($37|0)==(2);
 $39 = $36 ? 1 : $38;
 $40 = $39&1;
 $41 = $m;
 $42 = ((($41)) + 1280|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 134217728;
 $45 = (_update_envelope($27,$31,$40,$44)|0);
 $46 = $45&65535;
 $47 = $xc;
 $48 = ((($47)) + 100|0);
 HEAP16[$48>>1] = $46;
 $49 = $xc;
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & 16384;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $xc;
  $54 = ((($53)) + 384|0);
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $xc;
   $59 = ((($58)) + 384|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $xc;
   $62 = ((($61)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + ($60))|0;
   HEAP32[$62>>2] = $64;
   $65 = $xc;
   $66 = ((($65)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $xc;
   $69 = ((($68)) + 40|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $m;
   $72 = ((($71)) + 1280|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 & 4096;
   $75 = $xc;
   $76 = ((($75)) + 32|0);
   $77 = +HEAPF64[$76>>3];
   $78 = (+_note_to_period($67,$70,$74,$77));
   $79 = $xc;
   $80 = ((($79)) + 24|0);
   HEAPF64[$80>>3] = $78;
   $81 = $xc;
   $82 = ((($81)) + 384|0);
   $83 = ((($82)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $xc;
   $86 = ((($85)) + 384|0);
   $87 = ((($86)) + 12|0);
   HEAP32[$87>>2] = $84;
  }
  $88 = $xc;
  $89 = ((($88)) + 384|0);
  $90 = ((($89)) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + -1)|0;
  HEAP32[$90>>2] = $92;
 }
 $93 = $xc;
 $94 = ((($93)) + 192|0);
 $95 = $xc;
 $96 = ((($95)) + 192|0);
 $97 = ((($96)) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (1 + ($98))|0;
 $100 = $99<<10;
 $101 = (_get_lfo($94,$100)|0);
 $vibrato = $101;
 $102 = $xc;
 $103 = ((($102)) + 192|0);
 _update_lfo($103);
 $104 = $xc;
 $105 = ((($104)) + 192|0);
 $106 = ((($105)) + 16|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)>(1);
 $109 = $xc;
 $110 = ((($109)) + 192|0);
 $111 = ((($110)) + 16|0);
 if ($108) {
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) - 2)|0;
  HEAP32[$111>>2] = $113;
 } else {
  HEAP32[$111>>2] = 0;
 }
 $114 = $xc;
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 16;
 $117 = ($116|0)!=(0);
 if ($117) {
  label = 10;
 } else {
  $118 = $xc;
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 & 16;
  $122 = ($121|0)!=(0);
  if ($122) {
   label = 10;
  }
 }
 do {
  if ((label|0) == 10) {
   $123 = $m;
   $124 = ((($123)) + 1280|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $125 & 524288;
   $127 = ($126|0)!=(0);
   $128 = $127 ? 10 : 9;
   $shift = $128;
   $129 = $xc;
   $130 = ((($129)) + 104|0);
   $131 = $shift;
   $132 = 1 << $131;
   $133 = (_get_lfo($130,$132)|0);
   $vib = $133;
   $134 = $m;
   $135 = ((($134)) + 1280|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & 2097152;
   $138 = ($137|0)!=(0);
   $139 = $vib;
   $140 = $vibrato;
   if ($138) {
    $141 = (($140) - ($139))|0;
    $vibrato = $141;
   } else {
    $142 = (($140) + ($139))|0;
    $vibrato = $142;
   }
   $143 = $2;
   $144 = $p;
   $145 = ((($144)) + 16|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($143|0) % ($146|0))&-1;
   $148 = ($147|0)!=(0);
   if (!($148)) {
    $149 = $m;
    $150 = ((($149)) + 1280|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151 & 1048576;
    $153 = ($152|0)!=(0);
    if (!($153)) {
     break;
    }
   }
   $154 = $xc;
   $155 = ((($154)) + 104|0);
   _update_lfo($155);
  }
 } while(0);
 $156 = $xc;
 $157 = ((($156)) + 24|0);
 $158 = +HEAPF64[$157>>3];
 $period = $158;
 $159 = $0;
 $160 = $xc;
 $161 = (_extras_get_period($159,$160)|0);
 $162 = (+($161|0));
 $163 = $period;
 $164 = $163 + $162;
 $period = $164;
 $165 = $period;
 $166 = $vibrato;
 $167 = (+($166|0));
 $168 = $165 + $167;
 $169 = $xc;
 $170 = ((($169)) + 12|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $xc;
 $173 = ((($172)) + 76|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = $m;
 $176 = ((($175)) + 1280|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = $177 & 4096;
 $179 = $xc;
 $180 = ((($179)) + 32|0);
 $181 = +HEAPF64[$180>>3];
 $182 = (_period_to_bend($168,$171,$174,$178,$181)|0);
 $linear_bend = $182;
 $183 = $instrument;
 $184 = ((($183)) + 356|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $185 ^ -1;
 $187 = $186 & 8;
 $188 = ($187|0)!=(0);
 if ($188) {
  $189 = $frq_envelope;
  $190 = $189 << 7;
  $191 = $linear_bend;
  $192 = (($191) + ($190))|0;
  $linear_bend = $192;
 }
 $193 = $xc;
 $194 = ((($193)) + 164|0);
 $195 = ((($194)) + 20|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $xc;
 $198 = ((($197)) + 164|0);
 $199 = (($198) + ($196)|0);
 $200 = HEAP8[$199>>0]|0;
 $201 = $200 << 24 >> 24;
 $arp = $201;
 $202 = $arp;
 $203 = ($202|0)!=(0);
 if ($203) {
  $204 = $arp;
  $205 = ($204*12800)|0;
  $206 = $linear_bend;
  $207 = (($206) + ($205))|0;
  $linear_bend = $207;
 }
 $208 = $0;
 $209 = $xc;
 $210 = (_extras_get_linear_bend($208,$209)|0);
 $211 = $linear_bend;
 $212 = (($211) + ($210))|0;
 $linear_bend = $212;
 $213 = $linear_bend;
 $214 = $213 >> 7;
 $215 = $xc;
 $216 = ((($215)) + 420|0);
 HEAP32[$216>>2] = $214;
 $217 = $xc;
 $218 = ((($217)) + 12|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = $linear_bend;
 $221 = (_note_to_period_mix($219,$220)|0);
 $222 = $xc;
 $223 = ((($222)) + 416|0);
 HEAP32[$223>>2] = $221;
 $224 = $m;
 $225 = ((($224)) + 1280|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = $226 & 8192;
 $228 = ($227|0)!=(0);
 $229 = $xc;
 $230 = ((($229)) + 416|0);
 $231 = HEAP32[$230>>2]|0;
 do {
  if ($228) {
   $232 = (+($231|0));
   $233 = $xc;
   $234 = ((($233)) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (+_note_to_period(83,$235,0,0.0));
   $237 = $236 * 4096.0;
   $238 = $232 < $237;
   $239 = $xc;
   if ($238) {
    $240 = ((($239)) + 40|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (+_note_to_period(83,$241,0,0.0));
    $243 = $242 * 4096.0;
    $244 = (~~(($243)));
    $245 = $xc;
    $246 = ((($245)) + 416|0);
    HEAP32[$246>>2] = $244;
    break;
   }
   $247 = ((($239)) + 416|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (+($248|0));
   $250 = $xc;
   $251 = ((($250)) + 40|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (+_note_to_period(48,$252,0,0.0));
   $254 = $253 * 4096.0;
   $255 = $249 > $254;
   if ($255) {
    $256 = $xc;
    $257 = ((($256)) + 40|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = (+_note_to_period(48,$258,0,0.0));
    $260 = $259 * 4096.0;
    $261 = (~~(($260)));
    $262 = $xc;
    $263 = ((($262)) + 416|0);
    HEAP32[$263>>2] = $261;
   }
  } else {
   $264 = ($231|0)<(4096);
   if ($264) {
    $265 = $xc;
    $266 = ((($265)) + 416|0);
    HEAP32[$266>>2] = 4096;
   }
  }
 } while(0);
 $267 = $0;
 $268 = $1;
 $269 = $linear_bend;
 _virt_setbend($267,$268,$269);
 $270 = $m;
 $271 = ((($270)) + 1280|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = $272 & 65536;
 $274 = ($273|0)!=(0);
 if (!($274)) {
  STACKTOP = sp;return;
 }
 $275 = $instrument;
 $276 = ((($275)) + 356|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & 8;
 $279 = ($278|0)!=(0);
 $280 = $xc;
 $281 = ((($280)) + 376|0);
 $282 = HEAP32[$281>>2]|0;
 if ($279) {
  $283 = $frq_envelope;
  $284 = Math_imul($282, $283)|0;
  $285 = $284 >> 8;
  $cutoff = $285;
 } else {
  $cutoff = $282;
 }
 $286 = $xc;
 $287 = ((($286)) + 376|0);
 $288 = ((($287)) + 4|0);
 $289 = HEAP32[$288>>2]|0;
 $resonance = $289;
 $290 = $cutoff;
 $291 = ($290|0)>(255);
 if ($291) {
  $cutoff = 255;
 } else {
  $292 = $cutoff;
  $293 = ($292|0)<(255);
  if ($293) {
   $294 = $s;
   $295 = HEAP32[$294>>2]|0;
   $296 = $cutoff;
   $297 = $resonance;
   _filter_setup($295,$296,$297,$a0,$b0,$b1);
   $298 = $0;
   $299 = $1;
   $300 = HEAP32[$a0>>2]|0;
   _virt_seteffect($298,$299,176,$300);
   $301 = $0;
   $302 = $1;
   $303 = HEAP32[$b0>>2]|0;
   _virt_seteffect($301,$302,177,$303);
   $304 = $0;
   $305 = $1;
   $306 = HEAP32[$b1>>2]|0;
   _virt_seteffect($304,$305,178,$306);
   $307 = $0;
   $308 = $1;
   $309 = $resonance;
   _virt_seteffect($307,$308,3,$309);
  }
 }
 $310 = $0;
 $311 = $1;
 $312 = $cutoff;
 _virt_seteffect($310,$311,2,$312);
 STACKTOP = sp;return;
}
function _process_pan($ctx,$chn,$t,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $end = 0, $finalpan = 0, $instrument = 0;
 var $m = 0, $p = 0, $pan_envelope = 0, $panbrello = 0, $s = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end = sp;
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $act;
 $4 = $0;
 $p = $4;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $0;
 $8 = ((($7)) + 1496|0);
 $s = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 624|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*440)|0)|0);
 $xc = $13;
 $panbrello = 0;
 $14 = $0;
 $15 = $xc;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_get_instrument($14,$17)|0);
 $instrument = $18;
 $19 = $instrument;
 $20 = ((($19)) + 200|0);
 $21 = $xc;
 $22 = ((($21)) + 98|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = (_get_envelope($20,$24,32,$end)|0);
 $pan_envelope = $25;
 $26 = $instrument;
 $27 = ((($26)) + 200|0);
 $28 = $xc;
 $29 = ((($28)) + 98|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = $xc;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 2;
 $36 = ($35|0)!=(0);
 $37 = $3;
 $38 = ($37|0)==(2);
 $39 = $36 ? 1 : $38;
 $40 = $39&1;
 $41 = $m;
 $42 = ((($41)) + 1280|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 134217728;
 $45 = (_update_envelope($27,$31,$40,$44)|0);
 $46 = $45&65535;
 $47 = $xc;
 $48 = ((($47)) + 98|0);
 HEAP16[$48>>1] = $46;
 $49 = $xc;
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 & 524288;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $xc;
  $54 = ((($53)) + 144|0);
  $55 = (_get_lfo($54,512)|0);
  $panbrello = $55;
  $56 = $xc;
  $57 = ((($56)) + 144|0);
  _update_lfo($57);
 }
 $58 = $xc;
 $59 = ((($58)) + 344|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $panbrello;
 $62 = (($60) + ($61))|0;
 $63 = $pan_envelope;
 $64 = (($63) - 32)|0;
 $65 = $xc;
 $66 = ((($65)) + 344|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) - 128)|0;
 $69 = (Math_abs(($68|0))|0);
 $70 = (128 - ($69))|0;
 $71 = Math_imul($64, $70)|0;
 $72 = (($71|0) / 32)&-1;
 $73 = (($62) + ($72))|0;
 $finalpan = $73;
 $74 = $s;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & 4;
 $78 = ($77|0)!=(0);
 if ($78) {
  $finalpan = 0;
 } else {
  $79 = $finalpan;
  $80 = (($79) - 128)|0;
  $81 = $s;
  $82 = ((($81)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = Math_imul($80, $83)|0;
  $85 = (($84|0) / 100)&-1;
  $finalpan = $85;
 }
 $86 = $finalpan;
 $87 = ($86|0)<(-128);
 if ($87) {
  $finalpan = -128;
  $90 = $finalpan;
  $91 = (($90) + 128)|0;
  $92 = $xc;
  $93 = ((($92)) + 432|0);
  HEAP32[$93>>2] = $91;
  $94 = $0;
  $95 = $1;
  $96 = $finalpan;
  _virt_setpan($94,$95,$96);
  STACKTOP = sp;return;
 }
 $88 = $finalpan;
 $89 = ($88|0)>(127);
 if (!($89)) {
  $90 = $finalpan;
  $91 = (($90) + 128)|0;
  $92 = $xc;
  $93 = ((($92)) + 432|0);
  HEAP32[$93>>2] = $91;
  $94 = $0;
  $95 = $1;
  $96 = $finalpan;
  _virt_setpan($94,$95,$96);
  STACKTOP = sp;return;
 }
 $finalpan = 127;
 $90 = $finalpan;
 $91 = (($90) + 128)|0;
 $92 = $xc;
 $93 = ((($92)) + 432|0);
 HEAP32[$93>>2] = $91;
 $94 = $0;
 $95 = $1;
 $96 = $finalpan;
 _virt_setpan($94,$95,$96);
 STACKTOP = sp;return;
}
function _update_frequency($ctx,$chn,$t) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = $p;
 $8 = ((($7)) + 624|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($6*440)|0)|0);
 $xc = $10;
 $11 = $2;
 $12 = $p;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11|0) % ($14|0))&-1;
 $16 = ($15|0)!=(0);
 if ($16) {
  label = 3;
 } else {
  $17 = $m;
  $18 = ((($17)) + 1280|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 128;
  $21 = ($20|0)!=(0);
  if ($21) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $22 = $xc;
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 & 8;
   $25 = ($24|0)!=(0);
   if ($25) {
    label = 5;
   } else {
    $26 = $xc;
    $27 = ((($26)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $28 & 8;
    $30 = ($29|0)!=(0);
    if ($30) {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    $31 = $xc;
    $32 = ((($31)) + 288|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (+($33|0));
    $35 = $xc;
    $36 = ((($35)) + 24|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $37 + $34;
    HEAPF64[$36>>3] = $38;
   }
   $39 = $xc;
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 4;
   $42 = ($41|0)!=(0);
   if (!($42)) {
    $43 = $xc;
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $45 & 4;
    $47 = ($46|0)!=(0);
    if (!($47)) {
     break;
    }
   }
   $end = 0;
   $48 = $xc;
   $49 = ((($48)) + 312|0);
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)>(0);
   $53 = $xc;
   $54 = ((($53)) + 312|0);
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (+($56|0));
   $58 = $xc;
   $59 = ((($58)) + 24|0);
   $60 = +HEAPF64[$59>>3];
   if ($52) {
    $61 = $60 + $57;
    HEAPF64[$59>>3] = $61;
    $62 = $xc;
    $63 = ((($62)) + 24|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $xc;
    $66 = ((($65)) + 312|0);
    $67 = +HEAPF64[$66>>3];
    $68 = $64 >= $67;
    if ($68) {
     $end = 1;
    }
   } else {
    $69 = $60 - $57;
    HEAPF64[$59>>3] = $69;
    $70 = $xc;
    $71 = ((($70)) + 24|0);
    $72 = +HEAPF64[$71>>3];
    $73 = $xc;
    $74 = ((($73)) + 312|0);
    $75 = +HEAPF64[$74>>3];
    $76 = $72 <= $75;
    if ($76) {
     $end = 1;
    }
   }
   $77 = $end;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = $xc;
    $80 = ((($79)) + 312|0);
    $81 = +HEAPF64[$80>>3];
    $82 = $xc;
    $83 = ((($82)) + 24|0);
    HEAPF64[$83>>3] = $81;
    $84 = $xc;
    $85 = ((($84)) + 312|0);
    $86 = ((($85)) + 8|0);
    HEAP32[$86>>2] = 0;
    $87 = $xc;
    $88 = HEAP32[$87>>2]|0;
    $89 = $88 & -5;
    HEAP32[$87>>2] = $89;
    $90 = $xc;
    $91 = ((($90)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $92 & -5;
    HEAP32[$91>>2] = $93;
   }
  }
 } while(0);
 $94 = $2;
 $95 = $p;
 $96 = ((($95)) + 16|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($94|0) % ($97|0))&-1;
 $99 = ($98|0)==(0);
 if ($99) {
  $100 = $xc;
  $101 = HEAP32[$100>>2]|0;
  $102 = $101 & 128;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = $xc;
   $105 = ((($104)) + 288|0);
   $106 = ((($105)) + 8|0);
   $107 = +HEAPF64[$106>>3];
   $108 = $xc;
   $109 = ((($108)) + 24|0);
   $110 = +HEAPF64[$109>>3];
   $111 = $110 + $107;
   HEAPF64[$109>>3] = $111;
  }
  $112 = $xc;
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 & 32768;
  $115 = ($114|0)!=(0);
  if ($115) {
   $116 = $xc;
   $117 = ((($116)) + 384|0);
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $xc;
   $121 = ((($120)) + 12|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + ($119))|0;
   HEAP32[$121>>2] = $123;
   $124 = $xc;
   $125 = ((($124)) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $xc;
   $128 = ((($127)) + 40|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $m;
   $131 = ((($130)) + 1280|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $132 & 4096;
   $134 = $xc;
   $135 = ((($134)) + 32|0);
   $136 = +HEAPF64[$135>>3];
   $137 = (+_note_to_period($126,$129,$133,$136));
   $138 = $xc;
   $139 = ((($138)) + 24|0);
   HEAPF64[$139>>3] = $137;
  }
 }
 $140 = $m;
 $141 = ((($140)) + 1280|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $142 & 4096;
 $144 = ($143|0)!=(0);
 do {
  if ($144) {
   $145 = $xc;
   $146 = ((($145)) + 24|0);
   $147 = +HEAPF64[$146>>3];
   $148 = $147 < 0.0;
   $149 = $xc;
   $150 = ((($149)) + 24|0);
   if ($148) {
    HEAPF64[$150>>3] = 0.0;
    break;
   }
   $151 = +HEAPF64[$150>>3];
   $152 = $151 > 7680.0;
   if ($152) {
    $153 = $xc;
    $154 = ((($153)) + 24|0);
    HEAPF64[$154>>3] = 7680.0;
   }
  } else {
   $155 = $m;
   $156 = ((($155)) + 1280|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $157 & 8192;
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $xc;
    $161 = ((($160)) + 24|0);
    $162 = +HEAPF64[$161>>3];
    $163 = $xc;
    $164 = ((($163)) + 40|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (+_note_to_period(83,$165,0,0.0));
    $167 = $162 < $166;
    $168 = $xc;
    if ($167) {
     $169 = ((($168)) + 40|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = (+_note_to_period(83,$170,0,0.0));
     $172 = $xc;
     $173 = ((($172)) + 24|0);
     HEAPF64[$173>>3] = $171;
     break;
    }
    $174 = ((($168)) + 24|0);
    $175 = +HEAPF64[$174>>3];
    $176 = $xc;
    $177 = ((($176)) + 40|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = (+_note_to_period(48,$178,0,0.0));
    $180 = $175 > $179;
    if ($180) {
     $181 = $xc;
     $182 = ((($181)) + 40|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (+_note_to_period(48,$183,0,0.0));
     $185 = $xc;
     $186 = ((($185)) + 24|0);
     HEAPF64[$186>>3] = $184;
    }
   }
  }
 } while(0);
 $187 = $xc;
 $188 = ((($187)) + 24|0);
 $189 = +HEAPF64[$188>>3];
 $190 = $189 < 1.0;
 if (!($190)) {
  $193 = $xc;
  $194 = ((($193)) + 164|0);
  $195 = ((($194)) + 20|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($196) + 1)|0;
  HEAP32[$195>>2] = $197;
  $198 = $xc;
  $199 = ((($198)) + 164|0);
  $200 = ((($199)) + 16|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $xc;
  $203 = ((($202)) + 164|0);
  $204 = ((($203)) + 20|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($205|0) % ($201|0))&-1;
  HEAP32[$204>>2] = $206;
  STACKTOP = sp;return;
 }
 $191 = $xc;
 $192 = ((($191)) + 80|0);
 HEAP32[$192>>2] = 0;
 $193 = $xc;
 $194 = ((($193)) + 164|0);
 $195 = ((($194)) + 20|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (($196) + 1)|0;
 HEAP32[$195>>2] = $197;
 $198 = $xc;
 $199 = ((($198)) + 164|0);
 $200 = ((($199)) + 16|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $xc;
 $203 = ((($202)) + 164|0);
 $204 = ((($203)) + 20|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = (($205|0) % ($201|0))&-1;
 HEAP32[$204>>2] = $206;
 STACKTOP = sp;return;
}
function _update_pan($ctx,$chn,$t) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $t;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 624|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*440)|0)|0);
 $xc = $8;
 $9 = $xc;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $p;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13|0) % ($16|0))&-1;
 $18 = ($17|0)==(0);
 $19 = $xc;
 $20 = ((($19)) + 344|0);
 if ($18) {
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $xc;
  $24 = ((($23)) + 344|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22))|0;
  HEAP32[$24>>2] = $26;
 } else {
  $27 = ((($20)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $xc;
  $30 = ((($29)) + 344|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28))|0;
  HEAP32[$30>>2] = $32;
 }
 $33 = $xc;
 $34 = ((($33)) + 344|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)<(0);
 $37 = $xc;
 $38 = ((($37)) + 344|0);
 if ($36) {
  HEAP32[$38>>2] = 0;
  STACKTOP = sp;return;
 }
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>(255);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = $xc;
 $42 = ((($41)) + 344|0);
 HEAP32[$42>>2] = 255;
 STACKTOP = sp;return;
}
function _update_invloop($m,$xc) {
 $m = $m|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $len = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 180|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*52)|0)|0);
 $xxs = $8;
 $9 = $1;
 $10 = ((($9)) + 360|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (12120 + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 360|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($13))|0;
 HEAP32[$16>>2] = $18;
 $19 = $xxs;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 2;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $1;
 $25 = ((($24)) + 360|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>=(128);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 360|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = $xxs;
 $33 = ((($32)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $xxs;
 $36 = ((($35)) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($34) - ($37))|0;
 $len = $38;
 $39 = $0;
 $40 = ((($39)) + 1280|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 8;
 $43 = ($42|0)!=(0);
 if ($43) {
  STACKTOP = sp;return;
 }
 $44 = $1;
 $45 = ((($44)) + 360|0);
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 1)|0;
 HEAP32[$46>>2] = $48;
 $49 = $len;
 $50 = ($48|0)>($49|0);
 if ($50) {
  $51 = $1;
  $52 = ((($51)) + 360|0);
  $53 = ((($52)) + 8|0);
  HEAP32[$53>>2] = 0;
 }
 $54 = $xxs;
 $55 = ((($54)) + 44|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 ^ -1;
 $58 = $57 & 1;
 $59 = ($58|0)!=(0);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 $60 = $xxs;
 $61 = ((($60)) + 36|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = ((($63)) + 360|0);
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($62) + ($66))|0;
 $68 = $xxs;
 $69 = ((($68)) + 48|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($67)|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 ^ 255;
 $75 = $74&255;
 HEAP8[$71>>0] = $75;
 STACKTOP = sp;return;
}
function _get_channel_vol($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $root = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 $9 = $2;
 $10 = $p;
 do {
  if ($8) {
   $11 = ((($10)) + 628|0);
   $12 = (($11) + ($9<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
  } else {
   $14 = ((($10)) + 948|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($9|0)>=($16|0);
   if ($17) {
    $0 = 0;
    break;
   }
   $18 = $1;
   $19 = $2;
   $20 = (_virt_getroot($18,$19)|0);
   $root = $20;
   $21 = $root;
   $22 = ($21|0)<(0);
   if ($22) {
    $0 = 0;
    break;
   } else {
    $23 = $root;
    $24 = $p;
    $25 = ((($24)) + 628|0);
    $26 = (($25) + ($23<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $0 = $27;
    break;
   }
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _check_delay($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $3;
 $6 = $p;
 $7 = ((($6)) + 624|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*440)|0)|0);
 $xc = $9;
 $10 = $1;
 $11 = ((($10)) + 1552|0);
 $m = $11;
 $12 = $2;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(15);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 4|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)<(32);
  if ($21) {
   label = 4;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $22 = $2;
  $23 = ((($22)) + 3|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(163);
  if ($26) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $27 = $2;
  $28 = ((($27)) + 4|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)!=(0);
  if ($30) {
   $31 = $2;
   $32 = ((($31)) + 4|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $p;
   $36 = ((($35)) + 16|0);
   HEAP32[$36>>2] = $34;
  }
 }
 $37 = $2;
 $38 = ((($37)) + 5|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = ($40|0)==(15);
 if ($41) {
  $42 = $2;
  $43 = ((($42)) + 6|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45|0)<(32);
  if ($46) {
   label = 9;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $47 = $2;
  $48 = ((($47)) + 5|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)==(163);
  if ($51) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $52 = $2;
  $53 = ((($52)) + 6|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)!=(0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 6|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $p;
   $61 = ((($60)) + 16|0);
   HEAP32[$61>>2] = $59;
  }
 }
 $62 = $2;
 $63 = ((($62)) + 3|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ($65|0)==(14);
 if ($66) {
  $67 = $2;
  $68 = ((($67)) + 4|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 & 240;
  $72 = $71 >> 4;
  $73 = ($72|0)==(13);
  if ($73) {
   $74 = $2;
   $75 = ((($74)) + 4|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $77 & 15;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $2;
    $81 = ((($80)) + 4|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 & 15;
    $85 = (($84) + 1)|0;
    $86 = $xc;
    $87 = ((($86)) + 64|0);
    HEAP32[$87>>2] = $85;
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 do {
  if ((label|0) == 15) {
   $88 = $2;
   $89 = ((($88)) + 5|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)==(14);
   if ($92) {
    $93 = $2;
    $94 = ((($93)) + 6|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $96 & 240;
    $98 = $97 >> 4;
    $99 = ($98|0)==(13);
    if ($99) {
     $100 = $2;
     $101 = ((($100)) + 6|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = $102&255;
     $104 = $103 & 15;
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = $2;
      $107 = ((($106)) + 6|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108&255;
      $110 = $109 & 15;
      $111 = (($110) + 1)|0;
      $112 = $xc;
      $113 = ((($112)) + 64|0);
      HEAP32[$113>>2] = $111;
      break;
     }
    }
   }
   $0 = 0;
   $160 = $0;
   STACKTOP = sp;return ($160|0);
  }
 } while(0);
 $114 = $xc;
 $115 = ((($114)) + 404|0);
 $116 = $2;
 ;HEAP8[$115>>0]=HEAP8[$116>>0]|0;HEAP8[$115+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$115+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$115+3>>0]=HEAP8[$116+3>>0]|0;HEAP8[$115+4>>0]=HEAP8[$116+4>>0]|0;HEAP8[$115+5>>0]=HEAP8[$116+5>>0]|0;HEAP8[$115+6>>0]=HEAP8[$116+6>>0]|0;HEAP8[$115+7>>0]=HEAP8[$116+7>>0]|0;
 $117 = $2;
 $118 = ((($117)) + 1|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = ($119<<24>>24)!=(0);
 if ($120) {
  $121 = $2;
  $122 = ((($121)) + 1|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $125 = $xc;
  $126 = ((($125)) + 412|0);
  HEAP32[$126>>2] = $124;
 }
 $127 = $m;
 $128 = ((($127)) + 1280|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 & 33554432;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $2;
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = ($134|0)==(0);
  if ($135) {
   $136 = $xc;
   $137 = ((($136)) + 16|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + 1)|0;
   $140 = $139&255;
   $141 = $xc;
   $142 = ((($141)) + 404|0);
   HEAP8[$142>>0] = $140;
  }
  $143 = $2;
  $144 = ((($143)) + 1|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = ($146|0)==(0);
  if ($147) {
   $148 = $m;
   $149 = ((($148)) + 1280|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 & 67108864;
   $152 = ($151|0)!=(0);
   if (!($152)) {
    $153 = $xc;
    $154 = ((($153)) + 48|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155&255;
    $157 = $xc;
    $158 = ((($157)) + 404|0);
    $159 = ((($158)) + 1|0);
    HEAP8[$159>>0] = $156;
   }
  }
 }
 $0 = 1;
 $160 = $0;
 STACKTOP = sp;return ($160|0);
}
function _read_event($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $3;
 $8 = $p;
 $9 = ((($8)) + 624|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($7*440)|0)|0);
 $xc = $11;
 $12 = $2;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $xc;
  $22 = ((($21)) + 48|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $3;
 $24 = $m;
 $25 = ((($24)) + 136|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23|0)>=($26|0);
 L4: do {
  if ($27) {
   $28 = $1;
   $29 = $2;
   $30 = $3;
   $31 = (_read_event_smix($28,$29,$30)|0);
   $0 = $31;
  } else {
   $32 = $m;
   $33 = ((($32)) + 1284|0);
   $34 = HEAP32[$33>>2]|0;
   switch ($34|0) {
   case 2:  {
    $43 = $1;
    $44 = $2;
    $45 = $3;
    $46 = (_read_event_st3($43,$44,$45)|0);
    $0 = $46;
    break L4;
    break;
   }
   case 0:  {
    $35 = $1;
    $36 = $2;
    $37 = $3;
    $38 = (_read_event_mod($35,$36,$37)|0);
    $0 = $38;
    break L4;
    break;
   }
   case 1:  {
    $39 = $1;
    $40 = $2;
    $41 = $3;
    $42 = (_read_event_ft2($39,$40,$41)|0);
    $0 = $42;
    break L4;
    break;
   }
   case 4:  {
    $51 = $1;
    $52 = $2;
    $53 = $3;
    $54 = (_read_event_med($51,$52,$53)|0);
    $0 = $54;
    break L4;
    break;
   }
   case 3:  {
    $47 = $1;
    $48 = $2;
    $49 = $3;
    $50 = (_read_event_it($47,$48,$49)|0);
    $0 = $50;
    break L4;
    break;
   }
   default: {
    $55 = $1;
    $56 = $2;
    $57 = $3;
    $58 = (_read_event_mod($55,$56,$57)|0);
    $0 = $58;
    break L4;
   }
   }
  }
 } while(0);
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function _read_event_smix($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ins = 0, $is_smix_ins = 0, $m = 0, $mod = 0, $note = 0, $or$cond = 0, $p = 0, $smix = 0, $smp = 0, $sub = 0, $transp = 0, $xc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 8120|0);
 $smix = $6;
 $7 = $1;
 $8 = ((($7)) + 1552|0);
 $m = $8;
 $9 = $m;
 $mod = $9;
 $10 = $3;
 $11 = $p;
 $12 = ((($11)) + 624|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*440)|0)|0);
 $xc = $14;
 $15 = $xc;
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = ((($16)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)!=(0);
 if (!($19)) {
  $0 = 0;
  $227 = $0;
  STACKTOP = sp;return ($227|0);
 }
 $is_smix_ins = 0;
 $20 = $2;
 $21 = ((($20)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) - 1)|0;
 $ins = $24;
 $25 = $xc;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 2048;
 HEAP32[$25>>2] = $27;
 $28 = $xc;
 $29 = ((($28)) + 72|0);
 HEAP32[$29>>2] = 65536;
 $30 = $xc;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = $xc;
 $33 = ((($32)) + 92|0);
 HEAP32[$33>>2] = 0;
 $34 = $xc;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & -3;
 HEAP32[$35>>2] = $37;
 $38 = $ins;
 $39 = $xc;
 $40 = ((($39)) + 44|0);
 HEAP32[$40>>2] = $38;
 $41 = $ins;
 $42 = $mod;
 $43 = ((($42)) + 140|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)>=($44|0);
 if ($45) {
  $46 = $ins;
  $47 = $mod;
  $48 = ((($47)) + 140|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $smix;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) + ($52))|0;
  $54 = ($46|0)<($53|0);
  if ($54) {
   $is_smix_ins = 1;
  }
 }
 $55 = $xc;
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 | 65536;
 HEAP32[$55>>2] = $57;
 $58 = $2;
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = ($60|0)==(129);
 if ($61) {
  $62 = $xc;
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 | 2;
  HEAP32[$63>>2] = $65;
  $0 = 0;
  $227 = $0;
  STACKTOP = sp;return ($227|0);
 }
 $66 = $2;
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($68) - 1)|0;
 $70 = $xc;
 $71 = ((($70)) + 16|0);
 HEAP32[$71>>2] = $69;
 $72 = $xc;
 $73 = ((($72)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 & -5;
 HEAP32[$73>>2] = $75;
 $76 = $is_smix_ins;
 $77 = ($76|0)!=(0);
 $78 = $xc;
 if ($77) {
  $79 = ((($78)) + 44|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $mod;
  $82 = ((($81)) + 140|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($80) - ($83))|0;
  $85 = $smix;
  $86 = ((($85)) + 12|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + (($84*764)|0)|0);
  $89 = ((($88)) + 756|0);
  $90 = HEAP32[$89>>2]|0;
  $sub = $90;
  $91 = $sub;
  $92 = ($91|0)==(0|0);
  if ($92) {
   $0 = 0;
   $227 = $0;
   STACKTOP = sp;return ($227|0);
  }
  $93 = $xc;
  $94 = ((($93)) + 16|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $sub;
  $97 = ((($96)) + 12|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) + ($98))|0;
  $note = $99;
  $100 = $sub;
  $101 = ((($100)) + 40|0);
  $102 = HEAP32[$101>>2]|0;
  $smp = $102;
  $103 = $smp;
  $104 = $smix;
  $105 = ((($104)) + 16|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + (($103*52)|0)|0);
  $108 = ((($107)) + 32|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(0);
  if ($110) {
   $smp = -1;
  }
  $111 = $smp;
  $112 = ($111|0)>=(0);
  if ($112) {
   $113 = $smp;
   $114 = $smix;
   $115 = ((($114)) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($113|0)<($116|0);
   if ($117) {
    $118 = $mod;
    $119 = ((($118)) + 144|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $smp;
    $122 = (($121) + ($120))|0;
    $smp = $122;
    $123 = $1;
    $124 = $3;
    $125 = $xc;
    $126 = ((($125)) + 44|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $smp;
    $129 = $note;
    (_virt_setpatch($123,$124,$127,$128,$129,0,0,0)|0);
    $130 = $smp;
    $131 = $xc;
    $132 = ((($131)) + 56|0);
    HEAP32[$132>>2] = $130;
   }
  }
 } else {
  $133 = ((($78)) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $xc;
  $136 = ((($135)) + 44|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $mod;
  $139 = ((($138)) + 176|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + (($137*764)|0)|0);
  $142 = ((($141)) + 512|0);
  $143 = (($142) + ($134<<1)|0);
  $144 = ((($143)) + 1|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145 << 24 >> 24;
  $transp = $146;
  $147 = $1;
  $148 = $xc;
  $149 = ((($148)) + 44|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $xc;
  $152 = ((($151)) + 16|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (_get_subinstrument($147,$150,$153)|0);
  $sub = $154;
  $155 = $xc;
  $156 = ((($155)) + 16|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $sub;
  $159 = ((($158)) + 12|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($157) + ($160))|0;
  $162 = $transp;
  $163 = (($161) + ($162))|0;
  $note = $163;
  $164 = $sub;
  $165 = ((($164)) + 40|0);
  $166 = HEAP32[$165>>2]|0;
  $smp = $166;
  $167 = $smp;
  $168 = $mod;
  $169 = ((($168)) + 180|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*52)|0)|0);
  $172 = ((($171)) + 32|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($173|0)==(0);
  if ($174) {
   $smp = -1;
  }
  $175 = $smp;
  $176 = ($175|0)>=(0);
  if ($176) {
   $177 = $smp;
   $178 = $mod;
   $179 = ((($178)) + 144|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($177|0)<($180|0);
   if ($181) {
    $182 = $1;
    $183 = $3;
    $184 = $xc;
    $185 = ((($184)) + 44|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $smp;
    $188 = $note;
    (_virt_setpatch($182,$183,$186,$187,$188,0,0,0)|0);
    $189 = $smp;
    $190 = $xc;
    $191 = ((($190)) + 56|0);
    HEAP32[$191>>2] = $189;
   }
  }
 }
 $192 = $1;
 $193 = $note;
 $194 = $sub;
 $195 = $xc;
 _set_effect_defaults($192,$193,$194,$195,0);
 $196 = $1;
 $197 = $note;
 $198 = $sub;
 $199 = $xc;
 _set_period($196,$197,$198,$199,0);
 $200 = $2;
 $201 = ((($200)) + 1|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&255;
 $204 = ($203|0)!=(0);
 $205 = $sub;
 $206 = ($205|0)!=(0|0);
 $or$cond = $204 & $206;
 if ($or$cond) {
  $207 = $1;
  $208 = $xc;
  _reset_envelopes($207,$208,0);
 }
 $209 = $2;
 $210 = ((($209)) + 2|0);
 $211 = HEAP8[$210>>0]|0;
 $212 = $211&255;
 $213 = (($212) - 1)|0;
 $214 = $xc;
 $215 = ((($214)) + 80|0);
 HEAP32[$215>>2] = $213;
 $216 = $xc;
 $217 = HEAP32[$216>>2]|0;
 $218 = $217 | 4096;
 HEAP32[$216>>2] = $218;
 $219 = $note;
 $220 = $xc;
 $221 = ((($220)) + 12|0);
 HEAP32[$221>>2] = $219;
 $222 = $1;
 $223 = $3;
 $224 = $xc;
 $225 = ((($224)) + 92|0);
 $226 = HEAP32[$225>>2]|0;
 _virt_voicepos($222,$223,$226);
 $0 = 0;
 $227 = $0;
 STACKTOP = sp;return ($227|0);
}
function _read_event_mod($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ins = 0, $is_toneporta = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $note = 0, $or$cond = 0;
 var $or$cond3 = 0, $p = 0, $smp = 0, $sub = 0, $transp = 0, $use_ins_vol = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 624|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*440)|0)|0);
 $xc = $12;
 $new_invalid_ins = 0;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(3);
 if ($18) {
  label = 7;
 } else {
  $19 = $2;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   label = 7;
  } else {
   $24 = $2;
   $25 = ((($24)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)==(122);
   if ($28) {
    label = 7;
   } else {
    $29 = $2;
    $30 = ((($29)) + 5|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)==(3);
    if ($33) {
     label = 7;
    } else {
     $34 = $2;
     $35 = ((($34)) + 5|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)==(5);
     if ($38) {
      label = 7;
     } else {
      $39 = $2;
      $40 = ((($39)) + 5|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      $43 = ($42|0)==(122);
      if ($43) {
       label = 7;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 7) {
  $is_toneporta = 1;
 }
 $44 = $2;
 $45 = ((($44)) + 1|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)!=(0);
 do {
  if ($47) {
   $48 = $2;
   $49 = ((($48)) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = (($51) - 1)|0;
   $ins = $52;
   $use_ins_vol = 1;
   $53 = $xc;
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 | 2048;
   HEAP32[$53>>2] = $55;
   $56 = $xc;
   $57 = ((($56)) + 72|0);
   HEAP32[$57>>2] = 65536;
   $58 = $xc;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = 0;
   $60 = $xc;
   $61 = ((($60)) + 92|0);
   HEAP32[$61>>2] = 0;
   $62 = $xc;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 & -4;
   HEAP32[$63>>2] = $65;
   $66 = $ins;
   $67 = $mod;
   $68 = ((($67)) + 140|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($66>>>0)<($69>>>0);
   if ($70) {
    $71 = $ins;
    $72 = $mod;
    $73 = ((($72)) + 176|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + (($71*764)|0)|0);
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)>(0);
    if ($78) {
     $79 = $is_toneporta;
     $80 = ($79|0)!=(0);
     if (!($80)) {
      $93 = $ins;
      $94 = $xc;
      $95 = ((($94)) + 44|0);
      HEAP32[$95>>2] = $93;
      break;
     }
     $81 = $1;
     $82 = $ins;
     $83 = $2;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = (_get_subinstrument($81,$82,$85)|0);
     $sub = $86;
     $87 = $sub;
     $88 = ($87|0)!=(0|0);
     if (!($88)) {
      break;
     }
     $89 = $sub;
     $90 = HEAP32[$89>>2]|0;
     $91 = $xc;
     $92 = ((($91)) + 80|0);
     HEAP32[$92>>2] = $90;
     $use_ins_vol = 0;
     break;
    }
   }
   $new_invalid_ins = 1;
   $96 = $1;
   $97 = $3;
   _virt_resetchannel($96,$97);
  }
 } while(0);
 $98 = $2;
 $99 = HEAP8[$98>>0]|0;
 $100 = ($99<<24>>24)!=(0);
 do {
  if ($100) {
   $101 = $xc;
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 | 65536;
   HEAP32[$101>>2] = $103;
   $104 = $2;
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = ($106|0)==(129);
   if ($107) {
    $108 = $xc;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $110 | 2;
    HEAP32[$109>>2] = $111;
    $use_ins_vol = 0;
    break;
   }
   $112 = $is_toneporta;
   $113 = ($112|0)!=(0);
   if (!($113)) {
    $114 = $2;
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = (($116) - 1)|0;
    $118 = $xc;
    $119 = ((($118)) + 16|0);
    HEAP32[$119>>2] = $117;
    $120 = $xc;
    $121 = ((($120)) + 8|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $122 & -5;
    HEAP32[$121>>2] = $123;
    $124 = $1;
    $125 = $xc;
    $126 = ((($125)) + 44|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $xc;
    $129 = ((($128)) + 16|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (_get_subinstrument($124,$127,$130)|0);
    $sub = $131;
    $132 = $new_invalid_ins;
    $133 = ($132|0)==(0);
    $134 = $sub;
    $135 = ($134|0)!=(0|0);
    $or$cond = $133 & $135;
    $136 = $xc;
    if (!($or$cond)) {
     HEAP32[$136>>2] = 0;
     $use_ins_vol = 0;
     break;
    }
    $137 = ((($136)) + 16|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $xc;
    $140 = ((($139)) + 44|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $mod;
    $143 = ((($142)) + 176|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + (($141*764)|0)|0);
    $146 = ((($145)) + 512|0);
    $147 = (($146) + ($138<<1)|0);
    $148 = ((($147)) + 1|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = $149 << 24 >> 24;
    $transp = $150;
    $151 = $xc;
    $152 = ((($151)) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $sub;
    $155 = ((($154)) + 12|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (($153) + ($156))|0;
    $158 = $transp;
    $159 = (($157) + ($158))|0;
    $note = $159;
    $160 = $sub;
    $161 = ((($160)) + 40|0);
    $162 = HEAP32[$161>>2]|0;
    $smp = $162;
    $163 = $smp;
    $164 = $mod;
    $165 = ((($164)) + 180|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (($166) + (($163*52)|0)|0);
    $168 = ((($167)) + 32|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ($169|0)==(0);
    if ($170) {
     $smp = -1;
    }
    $171 = $smp;
    $172 = ($171|0)>=(0);
    if ($172) {
     $173 = $smp;
     $174 = $mod;
     $175 = ((($174)) + 144|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ($173|0)<($176|0);
     if ($177) {
      $178 = $1;
      $179 = $3;
      $180 = $xc;
      $181 = ((($180)) + 44|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $smp;
      $184 = $note;
      (_virt_setpatch($178,$179,$182,$183,$184,0,0,0)|0);
      $185 = $smp;
      $186 = $xc;
      $187 = ((($186)) + 56|0);
      HEAP32[$187>>2] = $185;
     }
    }
   }
  }
 } while(0);
 $188 = $1;
 $189 = $xc;
 $190 = ((($189)) + 44|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $xc;
 $193 = ((($192)) + 16|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = (_get_subinstrument($188,$191,$194)|0);
 $sub = $195;
 $196 = $1;
 $197 = $note;
 $198 = $sub;
 $199 = $xc;
 $200 = $is_toneporta;
 _set_effect_defaults($196,$197,$198,$199,$200);
 $201 = $2;
 $202 = ((($201)) + 1|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = ($204|0)!=(0);
 $206 = $sub;
 $207 = ($206|0)!=(0|0);
 $or$cond3 = $205 & $207;
 if ($or$cond3) {
  $208 = $1;
  $209 = $xc;
  _reset_envelopes($208,$209,0);
 }
 $210 = $2;
 $211 = ((($210)) + 2|0);
 $212 = HEAP8[$211>>0]|0;
 $213 = ($212<<24>>24)!=(0);
 if ($213) {
  $214 = $2;
  $215 = ((($214)) + 2|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216&255;
  $218 = (($217) - 1)|0;
  $219 = $xc;
  $220 = ((($219)) + 80|0);
  HEAP32[$220>>2] = $218;
  $221 = $xc;
  $222 = HEAP32[$221>>2]|0;
  $223 = $222 | 4096;
  HEAP32[$221>>2] = $223;
 }
 $224 = $1;
 $225 = $xc;
 $226 = $3;
 $227 = $2;
 $228 = HEAP8[$227>>0]|0;
 $229 = $2;
 $230 = ((($229)) + 5|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = $2;
 $233 = ((($232)) + 6|0);
 $234 = HEAP8[$233>>0]|0;
 _process_fx($224,$225,$226,$228,$231,$234,1);
 $235 = $1;
 $236 = $xc;
 $237 = $3;
 $238 = $2;
 $239 = HEAP8[$238>>0]|0;
 $240 = $2;
 $241 = ((($240)) + 3|0);
 $242 = HEAP8[$241>>0]|0;
 $243 = $2;
 $244 = ((($243)) + 4|0);
 $245 = HEAP8[$244>>0]|0;
 _process_fx($235,$236,$237,$239,$242,$245,0);
 $246 = $1;
 $247 = $note;
 $248 = $sub;
 $249 = $xc;
 $250 = $is_toneporta;
 _set_period($246,$247,$248,$249,$250);
 $251 = $xc;
 $252 = HEAP32[$251>>2]|0;
 $253 = $252 & 4096;
 $254 = ($253|0)!=(0);
 if ($254) {
  $use_ins_vol = 0;
 }
 $255 = $sub;
 $256 = ($255|0)==(0|0);
 if ($256) {
  $0 = 0;
  $292 = $0;
  STACKTOP = sp;return ($292|0);
 }
 $257 = $note;
 $258 = ($257|0)>=(0);
 if ($258) {
  $259 = $note;
  $260 = $xc;
  $261 = ((($260)) + 12|0);
  HEAP32[$261>>2] = $259;
  $262 = $1;
  $263 = $3;
  $264 = $xc;
  $265 = ((($264)) + 92|0);
  $266 = HEAP32[$265>>2]|0;
  _virt_voicepos($262,$263,$266);
  $267 = $xc;
  $268 = HEAP32[$267>>2]|0;
  $269 = $268 & 256;
  $270 = ($269|0)!=(0);
  if ($270) {
   $271 = $p;
   $272 = ((($271)) + 28|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = $273 & 2;
   $275 = ($274|0)!=(0);
   if ($275) {
    $276 = $xc;
    $277 = ((($276)) + 92|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $278 << 1;
    HEAP32[$277>>2] = $279;
   }
  }
  $280 = $xc;
  $281 = HEAP32[$280>>2]|0;
  $282 = $281 & -257;
  HEAP32[$280>>2] = $282;
 }
 $283 = $use_ins_vol;
 $284 = ($283|0)!=(0);
 if ($284) {
  $285 = $sub;
  $286 = HEAP32[$285>>2]|0;
  $287 = $xc;
  $288 = ((($287)) + 80|0);
  HEAP32[$288>>2] = $286;
  $289 = $xc;
  $290 = HEAP32[$289>>2]|0;
  $291 = $290 | 4096;
  HEAP32[$289>>2] = $291;
 }
 $0 = 0;
 $292 = $0;
 STACKTOP = sp;return ($292|0);
}
function _read_event_ft2($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ins = 0, $is_toneporta = 0, $key = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $note = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $p = 0, $smp = 0, $sub = 0, $sub1 = 0, $transp = 0, $use_ins_vol = 0;
 var $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 624|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*440)|0)|0);
 $xc = $12;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $14 = $2;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $key = $16;
 $17 = $2;
 $18 = ((($17)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $ins = $20;
 $new_invalid_ins = 0;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $21 = $2;
 $22 = ((($21)) + 3|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)==(3);
 if ($25) {
  label = 7;
 } else {
  $26 = $2;
  $27 = ((($26)) + 3|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29|0)==(5);
  if ($30) {
   label = 7;
  } else {
   $31 = $2;
   $32 = ((($31)) + 3|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==(122);
   if ($35) {
    label = 7;
   } else {
    $36 = $2;
    $37 = ((($36)) + 5|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = ($39|0)==(3);
    if ($40) {
     label = 7;
    } else {
     $41 = $2;
     $42 = ((($41)) + 5|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = ($44|0)==(5);
     if ($45) {
      label = 7;
     } else {
      $46 = $2;
      $47 = ((($46)) + 5|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48&255;
      $50 = ($49|0)==(122);
      if ($50) {
       label = 7;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 7) {
  $is_toneporta = 1;
 }
 $51 = $ins;
 $52 = ($51|0)>(0);
 do {
  if ($52) {
   $53 = $ins;
   $54 = (($53) - 1)|0;
   $55 = $mod;
   $56 = ((($55)) + 140|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($54>>>0)<($57>>>0);
   if ($58) {
    $59 = $ins;
    $60 = (($59) - 1)|0;
    $61 = $mod;
    $62 = ((($61)) + 176|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + (($60*764)|0)|0);
    $65 = ((($64)) + 36|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)>(0);
    if ($67) {
     break;
    }
   }
   $ins = 0;
  }
 } while(0);
 $68 = $2;
 $69 = ((($68)) + 1|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)!=(0);
 do {
  if ($71) {
   $72 = $xc;
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 | 2048;
   HEAP32[$72>>2] = $74;
   $use_ins_vol = 1;
   $75 = $xc;
   $76 = ((($75)) + 72|0);
   HEAP32[$76>>2] = 65536;
   $77 = $xc;
   $78 = ((($77)) + 4|0);
   HEAP32[$78>>2] = 0;
   $79 = $xc;
   $80 = ((($79)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $81 & -4;
   HEAP32[$80>>2] = $82;
   $83 = $ins;
   $84 = (($83) - 1)|0;
   $85 = $mod;
   $86 = ((($85)) + 140|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($84>>>0)<($87>>>0);
   if ($88) {
    $89 = $ins;
    $90 = (($89) - 1)|0;
    $91 = $mod;
    $92 = ((($91)) + 176|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + (($90*764)|0)|0);
    $95 = ((($94)) + 36|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)>(0);
    if ($97) {
     $98 = $is_toneporta;
     $99 = ($98|0)!=(0);
     if ($99) {
      break;
     }
     $100 = $ins;
     $101 = (($100) - 1)|0;
     $102 = $xc;
     $103 = ((($102)) + 44|0);
     HEAP32[$103>>2] = $101;
     break;
    }
   }
   $new_invalid_ins = 1;
   $104 = $xc;
   HEAP32[$104>>2] = 0;
   $105 = $is_toneporta;
   $106 = ($105|0)!=(0);
   if ($106) {
    $key = 0;
   }
  }
 } while(0);
 $107 = $key;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $xc;
  $110 = HEAP32[$109>>2]|0;
  $111 = $110 | 65536;
  HEAP32[$109>>2] = $111;
  $112 = $key;
  $113 = ($112|0)==(129);
  if ($113) {
   $114 = $xc;
   $115 = ((($114)) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 | 2;
   HEAP32[$115>>2] = $117;
   $use_ins_vol = 0;
  } else {
   $118 = $is_toneporta;
   $119 = ($118|0)!=(0);
   if ($119) {
    $key = 0;
   }
  }
  $120 = $2;
  $121 = ((($120)) + 1|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = ($123|0)==(0);
  do {
   if ($124) {
    $125 = $xc;
    $126 = ((($125)) + 48|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) - 1)|0;
    $129 = $mod;
    $130 = ((($129)) + 140|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($128>>>0)<($131>>>0);
    if ($132) {
     $133 = $xc;
     $134 = ((($133)) + 48|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($135) - 1)|0;
     $137 = $mod;
     $138 = ((($137)) + 176|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + (($136*764)|0)|0);
     $141 = ((($140)) + 36|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)>(0);
     if ($143) {
      break;
     }
    }
    $new_invalid_ins = 1;
   }
  } while(0);
  $144 = $new_invalid_ins;
  $145 = ($144|0)!=(0);
  if ($145) {
   $146 = $1;
   $147 = $3;
   _virt_resetchannel($146,$147);
  }
 }
 $148 = $ins;
 $149 = ($148|0)!=(0);
 do {
  if ($149) {
   $150 = $key;
   $151 = ($150|0)==(0);
   $152 = $key;
   $153 = ($152|0)>=(129);
   $or$cond = $151 | $153;
   $154 = $1;
   $155 = $xc;
   if ($or$cond) {
    $156 = ((($155)) + 52|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $xc;
    $159 = ((($158)) + 16|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (_get_subinstrument($154,$157,$160)|0);
    $sub1 = $161;
    $162 = $sub1;
    $163 = ($162|0)!=(0|0);
    if (!($163)) {
     break;
    }
    $164 = $sub1;
    $165 = HEAP32[$164>>2]|0;
    $166 = $xc;
    $167 = ((($166)) + 80|0);
    HEAP32[$167>>2] = $165;
    $168 = $sub1;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $xc;
    $172 = ((($171)) + 344|0);
    HEAP32[$172>>2] = $170;
    $173 = $xc;
    $174 = HEAP32[$173>>2]|0;
    $175 = $174 | 4096;
    HEAP32[$173>>2] = $175;
    break;
   }
   $176 = ((($155)) + 44|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $key;
   $179 = (($178) - 1)|0;
   $180 = (_get_subinstrument($154,$177,$179)|0);
   $sub1 = $180;
   $181 = $sub1;
   $182 = ($181|0)!=(0|0);
   if ($182) {
    $183 = $sub1;
    $184 = HEAP32[$183>>2]|0;
    $185 = $xc;
    $186 = ((($185)) + 80|0);
    HEAP32[$186>>2] = $184;
    $187 = $sub1;
    $188 = ((($187)) + 8|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $xc;
    $191 = ((($190)) + 344|0);
    HEAP32[$191>>2] = $189;
   } else {
    $192 = $xc;
    $193 = ((($192)) + 80|0);
    HEAP32[$193>>2] = 0;
   }
   $194 = $xc;
   $195 = ((($194)) + 44|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $xc;
   $198 = ((($197)) + 52|0);
   HEAP32[$198>>2] = $196;
   $199 = $xc;
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 | 4096;
   HEAP32[$199>>2] = $201;
  }
 } while(0);
 $202 = $key;
 $203 = ($202>>>0)<=(121);
 $204 = $key;
 $205 = ($204|0)>(0);
 $or$cond3 = $203 & $205;
 do {
  if ($or$cond3) {
   $206 = $key;
   $207 = (($206) + -1)|0;
   $key = $207;
   $208 = $xc;
   $209 = ((($208)) + 16|0);
   HEAP32[$209>>2] = $207;
   $210 = $xc;
   $211 = ((($210)) + 72|0);
   HEAP32[$211>>2] = 65536;
   $212 = $xc;
   $213 = ((($212)) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $214 & -5;
   HEAP32[$213>>2] = $215;
   $216 = $xc;
   $217 = ((($216)) + 44|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = $mod;
   $220 = ((($219)) + 176|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (($221) + (($218*764)|0)|0);
   $223 = ((($222)) + 44|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = $224 ^ -1;
   $226 = $225 & 1;
   $227 = ($226|0)!=(0);
   if ($227) {
    $228 = $xc;
    $229 = ((($228)) + 8|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $230 & -4;
    HEAP32[$229>>2] = $231;
   }
   $232 = $1;
   $233 = $xc;
   $234 = ((($233)) + 44|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $key;
   $237 = (_get_subinstrument($232,$235,$236)|0);
   $sub = $237;
   $238 = $new_invalid_ins;
   $239 = ($238|0)==(0);
   $240 = $sub;
   $241 = ($240|0)!=(0|0);
   $or$cond5 = $239 & $241;
   if (!($or$cond5)) {
    $290 = $xc;
    HEAP32[$290>>2] = 0;
    $use_ins_vol = 0;
    break;
   }
   $242 = $key;
   $243 = $xc;
   $244 = ((($243)) + 44|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $mod;
   $247 = ((($246)) + 176|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($248) + (($245*764)|0)|0);
   $250 = ((($249)) + 512|0);
   $251 = (($250) + ($242<<1)|0);
   $252 = ((($251)) + 1|0);
   $253 = HEAP8[$252>>0]|0;
   $254 = $253 << 24 >> 24;
   $transp = $254;
   $255 = $key;
   $256 = $sub;
   $257 = ((($256)) + 12|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($255) + ($258))|0;
   $260 = $transp;
   $261 = (($259) + ($260))|0;
   $note = $261;
   $262 = $sub;
   $263 = ((($262)) + 40|0);
   $264 = HEAP32[$263>>2]|0;
   $smp = $264;
   $265 = $smp;
   $266 = $mod;
   $267 = ((($266)) + 180|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = (($268) + (($265*52)|0)|0);
   $270 = ((($269)) + 32|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)==(0);
   if ($272) {
    $smp = -1;
   }
   $273 = $smp;
   $274 = ($273|0)>=(0);
   if ($274) {
    $275 = $smp;
    $276 = $mod;
    $277 = ((($276)) + 144|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = ($275|0)<($278|0);
    if ($279) {
     $280 = $1;
     $281 = $3;
     $282 = $xc;
     $283 = ((($282)) + 44|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = $smp;
     $286 = $note;
     (_virt_setpatch($280,$281,$284,$285,$286,0,0,0)|0);
     $287 = $smp;
     $288 = $xc;
     $289 = ((($288)) + 56|0);
     HEAP32[$289>>2] = $287;
    }
   }
  }
 } while(0);
 $291 = $1;
 $292 = $xc;
 $293 = ((($292)) + 44|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = $xc;
 $296 = ((($295)) + 16|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = (_get_subinstrument($291,$294,$297)|0);
 $sub = $298;
 $299 = $1;
 $300 = $note;
 $301 = $sub;
 $302 = $xc;
 $303 = $is_toneporta;
 _set_effect_defaults($299,$300,$301,$302,$303);
 $304 = $ins;
 $305 = ($304|0)!=(0);
 $306 = $sub;
 $307 = ($306|0)!=(0|0);
 $or$cond7 = $305 & $307;
 if ($or$cond7) {
  $308 = $1;
  $309 = $xc;
  _reset_envelopes($308,$309,0);
 }
 $310 = $2;
 $311 = ((($310)) + 2|0);
 $312 = HEAP8[$311>>0]|0;
 $313 = ($312<<24>>24)!=(0);
 if ($313) {
  $314 = $2;
  $315 = ((($314)) + 2|0);
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&255;
  $318 = (($317) - 1)|0;
  $319 = $xc;
  $320 = ((($319)) + 80|0);
  HEAP32[$320>>2] = $318;
  $321 = $xc;
  $322 = HEAP32[$321>>2]|0;
  $323 = $322 | 4096;
  HEAP32[$321>>2] = $323;
  $324 = $xc;
  $325 = ((($324)) + 8|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = $326 & 4;
  $328 = ($327|0)!=(0);
  if ($328) {
   $329 = $xc;
   $330 = ((($329)) + 72|0);
   HEAP32[$330>>2] = 65536;
   $331 = $xc;
   $332 = ((($331)) + 8|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = $333 & -4;
   HEAP32[$332>>2] = $334;
  }
 }
 $335 = $xc;
 $336 = ((($335)) + 92|0);
 HEAP32[$336>>2] = 0;
 $337 = $1;
 $338 = $xc;
 $339 = $3;
 $340 = $2;
 $341 = HEAP8[$340>>0]|0;
 $342 = $2;
 $343 = ((($342)) + 5|0);
 $344 = HEAP8[$343>>0]|0;
 $345 = $2;
 $346 = ((($345)) + 6|0);
 $347 = HEAP8[$346>>0]|0;
 _process_fx($337,$338,$339,$341,$344,$347,1);
 $348 = $1;
 $349 = $xc;
 $350 = $3;
 $351 = $2;
 $352 = HEAP8[$351>>0]|0;
 $353 = $2;
 $354 = ((($353)) + 3|0);
 $355 = HEAP8[$354>>0]|0;
 $356 = $2;
 $357 = ((($356)) + 4|0);
 $358 = HEAP8[$357>>0]|0;
 _process_fx($348,$349,$350,$352,$355,$358,0);
 $359 = $1;
 $360 = $note;
 $361 = $sub;
 $362 = $xc;
 $363 = $is_toneporta;
 _set_period($359,$360,$361,$362,$363);
 $364 = $xc;
 $365 = HEAP32[$364>>2]|0;
 $366 = $365 & 4096;
 $367 = ($366|0)!=(0);
 if ($367) {
  $use_ins_vol = 0;
 }
 $368 = $sub;
 $369 = ($368|0)==(0|0);
 if ($369) {
  $0 = 0;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $370 = $note;
 $371 = ($370|0)>=(0);
 do {
  if ($371) {
   $372 = $note;
   $373 = $xc;
   $374 = ((($373)) + 12|0);
   HEAP32[$374>>2] = $372;
   $375 = $xc;
   $376 = ((($375)) + 92|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = $sub;
   $379 = ((($378)) + 40|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = $mod;
   $382 = ((($381)) + 180|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = (($383) + (($380*52)|0)|0);
   $385 = ((($384)) + 32|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($377|0)>=($386|0);
   $388 = $1;
   $389 = $3;
   if ($387) {
    _virt_resetchannel($388,$389);
    break;
   } else {
    $390 = $xc;
    $391 = ((($390)) + 92|0);
    $392 = HEAP32[$391>>2]|0;
    _virt_voicepos($388,$389,$392);
    break;
   }
  }
 } while(0);
 $393 = $use_ins_vol;
 $394 = ($393|0)!=(0);
 if ($394) {
  $395 = $sub;
  $396 = HEAP32[$395>>2]|0;
  $397 = $xc;
  $398 = ((($397)) + 80|0);
  HEAP32[$398>>2] = $396;
  $399 = $xc;
  $400 = HEAP32[$399>>2]|0;
  $401 = $400 | 4096;
  HEAP32[$399>>2] = $401;
 }
 $0 = 0;
 $402 = $0;
 STACKTOP = sp;return ($402|0);
}
function _read_event_st3($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ins = 0, $is_toneporta = 0;
 var $m = 0, $mod = 0, $not_same_ins = 0, $note = 0, $or$cond = 0, $p = 0, $smp = 0, $sub = 0, $transp = 0, $use_ins_vol = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 624|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*440)|0)|0);
 $xc = $12;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $not_same_ins = 0;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(3);
 if ($18) {
  label = 7;
 } else {
  $19 = $2;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   label = 7;
  } else {
   $24 = $2;
   $25 = ((($24)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)==(122);
   if ($28) {
    label = 7;
   } else {
    $29 = $2;
    $30 = ((($29)) + 5|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)==(3);
    if ($33) {
     label = 7;
    } else {
     $34 = $2;
     $35 = ((($34)) + 5|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)==(5);
     if ($38) {
      label = 7;
     } else {
      $39 = $2;
      $40 = ((($39)) + 5|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      $43 = ($42|0)==(122);
      if ($43) {
       label = 7;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 7) {
  $is_toneporta = 1;
 }
 $44 = $1;
 $45 = $3;
 $46 = (_virt_mapchannel($44,$45)|0);
 $47 = ($46|0)<(0);
 if ($47) {
  $48 = $xc;
  $49 = ((($48)) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $2;
  $52 = ((($51)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($54) - 1)|0;
  $56 = ($50|0)!=($55|0);
  if ($56) {
   $is_toneporta = 0;
  }
 }
 $57 = $2;
 $58 = ((($57)) + 1|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = ($59<<24>>24)!=(0);
 do {
  if ($60) {
   $61 = $2;
   $62 = ((($61)) + 1|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = (($64) - 1)|0;
   $ins = $65;
   $66 = $xc;
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 2048;
   HEAP32[$66>>2] = $68;
   $use_ins_vol = 1;
   $69 = $xc;
   $70 = ((($69)) + 72|0);
   HEAP32[$70>>2] = 65536;
   $71 = $xc;
   $72 = ((($71)) + 4|0);
   HEAP32[$72>>2] = 0;
   $73 = $xc;
   $74 = ((($73)) + 92|0);
   HEAP32[$74>>2] = 0;
   $75 = $xc;
   $76 = ((($75)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & -4;
   HEAP32[$76>>2] = $78;
   $79 = $ins;
   $80 = $mod;
   $81 = ((($80)) + 140|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($79>>>0)<($82>>>0);
   if ($83) {
    $84 = $ins;
    $85 = $mod;
    $86 = ((($85)) + 176|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + (($84*764)|0)|0);
    $89 = ((($88)) + 36|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)>(0);
    if ($91) {
     $92 = $xc;
     $93 = ((($92)) + 44|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $ins;
     $96 = ($94|0)!=($95|0);
     if (!($96)) {
      break;
     }
     $not_same_ins = 1;
     $97 = $is_toneporta;
     $98 = ($97|0)!=(0);
     if (!($98)) {
      $99 = $ins;
      $100 = $xc;
      $101 = ((($100)) + 44|0);
      HEAP32[$101>>2] = $99;
      break;
     }
     $102 = $1;
     $103 = $ins;
     $104 = $2;
     $105 = HEAP8[$104>>0]|0;
     $106 = $105&255;
     $107 = (_get_subinstrument($102,$103,$106)|0);
     $sub = $107;
     $108 = $sub;
     $109 = ($108|0)!=(0|0);
     if (!($109)) {
      break;
     }
     $110 = $sub;
     $111 = HEAP32[$110>>2]|0;
     $112 = $xc;
     $113 = ((($112)) + 80|0);
     HEAP32[$113>>2] = $111;
     $use_ins_vol = 0;
     break;
    }
   }
   $114 = $xc;
   HEAP32[$114>>2] = 0;
   $use_ins_vol = 0;
  }
 } while(0);
 $115 = $2;
 $116 = HEAP8[$115>>0]|0;
 $117 = ($116<<24>>24)!=(0);
 do {
  if ($117) {
   $118 = $xc;
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 | 65536;
   HEAP32[$118>>2] = $120;
   $121 = $2;
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = ($123|0)==(129);
   if ($124) {
    $125 = $xc;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $127 | 2;
    HEAP32[$126>>2] = $128;
    $use_ins_vol = 0;
    break;
   }
   $129 = $is_toneporta;
   $130 = ($129|0)!=(0);
   if ($130) {
    $131 = $not_same_ins;
    $132 = ($131|0)!=(0);
    if (!($132)) {
     break;
    }
    $133 = $xc;
    $134 = ((($133)) + 92|0);
    HEAP32[$134>>2] = 0;
    break;
   }
   $135 = $2;
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = (($137) - 1)|0;
   $139 = $xc;
   $140 = ((($139)) + 16|0);
   HEAP32[$140>>2] = $138;
   $141 = $xc;
   $142 = ((($141)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $143 & -5;
   HEAP32[$142>>2] = $144;
   $145 = $1;
   $146 = $xc;
   $147 = ((($146)) + 44|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $xc;
   $150 = ((($149)) + 16|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (_get_subinstrument($145,$148,$151)|0);
   $sub = $152;
   $153 = $sub;
   $154 = ($153|0)!=(0|0);
   $155 = $xc;
   if (!($154)) {
    HEAP32[$155>>2] = 0;
    $use_ins_vol = 0;
    break;
   }
   $156 = ((($155)) + 16|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $xc;
   $159 = ((($158)) + 44|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $mod;
   $162 = ((($161)) + 176|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + (($160*764)|0)|0);
   $165 = ((($164)) + 512|0);
   $166 = (($165) + ($157<<1)|0);
   $167 = ((($166)) + 1|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168 << 24 >> 24;
   $transp = $169;
   $170 = $xc;
   $171 = ((($170)) + 16|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = $sub;
   $174 = ((($173)) + 12|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($172) + ($175))|0;
   $177 = $transp;
   $178 = (($176) + ($177))|0;
   $note = $178;
   $179 = $sub;
   $180 = ((($179)) + 40|0);
   $181 = HEAP32[$180>>2]|0;
   $smp = $181;
   $182 = $smp;
   $183 = $mod;
   $184 = ((($183)) + 180|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($185) + (($182*52)|0)|0);
   $187 = ((($186)) + 32|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($188|0)==(0);
   if ($189) {
    $smp = -1;
   }
   $190 = $smp;
   $191 = ($190|0)>=(0);
   if ($191) {
    $192 = $smp;
    $193 = $mod;
    $194 = ((($193)) + 144|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($192|0)<($195|0);
    if ($196) {
     $197 = $1;
     $198 = $3;
     $199 = $xc;
     $200 = ((($199)) + 44|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $smp;
     $203 = $note;
     (_virt_setpatch($197,$198,$201,$202,$203,0,0,0)|0);
     $204 = $smp;
     $205 = $xc;
     $206 = ((($205)) + 56|0);
     HEAP32[$206>>2] = $204;
    }
   }
  }
 } while(0);
 $207 = $1;
 $208 = $xc;
 $209 = ((($208)) + 44|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $xc;
 $212 = ((($211)) + 16|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = (_get_subinstrument($207,$210,$213)|0);
 $sub = $214;
 $215 = $1;
 $216 = $note;
 $217 = $sub;
 $218 = $xc;
 $219 = $is_toneporta;
 _set_effect_defaults($215,$216,$217,$218,$219);
 $220 = $2;
 $221 = ((($220)) + 1|0);
 $222 = HEAP8[$221>>0]|0;
 $223 = $222&255;
 $224 = ($223|0)!=(0);
 $225 = $sub;
 $226 = ($225|0)!=(0|0);
 $or$cond = $224 & $226;
 if ($or$cond) {
  $227 = $1;
  $228 = $xc;
  _reset_envelopes($227,$228,0);
 }
 $229 = $2;
 $230 = ((($229)) + 2|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = ($231<<24>>24)!=(0);
 if ($232) {
  $233 = $2;
  $234 = ((($233)) + 2|0);
  $235 = HEAP8[$234>>0]|0;
  $236 = $235&255;
  $237 = (($236) - 1)|0;
  $238 = $xc;
  $239 = ((($238)) + 80|0);
  HEAP32[$239>>2] = $237;
  $240 = $xc;
  $241 = HEAP32[$240>>2]|0;
  $242 = $241 | 4096;
  HEAP32[$240>>2] = $242;
 }
 $243 = $1;
 $244 = $xc;
 $245 = $3;
 $246 = $2;
 $247 = HEAP8[$246>>0]|0;
 $248 = $2;
 $249 = ((($248)) + 5|0);
 $250 = HEAP8[$249>>0]|0;
 $251 = $2;
 $252 = ((($251)) + 6|0);
 $253 = HEAP8[$252>>0]|0;
 _process_fx($243,$244,$245,$247,$250,$253,1);
 $254 = $1;
 $255 = $xc;
 $256 = $3;
 $257 = $2;
 $258 = HEAP8[$257>>0]|0;
 $259 = $2;
 $260 = ((($259)) + 3|0);
 $261 = HEAP8[$260>>0]|0;
 $262 = $2;
 $263 = ((($262)) + 4|0);
 $264 = HEAP8[$263>>0]|0;
 _process_fx($254,$255,$256,$258,$261,$264,0);
 $265 = $1;
 $266 = $note;
 $267 = $sub;
 $268 = $xc;
 $269 = $is_toneporta;
 _set_period($265,$266,$267,$268,$269);
 $270 = $xc;
 $271 = HEAP32[$270>>2]|0;
 $272 = $271 & 4096;
 $273 = ($272|0)!=(0);
 if ($273) {
  $use_ins_vol = 0;
 }
 $274 = $sub;
 $275 = ($274|0)==(0|0);
 if ($275) {
  $0 = 0;
  $317 = $0;
  STACKTOP = sp;return ($317|0);
 }
 $276 = $note;
 $277 = ($276|0)>=(0);
 if ($277) {
  $278 = $note;
  $279 = $xc;
  $280 = ((($279)) + 12|0);
  HEAP32[$280>>2] = $278;
  $281 = $1;
  $282 = $3;
  $283 = $xc;
  $284 = ((($283)) + 92|0);
  $285 = HEAP32[$284>>2]|0;
  _virt_voicepos($281,$282,$285);
 }
 $286 = $use_ins_vol;
 $287 = ($286|0)!=(0);
 if ($287) {
  $288 = $sub;
  $289 = HEAP32[$288>>2]|0;
  $290 = $xc;
  $291 = ((($290)) + 80|0);
  HEAP32[$291>>2] = $289;
  $292 = $xc;
  $293 = HEAP32[$292>>2]|0;
  $294 = $293 | 4096;
  HEAP32[$292>>2] = $294;
 }
 $295 = $m;
 $296 = ((($295)) + 1280|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = $297 & 16;
 $299 = ($298|0)!=(0);
 if ($299) {
  $300 = $xc;
  $301 = HEAP32[$300>>2]|0;
  $302 = $301 & 4096;
  $303 = ($302|0)!=(0);
  if ($303) {
   $304 = $xc;
   $305 = ((($304)) + 80|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = $p;
   $308 = ((($307)) + 320|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = Math_imul($306, $309)|0;
   $311 = $m;
   $312 = ((($311)) + 1268|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = (($310|0) / ($313|0))&-1;
   $315 = $xc;
   $316 = ((($315)) + 80|0);
   HEAP32[$316>>2] = $314;
  }
 }
 $0 = 0;
 $317 = $0;
 STACKTOP = sp;return ($317|0);
}
function _read_event_it($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $candidate_ins = 0, $ev = 0, $ins = 0, $ins2 = 0, $is_release = 0, $is_toneporta = 0, $key = 0, $key1 = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $not_same_ins = 0, $note = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond5$not = 0, $or$cond7 = 0, $p = 0, $reset_env = 0, $smp = 0, $smp3 = 0, $sub = 0, $to = 0, $transp = 0, $use_ins_vol = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ev = sp + 104|0;
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 624|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*440)|0)|0);
 $xc = $12;
 $13 = $2;
 ;HEAP8[$ev>>0]=HEAP8[$13>>0]|0;HEAP8[$ev+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$ev+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$ev+3>>0]=HEAP8[$13+3>>0]|0;HEAP8[$ev+4>>0]=HEAP8[$13+4>>0]|0;HEAP8[$ev+5>>0]=HEAP8[$13+5>>0]|0;HEAP8[$ev+6>>0]=HEAP8[$13+6>>0]|0;HEAP8[$ev+7>>0]=HEAP8[$13+7>>0]|0;
 $14 = ((($ev)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)!=(0);
 if ($16) {
  $17 = $xc;
  $18 = ((($17)) + 412|0);
  HEAP32[$18>>2] = 0;
 } else {
  $19 = HEAP8[$ev>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $xc;
   $23 = ((($22)) + 412|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $xc;
    $27 = ((($26)) + 412|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $28&255;
    $30 = ((($ev)) + 1|0);
    HEAP8[$30>>0] = $29;
    $31 = $xc;
    $32 = ((($31)) + 412|0);
    HEAP32[$32>>2] = 0;
   }
  }
 }
 $33 = $xc;
 HEAP32[$33>>2] = 0;
 $note = -1;
 $34 = HEAP8[$ev>>0]|0;
 $35 = $34&255;
 $key = $35;
 $not_same_ins = 0;
 $new_invalid_ins = 0;
 $is_toneporta = 0;
 $is_release = 0;
 $reset_env = 0;
 $use_ins_vol = 0;
 $36 = $xc;
 $37 = ((($36)) + 44|0);
 $38 = HEAP32[$37>>2]|0;
 $candidate_ins = $38;
 $39 = ((($ev)) + 1|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)!=(0);
 do {
  if ($42) {
   $43 = ((($ev)) + 1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $mod;
   $47 = ((($46)) + 140|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)<=($48|0);
   if ($49) {
    $50 = HEAP8[$ev>>0]|0;
    $51 = $50&255;
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = HEAP8[$ev>>0]|0;
     $54 = $53&255;
     $55 = ($54|0)<=(121);
     if ($55) {
      $56 = ((($ev)) + 1|0);
      $57 = HEAP8[$56>>0]|0;
      $58 = $57&255;
      $59 = (($58) - 1)|0;
      $ins = $59;
      $60 = HEAP8[$ev>>0]|0;
      $61 = $60&255;
      $62 = (($61) - 1)|0;
      $key1 = $62;
      $63 = $ins;
      $64 = $mod;
      $65 = ((($64)) + 140|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($63|0)<($66|0);
      if ($67) {
       $68 = $key1;
       $69 = $ins;
       $70 = $mod;
       $71 = ((($70)) + 176|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (($72) + (($69*764)|0)|0);
       $74 = ((($73)) + 512|0);
       $75 = (($74) + ($68<<1)|0);
       $76 = HEAP8[$75>>0]|0;
       $77 = $76&255;
       $smp = $77;
       $78 = $smp;
       $79 = ($78|0)==(255);
       if (!($79)) {
        $80 = $smp;
        $81 = $mod;
        $82 = ((($81)) + 144|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($80|0)>=($83|0);
        if (!($84)) {
         break;
        }
       }
       $85 = $ins;
       $candidate_ins = $85;
       ;HEAP8[$ev>>0]=0|0;HEAP8[$ev+1>>0]=0|0;HEAP8[$ev+2>>0]=0|0;HEAP8[$ev+3>>0]=0|0;HEAP8[$ev+4>>0]=0|0;HEAP8[$ev+5>>0]=0|0;HEAP8[$ev+6>>0]=0|0;HEAP8[$ev+7>>0]=0|0;
      }
     }
    }
   }
  }
 } while(0);
 $86 = ((($ev)) + 3|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = ($88|0)==(3);
 if ($89) {
  label = 20;
 } else {
  $90 = ((($ev)) + 3|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)==(5);
  if ($93) {
   label = 20;
  } else {
   $94 = ((($ev)) + 3|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = ($96|0)==(122);
   if ($97) {
    label = 20;
   } else {
    $98 = ((($ev)) + 5|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ($100|0)==(3);
    if ($101) {
     label = 20;
    } else {
     $102 = ((($ev)) + 5|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103&255;
     $105 = ($104|0)==(5);
     if ($105) {
      label = 20;
     } else {
      $106 = ((($ev)) + 5|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107&255;
      $109 = ($108|0)==(122);
      if ($109) {
       label = 20;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 20) {
  $is_toneporta = 1;
 }
 $110 = $xc;
 $111 = ((($110)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 3;
 $114 = ($113|0)!=(0);
 if ($114) {
  $is_release = 1;
 }
 $115 = $m;
 $116 = ((($115)) + 1280|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 & 32768;
 $119 = ($118|0)!=(0);
 if (!($119)) {
  $120 = $1;
  $121 = $3;
  $122 = (_virt_mapchannel($120,$121)|0);
  $123 = ($122|0)<(0);
  if ($123) {
   $is_toneporta = 0;
  }
 }
 $124 = ((($ev)) + 1|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = ($125<<24>>24)!=(0);
 do {
  if ($126) {
   $127 = ((($ev)) + 1|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = (($129) - 1)|0;
   $ins2 = $130;
   $131 = $is_release;
   $132 = ($131|0)!=(0);
   $133 = $is_toneporta;
   $134 = ($133|0)!=(0);
   $or$cond = $132 & $134;
   if ($or$cond) {
    $135 = $xc;
    $136 = ((($135)) + 44|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $ins2;
    $139 = ($137|0)!=($138|0);
    if ($139) {
     label = 29;
    }
   } else {
    label = 29;
   }
   if ((label|0) == 29) {
    $140 = $xc;
    $141 = HEAP32[$140>>2]|0;
    $142 = $141 | 2048;
    HEAP32[$140>>2] = $142;
    $use_ins_vol = 1;
    $reset_env = 1;
   }
   $143 = $xc;
   $144 = ((($143)) + 4|0);
   HEAP32[$144>>2] = 0;
   $145 = $ins2;
   $146 = $mod;
   $147 = ((($146)) + 140|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = ($145>>>0)<($148>>>0);
   if ($149) {
    $150 = $ins2;
    $151 = $mod;
    $152 = ((($151)) + 176|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($153) + (($150*764)|0)|0);
    $155 = ((($154)) + 36|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)>(0);
    if ($157) {
     $158 = $key;
     $159 = ($158|0)!=(0);
     do {
      if (!($159)) {
       $160 = $xc;
       $161 = ((($160)) + 44|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = $ins2;
       $164 = ($162|0)==($163|0);
       $165 = $xc;
       if ($164) {
        $166 = HEAP32[$165>>2]|0;
        $167 = $166 | 2048;
        HEAP32[$165>>2] = $167;
        $use_ins_vol = 1;
        break;
       } else {
        $168 = ((($165)) + 16|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = (($169) + 1)|0;
        $key = $170;
        break;
       }
      }
     } while(0);
     $171 = $xc;
     $172 = ((($171)) + 44|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $ins2;
     $175 = ($173|0)!=($174|0);
     if (!($175)) {
      break;
     }
     $176 = $is_toneporta;
     $177 = ($176|0)!=(0);
     if ($177) {
      $178 = $m;
      $179 = ((($178)) + 1280|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $180 & 4194304;
      $182 = ($181|0)!=(0);
      if ($182) {
       break;
      }
     }
     $not_same_ins = 1;
     $183 = $ins2;
     $candidate_ins = $183;
     $184 = $is_toneporta;
     $185 = ($184|0)!=(0);
     if (!($185)) {
      break;
     }
     $186 = $1;
     $187 = $ins2;
     $188 = $key;
     $189 = (_get_subinstrument($186,$187,$188)|0);
     $sub = $189;
     $190 = $sub;
     $191 = ($190|0)!=(0|0);
     if (!($191)) {
      break;
     }
     $192 = $sub;
     $193 = HEAP32[$192>>2]|0;
     $194 = $xc;
     $195 = ((($194)) + 80|0);
     HEAP32[$195>>2] = $193;
     $use_ins_vol = 0;
     break;
    }
   }
   $new_invalid_ins = 1;
   $196 = $xc;
   HEAP32[$196>>2] = 0;
   $use_ins_vol = 0;
  }
 } while(0);
 $197 = $key;
 $198 = ($197|0)==(0);
 $199 = $new_invalid_ins;
 $200 = ($199|0)!=(0);
 $or$cond3 = $198 | $200;
 do {
  if (!($or$cond3)) {
   $201 = $xc;
   $202 = HEAP32[$201>>2]|0;
   $203 = $202 | 65536;
   HEAP32[$201>>2] = $203;
   $204 = $key;
   $205 = ($204|0)==(131);
   if ($205) {
    $206 = $xc;
    $207 = ((($206)) + 8|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $208 | 1;
    HEAP32[$207>>2] = $209;
    $reset_env = 0;
    $use_ins_vol = 0;
    break;
   }
   $210 = $key;
   $211 = ($210|0)==(130);
   if ($211) {
    $212 = $xc;
    $213 = ((($212)) + 8|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = $214 | 12;
    HEAP32[$213>>2] = $215;
    $216 = $xc;
    $217 = ((($216)) + 24|0);
    HEAPF64[$217>>3] = 0.0;
    $218 = $1;
    $219 = $3;
    _virt_resetchannel($218,$219);
    break;
   }
   $220 = $key;
   $221 = ($220|0)==(129);
   if ($221) {
    $222 = $xc;
    $223 = ((($222)) + 8|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $224 | 2;
    HEAP32[$223>>2] = $225;
    $reset_env = 0;
    $use_ins_vol = 0;
    $226 = $m;
    $227 = ((($226)) + 1280|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = $228 & 4194304;
    $230 = ($229|0)!=(0);
    if (!($230)) {
     break;
    }
    $231 = $xc;
    $232 = ((($231)) + 8|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = $233 | 4;
    HEAP32[$232>>2] = $234;
    break;
   }
   $235 = $is_toneporta;
   $236 = ($235|0)!=(0);
   if ($236) {
    $237 = $not_same_ins;
    $238 = ($237|0)!=(0);
    if (!($238)) {
     $239 = $xc;
     $240 = ((($239)) + 8|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = $241 & 4;
     $243 = ($242|0)!=(0);
     if (!($243)) {
      $key = 0;
      break;
     }
    }
    $244 = $xc;
    $245 = HEAP32[$244>>2]|0;
    $246 = $245 | 2048;
    HEAP32[$244>>2] = $246;
    $247 = $xc;
    $248 = ((($247)) + 8|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $249 & -4;
    HEAP32[$248>>2] = $250;
   }
  }
 } while(0);
 $251 = $key;
 $252 = ($251>>>0)<=(121);
 $253 = $key;
 $254 = ($253|0)>(0);
 $or$cond5 = $252 & $254;
 $or$cond5$not = $or$cond5 ^ 1;
 $255 = $new_invalid_ins;
 $256 = ($255|0)!=(0);
 $or$cond7 = $or$cond5$not | $256;
 do {
  if (!($or$cond7)) {
   $257 = $key;
   $258 = (($257) + -1)|0;
   $key = $258;
   $259 = $xc;
   $260 = ((($259)) + 16|0);
   HEAP32[$260>>2] = $258;
   $261 = $xc;
   $262 = ((($261)) + 8|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = $263 & -5;
   HEAP32[$262>>2] = $264;
   $265 = $1;
   $266 = $candidate_ins;
   $267 = $key;
   $268 = (_get_subinstrument($265,$266,$267)|0);
   $sub = $268;
   $269 = $sub;
   $270 = ($269|0)!=(0|0);
   if (!($270)) {
    $338 = $xc;
    HEAP32[$338>>2] = 0;
    $use_ins_vol = 0;
    break;
   }
   $271 = $key;
   $272 = $candidate_ins;
   $273 = $mod;
   $274 = ((($273)) + 176|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = (($275) + (($272*764)|0)|0);
   $277 = ((($276)) + 512|0);
   $278 = (($277) + ($271<<1)|0);
   $279 = ((($278)) + 1|0);
   $280 = HEAP8[$279>>0]|0;
   $281 = $280 << 24 >> 24;
   $transp = $281;
   $282 = $key;
   $283 = $sub;
   $284 = ((($283)) + 12|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = (($282) + ($285))|0;
   $287 = $transp;
   $288 = (($286) + ($287))|0;
   $note = $288;
   $289 = $sub;
   $290 = ((($289)) + 40|0);
   $291 = HEAP32[$290>>2]|0;
   $smp3 = $291;
   $292 = $smp3;
   $293 = $mod;
   $294 = ((($293)) + 144|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = ($292|0)>=($295|0);
   if ($296) {
    label = 60;
   } else {
    $297 = $smp3;
    $298 = $mod;
    $299 = ((($298)) + 180|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (($300) + (($297*52)|0)|0);
    $302 = ((($301)) + 32|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = ($303|0)==(0);
    if ($304) {
     label = 60;
    }
   }
   if ((label|0) == 60) {
    $smp3 = -1;
   }
   $305 = $1;
   $306 = $3;
   $307 = $candidate_ins;
   $308 = $smp3;
   $309 = $note;
   $310 = $sub;
   $311 = ((($310)) + 44|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = $sub;
   $314 = ((($313)) + 48|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = $sub;
   $317 = ((($316)) + 52|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (_virt_setpatch($305,$306,$307,$308,$309,$312,$315,$318)|0);
   $to = $319;
   $320 = $to;
   $321 = ($320|0)<(0);
   if ($321) {
    $0 = -1;
    $506 = $0;
    STACKTOP = sp;return ($506|0);
   }
   $322 = $to;
   $323 = $3;
   $324 = ($322|0)!=($323|0);
   if ($324) {
    $325 = $p;
    $326 = $to;
    $327 = $3;
    _copy_channel($325,$326,$327);
    $328 = $to;
    $329 = $p;
    $330 = ((($329)) + 624|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = (($331) + (($328*440)|0)|0);
    HEAP32[$332>>2] = 0;
   }
   $333 = $smp3;
   $334 = ($333|0)>=(0);
   if ($334) {
    $335 = $smp3;
    $336 = $xc;
    $337 = ((($336)) + 56|0);
    HEAP32[$337>>2] = $335;
   }
  }
 } while(0);
 $339 = $is_toneporta;
 $340 = ($339|0)!=(0);
 if ($340) {
  $341 = $m;
  $342 = ((($341)) + 1280|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $343 & 4194304;
  $345 = ($344|0)!=(0);
  if ($345) {
   $346 = ((($ev)) + 1|0);
   $347 = HEAP8[$346>>0]|0;
   $348 = $347&255;
   $349 = ($348|0)!=(0);
   if ($349) {
    $350 = $1;
    $351 = $xc;
    _reset_envelopes($350,$351,0);
   }
  }
 }
 $352 = ((($ev)) + 1|0);
 $353 = HEAP8[$352>>0]|0;
 $354 = $353&255;
 $355 = ($354|0)!=(0);
 if ($355) {
  $356 = $xc;
  $357 = ((($356)) + 8|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = $358 & 16;
  $360 = ($359|0)!=(0);
  if ($360) {
   $361 = $1;
   $362 = $xc;
   _reset_envelopes($361,$362,1);
  }
 }
 $363 = $candidate_ins;
 $364 = $mod;
 $365 = ((($364)) + 140|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = ($363>>>0)<($366>>>0);
 if ($367) {
  $368 = $candidate_ins;
  $369 = $mod;
  $370 = ((($369)) + 176|0);
  $371 = HEAP32[$370>>2]|0;
  $372 = (($371) + (($368*764)|0)|0);
  $373 = ((($372)) + 36|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = ($374|0)>(0);
  if ($375) {
   $376 = $xc;
   $377 = ((($376)) + 44|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $candidate_ins;
   $380 = ($378|0)!=($379|0);
   if ($380) {
    $381 = $1;
    $382 = $xc;
    _reset_envelopes($381,$382,1);
   }
   $383 = $candidate_ins;
   $384 = $xc;
   $385 = ((($384)) + 44|0);
   HEAP32[$385>>2] = $383;
  }
 }
 $386 = $1;
 $387 = $xc;
 $388 = ((($387)) + 44|0);
 $389 = HEAP32[$388>>2]|0;
 $390 = $xc;
 $391 = ((($390)) + 16|0);
 $392 = HEAP32[$391>>2]|0;
 $393 = (_get_subinstrument($386,$389,$392)|0);
 $sub = $393;
 $394 = $1;
 $395 = $note;
 $396 = $sub;
 $397 = $xc;
 $398 = $is_toneporta;
 _set_effect_defaults($394,$395,$396,$397,$398);
 $399 = $sub;
 $400 = ($399|0)!=(0|0);
 do {
  if ($400) {
   $401 = $note;
   $402 = ($401|0)>=(0);
   if ($402) {
    $403 = $sub;
    $404 = ((($403)) + 8|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = ($405|0)>=(0);
    if ($406) {
     $407 = $sub;
     $408 = ((($407)) + 8|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = $xc;
     $411 = ((($410)) + 344|0);
     HEAP32[$411>>2] = $409;
    }
    $412 = $1;
    $413 = $xc;
    $414 = $xc;
    $415 = ((($414)) + 8|0);
    $416 = HEAP32[$415>>2]|0;
    $417 = $416 & 8;
    $418 = ($417|0)!=(0);
    $419 = $418 ^ 1;
    $420 = $419 ^ 1;
    $421 = $420&1;
    _reset_envelopes($412,$413,$421);
    $422 = $xc;
    $423 = ((($422)) + 8|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $424 & -9;
    HEAP32[$423>>2] = $425;
    break;
   } else {
    $426 = ((($ev)) + 1|0);
    $427 = HEAP8[$426>>0]|0;
    $428 = ($427<<24>>24)!=(0);
    if (!($428)) {
     break;
    }
    $429 = $sub;
    $430 = ((($429)) + 8|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = ($431|0)>=(0);
    if (!($432)) {
     break;
    }
    $433 = $sub;
    $434 = ((($433)) + 8|0);
    $435 = HEAP32[$434>>2]|0;
    $436 = $xc;
    $437 = ((($436)) + 344|0);
    HEAP32[$437>>2] = $435;
    break;
   }
  }
 } while(0);
 $438 = ((($ev)) + 2|0);
 $439 = HEAP8[$438>>0]|0;
 $440 = ($439<<24>>24)!=(0);
 if ($440) {
  $441 = ((($ev)) + 2|0);
  $442 = HEAP8[$441>>0]|0;
  $443 = $442&255;
  $444 = (($443) - 1)|0;
  $445 = $xc;
  $446 = ((($445)) + 80|0);
  HEAP32[$446>>2] = $444;
  $447 = $xc;
  $448 = HEAP32[$447>>2]|0;
  $449 = $448 | 4096;
  HEAP32[$447>>2] = $449;
 }
 $450 = $xc;
 $451 = ((($450)) + 92|0);
 HEAP32[$451>>2] = 0;
 $452 = $1;
 $453 = $xc;
 $454 = $3;
 $455 = HEAP8[$ev>>0]|0;
 $456 = ((($ev)) + 3|0);
 $457 = HEAP8[$456>>0]|0;
 $458 = ((($ev)) + 4|0);
 $459 = HEAP8[$458>>0]|0;
 _process_fx($452,$453,$454,$455,$457,$459,0);
 $460 = $1;
 $461 = $xc;
 $462 = $3;
 $463 = HEAP8[$ev>>0]|0;
 $464 = ((($ev)) + 5|0);
 $465 = HEAP8[$464>>0]|0;
 $466 = ((($ev)) + 6|0);
 $467 = HEAP8[$466>>0]|0;
 _process_fx($460,$461,$462,$463,$465,$467,1);
 $468 = $1;
 $469 = $note;
 $470 = $sub;
 $471 = $xc;
 $472 = $is_toneporta;
 _set_period($468,$469,$470,$471,$472);
 $473 = $xc;
 $474 = HEAP32[$473>>2]|0;
 $475 = $474 & 4096;
 $476 = ($475|0)!=(0);
 if ($476) {
  $use_ins_vol = 0;
 }
 $477 = $sub;
 $478 = ($477|0)==(0|0);
 if ($478) {
  $0 = 0;
  $506 = $0;
  STACKTOP = sp;return ($506|0);
 }
 $479 = $note;
 $480 = ($479|0)>=(0);
 if ($480) {
  $481 = $note;
  $482 = $xc;
  $483 = ((($482)) + 12|0);
  HEAP32[$483>>2] = $481;
  $484 = $1;
  $485 = $3;
  $486 = $xc;
  $487 = ((($486)) + 92|0);
  $488 = HEAP32[$487>>2]|0;
  _virt_voicepos($484,$485,$488);
 }
 $489 = $reset_env;
 $490 = ($489|0)!=(0);
 if ($490) {
  $491 = $xc;
  $492 = ((($491)) + 8|0);
  $493 = HEAP32[$492>>2]|0;
  $494 = $493 & -4;
  HEAP32[$492>>2] = $494;
  $495 = $xc;
  $496 = ((($495)) + 72|0);
  HEAP32[$496>>2] = 65536;
 }
 $497 = $use_ins_vol;
 $498 = ($497|0)!=(0);
 if ($498) {
  $499 = $sub;
  $500 = HEAP32[$499>>2]|0;
  $501 = $xc;
  $502 = ((($501)) + 80|0);
  HEAP32[$502>>2] = $500;
  $503 = $xc;
  $504 = HEAP32[$503>>2]|0;
  $505 = $504 | 4096;
  HEAP32[$503>>2] = $505;
 }
 $0 = 0;
 $506 = $0;
 STACKTOP = sp;return ($506|0);
}
function _read_event_med($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $finetune = 0, $ins = 0, $is_toneporta = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $note = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $smp = 0, $sub = 0, $transp = 0, $use_ins_vol = 0, $xc = 0;
 var $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 624|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*440)|0)|0);
 $xc = $12;
 $new_invalid_ins = 0;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(3);
 if ($18) {
  label = 3;
 } else {
  $19 = $2;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $is_toneporta = 1;
 }
 $24 = $2;
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $2;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $2;
   $34 = ((($33)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (($36) - 1)|0;
   $ins = $37;
   $use_ins_vol = 1;
   $38 = $xc;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 | 2048;
   HEAP32[$38>>2] = $40;
   $41 = $xc;
   $42 = ((($41)) + 72|0);
   HEAP32[$42>>2] = 65536;
   $43 = $xc;
   $44 = ((($43)) + 92|0);
   HEAP32[$44>>2] = 0;
   $45 = $xc;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & -4;
   HEAP32[$46>>2] = $48;
   $49 = $ins;
   $50 = $mod;
   $51 = ((($50)) + 140|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49>>>0)<($52>>>0);
   do {
    if ($53) {
     $54 = $ins;
     $55 = $mod;
     $56 = ((($55)) + 176|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + (($54*764)|0)|0);
     $59 = ((($58)) + 36|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)>(0);
     if ($61) {
      $62 = $is_toneporta;
      $63 = ($62|0)!=(0);
      if (!($63)) {
       $76 = $ins;
       $77 = $xc;
       $78 = ((($77)) + 44|0);
       HEAP32[$78>>2] = $76;
       break;
      }
      $64 = $1;
      $65 = $ins;
      $66 = $2;
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $69 = (_get_subinstrument($64,$65,$68)|0);
      $sub = $69;
      $70 = $sub;
      $71 = ($70|0)!=(0|0);
      if ($71) {
       $72 = $sub;
       $73 = HEAP32[$72>>2]|0;
       $74 = $xc;
       $75 = ((($74)) + 80|0);
       HEAP32[$75>>2] = $73;
       $use_ins_vol = 0;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
   } while(0);
   if ((label|0) == 12) {
    $new_invalid_ins = 1;
    $79 = $1;
    $80 = $3;
    _virt_resetchannel($79,$80);
   }
   $81 = $xc;
   $82 = ((($81)) + 400|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ((($83)) + 48|0);
   HEAP32[$84>>2] = 0;
   $85 = $xc;
   $86 = ((($85)) + 400|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($87)) + 52|0);
   HEAP32[$88>>2] = 0;
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $89 = $2;
  $90 = ((($89)) + 1|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = $2;
   $95 = HEAP8[$94>>0]|0;
   $96 = ($95<<24>>24)!=(0);
   if (!($96)) {
    $use_ins_vol = 1;
   }
  }
 }
 $97 = $2;
 $98 = HEAP8[$97>>0]|0;
 $99 = ($98<<24>>24)!=(0);
 do {
  if ($99) {
   $100 = $xc;
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 | 65536;
   HEAP32[$100>>2] = $102;
   $103 = $2;
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = ($105|0)==(129);
   if ($106) {
    $107 = $xc;
    $108 = ((($107)) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = $109 | 2;
    HEAP32[$108>>2] = $110;
    $use_ins_vol = 0;
    break;
   }
   $111 = $2;
   $112 = HEAP8[$111>>0]|0;
   $113 = $112&255;
   $114 = ($113|0)==(130);
   if ($114) {
    $115 = $xc;
    $116 = ((($115)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $117 | 4;
    HEAP32[$116>>2] = $118;
    $119 = $xc;
    $120 = ((($119)) + 24|0);
    HEAPF64[$120>>3] = 0.0;
    $121 = $1;
    $122 = $3;
    _virt_resetchannel($121,$122);
    break;
   }
   $123 = $is_toneporta;
   $124 = ($123|0)!=(0);
   if (!($124)) {
    $125 = $xc;
    $126 = ((($125)) + 44|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $mod;
    $129 = ((($128)) + 140|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($127>>>0)<($130>>>0);
    if ($131) {
     $132 = $xc;
     $133 = ((($132)) + 44|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $mod;
     $136 = ((($135)) + 176|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + (($134*764)|0)|0);
     $139 = ((($138)) + 36|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)>(0);
     if ($141) {
      $142 = $xc;
      $143 = ((($142)) + 44|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = $mod;
      $146 = ((($145)) + 176|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($147) + (($144*764)|0)|0);
      $xxi = $148;
      $149 = $2;
      $150 = HEAP8[$149>>0]|0;
      $151 = $150&255;
      $152 = (($151) - 1)|0;
      $153 = $xc;
      $154 = ((($153)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = $xc;
      $156 = ((($155)) + 8|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = $157 & -5;
      HEAP32[$156>>2] = $158;
      $159 = $xc;
      $160 = ((($159)) + 32|0);
      HEAPF64[$160>>3] = 0.0;
      $161 = $xxi;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)>(1);
      if ($164) {
       $165 = $xxi;
       $166 = ((($165)) + 760|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)!=(0|0);
       if ($168) {
        $169 = $xxi;
        $170 = ((($169)) + 760|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(133303461);
        if ($173) {
         $174 = $xxi;
         $175 = ((($174)) + 760|0);
         $176 = HEAP32[$175>>2]|0;
         $177 = ((($176)) + 4|0);
         $178 = HEAP32[$177>>2]|0;
         $179 = ($178|0)==(0);
         if ($179) {
          $180 = $xxi;
          $181 = ((($180)) + 760|0);
          $182 = HEAP32[$181>>2]|0;
          $183 = ((($182)) + 8|0);
          $184 = HEAP32[$183>>2]|0;
          $185 = ($184|0)==(0);
          if ($185) {
           $186 = $xc;
           $187 = ((($186)) + 32|0);
           HEAPF64[$187>>3] = 2.0;
          }
         }
        }
       }
      }
      $188 = $1;
      $189 = $xc;
      $190 = ((($189)) + 44|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = $xc;
      $193 = ((($192)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = (_get_subinstrument($188,$191,$194)|0);
      $sub = $195;
      $196 = $new_invalid_ins;
      $197 = ($196|0)==(0);
      $198 = $sub;
      $199 = ($198|0)!=(0|0);
      $or$cond = $197 & $199;
      $200 = $xc;
      if (!($or$cond)) {
       HEAP32[$200>>2] = 0;
       $use_ins_vol = 0;
       break;
      }
      $201 = ((($200)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = $xxi;
      $204 = ((($203)) + 512|0);
      $205 = (($204) + ($202<<1)|0);
      $206 = ((($205)) + 1|0);
      $207 = HEAP8[$206>>0]|0;
      $208 = $207 << 24 >> 24;
      $transp = $208;
      $209 = $xc;
      $210 = ((($209)) + 16|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = $sub;
      $213 = ((($212)) + 12|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = (($211) + ($214))|0;
      $216 = $transp;
      $217 = (($215) + ($216))|0;
      $note = $217;
      $218 = $sub;
      $219 = ((($218)) + 40|0);
      $220 = HEAP32[$219>>2]|0;
      $smp = $220;
      $221 = $smp;
      $222 = $mod;
      $223 = ((($222)) + 180|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = (($224) + (($221*52)|0)|0);
      $226 = ((($225)) + 32|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ($227|0)==(0);
      if ($228) {
       $smp = -1;
      }
      $229 = $smp;
      $230 = ($229|0)>=(0);
      if ($230) {
       $231 = $smp;
       $232 = $mod;
       $233 = ((($232)) + 144|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = ($231|0)<($234|0);
       if ($235) {
        $236 = $1;
        $237 = $3;
        $238 = $xc;
        $239 = ((($238)) + 44|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = $smp;
        $242 = $note;
        (_virt_setpatch($236,$237,$240,$241,$242,0,0,0)|0);
        $243 = $smp;
        $244 = $xc;
        $245 = ((($244)) + 56|0);
        HEAP32[$245>>2] = $243;
       }
      }
     }
    }
   }
  }
 } while(0);
 $246 = $1;
 $247 = $xc;
 $248 = ((($247)) + 44|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = $xc;
 $251 = ((($250)) + 16|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (_get_subinstrument($246,$249,$252)|0);
 $sub = $253;
 $254 = $xc;
 $255 = ((($254)) + 40|0);
 $256 = HEAP32[$255>>2]|0;
 $finetune = $256;
 $257 = $1;
 $258 = $note;
 $259 = $sub;
 $260 = $xc;
 $261 = $is_toneporta;
 _set_effect_defaults($257,$258,$259,$260,$261);
 $262 = $2;
 $263 = ((($262)) + 1|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = ($264<<24>>24)!=(0);
 if (!($265)) {
  $266 = $finetune;
  $267 = $xc;
  $268 = ((($267)) + 40|0);
  HEAP32[$268>>2] = $266;
 }
 $269 = $2;
 $270 = ((($269)) + 1|0);
 $271 = HEAP8[$270>>0]|0;
 $272 = $271&255;
 $273 = ($272|0)!=(0);
 $274 = $sub;
 $275 = ($274|0)!=(0|0);
 $or$cond3 = $273 & $275;
 if ($or$cond3) {
  $276 = $1;
  $277 = $xc;
  _reset_envelopes($276,$277,0);
 }
 $278 = $2;
 $279 = ((($278)) + 2|0);
 $280 = HEAP8[$279>>0]|0;
 $281 = ($280<<24>>24)!=(0);
 if ($281) {
  $282 = $2;
  $283 = ((($282)) + 2|0);
  $284 = HEAP8[$283>>0]|0;
  $285 = $284&255;
  $286 = (($285) - 1)|0;
  $287 = $xc;
  $288 = ((($287)) + 80|0);
  HEAP32[$288>>2] = $286;
  $289 = $xc;
  $290 = HEAP32[$289>>2]|0;
  $291 = $290 | 4096;
  HEAP32[$289>>2] = $291;
 }
 $292 = $1;
 $293 = $xc;
 $294 = $3;
 $295 = $2;
 $296 = HEAP8[$295>>0]|0;
 $297 = $2;
 $298 = ((($297)) + 5|0);
 $299 = HEAP8[$298>>0]|0;
 $300 = $2;
 $301 = ((($300)) + 6|0);
 $302 = HEAP8[$301>>0]|0;
 _process_fx($292,$293,$294,$296,$299,$302,1);
 $303 = $1;
 $304 = $xc;
 $305 = $3;
 $306 = $2;
 $307 = HEAP8[$306>>0]|0;
 $308 = $2;
 $309 = ((($308)) + 3|0);
 $310 = HEAP8[$309>>0]|0;
 $311 = $2;
 $312 = ((($311)) + 4|0);
 $313 = HEAP8[$312>>0]|0;
 _process_fx($303,$304,$305,$307,$310,$313,0);
 $314 = $1;
 $315 = $note;
 $316 = $sub;
 $317 = $xc;
 $318 = $is_toneporta;
 _set_period($314,$315,$316,$317,$318);
 $319 = $xc;
 $320 = HEAP32[$319>>2]|0;
 $321 = $320 & 4096;
 $322 = ($321|0)!=(0);
 if ($322) {
  $use_ins_vol = 0;
 }
 $323 = $sub;
 $324 = ($323|0)==(0|0);
 if ($324) {
  $0 = 0;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 $325 = $note;
 $326 = ($325|0)>=(0);
 if ($326) {
  $327 = $note;
  $328 = $xc;
  $329 = ((($328)) + 12|0);
  HEAP32[$329>>2] = $327;
  $330 = $1;
  $331 = $3;
  $332 = $xc;
  $333 = ((($332)) + 92|0);
  $334 = HEAP32[$333>>2]|0;
  _virt_voicepos($330,$331,$334);
 }
 $335 = $use_ins_vol;
 $336 = ($335|0)!=(0);
 if ($336) {
  $337 = $sub;
  $338 = HEAP32[$337>>2]|0;
  $339 = $xc;
  $340 = ((($339)) + 80|0);
  HEAP32[$340>>2] = $338;
  $341 = $xc;
  $342 = HEAP32[$341>>2]|0;
  $343 = $342 | 4096;
  HEAP32[$341>>2] = $343;
 }
 $0 = 0;
 $344 = $0;
 STACKTOP = sp;return ($344|0);
}
function _get_subinstrument($ctx,$ins,$key) {
 $ctx = $ctx|0;
 $ins = $ins|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $instrument = 0, $m = 0, $mapped = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $ins;
 $3 = $key;
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $2;
 $8 = ($7|0)>=(0);
 if ($8) {
  $9 = $2;
  $10 = $mod;
  $11 = ((($10)) + 140|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if ($13) {
   $14 = $2;
   $15 = $mod;
   $16 = ((($15)) + 176|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + (($14*764)|0)|0);
   $instrument = $18;
   $19 = $3;
   $20 = ($19|0)>=(0);
   $21 = $3;
   $22 = ($21|0)<(121);
   $or$cond = $20 & $22;
   if ($or$cond) {
    $23 = $3;
    $24 = $instrument;
    $25 = ((($24)) + 512|0);
    $26 = (($25) + ($23<<1)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $mapped = $28;
    $29 = $mapped;
    $30 = ($29|0)!=(255);
    $31 = $mapped;
    $32 = ($31|0)>=(0);
    $or$cond3 = $30 & $32;
    if ($or$cond3) {
     $33 = $mapped;
     $34 = $instrument;
     $35 = ((($34)) + 36|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($33|0)<($36|0);
     if ($37) {
      $38 = $mapped;
      $39 = $instrument;
      $40 = ((($39)) + 756|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($41) + ($38<<6)|0);
      $0 = $42;
      $43 = $0;
      STACKTOP = sp;return ($43|0);
     }
    }
   }
  }
 }
 $0 = 0;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _set_effect_defaults($ctx,$note,$sub,$xc,$is_toneporta) {
 $ctx = $ctx|0;
 $note = $note|0;
 $sub = $sub|0;
 $xc = $xc|0;
 $is_toneporta = $is_toneporta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $note;
 $2 = $sub;
 $3 = $xc;
 $4 = $is_toneporta;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 $8 = ($7|0)>=(0);
 $or$cond = $6 & $8;
 if (!($or$cond)) {
  $70 = $3;
  $71 = ((($70)) + 64|0);
  HEAP32[$71>>2] = 0;
  $72 = $3;
  $73 = ((($72)) + 224|0);
  HEAP32[$73>>2] = 0;
  $74 = $3;
  $75 = ((($74)) + 164|0);
  HEAP8[$75>>0] = 0;
  $76 = $3;
  $77 = ((($76)) + 164|0);
  $78 = ((($77)) + 20|0);
  HEAP32[$78>>2] = 0;
  $79 = $3;
  $80 = ((($79)) + 164|0);
  $81 = ((($80)) + 16|0);
  HEAP32[$81>>2] = 1;
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = ((($12)) + 40|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = ((($17)) + 84|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = ((($19)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 128;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $2;
  $25 = ((($24)) + 56|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) - 128)|0;
  $28 = $27<<1;
  $29 = $3;
  $30 = ((($29)) + 376|0);
  HEAP32[$30>>2] = $28;
 }
 $31 = $2;
 $32 = ((($31)) + 60|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & 128;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $2;
  $37 = ((($36)) + 60|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) - 128)|0;
  $40 = $39<<1;
  $41 = $3;
  $42 = ((($41)) + 376|0);
  $43 = ((($42)) + 4|0);
  HEAP32[$43>>2] = $40;
 }
 $44 = $3;
 $45 = ((($44)) + 192|0);
 $46 = $2;
 $47 = ((($46)) + 24|0);
 $48 = HEAP32[$47>>2]|0;
 _set_lfo_depth($45,$48);
 $49 = $3;
 $50 = ((($49)) + 192|0);
 $51 = $2;
 $52 = ((($51)) + 28|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 >> 2;
 _set_lfo_rate($50,$54);
 $55 = $3;
 $56 = ((($55)) + 192|0);
 $57 = $2;
 $58 = ((($57)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 _set_lfo_waveform($56,$59);
 $60 = $2;
 $61 = ((($60)) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $3;
 $64 = ((($63)) + 192|0);
 $65 = ((($64)) + 16|0);
 HEAP32[$65>>2] = $62;
 $66 = $3;
 $67 = ((($66)) + 104|0);
 _set_lfo_phase($67,0);
 $68 = $3;
 $69 = ((($68)) + 124|0);
 _set_lfo_phase($69,0);
 $70 = $3;
 $71 = ((($70)) + 64|0);
 HEAP32[$71>>2] = 0;
 $72 = $3;
 $73 = ((($72)) + 224|0);
 HEAP32[$73>>2] = 0;
 $74 = $3;
 $75 = ((($74)) + 164|0);
 HEAP8[$75>>0] = 0;
 $76 = $3;
 $77 = ((($76)) + 164|0);
 $78 = ((($77)) + 20|0);
 HEAP32[$78>>2] = 0;
 $79 = $3;
 $80 = ((($79)) + 164|0);
 $81 = ((($80)) + 16|0);
 HEAP32[$81>>2] = 1;
 STACKTOP = sp;return;
}
function _reset_envelopes($ctx,$xc,$force_cut) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $force_cut = $force_cut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $force_cut;
 $3 = $0;
 $4 = $1;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_get_instrument($3,$6)|0);
 $xxi = $7;
 $8 = $2;
 $9 = ($8|0)!=(0);
 if ($9) {
  label = 3;
 } else {
  $10 = $xxi;
  $11 = ((($10)) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 ^ -1;
  $14 = $13 & 32;
  $15 = ($14|0)!=(0);
  if ($15) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $16 = $1;
  $17 = ((($16)) + 96|0);
  HEAP16[$17>>1] = 0;
 }
 $18 = $2;
 $19 = ($18|0)!=(0);
 if ($19) {
  label = 6;
 } else {
  $20 = $xxi;
  $21 = ((($20)) + 200|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 ^ -1;
  $24 = $23 & 32;
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $26 = $1;
  $27 = ((($26)) + 98|0);
  HEAP16[$27>>1] = 0;
 }
 $28 = $2;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $30 = $xxi;
  $31 = ((($30)) + 356|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 ^ -1;
  $34 = $33 & 32;
  $35 = ($34|0)!=(0);
  if (!($35)) {
   $38 = $1;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -17;
   HEAP32[$39>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $36 = $1;
 $37 = ((($36)) + 100|0);
 HEAP16[$37>>1] = 0;
 $38 = $1;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & -17;
 HEAP32[$39>>2] = $41;
 STACKTOP = sp;return;
}
function _set_period($ctx,$note,$sub,$xc,$is_toneporta) {
 $ctx = $ctx|0;
 $note = $note|0;
 $sub = $sub|0;
 $xc = $xc|0;
 $is_toneporta = $is_toneporta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $note;
 $2 = $sub;
 $3 = $xc;
 $4 = $is_toneporta;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $9 = $1;
 $10 = ($9|0)>=(0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = $3;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $m;
 $16 = ((($15)) + 1280|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4096;
 $19 = $3;
 $20 = ((($19)) + 32|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+_note_to_period($11,$14,$18,$21));
 $23 = $3;
 $24 = ((($23)) + 312|0);
 HEAPF64[$24>>3] = $22;
 $25 = $3;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = !($27 < 1.0);
 $29 = $4;
 $30 = ($29|0)!=(0);
 $or$cond3 = $28 & $30;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $31 = $3;
 $32 = ((($31)) + 312|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $3;
 $35 = ((($34)) + 24|0);
 HEAPF64[$35>>3] = $33;
 STACKTOP = sp;return;
}
function _copy_channel($p,$to,$from) {
 $p = $p|0;
 $to = $to|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $to;
 $2 = $from;
 $3 = $1;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $2;
 $7 = ($5|0)!=($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 624|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*440)|0)|0);
 $13 = $2;
 $14 = $0;
 $15 = ((($14)) + 624|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($13*440)|0)|0);
 _memcpy(($12|0),($17|0),440)|0;
 STACKTOP = sp;return;
}
function _read8($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_fgetc(($1|0))|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _read8s($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_fgetc(($1|0))|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _read16l($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $b;
 $8 = $7 << 8;
 $9 = $a;
 $10 = $8 | $9;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _read16b($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $a;
 $8 = $7 << 8;
 $9 = $b;
 $10 = $8 | $9;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _read24l($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $c;
 $11 = $10 << 16;
 $12 = $b;
 $13 = $12 << 8;
 $14 = $11 | $13;
 $15 = $a;
 $16 = $14 | $15;
 STACKTOP = sp;return ($16|0);
}
function _read24b($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $a;
 $11 = $10 << 16;
 $12 = $b;
 $13 = $12 << 8;
 $14 = $11 | $13;
 $15 = $c;
 $16 = $14 | $15;
 STACKTOP = sp;return ($16|0);
}
function _read32l($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $0;
 $11 = (_read8($10)|0);
 $12 = $11&255;
 $d = $12;
 $13 = $d;
 $14 = $13 << 24;
 $15 = $c;
 $16 = $15 << 16;
 $17 = $14 | $16;
 $18 = $b;
 $19 = $18 << 8;
 $20 = $17 | $19;
 $21 = $a;
 $22 = $20 | $21;
 STACKTOP = sp;return ($22|0);
}
function _read32b($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $0;
 $11 = (_read8($10)|0);
 $12 = $11&255;
 $d = $12;
 $13 = $a;
 $14 = $13 << 24;
 $15 = $b;
 $16 = $15 << 16;
 $17 = $14 | $16;
 $18 = $c;
 $19 = $18 << 8;
 $20 = $17 | $19;
 $21 = $d;
 $22 = $20 | $21;
 STACKTOP = sp;return ($22|0);
}
function _readmem16l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $b;
 $9 = $8 << 8;
 $10 = $a;
 $11 = $9 | $10;
 $12 = $11&65535;
 STACKTOP = sp;return ($12|0);
}
function _readmem16b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $a;
 $9 = $8 << 8;
 $10 = $b;
 $11 = $9 | $10;
 $12 = $11&65535;
 STACKTOP = sp;return ($12|0);
}
function _readmem24l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $c;
 $13 = $12 << 16;
 $14 = $b;
 $15 = $14 << 8;
 $16 = $13 | $15;
 $17 = $a;
 $18 = $16 | $17;
 STACKTOP = sp;return ($18|0);
}
function _readmem24b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $a;
 $13 = $12 << 16;
 $14 = $b;
 $15 = $14 << 8;
 $16 = $13 | $15;
 $17 = $c;
 $18 = $16 | $17;
 STACKTOP = sp;return ($18|0);
}
function _readmem32l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $0;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $d = $15;
 $16 = $d;
 $17 = $16 << 24;
 $18 = $c;
 $19 = $18 << 16;
 $20 = $17 | $19;
 $21 = $b;
 $22 = $21 << 8;
 $23 = $20 | $22;
 $24 = $a;
 $25 = $23 | $24;
 STACKTOP = sp;return ($25|0);
}
function _readmem32b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $0;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $d = $15;
 $16 = $a;
 $17 = $16 << 24;
 $18 = $b;
 $19 = $18 << 16;
 $20 = $17 | $19;
 $21 = $c;
 $22 = $21 << 8;
 $23 = $20 | $22;
 $24 = $d;
 $25 = $23 | $24;
 STACKTOP = sp;return ($25|0);
}
function _write8($f,$b) {
 $f = $f|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $b;
 $2 = $1;
 $3 = $2&255;
 $4 = $0;
 (_fputc(($3|0),($4|0))|0);
 STACKTOP = sp;return;
}
function _write16b($f,$w) {
 $f = $f|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $w;
 $2 = $0;
 $3 = $1;
 $4 = $3&65535;
 $5 = $4 & 65280;
 $6 = $5 >> 8;
 $7 = $6&255;
 _write8($2,$7);
 $8 = $0;
 $9 = $1;
 $10 = $9&65535;
 $11 = $10 & 255;
 $12 = $11&255;
 _write8($8,$12);
 STACKTOP = sp;return;
}
function _write32b($f,$w) {
 $f = $f|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $w;
 $2 = $0;
 $3 = $1;
 $4 = $3 & -16777216;
 $5 = $4 >>> 24;
 $6 = $5&255;
 _write8($2,$6);
 $7 = $0;
 $8 = $1;
 $9 = $8 & 16711680;
 $10 = $9 >>> 16;
 $11 = $10&255;
 _write8($7,$11);
 $12 = $0;
 $13 = $1;
 $14 = $13 & 65280;
 $15 = $14 >>> 8;
 $16 = $15&255;
 _write8($12,$16);
 $17 = $0;
 $18 = $1;
 $19 = $18 & 255;
 $20 = $19&255;
 _write8($17,$20);
 STACKTOP = sp;return;
}
function _move_data($out,$in,$len) {
 $out = $out|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0;
 var $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $out;
 $1 = $in;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = ($3|0)>(1024);
  $5 = $2;
  $6 = $4 ? 1024 : $5;
  $7 = $1;
  $8 = (_fread(($buf|0),1,($6|0),($7|0))|0);
  $l = $8;
  $9 = $l;
  $10 = $0;
  (_fwrite(($buf|0),1,($9|0),($10|0))|0);
  $11 = $l;
  $12 = $2;
  $13 = (($12) - ($11))|0;
  $2 = $13;
  $14 = $l;
  $15 = ($14|0)>(0);
  $16 = $2;
  $17 = ($16|0)>(0);
  $18 = $15 ? $17 : 0;
  if (!($18)) {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _mkstemp($template) {
 $template = $template|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $XXXXXX = 0, $count = 0, $fd = 0, $len = 0, $v = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $v = sp;
 $1 = $template;
 $2 = $1;
 $3 = (_strlen(($2|0))|0);
 $len = $3;
 $4 = $len;
 $5 = ($4|0)<(6);
 if (!($5)) {
  $6 = $len;
  $7 = (($6) - 6)|0;
  $8 = $1;
  $9 = (($8) + ($7)|0);
  $10 = (_strncmp($9,12192,6)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = $len;
   $13 = (($12) - 6)|0;
   $14 = $1;
   $15 = (($14) + ($13)|0);
   $XXXXXX = $15;
   $16 = (_getpid()|0);
   $17 = ($16|0)<(0);
   $18 = $17 << 31 >> 31;
   $19 = 12200;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (_i64Add(($21|0),($24|0),($16|0),($18|0))|0);
   $26 = tempRet0;
   $27 = 12200;
   $28 = $27;
   HEAP32[$28>>2] = $25;
   $29 = (($27) + 4)|0;
   $30 = $29;
   HEAP32[$30>>2] = $26;
   $count = 0;
   while(1) {
    $31 = $count;
    $32 = ($31|0)<(10000);
    if (!($32)) {
     label = 9;
     break;
    }
    $33 = 12200;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = $v;
    $40 = $39;
    HEAP32[$40>>2] = $35;
    $41 = (($39) + 4)|0;
    $42 = $41;
    HEAP32[$42>>2] = $38;
    $43 = $v;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (___uremdi3(($45|0),($48|0),62,0)|0);
    $50 = tempRet0;
    $51 = (12208 + ($49)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $XXXXXX;
    HEAP8[$53>>0] = $52;
    $54 = $v;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = (___udivdi3(($56|0),($59|0),62,0)|0);
    $61 = tempRet0;
    $62 = $v;
    $63 = $62;
    HEAP32[$63>>2] = $60;
    $64 = (($62) + 4)|0;
    $65 = $64;
    HEAP32[$65>>2] = $61;
    $66 = $v;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (___uremdi3(($68|0),($71|0),62,0)|0);
    $73 = tempRet0;
    $74 = (12208 + ($72)|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $XXXXXX;
    $77 = ((($76)) + 1|0);
    HEAP8[$77>>0] = $75;
    $78 = $v;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = (___udivdi3(($80|0),($83|0),62,0)|0);
    $85 = tempRet0;
    $86 = $v;
    $87 = $86;
    HEAP32[$87>>2] = $84;
    $88 = (($86) + 4)|0;
    $89 = $88;
    HEAP32[$89>>2] = $85;
    $90 = $v;
    $91 = $90;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + 4)|0;
    $94 = $93;
    $95 = HEAP32[$94>>2]|0;
    $96 = (___uremdi3(($92|0),($95|0),62,0)|0);
    $97 = tempRet0;
    $98 = (12208 + ($96)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $XXXXXX;
    $101 = ((($100)) + 2|0);
    HEAP8[$101>>0] = $99;
    $102 = $v;
    $103 = $102;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($102) + 4)|0;
    $106 = $105;
    $107 = HEAP32[$106>>2]|0;
    $108 = (___udivdi3(($104|0),($107|0),62,0)|0);
    $109 = tempRet0;
    $110 = $v;
    $111 = $110;
    HEAP32[$111>>2] = $108;
    $112 = (($110) + 4)|0;
    $113 = $112;
    HEAP32[$113>>2] = $109;
    $114 = $v;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $120 = (___uremdi3(($116|0),($119|0),62,0)|0);
    $121 = tempRet0;
    $122 = (12208 + ($120)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $XXXXXX;
    $125 = ((($124)) + 3|0);
    HEAP8[$125>>0] = $123;
    $126 = $v;
    $127 = $126;
    $128 = HEAP32[$127>>2]|0;
    $129 = (($126) + 4)|0;
    $130 = $129;
    $131 = HEAP32[$130>>2]|0;
    $132 = (___udivdi3(($128|0),($131|0),62,0)|0);
    $133 = tempRet0;
    $134 = $v;
    $135 = $134;
    HEAP32[$135>>2] = $132;
    $136 = (($134) + 4)|0;
    $137 = $136;
    HEAP32[$137>>2] = $133;
    $138 = $v;
    $139 = $138;
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + 4)|0;
    $142 = $141;
    $143 = HEAP32[$142>>2]|0;
    $144 = (___uremdi3(($140|0),($143|0),62,0)|0);
    $145 = tempRet0;
    $146 = (12208 + ($144)|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $XXXXXX;
    $149 = ((($148)) + 4|0);
    HEAP8[$149>>0] = $147;
    $150 = $v;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($150) + 4)|0;
    $154 = $153;
    $155 = HEAP32[$154>>2]|0;
    $156 = (___udivdi3(($152|0),($155|0),62,0)|0);
    $157 = tempRet0;
    $158 = $v;
    $159 = $158;
    HEAP32[$159>>2] = $156;
    $160 = (($158) + 4)|0;
    $161 = $160;
    HEAP32[$161>>2] = $157;
    $162 = $v;
    $163 = $162;
    $164 = HEAP32[$163>>2]|0;
    $165 = (($162) + 4)|0;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (___uremdi3(($164|0),($167|0),62,0)|0);
    $169 = tempRet0;
    $170 = (12208 + ($168)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $XXXXXX;
    $173 = ((($172)) + 5|0);
    HEAP8[$173>>0] = $171;
    $174 = $1;
    HEAP32[$vararg_buffer>>2] = 384;
    $175 = (_open(($174|0),194,($vararg_buffer|0))|0);
    $fd = $175;
    $176 = $fd;
    $177 = ($176|0)>=(0);
    if ($177) {
     label = 7;
     break;
    }
    $179 = 12200;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $182 = (($179) + 4)|0;
    $183 = $182;
    $184 = HEAP32[$183>>2]|0;
    $185 = (_i64Add(($181|0),($184|0),7777,0)|0);
    $186 = tempRet0;
    $187 = 12200;
    $188 = $187;
    HEAP32[$188>>2] = $185;
    $189 = (($187) + 4)|0;
    $190 = $189;
    HEAP32[$190>>2] = $186;
    $191 = $count;
    $192 = (($191) + 1)|0;
    $count = $192;
   }
   if ((label|0) == 7) {
    $178 = $fd;
    $0 = $178;
    $194 = $0;
    STACKTOP = sp;return ($194|0);
   }
   else if ((label|0) == 9) {
    $193 = $1;
    HEAP8[$193>>0] = 0;
    $0 = -1;
    $194 = $0;
    STACKTOP = sp;return ($194|0);
   }
  }
 }
 $0 = -1;
 $194 = $0;
 STACKTOP = sp;return ($194|0);
}
function _MD5Init($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $0;
 HEAP32[$7>>2] = 1732584193;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = -271733879;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = -1732584194;
 $12 = $0;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = 271733878;
 STACKTOP = sp;return;
}
function _MD5Update($ctx,$input,$len) {
 $ctx = $ctx|0;
 $input = $input|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $have = 0, $need = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $input;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_bitshift64Lshr(($7|0),($10|0),3)|0);
 $12 = tempRet0;
 $13 = $11 & 63;
 $have = $13;
 $14 = $have;
 $15 = (64 - ($14))|0;
 $need = $15;
 $16 = $2;
 $17 = (_bitshift64Shl(($16|0),0,3)|0);
 $18 = tempRet0;
 $19 = $0;
 $20 = ((($19)) + 16|0);
 $21 = $20;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_i64Add(($23|0),($26|0),($17|0),($18|0))|0);
 $28 = tempRet0;
 $29 = $20;
 $30 = $29;
 HEAP32[$30>>2] = $27;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $2;
 $34 = $need;
 $35 = ($33>>>0)>=($34>>>0);
 L1: do {
  if ($35) {
   $36 = $have;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $0;
    $39 = ((($38)) + 24|0);
    $40 = $have;
    $41 = (($39) + ($40)|0);
    $42 = $1;
    $43 = $need;
    _memcpy(($41|0),($42|0),($43|0))|0;
    $44 = $0;
    $45 = $0;
    $46 = ((($45)) + 24|0);
    _MD5Transform($44,$46);
    $47 = $need;
    $48 = $1;
    $49 = (($48) + ($47)|0);
    $1 = $49;
    $50 = $need;
    $51 = $2;
    $52 = (($51) - ($50))|0;
    $2 = $52;
    $have = 0;
   }
   while(1) {
    $53 = $2;
    $54 = ($53>>>0)>=(64);
    if (!($54)) {
     break L1;
    }
    $55 = $0;
    $56 = $1;
    _MD5Transform($55,$56);
    $57 = $1;
    $58 = ((($57)) + 64|0);
    $1 = $58;
    $59 = $2;
    $60 = (($59) - 64)|0;
    $2 = $60;
   }
  }
 } while(0);
 $61 = $2;
 $62 = ($61|0)!=(0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = $0;
 $64 = ((($63)) + 24|0);
 $65 = $have;
 $66 = (($64) + ($65)|0);
 $67 = $1;
 $68 = $2;
 _memcpy(($66|0),($67|0),($68|0))|0;
 STACKTOP = sp;return;
}
function _MD5Final($digest,$ctx) {
 $digest = $digest|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $digest;
 $1 = $ctx;
 $2 = $1;
 _MD5Pad($2);
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 24;
  $12 = $11&255;
  $13 = $0;
  $14 = $i;
  $15 = $14<<2;
  $16 = (($13) + ($15)|0);
  $17 = ((($16)) + 3|0);
  HEAP8[$17>>0] = $12;
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 16;
  $23 = $22&255;
  $24 = $0;
  $25 = $i;
  $26 = $25<<2;
  $27 = (($24) + ($26)|0);
  $28 = ((($27)) + 2|0);
  HEAP8[$28>>0] = $23;
  $29 = $i;
  $30 = $1;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 >>> 8;
  $34 = $33&255;
  $35 = $0;
  $36 = $i;
  $37 = $36<<2;
  $38 = (($35) + ($37)|0);
  $39 = ((($38)) + 1|0);
  HEAP8[$39>>0] = $34;
  $40 = $i;
  $41 = $1;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43&255;
  $45 = $0;
  $46 = $i;
  $47 = $46<<2;
  $48 = (($45) + ($47)|0);
  HEAP8[$48>>0] = $44;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $1;
 dest=$51; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MD5Transform($state,$block) {
 $state = $state|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $in = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $in = sp;
 $0 = $state;
 $1 = $block;
 $2 = $1;
 dest=$in; src=$2; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $c = $10;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $d = $13;
 $14 = $d;
 $15 = $b;
 $16 = $c;
 $17 = $d;
 $18 = $16 ^ $17;
 $19 = $15 & $18;
 $20 = $14 ^ $19;
 $21 = HEAP32[$in>>2]|0;
 $22 = (($20) + ($21))|0;
 $23 = (($22) + -680876936)|0;
 $24 = $a;
 $25 = (($24) + ($23))|0;
 $a = $25;
 $26 = $a;
 $27 = $26 << 7;
 $28 = $a;
 $29 = $28 >>> 25;
 $30 = $27 | $29;
 $a = $30;
 $31 = $b;
 $32 = $a;
 $33 = (($32) + ($31))|0;
 $a = $33;
 $34 = $c;
 $35 = $a;
 $36 = $b;
 $37 = $c;
 $38 = $36 ^ $37;
 $39 = $35 & $38;
 $40 = $34 ^ $39;
 $41 = ((($in)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + ($42))|0;
 $44 = (($43) + -389564586)|0;
 $45 = $d;
 $46 = (($45) + ($44))|0;
 $d = $46;
 $47 = $d;
 $48 = $47 << 12;
 $49 = $d;
 $50 = $49 >>> 20;
 $51 = $48 | $50;
 $d = $51;
 $52 = $a;
 $53 = $d;
 $54 = (($53) + ($52))|0;
 $d = $54;
 $55 = $b;
 $56 = $d;
 $57 = $a;
 $58 = $b;
 $59 = $57 ^ $58;
 $60 = $56 & $59;
 $61 = $55 ^ $60;
 $62 = ((($in)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + ($63))|0;
 $65 = (($64) + 606105819)|0;
 $66 = $c;
 $67 = (($66) + ($65))|0;
 $c = $67;
 $68 = $c;
 $69 = $68 << 17;
 $70 = $c;
 $71 = $70 >>> 15;
 $72 = $69 | $71;
 $c = $72;
 $73 = $d;
 $74 = $c;
 $75 = (($74) + ($73))|0;
 $c = $75;
 $76 = $a;
 $77 = $c;
 $78 = $d;
 $79 = $a;
 $80 = $78 ^ $79;
 $81 = $77 & $80;
 $82 = $76 ^ $81;
 $83 = ((($in)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + ($84))|0;
 $86 = (($85) + -1044525330)|0;
 $87 = $b;
 $88 = (($87) + ($86))|0;
 $b = $88;
 $89 = $b;
 $90 = $89 << 22;
 $91 = $b;
 $92 = $91 >>> 10;
 $93 = $90 | $92;
 $b = $93;
 $94 = $c;
 $95 = $b;
 $96 = (($95) + ($94))|0;
 $b = $96;
 $97 = $d;
 $98 = $b;
 $99 = $c;
 $100 = $d;
 $101 = $99 ^ $100;
 $102 = $98 & $101;
 $103 = $97 ^ $102;
 $104 = ((($in)) + 16|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + ($105))|0;
 $107 = (($106) + -176418897)|0;
 $108 = $a;
 $109 = (($108) + ($107))|0;
 $a = $109;
 $110 = $a;
 $111 = $110 << 7;
 $112 = $a;
 $113 = $112 >>> 25;
 $114 = $111 | $113;
 $a = $114;
 $115 = $b;
 $116 = $a;
 $117 = (($116) + ($115))|0;
 $a = $117;
 $118 = $c;
 $119 = $a;
 $120 = $b;
 $121 = $c;
 $122 = $120 ^ $121;
 $123 = $119 & $122;
 $124 = $118 ^ $123;
 $125 = ((($in)) + 20|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124) + ($126))|0;
 $128 = (($127) + 1200080426)|0;
 $129 = $d;
 $130 = (($129) + ($128))|0;
 $d = $130;
 $131 = $d;
 $132 = $131 << 12;
 $133 = $d;
 $134 = $133 >>> 20;
 $135 = $132 | $134;
 $d = $135;
 $136 = $a;
 $137 = $d;
 $138 = (($137) + ($136))|0;
 $d = $138;
 $139 = $b;
 $140 = $d;
 $141 = $a;
 $142 = $b;
 $143 = $141 ^ $142;
 $144 = $140 & $143;
 $145 = $139 ^ $144;
 $146 = ((($in)) + 24|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($145) + ($147))|0;
 $149 = (($148) + -1473231341)|0;
 $150 = $c;
 $151 = (($150) + ($149))|0;
 $c = $151;
 $152 = $c;
 $153 = $152 << 17;
 $154 = $c;
 $155 = $154 >>> 15;
 $156 = $153 | $155;
 $c = $156;
 $157 = $d;
 $158 = $c;
 $159 = (($158) + ($157))|0;
 $c = $159;
 $160 = $a;
 $161 = $c;
 $162 = $d;
 $163 = $a;
 $164 = $162 ^ $163;
 $165 = $161 & $164;
 $166 = $160 ^ $165;
 $167 = ((($in)) + 28|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (($166) + ($168))|0;
 $170 = (($169) + -45705983)|0;
 $171 = $b;
 $172 = (($171) + ($170))|0;
 $b = $172;
 $173 = $b;
 $174 = $173 << 22;
 $175 = $b;
 $176 = $175 >>> 10;
 $177 = $174 | $176;
 $b = $177;
 $178 = $c;
 $179 = $b;
 $180 = (($179) + ($178))|0;
 $b = $180;
 $181 = $d;
 $182 = $b;
 $183 = $c;
 $184 = $d;
 $185 = $183 ^ $184;
 $186 = $182 & $185;
 $187 = $181 ^ $186;
 $188 = ((($in)) + 32|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = (($187) + ($189))|0;
 $191 = (($190) + 1770035416)|0;
 $192 = $a;
 $193 = (($192) + ($191))|0;
 $a = $193;
 $194 = $a;
 $195 = $194 << 7;
 $196 = $a;
 $197 = $196 >>> 25;
 $198 = $195 | $197;
 $a = $198;
 $199 = $b;
 $200 = $a;
 $201 = (($200) + ($199))|0;
 $a = $201;
 $202 = $c;
 $203 = $a;
 $204 = $b;
 $205 = $c;
 $206 = $204 ^ $205;
 $207 = $203 & $206;
 $208 = $202 ^ $207;
 $209 = ((($in)) + 36|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = (($208) + ($210))|0;
 $212 = (($211) + -1958414417)|0;
 $213 = $d;
 $214 = (($213) + ($212))|0;
 $d = $214;
 $215 = $d;
 $216 = $215 << 12;
 $217 = $d;
 $218 = $217 >>> 20;
 $219 = $216 | $218;
 $d = $219;
 $220 = $a;
 $221 = $d;
 $222 = (($221) + ($220))|0;
 $d = $222;
 $223 = $b;
 $224 = $d;
 $225 = $a;
 $226 = $b;
 $227 = $225 ^ $226;
 $228 = $224 & $227;
 $229 = $223 ^ $228;
 $230 = ((($in)) + 40|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (($229) + ($231))|0;
 $233 = (($232) + -42063)|0;
 $234 = $c;
 $235 = (($234) + ($233))|0;
 $c = $235;
 $236 = $c;
 $237 = $236 << 17;
 $238 = $c;
 $239 = $238 >>> 15;
 $240 = $237 | $239;
 $c = $240;
 $241 = $d;
 $242 = $c;
 $243 = (($242) + ($241))|0;
 $c = $243;
 $244 = $a;
 $245 = $c;
 $246 = $d;
 $247 = $a;
 $248 = $246 ^ $247;
 $249 = $245 & $248;
 $250 = $244 ^ $249;
 $251 = ((($in)) + 44|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (($250) + ($252))|0;
 $254 = (($253) + -1990404162)|0;
 $255 = $b;
 $256 = (($255) + ($254))|0;
 $b = $256;
 $257 = $b;
 $258 = $257 << 22;
 $259 = $b;
 $260 = $259 >>> 10;
 $261 = $258 | $260;
 $b = $261;
 $262 = $c;
 $263 = $b;
 $264 = (($263) + ($262))|0;
 $b = $264;
 $265 = $d;
 $266 = $b;
 $267 = $c;
 $268 = $d;
 $269 = $267 ^ $268;
 $270 = $266 & $269;
 $271 = $265 ^ $270;
 $272 = ((($in)) + 48|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = (($271) + ($273))|0;
 $275 = (($274) + 1804603682)|0;
 $276 = $a;
 $277 = (($276) + ($275))|0;
 $a = $277;
 $278 = $a;
 $279 = $278 << 7;
 $280 = $a;
 $281 = $280 >>> 25;
 $282 = $279 | $281;
 $a = $282;
 $283 = $b;
 $284 = $a;
 $285 = (($284) + ($283))|0;
 $a = $285;
 $286 = $c;
 $287 = $a;
 $288 = $b;
 $289 = $c;
 $290 = $288 ^ $289;
 $291 = $287 & $290;
 $292 = $286 ^ $291;
 $293 = ((($in)) + 52|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($292) + ($294))|0;
 $296 = (($295) + -40341101)|0;
 $297 = $d;
 $298 = (($297) + ($296))|0;
 $d = $298;
 $299 = $d;
 $300 = $299 << 12;
 $301 = $d;
 $302 = $301 >>> 20;
 $303 = $300 | $302;
 $d = $303;
 $304 = $a;
 $305 = $d;
 $306 = (($305) + ($304))|0;
 $d = $306;
 $307 = $b;
 $308 = $d;
 $309 = $a;
 $310 = $b;
 $311 = $309 ^ $310;
 $312 = $308 & $311;
 $313 = $307 ^ $312;
 $314 = ((($in)) + 56|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = (($313) + ($315))|0;
 $317 = (($316) + -1502002290)|0;
 $318 = $c;
 $319 = (($318) + ($317))|0;
 $c = $319;
 $320 = $c;
 $321 = $320 << 17;
 $322 = $c;
 $323 = $322 >>> 15;
 $324 = $321 | $323;
 $c = $324;
 $325 = $d;
 $326 = $c;
 $327 = (($326) + ($325))|0;
 $c = $327;
 $328 = $a;
 $329 = $c;
 $330 = $d;
 $331 = $a;
 $332 = $330 ^ $331;
 $333 = $329 & $332;
 $334 = $328 ^ $333;
 $335 = ((($in)) + 60|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = (($334) + ($336))|0;
 $338 = (($337) + 1236535329)|0;
 $339 = $b;
 $340 = (($339) + ($338))|0;
 $b = $340;
 $341 = $b;
 $342 = $341 << 22;
 $343 = $b;
 $344 = $343 >>> 10;
 $345 = $342 | $344;
 $b = $345;
 $346 = $c;
 $347 = $b;
 $348 = (($347) + ($346))|0;
 $b = $348;
 $349 = $c;
 $350 = $d;
 $351 = $b;
 $352 = $c;
 $353 = $351 ^ $352;
 $354 = $350 & $353;
 $355 = $349 ^ $354;
 $356 = ((($in)) + 4|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = (($355) + ($357))|0;
 $359 = (($358) + -165796510)|0;
 $360 = $a;
 $361 = (($360) + ($359))|0;
 $a = $361;
 $362 = $a;
 $363 = $362 << 5;
 $364 = $a;
 $365 = $364 >>> 27;
 $366 = $363 | $365;
 $a = $366;
 $367 = $b;
 $368 = $a;
 $369 = (($368) + ($367))|0;
 $a = $369;
 $370 = $b;
 $371 = $c;
 $372 = $a;
 $373 = $b;
 $374 = $372 ^ $373;
 $375 = $371 & $374;
 $376 = $370 ^ $375;
 $377 = ((($in)) + 24|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = (($376) + ($378))|0;
 $380 = (($379) + -1069501632)|0;
 $381 = $d;
 $382 = (($381) + ($380))|0;
 $d = $382;
 $383 = $d;
 $384 = $383 << 9;
 $385 = $d;
 $386 = $385 >>> 23;
 $387 = $384 | $386;
 $d = $387;
 $388 = $a;
 $389 = $d;
 $390 = (($389) + ($388))|0;
 $d = $390;
 $391 = $a;
 $392 = $b;
 $393 = $d;
 $394 = $a;
 $395 = $393 ^ $394;
 $396 = $392 & $395;
 $397 = $391 ^ $396;
 $398 = ((($in)) + 44|0);
 $399 = HEAP32[$398>>2]|0;
 $400 = (($397) + ($399))|0;
 $401 = (($400) + 643717713)|0;
 $402 = $c;
 $403 = (($402) + ($401))|0;
 $c = $403;
 $404 = $c;
 $405 = $404 << 14;
 $406 = $c;
 $407 = $406 >>> 18;
 $408 = $405 | $407;
 $c = $408;
 $409 = $d;
 $410 = $c;
 $411 = (($410) + ($409))|0;
 $c = $411;
 $412 = $d;
 $413 = $a;
 $414 = $c;
 $415 = $d;
 $416 = $414 ^ $415;
 $417 = $413 & $416;
 $418 = $412 ^ $417;
 $419 = HEAP32[$in>>2]|0;
 $420 = (($418) + ($419))|0;
 $421 = (($420) + -373897302)|0;
 $422 = $b;
 $423 = (($422) + ($421))|0;
 $b = $423;
 $424 = $b;
 $425 = $424 << 20;
 $426 = $b;
 $427 = $426 >>> 12;
 $428 = $425 | $427;
 $b = $428;
 $429 = $c;
 $430 = $b;
 $431 = (($430) + ($429))|0;
 $b = $431;
 $432 = $c;
 $433 = $d;
 $434 = $b;
 $435 = $c;
 $436 = $434 ^ $435;
 $437 = $433 & $436;
 $438 = $432 ^ $437;
 $439 = ((($in)) + 20|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = (($438) + ($440))|0;
 $442 = (($441) + -701558691)|0;
 $443 = $a;
 $444 = (($443) + ($442))|0;
 $a = $444;
 $445 = $a;
 $446 = $445 << 5;
 $447 = $a;
 $448 = $447 >>> 27;
 $449 = $446 | $448;
 $a = $449;
 $450 = $b;
 $451 = $a;
 $452 = (($451) + ($450))|0;
 $a = $452;
 $453 = $b;
 $454 = $c;
 $455 = $a;
 $456 = $b;
 $457 = $455 ^ $456;
 $458 = $454 & $457;
 $459 = $453 ^ $458;
 $460 = ((($in)) + 40|0);
 $461 = HEAP32[$460>>2]|0;
 $462 = (($459) + ($461))|0;
 $463 = (($462) + 38016083)|0;
 $464 = $d;
 $465 = (($464) + ($463))|0;
 $d = $465;
 $466 = $d;
 $467 = $466 << 9;
 $468 = $d;
 $469 = $468 >>> 23;
 $470 = $467 | $469;
 $d = $470;
 $471 = $a;
 $472 = $d;
 $473 = (($472) + ($471))|0;
 $d = $473;
 $474 = $a;
 $475 = $b;
 $476 = $d;
 $477 = $a;
 $478 = $476 ^ $477;
 $479 = $475 & $478;
 $480 = $474 ^ $479;
 $481 = ((($in)) + 60|0);
 $482 = HEAP32[$481>>2]|0;
 $483 = (($480) + ($482))|0;
 $484 = (($483) + -660478335)|0;
 $485 = $c;
 $486 = (($485) + ($484))|0;
 $c = $486;
 $487 = $c;
 $488 = $487 << 14;
 $489 = $c;
 $490 = $489 >>> 18;
 $491 = $488 | $490;
 $c = $491;
 $492 = $d;
 $493 = $c;
 $494 = (($493) + ($492))|0;
 $c = $494;
 $495 = $d;
 $496 = $a;
 $497 = $c;
 $498 = $d;
 $499 = $497 ^ $498;
 $500 = $496 & $499;
 $501 = $495 ^ $500;
 $502 = ((($in)) + 16|0);
 $503 = HEAP32[$502>>2]|0;
 $504 = (($501) + ($503))|0;
 $505 = (($504) + -405537848)|0;
 $506 = $b;
 $507 = (($506) + ($505))|0;
 $b = $507;
 $508 = $b;
 $509 = $508 << 20;
 $510 = $b;
 $511 = $510 >>> 12;
 $512 = $509 | $511;
 $b = $512;
 $513 = $c;
 $514 = $b;
 $515 = (($514) + ($513))|0;
 $b = $515;
 $516 = $c;
 $517 = $d;
 $518 = $b;
 $519 = $c;
 $520 = $518 ^ $519;
 $521 = $517 & $520;
 $522 = $516 ^ $521;
 $523 = ((($in)) + 36|0);
 $524 = HEAP32[$523>>2]|0;
 $525 = (($522) + ($524))|0;
 $526 = (($525) + 568446438)|0;
 $527 = $a;
 $528 = (($527) + ($526))|0;
 $a = $528;
 $529 = $a;
 $530 = $529 << 5;
 $531 = $a;
 $532 = $531 >>> 27;
 $533 = $530 | $532;
 $a = $533;
 $534 = $b;
 $535 = $a;
 $536 = (($535) + ($534))|0;
 $a = $536;
 $537 = $b;
 $538 = $c;
 $539 = $a;
 $540 = $b;
 $541 = $539 ^ $540;
 $542 = $538 & $541;
 $543 = $537 ^ $542;
 $544 = ((($in)) + 56|0);
 $545 = HEAP32[$544>>2]|0;
 $546 = (($543) + ($545))|0;
 $547 = (($546) + -1019803690)|0;
 $548 = $d;
 $549 = (($548) + ($547))|0;
 $d = $549;
 $550 = $d;
 $551 = $550 << 9;
 $552 = $d;
 $553 = $552 >>> 23;
 $554 = $551 | $553;
 $d = $554;
 $555 = $a;
 $556 = $d;
 $557 = (($556) + ($555))|0;
 $d = $557;
 $558 = $a;
 $559 = $b;
 $560 = $d;
 $561 = $a;
 $562 = $560 ^ $561;
 $563 = $559 & $562;
 $564 = $558 ^ $563;
 $565 = ((($in)) + 12|0);
 $566 = HEAP32[$565>>2]|0;
 $567 = (($564) + ($566))|0;
 $568 = (($567) + -187363961)|0;
 $569 = $c;
 $570 = (($569) + ($568))|0;
 $c = $570;
 $571 = $c;
 $572 = $571 << 14;
 $573 = $c;
 $574 = $573 >>> 18;
 $575 = $572 | $574;
 $c = $575;
 $576 = $d;
 $577 = $c;
 $578 = (($577) + ($576))|0;
 $c = $578;
 $579 = $d;
 $580 = $a;
 $581 = $c;
 $582 = $d;
 $583 = $581 ^ $582;
 $584 = $580 & $583;
 $585 = $579 ^ $584;
 $586 = ((($in)) + 32|0);
 $587 = HEAP32[$586>>2]|0;
 $588 = (($585) + ($587))|0;
 $589 = (($588) + 1163531501)|0;
 $590 = $b;
 $591 = (($590) + ($589))|0;
 $b = $591;
 $592 = $b;
 $593 = $592 << 20;
 $594 = $b;
 $595 = $594 >>> 12;
 $596 = $593 | $595;
 $b = $596;
 $597 = $c;
 $598 = $b;
 $599 = (($598) + ($597))|0;
 $b = $599;
 $600 = $c;
 $601 = $d;
 $602 = $b;
 $603 = $c;
 $604 = $602 ^ $603;
 $605 = $601 & $604;
 $606 = $600 ^ $605;
 $607 = ((($in)) + 52|0);
 $608 = HEAP32[$607>>2]|0;
 $609 = (($606) + ($608))|0;
 $610 = (($609) + -1444681467)|0;
 $611 = $a;
 $612 = (($611) + ($610))|0;
 $a = $612;
 $613 = $a;
 $614 = $613 << 5;
 $615 = $a;
 $616 = $615 >>> 27;
 $617 = $614 | $616;
 $a = $617;
 $618 = $b;
 $619 = $a;
 $620 = (($619) + ($618))|0;
 $a = $620;
 $621 = $b;
 $622 = $c;
 $623 = $a;
 $624 = $b;
 $625 = $623 ^ $624;
 $626 = $622 & $625;
 $627 = $621 ^ $626;
 $628 = ((($in)) + 8|0);
 $629 = HEAP32[$628>>2]|0;
 $630 = (($627) + ($629))|0;
 $631 = (($630) + -51403784)|0;
 $632 = $d;
 $633 = (($632) + ($631))|0;
 $d = $633;
 $634 = $d;
 $635 = $634 << 9;
 $636 = $d;
 $637 = $636 >>> 23;
 $638 = $635 | $637;
 $d = $638;
 $639 = $a;
 $640 = $d;
 $641 = (($640) + ($639))|0;
 $d = $641;
 $642 = $a;
 $643 = $b;
 $644 = $d;
 $645 = $a;
 $646 = $644 ^ $645;
 $647 = $643 & $646;
 $648 = $642 ^ $647;
 $649 = ((($in)) + 28|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = (($648) + ($650))|0;
 $652 = (($651) + 1735328473)|0;
 $653 = $c;
 $654 = (($653) + ($652))|0;
 $c = $654;
 $655 = $c;
 $656 = $655 << 14;
 $657 = $c;
 $658 = $657 >>> 18;
 $659 = $656 | $658;
 $c = $659;
 $660 = $d;
 $661 = $c;
 $662 = (($661) + ($660))|0;
 $c = $662;
 $663 = $d;
 $664 = $a;
 $665 = $c;
 $666 = $d;
 $667 = $665 ^ $666;
 $668 = $664 & $667;
 $669 = $663 ^ $668;
 $670 = ((($in)) + 48|0);
 $671 = HEAP32[$670>>2]|0;
 $672 = (($669) + ($671))|0;
 $673 = (($672) + -1926607734)|0;
 $674 = $b;
 $675 = (($674) + ($673))|0;
 $b = $675;
 $676 = $b;
 $677 = $676 << 20;
 $678 = $b;
 $679 = $678 >>> 12;
 $680 = $677 | $679;
 $b = $680;
 $681 = $c;
 $682 = $b;
 $683 = (($682) + ($681))|0;
 $b = $683;
 $684 = $b;
 $685 = $c;
 $686 = $684 ^ $685;
 $687 = $d;
 $688 = $686 ^ $687;
 $689 = ((($in)) + 20|0);
 $690 = HEAP32[$689>>2]|0;
 $691 = (($688) + ($690))|0;
 $692 = (($691) + -378558)|0;
 $693 = $a;
 $694 = (($693) + ($692))|0;
 $a = $694;
 $695 = $a;
 $696 = $695 << 4;
 $697 = $a;
 $698 = $697 >>> 28;
 $699 = $696 | $698;
 $a = $699;
 $700 = $b;
 $701 = $a;
 $702 = (($701) + ($700))|0;
 $a = $702;
 $703 = $a;
 $704 = $b;
 $705 = $703 ^ $704;
 $706 = $c;
 $707 = $705 ^ $706;
 $708 = ((($in)) + 32|0);
 $709 = HEAP32[$708>>2]|0;
 $710 = (($707) + ($709))|0;
 $711 = (($710) + -2022574463)|0;
 $712 = $d;
 $713 = (($712) + ($711))|0;
 $d = $713;
 $714 = $d;
 $715 = $714 << 11;
 $716 = $d;
 $717 = $716 >>> 21;
 $718 = $715 | $717;
 $d = $718;
 $719 = $a;
 $720 = $d;
 $721 = (($720) + ($719))|0;
 $d = $721;
 $722 = $d;
 $723 = $a;
 $724 = $722 ^ $723;
 $725 = $b;
 $726 = $724 ^ $725;
 $727 = ((($in)) + 44|0);
 $728 = HEAP32[$727>>2]|0;
 $729 = (($726) + ($728))|0;
 $730 = (($729) + 1839030562)|0;
 $731 = $c;
 $732 = (($731) + ($730))|0;
 $c = $732;
 $733 = $c;
 $734 = $733 << 16;
 $735 = $c;
 $736 = $735 >>> 16;
 $737 = $734 | $736;
 $c = $737;
 $738 = $d;
 $739 = $c;
 $740 = (($739) + ($738))|0;
 $c = $740;
 $741 = $c;
 $742 = $d;
 $743 = $741 ^ $742;
 $744 = $a;
 $745 = $743 ^ $744;
 $746 = ((($in)) + 56|0);
 $747 = HEAP32[$746>>2]|0;
 $748 = (($745) + ($747))|0;
 $749 = (($748) + -35309556)|0;
 $750 = $b;
 $751 = (($750) + ($749))|0;
 $b = $751;
 $752 = $b;
 $753 = $752 << 23;
 $754 = $b;
 $755 = $754 >>> 9;
 $756 = $753 | $755;
 $b = $756;
 $757 = $c;
 $758 = $b;
 $759 = (($758) + ($757))|0;
 $b = $759;
 $760 = $b;
 $761 = $c;
 $762 = $760 ^ $761;
 $763 = $d;
 $764 = $762 ^ $763;
 $765 = ((($in)) + 4|0);
 $766 = HEAP32[$765>>2]|0;
 $767 = (($764) + ($766))|0;
 $768 = (($767) + -1530992060)|0;
 $769 = $a;
 $770 = (($769) + ($768))|0;
 $a = $770;
 $771 = $a;
 $772 = $771 << 4;
 $773 = $a;
 $774 = $773 >>> 28;
 $775 = $772 | $774;
 $a = $775;
 $776 = $b;
 $777 = $a;
 $778 = (($777) + ($776))|0;
 $a = $778;
 $779 = $a;
 $780 = $b;
 $781 = $779 ^ $780;
 $782 = $c;
 $783 = $781 ^ $782;
 $784 = ((($in)) + 16|0);
 $785 = HEAP32[$784>>2]|0;
 $786 = (($783) + ($785))|0;
 $787 = (($786) + 1272893353)|0;
 $788 = $d;
 $789 = (($788) + ($787))|0;
 $d = $789;
 $790 = $d;
 $791 = $790 << 11;
 $792 = $d;
 $793 = $792 >>> 21;
 $794 = $791 | $793;
 $d = $794;
 $795 = $a;
 $796 = $d;
 $797 = (($796) + ($795))|0;
 $d = $797;
 $798 = $d;
 $799 = $a;
 $800 = $798 ^ $799;
 $801 = $b;
 $802 = $800 ^ $801;
 $803 = ((($in)) + 28|0);
 $804 = HEAP32[$803>>2]|0;
 $805 = (($802) + ($804))|0;
 $806 = (($805) + -155497632)|0;
 $807 = $c;
 $808 = (($807) + ($806))|0;
 $c = $808;
 $809 = $c;
 $810 = $809 << 16;
 $811 = $c;
 $812 = $811 >>> 16;
 $813 = $810 | $812;
 $c = $813;
 $814 = $d;
 $815 = $c;
 $816 = (($815) + ($814))|0;
 $c = $816;
 $817 = $c;
 $818 = $d;
 $819 = $817 ^ $818;
 $820 = $a;
 $821 = $819 ^ $820;
 $822 = ((($in)) + 40|0);
 $823 = HEAP32[$822>>2]|0;
 $824 = (($821) + ($823))|0;
 $825 = (($824) + -1094730640)|0;
 $826 = $b;
 $827 = (($826) + ($825))|0;
 $b = $827;
 $828 = $b;
 $829 = $828 << 23;
 $830 = $b;
 $831 = $830 >>> 9;
 $832 = $829 | $831;
 $b = $832;
 $833 = $c;
 $834 = $b;
 $835 = (($834) + ($833))|0;
 $b = $835;
 $836 = $b;
 $837 = $c;
 $838 = $836 ^ $837;
 $839 = $d;
 $840 = $838 ^ $839;
 $841 = ((($in)) + 52|0);
 $842 = HEAP32[$841>>2]|0;
 $843 = (($840) + ($842))|0;
 $844 = (($843) + 681279174)|0;
 $845 = $a;
 $846 = (($845) + ($844))|0;
 $a = $846;
 $847 = $a;
 $848 = $847 << 4;
 $849 = $a;
 $850 = $849 >>> 28;
 $851 = $848 | $850;
 $a = $851;
 $852 = $b;
 $853 = $a;
 $854 = (($853) + ($852))|0;
 $a = $854;
 $855 = $a;
 $856 = $b;
 $857 = $855 ^ $856;
 $858 = $c;
 $859 = $857 ^ $858;
 $860 = HEAP32[$in>>2]|0;
 $861 = (($859) + ($860))|0;
 $862 = (($861) + -358537222)|0;
 $863 = $d;
 $864 = (($863) + ($862))|0;
 $d = $864;
 $865 = $d;
 $866 = $865 << 11;
 $867 = $d;
 $868 = $867 >>> 21;
 $869 = $866 | $868;
 $d = $869;
 $870 = $a;
 $871 = $d;
 $872 = (($871) + ($870))|0;
 $d = $872;
 $873 = $d;
 $874 = $a;
 $875 = $873 ^ $874;
 $876 = $b;
 $877 = $875 ^ $876;
 $878 = ((($in)) + 12|0);
 $879 = HEAP32[$878>>2]|0;
 $880 = (($877) + ($879))|0;
 $881 = (($880) + -722521979)|0;
 $882 = $c;
 $883 = (($882) + ($881))|0;
 $c = $883;
 $884 = $c;
 $885 = $884 << 16;
 $886 = $c;
 $887 = $886 >>> 16;
 $888 = $885 | $887;
 $c = $888;
 $889 = $d;
 $890 = $c;
 $891 = (($890) + ($889))|0;
 $c = $891;
 $892 = $c;
 $893 = $d;
 $894 = $892 ^ $893;
 $895 = $a;
 $896 = $894 ^ $895;
 $897 = ((($in)) + 24|0);
 $898 = HEAP32[$897>>2]|0;
 $899 = (($896) + ($898))|0;
 $900 = (($899) + 76029189)|0;
 $901 = $b;
 $902 = (($901) + ($900))|0;
 $b = $902;
 $903 = $b;
 $904 = $903 << 23;
 $905 = $b;
 $906 = $905 >>> 9;
 $907 = $904 | $906;
 $b = $907;
 $908 = $c;
 $909 = $b;
 $910 = (($909) + ($908))|0;
 $b = $910;
 $911 = $b;
 $912 = $c;
 $913 = $911 ^ $912;
 $914 = $d;
 $915 = $913 ^ $914;
 $916 = ((($in)) + 36|0);
 $917 = HEAP32[$916>>2]|0;
 $918 = (($915) + ($917))|0;
 $919 = (($918) + -640364487)|0;
 $920 = $a;
 $921 = (($920) + ($919))|0;
 $a = $921;
 $922 = $a;
 $923 = $922 << 4;
 $924 = $a;
 $925 = $924 >>> 28;
 $926 = $923 | $925;
 $a = $926;
 $927 = $b;
 $928 = $a;
 $929 = (($928) + ($927))|0;
 $a = $929;
 $930 = $a;
 $931 = $b;
 $932 = $930 ^ $931;
 $933 = $c;
 $934 = $932 ^ $933;
 $935 = ((($in)) + 48|0);
 $936 = HEAP32[$935>>2]|0;
 $937 = (($934) + ($936))|0;
 $938 = (($937) + -421815835)|0;
 $939 = $d;
 $940 = (($939) + ($938))|0;
 $d = $940;
 $941 = $d;
 $942 = $941 << 11;
 $943 = $d;
 $944 = $943 >>> 21;
 $945 = $942 | $944;
 $d = $945;
 $946 = $a;
 $947 = $d;
 $948 = (($947) + ($946))|0;
 $d = $948;
 $949 = $d;
 $950 = $a;
 $951 = $949 ^ $950;
 $952 = $b;
 $953 = $951 ^ $952;
 $954 = ((($in)) + 60|0);
 $955 = HEAP32[$954>>2]|0;
 $956 = (($953) + ($955))|0;
 $957 = (($956) + 530742520)|0;
 $958 = $c;
 $959 = (($958) + ($957))|0;
 $c = $959;
 $960 = $c;
 $961 = $960 << 16;
 $962 = $c;
 $963 = $962 >>> 16;
 $964 = $961 | $963;
 $c = $964;
 $965 = $d;
 $966 = $c;
 $967 = (($966) + ($965))|0;
 $c = $967;
 $968 = $c;
 $969 = $d;
 $970 = $968 ^ $969;
 $971 = $a;
 $972 = $970 ^ $971;
 $973 = ((($in)) + 8|0);
 $974 = HEAP32[$973>>2]|0;
 $975 = (($972) + ($974))|0;
 $976 = (($975) + -995338651)|0;
 $977 = $b;
 $978 = (($977) + ($976))|0;
 $b = $978;
 $979 = $b;
 $980 = $979 << 23;
 $981 = $b;
 $982 = $981 >>> 9;
 $983 = $980 | $982;
 $b = $983;
 $984 = $c;
 $985 = $b;
 $986 = (($985) + ($984))|0;
 $b = $986;
 $987 = $c;
 $988 = $b;
 $989 = $d;
 $990 = $989 ^ -1;
 $991 = $988 | $990;
 $992 = $987 ^ $991;
 $993 = HEAP32[$in>>2]|0;
 $994 = (($992) + ($993))|0;
 $995 = (($994) + -198630844)|0;
 $996 = $a;
 $997 = (($996) + ($995))|0;
 $a = $997;
 $998 = $a;
 $999 = $998 << 6;
 $1000 = $a;
 $1001 = $1000 >>> 26;
 $1002 = $999 | $1001;
 $a = $1002;
 $1003 = $b;
 $1004 = $a;
 $1005 = (($1004) + ($1003))|0;
 $a = $1005;
 $1006 = $b;
 $1007 = $a;
 $1008 = $c;
 $1009 = $1008 ^ -1;
 $1010 = $1007 | $1009;
 $1011 = $1006 ^ $1010;
 $1012 = ((($in)) + 28|0);
 $1013 = HEAP32[$1012>>2]|0;
 $1014 = (($1011) + ($1013))|0;
 $1015 = (($1014) + 1126891415)|0;
 $1016 = $d;
 $1017 = (($1016) + ($1015))|0;
 $d = $1017;
 $1018 = $d;
 $1019 = $1018 << 10;
 $1020 = $d;
 $1021 = $1020 >>> 22;
 $1022 = $1019 | $1021;
 $d = $1022;
 $1023 = $a;
 $1024 = $d;
 $1025 = (($1024) + ($1023))|0;
 $d = $1025;
 $1026 = $a;
 $1027 = $d;
 $1028 = $b;
 $1029 = $1028 ^ -1;
 $1030 = $1027 | $1029;
 $1031 = $1026 ^ $1030;
 $1032 = ((($in)) + 56|0);
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + ($1033))|0;
 $1035 = (($1034) + -1416354905)|0;
 $1036 = $c;
 $1037 = (($1036) + ($1035))|0;
 $c = $1037;
 $1038 = $c;
 $1039 = $1038 << 15;
 $1040 = $c;
 $1041 = $1040 >>> 17;
 $1042 = $1039 | $1041;
 $c = $1042;
 $1043 = $d;
 $1044 = $c;
 $1045 = (($1044) + ($1043))|0;
 $c = $1045;
 $1046 = $d;
 $1047 = $c;
 $1048 = $a;
 $1049 = $1048 ^ -1;
 $1050 = $1047 | $1049;
 $1051 = $1046 ^ $1050;
 $1052 = ((($in)) + 20|0);
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + ($1053))|0;
 $1055 = (($1054) + -57434055)|0;
 $1056 = $b;
 $1057 = (($1056) + ($1055))|0;
 $b = $1057;
 $1058 = $b;
 $1059 = $1058 << 21;
 $1060 = $b;
 $1061 = $1060 >>> 11;
 $1062 = $1059 | $1061;
 $b = $1062;
 $1063 = $c;
 $1064 = $b;
 $1065 = (($1064) + ($1063))|0;
 $b = $1065;
 $1066 = $c;
 $1067 = $b;
 $1068 = $d;
 $1069 = $1068 ^ -1;
 $1070 = $1067 | $1069;
 $1071 = $1066 ^ $1070;
 $1072 = ((($in)) + 48|0);
 $1073 = HEAP32[$1072>>2]|0;
 $1074 = (($1071) + ($1073))|0;
 $1075 = (($1074) + 1700485571)|0;
 $1076 = $a;
 $1077 = (($1076) + ($1075))|0;
 $a = $1077;
 $1078 = $a;
 $1079 = $1078 << 6;
 $1080 = $a;
 $1081 = $1080 >>> 26;
 $1082 = $1079 | $1081;
 $a = $1082;
 $1083 = $b;
 $1084 = $a;
 $1085 = (($1084) + ($1083))|0;
 $a = $1085;
 $1086 = $b;
 $1087 = $a;
 $1088 = $c;
 $1089 = $1088 ^ -1;
 $1090 = $1087 | $1089;
 $1091 = $1086 ^ $1090;
 $1092 = ((($in)) + 12|0);
 $1093 = HEAP32[$1092>>2]|0;
 $1094 = (($1091) + ($1093))|0;
 $1095 = (($1094) + -1894986606)|0;
 $1096 = $d;
 $1097 = (($1096) + ($1095))|0;
 $d = $1097;
 $1098 = $d;
 $1099 = $1098 << 10;
 $1100 = $d;
 $1101 = $1100 >>> 22;
 $1102 = $1099 | $1101;
 $d = $1102;
 $1103 = $a;
 $1104 = $d;
 $1105 = (($1104) + ($1103))|0;
 $d = $1105;
 $1106 = $a;
 $1107 = $d;
 $1108 = $b;
 $1109 = $1108 ^ -1;
 $1110 = $1107 | $1109;
 $1111 = $1106 ^ $1110;
 $1112 = ((($in)) + 40|0);
 $1113 = HEAP32[$1112>>2]|0;
 $1114 = (($1111) + ($1113))|0;
 $1115 = (($1114) + -1051523)|0;
 $1116 = $c;
 $1117 = (($1116) + ($1115))|0;
 $c = $1117;
 $1118 = $c;
 $1119 = $1118 << 15;
 $1120 = $c;
 $1121 = $1120 >>> 17;
 $1122 = $1119 | $1121;
 $c = $1122;
 $1123 = $d;
 $1124 = $c;
 $1125 = (($1124) + ($1123))|0;
 $c = $1125;
 $1126 = $d;
 $1127 = $c;
 $1128 = $a;
 $1129 = $1128 ^ -1;
 $1130 = $1127 | $1129;
 $1131 = $1126 ^ $1130;
 $1132 = ((($in)) + 4|0);
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + ($1133))|0;
 $1135 = (($1134) + -2054922799)|0;
 $1136 = $b;
 $1137 = (($1136) + ($1135))|0;
 $b = $1137;
 $1138 = $b;
 $1139 = $1138 << 21;
 $1140 = $b;
 $1141 = $1140 >>> 11;
 $1142 = $1139 | $1141;
 $b = $1142;
 $1143 = $c;
 $1144 = $b;
 $1145 = (($1144) + ($1143))|0;
 $b = $1145;
 $1146 = $c;
 $1147 = $b;
 $1148 = $d;
 $1149 = $1148 ^ -1;
 $1150 = $1147 | $1149;
 $1151 = $1146 ^ $1150;
 $1152 = ((($in)) + 32|0);
 $1153 = HEAP32[$1152>>2]|0;
 $1154 = (($1151) + ($1153))|0;
 $1155 = (($1154) + 1873313359)|0;
 $1156 = $a;
 $1157 = (($1156) + ($1155))|0;
 $a = $1157;
 $1158 = $a;
 $1159 = $1158 << 6;
 $1160 = $a;
 $1161 = $1160 >>> 26;
 $1162 = $1159 | $1161;
 $a = $1162;
 $1163 = $b;
 $1164 = $a;
 $1165 = (($1164) + ($1163))|0;
 $a = $1165;
 $1166 = $b;
 $1167 = $a;
 $1168 = $c;
 $1169 = $1168 ^ -1;
 $1170 = $1167 | $1169;
 $1171 = $1166 ^ $1170;
 $1172 = ((($in)) + 60|0);
 $1173 = HEAP32[$1172>>2]|0;
 $1174 = (($1171) + ($1173))|0;
 $1175 = (($1174) + -30611744)|0;
 $1176 = $d;
 $1177 = (($1176) + ($1175))|0;
 $d = $1177;
 $1178 = $d;
 $1179 = $1178 << 10;
 $1180 = $d;
 $1181 = $1180 >>> 22;
 $1182 = $1179 | $1181;
 $d = $1182;
 $1183 = $a;
 $1184 = $d;
 $1185 = (($1184) + ($1183))|0;
 $d = $1185;
 $1186 = $a;
 $1187 = $d;
 $1188 = $b;
 $1189 = $1188 ^ -1;
 $1190 = $1187 | $1189;
 $1191 = $1186 ^ $1190;
 $1192 = ((($in)) + 24|0);
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + ($1193))|0;
 $1195 = (($1194) + -1560198380)|0;
 $1196 = $c;
 $1197 = (($1196) + ($1195))|0;
 $c = $1197;
 $1198 = $c;
 $1199 = $1198 << 15;
 $1200 = $c;
 $1201 = $1200 >>> 17;
 $1202 = $1199 | $1201;
 $c = $1202;
 $1203 = $d;
 $1204 = $c;
 $1205 = (($1204) + ($1203))|0;
 $c = $1205;
 $1206 = $d;
 $1207 = $c;
 $1208 = $a;
 $1209 = $1208 ^ -1;
 $1210 = $1207 | $1209;
 $1211 = $1206 ^ $1210;
 $1212 = ((($in)) + 52|0);
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = (($1211) + ($1213))|0;
 $1215 = (($1214) + 1309151649)|0;
 $1216 = $b;
 $1217 = (($1216) + ($1215))|0;
 $b = $1217;
 $1218 = $b;
 $1219 = $1218 << 21;
 $1220 = $b;
 $1221 = $1220 >>> 11;
 $1222 = $1219 | $1221;
 $b = $1222;
 $1223 = $c;
 $1224 = $b;
 $1225 = (($1224) + ($1223))|0;
 $b = $1225;
 $1226 = $c;
 $1227 = $b;
 $1228 = $d;
 $1229 = $1228 ^ -1;
 $1230 = $1227 | $1229;
 $1231 = $1226 ^ $1230;
 $1232 = ((($in)) + 16|0);
 $1233 = HEAP32[$1232>>2]|0;
 $1234 = (($1231) + ($1233))|0;
 $1235 = (($1234) + -145523070)|0;
 $1236 = $a;
 $1237 = (($1236) + ($1235))|0;
 $a = $1237;
 $1238 = $a;
 $1239 = $1238 << 6;
 $1240 = $a;
 $1241 = $1240 >>> 26;
 $1242 = $1239 | $1241;
 $a = $1242;
 $1243 = $b;
 $1244 = $a;
 $1245 = (($1244) + ($1243))|0;
 $a = $1245;
 $1246 = $b;
 $1247 = $a;
 $1248 = $c;
 $1249 = $1248 ^ -1;
 $1250 = $1247 | $1249;
 $1251 = $1246 ^ $1250;
 $1252 = ((($in)) + 44|0);
 $1253 = HEAP32[$1252>>2]|0;
 $1254 = (($1251) + ($1253))|0;
 $1255 = (($1254) + -1120210379)|0;
 $1256 = $d;
 $1257 = (($1256) + ($1255))|0;
 $d = $1257;
 $1258 = $d;
 $1259 = $1258 << 10;
 $1260 = $d;
 $1261 = $1260 >>> 22;
 $1262 = $1259 | $1261;
 $d = $1262;
 $1263 = $a;
 $1264 = $d;
 $1265 = (($1264) + ($1263))|0;
 $d = $1265;
 $1266 = $a;
 $1267 = $d;
 $1268 = $b;
 $1269 = $1268 ^ -1;
 $1270 = $1267 | $1269;
 $1271 = $1266 ^ $1270;
 $1272 = ((($in)) + 8|0);
 $1273 = HEAP32[$1272>>2]|0;
 $1274 = (($1271) + ($1273))|0;
 $1275 = (($1274) + 718787259)|0;
 $1276 = $c;
 $1277 = (($1276) + ($1275))|0;
 $c = $1277;
 $1278 = $c;
 $1279 = $1278 << 15;
 $1280 = $c;
 $1281 = $1280 >>> 17;
 $1282 = $1279 | $1281;
 $c = $1282;
 $1283 = $d;
 $1284 = $c;
 $1285 = (($1284) + ($1283))|0;
 $c = $1285;
 $1286 = $d;
 $1287 = $c;
 $1288 = $a;
 $1289 = $1288 ^ -1;
 $1290 = $1287 | $1289;
 $1291 = $1286 ^ $1290;
 $1292 = ((($in)) + 36|0);
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + ($1293))|0;
 $1295 = (($1294) + -343485551)|0;
 $1296 = $b;
 $1297 = (($1296) + ($1295))|0;
 $b = $1297;
 $1298 = $b;
 $1299 = $1298 << 21;
 $1300 = $b;
 $1301 = $1300 >>> 11;
 $1302 = $1299 | $1301;
 $b = $1302;
 $1303 = $c;
 $1304 = $b;
 $1305 = (($1304) + ($1303))|0;
 $b = $1305;
 $1306 = $a;
 $1307 = $0;
 $1308 = HEAP32[$1307>>2]|0;
 $1309 = (($1308) + ($1306))|0;
 HEAP32[$1307>>2] = $1309;
 $1310 = $b;
 $1311 = $0;
 $1312 = ((($1311)) + 4|0);
 $1313 = HEAP32[$1312>>2]|0;
 $1314 = (($1313) + ($1310))|0;
 HEAP32[$1312>>2] = $1314;
 $1315 = $c;
 $1316 = $0;
 $1317 = ((($1316)) + 8|0);
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = (($1318) + ($1315))|0;
 HEAP32[$1317>>2] = $1319;
 $1320 = $d;
 $1321 = $0;
 $1322 = ((($1321)) + 12|0);
 $1323 = HEAP32[$1322>>2]|0;
 $1324 = (($1323) + ($1320))|0;
 HEAP32[$1322>>2] = $1324;
 STACKTOP = sp;return;
}
function _MD5Pad($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $padlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_bitshift64Lshr(($5|0),($8|0),56)|0);
 $10 = tempRet0;
 $11 = $9&255;
 $12 = ((($count)) + 7|0);
 HEAP8[$12>>0] = $11;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bitshift64Lshr(($17|0),($20|0),48)|0);
 $22 = tempRet0;
 $23 = $21&255;
 $24 = ((($count)) + 6|0);
 HEAP8[$24>>0] = $23;
 $25 = $0;
 $26 = ((($25)) + 16|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_bitshift64Lshr(($29|0),($32|0),40)|0);
 $34 = tempRet0;
 $35 = $33&255;
 $36 = ((($count)) + 5|0);
 HEAP8[$36>>0] = $35;
 $37 = $0;
 $38 = ((($37)) + 16|0);
 $39 = $38;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $44&255;
 $46 = ((($count)) + 4|0);
 HEAP8[$46>>0] = $45;
 $47 = $0;
 $48 = ((($47)) + 16|0);
 $49 = $48;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (_bitshift64Lshr(($51|0),($54|0),24)|0);
 $56 = tempRet0;
 $57 = $55&255;
 $58 = ((($count)) + 3|0);
 HEAP8[$58>>0] = $57;
 $59 = $0;
 $60 = ((($59)) + 16|0);
 $61 = $60;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),16)|0);
 $68 = tempRet0;
 $69 = $67&255;
 $70 = ((($count)) + 2|0);
 HEAP8[$70>>0] = $69;
 $71 = $0;
 $72 = ((($71)) + 16|0);
 $73 = $72;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (_bitshift64Lshr(($75|0),($78|0),8)|0);
 $80 = tempRet0;
 $81 = $79&255;
 $82 = ((($count)) + 1|0);
 HEAP8[$82>>0] = $81;
 $83 = $0;
 $84 = ((($83)) + 16|0);
 $85 = $84;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = $87&255;
 HEAP8[$count>>0] = $91;
 $92 = $0;
 $93 = ((($92)) + 16|0);
 $94 = $93;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (_bitshift64Lshr(($96|0),($99|0),3)|0);
 $101 = tempRet0;
 $102 = $100 & 63;
 $103 = (_i64Subtract(64,0,($102|0),0)|0);
 $104 = tempRet0;
 $padlen = $103;
 $105 = $padlen;
 $106 = ($105>>>0)<(9);
 if (!($106)) {
  $109 = $0;
  $110 = $padlen;
  $111 = (($110) - 8)|0;
  _MD5Update($109,12272,$111);
  $112 = $0;
  _MD5Update($112,$count,8);
  STACKTOP = sp;return;
 }
 $107 = $padlen;
 $108 = (($107) + 64)|0;
 $padlen = $108;
 $109 = $0;
 $110 = $padlen;
 $111 = (($110) - 8)|0;
 _MD5Update($109,12272,$111);
 $112 = $0;
 _MD5Update($112,$count,8);
 STACKTOP = sp;return;
}
function _get_lfo($lfo,$div) {
 $lfo = $lfo|0;
 $div = $div|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lfo;
 $2 = $div;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ($7|0)==(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 switch ($10|0) {
 case 3:  {
  $26 = (_rand()|0);
  $27 = $26 & 511;
  $28 = (($27) - 256)|0;
  $val = $28;
  break;
 }
 case 1:  {
  $16 = $1;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 << 3;
  $20 = (255 - ($19))|0;
  $val = $20;
  break;
 }
 case 0:  {
  $11 = $1;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (12336 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $val = $15;
  break;
 }
 case 2:  {
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)<(32);
  $25 = $24 ? 255 : -255;
  $val = $25;
  break;
 }
 case 18:  {
  $29 = $1;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)<(32);
  $33 = $32 ? 255 : 0;
  $val = $33;
  break;
 }
 default: {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 }
 $34 = $val;
 $35 = $1;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($34, $37)|0;
 $39 = $2;
 $40 = (($38|0) / ($39|0))&-1;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _update_lfo($lfo) {
 $lfo = $lfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3))|0;
 HEAP32[$5>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10|0) % 64)&-1;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _set_lfo_phase($lfo,$phase) {
 $lfo = $lfo|0;
 $phase = $phase|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $phase;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _set_lfo_depth($lfo,$depth) {
 $lfo = $lfo|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $depth;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _set_lfo_rate($lfo,$rate) {
 $lfo = $lfo|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $rate;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _set_lfo_waveform($lfo,$type) {
 $lfo = $lfo|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $type;
 $2 = $1;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function _get_envelope($env,$x,$def,$end) {
 $env = $env|0;
 $x = $x|0;
 $def = $def|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $data = 0;
 var $index = 0, $or$cond = 0, $x1 = 0, $x2 = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $def;
 $4 = $end;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $data = $6;
 $7 = $4;
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 ^ -1;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)<=(0);
  if (!($16)) {
   $18 = $1;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - 1)|0;
   $22 = $21<<1;
   $index = $22;
   $23 = $index;
   $24 = $data;
   $25 = (($24) + ($23<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $x1 = $27;
   $28 = $2;
   $29 = $x1;
   $30 = ($28|0)>=($29|0);
   $31 = $index;
   $32 = ($31|0)==(0);
   $or$cond = $30 | $32;
   if ($or$cond) {
    $33 = $4;
    HEAP32[$33>>2] = 1;
    $34 = $index;
    $35 = (($34) + 1)|0;
    $36 = $data;
    $37 = (($36) + ($35<<1)|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38 << 16 >> 16;
    $0 = $39;
    $98 = $0;
    STACKTOP = sp;return ($98|0);
   }
   while(1) {
    $40 = $index;
    $41 = (($40) - 2)|0;
    $index = $41;
    $42 = $index;
    $43 = $data;
    $44 = (($43) + ($42<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 << 16 >> 16;
    $x1 = $46;
    $47 = $index;
    $48 = ($47|0)>(0);
    if (!($48)) {
     break;
    }
    $49 = $x1;
    $50 = $2;
    $51 = ($49|0)>($50|0);
    if (!($51)) {
     break;
    }
   }
   $52 = $index;
   $53 = (($52) + 1)|0;
   $54 = $data;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = $56 << 16 >> 16;
   $y1 = $57;
   $58 = $index;
   $59 = (($58) + 2)|0;
   $60 = $data;
   $61 = (($60) + ($59<<1)|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $62 << 16 >> 16;
   $x2 = $63;
   $64 = $1;
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 & 4;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $index;
    $69 = $1;
    $70 = ((($69)) + 24|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $71 << 1;
    $73 = ($68|0)==($72|0);
    if ($73) {
     $74 = $1;
     $75 = ((($74)) + 20|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) - 1)|0;
     $78 = $77<<1;
     $index = $78;
    }
   }
   $79 = $index;
   $80 = (($79) + 3)|0;
   $81 = $data;
   $82 = (($81) + ($80<<1)|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = $83 << 16 >> 16;
   $y2 = $84;
   $85 = $y2;
   $86 = $y1;
   $87 = (($85) - ($86))|0;
   $88 = $2;
   $89 = $x1;
   $90 = (($88) - ($89))|0;
   $91 = Math_imul($87, $90)|0;
   $92 = $x2;
   $93 = $x1;
   $94 = (($92) - ($93))|0;
   $95 = (($91|0) / ($94|0))&-1;
   $96 = $y1;
   $97 = (($95) + ($96))|0;
   $0 = $97;
   $98 = $0;
   STACKTOP = sp;return ($98|0);
  }
 }
 $17 = $3;
 $0 = $17;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _update_envelope($env,$x,$release,$sus_quirk) {
 $env = $env|0;
 $x = $x|0;
 $release = $release|0;
 $sus_quirk = $sus_quirk|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $has_loop = 0, $has_sus = 0, $lpe = 0, $lps = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $sue = 0, $sus = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $release;
 $4 = $sus_quirk;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $data = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 ^ -1;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<=(0);
  if (!($15)) {
   $17 = $1;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 4;
   $has_loop = $19;
   $20 = $1;
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 2;
   $has_sus = $22;
   $23 = $1;
   $24 = ((($23)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 << 1;
   $lps = $26;
   $27 = $1;
   $28 = ((($27)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $29 << 1;
   $lpe = $30;
   $31 = $1;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 << 1;
   $sus = $34;
   $35 = $1;
   $36 = ((($35)) + 16|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 << 1;
   $sue = $38;
   $39 = $has_loop;
   $40 = ($39|0)!=(0);
   $41 = $has_sus;
   $42 = ($41|0)!=(0);
   $or$cond = $40 & $42;
   if ($or$cond) {
    $43 = $sus;
    $44 = $lpe;
    $45 = ($43|0)==($44|0);
    if ($45) {
     $46 = $4;
     $47 = ($46|0)==(0);
     $48 = $3;
     $49 = ($48|0)!=(0);
     $or$cond3 = $47 | $49;
     if (!($or$cond3)) {
      $has_sus = 0;
     }
    }
   }
   $50 = $1;
   $51 = HEAP32[$50>>2]|0;
   $52 = $51 & 16;
   $53 = ($52|0)!=(0);
   $54 = $3;
   $55 = ($54|0)!=(0);
   $$not = $55 ^ 1;
   $56 = $has_sus;
   $57 = ($56|0)!=(0);
   $or$cond5 = $$not & $57;
   do {
    if ($53) {
     if ($or$cond5) {
      $58 = $2;
      $59 = $sue;
      $60 = $data;
      $61 = (($60) + ($59<<1)|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = $62 << 16 >> 16;
      $64 = ($58|0)==($63|0);
      if (!($64)) {
       break;
      }
      $65 = $sus;
      $66 = $data;
      $67 = (($66) + ($65<<1)|0);
      $68 = HEAP16[$67>>1]|0;
      $69 = $68 << 16 >> 16;
      $70 = (($69) - 1)|0;
      $2 = $70;
      break;
     }
     $71 = $has_loop;
     $72 = ($71|0)!=(0);
     if ($72) {
      $73 = $2;
      $74 = $lpe;
      $75 = $data;
      $76 = (($75) + ($74<<1)|0);
      $77 = HEAP16[$76>>1]|0;
      $78 = $77 << 16 >> 16;
      $79 = ($73|0)==($78|0);
      if ($79) {
       $80 = $lps;
       $81 = $data;
       $82 = (($81) + ($80<<1)|0);
       $83 = HEAP16[$82>>1]|0;
       $84 = $83 << 16 >> 16;
       $85 = (($84) - 1)|0;
       $2 = $85;
      }
     }
    } else {
     if ($or$cond5) {
      $86 = $2;
      $87 = $sus;
      $88 = $data;
      $89 = (($88) + ($87<<1)|0);
      $90 = HEAP16[$89>>1]|0;
      $91 = $90 << 16 >> 16;
      $92 = ($86|0)==($91|0);
      if ($92) {
       $93 = $2;
       $94 = (($93) + -1)|0;
       $2 = $94;
      }
     }
     $95 = $has_loop;
     $96 = ($95|0)!=(0);
     if ($96) {
      $97 = $2;
      $98 = $lpe;
      $99 = $data;
      $100 = (($99) + ($98<<1)|0);
      $101 = HEAP16[$100>>1]|0;
      $102 = $101 << 16 >> 16;
      $103 = ($97|0)==($102|0);
      if ($103) {
       $104 = $3;
       $105 = ($104|0)!=(0);
       $106 = $has_sus;
       $107 = ($106|0)!=(0);
       $or$cond10 = $105 & $107;
       if ($or$cond10) {
        $108 = $sus;
        $109 = $lpe;
        $110 = ($108|0)==($109|0);
        if ($110) {
         break;
        }
       }
       $111 = $lps;
       $112 = $data;
       $113 = (($112) + ($111<<1)|0);
       $114 = HEAP16[$113>>1]|0;
       $115 = $114 << 16 >> 16;
       $116 = (($115) - 1)|0;
       $2 = $116;
      }
     }
    }
   } while(0);
   $117 = $2;
   $118 = ($117|0)<(65535);
   if ($118) {
    $119 = $2;
    $120 = (($119) + 1)|0;
    $2 = $120;
   }
   $121 = $2;
   $0 = $121;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 }
 $16 = $2;
 $0 = $16;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function _check_envelope_fade($env,$x) {
 $env = $env|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $data = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 ^ -1;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $0 = 0;
  } else {
   $10 = $1;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) - 1)|0;
   $14 = $13<<1;
   $index = $14;
   $15 = $2;
   $16 = $index;
   $17 = $data;
   $18 = (($17) + ($16<<1)|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = ($15|0)>($20|0);
   if (!($21)) {
    $0 = 0;
    break;
   }
   $22 = $index;
   $23 = (($22) + 1)|0;
   $24 = $data;
   $25 = (($24) + ($23<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = ($27|0)==(0);
   if ($28) {
    $0 = -1;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _get_sequence($ctx,$ord) {
 $ctx = $ctx|0;
 $ord = $ord|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $ord;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 56|0);
 $6 = (($5) + ($3)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 STACKTOP = sp;return ($8|0);
}
function _scan_sequences($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $ep = 0, $i = 0, $m = 0, $mod = 0, $or$cond = 0, $p = 0, $seq = 0, $temp_ep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp_ep = sp + 32|0;
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $ep = 0;
 $5 = $p;
 $6 = ((($5)) + 56|0);
 _memset(($6|0),-1,256)|0;
 HEAP8[$temp_ep>>0] = 0;
 $7 = $0;
 $8 = $ep;
 $9 = (_scan_module($7,$8,0)|0);
 $10 = $p;
 $11 = ((($10)) + 368|0);
 HEAP32[$11>>2] = $9;
 $seq = 1;
 while(1) {
  $i = 0;
  while(1) {
   $12 = $i;
   $13 = $mod;
   $14 = ((($13)) + 156|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($12|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = $p;
   $19 = ((($18)) + 56|0);
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)==(255);
   if ($23) {
    break;
   }
   $24 = $i;
   $25 = (($24) + 1)|0;
   $i = $25;
  }
  $26 = $i;
  $27 = $mod;
  $28 = ((($27)) + 156|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)!=($29|0);
  $31 = $seq;
  $32 = ($31|0)<(16);
  $or$cond = $30 & $32;
  if (!($or$cond)) {
   break;
  }
  $33 = $i;
  $ep = $33;
  $34 = $ep;
  $35 = $34&255;
  $36 = $seq;
  $37 = (($temp_ep) + ($36)|0);
  HEAP8[$37>>0] = $35;
  $38 = $0;
  $39 = $ep;
  $40 = $seq;
  $41 = (_scan_module($38,$39,$40)|0);
  $42 = $seq;
  $43 = $p;
  $44 = ((($43)) + 368|0);
  $45 = (($44) + ($42<<4)|0);
  HEAP32[$45>>2] = $41;
  $46 = $seq;
  $47 = $p;
  $48 = ((($47)) + 368|0);
  $49 = (($48) + ($46<<4)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)>(0);
  if (!($51)) {
   continue;
  }
  $52 = $seq;
  $53 = (($52) + 1)|0;
  $seq = $53;
 }
 $54 = $seq;
 $55 = $m;
 $56 = ((($55)) + 6416|0);
 HEAP32[$56>>2] = $54;
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = $m;
  $59 = ((($58)) + 6416|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($57|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $i;
  $63 = (($temp_ep) + ($62)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $i;
  $67 = $m;
  $68 = ((($67)) + 6420|0);
  $69 = (($68) + ($66<<3)|0);
  HEAP32[$69>>2] = $65;
  $70 = $i;
  $71 = $p;
  $72 = ((($71)) + 368|0);
  $73 = (($72) + ($70<<4)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $i;
  $76 = $m;
  $77 = ((($76)) + 6420|0);
  $78 = (($77) + ($75<<3)|0);
  $79 = ((($78)) + 4|0);
  HEAP32[$79>>2] = $74;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 STACKTOP = sp;return 0;
}
function _scan_module($ctx,$ep,$chain) {
 $ctx = $ctx|0;
 $ep = $ep|0;
 $chain = $chain|0;
 var $$ = 0, $$28 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0.0;
 var $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0.0, $543 = 0, $544 = 0.0, $545 = 0.0, $546 = 0;
 var $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0.0, $563 = 0.0, $564 = 0.0;
 var $565 = 0.0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0.0;
 var $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0.0, $591 = 0, $592 = 0.0, $593 = 0.0, $594 = 0, $595 = 0.0, $596 = 0.0, $597 = 0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0;
 var $600 = 0.0, $601 = 0.0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0.0, $799 = 0.0;
 var $8 = 0, $80 = 0, $800 = 0.0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0.0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0, $816 = 0.0;
 var $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alltmp = 0, $base_time = 0, $bpm = 0, $break_row = 0, $chn = 0, $clock = 0.0, $clock_rst = 0.0, $cnt_row = 0, $event = 0, $f1 = 0, $f2 = 0, $gvl = 0, $gvol_memory = 0, $h = 0, $i = 0, $info = 0, $l = 0;
 var $last_row = 0, $loop_chn = 0, $loop_flg = 0, $loop_row = 0, $loop_stk = 0, $m = 0, $mod = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond32 = 0;
 var $or$cond34 = 0, $or$cond36 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ord = 0, $ord2 = 0, $p = 0, $p1 = 0, $p2 = 0, $parm = 0, $pat = 0, $pat1 = 0, $pdelay = 0, $row = 0, $skip_fetch = 0, $speed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $loop_stk = sp + 304|0;
 $loop_row = sp + 48|0;
 $1 = $ctx;
 $2 = $ep;
 $3 = $chain;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $pdelay = 0;
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $0 = 0;
  $820 = $0;
  STACKTOP = sp;return ($820|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 156|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $mod;
  $19 = ((($18)) + 952|0);
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $pat1 = $22;
  $23 = $i;
  $24 = $m;
  $25 = ((($24)) + 6564|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $pat1;
  $30 = $mod;
  $31 = ((($30)) + 128|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)>=($32|0);
  if ($33) {
   $49 = 1;
  } else {
   $34 = $pat1;
   $35 = $mod;
   $36 = ((($35)) + 168|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + ($34<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $pat1;
    $43 = $mod;
    $44 = ((($43)) + 168|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($42<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = $48;
   } else {
    $49 = 1;
   }
  }
  _memset(($28|0),0,($49|0))|0;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $mod;
 $53 = ((($52)) + 136|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54<<2;
 _memset(($loop_stk|0),0,($55|0))|0;
 $56 = $mod;
 $57 = ((($56)) + 136|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58<<2;
 _memset(($loop_row|0),0,($59|0))|0;
 $loop_flg = 0;
 $loop_chn = 0;
 $60 = $mod;
 $61 = ((($60)) + 164|0);
 $62 = HEAP32[$61>>2]|0;
 $gvl = $62;
 $63 = $mod;
 $64 = ((($63)) + 152|0);
 $65 = HEAP32[$64>>2]|0;
 $bpm = $65;
 $66 = $mod;
 $67 = ((($66)) + 148|0);
 $68 = HEAP32[$67>>2]|0;
 $speed = $68;
 $69 = $m;
 $70 = ((($69)) + 1248|0);
 $71 = +HEAPF64[$70>>3];
 $72 = (~~(($71)));
 $base_time = $72;
 $ord2 = -1;
 $73 = $2;
 $74 = (($73) - 1)|0;
 $ord = $74;
 $alltmp = 0;
 $cnt_row = 0;
 $break_row = 0;
 $gvol_memory = 0;
 $clock = 0.0;
 $clock_rst = 0.0;
 $skip_fetch = 0;
 L13: while(1) {
  $75 = $ord;
  $76 = (($75) + 1)|0;
  $ord = $76;
  $77 = $mod;
  $78 = ((($77)) + 156|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($76>>>0)>=($79>>>0);
  if ($80) {
   $81 = $mod;
   $82 = ((($81)) + 160|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $mod;
   $85 = ((($84)) + 156|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($83|0)>($86|0);
   do {
    if ($87) {
     label = 13;
    } else {
     $88 = $mod;
     $89 = ((($88)) + 160|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $mod;
     $92 = ((($91)) + 952|0);
     $93 = (($92) + ($90)|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = $mod;
     $97 = ((($96)) + 128|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($95|0)>=($98|0);
     if ($99) {
      label = 13;
     } else {
      $105 = $1;
      $106 = $mod;
      $107 = ((($106)) + 160|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (_get_sequence($105,$108)|0);
      $110 = $3;
      $111 = ($109|0)==($110|0);
      if ($111) {
       $112 = $mod;
       $113 = ((($112)) + 160|0);
       $114 = HEAP32[$113>>2]|0;
       $ord = $114;
       break;
      } else {
       $115 = $2;
       $ord = $115;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 13) {
    label = 0;
    $100 = $3;
    $101 = $m;
    $102 = ((($101)) + 6420|0);
    $103 = (($102) + ($100<<3)|0);
    $104 = HEAP32[$103>>2]|0;
    $ord = $104;
   }
   $116 = $ord;
   $117 = $mod;
   $118 = ((($117)) + 952|0);
   $119 = (($118) + ($116)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $pat = $121;
   $122 = $pat;
   $123 = ($122|0)==(255);
   if ($123) {
    label = 119;
    break;
   }
  }
  $124 = $ord;
  $125 = $mod;
  $126 = ((($125)) + 952|0);
  $127 = (($126) + ($124)|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $pat = $129;
  $130 = $ord;
  $131 = $m;
  $132 = ((($131)) + 1296|0);
  $133 = (($132) + (($130*20)|0)|0);
  $info = $133;
  $134 = $2;
  $135 = ($134|0)!=(0);
  if ($135) {
   $136 = $ord;
   $137 = $p;
   $138 = ((($137)) + 56|0);
   $139 = (($138) + ($136)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = ($141|0)!=(255);
   if ($142) {
    label = 119;
    break;
   }
  }
  $143 = $3;
  $144 = $143&255;
  $145 = $ord;
  $146 = $p;
  $147 = ((($146)) + 56|0);
  $148 = (($147) + ($145)|0);
  HEAP8[$148>>0] = $144;
  $149 = $pat;
  $150 = $mod;
  $151 = ((($150)) + 128|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($149|0)>=($152|0);
  if ($153) {
   $154 = $pat;
   $155 = ($154|0)==(255);
   if (!($155)) {
    continue;
   }
   $156 = $mod;
   $157 = ((($156)) + 156|0);
   $158 = HEAP32[$157>>2]|0;
   $ord = $158;
   continue;
  }
  $159 = $break_row;
  $160 = $pat;
  $161 = $mod;
  $162 = ((($161)) + 168|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($160<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = HEAP32[$165>>2]|0;
  $167 = ($159|0)<($166|0);
  if ($167) {
   $168 = $break_row;
   $169 = $ord;
   $170 = $m;
   $171 = ((($170)) + 6564|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + ($169<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($168)|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176 << 24 >> 24;
   $178 = ($177|0)!=(0);
   if ($178) {
    label = 119;
    break;
   }
  }
  $179 = $gvl;
  $180 = $info;
  $181 = ((($180)) + 8|0);
  HEAP32[$181>>2] = $179;
  $182 = $bpm;
  $183 = $info;
  $184 = ((($183)) + 4|0);
  HEAP32[$184>>2] = $182;
  $185 = $speed;
  $186 = $info;
  HEAP32[$186>>2] = $185;
  $187 = $clock;
  $188 = $m;
  $189 = ((($188)) + 1256|0);
  $190 = +HEAPF64[$189>>3];
  $191 = $alltmp;
  $192 = (+($191|0));
  $193 = $190 * $192;
  $194 = $bpm;
  $195 = (+($194|0));
  $196 = $193 / $195;
  $197 = $187 + $196;
  $198 = (~~(($197)));
  $199 = $info;
  $200 = ((($199)) + 12|0);
  HEAP32[$200>>2] = $198;
  $201 = $info;
  $202 = ((($201)) + 16|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ($203|0)==(0);
  $205 = $ord;
  $206 = ($205|0)!=(0);
  $or$cond = $204 & $206;
  if ($or$cond) {
   $207 = $ord;
   $208 = $2;
   $209 = ($207|0)==($208|0);
   if ($209) {
    $210 = $clock;
    $211 = $m;
    $212 = ((($211)) + 1256|0);
    $213 = +HEAPF64[$212>>3];
    $214 = $alltmp;
    $215 = (+($214|0));
    $216 = $213 * $215;
    $217 = $bpm;
    $218 = (+($217|0));
    $219 = $216 / $218;
    $220 = $210 + $219;
    $clock_rst = $220;
   }
   $221 = $break_row;
   $222 = $info;
   $223 = ((($222)) + 16|0);
   HEAP32[$223>>2] = $221;
  }
  $224 = $pat;
  $225 = $mod;
  $226 = ((($225)) + 168|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + ($224<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = HEAP32[$229>>2]|0;
  $last_row = $230;
  $231 = $break_row;
  $row = $231;
  $break_row = 0;
  while(1) {
   $232 = $row;
   $233 = $last_row;
   $234 = ($232|0)<($233|0);
   if (!($234)) {
    break;
   }
   $235 = $bpm;
   $236 = ($235|0)<(20);
   if ($236) {
    $bpm = 20;
   }
   $237 = $cnt_row;
   $238 = ($237|0)>(512);
   if ($238) {
    break L13;
   }
   $239 = $loop_flg;
   $240 = ($239|0)!=(0);
   if (!($240)) {
    $241 = $row;
    $242 = $ord;
    $243 = $m;
    $244 = ((($243)) + 6564|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (($245) + ($242<<2)|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + ($241)|0);
    $249 = HEAP8[$248>>0]|0;
    $250 = $249 << 24 >> 24;
    $251 = ($250|0)!=(0);
    if ($251) {
     label = 36;
     break L13;
    }
   }
   $254 = $row;
   $255 = $ord;
   $256 = $m;
   $257 = ((($256)) + 6564|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) + ($255<<2)|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + ($254)|0);
   $262 = HEAP8[$261>>0]|0;
   $263 = (($262) + 1)<<24>>24;
   HEAP8[$261>>0] = $263;
   $pdelay = 0;
   $chn = 0;
   while(1) {
    $264 = $chn;
    $265 = $mod;
    $266 = ((($265)) + 136|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = ($264|0)<($267|0);
    if (!($268)) {
     break;
    }
    $269 = $row;
    $270 = $chn;
    $271 = $pat;
    $272 = $mod;
    $273 = ((($272)) + 168|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (($274) + ($271<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = ((($276)) + 4|0);
    $278 = (($277) + ($270<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = $mod;
    $281 = ((($280)) + 172|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + ($279<<2)|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = HEAP32[$284>>2]|0;
    $286 = ($269|0)>=($285|0);
    do {
     if (!($286)) {
      $287 = $row;
      $288 = $chn;
      $289 = $ord;
      $290 = $mod;
      $291 = ((($290)) + 952|0);
      $292 = (($291) + ($289)|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293&255;
      $295 = $m;
      $296 = ((($295)) + 168|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = (($297) + ($294<<2)|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = ((($299)) + 4|0);
      $301 = (($300) + ($288<<2)|0);
      $302 = HEAP32[$301>>2]|0;
      $303 = $m;
      $304 = ((($303)) + 172|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = (($305) + ($302<<2)|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ((($307)) + 4|0);
      $309 = (($308) + ($287<<3)|0);
      $event = $309;
      $310 = $skip_fetch;
      $311 = ($310|0)!=(0);
      if ($311) {
       $p2 = 0;
       $f2 = 0;
       $p1 = 0;
       $f1 = 0;
      } else {
       $312 = $event;
       $313 = ((($312)) + 3|0);
       $314 = HEAP8[$313>>0]|0;
       $315 = $314&255;
       $f1 = $315;
       $316 = $event;
       $317 = ((($316)) + 4|0);
       $318 = HEAP8[$317>>0]|0;
       $319 = $318&255;
       $p1 = $319;
       $320 = $event;
       $321 = ((($320)) + 5|0);
       $322 = HEAP8[$321>>0]|0;
       $323 = $322&255;
       $f2 = $323;
       $324 = $event;
       $325 = ((($324)) + 6|0);
       $326 = HEAP8[$325>>0]|0;
       $327 = $326&255;
       $p2 = $327;
      }
      $328 = $f1;
      $329 = ($328|0)==(16);
      $330 = $f2;
      $331 = ($330|0)==(16);
      $or$cond3 = $329 | $331;
      if ($or$cond3) {
       $332 = $f1;
       $333 = ($332|0)==(16);
       $334 = $p1;
       $335 = $p2;
       $336 = $333 ? $334 : $335;
       $gvl = $336;
       $337 = $gvl;
       $338 = $m;
       $339 = ((($338)) + 1272|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($337|0)>($340|0);
       if ($341) {
        $342 = $m;
        $343 = ((($342)) + 1272|0);
        $344 = HEAP32[$343>>2]|0;
        $349 = $344;
       } else {
        $345 = $gvl;
        $346 = ($345|0)<(0);
        $347 = $gvl;
        $348 = $346 ? 0 : $347;
        $349 = $348;
       }
       $gvl = $349;
      }
      $350 = $f1;
      $351 = ($350|0)==(17);
      $352 = $f2;
      $353 = ($352|0)==(17);
      $or$cond5 = $351 | $353;
      L69: do {
       if ($or$cond5) {
        $354 = $f1;
        $355 = ($354|0)==(17);
        $356 = $p1;
        $357 = $p2;
        $358 = $355 ? $356 : $357;
        $parm = $358;
        while(1) {
         $359 = $parm;
         $360 = ($359|0)!=(0);
         if ($360) {
          break;
         }
         $417 = $gvol_memory;
         $parm = $417;
         $418 = ($417|0)!=(0);
         if (!($418)) {
          break L69;
         }
        }
        $361 = $parm;
        $gvol_memory = $361;
        $362 = $parm;
        $363 = $362 & 240;
        $364 = $363 >> 4;
        $h = $364;
        $365 = $parm;
        $366 = $365 & 15;
        $l = $366;
        $367 = $m;
        $368 = ((($367)) + 1280|0);
        $369 = HEAP32[$368>>2]|0;
        $370 = $369 & 32;
        $371 = ($370|0)!=(0);
        if (!($371)) {
         $401 = $m;
         $402 = ((($401)) + 1280|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = $403 & 64;
         $405 = ($404|0)!=(0);
         $406 = $h;
         $407 = $l;
         $408 = (($406) - ($407))|0;
         $409 = $speed;
         if ($405) {
          $410 = Math_imul($408, $409)|0;
          $411 = $gvl;
          $412 = (($411) + ($410))|0;
          $gvl = $412;
          break;
         } else {
          $413 = (($409) - 1)|0;
          $414 = Math_imul($408, $413)|0;
          $415 = $gvl;
          $416 = (($415) + ($414))|0;
          $gvl = $416;
          break;
         }
        }
        $372 = $l;
        $373 = ($372|0)==(15);
        $374 = $h;
        $375 = ($374|0)!=(0);
        $or$cond7 = $373 & $375;
        $376 = $h;
        if ($or$cond7) {
         $377 = $gvl;
         $378 = (($377) + ($376))|0;
         $gvl = $378;
         break;
        }
        $379 = ($376|0)==(15);
        $380 = $l;
        $381 = ($380|0)!=(0);
        $or$cond9 = $379 & $381;
        if ($or$cond9) {
         $382 = $l;
         $383 = $gvl;
         $384 = (($383) - ($382))|0;
         $gvl = $384;
         break;
        }
        $385 = $m;
        $386 = ((($385)) + 1280|0);
        $387 = HEAP32[$386>>2]|0;
        $388 = $387 & 64;
        $389 = ($388|0)!=(0);
        $390 = $h;
        $391 = $l;
        $392 = (($390) - ($391))|0;
        $393 = $speed;
        if ($389) {
         $394 = Math_imul($392, $393)|0;
         $395 = $gvl;
         $396 = (($395) + ($394))|0;
         $gvl = $396;
         break;
        } else {
         $397 = (($393) - 1)|0;
         $398 = Math_imul($392, $397)|0;
         $399 = $gvl;
         $400 = (($399) + ($398))|0;
         $gvl = $400;
         break;
        }
       }
      } while(0);
      $419 = $f1;
      $420 = ($419|0)==(15);
      $421 = $p1;
      $422 = ($421|0)!=(0);
      $or$cond11 = $420 & $422;
      if ($or$cond11) {
       label = 65;
      } else {
       $423 = $f2;
       $424 = ($423|0)==(15);
       $425 = $p2;
       $426 = ($425|0)!=(0);
       $or$cond13 = $424 & $426;
       if ($or$cond13) {
        label = 65;
       }
      }
      do {
       if ((label|0) == 65) {
        label = 0;
        $427 = $f1;
        $428 = ($427|0)==(15);
        $429 = $p1;
        $430 = $p2;
        $431 = $428 ? $429 : $430;
        $parm = $431;
        $432 = $cnt_row;
        $433 = $speed;
        $434 = Math_imul($432, $433)|0;
        $435 = $base_time;
        $436 = Math_imul($434, $435)|0;
        $437 = $alltmp;
        $438 = (($437) + ($436))|0;
        $alltmp = $438;
        $cnt_row = 0;
        $439 = $parm;
        $440 = ($439|0)!=(0);
        if (!($440)) {
         break;
        }
        $441 = $p;
        $442 = ((($441)) + 28|0);
        $443 = HEAP32[$442>>2]|0;
        $444 = $443 & 1;
        $445 = ($444|0)!=(0);
        $446 = $parm;
        $447 = ($446|0)<(32);
        $or$cond15 = $445 | $447;
        if ($or$cond15) {
         $448 = $parm;
         $speed = $448;
         break;
        } else {
         $449 = $m;
         $450 = ((($449)) + 1256|0);
         $451 = +HEAPF64[$450>>3];
         $452 = $alltmp;
         $453 = (+($452|0));
         $454 = $451 * $453;
         $455 = $bpm;
         $456 = (+($455|0));
         $457 = $454 / $456;
         $458 = $clock;
         $459 = $458 + $457;
         $clock = $459;
         $alltmp = 0;
         $460 = $parm;
         $bpm = $460;
         break;
        }
       }
      } while(0);
      $461 = $f1;
      $462 = ($461|0)==(126);
      if ($462) {
       $f1 = 163;
      }
      $463 = $f2;
      $464 = ($463|0)==(126);
      if ($464) {
       $f2 = 163;
      }
      $465 = $f1;
      $466 = ($465|0)==(163);
      $467 = $p1;
      $468 = ($467|0)!=(0);
      $or$cond17 = $466 & $468;
      if ($or$cond17) {
       label = 75;
      } else {
       $469 = $f2;
       $470 = ($469|0)==(163);
       $471 = $p2;
       $472 = ($471|0)!=(0);
       $or$cond19 = $470 & $472;
       if ($or$cond19) {
        label = 75;
       }
      }
      if ((label|0) == 75) {
       label = 0;
       $473 = $f1;
       $474 = ($473|0)==(163);
       $475 = $p1;
       $476 = $p2;
       $477 = $474 ? $475 : $476;
       $parm = $477;
       $478 = $cnt_row;
       $479 = $speed;
       $480 = Math_imul($478, $479)|0;
       $481 = $base_time;
       $482 = Math_imul($480, $481)|0;
       $483 = $alltmp;
       $484 = (($483) + ($482))|0;
       $alltmp = $484;
       $cnt_row = 0;
       $485 = $parm;
       $speed = $485;
      }
      $486 = $f1;
      $487 = ($486|0)==(171);
      $488 = $p1;
      $489 = ($488|0)!=(0);
      $or$cond21 = $487 & $489;
      if ($or$cond21) {
       label = 78;
      } else {
       $490 = $f2;
       $491 = ($490|0)==(171);
       $492 = $p2;
       $493 = ($492|0)!=(0);
       $or$cond23 = $491 & $493;
       if ($or$cond23) {
        label = 78;
       }
      }
      do {
       if ((label|0) == 78) {
        label = 0;
        $494 = $f1;
        $495 = ($494|0)==(171);
        $496 = $p1;
        $497 = $p2;
        $498 = $495 ? $496 : $497;
        $parm = $498;
        $499 = $parm;
        $500 = ($499|0)>=(32);
        if (!($500)) {
         break;
        }
        $501 = $cnt_row;
        $502 = $speed;
        $503 = Math_imul($501, $502)|0;
        $504 = $base_time;
        $505 = Math_imul($503, $504)|0;
        $506 = $alltmp;
        $507 = (($506) + ($505))|0;
        $alltmp = $507;
        $cnt_row = 0;
        $508 = $m;
        $509 = ((($508)) + 1256|0);
        $510 = +HEAPF64[$509>>3];
        $511 = $alltmp;
        $512 = (+($511|0));
        $513 = $510 * $512;
        $514 = $bpm;
        $515 = (+($514|0));
        $516 = $513 / $515;
        $517 = $clock;
        $518 = $517 + $516;
        $clock = $518;
        $alltmp = 0;
        $519 = $parm;
        $bpm = $519;
       }
      } while(0);
      $520 = $f1;
      $521 = ($520|0)==(135);
      $522 = $p1;
      $523 = ($522|0)!=(0);
      $or$cond25 = $521 & $523;
      if ($or$cond25) {
       label = 82;
      } else {
       $524 = $f2;
       $525 = ($524|0)==(135);
       $526 = $p2;
       $527 = ($526|0)!=(0);
       $or$cond27 = $525 & $527;
       if ($or$cond27) {
        label = 82;
       }
      }
      do {
       if ((label|0) == 82) {
        label = 0;
        $528 = $f1;
        $529 = ($528|0)==(135);
        $530 = $p1;
        $531 = $p2;
        $532 = $529 ? $530 : $531;
        $parm = $532;
        $533 = $cnt_row;
        $534 = $speed;
        $535 = Math_imul($533, $534)|0;
        $536 = $base_time;
        $537 = Math_imul($535, $536)|0;
        $538 = $alltmp;
        $539 = (($538) + ($537))|0;
        $alltmp = $539;
        $cnt_row = 0;
        $540 = $m;
        $541 = ((($540)) + 1256|0);
        $542 = +HEAPF64[$541>>3];
        $543 = $alltmp;
        $544 = (+($543|0));
        $545 = $542 * $544;
        $546 = $bpm;
        $547 = (+($546|0));
        $548 = $545 / $547;
        $549 = $clock;
        $550 = $549 + $548;
        $clock = $550;
        $alltmp = 0;
        $551 = $parm;
        $552 = $551 & 240;
        $553 = $552 >> 4;
        $554 = ($553|0)==(0);
        if ($554) {
         $555 = $m;
         $556 = ((($555)) + 1256|0);
         $557 = +HEAPF64[$556>>3];
         $558 = $base_time;
         $559 = (+($558|0));
         $560 = $557 * $559;
         $561 = $bpm;
         $562 = (+($561|0));
         $563 = $560 / $562;
         $564 = $clock;
         $565 = $564 + $563;
         $clock = $565;
         $i = 1;
         while(1) {
          $566 = $i;
          $567 = $speed;
          $568 = ($566|0)<($567|0);
          if (!($568)) {
           break;
          }
          $569 = $parm;
          $570 = $569 & 15;
          $571 = $bpm;
          $572 = (($571) - ($570))|0;
          $bpm = $572;
          $573 = $bpm;
          $574 = ($573|0)<(32);
          $$ = $574 ? 32 : $572;
          $bpm = $$;
          $575 = $m;
          $576 = ((($575)) + 1256|0);
          $577 = +HEAPF64[$576>>3];
          $578 = $base_time;
          $579 = (+($578|0));
          $580 = $577 * $579;
          $581 = $bpm;
          $582 = (+($581|0));
          $583 = $580 / $582;
          $584 = $clock;
          $585 = $584 + $583;
          $clock = $585;
          $586 = $i;
          $587 = (($586) + 1)|0;
          $i = $587;
         }
         $588 = $m;
         $589 = ((($588)) + 1256|0);
         $590 = +HEAPF64[$589>>3];
         $591 = $speed;
         $592 = (+($591|0));
         $593 = $590 * $592;
         $594 = $base_time;
         $595 = (+($594|0));
         $596 = $593 * $595;
         $597 = $bpm;
         $598 = (+($597|0));
         $599 = $596 / $598;
         $600 = $clock;
         $601 = $600 - $599;
         $clock = $601;
         break;
        }
        $602 = $parm;
        $603 = $602 & 240;
        $604 = $603 >> 4;
        $605 = ($604|0)==(1);
        if (!($605)) {
         $653 = $parm;
         $bpm = $653;
         break;
        }
        $606 = $m;
        $607 = ((($606)) + 1256|0);
        $608 = +HEAPF64[$607>>3];
        $609 = $base_time;
        $610 = (+($609|0));
        $611 = $608 * $610;
        $612 = $bpm;
        $613 = (+($612|0));
        $614 = $611 / $613;
        $615 = $clock;
        $616 = $615 + $614;
        $clock = $616;
        $i = 1;
        while(1) {
         $617 = $i;
         $618 = $speed;
         $619 = ($617|0)<($618|0);
         if (!($619)) {
          break;
         }
         $620 = $parm;
         $621 = $620 & 15;
         $622 = $bpm;
         $623 = (($622) + ($621))|0;
         $bpm = $623;
         $624 = $bpm;
         $625 = ($624|0)>(255);
         $$28 = $625 ? 255 : $623;
         $bpm = $$28;
         $626 = $m;
         $627 = ((($626)) + 1256|0);
         $628 = +HEAPF64[$627>>3];
         $629 = $base_time;
         $630 = (+($629|0));
         $631 = $628 * $630;
         $632 = $bpm;
         $633 = (+($632|0));
         $634 = $631 / $633;
         $635 = $clock;
         $636 = $635 + $634;
         $clock = $636;
         $637 = $i;
         $638 = (($637) + 1)|0;
         $i = $638;
        }
        $639 = $m;
        $640 = ((($639)) + 1256|0);
        $641 = +HEAPF64[$640>>3];
        $642 = $speed;
        $643 = (+($642|0));
        $644 = $641 * $643;
        $645 = $base_time;
        $646 = (+($645|0));
        $647 = $644 * $646;
        $648 = $bpm;
        $649 = (+($648|0));
        $650 = $647 / $649;
        $651 = $clock;
        $652 = $651 - $650;
        $clock = $652;
       }
      } while(0);
      $654 = $f1;
      $655 = ($654|0)==(11);
      $656 = $f2;
      $657 = ($656|0)==(11);
      $or$cond30 = $655 | $657;
      if ($or$cond30) {
       $658 = $f1;
       $659 = ($658|0)==(11);
       $660 = $p1;
       $661 = $p2;
       $662 = $659 ? $660 : $661;
       $ord2 = $662;
       $last_row = 0;
      }
      $663 = $f1;
      $664 = ($663|0)==(13);
      $665 = $f2;
      $666 = ($665|0)==(13);
      $or$cond32 = $664 | $666;
      if ($or$cond32) {
       $667 = $f1;
       $668 = ($667|0)==(13);
       $669 = $p1;
       $670 = $p2;
       $671 = $668 ? $669 : $670;
       $parm = $671;
       $672 = $parm;
       $673 = $672 & 240;
       $674 = $673 >> 4;
       $675 = ($674*10)|0;
       $676 = $parm;
       $677 = $676 & 15;
       $678 = (($675) + ($677))|0;
       $break_row = $678;
       $last_row = 0;
      }
      $679 = $f1;
      $680 = ($679|0)==(14);
      $681 = $f2;
      $682 = ($681|0)==(14);
      $or$cond34 = $680 | $682;
      if (!($or$cond34)) {
       break;
      }
      $683 = $f1;
      $684 = ($683|0)==(14);
      $685 = $p1;
      $686 = $p2;
      $687 = $684 ? $685 : $686;
      $parm = $687;
      $688 = $parm;
      $689 = $688 >> 4;
      $690 = ($689|0)==(14);
      if ($690) {
       $691 = $parm;
       $692 = $691 & 15;
       $pdelay = $692;
       $693 = $pdelay;
       $694 = $speed;
       $695 = Math_imul($693, $694)|0;
       $696 = $base_time;
       $697 = Math_imul($695, $696)|0;
       $698 = $alltmp;
       $699 = (($698) + ($697))|0;
       $alltmp = $699;
      }
      $700 = $parm;
      $701 = $700 >> 4;
      $702 = ($701|0)==(6);
      if (!($702)) {
       break;
      }
      $703 = $parm;
      $704 = $703 & 15;
      $parm = $704;
      $705 = ($704|0)!=(0);
      if (!($705)) {
       $739 = $row;
       $740 = $chn;
       $741 = (($loop_row) + ($740<<2)|0);
       HEAP32[$741>>2] = $739;
       break;
      }
      $706 = $chn;
      $707 = (($loop_stk) + ($706<<2)|0);
      $708 = HEAP32[$707>>2]|0;
      $709 = ($708|0)!=(0);
      $710 = $chn;
      if (!($709)) {
       $728 = (($loop_row) + ($710<<2)|0);
       $729 = HEAP32[$728>>2]|0;
       $730 = $row;
       $731 = ($729|0)<=($730|0);
       if (!($731)) {
        break;
       }
       $732 = $parm;
       $733 = $chn;
       $734 = (($loop_stk) + ($733<<2)|0);
       HEAP32[$734>>2] = $732;
       $735 = $chn;
       $736 = (($735) + 1)|0;
       $loop_chn = $736;
       $737 = $loop_flg;
       $738 = (($737) + 1)|0;
       $loop_flg = $738;
       break;
      }
      $711 = (($loop_stk) + ($710<<2)|0);
      $712 = HEAP32[$711>>2]|0;
      $713 = (($712) + -1)|0;
      HEAP32[$711>>2] = $713;
      $714 = ($713|0)!=(0);
      if ($714) {
       $715 = $chn;
       $716 = (($715) + 1)|0;
       $loop_chn = $716;
       break;
      }
      $717 = $loop_flg;
      $718 = (($717) + -1)|0;
      $loop_flg = $718;
      $719 = $m;
      $720 = ((($719)) + 1280|0);
      $721 = HEAP32[$720>>2]|0;
      $722 = $721 & 1;
      $723 = ($722|0)!=(0);
      if (!($723)) {
       break;
      }
      $724 = $row;
      $725 = (($724) + 1)|0;
      $726 = $chn;
      $727 = (($loop_row) + ($726<<2)|0);
      HEAP32[$727>>2] = $725;
     }
    } while(0);
    $742 = $chn;
    $743 = (($742) + 1)|0;
    $chn = $743;
   }
   $skip_fetch = 0;
   $744 = $loop_chn;
   $745 = ($744|0)!=(0);
   if ($745) {
    $746 = $loop_chn;
    $747 = (($746) + -1)|0;
    $loop_chn = $747;
    $748 = (($loop_row) + ($747<<2)|0);
    $749 = HEAP32[$748>>2]|0;
    $750 = (($749) - 1)|0;
    $row = $750;
    $loop_chn = 0;
   }
   $751 = $row;
   $752 = (($751) + 1)|0;
   $row = $752;
   $753 = $cnt_row;
   $754 = (($753) + 1)|0;
   $cnt_row = $754;
  }
  $755 = $break_row;
  $756 = ($755|0)!=(0);
  $757 = $pdelay;
  $758 = ($757|0)!=(0);
  $or$cond36 = $756 & $758;
  if ($or$cond36) {
   $skip_fetch = 1;
  }
  $759 = $ord2;
  $760 = ($759|0)>=(0);
  if ($760) {
   $761 = $ord2;
   $762 = (($761) - 1)|0;
   $ord = $762;
   $ord2 = -1;
  }
  $763 = $cnt_row;
  $764 = $speed;
  $765 = Math_imul($763, $764)|0;
  $766 = $base_time;
  $767 = Math_imul($765, $766)|0;
  $768 = $alltmp;
  $769 = (($768) + ($767))|0;
  $alltmp = $769;
  $cnt_row = 0;
 }
 if ((label|0) == 36) {
  $252 = $cnt_row;
  $253 = (($252) + -1)|0;
  $cnt_row = $253;
 }
 else if ((label|0) == 119) {
  $770 = $break_row;
  $row = $770;
 }
 $771 = $row;
 $772 = $ord;
 $773 = $m;
 $774 = ((($773)) + 6564|0);
 $775 = HEAP32[$774>>2]|0;
 $776 = (($775) + ($772<<2)|0);
 $777 = HEAP32[$776>>2]|0;
 $778 = (($777) + ($771)|0);
 $779 = HEAP8[$778>>0]|0;
 $780 = $779 << 24 >> 24;
 $781 = $3;
 $782 = $p;
 $783 = ((($782)) + 368|0);
 $784 = (($783) + ($781<<4)|0);
 $785 = ((($784)) + 12|0);
 HEAP32[$785>>2] = $780;
 $786 = $row;
 $787 = $3;
 $788 = $p;
 $789 = ((($788)) + 368|0);
 $790 = (($789) + ($787<<4)|0);
 $791 = ((($790)) + 8|0);
 HEAP32[$791>>2] = $786;
 $792 = $ord;
 $793 = $3;
 $794 = $p;
 $795 = ((($794)) + 368|0);
 $796 = (($795) + ($793<<4)|0);
 $797 = ((($796)) + 4|0);
 HEAP32[$797>>2] = $792;
 $798 = $clock_rst;
 $799 = $clock;
 $800 = $799 - $798;
 $clock = $800;
 $801 = $cnt_row;
 $802 = $speed;
 $803 = Math_imul($801, $802)|0;
 $804 = $base_time;
 $805 = Math_imul($803, $804)|0;
 $806 = $alltmp;
 $807 = (($806) + ($805))|0;
 $alltmp = $807;
 $808 = $clock;
 $809 = $m;
 $810 = ((($809)) + 1256|0);
 $811 = +HEAPF64[$810>>3];
 $812 = $alltmp;
 $813 = (+($812|0));
 $814 = $811 * $813;
 $815 = $bpm;
 $816 = (+($815|0));
 $817 = $814 / $816;
 $818 = $808 + $817;
 $819 = (~~(($818)));
 $0 = $819;
 $820 = $0;
 STACKTOP = sp;return ($820|0);
}
function _xmp_create_context() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_calloc(1,8144)|0);
 $ctx = $1;
 $2 = $ctx;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $4 = $ctx;
  $5 = ((($4)) + 8140|0);
  HEAP32[$5>>2] = 0;
  $6 = $ctx;
  $7 = ((($6)) + 1552|0);
  $8 = ((($7)) + 1292|0);
  HEAP32[$8>>2] = 100;
  $9 = $ctx;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _xmp_free_context($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $ctx = $1;
 $2 = $ctx;
 $3 = ((($2)) + 8140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = $0;
  _xmp_release_module($6);
 }
 $7 = $0;
 _free($7);
 STACKTOP = sp;return;
}
function _med_change_period($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ce = 0, $vib = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $ce = $4;
 $5 = $ce;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 5;
 $9 = (12592 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $ce;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($10, $13)|0;
 $15 = $14 >> 10;
 $vib = $15;
 $16 = $ce;
 $17 = ((($16)) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $ce;
 $20 = ((($19)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18))|0;
 HEAP32[$20>>2] = $22;
 $23 = $ce;
 $24 = ((($23)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25|0) % 1024)&-1;
 HEAP32[$24>>2] = $26;
 $27 = $vib;
 STACKTOP = sp;return ($27|0);
}
function _med_linear_bend($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $arp = 0, $ce = 0, $m = 0, $me = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $xc;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $6 = ((($5)) + 6552|0);
 $7 = HEAP32[$6>>2]|0;
 $me = $7;
 $8 = $2;
 $9 = ((($8)) + 400|0);
 $10 = HEAP32[$9>>2]|0;
 $ce = $10;
 $11 = $ce;
 $12 = ((($11)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $15 = $ce;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $me;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($17)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(253);
 if ($29) {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $30 = $ce;
 $31 = ((($30)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 $34 = $2;
 $35 = ((($34)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $me;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($32)|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $arp = $44;
 $45 = $arp;
 $46 = ($45|0)==(253);
 if ($46) {
  $47 = $ce;
  $48 = ((($47)) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $ce;
  $51 = ((($50)) + 52|0);
  HEAP32[$51>>2] = $49;
  $52 = $ce;
  $53 = ((($52)) + 52|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$53>>2] = $55;
  $56 = $2;
  $57 = ((($56)) + 44|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $me;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($58<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($54)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $arp = $66;
 }
 $67 = $arp;
 $68 = ($67*12800)|0;
 $0 = $68;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _med_play_extras($ctx,$xc,$chn,$t) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0;
 var $585 = 0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $ce = 0;
 var $ie = 0, $jvs = 0, $jws = 0, $loop = 0, $m = 0, $me = 0, $or$cond = 0, $p = 0, $temp = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $t;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $0;
 $p = $6;
 $jws = 0;
 $jvs = 0;
 $7 = $m;
 $8 = ((($7)) + 6552|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $m;
 $12 = ((($11)) + 6552|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(133303461);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $m;
 $17 = ((($16)) + 6552|0);
 $18 = HEAP32[$17>>2]|0;
 $me = $18;
 $19 = $1;
 $20 = ((($19)) + 400|0);
 $21 = HEAP32[$20>>2]|0;
 $ce = $21;
 $22 = $1;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $m;
 $26 = ((($25)) + 176|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + (($24*764)|0)|0);
 $29 = ((($28)) + 760|0);
 $30 = HEAP32[$29>>2]|0;
 $ie = $30;
 $31 = $ce;
 $32 = ((($31)) + 84|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $ce;
  $36 = ((($35)) + 80|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   $39 = $p;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $ie;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)>=($44|0);
   if ($45) {
    $46 = $1;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 | 1;
    HEAP32[$47>>2] = $49;
    $50 = $ce;
    $51 = ((($50)) + 84|0);
    HEAP32[$51>>2] = 0;
   }
  }
 } else {
  $52 = $ie;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $p;
   $57 = ((($56)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $ie;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58|0)>=($61|0);
   if ($62) {
    $63 = $ce;
    $64 = ((($63)) + 80|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = $1;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $69 | 1;
     HEAP32[$68>>2] = $70;
    }
   }
  }
 }
 $71 = $p;
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $p;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) - 1)|0;
 $78 = ($73|0)==($77|0);
 if ($78) {
  $79 = $ce;
  $80 = ((($79)) + 80|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)!=(2);
  if ($82) {
   $83 = $ce;
   $84 = ((($83)) + 80|0);
   HEAP32[$84>>2] = 0;
  }
 }
 $85 = $1;
 $86 = ((($85)) + 44|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $me;
 $89 = ((($88)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($87<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  $94 = $1;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $me;
  $98 = ((($97)) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   $105 = $3;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = $1;
    $108 = HEAP32[$107>>2]|0;
    $109 = $108 & 65536;
    $110 = ($109|0)!=(0);
    if ($110) {
     $111 = $ce;
     $112 = ((($111)) + 52|0);
     HEAP32[$112>>2] = 0;
     $113 = $ce;
     $114 = ((($113)) + 48|0);
     HEAP32[$114>>2] = 0;
     $115 = $1;
     $116 = ((($115)) + 24|0);
     $117 = +HEAPF64[$116>>3];
     $118 = (~~(($117)));
     $119 = $ce;
     $120 = ((($119)) + 44|0);
     HEAP32[$120>>2] = $118;
     $121 = $1;
     $122 = HEAP32[$121>>2]|0;
     $123 = $122 & 2048;
     $124 = ($123|0)!=(0);
     if ($124) {
      $125 = $ce;
      $126 = ((($125)) + 20|0);
      HEAP32[$126>>2] = 0;
      $127 = $ce;
      $128 = ((($127)) + 16|0);
      HEAP32[$128>>2] = 0;
      $129 = $ce;
      $130 = ((($129)) + 4|0);
      HEAP32[$130>>2] = 0;
      $131 = $ce;
      $132 = ((($131)) + 40|0);
      HEAP32[$132>>2] = 0;
      $133 = $ce;
      $134 = ((($133)) + 36|0);
      HEAP32[$134>>2] = 0;
      $135 = $ce;
      $136 = ((($135)) + 24|0);
      HEAP32[$136>>2] = 0;
     }
     $137 = $ce;
     $138 = ((($137)) + 8|0);
     HEAP32[$138>>2] = 0;
     $139 = $ce;
     $140 = ((($139)) + 28|0);
     HEAP32[$140>>2] = 0;
     $141 = $ie;
     $142 = ((($141)) + 4|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $ce;
     $145 = ((($144)) + 12|0);
     HEAP32[$145>>2] = $143;
     $146 = $ie;
     $147 = ((($146)) + 8|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $ce;
     $150 = ((($149)) + 32|0);
     HEAP32[$150>>2] = $148;
    }
   }
   $151 = $ce;
   $152 = ((($151)) + 12|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)>(0);
   do {
    if ($154) {
     $155 = $ce;
     $156 = ((($155)) + 16|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($157) + -1)|0;
     HEAP32[$156>>2] = $158;
     $159 = ($157|0)==(0);
     if ($159) {
      $160 = $ce;
      $161 = ((($160)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (($162) - 1)|0;
      $164 = $ce;
      $165 = ((($164)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = $ce;
      $167 = ((($166)) + 20|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)>(0);
      do {
       if ($169) {
        $170 = $ce;
        $171 = ((($170)) + 20|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (($172) + -1)|0;
        HEAP32[$171>>2] = $173;
       } else {
        $jws = 0;
        $loop = 0;
        L35: while(1) {
         $174 = $ce;
         $175 = ((($174)) + 4|0);
         $176 = HEAP32[$175>>2]|0;
         $177 = (($176) + 1)|0;
         HEAP32[$175>>2] = $177;
         $178 = $1;
         $179 = ((($178)) + 44|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = $me;
         $182 = ((($181)) + 4|0);
         $183 = HEAP32[$182>>2]|0;
         $184 = (($183) + ($180<<2)|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = (($185) + ($176)|0);
         $187 = HEAP8[$186>>0]|0;
         $188 = $187&255;
         $b = $188;
         switch ($188|0) {
         case 240:  {
          label = 36;
          break L35;
          break;
         }
         case 250:  {
          label = 31;
          break L35;
          break;
         }
         case 242:  {
          label = 34;
          break L35;
          break;
         }
         case 254:  {
          break;
         }
         case 251: case 255:  {
          label = 28;
          break L35;
          break;
         }
         case 243:  {
          label = 33;
          break L35;
          break;
         }
         case 241:  {
          label = 35;
          break L35;
          break;
         }
         case 244: case 245:  {
          label = 32;
          break L35;
          break;
         }
         default: {
          label = 37;
          break L35;
         }
         }
         $193 = $loop;
         $194 = ($193|0)!=(0);
         if ($194) {
          break;
         }
         $195 = $ce;
         $196 = ((($195)) + 4|0);
         $197 = HEAP32[$196>>2]|0;
         $198 = (($197) + 1)|0;
         HEAP32[$196>>2] = $198;
         $199 = $1;
         $200 = ((($199)) + 44|0);
         $201 = HEAP32[$200>>2]|0;
         $202 = $me;
         $203 = ((($202)) + 4|0);
         $204 = HEAP32[$203>>2]|0;
         $205 = (($204) + ($201<<2)|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = (($206) + ($197)|0);
         $208 = HEAP8[$207>>0]|0;
         $209 = $208&255;
         $temp = $209;
         $210 = $temp;
         $211 = $ce;
         $212 = ((($211)) + 4|0);
         HEAP32[$212>>2] = $210;
         $loop = 1;
        }
        if ((label|0) == 28) {
         $189 = $ce;
         $190 = ((($189)) + 4|0);
         $191 = HEAP32[$190>>2]|0;
         $192 = (($191) + -1)|0;
         HEAP32[$190>>2] = $192;
        }
        else if ((label|0) == 31) {
         $213 = $ce;
         $214 = ((($213)) + 4|0);
         $215 = HEAP32[$214>>2]|0;
         $216 = (($215) + 1)|0;
         HEAP32[$214>>2] = $216;
         $217 = $1;
         $218 = ((($217)) + 44|0);
         $219 = HEAP32[$218>>2]|0;
         $220 = $me;
         $221 = ((($220)) + 4|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = (($222) + ($219<<2)|0);
         $224 = HEAP32[$223>>2]|0;
         $225 = (($224) + ($215)|0);
         $226 = HEAP8[$225>>0]|0;
         $227 = $226&255;
         $jws = $227;
        }
        else if ((label|0) == 32) {
         $228 = $ce;
         $229 = ((($228)) + 4|0);
         $230 = HEAP32[$229>>2]|0;
         $231 = (($230) + 1)|0;
         HEAP32[$229>>2] = $231;
        }
        else if ((label|0) == 33) {
         $232 = $ce;
         $233 = ((($232)) + 4|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = (($234) + 1)|0;
         HEAP32[$233>>2] = $235;
         $236 = $1;
         $237 = ((($236)) + 44|0);
         $238 = HEAP32[$237>>2]|0;
         $239 = $me;
         $240 = ((($239)) + 4|0);
         $241 = HEAP32[$240>>2]|0;
         $242 = (($241) + ($238<<2)|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = (($243) + ($234)|0);
         $245 = HEAP8[$244>>0]|0;
         $246 = $245&255;
         $247 = $ce;
         $248 = ((($247)) + 8|0);
         HEAP32[$248>>2] = $246;
        }
        else if ((label|0) == 34) {
         $249 = $ce;
         $250 = ((($249)) + 4|0);
         $251 = HEAP32[$250>>2]|0;
         $252 = (($251) + 1)|0;
         HEAP32[$250>>2] = $252;
         $253 = $1;
         $254 = ((($253)) + 44|0);
         $255 = HEAP32[$254>>2]|0;
         $256 = $me;
         $257 = ((($256)) + 4|0);
         $258 = HEAP32[$257>>2]|0;
         $259 = (($258) + ($255<<2)|0);
         $260 = HEAP32[$259>>2]|0;
         $261 = (($260) + ($251)|0);
         $262 = HEAP8[$261>>0]|0;
         $263 = $262&255;
         $264 = (0 - ($263))|0;
         $265 = $ce;
         $266 = ((($265)) + 8|0);
         HEAP32[$266>>2] = $264;
        }
        else if ((label|0) == 35) {
         $267 = $ce;
         $268 = ((($267)) + 4|0);
         $269 = HEAP32[$268>>2]|0;
         $270 = (($269) + 1)|0;
         HEAP32[$268>>2] = $270;
         $271 = $1;
         $272 = ((($271)) + 44|0);
         $273 = HEAP32[$272>>2]|0;
         $274 = $me;
         $275 = ((($274)) + 4|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = (($276) + ($273<<2)|0);
         $278 = HEAP32[$277>>2]|0;
         $279 = (($278) + ($269)|0);
         $280 = HEAP8[$279>>0]|0;
         $281 = $280&255;
         $282 = $ce;
         $283 = ((($282)) + 20|0);
         HEAP32[$283>>2] = $281;
        }
        else if ((label|0) == 36) {
         $284 = $ce;
         $285 = ((($284)) + 4|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = (($286) + 1)|0;
         HEAP32[$285>>2] = $287;
         $288 = $1;
         $289 = ((($288)) + 44|0);
         $290 = HEAP32[$289>>2]|0;
         $291 = $me;
         $292 = ((($291)) + 4|0);
         $293 = HEAP32[$292>>2]|0;
         $294 = (($293) + ($290<<2)|0);
         $295 = HEAP32[$294>>2]|0;
         $296 = (($295) + ($286)|0);
         $297 = HEAP8[$296>>0]|0;
         $298 = $297&255;
         $299 = $ce;
         $300 = ((($299)) + 12|0);
         HEAP32[$300>>2] = $298;
        }
        else if ((label|0) == 37) {
         $301 = $b;
         $302 = ($301|0)>=(0);
         $303 = $b;
         $304 = ($303|0)<=(64);
         $or$cond = $302 & $304;
         if ($or$cond) {
          $305 = $b;
          $306 = $ce;
          $307 = ((($306)) + 76|0);
          HEAP32[$307>>2] = $305;
         }
        }
        $308 = $ce;
        $309 = ((($308)) + 8|0);
        $310 = HEAP32[$309>>2]|0;
        $311 = $ce;
        $312 = ((($311)) + 76|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = (($313) + ($310))|0;
        HEAP32[$312>>2] = $314;
        $315 = $ce;
        $316 = ((($315)) + 76|0);
        $317 = HEAP32[$316>>2]|0;
        $318 = ($317|0)<(0);
        $319 = $ce;
        $320 = ((($319)) + 76|0);
        if ($318) {
         HEAP32[$320>>2] = 0;
         break;
        }
        $321 = HEAP32[$320>>2]|0;
        $322 = ($321|0)>(64);
        if ($322) {
         $323 = $ce;
         $324 = ((($323)) + 76|0);
         HEAP32[$324>>2] = 64;
        }
       }
      } while(0);
      $325 = $ce;
      $326 = ((($325)) + 40|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)>(0);
      if ($328) {
       $329 = $ce;
       $330 = ((($329)) + 40|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = (($331) + -1)|0;
       HEAP32[$330>>2] = $332;
       break;
      }
      $jvs = 0;
      $loop = 0;
      L59: while(1) {
       $333 = $ce;
       $334 = ((($333)) + 24|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = (($335) + 1)|0;
       HEAP32[$334>>2] = $336;
       $337 = $1;
       $338 = ((($337)) + 44|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = $me;
       $341 = ((($340)) + 8|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = (($342) + ($339<<2)|0);
       $344 = HEAP32[$343>>2]|0;
       $345 = (($344) + ($335)|0);
       $346 = HEAP8[$345>>0]|0;
       $347 = $346&255;
       $b = $347;
       switch ($347|0) {
       case 254:  {
        break;
       }
       case 247:  {
        label = 55;
        break L59;
        break;
       }
       case 243:  {
        label = 59;
        break L59;
        break;
       }
       case 242:  {
        label = 60;
        break L59;
        break;
       }
       case 252:  {
        label = 52;
        break L59;
        break;
       }
       case 253:  {
        break L59;
        break;
       }
       case 240:  {
        label = 62;
        break L59;
        break;
       }
       case 245:  {
        label = 57;
        break L59;
        break;
       }
       case 250:  {
        label = 54;
        break L59;
        break;
       }
       case 244:  {
        label = 58;
        break L59;
        break;
       }
       case 241:  {
        label = 61;
        break L59;
        break;
       }
       case 246:  {
        label = 56;
        break L59;
        break;
       }
       case 251: case 255:  {
        label = 47;
        break L59;
        break;
       }
       default: {
        label = 63;
        break L59;
       }
       }
       $352 = $loop;
       $353 = ($352|0)!=(0);
       if ($353) {
        break;
       }
       $354 = $ce;
       $355 = ((($354)) + 24|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = (($356) + 1)|0;
       HEAP32[$355>>2] = $357;
       $358 = $1;
       $359 = ((($358)) + 44|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = $me;
       $362 = ((($361)) + 8|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = (($363) + ($360<<2)|0);
       $365 = HEAP32[$364>>2]|0;
       $366 = (($365) + ($356)|0);
       $367 = HEAP8[$366>>0]|0;
       $368 = $367&255;
       $temp = $368;
       $369 = $temp;
       $370 = ($369|0)==(255);
       if ($370) {
        label = 50;
        break;
       }
       $375 = $temp;
       $376 = $ce;
       $377 = ((($376)) + 24|0);
       HEAP32[$377>>2] = $375;
       $loop = 1;
      }
      switch (label|0) {
       case 47: {
        $348 = $ce;
        $349 = ((($348)) + 24|0);
        $350 = HEAP32[$349>>2]|0;
        $351 = (($350) + -1)|0;
        HEAP32[$349>>2] = $351;
        break;
       }
       case 50: {
        $371 = $ce;
        $372 = ((($371)) + 24|0);
        $373 = HEAP32[$372>>2]|0;
        $374 = (($373) + -1)|0;
        HEAP32[$372>>2] = $374;
        break;
       }
       case 52: {
        $378 = $ce;
        $379 = ((($378)) + 24|0);
        $380 = HEAP32[$379>>2]|0;
        $381 = (($380) + 1)|0;
        HEAP32[$379>>2] = $381;
        $382 = $ce;
        $383 = ((($382)) + 52|0);
        HEAP32[$383>>2] = $380;
        $384 = $ce;
        $385 = ((($384)) + 48|0);
        HEAP32[$385>>2] = $380;
        while(1) {
         $386 = $ce;
         $387 = ((($386)) + 24|0);
         $388 = HEAP32[$387>>2]|0;
         $389 = (($388) + 1)|0;
         HEAP32[$387>>2] = $389;
         $390 = $1;
         $391 = ((($390)) + 44|0);
         $392 = HEAP32[$391>>2]|0;
         $393 = $me;
         $394 = ((($393)) + 8|0);
         $395 = HEAP32[$394>>2]|0;
         $396 = (($395) + ($392<<2)|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = (($397) + ($388)|0);
         $399 = HEAP8[$398>>0]|0;
         $400 = $399&255;
         $401 = ($400|0)!=(253);
         if (!($401)) {
          break;
         }
        }
        break;
       }
       case 54: {
        $402 = $ce;
        $403 = ((($402)) + 24|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = (($404) + 1)|0;
        HEAP32[$403>>2] = $405;
        $406 = $1;
        $407 = ((($406)) + 44|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = $me;
        $410 = ((($409)) + 8|0);
        $411 = HEAP32[$410>>2]|0;
        $412 = (($411) + ($408<<2)|0);
        $413 = HEAP32[$412>>2]|0;
        $414 = (($413) + ($404)|0);
        $415 = HEAP8[$414>>0]|0;
        $416 = $415&255;
        $jws = $416;
        break;
       }
       case 55: {
        $417 = $ce;
        $418 = ((($417)) + 24|0);
        $419 = HEAP32[$418>>2]|0;
        $420 = (($419) + 1)|0;
        HEAP32[$418>>2] = $420;
        $421 = $1;
        $422 = ((($421)) + 44|0);
        $423 = HEAP32[$422>>2]|0;
        $424 = $me;
        $425 = ((($424)) + 8|0);
        $426 = HEAP32[$425>>2]|0;
        $427 = (($426) + ($423<<2)|0);
        $428 = HEAP32[$427>>2]|0;
        $429 = (($428) + ($419)|0);
        $430 = HEAP8[$429>>0]|0;
        $431 = $430&255;
        $432 = $ce;
        $433 = ((($432)) + 56|0);
        HEAP32[$433>>2] = $431;
        break;
       }
       case 56: {
        $434 = $ce;
        $435 = ((($434)) + 44|0);
        $436 = HEAP32[$435>>2]|0;
        $437 = (+($436|0));
        $438 = $1;
        $439 = ((($438)) + 24|0);
        HEAPF64[$439>>3] = $437;
        break;
       }
       case 57: {
        $440 = $ce;
        $441 = ((($440)) + 24|0);
        $442 = HEAP32[$441>>2]|0;
        $443 = (($442) + 1)|0;
        HEAP32[$441>>2] = $443;
        $444 = $1;
        $445 = ((($444)) + 44|0);
        $446 = HEAP32[$445>>2]|0;
        $447 = $me;
        $448 = ((($447)) + 8|0);
        $449 = HEAP32[$448>>2]|0;
        $450 = (($449) + ($446<<2)|0);
        $451 = HEAP32[$450>>2]|0;
        $452 = (($451) + ($442)|0);
        $453 = HEAP8[$452>>0]|0;
        $454 = $453&255;
        $455 = $ce;
        $456 = ((($455)) + 64|0);
        HEAP32[$456>>2] = $454;
        break;
       }
       case 58: {
        $457 = $ce;
        $458 = ((($457)) + 24|0);
        $459 = HEAP32[$458>>2]|0;
        $460 = (($459) + 1)|0;
        HEAP32[$458>>2] = $460;
        $461 = $1;
        $462 = ((($461)) + 44|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = $me;
        $465 = ((($464)) + 8|0);
        $466 = HEAP32[$465>>2]|0;
        $467 = (($466) + ($463<<2)|0);
        $468 = HEAP32[$467>>2]|0;
        $469 = (($468) + ($459)|0);
        $470 = HEAP8[$469>>0]|0;
        $471 = $470&255;
        $472 = $ce;
        $473 = ((($472)) + 60|0);
        HEAP32[$473>>2] = $471;
        break;
       }
       case 59: {
        $474 = $ce;
        $475 = ((($474)) + 24|0);
        $476 = HEAP32[$475>>2]|0;
        $477 = (($476) + 1)|0;
        HEAP32[$475>>2] = $477;
        $478 = $1;
        $479 = ((($478)) + 44|0);
        $480 = HEAP32[$479>>2]|0;
        $481 = $me;
        $482 = ((($481)) + 8|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (($483) + ($480<<2)|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = (($485) + ($476)|0);
        $487 = HEAP8[$486>>0]|0;
        $488 = $487&255;
        $489 = (0 - ($488))|0;
        $490 = $ce;
        $491 = ((($490)) + 28|0);
        HEAP32[$491>>2] = $489;
        break;
       }
       case 60: {
        $492 = $ce;
        $493 = ((($492)) + 24|0);
        $494 = HEAP32[$493>>2]|0;
        $495 = (($494) + 1)|0;
        HEAP32[$493>>2] = $495;
        $496 = $1;
        $497 = ((($496)) + 44|0);
        $498 = HEAP32[$497>>2]|0;
        $499 = $me;
        $500 = ((($499)) + 8|0);
        $501 = HEAP32[$500>>2]|0;
        $502 = (($501) + ($498<<2)|0);
        $503 = HEAP32[$502>>2]|0;
        $504 = (($503) + ($494)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $ce;
        $508 = ((($507)) + 28|0);
        HEAP32[$508>>2] = $506;
        break;
       }
       case 61: {
        $509 = $ce;
        $510 = ((($509)) + 24|0);
        $511 = HEAP32[$510>>2]|0;
        $512 = (($511) + 1)|0;
        HEAP32[$510>>2] = $512;
        $513 = $1;
        $514 = ((($513)) + 44|0);
        $515 = HEAP32[$514>>2]|0;
        $516 = $me;
        $517 = ((($516)) + 8|0);
        $518 = HEAP32[$517>>2]|0;
        $519 = (($518) + ($515<<2)|0);
        $520 = HEAP32[$519>>2]|0;
        $521 = (($520) + ($511)|0);
        $522 = HEAP8[$521>>0]|0;
        $523 = $522&255;
        $524 = $ce;
        $525 = ((($524)) + 40|0);
        HEAP32[$525>>2] = $523;
        break;
       }
       case 62: {
        $526 = $ce;
        $527 = ((($526)) + 24|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = (($528) + 1)|0;
        HEAP32[$527>>2] = $529;
        $530 = $1;
        $531 = ((($530)) + 44|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = $me;
        $534 = ((($533)) + 8|0);
        $535 = HEAP32[$534>>2]|0;
        $536 = (($535) + ($532<<2)|0);
        $537 = HEAP32[$536>>2]|0;
        $538 = (($537) + ($528)|0);
        $539 = HEAP8[$538>>0]|0;
        $540 = $539&255;
        $541 = $ce;
        $542 = ((($541)) + 32|0);
        HEAP32[$542>>2] = $540;
        break;
       }
       case 63: {
        $543 = $1;
        $544 = ((($543)) + 44|0);
        $545 = HEAP32[$544>>2]|0;
        $546 = $m;
        $547 = ((($546)) + 176|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = (($548) + (($545*764)|0)|0);
        $xxi = $549;
        $550 = $b;
        $551 = $xxi;
        $552 = ((($551)) + 36|0);
        $553 = HEAP32[$552>>2]|0;
        $554 = ($550|0)<($553|0);
        if ($554) {
         $555 = $b;
         $556 = $xxi;
         $557 = ((($556)) + 756|0);
         $558 = HEAP32[$557>>2]|0;
         $559 = (($558) + ($555<<6)|0);
         $560 = ((($559)) + 40|0);
         $561 = HEAP32[$560>>2]|0;
         $562 = $1;
         $563 = ((($562)) + 56|0);
         $564 = HEAP32[$563>>2]|0;
         $565 = ($561|0)!=($564|0);
         if ($565) {
          $566 = $b;
          $567 = $xxi;
          $568 = ((($567)) + 756|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($569) + ($566<<6)|0);
          $571 = ((($570)) + 40|0);
          $572 = HEAP32[$571>>2]|0;
          $573 = $1;
          $574 = ((($573)) + 56|0);
          HEAP32[$574>>2] = $572;
          $575 = $0;
          $576 = $2;
          $577 = $1;
          $578 = ((($577)) + 56|0);
          $579 = HEAP32[$578>>2]|0;
          _virt_setsmp($575,$576,$579);
         }
        }
        break;
       }
      }
      $580 = $ce;
      $581 = ((($580)) + 28|0);
      $582 = HEAP32[$581>>2]|0;
      $583 = (+($582|0));
      $584 = $1;
      $585 = ((($584)) + 24|0);
      $586 = +HEAPF64[$585>>3];
      $587 = $586 + $583;
      HEAPF64[$585>>3] = $587;
     }
    }
   } while(0);
   $588 = $jws;
   $589 = ($588|0)!=(0);
   if ($589) {
    $590 = $jws;
    $591 = $ce;
    $592 = ((($591)) + 24|0);
    HEAP32[$592>>2] = $590;
   }
   $593 = $jvs;
   $594 = ($593|0)!=(0);
   if (!($594)) {
    STACKTOP = sp;return;
   }
   $595 = $jvs;
   $596 = $ce;
   $597 = ((($596)) + 4|0);
   HEAP32[$597>>2] = $595;
   STACKTOP = sp;return;
  }
 }
 $103 = $ce;
 $104 = ((($103)) + 76|0);
 HEAP32[$104>>2] = 64;
 STACKTOP = sp;return;
}
function _med_new_instrument_extras($xxi) {
 $xxi = $xxi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xxi;
 $2 = (_calloc(1,16)|0);
 $3 = $1;
 $4 = ((($3)) + 760|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 760|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 760|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 133303461;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _med_new_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xc;
 $2 = (_calloc(1,88)|0);
 $3 = $1;
 $4 = ((($3)) + 400|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 400|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 400|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 133303461;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _med_reset_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 400|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 dest=$4; stop=dest+84|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _med_release_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 400|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _med_new_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $me = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $mod = $2;
 $3 = (_calloc(1,12)|0);
 $4 = $1;
 $5 = ((($4)) + 6552|0);
 HEAP32[$5>>2] = $3;
 $6 = $1;
 $7 = ((($6)) + 6552|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $10 = $1;
 $11 = ((($10)) + 6552|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = 133303461;
 $13 = $1;
 $14 = ((($13)) + 6552|0);
 $15 = HEAP32[$14>>2]|0;
 $me = $15;
 $16 = $mod;
 $17 = ((($16)) + 140|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_calloc(4,$18)|0);
 $20 = $me;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $me;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $26 = $mod;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_calloc(4,$28)|0);
 $30 = $me;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $me;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _med_release_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $me = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $mod = $1;
 $2 = $0;
 $3 = ((($2)) + 6552|0);
 $4 = HEAP32[$3>>2]|0;
 $me = $4;
 $5 = $me;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = $mod;
   $11 = ((($10)) + 140|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $i;
   $15 = $me;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($14<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   $20 = $i;
   $21 = (($20) + 1)|0;
   $i = $21;
  }
  $22 = $me;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  _free($24);
 }
 $25 = $me;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $45 = $0;
  $46 = ((($45)) + 6552|0);
  $47 = HEAP32[$46>>2]|0;
  _free($47);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 140|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $me;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  _free($39);
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $42 = $me;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 $45 = $0;
 $46 = ((($45)) + 6552|0);
 $47 = HEAP32[$46>>2]|0;
 _free($47);
 STACKTOP = sp;return;
}
function _med_extras_process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $4;
 $8 = $7&255;
 $cond = ($8|0)==(177);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 400|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 84|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = $1;
 $16 = ((($15)) + 400|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 80|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function _med_hold_hack($ctx,$pat,$chn,$row) {
 $ctx = $ctx|0;
 $pat = $pat|0;
 $chn = $chn|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $event = 0, $m = 0, $mod = 0, $num_rows = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $pat;
 $2 = $chn;
 $3 = $row;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $2;
 $8 = $1;
 $9 = $m;
 $10 = ((($9)) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = (($14) + ($7<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $mod;
 $18 = ((($17)) + 172|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($16<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $num_rows = $22;
 $23 = $3;
 $24 = (($23) + 1)|0;
 $25 = $num_rows;
 $26 = ($24|0)<($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $0;
 $p = $27;
 $28 = $3;
 $29 = (($28) + 1)|0;
 $30 = $2;
 $31 = $1;
 $32 = $m;
 $33 = ((($32)) + 168|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = (($37) + ($30<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $m;
 $41 = ((($40)) + 172|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($39<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = (($45) + ($29<<3)|0);
 $event = $46;
 $47 = $2;
 $48 = $p;
 $49 = ((($48)) + 624|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + (($47*440)|0)|0);
 $xc = $51;
 $52 = $event;
 $53 = ((($52)) + 5|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = ($55|0)==(177);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $xc;
 $58 = ((($57)) + 400|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 80|0);
 HEAP32[$60>>2] = 2;
 STACKTOP = sp;return;
}
function _filter_setup($srate,$cutoff,$res,$a0,$b0,$b1) {
 $srate = $srate|0;
 $cutoff = $cutoff|0;
 $res = $res|0;
 $a0 = $a0|0;
 $b0 = $b0|0;
 $b1 = $b1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $d = 0.0, $d2 = 0.0, $e = 0.0, $fb0 = 0.0, $fb1 = 0.0, $fc = 0.0, $fg = 0.0, $fs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $srate;
 $1 = $cutoff;
 $2 = $res;
 $3 = $a0;
 $4 = $b0;
 $5 = $b1;
 $6 = $0;
 $7 = (+($6|0));
 $fs = $7;
 $8 = $1;
 $9 = ($8|0)<(0);
 if ($9) {
  $1 = 0;
 } else {
  $10 = $1;
  $11 = ($10|0)>(255);
  if ($11) {
   $1 = 255;
  }
 }
 $12 = $2;
 $13 = ($12|0)<(0);
 if ($13) {
  $2 = 0;
 } else {
  $14 = $2;
  $15 = ($14|0)>(255);
  if ($15) {
   $2 = 255;
  }
 }
 $16 = $1;
 $17 = (12720 + ($16<<2)|0);
 $18 = +HEAPF32[$17>>2];
 $fc = $18;
 $19 = $fs;
 $20 = $19;
 $21 = 6.28318530717958 / $20;
 $22 = $fc;
 $23 = $22;
 $24 = $23 * $21;
 $25 = $24;
 $fc = $25;
 $26 = $2;
 $27 = $26 >> 1;
 $28 = (13744 + ($27<<2)|0);
 $29 = +HEAPF32[$28>>2];
 $d2 = $29;
 $30 = $d2;
 $31 = $30;
 $32 = 1.0 - $31;
 $33 = $fc;
 $34 = $33;
 $35 = $32 * $34;
 $36 = $35;
 $d = $36;
 $37 = $d;
 $38 = $37;
 $39 = $38 > 2.0;
 if ($39) {
  $d = 2.0;
 }
 $40 = $fc;
 $41 = $fc;
 $42 = $40 * $41;
 $43 = $42;
 $44 = 1.0 / $43;
 $45 = $44;
 $e = $45;
 $46 = $d2;
 $47 = $d;
 $48 = $46 - $47;
 $49 = $fc;
 $50 = $48 / $49;
 $51 = $e;
 $52 = $50 + $51;
 $d = $52;
 $53 = $d;
 $54 = 1.0 + $53;
 $55 = $54;
 $56 = 1.0 / $55;
 $57 = $56;
 $fg = $57;
 $58 = $d;
 $59 = $e;
 $60 = $58 + $59;
 $61 = $d;
 $62 = 1.0 + $61;
 $63 = $60 / $62;
 $fb0 = $63;
 $64 = $e;
 $65 = -$64;
 $66 = $d;
 $67 = 1.0 + $66;
 $68 = $65 / $67;
 $fb1 = $68;
 $69 = $fg;
 $70 = $69 * 65536.0;
 $71 = (~~(($70)));
 $72 = $3;
 HEAP32[$72>>2] = $71;
 $73 = $fb0;
 $74 = $73 * 65536.0;
 $75 = (~~(($74)));
 $76 = $4;
 HEAP32[$76>>2] = $75;
 $77 = $fb1;
 $78 = $77 * 65536.0;
 $79 = (~~(($78)));
 $80 = $5;
 HEAP32[$80>>2] = $79;
 STACKTOP = sp;return;
}
function _YM3812UpdateOne($OPL,$bk,$len,$vl,$vr,$st) {
 $OPL = $OPL|0;
 $bk = $bk|0;
 $len = $len|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $CH = 0, $R_CH = 0, $ST = 0, $amsCnt = 0, $data = 0, $rythm = 0, $vibCnt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $bk;
 $2 = $len;
 $3 = $vl;
 $4 = $vr;
 $5 = $st;
 $6 = $0;
 $7 = ((($6)) + 4792|0);
 $8 = HEAP32[$7>>2]|0;
 $amsCnt = $8;
 $9 = $0;
 $10 = ((($9)) + 4800|0);
 $11 = HEAP32[$10>>2]|0;
 $vibCnt = $11;
 $12 = $0;
 $13 = ((($12)) + 60|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & 32;
 $17 = $16&255;
 $rythm = $17;
 $18 = $0;
 $19 = ((($18)) + 4836|0);
 $ST = $19;
 $20 = $0;
 $21 = $ST;
 $22 = ((($21)) + 32792|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)!=($23|0);
 if ($24) {
  $25 = $0;
  $26 = $ST;
  $27 = ((($26)) + 32792|0);
  HEAP32[$27>>2] = $25;
  $28 = $0;
  $29 = ((($28)) + 52|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $ST;
  $32 = ((($31)) + 32796|0);
  HEAP32[$32>>2] = $30;
  $33 = $ST;
  $34 = ((($33)) + 32796|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 1800|0);
  $37 = $ST;
  $38 = ((($37)) + 32800|0);
  HEAP32[$38>>2] = $36;
  $39 = $ST;
  $40 = ((($39)) + 32796|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 1400|0);
  $43 = $ST;
  $44 = ((($43)) + 32804|0);
  HEAP32[$44>>2] = $42;
  $45 = $ST;
  $46 = ((($45)) + 32796|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 1400|0);
  $49 = ((($48)) + 80|0);
  $50 = $ST;
  $51 = ((($50)) + 32808|0);
  HEAP32[$51>>2] = $49;
  $52 = $ST;
  $53 = ((($52)) + 32796|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 1600|0);
  $56 = $ST;
  $57 = ((($56)) + 32812|0);
  HEAP32[$57>>2] = $55;
  $58 = $ST;
  $59 = ((($58)) + 32796|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 1600|0);
  $62 = ((($61)) + 80|0);
  $63 = $ST;
  $64 = ((($63)) + 32816|0);
  HEAP32[$64>>2] = $62;
  $65 = $0;
  $66 = ((($65)) + 4796|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $ST;
  $69 = ((($68)) + 32840|0);
  HEAP32[$69>>2] = $67;
  $70 = $0;
  $71 = ((($70)) + 4804|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $ST;
  $74 = ((($73)) + 32844|0);
  HEAP32[$74>>2] = $72;
  $75 = $0;
  $76 = ((($75)) + 4784|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $ST;
  $79 = ((($78)) + 32832|0);
  HEAP32[$79>>2] = $77;
  $80 = $0;
  $81 = ((($80)) + 4788|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $ST;
  $84 = ((($83)) + 32836|0);
  HEAP32[$84>>2] = $82;
 }
 $85 = $rythm;
 $86 = $85&255;
 $87 = ($86|0)!=(0);
 $88 = $ST;
 if ($87) {
  $89 = ((($88)) + 32796|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 1200|0);
  $94 = $91;
 } else {
  $92 = ((($88)) + 32800|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93;
 }
 $R_CH = $94;
 while(1) {
  $95 = $2;
  $96 = (($95) + -1)|0;
  $2 = $96;
  $97 = ($95|0)!=(0);
  if (!($97)) {
   break;
  }
  $98 = $ST;
  $99 = ((($98)) + 32840|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $amsCnt;
  $102 = (($101) + ($100))|0;
  $amsCnt = $102;
  $103 = $102 >>> 23;
  $104 = $ST;
  $105 = ((($104)) + 32832|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($103<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $ST;
  $110 = ((($109)) + 32824|0);
  HEAP32[$110>>2] = $108;
  $111 = $ST;
  $112 = ((($111)) + 32844|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $vibCnt;
  $115 = (($114) + ($113))|0;
  $vibCnt = $115;
  $116 = $115 >>> 23;
  $117 = $ST;
  $118 = ((($117)) + 32836|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + ($116<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $ST;
  $123 = ((($122)) + 32828|0);
  HEAP32[$123>>2] = $121;
  $124 = $ST;
  $125 = ((($124)) + 32820|0);
  HEAP32[$125>>2] = 0;
  $126 = $ST;
  $127 = ((($126)) + 32796|0);
  $128 = HEAP32[$127>>2]|0;
  $CH = $128;
  while(1) {
   $129 = $CH;
   $130 = $R_CH;
   $131 = ($129>>>0)<($130>>>0);
   if (!($131)) {
    break;
   }
   $132 = $CH;
   $133 = $ST;
   _OPL_CALC_CH($132,$133);
   $134 = $CH;
   $135 = ((($134)) + 200|0);
   $CH = $135;
  }
  $136 = $ST;
  $137 = ((($136)) + 32820|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (_Limit($138,268427264,-268435456)|0);
  $140 = $139 >> 13;
  $data = $140;
  $141 = $5;
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $data;
   $144 = $4;
   $145 = Math_imul($143, $144)|0;
   $146 = $1;
   $147 = ((($146)) + 4|0);
   $1 = $147;
   $148 = HEAP32[$146>>2]|0;
   $149 = (($148) + ($145))|0;
   HEAP32[$146>>2] = $149;
  }
  $150 = $data;
  $151 = $3;
  $152 = Math_imul($150, $151)|0;
  $153 = $1;
  $154 = ((($153)) + 4|0);
  $1 = $154;
  $155 = HEAP32[$153>>2]|0;
  $156 = (($155) + ($152))|0;
  HEAP32[$153>>2] = $156;
 }
 $157 = $amsCnt;
 $158 = $0;
 $159 = ((($158)) + 4792|0);
 HEAP32[$159>>2] = $157;
 $160 = $vibCnt;
 $161 = $0;
 $162 = ((($161)) + 4800|0);
 HEAP32[$162>>2] = $160;
 STACKTOP = sp;return;
}
function _OPLResetChip($OPL) {
 $OPL = $OPL|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CH = 0, $ST = 0, $c = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $0;
 $2 = ((($1)) + 4836|0);
 $ST = $2;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 _OPLWriteReg($5,1,0);
 $6 = $0;
 _OPLWriteReg($6,2,0);
 $7 = $0;
 _OPLWriteReg($7,3,0);
 $8 = $0;
 _OPLWriteReg($8,4,0);
 $i = 255;
 while(1) {
  $9 = $i;
  $10 = ($9|0)>=(32);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = $i;
  _OPLWriteReg($11,$12,0);
  $13 = $i;
  $14 = (($13) + -1)|0;
  $i = $14;
 }
 $c = 0;
 while(1) {
  $15 = $c;
  $16 = $0;
  $17 = ((($16)) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $c;
  $21 = $0;
  $22 = ((($21)) + 52|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*200)|0)|0);
  $CH = $24;
  $s = 0;
  while(1) {
   $25 = $s;
   $26 = ($25|0)<(2);
   if (!($26)) {
    break;
   }
   $27 = $ST;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $s;
   $31 = $CH;
   $32 = (($31) + (($30*80)|0)|0);
   $33 = ((($32)) + 76|0);
   HEAP32[$33>>2] = $29;
   $34 = $s;
   $35 = $CH;
   $36 = (($35) + (($34*80)|0)|0);
   $37 = ((($36)) + 48|0);
   HEAP32[$37>>2] = 536870912;
   $38 = $s;
   $39 = $CH;
   $40 = (($39) + (($38*80)|0)|0);
   $41 = ((($40)) + 52|0);
   HEAP32[$41>>2] = 536870913;
   $42 = $s;
   $43 = $CH;
   $44 = (($43) + (($42*80)|0)|0);
   $45 = ((($44)) + 56|0);
   HEAP32[$45>>2] = 0;
   $46 = $s;
   $47 = (($46) + 1)|0;
   $s = $47;
  }
  $48 = $c;
  $49 = (($48) + 1)|0;
  $c = $49;
 }
 STACKTOP = sp;return;
}
function _OPLCreate($type,$clock,$rate) {
 $type = $type|0;
 $clock = $clock|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $OPL = 0, $max_ch = 0, $ptr = 0, $state_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $clock;
 $3 = $rate;
 $max_ch = 9;
 $state_size = 37688;
 $4 = $max_ch;
 $5 = ($4*200)|0;
 $6 = $state_size;
 $7 = (($6) + ($5))|0;
 $state_size = $7;
 $8 = $state_size;
 $9 = (_malloc($8)|0);
 $ptr = $9;
 $10 = $ptr;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $12 = $ptr;
 $13 = $state_size;
 _memset(($12|0),0,($13|0))|0;
 $14 = $ptr;
 $OPL = $14;
 $15 = $ptr;
 $16 = ((($15)) + 37688|0);
 $ptr = $16;
 $17 = $OPL;
 $18 = ((($17)) + 4836|0);
 $19 = ((($18)) + 32788|0);
 HEAP32[$19>>2] = 0;
 $20 = $OPL;
 $21 = ((($20)) + 4836|0);
 $22 = ((($21)) + 32792|0);
 HEAP32[$22>>2] = 0;
 $23 = $OPL;
 $24 = ((($23)) + 4836|0);
 $25 = (_OPL_LockTable($24)|0);
 $26 = ($25|0)==(-1);
 if ($26) {
  $27 = $OPL;
  _free($27);
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $28 = $ptr;
  $29 = $OPL;
  $30 = ((($29)) + 52|0);
  HEAP32[$30>>2] = $28;
  $31 = $1;
  $32 = $31&255;
  $33 = $OPL;
  HEAP8[$33>>0] = $32;
  $34 = $2;
  $35 = $OPL;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = $34;
  $37 = $3;
  $38 = $OPL;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  $40 = $max_ch;
  $41 = $OPL;
  $42 = ((($41)) + 56|0);
  HEAP32[$42>>2] = $40;
  $43 = $OPL;
  _OPL_initalize($43);
  $44 = $OPL;
  _OPLResetChip($44);
  $45 = $OPL;
  $0 = $45;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _OPLDestroy($OPL) {
 $OPL = $OPL|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $0;
 $2 = ((($1)) + 4836|0);
 _OPL_UnLockTable($2);
 $3 = $0;
 _free($3);
 STACKTOP = sp;return;
}
function _OPLWrite($OPL,$a,$v) {
 $OPL = $OPL|0;
 $a = $a|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $a;
 $2 = $v;
 $3 = $1;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $2;
  $7 = $6 & 255;
  $8 = $7&255;
  $9 = $0;
  $10 = ((($9)) + 32|0);
  HEAP8[$10>>0] = $8;
  $27 = $0;
  $28 = ((($27)) + 33|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 >> 7;
  STACKTOP = sp;return ($31|0);
 }
 $11 = $0;
 $12 = ((($11)) + 4828|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 4828|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  $19 = ((($18)) + 4832|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$17 & 255]($20,0);
 }
 $21 = $0;
 $22 = $0;
 $23 = ((($22)) + 32|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $2;
 _OPLWriteReg($21,$25,$26);
 $27 = $0;
 $28 = ((($27)) + 33|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 >> 7;
 STACKTOP = sp;return ($31|0);
}
function _OPLRead($OPL,$a) {
 $OPL = $OPL|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $OPL;
 $2 = $a;
 $3 = $2;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if ($5) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $6 = $1;
  $7 = ((($6)) + 33|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $1;
  $11 = ((($10)) + 34|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 | 128;
  $15 = $9 & $14;
  $16 = $15&255;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _OPL_CALC_CH($CH,$ST) {
 $CH = $CH|0;
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SLOT = 0, $env_out = 0, $feedback1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CH;
 $1 = $ST;
 $2 = $1;
 $3 = ((($2)) + 32848|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $SLOT = $4;
 $5 = $SLOT;
 $6 = $1;
 $7 = (_OPL_CALC_SLOT($5,$6)|0);
 $env_out = $7;
 $8 = $env_out;
 $9 = ($8>>>0)<(4095);
 do {
  if ($9) {
   $10 = $SLOT;
   $11 = ((($10)) + 73|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)!=(0);
   $14 = $SLOT;
   $15 = ((($14)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   if ($13) {
    $17 = $1;
    $18 = ((($17)) + 32828|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = Math_imul($16, $19)|0;
    $21 = (($20>>>0) / 256)&-1;
    $22 = $SLOT;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + ($21))|0;
    HEAP32[$23>>2] = $25;
   } else {
    $26 = $SLOT;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($16))|0;
    HEAP32[$27>>2] = $29;
   }
   $30 = $0;
   $31 = ((($30)) + 161|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)!=(0);
   if ($33) {
    $34 = $0;
    $35 = ((($34)) + 172|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $0;
    $38 = ((($37)) + 172|0);
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($36) + ($40))|0;
    $42 = $0;
    $43 = ((($42)) + 161|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $41 >> $45;
    $feedback1 = $46;
    $47 = $0;
    $48 = ((($47)) + 172|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $0;
    $51 = ((($50)) + 172|0);
    $52 = ((($51)) + 4|0);
    HEAP32[$52>>2] = $49;
    $53 = $env_out;
    $54 = $SLOT;
    $55 = ((($54)) + 36|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $feedback1;
    $58 = (($56) + ($57))|0;
    $59 = (($58>>>0) / 8192)&-1;
    $60 = $59 & 2047;
    $61 = $SLOT;
    $62 = ((($61)) + 76|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($60<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($53<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $0;
    $69 = ((($68)) + 172|0);
    HEAP32[$69>>2] = $67;
    $70 = $0;
    $71 = ((($70)) + 164|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($67))|0;
    HEAP32[$72>>2] = $74;
    break;
   } else {
    $75 = $env_out;
    $76 = $SLOT;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + 0)|0;
    $80 = (($79>>>0) / 8192)&-1;
    $81 = $80 & 2047;
    $82 = $SLOT;
    $83 = ((($82)) + 76|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($75<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $0;
    $90 = ((($89)) + 164|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($88))|0;
    HEAP32[$91>>2] = $93;
    break;
   }
  } else {
   $94 = $0;
   $95 = ((($94)) + 172|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $0;
   $98 = ((($97)) + 172|0);
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $96;
   $100 = $0;
   $101 = ((($100)) + 172|0);
   HEAP32[$101>>2] = 0;
  }
 } while(0);
 $102 = $0;
 $103 = ((($102)) + 80|0);
 $SLOT = $103;
 $104 = $SLOT;
 $105 = $1;
 $106 = (_OPL_CALC_SLOT($104,$105)|0);
 $env_out = $106;
 $107 = $env_out;
 $108 = ($107>>>0)<(4095);
 if (!($108)) {
  STACKTOP = sp;return;
 }
 $109 = $SLOT;
 $110 = ((($109)) + 73|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = ($111<<24>>24)!=(0);
 $113 = $SLOT;
 $114 = ((($113)) + 40|0);
 $115 = HEAP32[$114>>2]|0;
 if ($112) {
  $116 = $1;
  $117 = ((($116)) + 32828|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = Math_imul($115, $118)|0;
  $120 = (($119>>>0) / 256)&-1;
  $121 = $SLOT;
  $122 = ((($121)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + ($120))|0;
  HEAP32[$122>>2] = $124;
 } else {
  $125 = $SLOT;
  $126 = ((($125)) + 36|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + ($115))|0;
  HEAP32[$126>>2] = $128;
 }
 $129 = $env_out;
 $130 = $SLOT;
 $131 = ((($130)) + 36|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $1;
 $134 = ((($133)) + 32848|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($132) + ($135))|0;
 $137 = (($136>>>0) / 8192)&-1;
 $138 = $137 & 2047;
 $139 = $SLOT;
 $140 = ((($139)) + 76|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (($141) + ($138<<2)|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) + ($129<<2)|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $1;
 $147 = ((($146)) + 32820|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) + ($145))|0;
 HEAP32[$147>>2] = $149;
 STACKTOP = sp;return;
}
function _Limit($val,$max,$min) {
 $val = $val|0;
 $max = $max|0;
 $min = $min|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $val;
 $1 = $max;
 $2 = $min;
 $3 = $0;
 $4 = $1;
 $5 = ($3|0)>($4|0);
 if ($5) {
  $6 = $1;
  $0 = $6;
 } else {
  $7 = $0;
  $8 = $2;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $10 = $2;
   $0 = $10;
  }
 }
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _OPLWriteReg($OPL,$r,$v) {
 $OPL = $OPL|0;
 $r = $r|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $CH = 0, $ST = 0, $blockRv = 0, $block_fnum = 0, $c = 0, $cond = 0, $feedback = 0, $fnum = 0, $keyon = 0, $slot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $r;
 $2 = $v;
 $3 = $0;
 $4 = ((($3)) + 4836|0);
 $ST = $4;
 $5 = $1;
 $6 = $5 & 224;
 switch ($6|0) {
 case 224:  {
  $255 = $1;
  $256 = $255 & 31;
  $257 = (14256 + ($256<<2)|0);
  $258 = HEAP32[$257>>2]|0;
  $slot = $258;
  $259 = $slot;
  $260 = ($259|0)==(-1);
  if ($260) {
   STACKTOP = sp;return;
  }
  $261 = $slot;
  $262 = (($261|0) / 2)&-1;
  $263 = $0;
  $264 = ((($263)) + 52|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + (($262*200)|0)|0);
  $CH = $266;
  $267 = $0;
  $268 = ((($267)) + 4808|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = ($269<<24>>24)!=(0);
  if (!($270)) {
   STACKTOP = sp;return;
  }
  $271 = $2;
  $272 = $271 & 3;
  $273 = $272<<11;
  $274 = $ST;
  $275 = ((($274)) + 4|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = (($276) + ($273<<2)|0);
  $278 = $slot;
  $279 = $278 & 1;
  $280 = $CH;
  $281 = (($280) + (($279*80)|0)|0);
  $282 = ((($281)) + 76|0);
  HEAP32[$282>>2] = $277;
  STACKTOP = sp;return;
  break;
 }
 case 128:  {
  $87 = $1;
  $88 = $87 & 31;
  $89 = (14256 + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $slot = $90;
  $91 = $slot;
  $92 = ($91|0)==(-1);
  if ($92) {
   STACKTOP = sp;return;
  }
  $93 = $0;
  $94 = $slot;
  $95 = $2;
  _set_sl_rr($93,$94,$95);
  STACKTOP = sp;return;
  break;
 }
 case 64:  {
  $69 = $1;
  $70 = $69 & 31;
  $71 = (14256 + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $slot = $72;
  $73 = $slot;
  $74 = ($73|0)==(-1);
  if ($74) {
   STACKTOP = sp;return;
  }
  $75 = $0;
  $76 = $slot;
  $77 = $2;
  _set_ksl_tl($75,$76,$77);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $7 = $1;
  $8 = $7 & 31;
  if ((($8|0) == 2)) {
   $49 = $2;
   $50 = (256 - ($49))|0;
   $51 = $50<<2;
   $52 = $0;
   $53 = ((($52)) + 40|0);
   HEAP32[$53>>2] = $51;
   STACKTOP = sp;return;
  } else if ((($8|0) == 1)) {
   $9 = $0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 & 1;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    STACKTOP = sp;return;
   }
   $14 = $2;
   $15 = $14 & 32;
   $16 = $15&255;
   $17 = $0;
   $18 = ((($17)) + 4808|0);
   HEAP8[$18>>0] = $16;
   $19 = $0;
   $20 = ((($19)) + 4808|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)!=(0);
   if ($22) {
    STACKTOP = sp;return;
   }
   $c = 0;
   while(1) {
    $23 = $c;
    $24 = $0;
    $25 = ((($24)) + 56|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)<($26|0);
    if (!($27)) {
     break;
    }
    $28 = $ST;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $c;
    $32 = $0;
    $33 = ((($32)) + 52|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + (($31*200)|0)|0);
    $36 = ((($35)) + 76|0);
    HEAP32[$36>>2] = $30;
    $37 = $ST;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $c;
    $41 = $0;
    $42 = ((($41)) + 52|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + (($40*200)|0)|0);
    $45 = ((($44)) + 80|0);
    $46 = ((($45)) + 76|0);
    HEAP32[$46>>2] = $39;
    $47 = $c;
    $48 = (($47) + 1)|0;
    $c = $48;
   }
   STACKTOP = sp;return;
  } else if ((($8|0) == 3)) {
   $54 = $2;
   $55 = (256 - ($54))|0;
   $56 = $55<<4;
   $57 = $0;
   $58 = ((($57)) + 40|0);
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = $56;
   STACKTOP = sp;return;
  } else {
   STACKTOP = sp;return;
  }
  break;
 }
 case 96:  {
  $78 = $1;
  $79 = $78 & 31;
  $80 = (14256 + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $slot = $81;
  $82 = $slot;
  $83 = ($82|0)==(-1);
  if ($83) {
   STACKTOP = sp;return;
  }
  $84 = $0;
  $85 = $slot;
  $86 = $2;
  _set_ar_dr($84,$85,$86);
  STACKTOP = sp;return;
  break;
 }
 case 32:  {
  $60 = $1;
  $61 = $60 & 31;
  $62 = (14256 + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $slot = $63;
  $64 = $slot;
  $65 = ($64|0)==(-1);
  if ($65) {
   STACKTOP = sp;return;
  }
  $66 = $0;
  $67 = $slot;
  $68 = $2;
  _set_mul($66,$67,$68);
  STACKTOP = sp;return;
  break;
 }
 case 192:  {
  $228 = $1;
  $229 = $228 & 15;
  $230 = ($229|0)>(8);
  if ($230) {
   STACKTOP = sp;return;
  }
  $231 = $1;
  $232 = $231 & 15;
  $233 = $0;
  $234 = ((($233)) + 52|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + (($232*200)|0)|0);
  $CH = $236;
  $237 = $2;
  $238 = $237 >> 1;
  $239 = $238 & 7;
  $feedback = $239;
  $240 = $feedback;
  $241 = ($240|0)!=(0);
  $242 = $feedback;
  $243 = (9 - ($242))|0;
  $244 = $241 ? $243 : 0;
  $245 = $244&255;
  $246 = $CH;
  $247 = ((($246)) + 161|0);
  HEAP8[$247>>0] = $245;
  $248 = $2;
  $249 = $248 & 1;
  $250 = $249&255;
  $251 = $CH;
  $252 = ((($251)) + 160|0);
  HEAP8[$252>>0] = $250;
  $253 = $CH;
  $254 = $ST;
  _set_algorythm($253,$254);
  STACKTOP = sp;return;
  break;
 }
 case 160:  {
  $96 = $1;
  $cond = ($96|0)==(189);
  if ($cond) {
   $97 = $2;
   $98 = $97 & 128;
   $99 = ($98|0)!=(0);
   $100 = $99 ? 512 : 0;
   $101 = $ST;
   $102 = ((($101)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + ($100<<2)|0);
   $105 = $0;
   $106 = ((($105)) + 4784|0);
   HEAP32[$106>>2] = $104;
   $107 = $2;
   $108 = $107 & 64;
   $109 = ($108|0)!=(0);
   $110 = $109 ? 512 : 0;
   $111 = $ST;
   $112 = ((($111)) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + ($110<<2)|0);
   $115 = $0;
   $116 = ((($115)) + 4788|0);
   HEAP32[$116>>2] = $114;
   $117 = $2;
   $118 = $117 & 63;
   $119 = $118&255;
   $120 = $0;
   $121 = ((($120)) + 60|0);
   HEAP8[$121>>0] = $119;
   STACKTOP = sp;return;
  }
  $122 = $1;
  $123 = $122 & 15;
  $124 = ($123|0)>(8);
  if ($124) {
   STACKTOP = sp;return;
  }
  $125 = $1;
  $126 = $125 & 15;
  $127 = $0;
  $128 = ((($127)) + 52|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + (($126*200)|0)|0);
  $CH = $130;
  $131 = $1;
  $132 = $131 & 16;
  $133 = ($132|0)!=(0);
  do {
   if ($133) {
    $140 = $2;
    $141 = $140 >> 5;
    $142 = $141 & 1;
    $keyon = $142;
    $143 = $2;
    $144 = $143 & 31;
    $145 = $144 << 8;
    $146 = $CH;
    $147 = ((($146)) + 180|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $148 & 255;
    $150 = $145 | $149;
    $block_fnum = $150;
    $151 = $CH;
    $152 = ((($151)) + 196|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $keyon;
    $156 = ($154|0)!=($155|0);
    if ($156) {
     $157 = $keyon;
     $158 = $157&255;
     $159 = $CH;
     $160 = ((($159)) + 196|0);
     HEAP8[$160>>0] = $158;
     $161 = ($158<<24>>24)!=(0);
     $162 = $CH;
     if ($161) {
      $163 = ((($162)) + 172|0);
      $164 = ((($163)) + 4|0);
      HEAP32[$164>>2] = 0;
      $165 = $CH;
      $166 = ((($165)) + 172|0);
      HEAP32[$166>>2] = 0;
      $167 = $CH;
      _OPL_KEYON($167);
      $168 = $CH;
      $169 = ((($168)) + 80|0);
      _OPL_KEYON($169);
      break;
     } else {
      _OPL_KEYOFF($162);
      $170 = $CH;
      $171 = ((($170)) + 80|0);
      _OPL_KEYOFF($171);
      break;
     }
    }
   } else {
    $134 = $CH;
    $135 = ((($134)) + 180|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $136 & 7936;
    $138 = $2;
    $139 = $137 | $138;
    $block_fnum = $139;
   }
  } while(0);
  $172 = $CH;
  $173 = ((($172)) + 180|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $block_fnum;
  $176 = ($174|0)!=($175|0);
  if (!($176)) {
   STACKTOP = sp;return;
  }
  $177 = $block_fnum;
  $178 = $177 >> 10;
  $179 = (7 - ($178))|0;
  $blockRv = $179;
  $180 = $block_fnum;
  $181 = $180 & 1023;
  $fnum = $181;
  $182 = $block_fnum;
  $183 = $CH;
  $184 = ((($183)) + 180|0);
  HEAP32[$184>>2] = $182;
  $185 = $block_fnum;
  $186 = $185 >> 6;
  $187 = (14384 + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $CH;
  $190 = ((($189)) + 192|0);
  HEAP32[$190>>2] = $188;
  $191 = $fnum;
  $192 = $0;
  $193 = ((($192)) + 688|0);
  $194 = (($193) + ($191<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $blockRv;
  $197 = $195 >>> $196;
  $198 = $CH;
  $199 = ((($198)) + 188|0);
  HEAP32[$199>>2] = $197;
  $200 = $CH;
  $201 = ((($200)) + 180|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $202 >>> 9;
  $204 = $203&255;
  $205 = $CH;
  $206 = ((($205)) + 184|0);
  HEAP8[$206>>0] = $204;
  $207 = $0;
  $208 = ((($207)) + 36|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $209 & 64;
  $211 = ($210|0)!=(0);
  if ($211) {
   $212 = $CH;
   $213 = ((($212)) + 180|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $214 & 256;
   $216 = ($215|0)!=(0);
   if ($216) {
    $217 = $CH;
    $218 = ((($217)) + 184|0);
    $219 = HEAP8[$218>>0]|0;
    $220 = $219&255;
    $221 = $220 | 1;
    $222 = $221&255;
    HEAP8[$218>>0] = $222;
   }
  }
  $223 = $CH;
  $224 = $CH;
  _CALC_FCSLOT($223,$224);
  $225 = $CH;
  $226 = $CH;
  $227 = ((($226)) + 80|0);
  _CALC_FCSLOT($225,$227);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _OPL_LockTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ST;
 $2 = $1;
 $3 = ((($2)) + 32788|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 32788|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(1);
 if ($9) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $10 = $1;
 $11 = ((($10)) + 32792|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = (_OPLOpenTable($12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $15 = $1;
  $16 = ((($15)) + 32788|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _OPL_initalize($OPL) {
 $OPL = $OPL|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $9 = 0, $fn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (+($7|0));
  $9 = $0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (+($11|0));
  $13 = $8 / $12;
  $14 = $13 / 72.0;
  $17 = $14;
 } else {
  $17 = 0.0;
 }
 $15 = $0;
 $16 = ((($15)) + 16|0);
 HEAPF64[$16>>3] = $17;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 $22 = $21 / 72.0;
 $23 = 1.0 / $22;
 $24 = $0;
 $25 = ((($24)) + 24|0);
 HEAPF64[$25>>3] = $23;
 $26 = $0;
 _init_timetables($26,141280,1956000);
 $fn = 0;
 while(1) {
  $27 = $fn;
  $28 = ($27|0)<(1024);
  $29 = $0;
  if (!($28)) {
   break;
  }
  $30 = ((($29)) + 16|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $fn;
  $33 = (+($32|0));
  $34 = $31 * $33;
  $35 = $34 * 16.0;
  $36 = $35 * 128.0;
  $37 = $36 / 2.0;
  $38 = (~~(($37))>>>0);
  $39 = $fn;
  $40 = $0;
  $41 = ((($40)) + 688|0);
  $42 = (($41) + ($39<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = $fn;
  $44 = (($43) + 1)|0;
  $fn = $44;
 }
 $45 = ((($29)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (+($50|0));
  $52 = 4294967296.0 / $51;
  $53 = $52 * 3.7000000000000002;
  $54 = $0;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (+($56|0));
  $58 = $57 / 3.6E+6;
  $59 = $53 * $58;
  $61 = $59;
 } else {
  $61 = 0.0;
 }
 $60 = (~~(($61)));
 $62 = $0;
 $63 = ((($62)) + 4796|0);
 HEAP32[$63>>2] = $60;
 $64 = $0;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 if (!($67)) {
  $81 = 0.0;
  $80 = (~~(($81)));
  $82 = $0;
  $83 = ((($82)) + 4804|0);
  HEAP32[$83>>2] = $80;
  STACKTOP = sp;return;
 }
 $68 = $0;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (+($70|0));
 $72 = 4294967296.0 / $71;
 $73 = $72 * 6.4000000000000004;
 $74 = $0;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (+($76|0));
 $78 = $77 / 3.6E+6;
 $79 = $73 * $78;
 $81 = $79;
 $80 = (~~(($81)));
 $82 = $0;
 $83 = ((($82)) + 4804|0);
 HEAP32[$83>>2] = $80;
 STACKTOP = sp;return;
}
function _OPL_UnLockTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ST;
 $1 = $0;
 $2 = ((($1)) + 32788|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 32788|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$6>>2] = $8;
 }
 $9 = $0;
 $10 = ((($9)) + 32788|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 32792|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 _OPLCloseTable($15);
 STACKTOP = sp;return;
}
function _OPLCloseTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ST;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 STACKTOP = sp;return;
}
function _init_timetables($OPL,$ARRATE,$DRRATE) {
 $OPL = $OPL|0;
 $ARRATE = $ARRATE|0;
 $DRRATE = $DRRATE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i = 0, $rate = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $ARRATE;
 $2 = $DRRATE;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = ((($6)) + 388|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = $i;
  $10 = $0;
  $11 = ((($10)) + 88|0);
  $12 = (($11) + ($9<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $i = 4;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<=(60);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = ((($17)) + 16|0);
  $19 = +HEAPF64[$18>>3];
  $rate = $19;
  $20 = $i;
  $21 = ($20|0)<(60);
  if ($21) {
   $22 = $i;
   $23 = $22 & 3;
   $24 = (+($23|0));
   $25 = $24 * 0.25;
   $26 = 1.0 + $25;
   $27 = $rate;
   $28 = $27 * $26;
   $rate = $28;
  }
  $29 = $i;
  $30 = $29 >> 2;
  $31 = (($30) - 1)|0;
  $32 = 1 << $31;
  $33 = (+($32|0));
  $34 = $rate;
  $35 = $34 * $33;
  $rate = $35;
  $36 = $rate;
  $37 = $36 * 268435456.0;
  $rate = $37;
  $38 = $rate;
  $39 = $1;
  $40 = (+($39|0));
  $41 = $38 / $40;
  $42 = (~~(($41)));
  $43 = $i;
  $44 = $0;
  $45 = ((($44)) + 88|0);
  $46 = (($45) + ($43<<2)|0);
  HEAP32[$46>>2] = $42;
  $47 = $rate;
  $48 = $2;
  $49 = (+($48|0));
  $50 = $47 / $49;
  $51 = (~~(($50)));
  $52 = $i;
  $53 = $0;
  $54 = ((($53)) + 388|0);
  $55 = (($54) + ($52<<2)|0);
  HEAP32[$55>>2] = $51;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $i = 60;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(76);
  if (!($59)) {
   break;
  }
  $60 = $i;
  $61 = $0;
  $62 = ((($61)) + 88|0);
  $63 = (($62) + ($60<<2)|0);
  HEAP32[$63>>2] = 268435455;
  $64 = $0;
  $65 = ((($64)) + 388|0);
  $66 = ((($65)) + 240|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $i;
  $69 = $0;
  $70 = ((($69)) + 388|0);
  $71 = (($70) + ($68<<2)|0);
  HEAP32[$71>>2] = $67;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 STACKTOP = sp;return;
}
function _OPLOpenTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $pom = 0.0, $rate = 0.0, $s = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ST;
 $2 = (_malloc(65536)|0);
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $5 = (_malloc(32768)|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = ($5|0)==(0|0);
 if ($8) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $11 = (_malloc(4096)|0);
 $12 = $1;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = $11;
 $14 = ($11|0)==(0|0);
 if ($14) {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $1;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $20 = (_malloc(4096)|0);
 $21 = $1;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = $20;
 $23 = ($20|0)==(0|0);
 if ($23) {
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  _free($25);
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  _free($28);
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $t = 0;
 while(1) {
  $32 = $t;
  $33 = ($32|0)<(4095);
  if (!($33)) {
   break;
  }
  $34 = $t;
  $35 = (+($34|0));
  $36 = 0.0234375 * $35;
  $37 = $36 / 20.0;
  $38 = (+Math_pow(10.0,(+$37)));
  $39 = 67108863.0 / $38;
  $rate = $39;
  $40 = $rate;
  $41 = (~~(($40)));
  $42 = $t;
  $43 = $1;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42<<2)|0);
  HEAP32[$45>>2] = $41;
  $46 = $t;
  $47 = $1;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($46<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (0 - ($50))|0;
  $52 = $t;
  $53 = (8192 + ($52))|0;
  $54 = $1;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($53<<2)|0);
  HEAP32[$56>>2] = $51;
  $57 = $t;
  $58 = (($57) + 1)|0;
  $t = $58;
 }
 $t = 4095;
 while(1) {
  $59 = $t;
  $60 = ($59|0)<(8192);
  if (!($60)) {
   break;
  }
  $61 = $t;
  $62 = (8192 + ($61))|0;
  $63 = $1;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($62<<2)|0);
  HEAP32[$65>>2] = 0;
  $66 = $t;
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66<<2)|0);
  HEAP32[$69>>2] = 0;
  $70 = $t;
  $71 = (($70) + 1)|0;
  $t = $71;
 }
 $72 = $1;
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 16380|0);
 $75 = $1;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4096|0);
 HEAP32[$78>>2] = $74;
 $79 = $1;
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$81>>2] = $74;
 $s = 1;
 while(1) {
  $82 = $s;
  $83 = ($82|0)<=(512);
  if (!($83)) {
   break;
  }
  $84 = $s;
  $85 = (+($84|0));
  $86 = 6.2831853071795862 * $85;
  $87 = $86 / 2048.0;
  $88 = (+Math_sin((+$87)));
  $pom = $88;
  $89 = $pom;
  $90 = 1.0 / $89;
  $91 = (+_log10($90));
  $92 = 20.0 * $91;
  $pom = $92;
  $93 = $pom;
  $94 = $93 / 0.0234375;
  $95 = (~~(($94)));
  $j = $95;
  $96 = $j;
  $97 = $1;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($96<<2)|0);
  $100 = $s;
  $101 = (1024 - ($100))|0;
  $102 = $1;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + ($101<<2)|0);
  HEAP32[$105>>2] = $99;
  $106 = $s;
  $107 = $1;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($106<<2)|0);
  HEAP32[$110>>2] = $99;
  $111 = $j;
  $112 = (8192 + ($111))|0;
  $113 = $1;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($112<<2)|0);
  $116 = $s;
  $117 = (2048 - ($116))|0;
  $118 = $1;
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($117<<2)|0);
  HEAP32[$121>>2] = $115;
  $122 = $s;
  $123 = (1024 + ($122))|0;
  $124 = $1;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($123<<2)|0);
  HEAP32[$127>>2] = $115;
  $128 = $s;
  $129 = (($128) + 1)|0;
  $s = $129;
 }
 $s = 0;
 while(1) {
  $130 = $s;
  $131 = ($130|0)<(2048);
  if (!($131)) {
   break;
  }
  $132 = $s;
  $133 = ($132|0)<(1024);
  if ($133) {
   $134 = $s;
   $135 = $1;
   $136 = ((($135)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $149 = $139;
  } else {
   $140 = $1;
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 16384|0);
   $149 = $142;
  }
  $143 = $s;
  $144 = (2048 + ($143))|0;
  $145 = $1;
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($144<<2)|0);
  HEAP32[$148>>2] = $149;
  $150 = $s;
  $151 = (($150|0) % 1024)&-1;
  $152 = $1;
  $153 = ((($152)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + ($151<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $s;
  $158 = (4096 + ($157))|0;
  $159 = $1;
  $160 = ((($159)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + ($158<<2)|0);
  HEAP32[$162>>2] = $156;
  $163 = $s;
  $164 = (($163|0) / 512)&-1;
  $165 = $164 & 1;
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $1;
   $168 = HEAP32[$167>>2]|0;
   $169 = ((($168)) + 16384|0);
   $183 = $169;
  } else {
   $170 = $s;
   $171 = (4096 + ($170))|0;
   $172 = $1;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $183 = $176;
  }
  $177 = $s;
  $178 = (6144 + ($177))|0;
  $179 = $1;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + ($178<<2)|0);
  HEAP32[$182>>2] = $183;
  $184 = $s;
  $185 = (($184) + 1)|0;
  $s = $185;
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = ($186|0)<(4096);
  if (!($187)) {
   break;
  }
  $188 = $i;
  $189 = (4095 - ($188))|0;
  $190 = (+($189|0));
  $191 = $190 / 4096.0;
  $192 = (+Math_pow((+$191),8.0));
  $193 = $192 * 4096.0;
  $pom = $193;
  $194 = $pom;
  $195 = (~~(($194)));
  $196 = $i;
  $197 = $1;
  $198 = ((($197)) + 16|0);
  $199 = (($198) + ($196<<2)|0);
  HEAP32[$199>>2] = $195;
  $200 = $i;
  $201 = $i;
  $202 = (4096 + ($201))|0;
  $203 = $1;
  $204 = ((($203)) + 16|0);
  $205 = (($204) + ($202<<2)|0);
  HEAP32[$205>>2] = $200;
  $206 = $i;
  $207 = (($206) + 1)|0;
  $i = $207;
 }
 $208 = $1;
 $209 = ((($208)) + 16|0);
 $210 = ((($209)) + 32768|0);
 HEAP32[$210>>2] = 4095;
 $i = 0;
 while(1) {
  $211 = $i;
  $212 = ($211|0)<(512);
  if (!($212)) {
   break;
  }
  $213 = $i;
  $214 = (+($213|0));
  $215 = 6.2831853071795862 * $214;
  $216 = $215 / 512.0;
  $217 = (+Math_sin((+$216)));
  $218 = 1.0 + $217;
  $219 = $218 / 2.0;
  $pom = $219;
  $220 = $pom;
  $221 = 42.666666666666664 * $220;
  $222 = (~~(($221)));
  $223 = $i;
  $224 = $1;
  $225 = ((($224)) + 8|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + ($223<<2)|0);
  HEAP32[$227>>2] = $222;
  $228 = $pom;
  $229 = 204.79999999999998 * $228;
  $230 = (~~(($229)));
  $231 = $i;
  $232 = (512 + ($231))|0;
  $233 = $1;
  $234 = ((($233)) + 8|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + ($232<<2)|0);
  HEAP32[$236>>2] = $230;
  $237 = $i;
  $238 = (($237) + 1)|0;
  $i = $238;
 }
 $i = 0;
 while(1) {
  $239 = $i;
  $240 = ($239|0)<(512);
  if (!($240)) {
   break;
  }
  $241 = $i;
  $242 = (+($241|0));
  $243 = 6.2831853071795862 * $242;
  $244 = $243 / 512.0;
  $245 = (+Math_sin((+$244)));
  $246 = 15.359999999999999 * $245;
  $pom = $246;
  $247 = $pom;
  $248 = $247 * 0.070000000000000007;
  $249 = 256.0 + $248;
  $250 = (~~(($249)));
  $251 = $i;
  $252 = $1;
  $253 = ((($252)) + 12|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($254) + ($251<<2)|0);
  HEAP32[$255>>2] = $250;
  $256 = $pom;
  $257 = $256 * 0.14000000000000001;
  $258 = 256.0 + $257;
  $259 = (~~(($258)));
  $260 = $i;
  $261 = (512 + ($260))|0;
  $262 = $1;
  $263 = ((($262)) + 12|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + ($261<<2)|0);
  HEAP32[$265>>2] = $259;
  $266 = $i;
  $267 = (($266) + 1)|0;
  $i = $267;
 }
 $0 = 1;
 $268 = $0;
 STACKTOP = sp;return ($268|0);
}
function _set_mul($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CH = 0, $SLOT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 & 15;
 $15 = (15024 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $SLOT;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = $19 & 16;
 $21 = ($20|0)!=(0);
 $22 = $21 ? 0 : 2;
 $23 = $22&255;
 $24 = $SLOT;
 $25 = ((($24)) + 8|0);
 HEAP8[$25>>0] = $23;
 $26 = $2;
 $27 = $26 & 32;
 $28 = $27 >> 5;
 $29 = $28&255;
 $30 = $SLOT;
 $31 = ((($30)) + 44|0);
 HEAP8[$31>>0] = $29;
 $32 = $2;
 $33 = $32 & 64;
 $34 = $33&255;
 $35 = $SLOT;
 $36 = ((($35)) + 73|0);
 HEAP8[$36>>0] = $34;
 $37 = $2;
 $38 = $37 & 128;
 $39 = $38&255;
 $40 = $SLOT;
 $41 = ((($40)) + 72|0);
 HEAP8[$41>>0] = $39;
 $42 = $CH;
 $43 = $SLOT;
 _CALC_FCSLOT($42,$43);
 STACKTOP = sp;return;
}
function _set_ksl_tl($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CH = 0, $SLOT = 0, $ksl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 >> 6;
 $ksl = $14;
 $15 = $ksl;
 $16 = ($15|0)!=(0);
 $17 = $ksl;
 $18 = (3 - ($17))|0;
 $19 = $16 ? $18 : 31;
 $20 = $19&255;
 $21 = $SLOT;
 $22 = ((($21)) + 28|0);
 HEAP8[$22>>0] = $20;
 $23 = $2;
 $24 = $23 & 63;
 $25 = (+($24|0));
 $26 = $25 * 32.0;
 $27 = (~~(($26)));
 $28 = $SLOT;
 HEAP32[$28>>2] = $27;
 $29 = $0;
 $30 = ((($29)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 128;
 $33 = ($32|0)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = $SLOT;
 $35 = HEAP32[$34>>2]|0;
 $36 = $CH;
 $37 = ((($36)) + 192|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $SLOT;
 $40 = ((($39)) + 28|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $38 >>> $42;
 $44 = (($35) + ($43))|0;
 $45 = $SLOT;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = $44;
 STACKTOP = sp;return;
}
function _set_ar_dr($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $CH = 0;
 var $SLOT = 0, $ar = 0, $dr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 >> 4;
 $ar = $14;
 $15 = $2;
 $16 = $15 & 15;
 $dr = $16;
 $17 = $ar;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $ar;
  $20 = $19 << 2;
  $21 = $0;
  $22 = ((($21)) + 88|0);
  $23 = (($22) + ($20<<2)|0);
  $26 = $23;
 } else {
  $26 = 14960;
 }
 $24 = $SLOT;
 $25 = ((($24)) + 12|0);
 HEAP32[$25>>2] = $26;
 $27 = $SLOT;
 $28 = ((($27)) + 29|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $SLOT;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $SLOT;
 $37 = ((($36)) + 60|0);
 HEAP32[$37>>2] = $35;
 $38 = $SLOT;
 $39 = ((($38)) + 45|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)==(2);
 if ($42) {
  $43 = $SLOT;
  $44 = ((($43)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $SLOT;
  $47 = ((($46)) + 56|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = $dr;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $dr;
  $51 = $50 << 2;
  $52 = $0;
  $53 = ((($52)) + 388|0);
  $54 = (($53) + ($51<<2)|0);
  $57 = $54;
 } else {
  $57 = 14960;
 }
 $55 = $SLOT;
 $56 = ((($55)) + 16|0);
 HEAP32[$56>>2] = $57;
 $58 = $SLOT;
 $59 = ((($58)) + 29|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $SLOT;
 $63 = ((($62)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($61<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $SLOT;
 $68 = ((($67)) + 64|0);
 HEAP32[$68>>2] = $66;
 $69 = $SLOT;
 $70 = ((($69)) + 45|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = ($72|0)==(1);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = $SLOT;
 $75 = ((($74)) + 64|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $SLOT;
 $78 = ((($77)) + 56|0);
 HEAP32[$78>>2] = $76;
 STACKTOP = sp;return;
}
function _set_sl_rr($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $CH = 0, $SLOT = 0, $rr = 0, $sl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 >> 4;
 $sl = $14;
 $15 = $2;
 $16 = $15 & 15;
 $rr = $16;
 $17 = $sl;
 $18 = (14896 + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $SLOT;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $SLOT;
 $23 = ((($22)) + 45|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $SLOT;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $SLOT;
  $31 = ((($30)) + 52|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $rr;
 $33 = $32 << 2;
 $34 = $0;
 $35 = ((($34)) + 388|0);
 $36 = (($35) + ($33<<2)|0);
 $37 = $SLOT;
 $38 = ((($37)) + 24|0);
 HEAP32[$38>>2] = $36;
 $39 = $SLOT;
 $40 = ((($39)) + 29|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $SLOT;
 $44 = ((($43)) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $SLOT;
 $49 = ((($48)) + 68|0);
 HEAP32[$49>>2] = $47;
 $50 = $SLOT;
 $51 = ((($50)) + 45|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = ($53|0)==(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $SLOT;
 $56 = ((($55)) + 68|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $SLOT;
 $59 = ((($58)) + 56|0);
 HEAP32[$59>>2] = $57;
 STACKTOP = sp;return;
}
function _OPL_KEYON($SLOT) {
 $SLOT = $SLOT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SLOT;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 45|0);
 HEAP8[$4>>0] = 2;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 56|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = ((($10)) + 48|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 52|0);
 HEAP32[$13>>2] = 268435456;
 STACKTOP = sp;return;
}
function _OPL_KEYOFF($SLOT) {
 $SLOT = $SLOT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SLOT;
 $1 = $0;
 $2 = ((($1)) + 45|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 45|0);
 HEAP8[$7>>0] = 0;
 $8 = $0;
 $9 = ((($8)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 268435456;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $0;
  $14 = ((($13)) + 48|0);
  HEAP32[$14>>2] = 268435456;
 }
 $15 = $0;
 $16 = ((($15)) + 52|0);
 HEAP32[$16>>2] = 536870912;
 $17 = $0;
 $18 = ((($17)) + 68|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 56|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function _CALC_FCSLOT($CH,$SLOT) {
 $CH = $CH|0;
 $SLOT = $SLOT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ksr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CH;
 $1 = $SLOT;
 $2 = $0;
 $3 = ((($2)) + 188|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($4, $7)|0;
 $9 = $1;
 $10 = ((($9)) + 40|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = ((($11)) + 184|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $1;
 $16 = ((($15)) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $14 >> $18;
 $ksr = $19;
 $20 = $1;
 $21 = ((($20)) + 29|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $ksr;
 $25 = ($23|0)!=($24|0);
 if ($25) {
  $26 = $ksr;
  $27 = $26&255;
  $28 = $1;
  $29 = ((($28)) + 29|0);
  HEAP8[$29>>0] = $27;
  $30 = $ksr;
  $31 = $1;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = ((($36)) + 60|0);
  HEAP32[$37>>2] = $35;
  $38 = $ksr;
  $39 = $1;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = ((($44)) + 64|0);
  HEAP32[$45>>2] = $43;
  $46 = $ksr;
  $47 = $1;
  $48 = ((($47)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = ((($52)) + 68|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $1;
 $55 = HEAP32[$54>>2]|0;
 $56 = $0;
 $57 = ((($56)) + 192|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $1;
 $60 = ((($59)) + 28|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $58 >>> $62;
 $64 = (($55) + ($63))|0;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 HEAP32[$66>>2] = $64;
 STACKTOP = sp;return;
}
function _set_algorythm($CH,$ST) {
 $CH = $CH|0;
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $carrier = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CH;
 $1 = $ST;
 $2 = $1;
 $3 = ((($2)) + 32820|0);
 $carrier = $3;
 $4 = $0;
 $5 = ((($4)) + 160|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)!=(0);
 $9 = $carrier;
 $10 = $1;
 $11 = ((($10)) + 32848|0);
 $12 = $8 ? $9 : $11;
 $13 = $0;
 $14 = ((($13)) + 164|0);
 HEAP32[$14>>2] = $12;
 $15 = $carrier;
 $16 = $0;
 $17 = ((($16)) + 168|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _OPL_CALC_SLOT($SLOT,$ST) {
 $SLOT = $SLOT|0;
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SLOT;
 $1 = $ST;
 $2 = $0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>=($11|0);
 do {
  if ($12) {
   $13 = $0;
   $14 = ((($13)) + 45|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   if ((($16|0) == 0)) {
    $50 = $0;
    $51 = ((($50)) + 48|0);
    HEAP32[$51>>2] = 536870912;
    $52 = $0;
    $53 = ((($52)) + 52|0);
    HEAP32[$53>>2] = 536870913;
    $54 = $0;
    $55 = ((($54)) + 56|0);
    HEAP32[$55>>2] = 0;
    break;
   } else if ((($16|0) == 2)) {
    $17 = $0;
    $18 = ((($17)) + 45|0);
    HEAP8[$18>>0] = 1;
    $19 = $0;
    $20 = ((($19)) + 48|0);
    HEAP32[$20>>2] = 268435456;
    $21 = $0;
    $22 = ((($21)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $0;
    $25 = ((($24)) + 52|0);
    HEAP32[$25>>2] = $23;
    $26 = $0;
    $27 = ((($26)) + 64|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $0;
    $30 = ((($29)) + 56|0);
    HEAP32[$30>>2] = $28;
    break;
   } else if ((($16|0) == 1)) {
    $31 = $0;
    $32 = ((($31)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $0;
    $35 = ((($34)) + 48|0);
    HEAP32[$35>>2] = $33;
    $36 = $0;
    $37 = ((($36)) + 52|0);
    HEAP32[$37>>2] = 536870912;
    $38 = $0;
    $39 = ((($38)) + 44|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)!=(0);
    $42 = $0;
    if ($41) {
     $43 = ((($42)) + 56|0);
     HEAP32[$43>>2] = 0;
     break;
    } else {
     $44 = ((($42)) + 45|0);
     HEAP8[$44>>0] = 0;
     $45 = $0;
     $46 = ((($45)) + 68|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $0;
     $49 = ((($48)) + 56|0);
     HEAP32[$49>>2] = $47;
     break;
    }
   } else {
    break;
   }
  }
 } while(0);
 $56 = $0;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $0;
 $60 = ((($59)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 >> 16;
 $63 = $1;
 $64 = ((($63)) + 16|0);
 $65 = (($64) + ($62<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($58) + ($66))|0;
 $68 = $0;
 $69 = ((($68)) + 72|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = ($71|0)!=(0);
 if (!($72)) {
  $77 = 0;
  $76 = (($67) + ($77))|0;
  STACKTOP = sp;return ($76|0);
 }
 $73 = $1;
 $74 = ((($73)) + 32824|0);
 $75 = HEAP32[$74>>2]|0;
 $77 = $75;
 $76 = (($67) + ($77))|0;
 STACKTOP = sp;return ($76|0);
}
function _process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0.0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0.0, $1195 = 0;
 var $1196 = 0, $1197 = 0.0, $1198 = 0.0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0.0, $1203 = 0.0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0.0, $1243 = 0, $1244 = 0, $1245 = 0.0, $1246 = 0.0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0.0, $1251 = 0.0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0.0, $1532 = 0.0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0.0, $154 = 0, $1540 = 0.0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $f = 0, $h = 0, $l = 0, $m = 0, $mod = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $0;
 $p = $7;
 $8 = $0;
 $9 = ((($8)) + 1552|0);
 $m = $9;
 $10 = $m;
 $mod = $10;
 $11 = $p;
 $12 = ((($11)) + 324|0);
 $f = $12;
 $13 = $4;
 $14 = $13&255;
 L1: do {
  switch ($14|0) {
  case 166:  {
   label = 191;
   break;
  }
  case 173:  {
   $1062 = $m;
   $1063 = ((($1062)) + 1280|0);
   $1064 = HEAP32[$1063>>2]|0;
   $1065 = $1064 & 268435456;
   $1066 = ($1065|0)!=(0);
   $1067 = $5;
   $1068 = $1067&255;
   $1069 = ($1068|0)==(0);
   if ($1066) {
    if ($1069) {
     $1070 = $1;
     $1071 = ((($1070)) + 236|0);
     $1072 = ((($1071)) + 12|0);
     $1073 = HEAP32[$1072>>2]|0;
     $1074 = $1073&255;
     $5 = $1074;
     label = 199;
     break L1;
    } else {
     $1075 = $5;
     $1076 = $1075&255;
     $1077 = $1;
     $1078 = ((($1077)) + 236|0);
     $1079 = ((($1078)) + 12|0);
     HEAP32[$1079>>2] = $1076;
     label = 199;
     break L1;
    }
   } else {
    if ($1069) {
     $1080 = $1;
     $1081 = ((($1080)) + 252|0);
     $1082 = HEAP32[$1081>>2]|0;
     $1083 = $1082&255;
     $5 = $1083;
     label = 199;
     break L1;
    } else {
     $1084 = $5;
     $1085 = $1084&255;
     $1086 = $1;
     $1087 = ((($1086)) + 252|0);
     HEAP32[$1087>>2] = $1085;
     label = 199;
     break L1;
    }
   }
   break;
  }
  case 12:  {
   $743 = $1;
   $744 = HEAP32[$743>>2]|0;
   $745 = $744 | 4096;
   HEAP32[$743>>2] = $745;
   $746 = $5;
   $747 = $746&255;
   $748 = $1;
   $749 = ((($748)) + 80|0);
   HEAP32[$749>>2] = $747;
   STACKTOP = sp;return;
   break;
  }
  case 112:  {
   $66 = $5;
   $67 = $66&255;
   $68 = ($67|0)!=(0);
   if (!($68)) {
    STACKTOP = sp;return;
   }
   $69 = $5;
   $70 = $69&255;
   $71 = $70 & 240;
   $72 = $71 >> 4;
   $73 = (0 - ($72))|0;
   $74 = $73&255;
   $75 = $1;
   $76 = ((($75)) + 164|0);
   HEAP8[$76>>0] = $74;
   $77 = $1;
   $78 = ((($77)) + 164|0);
   $79 = ((($78)) + 1|0);
   HEAP8[$79>>0] = 0;
   $80 = $5;
   $81 = $80&255;
   $82 = $81 & 15;
   $83 = $82&255;
   $84 = $1;
   $85 = ((($84)) + 164|0);
   $86 = ((($85)) + 2|0);
   HEAP8[$86>>0] = $83;
   $87 = $1;
   $88 = ((($87)) + 164|0);
   $89 = ((($88)) + 16|0);
   HEAP32[$89>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $224 = $m;
   $225 = ((($224)) + 1280|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $226 & 268435456;
   $228 = ($227|0)!=(0);
   $229 = $5;
   $230 = $229&255;
   $231 = ($230|0)==(0);
   do {
    if ($228) {
     if ($231) {
      $232 = $1;
      $233 = ((($232)) + 236|0);
      $234 = ((($233)) + 12|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $235&255;
      $5 = $236;
      break;
     } else {
      $237 = $5;
      $238 = $237&255;
      $239 = $1;
      $240 = ((($239)) + 236|0);
      $241 = ((($240)) + 12|0);
      HEAP32[$241>>2] = $238;
      break;
     }
    } else {
     if ($231) {
      $242 = $1;
      $243 = ((($242)) + 288|0);
      $244 = ((($243)) + 16|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $245&255;
      $5 = $246;
      break;
     } else {
      $247 = $5;
      $248 = $247&255;
      $249 = $1;
      $250 = ((($249)) + 288|0);
      $251 = ((($250)) + 16|0);
      HEAP32[$251>>2] = $248;
      break;
     }
    }
   } while(0);
   $252 = $m;
   $253 = ((($252)) + 1280|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = $254 & 32;
   $256 = ($255|0)!=(0);
   do {
    if ($256) {
     $257 = $6;
     $258 = ($257|0)==(0);
     if (!($258)) {
      $259 = $m;
      $260 = ((($259)) + 1280|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = $261 & 2048;
      $263 = ($262|0)!=(0);
      if ($263) {
       break;
      }
     }
     $264 = $5;
     $265 = $264&255;
     $266 = $265 & 240;
     $267 = $266 >> 4;
     if ((($267|0) == 14)) {
      $272 = $5;
      $273 = $272&255;
      $274 = $273 & 15;
      $275 = $274&255;
      $5 = $275;
      $276 = $5;
      $277 = $276&255;
      $278 = $277 | 32;
      $279 = $278&255;
      $5 = $279;
      label = 276;
      break L1;
     } else if ((($267|0) == 15)) {
      $268 = $5;
      $269 = $268&255;
      $270 = $269 & 15;
      $271 = $270&255;
      $5 = $271;
      label = 210;
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $280 = $1;
   $281 = HEAP32[$280>>2]|0;
   $282 = $281 | 8;
   HEAP32[$280>>2] = $282;
   $283 = $5;
   $284 = $283&255;
   $285 = ($284|0)!=(0);
   if ($285) {
    $286 = $5;
    $287 = $286&255;
    $288 = $1;
    $289 = ((($288)) + 288|0);
    HEAP32[$289>>2] = $287;
    $290 = $m;
    $291 = ((($290)) + 1280|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & 1024;
    $294 = ($293|0)!=(0);
    if (!($294)) {
     STACKTOP = sp;return;
    }
    $295 = $5;
    $296 = $295&255;
    $297 = $1;
    $298 = ((($297)) + 312|0);
    $299 = ((($298)) + 16|0);
    HEAP32[$299>>2] = $296;
    STACKTOP = sp;return;
   } else {
    $300 = $1;
    $301 = ((($300)) + 288|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = ($302|0)<(0);
    if (!($303)) {
     STACKTOP = sp;return;
    }
    $304 = $1;
    $305 = ((($304)) + 288|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = Math_imul($306, -1)|0;
    HEAP32[$305>>2] = $307;
    STACKTOP = sp;return;
   }
   break;
  }
  case 1:  {
   $139 = $m;
   $140 = ((($139)) + 1280|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 & 268435456;
   $143 = ($142|0)!=(0);
   $144 = $5;
   $145 = $144&255;
   $146 = ($145|0)==(0);
   do {
    if ($143) {
     if ($146) {
      $147 = $1;
      $148 = ((($147)) + 236|0);
      $149 = ((($148)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $150&255;
      $5 = $151;
      break;
     } else {
      $152 = $5;
      $153 = $152&255;
      $154 = $1;
      $155 = ((($154)) + 236|0);
      $156 = ((($155)) + 12|0);
      HEAP32[$156>>2] = $153;
      break;
     }
    } else {
     if ($146) {
      $157 = $1;
      $158 = ((($157)) + 288|0);
      $159 = ((($158)) + 16|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = $160&255;
      $5 = $161;
      break;
     } else {
      $162 = $5;
      $163 = $162&255;
      $164 = $1;
      $165 = ((($164)) + 288|0);
      $166 = ((($165)) + 16|0);
      HEAP32[$166>>2] = $163;
      break;
     }
    }
   } while(0);
   $167 = $m;
   $168 = ((($167)) + 1280|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169 & 32;
   $171 = ($170|0)!=(0);
   do {
    if ($171) {
     $172 = $6;
     $173 = ($172|0)==(0);
     if (!($173)) {
      $174 = $m;
      $175 = ((($174)) + 1280|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $176 & 2048;
      $178 = ($177|0)!=(0);
      if ($178) {
       break;
      }
     }
     $179 = $5;
     $180 = $179&255;
     $181 = $180 & 240;
     $182 = $181 >> 4;
     if ((($182|0) == 14)) {
      $187 = $5;
      $188 = $187&255;
      $189 = $188 & 15;
      $190 = $189&255;
      $5 = $190;
      $191 = $5;
      $192 = $191&255;
      $193 = $192 | 16;
      $194 = $193&255;
      $5 = $194;
      label = 276;
      break L1;
     } else if ((($182|0) == 15)) {
      $183 = $5;
      $184 = $183&255;
      $185 = $184 & 15;
      $186 = $185&255;
      $5 = $186;
      label = 208;
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $195 = $1;
   $196 = HEAP32[$195>>2]|0;
   $197 = $196 | 8;
   HEAP32[$195>>2] = $197;
   $198 = $5;
   $199 = $198&255;
   $200 = ($199|0)!=(0);
   if ($200) {
    $201 = $5;
    $202 = $201&255;
    $203 = (0 - ($202))|0;
    $204 = $1;
    $205 = ((($204)) + 288|0);
    HEAP32[$205>>2] = $203;
    $206 = $m;
    $207 = ((($206)) + 1280|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = $208 & 1024;
    $210 = ($209|0)!=(0);
    if (!($210)) {
     STACKTOP = sp;return;
    }
    $211 = $5;
    $212 = $211&255;
    $213 = $1;
    $214 = ((($213)) + 312|0);
    $215 = ((($214)) + 16|0);
    HEAP32[$215>>2] = $212;
    STACKTOP = sp;return;
   } else {
    $216 = $1;
    $217 = ((($216)) + 288|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)>(0);
    if (!($219)) {
     STACKTOP = sp;return;
    }
    $220 = $1;
    $221 = ((($220)) + 288|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = Math_imul($222, -1)|0;
    HEAP32[$221>>2] = $223;
    STACKTOP = sp;return;
   }
   break;
  }
  case 0:  {
   label = 2;
   break;
  }
  case 15:  {
   $1047 = $p;
   $1048 = ((($1047)) + 28|0);
   $1049 = HEAP32[$1048>>2]|0;
   $1050 = $1049 & 1;
   $1051 = ($1050|0)!=(0);
   if ($1051) {
    label = 217;
   } else {
    $1052 = $5;
    $1053 = $1052&255;
    $1054 = ($1053|0)<(32);
    if ($1054) {
     label = 217;
    } else {
     label = 219;
    }
   }
   break;
  }
  case 13:  {
   $750 = $p;
   $751 = ((($750)) + 324|0);
   HEAP32[$751>>2] = 1;
   $752 = $5;
   $753 = $752&255;
   $754 = $753 & 240;
   $755 = $754 >> 4;
   $756 = ($755*10)|0;
   $757 = $5;
   $758 = $757&255;
   $759 = $758 & 15;
   $760 = (($756) + ($759))|0;
   $761 = $p;
   $762 = ((($761)) + 324|0);
   $763 = ((($762)) + 16|0);
   HEAP32[$763>>2] = $760;
   STACKTOP = sp;return;
   break;
  }
  case 176:  {
   label = 210;
   break;
  }
  case 4:  {
   $389 = $5;
   $390 = $389&255;
   $391 = ($390|0)==(0);
   if ($391) {
    $392 = $1;
    $393 = ((($392)) + 104|0);
    $394 = ((($393)) + 16|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $395&255;
    $5 = $396;
   } else {
    $397 = $5;
    $398 = $397&255;
    $399 = $1;
    $400 = ((($399)) + 104|0);
    $401 = ((($400)) + 16|0);
    HEAP32[$401>>2] = $398;
   }
   $402 = $m;
   $403 = ((($402)) + 1280|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = $404 & 268435456;
   $406 = ($405|0)!=(0);
   if ($406) {
    $407 = $5;
    $408 = $407&255;
    $409 = ($408|0)!=(0);
    if ($409) {
     $410 = $5;
     $411 = $410&255;
     $412 = $1;
     $413 = ((($412)) + 236|0);
     $414 = ((($413)) + 12|0);
     HEAP32[$414>>2] = $411;
    }
   }
   $415 = $1;
   $416 = HEAP32[$415>>2]|0;
   $417 = $416 | 16;
   HEAP32[$415>>2] = $417;
   $418 = $5;
   $419 = $418&255;
   $420 = $419 & 15;
   $421 = $420 << 2;
   $422 = ($421|0)!=(0);
   if ($422) {
    $423 = $1;
    $424 = ((($423)) + 104|0);
    $425 = $5;
    $426 = $425&255;
    $427 = $426 & 15;
    $428 = $427 << 2;
    _set_lfo_depth($424,$428);
   }
   $429 = $5;
   $430 = $429&255;
   $431 = $430 & 240;
   $432 = $431 >> 4;
   $433 = ($432|0)!=(0);
   if (!($433)) {
    STACKTOP = sp;return;
   }
   $434 = $1;
   $435 = ((($434)) + 104|0);
   $436 = $5;
   $437 = $436&255;
   $438 = $437 & 240;
   $439 = $438 >> 4;
   _set_lfo_rate($435,$439);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $733 = $p;
   $734 = ((($733)) + 324|0);
   HEAP32[$734>>2] = 1;
   $735 = $5;
   $736 = $735&255;
   $737 = $p;
   $738 = ((($737)) + 324|0);
   $739 = ((($738)) + 4|0);
   HEAP32[$739>>2] = $736;
   $740 = $p;
   $741 = ((($740)) + 324|0);
   $742 = ((($741)) + 16|0);
   HEAP32[$742>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 175:  {
   label = 208;
   break;
  }
  case 3:  {
   $308 = $m;
   $309 = ((($308)) + 1280|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = $310 & 131072;
   $312 = ($311|0)!=(0);
   if ($312) {
    $313 = $3;
    $314 = $313&255;
    $315 = ($314|0)==(0);
    if ($315) {
     $316 = $1;
     $317 = ((($316)) + 312|0);
     $318 = ((($317)) + 8|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = ($319|0)==(0);
     if ($320) {
      STACKTOP = sp;return;
     }
    }
   }
   $321 = $1;
   $322 = ((($321)) + 44|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $mod;
   $325 = ((($324)) + 140|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = ($323>>>0)<($326>>>0);
   if (!($327)) {
    STACKTOP = sp;return;
   }
   $328 = $1;
   $329 = ((($328)) + 44|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $mod;
   $332 = ((($331)) + 176|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + (($330*764)|0)|0);
   $335 = ((($334)) + 36|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = ($336|0)>(0);
   if (!($337)) {
    STACKTOP = sp;return;
   }
   $338 = $m;
   $339 = $1;
   $340 = $3;
   $341 = $340&255;
   _do_toneporta($338,$339,$341);
   $342 = $5;
   $343 = $342&255;
   $344 = ($343|0)==(0);
   if ($344) {
    $345 = $1;
    $346 = ((($345)) + 312|0);
    $347 = ((($346)) + 16|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = $348&255;
    $5 = $349;
   } else {
    $350 = $5;
    $351 = $350&255;
    $352 = $1;
    $353 = ((($352)) + 312|0);
    $354 = ((($353)) + 16|0);
    HEAP32[$354>>2] = $351;
   }
   $355 = $m;
   $356 = ((($355)) + 1280|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = $357 & 268435456;
   $359 = ($358|0)!=(0);
   if ($359) {
    $360 = $5;
    $361 = $360&255;
    $362 = ($361|0)!=(0);
    if ($362) {
     $363 = $5;
     $364 = $363&255;
     $365 = $1;
     $366 = ((($365)) + 236|0);
     $367 = ((($366)) + 12|0);
     HEAP32[$367>>2] = $364;
    }
   }
   $368 = $5;
   $369 = $368&255;
   $370 = ($369|0)!=(0);
   if ($370) {
    $371 = $m;
    $372 = ((($371)) + 1280|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = $373 & 1024;
    $375 = ($374|0)!=(0);
    if ($375) {
     $376 = $5;
     $377 = $376&255;
     $378 = $1;
     $379 = ((($378)) + 288|0);
     $380 = ((($379)) + 16|0);
     HEAP32[$380>>2] = $377;
    }
    $381 = $5;
    $382 = $381&255;
    $383 = $1;
    $384 = ((($383)) + 312|0);
    $385 = ((($384)) + 12|0);
    HEAP32[$385>>2] = $382;
   }
   $386 = $1;
   $387 = HEAP32[$386>>2]|0;
   $388 = $387 | 4;
   HEAP32[$386>>2] = $388;
   STACKTOP = sp;return;
   break;
  }
  case 180:  {
   $38 = $m;
   $39 = ((($38)) + 1280|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 268435456;
   $42 = ($41|0)!=(0);
   $43 = $5;
   $44 = $43&255;
   $45 = ($44|0)==(0);
   if ($42) {
    if ($45) {
     $46 = $1;
     $47 = ((($46)) + 236|0);
     $48 = ((($47)) + 12|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $49&255;
     $5 = $50;
     label = 2;
     break L1;
    } else {
     $51 = $5;
     $52 = $51&255;
     $53 = $1;
     $54 = ((($53)) + 236|0);
     $55 = ((($54)) + 12|0);
     HEAP32[$55>>2] = $52;
     label = 2;
     break L1;
    }
   } else {
    if ($45) {
     $56 = $1;
     $57 = ((($56)) + 164|0);
     $58 = ((($57)) + 24|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = $59&255;
     $5 = $60;
     label = 2;
     break L1;
    } else {
     $61 = $5;
     $62 = $61&255;
     $63 = $1;
     $64 = ((($63)) + 164|0);
     $65 = ((($64)) + 24|0);
     HEAP32[$65>>2] = $62;
     label = 2;
     break L1;
    }
   }
   break;
  }
  case 6:  {
   $513 = $1;
   $514 = HEAP32[$513>>2]|0;
   $515 = $514 | 16;
   HEAP32[$513>>2] = $515;
   label = 107;
   break;
  }
  case 9:  {
   $569 = $1;
   $570 = HEAP32[$569>>2]|0;
   $571 = $570 | 256;
   HEAP32[$569>>2] = $571;
   $572 = $5;
   $573 = ($572<<24>>24)!=(0);
   if ($573) {
    $574 = $5;
    $575 = $574&255;
    $576 = $575 << 8;
    $577 = $1;
    $578 = ((($577)) + 88|0);
    HEAP32[$578>>2] = $576;
    $579 = $1;
    $580 = ((($579)) + 92|0);
    HEAP32[$580>>2] = $576;
    STACKTOP = sp;return;
   } else {
    $581 = $1;
    $582 = ((($581)) + 88|0);
    $583 = HEAP32[$582>>2]|0;
    $584 = $1;
    $585 = ((($584)) + 92|0);
    HEAP32[$585>>2] = $583;
    STACKTOP = sp;return;
   }
   break;
  }
  case 174:  {
   $1096 = $m;
   $1097 = ((($1096)) + 1280|0);
   $1098 = HEAP32[$1097>>2]|0;
   $1099 = $1098 & 268435456;
   $1100 = ($1099|0)!=(0);
   $1101 = $5;
   $1102 = $1101&255;
   $1103 = ($1102|0)==(0);
   if ($1100) {
    if ($1103) {
     $1104 = $1;
     $1105 = ((($1104)) + 236|0);
     $1106 = ((($1105)) + 12|0);
     $1107 = HEAP32[$1106>>2]|0;
     $1108 = $1107&255;
     $5 = $1108;
     label = 207;
     break L1;
    } else {
     $1109 = $5;
     $1110 = $1109&255;
     $1111 = $1;
     $1112 = ((($1111)) + 236|0);
     $1113 = ((($1112)) + 12|0);
     HEAP32[$1113>>2] = $1110;
     label = 207;
     break L1;
    }
   } else {
    if ($1103) {
     $1114 = $1;
     $1115 = ((($1114)) + 252|0);
     $1116 = HEAP32[$1115>>2]|0;
     $1117 = $1116&255;
     $5 = $1117;
     label = 207;
     break L1;
    } else {
     $1118 = $5;
     $1119 = $1118&255;
     $1120 = $1;
     $1121 = ((($1120)) + 252|0);
     HEAP32[$1121>>2] = $1119;
     label = 207;
     break L1;
    }
   }
   break;
  }
  case 114:  {
   $117 = $5;
   $118 = $117&255;
   $119 = ($118|0)!=(0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   $120 = $5;
   $121 = $120&255;
   $122 = $121 & 15;
   $123 = $122&255;
   $124 = $1;
   $125 = ((($124)) + 164|0);
   HEAP8[$125>>0] = $123;
   $126 = $5;
   $127 = $126&255;
   $128 = $127 & 15;
   $129 = $128&255;
   $130 = $1;
   $131 = ((($130)) + 164|0);
   $132 = ((($131)) + 1|0);
   HEAP8[$132>>0] = $129;
   $133 = $1;
   $134 = ((($133)) + 164|0);
   $135 = ((($134)) + 2|0);
   HEAP8[$135>>0] = 0;
   $136 = $1;
   $137 = ((($136)) + 164|0);
   $138 = ((($137)) + 16|0);
   HEAP32[$138>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 164:  {
   $706 = $1;
   $707 = HEAP32[$706>>2]|0;
   $708 = $707 | 8192;
   HEAP32[$706>>2] = $708;
   $709 = $5;
   $710 = ($709<<24>>24)!=(0);
   if (!($710)) {
    STACKTOP = sp;return;
   }
   $711 = $5;
   $712 = $711&255;
   $713 = $712 & 240;
   $714 = $713 >> 4;
   $h = $714;
   $715 = $5;
   $716 = $715&255;
   $717 = $716 & 15;
   $l = $717;
   $718 = $l;
   $719 = ($718|0)==(0);
   $720 = $h;
   if ($719) {
    $721 = $1;
    $722 = ((($721)) + 236|0);
    $723 = ((($722)) + 8|0);
    HEAP32[$723>>2] = $720;
    STACKTOP = sp;return;
   }
   $724 = ($720|0)==(0);
   if ($724) {
    $725 = $l;
    $726 = (0 - ($725))|0;
    $727 = $1;
    $728 = ((($727)) + 236|0);
    $729 = ((($728)) + 8|0);
    HEAP32[$729>>2] = $726;
    STACKTOP = sp;return;
   } else {
    $730 = $1;
    $731 = HEAP32[$730>>2]|0;
    $732 = $731 & -8193;
    HEAP32[$730>>2] = $732;
    STACKTOP = sp;return;
   }
   break;
  }
  case 14:  {
   $764 = $m;
   $765 = ((($764)) + 1280|0);
   $766 = HEAP32[$765>>2]|0;
   $767 = $766 & 268435456;
   $768 = ($767|0)!=(0);
   do {
    if ($768) {
     $769 = $5;
     $770 = $769&255;
     $771 = ($770|0)==(0);
     if ($771) {
      $772 = $1;
      $773 = ((($772)) + 236|0);
      $774 = ((($773)) + 12|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = $775&255;
      $5 = $776;
      break;
     } else {
      $777 = $5;
      $778 = $777&255;
      $779 = $1;
      $780 = ((($779)) + 236|0);
      $781 = ((($780)) + 12|0);
      HEAP32[$781>>2] = $778;
      break;
     }
    }
   } while(0);
   $782 = $5;
   $783 = $782&255;
   $784 = $783 >> 4;
   $785 = $784&255;
   $4 = $785;
   $786 = $5;
   $787 = $786&255;
   $788 = $787 & 15;
   $789 = $788&255;
   $5 = $789;
   $790 = $4;
   $791 = $790&255;
   do {
    switch ($791|0) {
    case 12:  {
     $1022 = $1;
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = $1023 | 262144;
     HEAP32[$1022>>2] = $1024;
     $1025 = $1;
     $1026 = ((($1025)) + 8|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 | 8;
     HEAP32[$1026>>2] = $1028;
     $1029 = $5;
     $1030 = $1029&255;
     $1031 = (($1030) + 1)|0;
     $1032 = $1;
     $1033 = ((($1032)) + 212|0);
     HEAP32[$1033>>2] = $1031;
     $1034 = $1;
     $1035 = ((($1034)) + 212|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1;
     $1038 = ((($1037)) + 212|0);
     $1039 = ((($1038)) + 4|0);
     HEAP32[$1039>>2] = $1036;
     $1040 = $1;
     $1041 = ((($1040)) + 212|0);
     $1042 = ((($1041)) + 8|0);
     HEAP32[$1042>>2] = 16;
     STACKTOP = sp;return;
     break;
    }
    case 15:  {
     $1043 = $5;
     $1044 = $1043&255;
     $1045 = $1;
     $1046 = ((($1045)) + 360|0);
     HEAP32[$1046>>2] = $1044;
     STACKTOP = sp;return;
     break;
    }
    case 11:  {
     $994 = $m;
     $995 = ((($994)) + 1280|0);
     $996 = HEAP32[$995>>2]|0;
     $997 = $996 & 268435456;
     $998 = ($997|0)!=(0);
     $999 = $5;
     $1000 = $999&255;
     $1001 = ($1000|0)==(0);
     if ($998) {
      if ($1001) {
       $1002 = $1;
       $1003 = ((($1002)) + 236|0);
       $1004 = ((($1003)) + 12|0);
       $1005 = HEAP32[$1004>>2]|0;
       $1006 = $1005&255;
       $5 = $1006;
       label = 207;
       break L1;
      } else {
       $1007 = $5;
       $1008 = $1007&255;
       $1009 = $1;
       $1010 = ((($1009)) + 236|0);
       $1011 = ((($1010)) + 12|0);
       HEAP32[$1011>>2] = $1008;
       label = 207;
       break L1;
      }
     } else {
      if ($1001) {
       $1012 = $1;
       $1013 = ((($1012)) + 252|0);
       $1014 = ((($1013)) + 4|0);
       $1015 = HEAP32[$1014>>2]|0;
       $1016 = $1015&255;
       $5 = $1016;
       label = 207;
       break L1;
      } else {
       $1017 = $5;
       $1018 = $1017&255;
       $1019 = $1;
       $1020 = ((($1019)) + 252|0);
       $1021 = ((($1020)) + 4|0);
       HEAP32[$1021>>2] = $1018;
       label = 207;
       break L1;
      }
     }
     break;
    }
    case 5:  {
     $870 = $5;
     $871 = $870&255;
     $872 = $871 << 4;
     $873 = $872&255;
     $5 = $873;
     $874 = $m;
     $875 = ((($874)) + 1280|0);
     $876 = HEAP32[$875>>2]|0;
     $877 = $876 & 536870912;
     $878 = ($877|0)!=(0);
     if (!($878)) {
      label = 191;
      break L1;
     }
     $879 = $3;
     $880 = $879&255;
     $881 = ($880|0)>(0);
     if ($881) {
      label = 191;
      break L1;
     }
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $846 = $5;
     $847 = $846&255;
     $848 = $1;
     $849 = ((($848)) + 76|0);
     HEAP32[$849>>2] = $847;
     STACKTOP = sp;return;
     break;
    }
    case 10:  {
     $968 = $m;
     $969 = ((($968)) + 1280|0);
     $970 = HEAP32[$969>>2]|0;
     $971 = $970 & 268435456;
     $972 = ($971|0)!=(0);
     $973 = $5;
     $974 = $973&255;
     $975 = ($974|0)==(0);
     if ($972) {
      if ($975) {
       $976 = $1;
       $977 = ((($976)) + 236|0);
       $978 = ((($977)) + 12|0);
       $979 = HEAP32[$978>>2]|0;
       $980 = $979&255;
       $5 = $980;
       label = 199;
       break L1;
      } else {
       $981 = $5;
       $982 = $981&255;
       $983 = $1;
       $984 = ((($983)) + 236|0);
       $985 = ((($984)) + 12|0);
       HEAP32[$985>>2] = $982;
       label = 199;
       break L1;
      }
     } else {
      if ($975) {
       $986 = $1;
       $987 = ((($986)) + 252|0);
       $988 = HEAP32[$987>>2]|0;
       $989 = $988&255;
       $5 = $989;
       label = 199;
       break L1;
      } else {
       $990 = $5;
       $991 = $990&255;
       $992 = $1;
       $993 = ((($992)) + 252|0);
       HEAP32[$993>>2] = $991;
       label = 199;
       break L1;
      }
     }
     break;
    }
    case 1:  {
     $792 = $m;
     $793 = ((($792)) + 1280|0);
     $794 = HEAP32[$793>>2]|0;
     $795 = $794 & 268435456;
     $796 = ($795|0)!=(0);
     $797 = $5;
     $798 = $797&255;
     $799 = ($798|0)==(0);
     if ($796) {
      if ($799) {
       $800 = $1;
       $801 = ((($800)) + 236|0);
       $802 = ((($801)) + 12|0);
       $803 = HEAP32[$802>>2]|0;
       $804 = $803&255;
       $5 = $804;
       label = 208;
       break L1;
      } else {
       $805 = $5;
       $806 = $805&255;
       $807 = $1;
       $808 = ((($807)) + 236|0);
       $809 = ((($808)) + 12|0);
       HEAP32[$809>>2] = $806;
       label = 208;
       break L1;
      }
     } else {
      if ($799) {
       $810 = $1;
       $811 = ((($810)) + 336|0);
       $812 = HEAP32[$811>>2]|0;
       $813 = $812&255;
       $5 = $813;
       label = 208;
       break L1;
      } else {
       $814 = $5;
       $815 = $814&255;
       $816 = $1;
       $817 = ((($816)) + 336|0);
       HEAP32[$817>>2] = $815;
       label = 208;
       break L1;
      }
     }
     break;
    }
    case 9:  {
     $950 = $1;
     $951 = HEAP32[$950>>2]|0;
     $952 = $951 | 262144;
     HEAP32[$950>>2] = $952;
     $953 = $5;
     $954 = $953&255;
     $955 = $1;
     $956 = ((($955)) + 212|0);
     HEAP32[$956>>2] = $954;
     $957 = $1;
     $958 = ((($957)) + 212|0);
     $959 = HEAP32[$958>>2]|0;
     $960 = $959 & 15;
     $961 = (($960) + 1)|0;
     $962 = $1;
     $963 = ((($962)) + 212|0);
     $964 = ((($963)) + 4|0);
     HEAP32[$964>>2] = $961;
     $965 = $1;
     $966 = ((($965)) + 212|0);
     $967 = ((($966)) + 8|0);
     HEAP32[$967>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $818 = $m;
     $819 = ((($818)) + 1280|0);
     $820 = HEAP32[$819>>2]|0;
     $821 = $820 & 268435456;
     $822 = ($821|0)!=(0);
     $823 = $5;
     $824 = $823&255;
     $825 = ($824|0)==(0);
     if ($822) {
      if ($825) {
       $826 = $1;
       $827 = ((($826)) + 236|0);
       $828 = ((($827)) + 12|0);
       $829 = HEAP32[$828>>2]|0;
       $830 = $829&255;
       $5 = $830;
       label = 210;
       break L1;
      } else {
       $831 = $5;
       $832 = $831&255;
       $833 = $1;
       $834 = ((($833)) + 236|0);
       $835 = ((($834)) + 12|0);
       HEAP32[$835>>2] = $832;
       label = 210;
       break L1;
      }
     } else {
      if ($825) {
       $836 = $1;
       $837 = ((($836)) + 336|0);
       $838 = ((($837)) + 4|0);
       $839 = HEAP32[$838>>2]|0;
       $840 = $839&255;
       $5 = $840;
       label = 210;
       break L1;
      } else {
       $841 = $5;
       $842 = $841&255;
       $843 = $1;
       $844 = ((($843)) + 336|0);
       $845 = ((($844)) + 4|0);
       HEAP32[$845>>2] = $842;
       label = 210;
       break L1;
      }
     }
     break;
    }
    case 7:  {
     $945 = $1;
     $946 = ((($945)) + 124|0);
     $947 = $5;
     $948 = $947&255;
     $949 = $948 & 3;
     _set_lfo_waveform($946,$949);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $850 = $5;
     $851 = $850&255;
     $852 = $851 & 3;
     $853 = $852&255;
     $5 = $853;
     $854 = $m;
     $855 = ((($854)) + 1280|0);
     $856 = HEAP32[$855>>2]|0;
     $857 = $856 & 8388608;
     $858 = ($857|0)!=(0);
     if ($858) {
      $859 = $5;
      $860 = $859&255;
      $861 = ($860|0)==(2);
      if ($861) {
       $862 = $5;
       $863 = $862&255;
       $864 = $863 | 16;
       $865 = $864&255;
       $5 = $865;
      }
     }
     $866 = $1;
     $867 = ((($866)) + 104|0);
     $868 = $5;
     $869 = $868&255;
     _set_lfo_waveform($867,$869);
     STACKTOP = sp;return;
     break;
    }
    case 6:  {
     $882 = $5;
     $883 = $882&255;
     $884 = ($883|0)==(0);
     if ($884) {
      $885 = $p;
      $886 = ((($885)) + 8|0);
      $887 = HEAP32[$886>>2]|0;
      $888 = $2;
      $889 = $f;
      $890 = ((($889)) + 24|0);
      $891 = HEAP32[$890>>2]|0;
      $892 = (($891) + ($888<<3)|0);
      HEAP32[$892>>2] = $887;
      STACKTOP = sp;return;
     }
     $893 = $2;
     $894 = $f;
     $895 = ((($894)) + 24|0);
     $896 = HEAP32[$895>>2]|0;
     $897 = (($896) + ($893<<3)|0);
     $898 = ((($897)) + 4|0);
     $899 = HEAP32[$898>>2]|0;
     $900 = ($899|0)!=(0);
     $901 = $2;
     $902 = $f;
     $903 = ((($902)) + 24|0);
     $904 = HEAP32[$903>>2]|0;
     $905 = (($904) + ($901<<3)|0);
     if (!($900)) {
      $928 = HEAP32[$905>>2]|0;
      $929 = $p;
      $930 = ((($929)) + 8|0);
      $931 = HEAP32[$930>>2]|0;
      $932 = ($928|0)<=($931|0);
      if (!($932)) {
       STACKTOP = sp;return;
      }
      $933 = $5;
      $934 = $933&255;
      $935 = $2;
      $936 = $f;
      $937 = ((($936)) + 24|0);
      $938 = HEAP32[$937>>2]|0;
      $939 = (($938) + ($935<<3)|0);
      $940 = ((($939)) + 4|0);
      HEAP32[$940>>2] = $934;
      $941 = $2;
      $942 = (($941) + 1)|0;
      $2 = $942;
      $943 = $f;
      $944 = ((($943)) + 20|0);
      HEAP32[$944>>2] = $942;
      STACKTOP = sp;return;
     }
     $906 = ((($905)) + 4|0);
     $907 = HEAP32[$906>>2]|0;
     $908 = (($907) + -1)|0;
     HEAP32[$906>>2] = $908;
     $909 = ($908|0)!=(0);
     if ($909) {
      $910 = $2;
      $911 = (($910) + 1)|0;
      $2 = $911;
      $912 = $f;
      $913 = ((($912)) + 20|0);
      HEAP32[$913>>2] = $911;
      STACKTOP = sp;return;
     }
     $914 = $m;
     $915 = ((($914)) + 1280|0);
     $916 = HEAP32[$915>>2]|0;
     $917 = $916 & 1;
     $918 = ($917|0)!=(0);
     if (!($918)) {
      STACKTOP = sp;return;
     }
     $919 = $p;
     $920 = ((($919)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $922 = (($921) + 1)|0;
     $923 = $2;
     $924 = $f;
     $925 = ((($924)) + 24|0);
     $926 = HEAP32[$925>>2]|0;
     $927 = (($926) + ($923<<3)|0);
     HEAP32[$927>>2] = $922;
     STACKTOP = sp;return;
     break;
    }
    case 14:  {
     label = 212;
     break L1;
     break;
    }
    default: {
     STACKTOP = sp;return;
    }
    }
   } while(0);
   break;
  }
  case 172:  {
   $440 = $5;
   $441 = $440&255;
   $442 = ($441|0)==(0);
   if ($442) {
    $443 = $1;
    $444 = ((($443)) + 104|0);
    $445 = ((($444)) + 16|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = $446&255;
    $5 = $447;
   } else {
    $448 = $5;
    $449 = $448&255;
    $450 = $1;
    $451 = ((($450)) + 104|0);
    $452 = ((($451)) + 16|0);
    HEAP32[$452>>2] = $449;
   }
   $453 = $m;
   $454 = ((($453)) + 1280|0);
   $455 = HEAP32[$454>>2]|0;
   $456 = $455 & 268435456;
   $457 = ($456|0)!=(0);
   if ($457) {
    $458 = $5;
    $459 = $458&255;
    $460 = ($459|0)!=(0);
    if ($460) {
     $461 = $5;
     $462 = $461&255;
     $463 = $1;
     $464 = ((($463)) + 236|0);
     $465 = ((($464)) + 12|0);
     HEAP32[$465>>2] = $462;
    }
   }
   $466 = $1;
   $467 = HEAP32[$466>>2]|0;
   $468 = $467 | 16;
   HEAP32[$466>>2] = $468;
   $469 = $5;
   $470 = $469&255;
   $471 = $470 & 15;
   $472 = ($471|0)!=(0);
   if ($472) {
    $473 = $1;
    $474 = ((($473)) + 104|0);
    $475 = $5;
    $476 = $475&255;
    $477 = $476 & 15;
    _set_lfo_depth($474,$477);
   }
   $478 = $5;
   $479 = $478&255;
   $480 = $479 & 240;
   $481 = $480 >> 4;
   $482 = ($481|0)!=(0);
   if (!($482)) {
    STACKTOP = sp;return;
   }
   $483 = $1;
   $484 = ((($483)) + 104|0);
   $485 = $5;
   $486 = $485&255;
   $487 = $486 & 240;
   $488 = $487 >> 4;
   _set_lfo_rate($484,$488);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $565 = $5;
   $566 = $565&255;
   $567 = $1;
   $568 = ((($567)) + 344|0);
   HEAP32[$568>>2] = $566;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $489 = $1;
   $490 = ((($489)) + 44|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = $mod;
   $493 = ((($492)) + 140|0);
   $494 = HEAP32[$493>>2]|0;
   $495 = ($491>>>0)<($494>>>0);
   if (!($495)) {
    STACKTOP = sp;return;
   }
   $496 = $1;
   $497 = ((($496)) + 44|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = $mod;
   $500 = ((($499)) + 176|0);
   $501 = HEAP32[$500>>2]|0;
   $502 = (($501) + (($498*764)|0)|0);
   $503 = ((($502)) + 36|0);
   $504 = HEAP32[$503>>2]|0;
   $505 = ($504|0)>(0);
   if ($505) {
    $506 = $m;
    $507 = $1;
    $508 = $3;
    $509 = $508&255;
    _do_toneporta($506,$507,$509);
    $510 = $1;
    $511 = HEAP32[$510>>2]|0;
    $512 = $511 | 4;
    HEAP32[$510>>2] = $512;
    label = 107;
    break L1;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 7:  {
   $516 = $5;
   $517 = $516&255;
   $518 = ($517|0)==(0);
   if ($518) {
    $519 = $1;
    $520 = ((($519)) + 124|0);
    $521 = ((($520)) + 16|0);
    $522 = HEAP32[$521>>2]|0;
    $523 = $522&255;
    $5 = $523;
   } else {
    $524 = $5;
    $525 = $524&255;
    $526 = $1;
    $527 = ((($526)) + 124|0);
    $528 = ((($527)) + 16|0);
    HEAP32[$528>>2] = $525;
   }
   $529 = $m;
   $530 = ((($529)) + 1280|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = $531 & 268435456;
   $533 = ($532|0)!=(0);
   if ($533) {
    $534 = $5;
    $535 = $534&255;
    $536 = ($535|0)!=(0);
    if ($536) {
     $537 = $5;
     $538 = $537&255;
     $539 = $1;
     $540 = ((($539)) + 236|0);
     $541 = ((($540)) + 12|0);
     HEAP32[$541>>2] = $538;
    }
   }
   $542 = $1;
   $543 = HEAP32[$542>>2]|0;
   $544 = $543 | 32;
   HEAP32[$542>>2] = $544;
   $545 = $5;
   $546 = $545&255;
   $547 = $546 & 15;
   $548 = ($547|0)!=(0);
   if ($548) {
    $549 = $1;
    $550 = ((($549)) + 124|0);
    $551 = $5;
    $552 = $551&255;
    $553 = $552 & 15;
    _set_lfo_depth($550,$553);
   }
   $554 = $5;
   $555 = $554&255;
   $556 = $555 & 240;
   $557 = $556 >> 4;
   $558 = ($557|0)!=(0);
   if (!($558)) {
    STACKTOP = sp;return;
   }
   $559 = $1;
   $560 = ((($559)) + 124|0);
   $561 = $5;
   $562 = $561&255;
   $563 = $562 & 240;
   $564 = $563 >> 4;
   _set_lfo_rate($560,$564);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   label = 107;
   break;
  }
  case 113:  {
   $90 = $5;
   $91 = $90&255;
   $92 = ($91|0)!=(0);
   if (!($92)) {
    STACKTOP = sp;return;
   }
   $93 = $1;
   $94 = ((($93)) + 164|0);
   HEAP8[$94>>0] = 0;
   $95 = $5;
   $96 = $95&255;
   $97 = $96 & 15;
   $98 = $97&255;
   $99 = $1;
   $100 = ((($99)) + 164|0);
   $101 = ((($100)) + 1|0);
   HEAP8[$101>>0] = $98;
   $102 = $1;
   $103 = ((($102)) + 164|0);
   $104 = ((($103)) + 2|0);
   HEAP8[$104>>0] = 0;
   $105 = $5;
   $106 = $105&255;
   $107 = $106 & 240;
   $108 = $107 >> 4;
   $109 = (0 - ($108))|0;
   $110 = $109&255;
   $111 = $1;
   $112 = ((($111)) + 164|0);
   $113 = ((($112)) + 3|0);
   HEAP8[$113>>0] = $110;
   $114 = $1;
   $115 = ((($114)) + 164|0);
   $116 = ((($115)) + 16|0);
   HEAP32[$116>>2] = 4;
   STACKTOP = sp;return;
   break;
  }
  case 171:  {
   label = 219;
   break;
  }
  case 179:  {
   label = 212;
   break;
  }
  case 163:  {
   $1158 = $m;
   $1159 = ((($1158)) + 1280|0);
   $1160 = HEAP32[$1159>>2]|0;
   $1161 = $1160 & 268435456;
   $1162 = ($1161|0)!=(0);
   if ($1162) {
    $1163 = $5;
    $1164 = $1163&255;
    $1165 = ($1164|0)==(0);
    if ($1165) {
     $1166 = $1;
     $1167 = ((($1166)) + 236|0);
     $1168 = ((($1167)) + 12|0);
     $1169 = HEAP32[$1168>>2]|0;
     $1170 = $1169&255;
     $5 = $1170;
     label = 217;
     break L1;
    } else {
     $1171 = $5;
     $1172 = $1171&255;
     $1173 = $1;
     $1174 = ((($1173)) + 236|0);
     $1175 = ((($1174)) + 12|0);
     HEAP32[$1175>>2] = $1172;
     label = 217;
     break L1;
    }
   } else {
    label = 217;
   }
   break;
  }
  case 136:  {
   $1254 = $f;
   $1255 = ((($1254)) + 40|0);
   $1256 = HEAP32[$1255>>2]|0;
   $1257 = ($1256|0)!=(0);
   if ($1257) {
    STACKTOP = sp;return;
   }
   $1258 = $5;
   $1259 = $1258&255;
   $1260 = $f;
   $1261 = ((($1260)) + 36|0);
   HEAP32[$1261>>2] = $1259;
   $1262 = $f;
   $1263 = ((($1262)) + 40|0);
   HEAP32[$1263>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 137:  {
   $1377 = $1;
   $1378 = HEAP32[$1377>>2]|0;
   $1379 = $1378 | 2;
   HEAP32[$1377>>2] = $1379;
   $1380 = $5;
   $1381 = ($1380<<24>>24)!=(0);
   if (!($1381)) {
    STACKTOP = sp;return;
   }
   $1382 = $5;
   $1383 = $1382&255;
   $1384 = $1383 & 240;
   $1385 = $1384 >> 4;
   $1386 = ($1385|0)==(15);
   if ($1386) {
    $1387 = $1;
    $1388 = ((($1387)) + 344|0);
    $1389 = ((($1388)) + 4|0);
    HEAP32[$1389>>2] = 0;
    $1390 = $5;
    $1391 = $1390&255;
    $1392 = $1391 & 15;
    $1393 = $1;
    $1394 = ((($1393)) + 344|0);
    $1395 = ((($1394)) + 8|0);
    HEAP32[$1395>>2] = $1392;
    STACKTOP = sp;return;
   }
   $1396 = $5;
   $1397 = $1396&255;
   $1398 = $1397 & 15;
   $1399 = ($1398|0)==(15);
   $1400 = $1;
   if ($1399) {
    $1401 = ((($1400)) + 344|0);
    $1402 = ((($1401)) + 4|0);
    HEAP32[$1402>>2] = 0;
    $1403 = $5;
    $1404 = $1403&255;
    $1405 = $1404 & 240;
    $1406 = $1405 >> 4;
    $1407 = (0 - ($1406))|0;
    $1408 = $1;
    $1409 = ((($1408)) + 344|0);
    $1410 = ((($1409)) + 8|0);
    HEAP32[$1410>>2] = $1407;
    STACKTOP = sp;return;
   } else {
    $1411 = HEAP32[$1400>>2]|0;
    $1412 = $1411 | 2;
    HEAP32[$1400>>2] = $1412;
    $1413 = $5;
    $1414 = $1413&255;
    $1415 = $1414 & 15;
    $1416 = $5;
    $1417 = $1416&255;
    $1418 = $1417 & 240;
    $1419 = $1418 >> 4;
    $1420 = (($1415) - ($1419))|0;
    $1421 = $1;
    $1422 = ((($1421)) + 344|0);
    $1423 = ((($1422)) + 4|0);
    HEAP32[$1423>>2] = $1420;
    $1424 = $1;
    $1425 = ((($1424)) + 344|0);
    $1426 = ((($1425)) + 8|0);
    HEAP32[$1426>>2] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 20:  {
   $1344 = $5;
   $1345 = $1344&255;
   $1346 = (($1345) + 1)|0;
   $1347 = $1;
   $1348 = ((($1347)) + 68|0);
   HEAP32[$1348>>2] = $1346;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $1349 = $5;
   $1350 = $1349&255;
   $1351 = $1;
   $1352 = ((($1351)) + 96|0);
   HEAP16[$1352>>1] = $1350;
   $1353 = $5;
   $1354 = $1353&255;
   $1355 = $1;
   $1356 = ((($1355)) + 100|0);
   HEAP16[$1356>>1] = $1354;
   $1357 = $5;
   $1358 = $1357&255;
   $1359 = $1;
   $1360 = ((($1359)) + 98|0);
   HEAP16[$1360>>1] = $1358;
   STACKTOP = sp;return;
   break;
  }
  case 25:  {
   $1361 = $1;
   $1362 = HEAP32[$1361>>2]|0;
   $1363 = $1362 | 2;
   HEAP32[$1361>>2] = $1363;
   $1364 = $5;
   $1365 = ($1364<<24>>24)!=(0);
   if (!($1365)) {
    STACKTOP = sp;return;
   }
   $1366 = $5;
   $1367 = $1366&255;
   $1368 = $1367 & 15;
   $1369 = $5;
   $1370 = $1369&255;
   $1371 = $1370 & 240;
   $1372 = $1371 >> 4;
   $1373 = (($1368) - ($1372))|0;
   $1374 = $1;
   $1375 = ((($1374)) + 344|0);
   $1376 = ((($1375)) + 4|0);
   HEAP32[$1376>>2] = $1373;
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   $1427 = $m;
   $1428 = ((($1427)) + 1280|0);
   $1429 = HEAP32[$1428>>2]|0;
   $1430 = $1429 & 268435456;
   $1431 = ($1430|0)!=(0);
   do {
    if ($1431) {
     $1432 = $5;
     $1433 = $1432&255;
     $1434 = ($1433|0)==(0);
     if ($1434) {
      $1435 = $1;
      $1436 = ((($1435)) + 236|0);
      $1437 = ((($1436)) + 12|0);
      $1438 = HEAP32[$1437>>2]|0;
      $1439 = $1438&255;
      $5 = $1439;
      break;
     } else {
      $1440 = $5;
      $1441 = $1440&255;
      $1442 = $1;
      $1443 = ((($1442)) + 236|0);
      $1444 = ((($1443)) + 12|0);
      HEAP32[$1444>>2] = $1441;
      break;
     }
    }
   } while(0);
   $1445 = $5;
   $1446 = ($1445<<24>>24)!=(0);
   if ($1446) {
    $1447 = $5;
    $1448 = $1447&255;
    $1449 = $1;
    $1450 = ((($1449)) + 212|0);
    HEAP32[$1450>>2] = $1448;
   }
   $1451 = $3;
   $1452 = ($1451<<24>>24)!=(0);
   if ($1452) {
    $1453 = $1;
    $1454 = ((($1453)) + 212|0);
    $1455 = HEAP32[$1454>>2]|0;
    $1456 = $1455 & 15;
    $1457 = (($1456) + 1)|0;
    $1458 = $1;
    $1459 = ((($1458)) + 212|0);
    $1460 = ((($1459)) + 4|0);
    HEAP32[$1460>>2] = $1457;
    $1461 = $1;
    $1462 = ((($1461)) + 212|0);
    $1463 = HEAP32[$1462>>2]|0;
    $1464 = $1463 & 240;
    $1465 = $1464 >> 4;
    $1466 = $1;
    $1467 = ((($1466)) + 212|0);
    $1468 = ((($1467)) + 8|0);
    HEAP32[$1468>>2] = $1465;
   }
   $1469 = $1;
   $1470 = HEAP32[$1469>>2]|0;
   $1471 = $1470 | 262144;
   HEAP32[$1469>>2] = $1471;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $1472 = $m;
   $1473 = ((($1472)) + 1280|0);
   $1474 = HEAP32[$1473>>2]|0;
   $1475 = $1474 & 268435456;
   $1476 = ($1475|0)!=(0);
   $1477 = $5;
   $1478 = $1477&255;
   $1479 = ($1478|0)==(0);
   do {
    if ($1476) {
     if ($1479) {
      $1480 = $1;
      $1481 = ((($1480)) + 236|0);
      $1482 = ((($1481)) + 12|0);
      $1483 = HEAP32[$1482>>2]|0;
      $1484 = $1483&255;
      $5 = $1484;
      break;
     } else {
      $1485 = $5;
      $1486 = $1485&255;
      $1487 = $1;
      $1488 = ((($1487)) + 236|0);
      $1489 = ((($1488)) + 12|0);
      HEAP32[$1489>>2] = $1486;
      break;
     }
    } else {
     if ($1479) {
      $1490 = $1;
      $1491 = ((($1490)) + 224|0);
      $1492 = ((($1491)) + 8|0);
      $1493 = HEAP32[$1492>>2]|0;
      $1494 = $1493&255;
      $5 = $1494;
      break;
     } else {
      $1495 = $5;
      $1496 = $1495&255;
      $1497 = $1;
      $1498 = ((($1497)) + 224|0);
      $1499 = ((($1498)) + 8|0);
      HEAP32[$1499>>2] = $1496;
      break;
     }
    }
   } while(0);
   $1500 = $5;
   $1501 = $1500&255;
   $1502 = $1501 & 240;
   $1503 = $1502 >> 4;
   $1504 = ($1503|0)==(0);
   if ($1504) {
    $1505 = $5;
    $1506 = $1505&255;
    $1507 = $1506 | 16;
    $1508 = $1507&255;
    $5 = $1508;
   }
   $1509 = $5;
   $1510 = $1509&255;
   $1511 = $1510 & 15;
   $1512 = ($1511|0)==(0);
   if ($1512) {
    $1513 = $5;
    $1514 = $1513&255;
    $1515 = $1514 | 1;
    $1516 = $1515&255;
    $5 = $1516;
   }
   $1517 = $5;
   $1518 = $1517&255;
   $1519 = $1;
   $1520 = ((($1519)) + 224|0);
   HEAP32[$1520>>2] = $1518;
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   label = 276;
   break;
  }
  case 128:  {
   $1544 = $5;
   $1545 = $1544&255;
   $1546 = $m;
   $1547 = ((($1546)) + 1268|0);
   $1548 = HEAP32[$1547>>2]|0;
   $1549 = ($1545|0)<=($1548|0);
   if (!($1549)) {
    STACKTOP = sp;return;
   }
   $1550 = $5;
   $1551 = $1550&255;
   $1552 = $1;
   $1553 = ((($1552)) + 60|0);
   HEAP32[$1553>>2] = $1551;
   STACKTOP = sp;return;
   break;
  }
  case 129:  {
   $1554 = $5;
   $1555 = $1554&255;
   $1556 = ($1555|0)==(0);
   if ($1556) {
    $1557 = $1;
    $1558 = ((($1557)) + 272|0);
    $1559 = ((($1558)) + 8|0);
    $1560 = HEAP32[$1559>>2]|0;
    $1561 = $1560&255;
    $5 = $1561;
    $1562 = $1561&255;
    $1563 = ($1562|0)==(0);
    if ($1563) {
     STACKTOP = sp;return;
    }
   }
   $1564 = $m;
   $1565 = ((($1564)) + 1280|0);
   $1566 = HEAP32[$1565>>2]|0;
   $1567 = $1566 & 32;
   $1568 = ($1567|0)!=(0);
   if ($1568) {
    $1569 = $5;
    $1570 = $1569&255;
    $1571 = $1570 & 240;
    $1572 = $1571 >> 4;
    $h = $1572;
    $1573 = $5;
    $1574 = $1573&255;
    $1575 = $1574 & 15;
    $l = $1575;
    $1576 = $h;
    $1577 = ($1576|0)==(15);
    $1578 = $l;
    $1579 = ($1578|0)!=(0);
    $or$cond9 = $1577 & $1579;
    if ($or$cond9) {
     $1580 = $5;
     $1581 = $1580&255;
     $1582 = $1;
     $1583 = ((($1582)) + 272|0);
     $1584 = ((($1583)) + 8|0);
     HEAP32[$1584>>2] = $1581;
     $1585 = $5;
     $1586 = $1585&255;
     $1587 = $1586 & 15;
     $1588 = $1587&255;
     $5 = $1588;
     label = 294;
     break L1;
    }
    $1589 = $l;
    $1590 = ($1589|0)==(15);
    $1591 = $h;
    $1592 = ($1591|0)!=(0);
    $or$cond11 = $1590 & $1592;
    if ($or$cond11) {
     $1593 = $5;
     $1594 = $1593&255;
     $1595 = $1;
     $1596 = ((($1595)) + 272|0);
     $1597 = ((($1596)) + 8|0);
     HEAP32[$1597>>2] = $1594;
     $1598 = $5;
     $1599 = $1598&255;
     $1600 = $1599 & 240;
     $1601 = $1600&255;
     $5 = $1601;
     label = 294;
     break L1;
    }
   }
   $1602 = $1;
   $1603 = HEAP32[$1602>>2]|0;
   $1604 = $1603 | 512;
   HEAP32[$1602>>2] = $1604;
   $1605 = $5;
   $1606 = ($1605<<24>>24)!=(0);
   if (!($1606)) {
    STACKTOP = sp;return;
   }
   $1607 = $5;
   $1608 = $1607&255;
   $1609 = $1608 & 240;
   $1610 = $1609 >> 4;
   $h = $1610;
   $1611 = $5;
   $1612 = $1611&255;
   $1613 = $1612 & 15;
   $l = $1613;
   $1614 = $5;
   $1615 = $1614&255;
   $1616 = $1;
   $1617 = ((($1616)) + 272|0);
   $1618 = ((($1617)) + 8|0);
   HEAP32[$1618>>2] = $1615;
   $1619 = $l;
   $1620 = ($1619|0)==(0);
   $1621 = $h;
   if ($1620) {
    $1622 = $1;
    $1623 = ((($1622)) + 272|0);
    HEAP32[$1623>>2] = $1621;
    STACKTOP = sp;return;
   }
   $1624 = ($1621|0)==(0);
   if ($1624) {
    $1625 = $l;
    $1626 = (0 - ($1625))|0;
    $1627 = $1;
    $1628 = ((($1627)) + 272|0);
    HEAP32[$1628>>2] = $1626;
    STACKTOP = sp;return;
   } else {
    $1629 = $1;
    $1630 = HEAP32[$1629>>2]|0;
    $1631 = $1630 & -513;
    HEAP32[$1629>>2] = $1631;
    STACKTOP = sp;return;
   }
   break;
  }
  case 130:  {
   label = 294;
   break;
  }
  case 132:  {
   $1664 = $5;
   $1665 = $1664&255;
   $1666 = $1;
   $1667 = ((($1666)) + 376|0);
   HEAP32[$1667>>2] = $1665;
   STACKTOP = sp;return;
   break;
  }
  case 133:  {
   $1668 = $5;
   $1669 = $1668&255;
   $1670 = $1;
   $1671 = ((($1670)) + 376|0);
   $1672 = ((($1671)) + 4|0);
   HEAP32[$1672>>2] = $1669;
   STACKTOP = sp;return;
   break;
  }
  case 131:  {
   $1648 = $5;
   $1649 = $1648&255;
   switch ($1649|0) {
   case 1:  {
    $1652 = $0;
    $1653 = $2;
    _virt_pastnote($1652,$1653,2);
    STACKTOP = sp;return;
    break;
   }
   case 2:  {
    $1654 = $0;
    $1655 = $2;
    _virt_pastnote($1654,$1655,3);
    STACKTOP = sp;return;
    break;
   }
   case 3:  {
    $1656 = $0;
    $1657 = $2;
    _virt_setnna($1656,$1657,0);
    STACKTOP = sp;return;
    break;
   }
   case 4:  {
    $1658 = $0;
    $1659 = $2;
    _virt_setnna($1658,$1659,1);
    STACKTOP = sp;return;
    break;
   }
   case 5:  {
    $1660 = $0;
    $1661 = $2;
    _virt_setnna($1660,$1661,2);
    STACKTOP = sp;return;
    break;
   }
   case 6:  {
    $1662 = $0;
    $1663 = $2;
    _virt_setnna($1662,$1663,3);
    STACKTOP = sp;return;
    break;
   }
   case 0:  {
    $1650 = $0;
    $1651 = $2;
    _virt_pastnote($1650,$1651,0);
    STACKTOP = sp;return;
    break;
   }
   default: {
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 139:  {
   $1698 = $1;
   $1699 = ((($1698)) + 144|0);
   $1700 = $5;
   $1701 = $1700&255;
   $1702 = $1701 & 3;
   _set_lfo_waveform($1699,$1702);
   STACKTOP = sp;return;
   break;
  }
  case 160:  {
   $1703 = $m;
   $1704 = ((($1703)) + 1280|0);
   $1705 = HEAP32[$1704>>2]|0;
   $1706 = $1705 & 32;
   $1707 = ($1706|0)!=(0);
   if ($1707) {
    $1708 = $5;
    $1709 = $1708&255;
    $1710 = $1709 & 240;
    $1711 = $1710 >> 4;
    $h = $1711;
    $1712 = $5;
    $1713 = $1712&255;
    $1714 = $1713 & 15;
    $l = $1714;
    $1715 = $h;
    $1716 = ($1715|0)==(15);
    $1717 = $l;
    $1718 = ($1717|0)!=(0);
    $or$cond13 = $1716 & $1718;
    if ($or$cond13) {
     $1719 = $5;
     $1720 = $1719&255;
     $1721 = $1720 & 15;
     $1722 = $1721&255;
     $5 = $1722;
     label = 199;
     break L1;
    }
   }
   $1723 = $5;
   $1724 = ($1723<<24>>24)!=(0);
   if ($1724) {
    $1725 = $5;
    $1726 = $1725&255;
    $1727 = $1;
    $1728 = ((($1727)) + 236|0);
    HEAP32[$1728>>2] = $1726;
   }
   $1729 = $1;
   $1730 = HEAP32[$1729>>2]|0;
   $1731 = $1730 | 1;
   HEAP32[$1729>>2] = $1731;
   STACKTOP = sp;return;
   break;
  }
  case 138:  {
   $1673 = $1;
   $1674 = HEAP32[$1673>>2]|0;
   $1675 = $1674 | 524288;
   HEAP32[$1673>>2] = $1675;
   $1676 = $5;
   $1677 = $1676&255;
   $1678 = $1677 & 15;
   $1679 = $1678 << 4;
   $1680 = ($1679|0)!=(0);
   if ($1680) {
    $1681 = $1;
    $1682 = ((($1681)) + 144|0);
    $1683 = $5;
    $1684 = $1683&255;
    $1685 = $1684 & 15;
    $1686 = $1685 << 4;
    _set_lfo_depth($1682,$1686);
   }
   $1687 = $5;
   $1688 = $1687&255;
   $1689 = $1688 & 240;
   $1690 = $1689 >> 4;
   $1691 = ($1690|0)!=(0);
   if (!($1691)) {
    STACKTOP = sp;return;
   }
   $1692 = $1;
   $1693 = ((($1692)) + 144|0);
   $1694 = $5;
   $1695 = $1694&255;
   $1696 = $1695 & 240;
   $1697 = $1696 >> 4;
   _set_lfo_rate($1693,$1697);
   STACKTOP = sp;return;
   break;
  }
  case 161:  {
   $1732 = $m;
   $1733 = ((($1732)) + 1280|0);
   $1734 = HEAP32[$1733>>2]|0;
   $1735 = $1734 & 32;
   $1736 = ($1735|0)!=(0);
   if ($1736) {
    $1737 = $5;
    $1738 = $1737&255;
    $1739 = $1738 & 240;
    $1740 = $1739 >> 4;
    $h = $1740;
    $1741 = $5;
    $1742 = $1741&255;
    $1743 = $1742 & 15;
    $l = $1743;
    $1744 = $h;
    $1745 = ($1744|0)==(15);
    $1746 = $l;
    $1747 = ($1746|0)!=(0);
    $or$cond15 = $1745 & $1747;
    if ($or$cond15) {
     $1748 = $5;
     $1749 = $1748&255;
     $1750 = $1749 & 15;
     $1751 = $1750&255;
     $5 = $1751;
     label = 207;
     break L1;
    }
   }
   $1752 = $5;
   $1753 = ($1752<<24>>24)!=(0);
   if ($1753) {
    $1754 = $5;
    $1755 = $1754&255;
    $1756 = (0 - ($1755))|0;
    $1757 = $1;
    $1758 = ((($1757)) + 236|0);
    HEAP32[$1758>>2] = $1756;
   }
   $1759 = $1;
   $1760 = HEAP32[$1759>>2]|0;
   $1761 = $1760 | 1;
   HEAP32[$1759>>2] = $1761;
   STACKTOP = sp;return;
   break;
  }
  case 165:  {
   $1762 = $1;
   $1763 = HEAP32[$1762>>2]|0;
   $1764 = $1763 | 64;
   HEAP32[$1762>>2] = $1764;
   $1765 = $5;
   $1766 = ($1765<<24>>24)!=(0);
   if (!($1766)) {
    STACKTOP = sp;return;
   }
   $1767 = $5;
   $1768 = $1767&255;
   $1769 = $1768 & 240;
   $1770 = $1769 >> 4;
   $h = $1770;
   $1771 = $5;
   $1772 = $1771&255;
   $1773 = $1772 & 15;
   $l = $1773;
   $1774 = $l;
   $1775 = ($1774|0)==(0);
   $1776 = $h;
   if ($1775) {
    $1777 = $1;
    $1778 = ((($1777)) + 236|0);
    $1779 = ((($1778)) + 4|0);
    HEAP32[$1779>>2] = $1776;
    STACKTOP = sp;return;
   }
   $1780 = ($1776|0)==(0);
   if ($1780) {
    $1781 = $l;
    $1782 = (0 - ($1781))|0;
    $1783 = $1;
    $1784 = ((($1783)) + 236|0);
    $1785 = ((($1784)) + 4|0);
    HEAP32[$1785>>2] = $1782;
    STACKTOP = sp;return;
   } else {
    $1786 = $1;
    $1787 = HEAP32[$1786>>2]|0;
    $1788 = $1787 & -65;
    HEAP32[$1786>>2] = $1788;
    STACKTOP = sp;return;
   }
   break;
  }
  case 158: case 159: case 157: case 156:  {
   $1789 = $5;
   $1790 = $1789&255;
   $1791 = ($1790|0)!=(0);
   if ($1791) {
    $1792 = $4;
    $1793 = $1792&255;
    $1794 = ($1793|0)==(159);
    if ($1794) {
     label = 332;
    } else {
     $1795 = $4;
     $1796 = $1795&255;
     $1797 = ($1796|0)==(158);
     if ($1797) {
      label = 332;
     }
    }
    if ((label|0) == 332) {
     $1798 = $5;
     $1799 = $1798&255;
     $1800 = $1799 & 240;
     $1801 = $1800 >> 4;
     $1802 = $1;
     $1803 = ((($1802)) + 212|0);
     HEAP32[$1803>>2] = $1801;
     $1804 = $5;
     $1805 = $1804&255;
     $1806 = $1805 & 240;
     $1807 = $1806 >> 4;
     $1808 = (($1807) + 1)|0;
     $1809 = $1;
     $1810 = ((($1809)) + 212|0);
     $1811 = ((($1810)) + 4|0);
     HEAP32[$1811>>2] = $1808;
     $1812 = $1;
     $1813 = ((($1812)) + 212|0);
     $1814 = ((($1813)) + 8|0);
     HEAP32[$1814>>2] = 0;
    }
    $1815 = $4;
    $1816 = $1815&255;
    $1817 = ($1816|0)==(157);
    if ($1817) {
     label = 335;
    } else {
     $1818 = $4;
     $1819 = $1818&255;
     $1820 = ($1819|0)==(158);
     if ($1820) {
      label = 335;
     } else {
      $1826 = $5;
      $1827 = $1826&255;
      $1828 = $1827 & 15;
      $1829 = (0 - ($1828))|0;
      $1830 = $1;
      $1831 = ((($1830)) + 384|0);
      HEAP32[$1831>>2] = $1829;
     }
    }
    if ((label|0) == 335) {
     $1821 = $5;
     $1822 = $1821&255;
     $1823 = $1822 & 15;
     $1824 = $1;
     $1825 = ((($1824)) + 384|0);
     HEAP32[$1825>>2] = $1823;
    }
    $1832 = $5;
    $1833 = $1832&255;
    $1834 = $1833 & 240;
    $1835 = $1834 >> 4;
    $1836 = $1;
    $1837 = ((($1836)) + 384|0);
    $1838 = ((($1837)) + 8|0);
    HEAP32[$1838>>2] = $1835;
    $1839 = $1;
    $1840 = ((($1839)) + 384|0);
    $1841 = ((($1840)) + 12|0);
    HEAP32[$1841>>2] = $1835;
   }
   $1842 = $4;
   $1843 = $1842&255;
   $1844 = ($1843|0)==(159);
   if ($1844) {
    label = 340;
   } else {
    $1845 = $4;
    $1846 = $1845&255;
    $1847 = ($1846|0)==(158);
    if ($1847) {
     label = 340;
    }
   }
   if ((label|0) == 340) {
    $1848 = $1;
    $1849 = HEAP32[$1848>>2]|0;
    $1850 = $1849 | 262144;
    HEAP32[$1848>>2] = $1850;
   }
   $1851 = $1;
   $1852 = HEAP32[$1851>>2]|0;
   $1853 = $1852 | 16384;
   HEAP32[$1851>>2] = $1853;
   STACKTOP = sp;return;
   break;
  }
  case 135:  {
   $1206 = $5;
   $1207 = $1206&255;
   $1208 = $1207 & 240;
   $1209 = $1208 >> 4;
   $1210 = ($1209|0)==(0);
   do {
    if ($1210) {
     $1211 = $1;
     $1212 = HEAP32[$1211>>2]|0;
     $1213 = $1212 | 2097152;
     HEAP32[$1211>>2] = $1213;
     $1214 = $5;
     $1215 = $1214&255;
     $1216 = $1215 & 15;
     $1217 = (0 - ($1216))|0;
     $1218 = $1;
     $1219 = ((($1218)) + 372|0);
     HEAP32[$1219>>2] = $1217;
    } else {
     $1220 = $5;
     $1221 = $1220&255;
     $1222 = $1221 & 240;
     $1223 = $1222 >> 4;
     $1224 = ($1223|0)==(1);
     if ($1224) {
      $1225 = $1;
      $1226 = HEAP32[$1225>>2]|0;
      $1227 = $1226 | 2097152;
      HEAP32[$1225>>2] = $1227;
      $1228 = $5;
      $1229 = $1228&255;
      $1230 = $1229 & 15;
      $1231 = $1;
      $1232 = ((($1231)) + 372|0);
      HEAP32[$1232>>2] = $1230;
      break;
     }
     $1233 = $5;
     $1234 = $1233&255;
     $1235 = ($1234|0)<(20);
     if ($1235) {
      $5 = 20;
     }
     $1236 = $5;
     $1237 = $1236&255;
     $1238 = $p;
     $1239 = ((($1238)) + 20|0);
     HEAP32[$1239>>2] = $1237;
    }
   } while(0);
   $1240 = $m;
   $1241 = ((($1240)) + 1256|0);
   $1242 = +HEAPF64[$1241>>3];
   $1243 = $m;
   $1244 = ((($1243)) + 1248|0);
   $1245 = +HEAPF64[$1244>>3];
   $1246 = $1242 * $1245;
   $1247 = $p;
   $1248 = ((($1247)) + 20|0);
   $1249 = HEAP32[$1248>>2]|0;
   $1250 = (+($1249|0));
   $1251 = $1246 / $1250;
   $1252 = $p;
   $1253 = ((($1252)) + 40|0);
   HEAPF64[$1253>>3] = $1251;
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $1264 = $5;
   $1265 = $1264&255;
   $1266 = $m;
   $1267 = ((($1266)) + 1272|0);
   $1268 = HEAP32[$1267>>2]|0;
   $1269 = ($1265|0)>($1268|0);
   if ($1269) {
    $1270 = $m;
    $1271 = ((($1270)) + 1272|0);
    $1272 = HEAP32[$1271>>2]|0;
    $1273 = $p;
    $1274 = ((($1273)) + 320|0);
    HEAP32[$1274>>2] = $1272;
    STACKTOP = sp;return;
   } else {
    $1275 = $5;
    $1276 = $1275&255;
    $1277 = $p;
    $1278 = ((($1277)) + 320|0);
    HEAP32[$1278>>2] = $1276;
    STACKTOP = sp;return;
   }
   break;
  }
  case 17:  {
   while(1) {
    $1279 = $5;
    $1280 = ($1279<<24>>24)!=(0);
    $1281 = $1;
    if ($1280) {
     break;
    }
    $1338 = ((($1281)) + 260|0);
    $1339 = ((($1338)) + 8|0);
    $1340 = HEAP32[$1339>>2]|0;
    $1341 = $1340&255;
    $5 = $1341;
    $1342 = $1341&255;
    $1343 = ($1342|0)!=(0);
    if (!($1343)) {
     label = 373;
     break;
    }
   }
   if ((label|0) == 373) {
    STACKTOP = sp;return;
   }
   $1282 = HEAP32[$1281>>2]|0;
   $1283 = $1282 | 1048576;
   HEAP32[$1281>>2] = $1283;
   $1284 = $5;
   $1285 = $1284&255;
   $1286 = $1;
   $1287 = ((($1286)) + 260|0);
   $1288 = ((($1287)) + 8|0);
   HEAP32[$1288>>2] = $1285;
   $1289 = $5;
   $1290 = $1289&255;
   $1291 = $1290 & 240;
   $1292 = $1291 >> 4;
   $h = $1292;
   $1293 = $5;
   $1294 = $1293&255;
   $1295 = $1294 & 15;
   $l = $1295;
   $1296 = $m;
   $1297 = ((($1296)) + 1280|0);
   $1298 = HEAP32[$1297>>2]|0;
   $1299 = $1298 & 32;
   $1300 = ($1299|0)!=(0);
   if (!($1300)) {
    $1330 = $h;
    $1331 = $l;
    $1332 = (($1330) - ($1331))|0;
    $1333 = $1;
    $1334 = ((($1333)) + 260|0);
    HEAP32[$1334>>2] = $1332;
    $1335 = $1;
    $1336 = ((($1335)) + 260|0);
    $1337 = ((($1336)) + 4|0);
    HEAP32[$1337>>2] = 0;
    STACKTOP = sp;return;
   }
   $1301 = $l;
   $1302 = ($1301|0)==(15);
   $1303 = $h;
   $1304 = ($1303|0)!=(0);
   $or$cond5 = $1302 & $1304;
   if ($or$cond5) {
    $1305 = $1;
    $1306 = ((($1305)) + 260|0);
    HEAP32[$1306>>2] = 0;
    $1307 = $h;
    $1308 = $1;
    $1309 = ((($1308)) + 260|0);
    $1310 = ((($1309)) + 4|0);
    HEAP32[$1310>>2] = $1307;
    STACKTOP = sp;return;
   }
   $1311 = $h;
   $1312 = ($1311|0)==(15);
   $1313 = $l;
   $1314 = ($1313|0)!=(0);
   $or$cond7 = $1312 & $1314;
   if ($or$cond7) {
    $1315 = $1;
    $1316 = ((($1315)) + 260|0);
    HEAP32[$1316>>2] = 0;
    $1317 = $l;
    $1318 = (0 - ($1317))|0;
    $1319 = $1;
    $1320 = ((($1319)) + 260|0);
    $1321 = ((($1320)) + 4|0);
    HEAP32[$1321>>2] = $1318;
    STACKTOP = sp;return;
   } else {
    $1322 = $h;
    $1323 = $l;
    $1324 = (($1322) - ($1323))|0;
    $1325 = $1;
    $1326 = ((($1325)) + 260|0);
    HEAP32[$1326>>2] = $1324;
    $1327 = $1;
    $1328 = ((($1327)) + 260|0);
    $1329 = ((($1328)) + 4|0);
    HEAP32[$1329>>2] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 115:  {
   $1854 = $1;
   $1855 = HEAP32[$1854>>2]|0;
   $1856 = $1855 | 16384;
   HEAP32[$1854>>2] = $1856;
   $1857 = $5;
   $1858 = $1857&255;
   $1859 = (0 - ($1858))|0;
   $1860 = $1;
   $1861 = ((($1860)) + 384|0);
   HEAP32[$1861>>2] = $1859;
   $1862 = $1;
   $1863 = ((($1862)) + 384|0);
   $1864 = ((($1863)) + 8|0);
   HEAP32[$1864>>2] = 1;
   $1865 = $1;
   $1866 = ((($1865)) + 384|0);
   $1867 = ((($1866)) + 12|0);
   HEAP32[$1867>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 116:  {
   $1868 = $1;
   $1869 = HEAP32[$1868>>2]|0;
   $1870 = $1869 | 16384;
   HEAP32[$1868>>2] = $1870;
   $1871 = $5;
   $1872 = $1871&255;
   $1873 = $1;
   $1874 = ((($1873)) + 384|0);
   HEAP32[$1874>>2] = $1872;
   $1875 = $1;
   $1876 = ((($1875)) + 384|0);
   $1877 = ((($1876)) + 8|0);
   HEAP32[$1877>>2] = 1;
   $1878 = $1;
   $1879 = ((($1878)) + 384|0);
   $1880 = ((($1879)) + 12|0);
   HEAP32[$1880>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 117:  {
   $1881 = $1;
   $1882 = HEAP32[$1881>>2]|0;
   $1883 = $1882 | 32768;
   HEAP32[$1881>>2] = $1883;
   $1884 = $5;
   $1885 = $1884&255;
   $1886 = (0 - ($1885))|0;
   $1887 = $1;
   $1888 = ((($1887)) + 384|0);
   $1889 = ((($1888)) + 4|0);
   HEAP32[$1889>>2] = $1886;
   STACKTOP = sp;return;
   break;
  }
  case 118:  {
   $1890 = $1;
   $1891 = HEAP32[$1890>>2]|0;
   $1892 = $1891 | 32768;
   HEAP32[$1890>>2] = $1892;
   $1893 = $5;
   $1894 = $1893&255;
   $1895 = $1;
   $1896 = ((($1895)) + 384|0);
   $1897 = ((($1896)) + 4|0);
   HEAP32[$1897>>2] = $1894;
   STACKTOP = sp;return;
   break;
  }
  case 123:  {
   $1898 = $5;
   $1899 = $1898&255;
   $1900 = $1899 & 15;
   $1901 = ($1900|0)!=(0);
   $1902 = $1;
   $1903 = ((($1902)) + 4|0);
   $1904 = HEAP32[$1903>>2]|0;
   if ($1901) {
    $1905 = $1904 | 16;
    HEAP32[$1903>>2] = $1905;
   } else {
    $1906 = $1904 & -17;
    HEAP32[$1903>>2] = $1906;
   }
   $1907 = $5;
   $1908 = $1907&255;
   $1909 = $1908 & 15;
   $1910 = $1909 << 2;
   $1911 = ($1910|0)!=(0);
   if ($1911) {
    $1912 = $1;
    $1913 = ((($1912)) + 104|0);
    $1914 = $5;
    $1915 = $1914&255;
    $1916 = $1915 & 15;
    $1917 = $1916 << 2;
    _set_lfo_depth($1913,$1917);
   }
   $1918 = $5;
   $1919 = $1918&255;
   $1920 = $1919 & 240;
   $1921 = $1920 >> 4;
   $1922 = ($1921|0)!=(0);
   if (!($1922)) {
    STACKTOP = sp;return;
   }
   $1923 = $1;
   $1924 = ((($1923)) + 104|0);
   $1925 = $5;
   $1926 = $1925&255;
   $1927 = $1926 & 240;
   $1928 = $1927 >> 4;
   _set_lfo_rate($1924,$1928);
   STACKTOP = sp;return;
   break;
  }
  case 126:  {
   $2059 = $5;
   $2060 = ($2059<<24>>24)!=(0);
   if ($2060) {
    $2061 = $5;
    $2062 = $2061&255;
    $2063 = $p;
    $2064 = ((($2063)) + 16|0);
    HEAP32[$2064>>2] = $2062;
    label = 371;
   } else {
    label = 371;
   }
   break;
  }
  case 127:  {
   label = 371;
   break;
  }
  case 121:  {
   $1929 = $1;
   $1930 = ((($1929)) + 4|0);
   $1931 = HEAP32[$1930>>2]|0;
   $1932 = $1931 | 8;
   HEAP32[$1930>>2] = $1932;
   $1933 = $5;
   $1934 = $1933&255;
   $1935 = (0 - ($1934))|0;
   $1936 = $1;
   $1937 = ((($1936)) + 288|0);
   HEAP32[$1937>>2] = $1935;
   $1938 = $5;
   $1939 = $1938&255;
   $1940 = $1;
   $1941 = ((($1940)) + 288|0);
   $1942 = ((($1941)) + 16|0);
   HEAP32[$1942>>2] = $1939;
   $1943 = ($1939|0)==(0);
   if (!($1943)) {
    STACKTOP = sp;return;
   }
   $1944 = $1;
   $1945 = ((($1944)) + 4|0);
   $1946 = HEAP32[$1945>>2]|0;
   $1947 = $1946 & -9;
   HEAP32[$1945>>2] = $1947;
   STACKTOP = sp;return;
   break;
  }
  case 120:  {
   $1948 = $1;
   $1949 = ((($1948)) + 4|0);
   $1950 = HEAP32[$1949>>2]|0;
   $1951 = $1950 | 8;
   HEAP32[$1949>>2] = $1951;
   $1952 = $5;
   $1953 = $1952&255;
   $1954 = $1;
   $1955 = ((($1954)) + 288|0);
   HEAP32[$1955>>2] = $1953;
   $1956 = $5;
   $1957 = $1956&255;
   $1958 = $1;
   $1959 = ((($1958)) + 288|0);
   $1960 = ((($1959)) + 16|0);
   HEAP32[$1960>>2] = $1957;
   $1961 = ($1957|0)==(0);
   if (!($1961)) {
    STACKTOP = sp;return;
   }
   $1962 = $1;
   $1963 = ((($1962)) + 4|0);
   $1964 = HEAP32[$1963>>2]|0;
   $1965 = $1964 & -9;
   HEAP32[$1963>>2] = $1965;
   STACKTOP = sp;return;
   break;
  }
  case 122:  {
   $1966 = $1;
   $1967 = ((($1966)) + 44|0);
   $1968 = HEAP32[$1967>>2]|0;
   $1969 = $mod;
   $1970 = ((($1969)) + 140|0);
   $1971 = HEAP32[$1970>>2]|0;
   $1972 = ($1968>>>0)<($1971>>>0);
   if (!($1972)) {
    STACKTOP = sp;return;
   }
   $1973 = $1;
   $1974 = ((($1973)) + 44|0);
   $1975 = HEAP32[$1974>>2]|0;
   $1976 = $mod;
   $1977 = ((($1976)) + 176|0);
   $1978 = HEAP32[$1977>>2]|0;
   $1979 = (($1978) + (($1975*764)|0)|0);
   $1980 = ((($1979)) + 36|0);
   $1981 = HEAP32[$1980>>2]|0;
   $1982 = ($1981|0)>(0);
   if (!($1982)) {
    STACKTOP = sp;return;
   }
   $1983 = $1;
   $1984 = ((($1983)) + 4|0);
   $1985 = HEAP32[$1984>>2]|0;
   $1986 = $1985 | 4;
   HEAP32[$1984>>2] = $1986;
   $1987 = $m;
   $1988 = $1;
   $1989 = $3;
   $1990 = $1989&255;
   _do_toneporta($1987,$1988,$1990);
   $1991 = $5;
   $1992 = $1991&255;
   $1993 = $1;
   $1994 = ((($1993)) + 312|0);
   $1995 = ((($1994)) + 12|0);
   HEAP32[$1995>>2] = $1992;
   $1996 = $5;
   $1997 = $1996&255;
   $1998 = ($1997|0)==(0);
   if (!($1998)) {
    STACKTOP = sp;return;
   }
   $1999 = $1;
   $2000 = ((($1999)) + 4|0);
   $2001 = HEAP32[$2000>>2]|0;
   $2002 = $2001 & -5;
   HEAP32[$2000>>2] = $2002;
   STACKTOP = sp;return;
   break;
  }
  case 124:  {
   $2003 = $1;
   $2004 = ((($2003)) + 4|0);
   $2005 = HEAP32[$2004>>2]|0;
   $2006 = $2005 | 1;
   HEAP32[$2004>>2] = $2006;
   $2007 = $5;
   $2008 = $2007&255;
   $2009 = $1;
   $2010 = ((($2009)) + 236|0);
   HEAP32[$2010>>2] = $2008;
   $2011 = $5;
   $2012 = $2011&255;
   $2013 = ($2012|0)==(0);
   if (!($2013)) {
    STACKTOP = sp;return;
   }
   $2014 = $1;
   $2015 = ((($2014)) + 4|0);
   $2016 = HEAP32[$2015>>2]|0;
   $2017 = $2016 & -2;
   HEAP32[$2015>>2] = $2017;
   STACKTOP = sp;return;
   break;
  }
  case 125:  {
   $2018 = $1;
   $2019 = ((($2018)) + 4|0);
   $2020 = HEAP32[$2019>>2]|0;
   $2021 = $2020 | 1;
   HEAP32[$2019>>2] = $2021;
   $2022 = $5;
   $2023 = $2022&255;
   $2024 = (0 - ($2023))|0;
   $2025 = $1;
   $2026 = ((($2025)) + 236|0);
   HEAP32[$2026>>2] = $2024;
   $2027 = $5;
   $2028 = $2027&255;
   $2029 = ($2028|0)==(0);
   if (!($2029)) {
    STACKTOP = sp;return;
   }
   $2030 = $1;
   $2031 = ((($2030)) + 4|0);
   $2032 = HEAP32[$2031>>2]|0;
   $2033 = $2032 & -2;
   HEAP32[$2031>>2] = $2033;
   STACKTOP = sp;return;
   break;
  }
  case 146:  {
   $2034 = $1;
   $2035 = HEAP32[$2034>>2]|0;
   $2036 = $2035 | 16;
   HEAP32[$2034>>2] = $2036;
   $2037 = $5;
   $2038 = $2037&255;
   $2039 = $2038 & 15;
   $2040 = $2039 << 3;
   $2041 = ($2040|0)!=(0);
   if ($2041) {
    $2042 = $1;
    $2043 = ((($2042)) + 104|0);
    $2044 = $5;
    $2045 = $2044&255;
    $2046 = $2045 & 15;
    $2047 = $2046 << 3;
    _set_lfo_depth($2043,$2047);
   }
   $2048 = $5;
   $2049 = $2048&255;
   $2050 = $2049 & 240;
   $2051 = $2050 >> 4;
   $2052 = ($2051|0)!=(0);
   if (!($2052)) {
    STACKTOP = sp;return;
   }
   $2053 = $1;
   $2054 = ((($2053)) + 104|0);
   $2055 = $5;
   $2056 = $2055&255;
   $2057 = $2056 & 240;
   $2058 = $2057 >> 4;
   _set_lfo_rate($2054,$2058);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $2067 = $0;
   $2068 = $1;
   $2069 = $2;
   $2070 = $3;
   $2071 = $4;
   $2072 = $5;
   $2073 = $6;
   _extras_process_fx($2067,$2068,$2069,$2070,$2071,$2072,$2073);
   STACKTOP = sp;return;
  }
  }
 } while(0);
 switch (label|0) {
  case 2: {
   $15 = $5;
   $16 = $15&255;
   $17 = ($16|0)!=(0);
   if (!($17)) {
    STACKTOP = sp;return;
   }
   $18 = $1;
   $19 = ((($18)) + 164|0);
   HEAP8[$19>>0] = 0;
   $20 = $5;
   $21 = $20&255;
   $22 = $21 & 240;
   $23 = $22 >> 4;
   $24 = $23&255;
   $25 = $1;
   $26 = ((($25)) + 164|0);
   $27 = ((($26)) + 1|0);
   HEAP8[$27>>0] = $24;
   $28 = $5;
   $29 = $28&255;
   $30 = $29 & 15;
   $31 = $30&255;
   $32 = $1;
   $33 = ((($32)) + 164|0);
   $34 = ((($33)) + 2|0);
   HEAP8[$34>>0] = $31;
   $35 = $1;
   $36 = ((($35)) + 164|0);
   $37 = ((($36)) + 16|0);
   HEAP32[$37>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 107: {
   while(1) {
    label = 0;
    $586 = $m;
    $587 = ((($586)) + 1280|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = $588 & 32;
    $590 = ($589|0)!=(0);
    if ($590) {
     $591 = $5;
     $592 = $591&255;
     $593 = $592 & 240;
     $594 = $593 >> 4;
     $h = $594;
     $595 = $5;
     $596 = $595&255;
     $597 = $596 & 15;
     $l = $597;
     $598 = $l;
     $599 = ($598|0)==(15);
     $600 = $h;
     $601 = ($600|0)!=(0);
     $or$cond = $599 & $601;
     if ($or$cond) {
      label = 109;
      break;
     }
     $611 = $h;
     $612 = ($611|0)==(15);
     $613 = $l;
     $614 = ($613|0)!=(0);
     $or$cond3 = $612 & $614;
     if ($or$cond3) {
      label = 111;
      break;
     }
    }
    $624 = $5;
    $625 = $624&255;
    $626 = ($625|0)==(0);
    if (!($626)) {
     label = 114;
     break;
    }
    $627 = $1;
    $628 = ((($627)) + 236|0);
    $629 = ((($628)) + 12|0);
    $630 = HEAP32[$629>>2]|0;
    $631 = $630&255;
    $5 = $631;
    $632 = $631&255;
    $633 = ($632|0)!=(0);
    if ($633) {
     label = 107;
    } else {
     label = 114;
     break;
    }
   }
   if ((label|0) == 109) {
    $602 = $5;
    $603 = $602&255;
    $604 = $1;
    $605 = ((($604)) + 236|0);
    $606 = ((($605)) + 12|0);
    HEAP32[$606>>2] = $603;
    $607 = $5;
    $608 = $607&255;
    $609 = $608 >> 4;
    $610 = $609&255;
    $5 = $610;
    label = 199;
    break;
   }
   else if ((label|0) == 111) {
    $615 = $5;
    $616 = $615&255;
    $617 = $1;
    $618 = ((($617)) + 236|0);
    $619 = ((($618)) + 12|0);
    HEAP32[$619>>2] = $616;
    $620 = $5;
    $621 = $620&255;
    $622 = $621 & 15;
    $623 = $622&255;
    $5 = $623;
    label = 207;
    break;
   }
   else if ((label|0) == 114) {
    $634 = $1;
    $635 = HEAP32[$634>>2]|0;
    $636 = $635 | 1;
    HEAP32[$634>>2] = $636;
    $637 = $5;
    $638 = ($637<<24>>24)!=(0);
    do {
     if ($638) {
      $639 = $5;
      $640 = $639&255;
      $641 = $1;
      $642 = ((($641)) + 236|0);
      $643 = ((($642)) + 12|0);
      HEAP32[$643>>2] = $640;
      $644 = $5;
      $645 = $644&255;
      $646 = $645 & 240;
      $647 = $646 >> 4;
      $h = $647;
      $648 = $5;
      $649 = $648&255;
      $650 = $649 & 15;
      $l = $650;
      $651 = $m;
      $652 = ((($651)) + 1280|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = $653 & 512;
      $655 = ($654|0)!=(0);
      if ($655) {
       $656 = $5;
       $657 = ($656<<24>>24)!=(0);
       if (!($657)) {
        break;
       }
       $658 = $l;
       $659 = ($658|0)!=(0);
       $660 = $l;
       $661 = (0 - ($660))|0;
       $662 = $h;
       $663 = $659 ? $661 : $662;
       $664 = $1;
       $665 = ((($664)) + 236|0);
       HEAP32[$665>>2] = $663;
       break;
      }
      $666 = $l;
      $667 = ($666|0)==(0);
      $668 = $h;
      if ($667) {
       $669 = $1;
       $670 = ((($669)) + 236|0);
       HEAP32[$670>>2] = $668;
       break;
      }
      $671 = ($668|0)==(0);
      if ($671) {
       $672 = $l;
       $673 = (0 - ($672))|0;
       $674 = $1;
       $675 = ((($674)) + 236|0);
       HEAP32[$675>>2] = $673;
       break;
      } else {
       $676 = $1;
       $677 = HEAP32[$676>>2]|0;
       $678 = $677 & -2;
       HEAP32[$676>>2] = $678;
       break;
      }
     }
    } while(0);
    $679 = $m;
    $680 = ((($679)) + 1280|0);
    $681 = HEAP32[$680>>2]|0;
    $682 = $681 & 32;
    $683 = ($682|0)!=(0);
    if (!($683)) {
     STACKTOP = sp;return;
    }
    $684 = $1;
    $685 = ((($684)) + 236|0);
    $686 = ((($685)) + 12|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = $687 & 240;
    $689 = $688 >> 4;
    $690 = ($689|0)==(15);
    if (!($690)) {
     $691 = $1;
     $692 = ((($691)) + 236|0);
     $693 = ((($692)) + 12|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = $694 & 15;
     $696 = ($695|0)==(15);
     if (!($696)) {
      STACKTOP = sp;return;
     }
    }
    $697 = $1;
    $698 = HEAP32[$697>>2]|0;
    $699 = $698 | 64;
    HEAP32[$697>>2] = $699;
    $700 = $1;
    $701 = ((($700)) + 236|0);
    $702 = HEAP32[$701>>2]|0;
    $703 = $1;
    $704 = ((($703)) + 236|0);
    $705 = ((($704)) + 4|0);
    HEAP32[$705>>2] = $702;
    STACKTOP = sp;return;
   }
   break;
  }
  case 191: {
   $1055 = $5;
   $1056 = $1055&255;
   $1057 = (($1056) - 128)|0;
   $1058 = $1057&65535;
   $1059 = $1058 << 16 >> 16;
   $1060 = $1;
   $1061 = ((($1060)) + 40|0);
   HEAP32[$1061>>2] = $1059;
   STACKTOP = sp;return;
   break;
  }
  case 208: {
   $1131 = $5;
   $1132 = ($1131<<24>>24)!=(0);
   if (!($1132)) {
    STACKTOP = sp;return;
   }
   $1133 = $1;
   $1134 = HEAP32[$1133>>2]|0;
   $1135 = $1134 | 128;
   HEAP32[$1133>>2] = $1135;
   $1136 = $5;
   $1137 = $1136&255;
   $1138 = (0 - ($1137))|0;
   $1139 = (+($1138|0));
   $1140 = $1;
   $1141 = ((($1140)) + 288|0);
   $1142 = ((($1141)) + 8|0);
   HEAPF64[$1142>>3] = $1139;
   STACKTOP = sp;return;
   break;
  }
  case 210: {
   $1143 = $5;
   $1144 = ($1143<<24>>24)!=(0);
   if (!($1144)) {
    STACKTOP = sp;return;
   }
   $1145 = $1;
   $1146 = HEAP32[$1145>>2]|0;
   $1147 = $1146 | 128;
   HEAP32[$1145>>2] = $1147;
   $1148 = $5;
   $1149 = (+($1148&255));
   $1150 = $1;
   $1151 = ((($1150)) + 288|0);
   $1152 = ((($1151)) + 8|0);
   HEAPF64[$1152>>3] = $1149;
   STACKTOP = sp;return;
   break;
  }
  case 212: {
   $1153 = $5;
   $1154 = $1153&255;
   $1155 = $p;
   $1156 = ((($1155)) + 324|0);
   $1157 = ((($1156)) + 8|0);
   HEAP32[$1157>>2] = $1154;
   STACKTOP = sp;return;
   break;
  }
  case 217: {
   $1176 = $5;
   $1177 = ($1176<<24>>24)!=(0);
   if (!($1177)) {
    STACKTOP = sp;return;
   }
   $1178 = $5;
   $1179 = $1178&255;
   $1180 = $p;
   $1181 = ((($1180)) + 16|0);
   HEAP32[$1181>>2] = $1179;
   STACKTOP = sp;return;
   break;
  }
  case 219: {
   $1182 = $5;
   $1183 = $1182&255;
   $1184 = ($1183|0)>=(32);
   if (!($1184)) {
    STACKTOP = sp;return;
   }
   $1185 = $5;
   $1186 = $1185&255;
   $1187 = ($1186|0)<(20);
   if ($1187) {
    $5 = 20;
   }
   $1188 = $5;
   $1189 = $1188&255;
   $1190 = $p;
   $1191 = ((($1190)) + 20|0);
   HEAP32[$1191>>2] = $1189;
   $1192 = $m;
   $1193 = ((($1192)) + 1256|0);
   $1194 = +HEAPF64[$1193>>3];
   $1195 = $m;
   $1196 = ((($1195)) + 1248|0);
   $1197 = +HEAPF64[$1196>>3];
   $1198 = $1194 * $1197;
   $1199 = $p;
   $1200 = ((($1199)) + 20|0);
   $1201 = HEAP32[$1200>>2]|0;
   $1202 = (+($1201|0));
   $1203 = $1198 / $1202;
   $1204 = $p;
   $1205 = ((($1204)) + 40|0);
   HEAPF64[$1205>>3] = $1203;
   STACKTOP = sp;return;
   break;
  }
  case 276: {
   $1521 = $1;
   $1522 = HEAP32[$1521>>2]|0;
   $1523 = $1522 | 128;
   HEAP32[$1521>>2] = $1523;
   $1524 = $5;
   $1525 = $1524&255;
   $1526 = $1525 & 240;
   $1527 = $1526 >> 4;
   if ((($1527|0) == 1)) {
    $1528 = $5;
    $1529 = $1528&255;
    $1530 = $1529 & 15;
    $1531 = (+($1530|0));
    $1532 = -0.25 * $1531;
    $1533 = $1;
    $1534 = ((($1533)) + 288|0);
    $1535 = ((($1534)) + 8|0);
    HEAPF64[$1535>>3] = $1532;
    STACKTOP = sp;return;
   } else if ((($1527|0) == 2)) {
    $1536 = $5;
    $1537 = $1536&255;
    $1538 = $1537 & 15;
    $1539 = (+($1538|0));
    $1540 = 0.25 * $1539;
    $1541 = $1;
    $1542 = ((($1541)) + 288|0);
    $1543 = ((($1542)) + 8|0);
    HEAPF64[$1543>>3] = $1540;
    STACKTOP = sp;return;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 294: {
   $1632 = $1;
   $1633 = HEAP32[$1632>>2]|0;
   $1634 = $1633 | 1024;
   HEAP32[$1632>>2] = $1634;
   $1635 = $5;
   $1636 = ($1635<<24>>24)!=(0);
   if (!($1636)) {
    STACKTOP = sp;return;
   }
   $1637 = $5;
   $1638 = $1637&255;
   $1639 = $1638 & 240;
   $1640 = $1639 >> 4;
   $1641 = $5;
   $1642 = $1641&255;
   $1643 = $1642 & 15;
   $1644 = (($1640) - ($1643))|0;
   $1645 = $1;
   $1646 = ((($1645)) + 272|0);
   $1647 = ((($1646)) + 4|0);
   HEAP32[$1647>>2] = $1644;
   STACKTOP = sp;return;
   break;
  }
  case 371: {
   $2065 = $1;
   $2066 = ((($2065)) + 4|0);
   HEAP32[$2066>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
 }
 if ((label|0) == 199) {
  $1088 = $1;
  $1089 = HEAP32[$1088>>2]|0;
  $1090 = $1089 | 64;
  HEAP32[$1088>>2] = $1090;
  $1091 = $5;
  $1092 = $1091&255;
  $1093 = $1;
  $1094 = ((($1093)) + 236|0);
  $1095 = ((($1094)) + 4|0);
  HEAP32[$1095>>2] = $1092;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 207) {
  $1122 = $1;
  $1123 = HEAP32[$1122>>2]|0;
  $1124 = $1123 | 64;
  HEAP32[$1122>>2] = $1124;
  $1125 = $5;
  $1126 = $1125&255;
  $1127 = (0 - ($1126))|0;
  $1128 = $1;
  $1129 = ((($1128)) + 236|0);
  $1130 = ((($1129)) + 4|0);
  HEAP32[$1130>>2] = $1127;
  STACKTOP = sp;return;
 }
}
function _do_toneporta($m,$xc,$note) {
 $m = $m|0;
 $xc = $xc|0;
 $note = $note|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $instrument = 0, $mapped = 0, $or$cond = 0, $sub = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $xc;
 $2 = $note;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 176|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*764)|0)|0);
 $instrument = $9;
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $instrument;
 $14 = ((($13)) + 512|0);
 $15 = (($14) + ($12<<1)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $mapped = $17;
 $18 = $mapped;
 $19 = $instrument;
 $20 = ((($19)) + 756|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18<<6)|0);
 $sub = $22;
 $23 = $2;
 $24 = ($23|0)>=(1);
 $25 = $2;
 $26 = ($25|0)<=(128);
 $or$cond = $24 & $26;
 if ($or$cond) {
  $27 = $1;
  $28 = ((($27)) + 44|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $0;
  $31 = ((($30)) + 140|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29>>>0)<($32>>>0);
  if ($33) {
   $34 = $2;
   $35 = (($34) + -1)|0;
   $2 = $35;
   $36 = $2;
   $37 = $sub;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($36) + ($39))|0;
   $41 = $1;
   $42 = ((($41)) + 16|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $instrument;
   $45 = ((($44)) + 512|0);
   $46 = (($45) + ($43<<1)|0);
   $47 = ((($46)) + 1|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48 << 24 >> 24;
   $50 = (($40) + ($49))|0;
   $51 = $1;
   $52 = ((($51)) + 40|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $0;
   $55 = ((($54)) + 1280|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $56 & 4096;
   $58 = $1;
   $59 = ((($58)) + 32|0);
   $60 = +HEAPF64[$59>>3];
   $61 = (+_note_to_period($50,$53,$57,$60));
   $62 = $1;
   $63 = ((($62)) + 312|0);
   HEAPF64[$63>>3] = $61;
  }
 }
 $64 = $1;
 $65 = ((($64)) + 24|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $1;
 $68 = ((($67)) + 312|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $66 < $69;
 $71 = $70 ? 1 : -1;
 $72 = $1;
 $73 = ((($72)) + 312|0);
 $74 = ((($73)) + 8|0);
 HEAP32[$74>>2] = $71;
 STACKTOP = sp;return;
}
function _mixer_prepare($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $bytelen = 0, $m = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $0;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $s;
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = $m;
 $10 = ((($9)) + 1256|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $m;
 $14 = ((($13)) + 1248|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 * $15;
 $17 = $p;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 $21 = $16 / $20;
 $22 = $21 / 1000.0;
 $23 = (~~(($22)));
 $24 = $s;
 $25 = ((($24)) + 36|0);
 HEAP32[$25>>2] = $23;
 $26 = $s;
 $27 = ((($26)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28<<2;
 $bytelen = $29;
 $30 = $s;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 ^ -1;
 $34 = $33 & 4;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $38 = $s;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $bytelen;
  _memset(($40|0),0,($41|0))|0;
  STACKTOP = sp;return;
 }
 $36 = $bytelen;
 $37 = $36<<1;
 $bytelen = $37;
 $38 = $s;
 $39 = ((($38)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $bytelen;
 _memset(($40|0),0,($41|0))|0;
 STACKTOP = sp;return;
}
function _mixer_softmixer($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_pos = 0, $idx = 0, $lpe = 0, $lps = 0, $m = 0, $mix_fn = 0, $mix_size = 0, $mixer = 0, $mixers = 0, $mod = 0, $p = 0, $prev_l = 0, $prev_r = 0, $s = 0, $samples = 0;
 var $size = 0, $step = 0, $synth = 0, $vi = 0, $voc = 0, $vol_l = 0, $vol_r = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1496|0);
 $s = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $synth = 1;
 $7 = $s;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 if ((($9|0) == 0)) {
  $mixers = 15088;
 } else if ((($9|0) == 1)) {
  $mixers = 15120;
 } else if ((($9|0) == 2)) {
  $mixers = 15152;
 } else {
  $mixers = 15120;
 }
 $10 = $0;
 _mixer_prepare($10);
 $11 = $0;
 _rampdown($11,-1,0,0);
 $voc = 0;
 while(1) {
  $12 = $voc;
  $13 = $p;
  $14 = ((($13)) + 948|0);
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $voc;
  $19 = $p;
  $20 = ((($19)) + 948|0);
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($18*116)|0)|0);
  $vi = $23;
  $24 = $vi;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)<(0);
  L10: do {
   if (!($26)) {
    $27 = $vi;
    $28 = ((($27)) + 24|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)<(1);
    if ($30) {
     $31 = $0;
     $32 = $voc;
     _virt_resetvoice($31,$32,1);
     break;
    }
    $33 = $vi;
    $34 = ((($33)) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $vi;
    $37 = ((($36)) + 32|0);
    HEAP32[$37>>2] = $35;
    $38 = $s;
    $39 = ((($38)) + 28|0);
    $40 = HEAP32[$39>>2]|0;
    $buf_pos = $40;
    $41 = $vi;
    $42 = ((($41)) + 20|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $vi;
    $45 = ((($44)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (128 - ($46))|0;
    $48 = Math_imul($43, $47)|0;
    $vol_r = $48;
    $49 = $vi;
    $50 = ((($49)) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $vi;
    $53 = ((($52)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (128 + ($54))|0;
    $56 = Math_imul($51, $55)|0;
    $vol_l = $56;
    $57 = $vi;
    $58 = ((($57)) + 40|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 & 32;
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $synth;
     $63 = ($62|0)!=(0);
     if (!($63)) {
      break;
     }
     $64 = $m;
     $65 = ((($64)) + 6556|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 24|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $0;
     $70 = $buf_pos;
     $71 = $s;
     $72 = ((($71)) + 36|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $vol_l;
     $75 = $74 >> 7;
     $76 = $vol_r;
     $77 = $76 >> 7;
     $78 = $vi;
     $79 = ((($78)) + 40|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 & 2;
     FUNCTION_TABLE_viiiiii[$68 & 255]($69,$70,$73,$75,$77,$81);
     $synth = 0;
     break;
    }
    $82 = $s;
    $83 = ((($82)) + 48|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)<(0);
    $86 = $85 << 31 >> 31;
    $87 = (_bitshift64Shl(($84|0),($86|0),24)|0);
    $88 = tempRet0;
    $89 = $vi;
    $90 = ((($89)) + 24|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)<(0);
    $93 = $92 << 31 >> 31;
    $94 = (___divdi3(($87|0),($88|0),($91|0),($93|0))|0);
    $95 = tempRet0;
    $step = $94;
    $96 = $step;
    $97 = ($96|0)==(0);
    if (!($97)) {
     $98 = $vi;
     $99 = ((($98)) + 48|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $mod;
     $102 = ((($101)) + 144|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($100|0)<($103|0);
     $105 = $vi;
     $106 = ((($105)) + 48|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $mod;
     if ($104) {
      $109 = ((($108)) + 180|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($110) + (($107*52)|0)|0);
      $xxs = $111;
     } else {
      $112 = ((($108)) + 144|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($107) - ($113))|0;
      $115 = $0;
      $116 = ((($115)) + 8120|0);
      $117 = ((($116)) + 16|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = (($118) + (($114*52)|0)|0);
      $xxs = $119;
     }
     $120 = $xxs;
     $121 = ((($120)) + 36|0);
     $122 = HEAP32[$121>>2]|0;
     $lps = $122;
     $123 = $xxs;
     $124 = ((($123)) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $lpe = $125;
     $126 = $p;
     $127 = ((($126)) + 28|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $128 & 4;
     $130 = ($129|0)!=(0);
     if ($130) {
      $131 = $lps;
      $132 = $131 >> 1;
      $lps = $132;
     }
     $133 = $s;
     $134 = ((($133)) + 36|0);
     $135 = HEAP32[$134>>2]|0;
     $size = $135;
     while(1) {
      $136 = $size;
      $137 = ($136|0)>(0);
      if (!($137)) {
       break L10;
      }
      $138 = $vi;
      $139 = ((($138)) + 28|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = $vi;
      $142 = ((($141)) + 52|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($140>>>0)>=($143>>>0);
      if ($144) {
       $samples = 0;
      } else {
       $145 = $vi;
       $146 = ((($145)) + 52|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $vi;
       $149 = ((($148)) + 28|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($147) - ($150))|0;
       $152 = (_bitshift64Shl(($151|0),0,16)|0);
       $153 = tempRet0;
       $154 = $vi;
       $155 = ((($154)) + 36|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156|0)<(0);
       $158 = $157 << 31 >> 31;
       $159 = (_i64Subtract(($152|0),($153|0),($156|0),($158|0))|0);
       $160 = tempRet0;
       $161 = $step;
       $162 = ($161|0)<(0);
       $163 = $162 << 31 >> 31;
       $164 = (___divdi3(($159|0),($160|0),($161|0),($163|0))|0);
       $165 = tempRet0;
       $166 = (_i64Add(1,0,($164|0),($165|0))|0);
       $167 = tempRet0;
       $samples = $166;
      }
      $168 = $samples;
      $169 = $size;
      $170 = ($168|0)>($169|0);
      if ($170) {
       $171 = $size;
       $samples = $171;
      }
      $172 = $vi;
      $173 = ((($172)) + 20|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)!=(0);
      if ($175) {
       $176 = $samples;
       $mix_size = $176;
       $177 = $vi;
       $178 = ((($177)) + 40|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = $179 & 7;
       $mixer = $180;
       $181 = $s;
       $182 = ((($181)) + 4|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = $183 ^ -1;
       $185 = $184 & 4;
       $186 = ($185|0)!=(0);
       if ($186) {
        $187 = $mix_size;
        $188 = $187<<1;
        $mix_size = $188;
       }
       $189 = $mix_size;
       $idx = $189;
       $190 = $mix_size;
       $191 = ($190|0)>=(2);
       if ($191) {
        $192 = $idx;
        $193 = (($192) - 2)|0;
        $194 = $buf_pos;
        $195 = (($194) + ($193<<2)|0);
        $196 = HEAP32[$195>>2]|0;
        $prev_r = $196;
        $197 = $idx;
        $198 = (($197) - 1)|0;
        $199 = $buf_pos;
        $200 = (($199) + ($198<<2)|0);
        $201 = HEAP32[$200>>2]|0;
        $prev_l = $201;
       } else {
        $prev_l = 0;
        $prev_r = 0;
       }
       $202 = $vi;
       $203 = ((($202)) + 72|0);
       $204 = ((($203)) + 28|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)>=(254);
       if ($206) {
        $207 = $mixer;
        $208 = $207 & -5;
        $mixer = $208;
       }
       $209 = $mixer;
       $210 = $mixers;
       $211 = (($210) + ($209<<2)|0);
       $212 = HEAP32[$211>>2]|0;
       $mix_fn = $212;
       $213 = $samples;
       $214 = ($213|0)>=(0);
       if ($214) {
        $215 = $mix_fn;
        $216 = $vi;
        $217 = $buf_pos;
        $218 = $samples;
        $219 = $vol_l;
        $220 = $vol_r;
        $221 = $step;
        FUNCTION_TABLE_viiiiii[$215 & 255]($216,$217,$218,$219,$220,$221);
        $222 = $mix_size;
        $223 = $buf_pos;
        $224 = (($223) + ($222<<2)|0);
        $buf_pos = $224;
       }
       $idx = 0;
       $225 = $mix_size;
       $226 = ($225|0)>=(2);
       if ($226) {
        $227 = $idx;
        $228 = (($227) - 2)|0;
        $229 = $buf_pos;
        $230 = (($229) + ($228<<2)|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = $prev_r;
        $233 = (($231) - ($232))|0;
        $234 = $vi;
        $235 = ((($234)) + 64|0);
        HEAP32[$235>>2] = $233;
        $236 = $idx;
        $237 = (($236) - 1)|0;
        $238 = $buf_pos;
        $239 = (($238) + ($237<<2)|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = $prev_l;
        $242 = (($240) - ($241))|0;
        $243 = $vi;
        $244 = ((($243)) + 60|0);
        HEAP32[$244>>2] = $242;
       }
      }
      $245 = $step;
      $246 = $samples;
      $247 = Math_imul($245, $246)|0;
      $248 = $vi;
      $249 = ((($248)) + 36|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (($250) + ($247))|0;
      HEAP32[$249>>2] = $251;
      $252 = $vi;
      $253 = ((($252)) + 36|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = $254 >> 16;
      $256 = $vi;
      $257 = ((($256)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = (($258) + ($255))|0;
      HEAP32[$257>>2] = $259;
      $260 = $vi;
      $261 = ((($260)) + 36|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = $262 & 65535;
      HEAP32[$261>>2] = $263;
      $264 = $samples;
      $265 = $size;
      $266 = (($265) - ($264))|0;
      $size = $266;
      $267 = $size;
      $268 = ($267|0)<=(0);
      if ($268) {
       continue;
      }
      $269 = $xxs;
      $270 = ((($269)) + 44|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = $271 ^ -1;
      $273 = $272 & 2;
      $274 = ($273|0)!=(0);
      if ($274) {
       $275 = $0;
       $276 = $voc;
       $277 = $buf_pos;
       $278 = $size;
       _anticlick($275,$276,0,0,$277,$278);
       $279 = $0;
       $280 = $voc;
       _virt_resetvoice($279,$280,0);
       $size = 0;
       continue;
      }
      $281 = $lpe;
      $282 = $lps;
      $283 = (($281) - ($282))|0;
      $284 = $vi;
      $285 = ((($284)) + 28|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = (($286) - ($283))|0;
      HEAP32[$285>>2] = $287;
      $288 = $lpe;
      $289 = $vi;
      $290 = ((($289)) + 52|0);
      HEAP32[$290>>2] = $288;
      $291 = $vi;
      $292 = ((($291)) + 112|0);
      HEAP32[$292>>2] = 1;
      $293 = $xxs;
      $294 = ((($293)) + 44|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = $295 & 4;
      $297 = ($296|0)!=(0);
      if (!($297)) {
       continue;
      }
      $298 = $lpe;
      $299 = $lps;
      $300 = (($298) - ($299))|0;
      $301 = $vi;
      $302 = ((($301)) + 52|0);
      $303 = HEAP32[$302>>2]|0;
      $304 = (($303) + ($300))|0;
      HEAP32[$302>>2] = $304;
      $305 = $lpe;
      $306 = $lps;
      $307 = (($305) - ($306))|0;
      $308 = $vi;
      $309 = ((($308)) + 28|0);
      $310 = HEAP32[$309>>2]|0;
      $311 = (($310) - ($307))|0;
      HEAP32[$309>>2] = $311;
     }
    }
   }
  } while(0);
  $312 = $voc;
  $313 = (($312) + 1)|0;
  $voc = $313;
 }
 $314 = $s;
 $315 = ((($314)) + 36|0);
 $316 = HEAP32[$315>>2]|0;
 $size = $316;
 $317 = $s;
 $318 = ((($317)) + 4|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = $319 ^ -1;
 $321 = $320 & 4;
 $322 = ($321|0)!=(0);
 if ($322) {
  $323 = $size;
  $324 = $323<<1;
  $size = $324;
 }
 $325 = $size;
 $326 = ($325|0)>(24585);
 if ($326) {
  $size = 24585;
 }
 $327 = $s;
 $328 = ((($327)) + 4|0);
 $329 = HEAP32[$328>>2]|0;
 $330 = $329 & 1;
 $331 = ($330|0)!=(0);
 $332 = $s;
 $333 = ((($332)) + 24|0);
 $334 = HEAP32[$333>>2]|0;
 if ($331) {
  $335 = $s;
  $336 = ((($335)) + 28|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = $size;
  $339 = $s;
  $340 = ((($339)) + 8|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $s;
  $343 = ((($342)) + 4|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = $344 & 2;
  $346 = ($345|0)!=(0);
  $347 = $346 ? 128 : 0;
  _downmix_int_8bit($334,$337,$338,$341,$347);
  $361 = $s;
  $362 = ((($361)) + 44|0);
  HEAP32[$362>>2] = 0;
  $363 = $s;
  $364 = ((($363)) + 40|0);
  HEAP32[$364>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $348 = $s;
  $349 = ((($348)) + 28|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = $size;
  $352 = $s;
  $353 = ((($352)) + 8|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = $s;
  $356 = ((($355)) + 4|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $357 & 2;
  $359 = ($358|0)!=(0);
  $360 = $359 ? 32768 : 0;
  _downmix_int_16bit($334,$350,$351,$354,$360);
  $361 = $s;
  $362 = ((($361)) + 44|0);
  HEAP32[$362>>2] = 0;
  $363 = $s;
  $364 = ((($363)) + 40|0);
  HEAP32[$364>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _mixer_voicepos($ctx,$voc,$pos,$frac) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $pos = $pos|0;
 $frac = $frac|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lps = 0, $m = 0, $p = 0, $vi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $pos;
 $3 = $frac;
 $4 = $0;
 $p = $4;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $1;
 $8 = $p;
 $9 = ((($8)) + 948|0);
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($7*116)|0)|0);
 $vi = $12;
 $13 = $vi;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $m;
 $17 = ((($16)) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)<($18|0);
 $20 = $vi;
 $21 = ((($20)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $m;
 if ($19) {
  $24 = ((($23)) + 180|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + (($22*52)|0)|0);
  $xxs = $26;
 } else {
  $27 = ((($23)) + 144|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($22) - ($28))|0;
  $30 = $0;
  $31 = ((($30)) + 8120|0);
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($29*52)|0)|0);
  $xxs = $34;
 }
 $35 = $xxs;
 $36 = ((($35)) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 32768;
 $39 = ($38|0)!=(0);
 if ($39) {
  STACKTOP = sp;return;
 }
 $40 = $xxs;
 $41 = ((($40)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 2;
 $44 = ($43|0)!=(0);
 $45 = $xxs;
 do {
  if ($44) {
   $46 = ((($45)) + 44|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 16;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $vi;
    $51 = ((($50)) + 112|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if ($53) {
     $54 = $xxs;
     $55 = ((($54)) + 32|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $vi;
     $58 = ((($57)) + 52|0);
     HEAP32[$58>>2] = $56;
     break;
    }
   }
   $59 = $xxs;
   $60 = ((($59)) + 40|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $vi;
   $63 = ((($62)) + 52|0);
   HEAP32[$63>>2] = $61;
  } else {
   $64 = ((($45)) + 32|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $vi;
   $67 = ((($66)) + 52|0);
   HEAP32[$67>>2] = $65;
  }
 } while(0);
 $68 = $2;
 $69 = $vi;
 $70 = ((($69)) + 52|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($68|0)>=($71|0);
 if ($72) {
  $2 = 0;
 }
 $73 = $2;
 $74 = $vi;
 $75 = ((($74)) + 28|0);
 HEAP32[$75>>2] = $73;
 $76 = $3;
 $77 = $vi;
 $78 = ((($77)) + 36|0);
 HEAP32[$78>>2] = $76;
 $79 = $xxs;
 $80 = ((($79)) + 36|0);
 $81 = HEAP32[$80>>2]|0;
 $lps = $81;
 $82 = $p;
 $83 = ((($82)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & 4;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = $lps;
  $88 = $87 >> 1;
  $lps = $88;
 }
 $89 = $xxs;
 $90 = ((($89)) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 & 4;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $xxs;
  $95 = ((($94)) + 40|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $lps;
  $98 = (($96) - ($97))|0;
  $99 = $vi;
  $100 = ((($99)) + 52|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($98))|0;
  HEAP32[$100>>2] = $102;
 }
 $103 = $vi;
 $104 = ((($103)) + 108|0);
 HEAP32[$104>>2] = 16;
 STACKTOP = sp;return;
}
function _mixer_getvoicepos($ctx,$voc) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $voc;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $1;
 $11 = $vi;
 $12 = ((($11)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_get_sample($10,$13)|0);
 $xxs = $14;
 $15 = $xxs;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 32768;
 $19 = ($18|0)!=(0);
 if ($19) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $20 = $xxs;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 4;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $vi;
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $xxs;
  $29 = ((($28)) + 40|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if ($31) {
   $32 = $xxs;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $vi;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $xxs;
   $39 = ((($38)) + 40|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($37) - ($40))|0;
   $42 = (($34) - ($41))|0;
   $43 = (($42) - 1)|0;
   $0 = $43;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $44 = $vi;
 $45 = ((($44)) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _mixer_setpatch($ctx,$voc,$smp) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $smp = $smp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $m = 0, $p = 0, $s = 0, $vi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $smp;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $0;
 $7 = ((($6)) + 1496|0);
 $s = $7;
 $8 = $1;
 $9 = $p;
 $10 = ((($9)) + 948|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($8*116)|0)|0);
 $vi = $13;
 $14 = $0;
 $15 = $2;
 $16 = (_get_sample($14,$15)|0);
 $xxs = $16;
 $17 = $2;
 $18 = $vi;
 $19 = ((($18)) + 48|0);
 HEAP32[$19>>2] = $17;
 $20 = $vi;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = $vi;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = 0;
 $24 = $vi;
 $25 = ((($24)) + 112|0);
 HEAP32[$25>>2] = 0;
 $26 = $vi;
 $27 = ((($26)) + 40|0);
 HEAP32[$27>>2] = 0;
 $28 = $s;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 ^ -1;
 $32 = $31 & 4;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $vi;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 | 2;
  HEAP32[$35>>2] = $37;
 }
 $38 = $xxs;
 $39 = ((($38)) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & 32768;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $vi;
  $44 = ((($43)) + 40|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 | 32;
  HEAP32[$44>>2] = $46;
  $47 = $m;
  $48 = ((($47)) + 6556|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $0;
  $53 = $1;
  $54 = $xxs;
  $55 = ((($54)) + 48|0);
  $56 = HEAP32[$55>>2]|0;
  FUNCTION_TABLE_viii[$51 & 255]($52,$53,$56);
  STACKTOP = sp;return;
 }
 $57 = $0;
 $58 = $1;
 _mixer_setvol($57,$58,0);
 $59 = $xxs;
 $60 = ((($59)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $vi;
 $63 = ((($62)) + 68|0);
 HEAP32[$63>>2] = $61;
 $64 = $vi;
 $65 = ((($64)) + 40|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 | 16;
 HEAP32[$65>>2] = $67;
 $68 = $m;
 $69 = ((($68)) + 1280|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 & 65536;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $s;
  $74 = ((($73)) + 20|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 & 1;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $vi;
   $79 = ((($78)) + 40|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 4;
   HEAP32[$79>>2] = $81;
  }
 }
 $82 = $xxs;
 $83 = ((($82)) + 44|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & 1;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = $vi;
  $88 = ((($87)) + 40|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89 | 1;
  HEAP32[$88>>2] = $90;
 }
 $91 = $0;
 $92 = $1;
 _mixer_voicepos($91,$92,0,0);
 STACKTOP = sp;return;
}
function _mixer_setvol($ctx,$voc,$vol) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $m = 0, $p = 0, $s = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $vol;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $1;
 $7 = $p;
 $8 = ((($7)) + 948|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($6*116)|0)|0);
 $vi = $11;
 $12 = $0;
 $13 = ((($12)) + 1552|0);
 $m = $13;
 $14 = $s;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $18 = $0;
  $19 = $1;
  $20 = $2;
  $21 = $vi;
  $22 = ((($21)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  _anticlick($18,$19,$20,$23,0,0);
 }
 $24 = $2;
 $25 = $vi;
 $26 = ((($25)) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = $vi;
 $28 = ((($27)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 32;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $m;
 $33 = ((($32)) + 6556|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = $1;
 $39 = $2;
 $40 = $39 >> 4;
 FUNCTION_TABLE_viii[$36 & 255]($37,$38,$40);
 STACKTOP = sp;return;
}
function _mixer_setnote($ctx,$voc,$note) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $note = $note|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $note;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $2;
 $11 = $vi;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = (_note_to_period_mix($13,0)|0);
 $15 = $vi;
 $16 = ((($15)) + 24|0);
 HEAP32[$16>>2] = $14;
 $17 = $vi;
 $18 = ((($17)) + 108|0);
 HEAP32[$18>>2] = 16;
 STACKTOP = sp;return;
}
function _mixer_setbend($ctx,$voc,$bend) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $bend = $bend|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $p = 0, $vi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $bend;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $0;
 $11 = ((($10)) + 1552|0);
 $m = $11;
 $12 = $vi;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = (_note_to_period_mix($14,$15)|0);
 $17 = $vi;
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = $16;
 $19 = $vi;
 $20 = ((($19)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 32;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $m;
 $25 = ((($24)) + 6556|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = $1;
 $31 = $vi;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = $34 >> 7;
 FUNCTION_TABLE_viiii[$28 & 255]($29,$30,$33,$35);
 STACKTOP = sp;return;
}
function _mixer_seteffect($ctx,$voc,$type,$val) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $type = $type|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $type;
 $3 = $val;
 $4 = $0;
 $p = $4;
 $5 = $1;
 $6 = $p;
 $7 = ((($6)) + 948|0);
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($5*116)|0)|0);
 $vi = $10;
 $11 = $2;
 switch ($11|0) {
 case 177:  {
  $24 = $3;
  $25 = $vi;
  $26 = ((($25)) + 72|0);
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = $24;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $16 = $3;
  $17 = $vi;
  $18 = ((($17)) + 72|0);
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = $16;
  STACKTOP = sp;return;
  break;
 }
 case 176:  {
  $20 = $3;
  $21 = $vi;
  $22 = ((($21)) + 72|0);
  $23 = ((($22)) + 16|0);
  HEAP32[$23>>2] = $20;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $12 = $3;
  $13 = $vi;
  $14 = ((($13)) + 72|0);
  $15 = ((($14)) + 28|0);
  HEAP32[$15>>2] = $12;
  STACKTOP = sp;return;
  break;
 }
 case 178:  {
  $28 = $3;
  $29 = $vi;
  $30 = ((($29)) + 72|0);
  $31 = ((($30)) + 24|0);
  HEAP32[$31>>2] = $28;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _mixer_setpan($ctx,$voc,$pan) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $pan = $pan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $pan;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 948|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $2;
 $11 = $vi;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _mixer_numvoices($ctx,$num) {
 $ctx = $ctx|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $num;
 $3 = $1;
 $4 = ((($3)) + 1496|0);
 $s = $4;
 $5 = $2;
 $6 = $s;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 $10 = $2;
 $11 = ($10|0)<(0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = $s;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $15 = $2;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _mixer_on($ctx,$rate,$format,$c4rate) {
 $ctx = $ctx|0;
 $rate = $rate|0;
 $format = $format|0;
 $c4rate = $c4rate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $rate;
 $3 = $format;
 $4 = $c4rate;
 $5 = $1;
 $6 = ((($5)) + 1496|0);
 $s = $6;
 $7 = (_calloc(2,24585)|0);
 $8 = $s;
 $9 = ((($8)) + 24|0);
 HEAP32[$9>>2] = $7;
 $10 = $s;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 do {
  if (!($13)) {
   $14 = (_calloc(4,24585)|0);
   $15 = $s;
   $16 = ((($15)) + 28|0);
   HEAP32[$16>>2] = $14;
   $17 = $s;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $47 = $s;
    $48 = ((($47)) + 24|0);
    $49 = HEAP32[$48>>2]|0;
    _free($49);
    break;
   }
   $21 = $2;
   $22 = $s;
   HEAP32[$22>>2] = $21;
   $23 = $3;
   $24 = $s;
   $25 = ((($24)) + 4|0);
   HEAP32[$25>>2] = $23;
   $26 = $s;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = 1;
   $28 = $s;
   $29 = ((($28)) + 12|0);
   HEAP32[$29>>2] = 70;
   $30 = $4;
   $31 = ($30*6864)|0;
   $32 = $s;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31|0) / ($33|0))&-1;
   $35 = $s;
   $36 = ((($35)) + 48|0);
   HEAP32[$36>>2] = $34;
   $37 = $s;
   $38 = ((($37)) + 16|0);
   HEAP32[$38>>2] = 1;
   $39 = $s;
   $40 = ((($39)) + 20|0);
   HEAP32[$40>>2] = 1;
   $41 = $s;
   $42 = ((($41)) + 32|0);
   HEAP32[$42>>2] = 128;
   $43 = $s;
   $44 = ((($43)) + 44|0);
   HEAP32[$44>>2] = 0;
   $45 = $s;
   $46 = ((($45)) + 40|0);
   HEAP32[$46>>2] = 0;
   $0 = 0;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $0 = -1;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _mixer_off($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1496|0);
 $s = $2;
 $3 = $s;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $s;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $s;
 $10 = ((($9)) + 28|0);
 HEAP32[$10>>2] = 0;
 $11 = $s;
 $12 = ((($11)) + 24|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _rampdown($ctx,$voc,$buf,$count) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dec_l = 0, $dec_r = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $s = 0, $smp_l = 0, $smp_r = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $buf;
 $3 = $count;
 $4 = $0;
 $p = $4;
 $5 = $0;
 $6 = ((($5)) + 1496|0);
 $s = $6;
 $7 = $1;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $s;
  $10 = ((($9)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $smp_r = $11;
  $12 = $s;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $smp_l = $14;
 } else {
  $15 = $1;
  $16 = $p;
  $17 = ((($16)) + 948|0);
  $18 = ((($17)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + (($15*116)|0)|0);
  $vi = $20;
  $21 = $vi;
  $22 = ((($21)) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  $smp_r = $23;
  $24 = $vi;
  $25 = ((($24)) + 60|0);
  $26 = HEAP32[$25>>2]|0;
  $smp_l = $26;
  $27 = $vi;
  $28 = ((($27)) + 60|0);
  HEAP32[$28>>2] = 0;
  $29 = $vi;
  $30 = ((($29)) + 64|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $smp_l;
 $32 = ($31|0)==(0);
 $33 = $smp_r;
 $34 = ($33|0)==(0);
 $or$cond = $32 & $34;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $35 = $2;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = $s;
  $38 = ((($37)) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  $2 = $39;
  $3 = 16;
 }
 $40 = $3;
 $41 = ($40|0)<=(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = $smp_r;
 $43 = $3;
 $44 = (($42|0) / ($43|0))&-1;
 $dec_r = $44;
 $45 = $smp_l;
 $46 = $3;
 $47 = (($45|0) / ($46|0))&-1;
 $dec_l = $47;
 while(1) {
  $48 = $smp_r;
  $49 = ($48|0)!=(0);
  $50 = $smp_l;
  $51 = ($50|0)!=(0);
  $or$cond3 = $49 | $51;
  if (!($or$cond3)) {
   label = 28;
   break;
  }
  $52 = $3;
  $53 = (($52) + -1)|0;
  $3 = $53;
  $54 = ($52|0)!=(0);
  if (!($54)) {
   label = 28;
   break;
  }
  $55 = $s;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 ^ -1;
  $59 = $58 & 4;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $dec_r;
   $62 = ($61|0)>(0);
   $63 = $smp_r;
   $64 = $dec_r;
   do {
    if ($62) {
     $65 = ($63|0)>($64|0);
     if ($65) {
      $66 = $dec_r;
      $67 = $smp_r;
      $68 = (($67) - ($66))|0;
      $smp_r = $68;
      $69 = $smp_r;
      $70 = $2;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($71) + ($69))|0;
      HEAP32[$70>>2] = $72;
      break;
     } else {
      $smp_r = 0;
      break;
     }
    } else {
     $73 = ($63|0)<($64|0);
     if ($73) {
      $74 = $dec_r;
      $75 = $smp_r;
      $76 = (($75) - ($74))|0;
      $smp_r = $76;
      $77 = $smp_r;
      $78 = $2;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + ($77))|0;
      HEAP32[$78>>2] = $80;
      break;
     } else {
      $smp_r = 0;
      break;
     }
    }
   } while(0);
   $81 = $2;
   $82 = ((($81)) + 4|0);
   $2 = $82;
  }
  $83 = $dec_l;
  $84 = ($83|0)>(0);
  $85 = $smp_l;
  $86 = $dec_l;
  do {
   if ($84) {
    $87 = ($85|0)>($86|0);
    if ($87) {
     $88 = $dec_l;
     $89 = $smp_l;
     $90 = (($89) - ($88))|0;
     $smp_l = $90;
     $91 = $smp_l;
     $92 = $2;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + ($91))|0;
     HEAP32[$92>>2] = $94;
     break;
    } else {
     $smp_l = 0;
     break;
    }
   } else {
    $95 = ($85|0)<($86|0);
    if ($95) {
     $96 = $dec_l;
     $97 = $smp_l;
     $98 = (($97) - ($96))|0;
     $smp_l = $98;
     $99 = $smp_l;
     $100 = $2;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + ($99))|0;
     HEAP32[$100>>2] = $102;
     break;
    } else {
     $smp_l = 0;
     break;
    }
   }
  } while(0);
  $103 = $2;
  $104 = ((($103)) + 4|0);
  $2 = $104;
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
}
function _anticlick($ctx,$voc,$vol,$pan,$buf,$count) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $vol = $vol|0;
 $pan = $pan|0;
 $buf = $buf|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $newvol = 0, $oldvol = 0, $p = 0, $pan0 = 0, $s = 0, $vi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $vol;
 $3 = $pan;
 $4 = $buf;
 $5 = $count;
 $6 = $0;
 $p = $6;
 $7 = $0;
 $8 = ((($7)) + 1496|0);
 $s = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 948|0);
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($9*116)|0)|0);
 $vi = $14;
 $15 = $vi;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $pan0 = $17;
 $18 = $pan0;
 $19 = ($18|0)<(-127);
 $$ = $19 ? -127 : $17;
 $pan0 = $$;
 $20 = $vi;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $vi;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $pan0;
  $28 = (128 - ($27))|0;
  $29 = Math_imul($26, $28)|0;
  $oldvol = $29;
  $30 = $2;
  $31 = $3;
  $32 = (128 - ($31))|0;
  $33 = Math_imul($30, $32)|0;
  $newvol = $33;
  $34 = $vi;
  $35 = ((($34)) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)<(0);
  $38 = $37 << 31 >> 31;
  $39 = $newvol;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = (___muldi3(($36|0),($38|0),($39|0),($41|0))|0);
  $43 = tempRet0;
  $44 = $oldvol;
  $45 = ($44|0)<(0);
  $46 = $45 << 31 >> 31;
  $47 = (___divdi3(($42|0),($43|0),($44|0),($46|0))|0);
  $48 = tempRet0;
  $49 = $vi;
  $50 = ((($49)) + 64|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)<(0);
  $53 = $52 << 31 >> 31;
  $54 = (_i64Subtract(($51|0),($53|0),($47|0),($48|0))|0);
  $55 = tempRet0;
  HEAP32[$50>>2] = $54;
  $56 = $vi;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $pan0;
  $60 = (128 + ($59))|0;
  $61 = Math_imul($58, $60)|0;
  $oldvol = $61;
  $62 = $2;
  $63 = $3;
  $64 = (128 + ($63))|0;
  $65 = Math_imul($62, $64)|0;
  $newvol = $65;
  $66 = $vi;
  $67 = ((($66)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)<(0);
  $70 = $69 << 31 >> 31;
  $71 = $newvol;
  $72 = ($71|0)<(0);
  $73 = $72 << 31 >> 31;
  $74 = (___muldi3(($68|0),($70|0),($71|0),($73|0))|0);
  $75 = tempRet0;
  $76 = $oldvol;
  $77 = ($76|0)<(0);
  $78 = $77 << 31 >> 31;
  $79 = (___divdi3(($74|0),($75|0),($76|0),($78|0))|0);
  $80 = tempRet0;
  $81 = $vi;
  $82 = ((($81)) + 60|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)<(0);
  $85 = $84 << 31 >> 31;
  $86 = (_i64Subtract(($83|0),($85|0),($79|0),($80|0))|0);
  $87 = tempRet0;
  HEAP32[$82>>2] = $86;
 }
 $88 = $4;
 $89 = ($88|0)!=(0|0);
 if ($89) {
  $108 = $0;
  $109 = $1;
  $110 = $4;
  $111 = $5;
  _rampdown($108,$109,$110,$111);
  STACKTOP = sp;return;
 } else {
  $90 = $vi;
  $91 = ((($90)) + 64|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $s;
  $94 = ((($93)) + 40|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($92))|0;
  HEAP32[$94>>2] = $96;
  $97 = $vi;
  $98 = ((($97)) + 60|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $s;
  $101 = ((($100)) + 44|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + ($99))|0;
  HEAP32[$101>>2] = $103;
  $104 = $vi;
  $105 = ((($104)) + 60|0);
  HEAP32[$105>>2] = 0;
  $106 = $vi;
  $107 = ((($106)) + 64|0);
  HEAP32[$107>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _downmix_int_8bit($dest,$src,$num,$amp,$offs) {
 $dest = $dest|0;
 $src = $src|0;
 $num = $num|0;
 $amp = $amp|0;
 $offs = $offs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift = 0, $smp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $src;
 $2 = $num;
 $3 = $amp;
 $4 = $offs;
 $5 = $3;
 $6 = (20 - ($5))|0;
 $shift = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $shift;
  $13 = $11 >> $12;
  $smp = $13;
  $14 = $smp;
  $15 = ($14|0)>(127);
  do {
   if ($15) {
    $16 = $0;
    HEAP8[$16>>0] = 127;
   } else {
    $17 = $smp;
    $18 = ($17|0)<(-128);
    if ($18) {
     $19 = $0;
     HEAP8[$19>>0] = -128;
     break;
    } else {
     $20 = $smp;
     $21 = $20&255;
     $22 = $0;
     HEAP8[$22>>0] = $21;
     break;
    }
   }
  } while(0);
  $23 = $4;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $4;
   $26 = $0;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = (($28) + ($25))|0;
   $30 = $29&255;
   HEAP8[$26>>0] = $30;
  }
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $1 = $32;
  $33 = $0;
  $34 = ((($33)) + 1|0);
  $0 = $34;
 }
 STACKTOP = sp;return;
}
function _downmix_int_16bit($dest,$src,$num,$amp,$offs) {
 $dest = $dest|0;
 $src = $src|0;
 $num = $num|0;
 $amp = $amp|0;
 $offs = $offs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift = 0, $smp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $src;
 $2 = $num;
 $3 = $amp;
 $4 = $offs;
 $5 = $3;
 $6 = (12 - ($5))|0;
 $shift = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $shift;
  $13 = $11 >> $12;
  $smp = $13;
  $14 = $smp;
  $15 = ($14|0)>(32767);
  do {
   if ($15) {
    $16 = $0;
    HEAP16[$16>>1] = 32767;
   } else {
    $17 = $smp;
    $18 = ($17|0)<(-32768);
    if ($18) {
     $19 = $0;
     HEAP16[$19>>1] = -32768;
     break;
    } else {
     $20 = $smp;
     $21 = $20&65535;
     $22 = $0;
     HEAP16[$22>>1] = $21;
     break;
    }
   }
  } while(0);
  $23 = $4;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $4;
   $26 = $0;
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (($28) + ($25))|0;
   $30 = $29&65535;
   HEAP16[$26>>1] = $30;
  }
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $1 = $32;
  $33 = $0;
  $34 = ((($33)) + 2|0);
  $0 = $34;
 }
 STACKTOP = sp;return;
}
function _synth_init($ctx,$freq) {
 $ctx = $ctx|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $freq;
 STACKTOP = sp;return 0;
}
function _synth_deinit($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 STACKTOP = sp;return 0;
}
function _synth_reset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 STACKTOP = sp;return 0;
}
function _smix_stereo_8bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $a = 0, $frac = 0, $pos = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_l1 = $22;
  $23 = $pos;
  $24 = (($23) + 1)|0;
  $25 = $sptr;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = $smp_l1;
  $30 = (($28) - ($29))|0;
  $smp_dt = $30;
  $31 = $smp_l1;
  $32 = $frac;
  $33 = $smp_dt;
  $34 = Math_imul($32, $33)|0;
  $35 = $34 >> 16;
  $36 = (($31) + ($35))|0;
  $smp_in = $36;
  $37 = $0;
  $38 = ((($37)) + 108|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $0;
   $42 = ((($41)) + 108|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (16 - ($43))|0;
   $a = $44;
   $45 = $smp_in;
   $46 = $4;
   $47 = Math_imul($45, $46)|0;
   $48 = $a;
   $49 = Math_imul($47, $48)|0;
   $50 = $49 >> 4;
   $51 = $1;
   $52 = ((($51)) + 4|0);
   $1 = $52;
   $53 = HEAP32[$51>>2]|0;
   $54 = (($53) + ($50))|0;
   HEAP32[$51>>2] = $54;
   $55 = $smp_in;
   $56 = $3;
   $57 = Math_imul($55, $56)|0;
   $58 = $a;
   $59 = Math_imul($57, $58)|0;
   $60 = $59 >> 4;
   $61 = $1;
   $62 = ((($61)) + 4|0);
   $1 = $62;
   $63 = HEAP32[$61>>2]|0;
   $64 = (($63) + ($60))|0;
   HEAP32[$61>>2] = $64;
   $65 = $0;
   $66 = ((($65)) + 108|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + -1)|0;
   HEAP32[$66>>2] = $68;
  } else {
   $69 = $smp_in;
   $70 = $4;
   $71 = Math_imul($69, $70)|0;
   $72 = $1;
   $73 = ((($72)) + 4|0);
   $1 = $73;
   $74 = HEAP32[$72>>2]|0;
   $75 = (($74) + ($71))|0;
   HEAP32[$72>>2] = $75;
   $76 = $smp_in;
   $77 = $3;
   $78 = Math_imul($76, $77)|0;
   $79 = $1;
   $80 = ((($79)) + 4|0);
   $1 = $80;
   $81 = HEAP32[$79>>2]|0;
   $82 = (($81) + ($78))|0;
   HEAP32[$79>>2] = $82;
  }
  $83 = $5;
  $84 = $frac;
  $85 = (($84) + ($83))|0;
  $frac = $85;
  $86 = $frac;
  $87 = $86 >> 16;
  $88 = $pos;
  $89 = (($88) + ($87))|0;
  $pos = $89;
  $90 = $frac;
  $91 = $90 & 65535;
  $frac = $91;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $a = 0, $frac = 0, $pos = 0, $smp_dt = 0;
 var $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 $17 = $4;
 $18 = $17 >> 8;
 $4 = $18;
 while(1) {
  $19 = $2;
  $20 = (($19) + -1)|0;
  $2 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $pos;
  $23 = $sptr;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $smp_l1 = $26;
  $27 = $pos;
  $28 = (($27) + 1)|0;
  $29 = $sptr;
  $30 = (($29) + ($28<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 << 16 >> 16;
  $33 = $smp_l1;
  $34 = (($32) - ($33))|0;
  $smp_dt = $34;
  $35 = $smp_l1;
  $36 = $frac;
  $37 = $smp_dt;
  $38 = Math_imul($36, $37)|0;
  $39 = $38 >> 16;
  $40 = (($35) + ($39))|0;
  $smp_in = $40;
  $41 = $0;
  $42 = ((($41)) + 108|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $0;
   $46 = ((($45)) + 108|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (16 - ($47))|0;
   $a = $48;
   $49 = $smp_in;
   $50 = $4;
   $51 = Math_imul($49, $50)|0;
   $52 = $a;
   $53 = Math_imul($51, $52)|0;
   $54 = $53 >> 4;
   $55 = $1;
   $56 = ((($55)) + 4|0);
   $1 = $56;
   $57 = HEAP32[$55>>2]|0;
   $58 = (($57) + ($54))|0;
   HEAP32[$55>>2] = $58;
   $59 = $smp_in;
   $60 = $3;
   $61 = Math_imul($59, $60)|0;
   $62 = $a;
   $63 = Math_imul($61, $62)|0;
   $64 = $63 >> 4;
   $65 = $1;
   $66 = ((($65)) + 4|0);
   $1 = $66;
   $67 = HEAP32[$65>>2]|0;
   $68 = (($67) + ($64))|0;
   HEAP32[$65>>2] = $68;
   $69 = $0;
   $70 = ((($69)) + 108|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + -1)|0;
   HEAP32[$70>>2] = $72;
  } else {
   $73 = $smp_in;
   $74 = $4;
   $75 = Math_imul($73, $74)|0;
   $76 = $1;
   $77 = ((($76)) + 4|0);
   $1 = $77;
   $78 = HEAP32[$76>>2]|0;
   $79 = (($78) + ($75))|0;
   HEAP32[$76>>2] = $79;
   $80 = $smp_in;
   $81 = $3;
   $82 = Math_imul($80, $81)|0;
   $83 = $1;
   $84 = ((($83)) + 4|0);
   $1 = $84;
   $85 = HEAP32[$83>>2]|0;
   $86 = (($85) + ($82))|0;
   HEAP32[$83>>2] = $86;
  }
  $87 = $5;
  $88 = $frac;
  $89 = (($88) + ($87))|0;
  $frac = $89;
  $90 = $frac;
  $91 = $90 >> 16;
  $92 = $pos;
  $93 = (($92) + ($91))|0;
  $pos = $93;
  $94 = $frac;
  $95 = $94 & 65535;
  $frac = $95;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_in = $22;
  $23 = $smp_in;
  $24 = $4;
  $25 = Math_imul($23, $24)|0;
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $1 = $27;
  $28 = HEAP32[$26>>2]|0;
  $29 = (($28) + ($25))|0;
  HEAP32[$26>>2] = $29;
  $30 = $smp_in;
  $31 = $3;
  $32 = Math_imul($30, $31)|0;
  $33 = $1;
  $34 = ((($33)) + 4|0);
  $1 = $34;
  $35 = HEAP32[$33>>2]|0;
  $36 = (($35) + ($32))|0;
  HEAP32[$33>>2] = $36;
  $37 = $5;
  $38 = $frac;
  $39 = (($38) + ($37))|0;
  $frac = $39;
  $40 = $frac;
  $41 = $40 >> 16;
  $42 = $pos;
  $43 = (($42) + ($41))|0;
  $pos = $43;
  $44 = $frac;
  $45 = $44 & 65535;
  $frac = $45;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 $17 = $4;
 $18 = $17 >> 8;
 $4 = $18;
 while(1) {
  $19 = $2;
  $20 = (($19) + -1)|0;
  $2 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $pos;
  $23 = $sptr;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $smp_in = $26;
  $27 = $smp_in;
  $28 = $4;
  $29 = Math_imul($27, $28)|0;
  $30 = $1;
  $31 = ((($30)) + 4|0);
  $1 = $31;
  $32 = HEAP32[$30>>2]|0;
  $33 = (($32) + ($29))|0;
  HEAP32[$30>>2] = $33;
  $34 = $smp_in;
  $35 = $3;
  $36 = Math_imul($34, $35)|0;
  $37 = $1;
  $38 = ((($37)) + 4|0);
  $1 = $38;
  $39 = HEAP32[$37>>2]|0;
  $40 = (($39) + ($36))|0;
  HEAP32[$37>>2] = $40;
  $41 = $5;
  $42 = $frac;
  $43 = (($42) + ($41))|0;
  $frac = $43;
  $44 = $frac;
  $45 = $44 >> 16;
  $46 = $pos;
  $47 = (($46) + ($45))|0;
  $pos = $47;
  $48 = $frac;
  $49 = $48 & 65535;
  $frac = $49;
 }
 STACKTOP = sp;return;
}
function _smix_mono_8bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_l1 = $22;
  $23 = $pos;
  $24 = (($23) + 1)|0;
  $25 = $sptr;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = $smp_l1;
  $30 = (($28) - ($29))|0;
  $smp_dt = $30;
  $31 = $smp_l1;
  $32 = $frac;
  $33 = $smp_dt;
  $34 = Math_imul($32, $33)|0;
  $35 = $34 >> 16;
  $36 = (($31) + ($35))|0;
  $smp_in = $36;
  $37 = $0;
  $38 = ((($37)) + 108|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0);
  $41 = $smp_in;
  $42 = $3;
  $43 = Math_imul($41, $42)|0;
  if ($40) {
   $44 = $0;
   $45 = ((($44)) + 108|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (16 - ($46))|0;
   $48 = Math_imul($43, $47)|0;
   $49 = $48 >> 4;
   $50 = $1;
   $51 = ((($50)) + 4|0);
   $1 = $51;
   $52 = HEAP32[$50>>2]|0;
   $53 = (($52) + ($49))|0;
   HEAP32[$50>>2] = $53;
   $54 = $0;
   $55 = ((($54)) + 108|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + -1)|0;
   HEAP32[$55>>2] = $57;
  } else {
   $58 = $1;
   $59 = ((($58)) + 4|0);
   $1 = $59;
   $60 = HEAP32[$58>>2]|0;
   $61 = (($60) + ($43))|0;
   HEAP32[$58>>2] = $61;
  }
  $62 = $5;
  $63 = $frac;
  $64 = (($63) + ($62))|0;
  $frac = $64;
  $65 = $frac;
  $66 = $65 >> 16;
  $67 = $pos;
  $68 = (($67) + ($66))|0;
  $pos = $68;
  $69 = $frac;
  $70 = $69 & 65535;
  $frac = $70;
 }
 STACKTOP = sp;return;
}
function _smix_mono_16bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 while(1) {
  $17 = $2;
  $18 = (($17) + -1)|0;
  $2 = $18;
  $19 = ($17|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $pos;
  $21 = $sptr;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $smp_l1 = $24;
  $25 = $pos;
  $26 = (($25) + 1)|0;
  $27 = $sptr;
  $28 = (($27) + ($26<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = $smp_l1;
  $32 = (($30) - ($31))|0;
  $smp_dt = $32;
  $33 = $smp_l1;
  $34 = $frac;
  $35 = $smp_dt;
  $36 = Math_imul($34, $35)|0;
  $37 = $36 >> 16;
  $38 = (($33) + ($37))|0;
  $smp_in = $38;
  $39 = $0;
  $40 = ((($39)) + 108|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  $43 = $smp_in;
  $44 = $3;
  $45 = Math_imul($43, $44)|0;
  if ($42) {
   $46 = $0;
   $47 = ((($46)) + 108|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (16 - ($48))|0;
   $50 = Math_imul($45, $49)|0;
   $51 = $50 >> 4;
   $52 = $1;
   $53 = ((($52)) + 4|0);
   $1 = $53;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($51))|0;
   HEAP32[$52>>2] = $55;
   $56 = $0;
   $57 = ((($56)) + 108|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + -1)|0;
   HEAP32[$57>>2] = $59;
  } else {
   $60 = $1;
   $61 = ((($60)) + 4|0);
   $1 = $61;
   $62 = HEAP32[$60>>2]|0;
   $63 = (($62) + ($45))|0;
   HEAP32[$60>>2] = $63;
  }
  $64 = $5;
  $65 = $frac;
  $66 = (($65) + ($64))|0;
  $frac = $66;
  $67 = $frac;
  $68 = $67 >> 16;
  $69 = $pos;
  $70 = (($69) + ($68))|0;
  $pos = $70;
  $71 = $frac;
  $72 = $71 & 65535;
  $frac = $72;
 }
 STACKTOP = sp;return;
}
function _smix_mono_8bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0;
 var $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_in = $22;
  $23 = $smp_in;
  $24 = $3;
  $25 = Math_imul($23, $24)|0;
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $1 = $27;
  $28 = HEAP32[$26>>2]|0;
  $29 = (($28) + ($25))|0;
  HEAP32[$26>>2] = $29;
  $30 = $5;
  $31 = $frac;
  $32 = (($31) + ($30))|0;
  $frac = $32;
  $33 = $frac;
  $34 = $33 >> 16;
  $35 = $pos;
  $36 = (($35) + ($34))|0;
  $pos = $36;
  $37 = $frac;
  $38 = $37 & 65535;
  $frac = $38;
 }
 STACKTOP = sp;return;
}
function _smix_mono_16bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 while(1) {
  $17 = $2;
  $18 = (($17) + -1)|0;
  $2 = $18;
  $19 = ($17|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $pos;
  $21 = $sptr;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $smp_in = $24;
  $25 = $smp_in;
  $26 = $3;
  $27 = Math_imul($25, $26)|0;
  $28 = $1;
  $29 = ((($28)) + 4|0);
  $1 = $29;
  $30 = HEAP32[$28>>2]|0;
  $31 = (($30) + ($27))|0;
  HEAP32[$28>>2] = $31;
  $32 = $5;
  $33 = $frac;
  $34 = (($33) + ($32))|0;
  $frac = $34;
  $35 = $frac;
  $36 = $35 >> 16;
  $37 = $pos;
  $38 = (($37) + ($36))|0;
  $pos = $38;
  $39 = $frac;
  $40 = $39 & 65535;
  $frac = $40;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a0 = 0, $b0 = 0, $b1 = 0;
 var $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 while(1) {
  $60 = $2;
  $61 = (($60) + -1)|0;
  $2 = $61;
  $62 = ($60|0)!=(0);
  if (!($62)) {
   break;
  }
  $63 = $pos;
  $64 = $sptr;
  $65 = (($64) + ($63)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $smp_l1 = $67;
  $68 = $pos;
  $69 = (($68) + 1)|0;
  $70 = $sptr;
  $71 = (($70) + ($69)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = $smp_l1;
  $75 = (($73) - ($74))|0;
  $smp_dt = $75;
  $76 = $smp_l1;
  $77 = $frac;
  $78 = $smp_dt;
  $79 = Math_imul($77, $78)|0;
  $80 = $79 >> 16;
  $81 = (($76) + ($80))|0;
  $smp_in = $81;
  $82 = $a0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($82) + 4)|0;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = $smp_in;
  $89 = ($88|0)<(0);
  $90 = $89 << 31 >> 31;
  $91 = (___muldi3(($84|0),($87|0),($88|0),($90|0))|0);
  $92 = tempRet0;
  $93 = $4;
  $94 = ($93|0)<(0);
  $95 = $94 << 31 >> 31;
  $96 = (___muldi3(($91|0),($92|0),($93|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $b0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + 4)|0;
  $102 = $101;
  $103 = HEAP32[$102>>2]|0;
  $104 = $fr1;
  $105 = ($104|0)<(0);
  $106 = $105 << 31 >> 31;
  $107 = (___muldi3(($100|0),($103|0),($104|0),($106|0))|0);
  $108 = tempRet0;
  $109 = (_i64Add(($96|0),($97|0),($107|0),($108|0))|0);
  $110 = tempRet0;
  $111 = $b1;
  $112 = $111;
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 4)|0;
  $115 = $114;
  $116 = HEAP32[$115>>2]|0;
  $117 = $fr2;
  $118 = ($117|0)<(0);
  $119 = $118 << 31 >> 31;
  $120 = (___muldi3(($113|0),($116|0),($117|0),($119|0))|0);
  $121 = tempRet0;
  $122 = (_i64Add(($109|0),($110|0),($120|0),($121|0))|0);
  $123 = tempRet0;
  $124 = (_bitshift64Ashr(($122|0),($123|0),16)|0);
  $125 = tempRet0;
  $sr = $124;
  $126 = $fr1;
  $fr2 = $126;
  $127 = $sr;
  $fr1 = $127;
  $128 = $a0;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = $smp_in;
  $135 = ($134|0)<(0);
  $136 = $135 << 31 >> 31;
  $137 = (___muldi3(($130|0),($133|0),($134|0),($136|0))|0);
  $138 = tempRet0;
  $139 = $3;
  $140 = ($139|0)<(0);
  $141 = $140 << 31 >> 31;
  $142 = (___muldi3(($137|0),($138|0),($139|0),($141|0))|0);
  $143 = tempRet0;
  $144 = $b0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = (($144) + 4)|0;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = $fl1;
  $151 = ($150|0)<(0);
  $152 = $151 << 31 >> 31;
  $153 = (___muldi3(($146|0),($149|0),($150|0),($152|0))|0);
  $154 = tempRet0;
  $155 = (_i64Add(($142|0),($143|0),($153|0),($154|0))|0);
  $156 = tempRet0;
  $157 = $b1;
  $158 = $157;
  $159 = HEAP32[$158>>2]|0;
  $160 = (($157) + 4)|0;
  $161 = $160;
  $162 = HEAP32[$161>>2]|0;
  $163 = $fl2;
  $164 = ($163|0)<(0);
  $165 = $164 << 31 >> 31;
  $166 = (___muldi3(($159|0),($162|0),($163|0),($165|0))|0);
  $167 = tempRet0;
  $168 = (_i64Add(($155|0),($156|0),($166|0),($167|0))|0);
  $169 = tempRet0;
  $170 = (_bitshift64Ashr(($168|0),($169|0),16)|0);
  $171 = tempRet0;
  $sl = $170;
  $172 = $fl1;
  $fl2 = $172;
  $173 = $sl;
  $fl1 = $173;
  $174 = $0;
  $175 = ((($174)) + 108|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($176|0)!=(0);
  if ($177) {
   $178 = $0;
   $179 = ((($178)) + 108|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (16 - ($180))|0;
   $a = $181;
   $182 = $sr;
   $183 = $a;
   $184 = Math_imul($182, $183)|0;
   $185 = $184 >> 4;
   $186 = $1;
   $187 = ((($186)) + 4|0);
   $1 = $187;
   $188 = HEAP32[$186>>2]|0;
   $189 = (($188) + ($185))|0;
   HEAP32[$186>>2] = $189;
   $190 = $sl;
   $191 = $a;
   $192 = Math_imul($190, $191)|0;
   $193 = $192 >> 4;
   $194 = $1;
   $195 = ((($194)) + 4|0);
   $1 = $195;
   $196 = HEAP32[$194>>2]|0;
   $197 = (($196) + ($193))|0;
   HEAP32[$194>>2] = $197;
   $198 = $0;
   $199 = ((($198)) + 108|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + -1)|0;
   HEAP32[$199>>2] = $201;
  } else {
   $202 = $sr;
   $203 = $1;
   $204 = ((($203)) + 4|0);
   $1 = $204;
   $205 = HEAP32[$203>>2]|0;
   $206 = (($205) + ($202))|0;
   HEAP32[$203>>2] = $206;
   $207 = $sl;
   $208 = $1;
   $209 = ((($208)) + 4|0);
   $1 = $209;
   $210 = HEAP32[$208>>2]|0;
   $211 = (($210) + ($207))|0;
   HEAP32[$208>>2] = $211;
  }
  $212 = $5;
  $213 = $frac;
  $214 = (($213) + ($212))|0;
  $frac = $214;
  $215 = $frac;
  $216 = $215 >> 16;
  $217 = $pos;
  $218 = (($217) + ($216))|0;
  $pos = $218;
  $219 = $frac;
  $220 = $219 & 65535;
  $frac = $220;
 }
 $221 = $fl1;
 $222 = $0;
 $223 = ((($222)) + 72|0);
 $224 = ((($223)) + 8|0);
 HEAP32[$224>>2] = $221;
 $225 = $fl2;
 $226 = $0;
 $227 = ((($226)) + 72|0);
 $228 = ((($227)) + 12|0);
 HEAP32[$228>>2] = $225;
 $229 = $fr1;
 $230 = $0;
 $231 = ((($230)) + 72|0);
 HEAP32[$231>>2] = $229;
 $232 = $fr2;
 $233 = $0;
 $234 = ((($233)) + 72|0);
 $235 = ((($234)) + 4|0);
 HEAP32[$235>>2] = $232;
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $a = 0, $a0 = 0, $b0 = 0, $b1 = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 $60 = $3;
 $61 = $60 >> 8;
 $3 = $61;
 $62 = $4;
 $63 = $62 >> 8;
 $4 = $63;
 while(1) {
  $64 = $2;
  $65 = (($64) + -1)|0;
  $2 = $65;
  $66 = ($64|0)!=(0);
  if (!($66)) {
   break;
  }
  $67 = $pos;
  $68 = $sptr;
  $69 = (($68) + ($67<<1)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $smp_l1 = $71;
  $72 = $pos;
  $73 = (($72) + 1)|0;
  $74 = $sptr;
  $75 = (($74) + ($73<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = $smp_l1;
  $79 = (($77) - ($78))|0;
  $smp_dt = $79;
  $80 = $smp_l1;
  $81 = $frac;
  $82 = $smp_dt;
  $83 = Math_imul($81, $82)|0;
  $84 = $83 >> 16;
  $85 = (($80) + ($84))|0;
  $smp_in = $85;
  $86 = $a0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + 4)|0;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = $smp_in;
  $93 = ($92|0)<(0);
  $94 = $93 << 31 >> 31;
  $95 = (___muldi3(($88|0),($91|0),($92|0),($94|0))|0);
  $96 = tempRet0;
  $97 = $4;
  $98 = ($97|0)<(0);
  $99 = $98 << 31 >> 31;
  $100 = (___muldi3(($95|0),($96|0),($97|0),($99|0))|0);
  $101 = tempRet0;
  $102 = $b0;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($102) + 4)|0;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = $fr1;
  $109 = ($108|0)<(0);
  $110 = $109 << 31 >> 31;
  $111 = (___muldi3(($104|0),($107|0),($108|0),($110|0))|0);
  $112 = tempRet0;
  $113 = (_i64Add(($100|0),($101|0),($111|0),($112|0))|0);
  $114 = tempRet0;
  $115 = $b1;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  $118 = (($115) + 4)|0;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = $fr2;
  $122 = ($121|0)<(0);
  $123 = $122 << 31 >> 31;
  $124 = (___muldi3(($117|0),($120|0),($121|0),($123|0))|0);
  $125 = tempRet0;
  $126 = (_i64Add(($113|0),($114|0),($124|0),($125|0))|0);
  $127 = tempRet0;
  $128 = (_bitshift64Ashr(($126|0),($127|0),16)|0);
  $129 = tempRet0;
  $sr = $128;
  $130 = $fr1;
  $fr2 = $130;
  $131 = $sr;
  $fr1 = $131;
  $132 = $a0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($132) + 4)|0;
  $136 = $135;
  $137 = HEAP32[$136>>2]|0;
  $138 = $smp_in;
  $139 = ($138|0)<(0);
  $140 = $139 << 31 >> 31;
  $141 = (___muldi3(($134|0),($137|0),($138|0),($140|0))|0);
  $142 = tempRet0;
  $143 = $3;
  $144 = ($143|0)<(0);
  $145 = $144 << 31 >> 31;
  $146 = (___muldi3(($141|0),($142|0),($143|0),($145|0))|0);
  $147 = tempRet0;
  $148 = $b0;
  $149 = $148;
  $150 = HEAP32[$149>>2]|0;
  $151 = (($148) + 4)|0;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = $fl1;
  $155 = ($154|0)<(0);
  $156 = $155 << 31 >> 31;
  $157 = (___muldi3(($150|0),($153|0),($154|0),($156|0))|0);
  $158 = tempRet0;
  $159 = (_i64Add(($146|0),($147|0),($157|0),($158|0))|0);
  $160 = tempRet0;
  $161 = $b1;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = (($161) + 4)|0;
  $165 = $164;
  $166 = HEAP32[$165>>2]|0;
  $167 = $fl2;
  $168 = ($167|0)<(0);
  $169 = $168 << 31 >> 31;
  $170 = (___muldi3(($163|0),($166|0),($167|0),($169|0))|0);
  $171 = tempRet0;
  $172 = (_i64Add(($159|0),($160|0),($170|0),($171|0))|0);
  $173 = tempRet0;
  $174 = (_bitshift64Ashr(($172|0),($173|0),16)|0);
  $175 = tempRet0;
  $sl = $174;
  $176 = $fl1;
  $fl2 = $176;
  $177 = $sl;
  $fl1 = $177;
  $178 = $0;
  $179 = ((($178)) + 108|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ($180|0)!=(0);
  if ($181) {
   $182 = $0;
   $183 = ((($182)) + 108|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (16 - ($184))|0;
   $a = $185;
   $186 = $sr;
   $187 = $a;
   $188 = Math_imul($186, $187)|0;
   $189 = $188 >> 4;
   $190 = $1;
   $191 = ((($190)) + 4|0);
   $1 = $191;
   $192 = HEAP32[$190>>2]|0;
   $193 = (($192) + ($189))|0;
   HEAP32[$190>>2] = $193;
   $194 = $sl;
   $195 = $a;
   $196 = Math_imul($194, $195)|0;
   $197 = $196 >> 4;
   $198 = $1;
   $199 = ((($198)) + 4|0);
   $1 = $199;
   $200 = HEAP32[$198>>2]|0;
   $201 = (($200) + ($197))|0;
   HEAP32[$198>>2] = $201;
   $202 = $0;
   $203 = ((($202)) + 108|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($204) + -1)|0;
   HEAP32[$203>>2] = $205;
  } else {
   $206 = $sr;
   $207 = $1;
   $208 = ((($207)) + 4|0);
   $1 = $208;
   $209 = HEAP32[$207>>2]|0;
   $210 = (($209) + ($206))|0;
   HEAP32[$207>>2] = $210;
   $211 = $sl;
   $212 = $1;
   $213 = ((($212)) + 4|0);
   $1 = $213;
   $214 = HEAP32[$212>>2]|0;
   $215 = (($214) + ($211))|0;
   HEAP32[$212>>2] = $215;
  }
  $216 = $5;
  $217 = $frac;
  $218 = (($217) + ($216))|0;
  $frac = $218;
  $219 = $frac;
  $220 = $219 >> 16;
  $221 = $pos;
  $222 = (($221) + ($220))|0;
  $pos = $222;
  $223 = $frac;
  $224 = $223 & 65535;
  $frac = $224;
 }
 $225 = $fl1;
 $226 = $0;
 $227 = ((($226)) + 72|0);
 $228 = ((($227)) + 8|0);
 HEAP32[$228>>2] = $225;
 $229 = $fl2;
 $230 = $0;
 $231 = ((($230)) + 72|0);
 $232 = ((($231)) + 12|0);
 HEAP32[$232>>2] = $229;
 $233 = $fr1;
 $234 = $0;
 $235 = ((($234)) + 72|0);
 HEAP32[$235>>2] = $233;
 $236 = $fr2;
 $237 = $0;
 $238 = ((($237)) + 72|0);
 $239 = ((($238)) + 4|0);
 HEAP32[$239>>2] = $236;
 STACKTOP = sp;return;
}
function _smix_mono_8bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $fl1 = 0, $fl2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 while(1) {
  $53 = $2;
  $54 = (($53) + -1)|0;
  $2 = $54;
  $55 = ($53|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $pos;
  $57 = $sptr;
  $58 = (($57) + ($56)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 << 24 >> 24;
  $smp_l1 = $60;
  $61 = $pos;
  $62 = (($61) + 1)|0;
  $63 = $sptr;
  $64 = (($63) + ($62)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = $smp_l1;
  $68 = (($66) - ($67))|0;
  $smp_dt = $68;
  $69 = $smp_l1;
  $70 = $frac;
  $71 = $smp_dt;
  $72 = Math_imul($70, $71)|0;
  $73 = $72 >> 16;
  $74 = (($69) + ($73))|0;
  $smp_in = $74;
  $75 = $a0;
  $76 = $75;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + 4)|0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = $smp_in;
  $82 = ($81|0)<(0);
  $83 = $82 << 31 >> 31;
  $84 = (___muldi3(($77|0),($80|0),($81|0),($83|0))|0);
  $85 = tempRet0;
  $86 = $3;
  $87 = ($86|0)<(0);
  $88 = $87 << 31 >> 31;
  $89 = (___muldi3(($84|0),($85|0),($86|0),($88|0))|0);
  $90 = tempRet0;
  $91 = $b0;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = $fl1;
  $98 = ($97|0)<(0);
  $99 = $98 << 31 >> 31;
  $100 = (___muldi3(($93|0),($96|0),($97|0),($99|0))|0);
  $101 = tempRet0;
  $102 = (_i64Add(($89|0),($90|0),($100|0),($101|0))|0);
  $103 = tempRet0;
  $104 = $b1;
  $105 = $104;
  $106 = HEAP32[$105>>2]|0;
  $107 = (($104) + 4)|0;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = $fl2;
  $111 = ($110|0)<(0);
  $112 = $111 << 31 >> 31;
  $113 = (___muldi3(($106|0),($109|0),($110|0),($112|0))|0);
  $114 = tempRet0;
  $115 = (_i64Add(($102|0),($103|0),($113|0),($114|0))|0);
  $116 = tempRet0;
  $117 = (_bitshift64Ashr(($115|0),($116|0),16)|0);
  $118 = tempRet0;
  $sl = $117;
  $119 = $fl1;
  $fl2 = $119;
  $120 = $sl;
  $fl1 = $120;
  $121 = $0;
  $122 = ((($121)) + 108|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)!=(0);
  $125 = $sl;
  if ($124) {
   $126 = $0;
   $127 = ((($126)) + 108|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (16 - ($128))|0;
   $130 = Math_imul($125, $129)|0;
   $131 = $130 >> 4;
   $132 = $1;
   $133 = ((($132)) + 4|0);
   $1 = $133;
   $134 = HEAP32[$132>>2]|0;
   $135 = (($134) + ($131))|0;
   HEAP32[$132>>2] = $135;
   $136 = $0;
   $137 = ((($136)) + 108|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + -1)|0;
   HEAP32[$137>>2] = $139;
  } else {
   $140 = $1;
   $141 = ((($140)) + 4|0);
   $1 = $141;
   $142 = HEAP32[$140>>2]|0;
   $143 = (($142) + ($125))|0;
   HEAP32[$140>>2] = $143;
  }
  $144 = $5;
  $145 = $frac;
  $146 = (($145) + ($144))|0;
  $frac = $146;
  $147 = $frac;
  $148 = $147 >> 16;
  $149 = $pos;
  $150 = (($149) + ($148))|0;
  $pos = $150;
  $151 = $frac;
  $152 = $151 & 65535;
  $frac = $152;
 }
 $153 = $fl1;
 $154 = $0;
 $155 = ((($154)) + 72|0);
 $156 = ((($155)) + 8|0);
 HEAP32[$156>>2] = $153;
 $157 = $fl2;
 $158 = $0;
 $159 = ((($158)) + 72|0);
 $160 = ((($159)) + 12|0);
 HEAP32[$160>>2] = $157;
 STACKTOP = sp;return;
}
function _smix_mono_16bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $fl1 = 0, $fl2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $3;
 $54 = $53 >> 8;
 $3 = $54;
 while(1) {
  $55 = $2;
  $56 = (($55) + -1)|0;
  $2 = $56;
  $57 = ($55|0)!=(0);
  if (!($57)) {
   break;
  }
  $58 = $pos;
  $59 = $sptr;
  $60 = (($59) + ($58<<1)|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $smp_l1 = $62;
  $63 = $pos;
  $64 = (($63) + 1)|0;
  $65 = $sptr;
  $66 = (($65) + ($64<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = $smp_l1;
  $70 = (($68) - ($69))|0;
  $smp_dt = $70;
  $71 = $smp_l1;
  $72 = $frac;
  $73 = $smp_dt;
  $74 = Math_imul($72, $73)|0;
  $75 = $74 >> 16;
  $76 = (($71) + ($75))|0;
  $smp_in = $76;
  $77 = $a0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = $smp_in;
  $84 = ($83|0)<(0);
  $85 = $84 << 31 >> 31;
  $86 = (___muldi3(($79|0),($82|0),($83|0),($85|0))|0);
  $87 = tempRet0;
  $88 = $3;
  $89 = ($88|0)<(0);
  $90 = $89 << 31 >> 31;
  $91 = (___muldi3(($86|0),($87|0),($88|0),($90|0))|0);
  $92 = tempRet0;
  $93 = $b0;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $fl1;
  $100 = ($99|0)<(0);
  $101 = $100 << 31 >> 31;
  $102 = (___muldi3(($95|0),($98|0),($99|0),($101|0))|0);
  $103 = tempRet0;
  $104 = (_i64Add(($91|0),($92|0),($102|0),($103|0))|0);
  $105 = tempRet0;
  $106 = $b1;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($106) + 4)|0;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = $fl2;
  $113 = ($112|0)<(0);
  $114 = $113 << 31 >> 31;
  $115 = (___muldi3(($108|0),($111|0),($112|0),($114|0))|0);
  $116 = tempRet0;
  $117 = (_i64Add(($104|0),($105|0),($115|0),($116|0))|0);
  $118 = tempRet0;
  $119 = (_bitshift64Ashr(($117|0),($118|0),16)|0);
  $120 = tempRet0;
  $sl = $119;
  $121 = $fl1;
  $fl2 = $121;
  $122 = $sl;
  $fl1 = $122;
  $123 = $0;
  $124 = ((($123)) + 108|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)!=(0);
  $127 = $sl;
  if ($126) {
   $128 = $0;
   $129 = ((($128)) + 108|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (16 - ($130))|0;
   $132 = Math_imul($127, $131)|0;
   $133 = $132 >> 4;
   $134 = $1;
   $135 = ((($134)) + 4|0);
   $1 = $135;
   $136 = HEAP32[$134>>2]|0;
   $137 = (($136) + ($133))|0;
   HEAP32[$134>>2] = $137;
   $138 = $0;
   $139 = ((($138)) + 108|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + -1)|0;
   HEAP32[$139>>2] = $141;
  } else {
   $142 = $1;
   $143 = ((($142)) + 4|0);
   $1 = $143;
   $144 = HEAP32[$142>>2]|0;
   $145 = (($144) + ($127))|0;
   HEAP32[$142>>2] = $145;
  }
  $146 = $5;
  $147 = $frac;
  $148 = (($147) + ($146))|0;
  $frac = $148;
  $149 = $frac;
  $150 = $149 >> 16;
  $151 = $pos;
  $152 = (($151) + ($150))|0;
  $pos = $152;
  $153 = $frac;
  $154 = $153 & 65535;
  $frac = $154;
 }
 $155 = $fl1;
 $156 = $0;
 $157 = ((($156)) + 72|0);
 $158 = ((($157)) + 8|0);
 HEAP32[$158>>2] = $155;
 $159 = $fl2;
 $160 = $0;
 $161 = ((($160)) + 72|0);
 $162 = ((($161)) + 12|0);
 HEAP32[$162>>2] = $159;
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $frac;
  $19 = $18 >> 6;
  $f = $19;
  $20 = $f;
  $21 = (15216 + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $pos;
  $25 = (($24) - 1)|0;
  $26 = $sptr;
  $27 = (($26) + ($25)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = Math_imul($23, $29)|0;
  $31 = $f;
  $32 = (17264 + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $pos;
  $36 = $sptr;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = Math_imul($34, $39)|0;
  $41 = (($30) + ($40))|0;
  $42 = $f;
  $43 = (19312 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = $pos;
  $47 = (($46) + 2)|0;
  $48 = $sptr;
  $49 = (($48) + ($47)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = Math_imul($45, $51)|0;
  $53 = (($41) + ($52))|0;
  $54 = $f;
  $55 = (21360 + ($54<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $pos;
  $59 = (($58) + 1)|0;
  $60 = $sptr;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = Math_imul($57, $63)|0;
  $65 = (($53) + ($64))|0;
  $66 = $65 >> 14;
  $smp_in = $66;
  $67 = $0;
  $68 = ((($67)) + 108|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $0;
   $72 = ((($71)) + 108|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (16 - ($73))|0;
   $a = $74;
   $75 = $smp_in;
   $76 = $4;
   $77 = Math_imul($75, $76)|0;
   $78 = $a;
   $79 = Math_imul($77, $78)|0;
   $80 = $79 >> 4;
   $81 = $1;
   $82 = ((($81)) + 4|0);
   $1 = $82;
   $83 = HEAP32[$81>>2]|0;
   $84 = (($83) + ($80))|0;
   HEAP32[$81>>2] = $84;
   $85 = $smp_in;
   $86 = $3;
   $87 = Math_imul($85, $86)|0;
   $88 = $a;
   $89 = Math_imul($87, $88)|0;
   $90 = $89 >> 4;
   $91 = $1;
   $92 = ((($91)) + 4|0);
   $1 = $92;
   $93 = HEAP32[$91>>2]|0;
   $94 = (($93) + ($90))|0;
   HEAP32[$91>>2] = $94;
   $95 = $0;
   $96 = ((($95)) + 108|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + -1)|0;
   HEAP32[$96>>2] = $98;
  } else {
   $99 = $smp_in;
   $100 = $4;
   $101 = Math_imul($99, $100)|0;
   $102 = $1;
   $103 = ((($102)) + 4|0);
   $1 = $103;
   $104 = HEAP32[$102>>2]|0;
   $105 = (($104) + ($101))|0;
   HEAP32[$102>>2] = $105;
   $106 = $smp_in;
   $107 = $3;
   $108 = Math_imul($106, $107)|0;
   $109 = $1;
   $110 = ((($109)) + 4|0);
   $1 = $110;
   $111 = HEAP32[$109>>2]|0;
   $112 = (($111) + ($108))|0;
   HEAP32[$109>>2] = $112;
  }
  $113 = $5;
  $114 = $frac;
  $115 = (($114) + ($113))|0;
  $frac = $115;
  $116 = $frac;
  $117 = $116 >> 16;
  $118 = $pos;
  $119 = (($118) + ($117))|0;
  $pos = $119;
  $120 = $frac;
  $121 = $120 & 65535;
  $frac = $121;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 $17 = $4;
 $18 = $17 >> 8;
 $4 = $18;
 while(1) {
  $19 = $2;
  $20 = (($19) + -1)|0;
  $2 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $frac;
  $23 = $22 >> 6;
  $f = $23;
  $24 = $f;
  $25 = (15216 + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $pos;
  $29 = (($28) - 1)|0;
  $30 = $sptr;
  $31 = (($30) + ($29<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = Math_imul($27, $33)|0;
  $35 = $f;
  $36 = (17264 + ($35<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = $pos;
  $40 = $sptr;
  $41 = (($40) + ($39<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = Math_imul($38, $43)|0;
  $45 = (($34) + ($44))|0;
  $46 = $f;
  $47 = (19312 + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = $pos;
  $51 = (($50) + 2)|0;
  $52 = $sptr;
  $53 = (($52) + ($51<<1)|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = Math_imul($49, $55)|0;
  $57 = (($45) + ($56))|0;
  $58 = $f;
  $59 = (21360 + ($58<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $pos;
  $63 = (($62) + 1)|0;
  $64 = $sptr;
  $65 = (($64) + ($63<<1)|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = Math_imul($61, $67)|0;
  $69 = (($57) + ($68))|0;
  $70 = $69 >> 14;
  $smp_in = $70;
  $71 = $0;
  $72 = ((($71)) + 108|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $0;
   $76 = ((($75)) + 108|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (16 - ($77))|0;
   $a = $78;
   $79 = $smp_in;
   $80 = $4;
   $81 = Math_imul($79, $80)|0;
   $82 = $a;
   $83 = Math_imul($81, $82)|0;
   $84 = $83 >> 4;
   $85 = $1;
   $86 = ((($85)) + 4|0);
   $1 = $86;
   $87 = HEAP32[$85>>2]|0;
   $88 = (($87) + ($84))|0;
   HEAP32[$85>>2] = $88;
   $89 = $smp_in;
   $90 = $3;
   $91 = Math_imul($89, $90)|0;
   $92 = $a;
   $93 = Math_imul($91, $92)|0;
   $94 = $93 >> 4;
   $95 = $1;
   $96 = ((($95)) + 4|0);
   $1 = $96;
   $97 = HEAP32[$95>>2]|0;
   $98 = (($97) + ($94))|0;
   HEAP32[$95>>2] = $98;
   $99 = $0;
   $100 = ((($99)) + 108|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101) + -1)|0;
   HEAP32[$100>>2] = $102;
  } else {
   $103 = $smp_in;
   $104 = $4;
   $105 = Math_imul($103, $104)|0;
   $106 = $1;
   $107 = ((($106)) + 4|0);
   $1 = $107;
   $108 = HEAP32[$106>>2]|0;
   $109 = (($108) + ($105))|0;
   HEAP32[$106>>2] = $109;
   $110 = $smp_in;
   $111 = $3;
   $112 = Math_imul($110, $111)|0;
   $113 = $1;
   $114 = ((($113)) + 4|0);
   $1 = $114;
   $115 = HEAP32[$113>>2]|0;
   $116 = (($115) + ($112))|0;
   HEAP32[$113>>2] = $116;
  }
  $117 = $5;
  $118 = $frac;
  $119 = (($118) + ($117))|0;
  $frac = $119;
  $120 = $frac;
  $121 = $120 >> 16;
  $122 = $pos;
  $123 = (($122) + ($121))|0;
  $pos = $123;
  $124 = $frac;
  $125 = $124 & 65535;
  $frac = $125;
 }
 STACKTOP = sp;return;
}
function _smix_mono_8bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $frac;
  $19 = $18 >> 6;
  $f = $19;
  $20 = $f;
  $21 = (15216 + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $pos;
  $25 = (($24) - 1)|0;
  $26 = $sptr;
  $27 = (($26) + ($25)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = Math_imul($23, $29)|0;
  $31 = $f;
  $32 = (17264 + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $pos;
  $36 = $sptr;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = Math_imul($34, $39)|0;
  $41 = (($30) + ($40))|0;
  $42 = $f;
  $43 = (19312 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = $pos;
  $47 = (($46) + 2)|0;
  $48 = $sptr;
  $49 = (($48) + ($47)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = Math_imul($45, $51)|0;
  $53 = (($41) + ($52))|0;
  $54 = $f;
  $55 = (21360 + ($54<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $pos;
  $59 = (($58) + 1)|0;
  $60 = $sptr;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = Math_imul($57, $63)|0;
  $65 = (($53) + ($64))|0;
  $66 = $65 >> 14;
  $smp_in = $66;
  $67 = $0;
  $68 = ((($67)) + 108|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  $71 = $smp_in;
  $72 = $3;
  $73 = Math_imul($71, $72)|0;
  if ($70) {
   $74 = $0;
   $75 = ((($74)) + 108|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (16 - ($76))|0;
   $78 = Math_imul($73, $77)|0;
   $79 = $78 >> 4;
   $80 = $1;
   $81 = ((($80)) + 4|0);
   $1 = $81;
   $82 = HEAP32[$80>>2]|0;
   $83 = (($82) + ($79))|0;
   HEAP32[$80>>2] = $83;
   $84 = $0;
   $85 = ((($84)) + 108|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + -1)|0;
   HEAP32[$85>>2] = $87;
  } else {
   $88 = $1;
   $89 = ((($88)) + 4|0);
   $1 = $89;
   $90 = HEAP32[$88>>2]|0;
   $91 = (($90) + ($73))|0;
   HEAP32[$88>>2] = $91;
  }
  $92 = $5;
  $93 = $frac;
  $94 = (($93) + ($92))|0;
  $frac = $94;
  $95 = $frac;
  $96 = $95 >> 16;
  $97 = $pos;
  $98 = (($97) + ($96))|0;
  $pos = $98;
  $99 = $frac;
  $100 = $99 & 65535;
  $frac = $100;
 }
 STACKTOP = sp;return;
}
function _smix_mono_16bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 while(1) {
  $17 = $2;
  $18 = (($17) + -1)|0;
  $2 = $18;
  $19 = ($17|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $frac;
  $21 = $20 >> 6;
  $f = $21;
  $22 = $f;
  $23 = (15216 + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $pos;
  $27 = (($26) - 1)|0;
  $28 = $sptr;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = Math_imul($25, $31)|0;
  $33 = $f;
  $34 = (17264 + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $pos;
  $38 = $sptr;
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = Math_imul($36, $41)|0;
  $43 = (($32) + ($42))|0;
  $44 = $f;
  $45 = (19312 + ($44<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = $pos;
  $49 = (($48) + 2)|0;
  $50 = $sptr;
  $51 = (($50) + ($49<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = Math_imul($47, $53)|0;
  $55 = (($43) + ($54))|0;
  $56 = $f;
  $57 = (21360 + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = $pos;
  $61 = (($60) + 1)|0;
  $62 = $sptr;
  $63 = (($62) + ($61<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = Math_imul($59, $65)|0;
  $67 = (($55) + ($66))|0;
  $68 = $67 >> 14;
  $smp_in = $68;
  $69 = $0;
  $70 = ((($69)) + 108|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)!=(0);
  $73 = $smp_in;
  $74 = $3;
  $75 = Math_imul($73, $74)|0;
  if ($72) {
   $76 = $0;
   $77 = ((($76)) + 108|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (16 - ($78))|0;
   $80 = Math_imul($75, $79)|0;
   $81 = $80 >> 4;
   $82 = $1;
   $83 = ((($82)) + 4|0);
   $1 = $83;
   $84 = HEAP32[$82>>2]|0;
   $85 = (($84) + ($81))|0;
   HEAP32[$82>>2] = $85;
   $86 = $0;
   $87 = ((($86)) + 108|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + -1)|0;
   HEAP32[$87>>2] = $89;
  } else {
   $90 = $1;
   $91 = ((($90)) + 4|0);
   $1 = $91;
   $92 = HEAP32[$90>>2]|0;
   $93 = (($92) + ($75))|0;
   HEAP32[$90>>2] = $93;
  }
  $94 = $5;
  $95 = $frac;
  $96 = (($95) + ($94))|0;
  $frac = $96;
  $97 = $frac;
  $98 = $97 >> 16;
  $99 = $pos;
  $100 = (($99) + ($98))|0;
  $pos = $100;
  $101 = $frac;
  $102 = $101 & 65535;
  $frac = $102;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_in = 0, $sptr = 0;
 var $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 while(1) {
  $60 = $2;
  $61 = (($60) + -1)|0;
  $2 = $61;
  $62 = ($60|0)!=(0);
  if (!($62)) {
   break;
  }
  $63 = $frac;
  $64 = $63 >> 6;
  $f = $64;
  $65 = $f;
  $66 = (15216 + ($65<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = $pos;
  $70 = (($69) - 1)|0;
  $71 = $sptr;
  $72 = (($71) + ($70)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = Math_imul($68, $74)|0;
  $76 = $f;
  $77 = (17264 + ($76<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $pos;
  $81 = $sptr;
  $82 = (($81) + ($80)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = Math_imul($79, $84)|0;
  $86 = (($75) + ($85))|0;
  $87 = $f;
  $88 = (19312 + ($87<<1)|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = $pos;
  $92 = (($91) + 2)|0;
  $93 = $sptr;
  $94 = (($93) + ($92)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95 << 24 >> 24;
  $97 = Math_imul($90, $96)|0;
  $98 = (($86) + ($97))|0;
  $99 = $f;
  $100 = (21360 + ($99<<1)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = $pos;
  $104 = (($103) + 1)|0;
  $105 = $sptr;
  $106 = (($105) + ($104)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107 << 24 >> 24;
  $109 = Math_imul($102, $108)|0;
  $110 = (($98) + ($109))|0;
  $111 = $110 >> 14;
  $smp_in = $111;
  $112 = $a0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  $118 = $smp_in;
  $119 = ($118|0)<(0);
  $120 = $119 << 31 >> 31;
  $121 = (___muldi3(($114|0),($117|0),($118|0),($120|0))|0);
  $122 = tempRet0;
  $123 = $4;
  $124 = ($123|0)<(0);
  $125 = $124 << 31 >> 31;
  $126 = (___muldi3(($121|0),($122|0),($123|0),($125|0))|0);
  $127 = tempRet0;
  $128 = $b0;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = $fr1;
  $135 = ($134|0)<(0);
  $136 = $135 << 31 >> 31;
  $137 = (___muldi3(($130|0),($133|0),($134|0),($136|0))|0);
  $138 = tempRet0;
  $139 = (_i64Add(($126|0),($127|0),($137|0),($138|0))|0);
  $140 = tempRet0;
  $141 = $b1;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = $fr2;
  $148 = ($147|0)<(0);
  $149 = $148 << 31 >> 31;
  $150 = (___muldi3(($143|0),($146|0),($147|0),($149|0))|0);
  $151 = tempRet0;
  $152 = (_i64Add(($139|0),($140|0),($150|0),($151|0))|0);
  $153 = tempRet0;
  $154 = (_bitshift64Ashr(($152|0),($153|0),16)|0);
  $155 = tempRet0;
  $sr = $154;
  $156 = $fr1;
  $fr2 = $156;
  $157 = $sr;
  $fr1 = $157;
  $158 = $a0;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = $smp_in;
  $165 = ($164|0)<(0);
  $166 = $165 << 31 >> 31;
  $167 = (___muldi3(($160|0),($163|0),($164|0),($166|0))|0);
  $168 = tempRet0;
  $169 = $3;
  $170 = ($169|0)<(0);
  $171 = $170 << 31 >> 31;
  $172 = (___muldi3(($167|0),($168|0),($169|0),($171|0))|0);
  $173 = tempRet0;
  $174 = $b0;
  $175 = $174;
  $176 = HEAP32[$175>>2]|0;
  $177 = (($174) + 4)|0;
  $178 = $177;
  $179 = HEAP32[$178>>2]|0;
  $180 = $fl1;
  $181 = ($180|0)<(0);
  $182 = $181 << 31 >> 31;
  $183 = (___muldi3(($176|0),($179|0),($180|0),($182|0))|0);
  $184 = tempRet0;
  $185 = (_i64Add(($172|0),($173|0),($183|0),($184|0))|0);
  $186 = tempRet0;
  $187 = $b1;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = (($187) + 4)|0;
  $191 = $190;
  $192 = HEAP32[$191>>2]|0;
  $193 = $fl2;
  $194 = ($193|0)<(0);
  $195 = $194 << 31 >> 31;
  $196 = (___muldi3(($189|0),($192|0),($193|0),($195|0))|0);
  $197 = tempRet0;
  $198 = (_i64Add(($185|0),($186|0),($196|0),($197|0))|0);
  $199 = tempRet0;
  $200 = (_bitshift64Ashr(($198|0),($199|0),16)|0);
  $201 = tempRet0;
  $sl = $200;
  $202 = $fl1;
  $fl2 = $202;
  $203 = $sl;
  $fl1 = $203;
  $204 = $0;
  $205 = ((($204)) + 108|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($206|0)!=(0);
  if ($207) {
   $208 = $0;
   $209 = ((($208)) + 108|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (16 - ($210))|0;
   $a = $211;
   $212 = $sr;
   $213 = $a;
   $214 = Math_imul($212, $213)|0;
   $215 = $214 >> 4;
   $216 = $1;
   $217 = ((($216)) + 4|0);
   $1 = $217;
   $218 = HEAP32[$216>>2]|0;
   $219 = (($218) + ($215))|0;
   HEAP32[$216>>2] = $219;
   $220 = $sl;
   $221 = $a;
   $222 = Math_imul($220, $221)|0;
   $223 = $222 >> 4;
   $224 = $1;
   $225 = ((($224)) + 4|0);
   $1 = $225;
   $226 = HEAP32[$224>>2]|0;
   $227 = (($226) + ($223))|0;
   HEAP32[$224>>2] = $227;
   $228 = $0;
   $229 = ((($228)) + 108|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + -1)|0;
   HEAP32[$229>>2] = $231;
  } else {
   $232 = $sr;
   $233 = $1;
   $234 = ((($233)) + 4|0);
   $1 = $234;
   $235 = HEAP32[$233>>2]|0;
   $236 = (($235) + ($232))|0;
   HEAP32[$233>>2] = $236;
   $237 = $sl;
   $238 = $1;
   $239 = ((($238)) + 4|0);
   $1 = $239;
   $240 = HEAP32[$238>>2]|0;
   $241 = (($240) + ($237))|0;
   HEAP32[$238>>2] = $241;
  }
  $242 = $5;
  $243 = $frac;
  $244 = (($243) + ($242))|0;
  $frac = $244;
  $245 = $frac;
  $246 = $245 >> 16;
  $247 = $pos;
  $248 = (($247) + ($246))|0;
  $pos = $248;
  $249 = $frac;
  $250 = $249 & 65535;
  $frac = $250;
 }
 $251 = $fl1;
 $252 = $0;
 $253 = ((($252)) + 72|0);
 $254 = ((($253)) + 8|0);
 HEAP32[$254>>2] = $251;
 $255 = $fl2;
 $256 = $0;
 $257 = ((($256)) + 72|0);
 $258 = ((($257)) + 12|0);
 HEAP32[$258>>2] = $255;
 $259 = $fr1;
 $260 = $0;
 $261 = ((($260)) + 72|0);
 HEAP32[$261>>2] = $259;
 $262 = $fr2;
 $263 = $0;
 $264 = ((($263)) + 72|0);
 $265 = ((($264)) + 4|0);
 HEAP32[$265>>2] = $262;
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0;
 var $pos = 0, $sl = 0, $smp_in = 0, $sptr = 0, $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 $60 = $3;
 $61 = $60 >> 8;
 $3 = $61;
 $62 = $4;
 $63 = $62 >> 8;
 $4 = $63;
 while(1) {
  $64 = $2;
  $65 = (($64) + -1)|0;
  $2 = $65;
  $66 = ($64|0)!=(0);
  if (!($66)) {
   break;
  }
  $67 = $frac;
  $68 = $67 >> 6;
  $f = $68;
  $69 = $f;
  $70 = (15216 + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $pos;
  $74 = (($73) - 1)|0;
  $75 = $sptr;
  $76 = (($75) + ($74<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77 << 16 >> 16;
  $79 = Math_imul($72, $78)|0;
  $80 = $f;
  $81 = (17264 + ($80<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = $pos;
  $85 = $sptr;
  $86 = (($85) + ($84<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = Math_imul($83, $88)|0;
  $90 = (($79) + ($89))|0;
  $91 = $f;
  $92 = (19312 + ($91<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93 << 16 >> 16;
  $95 = $pos;
  $96 = (($95) + 2)|0;
  $97 = $sptr;
  $98 = (($97) + ($96<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99 << 16 >> 16;
  $101 = Math_imul($94, $100)|0;
  $102 = (($90) + ($101))|0;
  $103 = $f;
  $104 = (21360 + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = $pos;
  $108 = (($107) + 1)|0;
  $109 = $sptr;
  $110 = (($109) + ($108<<1)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = Math_imul($106, $112)|0;
  $114 = (($102) + ($113))|0;
  $115 = $114 >> 14;
  $smp_in = $115;
  $116 = $a0;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($116) + 4)|0;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = $smp_in;
  $123 = ($122|0)<(0);
  $124 = $123 << 31 >> 31;
  $125 = (___muldi3(($118|0),($121|0),($122|0),($124|0))|0);
  $126 = tempRet0;
  $127 = $4;
  $128 = ($127|0)<(0);
  $129 = $128 << 31 >> 31;
  $130 = (___muldi3(($125|0),($126|0),($127|0),($129|0))|0);
  $131 = tempRet0;
  $132 = $b0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($132) + 4)|0;
  $136 = $135;
  $137 = HEAP32[$136>>2]|0;
  $138 = $fr1;
  $139 = ($138|0)<(0);
  $140 = $139 << 31 >> 31;
  $141 = (___muldi3(($134|0),($137|0),($138|0),($140|0))|0);
  $142 = tempRet0;
  $143 = (_i64Add(($130|0),($131|0),($141|0),($142|0))|0);
  $144 = tempRet0;
  $145 = $b1;
  $146 = $145;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + 4)|0;
  $149 = $148;
  $150 = HEAP32[$149>>2]|0;
  $151 = $fr2;
  $152 = ($151|0)<(0);
  $153 = $152 << 31 >> 31;
  $154 = (___muldi3(($147|0),($150|0),($151|0),($153|0))|0);
  $155 = tempRet0;
  $156 = (_i64Add(($143|0),($144|0),($154|0),($155|0))|0);
  $157 = tempRet0;
  $158 = (_bitshift64Ashr(($156|0),($157|0),16)|0);
  $159 = tempRet0;
  $sr = $158;
  $160 = $fr1;
  $fr2 = $160;
  $161 = $sr;
  $fr1 = $161;
  $162 = $a0;
  $163 = $162;
  $164 = HEAP32[$163>>2]|0;
  $165 = (($162) + 4)|0;
  $166 = $165;
  $167 = HEAP32[$166>>2]|0;
  $168 = $smp_in;
  $169 = ($168|0)<(0);
  $170 = $169 << 31 >> 31;
  $171 = (___muldi3(($164|0),($167|0),($168|0),($170|0))|0);
  $172 = tempRet0;
  $173 = $3;
  $174 = ($173|0)<(0);
  $175 = $174 << 31 >> 31;
  $176 = (___muldi3(($171|0),($172|0),($173|0),($175|0))|0);
  $177 = tempRet0;
  $178 = $b0;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = (($178) + 4)|0;
  $182 = $181;
  $183 = HEAP32[$182>>2]|0;
  $184 = $fl1;
  $185 = ($184|0)<(0);
  $186 = $185 << 31 >> 31;
  $187 = (___muldi3(($180|0),($183|0),($184|0),($186|0))|0);
  $188 = tempRet0;
  $189 = (_i64Add(($176|0),($177|0),($187|0),($188|0))|0);
  $190 = tempRet0;
  $191 = $b1;
  $192 = $191;
  $193 = HEAP32[$192>>2]|0;
  $194 = (($191) + 4)|0;
  $195 = $194;
  $196 = HEAP32[$195>>2]|0;
  $197 = $fl2;
  $198 = ($197|0)<(0);
  $199 = $198 << 31 >> 31;
  $200 = (___muldi3(($193|0),($196|0),($197|0),($199|0))|0);
  $201 = tempRet0;
  $202 = (_i64Add(($189|0),($190|0),($200|0),($201|0))|0);
  $203 = tempRet0;
  $204 = (_bitshift64Ashr(($202|0),($203|0),16)|0);
  $205 = tempRet0;
  $sl = $204;
  $206 = $fl1;
  $fl2 = $206;
  $207 = $sl;
  $fl1 = $207;
  $208 = $0;
  $209 = ((($208)) + 108|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ($210|0)!=(0);
  if ($211) {
   $212 = $0;
   $213 = ((($212)) + 108|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (16 - ($214))|0;
   $a = $215;
   $216 = $sr;
   $217 = $a;
   $218 = Math_imul($216, $217)|0;
   $219 = $218 >> 4;
   $220 = $1;
   $221 = ((($220)) + 4|0);
   $1 = $221;
   $222 = HEAP32[$220>>2]|0;
   $223 = (($222) + ($219))|0;
   HEAP32[$220>>2] = $223;
   $224 = $sl;
   $225 = $a;
   $226 = Math_imul($224, $225)|0;
   $227 = $226 >> 4;
   $228 = $1;
   $229 = ((($228)) + 4|0);
   $1 = $229;
   $230 = HEAP32[$228>>2]|0;
   $231 = (($230) + ($227))|0;
   HEAP32[$228>>2] = $231;
   $232 = $0;
   $233 = ((($232)) + 108|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = (($234) + -1)|0;
   HEAP32[$233>>2] = $235;
  } else {
   $236 = $sr;
   $237 = $1;
   $238 = ((($237)) + 4|0);
   $1 = $238;
   $239 = HEAP32[$237>>2]|0;
   $240 = (($239) + ($236))|0;
   HEAP32[$237>>2] = $240;
   $241 = $sl;
   $242 = $1;
   $243 = ((($242)) + 4|0);
   $1 = $243;
   $244 = HEAP32[$242>>2]|0;
   $245 = (($244) + ($241))|0;
   HEAP32[$242>>2] = $245;
  }
  $246 = $5;
  $247 = $frac;
  $248 = (($247) + ($246))|0;
  $frac = $248;
  $249 = $frac;
  $250 = $249 >> 16;
  $251 = $pos;
  $252 = (($251) + ($250))|0;
  $pos = $252;
  $253 = $frac;
  $254 = $253 & 65535;
  $frac = $254;
 }
 $255 = $fl1;
 $256 = $0;
 $257 = ((($256)) + 72|0);
 $258 = ((($257)) + 8|0);
 HEAP32[$258>>2] = $255;
 $259 = $fl2;
 $260 = $0;
 $261 = ((($260)) + 72|0);
 $262 = ((($261)) + 12|0);
 HEAP32[$262>>2] = $259;
 $263 = $fr1;
 $264 = $0;
 $265 = ((($264)) + 72|0);
 HEAP32[$265>>2] = $263;
 $266 = $fr2;
 $267 = $0;
 $268 = ((($267)) + 72|0);
 $269 = ((($268)) + 4|0);
 HEAP32[$269>>2] = $266;
 STACKTOP = sp;return;
}
function _smix_mono_8bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $frac = 0, $pos = 0, $sl = 0;
 var $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 while(1) {
  $53 = $2;
  $54 = (($53) + -1)|0;
  $2 = $54;
  $55 = ($53|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $frac;
  $57 = $56 >> 6;
  $f = $57;
  $58 = $f;
  $59 = (15216 + ($58<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $pos;
  $63 = (($62) - 1)|0;
  $64 = $sptr;
  $65 = (($64) + ($63)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = Math_imul($61, $67)|0;
  $69 = $f;
  $70 = (17264 + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $pos;
  $74 = $sptr;
  $75 = (($74) + ($73)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76 << 24 >> 24;
  $78 = Math_imul($72, $77)|0;
  $79 = (($68) + ($78))|0;
  $80 = $f;
  $81 = (19312 + ($80<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = $pos;
  $85 = (($84) + 2)|0;
  $86 = $sptr;
  $87 = (($86) + ($85)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = Math_imul($83, $89)|0;
  $91 = (($79) + ($90))|0;
  $92 = $f;
  $93 = (21360 + ($92<<1)|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94 << 16 >> 16;
  $96 = $pos;
  $97 = (($96) + 1)|0;
  $98 = $sptr;
  $99 = (($98) + ($97)|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100 << 24 >> 24;
  $102 = Math_imul($95, $101)|0;
  $103 = (($91) + ($102))|0;
  $104 = $103 >> 14;
  $smp_in = $104;
  $105 = $a0;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($105) + 4)|0;
  $109 = $108;
  $110 = HEAP32[$109>>2]|0;
  $111 = $smp_in;
  $112 = ($111|0)<(0);
  $113 = $112 << 31 >> 31;
  $114 = (___muldi3(($107|0),($110|0),($111|0),($113|0))|0);
  $115 = tempRet0;
  $116 = $3;
  $117 = ($116|0)<(0);
  $118 = $117 << 31 >> 31;
  $119 = (___muldi3(($114|0),($115|0),($116|0),($118|0))|0);
  $120 = tempRet0;
  $121 = $b0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 4)|0;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = $fl1;
  $128 = ($127|0)<(0);
  $129 = $128 << 31 >> 31;
  $130 = (___muldi3(($123|0),($126|0),($127|0),($129|0))|0);
  $131 = tempRet0;
  $132 = (_i64Add(($119|0),($120|0),($130|0),($131|0))|0);
  $133 = tempRet0;
  $134 = $b1;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) + 4)|0;
  $138 = $137;
  $139 = HEAP32[$138>>2]|0;
  $140 = $fl2;
  $141 = ($140|0)<(0);
  $142 = $141 << 31 >> 31;
  $143 = (___muldi3(($136|0),($139|0),($140|0),($142|0))|0);
  $144 = tempRet0;
  $145 = (_i64Add(($132|0),($133|0),($143|0),($144|0))|0);
  $146 = tempRet0;
  $147 = (_bitshift64Ashr(($145|0),($146|0),16)|0);
  $148 = tempRet0;
  $sl = $147;
  $149 = $fl1;
  $fl2 = $149;
  $150 = $sl;
  $fl1 = $150;
  $151 = $0;
  $152 = ((($151)) + 108|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)!=(0);
  $155 = $sl;
  if ($154) {
   $156 = $0;
   $157 = ((($156)) + 108|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (16 - ($158))|0;
   $160 = Math_imul($155, $159)|0;
   $161 = $160 >> 4;
   $162 = $1;
   $163 = ((($162)) + 4|0);
   $1 = $163;
   $164 = HEAP32[$162>>2]|0;
   $165 = (($164) + ($161))|0;
   HEAP32[$162>>2] = $165;
   $166 = $0;
   $167 = ((($166)) + 108|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + -1)|0;
   HEAP32[$167>>2] = $169;
  } else {
   $170 = $1;
   $171 = ((($170)) + 4|0);
   $1 = $171;
   $172 = HEAP32[$170>>2]|0;
   $173 = (($172) + ($155))|0;
   HEAP32[$170>>2] = $173;
  }
  $174 = $5;
  $175 = $frac;
  $176 = (($175) + ($174))|0;
  $frac = $176;
  $177 = $frac;
  $178 = $177 >> 16;
  $179 = $pos;
  $180 = (($179) + ($178))|0;
  $pos = $180;
  $181 = $frac;
  $182 = $181 & 65535;
  $frac = $182;
 }
 $183 = $fl1;
 $184 = $0;
 $185 = ((($184)) + 72|0);
 $186 = ((($185)) + 8|0);
 HEAP32[$186>>2] = $183;
 $187 = $fl2;
 $188 = $0;
 $189 = ((($188)) + 72|0);
 $190 = ((($189)) + 12|0);
 HEAP32[$190>>2] = $187;
 STACKTOP = sp;return;
}
function _smix_mono_16bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $frac = 0;
 var $pos = 0, $sl = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $3;
 $54 = $53 >> 8;
 $3 = $54;
 while(1) {
  $55 = $2;
  $56 = (($55) + -1)|0;
  $2 = $56;
  $57 = ($55|0)!=(0);
  if (!($57)) {
   break;
  }
  $58 = $frac;
  $59 = $58 >> 6;
  $f = $59;
  $60 = $f;
  $61 = (15216 + ($60<<1)|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $pos;
  $65 = (($64) - 1)|0;
  $66 = $sptr;
  $67 = (($66) + ($65<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = Math_imul($63, $69)|0;
  $71 = $f;
  $72 = (17264 + ($71<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = $pos;
  $76 = $sptr;
  $77 = (($76) + ($75<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = Math_imul($74, $79)|0;
  $81 = (($70) + ($80))|0;
  $82 = $f;
  $83 = (19312 + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = $pos;
  $87 = (($86) + 2)|0;
  $88 = $sptr;
  $89 = (($88) + ($87<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90 << 16 >> 16;
  $92 = Math_imul($85, $91)|0;
  $93 = (($81) + ($92))|0;
  $94 = $f;
  $95 = (21360 + ($94<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  $98 = $pos;
  $99 = (($98) + 1)|0;
  $100 = $sptr;
  $101 = (($100) + ($99<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = Math_imul($97, $103)|0;
  $105 = (($93) + ($104))|0;
  $106 = $105 >> 14;
  $smp_in = $106;
  $107 = $a0;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) + 4)|0;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = $smp_in;
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  $116 = (___muldi3(($109|0),($112|0),($113|0),($115|0))|0);
  $117 = tempRet0;
  $118 = $3;
  $119 = ($118|0)<(0);
  $120 = $119 << 31 >> 31;
  $121 = (___muldi3(($116|0),($117|0),($118|0),($120|0))|0);
  $122 = tempRet0;
  $123 = $b0;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $fl1;
  $130 = ($129|0)<(0);
  $131 = $130 << 31 >> 31;
  $132 = (___muldi3(($125|0),($128|0),($129|0),($131|0))|0);
  $133 = tempRet0;
  $134 = (_i64Add(($121|0),($122|0),($132|0),($133|0))|0);
  $135 = tempRet0;
  $136 = $b1;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = (($136) + 4)|0;
  $140 = $139;
  $141 = HEAP32[$140>>2]|0;
  $142 = $fl2;
  $143 = ($142|0)<(0);
  $144 = $143 << 31 >> 31;
  $145 = (___muldi3(($138|0),($141|0),($142|0),($144|0))|0);
  $146 = tempRet0;
  $147 = (_i64Add(($134|0),($135|0),($145|0),($146|0))|0);
  $148 = tempRet0;
  $149 = (_bitshift64Ashr(($147|0),($148|0),16)|0);
  $150 = tempRet0;
  $sl = $149;
  $151 = $fl1;
  $fl2 = $151;
  $152 = $sl;
  $fl1 = $152;
  $153 = $0;
  $154 = ((($153)) + 108|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0);
  $157 = $sl;
  if ($156) {
   $158 = $0;
   $159 = ((($158)) + 108|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (16 - ($160))|0;
   $162 = Math_imul($157, $161)|0;
   $163 = $162 >> 4;
   $164 = $1;
   $165 = ((($164)) + 4|0);
   $1 = $165;
   $166 = HEAP32[$164>>2]|0;
   $167 = (($166) + ($163))|0;
   HEAP32[$164>>2] = $167;
   $168 = $0;
   $169 = ((($168)) + 108|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + -1)|0;
   HEAP32[$169>>2] = $171;
  } else {
   $172 = $1;
   $173 = ((($172)) + 4|0);
   $1 = $173;
   $174 = HEAP32[$172>>2]|0;
   $175 = (($174) + ($157))|0;
   HEAP32[$172>>2] = $175;
  }
  $176 = $5;
  $177 = $frac;
  $178 = (($177) + ($176))|0;
  $frac = $178;
  $179 = $frac;
  $180 = $179 >> 16;
  $181 = $pos;
  $182 = (($181) + ($180))|0;
  $pos = $182;
  $183 = $frac;
  $184 = $183 & 65535;
  $frac = $184;
 }
 $185 = $fl1;
 $186 = $0;
 $187 = ((($186)) + 72|0);
 $188 = ((($187)) + 8|0);
 HEAP32[$188>>2] = $185;
 $189 = $fl2;
 $190 = $0;
 $191 = ((($190)) + 72|0);
 $192 = ((($191)) + 12|0);
 HEAP32[$192>>2] = $189;
 STACKTOP = sp;return;
}
function _synth_init661($ctx,$freq) {
 $ctx = $ctx|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $freq;
 $3 = (_adlib_new()|0);
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $6 = ((($5)) + 6560|0);
 HEAP32[$6>>2] = $3;
 $7 = $1;
 $8 = ((($7)) + 1552|0);
 $9 = ((($8)) + 6560|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $12 = $1;
  _synth_chreset($12);
  $13 = $2;
  $14 = (_OPLCreate(8,3579545,$13)|0);
  $15 = $1;
  $16 = ((($15)) + 1552|0);
  $17 = ((($16)) + 6560|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$18>>2] = $14;
  $19 = ($14|0)!=(0|0);
  $20 = $19&1;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _synth_deinit662($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $3 = ((($2)) + 6560|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $0;
 (_synth_reset663($5)|0);
 $6 = $a;
 $7 = HEAP32[$6>>2]|0;
 _OPLDestroy($7);
 $8 = $a;
 _adlib_destroy($8);
 STACKTOP = sp;return 0;
}
function _synth_reset663($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $3 = ((($2)) + 6560|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $6 = HEAP32[$5>>2]|0;
 _OPLResetChip($6);
 $7 = $0;
 _synth_chreset($7);
 STACKTOP = sp;return 0;
}
function _synth_setpatch($ctx,$c,$data) {
 $ctx = $ctx|0;
 $c = $c|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $c;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $5 = ((($4)) + 6560|0);
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $0;
 $8 = $1;
 $9 = (_synth_getchannel($7,$8)|0);
 $1 = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(10);
  $13 = $a;
  if (!($12)) {
   break;
  }
  $14 = $i;
  $15 = (23568 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = $i;
  $19 = (($18|0) % 2)&-1;
  $20 = (23440 + (($19*36)|0)|0);
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($16) + ($22))|0;
  $24 = $i;
  $25 = $2;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  (_opl_write($13,$23,$28)|0);
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = HEAP32[(23608)>>2]|0;
 $32 = $1;
 $33 = (($31) + ($32))|0;
 $34 = $2;
 $35 = ((($34)) + 10|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 (_opl_write($13,$33,$37)|0);
 $38 = $a;
 $39 = $1;
 $40 = (176 + ($39))|0;
 $41 = (_opl_read($38,$40)|0);
 $42 = $41&255;
 $x = $42;
 $43 = $a;
 $44 = $1;
 $45 = (176 + ($44))|0;
 $46 = $x;
 $47 = $46 & -33;
 (_opl_write($43,$45,$47)|0);
 STACKTOP = sp;return;
}
function _synth_setnote($ctx,$c,$note,$bend) {
 $ctx = $ctx|0;
 $c = $c|0;
 $note = $note|0;
 $bend = $bend|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $f = 0, $n = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $c;
 $2 = $note;
 $3 = $bend;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $6 = ((($5)) + 6560|0);
 $7 = HEAP32[$6>>2]|0;
 $a = $7;
 $8 = $0;
 $9 = $1;
 $10 = (_synth_getchannel($8,$9)|0);
 $1 = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = (($12|0) % 12)&-1;
 $n = $13;
 $14 = $n;
 $15 = (23512 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $n;
 $18 = (($17) + 1)|0;
 $19 = (23512 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $n;
 $22 = (23512 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) - ($23))|0;
 $25 = $3;
 $26 = Math_imul($24, $25)|0;
 $27 = (($26|0) / 100)&-1;
 $28 = (($16) + ($27))|0;
 $f = $28;
 $29 = $2;
 $30 = (($29|0) / 12)&-1;
 $31 = (($30) - 2)|0;
 $o = $31;
 $32 = $o;
 $33 = ($32|0)<(0);
 $$ = $33 ? 0 : $31;
 $o = $$;
 $34 = $a;
 $35 = $1;
 $36 = (160 + ($35))|0;
 $37 = $f;
 $38 = $37 & 255;
 (_opl_write($34,$36,$38)|0);
 $39 = $a;
 $40 = $1;
 $41 = (176 + ($40))|0;
 $42 = $o;
 $43 = $42 << 2;
 $44 = $43 & 28;
 $45 = 32 | $44;
 $46 = $f;
 $47 = $46 >> 8;
 $48 = $47 & 3;
 $49 = $45 | $48;
 (_opl_write($39,$41,$49)|0);
 STACKTOP = sp;return;
}
function _synth_setvol($ctx,$c,$vol) {
 $ctx = $ctx|0;
 $c = $c|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $ofs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $c;
 $2 = $vol;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $5 = ((($4)) + 6560|0);
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $0;
 $8 = $1;
 $9 = (_synth_getchannel($7,$8)|0);
 $1 = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ($11|0)>(63);
 if ($12) {
  $2 = 63;
 }
 $13 = $a;
 $14 = $1;
 $15 = (200 + ($14))|0;
 $16 = (_opl_read($13,$15)|0);
 $17 = ($16<<24>>24)!=(0);
 if ($17) {
  $18 = $1;
  $19 = (23440 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $ofs = $20;
  $21 = $a;
  $22 = $ofs;
  $23 = (64 + ($22))|0;
  $24 = (_opl_read($21,$23)|0);
  $25 = $24&255;
  $b = $25;
  $26 = $a;
  $27 = $ofs;
  $28 = (64 + ($27))|0;
  $29 = $b;
  $30 = $29 & 192;
  $31 = $2;
  $32 = (63 - ($31))|0;
  $33 = $30 | $32;
  (_opl_write($26,$28,$33)|0);
 }
 $34 = $1;
 $35 = ((23476) + ($34<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $ofs = $36;
 $37 = $a;
 $38 = $ofs;
 $39 = (64 + ($38))|0;
 $40 = (_opl_read($37,$39)|0);
 $41 = $40&255;
 $b = $41;
 $42 = $a;
 $43 = $ofs;
 $44 = (64 + ($43))|0;
 $45 = $b;
 $46 = $45 & 192;
 $47 = $2;
 $48 = (63 - ($47))|0;
 $49 = $46 | $48;
 (_opl_write($42,$44,$49)|0);
 STACKTOP = sp;return;
}
function _synth_mixer($ctx,$tmp_bk,$count,$vl,$vr,$stereo) {
 $ctx = $ctx|0;
 $tmp_bk = $tmp_bk|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $stereo = $stereo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $tmp_bk;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $stereo;
 $6 = $0;
 $7 = ((($6)) + 1552|0);
 $8 = ((($7)) + 6560|0);
 $9 = HEAP32[$8>>2]|0;
 $a = $9;
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $a;
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 _YM3812UpdateOne($13,$14,$15,$16,$17,$18);
 STACKTOP = sp;return;
}
function _synth_getchannel($ctx,$c) {
 $ctx = $ctx|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $freech = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $c;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $5 = ((($4)) + 6560|0);
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $freech = -1;
 $7 = $2;
 $8 = (($7) + 1)|0;
 $2 = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(9);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $a;
  $13 = ((($12)) + 4|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ($15|0)==($16|0);
  $18 = $i;
  if ($17) {
   label = 4;
   break;
  }
  $19 = $a;
  $20 = ((($19)) + 4|0);
  $21 = (($20) + ($18<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  $24 = $i;
  if ($23) {
   label = 6;
   break;
  }
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 4) {
  $0 = $18;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  $freech = $24;
 }
 $26 = $freech;
 $27 = ($26|0)!=(-1);
 if ($27) {
  $28 = $2;
  $29 = $freech;
  $30 = $a;
  $31 = ((($30)) + 4|0);
  $32 = (($31) + ($29<<2)|0);
  HEAP32[$32>>2] = $28;
 }
 $33 = $freech;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _opl_read($a,$addr) {
 $a = $a|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $addr;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 (_OPLWrite($3,0,$4)|0);
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_OPLRead($6,1)|0);
 STACKTOP = sp;return ($7|0);
}
function _opl_write($a,$addr,$val) {
 $a = $a|0;
 $addr = $addr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $addr;
 $2 = $val;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_OPLWrite($4,0,$5)|0);
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (_OPLWrite($7,1,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _synth_chreset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $3 = ((($2)) + 6560|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(9);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $a;
  $9 = ((($8)) + 4|0);
  $10 = (($9) + ($7<<2)|0);
  HEAP32[$10>>2] = -1;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 STACKTOP = sp;return;
}
function _adlib_destroy($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _adlib_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_malloc(40)|0);
 $a = $1;
 $2 = $a;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(9);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $a;
  $8 = ((($7)) + 4|0);
  $9 = (($8) + ($6<<2)|0);
  HEAP32[$9>>2] = -1;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $a;
 $0 = $12;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _get_temp_dir($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $size;
 $2 = (_getenv((23720|0))|0);
 $tmp = $2;
 $3 = $0;
 $4 = $tmp;
 $5 = ($4|0)!=(0|0);
 $6 = $tmp;
 $7 = $5 ? $6 : 23728;
 $8 = $1;
 (_strncpy(($3|0),($7|0),($8|0))|0);
 $9 = $0;
 $10 = $1;
 (_strncat($9,23736,$10)|0);
 STACKTOP = sp;return 0;
}
function _adjust_string($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = (_strlen(($2|0))|0);
  $4 = ($1>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isprint($9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)>(127);
   if ($17) {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $18 = $i;
   $19 = $0;
   $20 = (($19) + ($18)|0);
   HEAP8[$20>>0] = 32;
  }
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 while(1) {
  $23 = $0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $0;
   $28 = (_strlen(($27|0))|0);
   $29 = (($28) - 1)|0;
   $30 = $0;
   $31 = (($30) + ($29)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = ($33|0)==(32);
   $40 = $34;
  } else {
   $40 = 0;
  }
  $35 = $0;
  if (!($40)) {
   break;
  }
  $36 = (_strlen(($35|0))|0);
  $37 = (($36) - 1)|0;
  $38 = $0;
  $39 = (($38) + ($37)|0);
  HEAP8[$39>>0] = 0;
 }
 STACKTOP = sp;return ($35|0);
}
function _load_prologue($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $i = 0;
 var $m = 0, $pan = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $m = $2;
 $3 = $m;
 dest=$3; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $4 = $m;
 $5 = ((($4)) + 64|0);
 dest=$5; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $m;
 $7 = ((($6)) + 1248|0);
 HEAPF64[$7>>3] = 250.0;
 $8 = $m;
 $9 = ((($8)) + 1264|0);
 HEAP32[$9>>2] = 8287;
 $10 = $m;
 $11 = ((($10)) + 1268|0);
 HEAP32[$11>>2] = 64;
 $12 = $m;
 $13 = ((($12)) + 1272|0);
 HEAP32[$13>>2] = 64;
 $14 = $m;
 $15 = ((($14)) + 1276|0);
 HEAP32[$15>>2] = 0;
 $16 = $m;
 $17 = ((($16)) + 1280|0);
 HEAP32[$17>>2] = 0;
 $18 = $m;
 $19 = ((($18)) + 1284|0);
 HEAP32[$19>>2] = 0;
 $20 = $m;
 $21 = ((($20)) + 1220|0);
 HEAP32[$21>>2] = 0;
 $22 = $m;
 $23 = ((($22)) + 6564|0);
 HEAP32[$23>>2] = 0;
 $24 = $m;
 $25 = ((($24)) + 128|0);
 HEAP32[$25>>2] = 0;
 $26 = $m;
 $27 = ((($26)) + 132|0);
 HEAP32[$27>>2] = 0;
 $28 = $m;
 $29 = ((($28)) + 136|0);
 HEAP32[$29>>2] = 4;
 $30 = $m;
 $31 = ((($30)) + 140|0);
 HEAP32[$31>>2] = 0;
 $32 = $m;
 $33 = ((($32)) + 144|0);
 HEAP32[$33>>2] = 0;
 $34 = $m;
 $35 = ((($34)) + 148|0);
 HEAP32[$35>>2] = 6;
 $36 = $m;
 $37 = ((($36)) + 152|0);
 HEAP32[$37>>2] = 125;
 $38 = $m;
 $39 = ((($38)) + 156|0);
 HEAP32[$39>>2] = 0;
 $40 = $m;
 $41 = ((($40)) + 160|0);
 HEAP32[$41>>2] = 0;
 $42 = $m;
 $43 = ((($42)) + 6556|0);
 HEAP32[$43>>2] = 15184;
 $44 = $m;
 $45 = ((($44)) + 6552|0);
 HEAP32[$45>>2] = 0;
 $46 = $m;
 $47 = ((($46)) + 1256|0);
 HEAPF64[$47>>3] = 10.0;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = ($48|0)<(64);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = (($50) + 1)|0;
  $52 = (($51|0) / 2)&-1;
  $53 = (($52|0) % 2)&-1;
  $54 = ($53*255)|0;
  $pan = $54;
  $55 = $pan;
  $56 = (($55) - 128)|0;
  $57 = $m;
  $58 = ((($57)) + 1292|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = Math_imul($56, $59)|0;
  $61 = (($60|0) / 100)&-1;
  $62 = (128 + ($61))|0;
  $63 = $i;
  $64 = $m;
  $65 = ((($64)) + 184|0);
  $66 = (($65) + (($63*12)|0)|0);
  HEAP32[$66>>2] = $62;
  $67 = $i;
  $68 = $m;
  $69 = ((($68)) + 184|0);
  $70 = (($69) + (($67*12)|0)|0);
  $71 = ((($70)) + 4|0);
  HEAP32[$71>>2] = 64;
  $72 = $i;
  $73 = $m;
  $74 = ((($73)) + 184|0);
  $75 = (($74) + (($72*12)|0)|0);
  $76 = ((($75)) + 8|0);
  HEAP32[$76>>2] = 0;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 STACKTOP = sp;return;
}
function _load_epilogue($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $m = 0, $mod = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $m;
 $6 = ((($5)) + 1272|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $mod;
 $9 = ((($8)) + 164|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 160|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $mod;
 $14 = ((($13)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)>=($15|0);
 if ($16) {
  $17 = $mod;
  $18 = ((($17)) + 160|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = $mod;
 $20 = ((($19)) + 148|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = $mod;
  $24 = ((($23)) + 148|0);
  HEAP32[$24>>2] = 6;
 }
 $25 = $mod;
 $26 = ((($25)) + 152|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = $mod;
  $30 = ((($29)) + 152|0);
  HEAP32[$30>>2] = 125;
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = $mod;
  $33 = ((($32)) + 140|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $m;
  $37 = ((($36)) + 1280|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 ^ -1;
  $40 = $39 & 16384;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $m;
   $43 = ((($42)) + 1268|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $i;
   $46 = $mod;
   $47 = ((($46)) + 176|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + (($45*764)|0)|0);
   $50 = ((($49)) + 32|0);
   HEAP32[$50>>2] = $44;
  }
  $j = 0;
  while(1) {
   $51 = $j;
   $52 = $i;
   $53 = $mod;
   $54 = ((($53)) + 176|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + (($52*764)|0)|0);
   $57 = ((($56)) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($51|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = $m;
   $61 = ((($60)) + 1280|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 ^ -1;
   $64 = $63 & 16384;
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $m;
    $67 = ((($66)) + 1268|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $j;
    $70 = $i;
    $71 = $mod;
    $72 = ((($71)) + 176|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + (($70*764)|0)|0);
    $75 = ((($74)) + 756|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($69<<6)|0);
    $78 = ((($77)) + 4|0);
    HEAP32[$78>>2] = $68;
   }
   $79 = $j;
   $80 = (($79) + 1)|0;
   $j = $80;
  }
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $i = 0;
 while(1) {
  $83 = $i;
  $84 = $mod;
  $85 = ((($84)) + 140|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = $i;
  $89 = $mod;
  $90 = ((($89)) + 176|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + (($88*764)|0)|0);
  $93 = ((($92)) + 44|0);
  _check_envelope($93);
  $94 = $i;
  $95 = $mod;
  $96 = ((($95)) + 176|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + (($94*764)|0)|0);
  $99 = ((($98)) + 356|0);
  _check_envelope($99);
  $100 = $i;
  $101 = $mod;
  $102 = ((($101)) + 176|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($100*764)|0)|0);
  $105 = ((($104)) + 200|0);
  _check_envelope($105);
  $106 = $i;
  $107 = (($106) + 1)|0;
  $i = $107;
 }
 $108 = $p;
 $109 = ((($108)) + 24|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $p;
 $112 = ((($111)) + 28|0);
 HEAP32[$112>>2] = $110;
 $113 = $0;
 _module_quirks($113);
 STACKTOP = sp;return;
}
function _prepare_scan($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $m = 0, $mod = 0, $ord = 0, $pat = 0, $pat_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 952|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = $mod;
  $9 = ((($8)) + 168|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = $mod;
   $13 = ((($12)) + 172|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $ord = 0;
    while(1) {
     $16 = $ord;
     $17 = $mod;
     $18 = ((($17)) + 156|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($16|0)<($19|0);
     if ($20) {
      $21 = $ord;
      $22 = $mod;
      $23 = ((($22)) + 952|0);
      $24 = (($23) + ($21)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = $25&255;
      $27 = $mod;
      $28 = ((($27)) + 128|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($26|0)>=($29|0);
      $110 = $30;
     } else {
      $110 = 0;
     }
     $31 = $ord;
     if (!($110)) {
      break;
     }
     $32 = (($31) + 1)|0;
     $ord = $32;
    }
    $33 = $mod;
    $34 = ((($33)) + 156|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($31|0)>=($35|0);
    $37 = $mod;
    $38 = ((($37)) + 156|0);
    if ($36) {
     HEAP32[$38>>2] = 0;
     $0 = 0;
     $109 = $0;
     STACKTOP = sp;return ($109|0);
    }
    $39 = HEAP32[$38>>2]|0;
    $40 = (_calloc(4,$39)|0);
    $41 = $m;
    $42 = ((($41)) + 6564|0);
    HEAP32[$42>>2] = $40;
    $43 = $m;
    $44 = ((($43)) + 6564|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0|0);
    if ($46) {
     $0 = -6;
     $109 = $0;
     STACKTOP = sp;return ($109|0);
    }
    $i = 0;
    while(1) {
     $47 = $i;
     $48 = $mod;
     $49 = ((($48)) + 156|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($47|0)<($50|0);
     if (!($51)) {
      label = 28;
      break;
     }
     $52 = $i;
     $53 = $mod;
     $54 = ((($53)) + 952|0);
     $55 = (($54) + ($52)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $pat_idx = $57;
     $58 = $pat_idx;
     $59 = $mod;
     $60 = ((($59)) + 128|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($58|0)<($61|0);
     if ($62) {
      $63 = $pat_idx;
      $64 = $mod;
      $65 = ((($64)) + 168|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (($66) + ($63<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)!=(0|0);
      if (!($69)) {
       $70 = $mod;
       $71 = $pat_idx;
       $72 = (_pattern_alloc($70,$71)|0);
       $73 = ($72|0)<(0);
       if ($73) {
        label = 19;
        break;
       }
      }
     }
     $74 = $pat_idx;
     $75 = $mod;
     $76 = ((($75)) + 128|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($74|0)>=($77|0);
     if ($78) {
      $85 = 0;
     } else {
      $79 = $pat_idx;
      $80 = $mod;
      $81 = ((($80)) + 168|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (($82) + ($79<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $84;
     }
     $pat = $85;
     $86 = $pat;
     $87 = ($86|0)!=(0|0);
     if ($87) {
      $88 = $pat;
      $89 = HEAP32[$88>>2]|0;
      $90 = ($89|0)!=(0);
      if ($90) {
       $91 = $pat;
       $92 = HEAP32[$91>>2]|0;
       $93 = $92;
      } else {
       $93 = 1;
      }
     } else {
      $93 = 1;
     }
     $94 = (_calloc(1,$93)|0);
     $95 = $i;
     $96 = $m;
     $97 = ((($96)) + 6564|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + ($95<<2)|0);
     HEAP32[$99>>2] = $94;
     $100 = $i;
     $101 = $m;
     $102 = ((($101)) + 6564|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + ($100<<2)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)==(0|0);
     if ($106) {
      label = 26;
      break;
     }
     $107 = $i;
     $108 = (($107) + 1)|0;
     $i = $108;
    }
    if ((label|0) == 19) {
     $0 = -6;
     $109 = $0;
     STACKTOP = sp;return ($109|0);
    }
    else if ((label|0) == 26) {
     $0 = -6;
     $109 = $0;
     STACKTOP = sp;return ($109|0);
    }
    else if ((label|0) == 28) {
     $0 = 0;
     $109 = $0;
     STACKTOP = sp;return ($109|0);
    }
   }
  }
 }
 $0 = -4;
 $109 = $0;
 STACKTOP = sp;return ($109|0);
}
function _check_envelope($env) {
 $env = $env|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $env;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if (!($4)) {
  $5 = $0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)>=($10|0);
  if (!($11)) {
   $12 = $0;
   $13 = ((($12)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14|0)>=($17|0);
   if (!($18)) {
    STACKTOP = sp;return;
   }
  }
 }
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & -5;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _module_quirks($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $m = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = (23616 + (($4*20)|0)|0);
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $m;
  $10 = ((($9)) + 1224|0);
  $11 = $i;
  $12 = (23616 + (($11*20)|0)|0);
  $13 = (_memcmp($10,$12,16)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $i;
   $16 = (23616 + (($15*20)|0)|0);
   $17 = ((($16)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $p;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 | $18;
   HEAP32[$20>>2] = $22;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 STACKTOP = sp;return;
}
function _xmp_release_module($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ctx = 0, $i = 0, $m = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $ctx = $1;
 $2 = $ctx;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $ctx;
 $6 = ((($5)) + 8140|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(1);
 if ($8) {
  $9 = $0;
  _xmp_end_player($9);
 }
 $10 = $ctx;
 $11 = ((($10)) + 8140|0);
 HEAP32[$11>>2] = 0;
 $12 = $ctx;
 _release_module_extras($12);
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $mod;
  $15 = ((($14)) + 132|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $mod;
  $20 = ((($19)) + 172|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $mod;
 $27 = ((($26)) + 132|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = $mod;
  $31 = ((($30)) + 172|0);
  $32 = HEAP32[$31>>2]|0;
  _free($32);
 }
 $i = 0;
 while(1) {
  $33 = $i;
  $34 = $mod;
  $35 = ((($34)) + 128|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $i;
  $39 = $mod;
  $40 = ((($39)) + 168|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  _free($43);
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $mod;
 $47 = ((($46)) + 128|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)>(0);
 if ($49) {
  $50 = $mod;
  $51 = ((($50)) + 168|0);
  $52 = HEAP32[$51>>2]|0;
  _free($52);
 }
 $i = 0;
 while(1) {
  $53 = $i;
  $54 = $mod;
  $55 = ((($54)) + 140|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = $mod;
  $60 = ((($59)) + 176|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + (($58*764)|0)|0);
  $63 = ((($62)) + 756|0);
  $64 = HEAP32[$63>>2]|0;
  _free($64);
  $65 = $i;
  $66 = $mod;
  $67 = ((($66)) + 176|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + (($65*764)|0)|0);
  $70 = ((($69)) + 760|0);
  $71 = HEAP32[$70>>2]|0;
  _free($71);
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $74 = $mod;
 $75 = ((($74)) + 140|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)>(0);
 if ($77) {
  $78 = $mod;
  $79 = ((($78)) + 176|0);
  $80 = HEAP32[$79>>2]|0;
  _free($80);
 }
 $i = 0;
 while(1) {
  $81 = $i;
  $82 = $mod;
  $83 = ((($82)) + 144|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($81|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $i;
  $87 = $mod;
  $88 = ((($87)) + 180|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + (($86*52)|0)|0);
  $91 = ((($90)) + 48|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)!=(0|0);
  if ($93) {
   $94 = $i;
   $95 = $mod;
   $96 = ((($95)) + 180|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + (($94*52)|0)|0);
   $99 = ((($98)) + 48|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + -4|0);
   _free($101);
  }
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
 }
 $104 = $mod;
 $105 = ((($104)) + 144|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)>(0);
 if ($107) {
  $108 = $mod;
  $109 = ((($108)) + 180|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = $m;
 $112 = ((($111)) + 6564|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if (!($114)) {
  $131 = $m;
  $132 = ((($131)) + 1220|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
  $134 = $m;
  $135 = ((($134)) + 1208|0);
  $136 = HEAP32[$135>>2]|0;
  _free($136);
  $137 = $m;
  $138 = ((($137)) + 1212|0);
  $139 = HEAP32[$138>>2]|0;
  _free($139);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $115 = $i;
  $116 = $mod;
  $117 = ((($116)) + 156|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115|0)<($118|0);
  if (!($119)) {
   break;
  }
  $120 = $i;
  $121 = $m;
  $122 = ((($121)) + 6564|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + ($120<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
  $126 = $i;
  $127 = (($126) + 1)|0;
  $i = $127;
 }
 $128 = $m;
 $129 = ((($128)) + 6564|0);
 $130 = HEAP32[$129>>2]|0;
 _free($130);
 $131 = $m;
 $132 = ((($131)) + 1220|0);
 $133 = HEAP32[$132>>2]|0;
 _free($133);
 $134 = $m;
 $135 = ((($134)) + 1208|0);
 $136 = HEAP32[$135>>2]|0;
 _free($136);
 $137 = $m;
 $138 = ((($137)) + 1212|0);
 $139 = HEAP32[$138>>2]|0;
 _free($139);
 STACKTOP = sp;return;
}
function _xmp_load_module_from_memory($opaque,$mem,$size) {
 $opaque = $opaque|0;
 $mem = $mem|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $h = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $mem;
 $3 = $size;
 $4 = $1;
 $ctx = $4;
 $5 = $ctx;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $3;
  $10 = (($9) + -1)|0;
  $3 = $10;
 }
 $11 = $2;
 $12 = $3;
 $13 = (_hio_open_mem($11,$12)|0);
 $h = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -6;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $15 = $ctx;
 $16 = ((($15)) + 8140|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $1;
  _xmp_release_module($19);
 }
 $20 = $m;
 $21 = ((($20)) + 1216|0);
 HEAP32[$21>>2] = 0;
 $22 = $m;
 $23 = ((($22)) + 1212|0);
 HEAP32[$23>>2] = 0;
 $24 = $m;
 $25 = ((($24)) + 1208|0);
 HEAP32[$25>>2] = 0;
 $26 = $m;
 $27 = ((($26)) + 1240|0);
 HEAP32[$27>>2] = 0;
 $28 = $1;
 $29 = $h;
 $30 = (_load_module($28,$29,0)|0);
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _unlink_tempfile($temp) {
 $temp = $temp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $temp;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 (_unlink(($3|0))|0);
 $4 = $0;
 _free($4);
 STACKTOP = sp;return;
}
function _load_module($opaque,$h,$tmpfile) {
 $opaque = $opaque|0;
 $h = $h|0;
 $tmpfile = $tmpfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $i = 0, $load_result = 0, $m = 0, $or$cond = 0, $ret = 0, $test_result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $h;
 $3 = $tmpfile;
 $4 = $1;
 $ctx = $4;
 $5 = $ctx;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $ctx;
 _load_prologue($7);
 $load_result = -1;
 $test_result = -1;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = (11280 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  (_hio_seek($12,0,0)|0);
  $13 = $i;
  $14 = (11280 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = (FUNCTION_TABLE_iiii[$17 & 255]($18,0,0)|0);
  $test_result = $19;
  $20 = $test_result;
  $21 = ($20|0)==(0);
  if ($21) {
   label = 4;
   break;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 if ((label|0) == 4) {
  $22 = $2;
  (_hio_seek($22,0,0)|0);
  $23 = $i;
  $24 = (11280 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $m;
  $29 = $2;
  $30 = (FUNCTION_TABLE_iiii[$27 & 255]($28,$29,0)|0);
  $load_result = $30;
 }
 $33 = $test_result;
 $34 = ($33|0)==(0);
 $35 = $load_result;
 $36 = ($35|0)==(0);
 $or$cond = $34 & $36;
 if ($or$cond) {
  $37 = $2;
  $38 = $m;
  $39 = ((($38)) + 1224|0);
  _set_md5sum($37,$39);
 }
 $40 = $2;
 (_hio_close($40)|0);
 $41 = $3;
 _unlink_tempfile($41);
 $42 = $test_result;
 $43 = ($42|0)<(0);
 if ($43) {
  $44 = $m;
  $45 = ((($44)) + 1212|0);
  $46 = HEAP32[$45>>2]|0;
  _free($46);
  $47 = $m;
  $48 = ((($47)) + 1208|0);
  $49 = HEAP32[$48>>2]|0;
  _free($49);
  $0 = -3;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $50 = $load_result;
 $51 = ($50|0)<(0);
 if ($51) {
  $52 = $1;
  _xmp_release_module($52);
  $0 = -4;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $53 = $m;
 (_adjust_string($53)|0);
 $54 = $ctx;
 _load_epilogue($54);
 $55 = $ctx;
 $56 = (_prepare_scan($55)|0);
 $ret = $56;
 $57 = $ret;
 $58 = ($57|0)<(0);
 if ($58) {
  $59 = $ret;
  $0 = $59;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 } else {
  $60 = $ctx;
  (_scan_sequences($60)|0);
  $61 = $ctx;
  $62 = ((($61)) + 8140|0);
  HEAP32[$62>>2] = 1;
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _set_md5sum($f,$digest) {
 $f = $f|0;
 $digest = $digest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $bytes_read = 0, $ctx = 0, $st = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 176|0;
 $ctx = sp;
 $st = sp + 88|0;
 $0 = $f;
 $1 = $digest;
 $2 = $0;
 $3 = (_hio_stat($2,$st)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($st)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<=(0);
 if ($7) {
  $8 = $1;
  dest=$8; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $9 = $0;
 (_hio_seek($9,0,0)|0);
 _MD5Init($ctx);
 while(1) {
  $10 = $0;
  $11 = (_hio_read($buf,1,16384,$10)|0);
  $bytes_read = $11;
  $12 = ($11|0)>(0);
  if (!($12)) {
   break;
  }
  $13 = $bytes_read;
  _MD5Update($ctx,$buf,$13);
 }
 $14 = $1;
 _MD5Final($14,$ctx);
 STACKTOP = sp;return;
}
function _mgetc($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ($2)|0);
 $4 = ($3|0)>=(1);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $11 = (($6) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mread($buf,$size,$num,$m) {
 $buf = $buf|0;
 $size = $size|0;
 $num = $num|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $should_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $num;
 $4 = $m;
 $5 = $2;
 $6 = $3;
 $7 = Math_imul($5, $6)|0;
 $should_read = $7;
 $8 = $4;
 $9 = (_CAN_READ($8)|0);
 $can_read = $9;
 $10 = $can_read;
 $11 = ($10|0)<=(0);
 if ($11) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $12 = $should_read;
 $13 = $can_read;
 $14 = ($12>>>0)>($13>>>0);
 if ($14) {
  $15 = $can_read;
  $should_read = $15;
 }
 $16 = $1;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21)|0);
 $23 = $should_read;
 _memcpy(($16|0),($22|0),($23|0))|0;
 $24 = $should_read;
 $25 = $4;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24))|0;
 HEAP32[$26>>2] = $28;
 $29 = $should_read;
 $30 = $2;
 $31 = (($29>>>0) / ($30>>>0))&-1;
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _mseek($m,$offset,$whence) {
 $m = $m|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $offset;
 $3 = $whence;
 $4 = $3;
 if ((($4|0) == 1)) {
  $19 = $1;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>=(0);
  do {
   if ($22) {
    $23 = $2;
    $24 = $1;
    $25 = (_CAN_READ($24)|0);
    $26 = ($23|0)>($25|0);
    if (!($26)) {
     $27 = $2;
     $28 = $1;
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (0 - ($30))|0;
     $32 = ($27|0)<($31|0);
     if (!($32)) {
      break;
     }
    }
    $0 = -1;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  } while(0);
  $33 = $2;
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33))|0;
  HEAP32[$35>>2] = $37;
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else if ((($4|0) == 2)) {
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)<(0);
  if ($41) {
   $0 = -1;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  } else {
   $42 = $1;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $2;
   $46 = (($44) + ($45))|0;
   $47 = $1;
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = $46;
   $0 = 0;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  }
 } else {
  $5 = $1;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>=(0);
  if ($8) {
   $9 = $2;
   $10 = $1;
   $11 = ((($10)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)>($12|0);
   $14 = $2;
   $15 = ($14|0)<(0);
   $or$cond = $13 | $15;
   if ($or$cond) {
    $0 = -1;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  }
  $16 = $2;
  $17 = $1;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _mtell($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _meof($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  $0 = 0;
 } else {
  $6 = $1;
  $7 = (_CAN_READ($6)|0);
  $8 = ($7|0)<=(0);
  $9 = $8&1;
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _mopen($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ptr;
 $2 = $size;
 $3 = (_malloc(12)|0);
 $m = $3;
 $4 = $m;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $6 = $1;
  $7 = $m;
  HEAP32[$7>>2] = $6;
  $8 = $m;
  $9 = ((($8)) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $2;
  $11 = $m;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = $m;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mclose($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return 0;
}
function _mstat($m,$st) {
 $m = $m|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $st;
 $2 = $1;
 dest=$2; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 36|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return 0;
}
function _CAN_READ($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>=(0);
 if (!($5)) {
  $0 = 2147483647;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) - ($15))|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _hio_read8s($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread8s($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read8s($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read8($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read8($6)|0);
  $0 = $7;
 } else if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread8($10)|0);
  $0 = $11;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read16l($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read16l($6)|0);
  $0 = $7;
 } else if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread16l($10)|0);
  $0 = $11;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read16b($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread16b($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read16b($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read24l($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread24l($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read24l($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read24b($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread24b($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read24b($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read32l($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read32l($6)|0);
  $0 = $7;
 } else if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread32l($10)|0);
  $0 = $11;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read32b($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read32b($6)|0);
  $0 = $7;
 } else if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread32b($10)|0);
  $0 = $11;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read($buf,$size,$num,$h) {
 $buf = $buf|0;
 $size = $size|0;
 $num = $num|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $num;
 $4 = $h;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 if ((($6|0) == 0)) {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = $4;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_fread(($7|0),($8|0),($9|0),($12|0))|0);
  $0 = $13;
 } else if ((($6|0) == 1)) {
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_mread($14,$15,$16,$19)|0);
  $0 = $20;
 } else {
  $0 = 0;
 }
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _hio_seek($h,$offset,$whence) {
 $h = $h|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $offset;
 $3 = $whence;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 1)) {
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = $3;
  $17 = (_mseek($14,$15,$16)|0);
  $0 = $17;
 } else if ((($5|0) == 0)) {
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = $3;
  $11 = (_fseek(($8|0),($9|0),($10|0))|0);
  $0 = $11;
 } else {
  $0 = -1;
 }
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _hio_tell($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mtell($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_ftell(($6|0))|0);
  $0 = $7;
 } else {
  $0 = -1;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_eof($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_meof($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_feof(($6|0))|0);
  $0 = $7;
 } else {
  $0 = -1;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_open($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $mode;
 $3 = (_malloc(8)|0);
 $h = $3;
 $4 = $h;
 $5 = ($4|0)==(0|0);
 do {
  if (!($5)) {
   $6 = $h;
   HEAP32[$6>>2] = 0;
   $7 = $1;
   $8 = $2;
   $9 = (_fopen(($7|0),($8|0))|0);
   $10 = $h;
   $11 = ((($10)) + 4|0);
   HEAP32[$11>>2] = $9;
   $12 = $h;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   $16 = $h;
   if ($15) {
    _free($16);
    break;
   }
   $0 = $16;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 } while(0);
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _hio_open_mem($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ptr;
 $2 = $size;
 $3 = (_malloc(8)|0);
 $h = $3;
 $4 = $h;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $6 = $h;
  HEAP32[$6>>2] = 1;
  $7 = $1;
  $8 = $2;
  $9 = (_mopen($7,$8)|0);
  $10 = $h;
  $11 = ((($10)) + 4|0);
  HEAP32[$11>>2] = $9;
  $12 = $h;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _hio_close($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $h;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 0)) {
  $3 = $0;
  $4 = ((($3)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fclose(($5|0))|0);
  $ret = $6;
 } else if ((($2|0) == 1)) {
  $7 = $0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_mclose($9)|0);
  $ret = $10;
 } else {
  $ret = -1;
 }
 $11 = $0;
 _free($11);
 $12 = $ret;
 STACKTOP = sp;return ($12|0);
}
function _hio_open_fd($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $fd;
 $2 = $mode;
 $3 = (_malloc(8)|0);
 $h = $3;
 $4 = $h;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $0 = 0;
  } else {
   $6 = $h;
   HEAP32[$6>>2] = 0;
   $7 = $1;
   $8 = $2;
   $9 = (_fdopen(($7|0),($8|0))|0);
   $10 = $h;
   $11 = ((($10)) + 4|0);
   HEAP32[$11>>2] = $9;
   $12 = $h;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   $16 = $h;
   if ($15) {
    _free($16);
    $0 = 0;
    break;
   } else {
    $0 = $16;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _hio_stat($h,$st) {
 $h = $h|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $st;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 1)) {
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = (_mstat($13,$14)|0);
  $0 = $15;
 } else if ((($4|0) == 0)) {
  $5 = $1;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_fileno(($7|0))|0);
  $9 = $2;
  $10 = (_fstat(($8|0),($9|0))|0);
  $0 = $10;
 } else {
  $0 = -1;
 }
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _mread8s($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (_mgetc($1)|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _mread8($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (_mgetc($1)|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _mread16l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ751($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(2);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem16l($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 2)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread16b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ751($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(2);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem16b($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 2)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread24l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ751($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(3);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem24l($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 3)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread24b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ751($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(3);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem24b($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 3)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread32l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ751($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(4);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem32l($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 4)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread32b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ751($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(4);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem32b($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 4)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _CAN_READ751($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>=(0);
 if (!($5)) {
  $0 = 2147483647;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) - ($15))|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _hmn_linear_bend($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 STACKTOP = sp;return 0;
}
function _hmn_play_extras($ctx,$xc,$chn,$t) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ce = 0, $m = 0;
 var $pos = 0, $volume = 0, $waveform = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $t;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = ((($6)) + 400|0);
 $8 = HEAP32[$7>>2]|0;
 $ce = $8;
 $9 = $3;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 67584;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $ce;
   $16 = ((($15)) + 4|0);
   HEAP32[$16>>2] = 0;
  }
 }
 $17 = $1;
 $18 = ((($17)) + 44|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $m;
 $21 = ((($20)) + 176|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + (($19*764)|0)|0);
 $xxi = $23;
 $24 = $ce;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $pos = $26;
 $27 = $pos;
 $28 = $1;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $m;
 $32 = ((($31)) + 176|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + (($30*764)|0)|0);
 $35 = ((($34)) + 760|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 12|0);
 $38 = (($37) + ($27)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $waveform = $40;
 $41 = $pos;
 $42 = $1;
 $43 = ((($42)) + 44|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $m;
 $46 = ((($45)) + 176|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + (($44*764)|0)|0);
 $49 = ((($48)) + 760|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 76|0);
 $52 = (($51) + ($41)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 & 127;
 $volume = $55;
 $56 = $waveform;
 $57 = $xxi;
 $58 = ((($57)) + 36|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($56|0)<($59|0);
 if ($60) {
  $61 = $waveform;
  $62 = $xxi;
  $63 = ((($62)) + 756|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($61<<6)|0);
  $66 = ((($65)) + 40|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $1;
  $69 = ((($68)) + 56|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($67|0)!=($70|0);
  if ($71) {
   $72 = $waveform;
   $73 = $xxi;
   $74 = ((($73)) + 756|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + ($72<<6)|0);
   $77 = ((($76)) + 40|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $1;
   $80 = ((($79)) + 56|0);
   HEAP32[$80>>2] = $78;
   $81 = $0;
   $82 = $2;
   $83 = $1;
   $84 = ((($83)) + 56|0);
   $85 = HEAP32[$84>>2]|0;
   _virt_setsmp($81,$82,$85);
  }
 }
 $86 = $pos;
 $87 = (($86) + 1)|0;
 $pos = $87;
 $88 = $pos;
 $89 = $1;
 $90 = ((($89)) + 44|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $m;
 $93 = ((($92)) + 176|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + (($91*764)|0)|0);
 $96 = ((($95)) + 760|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 8|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($88|0)>($99|0);
 if (!($100)) {
  $112 = $pos;
  $113 = $ce;
  $114 = ((($113)) + 4|0);
  HEAP32[$114>>2] = $112;
  $115 = $volume;
  $116 = $ce;
  $117 = ((($116)) + 8|0);
  HEAP32[$117>>2] = $115;
  STACKTOP = sp;return;
 }
 $101 = $1;
 $102 = ((($101)) + 44|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $m;
 $105 = ((($104)) + 176|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + (($103*764)|0)|0);
 $108 = ((($107)) + 760|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($109)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $pos = $111;
 $112 = $pos;
 $113 = $ce;
 $114 = ((($113)) + 4|0);
 HEAP32[$114>>2] = $112;
 $115 = $volume;
 $116 = $ce;
 $117 = ((($116)) + 8|0);
 HEAP32[$117>>2] = $115;
 STACKTOP = sp;return;
}
function _hmn_new_instrument_extras($xxi) {
 $xxi = $xxi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xxi;
 $2 = (_calloc(1,140)|0);
 $3 = $1;
 $4 = ((($3)) + 760|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 760|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 760|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 68929562;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hmn_new_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xc;
 $2 = (_calloc(1,12)|0);
 $3 = $1;
 $4 = ((($3)) + 400|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 400|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 400|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 68929562;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hmn_reset_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 400|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 ;HEAP8[$4>>0]=0|0;HEAP8[$4+1>>0]=0|0;HEAP8[$4+2>>0]=0|0;HEAP8[$4+3>>0]=0|0;HEAP8[$4+4>>0]=0|0;HEAP8[$4+5>>0]=0|0;HEAP8[$4+6>>0]=0|0;HEAP8[$4+7>>0]=0|0;
 STACKTOP = sp;return;
}
function _hmn_release_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 400|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _hmn_new_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = (_calloc(1,4)|0);
 $3 = $1;
 $4 = ((($3)) + 6552|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 6552|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 6552|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 68929562;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hmn_release_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = ((($1)) + 6552|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _hmn_extras_process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $4;
 $8 = $7&255;
 $cond = ($8|0)==(178);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 164|0);
 $11 = $5;
 $12 = $11&255;
 $13 = (23744 + ($12<<4)|0);
 dest=$10; src=$13; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $14 = $1;
 $15 = ((($14)) + 164|0);
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = 16;
 STACKTOP = sp;return;
}
function _release_module_extras($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $m = $2;
 $3 = $m;
 $4 = ((($3)) + 6552|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $m;
  $8 = ((($7)) + 6552|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(133303461);
  if ($11) {
   $12 = $m;
   _med_release_module_extras($12);
   STACKTOP = sp;return;
  }
 }
 $13 = $m;
 $14 = ((($13)) + 6552|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $m;
 $18 = ((($17)) + 6552|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(68929562);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $m;
 _hmn_release_module_extras($22);
 STACKTOP = sp;return;
}
function _new_channel_extras($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $xc;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $6 = ((($5)) + 6552|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $m;
  $10 = ((($9)) + 6552|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(133303461);
  if ($13) {
   $14 = $2;
   $15 = (_med_new_channel_extras($14)|0);
   $16 = ($15|0)<(0);
   if ($16) {
    $0 = -1;
    $29 = $0;
    STACKTOP = sp;return ($29|0);
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $17 = $m;
  $18 = ((($17)) + 6552|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $m;
   $22 = ((($21)) + 6552|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(68929562);
   if ($25) {
    $26 = $2;
    $27 = (_hmn_new_channel_extras($26)|0);
    $28 = ($27|0)<(0);
    if ($28) {
     $0 = -1;
     $29 = $0;
     STACKTOP = sp;return ($29|0);
    }
   }
  }
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _release_channel_extras($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $5 = ((($4)) + 6552|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $m;
  $9 = ((($8)) + 6552|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(133303461);
  if ($12) {
   $13 = $1;
   _med_release_channel_extras($13);
   STACKTOP = sp;return;
  }
 }
 $14 = $m;
 $15 = ((($14)) + 6552|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $m;
 $19 = ((($18)) + 6552|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(68929562);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 _hmn_release_channel_extras($23);
 STACKTOP = sp;return;
}
function _reset_channel_extras($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $5 = ((($4)) + 6552|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $m;
  $9 = ((($8)) + 6552|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(133303461);
  if ($12) {
   $13 = $1;
   _med_reset_channel_extras($13);
   STACKTOP = sp;return;
  }
 }
 $14 = $m;
 $15 = ((($14)) + 6552|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $m;
 $19 = ((($18)) + 6552|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(68929562);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 _hmn_reset_channel_extras($23);
 STACKTOP = sp;return;
}
function _play_extras($ctx,$xc,$chn,$t) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $t;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = ((($6)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $m;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>=($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $m;
 $17 = ((($16)) + 176|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($15*764)|0)|0);
 $20 = ((($19)) + 760|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $1;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $m;
  $27 = ((($26)) + 176|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*764)|0)|0);
  $30 = ((($29)) + 760|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(133303461);
  if ($33) {
   $34 = $0;
   $35 = $1;
   $36 = $2;
   $37 = $3;
   _med_play_extras($34,$35,$36,$37);
   STACKTOP = sp;return;
  }
 }
 $38 = $1;
 $39 = ((($38)) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $m;
 $42 = ((($41)) + 176|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + (($40*764)|0)|0);
 $45 = ((($44)) + 760|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = $1;
 $49 = ((($48)) + 44|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $m;
 $52 = ((($51)) + 176|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + (($50*764)|0)|0);
 $55 = ((($54)) + 760|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(68929562);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $0;
 $60 = $1;
 $61 = $2;
 $62 = $3;
 _hmn_play_extras($59,$60,$61,$62);
 STACKTOP = sp;return;
}
function _extras_get_volume($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $m = 0;
 var $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $1;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $m;
 $8 = ((($7)) + 140|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 $11 = $1;
 if ($10) {
  $12 = ((($11)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $vol = $13;
  $78 = $vol;
  STACKTOP = sp;return ($78|0);
 }
 $14 = ((($11)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $m;
 $17 = ((($16)) + 176|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($15*764)|0)|0);
 $20 = ((($19)) + 760|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $1;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $m;
  $27 = ((($26)) + 176|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*764)|0)|0);
  $30 = ((($29)) + 760|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(133303461);
  if ($33) {
   $34 = $1;
   $35 = ((($34)) + 400|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = ((($39)) + 80|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = Math_imul($38, $41)|0;
   $43 = (($42|0) / 64)&-1;
   $vol = $43;
   $78 = $vol;
   STACKTOP = sp;return ($78|0);
  }
 }
 $44 = $1;
 $45 = ((($44)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $m;
 $48 = ((($47)) + 176|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + (($46*764)|0)|0);
 $51 = ((($50)) + 760|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $1;
  $55 = ((($54)) + 44|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $m;
  $58 = ((($57)) + 176|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + (($56*764)|0)|0);
  $61 = ((($60)) + 760|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(68929562);
  if ($64) {
   $65 = $1;
   $66 = ((($65)) + 400|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $1;
   $71 = ((($70)) + 80|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = Math_imul($69, $72)|0;
   $74 = (($73|0) / 64)&-1;
   $vol = $74;
   $78 = $vol;
   STACKTOP = sp;return ($78|0);
  }
 }
 $75 = $1;
 $76 = ((($75)) + 80|0);
 $77 = HEAP32[$76>>2]|0;
 $vol = $77;
 $78 = $vol;
 STACKTOP = sp;return ($78|0);
}
function _extras_get_period($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $period = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 400|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(133303461);
  if ($10) {
   $11 = $0;
   $12 = $1;
   $13 = (_med_change_period($11,$12)|0);
   $period = $13;
   $14 = $period;
   STACKTOP = sp;return ($14|0);
  }
 }
 $period = 0;
 $14 = $period;
 STACKTOP = sp;return ($14|0);
}
function _extras_get_linear_bend($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $linear_bend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 400|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(133303461);
  if ($10) {
   $11 = $0;
   $12 = $1;
   $13 = (_med_linear_bend($11,$12)|0);
   $linear_bend = $13;
   $26 = $linear_bend;
   STACKTOP = sp;return ($26|0);
  }
 }
 $14 = $1;
 $15 = ((($14)) + 400|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 400|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(68929562);
  if ($22) {
   $23 = $0;
   $24 = $1;
   $25 = (_hmn_linear_bend($23,$24)|0);
   $linear_bend = $25;
   $26 = $linear_bend;
   STACKTOP = sp;return ($26|0);
  }
 }
 $linear_bend = 0;
 $26 = $linear_bend;
 STACKTOP = sp;return ($26|0);
}
function _extras_process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $1;
 $8 = ((($7)) + 400|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 400|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(133303461);
  if ($15) {
   $16 = $0;
   $17 = $1;
   $18 = $2;
   $19 = $3;
   $20 = $4;
   $21 = $5;
   $22 = $6;
   _med_extras_process_fx($16,$17,$18,$19,$20,$21,$22);
   STACKTOP = sp;return;
  }
 }
 $23 = $1;
 $24 = ((($23)) + 400|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ((($27)) + 400|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(68929562);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $0;
 $33 = $1;
 $34 = $2;
 $35 = $3;
 $36 = $4;
 $37 = $5;
 $38 = $6;
 _hmn_extras_process_fx($32,$33,$34,$35,$36,$37,$38);
 STACKTOP = sp;return;
}
function _get_instrument($ctx,$ins) {
 $ctx = $ctx|0;
 $ins = $ins|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, $smix = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $ins;
 $2 = $0;
 $3 = ((($2)) + 8120|0);
 $smix = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $1;
 $8 = $mod;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)<($10|0);
 $12 = $1;
 $13 = $mod;
 if ($11) {
  $14 = ((($13)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*764)|0)|0);
  $xxi = $16;
  $33 = $xxi;
  STACKTOP = sp;return ($33|0);
 }
 $17 = ((($13)) + 140|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $smix;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $23 = ($12|0)<($22|0);
 if ($23) {
  $24 = $1;
  $25 = $mod;
  $26 = ((($25)) + 140|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) - ($27))|0;
  $29 = $smix;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*764)|0)|0);
  $xxi = $32;
  $33 = $xxi;
  STACKTOP = sp;return ($33|0);
 } else {
  $xxi = 0;
  $33 = $xxi;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _get_sample($ctx,$smp) {
 $ctx = $ctx|0;
 $smp = $smp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, $smix = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $smp;
 $2 = $0;
 $3 = ((($2)) + 8120|0);
 $smix = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $1;
 $8 = $mod;
 $9 = ((($8)) + 144|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)<($10|0);
 $12 = $1;
 $13 = $mod;
 if ($11) {
  $14 = ((($13)) + 180|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*52)|0)|0);
  $xxs = $16;
  $33 = $xxs;
  STACKTOP = sp;return ($33|0);
 }
 $17 = ((($13)) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $smix;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $23 = ($12|0)<($22|0);
 if ($23) {
  $24 = $1;
  $25 = $mod;
  $26 = ((($25)) + 144|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) - ($27))|0;
  $29 = $smix;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*52)|0)|0);
  $xxs = $32;
  $33 = $xxs;
  STACKTOP = sp;return ($33|0);
 } else {
  $xxs = 0;
  $33 = $xxs;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _initXmp() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmp_create_context()|0);
 HEAP32[24000>>2] = $0;
 return 0;
}
function _loadXmpModule($buf,$len) {
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $len;
 $2 = HEAP32[24000>>2]|0;
 $3 = $0;
 $4 = $1;
 $5 = (_xmp_load_module_from_memory($2,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _startXmpPlayer($rate) {
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rate;
 $1 = HEAP32[24000>>2]|0;
 $2 = $0;
 (_xmp_start_player($1,$2,0)|0);
 STACKTOP = sp;return 0;
}
function _playXmpFrame() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24000>>2]|0;
 $1 = (_xmp_play_frame($0)|0);
 return ($1|0);
}
function _getXmpFrameInfo() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24000>>2]|0;
 _xmp_get_frame_info($0,24008);
 return 0;
}
function _getXmpModuleInfo() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24000>>2]|0;
 _xmp_get_module_info($0,25616);
 return 0;
}
function _getXmpLoopCount() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(24064)>>2]|0;
 return ($0|0);
}
function _getXmpSoundBufferLen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(24052)>>2]|0;
 return ($0|0);
}
function _getXmpSoundBuffer() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(24048)>>2]|0;
 return ($0|0);
}
function _endXmp() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24000>>2]|0;
 _xmp_end_player($0);
 $1 = HEAP32[24000>>2]|0;
 _xmp_release_module($1);
 $2 = HEAP32[24000>>2]|0;
 _xmp_free_context($2);
 return 0;
}
function _getMusicInfo() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24000>>2]|0;
 _xmp_get_module_info($0,25616);
 $1 = HEAP32[(25636)>>2]|0;
 HEAP32[25656>>2] = $1;
 $2 = HEAP32[(25636)>>2]|0;
 $3 = ((($2)) + 64|0);
 HEAP32[(25660)>>2] = $3;
 return (25656|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 return ($2|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$66 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre6$i = 0, $$pre6$i26 = 0, $$sum = 0, $$sum$i = 0, $$sum$i17 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i29 = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond68 = 0, $or$cond6873 = 0, $or$cond72 = 0;
 var $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $sum = 0, $sum$i = 0, $sum$i16 = 0, $tmp$i = 0, $tmp$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i25 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = ((($lp)) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$51 = 0;$head$076 = $base;$pshift$077 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$076;
     $18 = ($pshift$077|0)>(1);
     L13: do {
      if ($18) {
       $$012$i = $pshift$077;$$03$i = $head$076;$24 = $head$076;$i$04$i = 1;
       while(1) {
        $19 = (($$03$i) + ($10)|0);
        $20 = (($$012$i) + -2)|0;
        $21 = (($lp) + ($20<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $sum$i = (($22) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $23 = (($$03$i) + ($$sum$i)|0);
        $25 = (FUNCTION_TABLE_iii[$cmp & 511]($24,$23)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (FUNCTION_TABLE_iii[$cmp & 511]($24,$19)|0);
         $28 = ($27|0)>(-1);
         if ($28) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $29 = (FUNCTION_TABLE_iii[$cmp & 511]($23,$19)|0);
        $30 = ($29|0)>(-1);
        $31 = (($i$04$i) + 1)|0;
        $32 = (($ar$i) + ($i$04$i<<2)|0);
        if ($30) {
         HEAP32[$32>>2] = $23;
         $33 = (($$012$i) + -1)|0;
         $$0$be$i = $23;$$01$be$i = $33;
        } else {
         HEAP32[$32>>2] = $19;
         $$0$be$i = $19;$$01$be$i = $20;
        }
        $34 = ($$01$be$i|0)>(1);
        if (!($34)) {
         $i$0$lcssa$i = $31;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
       }
       $35 = ($i$0$lcssa$i|0)<(2);
       if (!($35)) {
        $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$36>>2] = $tmp$i;
        if (!($13)) {
         $$02$us$i = $width;$48 = $tmp$i;
         while(1) {
          $46 = ($$02$us$i>>>0)>(256);
          $38 = $46 ? 256 : $$02$us$i;
          $47 = HEAP32[$ar$i>>2]|0;
          _memcpy(($48|0),($47|0),($38|0))|0;
          $44 = $47;$i$01$us$i = 0;
          while(1) {
           $40 = (($ar$i) + ($i$01$us$i<<2)|0);
           $41 = (($i$01$us$i) + 1)|0;
           $42 = (($ar$i) + ($41<<2)|0);
           $43 = HEAP32[$42>>2]|0;
           _memcpy(($44|0),($43|0),($38|0))|0;
           $45 = (($44) + ($38)|0);
           HEAP32[$40>>2] = $45;
           $exitcond$i = ($41|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $44 = $43;$i$01$us$i = $41;
           }
          }
          $37 = ($$02$us$i|0)==($38|0);
          if ($37) {
           break L13;
          }
          $39 = (($$02$us$i) - ($38))|0;
          $$pre6$i = HEAP32[$36>>2]|0;
          $$02$us$i = $39;$48 = $$pre6$i;
         }
        }
       }
      } else {
      }
     } while(0);
     $49 = $16 >>> 2;
     $50 = $51 << 30;
     $52 = $49 | $50;
     $53 = $51 >>> 2;
     $54 = (($pshift$077) + 2)|0;
     $105 = $52;$168 = $53;$pshift$1 = $54;
    } else {
     $55 = (($pshift$077) + -1)|0;
     $56 = (($lp) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $head$076;
     $59 = (($14) - ($58))|0;
     $60 = ($57>>>0)<($59>>>0);
     if ($60) {
      HEAP32[$ar$i>>2] = $head$076;
      $61 = ($pshift$077|0)>(1);
      L37: do {
       if ($61) {
        $$012$i15 = $pshift$077;$$03$i14 = $head$076;$67 = $head$076;$i$04$i13 = 1;
        while(1) {
         $62 = (($$03$i14) + ($10)|0);
         $63 = (($$012$i15) + -2)|0;
         $64 = (($lp) + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $sum$i16 = (($65) + ($width))|0;
         $$sum$i17 = (0 - ($sum$i16))|0;
         $66 = (($$03$i14) + ($$sum$i17)|0);
         $68 = (FUNCTION_TABLE_iii[$cmp & 511]($67,$66)|0);
         $69 = ($68|0)>(-1);
         if ($69) {
          $70 = (FUNCTION_TABLE_iii[$cmp & 511]($67,$62)|0);
          $71 = ($70|0)>(-1);
          if ($71) {
           $i$0$lcssa$i23 = $i$04$i13;
           break;
          }
         }
         $72 = (FUNCTION_TABLE_iii[$cmp & 511]($66,$62)|0);
         $73 = ($72|0)>(-1);
         $74 = (($i$04$i13) + 1)|0;
         $75 = (($ar$i) + ($i$04$i13<<2)|0);
         if ($73) {
          HEAP32[$75>>2] = $66;
          $76 = (($$012$i15) + -1)|0;
          $$0$be$i19 = $66;$$01$be$i18 = $76;
         } else {
          HEAP32[$75>>2] = $62;
          $$0$be$i19 = $62;$$01$be$i18 = $63;
         }
         $77 = ($$01$be$i18|0)>(1);
         if (!($77)) {
          $i$0$lcssa$i23 = $74;
          break;
         }
         $$pre$i21 = HEAP32[$ar$i>>2]|0;
         $$012$i15 = $$01$be$i18;$$03$i14 = $$0$be$i19;$67 = $$pre$i21;$i$04$i13 = $74;
        }
        $78 = ($i$0$lcssa$i23|0)<(2);
        if (!($78)) {
         $79 = (($ar$i) + ($i$0$lcssa$i23<<2)|0);
         HEAP32[$79>>2] = $tmp$i25;
         if (!($13)) {
          $$02$us$i30 = $width;$91 = $tmp$i25;
          while(1) {
           $89 = ($$02$us$i30>>>0)>(256);
           $81 = $89 ? 256 : $$02$us$i30;
           $90 = HEAP32[$ar$i>>2]|0;
           _memcpy(($91|0),($90|0),($81|0))|0;
           $87 = $90;$i$01$us$i28 = 0;
           while(1) {
            $83 = (($ar$i) + ($i$01$us$i28<<2)|0);
            $84 = (($i$01$us$i28) + 1)|0;
            $85 = (($ar$i) + ($84<<2)|0);
            $86 = HEAP32[$85>>2]|0;
            _memcpy(($87|0),($86|0),($81|0))|0;
            $88 = (($87) + ($81)|0);
            HEAP32[$83>>2] = $88;
            $exitcond$i29 = ($84|0)==($i$0$lcssa$i23|0);
            if ($exitcond$i29) {
             break;
            } else {
             $87 = $86;$i$01$us$i28 = $84;
            }
           }
           $80 = ($$02$us$i30|0)==($81|0);
           if ($80) {
            break L37;
           }
           $82 = (($$02$us$i30) - ($81))|0;
           $$pre6$i26 = HEAP32[$79>>2]|0;
           $$02$us$i30 = $82;$91 = $$pre6$i26;
          }
         }
        }
       } else {
       }
      } while(0);
     } else {
      _trinkle($head$076,$width,$cmp,$16,$51,$pshift$077,0,$lp);
     }
     $92 = ($pshift$077|0)==(1);
     if ($92) {
      $93 = $51 << 1;
      $94 = $16 >>> 31;
      $95 = $94 | $93;
      $96 = $16 << 1;
      $105 = $96;$168 = $95;$pshift$1 = 0;
      break;
     } else {
      $97 = ($55>>>0)>(31);
      $98 = (($pshift$077) + -33)|0;
      $$ = $97 ? 0 : $16;
      $$66 = $97 ? $16 : $51;
      $$67 = $97 ? $98 : $55;
      $99 = $$66 << $$67;
      $100 = (32 - ($$67))|0;
      $101 = $$ >>> $100;
      $102 = $101 | $99;
      $103 = $$ << $$67;
      $105 = $103;$168 = $102;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $104 = $105 | 1;
   $106 = (($head$076) + ($width)|0);
   $107 = ($106>>>0)<($11>>>0);
   if ($107) {
    $16 = $104;$51 = $168;$head$076 = $106;$pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;$$lcssa71 = $104;$head$0$lcssa = $106;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;$$lcssa71 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa71,$$lcssa70,$pshift$0$lcssa,0,$lp);
 $108 = ($pshift$0$lcssa|0)==(1);
 $109 = ($$lcssa71|0)==(1);
 $or$cond72 = $109 & $108;
 $110 = ($$lcssa70|0)==(0);
 $or$cond6873 = $110 & $or$cond72;
 if ($or$cond6873) {
  STACKTOP = sp;return;
 } else {
  $113 = $$lcssa71;$122 = $$lcssa70;$head$174 = $head$0$lcssa;$pshift$275 = $pshift$0$lcssa;
 }
 while(1) {
  $111 = ($pshift$275|0)<(2);
  if (!($111)) {
   $136 = $122 << 2;
   $137 = $113 >>> 30;
   $138 = $137 | $136;
   $139 = (($pshift$275) + -2)|0;
   $140 = $113 << 1;
   $141 = $140 & 2147483646;
   $142 = $137 << 31;
   $143 = $141 | $142;
   $144 = $143 ^ 3;
   $145 = $138 >>> 1;
   $146 = (($lp) + ($139<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $sum = (($147) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $148 = (($head$174) + ($$sum2)|0);
   $149 = (($pshift$275) + -1)|0;
   _trinkle($148,$width,$cmp,$144,$145,$149,1,$lp);
   $150 = $145 << 1;
   $151 = $137 & 1;
   $152 = $150 | $151;
   $153 = $144 << 1;
   $154 = $153 | 1;
   $155 = (($head$174) + ($10)|0);
   _trinkle($155,$width,$cmp,$154,$152,$139,1,$lp);
   $113 = $154;$122 = $152;$head$174 = $155;$pshift$275 = $139;
   continue;
  }
  $112 = (($113) + -1)|0;
  $114 = ($112|0)==(0);
  do {
   if ($114) {
    $135 = 32;
    label = 56;
   } else {
    $115 = $112 & 1;
    $116 = ($115|0)==(0);
    if ($116) {
     $$02$i$i = $112;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $117 = (($nTrailingZeros$03$i$i) + 1)|0;
      $118 = $$02$i$i >>> 1;
      $119 = $118 & 1;
      $120 = ($119|0)==(0);
      if ($120) {
       $$02$i$i = $118;$nTrailingZeros$03$i$i = $117;
      } else {
       $$lcssa = $117;
       break;
      }
     }
     $121 = ($$lcssa|0)==(0);
     if ($121) {
      label = 51;
     } else {
      $132 = $$lcssa;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     $123 = ($122|0)==(0);
     if ($123) {
      $135 = 64;
      label = 56;
      break;
     }
     $124 = $122 & 1;
     $125 = ($124|0)==(0);
     if ($125) {
      $$02$i3$i = $122;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     }
     while(1) {
      $126 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $127 = $$02$i3$i >>> 1;
      $128 = $127 & 1;
      $129 = ($128|0)==(0);
      if ($129) {
       $$02$i3$i = $127;$nTrailingZeros$03$i2$i = $126;
      } else {
       $$lcssa102 = $126;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      }
     }
     $130 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
     $131 = ($$lcssa102|0)==(0);
     if ($131) {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     } else {
      $132 = $130;
     }
    }
    $133 = ($132>>>0)>(31);
    if ($133) {
     $135 = $132;
     label = 56;
    } else {
     $$0$i44 = $132;$157 = $113;$160 = $122;$164 = $132;
    }
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $134 = (($135) + -32)|0;
   $$0$i44 = $134;$157 = $122;$160 = 0;$164 = $135;
  }
  $156 = $157 >>> $$0$i44;
  $158 = (32 - ($$0$i44))|0;
  $159 = $160 << $158;
  $161 = $159 | $156;
  $162 = $160 >>> $$0$i44;
  $163 = (($164) + ($pshift$275))|0;
  $$pre = (($head$174) + ($10)|0);
  $165 = ($163|0)==(1);
  $166 = ($161|0)==(1);
  $or$cond = $166 & $165;
  $167 = ($162|0)==(0);
  $or$cond68 = $167 & $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $113 = $161;$122 = $162;$head$174 = $$pre;$pshift$275 = $163;
  }
 }
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = ((($$0211)) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = ((($w$08)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = ((($$1)) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = ((($$023)) + 1|0);
    $7 = ((($$05)) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre6$i = 0, $$pre6$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i9 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $pp$val1666 = 0, $sum = 0, $sum$i = 0, $tmp$i = 0, $tmp$i5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i5 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 511]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $$01162 = $head;$$02964 = $pshift;$$03865 = $trusty;$16 = $7;$33 = $pp$1$val;$i$01063 = 1;$pp$val1666 = $pp$val;
    while(1) {
     $10 = ($$03865|0)==(0);
     $11 = ($$02964|0)>(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($$01162) + ($0)|0);
      $13 = (($$02964) + -2)|0;
      $14 = (($lp) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $17 = (FUNCTION_TABLE_iii[$cmp & 511]($12,$16)|0);
      $18 = ($17|0)>(-1);
      if ($18) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
      $sum = (($15) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $19 = (($$01162) + ($$sum)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 511]($19,$16)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
     }
     $22 = (($i$01063) + 1)|0;
     $23 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$23>>2] = $16;
     $24 = (($pp$val1666) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $46 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $$lcssa = $28;
          break;
         }
        }
        $32 = ($$lcssa|0)==(0);
        if ($32) {
         label = 10;
        } else {
         $43 = $$lcssa;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $34 = ($33|0)==(0);
        if ($34) {
         $46 = 64;
         label = 15;
         break;
        }
        $35 = $33 & 1;
        $36 = ($35|0)==(0);
        if ($36) {
         $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        }
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$lcssa76 = $37;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $41 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $42 = ($$lcssa76|0)==(0);
        if ($42) {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        } else {
         $43 = $41;
        }
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $pp$val1666;$51 = $33;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$02964))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa49 = $16;$$02$lcssa51 = $54;$i$0$lcssa50 = $22;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($16) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 511]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $16;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $22;
      label = 18;
      break;
     } else {
      $$01162$phi = $16;$$02964 = $54;$$03865 = 0;$16 = $62;$33 = $53;$i$01063 = $22;$pp$val1666 = $52;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $66 = ($i$0$lcssa50|0)<(2);
 L30: do {
  if (!($66)) {
   $67 = (($ar) + ($i$0$lcssa50<<2)|0);
   HEAP32[$67>>2] = $tmp$i5;
   $68 = ($width|0)==(0);
   if (!($68)) {
    $$02$us$i10 = $width;$80 = $tmp$i5;
    while(1) {
     $78 = ($$02$us$i10>>>0)>(256);
     $70 = $78 ? 256 : $$02$us$i10;
     $79 = HEAP32[$ar>>2]|0;
     _memcpy(($80|0),($79|0),($70|0))|0;
     $76 = $79;$i$01$us$i8 = 0;
     while(1) {
      $72 = (($ar) + ($i$01$us$i8<<2)|0);
      $73 = (($i$01$us$i8) + 1)|0;
      $74 = (($ar) + ($73<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      _memcpy(($76|0),($75|0),($70|0))|0;
      $77 = (($76) + ($70)|0);
      HEAP32[$72>>2] = $77;
      $exitcond$i9 = ($73|0)==($i$0$lcssa50|0);
      if ($exitcond$i9) {
       break;
      } else {
       $76 = $75;$i$01$us$i8 = $73;
      }
     }
     $69 = ($$02$us$i10|0)==($70|0);
     if ($69) {
      break L30;
     }
     $71 = (($$02$us$i10) - ($70))|0;
     $$pre6$i6 = HEAP32[$67>>2]|0;
     $$02$us$i10 = $71;$80 = $$pre6$i6;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $81 = ($$02$lcssa51|0)>(1);
 L39: do {
  if ($81) {
   $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$87 = $$0$lcssa49;$i$04$i = 1;
   while(1) {
    $82 = (($$03$i) + ($0)|0);
    $83 = (($$012$i) + -2)|0;
    $84 = (($lp) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $sum$i = (($85) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $86 = (($$03$i) + ($$sum$i)|0);
    $88 = (FUNCTION_TABLE_iii[$cmp & 511]($87,$86)|0);
    $89 = ($88|0)>(-1);
    if ($89) {
     $90 = (FUNCTION_TABLE_iii[$cmp & 511]($87,$82)|0);
     $91 = ($90|0)>(-1);
     if ($91) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $92 = (FUNCTION_TABLE_iii[$cmp & 511]($86,$82)|0);
    $93 = ($92|0)>(-1);
    $94 = (($i$04$i) + 1)|0;
    $95 = (($ar$i) + ($i$04$i<<2)|0);
    if ($93) {
     HEAP32[$95>>2] = $86;
     $96 = (($$012$i) + -1)|0;
     $$0$be$i = $86;$$01$be$i = $96;
    } else {
     HEAP32[$95>>2] = $82;
     $$0$be$i = $82;$$01$be$i = $83;
    }
    $97 = ($$01$be$i|0)>(1);
    if (!($97)) {
     $i$0$lcssa$i = $94;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$87 = $$pre$i;$i$04$i = $94;
   }
   $98 = ($i$0$lcssa$i|0)<(2);
   if ($98) {
    $113 = $tmp$i;
   } else {
    $99 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$99>>2] = $tmp$i;
    $100 = ($width|0)==(0);
    if ($100) {
     $113 = $tmp$i;
    } else {
     $$02$us$i = $width;$112 = $tmp$i;
     while(1) {
      $110 = ($$02$us$i>>>0)>(256);
      $102 = $110 ? 256 : $$02$us$i;
      $111 = HEAP32[$ar$i>>2]|0;
      _memcpy(($112|0),($111|0),($102|0))|0;
      $108 = $111;$i$01$us$i = 0;
      while(1) {
       $104 = (($ar$i) + ($i$01$us$i<<2)|0);
       $105 = (($i$01$us$i) + 1)|0;
       $106 = (($ar$i) + ($105<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       _memcpy(($108|0),($107|0),($102|0))|0;
       $109 = (($108) + ($102)|0);
       HEAP32[$104>>2] = $109;
       $exitcond$i = ($105|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $108 = $107;$i$01$us$i = $105;
       }
      }
      $101 = ($$02$us$i|0)==($102|0);
      if ($101) {
       $113 = $tmp$i;
       break L39;
      }
      $103 = (($$02$us$i) - ($102))|0;
      $$pre6$i = HEAP32[$99>>2]|0;
      $$02$us$i = $103;$112 = $$pre6$i;
     }
    }
   }
  } else {
   $113 = $tmp$i;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    return (+$$0);
   }
   if (!($3)) {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    break;
   }
   $10 = $x - $x;
   $11 = $10 / 0.0;
   $$0 = $11;
   return (+$$0);
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
    return (+$$0);
   }
   $16 = ($1|0)==(1072693248);
   $17 = ($0|0)==(0);
   $18 = (0)==(0);
   $19 = $17 & $18;
   $or$cond4 = $19 & $16;
   if ($or$cond4) {
    $$0 = 0.0;
    return (+$$0);
   } else {
    $26 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
   }
  }
 } while(0);
 $20 = (($hx$0) + 614242)|0;
 $21 = $20 >>> 20;
 $22 = (($k$0) + ($21))|0;
 $23 = $20 & 1048575;
 $24 = (($23) + 1072079006)|0;
 HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
 $27 = $25 + -1.0;
 $28 = $27 * 0.5;
 $29 = $27 * $28;
 $30 = $27 + 2.0;
 $31 = $27 / $30;
 $32 = $31 * $31;
 $33 = $32 * $32;
 $34 = $33 * 0.15313837699209373;
 $35 = $34 + 0.22222198432149784;
 $36 = $33 * $35;
 $37 = $36 + 0.39999999999409419;
 $38 = $33 * $37;
 $39 = $33 * 0.14798198605116586;
 $40 = $39 + 0.1818357216161805;
 $41 = $33 * $40;
 $42 = $41 + 0.28571428743662391;
 $43 = $33 * $42;
 $44 = $43 + 0.66666666666667351;
 $45 = $32 * $44;
 $46 = $38 + $45;
 $47 = $27 - $29;
 HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
 $49 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
 $51 = $27 - $50;
 $52 = $51 - $29;
 $53 = $29 + $46;
 $54 = $31 * $53;
 $55 = $54 + $52;
 $56 = $50 * 0.43429448187816888;
 $57 = (+($22|0));
 $58 = $57 * 0.30102999566361177;
 $59 = $57 * 3.6942390771589308E-13;
 $60 = $50 + $55;
 $61 = $60 * 2.5082946711645275E-11;
 $62 = $59 + $61;
 $63 = $55 * 0.43429448187816888;
 $64 = $63 + $62;
 $65 = $58 + $56;
 $66 = $58 - $65;
 $67 = $56 + $66;
 $68 = $67 + $64;
 $69 = $65 + $68;
 $$0 = $69;
 return (+$$0);
}
function _round($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $__x = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = ($4>>>0)>(1074);
 if ($5) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($1|0)<(0);
 $7 = -$x;
 $$x = $6 ? $7 : $x;
 $8 = ($4>>>0)<(1022);
 $9 = $$x + 4503599627370496.0;
 if ($8) {
  $__x = $9;
  $10 = $x * 0.0;
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
 }
 $11 = $9 + -4503599627370496.0;
 $12 = $11 - $$x;
 $13 = $12 > 0.5;
 if ($13) {
  $14 = $$x + $12;
  $15 = $14 + -1.0;
  $y$0 = $15;
 } else {
  $16 = !($12 <= -0.5);
  $17 = $$x + $12;
  if ($16) {
   $y$0 = $17;
  } else {
   $18 = $17 + 1.0;
   $y$0 = $18;
  }
 }
 $19 = -$y$0;
 $$y$0 = $6 ? $19 : $y$0;
 $$0 = $$y$0;
 STACKTOP = sp;return (+$$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 25664;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 25664;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=25672; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $5 & $4;
    $7 = ($6<<24>>24)==($3<<24>>24);
    $or$cond4 = $7 & $or$cond;
    if (!($or$cond4)) {
     $13 = $6;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = ((($l$06)) + 1|0);
    $9 = ((($r$07)) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0;
 var $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412184$i = 0;
 var $$5196$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa106 = 0, $$lcssa275$i = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa455 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0;
 var $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa470 = 0, $$lcssa474 = 0, $$lcssa476 = 0, $$lcssa479 = 0, $$lcssa480 = 0, $$lcssa483 = 0.0, $$lcssa484 = 0, $$lcssa487 = 0, $$lcssa491 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0;
 var $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre270 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
 var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
 var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
 var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0.0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0.0, $1162 = 0, $1163 = 0;
 var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $1169$phi = 0, $117 = 0, $1170 = 0, $1170$phi = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0;
 var $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0;
 var $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0;
 var $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0;
 var $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0, $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0;
 var $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0;
 var $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0;
 var $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0;
 var $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0;
 var $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0;
 var $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0;
 var $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1186 = 0, $i$1222$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2209$i = 0, $i$3160 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond332 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa456 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1169 = 0;$1170 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1171 = $22;$26 = $23;
  }
  while(1) {
   if ((($1171<<24>>24) == 37)) {
    $28 = $26;$z$0163 = $26;
    label = 9;
    break;
   } else if ((($1171<<24>>24) == 0)) {
    $$lcssa106 = $26;$z$0$lcssa = $26;
    break;
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1171 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa106 = $28;$z$0$lcssa = $z$0163;
      break L12;
     }
     $31 = ((($z$0163)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$0163 = $31;
      label = 9;
     } else {
      $$lcssa106 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1170$phi = $1170;$1169$phi = $1169;$23 = $$lcssa106;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1170 = $1170$phi;$1169 = $1169$phi;
   continue;
  }
  $39 = ((($$lcssa106)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($$lcssa106)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($$lcssa106)) + 3|0);
   $$92 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre270 = HEAP8[$$92>>0]|0;
   $47 = $$pre270;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L24: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$0110 = $fl$0170;$storemerge8108 = $storemerge8169;
      break L24;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0170;
     $60 = ((($storemerge8169)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
     } else {
      $65 = $61;$fl$0110 = $59;$storemerge8108 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge8108)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge8108)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge8108)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $105 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded64 = $87;
     $expanded = (($expanded64) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded68 = $89;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $90 = $88 & $expanded66;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$0110 | 8192;
     $95 = (0 - ($w$0))|0;
     $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $105 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa450 = $98;$$lcssa451 = $99;
       break;
      }
     }
     $103 = ($$lcssa450|0)<(0);
     if ($103) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $105 = $$lcssa451;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa450;
     }
    } else {
     $105 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$105>>0]|0;
  $106 = ($104<<24>>24)==(46);
  L45: do {
   if ($106) {
    $107 = ((($105)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i27 = (($136) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $140 = $107;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $1172 = $107;$p$0 = 0;
      break;
     }
     while(1) {
      $137 = ($i$03$i30*10)|0;
      $138 = (($137) + ($isdigittmp4$i29))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i31 = (($142) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $140 = $139;$i$03$i30 = $138;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $1172 = $139;$p$0 = $138;
       break L45;
      }
     }
    }
    $110 = ((($105)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($105)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($105)) + 4|0);
      $1172 = $127;$p$0 = $123;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded71 = $130;
     $expanded70 = (($expanded71) - 1)|0;
     $131 = (($129) + ($expanded70))|0;
     $132 = ((0) + 4|0);
     $expanded75 = $132;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $133 = $131 & $expanded73;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1172 = $110;$p$0 = $135;
    } else {
     $1172 = $110;$p$0 = 0;
    }
   } else {
    $1172 = $105;$p$0 = -1;
   }
  } while(0);
  $144 = $1172;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$144>>0]|0;
   $145 = $143 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ($146>>>0)>(57);
   if ($147) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $148 = ((($144)) + 1|0);
   $149 = ((25784 + (($st$0*58)|0)|0) + ($146)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($151) + -1)|0;
   $153 = ($152>>>0)<(8);
   if ($153) {
    $144 = $148;$st$0 = $151;
   } else {
    $$lcssa455 = $144;$$lcssa457 = $148;$$lcssa458 = $150;$$lcssa459 = $151;$st$0$lcssa456 = $st$0;
    break;
   }
  }
  $154 = ($$lcssa458<<24>>24)==(0);
  if ($154) {
   $$0 = -1;
   label = 363;
   break;
  }
  $155 = ($$lcssa458<<24>>24)==(19);
  $156 = ($argpos$0|0)>(-1);
  L64: do {
   if ($155) {
    if ($156) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1173 = $1169;$1174 = $1170;
     label = 62;
    }
   } else {
    if ($156) {
     $157 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$157>>2] = $$lcssa459;
     $158 = (($nl_arg) + ($argpos$0<<3)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($158)) + 4|0);
     $161 = HEAP32[$160>>2]|0;
     $1173 = $161;$1174 = $159;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $162 = ($$lcssa458&255)>(20);
    if ($162) {
     $264 = $1170;$291 = $1169;
    } else {
     do {
      switch ($$lcssa459|0) {
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $230 = $arglist_current26;
       $231 = ((0) + 4|0);
       $expanded127 = $231;
       $expanded126 = (($expanded127) - 1)|0;
       $232 = (($230) + ($expanded126))|0;
       $233 = ((0) + 4|0);
       $expanded131 = $233;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $234 = $232 & $expanded129;
       $235 = $234;
       $236 = HEAP32[$235>>2]|0;
       $arglist_next27 = ((($235)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $236 & 255;
       $264 = $$mask$i38;$291 = 0;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $163 = $arglist_current5;
       $164 = ((0) + 4|0);
       $expanded78 = $164;
       $expanded77 = (($expanded78) - 1)|0;
       $165 = (($163) + ($expanded77))|0;
       $166 = ((0) + 4|0);
       $expanded82 = $166;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $167 = $165 & $expanded80;
       $168 = $167;
       $169 = HEAP32[$168>>2]|0;
       $arglist_next6 = ((($168)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $170 = $169;
       $264 = $170;$291 = $1169;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $246 = $arglist_current32;
       $247 = ((0) + 8|0);
       $expanded141 = $247;
       $expanded140 = (($expanded141) - 1)|0;
       $248 = (($246) + ($expanded140))|0;
       $249 = ((0) + 8|0);
       $expanded145 = $249;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $250 = $248 & $expanded143;
       $251 = $250;
       $252 = +HEAPF64[$251>>3];
       $arglist_next33 = ((($251)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $252;$253 = HEAP32[tempDoublePtr>>2]|0;
       $254 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $253;$291 = $254;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $237 = $arglist_current29;
       $238 = ((0) + 8|0);
       $expanded134 = $238;
       $expanded133 = (($expanded134) - 1)|0;
       $239 = (($237) + ($expanded133))|0;
       $240 = ((0) + 8|0);
       $expanded138 = $240;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $241 = $239 & $expanded136;
       $242 = $241;
       $243 = +HEAPF64[$242>>3];
       $arglist_next30 = ((($242)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $243;$244 = HEAP32[tempDoublePtr>>2]|0;
       $245 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $244;$291 = $245;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $171 = $arglist_current8;
       $172 = ((0) + 4|0);
       $expanded85 = $172;
       $expanded84 = (($expanded85) - 1)|0;
       $173 = (($171) + ($expanded84))|0;
       $174 = ((0) + 4|0);
       $expanded89 = $174;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $175 = $173 & $expanded87;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $arglist_next9 = ((($176)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $178 = ($177|0)<(0);
       $179 = $178 << 31 >> 31;
       $264 = $177;$291 = $179;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $187 = $arglist_current14;
       $188 = ((0) + 8|0);
       $expanded99 = $188;
       $expanded98 = (($expanded99) - 1)|0;
       $189 = (($187) + ($expanded98))|0;
       $190 = ((0) + 8|0);
       $expanded103 = $190;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $191 = $189 & $expanded101;
       $192 = $191;
       $193 = $192;
       $194 = $193;
       $195 = HEAP32[$194>>2]|0;
       $196 = (($193) + 4)|0;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $arglist_next15 = ((($192)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $264 = $195;$291 = $198;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $199 = $arglist_current17;
       $200 = ((0) + 4|0);
       $expanded106 = $200;
       $expanded105 = (($expanded106) - 1)|0;
       $201 = (($199) + ($expanded105))|0;
       $202 = ((0) + 4|0);
       $expanded110 = $202;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $203 = $201 & $expanded108;
       $204 = $203;
       $205 = HEAP32[$204>>2]|0;
       $arglist_next18 = ((($204)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $206 = $205&65535;
       $207 = $206 << 16 >> 16;
       $208 = ($207|0)<(0);
       $209 = $208 << 31 >> 31;
       $sext93 = $205 << 16;
       $210 = $sext93 >> 16;
       $264 = $210;$291 = $209;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $218 = $arglist_current23;
       $219 = ((0) + 4|0);
       $expanded120 = $219;
       $expanded119 = (($expanded120) - 1)|0;
       $220 = (($218) + ($expanded119))|0;
       $221 = ((0) + 4|0);
       $expanded124 = $221;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $222 = $220 & $expanded122;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $arglist_next24 = ((($223)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $225 = $224&255;
       $226 = $225 << 24 >> 24;
       $227 = ($226|0)<(0);
       $228 = $227 << 31 >> 31;
       $sext = $224 << 24;
       $229 = $sext >> 24;
       $264 = $229;$291 = $228;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $211 = $arglist_current20;
       $212 = ((0) + 4|0);
       $expanded113 = $212;
       $expanded112 = (($expanded113) - 1)|0;
       $213 = (($211) + ($expanded112))|0;
       $214 = ((0) + 4|0);
       $expanded117 = $214;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $215 = $213 & $expanded115;
       $216 = $215;
       $217 = HEAP32[$216>>2]|0;
       $arglist_next21 = ((($216)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $217 & 65535;
       $264 = $$mask1$i37;$291 = 0;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $180 = $arglist_current11;
       $181 = ((0) + 4|0);
       $expanded92 = $181;
       $expanded91 = (($expanded92) - 1)|0;
       $182 = (($180) + ($expanded91))|0;
       $183 = ((0) + 4|0);
       $expanded96 = $183;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $184 = $182 & $expanded94;
       $185 = $184;
       $186 = HEAP32[$185>>2]|0;
       $arglist_next12 = ((($185)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $264 = $186;$291 = 0;
       break L64;
       break;
      }
      default: {
       $264 = $1170;$291 = $1169;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $264 = $1174;$291 = $1173;
   } else {
    $1169 = $1173;$1170 = $1174;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $255 = HEAP8[$$lcssa455>>0]|0;
  $256 = $255 << 24 >> 24;
  $257 = ($st$0$lcssa456|0)!=(0);
  $258 = $256 & 15;
  $259 = ($258|0)==(3);
  $or$cond15 = $257 & $259;
  $260 = $256 & -33;
  $t$0 = $or$cond15 ? $260 : $256;
  $261 = $fl$1 & 8192;
  $262 = ($261|0)==(0);
  $263 = $fl$1 & -65537;
  $fl$1$ = $262 ? $fl$1 : $263;
  L86: do {
   switch ($t$0|0) {
   case 115:  {
    $382 = $264;
    $383 = ($264|0)!=(0);
    $384 = $383 ? $382 : 26280;
    $a$1 = $384;
    label = 94;
    break;
   }
   case 112:  {
    $286 = ($p$0>>>0)>(8);
    $287 = $286 ? $p$0 : 8;
    $288 = $fl$1$ | 8;
    $fl$3 = $288;$p$1 = $287;$t$1 = 120;
    label = 73;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 99:  {
    $378 = $264&255;
    HEAP8[$4>>0] = $378;
    $1175 = $291;$1176 = $264;$a$2 = $4;$fl$6 = $263;$p$5 = 1;$pl$2 = 0;$prefix$2 = 26264;$z$2 = $2;
    break;
   }
   case 111:  {
    $312 = ($264|0)==(0);
    $313 = ($291|0)==(0);
    $314 = $312 & $313;
    if ($314) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$316 = $264;$320 = $291;
     while(1) {
      $315 = $316 & 7;
      $317 = $315 | 48;
      $318 = $317&255;
      $319 = ((($$03$i48)) + -1|0);
      HEAP8[$319>>0] = $318;
      $321 = (_bitshift64Lshr(($316|0),($320|0),3)|0);
      $322 = tempRet0;
      $323 = ($321|0)==(0);
      $324 = ($322|0)==(0);
      $325 = $323 & $324;
      if ($325) {
       $$0$lcssa$i51 = $319;
       break;
      } else {
       $$03$i48 = $319;$316 = $321;$320 = $322;
      }
     }
    }
    $326 = $fl$1$ & 8;
    $327 = ($326|0)==(0);
    $or$cond19 = $327 | $314;
    $$24 = $or$cond19 ? 26264 : (26269);
    $328 = $or$cond19&1;
    $$25 = $328 ^ 1;
    $366 = $264;$368 = $291;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 109:  {
    $379 = (___errno_location()|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = (_strerror(($380|0))|0);
    $a$1 = $381;
    label = 94;
    break;
   }
   case 117:  {
    $336 = $291;$338 = $264;$pl$0 = 0;$prefix$0 = 26264;
    label = 84;
    break;
   }
   case 83:  {
    $391 = $264;
    $392 = ($p$0|0)==(0);
    if ($392) {
     $1181 = $264;$1182 = $391;$i$0$lcssa273 = 0;
     label = 102;
    } else {
     $1179 = $391;$1180 = $264;$p$4272 = $p$0;
     label = 97;
    }
    break;
   }
   case 105: case 100:  {
    $329 = ($291|0)<(0);
    if ($329) {
     $330 = (_i64Subtract(0,0,($264|0),($291|0))|0);
     $331 = tempRet0;
     $336 = $331;$338 = $330;$pl$0 = 1;$prefix$0 = 26264;
     label = 84;
     break L86;
    }
    $332 = $fl$1$ & 2048;
    $333 = ($332|0)==(0);
    if ($333) {
     $334 = $fl$1$ & 1;
     $335 = ($334|0)==(0);
     $$ = $335 ? 26264 : (26266);
     $336 = $291;$338 = $264;$pl$0 = $334;$prefix$0 = $$;
     label = 84;
    } else {
     $336 = $291;$338 = $264;$pl$0 = 1;$prefix$0 = (26265);
     label = 84;
    }
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $264;
    HEAP32[$5>>2] = 0;
    $1179 = $wc;$1180 = $6;$p$4272 = -1;
    label = 97;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $264;HEAP32[tempDoublePtr+4>>2] = $291;$430 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $431 = ($291|0)<(0);
    if ($431) {
     $432 = -$430;
     $$07$i = $432;$pl$0$i = 1;$prefix$0$i = 26288;
    } else {
     $433 = $fl$1$ & 2048;
     $434 = ($433|0)==(0);
     if ($434) {
      $435 = $fl$1$ & 1;
      $436 = ($435|0)==(0);
      $$$i = $436 ? (26289) : (26294);
      $$07$i = $430;$pl$0$i = $435;$prefix$0$i = $$$i;
     } else {
      $$07$i = $430;$pl$0$i = 1;$prefix$0$i = (26291);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$437 = HEAP32[tempDoublePtr>>2]|0;
    $438 = HEAP32[tempDoublePtr+4>>2]|0;
    $439 = $438 & 2146435072;
    $440 = ($439>>>0)<(2146435072);
    $441 = (0)<(0);
    $442 = ($439|0)==(2146435072);
    $443 = $442 & $441;
    $444 = $440 | $443;
    do {
     if ($444) {
      $471 = (+_frexpl($$07$i,$e2$i));
      $472 = $471 * 2.0;
      $473 = $472 != 0.0;
      if ($473) {
       $474 = HEAP32[$e2$i>>2]|0;
       $475 = (($474) + -1)|0;
       HEAP32[$e2$i>>2] = $475;
      }
      $476 = $t$0 | 32;
      $477 = ($476|0)==(97);
      if ($477) {
       $478 = $t$0 & 32;
       $479 = ($478|0)==(0);
       $480 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $479 ? $prefix$0$i : $480;
       $481 = $pl$0$i | 2;
       $482 = ($p$0>>>0)>(11);
       $483 = (12 - ($p$0))|0;
       $484 = ($483|0)==(0);
       $485 = $482 | $484;
       do {
        if ($485) {
         $$1$i = $472;
        } else {
         $re$1179$i = $483;$round$0178$i = 8.0;
         while(1) {
          $486 = (($re$1179$i) + -1)|0;
          $487 = $round$0178$i * 16.0;
          $488 = ($486|0)==(0);
          if ($488) {
           $$lcssa483 = $487;
           break;
          } else {
           $re$1179$i = $486;$round$0178$i = $487;
          }
         }
         $489 = HEAP8[$prefix$0$$i>>0]|0;
         $490 = ($489<<24>>24)==(45);
         if ($490) {
          $491 = -$472;
          $492 = $491 - $$lcssa483;
          $493 = $$lcssa483 + $492;
          $494 = -$493;
          $$1$i = $494;
          break;
         } else {
          $495 = $472 + $$lcssa483;
          $496 = $495 - $$lcssa483;
          $$1$i = $496;
          break;
         }
        }
       } while(0);
       $497 = HEAP32[$e2$i>>2]|0;
       $498 = ($497|0)<(0);
       $499 = (0 - ($497))|0;
       $500 = $498 ? $499 : $497;
       $501 = ($500|0)<(0);
       if ($501) {
        $502 = ($500|0)<(0);
        $503 = $502 << 31 >> 31;
        $$05$i$i = $7;$504 = $500;$505 = $503;
        while(1) {
         $506 = (___uremdi3(($504|0),($505|0),10,0)|0);
         $507 = tempRet0;
         $508 = $506 | 48;
         $509 = $508&255;
         $510 = ((($$05$i$i)) + -1|0);
         HEAP8[$510>>0] = $509;
         $511 = (___udivdi3(($504|0),($505|0),10,0)|0);
         $512 = tempRet0;
         $513 = ($505>>>0)>(9);
         $514 = ($504>>>0)>(4294967295);
         $515 = ($505|0)==(9);
         $516 = $515 & $514;
         $517 = $513 | $516;
         if ($517) {
          $$05$i$i = $510;$504 = $511;$505 = $512;
         } else {
          $$lcssa484 = $510;$1183 = $511;$1184 = $512;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa484;$$01$lcssa$off0$i$i = $1183;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $500;
       }
       $518 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($518) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $519 = (($y$03$i$i>>>0) % 10)&-1;
         $520 = $519 | 48;
         $521 = $520&255;
         $522 = ((($$12$i$i)) + -1|0);
         HEAP8[$522>>0] = $521;
         $523 = (($y$03$i$i>>>0) / 10)&-1;
         $524 = ($y$03$i$i>>>0)<(10);
         if ($524) {
          $$1$lcssa$i$i = $522;
          break;
         } else {
          $$12$i$i = $522;$y$03$i$i = $523;
         }
        }
       }
       $525 = ($$1$lcssa$i$i|0)==($7|0);
       if ($525) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $526 = HEAP32[$e2$i>>2]|0;
       $527 = $526 >> 31;
       $528 = $527 & 2;
       $529 = (($528) + 43)|0;
       $530 = $529&255;
       $531 = ((($estr$0$i)) + -1|0);
       HEAP8[$531>>0] = $530;
       $532 = (($t$0) + 15)|0;
       $533 = $532&255;
       $534 = ((($estr$0$i)) + -2|0);
       HEAP8[$534>>0] = $533;
       $535 = $fl$1$ & 8;
       $536 = ($535|0)==(0);
       if ($536) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $537 = (~~(($$2$us$us$i)));
          $538 = (26248 + ($537)|0);
          $539 = HEAP8[$538>>0]|0;
          $540 = $539&255;
          $541 = $540 | $478;
          $542 = $541&255;
          $543 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $542;
          $544 = (+($537|0));
          $545 = $$2$us$us$i - $544;
          $546 = $545 * 16.0;
          $547 = $543;
          $548 = (($547) - ($0))|0;
          $549 = ($548|0)!=(1);
          $notlhs$us$us$i = $546 == 0.0;
          $or$cond$i79 = $549 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $543;
          } else {
           $550 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$543>>0] = 46;
           $s$1$us$us$i = $550;
          }
          $551 = $546 != 0.0;
          if ($551) {
           $$2$us$us$i = $546;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $552 = (~~(($$2$us$i)));
          $553 = (26248 + ($552)|0);
          $554 = HEAP8[$553>>0]|0;
          $555 = $554&255;
          $556 = $555 | $478;
          $557 = $556&255;
          $558 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $557;
          $559 = (+($552|0));
          $560 = $$2$us$i - $559;
          $561 = $560 * 16.0;
          $562 = $558;
          $563 = (($562) - ($0))|0;
          $564 = ($563|0)==(1);
          if ($564) {
           $565 = ((($s$0$us$i)) + 2|0);
           HEAP8[$558>>0] = 46;
           $s$1$us$i = $565;
          } else {
           $s$1$us$i = $558;
          }
          $566 = $561 != 0.0;
          if ($566) {
           $$2$us$i = $561;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $567 = (~~(($$2$i)));
         $568 = (26248 + ($567)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $570 | $478;
         $572 = $571&255;
         $573 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $572;
         $574 = (+($567|0));
         $575 = $$2$i - $574;
         $576 = $575 * 16.0;
         $577 = $573;
         $578 = (($577) - ($0))|0;
         $579 = ($578|0)==(1);
         if ($579) {
          $580 = ((($s$0$i)) + 2|0);
          HEAP8[$573>>0] = 46;
          $s$1$i = $580;
         } else {
          $s$1$i = $573;
         }
         $581 = $576 != 0.0;
         if ($581) {
          $$2$i = $576;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $582 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $583 = (($11) + ($$pre300$i))|0;
       $584 = ($583|0)<($p$0|0);
       $or$cond332 = $582 & $584;
       $585 = $534;
       $586 = (($12) + ($p$0))|0;
       $587 = (($586) - ($585))|0;
       $588 = $534;
       $589 = (($10) - ($588))|0;
       $590 = (($589) + ($$pre300$i))|0;
       $l$0$i = $or$cond332 ? $587 : $590;
       $591 = (($l$0$i) + ($481))|0;
       $592 = $fl$1$ & 73728;
       $593 = ($592|0)==(0);
       $594 = ($w$1|0)>($591|0);
       $or$cond$i52$i = $593 & $594;
       if ($or$cond$i52$i) {
        $595 = (($w$1) - ($591))|0;
        $596 = ($595>>>0)>(256);
        $597 = $596 ? 256 : $595;
        _memset(($pad$i|0),32,($597|0))|0;
        $598 = ($595>>>0)>(255);
        if ($598) {
         $$01$i54$i = $595;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $599 = (($$01$i54$i) + -256)|0;
          $600 = ($599>>>0)>(255);
          if ($600) {
           $$01$i54$i = $599;
          } else {
           break;
          }
         }
         $601 = $595 & 255;
         $$0$lcssa$i56$i = $601;
        } else {
         $$0$lcssa$i56$i = $595;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$481,$f)|0);
       $602 = ($592|0)==(65536);
       $or$cond$i59$i = $602 & $594;
       if ($or$cond$i59$i) {
        $603 = (($w$1) - ($591))|0;
        $604 = ($603>>>0)>(256);
        $605 = $604 ? 256 : $603;
        _memset(($pad$i|0),48,($605|0))|0;
        $606 = ($603>>>0)>(255);
        if ($606) {
         $$01$i61$i = $603;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $607 = (($$01$i61$i) + -256)|0;
          $608 = ($607>>>0)>(255);
          if ($608) {
           $$01$i61$i = $607;
          } else {
           break;
          }
         }
         $609 = $603 & 255;
         $$0$lcssa$i63$i = $609;
        } else {
         $$0$lcssa$i63$i = $603;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $610 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$610,$f)|0);
       $611 = $534;
       $612 = (($9) - ($611))|0;
       $613 = (($l$0$i) - ($612))|0;
       $614 = (($613) - ($610))|0;
       $615 = ($614|0)>(0);
       if ($615) {
        $616 = ($614>>>0)>(256);
        $617 = $616 ? 256 : $614;
        _memset(($pad$i|0),48,($617|0))|0;
        $618 = ($614>>>0)>(255);
        if ($618) {
         $$01$i67$i = $614;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $619 = (($$01$i67$i) + -256)|0;
          $620 = ($619>>>0)>(255);
          if ($620) {
           $$01$i67$i = $619;
          } else {
           break;
          }
         }
         $621 = $614 & 255;
         $$0$lcssa$i69$i = $621;
        } else {
         $$0$lcssa$i69$i = $614;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($534,$612,$f)|0);
       $622 = ($592|0)==(8192);
       $or$cond$i72$i = $622 & $594;
       if ($or$cond$i72$i) {
        $623 = (($w$1) - ($591))|0;
        $624 = ($623>>>0)>(256);
        $625 = $624 ? 256 : $623;
        _memset(($pad$i|0),32,($625|0))|0;
        $626 = ($623>>>0)>(255);
        if ($626) {
         $$01$i74$i = $623;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $627 = (($$01$i74$i) + -256)|0;
          $628 = ($627>>>0)>(255);
          if ($628) {
           $$01$i74$i = $627;
          } else {
           break;
          }
         }
         $629 = $623 & 255;
         $$0$lcssa$i76$i = $629;
        } else {
         $$0$lcssa$i76$i = $623;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $594 ? $w$1 : $591;
       $$0$i = $w$$i;
       break;
      }
      $630 = ($p$0|0)<(0);
      $$p$i = $630 ? 6 : $p$0;
      if ($473) {
       $631 = $472 * 268435456.0;
       $632 = HEAP32[$e2$i>>2]|0;
       $633 = (($632) + -28)|0;
       HEAP32[$e2$i>>2] = $633;
       $$3$i = $631;$634 = $633;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $472;$634 = $$pre$i;
      }
      $635 = ($634|0)<(0);
      $$31$i = $635 ? $big$i : $13;
      $636 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $637 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $637;
       $638 = ((($z$0$i)) + 4|0);
       $639 = (+($637>>>0));
       $640 = $$4$i - $639;
       $641 = $640 * 1.0E+9;
       $642 = $641 != 0.0;
       if ($642) {
        $$4$i = $641;$z$0$i = $638;
       } else {
        $$lcssa460 = $638;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $643 = ($$pr$i|0)>(0);
      if ($643) {
       $644 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa460;
       while(1) {
        $645 = ($644|0)>(29);
        $646 = $645 ? 29 : $644;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $647 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($647) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $648 = HEAP32[$d$0247$i>>2]|0;
           $649 = (_bitshift64Shl(($648|0),0,($646|0))|0);
           $650 = tempRet0;
           $651 = (_i64Add(($649|0),($650|0),($carry$0246$i|0),0)|0);
           $652 = tempRet0;
           $653 = (___uremdi3(($651|0),($652|0),1000000000,0)|0);
           $654 = tempRet0;
           HEAP32[$d$0247$i>>2] = $653;
           $655 = (___udivdi3(($651|0),($652|0),1000000000,0)|0);
           $656 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $657 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($657) {
            $$lcssa461 = $655;
            break;
           } else {
            $carry$0246$i = $655;$d$0247$i = $d$0$i;
           }
          }
          $658 = ($$lcssa461|0)==(0);
          if ($658) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $659 = ((($a$1253$i)) + -4|0);
          HEAP32[$659>>2] = $$lcssa461;
          $a$2$ph$i = $659;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $660 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($660)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $661 = ((($z$2$i)) + -4|0);
         $662 = HEAP32[$661>>2]|0;
         $663 = ($662|0)==(0);
         if ($663) {
          $z$2$i = $661;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $664 = HEAP32[$e2$i>>2]|0;
        $665 = (($664) - ($646))|0;
        HEAP32[$e2$i>>2] = $665;
        $666 = ($665|0)>(0);
        if ($666) {
         $644 = $665;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $665;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa460;
      }
      $667 = ($$pr146$i|0)<(0);
      L211: do {
       if ($667) {
        $668 = (($$p$i) + 25)|0;
        $669 = (($668|0) / 9)&-1;
        $670 = (($669) + 1)|0;
        $671 = ($476|0)==(102);
        if (!($671)) {
         $704 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $703 = (0 - ($704))|0;
          $705 = ($703|0)>(9);
          $706 = $705 ? 9 : $703;
          $707 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($707) {
            $711 = 1 << $706;
            $712 = (($711) + -1)|0;
            $713 = 1000000000 >>> $706;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $714 = HEAP32[$d$1233$i>>2]|0;
             $715 = $714 & $712;
             $716 = $714 >>> $706;
             $717 = (($716) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $717;
             $718 = Math_imul($715, $713)|0;
             $719 = ((($d$1233$i)) + 4|0);
             $720 = ($719>>>0)<($z$3239$i>>>0);
             if ($720) {
              $carry3$0234$i = $718;$d$1233$i = $719;
             } else {
              $$lcssa463 = $718;
              break;
             }
            }
            $721 = HEAP32[$a$3240$i>>2]|0;
            $722 = ($721|0)==(0);
            $723 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $722 ? $723 : $a$3240$i;
            $724 = ($$lcssa463|0)==(0);
            if ($724) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $725 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa463;
            $$a$3306$i = $$a$3$i;$z$4$i = $725;
           } else {
            $708 = HEAP32[$a$3240$i>>2]|0;
            $709 = ($708|0)==(0);
            $710 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $709 ? $710 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $726 = $z$4$i;
          $727 = $$a$3306$i;
          $728 = (($726) - ($727))|0;
          $729 = $728 >> 2;
          $730 = ($729|0)>($670|0);
          $731 = (($$a$3306$i) + ($670<<2)|0);
          $$z$4$i = $730 ? $731 : $z$4$i;
          $732 = HEAP32[$e2$i>>2]|0;
          $733 = (($732) + ($706))|0;
          HEAP32[$e2$i>>2] = $733;
          $734 = ($733|0)<(0);
          if ($734) {
           $704 = $733;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L211;
          }
         }
        }
        $672 = (($$31$i) + ($670<<2)|0);
        $674 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $673 = (0 - ($674))|0;
         $675 = ($673|0)>(9);
         $676 = $675 ? 9 : $673;
         $677 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($677) {
           $702 = 1 << $676;
           $695 = (($702) + -1)|0;
           $699 = 1000000000 >>> $676;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $693 = HEAP32[$d$1233$us$i>>2]|0;
            $694 = $693 & $695;
            $696 = $693 >>> $676;
            $697 = (($696) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $697;
            $698 = Math_imul($694, $699)|0;
            $700 = ((($d$1233$us$i)) + 4|0);
            $701 = ($700>>>0)<($z$3239$us$i>>>0);
            if ($701) {
             $carry3$0234$us$i = $698;$d$1233$us$i = $700;
            } else {
             $$lcssa464 = $698;
             break;
            }
           }
           $681 = HEAP32[$a$3240$us$i>>2]|0;
           $682 = ($681|0)==(0);
           $683 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $682 ? $683 : $a$3240$us$i;
           $684 = ($$lcssa464|0)==(0);
           if ($684) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $685 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa464;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $685;
          } else {
           $678 = HEAP32[$a$3240$us$i>>2]|0;
           $679 = ($678|0)==(0);
           $680 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $679 ? $680 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $686 = $z$4$us$i;
         $687 = (($686) - ($636))|0;
         $688 = $687 >> 2;
         $689 = ($688|0)>($670|0);
         $$z$4$us$i = $689 ? $672 : $z$4$us$i;
         $690 = HEAP32[$e2$i>>2]|0;
         $691 = (($690) + ($676))|0;
         HEAP32[$e2$i>>2] = $691;
         $692 = ($691|0)<(0);
         if ($692) {
          $674 = $691;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $735 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($735) {
        $736 = $a$3$lcssa$i;
        $737 = (($636) - ($736))|0;
        $738 = $737 >> 2;
        $739 = ($738*9)|0;
        $740 = HEAP32[$a$3$lcssa$i>>2]|0;
        $741 = ($740>>>0)<(10);
        if ($741) {
         $e$1$i = $739;
         break;
        } else {
         $e$0229$i = $739;$i$0228$i = 10;
        }
        while(1) {
         $742 = ($i$0228$i*10)|0;
         $743 = (($e$0229$i) + 1)|0;
         $744 = ($740>>>0)<($742>>>0);
         if ($744) {
          $e$1$i = $743;
          break;
         } else {
          $e$0229$i = $743;$i$0228$i = $742;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $745 = ($476|0)!=(102);
      $746 = $745 ? $e$1$i : 0;
      $747 = (($$p$i) - ($746))|0;
      $748 = ($476|0)==(103);
      $749 = ($$p$i|0)!=(0);
      $750 = $749 & $748;
      $$neg151$i = $750 << 31 >> 31;
      $751 = (($747) + ($$neg151$i))|0;
      $752 = $z$3$lcssa$i;
      $753 = (($752) - ($636))|0;
      $754 = $753 >> 2;
      $755 = ($754*9)|0;
      $756 = (($755) + -9)|0;
      $757 = ($751|0)<($756|0);
      if ($757) {
       $758 = (($751) + 9216)|0;
       $759 = (($758|0) / 9)&-1;
       $$sum$i = (($759) + -1023)|0;
       $760 = (($$31$i) + ($$sum$i<<2)|0);
       $761 = (($758|0) % 9)&-1;
       $j$0221$i = (($761) + 1)|0;
       $762 = ($j$0221$i|0)<(9);
       if ($762) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $763 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $763;
          break;
         } else {
          $i$1222$i = $763;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $764 = HEAP32[$760>>2]|0;
       $765 = (($764>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $766 = ($765|0)==(0);
       if ($766) {
        $$sum15$i = (($759) + -1022)|0;
        $767 = (($$31$i) + ($$sum15$i<<2)|0);
        $768 = ($767|0)==($z$3$lcssa$i|0);
        if ($768) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $769 = (($764>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $770 = $769 & 1;
         $771 = ($770|0)==(0);
         $$20$i = $771 ? 9007199254740992.0 : 9007199254740994.0;
         $772 = (($i$1$lcssa$i|0) / 2)&-1;
         $773 = ($765>>>0)<($772>>>0);
         do {
          if ($773) {
           $small$0$i = 0.5;
          } else {
           $774 = ($765|0)==($772|0);
           if ($774) {
            $$sum16$i = (($759) + -1022)|0;
            $775 = (($$31$i) + ($$sum16$i<<2)|0);
            $776 = ($775|0)==($z$3$lcssa$i|0);
            if ($776) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $777 = ($pl$0$i|0)==(0);
         do {
          if ($777) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $778 = HEAP8[$prefix$0$i>>0]|0;
           $779 = ($778<<24>>24)==(45);
           if (!($779)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $780 = -$$20$i;
           $781 = -$small$0$i;
           $round6$1$i = $780;$small$1$i = $781;
          }
         } while(0);
         $782 = (($764) - ($765))|0;
         HEAP32[$760>>2] = $782;
         $783 = $round6$1$i + $small$1$i;
         $784 = $783 != $round6$1$i;
         if (!($784)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
          break;
         }
         $785 = (($782) + ($i$1$lcssa$i))|0;
         HEAP32[$760>>2] = $785;
         $786 = ($785>>>0)>(999999999);
         if ($786) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $760;
          while(1) {
           $787 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $788 = ($787>>>0)<($a$5215$i>>>0);
           if ($788) {
            $789 = ((($a$5215$i)) + -4|0);
            HEAP32[$789>>2] = 0;
            $a$6$i = $789;
           } else {
            $a$6$i = $a$5215$i;
           }
           $790 = HEAP32[$787>>2]|0;
           $791 = (($790) + 1)|0;
           HEAP32[$787>>2] = $791;
           $792 = ($791>>>0)>(999999999);
           if ($792) {
            $a$5215$i = $a$6$i;$d$2214$i = $787;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $787;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $760;
         }
         $793 = $a$5$lcssa$i;
         $794 = (($636) - ($793))|0;
         $795 = $794 >> 2;
         $796 = ($795*9)|0;
         $797 = HEAP32[$a$5$lcssa$i>>2]|0;
         $798 = ($797>>>0)<(10);
         if ($798) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
          break;
         } else {
          $e$2210$i = $796;$i$2209$i = 10;
         }
         while(1) {
          $799 = ($i$2209$i*10)|0;
          $800 = (($e$2210$i) + 1)|0;
          $801 = ($797>>>0)<($799>>>0);
          if ($801) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $800;
           break;
          } else {
           $e$2210$i = $800;$i$2209$i = $799;
          }
         }
        }
       } while(0);
       $802 = ((($d$3$i)) + 4|0);
       $803 = ($z$3$lcssa$i>>>0)>($802>>>0);
       $$z$3$i = $803 ? $802 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $804 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $805 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($805)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $806 = ((($z$6$i)) + -4|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = ($807|0)==(0);
       if ($808) {
        $z$6$i = $806;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($748) {
        $809 = $749&1;
        $810 = $809 ^ 1;
        $$p$$i = (($810) + ($$p$i))|0;
        $811 = ($$p$$i|0)>($e$4$ph$i|0);
        $812 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $811 & $812;
        if ($or$cond6$i) {
         $813 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $814 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $813;$$210$i = $814;
        } else {
         $815 = (($t$0) + -2)|0;
         $816 = (($$p$$i) + -1)|0;
         $$013$i = $815;$$210$i = $816;
        }
        $817 = $fl$1$ & 8;
        $818 = ($817|0)==(0);
        if (!($818)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $817;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $819 = ((($z$6$i$lcssa)) + -4|0);
          $820 = HEAP32[$819>>2]|0;
          $821 = ($820|0)==(0);
          if ($821) {
           $j$2$i = 9;
           break;
          }
          $822 = (($820>>>0) % 10)&-1;
          $823 = ($822|0)==(0);
          if ($823) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $824 = ($i$3205$i*10)|0;
           $825 = (($j$1206$i) + 1)|0;
           $826 = (($820>>>0) % ($824>>>0))&-1;
           $827 = ($826|0)==(0);
           if ($827) {
            $i$3205$i = $824;$j$1206$i = $825;
           } else {
            $j$2$i = $825;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $828 = $$013$i | 32;
        $829 = ($828|0)==(102);
        $830 = $z$6$i$lcssa;
        $831 = (($830) - ($636))|0;
        $832 = $831 >> 2;
        $833 = ($832*9)|0;
        $834 = (($833) + -9)|0;
        if ($829) {
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$21$i = $836 ? 0 : $835;
         $837 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $837 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $838 = (($834) + ($e$4$ph$i))|0;
         $839 = (($838) - ($j$2$i))|0;
         $840 = ($839|0)<(0);
         $$23$i = $840 ? 0 : $839;
         $841 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $841 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $842 = $$311$i | $$pre$phi302$iZ2D;
      $843 = ($842|0)!=(0);
      $844 = $843&1;
      $845 = $$114$i | 32;
      $846 = ($845|0)==(102);
      if ($846) {
       $847 = ($e$4$ph$i|0)>(0);
       $848 = $847 ? $e$4$ph$i : 0;
       $$pn$i = $848;$estr$2$i = 0;
      } else {
       $849 = ($e$4$ph$i|0)<(0);
       $850 = $849 ? $804 : $e$4$ph$i;
       $851 = ($850|0)<(0);
       if ($851) {
        $852 = ($850|0)<(0);
        $853 = $852 << 31 >> 31;
        $$05$i79$i = $7;$854 = $850;$855 = $853;
        while(1) {
         $856 = (___uremdi3(($854|0),($855|0),10,0)|0);
         $857 = tempRet0;
         $858 = $856 | 48;
         $859 = $858&255;
         $860 = ((($$05$i79$i)) + -1|0);
         HEAP8[$860>>0] = $859;
         $861 = (___udivdi3(($854|0),($855|0),10,0)|0);
         $862 = tempRet0;
         $863 = ($855>>>0)>(9);
         $864 = ($854>>>0)>(4294967295);
         $865 = ($855|0)==(9);
         $866 = $865 & $864;
         $867 = $863 | $866;
         if ($867) {
          $$05$i79$i = $860;$854 = $861;$855 = $862;
         } else {
          $$lcssa470 = $860;$1185 = $861;$1186 = $862;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa470;$$01$lcssa$off0$i85$i = $1185;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $850;
       }
       $868 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($868) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $869 = (($y$03$i86$i>>>0) % 10)&-1;
         $870 = $869 | 48;
         $871 = $870&255;
         $872 = ((($$12$i87$i)) + -1|0);
         HEAP8[$872>>0] = $871;
         $873 = (($y$03$i86$i>>>0) / 10)&-1;
         $874 = ($y$03$i86$i>>>0)<(10);
         if ($874) {
          $estr$1$ph$i = $872;
          break;
         } else {
          $$12$i87$i = $872;$y$03$i86$i = $873;
         }
        }
       }
       $875 = $estr$1$ph$i;
       $876 = (($9) - ($875))|0;
       $877 = ($876|0)<(2);
       if ($877) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $878 = ((($estr$1201$i)) + -1|0);
         HEAP8[$878>>0] = 48;
         $879 = $878;
         $880 = (($9) - ($879))|0;
         $881 = ($880|0)<(2);
         if ($881) {
          $estr$1201$i = $878;
         } else {
          $estr$1$lcssa$i = $878;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $882 = $e$4$ph$i >> 31;
       $883 = $882 & 2;
       $884 = (($883) + 43)|0;
       $885 = $884&255;
       $886 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$886>>0] = $885;
       $887 = $$114$i&255;
       $888 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$888>>0] = $887;
       $889 = $888;
       $890 = (($9) - ($889))|0;
       $$pn$i = $890;$estr$2$i = $888;
      }
      $891 = (($pl$0$i) + 1)|0;
      $892 = (($891) + ($$311$i))|0;
      $l$1$i = (($892) + ($844))|0;
      $893 = (($l$1$i) + ($$pn$i))|0;
      $894 = $fl$1$ & 73728;
      $895 = ($894|0)==(0);
      $896 = ($w$1|0)>($893|0);
      $or$cond$i93$i = $895 & $896;
      if ($or$cond$i93$i) {
       $897 = (($w$1) - ($893))|0;
       $898 = ($897>>>0)>(256);
       $899 = $898 ? 256 : $897;
       _memset(($pad$i|0),32,($899|0))|0;
       $900 = ($897>>>0)>(255);
       if ($900) {
        $$01$i95$i = $897;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $901 = (($$01$i95$i) + -256)|0;
         $902 = ($901>>>0)>(255);
         if ($902) {
          $$01$i95$i = $901;
         } else {
          break;
         }
        }
        $903 = $897 & 255;
        $$0$lcssa$i97$i = $903;
       } else {
        $$0$lcssa$i97$i = $897;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $904 = ($894|0)==(65536);
      $or$cond$i100$i = $904 & $896;
      if ($or$cond$i100$i) {
       $905 = (($w$1) - ($893))|0;
       $906 = ($905>>>0)>(256);
       $907 = $906 ? 256 : $905;
       _memset(($pad$i|0),48,($907|0))|0;
       $908 = ($905>>>0)>(255);
       if ($908) {
        $$01$i102$i = $905;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $909 = (($$01$i102$i) + -256)|0;
         $910 = ($909>>>0)>(255);
         if ($910) {
          $$01$i102$i = $909;
         } else {
          break;
         }
        }
        $911 = $905 & 255;
        $$0$lcssa$i104$i = $911;
       } else {
        $$0$lcssa$i104$i = $905;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($846) {
       $912 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $912 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $913 = HEAP32[$d$4191$i>>2]|0;
        $914 = ($913|0)==(0);
        if ($914) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $913;
         while(1) {
          $915 = (($y$03$i109$i>>>0) % 10)&-1;
          $916 = $915 | 48;
          $917 = $916&255;
          $918 = ((($$12$i110$i)) + -1|0);
          HEAP8[$918>>0] = $917;
          $919 = (($y$03$i109$i>>>0) / 10)&-1;
          $920 = ($y$03$i109$i>>>0)<(10);
          if ($920) {
           $$1$lcssa$i112$i = $918;
           break;
          } else {
           $$12$i110$i = $918;$y$03$i109$i = $919;
          }
         }
        }
        $921 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($921) {
          $925 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($925)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $922 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($922) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $923 = ((($s7$0188$i)) + -1|0);
           HEAP8[$923>>0] = 48;
           $924 = ($923>>>0)>($buf$i>>>0);
           if ($924) {
            $s7$0188$i = $923;
           } else {
            $s7$1$i = $923;
            break;
           }
          }
         }
        } while(0);
        $926 = $s7$1$i;
        $927 = (($15) - ($926))|0;
        (___fwritex($s7$1$i,$927,$f)|0);
        $928 = ((($d$4191$i)) + 4|0);
        $929 = ($928>>>0)>($$31$i>>>0);
        if ($929) {
         $$lcssa479 = $928;
         break;
        } else {
         $d$4191$i = $928;
        }
       }
       $930 = ($842|0)==(0);
       if (!($930)) {
        (___fwritex(26344,1,$f)|0);
       }
       $931 = ($$lcssa479>>>0)<($z$6$i$lcssa>>>0);
       $932 = ($$311$i|0)>(0);
       $933 = $932 & $931;
       if ($933) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa479;
        while(1) {
         $934 = HEAP32[$d$5183$i>>2]|0;
         $935 = ($934|0)==(0);
         if ($935) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $934;
          while(1) {
           $936 = (($y$03$i118$i>>>0) % 10)&-1;
           $937 = $936 | 48;
           $938 = $937&255;
           $939 = ((($$12$i119$i)) + -1|0);
           HEAP8[$939>>0] = $938;
           $940 = (($y$03$i118$i>>>0) / 10)&-1;
           $941 = ($y$03$i118$i>>>0)<(10);
           if ($941) {
            $$lcssa480 = $939;
            break;
           } else {
            $$12$i119$i = $939;$y$03$i118$i = $940;
           }
          }
          $942 = ($$lcssa480>>>0)>($buf$i>>>0);
          if ($942) {
           $s8$0180$i = $$lcssa480;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa480;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $943 = ((($s8$0180$i)) + -1|0);
           HEAP8[$943>>0] = 48;
           $944 = ($943>>>0)>($buf$i>>>0);
           if ($944) {
            $s8$0180$i = $943;
            label = 289;
           } else {
            $s8$0$lcssa$i = $943;
            break;
           }
          }
         }
         $945 = ($$412184$i|0)>(9);
         $946 = $945 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$946,$f)|0);
         $947 = ((($d$5183$i)) + 4|0);
         $948 = (($$412184$i) + -9)|0;
         $949 = ($947>>>0)<($z$6$i$lcssa>>>0);
         $950 = $945 & $949;
         if ($950) {
          $$412184$i = $948;$d$5183$i = $947;
         } else {
          $$412$lcssa$i = $948;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $951 = ($$412$lcssa$i|0)>(0);
       if ($951) {
        $952 = ($$412$lcssa$i>>>0)>(256);
        $953 = $952 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($953|0))|0;
        $954 = ($$412$lcssa$i>>>0)>(255);
        if ($954) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $955 = (($$01$i126$i) + -256)|0;
          $956 = ($955>>>0)>(255);
          if ($956) {
           $$01$i126$i = $955;
          } else {
           break;
          }
         }
         $957 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $957;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $958 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $958;
       $959 = ($$311$i|0)>(-1);
       do {
        if ($959) {
         $960 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $961 = HEAP32[$d$6195$i>>2]|0;
          $962 = ($961|0)==(0);
          if ($962) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $961;
           while(1) {
            $963 = (($y$03$i133$i>>>0) % 10)&-1;
            $964 = $963 | 48;
            $965 = $964&255;
            $966 = ((($$12$i134$i)) + -1|0);
            HEAP8[$966>>0] = $965;
            $967 = (($y$03$i133$i>>>0) / 10)&-1;
            $968 = ($y$03$i133$i>>>0)<(10);
            if ($968) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa474 = $966;
             break;
            } else {
             $$12$i134$i = $966;$y$03$i133$i = $967;
            }
           }
           $969 = ($$lcssa474|0)==($14|0);
           if ($969) {
            label = 303;
           } else {
            $1187 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa474;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1187 = $14;$s9$0$i = $16;
          }
          $970 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($970) {
            (___fwritex($s9$0$i,1,$f)|0);
            $974 = ($$5196$i|0)<(1);
            $or$cond29$i = $960 & $974;
            if ($or$cond29$i) {
             $s9$2$i = $1187;
             break;
            }
            (___fwritex(26344,1,$f)|0);
            $s9$2$i = $1187;
           } else {
            $971 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($971) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $972 = ((($s9$1192$i)) + -1|0);
             HEAP8[$972>>0] = 48;
             $973 = ($972>>>0)>($buf$i>>>0);
             if ($973) {
              $s9$1192$i = $972;
             } else {
              $s9$2$i = $972;
              break;
             }
            }
           }
          } while(0);
          $975 = $s9$2$i;
          $976 = (($15) - ($975))|0;
          $977 = ($$5196$i|0)>($976|0);
          $978 = $977 ? $976 : $$5196$i;
          (___fwritex($s9$2$i,$978,$f)|0);
          $979 = (($$5196$i) - ($976))|0;
          $980 = ((($d$6195$i)) + 4|0);
          $981 = ($980>>>0)<($z$6$$i>>>0);
          $982 = ($979|0)>(-1);
          $983 = $981 & $982;
          if ($983) {
           $$5196$i = $979;$d$6195$i = $980;
          } else {
           $$lcssa476 = $979;
           break;
          }
         }
         $984 = ($$lcssa476|0)>(0);
         if (!($984)) {
          break;
         }
         $985 = ($$lcssa476>>>0)>(256);
         $986 = $985 ? 256 : $$lcssa476;
         _memset(($pad$i|0),48,($986|0))|0;
         $987 = ($$lcssa476>>>0)>(255);
         if ($987) {
          $$01$i141$i = $$lcssa476;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $988 = (($$01$i141$i) + -256)|0;
           $989 = ($988>>>0)>(255);
           if ($989) {
            $$01$i141$i = $988;
           } else {
            break;
           }
          }
          $990 = $$lcssa476 & 255;
          $$0$lcssa$i143$i = $990;
         } else {
          $$0$lcssa$i143$i = $$lcssa476;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $991 = $estr$2$i;
       $992 = (($9) - ($991))|0;
       (___fwritex($estr$2$i,$992,$f)|0);
      }
      $993 = ($894|0)==(8192);
      $or$cond$i$i = $993 & $896;
      if ($or$cond$i$i) {
       $994 = (($w$1) - ($893))|0;
       $995 = ($994>>>0)>(256);
       $996 = $995 ? 256 : $994;
       _memset(($pad$i|0),32,($996|0))|0;
       $997 = ($994>>>0)>(255);
       if ($997) {
        $$01$i$i = $994;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $998 = (($$01$i$i) + -256)|0;
         $999 = ($998>>>0)>(255);
         if ($999) {
          $$01$i$i = $998;
         } else {
          break;
         }
        }
        $1000 = $994 & 255;
        $$0$lcssa$i$i = $1000;
       } else {
        $$0$lcssa$i$i = $994;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $896 ? $w$1 : $893;
      $$0$i = $w$30$i;
     } else {
      $445 = $t$0 & 32;
      $446 = ($445|0)!=(0);
      $447 = $446 ? 26312 : 26320;
      $448 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $449 = $446 ? 26328 : 26336;
      $pl$1$i = $448 ? 0 : $pl$0$i;
      $s1$0$i = $448 ? $449 : $447;
      $450 = (($pl$1$i) + 3)|0;
      $451 = $fl$1$ & 8192;
      $452 = ($451|0)==(0);
      $453 = ($w$1|0)>($450|0);
      $or$cond$i35$i = $452 & $453;
      if ($or$cond$i35$i) {
       $454 = (($w$1) - ($450))|0;
       $455 = ($454>>>0)>(256);
       $456 = $455 ? 256 : $454;
       _memset(($pad$i|0),32,($456|0))|0;
       $457 = ($454>>>0)>(255);
       if ($457) {
        $$01$i37$i = $454;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $458 = (($$01$i37$i) + -256)|0;
         $459 = ($458>>>0)>(255);
         if ($459) {
          $$01$i37$i = $458;
         } else {
          break;
         }
        }
        $460 = $454 & 255;
        $$0$lcssa$i39$i = $460;
       } else {
        $$0$lcssa$i39$i = $454;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $461 = $fl$1$ & 73728;
      $462 = ($461|0)==(8192);
      $or$cond$i42$i = $462 & $453;
      if ($or$cond$i42$i) {
       $463 = (($w$1) - ($450))|0;
       $464 = ($463>>>0)>(256);
       $465 = $464 ? 256 : $463;
       _memset(($pad$i|0),32,($465|0))|0;
       $466 = ($463>>>0)>(255);
       if ($466) {
        $$01$i44$i = $463;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $467 = (($$01$i44$i) + -256)|0;
         $468 = ($467>>>0)>(255);
         if ($468) {
          $$01$i44$i = $467;
         } else {
          break;
         }
        }
        $469 = $463 & 255;
        $$0$lcssa$i46$i = $469;
       } else {
        $$0$lcssa$i46$i = $463;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $470 = $453 ? $w$1 : $450;
      $$0$i = $470;
     }
    } while(0);
    $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa456|0) {
    case 4:  {
     $276 = $cnt$1&255;
     $277 = $264;
     HEAP8[$277>>0] = $276;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $274 = $cnt$1&65535;
     $275 = $264;
     HEAP16[$275>>1] = $274;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $279 = ($cnt$1|0)<(0);
     $280 = $279 << 31 >> 31;
     $281 = $264;
     $282 = $281;
     $283 = $282;
     HEAP32[$283>>2] = $cnt$1;
     $284 = (($282) + 4)|0;
     $285 = $284;
     HEAP32[$285>>2] = $280;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $266 = $264;
     HEAP32[$266>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $265 = $264;
     HEAP32[$265>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $278 = $264;
     HEAP32[$278>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $267 = ($cnt$1|0)<(0);
     $268 = $267 << 31 >> 31;
     $269 = $264;
     $270 = $269;
     $271 = $270;
     HEAP32[$271>>2] = $cnt$1;
     $272 = (($270) + 4)|0;
     $273 = $272;
     HEAP32[$273>>2] = $268;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   default: {
    $1175 = $291;$1176 = $264;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 26264;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $289 = $t$1 & 32;
   $290 = ($264|0)==(0);
   $292 = ($291|0)==(0);
   $293 = $290 & $292;
   if ($293) {
    $366 = $264;$368 = $291;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 26264;
    label = 89;
   } else {
    $$012$i = $2;$295 = $264;$302 = $291;
    while(1) {
     $294 = $295 & 15;
     $296 = (26248 + ($294)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = $298 | $289;
     $300 = $299&255;
     $301 = ((($$012$i)) + -1|0);
     HEAP8[$301>>0] = $300;
     $303 = (_bitshift64Lshr(($295|0),($302|0),4)|0);
     $304 = tempRet0;
     $305 = ($303|0)==(0);
     $306 = ($304|0)==(0);
     $307 = $305 & $306;
     if ($307) {
      $$lcssa491 = $301;
      break;
     } else {
      $$012$i = $301;$295 = $303;$302 = $304;
     }
    }
    $308 = $fl$3 & 8;
    $309 = ($308|0)==(0);
    if ($309) {
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 26264;
     label = 89;
    } else {
     $310 = $t$1 >> 4;
     $311 = (26264 + ($310)|0);
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $311;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $337 = ($336>>>0)>(0);
   $339 = ($338>>>0)>(4294967295);
   $340 = ($336|0)==(0);
   $341 = $340 & $339;
   $342 = $337 | $341;
   if ($342) {
    $$05$i = $2;$343 = $338;$344 = $336;
    while(1) {
     $345 = (___uremdi3(($343|0),($344|0),10,0)|0);
     $346 = tempRet0;
     $347 = $345 | 48;
     $348 = $347&255;
     $349 = ((($$05$i)) + -1|0);
     HEAP8[$349>>0] = $348;
     $350 = (___udivdi3(($343|0),($344|0),10,0)|0);
     $351 = tempRet0;
     $352 = ($344>>>0)>(9);
     $353 = ($343>>>0)>(4294967295);
     $354 = ($344|0)==(9);
     $355 = $354 & $353;
     $356 = $352 | $355;
     if ($356) {
      $$05$i = $349;$343 = $350;$344 = $351;
     } else {
      $$lcssa487 = $349;$1177 = $350;$1178 = $351;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa487;$$01$lcssa$off0$i = $1177;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $338;
   }
   $357 = ($$01$lcssa$off0$i|0)==(0);
   if ($357) {
    $366 = $338;$368 = $336;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $358 = (($y$03$i>>>0) % 10)&-1;
     $359 = $358 | 48;
     $360 = $359&255;
     $361 = ((($$12$i)) + -1|0);
     HEAP8[$361>>0] = $360;
     $362 = (($y$03$i>>>0) / 10)&-1;
     $363 = ($y$03$i>>>0)<(10);
     if ($363) {
      $366 = $338;$368 = $336;$a$0 = $361;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $361;$y$03$i = $362;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $385 = (_memchr($a$1,0,$p$0)|0);
   $386 = ($385|0)==(0|0);
   $387 = $385;
   $388 = $a$1;
   $389 = (($387) - ($388))|0;
   $390 = (($a$1) + ($p$0)|0);
   $z$1 = $386 ? $390 : $385;
   $p$3 = $386 ? $p$0 : $389;
   $1175 = $291;$1176 = $264;$a$2 = $a$1;$fl$6 = $263;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 26264;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1179;
   while(1) {
    $393 = HEAP32[$ws$0176>>2]|0;
    $394 = ($393|0)==(0);
    if ($394) {
     $i$0$lcssa = $i$0175;$l$2 = $l$1174;
     break;
    }
    $395 = (_wctomb($mb,$393)|0);
    $396 = ($395|0)<(0);
    $397 = (($p$4272) - ($i$0175))|0;
    $398 = ($395>>>0)>($397>>>0);
    $or$cond22 = $396 | $398;
    if ($or$cond22) {
     $i$0$lcssa = $i$0175;$l$2 = $395;
     break;
    }
    $399 = ((($ws$0176)) + 4|0);
    $400 = (($395) + ($i$0175))|0;
    $401 = ($p$4272>>>0)>($400>>>0);
    if ($401) {
     $i$0175 = $400;$l$1174 = $395;$ws$0176 = $399;
    } else {
     $i$0$lcssa = $400;$l$2 = $395;
     break;
    }
   }
   $402 = ($l$2|0)<(0);
   if ($402) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1181 = $1180;$1182 = $1179;$i$0$lcssa273 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $364 = ($p$2|0)>(-1);
   $365 = $fl$4 & -65537;
   $$fl$4 = $364 ? $365 : $fl$4;
   $367 = ($366|0)!=(0);
   $369 = ($368|0)!=(0);
   $370 = $367 | $369;
   $371 = ($p$2|0)!=(0);
   $or$cond = $370 | $371;
   if ($or$cond) {
    $372 = $a$0;
    $373 = (($3) - ($372))|0;
    $374 = $370&1;
    $375 = $374 ^ 1;
    $376 = (($375) + ($373))|0;
    $377 = ($p$2|0)>($376|0);
    $p$2$ = $377 ? $p$2 : $376;
    $1175 = $368;$1176 = $366;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1175 = $368;$1176 = $366;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $404 = ($403|0)==(0);
   $405 = ($w$1|0)>($i$0$lcssa273|0);
   $or$cond$i64 = $404 & $405;
   if ($or$cond$i64) {
    $406 = (($w$1) - ($i$0$lcssa273))|0;
    $407 = ($406>>>0)>(256);
    $408 = $407 ? 256 : $406;
    _memset(($pad$i|0),32,($408|0))|0;
    $409 = ($406>>>0)>(255);
    if ($409) {
     $$01$i66 = $406;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $410 = (($$01$i66) + -256)|0;
      $411 = ($410>>>0)>(255);
      if ($411) {
       $$01$i66 = $410;
      } else {
       break;
      }
     }
     $412 = $406 & 255;
     $$0$lcssa$i68 = $412;
    } else {
     $$0$lcssa$i68 = $406;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $413 = ($i$0$lcssa273|0)==(0);
   L465: do {
    if (!($413)) {
     $i$1186 = 0;$ws$1187 = $1182;
     while(1) {
      $414 = HEAP32[$ws$1187>>2]|0;
      $415 = ($414|0)==(0);
      if ($415) {
       break L465;
      }
      $416 = (_wctomb($mb,$414)|0);
      $417 = (($416) + ($i$1186))|0;
      $418 = ($417|0)>($i$0$lcssa273|0);
      if ($418) {
       break L465;
      }
      $419 = ((($ws$1187)) + 4|0);
      (___fwritex($mb,$416,$f)|0);
      $420 = ($417>>>0)<($i$0$lcssa273>>>0);
      if ($420) {
       $i$1186 = $417;$ws$1187 = $419;
      } else {
       break;
      }
     }
    }
   } while(0);
   $421 = ($403|0)==(8192);
   $or$cond$i71 = $421 & $405;
   if ($or$cond$i71) {
    $422 = (($w$1) - ($i$0$lcssa273))|0;
    $423 = ($422>>>0)>(256);
    $424 = $423 ? 256 : $422;
    _memset(($pad$i|0),32,($424|0))|0;
    $425 = ($422>>>0)>(255);
    if ($425) {
     $$01$i73 = $422;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $426 = (($$01$i73) + -256)|0;
      $427 = ($426>>>0)>(255);
      if ($427) {
       $$01$i73 = $426;
      } else {
       break;
      }
     }
     $428 = $422 & 255;
     $$0$lcssa$i75 = $428;
    } else {
     $$0$lcssa$i75 = $422;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $429 = $405 ? $w$1 : $i$0$lcssa273;
   $1169 = $291;$1170 = $1181;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $429;$l10n$0 = $l10n$3;
   continue;
  }
  $1001 = $z$2;
  $1002 = $a$2;
  $1003 = (($1001) - ($1002))|0;
  $1004 = ($p$5|0)<($1003|0);
  $$p$5 = $1004 ? $1003 : $p$5;
  $1005 = (($pl$2) + ($$p$5))|0;
  $1006 = ($w$1|0)<($1005|0);
  $w$2 = $1006 ? $1005 : $w$1;
  $1007 = $fl$6 & 73728;
  $1008 = ($1007|0)==(0);
  $1009 = ($w$2|0)>($1005|0);
  $or$cond$i81 = $1008 & $1009;
  if ($or$cond$i81) {
   $1010 = (($w$2) - ($1005))|0;
   $1011 = ($1010>>>0)>(256);
   $1012 = $1011 ? 256 : $1010;
   _memset(($pad$i|0),32,($1012|0))|0;
   $1013 = ($1010>>>0)>(255);
   if ($1013) {
    $$01$i83 = $1010;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1014 = (($$01$i83) + -256)|0;
     $1015 = ($1014>>>0)>(255);
     if ($1015) {
      $$01$i83 = $1014;
     } else {
      break;
     }
    }
    $1016 = $1010 & 255;
    $$0$lcssa$i85 = $1016;
   } else {
    $$0$lcssa$i85 = $1010;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1017 = ($1007|0)==(65536);
  $or$cond$i57 = $1017 & $1009;
  if ($or$cond$i57) {
   $1018 = (($w$2) - ($1005))|0;
   $1019 = ($1018>>>0)>(256);
   $1020 = $1019 ? 256 : $1018;
   _memset(($pad$i|0),48,($1020|0))|0;
   $1021 = ($1018>>>0)>(255);
   if ($1021) {
    $$01$i59 = $1018;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1022 = (($$01$i59) + -256)|0;
     $1023 = ($1022>>>0)>(255);
     if ($1023) {
      $$01$i59 = $1022;
     } else {
      break;
     }
    }
    $1024 = $1018 & 255;
    $$0$lcssa$i61 = $1024;
   } else {
    $$0$lcssa$i61 = $1018;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1025 = ($$p$5|0)>($1003|0);
  if ($1025) {
   $1026 = (($$p$5) - ($1003))|0;
   $1027 = ($1026>>>0)>(256);
   $1028 = $1027 ? 256 : $1026;
   _memset(($pad$i|0),48,($1028|0))|0;
   $1029 = ($1026>>>0)>(255);
   if ($1029) {
    $$01$i44 = $1026;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1030 = (($$01$i44) + -256)|0;
     $1031 = ($1030>>>0)>(255);
     if ($1031) {
      $$01$i44 = $1030;
     } else {
      break;
     }
    }
    $1032 = $1026 & 255;
    $$0$lcssa$i46 = $1032;
   } else {
    $$0$lcssa$i46 = $1026;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$1003,$f)|0);
  $1033 = ($1007|0)==(8192);
  $or$cond$i = $1033 & $1009;
  if ($or$cond$i) {
   $1034 = (($w$2) - ($1005))|0;
   $1035 = ($1034>>>0)>(256);
   $1036 = $1035 ? 256 : $1034;
   _memset(($pad$i|0),32,($1036|0))|0;
   $1037 = ($1034>>>0)>(255);
   if ($1037) {
    $$01$i = $1034;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1038 = (($$01$i) + -256)|0;
     $1039 = ($1038>>>0)>(255);
     if ($1039) {
      $$01$i = $1038;
     } else {
      break;
     }
    }
    $1040 = $1034 & 255;
    $$0$lcssa$i = $1040;
   } else {
    $$0$lcssa$i = $1034;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1169 = $1175;$1170 = $1176;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1041 = ($f|0)==(0|0);
  if (!($1041)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1042 = ($l10n$0$lcssa|0)==(0);
  if ($1042) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2162 = 1;
  }
  while(1) {
   $1043 = (($nl_type) + ($i$2162<<2)|0);
   $1044 = HEAP32[$1043>>2]|0;
   $1045 = ($1044|0)==(0);
   if ($1045) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $1047 = (($nl_arg) + ($i$2162<<3)|0);
   $1048 = ($1044>>>0)>(20);
   L530: do {
    if (!($1048)) {
     do {
      switch ($1044|0) {
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1096 = $arglist_current47;
       $1097 = ((0) + 4|0);
       $expanded176 = $1097;
       $expanded175 = (($expanded176) - 1)|0;
       $1098 = (($1096) + ($expanded175))|0;
       $1099 = ((0) + 4|0);
       $expanded180 = $1099;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1100 = $1098 & $expanded178;
       $1101 = $1100;
       $1102 = HEAP32[$1101>>2]|0;
       $arglist_next48 = ((($1101)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1103 = $1102&65535;
       $1104 = $1103 << 16 >> 16;
       $1105 = ($1104|0)<(0);
       $1106 = $1105 << 31 >> 31;
       $1107 = $1047;
       $1108 = $1107;
       HEAP32[$1108>>2] = $1104;
       $1109 = (($1107) + 4)|0;
       $1110 = $1109;
       HEAP32[$1110>>2] = $1106;
       break L530;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1111 = $arglist_current50;
       $1112 = ((0) + 4|0);
       $expanded183 = $1112;
       $expanded182 = (($expanded183) - 1)|0;
       $1113 = (($1111) + ($expanded182))|0;
       $1114 = ((0) + 4|0);
       $expanded187 = $1114;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1115 = $1113 & $expanded185;
       $1116 = $1115;
       $1117 = HEAP32[$1116>>2]|0;
       $arglist_next51 = ((($1116)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1117 & 65535;
       $1118 = $1047;
       $1119 = $1118;
       HEAP32[$1119>>2] = $$mask1$i;
       $1120 = (($1118) + 4)|0;
       $1121 = $1120;
       HEAP32[$1121>>2] = 0;
       break L530;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1122 = $arglist_current53;
       $1123 = ((0) + 4|0);
       $expanded190 = $1123;
       $expanded189 = (($expanded190) - 1)|0;
       $1124 = (($1122) + ($expanded189))|0;
       $1125 = ((0) + 4|0);
       $expanded194 = $1125;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1126 = $1124 & $expanded192;
       $1127 = $1126;
       $1128 = HEAP32[$1127>>2]|0;
       $arglist_next54 = ((($1127)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1129 = $1128&255;
       $1130 = $1129 << 24 >> 24;
       $1131 = ($1130|0)<(0);
       $1132 = $1131 << 31 >> 31;
       $1133 = $1047;
       $1134 = $1133;
       HEAP32[$1134>>2] = $1130;
       $1135 = (($1133) + 4)|0;
       $1136 = $1135;
       HEAP32[$1136>>2] = $1132;
       break L530;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1137 = $arglist_current56;
       $1138 = ((0) + 4|0);
       $expanded197 = $1138;
       $expanded196 = (($expanded197) - 1)|0;
       $1139 = (($1137) + ($expanded196))|0;
       $1140 = ((0) + 4|0);
       $expanded201 = $1140;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1141 = $1139 & $expanded199;
       $1142 = $1141;
       $1143 = HEAP32[$1142>>2]|0;
       $arglist_next57 = ((($1142)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1143 & 255;
       $1144 = $1047;
       $1145 = $1144;
       HEAP32[$1145>>2] = $$mask$i;
       $1146 = (($1144) + 4)|0;
       $1147 = $1146;
       HEAP32[$1147>>2] = 0;
       break L530;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1148 = $arglist_current59;
       $1149 = ((0) + 8|0);
       $expanded204 = $1149;
       $expanded203 = (($expanded204) - 1)|0;
       $1150 = (($1148) + ($expanded203))|0;
       $1151 = ((0) + 8|0);
       $expanded208 = $1151;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1152 = $1150 & $expanded206;
       $1153 = $1152;
       $1154 = +HEAPF64[$1153>>3];
       $arglist_next60 = ((($1153)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1047>>3] = $1154;
       break L530;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1155 = $arglist_current62;
       $1156 = ((0) + 8|0);
       $expanded211 = $1156;
       $expanded210 = (($expanded211) - 1)|0;
       $1157 = (($1155) + ($expanded210))|0;
       $1158 = ((0) + 8|0);
       $expanded215 = $1158;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1159 = $1157 & $expanded213;
       $1160 = $1159;
       $1161 = +HEAPF64[$1160>>3];
       $arglist_next63 = ((($1160)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1047>>3] = $1161;
       break L530;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1049 = $arglist_current35;
       $1050 = ((0) + 4|0);
       $expanded148 = $1050;
       $expanded147 = (($expanded148) - 1)|0;
       $1051 = (($1049) + ($expanded147))|0;
       $1052 = ((0) + 4|0);
       $expanded152 = $1052;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1053 = $1051 & $expanded150;
       $1054 = $1053;
       $1055 = HEAP32[$1054>>2]|0;
       $arglist_next36 = ((($1054)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1047>>2] = $1055;
       break L530;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1056 = $arglist_current38;
       $1057 = ((0) + 4|0);
       $expanded155 = $1057;
       $expanded154 = (($expanded155) - 1)|0;
       $1058 = (($1056) + ($expanded154))|0;
       $1059 = ((0) + 4|0);
       $expanded159 = $1059;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1060 = $1058 & $expanded157;
       $1061 = $1060;
       $1062 = HEAP32[$1061>>2]|0;
       $arglist_next39 = ((($1061)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1063 = ($1062|0)<(0);
       $1064 = $1063 << 31 >> 31;
       $1065 = $1047;
       $1066 = $1065;
       HEAP32[$1066>>2] = $1062;
       $1067 = (($1065) + 4)|0;
       $1068 = $1067;
       HEAP32[$1068>>2] = $1064;
       break L530;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1069 = $arglist_current41;
       $1070 = ((0) + 4|0);
       $expanded162 = $1070;
       $expanded161 = (($expanded162) - 1)|0;
       $1071 = (($1069) + ($expanded161))|0;
       $1072 = ((0) + 4|0);
       $expanded166 = $1072;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1073 = $1071 & $expanded164;
       $1074 = $1073;
       $1075 = HEAP32[$1074>>2]|0;
       $arglist_next42 = ((($1074)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1076 = $1047;
       $1077 = $1076;
       HEAP32[$1077>>2] = $1075;
       $1078 = (($1076) + 4)|0;
       $1079 = $1078;
       HEAP32[$1079>>2] = 0;
       break L530;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1080 = $arglist_current44;
       $1081 = ((0) + 8|0);
       $expanded169 = $1081;
       $expanded168 = (($expanded169) - 1)|0;
       $1082 = (($1080) + ($expanded168))|0;
       $1083 = ((0) + 8|0);
       $expanded173 = $1083;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1084 = $1082 & $expanded171;
       $1085 = $1084;
       $1086 = $1085;
       $1087 = $1086;
       $1088 = HEAP32[$1087>>2]|0;
       $1089 = (($1086) + 4)|0;
       $1090 = $1089;
       $1091 = HEAP32[$1090>>2]|0;
       $arglist_next45 = ((($1085)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1092 = $1047;
       $1093 = $1092;
       HEAP32[$1093>>2] = $1088;
       $1094 = (($1092) + 4)|0;
       $1095 = $1094;
       HEAP32[$1095>>2] = $1091;
       break L530;
       break;
      }
      default: {
       break L530;
      }
      }
     } while(0);
    }
   } while(0);
   $1162 = (($i$2162) + 1)|0;
   $1163 = ($1162|0)<(10);
   if ($1163) {
    $i$2162 = $1162;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1046 = ($i$2162$lcssa|0)<(10);
  if ($1046) {
   $i$3160 = $i$2162$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1166 = (($nl_type) + ($i$3160<<2)|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = ($1167|0)==(0);
   $1164 = (($i$3160) + 1)|0;
   if (!($1168)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1165 = ($1164|0)<(10);
   if ($1165) {
    $i$3160 = $1164;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[26352>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (26392 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (26392 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[26352>>2] = $22;
     } else {
      $23 = HEAP32[(26368)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(26360)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (26392 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (26392 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[26352>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(26368)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(26360)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(26372)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (26392 + ($92<<2)|0);
      $94 = HEAP32[26352>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[26352>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (26392 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (26392 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(26368)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(26360)>>2] = $81;
     HEAP32[(26372)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(26356)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (26656 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(26368)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (26656 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(26356)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(26356)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(26368)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(26368)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(26368)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(26360)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(26372)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (26392 + ($229<<2)|0);
       $231 = HEAP32[26352>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[26352>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (26392 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (26392 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(26368)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(26360)>>2] = $rsize$0$i$lcssa;
      HEAP32[(26372)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(26356)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (26656 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (26656 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(26360)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(26368)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (26656 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(26356)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(26356)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(26368)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(26368)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(26368)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L85: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (26392 + ($424<<2)|0);
          $426 = HEAP32[26352>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[26352>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (26392 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (26392 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(26368)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (26656 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(26356)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(26356)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L102: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L102;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(26368)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L85;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(26368)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(26360)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(26372)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(26372)>>2] = $514;
   HEAP32[(26360)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(26360)>>2] = 0;
   HEAP32[(26372)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(26364)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(26364)>>2] = $528;
  $529 = HEAP32[(26376)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(26376)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[26824>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(26832)>>2] = $538;
    HEAP32[(26828)>>2] = $538;
    HEAP32[(26836)>>2] = -1;
    HEAP32[(26840)>>2] = -1;
    HEAP32[(26844)>>2] = 0;
    HEAP32[(26796)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[26824>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(26832)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(26792)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(26784)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(26796)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(26376)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (26800);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(26364)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(26828)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(26784)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(26792)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(26832)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(26796)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(26796)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(26784)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(26784)>>2] = $632;
  $633 = HEAP32[(26788)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(26788)>>2] = $632;
  }
  $635 = HEAP32[(26376)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(26368)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(26368)>>2] = $tbase$255$i;
    }
    HEAP32[(26800)>>2] = $tbase$255$i;
    HEAP32[(26804)>>2] = $tsize$254$i;
    HEAP32[(26812)>>2] = 0;
    $640 = HEAP32[26824>>2]|0;
    HEAP32[(26388)>>2] = $640;
    HEAP32[(26384)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (26392 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (26392 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (26392 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(26376)>>2] = $654;
    HEAP32[(26364)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(26840)>>2]|0;
    HEAP32[(26380)>>2] = $659;
   } else {
    $sp$084$i = (26800);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(26364)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(26376)>>2] = $684;
       HEAP32[(26364)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(26840)>>2]|0;
       HEAP32[(26380)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(26368)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(26368)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (26800);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (26800);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(26364)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(26364)>>2] = $730;
        HEAP32[(26376)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(26372)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(26360)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(26360)>>2] = $736;
         HEAP32[(26372)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (26392 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[26352>>2]|0;
            $763 = $762 & $761;
            HEAP32[26352>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (26656 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(26356)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(26356)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(26368)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(26368)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(26368)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (26392 + ($840<<2)|0);
         $842 = HEAP32[26352>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[26352>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (26392 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (26392 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(26368)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (26656 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(26356)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(26356)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(26368)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(26368)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (26800);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(26376)>>2] = $953;
    HEAP32[(26364)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(26840)>>2]|0;
    HEAP32[(26380)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(26800)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(26800)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(26800)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(26800)+12>>2]|0;
    HEAP32[(26800)>>2] = $tbase$255$i;
    HEAP32[(26804)>>2] = $tsize$254$i;
    HEAP32[(26812)>>2] = 0;
    HEAP32[(26808)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (26392 + ($977<<2)|0);
      $979 = HEAP32[26352>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[26352>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (26392 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (26392 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(26368)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (26656 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(26356)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(26356)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(26368)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(26368)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(26364)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(26364)>>2] = $1062;
   $1063 = HEAP32[(26376)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(26376)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(26368)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(26372)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(26360)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (26392 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[26352>>2]|0;
     $36 = $35 & $34;
     HEAP32[26352>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (26656 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(26356)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(26356)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(26368)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(26368)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(26368)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(26376)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(26364)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(26364)>>2] = $120;
   HEAP32[(26376)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(26372)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(26372)>>2] = 0;
   HEAP32[(26360)>>2] = 0;
   return;
  }
  $125 = HEAP32[(26372)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(26360)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(26360)>>2] = $128;
   HEAP32[(26372)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (26392 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(26368)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[26352>>2]|0;
     $152 = $151 & $150;
     HEAP32[26352>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(26368)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(26368)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(26368)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (26656 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(26356)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(26356)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(26368)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(26368)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(26368)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(26372)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(26360)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (26392 + ($233<<2)|0);
  $235 = HEAP32[26352>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[26352>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (26392 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (26392 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(26368)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (26656 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(26356)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(26356)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(26368)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(26368)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(26384)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(26384)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (26808);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(26384)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(26368)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(26832)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(26376)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(26364)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(26376)>>2] = $36;
  HEAP32[(26364)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(26372)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(26360)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(26360)>>2] = $storemerge21;
  HEAP32[(26372)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (26392 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[26352>>2]|0;
    $88 = $87 & $86;
    HEAP32[26352>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (26656 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(26356)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(26356)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(26368)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(26368)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(26368)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(26368)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(26372)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(26360)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (26392 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[26352>>2]|0;
     $32 = $31 & $30;
     HEAP32[26352>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (26656 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(26356)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(26356)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(26368)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(26368)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(26368)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(26368)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(26376)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(26364)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(26364)>>2] = $115;
   HEAP32[(26376)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(26372)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(26372)>>2] = 0;
   HEAP32[(26360)>>2] = 0;
   return;
  }
  $120 = HEAP32[(26372)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(26360)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(26360)>>2] = $123;
   HEAP32[(26372)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (26392 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[26352>>2]|0;
     $146 = $145 & $144;
     HEAP32[26352>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (26656 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(26356)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(26356)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(26368)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(26368)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(26368)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(26372)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(26360)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (26392 + ($224<<2)|0);
  $226 = HEAP32[26352>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[26352>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (26392 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (26392 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(26368)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (26656 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(26356)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(26356)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(26368)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(26368)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(1); }
function b2(p0) { p0 = p0|0; nullFunc_ii(2);return 0; }
function b3(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3); }
function b4(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0; }
function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5); }
function b6(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0; }
function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_abk_test,_abk_load,_xm_test,_xm_load,_mod_test,_mod_load,_s3m_test,_s3m_load,_stm_test,_stm_load,_ssn_test,_ssn_load,_far_test,_far_load,_mtm_test,_mtm_load,_ptm_test,_ptm_load,_okt_test,_okt_load,_amd_test,_amd_load,_rad_test,_rad_load,_ult_test,_ult_load,_mdl_test,_mdl_load
,_it_test,_it_load,_stx_test,_stx_load,_pt3_test,_pt3_load,_sfx_test,_sfx_load,_flt_test,_flt_load,_st_test,_st_load,_emod_test,_emod_load,_imf_test,_imf_load,_digi_test,_digi_load,_fnk_test,_fnk_load,_ice_test,_ice_load,_hsc_test,_hsc_load,_liq_test,_liq_load,_ims_test,_ims_load,_masi_test,_masi_load
,_amf_test,_amf_load,_psm_test,_psm_load,_stim_test,_stim_load,_mmd1_test,_mmd1_load,_mmd3_test,_mmd3_load,_rtm_test,_rtm_load,_dt_test,_dt_load,_no_test,_no_load,_arch_test,_arch_load,_sym_test,_sym_load,_med2_test,_med2_load,_med3_test,_med3_load,_med4_test,_med4_load,_dbm_test,_dbm_load,_umx_test,_umx_load
,_gdm_test,_gdm_load,_pw_test,_pw_load,_gal5_test,_gal5_load,_gal4_test,_gal4_load,_mfp_test,_mfp_load,_asylum_test,_asylum_load,_hmn_test,_hmn_load,_mgt_test,_mgt_load,_chip_test,_chip_load,_test_AC1D,b0,_test_di,b0,_test_eu,b0,_test_fcm,b0,_test_fuchs,b0,_test_fuzz,b0
,_test_GMC,b0,_test_crb,b0,_test_ksm,b0,_test_mp_id,b0,_test_mp_noid,_test_np1,b0,_test_np2,b0,_test_np3,b0,_test_p61a,b0,_test_p10c,b0,_test_p18a,b0,_test_pha,b0,_test_pru1,b0,_test_pru2,b0,_test_tdd,b0,_test_unic_id
,b0,_test_unic_noid,_test_unic_emptyid,_test_unic2,b0,_test_wn,b0,_test_zen,b0,_test_tp3,b0,_test_p4x,b0,_test_xann,b0,_test_p50a,b0,_test_p60a,b0,_test_pp21,b0,_test_starpack,b0,_test_titanics,b0,_test_skyt,b0,_test_ntp,b0,_test_hrt
,b0,_test_nru,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,_rawoutput,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_ii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_synth_deinit,_synth_reset,b2,_synth_deinit662,_synth_reset663,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_synth_setpatch
,b3,_synth_setvol,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,_get_cmod,_get_samp,_get_spee,_get_slen,_get_plen,_get_patt,_get_pbod,_get_sbod,_get_chunk_in,_get_chunk_tr,_get_chunk_sa,_get_chunk_ve,_get_chunk_pe,_get_chunk_fe,_get_chunk_ii,_get_chunk_pa,_get_chunk_is,_get_chunk_p0,_get_chunk_i0,_get_info,_get_cmnt,_get_ptdt,_get_emic,_get_patt220,_get_8smp
,_get_titl,_get_sdft,_get_song,_get_dsmp_cnt,_get_pbod_cnt,_get_song_2,_get_dsmp,_get_pbod260,_get_d_t_,_get_s_q_,_get_patt289,_get_inst,_get_dapt,_get_dait,_get_tinf,_get_mvox,_get_ster,_get_mnam,_get_anam,_get_mlen,_get_pnum,_get_plen307,_get_sequ,_get_patt310,_get_samp312,_get_info326,_get_song328,_get_inst330,_get_patt332,_get_smpl
,_get_venv,_get_init,_get_ordr,_get_patt_cnt,_get_inst_cnt,_get_patt353,_get_inst354,_get_main,_get_ordr360,_get_patt_cnt362,_get_inst_cnt364,_get_patt365,_get_inst366,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_viiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,_smix_mono_8bit_nearest,_smix_mono_16bit_nearest,_smix_stereo_8bit_nearest,_smix_stereo_16bit_nearest,_smix_mono_8bit_linear,_smix_mono_16bit_linear,_smix_stereo_8bit_linear,_smix_stereo_16bit_linear,_smix_mono_8bit_linear_filter,_smix_mono_16bit_linear_filter,_smix_stereo_8bit_linear_filter,_smix_stereo_16bit_linear_filter,_smix_mono_8bit_spline,_smix_mono_16bit_spline,_smix_stereo_8bit_spline,_smix_stereo_16bit_spline,_smix_mono_8bit_spline_filter,_smix_mono_16bit_spline_filter,_smix_stereo_8bit_spline_filter,_smix_stereo_16bit_spline_filter,b5,b5,b5,b5,b5,b5,b5
,b5,b5,_synth_mixer,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_depack_AC1D,b6,_depack_di,b6,_depack_eu,b6,_depack_fcm,b6,_depack_fuchs,b6,_depack_fuzz
,b6,_depack_GMC,b6,_depack_crb,b6,_depack_ksm,b6,_depack_mp,b6,b6,_depack_np1,b6,_depack_np2,b6,_depack_np3,b6,_depack_p61a,b6,_depack_p10c,b6,_depack_p18a,b6,_depack_pha,b6,_depack_pru1,b6,_depack_pru2,b6,_depack_tdd,b6
,_depack_unic,b6,b6,b6,_depack_unic2,b6,_depack_wn,b6,_depack_zen,b6,_depack_tp3,b6,_depack_p4x,b6,_depack_xann,b6,_depack_p50a,b6,_depack_p60a,b6,_depack_pp21,b6,_depack_starpack,b6,_depack_titanics,b6,_depack_skyt,b6,_depack_ntp,b6
,_depack_hrt,b6,_depack_nru,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_synth_init,b6,b6,_synth_init661,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_cmplong,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,_synth_setnote,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];

  return { _strlen: _strlen, _getMusicInfo: _getMusicInfo, _playXmpFrame: _playXmpFrame, _initXmp: _initXmp, _getXmpLoopCount: _getXmpLoopCount, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _getXmpFrameInfo: _getXmpFrameInfo, _strncpy: _strncpy, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, _i64Add: _i64Add, _memcpy: _memcpy, _endXmp: _endXmp, _i64Subtract: _i64Subtract, _getXmpModuleInfo: _getXmpModuleInfo, _startXmpPlayer: _startXmpPlayer, _getXmpSoundBuffer: _getXmpSoundBuffer, _free: _free, _loadXmpModule: _loadXmpModule, _getXmpSoundBufferLen: _getXmpSoundBufferLen, _malloc: _malloc, _memmove: _memmove, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__getMusicInfo = asm["_getMusicInfo"]; asm["_getMusicInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getMusicInfo.apply(null, arguments);
};

var real__playXmpFrame = asm["_playXmpFrame"]; asm["_playXmpFrame"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__playXmpFrame.apply(null, arguments);
};

var real__initXmp = asm["_initXmp"]; asm["_initXmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__initXmp.apply(null, arguments);
};

var real__getXmpLoopCount = asm["_getXmpLoopCount"]; asm["_getXmpLoopCount"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpLoopCount.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__getXmpFrameInfo = asm["_getXmpFrameInfo"]; asm["_getXmpFrameInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpFrameInfo.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__endXmp = asm["_endXmp"]; asm["_endXmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__endXmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__getXmpModuleInfo = asm["_getXmpModuleInfo"]; asm["_getXmpModuleInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpModuleInfo.apply(null, arguments);
};

var real__startXmpPlayer = asm["_startXmpPlayer"]; asm["_startXmpPlayer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__startXmpPlayer.apply(null, arguments);
};

var real__getXmpSoundBuffer = asm["_getXmpSoundBuffer"]; asm["_getXmpSoundBuffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpSoundBuffer.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__loadXmpModule = asm["_loadXmpModule"]; asm["_loadXmpModule"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__loadXmpModule.apply(null, arguments);
};

var real__getXmpSoundBufferLen = asm["_getXmpSoundBufferLen"]; asm["_getXmpSoundBufferLen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpSoundBufferLen.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};
var _strlen = Module["_strlen"] = asm["_strlen"];
var _getMusicInfo = Module["_getMusicInfo"] = asm["_getMusicInfo"];
var _playXmpFrame = Module["_playXmpFrame"] = asm["_playXmpFrame"];
var _initXmp = Module["_initXmp"] = asm["_initXmp"];
var _getXmpLoopCount = Module["_getXmpLoopCount"] = asm["_getXmpLoopCount"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _getXmpFrameInfo = Module["_getXmpFrameInfo"] = asm["_getXmpFrameInfo"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _endXmp = Module["_endXmp"] = asm["_endXmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _getXmpModuleInfo = Module["_getXmpModuleInfo"] = asm["_getXmpModuleInfo"];
var _startXmpPlayer = Module["_startXmpPlayer"] = asm["_startXmpPlayer"];
var _getXmpSoundBuffer = Module["_getXmpSoundBuffer"] = asm["_getXmpSoundBuffer"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _loadXmpModule = Module["_loadXmpModule"] = asm["_loadXmpModule"];
var _getXmpSoundBufferLen = Module["_getXmpSoundBufferLen"] = asm["_getXmpSoundBufferLen"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



