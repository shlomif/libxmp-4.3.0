// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 26384;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([24,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,65,77,79,83,32,77,117,115,105,99,32,66,97,110,107,0,77,117,115,105,99,32,32,32,0,0,0,0,0,0,0,0,88,77,80,95,73,78,83,84,82,85,77,69,78,84,95,80,65,84,72,0,0,0,0,0,82,73,70,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,20,0,0,0,21,0,0,0,21,0,0,0,22,0,0,0,22,0,0,0,23,0,0,0,23,0,0,0,24,0,0,0,24,0,0,0,25,0,0,0,25,0,0,0,26,0,0,0,26,0,0,0,27,0,0,0,27,0,0,0,28,0,0,0,28,0,0,0,29,0,0,0,29,0,0,0,30,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,64,0,0,0,65,0,0,0,67,0,0,0,69,0,0,0,71,0,0,0,73,0,0,0,75,0,0,0,77,0,0,0,79,0,0,0,81,0,0,0,83,0,0,0,85,0,0,0,87,0,0,0,89,0,0,0,91,0,0,0,93,0,0,0,96,0,0,0,98,0,0,0,100,0,0,0,102,0,0,0,104,0,0,0,106,0,0,0,108,0,0,0,110,0,0,0,112,0,0,0,114,0,0,0,116,0,0,0,118,0,0,0,120,0,0,0,122,0,0,0,124,0,0,0,126,0,0,0,129,0,0,0,131,0,0,0,135,0,0,0,139,0,0,0,143,0,0,0,147,0,0,0,151,0,0,0,155,0,0,0,160,0,0,0,164,0,0,0,168,0,0,0,172,0,0,0,176,0,0,0,180,0,0,0,184,0,0,0,188,0,0,0,193,0,0,0,197,0,0,0,201,0,0,0,205,0,0,0,209,0,0,0,213,0,0,0,217,0,0,0,221,0,0,0,226,0,0,0,230,0,0,0,234,0,0,0,238,0,0,0,242,0,0,0,246,0,0,0,250,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,65,68,72,77,80,84,91,95,98,103,109,114,120,126,127,240,4,0,0,3,0,0,0,4,0,0,0,0,0,0,0,70,97,115,116,32,84,114,97,99,107,101,114,32,73,73,0,77,69,68,50,88,77,0,0,37,45,50,48,46,50,48,115,0,0,0,0,0,0,0,0,70,97,115,116,84,114,97,99,107,101,114,32,118,50,46,48,48,0,0,0,0,0,0,0,79,112,101,110,77,80,84,32,0,0,0,0,0,0,0,0,77,69,68,50,88,77,32,98,121,32,74,46,80,121,110,110,111,110,101,0,0,0,0,0,70,97,115,116,84,114,97,99,107,101,114,32,118,32,50,46,48,48,0,0,0,0,0,0,111,108,100,32,77,111,100,80,108,117,103,32,84,114,97,99,107,101,114,0,0,0,0,0,37,115,32,88,77,32,37,100,46,37,48,50,100,0,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,32,0,0,0,0,0,0,0,128,27,0,0,0,0,0,0,0,0,0,0,4,0,0,0,160,6,0,0,1,0,0,0,0,0,0,0,4,0,0,0,168,6,0,0,1,0,0,0,1,0,0,0,4,0,0,0,176,6,0,0,1,0,0,0,1,0,0,0,4,0,0,0,184,6,0,0,0,0,0,0,3,0,0,0,6,0,0,0,192,6,0,0,0,0,0,0,3,0,0,0,8,0,0,0,200,6,0,0,1,0,0,0,5,0,0,0,6,0,0,0,208,6,0,0,1,0,0,0,5,0,0,0,8,0,0,0,216,6,0,0,1,0,0,0,6,0,0,0,4,0,0,0,224,6,0,0,1,0,0,0,7,0,0,0,4,0,0,0,232,6,0,0,1,0,0,0,7,0,0,0,6,0,0,0,240,6,0,0,1,0,0,0,7,0,0,0,8,0,0,0,248,6,0,0,1,0,0,0,99,0,0,0,4,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,0,0,5,0,0,0,6,0,0,0,0,0,0,0,77,33,75,33,0,0,0,0,77,38,75,33,0,0,0,0,78,46,84,46,0,0,0,0,54,67,72,78,0,0,0,0,56,67,72,78,0,0,0,0,67,68,54,49,0,0,0,0,67,68,56,49,0,0,0,0,84,68,90,52,0,0,0,0,70,65,48,52,0,0,0,0,70,65,48,54,0,0,0,0,70,65,48,56,0,0,0,0,78,83,77,83,0,0,0,0,0,0,0,0,0,0,0,0,65,109,105,103,97,32,80,114,111,116,114,97,99,107,101,114,47,67,111,109,112,97,116,105,98,108,101,0,0,0,0,0,67,72,0,0,0,0,0,0,67,72,78,0,0,0,0,0,70,76,69,88,0,0,0,0,80,114,111,116,114,97,99,107,101,114,0,0,0,0,0,0,78,111,105,115,101,116,114,97,99,107,101,114,0,0,0,0,70,97,115,116,32,84,114,97,99,107,101,114,0,0,0,0,84,97,107,101,32,84,114,97,99,107,101,114,0,0,0,0,79,99,116,97,108,121,115,101,114,0,0,0,0,0,0,0,70,108,101,120,116,114,97,120,0,0,0,0,0,0,0,0,77,111,100,39,115,32,71,114,97,118,101,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,0,0,67,111,110,118,101,114,116,101,100,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,99,108,111,110,101,0,0,0,0,0,0,0,0,79,112,101,110,77,80,84,0,85,110,107,110,111,119,110,32,116,114,97,99,107,101,114,0,37,115,32,37,115,0,0,0,65,68,80,67,77,0,0,0,32,8,0,0,7,0,0,0,8,0,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,51,0,0,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,37,100,46,37,48,50,120,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,37,115,32,83,51,77,0,0,255,163,11,13,10,2,1,3,4,29,180,6,5,255,255,9,255,27,7,254,171,172,16,255,255,255,255,0,0,0,0,0,184,8,0,0,9,0,0,0,10,0,0,0,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,50,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,32,83,84,77,0,0,0,0,83,99,114,101,97,109,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,100,32,83,84,77,0,0,0,0,0,0,255,15,11,13,10,2,1,3,4,29,0,0,0,0,0,0,32,9,0,0,11,0,0,0,12,0,0,0,0,0,0,0,67,111,109,112,111,115,101,114,32,54,54,57,0,0,0,0,105,102,0,0,0,0,0,0,85,78,73,83,32,54,54,57,0,0,0,0,0,0,0,0,121,120,122,166,123,126,0,0,96,9,0,0,13,0,0,0,14,0,0,0,0,0,0,0,70,97,114,97,110,100,111,108,101,32,67,111,109,112,111,115,101,114,0,0,0,0,0,0,70,97,114,97,110,100,111,108,101,32,67,111,109,112,111,115,101,114,32,37,100,46,37,100,0,0,0,0,0,0,0,0,255,249,248,122,251,254,4,253,252,123,255,255,250,255,255,15,184,9,0,0,15,0,0,0,16,0,0,0,0,0,0,0,77,117,108,116,105,116,114,97,99,107,101,114,0,0,0,0,77,117,108,116,105,84,114,97,99,107,101,114,32,37,100,46,37,48,50,100,32,77,84,77,0,0,0,0,0,0,0,0,77,84,77,0,0,0,0,0,0,10,0,0,17,0,0,0,18,0,0,0,0,0,0,0,80,111,108,121,32,84,114,97,99,107,101,114,0,0,0,0,80,111,108,121,32,84,114,97,99,107,101,114,32,80,84,77,32,37,100,46,37,48,50,120,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,15,0,0,0,17,0,0,0,18,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,58,0,0,0,59,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,64,0,0,0,64,0,0,0,0,0,0,0,72,11,0,0,19,0,0,0,20,0,0,0,0,0,0,0,79,107,116,97,108,121,122,101,114,0,0,0,0,0,0,0,67,77,79,68,0,0,0,0,83,80,69,69,0,0,0,0,83,76,69,78,0,0,0,0,83,66,79,68,0,0,0,0,255,0,0,0,1,0,0,0,2,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,116,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,156,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,11,0,0,0,255,0,0,0,255,0,0,0,15,0,0,0,255,0,0,0,157,0,0,0,12,0,0,0,79,75,84,65,83,79,78,71,0,0,0,0,0,0,0,0,24,12,0,0,21,0,0,0,22,0,0,0,0,0,0,0,65,109,117,115,105,99,32,65,100,108,105,98,32,84,114,97,99,107,101,114,0,0,0,0,0,0,0,0,5,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,60,111,0,0,0,0,0,0,82,111,82,0,0,0,0,0,128,12,0,0,23,0,0,0,24,0,0,0,0,0,0,0,82,101,97,108,105,116,121,32,65,100,108,105,98,32,84,114,97,99,107,101,114,0,0,0,82,65,68,32,37,100,46,37,100,0,0,0,0,0,0,0,82,65,68,32,98,121,32,82,69,65,76,105,84,89,33,33,0,0,0,0,0,0,0,0,208,12,0,0,25,0,0,0,26,0,0,0,0,0,0,0,85,108,116,114,97,32,84,114,97,99,107,101,114,0,0,0,16,13,0,0,24,13,0,0,32,13,0,0,40,13,0,0,85,108,116,114,97,32,84,114,97,99,107,101,114,32,37,115,32,85,76,84,32,86,37,48,52,100,0,0,0,0,0,0,60,32,49,46,52,0,0,0,49,46,52,0,0,0,0,0,49,46,53,0,0,0,0,0,49,46,54,0,0,0,0,0,77,65,83,95,85,84,114,97,99,107,95,86,48,48,48,0,80,13,0,0,27,0,0,0,28,0,0,0,0,0,0,0,68,105,103,105,116,114,97,107,107,101,114,0,0,0,0,0,73,78,0,0,0,0,0,0,84,82,0,0,0,0,0,0,83,65,0,0,0,0,0,0,86,69,0,0,0,0,0,0,80,69,0,0,0,0,0,0,70,69,0,0,0,0,0,0,73,73,0,0,0,0,0,0,80,65,0,0,0,0,0,0,73,83,0,0,0,0,0,0,68,105,103,105,116,114,97,107,107,101,114,32,77,68,76,32,37,100,46,37,100,0,0,0,208,13,0,0,29,0,0,0,30,0,0,0,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,117,110,109,111,51,0,0,0,79,112,101,110,83,80,67,32,99,111,110,118,101,114,115,105,111,110,0,0,0,0,0,0,77,111,100,80,108,117,103,32,84,114,97,99,107,101,114,32,49,46,49,54,0,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,51,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,50,46,49,52,118,53,0,0,67,72,66,73,0,0,0,0,67,104,105,98,105,32,84,114,97,99,107,101,114,0,0,0,73,109,112,117,108,115,101,32,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,79,112,101,110,77,80,84,32,49,46,49,55,0,0,0,0,109,117,110,99,104,46,112,121,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,40,37,48,52,120,41,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,37,48,52,100,45,37,48,50,100,45,37,48,50,100,0,0,0,83,99,104,105,115,109,32,84,114,97,99,107,101,114,32,48,46,37,120,0,0,0,0,0,79,112,101,110,77,80,84,32,37,100,46,37,48,50,120,0,79,77,80,84,0,0,0,0,32,40,99,111,109,112,97,116,46,41,0,0,0,0,0,0,66,101,82,111,84,114,97,99,107,101,114,32,37,100,46,37,48,50,120,0,0,0,0,0,37,115,32,73,84,32,37,100,46,37,48,50,120,0,0,0,255,163,11,13,10,2,1,3,4,29,180,6,5,128,129,9,137,27,7,254,135,172,16,17,8,138,132,0,0,0,0,0,112,15,0,0,31,0,0,0,32,0,0,0,0,0,0,0,83,84,77,73,75,32,48,46,50,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,0,0,0,0,0,0,0,0,66,77,79,68,50,83,84,77,32,83,84,88,0,0,0,0,83,84,77,50,83,84,88,32,49,46,37,100,0,0,0,0,255,15,11,13,10,2,1,3,4,29,0,0,0,0,0,0,33,83,99,114,101,97,109,33,0,0,0,0,0,0,0,0,83,67,82,77,0,0,0,0,232,15,0,0,33,0,0,0,34,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,51,0,0,0,0,37,45,54,46,54,115,32,73,70,70,77,79,68,76,0,0,67,77,78,84,0,0,0,0,80,84,68,84,0,0,0,0,40,16,0,0,35,0,0,0,36,0,0,0,0,0,0,0,83,111,117,110,100,70,88,32,118,49,46,51,47,50,46,48,0,0,0,0,0,0,0,0,83,111,117,110,100,70,88,32,49,46,51,0,0,0,0,0,83,111,117,110,100,70,88,32,50,46,48,0,0,0,0,0,112,16,0,0,37,0,0,0,38,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,0,0,0,0,0,37,115,37,115,46,78,84,0,37,115,37,115,46,110,116,0,37,115,37,115,46,65,83,0,37,115,37,115,46,97,115,0,83,84,49,46,50,32,77,111,100,117,108,101,73,78,70,79,0,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,49,46,50,0,83,84,49,46,51,32,77,111,100,117,108,101,73,78,70,79,0,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,49,46,51,0,65,117,100,105,111,83,99,117,108,112,116,117,114,101,49,48,0,0,0,0,0,0,0,0,65,117,100,105,111,83,99,117,108,112,116,117,114,101,32,49,46,48,0,0,0,0,0,0,37,115,32,37,52,46,52,115,0,0,0,0,0,0,0,0,0,25,49,71,90,106,117,125,127,125,117,106,90,71,49,25,0,231,207,185,166,150,139,131,129,131,139,150,166,185,207,231,128,136,144,152,160,168,176,184,192,200,208,216,224,232,240,248,0,8,16,24,32,40,48,56,64,72,80,88,96,104,112,120,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,65,77,0,0,0,0,0,0,70,76,84,0,0,0,0,0,69,88,79,0,0,0,0,0,184,17,0,0,39,0,0,0,40,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,0,85,108,116,105,109,97,116,101,32,83,111,117,110,100,116,114,97,99,107,101,114,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,73,88,0,68,46,79,46,67,32,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,48,0,0,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,0,88,3,0,0,40,3,0,0,250,2,0,0,208,2,0,0,166,2,0,0,128,2,0,0,92,2,0,0,58,2,0,0,26,2,0,0,252,1,0,0,224,1,0,0,197,1,0,0,172,1,0,0,148,1,0,0,125,1,0,0,104,1,0,0,83,1,0,0,64,1,0,0,46,1,0,0,29,1,0,0,13,1,0,0,254,0,0,0,240,0,0,0,226,0,0,0,214,0,0,0,202,0,0,0,190,0,0,0,180,0,0,0,170,0,0,0,160,0,0,0,151,0,0,0,143,0,0,0,135,0,0,0,127,0,0,0,120,0,0,0,113,0,0,0,255,255,255,255,0,0,0,0,192,18,0,0,41,0,0,0,42,0,0,0,0,0,0,0,81,117,97,100,114,97,32,67,111,109,112,111,115,101,114,0,69,77,73,67,0,0,0,0,56,83,77,80,0,0,0,0,81,117,97,100,114,97,32,67,111,109,112,111,115,101,114,32,69,77,79,68,32,118,37,100,0,0,0,0,0,0,0,0,16,19,0,0,43,0,0,0,44,0,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,118,49,46,48,0,0,0,0,0,0,73,109,97,103,111,32,79,114,112,104,101,117,115,32,49,46,48,32,73,77,70,0,0,0,255,163,171,3,5,4,6,172,7,180,8,25,12,10,165,166,157,156,1,2,254,253,132,133,9,255,20,27,29,11,13,16,17,14,169,170,0,0,0,0,120,19,0,0,45,0,0,0,46,0,0,0,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,32,37,45,52,46,52,115,0,0,0,0,0,68,73,71,73,32,66,111,111,115,116,101,114,32,109,111,100,117,108,101,0,0,0,0,0,200,19,0,0,47,0,0,0,48,0,0,0,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,0,0,0,0,0,70,117,110,107,116,114,97,99,107,101,114,71,79,76,68,0,70,117,110,107,116,114,97,99,107,101,114,32,68,79,83,51,50,0,0,0,0,0,0,0,16,20,0,0,49,0,0,0,50,0,0,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,54,47,73,99,101,32,84,114,97,99,107,101,114,0,0,0,0,73,99,101,32,84,114,97,99,107,101,114,0,0,0,0,0,83,111,117,110,100,116,114,97,99,107,101,114,32,50,46,54,0,0,0,0,0,0,0,0,104,20,0,0,51,0,0,0,52,0,0,0,0,0,0,0,72,83,67,45,84,114,97,99,107,101,114,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,152,24,0,0,53,0,0,0,54,0,0,0,0,0,0,0,37,115,32,76,73,81,32,37,100,46,37,48,50,100,0,0,0,171,13,2,255,172,255,255,255,11,255,10,14,3,9,255,255,255,163,7,1,4,255,5,6,0,0,0,0,0,0,0,76,105,113,117,105,100,32,77,111,100,117,108,101,58,0,0,0,21,0,0,55,0,0,0,56,0,0,0,0,0,0,0,73,109,97,103,101,115,32,77,117,115,105,99,32,83,121,115,116,101,109,0,0,0,0,0,40,21,0,0,57,0,0,0,58,0,0,0,0,0,0,0,69,112,105,99,32,77,101,103,97,71,97,109,101,115,32,77,65,83,73,0,0,0,0,0,84,73,84,76,0,0,0,0,83,68,70,84,0,0,0,0,68,83,77,80,0,0,0,0,80,66,79,68,0,0,0,0,83,105,110,97,114,105,97,32,80,83,77,0,0,0,0,0,69,112,105,99,32,77,101,103,97,71,97,109,101,115,32,77,65,83,73,32,80,83,77,0,152,21,0,0,59,0,0,0,60,0,0,0,0,0,0,0,68,83,77,73,32,65,100,118,97,110,99,101,100,32,77,111,100,117,108,101,32,70,111,114,109,97,116,0,0,0,0,0,68,83,77,73,32,37,100,46,37,100,32,65,77,70,0,0,216,21,0,0,61,0,0,0,62,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,83,116,117,100,105,111,0,0,0,0,0,0,0,80,114,111,116,114,97,99,107,101,114,32,83,116,117,100,105,111,32,80,83,77,32,37,100,46,37,48,50,100,0,0,0,32,22,0,0,63,0,0,0,64,0,0,0,0,0,0,0,83,108,97,109,116,105,108,116,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,1,1,0,3,3,3,2,2,2,1,1,0,4,4,4,3,2,2,1,1,0,5,5,5,5,4,3,2,1,0,6,6,6,6,5,4,3,2,1,0,0,12,12,12,0,0,0,0,0,0,12,12,12,12,12,12,0,0,244,12,12,12,0,0,0,244,244,232,24,24,24,12,0,0,244,232,220,12,12,12,12,0,244,232,220,208,12,12,12,12,0,244,232,220,208,0,0,47,0,0,0,43,0,0,0,40,0,0,0,37,0,0,0,35,0,0,0,32,0,0,0,30,0,0,0,29,0,0,0,27,0,0,0,26,0,0,0,216,22,0,0,65,0,0,0,66,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,47,79,99,116,97,77,69,68,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,79,99,116,97,77,69,68,32,50,46,48,48,32,77,77,68,48,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,32,77,77,68,48,0,0,0,79,99,116,97,77,69,68,32,52,46,48,48,32,77,77,68,49,0,0,0,0,0,0,0,77,77,68,48,0,0,0,0,77,77,68,49,0,0,0,0,104,23,0,0,67,0,0,0,68,0,0,0,0,0,0,0,79,99,116,97,77,69,68,0,79,99,116,97,77,69,68,32,118,53,32,77,77,68,50,0,79,99,116,97,77,69,68,32,83,111,117,110,100,115,116,117,100,105,111,32,77,77,68,37,99,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,77,77,68,50,0,0,0,0,77,77,68,51,0,0,0,0,216,23,0,0,69,0,0,0,70,0,0,0,0,0,0,0,82,101,97,108,32,84,114,97,99,107,101,114,0,0,0,0,82,84,77,77,0,0,0,0,37,115,32,82,84,77,32,37,120,46,37,48,50,120,0,0,82,84,78,68,0,0,0,0,82,84,73,78,0,0,0,0,82,84,83,77,0,0,0,0,40,24,0,0,71,0,0,0,72,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,0,68,46,84,46,0,0,0,0,83,46,81,46,0,0,0,0,68,65,80,84,0,0,0,0,68,65,73,84,0,0,0,0,68,105,103,105,116,97,108,32,84,114,97,99,107,101,114,32,68,84,77,0,0,0,0,0,128,24,0,0,73,0,0,0,74,0,0,0,0,0,0,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,32,78,79,0,0,0,0,0,0,0,76,105,113,117,105,100,32,84,114,97,99,107,101,114,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,200,24,0,0,75,0,0,0,76,0,0,0,0,0,0,0,65,114,99,104,105,109,101,100,101,115,32,84,114,97,99,107,101,114,0,0,0,0,0,0,84,73,78,70,0,0,0,0,77,86,79,88,0,0,0,0,83,84,69,82,0,0,0,0,77,78,65,77,0,0,0,0,65,78,65,77,0,0,0,0,77,76,69,78,0,0,0,0,80,78,85,77,0,0,0,0,80,76,69,78,0,0,0,0,83,69,81,85,0,0,0,0,83,65,77,80,0,0,0,0,0,72,100,116,130,138,146,154,162,166,170,174,178,182,234,190,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,226,228,228,230,230,232,232,234,234,236,236,238,238,240,240,242,242,244,244,246,246,248,248,250,250,252,252,254,254,254,254,254,0,0,0,0,0,0,0,136,25,0,0,77,0,0,0,78,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,83,121,109,112,104,111,110,121,0,0,0,0,0,0,0,0,108,105,98,120,109,112,58,32,117,110,115,117,112,112,111,114,116,101,100,32,115,97,109,112,108,101,32,116,121,112,101,10,0,0,0,0,0,0,0,0,216,25,0,0,79,0,0,0,80,0,0,0,0,0,0,0,77,69,68,32,49,46,49,50,32,77,69,68,50,0,0,0,37,115,47,37,115,0,0,0,0,26,0,0,81,0,0,0,82,0,0,0,0,0,0,0,77,69,68,32,50,46,48,48,32,77,69,68,51,0,0,0,32,26,0,0,83,0,0,0,84,0,0,0,0,0,0,0,77,69,68,32,50,46,49,48,32,77,69,68,52,0,0,0,77,69,68,86,0,0,0,4,0,0,0,0,0,0,0,0,77,69,68,32,37,100,46,37,48,50,100,32,77,69,68,52,0,0,0,0,0,0,0,0,104,26,0,0,85,0,0,0,86,0,0,0,0,0,0,0,68,105,103,105,66,111,111,115,116,101,114,32,80,114,111,0,73,78,70,79,0,0,0,0,83,79,78,71,0,0,0,0,83,77,80,76,0,0,0,0,86,69,78,86,0,0,0,0,68,105,103,105,66,111,111,115,116,101,114,32,80,114,111,32,37,100,46,37,48,50,120,32,68,66,77,48,0,0,0,0,200,26,0,0,87,0,0,0,88,0,0,0,0,0,0,0,69,112,105,99,32,71,97,109,101,115,32,85,77,88,0,0,69,120,116,101,110,100,101,100,32,77,111,100,117,108,101,58,0,0,0,0,0,0,0,0,0,27,0,0,89,0,0,0,90,0,0,0,0,0,0,0,71,101,110,101,114,105,99,32,68,105,103,105,116,97,108,32,77,117,115,105,99,0,0,0,71,68,77,32,37,100,46,37,48,50,100,32,40,50,71,68,77,32,37,100,46,37,48,50,100,41,0,0,0,0,0,0,71,68,77,32,37,100,46,37,48,50,100,32,40,117,110,107,110,111,119,110,32,116,114,97,99,107,101,114,32,37,100,46,37,48,50,100,41,0,0,0,112,27,0,0,91,0,0,0,92,0,0,0,0,0,0,0,112,114,111,119,105,122,97,114,100,0,0,0,0,0,0,0,77,46,75,46,0,0,0,0,37,115,0,0,0,0,0,0,160,27,0,0,93,0,0,0,94,0,0,0,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,53,46,48,32,40,74,50,66,41,0,0,0,73,78,73,84,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,53,46,48,0,240,27,0,0,95,0,0,0,96,0,0,0,0,0,0,0,71,97,108,97,120,121,32,77,117,115,105,99,32,83,121,115,116,101,109,32,52,46,48,0,77,65,73,78,0,0,0,0,79,82,68,82,0,0,0,0,80,65,84,84,0,0,0,0,73,78,83,84,0,0,0,0,117,110,107,110,111,119,110,32,101,102,102,101,99,116,32,37,48,50,120,32,37,48,50,120,10,0,0,0,0,0,0,0,88,28,0,0,97,0,0,0,98,0,0,0,0,0,0,0,77,97,103,110,101,116,105,99,32,70,105,101,108,100,115,32,80,97,99,107,101,114,0,0,108,105,98,120,109,112,58,32,105,110,118,97,108,105,100,32,102,105,108,101,110,97,109,101,32,37,115,10,0,0,0,0,37,115,37,115,0,0,0,0,46,115,101,116,0,0,0,0,108,105,98,120,109,112,58,32,109,105,115,115,105,110,103,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,108,105,98,120,109,112,58,32,99,97,110,39,116,32,111,112,101,110,32,115,97,109,112,108,101,32,102,105,108,101,32,37,115,10,0,0,0,0,0,0,0,29,0,0,99,0,0,0,100,0,0,0,0,0,0,0,65,115,121,108,117,109,32,77,117,115,105,99,32,70,111,114,109,97,116,32,118,49,46,48,0,0,0,0,0,0,0,0,65,83,89,76,85,77,32,77,117,115,105,99,32,70,111,114,109,97,116,32,86,49,46,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,29,0,0,101,0,0,0,102,0,0,0,0,0,0,0,72,105,115,32,77,97,115,116,101,114,39,115,32,78,111,105,115,101,0,0,0,0,0,0,77,117,112,112,0,0,0,0,37,115,32,40,37,52,46,52,115,41,0,0,0,0,0,0,77,117,112,112,32,37,48,50,120,32,37,48,50,120,32,37,48,50,120,0,0,0,0,0,176,29,0,0,103,0,0,0,104,0,0,0,0,0,0,0,77,101,103,97,116,114,97,99,107,101,114,0,0,0,0,0,77,101,103,97,116,114,97,99,107,101,114,32,77,71,84,32,118,37,100,46,37,100,0,0,232,29,0,0,105,0,0,0,106,0,0,0,0,0,0,0,67,104,105,112,116,114,97,99,107,101,114,0,0,0,0,0,75,82,73,83,0,0,0,0,120,35,0,0,32,36,0,0,248,35,0,0,72,36,0,0,216,41,0,0,200,36,0,0,248,36,0,0,168,41,0,0,32,38,0,0,248,37,0,0,128,38,0,0,168,38,0,0,88,38,0,0,168,39,0,0,248,38,0,0,248,39,0,0,128,41,0,0,96,40,0,0,16,37,0,0,160,35,0,0,208,35,0,0,56,40,0,0,216,40,0,0,240,40,0,0,136,40,0,0,160,40,0,0,208,37,0,0,0,42,0,0,128,37,0,0,88,37,0,0,168,37,0,0,208,39,0,0,40,39,0,0,16,39,0,0,128,39,0,0,160,36,0,0,208,38,0,0,40,41,0,0,112,36,0,0,88,41,0,0,0,0,0,0,0,0,0,0,0,0,3,88,3,40,2,250,2,208,2,166,2,128,2,92,2,58,2,26,1,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,0,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,0,0,0,0,0,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,113,0,82,3,34,3,245,2,203,2,162,2,125,2,89,2,55,2,23,2,249,1,221,1,194,1,169,1,145,1,123,1,101,1,81,1,62,1,44,1,28,1,12,1,253,0,239,0,225,0,213,0,201,0,189,0,179,0,169,0,159,0,150,0,142,0,134,0,126,0,119,0,113,0,76,3,28,3,240,2,197,2,158,2,120,2,85,2,51,2,20,2,246,1,218,1,191,1,166,1,142,1,120,1,99,1,79,1,60,1,42,1,26,1,10,1,251,0,237,0,224,0,211,0,199,0,188,0,177,0,167,0,158,0,149,0,141,0,133,0,125,0,118,0,112,0,70,3,23,3,234,2,192,2,153,2,116,2,80,2,47,2,16,2,242,1,214,1,188,1,163,1,139,1,117,1,96,1,76,1,58,1,40,1,24,1,8,1,249,0,235,0,222,0,209,0,198,0,187,0,176,0,166,0,157,0,148,0,140,0,132,0,125,0,118,0,111,0,64,3,17,3,229,2,187,2,148,2,111,2,76,2,43,2,12,2,239,1,211,1,185,1,160,1,136,1,114,1,94,1,74,1,56,1,38,1,22,1,6,1,247,0,233,0,220,0,208,0,196,0,185,0,175,0,165,0,156,0,147,0,139,0,131,0,124,0,117,0,110,0,58,3,11,3,224,2,182,2,143,2,107,2,72,2,39,2,8,2,235,1,207,1,181,1,157,1,134,1,112,1,91,1,72,1,53,1,36,1,20,1,4,1,245,0,232,0,219,0,206,0,195,0,184,0,174,0,164,0,155,0,146,0,138,0,130,0,123,0,116,0,109,0,52,3,6,3,218,2,177,2,139,2,102,2,68,2,35,2,4,2,231,1,204,1,178,1,154,1,131,1,109,1,89,1,69,1,51,1,34,1,18,1,2,1,244,0,230,0,217,0,205,0,193,0,183,0,172,0,163,0,154,0,145,0,137,0,129,0,122,0,115,0,109,0,46,3,0,3,213,2,172,2,134,2,98,2,63,2,31,2,1,2,228,1,201,1,175,1,151,1,128,1,107,1,86,1,67,1,49,1,32,1,16,1,0,1,242,0,228,0,216,0,204,0,192,0,181,0,171,0,161,0,152,0,144,0,136,0,128,0,121,0,114,0,108,0,139,3,88,3,40,3,250,2,208,2,166,2,128,2,92,2,58,2,26,2,252,1,224,1,197,1,172,1,148,1,125,1,104,1,83,1,64,1,46,1,29,1,13,1,254,0,240,0,226,0,214,0,202,0,190,0,180,0,170,0,160,0,151,0,143,0,135,0,127,0,120,0,132,3,82,3,34,3,245,2,203,2,163,2,124,2,89,2,55,2,23,2,249,1,221,1,194,1,169,1,145,1,123,1,101,1,81,1,62,1,44,1,28,1,12,1,253,0,238,0,225,0,212,0,200,0,189,0,179,0,169,0,159,0,150,0,142,0,134,0,126,0,119,0,126,3,76,3,28,3,240,2,197,2,158,2,120,2,85,2,51,2,20,2,246,1,218,1,191,1,166,1,142,1,120,1,99,1,79,1,60,1,42,1,26,1,10,1,251,0,237,0,223,0,211,0,199,0,188,0,177,0,167,0,158,0,149,0,141,0,133,0,125,0,118,0,119,3,70,3,23,3,234,2,192,2,153,2,116,2,80,2,47,2,16,2,242,1,214,1,188,1,163,1,139,1,117,1,96,1,76,1,58,1,40,1,24,1,8,1,249,0,235,0,222,0,209,0,198,0,187,0,176,0,166,0,157,0,148,0,140,0,132,0,125,0,118,0,113,3,64,3,17,3,229,2,187,2,148,2,111,2,76,2,43,2,12,2,238,1,211,1,185,1,160,1,136,1,114,1,94,1,74,1,56,1,38,1,22,1,6,1,247,0,233,0,220,0,208,0,196,0,185,0,175,0,165,0,156,0,147,0,139,0,131,0,123,0,117,0,107,3,58,3,11,3,224,2,182,2,143,2,107,2,72,2,39,2,8,2,235,1,207,1,181,1,157,1,134,1,112,1,91,1,72,1,53,1,36,1,20,1,4,1,245,0,232,0,219,0,206,0,195,0,184,0,174,0,164,0,155,0,146,0,138,0,130,0,123,0,116,0,100,3,52,3,6,3,218,2,177,2,139,2,102,2,68,2,35,2,4,2,231,1,204,1,178,1,154,1,131,1,109,1,89,1,69,1,51,1,34,1,18,1,2,1,244,0,230,0,217,0,205,0,193,0,183,0,172,0,163,0,154,0,145,0,137,0,129,0,122,0,115,0,94,3,46,3,0,3,213,2,172,2,134,2,98,2,63,2,31,2,1,2,228,1,201,1,175,1,151,1,128,1,107,1,86,1,67,1,49,1,32,1,16,1,0,1,242,0,228,0,216,0,203,0,192,0,181,0,171,0,161,0,152,0,144,0,136,0,128,0,121,0,114,0,144,35,0,0,107,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,67,49,68,32,80,97,99,107,101,114,0,0,0,0,0,184,35,0,0,109,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,73,108,108,117,115,105,111,110,115,0,0,0,0,0,0,0,232,35,0,0,111,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,117,114,101,107,97,32,80,97,99,107,101,114,0,0,0,16,36,0,0,113,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,67,45,77,32,80,97,99,107,101,114,0,0,0,0,0,56,36,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,99,104,115,32,84,114,97,99,107,101,114,0,0,0,96,36,0,0,117,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,117,122,122,97,99,32,80,97,99,107,101,114,0,0,0,136,36,0,0,119,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,97,109,101,32,77,117,115,105,99,32,67,114,101,97,116,111,114,0,0,0,0,0,0,184,36,0,0,121,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,101,97,116,115,101,101,107,101,114,32,49,46,48,0,0,224,36,0,0,123,0,0,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,101,102,114,101,110,115,32,83,111,117,110,100,32,77,97,99,104,105,110,101,0,0,0,40,37,0,0,125,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,37,0,0,127,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,111,100,117,108,101,32,80,114,111,116,101,99,116,111,114,0,0,0,0,0,0,0,0,77,111,100,117,108,101,32,80,114,111,116,101,99,116,111,114,32,110,111,73,68,0,0,0,112,37,0,0,128,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,80,97,99,107,101,114,32,118,49,0,0,152,37,0,0,130,0,0,0,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,80,97,99,107,101,114,32,118,50,0,0,192,37,0,0,132,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,80,97,99,107,101,114,32,118,51,0,0,232,37,0,0,134,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,54,46,49,97,0,16,38,0,0,136,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,109,105,122,101,114,32,49,46,48,99,0,0,0,56,38,0,0,138,0,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,109,105,122,101,114,32,49,46,56,97,0,0,0,96,56,96,0,0,160,96,0,1,62,96,0,1,12,72,231,112,38,0,0,140,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,104,97,32,80,97,99,107,101,114,0,0,0,0,0,0,152,38,0,0,142,0,0,0,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,114,117,110,110,101,114,32,49,46,48,0,0,0,192,38,0,0,144,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,114,117,110,110,101,114,32,50,46,48,0,0,0,232,38,0,0,146,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,68,97,114,107,32,68,101,109,111,110,0,0,64,39,0,0,148,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,39,0,0,150,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,39,0,0,151,0,0,0,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,32,110,111,105,100,0,0,0,0,0,0,0,85,78,73,67,32,84,114,97,99,107,101,114,32,105,100,48,0,0,0,0,0,0,0,0,152,39,0,0,152,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,105,99,32,84,114,97,99,107,101,114,32,50,0,0,192,39,0,0,154,0,0,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,97,110,116,111,110,32,80,97,99,107,101,114,0,0,0,232,39,0,0,156,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,101,110,32,80,97,99,107,101,114,0,0,0,0,0,0,16,40,0,0,158,0,0,0,159], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([84,114,97,99,107,101,114,32,80,97,99,107,101,114,32,118,51,0,0,0,0,0,0,0,67,80,76,88,95,84,80,51,0,0,0,0,0,0,0,0,80,40,0,0,160,0,0,0,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,52,46,120,0,0,120,40,0,0,162,0,0,0,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,65,78,78,32,80,97,99,107,101,114,0,0,0,0,0,184,40,0,0,164,0,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,40,0,0,166,0,0,0,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,104,101,32,80,108,97,121,101,114,32,53,46,48,97,0,84,104,101,32,80,108,97,121,101,114,32,54,46,48,97,0,8,41,0,0,168,0,0,0,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,41,0,0,170,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,111,80,97,99,107,101,114,32,50,46,49,0,0,0,80,114,111,80,97,99,107,101,114,32,51,46,48,0,0,0,64,41,0,0,172,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,97,114,116,114,101,107,107,101,114,32,80,97,99,107,101,114,0,0,0,0,0,0,112,41,0,0,174,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,105,116,97,110,105,99,115,32,80,108,97,121,101,114,0,152,41,0,0,176,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,75,89,84,32,80,97,99,107,101,114,0,0,0,0,0,192,41,0,0,178,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,118,111,116,114,97,100,101,32,80,97,99,107,101,114,0,0,0,0,0,0,0,0,240,41,0,0,180,0,0,0,181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,111,114,110,101,116,32,80,97,99,107,101,114,0,0,0,24,42,0,0,182,0,0,0,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,105,115,101,82,117,110,110,101,114,0,0,0,0,0,0,0,0,0,184,255,0,0,112,255,0,0,40,255,0,0,224,254,0,0,152,254,0,0,80,254,0,0,8,254,0,0,192,253,0,0,120,253,0,0,48,253,0,0,232,252,0,0,160,252,0,0,88,252,0,0,16,252,0,0,200,251,0,0,224,4,0,0,144,6,0,0,96,16,0,0,168,17,0,0,192,13,0,0,16,8,0,0,168,8,0,0,96,15,0,0,168,9,0,0,0,20,0,0,0,19,0,0,240,9,0,0,64,13,0,0,192,12,0,0,160,20,0,0,112,24,0,0,24,21,0,0,144,27,0,0,224,27,0,0,200,21,0,0,136,21,0,0,240,28,0,0,240,26,0,0,200,22,0,0,88,23,0,0,200,25,0,0,240,25,0,0,16,26,0,0,216,29,0,0,200,23,0,0,216,15,0,0,24,24,0,0,160,29,0,0,184,24,0,0,120,25,0,0,104,19,0,0,88,26,0,0,176,18,0,0,56,11,0,0,24,16,0,0,80,9,0,0,184,26,0,0,72,29,0,0,16,22,0,0,240,20,0,0,16,9,0,0,184,19,0,0,8,12,0,0,112,12,0,0,88,20,0,0,72,28,0,0,8,0,0,0,96,27,0,0,0,0,0,0,86,28,0,0,34,28,0,0,238,27,0,0,187,27,0,0,135,27,0,0,85,27,0,0,34,27,0,0,240,26,0,0,191,26,0,0,142,26,0,0,93,26,0,0,44,26,0,0,252,25,0,0,204,25,0,0,156,25,0,0,109,25,0,0,62,25,0,0,16,25,0,0,226,24,0,0,180,24,0,0,134,24,0,0,89,24,0,0,44,24,0,0,0,24,0,0,212,23,0,0,168,23,0,0,124,23,0,0,81,23,0,0,38,23,0,0,251,22,0,0,209,22,0,0,167,22,0,0,125,22,0,0,84,22,0,0,43,22,0,0,2,22,0,0,217,21,0,0,177,21,0,0,137,21,0,0,98,21,0,0,58,21,0,0,19,21,0,0,236,20,0,0,198,20,0,0,159,20,0,0,121,20,0,0,84,20,0,0,46,20,0,0,9,20,0,0,228,19,0,0,192,19,0,0,155,19,0,0,119,19,0,0,83,19,0,0,48,19,0,0,12,19,0,0,233,18,0,0,198,18,0,0,164,18,0,0,130,18,0,0,95,18,0,0,62,18,0,0,28,18,0,0,251,17,0,0,218,17,0,0,185,17,0,0,152,17,0,0,120,17,0,0,87,17,0,0,55,17,0,0,24,17,0,0,248,16,0,0,217,16,0,0,186,16,0,0,155,16,0,0,125,16,0,0,94,16,0,0,64,16,0,0,34,16,0,0,4,16,0,0,231,15,0,0,202,15,0,0,173,15,0,0,144,15,0,0,115,15,0,0,87,15,0,0,58,15,0,0,30,15,0,0,2,15,0,0,231,14,0,0,203,14,0,0,176,14,0,0,149,14,0,0,122,14,0,0,95,14,0,0,69,14,0,0,43,14,0,0,17,14,0,0,247,13,0,0,221,13,0,0,195,13,0,0,170,13,0,0,145,13,0,0,120,13,0,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,1,0,0,0,1,0,0,0,254,255,255,255,1,0,0,0,1,0,0,0,252,255,255,255,1,0,0,0,1,0,0,0,248,255,255,255,1,0,0,0,1,0,0,0,240,255,255,255,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,16,0,0,0,19,0,0,0,22,0,0,0,26,0,0,0,32,0,0,0,43,0,0,0,64,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,49,0,0,0,74,0,0,0,97,0,0,0,120,0,0,0,141,0,0,0,161,0,0,0,180,0,0,0,197,0,0,0,212,0,0,0,224,0,0,0,235,0,0,0,244,0,0,0,250,0,0,0,253,0,0,0,255,0,0,0,253,0,0,0,250,0,0,0,244,0,0,0,235,0,0,0,224,0,0,0,212,0,0,0,197,0,0,0,180,0,0,0,161,0,0,0,141,0,0,0,120,0,0,0,97,0,0,0,74,0,0,0,49,0,0,0,24,0,0,0,0,0,0,0,232,255,255,255,207,255,255,255,182,255,255,255,159,255,255,255,136,255,255,255,115,255,255,255,95,255,255,255,76,255,255,255,59,255,255,255,44,255,255,255,32,255,255,255,21,255,255,255,12,255,255,255,6,255,255,255,3,255,255,255,1,255,255,255,3,255,255,255,6,255,255,255,12,255,255,255,21,255,255,255,32,255,255,255,44,255,255,255,59,255,255,255,76,255,255,255,95,255,255,255,115,255,255,255,136,255,255,255,159,255,255,255,182,255,255,255,207,255,255,255,232,255,255,255,0,0,0,0,49,0,0,0,97,0,0,0,141,0,0,0,180,0,0,0,212,0,0,0,235,0,0,0,250,0,0,0,255,0,0,0,250,0,0,0,235,0,0,0,212,0,0,0,180,0,0,0,141,0,0,0,97,0,0,0,49,0,0,0,0,0,0,0,207,255,255,255,159,255,255,255,115,255,255,255,76,255,255,255,44,255,255,255,21,255,255,255,6,255,255,255,1,255,255,255,6,255,255,255,21,255,255,255,44,255,255,255,76,255,255,255,115,255,255,255,159,255,255,255,207,255,255,255,19,208,2,67,43,183,4,67,89,165,6,67,183,154,8,67,96,151,10,67,112,155,12,67,0,167,14,67,47,186,16,67,23,213,18,67,214,247,20,67,137,34,23,67,77,85,25,67,65,144,27,67,131,211,29,67,50,31,32,67,109,115,34,67,84,208,36,67,7,54,39,67,168,164,41,67,87,28,44,67,55,157,46,67,104,39,49,67,15,187,51,67,78,88,54,67,73,255,56,67,37,176,59,67,5,107,62,67,16,48,65,67,106,255,67,67,60,217,70,67,171,189,73,67,223,172,76,67,0,167,79,67,55,172,82,67,174,188,85,67,141,216,88,67,0,0,92,67,49,51,95,67,77,114,98,67,128,189,101,67,246,20,105,67,222,120,108,67,101,233,111,67,187,102,115,67,16,241,118,67,147,136,122,67,119,45,126,67,246,239,128,67,19,208,130,67,43,183,132,67,89,165,134,67,183,154,136,67,96,151,138,67,112,155,140,67,0,167,142,67,47,186,144,67,23,213,146,67,214,247,148,67,137,34,151,67,77,85,153,67,65,144,155,67,131,211,157,67,50,31,160,67,109,115,162,67,84,208,164,67,7,54,167,67,168,164,169,67,87,28,172,67,55,157,174,67,104,39,177,67,15,187,179,67,78,88,182,67,73,255,184,67,37,176,187,67,5,107,190,67,16,48,193,67,106,255,195,67,60,217,198,67,171,189,201,67,223,172,204,67,0,167,207,67,55,172,210,67,174,188,213,67,141,216,216,67,0,0,220,67,49,51,223,67,77,114,226,67,128,189,229,67,246,20,233,67,222,120,236,67,101,233,239,67,187,102,243,67,16,241,246,67,147,136,250,67,119,45,254,67,246,239,0,68,19,208,2,68,43,183,4,68,89,165,6,68,183,154,8,68,96,151,10,68,112,155,12,68,0,167,14,68,47,186,16,68,23,213,18,68,214,247,20,68,137,34,23,68,77,85,25,68,65,144,27,68,131,211,29,68,50,31,32,68,109,115,34,68,84,208,36,68,7,54,39,68,168,164,41,68,87,28,44,68,55,157,46,68,104,39,49,68,15,187,51,68,78,88,54,68,73,255,56,68,37,176,59,68,5,107,62,68,16,48,65,68,106,255,67,68,60,217,70,68,171,189,73,68,223,172,76,68,0,167,79,68,55,172,82,68,174,188,85,68,141,216,88,68,0,0,92,68,49,51,95,68,77,114,98,68,128,189,101,68,246,20,105,68,222,120,108,68,101,233,111,68,187,102,115,68,16,241,118,68,147,136,122,68,119,45,126,68,246,239,128,68,19,208,130,68,43,183,132,68,89,165,134,68,183,154,136,68,96,151,138,68,112,155,140,68,0,167,142,68,47,186,144,68,23,213,146,68,214,247,148,68,137,34,151,68,77,85,153,68,65,144,155,68,131,211,157,68,50,31,160,68,109,115,162,68,84,208,164,68,7,54,167,68,168,164,169,68,87,28,172,68,55,157,174,68,104,39,177,68,15,187,179,68,78,88,182,68,73,255,184,68,37,176,187,68,5,107,190,68,16,48,193,68,106,255,195,68,60,217,198,68,171,189,201,68,223,172,204,68,0,167,207,68,55,172,210,68,174,188,213,68,141,216,216,68,0,0,220,68,49,51,223,68,77,114,226,68,128,189,229,68,246,20,233,68,222,120,236,68,101,233,239,68,187,102,243,68,16,241,246,68,147,136,250,68,119,45,254,68,246,239,0,69,19,208,2,69,43,183,4,69,89,165,6,69,183,154,8,69,96,151,10,69,112,155,12,69,0,167,14,69,47,186,16,69,23,213,18,69,214,247,20,69,137,34,23,69,77,85,25,69,65,144,27,69,131,211,29,69,50,31,32,69,109,115,34,69,84,208,36,69,7,54,39,69,168,164,41,69,87,28,44,69,55,157,46,69,104,39,49,69,15,187,51,69,78,88,54,69,73,255,56,69,37,176,59,69,5,107,62,69,16,48,65,69,106,255,67,69,60,217,70,69,171,189,73,69,223,172,76,69,0,167,79,69,55,172,82,69,174,188,85,69,141,216,88,69,0,0,92,69,49,51,95,69,77,114,98,69,128,189,101,69,246,20,105,69,222,120,108,69,101,233,111,69,187,102,115,69,16,241,118,69,147,136,122,69,119,45,126,69,246,239,128,69,19,208,130,69,43,183,132,69,89,165,134,69,183,154,136,69,96,151,138,69,112,155,140,69,0,167,142,69,47,186,144,69,23,213,146,69,214,247,148,69,137,34,151,69,77,85,153,69,65,144,155,69,131,211,157,69,50,31,160,69,109,115,162,69,0,0,128,63,191,53,123,63,113,130,118,63,166,229,113,63,243,94,109,63,238,237,104,63,48,146,100,63,82,75,96,63,241,24,92,63,170,250,87,63,29,240,83,63,236,248,79,63,185,20,76,63,42,67,72,63,230,131,68,63,149,214,64,63,225,58,61,63,117,176,57,63,255,54,54,63,46,206,50,63,177,117,47,63,59,45,44,63,127,244,40,63,50,203,37,63,9,177,34,63,188,165,31,63,4,169,28,63,155,186,25,63,60,218,22,63,165,7,20,63,147,66,17,63,198,138,14,63,253,223,11,63,251,65,9,63,131,176,6,63,87,43,4,63,62,178,1,63,252,137,254,62,187,198,249,62,74,26,245,62,60,132,240,62,38,4,236,62,159,153,231,62,63,68,227,62,161,3,223,62,97,215,218,62,30,191,214,62,121,186,210,62,19,201,206,62,144,234,202,62,149,30,199,62,202,100,195,62,216,188,191,62,106,38,188,62,42,161,184,62,200,44,181,62,242,200,177,62,88,117,174,62,174,49,171,62,167,253,167,62,248,216,164,62,87,195,161,62,125,188,158,62,34,196,155,62,2,218,152,62,215,253,149,62,96,47,147,62,90,110,144,62,133,186,141,62,162,19,139,62,115,121,136,62,187,235,133,62,62,106,131,62,194,244,128,62,26,22,125,62,207,89,120,62,50,180,115,62,216,36,111,62,85,171,106,62,65,71,102,62,54,248,97,62,206,189,93,62,167,151,89,62,96,133,85,62,153,134,81,62,246,154,77,62,26,194,73,62,171,251,69,62,82,71,66,62,183,164,62,62,135,19,59,62,108,147,55,62,22,36,52,62,51,197,48,62,118,118,45,62,145,55,42,62,56,8,39,62,33,232,35,62,2,215,32,62,147,212,29,62,143,224,26,62,177,250,23,62,180,34,21,62,86,88,18,62,86,155,15,62,116,235,12,62,113,72,10,62,15,178,7,62,18,40,5,62,63,170,2,62,90,56,0,62,88,164,251,61,248,238,246,61,37,80,242,61,116,199,237,61,123,84,233,61,209,246,228,61,17,174,224,61,215,121,220,61,192,89,216,61,108,77,212,61,123,84,208,61,146,110,204,61,85,155,200,61,107,218,196,61,123,43,193,61,48,142,189,61,53,2,186,61,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,5,0,0,0,255,255,255,255,255,255,255,255,6,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,255,255,255,255,255,255,255,255,12,0,0,0,14,0,0,0,16,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,0,160,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,96,1,0,0,128,1,0,0,160,1,0,0,192,1,0,0,224,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,1,0,0,96,1,0,0,160,1,0,0,224,1,0,0,0,2,0,0,64,2,0,0,96,2,0,0,128,2,0,0,160,2,0,0,192,2,0,0,224,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,160,1,0,0,0,2,0,0,96,2,0,0,160,2,0,0,224,2,0,0,0,3,0,0,64,3,0,0,96,3,0,0,128,3,0,0,160,3,0,0,192,3,0,0,224,3,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,160,2,0,0,0,3,0,0,96,3,0,0,160,3,0,0,224,3,0,0,0,4,0,0,64,4,0,0,96,4,0,0,128,4,0,0,160,4,0,0,192,4,0,0,224,4,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,3,0,0,160,3,0,0,0,4,0,0,96,4,0,0,160,4,0,0,224,4,0,0,0,5,0,0,64,5,0,0,96,5,0,0,128,5,0,0,160,5,0,0,192,5,0,0,224,5,0,0,0,6,0,0,0,0,0,0,0,3,0,0,0,4,0,0,160,4,0,0,0,5,0,0,96,5,0,0,160,5,0,0,224,5,0,0,0,6,0,0,64,6,0,0,96,6,0,0,128,6,0,0,160,6,0,0,192,6,0,0,224,6,0,0,0,7,0,0,0,0,0,16,0,0,128,16,0,0,0,17,0,0,128,17,0,0,0,18,0,0,128,18,0,0,0,19,0,0,128,19,0,0,0,20,0,0,128,20,0,0,0,21,0,0,128,21,0,0,0,22,0,0,128,22,0,0,0,23,0,0,128,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,20,0,0,0,24,0,0,0,24,0,0,0,30,0,0,0,30,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,240,255,232,255,224,255,216,255,209,255,201,255,193,255,185,255,178,255,170,255,162,255,155,255,147,255,139,255,132,255,124,255,117,255,110,255,102,255,95,255,87,255,80,255,73,255,66,255,58,255,51,255,44,255,37,255,30,255,23,255,16,255,9,255,2,255,251,254,244,254,237,254,230,254,223,254,217,254,210,254,203,254,196,254,190,254,183,254,176,254,170,254,163,254,157,254,150,254,144,254,137,254,131,254,124,254,118,254,112,254,105,254,99,254,93,254,87,254,80,254,74,254,68,254,62,254,56,254,50,254,44,254,38,254,32,254,26,254,20,254,14,254,8,254,2,254,253,253,247,253,241,253,235,253,230,253,224,253,218,253,213,253,207,253,202,253,196,253,191,253,185,253,180,253,174,253,169,253,164,253,158,253,153,253,148,253,142,253,137,253,132,253,127,253,122,253,117,253,112,253,106,253,101,253,96,253,91,253,86,253,82,253,77,253,72,253,67,253,62,253,57,253,53,253,48,253,43,253,38,253,34,253,29,253,24,253,20,253,15,253,11,253,6,253,2,253,253,252,249,252,244,252,240,252,236,252,231,252,227,252,223,252,218,252,214,252,210,252,206,252,202,252,198,252,193,252,189,252,185,252,181,252,177,252,173,252,169,252,165,252,161,252,158,252,154,252,150,252,146,252,142,252,138,252,135,252,131,252,127,252,124,252,120,252,116,252,113,252,109,252,106,252,102,252,99,252,95,252,92,252,88,252,85,252,81,252,78,252,75,252,71,252,68,252,65,252,62,252,58,252,55,252,52,252,49,252,46,252,43,252,40,252,37,252,33,252,30,252,27,252,25,252,22,252,19,252,16,252,13,252,10,252,7,252,4,252,2,252,255,251,252,251,249,251,247,251,244,251,241,251,239,251,236,251,233,251,231,251,228,251,226,251,223,251,221,251,218,251,216,251,214,251,211,251,209,251,206,251,204,251,202,251,200,251,197,251,195,251,193,251,191,251,188,251,186,251,184,251,182,251,180,251,178,251,176,251,174,251,172,251,170,251,168,251,166,251,164,251,162,251,160,251,158,251,156,251,155,251,153,251,151,251,149,251,147,251,146,251,144,251,142,251,141,251,139,251,137,251,136,251,134,251,133,251,131,251,130,251,128,251,127,251,125,251,124,251,122,251,121,251,119,251,118,251,117,251,115,251,114,251,113,251,111,251,110,251,109,251,108,251,106,251,105,251,104,251,103,251,102,251,101,251,100,251,99,251,98,251,96,251,95,251,94,251,93,251,93,251,92,251,91,251,90,251,89,251,88,251,87,251,86,251,85,251,85,251,84,251,83,251,82,251,82,251,81,251,80,251,80,251,79,251,78,251,78,251,77,251,76,251,76,251,75,251,75,251,74,251,74,251,73,251,73,251,72,251,72,251,72,251,71,251,71,251,70,251,70,251,70,251,69,251,69,251,69,251,68,251,68,251,68,251,68,251,68,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,68,251,68,251,68,251,68,251,69,251,69,251,69,251,69,251,70,251,70,251,70,251,71,251,71,251,71,251,72,251,72,251,73,251,73,251,73,251,74,251,74,251,75,251,75,251,76,251,76,251,77,251,78,251,78,251,79,251,79,251,80,251,81,251,81,251,82,251,83,251,83,251,84,251,85,251,85,251,86,251,87,251,88,251,88,251,89,251,90,251,91,251,92,251,93,251,93,251,94,251,95,251,96,251,97,251,98,251,99,251,100,251,101,251,102,251,103,251,104,251,105,251,106,251,107,251,108,251,109,251,110,251,111,251,112,251,113,251,114,251,115,251,117,251,118,251,119,251,120,251,121,251,122,251,124,251,125,251,126,251,127,251,129,251,130,251,131,251,132,251,134,251,135,251,136,251,138,251,139,251,140,251,142,251,143,251,145,251,146,251,147,251,149,251,150,251,152,251,153,251,155,251,156,251,158,251,159,251,161,251,162,251,164,251,165,251,167,251,168,251,170,251,171,251,173,251,175,251,176,251,178,251,179,251,181,251,183,251,184,251,186,251,188,251,189,251,191,251,193,251,195,251,196,251,198,251,200,251,201,251,203,251,205,251,207,251,209,251,210,251,212,251,214,251,216,251,218,251,219,251,221,251,223,251,225,251,227,251,229,251,231,251,233,251,234,251,236,251,238,251,240,251,242,251,244,251,246,251,248,251,250,251,252,251,254,251,0,252,2,252,4,252,6,252,8,252,10,252,12,252,14,252,16,252,18,252,20,252,22,252,25,252,27,252,29,252,31,252,33,252,35,252,37,252,39,252,42,252,44,252,46,252,48,252,50,252,52,252,55,252,57,252,59,252,61,252,63,252,66,252,68,252,70,252,72,252,74,252,77,252,79,252,81,252,83,252,86,252,88,252,90,252,93,252,95,252,97,252,100,252,102,252,104,252,106,252,109,252,111,252,113,252,116,252,118,252,121,252,123,252,125,252,128,252,130,252,132,252,135,252,137,252,140,252,142,252,144,252,147,252,149,252,152,252,154,252,157,252,159,252,161,252,164,252,166,252,169,252,171,252,174,252,176,252,179,252,181,252,184,252,186,252,189,252,191,252,194,252,196,252,199,252,201,252,204,252,206,252,209,252,211,252,214,252,216,252,219,252,221,252,224,252,226,252,229,252,231,252,234,252,237,252,239,252,242,252,244,252,247,252,249,252,252,252,255,252,1,253,4,253,6,253,9,253,11,253,14,253,17,253,19,253,22,253,24,253,27,253,30,253,32,253,35,253,38,253,40,253,43,253,45,253,48,253,51,253,53,253,56,253,59,253,61,253,64,253,66,253,69,253,72,253,74,253,77,253,80,253,82,253,85,253,88,253,90,253,93,253,96,253,98,253,101,253,103,253,106,253,109,253,111,253,114,253,117,253,119,253,122,253,125,253,127,253,130,253,133,253,135,253,138,253,141,253,143,253,146,253,149,253,151,253,154,253,157,253,159,253,162,253,165,253,167,253,170,253,173,253,175,253,178,253,181,253,183,253,186,253,189,253,191,253,194,253,197,253,199,253,202,253,205,253,207,253,210,253,213,253,215,253,218,253,221,253,223,253,226,253,229,253,231,253,234,253,237,253,239,253,242,253,245,253,247,253,250,253,252,253,255,253,2,254,4,254,7,254,10,254,12,254,15,254,17,254,20,254,23,254,25,254,28,254,31,254,33,254,36,254,38,254,41,254,44,254,46,254,49,254,51,254,54,254,57,254,59,254,62,254,64,254,67,254,70,254,72,254,75,254,77,254,80,254,82,254,85,254,88,254,90,254,93,254,95,254,98,254,100,254,103,254,105,254,108,254,110,254,113,254,115,254,118,254,120,254,123,254,125,254,128,254,130,254,133,254,135,254,138,254,140,254,143,254,145,254,148,254,150,254,153,254,155,254,158,254,160,254,163,254,165,254,167,254,170,254,172,254,175,254,177,254,180,254,182,254,184,254,187,254,189,254,192,254,194,254,196,254,199,254,201,254,203,254,206,254,208,254,210,254,213,254,215,254,217,254,220,254,222,254,224,254,227,254,229,254,231,254,234,254,236,254,238,254,240,254,243,254,245,254,247,254,249,254,252,254,254,254,0,255,2,255,5,255,7,255,9,255,11,255,13,255,16,255,18,255,20,255,22,255,24,255,26,255,28,255,31,255,33,255,35,255,37,255,39,255,41,255,43,255,45,255,47,255,49,255,51,255,54,255,56,255,58,255,60,255,62,255,64,255,66,255,68,255,70,255,72,255,74,255,76,255,78,255,80,255,81,255,83,255,85,255,87,255,89,255,91,255,93,255,95,255,97,255,99,255,100,255,102,255,104,255,106,255,108,255,110,255,111,255,113,255,115,255,117,255,119,255,120,255,122,255,124,255,126,255,127,255,129,255,131,255,132,255,134,255,136,255,137,255,139,255,141,255,142,255,144,255,146,255,147,255,149,255,150,255,152,255,154,255,155,255,157,255,158,255,160,255,161,255,163,255,164,255,166,255,167,255,169,255,170,255,172,255,173,255,174,255,176,255,177,255,179,255,180,255,181,255,183,255,184,255,186,255,187,255,188,255,189,255,191,255,192,255,193,255,195,255,196,255,197,255,198,255,199,255,201,255,202,255,203,255,204,255,205,255,207,255,208,255,209,255,210,255,211,255,212,255,213,255,214,255,215,255,216,255,217,255,218,255,219,255,220,255,221,255,222,255,223,255,224,255,225,255,226,255,227,255,228,255,229,255,230,255,230,255,231,255,232,255,233,255,234,255,234,255,235,255,236,255,237,255,237,255,238,255,239,255,240,255,240,255,241,255,242,255,242,255,243,255,243,255,244,255,245,255,245,255,246,255,246,255,247,255,247,255,248,255,248,255,249,255,249,255,250,255,250,255,250,255,251,255,251,255,252,255,252,255,252,255,253,255,253,255,253,255,254,255,254,255,254,255,254,255,254,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,0,64,0,64,0,64,255,63,254,63,253,63,253,63,253,63,252,63,251,63,251,63,249,63,249,63,248,63,246,63,245,63,243,63,242,63,241,63,238,63,238,63,236,63,233,63,232,63,230,63,229,63,226,63,223,63,221,63,219,63,217,63,214,63,212,63,209,63,207,63,203,63,201,63,198,63,194,63,192,63,189,63,186,63,181,63,179,63,176,63,171,63,169,63,165,63,162,63,157,63,154,63,150,63,146,63,141,63,137,63,134,63,129,63,125,63,119,63,116,63,111,63,107,63,102,63,97,63,92,63,88,63,83,63,78,63,73,63,68,63,63,63,57,63,52,63,46,63,41,63,35,63,30,63,23,63,18,63,12,63,5,63,0,63,250,62,244,62,237,62,232,62,225,62,220,62,213,62,205,62,199,62,192,62,186,62,180,62,172,62,166,62,158,62,151,62,143,62,137,62,130,62,123,62,116,62,108,62,101,62,92,62,85,62,77,62,69,62,62,62,54,62,46,62,38,62,31,62,22,62,14,62,5,62,254,61,245,61,237,61,227,61,220,61,211,61,202,61,194,61,185,61,176,61,167,61,158,61,149,61,140,61,131,61,122,61,113,61,103,61,93,61,84,61,75,61,65,61,56,61,46,61,36,61,26,61,17,61,7,61,253,60,242,60,232,60,222,60,212,60,202,60,192,60,180,60,170,60,160,60,149,60,139,60,129,60,118,60,107,60,96,60,86,60,73,60,63,60,52,60,41,60,30,60,19,60,7,60,252,59,241,59,229,59,217,59,206,59,195,59,183,59,172,59,160,59,148,59,136,59,124,59,112,59,101,59,88,59,76,59,63,59,51,59,39,59,27,59,14,59,2,59,246,58,233,58,219,58,208,58,195,58,183,58,169,58,156,58,144,58,131,58,118,58,105,58,92,58,79,58,65,58,52,58,39,58,26,58,12,58,254,57,241,57,227,57,214,57,201,57,186,57,172,57,160,57,145,57,131,57,117,57,104,57,89,57,76,57,61,57,46,57,33,57,18,57,3,57,246,56,231,56,217,56,202,56,187,56,173,56,158,56,144,56,129,56,114,56,99,56,84,56,70,56,55,56,40,56,25,56,10,56,250,55,236,55,221,55,205,55,190,55,174,55,159,55,143,55,128,55,112,55,97,55,81,55,66,55,50,55,35,55,19,55,2,55,243,54,227,54,211,54,195,54,179,54,162,54,147,54,131,54,115,54,99,54,82,54,66,54,49,54,33,54,16,54,255,53,240,53,223,53,207,53,190,53,173,53,156,53,139,53,123,53,105,53,89,53,73,53,55,53,39,53,21,53,4,53,244,52,226,52,209,52,192,52,174,52,157,52,139,52,123,52,105,52,87,52,71,52,53,52,35,52,18,52,0,52,238,51,221,51,202,51,185,51,168,51,149,51,132,51,114,51,96,51,78,51,60,51,42,51,24,51,6,51,244,50,226,50,208,50,189,50,171,50,153,50,134,50,116,50,98,50,79,50,60,50,42,50,23,50,6,50,243,49,224,49,206,49,187,49,168,49,150,49,131,49,111,49,93,49,74,49,55,49,36,49,18,49,254,48,236,48,216,48,197,48,178,48,160,48,139,48,120,48,102,48,82,48,63,48,44,48,24,48,5,48,241,47,222,47,203,47,183,47,163,47,144,47,125,47,105,47,86,47,65,47,47,47,27,47,7,47,243,46,222,46,204,46,184,46,164,46,144,46,124,46,104,46,84,46,63,46,45,46,25,46,4,46,241,45,221,45,200,45,180,45,160,45,140,45,120,45,99,45,79,45,58,45,39,45,18,45,254,44,234,44,213,44,193,44,172,44,151,44,130,44,110,44,90,44,69,44,49,44,28,44,8,44,243,43,223,43,201,43,181,43,160,43,140,43,119,43,99,43,76,43,56,43,35,43,15,43,250,42,230,42,207,42,187,42,166,42,146,42,124,42,104,42,82,42,62,42,40,42,20,42,254,41,232,41,212,41,191,41,170,41,148,41,127,41,106,41,85,41,64,41,42,41,21,41,0,41,234,40,213,40,191,40,170,40,149,40,128,40,106,40,85,40,63,40,43,40,20,40,255,39,233,39,212,39,191,39,168,39,148,39,126,39,104,39,84,39,61,39,39,39,18,39,253,38,231,38,208,38,187,38,165,38,144,38,123,38,101,38,78,38,56,38,35,38,14,38,248,37,226,37,204,37,181,37,161,37,139,37,117,37,95,37,73,37,51,37,29,37,7,37,242,36,220,36,198,36,176,36,154,36,132,36,110,36,88,36,66,36,44,36,22,36,0,36,234,35,212,35,190,35,168,35,146,35,124,35,102,35,80,35,58,35,36,35,14,35,247,34,225,34,203,34,181,34,159,34,137,34,115,34,93,34,71,34,48,34,26,34,4,34,238,33,216,33,194,33,172,33,149,33,127,33,105,33,83,33,61,33,39,33,16,33,250,32,228,32,206,32,184,32,161,32,139,32,117,32,95,32,73,32,50,32,28,32,6,32,240,31,218,31,195,31,173,31,151,31,129,31,106,31,84,31,62,31,40,31,18,31,251,30,229,30,207,30,185,30,162,30,140,30,118,30,96,30,74,30,51,30,29,30,7,30,241,29,219,29,196,29,174,29,152,29,130,29,107,29,85,29,63,29,41,29,19,29,253,28,230,28,208,28,186,28,164,28,142,28,120,28,97,28,75,28,53,28,31,28,9,28,243,27,220,27,198,27,176,27,154,27,132,27,110,27,88,27,66,27,44,27,22,27,255,26,233,26,211,26,189,26,167,26,145,26,123,26,101,26,79,26,57,26,35,26,13,26,247,25,225,25,203,25,181,25,159,25,137,25,115,25,93,25,72,25,50,25,28,25,6,25,240,24,218,24,196,24,174,24,153,24,131,24,109,24,87,24,65,24,44,24,22,24,0,24,234,23,213,23,191,23,169,23,147,23,126,23,104,23,82,23,61,23,39,23,17,23,252,22,230,22,209,22,187,22,165,22,144,22,122,22,101,22,79,22,58,22,36,22,15,22,249,21,228,21,206,21,185,21,164,21,142,21,121,21,100,21,78,21,57,21,36,21,14,21,249,20,228,20,207,20,185,20,164,20,143,20,122,20,101,20,79,20,58,20,37,20,16,20,251,19,230,19,209,19,188,19,167,19,146,19,125,19,104,19,83,19,62,19,41,19,21,19,0,19,235,18,214,18,193,18,172,18,152,18,131,18,110,18,90,18,69,18,48,18,28,18,7,18,243,17,222,17,201,17,181,17,160,17,140,17,119,17,99,17,79,17,58,17,38,17,18,17,253,16,233,16,213,16,192,16,172,16,152,16,132,16,112,16,92,16,71,16,51,16,31,16,11,16,247,15,227,15,207,15,187,15,167,15,148,15,128,15,108,15,88,15,68,15,49,15,29,15,9,15,245,14,226,14,206,14,187,14,167,14,148,14,128,14,109,14,89,14,70,14,50,14,31,14,11,14,248,13,229,13,210,13,190,13,171,13,152,13,133,13,114,13,95,13,76,13,57,13,38,13,19,13,0,13,237,12,218,12,199,12,180,12,161,12,143,12,124,12,105,12,87,12,68,12,49,12,31,12,12,12,250,11,231,11,213,11,194,11,176,11,158,11,139,11,121,11,103,11,85,11,66,11,48,11,30,11,12,11,250,10,232,10,214,10,196,10,178,10,160,10,142,10,125,10,107,10,89,10,71,10,54,10,36,10,19,10,1,10,239,9,222,9,205,9,187,9,170,9,152,9,135,9,118,9,101,9,83,9,66,9,49,9,32,9,15,9,254,8,237,8,220,8,203,8,186,8,170,8,153,8,136,8,119,8,103,8,86,8,69,8,53,8,36,8,20,8,4,8,243,7,227,7,211,7,194,7,178,7,162,7,146,7,130,7,114,7,98,7,82,7,66,7,50,7,34,7,18,7,2,7,243,6,227,6,211,6,196,6,180,6,165,6,149,6,134,6,118,6,103,6,88,6,72,6,57,6,42,6,27,6,12,6,253,5,238,5,223,5,208,5,193,5,178,5,164,5,149,5,134,5,120,5,105,5,90,5,76,5,62,5,47,5,33,5,18,5,4,5,246,4,232,4,218,4,204,4,190,4,176,4,162,4,148,4,134,4,120,4,107,4,93,4,79,4,66,4,52,4,39,4,25,4,12,4,254,3,241,3,228,3,215,3,202,3,188,3,175,3,162,3,149,3,137,3,124,3,111,3,98,3,86,3,73,3,60,3,48,3,35,3,23,3,10,3,254,2,242,2,230,2,217,2,205,2,193,2,181,2,169,2,157,2,146,2,134,2,122,2,110,2,99,2,87,2,76,2,64,2,53,2,41,2,30,2,19,2,8,2,252,1,241,1,230,1,219,1,208,1,197,1,187,1,176,1,165,1,155,1,144,1,133,1,123,1,113,1,102,1,92,1,82,1,71,1,61,1,51,1,41,1,31,1,21,1,12,1,2,1,248,0,238,0,229,0,219,0,210,0,200,0,191,0,182,0,172,0,163,0,154,0,145,0,136,0,127,0,118,0,109,0,100,0,92,0,83,0,75,0,66,0,58,0,49,0,41,0,32,0,24,0,16,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,254,255,254,255,254,255,254,255,254,255,253,255,253,255,253,255,252,255,252,255,252,255,251,255,251,255,250,255,250,255,250,255,249,255,249,255,248,255,248,255,247,255,247,255,246,255,246,255,245,255,245,255,244,255,243,255,243,255,242,255,242,255,241,255,240,255,240,255,239,255,238,255,237,255,237,255,236,255,235,255,234,255,234,255,233,255,232,255,231,255,230,255,230,255,229,255,228,255,227,255,226,255,225,255,224,255,223,255,222,255,221,255,220,255,219,255,218,255,217,255,216,255,215,255,214,255,213,255,212,255,211,255,210,255,209,255,208,255,207,255,205,255,204,255,203,255,202,255,201,255,199,255,198,255,197,255,196,255,195,255,193,255,192,255,191,255,189,255,188,255,187,255,186,255,184,255,183,255,181,255,180,255,179,255,177,255,176,255,174,255,173,255,172,255,170,255,169,255,167,255,166,255,164,255,163,255,161,255,160,255,158,255,157,255,155,255,154,255,152,255,150,255,149,255,147,255,146,255,144,255,142,255,141,255,139,255,137,255,136,255,134,255,132,255,131,255,129,255,127,255,126,255,124,255,122,255,120,255,119,255,117,255,115,255,113,255,111,255,110,255,108,255,106,255,104,255,102,255,100,255,99,255,97,255,95,255,93,255,91,255,89,255,87,255,85,255,83,255,81,255,80,255,78,255,76,255,74,255,72,255,70,255,68,255,66,255,64,255,62,255,60,255,58,255,56,255,54,255,51,255,49,255,47,255,45,255,43,255,41,255,39,255,37,255,35,255,33,255,31,255,28,255,26,255,24,255,22,255,20,255,18,255,16,255,13,255,11,255,9,255,7,255,5,255,2,255,0,255,254,254,252,254,249,254,247,254,245,254,243,254,240,254,238,254,236,254,234,254,231,254,229,254,227,254,224,254,222,254,220,254,217,254,215,254,213,254,210,254,208,254,206,254,203,254,201,254,199,254,196,254,194,254,192,254,189,254,187,254,184,254,182,254,180,254,177,254,175,254,172,254,170,254,167,254,165,254,163,254,160,254,158,254,155,254,153,254,150,254,148,254,145,254,143,254,140,254,138,254,135,254,133,254,130,254,128,254,125,254,123,254,120,254,118,254,115,254,113,254,110,254,108,254,105,254,103,254,100,254,98,254,95,254,93,254,90,254,88,254,85,254,82,254,80,254,77,254,75,254,72,254,70,254,67,254,64,254,62,254,59,254,57,254,54,254,51,254,49,254,46,254,44,254,41,254,38,254,36,254,33,254,31,254,28,254,25,254,23,254,20,254,17,254,15,254,12,254,10,254,7,254,4,254,2,254,255,253,252,253,250,253,247,253,245,253,242,253,239,253,237,253,234,253,231,253,229,253,226,253,223,253,221,253,218,253,215,253,213,253,210,253,207,253,205,253,202,253,199,253,197,253,194,253,191,253,189,253,186,253,183,253,181,253,178,253,175,253,173,253,170,253,167,253,165,253,162,253,159,253,157,253,154,253,151,253,149,253,146,253,143,253,141,253,138,253,135,253,133,253,130,253,127,253,125,253,122,253,119,253,117,253,114,253,111,253,109,253,106,253,103,253,101,253,98,253,96,253,93,253,90,253,88,253,85,253,82,253,80,253,77,253,74,253,72,253,69,253,66,253,64,253,61,253,59,253,56,253,53,253,51,253,48,253,45,253,43,253,40,253,38,253,35,253,32,253,30,253,27,253,24,253,22,253,19,253,17,253,14,253,11,253,9,253,6,253,4,253,1,253,255,252,252,252,249,252,247,252,244,252,242,252,239,252,237,252,234,252,231,252,229,252,226,252,224,252,221,252,219,252,216,252,214,252,211,252,209,252,206,252,204,252,201,252,199,252,196,252,194,252,191,252,189,252,186,252,184,252,181,252,179,252,176,252,174,252,171,252,169,252,166,252,164,252,161,252,159,252,157,252,154,252,152,252,149,252,147,252,144,252,142,252,140,252,137,252,135,252,132,252,130,252,128,252,125,252,123,252,121,252,118,252,116,252,113,252,111,252,109,252,106,252,104,252,102,252,100,252,97,252,95,252,93,252,90,252,88,252,86,252,83,252,81,252,79,252,77,252,74,252,72,252,70,252,68,252,66,252,63,252,61,252,59,252,57,252,55,252,52,252,50,252,48,252,46,252,44,252,42,252,39,252,37,252,35,252,33,252,31,252,29,252,27,252,25,252,22,252,20,252,18,252,16,252,14,252,12,252,10,252,8,252,6,252,4,252,2,252,0,252,254,251,252,251,250,251,248,251,246,251,244,251,242,251,240,251,238,251,236,251,234,251,233,251,231,251,229,251,227,251,225,251,223,251,221,251,219,251,218,251,216,251,214,251,212,251,210,251,209,251,207,251,205,251,203,251,201,251,200,251,198,251,196,251,195,251,193,251,191,251,189,251,188,251,186,251,184,251,183,251,181,251,179,251,178,251,176,251,175,251,173,251,171,251,170,251,168,251,167,251,165,251,164,251,162,251,161,251,159,251,158,251,156,251,155,251,153,251,152,251,150,251,149,251,147,251,146,251,145,251,143,251,142,251,140,251,139,251,138,251,136,251,135,251,134,251,132,251,131,251,130,251,129,251,127,251,126,251,125,251,124,251,122,251,121,251,120,251,119,251,118,251,117,251,115,251,114,251,113,251,112,251,111,251,110,251,109,251,108,251,107,251,106,251,105,251,104,251,103,251,102,251,101,251,100,251,99,251,98,251,97,251,96,251,95,251,94,251,93,251,93,251,92,251,91,251,90,251,89,251,88,251,88,251,87,251,86,251,85,251,85,251,84,251,83,251,83,251,82,251,81,251,81,251,80,251,79,251,79,251,78,251,78,251,77,251,76,251,76,251,75,251,75,251,74,251,74,251,73,251,73,251,73,251,72,251,72,251,71,251,71,251,71,251,70,251,70,251,70,251,69,251,69,251,69,251,69,251,68,251,68,251,68,251,68,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,66,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,67,251,68,251,68,251,68,251,68,251,68,251,69,251,69,251,69,251,70,251,70,251,70,251,71,251,71,251,72,251,72,251,72,251,73,251,73,251,74,251,74,251,75,251,75,251,76,251,76,251,77,251,78,251,78,251,79,251,80,251,80,251,81,251,82,251,82,251,83,251,84,251,85,251,85,251,86,251,87,251,88,251,89,251,90,251,91,251,92,251,93,251,93,251,94,251,95,251,96,251,98,251,99,251,100,251,101,251,102,251,103,251,104,251,105,251,106,251,108,251,109,251,110,251,111,251,113,251,114,251,115,251,117,251,118,251,119,251,121,251,122,251,124,251,125,251,127,251,128,251,130,251,131,251,133,251,134,251,136,251,137,251,139,251,141,251,142,251,144,251,146,251,147,251,149,251,151,251,153,251,155,251,156,251,158,251,160,251,162,251,164,251,166,251,168,251,170,251,172,251,174,251,176,251,178,251,180,251,182,251,184,251,186,251,188,251,191,251,193,251,195,251,197,251,200,251,202,251,204,251,206,251,209,251,211,251,214,251,216,251,218,251,221,251,223,251,226,251,228,251,231,251,233,251,236,251,239,251,241,251,244,251,247,251,249,251,252,251,255,251,2,252,4,252,7,252,10,252,13,252,16,252,19,252,22,252,25,252,27,252,30,252,33,252,37,252,40,252,43,252,46,252,49,252,52,252,55,252], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10248);
/* memory initializer */ allocate([58,252,62,252,65,252,68,252,71,252,75,252,78,252,81,252,85,252,88,252,92,252,95,252,99,252,102,252,106,252,109,252,113,252,116,252,120,252,124,252,127,252,131,252,135,252,138,252,142,252,146,252,150,252,154,252,158,252,161,252,165,252,169,252,173,252,177,252,181,252,185,252,189,252,193,252,198,252,202,252,206,252,210,252,214,252,218,252,223,252,227,252,231,252,236,252,240,252,244,252,249,252,253,252,2,253,6,253,11,253,15,253,20,253,24,253,29,253,34,253,38,253,43,253,48,253,53,253,57,253,62,253,67,253,72,253,77,253,82,253,86,253,91,253,96,253,101,253,106,253,112,253,117,253,122,253,127,253,132,253,137,253,142,253,148,253,153,253,158,253,164,253,169,253,174,253,180,253,185,253,191,253,196,253,202,253,207,253,213,253,218,253,224,253,230,253,235,253,241,253,247,253,253,253,2,254,8,254,14,254,20,254,26,254,32,254,38,254,44,254,50,254,56,254,62,254,68,254,74,254,80,254,87,254,93,254,99,254,105,254,112,254,118,254,124,254,131,254,137,254,144,254,150,254,157,254,163,254,170,254,176,254,183,254,190,254,196,254,203,254,210,254,217,254,223,254,230,254,237,254,244,254,251,254,2,255,9,255,16,255,23,255,30,255,37,255,44,255,51,255,58,255,66,255,73,255,80,255,87,255,95,255,102,255,110,255,117,255,124,255,132,255,139,255,147,255,155,255,162,255,170,255,178,255,185,255,193,255,201,255,209,255,216,255,224,255,232,255,240,255,248,255,0,0,8,0,16,0,24,0,32,0,41,0,49,0,58,0,66,0,75,0,83,0,92,0,100,0,109,0,118,0,127,0,136,0,145,0,154,0,163,0,172,0,182,0,191,0,200,0,210,0,219,0,229,0,238,0,248,0,2,1,12,1,21,1,31,1,41,1,51,1,61,1,71,1,82,1,92,1,102,1,113,1,123,1,133,1,144,1,155,1,165,1,176,1,187,1,197,1,208,1,219,1,230,1,241,1,252,1,8,2,19,2,30,2,41,2,53,2,64,2,76,2,87,2,99,2,110,2,122,2,134,2,146,2,157,2,169,2,181,2,193,2,205,2,217,2,230,2,242,2,254,2,10,3,23,3,35,3,48,3,60,3,73,3,86,3,98,3,111,3,124,3,137,3,149,3,162,3,175,3,188,3,202,3,215,3,228,3,241,3,254,3,12,4,25,4,39,4,52,4,66,4,79,4,93,4,107,4,120,4,134,4,148,4,162,4,176,4,190,4,204,4,218,4,232,4,246,4,4,5,18,5,33,5,47,5,62,5,76,5,90,5,105,5,120,5,134,5,149,5,164,5,178,5,193,5,208,5,223,5,238,5,253,5,12,6,27,6,42,6,57,6,72,6,88,6,103,6,118,6,134,6,149,6,165,6,180,6,196,6,211,6,227,6,243,6,2,7,18,7,34,7,50,7,66,7,82,7,98,7,114,7,130,7,146,7,162,7,178,7,194,7,211,7,227,7,243,7,4,8,20,8,36,8,53,8,69,8,86,8,103,8,119,8,136,8,153,8,170,8,186,8,203,8,220,8,237,8,254,8,15,9,32,9,49,9,66,9,83,9,101,9,118,9,135,9,152,9,170,9,187,9,205,9,222,9,239,9,1,10,19,10,36,10,54,10,71,10,89,10,107,10,125,10,142,10,160,10,178,10,196,10,214,10,232,10,250,10,12,11,30,11,48,11,66,11,85,11,103,11,121,11,139,11,158,11,176,11,194,11,213,11,231,11,250,11,12,12,31,12,49,12,68,12,87,12,105,12,124,12,143,12,161,12,180,12,199,12,218,12,237,12,0,13,19,13,38,13,57,13,76,13,95,13,114,13,133,13,152,13,171,13,190,13,210,13,229,13,248,13,11,14,31,14,50,14,70,14,89,14,109,14,128,14,148,14,167,14,187,14,206,14,226,14,245,14,9,15,29,15,49,15,68,15,88,15,108,15,128,15,148,15,167,15,187,15,207,15,227,15,247,15,11,16,31,16,51,16,71,16,92,16,112,16,132,16,152,16,172,16,192,16,213,16,233,16,253,16,18,17,38,17,58,17,79,17,99,17,119,17,140,17,160,17,181,17,201,17,222,17,243,17,7,18,28,18,48,18,69,18,90,18,110,18,131,18,152,18,172,18,193,18,214,18,235,18,0,19,21,19,41,19,62,19,83,19,104,19,125,19,146,19,167,19,188,19,209,19,230,19,251,19,16,20,37,20,58,20,79,20,101,20,122,20,143,20,164,20,185,20,207,20,228,20,249,20,14,21,36,21,57,21,78,21,100,21,121,21,142,21,164,21,185,21,206,21,228,21,249,21,15,22,36,22,58,22,79,22,101,22,122,22,144,22,165,22,187,22,209,22,230,22,252,22,17,23,39,23,61,23,82,23,104,23,126,23,147,23,169,23,191,23,213,23,234,23,0,24,22,24,44,24,65,24,87,24,109,24,131,24,153,24,174,24,196,24,218,24,240,24,6,25,28,25,50,25,72,25,93,25,115,25,137,25,159,25,181,25,203,25,225,25,247,25,13,26,35,26,57,26,79,26,101,26,123,26,145,26,167,26,189,26,211,26,233,26,255,26,22,27,44,27,66,27,88,27,110,27,132,27,154,27,176,27,198,27,220,27,243,27,9,28,31,28,53,28,75,28,97,28,120,28,142,28,164,28,186,28,208,28,230,28,253,28,19,29,41,29,63,29,85,29,107,29,130,29,152,29,174,29,196,29,219,29,241,29,7,30,29,30,51,30,74,30,96,30,118,30,140,30,162,30,185,30,207,30,229,30,251,30,18,31,40,31,62,31,84,31,106,31,129,31,151,31,173,31,195,31,218,31,240,31,6,32,28,32,50,32,73,32,95,32,117,32,139,32,161,32,184,32,206,32,228,32,250,32,16,33,39,33,61,33,83,33,105,33,127,33,149,33,172,33,194,33,216,33,238,33,4,34,26,34,48,34,71,34,93,34,115,34,137,34,159,34,181,34,203,34,225,34,247,34,14,35,36,35,58,35,80,35,102,35,124,35,146,35,168,35,190,35,212,35,234,35,0,36,22,36,44,36,66,36,88,36,110,36,132,36,154,36,176,36,198,36,220,36,242,36,7,37,29,37,51,37,73,37,95,37,117,37,139,37,161,37,181,37,204,37,226,37,248,37,14,38,35,38,56,38,78,38,101,38,123,38,144,38,165,38,187,38,208,38,231,38,253,38,18,39,39,39,61,39,84,39,104,39,126,39,148,39,168,39,191,39,212,39,233,39,255,39,20,40,43,40,63,40,85,40,106,40,128,40,149,40,170,40,191,40,213,40,234,40,0,41,21,41,42,41,64,41,85,41,106,41,127,41,148,41,170,41,191,41,212,41,232,41,254,41,20,42,40,42,62,42,82,42,104,42,124,42,146,42,166,42,187,42,207,42,230,42,250,42,15,43,35,43,56,43,76,43,99,43,119,43,140,43,160,43,181,43,201,43,223,43,243,43,8,44,28,44,49,44,69,44,90,44,110,44,130,44,151,44,172,44,193,44,213,44,234,44,254,44,18,45,39,45,58,45,79,45,99,45,120,45,140,45,160,45,180,45,200,45,221,45,241,45,4,46,25,46,45,46,63,46,84,46,104,46,124,46,144,46,164,46,184,46,204,46,222,46,243,46,7,47,27,47,47,47,65,47,86,47,105,47,125,47,144,47,163,47,183,47,203,47,222,47,241,47,5,48,24,48,44,48,63,48,82,48,102,48,120,48,139,48,160,48,178,48,197,48,216,48,236,48,254,48,18,49,36,49,55,49,74,49,93,49,111,49,131,49,150,49,168,49,187,49,206,49,224,49,243,49,6,50,23,50,42,50,60,50,79,50,98,50,116,50,134,50,153,50,171,50,189,50,208,50,226,50,244,50,6,51,24,51,42,51,60,51,78,51,96,51,114,51,132,51,149,51,168,51,185,51,202,51,221,51,238,51,0,52,18,52,35,52,53,52,71,52,87,52,105,52,123,52,139,52,157,52,174,52,192,52,209,52,226,52,244,52,4,53,21,53,39,53,55,53,73,53,89,53,105,53,123,53,139,53,156,53,173,53,190,53,207,53,223,53,240,53,255,53,16,54,33,54,49,54,66,54,82,54,99,54,115,54,131,54,147,54,162,54,179,54,195,54,211,54,227,54,243,54,2,55,19,55,35,55,50,55,66,55,81,55,97,55,112,55,128,55,143,55,159,55,174,55,190,55,205,55,221,55,236,55,250,55,10,56,25,56,40,56,55,56,70,56,84,56,99,56,114,56,129,56,144,56,158,56,173,56,187,56,202,56,217,56,231,56,246,56,3,57,18,57,33,57,46,57,61,57,76,57,89,57,104,57,117,57,131,57,145,57,160,57,172,57,186,57,201,57,214,57,227,57,241,57,254,57,12,58,26,58,39,58,52,58,65,58,79,58,92,58,105,58,118,58,131,58,144,58,156,58,169,58,183,58,195,58,208,58,219,58,233,58,246,58,2,59,14,59,27,59,39,59,51,59,63,59,76,59,88,59,101,59,112,59,124,59,136,59,148,59,160,59,172,59,183,59,195,59,206,59,217,59,229,59,241,59,252,59,7,60,19,60,30,60,41,60,52,60,63,60,73,60,86,60,96,60,107,60,118,60,129,60,139,60,149,60,160,60,170,60,180,60,192,60,202,60,212,60,222,60,232,60,242,60,253,60,7,61,17,61,26,61,36,61,46,61,56,61,65,61,75,61,84,61,93,61,103,61,113,61,122,61,131,61,140,61,149,61,158,61,167,61,176,61,185,61,194,61,202,61,211,61,220,61,227,61,237,61,245,61,254,61,5,62,14,62,22,62,31,62,38,62,46,62,54,62,62,62,69,62,77,62,85,62,92,62,101,62,108,62,116,62,123,62,130,62,137,62,143,62,151,62,158,62,166,62,172,62,180,62,186,62,192,62,199,62,205,62,213,62,220,62,225,62,232,62,237,62,244,62,250,62,0,63,5,63,12,63,18,63,23,63,30,63,35,63,41,63,46,63,52,63,57,63,63,63,68,63,73,63,78,63,83,63,88,63,92,63,97,63,102,63,107,63,111,63,116,63,119,63,125,63,129,63,134,63,137,63,141,63,146,63,150,63,154,63,157,63,162,63,165,63,169,63,171,63,176,63,179,63,181,63,186,63,189,63,192,63,194,63,198,63,201,63,203,63,207,63,209,63,212,63,214,63,217,63,219,63,221,63,223,63,226,63,229,63,230,63,232,63,233,63,236,63,238,63,238,63,241,63,242,63,243,63,245,63,246,63,248,63,249,63,249,63,251,63,251,63,252,63,253,63,253,63,253,63,254,63,255,63,0,64,0,64,0,64,0,64,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,87,1,0,0,107,1,0,0,129,1,0,0,152,1,0,0,176,1,0,0,202,1,0,0,229,1,0,0,2,2,0,0,32,2,0,0,65,2,0,0,99,2,0,0,135,2,0,0,174,2,0,0,0,0,0,0,32,0,0,0,32,0,0,0,64,0,0,0,64,0,0,0,96,0,0,0,96,0,0,0,128,0,0,0,128,0,0,0,224,0,0,0,224,0,0,0,192,0,0,0,0,0,0,0,54,110,192,250,150,42,235,238,3,74,162,219,170,73,170,234,2,0,0,0,147,241,70,174,183,88,195,157,139,95,188,152,191,35,122,67,4,0,0,0,112,170,3,77,251,47,31,115,217,253,186,254,19,27,183,1,1,0,0,0,233,152,1,44,112,14,180,58,240,50,23,17,48,88,41,178,1,0,0,0,18,25,28,144,65,227,253,112,183,230,179,148,139,33,7,99,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7,12,15,12,7,3,0,3,7,12,15,12,7,3,0,4,7,12,16,12,7,4,0,4,7,12,16,12,7,4,0,3,8,12,15,12,8,3,0,3,8,12,15,12,8,3,0,4,8,12,16,12,8,4,0,4,8,12,16,12,8,4,0,5,8,12,17,12,8,5,0,5,8,12,17,12,8,5,0,5,9,12,17,12,9,5,0,5,9,12,17,12,9,5,12,0,7,0,3,0,7,0,12,0,7,0,3,0,7,0,12,0,7,0,4,0,7,0,12,0,7,0,4,0,7,0,0,3,7,3,7,12,7,12,15,12,7,12,7,3,7,3,0,4,7,4,7,12,7,12,16,12,7,12,7,4,7,4,31,27,24,19,15,12,7,3,0,3,7,12,15,19,24,27,31,28,24,19,16,12,7,4,0,4,7,12,16,19,24,28,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,0,12,24,12,0,12,24,12,0,12,24,12,0,12,24,12,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,120,109,112,95,88,88,88,88,88,88,0,0,0,0,0,0,119,43,98,0,0,0,0,0,84,77,80,68,73,82,0,0,37,115,47,0,0,0,0,0,47,116,109,112,47], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20488);
/* memory initializer */ allocate([214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+25228);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  var FS=undefined;
  
  
  
  
  var SOCKFS=undefined;function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }


  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        if (e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
          // an error occurred while trying to look up the path; we should just report ENOTDIR
          e.setErrno(ERRNO_CODES.ENOTDIR);
        }
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      if (!stream.currReading) {
        try {
          // load the list of entries now, then readdir will traverse that list, to ignore changes to files
          stream.currReading = FS.readdir(stream.path);
        } catch (e) {
          return FS.handleFSError(e);
        }
      }
      if (stream.position < 0 || stream.position >= stream.currReading.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = stream.currReading[stream.position++];
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        try {
          // child may have been removed since we started to read this directory
          var child = FS.lookupNode(stream.node, name);
        } catch (e) {
          // skip to the next entry (not infinite since position is incremented until currReading.length)
          return _readdir_r(dirp, entry, result);
        }
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=stream.position;
      HEAP32[(((entry)+(8))>>2)]=268;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))>>0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))>>0)]=0;
      HEAP8[(((entry)+(10))>>0)]=type;
      HEAP32[((result)>>2)]=entry;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      // extra effort to support printf, even without a filesystem. very partial, very hackish
      var result = __formatString(format, varargs);
      var string = intArrayToString(result);
      if (string[string.length-1] === '\n') string = string.substr(0, string.length-1); // remove a final \n, as Module.print will do that
      Module.print(string);
      return result.length;
    }


  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;


  function _fdopen(fildes, mode) {
      // FILE *fdopen(int fildes, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fdopen.html
      mode = Pointer_stringify(mode);
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if ((mode.indexOf('w') != -1 && !stream.isWrite) ||
          (mode.indexOf('r') != -1 && !stream.isRead) ||
          (mode.indexOf('a') != -1 && !stream.isAppend) ||
          (mode.indexOf('+') != -1 && (!stream.isRead || !stream.isWrite))) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else {
        stream.error = false;
        stream.eof = false;
        return FS.getPtrForStream(stream);
      }
    }


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  var _abs=Math_abs;

  
  var PATH=undefined;
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function _getpid() {  return PROCINFO.pid;  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _sin=Math_sin;

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      var stream = FS.getStream(fd);
      if (stream.currReading) stream.currReading = null;
      return _close(fd);
    }

  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

   
  Module["_strcpy"] = _strcpy;


  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_readdir_r": _readdir_r, "_sin": _sin, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fread": _fread, "_lseek": _lseek, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_write": _write, "___buildEnvironment": ___buildEnvironment, "_fflush": _fflush, "_opendir": _opendir, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_getpid": _getpid, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_unlink": _unlink, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_fdopen": _fdopen, "_fseek": _fseek, "_readdir": _readdir, "_pread": _pread, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "_feof": _feof, "_ftell": _ftell, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_fgetc": _fgetc, "_printf": _printf, "_read": _read, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_abs": _abs, "__formatString": __formatString, "_closedir": _closedir, "_fopen": _fopen, "_close": _close, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _readdir_r=env._readdir_r;
  var _sin=env._sin;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _write=env._write;
  var ___buildEnvironment=env.___buildEnvironment;
  var _fflush=env._fflush;
  var _opendir=env._opendir;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _getpid=env._getpid;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _unlink=env._unlink;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _fdopen=env._fdopen;
  var _fseek=env._fseek;
  var _readdir=env._readdir;
  var _pread=env._pread;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var _feof=env._feof;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _printf=env._printf;
  var _read=env._read;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _abs=env._abs;
  var __formatString=env.__formatString;
  var _closedir=env._closedir;
  var _fopen=env._fopen;
  var _close=env._close;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _outputrle($chr,$outputfunc,$rd,$io) {
 $chr = $chr|0;
 $outputfunc = $outputfunc|0;
 $rd = $rd|0;
 $io = $io|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chr;
 $1 = $outputfunc;
 $2 = $rd;
 $3 = $io;
 $4 = $0;
 $5 = ($4|0)==(-1);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 if ($5) {
  HEAP32[$7>>2] = 0;
  $8 = $2;
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $0;
 if (!($10)) {
  $26 = ($11|0)==(144);
  if ($26) {
   $27 = $2;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = 1;
   STACKTOP = sp;return;
  } else {
   $29 = $1;
   $30 = $0;
   $31 = $3;
   FUNCTION_TABLE_vii[$29 & 255]($30,$31);
   $32 = $0;
   $33 = $2;
   HEAP32[$33>>2] = $32;
   STACKTOP = sp;return;
  }
 }
 $12 = ($11|0)==(0);
 L13: do {
  if ($12) {
   $13 = $1;
   $14 = $3;
   FUNCTION_TABLE_vii[$13 & 255](144,$14);
  } else {
   $f = 1;
   while(1) {
    $15 = $f;
    $16 = $0;
    $17 = ($15|0)<($16|0);
    if (!($17)) {
     break L13;
    }
    $18 = $1;
    $19 = $2;
    $20 = HEAP32[$19>>2]|0;
    $21 = $3;
    FUNCTION_TABLE_vii[$18 & 255]($20,$21);
    $22 = $f;
    $23 = (($22) + 1)|0;
    $f = $23;
   }
  }
 } while(0);
 $24 = $2;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 0;
 STACKTOP = sp;return;
}
function _read_lzw_dynamic($f,$buf,$max_bits,$use_rle,$in_len,$orig_len,$q) {
 $f = $f|0;
 $buf = $buf|0;
 $max_bits = $max_bits|0;
 $use_rle = $use_rle|0;
 $in_len = $in_len|0;
 $orig_len = $orig_len|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf2 = 0, $data = 0, $pos = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $buf;
 $3 = $max_bits;
 $4 = $use_rle;
 $5 = $in_len;
 $6 = $orig_len;
 $7 = $q;
 $8 = (_malloc(1065020)|0);
 $data = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $10 = $5;
 $11 = (_malloc($10)|0);
 $buf2 = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $13 = $1;
  $14 = (_ftell(($13|0))|0);
  $pos = $14;
  $15 = $buf2;
  $16 = $5;
  $17 = $1;
  (_fread(($15|0),1,($16|0),($17|0))|0);
  $18 = $buf2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $22 = $6;
  $23 = $7;
  $24 = $data;
  $25 = (__convert_lzw_dynamic($18,$19,$20,$21,$22,$23,$24)|0);
  $b = $25;
  $26 = $2;
  $27 = $b;
  $28 = $6;
  _memcpy(($26|0),($27|0),($28|0))|0;
  $29 = $7;
  $30 = $29 & 16;
  $31 = ($30|0)!=(0);
  $32 = $data;
  $33 = ((($32)) + 1065016|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 3)|0;
  $36 = $35 & -4;
  $37 = $31 ? $36 : $34;
  $size = $37;
  $38 = $1;
  $39 = $pos;
  $40 = $size;
  $41 = (($39) + ($40))|0;
  (_fseek(($38|0),($41|0),0)|0);
  $42 = $b;
  _free($42);
  $43 = $buf2;
  _free($43);
  $44 = $data;
  _free($44);
  $45 = $2;
  $0 = $45;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function __convert_lzw_dynamic($data_in,$max_bits,$use_rle,$in_len,$orig_len,$q,$data) {
 $data_in = $data_in|0;
 $max_bits = $max_bits|0;
 $use_rle = $use_rle|0;
 $in_len = $in_len|0;
 $orig_len = $orig_len|0;
 $q = $q|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $csize = 0, $data_out = 0, $first = 0, $k = 0, $newcode = 0, $noadd = 0;
 var $oldcode = 0, $or$cond = 0, $or$cond3 = 0, $orgcsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $newcode = sp + 16|0;
 $1 = $data_in;
 $2 = $max_bits;
 $3 = $use_rle;
 $4 = $in_len;
 $5 = $orig_len;
 $6 = $q;
 $7 = $data;
 $k = 0;
 $first = 1;
 $8 = $6;
 $9 = $7;
 $10 = ((($9)) + 786480|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = $7;
 $13 = ((($12)) + 786448|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = 1 << $14;
 $16 = $7;
 $17 = ((($16)) + 786484|0);
 HEAP32[$17>>2] = $15;
 $18 = $7;
 $19 = ((($18)) + 786484|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(65536);
 if ($21) {
  $0 = 0;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 $22 = $5;
 $23 = (_calloc(1,$22)|0);
 $data_out = $23;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $0 = 0;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 $25 = $1;
 $26 = $7;
 $27 = ((($26)) + 786464|0);
 HEAP32[$27>>2] = $25;
 $28 = $1;
 $29 = $4;
 $30 = (($28) + ($29)|0);
 $31 = $7;
 $32 = ((($31)) + 786464|0);
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = $30;
 $34 = $data_out;
 $35 = $7;
 $36 = ((($35)) + 786464|0);
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = $34;
 $38 = $data_out;
 $39 = $5;
 $40 = (($38) + ($39)|0);
 $41 = $7;
 $42 = ((($41)) + 786464|0);
 $43 = ((($42)) + 12|0);
 HEAP32[$43>>2] = $40;
 $44 = $7;
 $45 = ((($44)) + 786440|0);
 HEAP32[$45>>2] = 0;
 $46 = $7;
 $47 = ((($46)) + 786436|0);
 HEAP32[$47>>2] = 0;
 $48 = $7;
 $49 = ((($48)) + 786444|0);
 HEAP32[$49>>2] = 0;
 $50 = $7;
 $51 = ((($50)) + 786456|0);
 $52 = $7;
 $53 = ((($52)) + 786464|0);
 _outputrle(-1,0,$51,$53);
 $54 = $7;
 $55 = ((($54)) + 786452|0);
 HEAP32[$55>>2] = 0;
 $csize = 9;
 $56 = $2;
 $57 = ($56|0)==(0);
 if ($57) {
  $58 = $7;
  $59 = ((($58)) + 786452|0);
  HEAP32[$59>>2] = 1;
  $csize = 12;
  $60 = $7;
  $61 = ((($60)) + 786484|0);
  HEAP32[$61>>2] = 4096;
 }
 $62 = $csize;
 $orgcsize = $62;
 $63 = $orgcsize;
 $64 = $7;
 _inittable($63,$64);
 HEAP32[$newcode>>2] = 0;
 $oldcode = 0;
 $65 = $7;
 $66 = ((($65)) + 786480|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 & 32;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $7;
  $71 = ((($70)) + 786464|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 1|0);
  HEAP32[$71>>2] = $73;
 }
 $74 = $2;
 $75 = ($74|0)==(16);
 if ($75) {
  $76 = $7;
  $77 = ((($76)) + 786464|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 1|0);
  HEAP32[$77>>2] = $79;
  $80 = HEAP8[$78>>0]|0;
  $81 = $80&255;
  $82 = 1 << $81;
  $83 = $7;
  $84 = ((($83)) + 786484|0);
  HEAP32[$84>>2] = $82;
 }
 $85 = $7;
 $86 = ((($85)) + 786484|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $2;
 $89 = 1 << $88;
 $90 = ($87|0)>($89|0);
 if ($90) {
  $0 = 0;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 $91 = $7;
 $92 = ((($91)) + 1065016|0);
 HEAP32[$92>>2] = 0;
 while(1) {
  $93 = $csize;
  $94 = $7;
  $95 = (_readcode($newcode,$93,$94)|0);
  $96 = ($95|0)!=(0);
  if (!($96)) {
   break;
  }
  $97 = $7;
  $98 = ((($97)) + 786480|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99 & 1;
  $101 = ($100|0)!=(0);
  $102 = HEAP32[$newcode>>2]|0;
  $103 = ($102|0)==(257);
  $or$cond = $101 & $103;
  if ($or$cond) {
   break;
  }
  $noadd = 0;
  $104 = $first;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = HEAP32[$newcode>>2]|0;
   $k = $106;
   $first = 0;
   $107 = $7;
   $108 = ((($107)) + 786452|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)!=(0);
   if ($110) {
    $noadd = 1;
   }
  }
  $111 = HEAP32[$newcode>>2]|0;
  $112 = ($111|0)==(256);
  if ($112) {
   $113 = $7;
   $114 = ((($113)) + 786452|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($115|0)!=(0);
   if (!($116)) {
    $117 = $7;
    $118 = ((($117)) + 524288|0);
    HEAP32[$118>>2] = 255;
    $119 = $7;
    $120 = ((($119)) + 786480|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $121 & 8;
    $123 = ($122|0)!=(0);
    if ($123) {
     $124 = $7;
     $125 = ((($124)) + 524288|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($126) + 1)|0;
     HEAP32[$125>>2] = $127;
    }
    $128 = $csize;
    $129 = $7;
    _code_resync($128,$129);
    $130 = $orgcsize;
    $csize = $130;
    $131 = $csize;
    $132 = $7;
    $133 = (_readcode($newcode,$131,$132)|0);
    $134 = ($133|0)!=(0);
    if (!($134)) {
     break;
    }
   }
  }
  $135 = $7;
  $136 = ((($135)) + 786452|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137|0)!=(0);
  if ($138) {
   label = 26;
  } else {
   $139 = HEAP32[$newcode>>2]|0;
   $140 = $7;
   $141 = ((($140)) + 524288|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($139|0)<=($142|0);
   if ($143) {
    label = 28;
   } else {
    label = 26;
   }
  }
  do {
   if ((label|0) == 26) {
    label = 0;
    $144 = $7;
    $145 = ((($144)) + 786452|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)!=(0);
    if ($147) {
     $148 = HEAP32[$newcode>>2]|0;
     $149 = $7;
     $150 = ((($149)) + 262144|0);
     $151 = (($150) + ($148<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)!=(-1);
     if ($153) {
      label = 28;
      break;
     }
    }
    $159 = $oldcode;
    $160 = $7;
    _outputstring($159,$160);
    $161 = $k;
    $162 = $7;
    _outputchr($161,$162);
   }
  } while(0);
  if ((label|0) == 28) {
   label = 0;
   $154 = HEAP32[$newcode>>2]|0;
   $155 = $7;
   _outputstring($154,$155);
   $156 = HEAP32[$newcode>>2]|0;
   $157 = $7;
   $158 = (_findfirstchr($156,$157)|0);
   $k = $158;
  }
  $163 = $7;
  $164 = ((($163)) + 524288|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $7;
  $167 = ((($166)) + 786484|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($168) - 1)|0;
  $170 = ($165|0)==($169|0);
  $171 = $noadd;
  $172 = ($171|0)!=(0);
  $or$cond3 = $170 | $172;
  if (!($or$cond3)) {
   $173 = $oldcode;
   $174 = $k;
   $175 = $7;
   (_addstring($173,$174,$175)|0);
   $176 = $7;
   $177 = ((($176)) + 524288|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $7;
   $180 = ((($179)) + 786484|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) - 1)|0;
   $183 = ($178|0)!=($182|0);
   if ($183) {
    $184 = $7;
    $185 = ((($184)) + 524288|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = $csize;
    $188 = 1 << $187;
    $189 = (($188) - 1)|0;
    $190 = ($186|0)==($189|0);
    if ($190) {
     $191 = $csize;
     $192 = (($191) + 1)|0;
     $csize = $192;
     $193 = $csize;
     $194 = (($193) - 1)|0;
     $195 = $7;
     _code_resync($194,$195);
    }
   }
  }
  $196 = HEAP32[$newcode>>2]|0;
  $oldcode = $196;
 }
 $197 = $7;
 $198 = ((($197)) + 786480|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = $199 ^ -1;
 $201 = $200 & 2;
 $202 = ($201|0)!=(0);
 if ($202) {
  $203 = $7;
  $204 = ((($203)) + 786464|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $7;
  $207 = ((($206)) + 786464|0);
  $208 = ((($207)) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($205|0)!=($209|0);
  if ($210) {
   $211 = $data_out;
   _free($211);
   $0 = 0;
   $213 = $0;
   STACKTOP = sp;return ($213|0);
  }
 }
 $212 = $data_out;
 $0 = $212;
 $213 = $0;
 STACKTOP = sp;return ($213|0);
}
function _inittable($orgcsize,$data) {
 $orgcsize = $orgcsize|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $f = 0, $numcols = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $orgcsize;
 $1 = $data;
 $2 = $0;
 $3 = (($2) - 1)|0;
 $4 = 1 << $3;
 $numcols = $4;
 $f = 0;
 while(1) {
  $5 = $f;
  $6 = ($5|0)<(65536);
  if (!($6)) {
   break;
  }
  $7 = $f;
  $8 = $1;
  $9 = ((($8)) + 262144|0);
  $10 = (($9) + ($7<<2)|0);
  HEAP32[$10>>2] = -1;
  $11 = $f;
  $12 = $1;
  $13 = (($12) + ($11<<2)|0);
  HEAP32[$13>>2] = -1;
  $14 = $f;
  $15 = $1;
  $16 = ((($15)) + 524292|0);
  $17 = (($16) + ($14<<2)|0);
  HEAP32[$17>>2] = -1;
  $18 = $f;
  $19 = (($18) + 1)|0;
  $f = $19;
 }
 $f = 0;
 while(1) {
  $20 = $f;
  $21 = ($20|0)<(4096);
  if (!($21)) {
   break;
  }
  $22 = $f;
  $23 = $1;
  $24 = ((($23)) + 1048632|0);
  $25 = (($24) + ($22<<2)|0);
  HEAP32[$25>>2] = -1;
  $26 = $f;
  $27 = (($26) + 1)|0;
  $f = $27;
 }
 $28 = $1;
 $29 = ((($28)) + 786452|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $1;
  $33 = ((($32)) + 524288|0);
  HEAP32[$33>>2] = -1;
  $f = 0;
  while(1) {
   $34 = $f;
   $35 = ($34|0)<(256);
   if (!($35)) {
    break;
   }
   $36 = $f;
   $37 = $1;
   (_addstring(65535,$36,$37)|0);
   $38 = $f;
   $39 = (($38) + 1)|0;
   $f = $39;
  }
  STACKTOP = sp;return;
 }
 $f = 0;
 while(1) {
  $40 = $f;
  $41 = $numcols;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $f;
  $44 = $f;
  $45 = $1;
  $46 = ((($45)) + 262144|0);
  $47 = (($46) + ($44<<2)|0);
  HEAP32[$47>>2] = $43;
  $48 = $f;
  $49 = (($48) + 1)|0;
  $f = $49;
 }
 $50 = $numcols;
 $51 = (($50) - 1)|0;
 $52 = $1;
 $53 = ((($52)) + 524288|0);
 HEAP32[$53>>2] = $51;
 $54 = $1;
 $55 = ((($54)) + 786480|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56 & 8;
 $58 = ($57|0)!=(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $1;
 $60 = ((($59)) + 524288|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 STACKTOP = sp;return;
}
function _readcode($newcode,$numbits,$data) {
 $newcode = $newcode|0;
 $numbits = $numbits|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bitsfilled = 0, $got = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $newcode;
 $2 = $numbits;
 $3 = $data;
 $got = 0;
 $bitsfilled = 0;
 $4 = $1;
 HEAP32[$4>>2] = 0;
 while(1) {
  $5 = $bitsfilled;
  $6 = $2;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $3;
  $9 = ((($8)) + 786440|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $3;
   $13 = ((($12)) + 786464|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $3;
   $16 = ((($15)) + 786464|0);
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14>>>0)>=($18>>>0);
   if ($19) {
    label = 5;
    break;
   }
   $20 = $3;
   $21 = ((($20)) + 786464|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 1|0);
   HEAP32[$21>>2] = $23;
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = $3;
   $27 = ((($26)) + 786436|0);
   HEAP32[$27>>2] = $25;
   $28 = $3;
   $29 = ((($28)) + 786440|0);
   HEAP32[$29>>2] = 8;
   $30 = $3;
   $31 = ((($30)) + 1065016|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$31>>2] = $33;
  }
  $34 = $3;
  $35 = ((($34)) + 786440|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $2;
  $38 = $bitsfilled;
  $39 = (($37) - ($38))|0;
  $40 = ($36|0)<($39|0);
  if ($40) {
   $41 = $3;
   $42 = ((($41)) + 786440|0);
   $43 = HEAP32[$42>>2]|0;
   $got = $43;
  } else {
   $44 = $2;
   $45 = $bitsfilled;
   $46 = (($44) - ($45))|0;
   $got = $46;
  }
  $47 = $3;
  $48 = ((($47)) + 786452|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0);
  $51 = $3;
  $52 = ((($51)) + 786436|0);
  $53 = HEAP32[$52>>2]|0;
  if ($50) {
   $54 = $53 & 255;
   HEAP32[$52>>2] = $54;
   $55 = $got;
   $56 = $3;
   $57 = ((($56)) + 786436|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 << $55;
   HEAP32[$57>>2] = $59;
   $60 = $got;
   $61 = $bitsfilled;
   $62 = (($61) + ($60))|0;
   $bitsfilled = $62;
   $63 = $3;
   $64 = ((($63)) + 786436|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 >> 8;
   $67 = $2;
   $68 = $bitsfilled;
   $69 = (($67) - ($68))|0;
   $70 = $66 << $69;
   $71 = $1;
   $72 = HEAP32[$71>>2]|0;
   $73 = $72 | $70;
   HEAP32[$71>>2] = $73;
   $74 = $got;
   $75 = $3;
   $76 = ((($75)) + 786440|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) - ($74))|0;
   HEAP32[$76>>2] = $78;
   continue;
  } else {
   $79 = $got;
   $80 = 1 << $79;
   $81 = (($80) - 1)|0;
   $82 = $53 & $81;
   $83 = $bitsfilled;
   $84 = $82 << $83;
   $85 = $1;
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 | $84;
   HEAP32[$85>>2] = $87;
   $88 = $got;
   $89 = $3;
   $90 = ((($89)) + 786436|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 >> $88;
   HEAP32[$90>>2] = $92;
   $93 = $got;
   $94 = $3;
   $95 = ((($94)) + 786440|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) - ($93))|0;
   HEAP32[$95>>2] = $97;
   $98 = $got;
   $99 = $bitsfilled;
   $100 = (($99) + ($98))|0;
   $bitsfilled = $100;
   continue;
  }
 }
 if ((label|0) == 5) {
  $0 = 0;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $101 = $1;
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)<(0);
 if (!($103)) {
  $104 = $1;
  $105 = HEAP32[$104>>2]|0;
  $106 = $3;
  $107 = ((($106)) + 786484|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) - 1)|0;
  $110 = ($105|0)>($109|0);
  if (!($110)) {
   $111 = $3;
   $112 = ((($111)) + 786444|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $115 = $3;
   $116 = ((($115)) + 786444|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $117 & 7;
   HEAP32[$116>>2] = $118;
   $0 = 1;
   $119 = $0;
   STACKTOP = sp;return ($119|0);
  }
 }
 $0 = 0;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _code_resync($old,$data) {
 $old = $old|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = $old;
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 786480|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $1;
  $8 = ((($7)) + 786444|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 4;
   break;
  }
  $11 = $0;
  $12 = $1;
  $13 = (_readcode($tmp,$11,$12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _outputstring($code,$data) {
 $code = $code|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 786488|0);
 $ptr = $3;
 while(1) {
  $4 = $0;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(-1);
  if ($8) {
   $9 = $ptr;
   $10 = $1;
   $11 = ((($10)) + 786488|0);
   $12 = $1;
   $13 = ((($12)) + 786484|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($11) + ($14<<2)|0);
   $16 = ($9>>>0)<($15>>>0);
   $37 = $16;
  } else {
   $37 = 0;
  }
  $17 = $0;
  $18 = $1;
  $19 = ((($18)) + 262144|0);
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  if (!($37)) {
   break;
  }
  $22 = $ptr;
  $23 = ((($22)) + 4|0);
  $ptr = $23;
  HEAP32[$22>>2] = $21;
  $24 = $0;
  $25 = $1;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $0 = $27;
 }
 $28 = $1;
 _outputchr($21,$28);
 while(1) {
  $29 = $ptr;
  $30 = $1;
  $31 = ((($30)) + 786488|0);
  $32 = ($29>>>0)>($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $ptr;
  $34 = ((($33)) + -4|0);
  $ptr = $34;
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  _outputchr($35,$36);
 }
 STACKTOP = sp;return;
}
function _findfirstchr($code,$data) {
 $code = $code|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $code;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(-1);
 if ($6) {
  $7 = $0;
  $8 = $1;
  $9 = ((($8)) + 524292|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 262144|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _outputchr($chr,$data) {
 $chr = $chr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $chr;
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 786448|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $0;
 $7 = $1;
 if ($5) {
  $8 = ((($7)) + 786456|0);
  $9 = $1;
  $10 = ((($9)) + 786464|0);
  _outputrle($6,215,$8,$10);
  STACKTOP = sp;return;
 } else {
  $11 = ((($7)) + 786464|0);
  _rawoutput($6,$11);
  STACKTOP = sp;return;
 }
}
function _addstring($oldcode,$chr,$data) {
 $oldcode = $oldcode|0;
 $chr = $chr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oldcode;
 $2 = $chr;
 $3 = $data;
 $4 = $3;
 $5 = ((($4)) + 524288|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = $3;
 $9 = ((($8)) + 524288|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = ((($11)) + 786484|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 & $13;
 $15 = ($14|0)!=(0);
 $16 = $3;
 if ($15) {
  $17 = ((($16)) + 786484|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) - 1)|0;
  $20 = $3;
  $21 = ((($20)) + 524288|0);
  HEAP32[$21>>2] = $19;
  $0 = 1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $22 = ((($16)) + 524288|0);
 $23 = HEAP32[$22>>2]|0;
 $idx = $23;
 $24 = $3;
 $25 = ((($24)) + 786452|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $1;
  $29 = $2;
  $30 = $3;
  $31 = (_oldver_getidx($28,$29,$30)|0);
  $idx = $31;
  $32 = ($31|0)==(-1);
  if ($32) {
   $0 = 0;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 }
 $33 = $2;
 $34 = $idx;
 $35 = $3;
 $36 = ((($35)) + 262144|0);
 $37 = (($36) + ($34<<2)|0);
 HEAP32[$37>>2] = $33;
 $38 = $1;
 $39 = $3;
 $40 = ((($39)) + 786484|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38|0)>=($41|0);
 if ($42) {
  $0 = 1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $43 = $1;
 $44 = $idx;
 $45 = $3;
 $46 = (($45) + ($44<<2)|0);
 HEAP32[$46>>2] = $43;
 $47 = $1;
 $48 = $3;
 $49 = (($48) + ($47<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(-1);
 $52 = $1;
 if ($51) {
  $53 = $idx;
  $54 = $3;
  $55 = ((($54)) + 524292|0);
  $56 = (($55) + ($53<<2)|0);
  HEAP32[$56>>2] = $52;
 } else {
  $57 = $3;
  $58 = ((($57)) + 524292|0);
  $59 = (($58) + ($52<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $idx;
  $62 = $3;
  $63 = ((($62)) + 524292|0);
  $64 = (($63) + ($61<<2)|0);
  HEAP32[$64>>2] = $60;
 }
 $0 = 1;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _oldver_getidx($oldcode,$chr,$data) {
 $oldcode = $oldcode|0;
 $chr = $chr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $a = 0, $f = 0, $hashval = 0, $lasthash = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $oldcode;
 $2 = $chr;
 $3 = $data;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5))|0;
 $7 = $6 | 2048;
 $8 = $7 & 65535;
 $a = $8;
 $9 = $a;
 $10 = $a;
 $11 = Math_imul($9, $10)|0;
 $12 = $11 >> 6;
 $13 = $12 & 4095;
 $hashval = $13;
 while(1) {
  $14 = $hashval;
  $15 = $3;
  $16 = ((($15)) + 262144|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(-1);
  if ($19) {
   $20 = $hashval;
   $21 = $3;
   $22 = ((($21)) + 1048632|0);
   $23 = (($22) + ($20<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(-1);
   $75 = $25;
  } else {
   $75 = 0;
  }
  $26 = $hashval;
  $27 = $3;
  if (!($75)) {
   break;
  }
  $28 = ((($27)) + 1048632|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $hashval = $30;
 }
 $31 = ((($27)) + 262144|0);
 $32 = (($31) + ($26<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(-1);
 $35 = $hashval;
 if ($34) {
  $0 = $35;
  $74 = $0;
  STACKTOP = sp;return ($74|0);
 }
 $lasthash = $35;
 $36 = $hashval;
 $37 = (($36) + 101)|0;
 $hashval = $37;
 $38 = $hashval;
 $39 = $38 & 4095;
 $hashval = $39;
 $40 = $hashval;
 $41 = $3;
 $42 = ((($41)) + 262144|0);
 $43 = (($42) + ($40<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(-1);
 if ($45) {
  $f = 0;
  while(1) {
   $46 = $f;
   $47 = $3;
   $48 = ((($47)) + 786484|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($46|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = $hashval;
   $52 = $3;
   $53 = ((($52)) + 262144|0);
   $54 = (($53) + ($51<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==(-1);
   if ($56) {
    break;
   }
   $57 = $f;
   $58 = (($57) + 1)|0;
   $f = $58;
   $59 = $hashval;
   $60 = (($59) + 1)|0;
   $hashval = $60;
   $61 = $hashval;
   $62 = $61 & 4095;
   $hashval = $62;
  }
  $63 = $hashval;
  $64 = $3;
  $65 = ((($64)) + 786484|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  if ($67) {
   $0 = -1;
   $74 = $0;
   STACKTOP = sp;return ($74|0);
  }
 }
 $68 = $hashval;
 $69 = $lasthash;
 $70 = $3;
 $71 = ((($70)) + 1048632|0);
 $72 = (($71) + ($69<<2)|0);
 HEAP32[$72>>2] = $68;
 $73 = $hashval;
 $0 = $73;
 $74 = $0;
 STACKTOP = sp;return ($74|0);
}
function _rawoutput($byte,$io) {
 $byte = $byte|0;
 $io = $io|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $byte;
 $1 = $io;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $9&255;
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 1|0);
 HEAP32[$12>>2] = $14;
 HEAP8[$13>>0] = $10;
 STACKTOP = sp;return;
}
function _abk_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $music = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $music = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1097679467);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   $8 = (_hio_read16b($7)|0);
   $9 = $8&65535;
   $10 = ($9|0)!=(3);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   (_hio_seek($11,6,1)|0);
   $12 = $1;
   (_hio_read($music,1,8,$12)|0);
   $13 = (_memcmp($music,40,8)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $0 = -1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _abk_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $first_sample_offset = 0, $i = 0, $inst_section_size = 0, $j = 0, $k = 0, $main_header = 0, $mod = 0, $pattern = 0, $playlist = 0, $song = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $main_header = sp + 56|0;
 $song = sp + 16|0;
 $playlist = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 (_hio_seek($5,20,0)|0);
 $6 = $2;
 $7 = (_hio_read32b($6)|0);
 HEAP32[$main_header>>2] = $7;
 $8 = $2;
 $9 = (_hio_read32b($8)|0);
 $10 = ((($main_header)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = $2;
 $12 = (_hio_read32b($11)|0);
 $13 = ((($main_header)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$main_header>>2]|0;
 $15 = ($14>>>0)>(1048576);
 if (!($15)) {
  $16 = ((($main_header)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17>>>0)>(1048576);
  if (!($18)) {
   $19 = ((($main_header)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20>>>0)>(1048576);
   if (!($21)) {
    $22 = HEAP32[$main_header>>2]|0;
    $inst_section_size = $22;
    $23 = $2;
    $24 = $3;
    (_hio_seek($23,$24,0)|0);
    $25 = $1;
    _set_type($25,24,$vararg_buffer);
    $26 = $2;
    $27 = ((($main_header)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (20 + ($28))|0;
    $30 = (_read_abk_song($26,$song,$29)|0);
    $31 = ($30|0)<(0);
    if ($31) {
     $0 = -1;
     $343 = $0;
     STACKTOP = sp;return ($343|0);
    }
    $32 = $mod;
    $33 = ((($song)) + 18|0);
    (_copy_adjust($32,$33,16)|0);
    $34 = $2;
    $35 = ((($main_header)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (20 + ($36))|0;
    (_hio_seek($34,$37,0)|0);
    $38 = $mod;
    $39 = ((($38)) + 136|0);
    HEAP32[$39>>2] = 4;
    $40 = $2;
    $41 = (_hio_read16b($40)|0);
    $42 = $41&65535;
    $43 = $mod;
    $44 = ((($43)) + 128|0);
    HEAP32[$44>>2] = $42;
    $45 = $mod;
    $46 = ((($45)) + 136|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $mod;
    $49 = ((($48)) + 128|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = Math_imul($47, $50)|0;
    $52 = $mod;
    $53 = ((($52)) + 132|0);
    HEAP32[$53>>2] = $51;
    $54 = $2;
    $55 = HEAP32[$main_header>>2]|0;
    $56 = (20 + ($55))|0;
    (_hio_seek($54,$56,0)|0);
    $57 = $2;
    $58 = (_hio_read16b($57)|0);
    $59 = $58&65535;
    $60 = $mod;
    $61 = ((($60)) + 140|0);
    HEAP32[$61>>2] = $59;
    $62 = $mod;
    $63 = ((($62)) + 140|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $mod;
    $66 = ((($65)) + 144|0);
    HEAP32[$66>>2] = $64;
    $67 = $mod;
    $68 = ((($67)) + 128|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)>(256);
    if (!($70)) {
     $71 = $mod;
     $72 = ((($71)) + 140|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)>(255);
     if (!($74)) {
      $75 = $mod;
      $76 = (_instrument_init($75)|0);
      $77 = ($76|0)<(0);
      if ($77) {
       $0 = -1;
       $343 = $0;
       STACKTOP = sp;return ($343|0);
      }
      $78 = $2;
      $79 = $inst_section_size;
      $80 = $mod;
      $81 = ((($80)) + 140|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (_read_abk_insts($78,$79,$82)|0);
      $ci = $83;
      $84 = HEAP32[$main_header>>2]|0;
      $85 = (20 + ($84))|0;
      $86 = $ci;
      $87 = HEAP32[$86>>2]|0;
      $88 = (($85) + ($87))|0;
      $first_sample_offset = $88;
      $i = 0;
      while(1) {
       $89 = $i;
       $90 = $mod;
       $91 = ((($90)) + 140|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($89|0)<($92|0);
       if (!($93)) {
        break;
       }
       $94 = $mod;
       $95 = $i;
       $96 = (_subinstrument_alloc($94,$95,1)|0);
       $97 = ($96|0)<(0);
       if ($97) {
        label = 15;
        break;
       }
       $99 = $i;
       $100 = $ci;
       $101 = (($100) + ($99<<5)|0);
       $102 = ((($101)) + 4|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = $103 << 1;
       $105 = $i;
       $106 = $mod;
       $107 = ((($106)) + 180|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (($108) + (($105*52)|0)|0);
       $110 = ((($109)) + 32|0);
       HEAP32[$110>>2] = $104;
       $111 = $i;
       $112 = $mod;
       $113 = ((($112)) + 180|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (($114) + (($111*52)|0)|0);
       $116 = ((($115)) + 32|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($117|0)>(0);
       if ($118) {
        $119 = $i;
        $120 = $mod;
        $121 = ((($120)) + 176|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($122) + (($119*764)|0)|0);
        $124 = ((($123)) + 36|0);
        HEAP32[$124>>2] = 1;
       }
       $125 = $i;
       $126 = $ci;
       $127 = (($126) + ($125<<5)|0);
       $128 = ((($127)) + 8|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $i;
       $131 = $ci;
       $132 = (($131) + ($130<<5)|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($129>>>0)>($133>>>0);
       $135 = $i;
       if ($134) {
        $136 = $ci;
        $137 = (($136) + ($135<<5)|0);
        $138 = ((($137)) + 8|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = $i;
        $141 = $ci;
        $142 = (($141) + ($140<<5)|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = (($139) - ($143))|0;
        $145 = $144 << 1;
        $146 = $i;
        $147 = $mod;
        $148 = ((($147)) + 180|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (($149) + (($146*52)|0)|0);
        $151 = ((($150)) + 36|0);
        HEAP32[$151>>2] = $145;
       } else {
        $152 = $mod;
        $153 = ((($152)) + 180|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = (($154) + (($135*52)|0)|0);
        $156 = ((($155)) + 36|0);
        HEAP32[$156>>2] = 0;
       }
       $157 = $i;
       $158 = $ci;
       $159 = (($158) + ($157<<5)|0);
       $160 = ((($159)) + 12|0);
       $161 = HEAP16[$160>>1]|0;
       $162 = $161&65535;
       $163 = $i;
       $164 = $mod;
       $165 = ((($164)) + 180|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = (($166) + (($163*52)|0)|0);
       $168 = ((($167)) + 40|0);
       HEAP32[$168>>2] = $162;
       $169 = $i;
       $170 = $mod;
       $171 = ((($170)) + 180|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (($172) + (($169*52)|0)|0);
       $174 = ((($173)) + 40|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)>(2);
       if ($176) {
        $177 = $i;
        $178 = $mod;
        $179 = ((($178)) + 180|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = (($180) + (($177*52)|0)|0);
        $182 = ((($181)) + 40|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = $183 << 1;
        HEAP32[$182>>2] = $184;
        $185 = $i;
        $186 = $mod;
        $187 = ((($186)) + 180|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = (($188) + (($185*52)|0)|0);
        $190 = ((($189)) + 44|0);
        HEAP32[$190>>2] = 2;
       }
       $191 = $i;
       $192 = $ci;
       $193 = (($192) + ($191<<5)|0);
       $194 = ((($193)) + 14|0);
       $195 = HEAP16[$194>>1]|0;
       $196 = $195&65535;
       $197 = $i;
       $198 = $mod;
       $199 = ((($198)) + 176|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = (($200) + (($197*764)|0)|0);
       $202 = ((($201)) + 756|0);
       $203 = HEAP32[$202>>2]|0;
       HEAP32[$203>>2] = $196;
       $204 = $i;
       $205 = $mod;
       $206 = ((($205)) + 176|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = (($207) + (($204*764)|0)|0);
       $209 = ((($208)) + 756|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ((($210)) + 8|0);
       HEAP32[$211>>2] = 128;
       $212 = $i;
       $213 = $i;
       $214 = $mod;
       $215 = ((($214)) + 176|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = (($216) + (($213*764)|0)|0);
       $218 = ((($217)) + 756|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = ((($219)) + 40|0);
       HEAP32[$220>>2] = $212;
       $221 = $mod;
       $222 = $i;
       $223 = $i;
       $224 = $ci;
       $225 = (($224) + ($223<<5)|0);
       $226 = ((($225)) + 16|0);
       (_instrument_name($221,$222,$226,16)|0);
       $227 = $i;
       $228 = (($227) + 1)|0;
       $i = $228;
      }
      if ((label|0) == 15) {
       $98 = $ci;
       _free($98);
       $0 = -1;
       $343 = $0;
       STACKTOP = sp;return ($343|0);
      }
      $229 = $ci;
      _free($229);
      $230 = $mod;
      $231 = (_pattern_init($230)|0);
      $232 = ($231|0)<(0);
      if ($232) {
       $0 = -1;
       $343 = $0;
       STACKTOP = sp;return ($343|0);
      }
      $233 = $2;
      $234 = HEAP32[$song>>2]|0;
      _read_abk_playlist($233,$234,$playlist);
      $235 = $2;
      $236 = ((($main_header)) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (20 + ($237))|0;
      $239 = (($238) + 2)|0;
      (_hio_seek($235,$239,0)|0);
      $240 = $mod;
      $241 = ((($240)) + 156|0);
      HEAP32[$241>>2] = 0;
      $i = 0;
      $j = 0;
      L38: while(1) {
       $242 = $j;
       $243 = $mod;
       $244 = ((($243)) + 128|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = ($242|0)<($245|0);
       if (!($246)) {
        label = 36;
        break;
       }
       $247 = $mod;
       $248 = $i;
       $249 = (_pattern_tracks_alloc($247,$248,64)|0);
       $250 = ($249|0)<(0);
       if ($250) {
        label = 29;
        break;
       }
       $k = 0;
       while(1) {
        $253 = $k;
        $254 = $mod;
        $255 = ((($254)) + 136|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ($253|0)<($256|0);
        if (!($257)) {
         break;
        }
        $258 = $2;
        $259 = (_hio_read16b($258)|0);
        $pattern = $259;
        $260 = $2;
        $261 = $i;
        $262 = $mod;
        $263 = ((($262)) + 136|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = Math_imul($261, $264)|0;
        $266 = $k;
        $267 = (($265) + ($266))|0;
        $268 = $mod;
        $269 = ((($268)) + 172|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + ($267<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ((($272)) + 4|0);
        $274 = ((($main_header)) + 8|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = (20 + ($275))|0;
        $277 = $pattern;
        $278 = $277&65535;
        $279 = (($276) + ($278))|0;
        $280 = (_read_abk_pattern($260,$273,$279)|0);
        $281 = ($280|0)<(0);
        if ($281) {
         label = 33;
         break L38;
        }
        $284 = $k;
        $285 = (($284) + 1)|0;
        $k = $285;
       }
       $286 = $i;
       $287 = (($286) + 1)|0;
       $i = $287;
       $288 = $j;
       $289 = (($288) + 1)|0;
       $j = $289;
      }
      if ((label|0) == 29) {
       $251 = ((($playlist)) + 4|0);
       $252 = HEAP32[$251>>2]|0;
       _free($252);
       $0 = -1;
       $343 = $0;
       STACKTOP = sp;return ($343|0);
      }
      else if ((label|0) == 33) {
       $282 = ((($playlist)) + 4|0);
       $283 = HEAP32[$282>>2]|0;
       _free($283);
       $0 = -1;
       $343 = $0;
       STACKTOP = sp;return ($343|0);
      }
      else if ((label|0) == 36) {
       $290 = HEAP16[$playlist>>1]|0;
       $291 = $290&65535;
       $292 = ($291|0)>(256);
       if ($292) {
        $293 = ((($playlist)) + 4|0);
        $294 = HEAP32[$293>>2]|0;
        _free($294);
        $0 = -1;
        $343 = $0;
        STACKTOP = sp;return ($343|0);
       }
       $295 = HEAP16[$playlist>>1]|0;
       $296 = $295&65535;
       $297 = $mod;
       $298 = ((($297)) + 156|0);
       HEAP32[$298>>2] = $296;
       $i = 0;
       while(1) {
        $299 = $i;
        $300 = HEAP16[$playlist>>1]|0;
        $301 = $300&65535;
        $302 = ($299|0)<($301|0);
        if (!($302)) {
         break;
        }
        $303 = $i;
        $304 = ((($playlist)) + 4|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = (($305) + ($303<<1)|0);
        $307 = HEAP16[$306>>1]|0;
        $308 = $307&255;
        $309 = $i;
        $310 = $mod;
        $311 = ((($310)) + 952|0);
        $312 = (($311) + ($309)|0);
        HEAP8[$312>>0] = $308;
        $313 = $i;
        $314 = (($313) + 1)|0;
        $i = $314;
       }
       $315 = ((($playlist)) + 4|0);
       $316 = HEAP32[$315>>2]|0;
       _free($316);
       $317 = $2;
       $318 = $first_sample_offset;
       (_hio_seek($317,$318,0)|0);
       $i = 0;
       while(1) {
        $319 = $i;
        $320 = $mod;
        $321 = ((($320)) + 140|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ($319|0)<($322|0);
        if (!($323)) {
         label = 47;
         break;
        }
        $324 = $i;
        $325 = $mod;
        $326 = ((($325)) + 180|0);
        $327 = HEAP32[$326>>2]|0;
        $328 = (($327) + (($324*52)|0)|0);
        $329 = ((($328)) + 32|0);
        $330 = HEAP32[$329>>2]|0;
        $331 = ($330|0)<=(2);
        if (!($331)) {
         $332 = $1;
         $333 = $2;
         $334 = $i;
         $335 = $mod;
         $336 = ((($335)) + 180|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = (($337) + (($334*52)|0)|0);
         $339 = (_load_sample($332,$333,0,$338,0)|0);
         $340 = ($339|0)<(0);
         if ($340) {
          label = 45;
          break;
         }
        }
        $341 = $i;
        $342 = (($341) + 1)|0;
        $i = $342;
       }
       if ((label|0) == 45) {
        $0 = -1;
        $343 = $0;
        STACKTOP = sp;return ($343|0);
       }
       else if ((label|0) == 47) {
        $0 = 0;
        $343 = $0;
        STACKTOP = sp;return ($343|0);
       }
      }
     }
    }
    $0 = -1;
    $343 = $0;
    STACKTOP = sp;return ($343|0);
   }
  }
 }
 $0 = -1;
 $343 = $0;
 STACKTOP = sp;return ($343|0);
}
function _read_abk_song($f,$song,$songs_section_offset) {
 $f = $f|0;
 $song = $song|0;
 $songs_section_offset = $songs_section_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $song_section = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $song;
 $3 = $songs_section_offset;
 $4 = $1;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $1;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = ($8|0)!=(1);
 if ($9) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $10 = $1;
 $11 = (_hio_read32b($10)|0);
 $song_section = $11;
 $12 = $1;
 $13 = $3;
 $14 = $song_section;
 $15 = (($13) + ($14))|0;
 (_hio_seek($12,$15,0)|0);
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(4);
  $18 = $1;
  $19 = (_hio_read16b($18)|0);
  if (!($17)) {
   break;
  }
  $20 = $19&65535;
  $21 = $3;
  $22 = (($20) + ($21))|0;
  $23 = $song_section;
  $24 = (($22) + ($23))|0;
  $25 = $i;
  $26 = $2;
  $27 = (($26) + ($25<<2)|0);
  HEAP32[$27>>2] = $24;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $2;
 $31 = ((($30)) + 16|0);
 HEAP16[$31>>1] = $19;
 $32 = $1;
 (_hio_read16b($32)|0);
 $33 = $2;
 $34 = ((($33)) + 18|0);
 $35 = $1;
 (_hio_read($34,1,16,$35)|0);
 $0 = 0;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _read_abk_insts($f,$inst_section_size,$count) {
 $f = $f|0;
 $inst_section_size = $inst_section_size|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inst = 0, $sampleLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $inst_section_size;
 $2 = $count;
 $3 = $2;
 $4 = $3<<5;
 $5 = (_malloc($4)|0);
 $inst = $5;
 $6 = $inst;
 $7 = $2;
 $8 = $7<<5;
 _memset(($6|0),0,($8|0))|0;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $9&65535;
  $11 = $2;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $0;
  $14 = (_hio_read32b($13)|0);
  $15 = $i;
  $16 = $15&65535;
  $17 = $inst;
  $18 = (($17) + ($16<<5)|0);
  HEAP32[$18>>2] = $14;
  $19 = $0;
  $20 = (_hio_read32b($19)|0);
  $21 = $i;
  $22 = $21&65535;
  $23 = $inst;
  $24 = (($23) + ($22<<5)|0);
  $25 = ((($24)) + 8|0);
  HEAP32[$25>>2] = $20;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  $28 = $27&65535;
  $29 = $i;
  $30 = $29&65535;
  $31 = $inst;
  $32 = (($31) + ($30<<5)|0);
  $33 = ((($32)) + 4|0);
  HEAP32[$33>>2] = $28;
  $34 = $0;
  $35 = (_hio_read16b($34)|0);
  $36 = $i;
  $37 = $36&65535;
  $38 = $inst;
  $39 = (($38) + ($37<<5)|0);
  $40 = ((($39)) + 12|0);
  HEAP16[$40>>1] = $35;
  $41 = $0;
  $42 = (_hio_read16b($41)|0);
  $43 = $i;
  $44 = $43&65535;
  $45 = $inst;
  $46 = (($45) + ($44<<5)|0);
  $47 = ((($46)) + 14|0);
  HEAP16[$47>>1] = $42;
  $48 = $0;
  $49 = (_hio_read16b($48)|0);
  $50 = $49&65535;
  $sampleLength = $50;
  $51 = $sampleLength;
  $52 = ($51>>>0)>(4);
  if ($52) {
   $53 = $sampleLength;
   $54 = $i;
   $55 = $54&65535;
   $56 = $inst;
   $57 = (($56) + ($55<<5)|0);
   $58 = ((($57)) + 4|0);
   HEAP32[$58>>2] = $53;
  }
  $59 = $i;
  $60 = $59&65535;
  $61 = $inst;
  $62 = (($61) + ($60<<5)|0);
  $63 = ((($62)) + 16|0);
  $64 = $0;
  (_hio_read($63,1,16,$64)|0);
  $65 = $i;
  $66 = (($65) + 1)<<16>>16;
  $i = $66;
 }
 $67 = $inst;
 STACKTOP = sp;return ($67|0);
}
function _read_abk_playlist($f,$playlist_offset,$playlist) {
 $f = $f|0;
 $playlist_offset = $playlist_offset|0;
 $playlist = $playlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arraysize = 0, $playdata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $playlist_offset;
 $2 = $playlist;
 $arraysize = 64;
 $3 = $2;
 HEAP16[$3>>1] = 0;
 $4 = $0;
 $5 = $1;
 (_hio_seek($4,$5,0)|0);
 $6 = $arraysize;
 $7 = $6<<1;
 $8 = (_malloc($7)|0);
 $9 = $2;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (_hio_read16b($11)|0);
 $playdata = $12;
 while(1) {
  $13 = $playdata;
  $14 = $13&65535;
  $15 = ($14|0)!=(65535);
  if (!($15)) {
   label = 7;
   break;
  }
  $16 = $playdata;
  $17 = $16&65535;
  $18 = ($17|0)!=(65534);
  if (!($18)) {
   label = 7;
   break;
  }
  $19 = $2;
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $arraysize;
  $23 = ($21|0)>=($22|0);
  if ($23) {
   $24 = $arraysize;
   $25 = $24<<1;
   $arraysize = $25;
   $26 = $2;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $arraysize;
   $30 = $29<<1;
   $31 = (_realloc($28,$30)|0);
   $32 = $2;
   $33 = ((($32)) + 4|0);
   HEAP32[$33>>2] = $31;
  }
  $34 = $playdata;
  $35 = $2;
  $36 = HEAP16[$35>>1]|0;
  $37 = (($36) + 1)<<16>>16;
  HEAP16[$35>>1] = $37;
  $38 = $36&65535;
  $39 = $2;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<1)|0);
  HEAP16[$42>>1] = $34;
  $43 = $0;
  $44 = (_hio_read16b($43)|0);
  $playdata = $44;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _read_abk_pattern($f,$events,$pattern_offset_abs) {
 $f = $f|0;
 $events = $events|0;
 $pattern_offset_abs = $pattern_offset_abs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $command = 0, $delay = 0;
 var $i = 0, $inst = 0, $jumped = 0, $param = 0, $patdata = 0, $per_command = 0, $per_param = 0, $position = 0, $storepos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $events;
 $3 = $pattern_offset_abs;
 $inst = 0;
 $jumped = 0;
 $per_command = 0;
 $per_param = 0;
 $4 = $1;
 $5 = (_hio_tell($4)|0);
 $storepos = $5;
 $position = 0;
 $6 = $1;
 $7 = $3;
 (_hio_seek($6,$7,0)|0);
 $8 = $1;
 $9 = (_hio_read16b($8)|0);
 $patdata = $9;
 L1: while(1) {
  $10 = $patdata;
  $11 = $10&65535;
  $12 = ($11|0)!=(32768);
  if (!($12)) {
   break;
  }
  $13 = $jumped;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  if (!($15)) {
   break;
  }
  $16 = $patdata;
  $17 = $16&65535;
  $18 = ($17|0)==(37120);
  if ($18) {
   break;
  }
  $19 = $patdata;
  $20 = $19&65535;
  $21 = $20 & 32768;
  $22 = ($21|0)!=(0);
  $23 = $patdata;
  $24 = $23&65535;
  L6: do {
   if ($22) {
    $25 = $24 >> 8;
    $26 = $25 & 127;
    $27 = $26&255;
    $command = $27;
    $28 = $patdata;
    $29 = $28&65535;
    $30 = $29 & 127;
    $31 = $30&255;
    $param = $31;
    $32 = $command;
    $33 = $32&255;
    $34 = ($33|0)!=(3);
    if ($34) {
     $35 = $command;
     $36 = $35&255;
     $37 = ($36|0)!=(9);
     if ($37) {
      $38 = $command;
      $39 = $38&255;
      $40 = ($39|0)!=(11);
      if ($40) {
       $41 = $command;
       $42 = $41&255;
       $43 = ($42|0)!=(12);
       if ($43) {
        $44 = $command;
        $45 = $44&255;
        $46 = ($45|0)!=(13);
        if ($46) {
         $47 = $command;
         $48 = $47&255;
         $49 = ($48|0)<(16);
         if ($49) {
          $per_command = 0;
          $per_param = 0;
         }
        }
       }
      }
     }
    }
    $50 = $command;
    $51 = $50&255;
    do {
     switch ($51|0) {
     case 13:  {
      $152 = $param;
      $153 = $152&255;
      $154 = ($153|0)!=(0);
      if ($154) {
       $per_command = 10;
       $155 = $param;
       $per_param = $155;
       break L6;
      } else {
       $per_command = 0;
       $per_param = 0;
       break L6;
      }
      break;
     }
     case 16:  {
      $156 = $per_command;
      $157 = $156&255;
      $158 = ($157|0)!=(0);
      if ($158) {
       label = 33;
      } else {
       $159 = $per_param;
       $160 = $159&255;
       $161 = ($160|0)!=(0);
       if ($161) {
        label = 33;
       } else {
        $185 = $param;
        $186 = $185&255;
        $187 = $position;
        $188 = $187&255;
        $189 = (($188) + ($186))|0;
        $190 = $189&255;
        $position = $190;
       }
      }
      L25: do {
       if ((label|0) == 33) {
        label = 0;
        $i = 0;
        while(1) {
         $162 = $i;
         $163 = $param;
         $164 = $163&255;
         $165 = ($162|0)<($164|0);
         if (!($165)) {
          break L25;
         }
         $166 = $position;
         $167 = $166&255;
         $168 = ($167|0)<(64);
         if (!($168)) {
          break L25;
         }
         $169 = $per_command;
         $170 = $position;
         $171 = $170&255;
         $172 = $2;
         $173 = (($172) + ($171<<3)|0);
         $174 = ((($173)) + 3|0);
         HEAP8[$174>>0] = $169;
         $175 = $per_param;
         $176 = $position;
         $177 = $176&255;
         $178 = $2;
         $179 = (($178) + ($177<<3)|0);
         $180 = ((($179)) + 4|0);
         HEAP8[$180>>0] = $175;
         $181 = $position;
         $182 = (($181) + 1)<<24>>24;
         $position = $182;
         $183 = $i;
         $184 = (($183) + 1)|0;
         $i = $184;
        }
       }
      } while(0);
      $191 = $position;
      $192 = $191&255;
      $193 = ($192|0)>=(64);
      if (!($193)) {
       break L6;
      }
      $jumped = 1;
      break L6;
      break;
     }
     case 11:  {
      $per_command = 3;
      $150 = $param;
      $per_param = $150;
      break L6;
      break;
     }
     case 12:  {
      $per_command = 4;
      $151 = $param;
      $per_param = $151;
      break L6;
      break;
     }
     case 17:  {
      $194 = $position;
      $195 = $194&255;
      $196 = $2;
      $197 = (($196) + ($195<<3)|0);
      $198 = ((($197)) + 3|0);
      HEAP8[$198>>0] = 11;
      $199 = $param;
      $200 = $position;
      $201 = $200&255;
      $202 = $2;
      $203 = (($202) + ($201<<3)|0);
      $204 = ((($203)) + 4|0);
      HEAP8[$204>>0] = $199;
      $jumped = 1;
      break L6;
      break;
     }
     case 6:  {
      $108 = $position;
      $109 = $108&255;
      $110 = $2;
      $111 = (($110) + ($109<<3)|0);
      $112 = ((($111)) + 3|0);
      HEAP8[$112>>0] = 14;
      $113 = $position;
      $114 = $113&255;
      $115 = $2;
      $116 = (($115) + ($114<<3)|0);
      $117 = ((($116)) + 4|0);
      HEAP8[$117>>0] = 0;
      break L6;
      break;
     }
     case 10:  {
      $per_command = 0;
      $149 = $param;
      $per_param = $149;
      break L6;
      break;
     }
     case 15: case 2:  {
      $63 = $position;
      $64 = $63&255;
      $65 = $2;
      $66 = (($65) + ($64<<3)|0);
      $67 = ((($66)) + 3|0);
      HEAP8[$67>>0] = 2;
      $68 = $param;
      $69 = $position;
      $70 = $69&255;
      $71 = $2;
      $72 = (($71) + ($70<<3)|0);
      $73 = ((($72)) + 4|0);
      HEAP8[$73>>0] = $68;
      break L6;
      break;
     }
     case 9:  {
      $145 = $param;
      $146 = $145&255;
      $147 = (($146) + 1)|0;
      $148 = $147&255;
      $inst = $148;
      break L6;
      break;
     }
     case 4:  {
      break L6;
      break;
     }
     case 7:  {
      $118 = $position;
      $119 = $118&255;
      $120 = $2;
      $121 = (($120) + ($119<<3)|0);
      $122 = ((($121)) + 3|0);
      HEAP8[$122>>0] = 14;
      $123 = $position;
      $124 = $123&255;
      $125 = $2;
      $126 = (($125) + ($124<<3)|0);
      $127 = ((($126)) + 4|0);
      HEAP8[$127>>0] = 1;
      break L6;
      break;
     }
     case 8:  {
      $128 = $param;
      $129 = $128&255;
      $130 = ($129|0)>(0);
      if (!($130)) {
       break L6;
      }
      $131 = $position;
      $132 = $131&255;
      $133 = $2;
      $134 = (($133) + ($132<<3)|0);
      $135 = ((($134)) + 3|0);
      HEAP8[$135>>0] = 15;
      $136 = $param;
      $137 = $136&255;
      $138 = (100 / ($137|0))&-1;
      $139 = $138&255;
      $140 = $position;
      $141 = $140&255;
      $142 = $2;
      $143 = (($142) + ($141<<3)|0);
      $144 = ((($143)) + 4|0);
      HEAP8[$144>>0] = $139;
      break L6;
      break;
     }
     case 3:  {
      $74 = $position;
      $75 = $74&255;
      $76 = $2;
      $77 = (($76) + ($75<<3)|0);
      $78 = ((($77)) + 3|0);
      HEAP8[$78>>0] = 12;
      $79 = $param;
      $80 = $position;
      $81 = $80&255;
      $82 = $2;
      $83 = (($82) + ($81<<3)|0);
      $84 = ((($83)) + 4|0);
      HEAP8[$84>>0] = $79;
      break L6;
      break;
     }
     case 14: case 1:  {
      $52 = $position;
      $53 = $52&255;
      $54 = $2;
      $55 = (($54) + ($53<<3)|0);
      $56 = ((($55)) + 3|0);
      HEAP8[$56>>0] = 1;
      $57 = $param;
      $58 = $position;
      $59 = $58&255;
      $60 = $2;
      $61 = (($60) + ($59<<3)|0);
      $62 = ((($61)) + 4|0);
      HEAP8[$62>>0] = $57;
      break L6;
      break;
     }
     case 5:  {
      $85 = $position;
      $86 = $85&255;
      $87 = $2;
      $88 = (($87) + ($86<<3)|0);
      $89 = ((($88)) + 3|0);
      HEAP8[$89>>0] = 14;
      $90 = $param;
      $91 = $90&255;
      $92 = ($91|0)==(0);
      if ($92) {
       $93 = $position;
       $94 = $93&255;
       $95 = $2;
       $96 = (($95) + ($94<<3)|0);
       $97 = ((($96)) + 4|0);
       HEAP8[$97>>0] = 80;
       break L6;
      } else {
       $98 = $param;
       $99 = $98&255;
       $100 = $99 & 15;
       $101 = 96 | $100;
       $102 = $101&255;
       $103 = $position;
       $104 = $103&255;
       $105 = $2;
       $106 = (($105) + ($104<<3)|0);
       $107 = ((($106)) + 4|0);
       HEAP8[$107>>0] = $102;
       break L6;
      }
      break;
     }
     default: {
      label = 41;
      break L1;
     }
     }
    } while(0);
   } else {
    $205 = $24 & 16384;
    $206 = ($205|0)!=(0);
    $207 = $patdata;
    $208 = $207&65535;
    if (!($206)) {
     $246 = $208 & 4095;
     $247 = (_period_to_note($246)|0);
     $248 = $247&255;
     $249 = $position;
     $250 = $249&255;
     $251 = $2;
     $252 = (($251) + ($250<<3)|0);
     HEAP8[$252>>0] = $248;
     $253 = $inst;
     $254 = $position;
     $255 = $254&255;
     $256 = $2;
     $257 = (($256) + ($255<<3)|0);
     $258 = ((($257)) + 1|0);
     HEAP8[$258>>0] = $253;
     break;
    }
    $209 = $208 & 255;
    $210 = $209&65535;
    $delay = $210;
    $211 = $1;
    $212 = (_hio_read16b($211)|0);
    $patdata = $212;
    $213 = $patdata;
    $214 = $213&65535;
    $215 = ($214|0)==(0);
    if ($215) {
     $216 = $delay;
     $217 = $216&65535;
     $218 = ($217|0)==(0);
     if ($218) {
      break L1;
     }
    }
    $219 = $patdata;
    $220 = $219&65535;
    $221 = ($220|0)!=(0);
    if ($221) {
     $222 = $patdata;
     $223 = $222&65535;
     $224 = $223 & 4095;
     $225 = (_period_to_note($224)|0);
     $226 = $225&255;
     $227 = $position;
     $228 = $227&255;
     $229 = $2;
     $230 = (($229) + ($228<<3)|0);
     HEAP8[$230>>0] = $226;
     $231 = $inst;
     $232 = $position;
     $233 = $232&255;
     $234 = $2;
     $235 = (($234) + ($233<<3)|0);
     $236 = ((($235)) + 1|0);
     HEAP8[$236>>0] = $231;
    }
    $237 = $delay;
    $238 = $237&65535;
    $239 = $position;
    $240 = $239&255;
    $241 = (($240) + ($238))|0;
    $242 = $241&255;
    $position = $242;
    $243 = $position;
    $244 = $243&255;
    $245 = ($244|0)>=(64);
    if ($245) {
     break L1;
    }
   }
  } while(0);
  $259 = $1;
  $260 = (_hio_read16b($259)|0);
  $patdata = $260;
  $261 = $1;
  $262 = (_hio_eof($261)|0);
  $263 = ($262|0)!=(0);
  if ($263) {
   break;
  }
 }
 if ((label|0) == 41) {
  $0 = -1;
  $277 = $0;
  STACKTOP = sp;return ($277|0);
 }
 $264 = $position;
 $265 = $264&255;
 $266 = ($265|0)<(64);
 if ($266) {
  $267 = $position;
  $268 = $267&255;
  $269 = (($268) - 1)|0;
  $270 = $2;
  $271 = (($270) + ($269<<3)|0);
  $272 = ((($271)) + 5|0);
  HEAP8[$272>>0] = 13;
 }
 $273 = $1;
 $274 = $storepos;
 (_hio_seek($273,$274,0)|0);
 $275 = $position;
 $276 = $275&255;
 $0 = $276;
 $277 = $0;
 STACKTOP = sp;return ($277|0);
}
function _instrument_init($mod) {
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $1;
 $3 = ((($2)) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 140|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_calloc(764,$8)|0);
  $10 = $1;
  $11 = ((($10)) + 176|0);
  HEAP32[$11>>2] = $9;
  $12 = $1;
  $13 = ((($12)) + 176|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $0 = -1;
   $30 = $0;
   STACKTOP = sp;return ($30|0);
  }
 }
 $16 = $1;
 $17 = ((($16)) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 144|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_calloc(52,$22)|0);
  $24 = $1;
  $25 = ((($24)) + 180|0);
  HEAP32[$25>>2] = $23;
  $26 = $1;
  $27 = ((($26)) + 180|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $0 = -1;
   $30 = $0;
   STACKTOP = sp;return ($30|0);
  }
 }
 $0 = 0;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _subinstrument_alloc($mod,$i,$num) {
 $mod = $mod|0;
 $i = $i|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $i;
 $3 = $num;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $6 = $3;
 $7 = (_calloc(64,$6)|0);
 $8 = $2;
 $9 = $1;
 $10 = ((($9)) + 176|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*764)|0)|0);
 $13 = ((($12)) + 756|0);
 HEAP32[$13>>2] = $7;
 $14 = $2;
 $15 = $1;
 $16 = ((($15)) + 176|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($14*764)|0)|0);
 $19 = ((($18)) + 756|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pattern_init($mod) {
 $mod = $mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $1;
 $3 = ((($2)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_calloc(4,$4)|0);
 $6 = $1;
 $7 = ((($6)) + 172|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 172|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $12 = $1;
 $13 = ((($12)) + 128|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc(4,$14)|0);
 $16 = $1;
 $17 = ((($16)) + 168|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 $19 = ((($18)) + 168|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _pattern_alloc($mod,$num) {
 $mod = $mod|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $3 = $2;
 $4 = ($3|0)<(0);
 if (!($4)) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)>=($8|0);
  if (!($9)) {
   $10 = $2;
   $11 = $1;
   $12 = ((($11)) + 168|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    $17 = $1;
    $18 = ((($17)) + 136|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) - 1)|0;
    $21 = $20<<2;
    $22 = (8 + ($21))|0;
    $23 = (_calloc(1,$22)|0);
    $24 = $2;
    $25 = $1;
    $26 = ((($25)) + 168|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + ($24<<2)|0);
    HEAP32[$28>>2] = $23;
    $29 = $2;
    $30 = $1;
    $31 = ((($30)) + 168|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($29<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $0 = -1;
     $36 = $0;
     STACKTOP = sp;return ($36|0);
    } else {
     $0 = 0;
     $36 = $0;
     STACKTOP = sp;return ($36|0);
    }
   }
  }
 }
 $0 = -1;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _track_alloc($mod,$num,$rows) {
 $mod = $mod|0;
 $num = $num|0;
 $rows = $rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $3 = $rows;
 $4 = $2;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $2;
  $7 = $1;
  $8 = ((($7)) + 132|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)>=($9|0);
  if (!($10)) {
   $11 = $2;
   $12 = $1;
   $13 = ((($12)) + 172|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($11<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(0|0);
   $18 = $3;
   $19 = ($18|0)<=(0);
   $or$cond = $17 | $19;
   if (!($or$cond)) {
    $20 = $3;
    $21 = (($20) - 1)|0;
    $22 = $21<<3;
    $23 = (12 + ($22))|0;
    $24 = (_calloc($23,1)|0);
    $25 = $2;
    $26 = $1;
    $27 = ((($26)) + 172|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($25<<2)|0);
    HEAP32[$29>>2] = $24;
    $30 = $2;
    $31 = $1;
    $32 = ((($31)) + 172|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($30<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(0|0);
    if ($36) {
     $0 = -1;
     $44 = $0;
     STACKTOP = sp;return ($44|0);
    } else {
     $37 = $3;
     $38 = $2;
     $39 = $1;
     $40 = ((($39)) + 172|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + ($38<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$43>>2] = $37;
     $0 = 0;
     $44 = $0;
     STACKTOP = sp;return ($44|0);
    }
   }
  }
 }
 $0 = -1;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _tracks_in_pattern_alloc($mod,$num) {
 $mod = $mod|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $rows = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ((($4)) + 136|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)<($6|0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $2;
  $9 = $1;
  $10 = ((($9)) + 136|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = Math_imul($8, $11)|0;
  $13 = $i;
  $14 = (($12) + ($13))|0;
  $t = $14;
  $15 = $2;
  $16 = $1;
  $17 = ((($16)) + 168|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $rows = $21;
  $22 = $1;
  $23 = $t;
  $24 = $rows;
  $25 = (_track_alloc($22,$23,$24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   label = 4;
   break;
  }
  $27 = $t;
  $28 = $i;
  $29 = $2;
  $30 = $1;
  $31 = ((($30)) + 168|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($29<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = (($35) + ($28<<2)|0);
  HEAP32[$36>>2] = $27;
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _pattern_tracks_alloc($mod,$num,$rows) {
 $mod = $mod|0;
 $num = $num|0;
 $rows = $rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $mod;
 $2 = $num;
 $3 = $rows;
 $4 = $3;
 $5 = ($4|0)<(0);
 $6 = $3;
 $7 = ($6|0)>(256);
 $or$cond = $5 | $7;
 do {
  if ($or$cond) {
   $0 = -1;
  } else {
   $8 = $1;
   $9 = $2;
   $10 = (_pattern_alloc($8,$9)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    $0 = -1;
    break;
   }
   $12 = $3;
   $13 = $2;
   $14 = $1;
   $15 = ((($14)) + 168|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($13<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$18>>2] = $12;
   $19 = $1;
   $20 = $2;
   $21 = (_tracks_in_pattern_alloc($19,$20)|0);
   $22 = ($21|0)<(0);
   if ($22) {
    $0 = -1;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _realloc_samples($buf,$size,$new_size) {
 $buf = $buf|0;
 $size = $size|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $new_size;
 $4 = $1;
 $5 = $3;
 $6 = ($5*52)|0;
 $7 = (_realloc($4,$6)|0);
 $1 = $7;
 $8 = $1;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $10 = $3;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)>($12|0);
 if ($13) {
  $14 = $1;
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + (($16*52)|0)|0);
  $18 = $3;
  $19 = $2;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) - ($20))|0;
  $22 = ($21*52)|0;
  _memset(($17|0),0,($22|0))|0;
 }
 $23 = $3;
 $24 = $2;
 HEAP32[$24>>2] = $23;
 $25 = $1;
 $0 = $25;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _instrument_name($mod,$i,$r,$n) {
 $mod = $mod|0;
 $i = $i|0;
 $r = $r|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mod;
 $1 = $i;
 $2 = $r;
 $3 = $n;
 $4 = $3;
 $5 = ($4|0)<(0);
 if ($5) {
  $3 = 0;
 } else {
  $6 = $3;
  $7 = ($6|0)>(31);
  if ($7) {
   $3 = 31;
  }
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 176|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*764)|0)|0);
 $13 = $2;
 $14 = $3;
 $15 = (_copy_adjust($12,$13,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _copy_adjust($s,$r,$n) {
 $s = $s|0;
 $r = $r|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $r;
 $2 = $n;
 $3 = $0;
 $4 = $2;
 $5 = (($4) + 1)|0;
 _memset(($3|0),0,($5|0))|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 (_strncpy(($6|0),($7|0),($8|0))|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $2;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $0;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = (_isprint($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $i;
   $26 = $0;
   $27 = (($26) + ($25)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)>(127);
   if ($30) {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $31 = $i;
   $32 = $0;
   $33 = (($32) + ($31)|0);
   HEAP8[$33>>0] = 46;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 while(1) {
  $36 = $0;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $0;
   $41 = (_strlen(($40|0))|0);
   $42 = (($41) - 1)|0;
   $43 = $0;
   $44 = (($43) + ($42)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45 << 24 >> 24;
   $47 = ($46|0)==(32);
   $53 = $47;
  } else {
   $53 = 0;
  }
  $48 = $0;
  if (!($53)) {
   break;
  }
  $49 = (_strlen(($48|0))|0);
  $50 = (($49) - 1)|0;
  $51 = $0;
  $52 = (($51) + ($50)|0);
  HEAP8[$52>>0] = 0;
 }
 STACKTOP = sp;return ($48|0);
}
function _read_title($f,$t,$s) {
 $f = $f|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $f;
 $1 = $t;
 $2 = $s;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $2;
 $6 = ($5|0)>=(64);
 if ($6) {
  $2 = 63;
 }
 $7 = $1;
 $8 = $2;
 $9 = (($8) + 1)|0;
 _memset(($7|0),0,($9|0))|0;
 $10 = $2;
 $11 = $0;
 (_hio_read($buf,1,$10,$11)|0);
 $12 = $2;
 $13 = (($buf) + ($12)|0);
 HEAP8[$13>>0] = 0;
 $14 = $1;
 $15 = $2;
 (_copy_adjust($14,$buf,$15)|0);
 STACKTOP = sp;return;
}
function _test_name($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $n;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)>(127);
  if ($11) {
   label = 4;
   break;
  }
  $12 = $i;
  $13 = $1;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = $i;
   $19 = $1;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)<(32);
   if ($23) {
    $24 = $i;
    $25 = $1;
    $26 = (($25) + ($24)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = ($28|0)!=(8);
    if ($29) {
     label = 8;
     break;
    }
   }
  }
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _decode_noisetracker_event($event,$mod_event) {
 $event = $event|0;
 $mod_event = $mod_event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fxt = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $mod_event;
 $2 = $0;
 ;HEAP8[$2>>0]=0|0;HEAP8[$2+1>>0]=0|0;HEAP8[$2+2>>0]=0|0;HEAP8[$2+3>>0]=0|0;HEAP8[$2+4>>0]=0|0;HEAP8[$2+5>>0]=0|0;HEAP8[$2+6>>0]=0|0;HEAP8[$2+7>>0]=0|0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 15;
 $7 = $6 << 8;
 $8 = $1;
 $9 = ((($8)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($7) + ($11))|0;
 $13 = (_period_to_note($12)|0);
 $14 = $13&255;
 $15 = $0;
 HEAP8[$15>>0] = $14;
 $16 = $1;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 & 240;
 $20 = $19 >> 4;
 $21 = $20 << 4;
 $22 = $1;
 $23 = ((($22)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 240;
 $27 = $26 >> 4;
 $28 = $21 | $27;
 $29 = $28&255;
 $30 = $0;
 $31 = ((($30)) + 1|0);
 HEAP8[$31>>0] = $29;
 $32 = $1;
 $33 = ((($32)) + 2|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 & 15;
 $fxt = $36;
 $37 = $fxt;
 $38 = ($37|0)<=(6);
 if (!($38)) {
  $39 = $fxt;
  $40 = ($39|0)>=(10);
  $41 = $fxt;
  $42 = ($41|0)!=(14);
  $or$cond = $40 & $42;
  if (!($or$cond)) {
   $52 = $0;
   _disable_continue_fx($52);
   STACKTOP = sp;return;
  }
 }
 $43 = $fxt;
 $44 = $43&255;
 $45 = $0;
 $46 = ((($45)) + 3|0);
 HEAP8[$46>>0] = $44;
 $47 = $1;
 $48 = ((($47)) + 3|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $0;
 $51 = ((($50)) + 4|0);
 HEAP8[$51>>0] = $49;
 $52 = $0;
 _disable_continue_fx($52);
 STACKTOP = sp;return;
}
function _disable_continue_fx($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(0);
 $6 = $0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 L1: do {
  if ($5) {
   switch ($9|0) {
   case 10: case 2: case 1:  {
    $14 = $0;
    $15 = ((($14)) + 3|0);
    HEAP8[$15>>0] = 0;
    break L1;
    break;
   }
   case 5:  {
    $10 = $0;
    $11 = ((($10)) + 3|0);
    HEAP8[$11>>0] = 3;
    break L1;
    break;
   }
   case 6:  {
    $12 = $0;
    $13 = ((($12)) + 3|0);
    HEAP8[$13>>0] = 4;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  } else {
   $16 = ($9|0)==(14);
   if ($16) {
    $17 = $0;
    $18 = ((($17)) + 4|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = ($20|0)==(160);
    if (!($21)) {
     $22 = $0;
     $23 = ((($22)) + 4|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = ($25|0)==(176);
     if (!($26)) {
      break;
     }
    }
    $27 = $0;
    $28 = ((($27)) + 4|0);
    HEAP8[$28>>0] = 0;
    $29 = $0;
    $30 = ((($29)) + 3|0);
    HEAP8[$30>>0] = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _decode_protracker_event($event,$mod_event) {
 $event = $event|0;
 $mod_event = $mod_event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $mod_event;
 $2 = $1;
 $3 = ((($2)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 15;
 $fxt = $6;
 $7 = $0;
 ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;HEAP8[$7+5>>0]=0|0;HEAP8[$7+6>>0]=0|0;HEAP8[$7+7>>0]=0|0;
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 15;
 $12 = $11 << 8;
 $13 = $1;
 $14 = ((($13)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($12) + ($16))|0;
 $18 = (_period_to_note($17)|0);
 $19 = $18&255;
 $20 = $0;
 HEAP8[$20>>0] = $19;
 $21 = $1;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 240;
 $25 = $24 >> 4;
 $26 = $25 << 4;
 $27 = $1;
 $28 = ((($27)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 240;
 $32 = $31 >> 4;
 $33 = $26 | $32;
 $34 = $33&255;
 $35 = $0;
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = $34;
 $37 = $fxt;
 $38 = ($37|0)!=(8);
 if (!($38)) {
  $48 = $0;
  _disable_continue_fx($48);
  STACKTOP = sp;return;
 }
 $39 = $fxt;
 $40 = $39&255;
 $41 = $0;
 $42 = ((($41)) + 3|0);
 HEAP8[$42>>0] = $40;
 $43 = $1;
 $44 = ((($43)) + 3|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $0;
 $47 = ((($46)) + 4|0);
 HEAP8[$47>>0] = $45;
 $48 = $0;
 _disable_continue_fx($48);
 STACKTOP = sp;return;
}
function _check_filename_case($dir,$name,$new_name,$size) {
 $dir = $dir|0;
 $name = $name|0;
 $new_name = $new_name|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $dirfd = 0, $found = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $dir;
 $2 = $name;
 $3 = $new_name;
 $4 = $size;
 $found = 0;
 $5 = $1;
 $6 = (_opendir(($5|0))|0);
 $dirfd = $6;
 $7 = $dirfd;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 while(1) {
  $9 = $dirfd;
  $10 = (_readdir(($9|0))|0);
  $d = $10;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $d;
  $13 = ((($12)) + 11|0);
  $14 = $2;
  $15 = (_strcasecmp($13,$14)|0);
  $16 = ($15|0)!=(0);
  if (!($16)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $found = 1;
 }
 $17 = $found;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $3;
  $20 = $d;
  $21 = ((($20)) + 11|0);
  $22 = $4;
  (_strncpy(($19|0),($21|0),($22|0))|0);
 }
 $23 = $dirfd;
 (_closedir(($23|0))|0);
 $24 = $found;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _get_instrument_path($m,$path,$size) {
 $m = $m|0;
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $path;
 $2 = $size;
 $3 = $0;
 $4 = ((($3)) + 7576|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = $0;
  $9 = ((($8)) + 7576|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  (_strncpy(($7|0),($10|0),($11|0))|0);
  STACKTOP = sp;return;
 }
 $12 = (_getenv((56|0))|0);
 $13 = ($12|0)!=(0|0);
 $14 = $1;
 if ($13) {
  $15 = (_getenv((56|0))|0);
  $16 = $2;
  (_strncpy(($14|0),($15|0),($16|0))|0);
  STACKTOP = sp;return;
 } else {
  $17 = $2;
  (_strncpy(($14|0),(25872|0),($17|0))|0);
  STACKTOP = sp;return;
 }
}
function _set_type($m,$fmt,$varargs) {
 $m = $m|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 $0 = $m;
 $1 = $fmt;
 HEAP32[$ap>>2] = $varargs;
 $2 = $0;
 $3 = ((($2)) + 64|0);
 $4 = $1;
 (_vsnprintf($3,64,$4,$ap)|0);
 STACKTOP = sp;return;
}
function _iff_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_malloc(16)|0);
 $data = $1;
 $2 = $data;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $4 = $data;
  $5 = $data;
  HEAP32[$5>>2] = $4;
  $6 = $data;
  $7 = $data;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = $6;
  $9 = $data;
  $10 = ((($9)) + 8|0);
  HEAP32[$10>>2] = 4;
  $11 = $data;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = $data;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _iff_load($opaque,$m,$f,$parm) {
 $opaque = $opaque|0;
 $m = $m|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $m;
 $3 = $f;
 $4 = $parm;
 while(1) {
  $5 = $3;
  $6 = (_hio_eof($5)|0);
  $7 = ($6|0)!=(0);
  $8 = $7 ^ 1;
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = (_iff_chunk($9,$10,$11,$12)|0);
  $ret = $13;
  $14 = $ret;
  $15 = ($14|0)>(0);
  if ($15) {
   label = 6;
   break;
  }
  $16 = $ret;
  $17 = ($16|0)<(0);
  if ($17) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _iff_register($opaque,$id,$loader) {
 $opaque = $opaque|0;
 $id = $id|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $f = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $id;
 $3 = $loader;
 $4 = $1;
 $data = $4;
 $5 = (_malloc(20)|0);
 $f = $5;
 $6 = $f;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $8 = $f;
  $9 = $2;
  (_strncpy(($8|0),($9|0),5)|0);
  $10 = $3;
  $11 = $f;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = $f;
  $14 = ((($13)) + 12|0);
  $15 = $data;
  _list_add_tail($14,$15);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _iff_release($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $data = $1;
 $2 = $data;
 $3 = HEAP32[$2>>2]|0;
 $tmp = $3;
 while(1) {
  $4 = $tmp;
  $5 = $data;
  $6 = ($4|0)!=($5|0);
  if (!($6)) {
   break;
  }
  $7 = $tmp;
  $8 = (($7) + (((0 - ((((0) + 12|0))))|0))|0);
  $i = $8;
  $9 = $i;
  $10 = ((($9)) + 12|0);
  _list_del($10);
  $11 = $tmp;
  $12 = HEAP32[$11>>2]|0;
  $tmp = $12;
  $13 = $i;
  _free($13);
 }
 $14 = $data;
 _free($14);
 STACKTOP = sp;return;
}
function _iff_process($opaque,$m,$id,$size,$f,$parm) {
 $opaque = $opaque|0;
 $m = $m|0;
 $id = $id|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $data = 0, $i = 0, $pos = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $m;
 $3 = $id;
 $4 = $size;
 $5 = $f;
 $6 = $parm;
 $7 = $1;
 $data = $7;
 $8 = $5;
 $9 = (_hio_tell($8)|0);
 $pos = $9;
 $10 = $data;
 $11 = HEAP32[$10>>2]|0;
 $tmp = $11;
 while(1) {
  $12 = $tmp;
  $13 = $data;
  $14 = ($12|0)!=($13|0);
  if (!($14)) {
   break;
  }
  $15 = $tmp;
  $16 = (($15) + (((0 - ((((0) + 12|0))))|0))|0);
  $i = $16;
  $17 = $3;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $3;
   $20 = $i;
   $21 = $data;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_strncmp($19,$20,$23)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    label = 5;
    break;
   }
  }
  $35 = $tmp;
  $36 = HEAP32[$35>>2]|0;
  $tmp = $36;
 }
 if ((label|0) == 5) {
  $26 = $i;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $2;
  $30 = $4;
  $31 = $5;
  $32 = $6;
  $33 = (FUNCTION_TABLE_iiiii[$28 & 511]($29,$30,$31,$32)|0);
  $34 = ($33|0)<(0);
  if ($34) {
   $0 = -1;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $37 = $5;
 $38 = $pos;
 $39 = $4;
 $40 = (($38) + ($39))|0;
 (_hio_seek($37,$40,0)|0);
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _iff_id_size($opaque,$n) {
 $opaque = $opaque|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $n;
 $2 = $0;
 $data = $2;
 $3 = $1;
 $4 = $data;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function _iff_set_quirk($opaque,$i) {
 $opaque = $opaque|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $i;
 $2 = $0;
 $data = $2;
 $3 = $1;
 $4 = $data;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $3;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _iff_chunk($opaque,$m,$f,$parm) {
 $opaque = $opaque|0;
 $m = $m|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $data = 0, $id = 0, $size = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 28|0;
 $1 = $opaque;
 $2 = $m;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $data = $5;
 dest=$id; stop=dest+17|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $data;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = (_hio_read($id,1,$8,$9)|0);
 $11 = $data;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)!=($13|0);
 if ($14) {
  $0 = 1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 $15 = $data;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 16;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = (_strncmp($id,80,4)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = $3;
   (_hio_read32b($22)|0);
   $23 = $3;
   (_hio_read32b($23)|0);
   $24 = $data;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $3;
   (_hio_read($id,1,$26,$27)|0);
  }
 }
 $28 = $data;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 1;
 $32 = ($31|0)!=(0);
 $33 = $3;
 if ($32) {
  $34 = (_hio_read32l($33)|0);
  $36 = $34;
 } else {
  $35 = (_hio_read32b($33)|0);
  $36 = $35;
 }
 $size = $36;
 $37 = $data;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 & 4;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $size;
  $43 = (($42) + 1)|0;
  $44 = $43 & -2;
  $size = $44;
 }
 $45 = $data;
 $46 = ((($45)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 8;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $size;
  $51 = (($50) + 3)|0;
  $52 = $51 & -4;
  $size = $52;
 }
 $53 = $data;
 $54 = ((($53)) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 & 2;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $data;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 4)|0;
  $62 = $size;
  $63 = (($62) - ($61))|0;
  $size = $63;
 }
 $64 = $size;
 $65 = ($64|0)<(0);
 if ($65) {
  $0 = -1;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 } else {
  $66 = $1;
  $67 = $2;
  $68 = $size;
  $69 = $3;
  $70 = $4;
  $71 = (_iff_process($66,$67,$id,$68,$69,$70)|0);
  $0 = $71;
  $72 = $0;
  STACKTOP = sp;return ($72|0);
 }
 return (0)|0;
}
function _list_add_tail($_new,$head) {
 $_new = $_new|0;
 $head = $head|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_new;
 $1 = $head;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 ___list_add($2,$5,$6);
 STACKTOP = sp;return;
}
function _list_del($entry) {
 $entry = $entry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $entry;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 ___list_del($3,$5);
 STACKTOP = sp;return;
}
function ___list_del($prev,$next) {
 $prev = $prev|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $prev;
 $1 = $next;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = $0;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function ___list_add($_new,$prev,$next) {
 $_new = $_new|0;
 $prev = $prev|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_new;
 $1 = $prev;
 $2 = $next;
 $3 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = $2;
 $7 = $0;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = $1;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _itsex_decompress8($src,$dst,$len,$it215) {
 $src = $src|0;
 $dst = $dst|0;
 $len = $len|0;
 $it215 = $it215|0;
 var $$sink = 0, $$sink3 = 0, $$sink4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bitnum = 0, $bits = 0, $block_count = 0, $c = 0, $d = 0, $i = 0;
 var $i1 = 0, $j = 0, $j2 = 0, $left = 0, $pos = 0, $shift = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp + 20|0;
 $bitnum = sp + 16|0;
 $1 = $src;
 $2 = $dst;
 $3 = $len;
 $4 = $it215;
 $block_count = 0;
 HEAP32[$bitbuf>>2] = 0;
 HEAP32[$bitnum>>2] = 0;
 $left = 0;
 $temp = 0;
 $temp2 = 0;
 L1: while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   label = 31;
   break;
  }
  $7 = $block_count;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $block_count = 32768;
   $9 = $1;
   (_hio_read16l($9)|0);
   $left = 9;
   $temp2 = 0;
   $temp = 0;
   HEAP32[$bitnum>>2] = 0;
   HEAP32[$bitbuf>>2] = 0;
  }
  $10 = $block_count;
  $d = $10;
  $11 = $d;
  $12 = $3;
  $13 = ($11>>>0)>($12>>>0);
  if ($13) {
   $14 = $3;
   $d = $14;
  }
  $pos = 0;
  while(1) {
   $15 = $1;
   $16 = $left;
   $17 = $16&255;
   $18 = (_read_bits($15,$bitbuf,$bitnum,$17)|0);
   $19 = $18&65535;
   $bits = $19;
   $20 = $1;
   $21 = (_hio_eof($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    label = 9;
    break L1;
   }
   $23 = $left;
   $24 = $23&255;
   $25 = ($24|0)<(7);
   $26 = $left;
   $27 = $26&255;
   do {
    if ($25) {
     $28 = (($27) - 1)|0;
     $29 = 1 << $28;
     $i = $29;
     $30 = $bits;
     $31 = $30&65535;
     $32 = $31 & 65535;
     $j = $32;
     $33 = $i;
     $34 = $j;
     $35 = ($33|0)!=($34|0);
     if ($35) {
      label = 25;
     } else {
      $36 = $1;
      $37 = (_read_bits($36,$bitbuf,$bitnum,3)|0);
      $38 = (($37) + 1)|0;
      $39 = $38 & 255;
      $40 = $39&65535;
      $bits = $40;
      $41 = $1;
      $42 = (_hio_eof($41)|0);
      $43 = ($42|0)!=(0);
      if ($43) {
       label = 13;
       break L1;
      }
      $44 = $bits;
      $45 = $44&255;
      $46 = $45&255;
      $47 = $left;
      $48 = $47&255;
      $49 = ($46|0)<($48|0);
      $50 = $bits;
      if ($49) {
       $51 = $50&255;
       $$sink = $51;
      } else {
       $52 = $50&65535;
       $53 = (($52) + 1)|0;
       $54 = $53 & 255;
       $55 = $54&255;
       $$sink = $55;
      }
      $56 = $$sink&255;
      $57 = $56&255;
      $left = $57;
     }
    } else {
     $58 = ($27|0)<(9);
     $59 = $left;
     $60 = $59&255;
     if ($58) {
      $61 = (9 - ($60))|0;
      $62 = 255 >> $61;
      $63 = (($62) + 4)|0;
      $64 = $63&65535;
      $i1 = $64;
      $65 = $i1;
      $66 = $65&65535;
      $67 = (($66) - 8)|0;
      $68 = $67&65535;
      $j2 = $68;
      $69 = $bits;
      $70 = $69&65535;
      $71 = $j2;
      $72 = $71&65535;
      $73 = ($70|0)<=($72|0);
      if ($73) {
       label = 25;
       break;
      }
      $74 = $bits;
      $75 = $74&65535;
      $76 = $i1;
      $77 = $76&65535;
      $78 = ($75|0)>($77|0);
      if ($78) {
       label = 25;
       break;
      }
      $79 = $j2;
      $80 = $79&65535;
      $81 = $bits;
      $82 = $81&65535;
      $83 = (($82) - ($80))|0;
      $84 = $83&65535;
      $bits = $84;
      $85 = $bits;
      $86 = $85&65535;
      $87 = $86 & 255;
      $88 = $87&255;
      $89 = $88&255;
      $90 = $left;
      $91 = $90&255;
      $92 = ($89|0)<($91|0);
      $93 = $bits;
      $94 = $93&65535;
      $95 = (($94) + 1)|0;
      $$sink3 = $92 ? $94 : $95;
      $96 = $$sink3 & 255;
      $97 = $96&255;
      $98 = $97&255;
      $99 = $98&255;
      $left = $99;
      break;
     } else {
      $100 = ($60|0)>=(10);
      if ($100) {
       label = 28;
       break;
      }
      $101 = $bits;
      $102 = $101&65535;
      $103 = ($102|0)>=(256);
      if (!($103)) {
       label = 25;
       break;
      }
      $104 = $bits;
      $105 = $104&65535;
      $106 = (($105) + 1)|0;
      $107 = $106&255;
      $108 = $107&255;
      $109 = $108 & 255;
      $110 = $109&255;
      $left = $110;
      break;
     }
    }
   } while(0);
   if ((label|0) == 25) {
    label = 0;
    $111 = $left;
    $112 = $111&255;
    $113 = ($112|0)<(8);
    if ($113) {
     $114 = $left;
     $115 = $114&255;
     $116 = (8 - ($115))|0;
     $117 = $116&255;
     $shift = $117;
     $118 = $bits;
     $119 = $118&65535;
     $120 = $shift;
     $121 = $120&255;
     $122 = $119 << $121;
     $123 = $122&255;
     $c = $123;
     $124 = $shift;
     $125 = $124&255;
     $126 = $c;
     $127 = $126 << 24 >> 24;
     $128 = $127 >> $125;
     $129 = $128&255;
     $c = $129;
     $130 = $c;
     $131 = $130 << 24 >> 24;
     $bits = $131;
    }
    $132 = $temp;
    $133 = $132&255;
    $134 = $bits;
    $135 = $134&65535;
    $136 = (($135) + ($133))|0;
    $137 = $136&65535;
    $bits = $137;
    $138 = $bits;
    $139 = $138&255;
    $temp = $139;
    $140 = $temp;
    $141 = $140&255;
    $142 = $temp2;
    $143 = $142&255;
    $144 = (($143) + ($141))|0;
    $145 = $144&255;
    $temp2 = $145;
    $146 = $4;
    $147 = ($146|0)!=(0);
    $148 = $temp2;
    $149 = $temp;
    $$sink4 = $147 ? $148 : $149;
    $150 = $$sink4&255;
    $151 = $150&255;
    $152 = $pos;
    $153 = $2;
    $154 = (($153) + ($152)|0);
    HEAP8[$154>>0] = $151;
    label = 28;
   }
   if ((label|0) == 28) {
    label = 0;
    $155 = $pos;
    $156 = (($155) + 1)|0;
    $pos = $156;
   }
   $157 = $pos;
   $158 = $d;
   $159 = ($157>>>0)<($158>>>0);
   if (!($159)) {
    break;
   }
  }
  $160 = $d;
  $161 = $block_count;
  $162 = (($161) - ($160))|0;
  $block_count = $162;
  $163 = $d;
  $164 = $3;
  $165 = (($164) - ($163))|0;
  $3 = $165;
  $166 = $d;
  $167 = $2;
  $168 = (($167) + ($166)|0);
  $2 = $168;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 else if ((label|0) == 31) {
  $0 = 0;
  $169 = $0;
  STACKTOP = sp;return ($169|0);
 }
 return (0)|0;
}
function _itsex_decompress16($src,$dst,$len,$it215) {
 $src = $src|0;
 $dst = $dst|0;
 $len = $len|0;
 $it215 = $it215|0;
 var $$old = 0, $$old6 = 0, $$sink = 0, $$sink4 = 0, $$sink5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bitnum = 0, $bits = 0, $block_count = 0;
 var $c = 0, $d = 0, $i = 0, $i1 = 0, $j = 0, $j2 = 0, $left = 0, $or$cond = 0, $pos = 0, $shift = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp + 32|0;
 $bitnum = sp + 28|0;
 $1 = $src;
 $2 = $dst;
 $3 = $len;
 $4 = $it215;
 $block_count = 0;
 HEAP32[$bitbuf>>2] = 0;
 HEAP32[$bitnum>>2] = 0;
 $left = 0;
 $temp = 0;
 $temp2 = 0;
 $$old = $3;
 $$old6 = ($$old|0)!=(0);
 L1: do {
  if ($$old6) {
   L2: while(1) {
    $5 = $block_count;
    $6 = ($5|0)!=(0);
    if (!($6)) {
     $block_count = 16384;
     $7 = $1;
     (_hio_read16l($7)|0);
     $left = 17;
     $temp2 = 0;
     $temp = 0;
     HEAP32[$bitnum>>2] = 0;
     HEAP32[$bitbuf>>2] = 0;
    }
    $8 = $block_count;
    $d = $8;
    $9 = $d;
    $10 = $3;
    $11 = ($9>>>0)>($10>>>0);
    if ($11) {
     $12 = $3;
     $d = $12;
    }
    $pos = 0;
    while(1) {
     $13 = $1;
     $14 = $left;
     $15 = $14&255;
     $16 = (_read_bits($13,$bitbuf,$bitnum,$15)|0);
     $bits = $16;
     $17 = $1;
     $18 = (_hio_eof($17)|0);
     $19 = ($18|0)!=(0);
     if ($19) {
      label = 8;
      break L2;
     }
     $20 = $left;
     $21 = $20&255;
     $22 = ($21|0)<(7);
     $23 = $left;
     $24 = $23&255;
     do {
      if ($22) {
       $25 = (($24) - 1)|0;
       $26 = 1 << $25;
       $i = $26;
       $27 = $bits;
       $j = $27;
       $28 = $i;
       $29 = $j;
       $30 = ($28|0)!=($29|0);
       if ($30) {
        label = 21;
       } else {
        $31 = $1;
        $32 = (_read_bits($31,$bitbuf,$bitnum,4)|0);
        $33 = (($32) + 1)|0;
        $bits = $33;
        $34 = $1;
        $35 = (_hio_eof($34)|0);
        $36 = ($35|0)!=(0);
        if ($36) {
         label = 12;
         break L2;
        }
        $37 = $bits;
        $38 = $37 & 255;
        $39 = $38&255;
        $40 = $39&255;
        $41 = $left;
        $42 = $41&255;
        $43 = ($40|0)<($42|0);
        $44 = $bits;
        $45 = (($44) + 1)|0;
        $$sink = $43 ? $44 : $45;
        $46 = $$sink & 255;
        $47 = $46&255;
        $48 = $47&255;
        $49 = $48&255;
        $left = $49;
       }
      } else {
       $50 = ($24|0)<(17);
       $51 = $left;
       $52 = $51&255;
       if ($50) {
        $53 = (17 - ($52))|0;
        $54 = 65535 >> $53;
        $55 = (($54) + 8)|0;
        $i1 = $55;
        $56 = $i1;
        $57 = (($56) - 16)|0;
        $58 = $57 & 65535;
        $j2 = $58;
        $59 = $bits;
        $60 = $j2;
        $61 = ($59>>>0)<=($60>>>0);
        if ($61) {
         label = 21;
         break;
        }
        $62 = $bits;
        $63 = $i1;
        $64 = $63 & 65535;
        $65 = ($62>>>0)>($64>>>0);
        if ($65) {
         label = 21;
         break;
        }
        $66 = $j2;
        $67 = $bits;
        $68 = (($67) - ($66))|0;
        $bits = $68;
        $69 = $bits;
        $70 = $69 & 255;
        $71 = $70&255;
        $72 = $71&255;
        $73 = $left;
        $74 = $73&255;
        $75 = ($72|0)<($74|0);
        $76 = $bits;
        $77 = (($76) + 1)|0;
        $$sink4 = $75 ? $76 : $77;
        $78 = $$sink4 & 255;
        $79 = $78&255;
        $80 = $79&255;
        $81 = $80&255;
        $left = $81;
        break;
       } else {
        $82 = ($52|0)>=(18);
        if ($82) {
         label = 24;
         break;
        }
        $83 = $bits;
        $84 = ($83>>>0)>=(65536);
        if (!($84)) {
         label = 21;
         break;
        }
        $85 = $bits;
        $86 = (($85) + 1)|0;
        $87 = $86&255;
        $88 = $87&255;
        $89 = $88 & 255;
        $90 = $89&255;
        $left = $90;
        break;
       }
      }
     } while(0);
     if ((label|0) == 21) {
      label = 0;
      $91 = $left;
      $92 = $91&255;
      $93 = ($92|0)<(16);
      if ($93) {
       $94 = $left;
       $95 = $94&255;
       $96 = (16 - ($95))|0;
       $97 = $96&255;
       $shift = $97;
       $98 = $bits;
       $99 = $shift;
       $100 = $99&255;
       $101 = $98 << $100;
       $102 = $101&65535;
       $c = $102;
       $103 = $shift;
       $104 = $103&255;
       $105 = $c;
       $106 = $105 << 16 >> 16;
       $107 = $106 >> $104;
       $108 = $107&65535;
       $c = $108;
       $109 = $c;
       $110 = $109 << 16 >> 16;
       $bits = $110;
      }
      $111 = $temp;
      $112 = $111 << 16 >> 16;
      $113 = $bits;
      $114 = (($113) + ($112))|0;
      $bits = $114;
      $115 = $bits;
      $116 = $115&65535;
      $temp = $116;
      $117 = $temp;
      $118 = $117 << 16 >> 16;
      $119 = $temp2;
      $120 = $119 << 16 >> 16;
      $121 = (($120) + ($118))|0;
      $122 = $121&65535;
      $temp2 = $122;
      $123 = $4;
      $124 = ($123|0)!=(0);
      $125 = $temp2;
      $126 = $temp;
      $$sink5 = $124 ? $125 : $126;
      $127 = $$sink5 << 16 >> 16;
      $128 = $127&65535;
      $129 = $pos;
      $130 = $2;
      $131 = (($130) + ($129<<1)|0);
      HEAP16[$131>>1] = $128;
      label = 24;
     }
     if ((label|0) == 24) {
      label = 0;
      $132 = $pos;
      $133 = (($132) + 1)|0;
      $pos = $133;
     }
     $134 = $pos;
     $135 = $d;
     $136 = ($134>>>0)<($135>>>0);
     if (!($136)) {
      break;
     }
    }
    $137 = $d;
    $138 = $block_count;
    $139 = (($138) - ($137))|0;
    $block_count = $139;
    $140 = $d;
    $141 = $3;
    $142 = (($141) - ($140))|0;
    $3 = $142;
    $143 = $d;
    $144 = $2;
    $145 = (($144) + ($143<<1)|0);
    $2 = $145;
    $146 = $3;
    $147 = ($146|0)>(0);
    $148 = $3;
    $149 = ($148|0)!=(0);
    $or$cond = $147 & $149;
    if (!($or$cond)) {
     break L1;
    }
   }
   if ((label|0) == 8) {
    $0 = -1;
    $150 = $0;
    STACKTOP = sp;return ($150|0);
   }
   else if ((label|0) == 12) {
    $0 = -1;
    $150 = $0;
    STACKTOP = sp;return ($150|0);
   }
  }
 } while(0);
 $0 = 0;
 $150 = $0;
 STACKTOP = sp;return ($150|0);
}
function _read_bits($ibuf,$bitbuf,$bitnum,$n) {
 $ibuf = $ibuf|0;
 $bitbuf = $bitbuf|0;
 $bitnum = $bitnum|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bbuf = 0;
 var $bnum = 0, $i = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ibuf;
 $1 = $bitbuf;
 $2 = $bitnum;
 $3 = $n;
 $retval = 0;
 $4 = $3;
 $i = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $bnum = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $bbuf = $8;
 $9 = $3;
 $10 = ($9|0)>(0);
 if (!($10)) {
  $35 = $retval;
  $36 = $i;
  $37 = (32 - ($36))|0;
  $38 = $35 >>> $37;
  STACKTOP = sp;return ($38|0);
 }
 while(1) {
  $11 = $bnum;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = (_hio_read8($13)|0);
   $15 = $14&255;
   $bbuf = $15;
   $bnum = 8;
  }
  $16 = $retval;
  $17 = $16 >>> 1;
  $retval = $17;
  $18 = $bbuf;
  $19 = $18 << 31;
  $20 = $retval;
  $21 = $20 | $19;
  $retval = $21;
  $22 = $bbuf;
  $23 = $22 >> 1;
  $bbuf = $23;
  $24 = $bnum;
  $25 = (($24) + -1)|0;
  $bnum = $25;
  $26 = $i;
  $27 = (($26) + -1)|0;
  $i = $27;
  $28 = $i;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
 }
 $30 = $3;
 $i = $30;
 $31 = $bnum;
 $32 = $2;
 HEAP32[$32>>2] = $31;
 $33 = $bbuf;
 $34 = $1;
 HEAP32[$34>>2] = $33;
 $35 = $retval;
 $36 = $i;
 $37 = (32 - ($36))|0;
 $38 = $35 >>> $37;
 STACKTOP = sp;return ($38|0);
}
function _load_sample($m,$f,$flags,$xxs,$buffer) {
 $m = $m|0;
 $f = $f|0;
 $flags = $flags|0;
 $xxs = $xxs|0;
 $buffer = $buffer|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytelen = 0, $extralen = 0, $i = 0, $len = 0, $lpe = 0, $lpe1 = 0, $lps = 0, $lps2 = 0, $size = 0, $table = 0, $unroll_extralen = 0, $x = 0, $x2 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $table = sp + 72|0;
 $1 = $m;
 $2 = $f;
 $3 = $flags;
 $4 = $xxs;
 $5 = $buffer;
 $6 = $3;
 $7 = $6 & 4096;
 $8 = ($7|0)!=(0);
 if ($8) {
  $size = 11;
  $9 = $3;
  $10 = $9 & 8192;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $5;
   _convert_hsc_to_sbi($12);
  }
  $13 = (_malloc(15)|0);
  $14 = $4;
  $15 = ((($14)) + 48|0);
  HEAP32[$15>>2] = $13;
  $16 = $4;
  $17 = ((($16)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $0 = -1;
   $465 = $0;
   STACKTOP = sp;return ($465|0);
  } else {
   $20 = $4;
   $21 = ((($20)) + 48|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = $4;
   $24 = ((($23)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 4|0);
   HEAP32[$24>>2] = $26;
   $27 = $4;
   $28 = ((($27)) + 48|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $5;
   dest=$29; src=$30; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $31 = $4;
   $32 = ((($31)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 | 32768;
   HEAP32[$32>>2] = $34;
   $35 = $4;
   $36 = ((($35)) + 32|0);
   HEAP32[$36>>2] = 11;
   $0 = 0;
   $465 = $0;
   STACKTOP = sp;return ($465|0);
  }
 }
 $37 = $4;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)<=(0);
 if ($40) {
  $0 = 0;
  $465 = $0;
  STACKTOP = sp;return ($465|0);
 }
 $41 = $4;
 $42 = ((($41)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)>(268435456);
 do {
  if (!($44)) {
   $45 = $1;
   $46 = ($45|0)!=(0|0);
   if ($46) {
    $47 = $1;
    $48 = ((($47)) + 1292|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = ($50|0)!=(0);
    if ($51) {
     break;
    }
   }
   $60 = $4;
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)<(0);
   if ($63) {
    $64 = $4;
    $65 = ((($64)) + 36|0);
    HEAP32[$65>>2] = 0;
   }
   $66 = $4;
   $67 = ((($66)) + 40|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $4;
   $70 = ((($69)) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($68|0)>($71|0);
   if ($72) {
    $73 = $4;
    $74 = ((($73)) + 32|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $4;
    $77 = ((($76)) + 40|0);
    HEAP32[$77>>2] = $75;
   }
   $78 = $4;
   $79 = ((($78)) + 36|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $4;
   $82 = ((($81)) + 32|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($80|0)>=($83|0);
   if ($84) {
    label = 21;
   } else {
    $85 = $4;
    $86 = ((($85)) + 36|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $4;
    $89 = ((($88)) + 40|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($87|0)>=($90|0);
    if ($91) {
     label = 21;
    }
   }
   if ((label|0) == 21) {
    $92 = $4;
    $93 = ((($92)) + 40|0);
    HEAP32[$93>>2] = 0;
    $94 = $4;
    $95 = ((($94)) + 36|0);
    HEAP32[$95>>2] = 0;
    $96 = $4;
    $97 = ((($96)) + 44|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $98 & -7;
    HEAP32[$97>>2] = $99;
   }
   $100 = $4;
   $101 = ((($100)) + 32|0);
   $102 = HEAP32[$101>>2]|0;
   $bytelen = $102;
   $extralen = 4;
   $unroll_extralen = 0;
   $103 = $4;
   $104 = ((($103)) + 44|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 4;
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = $4;
    $109 = ((($108)) + 44|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $110 ^ -1;
    $112 = $111 & 2;
    $113 = ($112|0)!=(0);
    if ($113) {
     $114 = $4;
     $115 = ((($114)) + 44|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = $116 & -5;
     HEAP32[$115>>2] = $117;
    }
   }
   $118 = $4;
   $119 = ((($118)) + 44|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $120 & 4;
   $122 = ($121|0)!=(0);
   if ($122) {
    $123 = $4;
    $124 = ((($123)) + 40|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $4;
    $127 = ((($126)) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($125) - ($128))|0;
    $130 = $4;
    $131 = ((($130)) + 32|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $4;
    $134 = ((($133)) + 40|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($132) - ($135))|0;
    $137 = (($129) - ($136))|0;
    $unroll_extralen = $137;
    $138 = $unroll_extralen;
    $139 = ($138|0)<(0);
    $$ = $139 ? 0 : $137;
    $unroll_extralen = $$;
   }
   $140 = $4;
   $141 = ((($140)) + 44|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $142 & 1;
   $144 = ($143|0)!=(0);
   if ($144) {
    $145 = $bytelen;
    $146 = $145<<1;
    $bytelen = $146;
    $147 = $extralen;
    $148 = $147<<1;
    $extralen = $148;
    $149 = $unroll_extralen;
    $150 = $149<<1;
    $unroll_extralen = $150;
   }
   $151 = $bytelen;
   $152 = $extralen;
   $153 = (($151) + ($152))|0;
   $154 = $unroll_extralen;
   $155 = (($153) + ($154))|0;
   $156 = (($155) + 4)|0;
   $157 = (_malloc($156)|0);
   $158 = $4;
   $159 = ((($158)) + 48|0);
   HEAP32[$159>>2] = $157;
   $160 = $4;
   $161 = ((($160)) + 48|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($162|0)==(0|0);
   if ($163) {
    $0 = -1;
    $465 = $0;
    STACKTOP = sp;return ($465|0);
   }
   $164 = $4;
   $165 = ((($164)) + 48|0);
   $166 = HEAP32[$165>>2]|0;
   HEAP32[$166>>2] = 0;
   $167 = $4;
   $168 = ((($167)) + 48|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($169)) + 4|0);
   HEAP32[$168>>2] = $170;
   $171 = $3;
   $172 = $171 & 16;
   $173 = ($172|0)!=(0);
   do {
    if ($173) {
     $174 = $4;
     $175 = ((($174)) + 48|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $5;
     $178 = $bytelen;
     _memcpy(($176|0),($177|0),($178|0))|0;
    } else {
     $179 = $3;
     $180 = $179 & 16384;
     $181 = ($180|0)!=(0);
     if ($181) {
      $182 = $bytelen;
      $183 = (($182) + 1)|0;
      $184 = $183 >> 1;
      $x2 = $184;
      $185 = $2;
      (_hio_read($table,1,16,$185)|0);
      $186 = $4;
      $187 = ((($186)) + 48|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $x2;
      $190 = (($188) + ($189)|0);
      $191 = $x2;
      $192 = $2;
      (_hio_read($190,1,$191,$192)|0);
      $193 = $4;
      $194 = ((($193)) + 48|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = $x2;
      $197 = (($195) + ($196)|0);
      $198 = $4;
      $199 = ((($198)) + 48|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = $bytelen;
      _adpcm4_decoder($197,$200,$table,$201);
      break;
     }
     $202 = $4;
     $203 = ((($202)) + 48|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $bytelen;
     $206 = $2;
     $207 = (_hio_read($204,1,$205,$206)|0);
     $x = $207;
     $208 = $x;
     $209 = $bytelen;
     $210 = ($208|0)!=($209|0);
     if ($210) {
      $211 = $4;
      $212 = ((($211)) + 48|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = $x;
      $215 = (($213) + ($214)|0);
      $216 = $bytelen;
      $217 = $x;
      $218 = (($216) - ($217))|0;
      _memset(($215|0),0,($218|0))|0;
     }
    }
   } while(0);
   $219 = $3;
   $220 = $219 & 8;
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = $4;
    $223 = ((($222)) + 48|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $4;
    $226 = ((($225)) + 32|0);
    $227 = HEAP32[$226>>2]|0;
    _convert_7bit_to_8bit($224,$227);
   }
   $228 = $4;
   $229 = ((($228)) + 44|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $230 & 1;
   $232 = ($231|0)!=(0);
   if ($232) {
    $233 = $3;
    $234 = $233 & 64;
    $235 = ($234|0)!=(0);
    if ($235) {
     $236 = $4;
     $237 = ((($236)) + 48|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $4;
     $240 = ((($239)) + 32|0);
     $241 = HEAP32[$240>>2]|0;
     _convert_endian($238,$241);
    }
   }
   $242 = $3;
   $243 = $242 & 1;
   $244 = ($243|0)!=(0);
   if ($244) {
    $245 = $4;
    $246 = ((($245)) + 48|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = $4;
    $249 = ((($248)) + 32|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $4;
    $252 = ((($251)) + 44|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = $253 & 1;
    _convert_delta($247,$250,$254);
   } else {
    $255 = $3;
    $256 = $255 & 4;
    $257 = ($256|0)!=(0);
    if ($257) {
     $258 = $4;
     $259 = ((($258)) + 32|0);
     $260 = HEAP32[$259>>2]|0;
     $len = $260;
     $261 = $4;
     $262 = ((($261)) + 44|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = $263 & 1;
     $265 = ($264|0)!=(0);
     if ($265) {
      $266 = $len;
      $267 = $266<<1;
      $len = $267;
     }
     $268 = $4;
     $269 = ((($268)) + 48|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = $len;
     _convert_delta($270,$271,0);
    }
   }
   $272 = $3;
   $273 = $272 & 2;
   $274 = ($273|0)!=(0);
   if ($274) {
    $275 = $4;
    $276 = ((($275)) + 48|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = $4;
    $279 = ((($278)) + 32|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $4;
    $282 = ((($281)) + 44|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = $283 & 1;
    _convert_signal($277,$280,$284);
   }
   $285 = $3;
   $286 = $285 & 128;
   $287 = ($286|0)!=(0);
   if ($287) {
    $288 = $4;
    $289 = ((($288)) + 48|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $4;
    $292 = ((($291)) + 32|0);
    $293 = HEAP32[$292>>2]|0;
    _convert_vidc_to_linear($290,$293);
   }
   $294 = $3;
   $295 = $294 & 512;
   $296 = ($295|0)!=(0);
   do {
    if ($296) {
     $297 = $4;
     $298 = ((($297)) + 36|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = ($299|0)==(0);
     if (!($300)) {
      break;
     }
     $301 = $4;
     $302 = ((($301)) + 32|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = $4;
     $305 = ((($304)) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ($303|0)>($306|0);
     if (!($307)) {
      break;
     }
     $308 = $4;
     $309 = ((($308)) + 44|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = $310 | 16;
     HEAP32[$309>>2] = $311;
    }
   } while(0);
   $312 = $4;
   $313 = ((($312)) + 44|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = $314 & 4;
   $316 = ($315|0)!=(0);
   if ($316) {
    $317 = $4;
    _unroll_loop($317);
    $318 = $unroll_extralen;
    $319 = $bytelen;
    $320 = (($319) + ($318))|0;
    $bytelen = $320;
   }
   $321 = $4;
   $322 = ((($321)) + 44|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 & 1;
   $325 = ($324|0)!=(0);
   $i = 0;
   L83: do {
    if ($325) {
     while(1) {
      $326 = $i;
      $327 = ($326|0)<(8);
      if (!($327)) {
       break L83;
      }
      $328 = $bytelen;
      $329 = (($328) - 2)|0;
      $330 = $i;
      $331 = (($329) + ($330))|0;
      $332 = $4;
      $333 = ((($332)) + 48|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = (($334) + ($331)|0);
      $336 = HEAP8[$335>>0]|0;
      $337 = $bytelen;
      $338 = $i;
      $339 = (($337) + ($338))|0;
      $340 = $4;
      $341 = ((($340)) + 48|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = (($342) + ($339)|0);
      HEAP8[$343>>0] = $336;
      $344 = $i;
      $345 = (($344) + 1)|0;
      $i = $345;
     }
    } else {
     while(1) {
      $346 = $i;
      $347 = ($346|0)<(4);
      if (!($347)) {
       break L83;
      }
      $348 = $bytelen;
      $349 = (($348) - 1)|0;
      $350 = $i;
      $351 = (($349) + ($350))|0;
      $352 = $4;
      $353 = ((($352)) + 48|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = (($354) + ($351)|0);
      $356 = HEAP8[$355>>0]|0;
      $357 = $bytelen;
      $358 = $i;
      $359 = (($357) + ($358))|0;
      $360 = $4;
      $361 = ((($360)) + 48|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = (($362) + ($359)|0);
      HEAP8[$363>>0] = $356;
      $364 = $i;
      $365 = (($364) + 1)|0;
      $i = $365;
     }
    }
   } while(0);
   $366 = $4;
   $367 = ((($366)) + 44|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $368 & 1;
   $370 = ($369|0)!=(0);
   $371 = $4;
   $372 = ((($371)) + 48|0);
   $373 = HEAP32[$372>>2]|0;
   $374 = HEAP8[$373>>0]|0;
   $375 = $4;
   $376 = ((($375)) + 48|0);
   $377 = HEAP32[$376>>2]|0;
   if ($370) {
    $378 = ((($377)) + -2|0);
    HEAP8[$378>>0] = $374;
    $379 = $4;
    $380 = ((($379)) + 48|0);
    $381 = HEAP32[$380>>2]|0;
    $382 = ((($381)) + 1|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $4;
    $385 = ((($384)) + 48|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ((($386)) + -1|0);
    HEAP8[$387>>0] = $383;
   } else {
    $388 = ((($377)) + -1|0);
    HEAP8[$388>>0] = $374;
   }
   $389 = $4;
   $390 = ((($389)) + 44|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $391 & 2;
   $393 = ($392|0)!=(0);
   L95: do {
    if ($393) {
     $394 = $4;
     $395 = ((($394)) + 44|0);
     $396 = HEAP32[$395>>2]|0;
     $397 = $396 & 1;
     $398 = ($397|0)!=(0);
     $399 = $4;
     $400 = ((($399)) + 40|0);
     $401 = HEAP32[$400>>2]|0;
     if (!($398)) {
      $441 = $unroll_extralen;
      $442 = (($401) + ($441))|0;
      $lpe1 = $442;
      $443 = $4;
      $444 = ((($443)) + 36|0);
      $445 = HEAP32[$444>>2]|0;
      $lps2 = $445;
      $i = 0;
      while(1) {
       $446 = $i;
       $447 = ($446|0)<(4);
       if (!($447)) {
        break L95;
       }
       $448 = $lps2;
       $449 = $i;
       $450 = (($448) + ($449))|0;
       $451 = $4;
       $452 = ((($451)) + 48|0);
       $453 = HEAP32[$452>>2]|0;
       $454 = (($453) + ($450)|0);
       $455 = HEAP8[$454>>0]|0;
       $456 = $lpe1;
       $457 = $i;
       $458 = (($456) + ($457))|0;
       $459 = $4;
       $460 = ((($459)) + 48|0);
       $461 = HEAP32[$460>>2]|0;
       $462 = (($461) + ($458)|0);
       HEAP8[$462>>0] = $455;
       $463 = $i;
       $464 = (($463) + 1)|0;
       $i = $464;
      }
     }
     $402 = $401<<1;
     $lpe = $402;
     $403 = $4;
     $404 = ((($403)) + 36|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = $405<<1;
     $lps = $406;
     $407 = $4;
     $408 = ((($407)) + 44|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = $409 & 4;
     $411 = ($410|0)!=(0);
     if ($411) {
      $412 = $4;
      $413 = ((($412)) + 40|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = $4;
      $416 = ((($415)) + 36|0);
      $417 = HEAP32[$416>>2]|0;
      $418 = (($414) - ($417))|0;
      $419 = $418<<1;
      $420 = $lpe;
      $421 = (($420) + ($419))|0;
      $lpe = $421;
     }
     $i = 0;
     while(1) {
      $422 = $i;
      $423 = ($422|0)<(8);
      if (!($423)) {
       break L95;
      }
      $424 = $lps;
      $425 = $i;
      $426 = (($424) + ($425))|0;
      $427 = $4;
      $428 = ((($427)) + 48|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = (($429) + ($426)|0);
      $431 = HEAP8[$430>>0]|0;
      $432 = $lpe;
      $433 = $i;
      $434 = (($432) + ($433))|0;
      $435 = $4;
      $436 = ((($435)) + 48|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = (($437) + ($434)|0);
      HEAP8[$438>>0] = $431;
      $439 = $i;
      $440 = (($439) + 1)|0;
      $i = $440;
     }
    }
   } while(0);
   $0 = 0;
   $465 = $0;
   STACKTOP = sp;return ($465|0);
  }
 } while(0);
 $52 = $3;
 $53 = $52 ^ -1;
 $54 = $53 & 16;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $2;
  $57 = $4;
  $58 = ((($57)) + 32|0);
  $59 = HEAP32[$58>>2]|0;
  (_hio_seek($56,$59,1)|0);
 }
 $0 = 0;
 $465 = $0;
 STACKTOP = sp;return ($465|0);
}
function _convert_hsc_to_sbi($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i = 0, $x = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 9|0;
 $0 = $a;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(10);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $x = $6;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $9 = $0;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $i;
  $13 = $0;
  $14 = (($13) + ($12)|0);
  HEAP8[$14>>0] = $11;
  $15 = $x;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $18 = $0;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $15;
  $20 = $i;
  $21 = (($20) + 2)|0;
  $i = $21;
 }
 $22 = $0;
 dest=$b; src=$22; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $23 = ((($b)) + 10|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 HEAP8[$26>>0] = $24;
 $27 = ((($b)) + 9|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $0;
 $30 = ((($29)) + 10|0);
 HEAP8[$30>>0] = $28;
 $31 = ((($b)) + 8|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $0;
 $34 = ((($33)) + 9|0);
 HEAP8[$34>>0] = $32;
 STACKTOP = sp;return;
}
function _adpcm4_decoder($inp,$outp,$tab,$len) {
 $inp = $inp|0;
 $outp = $outp|0;
 $tab = $tab|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b0 = 0, $b1 = 0, $delta = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $inp;
 $1 = $outp;
 $2 = $tab;
 $3 = $len;
 $delta = 0;
 $4 = $3;
 $5 = (($4) + 1)|0;
 $6 = (($5|0) / 2)&-1;
 $3 = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $0;
  $11 = HEAP8[$10>>0]|0;
  $b0 = $11;
  $12 = $0;
  $13 = ((($12)) + 1|0);
  $0 = $13;
  $14 = HEAP8[$12>>0]|0;
  $15 = $14&255;
  $16 = $15 >> 4;
  $17 = $16&255;
  $b1 = $17;
  $18 = $b0;
  $19 = $18&255;
  $20 = $19 & 15;
  $21 = $2;
  $22 = (($21) + ($20)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = $delta;
  $26 = $25 << 24 >> 24;
  $27 = (($26) + ($24))|0;
  $28 = $27&255;
  $delta = $28;
  $29 = $delta;
  $30 = $1;
  $31 = ((($30)) + 1|0);
  $1 = $31;
  HEAP8[$30>>0] = $29;
  $32 = $b1;
  $33 = $32&255;
  $34 = $33 & 15;
  $35 = $2;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = $delta;
  $40 = $39 << 24 >> 24;
  $41 = (($40) + ($38))|0;
  $42 = $41&255;
  $delta = $42;
  $43 = $delta;
  $44 = $1;
  $45 = ((($44)) + 1|0);
  $1 = $45;
  HEAP8[$44>>0] = $43;
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 STACKTOP = sp;return;
}
function _convert_7bit_to_8bit($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 while(1) {
  $2 = $1;
  $3 = (($2) + -1)|0;
  $1 = $3;
  $4 = ($2|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 << 1;
  $9 = $8&255;
  HEAP8[$5>>0] = $9;
  $10 = $0;
  $11 = ((($10)) + 1|0);
  $0 = $11;
 }
 STACKTOP = sp;return;
}
function _convert_endian($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $b = $6;
  $7 = $0;
  $8 = ((($7)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $0;
  HEAP8[$10>>0] = $9;
  $11 = $b;
  $12 = $0;
  $13 = ((($12)) + 1|0);
  HEAP8[$13>>0] = $11;
  $14 = $0;
  $15 = ((($14)) + 2|0);
  $0 = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function _convert_delta($p,$l,$r) {
 $p = $p|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $abs = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $2 = $r;
 $3 = $0;
 $w = $3;
 $abs = 0;
 $4 = $2;
 $5 = ($4|0)!=(0);
 if ($5) {
  while(1) {
   $6 = $1;
   $7 = (($6) + -1)|0;
   $1 = $7;
   $8 = ($6|0)!=(0);
   if (!($8)) {
    break;
   }
   $9 = $w;
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = $abs;
   $13 = $12&65535;
   $14 = (($11) + ($13))|0;
   $15 = $14&65535;
   $abs = $15;
   $16 = $abs;
   $17 = $w;
   $18 = ((($17)) + 2|0);
   $w = $18;
   HEAP16[$17>>1] = $16;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $19 = $1;
   $20 = (($19) + -1)|0;
   $1 = $20;
   $21 = ($19|0)!=(0);
   if (!($21)) {
    break;
   }
   $22 = $0;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $abs;
   $26 = $25&65535;
   $27 = (($24) + ($26))|0;
   $28 = $27&65535;
   $abs = $28;
   $29 = $abs;
   $30 = $29&255;
   $31 = $0;
   $32 = ((($31)) + 1|0);
   $0 = $32;
   HEAP8[$31>>0] = $30;
  }
  STACKTOP = sp;return;
 }
}
function _convert_signal($p,$l,$r) {
 $p = $p|0;
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $2 = $r;
 $3 = $0;
 $w = $3;
 $4 = $2;
 $5 = ($4|0)!=(0);
 if ($5) {
  while(1) {
   $6 = $1;
   $7 = (($6) + -1)|0;
   $1 = $7;
   $8 = ($6|0)!=(0);
   if (!($8)) {
    break;
   }
   $9 = $w;
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = (($11) + 32768)|0;
   $13 = $12&65535;
   HEAP16[$9>>1] = $13;
   $14 = $w;
   $15 = ((($14)) + 2|0);
   $w = $15;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $16 = $1;
   $17 = (($16) + -1)|0;
   $1 = $17;
   $18 = ($16|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $0;
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = (($21) + -128)|0;
   $23 = $22&255;
   HEAP8[$19>>0] = $23;
   $24 = $0;
   $25 = ((($24)) + 1|0);
   $0 = $25;
  }
  STACKTOP = sp;return;
 }
}
function _convert_vidc_to_linear($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $l;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $x = $8;
  $9 = $x;
  $10 = $9&255;
  $11 = $10 >> 1;
  $12 = (1120 + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14)|0);
  HEAP8[$16>>0] = $13;
  $17 = $x;
  $18 = $17&255;
  $19 = $18 & 1;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $i;
   $22 = $0;
   $23 = (($22) + ($21)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = Math_imul($25, -1)|0;
   $27 = $26&255;
   HEAP8[$23>>0] = $27;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 STACKTOP = sp;return;
}
function _unroll_loop($xxs) {
 $xxs = $xxs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $loop_size = 0, $s16 = 0, $s8 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xxs;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $s16 = $3;
 $4 = $0;
 $5 = ((($4)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $s8 = $6;
 $7 = $0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 $14 = $0;
 if ($13) {
  $15 = ((($14)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $start = $16;
 } else {
  $17 = ((($14)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $start = $18;
 }
 $19 = $0;
 $20 = ((($19)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($21) - ($24))|0;
 $loop_size = $25;
 $26 = $0;
 $27 = ((($26)) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 & 1;
 $30 = ($29|0)!=(0);
 $31 = $start;
 if ($30) {
  $32 = $s16;
  $33 = (($32) + ($31<<1)|0);
  $s16 = $33;
  $i = 0;
  while(1) {
   $34 = $i;
   $35 = $loop_size;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $s16;
   $38 = $i;
   $39 = (0 - ($38))|0;
   $40 = (($37) + ($39<<1)|0);
   $41 = ((($40)) + -2|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $s16;
   $44 = $i;
   $45 = (($43) + ($44<<1)|0);
   HEAP16[$45>>1] = $42;
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  STACKTOP = sp;return;
 } else {
  $48 = $s8;
  $49 = (($48) + ($31)|0);
  $s8 = $49;
  $i = 0;
  while(1) {
   $50 = $i;
   $51 = $loop_size;
   $52 = ($50|0)<($51|0);
   if (!($52)) {
    break;
   }
   $53 = $s8;
   $54 = $i;
   $55 = (0 - ($54))|0;
   $56 = (($53) + ($55)|0);
   $57 = ((($56)) + -1|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $s8;
   $60 = $i;
   $61 = (($59) + ($60)|0);
   HEAP8[$61>>0] = $58;
   $62 = $i;
   $63 = (($62) + 1)|0;
   $i = $63;
  }
  STACKTOP = sp;return;
 }
}
function _xm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,17,$4)|0);
 $6 = ($5>>>0)<(17);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,1432,17)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _xm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $len = 0;
 var $mod = 0, $or$cond = 0, $sid = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $xfh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $xfh = sp + 32|0;
 $tracker_name = sp + 396|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($xfh,17,1,$7)|0);
 $8 = ((($xfh)) + 17|0);
 $9 = $2;
 (_hio_read($8,20,1,$9)|0);
 $10 = $2;
 (_hio_read8($10)|0);
 $11 = ((($xfh)) + 38|0);
 $12 = $2;
 (_hio_read($11,20,1,$12)|0);
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($xfh)) + 58|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read32l($16)|0);
 $18 = ((($xfh)) + 60|0);
 HEAP32[$18>>2] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($xfh)) + 64|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($xfh)) + 66|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($xfh)) + 68|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($xfh)) + 70|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read16l($31)|0);
 $33 = ((($xfh)) + 72|0);
 HEAP16[$33>>1] = $32;
 $34 = $2;
 $35 = (_hio_read16l($34)|0);
 $36 = ((($xfh)) + 74|0);
 HEAP16[$36>>1] = $35;
 $37 = $2;
 $38 = (_hio_read16l($37)|0);
 $39 = ((($xfh)) + 76|0);
 HEAP16[$39>>1] = $38;
 $40 = $2;
 $41 = (_hio_read16l($40)|0);
 $42 = ((($xfh)) + 78|0);
 HEAP16[$42>>1] = $41;
 $43 = ((($xfh)) + 64|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45|0)>(256);
 if (!($46)) {
  $47 = ((($xfh)) + 70|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = ($49|0)>(256);
  if (!($50)) {
   $51 = ((($xfh)) + 72|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52&65535;
   $54 = ($53|0)>(255);
   if (!($54)) {
    $55 = ((($xfh)) + 66|0);
    $56 = HEAP16[$55>>1]|0;
    $57 = $56&65535;
    $58 = ($57|0)>(255);
    if (!($58)) {
     $59 = ((($xfh)) + 68|0);
     $60 = HEAP16[$59>>1]|0;
     $61 = $60&65535;
     $62 = ($61|0)>(64);
     if (!($62)) {
      $63 = ((($xfh)) + 76|0);
      $64 = HEAP16[$63>>1]|0;
      $65 = $64&65535;
      $66 = ($65|0)>=(32);
      if ($66) {
       label = 11;
      } else {
       $67 = ((($xfh)) + 78|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $68&65535;
       $70 = ($69|0)<(32);
       if ($70) {
        label = 11;
       } else {
        $71 = ((($xfh)) + 78|0);
        $72 = HEAP16[$71>>1]|0;
        $73 = $72&65535;
        $74 = ($73|0)>(255);
        if ($74) {
         label = 11;
        }
       }
      }
      if ((label|0) == 11) {
       $75 = ((($xfh)) + 38|0);
       $76 = (_memcmp(1280,$75,6)|0);
       $77 = ($76|0)!=(0);
       if ($77) {
        $0 = -1;
        $316 = $0;
        STACKTOP = sp;return ($316|0);
       }
      }
      $78 = ((($xfh)) + 60|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) - 20)|0;
      $len = $80;
      $81 = $len;
      $82 = ($81|0)<(0);
      $83 = $len;
      $84 = ($83|0)>(256);
      $or$cond = $82 | $84;
      if ($or$cond) {
       $0 = -1;
       $316 = $0;
       STACKTOP = sp;return ($316|0);
      }
      $85 = ((($xfh)) + 80|0);
      $86 = $len;
      $87 = $2;
      (_hio_read($85,$86,1,$87)|0);
      $88 = $mod;
      $89 = ((($xfh)) + 17|0);
      (_strncpy(($88|0),($89|0),20)|0);
      $90 = ((($xfh)) + 64|0);
      $91 = HEAP16[$90>>1]|0;
      $92 = $91&65535;
      $93 = $mod;
      $94 = ((($93)) + 156|0);
      HEAP32[$94>>2] = $92;
      $95 = ((($xfh)) + 68|0);
      $96 = HEAP16[$95>>1]|0;
      $97 = $96&65535;
      $98 = $mod;
      $99 = ((($98)) + 136|0);
      HEAP32[$99>>2] = $97;
      $100 = ((($xfh)) + 70|0);
      $101 = HEAP16[$100>>1]|0;
      $102 = $101&65535;
      $103 = $mod;
      $104 = ((($103)) + 128|0);
      HEAP32[$104>>2] = $102;
      $105 = ((($xfh)) + 72|0);
      $106 = HEAP16[$105>>1]|0;
      $107 = $106&65535;
      $108 = $mod;
      $109 = ((($108)) + 140|0);
      HEAP32[$109>>2] = $107;
      $110 = ((($xfh)) + 66|0);
      $111 = HEAP16[$110>>1]|0;
      $112 = $111&65535;
      $113 = $mod;
      $114 = ((($113)) + 160|0);
      HEAP32[$114>>2] = $112;
      $115 = ((($xfh)) + 76|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = $116&65535;
      $118 = $mod;
      $119 = ((($118)) + 148|0);
      HEAP32[$119>>2] = $117;
      $120 = ((($xfh)) + 78|0);
      $121 = HEAP16[$120>>1]|0;
      $122 = $121&65535;
      $123 = $mod;
      $124 = ((($123)) + 152|0);
      HEAP32[$124>>2] = $122;
      $125 = $mod;
      $126 = ((($125)) + 136|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = $mod;
      $129 = ((($128)) + 128|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = Math_imul($127, $130)|0;
      $132 = (($131) + 1)|0;
      $133 = $mod;
      $134 = ((($133)) + 132|0);
      HEAP32[$134>>2] = $132;
      $135 = ((($xfh)) + 74|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $138 = $137 & 1;
      $139 = ($138|0)!=(0);
      $140 = $139 ? 4096 : 0;
      $141 = $1;
      $142 = ((($141)) + 1284|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = $143 | $140;
      HEAP32[$142>>2] = $144;
      $145 = $mod;
      $146 = ((($145)) + 952|0);
      $147 = ((($xfh)) + 80|0);
      $148 = $mod;
      $149 = ((($148)) + 156|0);
      $150 = HEAP32[$149>>2]|0;
      _memcpy(($146|0),($147|0),($150|0))|0;
      $151 = ((($tracker_name)) + 20|0);
      HEAP8[$151>>0] = 0;
      $152 = ((($xfh)) + 38|0);
      HEAP32[$vararg_buffer>>2] = $152;
      (_snprintf($tracker_name,20,1288,$vararg_buffer)|0);
      $i = 20;
      while(1) {
       $153 = $i;
       $154 = ($153|0)>=(0);
       if (!($154)) {
        break;
       }
       $155 = $i;
       $156 = (($tracker_name) + ($155)|0);
       $157 = HEAP8[$156>>0]|0;
       $158 = $157 << 24 >> 24;
       $159 = ($158|0)==(32);
       if ($159) {
        $160 = $i;
        $161 = (($tracker_name) + ($160)|0);
        HEAP8[$161>>0] = 0;
       }
       $162 = $i;
       $163 = (($tracker_name) + ($162)|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = ($164<<24>>24)!=(0);
       if ($165) {
        break;
       }
       $166 = $i;
       $167 = (($166) + -1)|0;
       $i = $167;
      }
      $168 = (_strncmp($tracker_name,1304,17)|0);
      $169 = ($168|0)!=(0);
      if ($169) {
       $170 = (_strncmp($tracker_name,1328,8)|0);
       $171 = ($170|0)!=(0);
       if (!($171)) {
        label = 23;
       }
      } else {
       label = 23;
      }
      if ((label|0) == 23) {
       $172 = $1;
       $173 = ((($172)) + 1284|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = $174 | 67108864;
       HEAP32[$173>>2] = $175;
      }
      $176 = ((($xfh)) + 60|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==(275);
      if ($178) {
       (_strcpy(($tracker_name|0),(4616|0))|0);
       $179 = $1;
       $180 = ((($179)) + 1284|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = $181 & -67108865;
       HEAP32[$180>>2] = $182;
      } else {
       $183 = HEAP8[$tracker_name>>0]|0;
       $184 = $183 << 24 >> 24;
       $185 = ($184|0)==(0);
       if ($185) {
        (_strcpy(($tracker_name|0),(3408|0))|0);
        $186 = $1;
        $187 = ((($186)) + 1284|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = $188 & -67108865;
        HEAP32[$187>>2] = $189;
       }
      }
      $190 = (_strncmp($tracker_name,1344,19)|0);
      $191 = ($190|0)!=(0);
      if (!($191)) {
       $192 = $mod;
       $193 = ((($192)) + 152|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194|0)<=(10);
       if ($195) {
        $196 = $mod;
        $197 = ((($196)) + 152|0);
        $198 = HEAP32[$197>>2]|0;
        $199 = $198<<1;
        $200 = (53 - ($199))|0;
        $201 = ($200*125)|0;
        $202 = (($201|0) / 33)&-1;
        $203 = $mod;
        $204 = ((($203)) + 152|0);
        HEAP32[$204>>2] = $202;
       }
       $205 = $1;
       $206 = ((($205)) + 1284|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = $207 & -67108865;
       HEAP32[$206>>2] = $208;
      }
      $209 = (_strncmp($tracker_name,1368,18)|0);
      $210 = ($209|0)!=(0);
      if (!($210)) {
       (_strcpy(($tracker_name|0),(1392|0))|0);
       $211 = $1;
       $212 = ((($211)) + 1284|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $213 & -67108865;
       HEAP32[$212>>2] = $214;
      }
      $215 = $1;
      $216 = ((($xfh)) + 58|0);
      $217 = HEAP16[$216>>1]|0;
      $218 = $217&65535;
      $219 = $218 >> 8;
      $220 = ((($xfh)) + 58|0);
      $221 = HEAP16[$220>>1]|0;
      $222 = $221&65535;
      $223 = $222 & 255;
      HEAP32[$vararg_buffer2>>2] = $tracker_name;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $219;
      $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $223;
      _set_type($215,1416,$vararg_buffer2);
      $224 = $2;
      $225 = $3;
      $226 = ((($xfh)) + 60|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + ($227))|0;
      $229 = (($228) + 60)|0;
      (_hio_seek($224,$229,0)|0);
      $230 = ((($xfh)) + 58|0);
      $231 = HEAP16[$230>>1]|0;
      $232 = $231&65535;
      $233 = ($232|0)<=(259);
      $234 = $1;
      $235 = ((($xfh)) + 58|0);
      $236 = HEAP16[$235>>1]|0;
      $237 = $236&65535;
      $238 = $2;
      if ($233) {
       $239 = (_load_instruments($234,$237,$238)|0);
       $240 = ($239|0)<(0);
       if ($240) {
        $0 = -1;
        $316 = $0;
        STACKTOP = sp;return ($316|0);
       }
       $241 = $1;
       $242 = ((($xfh)) + 58|0);
       $243 = HEAP16[$242>>1]|0;
       $244 = $243&65535;
       $245 = $2;
       $246 = (_load_patterns($241,$244,$245)|0);
       $247 = ($246|0)<(0);
       if ($247) {
        $0 = -1;
        $316 = $0;
        STACKTOP = sp;return ($316|0);
       }
      } else {
       $248 = (_load_patterns($234,$237,$238)|0);
       $249 = ($248|0)<(0);
       if ($249) {
        $0 = -1;
        $316 = $0;
        STACKTOP = sp;return ($316|0);
       }
       $250 = $1;
       $251 = ((($xfh)) + 58|0);
       $252 = HEAP16[$251>>1]|0;
       $253 = $252&65535;
       $254 = $2;
       $255 = (_load_instruments($250,$253,$254)|0);
       $256 = ($255|0)<(0);
       if ($256) {
        $0 = -1;
        $316 = $0;
        STACKTOP = sp;return ($316|0);
       }
      }
      $257 = ((($xfh)) + 58|0);
      $258 = HEAP16[$257>>1]|0;
      $259 = $258&65535;
      $260 = ($259|0)<=(259);
      L63: do {
       if ($260) {
        $i = 0;
        L65: while(1) {
         $261 = $i;
         $262 = $mod;
         $263 = ((($262)) + 140|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = ($261|0)<($264|0);
         if (!($265)) {
          break L63;
         }
         $j = 0;
         while(1) {
          $266 = $j;
          $267 = $i;
          $268 = $mod;
          $269 = ((($268)) + 176|0);
          $270 = HEAP32[$269>>2]|0;
          $271 = (($270) + (($267*764)|0)|0);
          $272 = ((($271)) + 36|0);
          $273 = HEAP32[$272>>2]|0;
          $274 = ($266|0)<($273|0);
          if (!($274)) {
           break;
          }
          $275 = $j;
          $276 = $i;
          $277 = $mod;
          $278 = ((($277)) + 176|0);
          $279 = HEAP32[$278>>2]|0;
          $280 = (($279) + (($276*764)|0)|0);
          $281 = ((($280)) + 756|0);
          $282 = HEAP32[$281>>2]|0;
          $283 = (($282) + ($275<<6)|0);
          $284 = ((($283)) + 40|0);
          $285 = HEAP32[$284>>2]|0;
          $sid = $285;
          $286 = $1;
          $287 = $2;
          $288 = $sid;
          $289 = $mod;
          $290 = ((($289)) + 180|0);
          $291 = HEAP32[$290>>2]|0;
          $292 = (($291) + (($288*52)|0)|0);
          $293 = (_load_sample($286,$287,1,$292,0)|0);
          $294 = ($293|0)<(0);
          if ($294) {
           break L65;
          }
          $295 = $j;
          $296 = (($295) + 1)|0;
          $j = $296;
         }
         $297 = $i;
         $298 = (($297) + 1)|0;
         $i = $298;
        }
        $0 = -1;
        $316 = $0;
        STACKTOP = sp;return ($316|0);
       }
      } while(0);
      $i = 0;
      while(1) {
       $299 = $i;
       $300 = $mod;
       $301 = ((($300)) + 136|0);
       $302 = HEAP32[$301>>2]|0;
       $303 = ($299|0)<($302|0);
       if (!($303)) {
        break;
       }
       $304 = $i;
       $305 = $mod;
       $306 = ((($305)) + 184|0);
       $307 = (($306) + (($304*12)|0)|0);
       HEAP32[$307>>2] = 128;
       $308 = $i;
       $309 = (($308) + 1)|0;
       $i = $309;
      }
      $310 = $1;
      $311 = ((($310)) + 1284|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = $312 | 33554464;
      HEAP32[$311>>2] = $313;
      $314 = $1;
      $315 = ((($314)) + 1288|0);
      HEAP32[$315>>2] = 1;
      $0 = 0;
      $316 = $0;
      STACKTOP = sp;return ($316|0);
     }
    }
    $0 = -1;
    $316 = $0;
    STACKTOP = sp;return ($316|0);
   }
  }
 }
 $0 = -1;
 $316 = $0;
 STACKTOP = sp;return ($316|0);
}
function _load_instruments($m,$version,$f) {
 $m = $m|0;
 $version = $version|0;
 $f = $f|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $flags = 0, $i = 0, $j = 0, $mod = 0, $sample_num = 0, $sub = 0, $sub1 = 0, $xi = 0, $xih = 0;
 var $xsh = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xih = sp + 672|0;
 $xi = sp + 728|0;
 $xsh = sp + 32|0;
 $1 = $m;
 $2 = $version;
 $3 = $f;
 $4 = $1;
 $mod = $4;
 $sample_num = 0;
 $5 = $mod;
 $6 = ((($5)) + 144|0);
 HEAP32[$6>>2] = 1024;
 $7 = $mod;
 $8 = (_instrument_init($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 $i = 0;
 L5: while(1) {
  $10 = $i;
  $11 = $mod;
  $12 = ((($11)) + 140|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   label = 56;
   break;
  }
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 176|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($15*764)|0)|0);
  $xxi = $19;
  $20 = $3;
  $21 = (_hio_read32l($20)|0);
  HEAP32[$xih>>2] = $21;
  $22 = $3;
  $23 = (_hio_eof($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   label = 56;
   break;
  }
  $25 = ((($xih)) + 4|0);
  $26 = $3;
  (_hio_read($25,22,1,$26)|0);
  $27 = $3;
  $28 = (_hio_read8($27)|0);
  $29 = ((($xih)) + 26|0);
  HEAP8[$29>>0] = $28;
  $30 = $3;
  $31 = (_hio_read16l($30)|0);
  $32 = ((($xih)) + 28|0);
  HEAP16[$32>>1] = $31;
  $33 = $3;
  $34 = (_hio_read32l($33)|0);
  $35 = ((($xih)) + 32|0);
  HEAP32[$35>>2] = $34;
  $36 = ((($xih)) + 28|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($38|0)>(16);
  if ($39) {
   label = 9;
   break;
  }
  $40 = ((($xih)) + 28|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = ($42|0)>(0);
  if ($43) {
   $44 = ((($xih)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45>>>0)>(256);
   if ($46) {
    label = 9;
    break;
   }
  }
  $47 = $mod;
  $48 = $i;
  $49 = ((($xih)) + 4|0);
  (_instrument_name($47,$48,$49,22)|0);
  $50 = ((($xih)) + 28|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51&65535;
  $53 = $xxi;
  $54 = ((($53)) + 36|0);
  HEAP32[$54>>2] = $52;
  $55 = $xxi;
  $56 = ((($55)) + 36|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)>(16);
  if ($58) {
   $59 = $xxi;
   $60 = ((($59)) + 36|0);
   HEAP32[$60>>2] = 16;
  }
  $61 = $xxi;
  $62 = ((($61)) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0);
  L16: do {
   if ($64) {
    $65 = $mod;
    $66 = $i;
    $67 = $xxi;
    $68 = ((($67)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (_subinstrument_alloc($65,$66,$69)|0);
    $71 = ($70|0)<(0);
    if ($71) {
     label = 14;
     break L5;
    }
    $72 = HEAP32[$xih>>2]|0;
    $73 = ($72>>>0)<(33);
    if ($73) {
     label = 16;
     break L5;
    }
    $74 = HEAP32[$xih>>2]|0;
    $75 = ($74>>>0)<(241);
    L20: do {
     if ($75) {
      _memset(($xi|0),0,208)|0;
      $76 = $3;
      $77 = HEAP32[$xih>>2]|0;
      $78 = (($77) - 33)|0;
      (_hio_seek($76,$78,1)|0);
     } else {
      $79 = $3;
      (_hio_read($xi,96,1,$79)|0);
      $j = 0;
      while(1) {
       $80 = $j;
       $81 = ($80|0)<(24);
       if (!($81)) {
        break;
       }
       $82 = $3;
       $83 = (_hio_read16l($82)|0);
       $84 = $j;
       $85 = ((($xi)) + 96|0);
       $86 = (($85) + ($84<<1)|0);
       HEAP16[$86>>1] = $83;
       $87 = $j;
       $88 = (($87) + 1)|0;
       $j = $88;
      }
      $j = 0;
      while(1) {
       $89 = $j;
       $90 = ($89|0)<(24);
       $91 = $3;
       if (!($90)) {
        break;
       }
       $92 = (_hio_read16l($91)|0);
       $93 = $j;
       $94 = ((($xi)) + 144|0);
       $95 = (($94) + ($93<<1)|0);
       HEAP16[$95>>1] = $92;
       $96 = $j;
       $97 = (($96) + 1)|0;
       $j = $97;
      }
      $98 = (_hio_read8($91)|0);
      $99 = ((($xi)) + 192|0);
      HEAP8[$99>>0] = $98;
      $100 = $3;
      $101 = (_hio_read8($100)|0);
      $102 = ((($xi)) + 193|0);
      HEAP8[$102>>0] = $101;
      $103 = $3;
      $104 = (_hio_read8($103)|0);
      $105 = ((($xi)) + 194|0);
      HEAP8[$105>>0] = $104;
      $106 = $3;
      $107 = (_hio_read8($106)|0);
      $108 = ((($xi)) + 195|0);
      HEAP8[$108>>0] = $107;
      $109 = $3;
      $110 = (_hio_read8($109)|0);
      $111 = ((($xi)) + 196|0);
      HEAP8[$111>>0] = $110;
      $112 = $3;
      $113 = (_hio_read8($112)|0);
      $114 = ((($xi)) + 197|0);
      HEAP8[$114>>0] = $113;
      $115 = $3;
      $116 = (_hio_read8($115)|0);
      $117 = ((($xi)) + 198|0);
      HEAP8[$117>>0] = $116;
      $118 = $3;
      $119 = (_hio_read8($118)|0);
      $120 = ((($xi)) + 199|0);
      HEAP8[$120>>0] = $119;
      $121 = $3;
      $122 = (_hio_read8($121)|0);
      $123 = ((($xi)) + 200|0);
      HEAP8[$123>>0] = $122;
      $124 = $3;
      $125 = (_hio_read8($124)|0);
      $126 = ((($xi)) + 201|0);
      HEAP8[$126>>0] = $125;
      $127 = $3;
      $128 = (_hio_read8($127)|0);
      $129 = ((($xi)) + 202|0);
      HEAP8[$129>>0] = $128;
      $130 = $3;
      $131 = (_hio_read8($130)|0);
      $132 = ((($xi)) + 203|0);
      HEAP8[$132>>0] = $131;
      $133 = $3;
      $134 = (_hio_read8($133)|0);
      $135 = ((($xi)) + 204|0);
      HEAP8[$135>>0] = $134;
      $136 = $3;
      $137 = (_hio_read8($136)|0);
      $138 = ((($xi)) + 205|0);
      HEAP8[$138>>0] = $137;
      $139 = $3;
      $140 = (_hio_read16l($139)|0);
      $141 = ((($xi)) + 206|0);
      HEAP16[$141>>1] = $140;
      $142 = $3;
      $143 = HEAP32[$xih>>2]|0;
      $144 = (($143) - 241)|0;
      (_hio_seek($142,$144,1)|0);
      $145 = ((($xi)) + 206|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = $146&65535;
      $148 = $147 << 1;
      $149 = $xxi;
      $150 = ((($149)) + 40|0);
      HEAP32[$150>>2] = $148;
      $151 = ((($xi)) + 192|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = $152&255;
      $154 = $xxi;
      $155 = ((($154)) + 44|0);
      $156 = ((($155)) + 4|0);
      HEAP32[$156>>2] = $153;
      $157 = ((($xi)) + 194|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158&255;
      $160 = $xxi;
      $161 = ((($160)) + 44|0);
      $162 = ((($161)) + 12|0);
      HEAP32[$162>>2] = $159;
      $163 = ((($xi)) + 195|0);
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = $xxi;
      $167 = ((($166)) + 44|0);
      $168 = ((($167)) + 20|0);
      HEAP32[$168>>2] = $165;
      $169 = ((($xi)) + 196|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $170&255;
      $172 = $xxi;
      $173 = ((($172)) + 44|0);
      $174 = ((($173)) + 24|0);
      HEAP32[$174>>2] = $171;
      $175 = ((($xi)) + 200|0);
      $176 = HEAP8[$175>>0]|0;
      $177 = $176&255;
      $178 = $xxi;
      $179 = ((($178)) + 44|0);
      HEAP32[$179>>2] = $177;
      $180 = ((($xi)) + 193|0);
      $181 = HEAP8[$180>>0]|0;
      $182 = $181&255;
      $183 = $xxi;
      $184 = ((($183)) + 200|0);
      $185 = ((($184)) + 4|0);
      HEAP32[$185>>2] = $182;
      $186 = ((($xi)) + 197|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = $187&255;
      $189 = $xxi;
      $190 = ((($189)) + 200|0);
      $191 = ((($190)) + 12|0);
      HEAP32[$191>>2] = $188;
      $192 = ((($xi)) + 198|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = $xxi;
      $196 = ((($195)) + 200|0);
      $197 = ((($196)) + 20|0);
      HEAP32[$197>>2] = $194;
      $198 = ((($xi)) + 199|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = $xxi;
      $202 = ((($201)) + 200|0);
      $203 = ((($202)) + 24|0);
      HEAP32[$203>>2] = $200;
      $204 = ((($xi)) + 201|0);
      $205 = HEAP8[$204>>0]|0;
      $206 = $205&255;
      $207 = $xxi;
      $208 = ((($207)) + 200|0);
      HEAP32[$208>>2] = $206;
      $209 = $xxi;
      $210 = ((($209)) + 44|0);
      $211 = ((($210)) + 4|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)<=(0);
      if ($213) {
       label = 27;
      } else {
       $214 = $xxi;
       $215 = ((($214)) + 44|0);
       $216 = ((($215)) + 4|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($217|0)>(32);
       if ($218) {
        label = 27;
       } else {
        $223 = $xxi;
        $224 = ((($223)) + 44|0);
        $225 = ((($224)) + 28|0);
        $226 = ((($xi)) + 96|0);
        $227 = $xxi;
        $228 = ((($227)) + 44|0);
        $229 = ((($228)) + 4|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = $230<<2;
        _memcpy(($225|0),($226|0),($231|0))|0;
       }
      }
      if ((label|0) == 27) {
       label = 0;
       $219 = $xxi;
       $220 = ((($219)) + 44|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $221 & -2;
       HEAP32[$220>>2] = $222;
      }
      $232 = $xxi;
      $233 = ((($232)) + 200|0);
      $234 = ((($233)) + 4|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = ($235|0)<=(0);
      if ($236) {
       label = 31;
      } else {
       $237 = $xxi;
       $238 = ((($237)) + 200|0);
       $239 = ((($238)) + 4|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = ($240|0)>(32);
       if ($241) {
        label = 31;
       } else {
        $246 = $xxi;
        $247 = ((($246)) + 200|0);
        $248 = ((($247)) + 28|0);
        $249 = ((($xi)) + 144|0);
        $250 = $xxi;
        $251 = ((($250)) + 200|0);
        $252 = ((($251)) + 4|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = $253<<2;
        _memcpy(($248|0),($249|0),($254|0))|0;
       }
      }
      if ((label|0) == 31) {
       label = 0;
       $242 = $xxi;
       $243 = ((($242)) + 200|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $244 & -2;
       HEAP32[$243>>2] = $245;
      }
      $j = 12;
      while(1) {
       $255 = $j;
       $256 = ($255|0)<(108);
       if (!($256)) {
        break L20;
       }
       $257 = $j;
       $258 = (($257) - 12)|0;
       $259 = (($xi) + ($258)|0);
       $260 = HEAP8[$259>>0]|0;
       $261 = $j;
       $262 = $xxi;
       $263 = ((($262)) + 512|0);
       $264 = (($263) + ($261<<1)|0);
       HEAP8[$264>>0] = $260;
       $265 = $j;
       $266 = $xxi;
       $267 = ((($266)) + 512|0);
       $268 = (($267) + ($265<<1)|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = $269&255;
       $271 = $xxi;
       $272 = ((($271)) + 36|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = ($270|0)>=($273|0);
       if ($274) {
        $275 = $j;
        $276 = $xxi;
        $277 = ((($276)) + 512|0);
        $278 = (($277) + ($275<<1)|0);
        HEAP8[$278>>0] = -1;
       }
       $279 = $j;
       $280 = (($279) + 1)|0;
       $j = $280;
      }
     }
    } while(0);
    $j = 0;
    while(1) {
     $281 = $j;
     $282 = $xxi;
     $283 = ((($282)) + 36|0);
     $284 = HEAP32[$283>>2]|0;
     $285 = ($281|0)<($284|0);
     if (!($285)) {
      break;
     }
     $286 = $j;
     $287 = $xxi;
     $288 = ((($287)) + 756|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = (($289) + ($286<<6)|0);
     $sub = $290;
     $291 = $sample_num;
     $292 = $mod;
     $293 = ((($292)) + 144|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = ($291|0)>=($294|0);
     if ($295) {
      $296 = $mod;
      $297 = ((($296)) + 180|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = $mod;
      $300 = ((($299)) + 144|0);
      $301 = $mod;
      $302 = ((($301)) + 144|0);
      $303 = HEAP32[$302>>2]|0;
      $304 = ($303*3)|0;
      $305 = (($304|0) / 2)&-1;
      $306 = (_realloc_samples($298,$300,$305)|0);
      $307 = $mod;
      $308 = ((($307)) + 180|0);
      HEAP32[$308>>2] = $306;
      $309 = $mod;
      $310 = ((($309)) + 180|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = ($311|0)==(0|0);
      if ($312) {
       label = 42;
       break L5;
      }
     }
     $313 = $sample_num;
     $314 = $mod;
     $315 = ((($314)) + 180|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = (($316) + (($313*52)|0)|0);
     $xxs = $317;
     $318 = $3;
     $319 = (_hio_read32l($318)|0);
     $320 = $j;
     $321 = (($xsh) + (($320*40)|0)|0);
     HEAP32[$321>>2] = $319;
     $322 = $j;
     $323 = (($xsh) + (($322*40)|0)|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324>>>0)>(268435456);
     if ($325) {
      label = 44;
      break L5;
     }
     $326 = $3;
     $327 = (_hio_read32l($326)|0);
     $328 = $j;
     $329 = (($xsh) + (($328*40)|0)|0);
     $330 = ((($329)) + 4|0);
     HEAP32[$330>>2] = $327;
     $331 = $3;
     $332 = (_hio_read32l($331)|0);
     $333 = $j;
     $334 = (($xsh) + (($333*40)|0)|0);
     $335 = ((($334)) + 8|0);
     HEAP32[$335>>2] = $332;
     $336 = $3;
     $337 = (_hio_read8($336)|0);
     $338 = $j;
     $339 = (($xsh) + (($338*40)|0)|0);
     $340 = ((($339)) + 12|0);
     HEAP8[$340>>0] = $337;
     $341 = $3;
     $342 = (_hio_read8s($341)|0);
     $343 = $j;
     $344 = (($xsh) + (($343*40)|0)|0);
     $345 = ((($344)) + 13|0);
     HEAP8[$345>>0] = $342;
     $346 = $3;
     $347 = (_hio_read8($346)|0);
     $348 = $j;
     $349 = (($xsh) + (($348*40)|0)|0);
     $350 = ((($349)) + 14|0);
     HEAP8[$350>>0] = $347;
     $351 = $3;
     $352 = (_hio_read8($351)|0);
     $353 = $j;
     $354 = (($xsh) + (($353*40)|0)|0);
     $355 = ((($354)) + 15|0);
     HEAP8[$355>>0] = $352;
     $356 = $3;
     $357 = (_hio_read8s($356)|0);
     $358 = $j;
     $359 = (($xsh) + (($358*40)|0)|0);
     $360 = ((($359)) + 16|0);
     HEAP8[$360>>0] = $357;
     $361 = $3;
     $362 = (_hio_read8($361)|0);
     $363 = $j;
     $364 = (($xsh) + (($363*40)|0)|0);
     $365 = ((($364)) + 17|0);
     HEAP8[$365>>0] = $362;
     $366 = $j;
     $367 = (($xsh) + (($366*40)|0)|0);
     $368 = ((($367)) + 18|0);
     $369 = $3;
     (_hio_read($368,22,1,$369)|0);
     $370 = $j;
     $371 = (($xsh) + (($370*40)|0)|0);
     $372 = ((($371)) + 12|0);
     $373 = HEAP8[$372>>0]|0;
     $374 = $373&255;
     $375 = $sub;
     HEAP32[$375>>2] = $374;
     $376 = $j;
     $377 = (($xsh) + (($376*40)|0)|0);
     $378 = ((($377)) + 15|0);
     $379 = HEAP8[$378>>0]|0;
     $380 = $379&255;
     $381 = $sub;
     $382 = ((($381)) + 8|0);
     HEAP32[$382>>2] = $380;
     $383 = $j;
     $384 = (($xsh) + (($383*40)|0)|0);
     $385 = ((($384)) + 16|0);
     $386 = HEAP8[$385>>0]|0;
     $387 = $386 << 24 >> 24;
     $388 = $sub;
     $389 = ((($388)) + 12|0);
     HEAP32[$389>>2] = $387;
     $390 = $j;
     $391 = (($xsh) + (($390*40)|0)|0);
     $392 = ((($391)) + 13|0);
     $393 = HEAP8[$392>>0]|0;
     $394 = $393 << 24 >> 24;
     $395 = $sub;
     $396 = ((($395)) + 16|0);
     HEAP32[$396>>2] = $394;
     $397 = ((($xi)) + 202|0);
     $398 = HEAP8[$397>>0]|0;
     $399 = $398&255;
     $400 = $sub;
     $401 = ((($400)) + 20|0);
     HEAP32[$401>>2] = $399;
     $402 = ((($xi)) + 204|0);
     $403 = HEAP8[$402>>0]|0;
     $404 = $403&255;
     $405 = $sub;
     $406 = ((($405)) + 24|0);
     HEAP32[$406>>2] = $404;
     $407 = ((($xi)) + 205|0);
     $408 = HEAP8[$407>>0]|0;
     $409 = $408&255;
     $410 = $sub;
     $411 = ((($410)) + 28|0);
     HEAP32[$411>>2] = $409;
     $412 = ((($xi)) + 203|0);
     $413 = HEAP8[$412>>0]|0;
     $414 = $413&255;
     $415 = $sub;
     $416 = ((($415)) + 32|0);
     HEAP32[$416>>2] = $414;
     $417 = $sample_num;
     $418 = $sub;
     $419 = ((($418)) + 40|0);
     HEAP32[$419>>2] = $417;
     $420 = $xxs;
     $421 = $j;
     $422 = (($xsh) + (($421*40)|0)|0);
     $423 = ((($422)) + 18|0);
     (_copy_adjust($420,$423,22)|0);
     $424 = $j;
     $425 = (($xsh) + (($424*40)|0)|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = $xxs;
     $428 = ((($427)) + 32|0);
     HEAP32[$428>>2] = $426;
     $429 = $j;
     $430 = (($xsh) + (($429*40)|0)|0);
     $431 = ((($430)) + 4|0);
     $432 = HEAP32[$431>>2]|0;
     $433 = $xxs;
     $434 = ((($433)) + 36|0);
     HEAP32[$434>>2] = $432;
     $435 = $j;
     $436 = (($xsh) + (($435*40)|0)|0);
     $437 = ((($436)) + 4|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = $j;
     $440 = (($xsh) + (($439*40)|0)|0);
     $441 = ((($440)) + 8|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = (($438) + ($442))|0;
     $444 = $xxs;
     $445 = ((($444)) + 40|0);
     HEAP32[$445>>2] = $443;
     $446 = $xxs;
     $447 = ((($446)) + 44|0);
     HEAP32[$447>>2] = 0;
     $448 = $j;
     $449 = (($xsh) + (($448*40)|0)|0);
     $450 = ((($449)) + 14|0);
     $451 = HEAP8[$450>>0]|0;
     $452 = $451&255;
     $453 = $452 & 16;
     $454 = ($453|0)!=(0);
     if ($454) {
      $455 = $xxs;
      $456 = ((($455)) + 44|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = $457 | 1;
      HEAP32[$456>>2] = $458;
      $459 = $xxs;
      $460 = ((($459)) + 32|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $461 >> 1;
      HEAP32[$460>>2] = $462;
      $463 = $xxs;
      $464 = ((($463)) + 36|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = $465 >> 1;
      HEAP32[$464>>2] = $466;
      $467 = $xxs;
      $468 = ((($467)) + 40|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = $469 >> 1;
      HEAP32[$468>>2] = $470;
     }
     $471 = $j;
     $472 = (($xsh) + (($471*40)|0)|0);
     $473 = ((($472)) + 14|0);
     $474 = HEAP8[$473>>0]|0;
     $475 = $474&255;
     $476 = $475 & 1;
     $477 = ($476|0)!=(0);
     $478 = $477 ? 2 : 0;
     $479 = $xxs;
     $480 = ((($479)) + 44|0);
     $481 = HEAP32[$480>>2]|0;
     $482 = $481 | $478;
     HEAP32[$480>>2] = $482;
     $483 = $j;
     $484 = (($xsh) + (($483*40)|0)|0);
     $485 = ((($484)) + 14|0);
     $486 = HEAP8[$485>>0]|0;
     $487 = $486&255;
     $488 = $487 & 2;
     $489 = ($488|0)!=(0);
     $490 = $489 ? 6 : 0;
     $491 = $xxs;
     $492 = ((($491)) + 44|0);
     $493 = HEAP32[$492>>2]|0;
     $494 = $493 | $490;
     HEAP32[$492>>2] = $494;
     $495 = $j;
     $496 = (($495) + 1)|0;
     $j = $496;
     $497 = $sample_num;
     $498 = (($497) + 1)|0;
     $sample_num = $498;
    }
    $j = 0;
    while(1) {
     $499 = $j;
     $500 = $xxi;
     $501 = ((($500)) + 36|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = ($499|0)<($502|0);
     if (!($503)) {
      break L16;
     }
     $504 = $j;
     $505 = $xxi;
     $506 = ((($505)) + 756|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = (($507) + ($504<<6)|0);
     $sub1 = $508;
     $flags = 1;
     $509 = $j;
     $510 = (($xsh) + (($509*40)|0)|0);
     $511 = ((($510)) + 17|0);
     $512 = HEAP8[$511>>0]|0;
     $513 = $512&255;
     $514 = ($513|0)==(173);
     $$ = $514 ? 16384 : 1;
     $flags = $$;
     $515 = $2;
     $516 = ($515|0)>(259);
     if ($516) {
      $517 = $1;
      $518 = $3;
      $519 = $flags;
      $520 = $sub1;
      $521 = ((($520)) + 40|0);
      $522 = HEAP32[$521>>2]|0;
      $523 = $mod;
      $524 = ((($523)) + 180|0);
      $525 = HEAP32[$524>>2]|0;
      $526 = (($525) + (($522*52)|0)|0);
      $527 = (_load_sample($517,$518,$519,$526,0)|0);
      $528 = ($527|0)<(0);
      if ($528) {
       label = 52;
       break L5;
      }
     }
     $529 = $j;
     $530 = (($529) + 1)|0;
     $j = $530;
    }
   } else {
    $531 = $3;
    $532 = HEAP32[$xih>>2]|0;
    $533 = (($532) - 33)|0;
    (_hio_seek($531,$533,1)|0);
   }
  } while(0);
  $534 = $i;
  $535 = (($534) + 1)|0;
  $i = $535;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 else if ((label|0) == 16) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 else if ((label|0) == 42) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 else if ((label|0) == 44) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 else if ((label|0) == 52) {
  $0 = -1;
  $549 = $0;
  STACKTOP = sp;return ($549|0);
 }
 else if ((label|0) == 56) {
  $536 = $mod;
  $537 = ((($536)) + 180|0);
  $538 = HEAP32[$537>>2]|0;
  $539 = $mod;
  $540 = ((($539)) + 144|0);
  $541 = $sample_num;
  $542 = (_realloc_samples($538,$540,$541)|0);
  $543 = $mod;
  $544 = ((($543)) + 180|0);
  HEAP32[$544>>2] = $542;
  $545 = $mod;
  $546 = ((($545)) + 180|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = ($547|0)==(0|0);
  if ($548) {
   $0 = -1;
   $549 = $0;
   STACKTOP = sp;return ($549|0);
  } else {
   $0 = 0;
   $549 = $0;
   STACKTOP = sp;return ($549|0);
  }
 }
 return (0)|0;
}
function _load_patterns($m,$version,$f) {
 $m = $m|0;
 $version = $version|0;
 $f = $f|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0;
 var $event = 0, $headsize = 0, $i = 0, $j = 0, $mod = 0, $pat = 0, $patbuf = 0, $r = 0, $size = 0, $t = 0, $xph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xph = sp + 36|0;
 $1 = $m;
 $2 = $version;
 $3 = $f;
 $4 = $1;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 128|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $mod;
 $10 = (_pattern_init($9)|0);
 $11 = ($10|0)<(0);
 if ($11) {
  $0 = -1;
  $477 = $0;
  STACKTOP = sp;return ($477|0);
 }
 $i = 0;
 L5: while(1) {
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 128|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) - 1)|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   label = 76;
   break;
  }
  $18 = $2;
  $19 = ($18|0)>(258);
  $20 = $19 ? 9 : 8;
  $headsize = $20;
  $21 = $3;
  $22 = (_hio_read32l($21)|0);
  HEAP32[$xph>>2] = $22;
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = ((($xph)) + 4|0);
  HEAP8[$25>>0] = $24;
  $26 = $2;
  $27 = ($26|0)>(258);
  $28 = $3;
  if ($27) {
   $29 = (_hio_read16l($28)|0);
   $30 = $29&65535;
   $35 = $30;
  } else {
   $31 = (_hio_read8($28)|0);
   $32 = $31&255;
   $33 = (($32) + 1)|0;
   $35 = $33;
  }
  $34 = $35&65535;
  $36 = ((($xph)) + 6|0);
  HEAP16[$36>>1] = $34;
  $37 = ((($xph)) + 6|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = ($39|0)>(256);
  if ($40) {
   break;
  }
  $41 = $3;
  $42 = (_hio_read16l($41)|0);
  $43 = ((($xph)) + 8|0);
  HEAP16[$43>>1] = $42;
  $44 = $3;
  $45 = HEAP32[$xph>>2]|0;
  $46 = $headsize;
  $47 = (($45) - ($46))|0;
  (_hio_seek($44,$47,1)|0);
  $48 = ((($xph)) + 6|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $r = $50;
  $51 = $r;
  $52 = ($51|0)==(0);
  $$ = $52 ? 256 : $50;
  $r = $$;
  $53 = $mod;
  $54 = $i;
  $55 = $r;
  $56 = (_pattern_tracks_alloc($53,$54,$55)|0);
  $57 = ($56|0)<(0);
  if ($57) {
   break;
  }
  $58 = ((($xph)) + 8|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = ($59<<16>>16)!=(0);
  if ($60) {
   $61 = ((($xph)) + 8|0);
   $62 = HEAP16[$61>>1]|0;
   $63 = $62&65535;
   $size = $63;
   $64 = $size;
   $65 = (_calloc(1,$64)|0);
   $patbuf = $65;
   $pat = $65;
   $66 = $patbuf;
   $67 = ($66|0)==(0|0);
   if ($67) {
    break;
   }
   $68 = $patbuf;
   $69 = $size;
   $70 = $3;
   (_hio_read($68,1,$69,$70)|0);
   $j = 0;
   while(1) {
    $71 = $j;
    $72 = $mod;
    $73 = ((($72)) + 136|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $r;
    $76 = Math_imul($74, $75)|0;
    $77 = ($71|0)<($76|0);
    if (!($77)) {
     break;
    }
    $78 = $j;
    $79 = $mod;
    $80 = ((($79)) + 136|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (($78|0) / ($81|0))&-1;
    $83 = $j;
    $84 = $mod;
    $85 = ((($84)) + 136|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($83|0) % ($86|0))&-1;
    $88 = $i;
    $89 = $1;
    $90 = ((($89)) + 168|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($88<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($93)) + 4|0);
    $95 = (($94) + ($87<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $1;
    $98 = ((($97)) + 172|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($96<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($101)) + 4|0);
    $103 = (($102) + ($82<<3)|0);
    $event = $103;
    $104 = $size;
    $105 = (($104) + -1)|0;
    $size = $105;
    $106 = ($105|0)<(0);
    if ($106) {
     label = 82;
     break L5;
    }
    $107 = $pat;
    $108 = ((($107)) + 1|0);
    $pat = $108;
    $109 = HEAP8[$107>>0]|0;
    $b = $109;
    $110 = $109&255;
    $111 = $110 & 128;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = $b;
     $114 = $113&255;
     $115 = $114 & 1;
     $116 = ($115|0)!=(0);
     if ($116) {
      $117 = $size;
      $118 = (($117) + -1)|0;
      $size = $118;
      $119 = ($118|0)<(0);
      if ($119) {
       label = 82;
       break L5;
      }
      $120 = $pat;
      $121 = ((($120)) + 1|0);
      $pat = $121;
      $122 = HEAP8[$120>>0]|0;
      $123 = $event;
      HEAP8[$123>>0] = $122;
     }
     $124 = $b;
     $125 = $124&255;
     $126 = $125 & 2;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = $size;
      $129 = (($128) + -1)|0;
      $size = $129;
      $130 = ($129|0)<(0);
      if ($130) {
       label = 82;
       break L5;
      }
      $131 = $pat;
      $132 = ((($131)) + 1|0);
      $pat = $132;
      $133 = HEAP8[$131>>0]|0;
      $134 = $event;
      $135 = ((($134)) + 1|0);
      HEAP8[$135>>0] = $133;
     }
     $136 = $b;
     $137 = $136&255;
     $138 = $137 & 4;
     $139 = ($138|0)!=(0);
     if ($139) {
      $140 = $size;
      $141 = (($140) + -1)|0;
      $size = $141;
      $142 = ($141|0)<(0);
      if ($142) {
       label = 82;
       break L5;
      }
      $143 = $pat;
      $144 = ((($143)) + 1|0);
      $pat = $144;
      $145 = HEAP8[$143>>0]|0;
      $146 = $event;
      $147 = ((($146)) + 2|0);
      HEAP8[$147>>0] = $145;
     }
     $148 = $b;
     $149 = $148&255;
     $150 = $149 & 8;
     $151 = ($150|0)!=(0);
     if ($151) {
      $152 = $size;
      $153 = (($152) + -1)|0;
      $size = $153;
      $154 = ($153|0)<(0);
      if ($154) {
       label = 82;
       break L5;
      }
      $155 = $pat;
      $156 = ((($155)) + 1|0);
      $pat = $156;
      $157 = HEAP8[$155>>0]|0;
      $158 = $event;
      $159 = ((($158)) + 3|0);
      HEAP8[$159>>0] = $157;
     }
     $160 = $b;
     $161 = $160&255;
     $162 = $161 & 16;
     $163 = ($162|0)!=(0);
     if ($163) {
      $164 = $size;
      $165 = (($164) + -1)|0;
      $size = $165;
      $166 = ($165|0)<(0);
      if ($166) {
       label = 82;
       break L5;
      }
      $167 = $pat;
      $168 = ((($167)) + 1|0);
      $pat = $168;
      $169 = HEAP8[$167>>0]|0;
      $170 = $event;
      $171 = ((($170)) + 4|0);
      HEAP8[$171>>0] = $169;
     }
    } else {
     $172 = $size;
     $173 = (($172) - 4)|0;
     $size = $173;
     $174 = $size;
     $175 = ($174|0)<(0);
     if ($175) {
      label = 82;
      break L5;
     }
     $176 = $b;
     $177 = $event;
     HEAP8[$177>>0] = $176;
     $178 = $pat;
     $179 = ((($178)) + 1|0);
     $pat = $179;
     $180 = HEAP8[$178>>0]|0;
     $181 = $event;
     $182 = ((($181)) + 1|0);
     HEAP8[$182>>0] = $180;
     $183 = $pat;
     $184 = ((($183)) + 1|0);
     $pat = $184;
     $185 = HEAP8[$183>>0]|0;
     $186 = $event;
     $187 = ((($186)) + 2|0);
     HEAP8[$187>>0] = $185;
     $188 = $pat;
     $189 = ((($188)) + 1|0);
     $pat = $189;
     $190 = HEAP8[$188>>0]|0;
     $191 = $event;
     $192 = ((($191)) + 3|0);
     HEAP8[$192>>0] = $190;
     $193 = $pat;
     $194 = ((($193)) + 1|0);
     $pat = $194;
     $195 = HEAP8[$193>>0]|0;
     $196 = $event;
     $197 = ((($196)) + 4|0);
     HEAP8[$197>>0] = $195;
    }
    $198 = $event;
    $199 = ((($198)) + 3|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    switch ($201|0) {
    case 32: case 31: case 30: case 28: case 26: case 24: case 23: case 22: case 19: case 18:  {
     $202 = $event;
     $203 = ((($202)) + 3|0);
     HEAP8[$203>>0] = 0;
     break;
    }
    default: {
    }
    }
    $204 = $event;
    $205 = ((($204)) + 3|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206&255;
    $208 = ($207|0)>(34);
    if ($208) {
     $209 = $event;
     $210 = ((($209)) + 3|0);
     HEAP8[$210>>0] = 0;
    }
    $211 = $event;
    $212 = HEAP8[$211>>0]|0;
    $213 = $212&255;
    $214 = ($213|0)==(97);
    $215 = $event;
    do {
     if ($214) {
      $216 = ((($215)) + 3|0);
      $217 = HEAP8[$216>>0]|0;
      $218 = $217&255;
      $219 = ($218|0)==(14);
      if ($219) {
       $220 = $event;
       $221 = ((($220)) + 4|0);
       $222 = HEAP8[$221>>0]|0;
       $223 = $222&255;
       $224 = $223 & 240;
       $225 = $224 >> 4;
       $226 = ($225|0)==(13);
       if ($226) {
        $227 = $event;
        HEAP8[$227>>0] = -127;
        break;
       }
      }
      $228 = $event;
      $229 = ((($228)) + 1|0);
      $230 = HEAP8[$229>>0]|0;
      $231 = $230&255;
      $232 = ($231|0)!=(0);
      $233 = $232 ? 131 : 129;
      $234 = $233&255;
      $235 = $event;
      HEAP8[$235>>0] = $234;
     } else {
      $236 = HEAP8[$215>>0]|0;
      $237 = $236&255;
      $238 = ($237|0)>(0);
      if ($238) {
       $239 = $event;
       $240 = HEAP8[$239>>0]|0;
       $241 = $240&255;
       $242 = (($241) + 12)|0;
       $243 = $242&255;
       HEAP8[$239>>0] = $243;
      }
     }
    } while(0);
    $244 = $event;
    $245 = ((($244)) + 3|0);
    $246 = HEAP8[$245>>0]|0;
    $247 = $246&255;
    $248 = ($247|0)==(14);
    if ($248) {
     $249 = $event;
     $250 = ((($249)) + 4|0);
     $251 = HEAP8[$250>>0]|0;
     $252 = $251&255;
     if ((($252|0) == 115) | (($252|0) == 67)) {
      $253 = $event;
      $254 = ((($253)) + 4|0);
      $255 = HEAP8[$254>>0]|0;
      $256 = (($255) + -1)<<24>>24;
      HEAP8[$254>>0] = $256;
     }
    }
    $257 = $event;
    $258 = ((($257)) + 2|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = ($259<<24>>24)!=(0);
    L63: do {
     if ($260) {
      $261 = $event;
      $262 = ((($261)) + 2|0);
      $263 = HEAP8[$262>>0]|0;
      $264 = $263&255;
      $265 = ($264|0)>=(16);
      do {
       if ($265) {
        $266 = $event;
        $267 = ((($266)) + 2|0);
        $268 = HEAP8[$267>>0]|0;
        $269 = $268&255;
        $270 = ($269|0)<=(80);
        if (!($270)) {
         break;
        }
        $271 = $event;
        $272 = ((($271)) + 2|0);
        $273 = HEAP8[$272>>0]|0;
        $274 = $273&255;
        $275 = (($274) - 15)|0;
        $276 = $275&255;
        HEAP8[$272>>0] = $276;
        break L63;
       }
      } while(0);
      $277 = $event;
      $278 = ((($277)) + 2|0);
      $279 = HEAP8[$278>>0]|0;
      $280 = $279&255;
      $281 = $280 >> 4;
      L69: do {
       switch ($281|0) {
       case 15:  {
        $378 = $event;
        $379 = ((($378)) + 5|0);
        HEAP8[$379>>0] = 3;
        $380 = $event;
        $381 = ((($380)) + 2|0);
        $382 = HEAP8[$381>>0]|0;
        $383 = $382&255;
        $384 = (($383) - 240)|0;
        $385 = $384 << 4;
        $386 = $385&255;
        $387 = $event;
        $388 = ((($387)) + 6|0);
        HEAP8[$388>>0] = $386;
        $389 = $event;
        $390 = ((($389)) + 3|0);
        $391 = HEAP8[$390>>0]|0;
        $392 = $391&255;
        $393 = ($392|0)==(3);
        if ($393) {
         label = 63;
        } else {
         $394 = $event;
         $395 = ((($394)) + 3|0);
         $396 = HEAP8[$395>>0]|0;
         $397 = $396&255;
         $398 = ($397|0)==(5);
         if ($398) {
          label = 63;
         }
        }
        do {
         if ((label|0) == 63) {
          label = 0;
          $399 = $event;
          $400 = ((($399)) + 3|0);
          $401 = HEAP8[$400>>0]|0;
          $402 = $401&255;
          $403 = ($402|0)==(3);
          $404 = $event;
          $405 = ((($404)) + 3|0);
          if ($403) {
           HEAP8[$405>>0] = 0;
          } else {
           HEAP8[$405>>0] = 10;
          }
          $406 = $event;
          $407 = ((($406)) + 4|0);
          HEAP8[$407>>0] = 0;
          $408 = $event;
          $409 = ((($408)) + 6|0);
          $410 = HEAP8[$409>>0]|0;
          $411 = $410&255;
          $412 = ($411|0)<(128);
          $413 = $event;
          $414 = ((($413)) + 6|0);
          if ($412) {
           $415 = HEAP8[$414>>0]|0;
           $416 = $415&255;
           $417 = $416 << 1;
           $418 = $417&255;
           HEAP8[$414>>0] = $418;
           break;
          } else {
           HEAP8[$414>>0] = -1;
           break;
          }
         }
        } while(0);
        $419 = $event;
        $420 = ((($419)) + 3|0);
        $421 = HEAP8[$420>>0]|0;
        $422 = $421&255;
        $423 = ($422|0)==(9);
        if (!($423)) {
         break L69;
        }
        $424 = $event;
        $425 = ((($424)) + 5|0);
        $426 = HEAP8[$425>>0]|0;
        $427 = $426&255;
        $428 = ($427|0)==(3);
        if (!($428)) {
         break L69;
        }
        $429 = $event;
        $430 = ((($429)) + 4|0);
        HEAP8[$430>>0] = 0;
        $431 = $event;
        $432 = ((($431)) + 3|0);
        HEAP8[$432>>0] = 0;
        break;
       }
       case 7:  {
        $292 = $event;
        $293 = ((($292)) + 5|0);
        HEAP8[$293>>0] = -92;
        $294 = $event;
        $295 = ((($294)) + 2|0);
        $296 = HEAP8[$295>>0]|0;
        $297 = $296&255;
        $298 = (($297) - 112)|0;
        $299 = $298 << 4;
        $300 = $299&255;
        $301 = $event;
        $302 = ((($301)) + 6|0);
        HEAP8[$302>>0] = $300;
        break;
       }
       case 10:  {
        $325 = $event;
        $326 = ((($325)) + 5|0);
        HEAP8[$326>>0] = 4;
        $327 = $event;
        $328 = ((($327)) + 2|0);
        $329 = HEAP8[$328>>0]|0;
        $330 = $329&255;
        $331 = (($330) - 160)|0;
        $332 = $331 << 4;
        $333 = $332&255;
        $334 = $event;
        $335 = ((($334)) + 6|0);
        HEAP8[$335>>0] = $333;
        break;
       }
       case 8:  {
        $303 = $event;
        $304 = ((($303)) + 5|0);
        HEAP8[$304>>0] = 14;
        $305 = $event;
        $306 = ((($305)) + 2|0);
        $307 = HEAP8[$306>>0]|0;
        $308 = $307&255;
        $309 = (($308) - 128)|0;
        $310 = 176 | $309;
        $311 = $310&255;
        $312 = $event;
        $313 = ((($312)) + 6|0);
        HEAP8[$313>>0] = $311;
        break;
       }
       case 9:  {
        $314 = $event;
        $315 = ((($314)) + 5|0);
        HEAP8[$315>>0] = 14;
        $316 = $event;
        $317 = ((($316)) + 2|0);
        $318 = HEAP8[$317>>0]|0;
        $319 = $318&255;
        $320 = (($319) - 144)|0;
        $321 = 160 | $320;
        $322 = $321&255;
        $323 = $event;
        $324 = ((($323)) + 6|0);
        HEAP8[$324>>0] = $322;
        break;
       }
       case 12:  {
        $346 = $event;
        $347 = ((($346)) + 5|0);
        HEAP8[$347>>0] = 8;
        $348 = $event;
        $349 = ((($348)) + 2|0);
        $350 = HEAP8[$349>>0]|0;
        $351 = $350&255;
        $352 = (($351) - 192)|0;
        $353 = $352 << 4;
        $354 = $353&255;
        $355 = $event;
        $356 = ((($355)) + 6|0);
        HEAP8[$356>>0] = $354;
        break;
       }
       case 14:  {
        $368 = $event;
        $369 = ((($368)) + 5|0);
        HEAP8[$369>>0] = -75;
        $370 = $event;
        $371 = ((($370)) + 2|0);
        $372 = HEAP8[$371>>0]|0;
        $373 = $372&255;
        $374 = (($373) - 224)|0;
        $375 = $374&255;
        $376 = $event;
        $377 = ((($376)) + 6|0);
        HEAP8[$377>>0] = $375;
        break;
       }
       case 13:  {
        $357 = $event;
        $358 = ((($357)) + 5|0);
        HEAP8[$358>>0] = -75;
        $359 = $event;
        $360 = ((($359)) + 2|0);
        $361 = HEAP8[$360>>0]|0;
        $362 = $361&255;
        $363 = (($362) - 208)|0;
        $364 = $363 << 4;
        $365 = $364&255;
        $366 = $event;
        $367 = ((($366)) + 6|0);
        HEAP8[$367>>0] = $365;
        break;
       }
       case 11:  {
        $336 = $event;
        $337 = ((($336)) + 5|0);
        HEAP8[$337>>0] = 4;
        $338 = $event;
        $339 = ((($338)) + 2|0);
        $340 = HEAP8[$339>>0]|0;
        $341 = $340&255;
        $342 = (($341) - 176)|0;
        $343 = $342&255;
        $344 = $event;
        $345 = ((($344)) + 6|0);
        HEAP8[$345>>0] = $343;
        break;
       }
       case 6:  {
        $282 = $event;
        $283 = ((($282)) + 5|0);
        HEAP8[$283>>0] = -92;
        $284 = $event;
        $285 = ((($284)) + 2|0);
        $286 = HEAP8[$285>>0]|0;
        $287 = $286&255;
        $288 = (($287) - 96)|0;
        $289 = $288&255;
        $290 = $event;
        $291 = ((($290)) + 6|0);
        HEAP8[$291>>0] = $289;
        break;
       }
       default: {
       }
       }
      } while(0);
      $433 = $event;
      $434 = ((($433)) + 2|0);
      HEAP8[$434>>0] = 0;
     }
    } while(0);
    $435 = $j;
    $436 = (($435) + 1)|0;
    $j = $436;
   }
   $437 = $patbuf;
   _free($437);
  }
  $438 = $i;
  $439 = (($438) + 1)|0;
  $i = $439;
 }
 if ((label|0) == 76) {
  $440 = $i;
  $441 = $mod;
  $442 = ((($441)) + 136|0);
  $443 = HEAP32[$442>>2]|0;
  $444 = Math_imul($440, $443)|0;
  $t = $444;
  $445 = $mod;
  $446 = $i;
  $447 = (_pattern_alloc($445,$446)|0);
  $448 = ($447|0)<(0);
  if (!($448)) {
   $449 = $i;
   $450 = $mod;
   $451 = ((($450)) + 168|0);
   $452 = HEAP32[$451>>2]|0;
   $453 = (($452) + ($449<<2)|0);
   $454 = HEAP32[$453>>2]|0;
   HEAP32[$454>>2] = 64;
   $455 = $mod;
   $456 = $t;
   $457 = (_track_alloc($455,$456,64)|0);
   $458 = ($457|0)<(0);
   if (!($458)) {
    $j = 0;
    while(1) {
     $459 = $j;
     $460 = $mod;
     $461 = ((($460)) + 136|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = ($459|0)<($462|0);
     if (!($463)) {
      break;
     }
     $464 = $t;
     $465 = $j;
     $466 = $i;
     $467 = $mod;
     $468 = ((($467)) + 168|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = (($469) + ($466<<2)|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = ((($471)) + 4|0);
     $473 = (($472) + ($465<<2)|0);
     HEAP32[$473>>2] = $464;
     $474 = $j;
     $475 = (($474) + 1)|0;
     $j = $475;
    }
    $0 = 0;
    $477 = $0;
    STACKTOP = sp;return ($477|0);
   }
  }
 }
 else if ((label|0) == 82) {
  $476 = $patbuf;
  _free($476);
 }
 $0 = -1;
 $477 = $0;
 STACKTOP = sp;return ($477|0);
}
function _mod_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $num_pat = 0, $or$cond = 0, $pat_buf = 0, $size = 0, $smp_size = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 1064|0;
 $pat_buf = sp + 40|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1080)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,4,$7)|0);
 $9 = ($8>>>0)<(4);
 if ($9) {
  $0 = -1;
  $147 = $0;
  STACKTOP = sp;return ($147|0);
 }
 $10 = ((($buf)) + 2|0);
 $11 = (_strncmp($10,1832,2)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  label = 7;
 } else {
  $13 = HEAP8[$buf>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_isdigit($14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = ((($buf)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   $20 = (_isdigit($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = HEAP8[$buf>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = (($23) - 48)|0;
    $25 = ($24*10)|0;
    $26 = ((($buf)) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = (($25) + ($28))|0;
    $30 = (($29) - 48)|0;
    $i = $30;
    $31 = $i;
    $32 = ($31|0)>(0);
    $33 = $i;
    $34 = ($33|0)<=(32);
    $or$cond = $32 & $34;
    if (!($or$cond)) {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 L9: do {
  if ((label|0) == 7) {
   $35 = ((($buf)) + 1|0);
   $36 = (_strncmp($35,1840,3)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $38 = HEAP8[$buf>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = (_isdigit($39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = HEAP8[$buf>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = (($43) - 48)|0;
     $45 = ($44|0)!=(0);
     if ($45) {
      break;
     }
    }
   }
   $i = 0;
   while(1) {
    $46 = $i;
    $47 = (1456 + ($46<<4)|0);
    $48 = ((($47)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0);
    if (!($50)) {
     break;
    }
    $51 = $i;
    $52 = (1456 + ($51<<4)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_memcmp($buf,$53,4)|0);
    $55 = ($54|0)!=(0);
    if (!($55)) {
     break;
    }
    $56 = $i;
    $57 = (($56) + 1)|0;
    $i = $57;
   }
   $58 = $i;
   $59 = (1456 + ($58<<4)|0);
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if ($62) {
    $0 = -1;
    $147 = $0;
    STACKTOP = sp;return ($147|0);
   }
   $63 = $1;
   $64 = $3;
   $65 = (($64) + 20)|0;
   (_hio_seek($63,$65,0)|0);
   $i = 0;
   while(1) {
    $66 = $i;
    $67 = ($66|0)<(31);
    $68 = $1;
    if (!($67)) {
     label = 23;
     break;
    }
    (_hio_seek($68,22,1)|0);
    $69 = $1;
    (_hio_read16b($69)|0);
    $70 = $1;
    $71 = (_hio_read8($70)|0);
    $72 = $71&255;
    $73 = $72 & 240;
    $74 = ($73|0)!=(0);
    if ($74) {
     label = 19;
     break;
    }
    $75 = $1;
    $76 = (_hio_read8($75)|0);
    $77 = $76&255;
    $78 = ($77|0)>(64);
    if ($78) {
     label = 21;
     break;
    }
    $79 = $1;
    (_hio_read16b($79)|0);
    $80 = $1;
    (_hio_read16b($80)|0);
    $81 = $i;
    $82 = (($81) + 1)|0;
    $i = $82;
   }
   if ((label|0) == 19) {
    $0 = -1;
    $147 = $0;
    STACKTOP = sp;return ($147|0);
   }
   else if ((label|0) == 21) {
    $0 = -1;
    $147 = $0;
    STACKTOP = sp;return ($147|0);
   }
   else if ((label|0) == 23) {
    $83 = (_hio_size($68)|0);
    $size = $83;
    $smp_size = 0;
    $84 = $1;
    $85 = $3;
    $86 = (($85) + 20)|0;
    (_hio_seek($84,$86,0)|0);
    $i = 0;
    while(1) {
     $87 = $i;
     $88 = ($87|0)<(31);
     if (!($88)) {
      break;
     }
     $89 = $1;
     (_hio_seek($89,22,1)|0);
     $90 = $1;
     $91 = (_hio_read16b($90)|0);
     $92 = $91&65535;
     $93 = $92<<1;
     $94 = $smp_size;
     $95 = (($94) + ($93))|0;
     $smp_size = $95;
     $96 = $1;
     (_hio_seek($96,6,1)|0);
     $97 = $i;
     $98 = (($97) + 1)|0;
     $i = $98;
    }
    $num_pat = 0;
    $99 = $1;
    $100 = $3;
    $101 = (($100) + 952)|0;
    (_hio_seek($99,$101,0)|0);
    $i = 0;
    while(1) {
     $102 = $i;
     $103 = ($102|0)<(128);
     if (!($103)) {
      break;
     }
     $104 = $1;
     $105 = (_hio_read8($104)|0);
     $x = $105;
     $106 = $x;
     $107 = $106&255;
     $108 = ($107|0)>(127);
     if ($108) {
      break;
     }
     $109 = $x;
     $110 = $109&255;
     $111 = $num_pat;
     $112 = ($110|0)>($111|0);
     if ($112) {
      $113 = $x;
      $114 = $113&255;
      $num_pat = $114;
     }
     $115 = $i;
     $116 = (($115) + 1)|0;
     $i = $116;
    }
    $117 = $num_pat;
    $118 = (($117) + 1)|0;
    $num_pat = $118;
    $119 = $3;
    $120 = (($119) + 1084)|0;
    $121 = $num_pat;
    $122 = ($121*768)|0;
    $123 = (($120) + ($122))|0;
    $124 = $smp_size;
    $125 = (($123) + ($124))|0;
    $126 = $size;
    $127 = ($125|0)==($126|0);
    if ($127) {
     $0 = -1;
     $147 = $0;
     STACKTOP = sp;return ($147|0);
    }
    $i = 0;
    while(1) {
     $128 = $i;
     $129 = $num_pat;
     $130 = ($128|0)<($129|0);
     if (!($130)) {
      break L9;
     }
     $131 = $1;
     $132 = $3;
     $133 = (($132) + 1084)|0;
     $134 = $i;
     $135 = $134<<10;
     $136 = (($133) + ($135))|0;
     (_hio_seek($131,$136,0)|0);
     $137 = $1;
     (_hio_read($pat_buf,1024,1,$137)|0);
     $138 = (_validate_pattern($pat_buf)|0);
     $139 = ($138|0)<(0);
     if ($139) {
      break;
     }
     $140 = $i;
     $141 = (($140) + 1)|0;
     $i = $141;
    }
    $0 = -1;
    $147 = $0;
    STACKTOP = sp;return ($147|0);
   }
  }
 } while(0);
 $142 = $1;
 $143 = $3;
 $144 = (($143) + 0)|0;
 (_hio_seek($142,$144,0)|0);
 $145 = $1;
 $146 = $2;
 _read_title($145,$146,20);
 $0 = 0;
 $147 = $0;
 STACKTOP = sp;return ($147|0);
}
function _mod_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $detected = 0, $event = 0, $flags = 0, $fxp = 0, $fxt = 0;
 var $has_loop_0 = 0, $has_vol_in_empty_ins = 0, $i = 0, $idbuffer = 0, $j = 0, $magic = 0, $mh = 0, $mod = 0, $mod_event = 0, $num = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $out_of_range = 0, $pathname = 0, $period = 0;
 var $pos = 0, $pos1 = 0, $pos2 = 0, $ptkloop = 0, $ptsong = 0, $s = 0, $smp_size = 0, $sn = 0, $tracker = 0, $tracker_id = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $wow = 0, $x = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 16|0;
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 128|0;
 $mod_event = sp + 5624|0;
 $pathname = sp + 1528|0;
 $magic = sp + 1520|0;
 $idbuffer = sp + 1488|0;
 $sn = sp + 1224|0;
 $buf = sp + 1212|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ptsong = 0;
 _memset(($pathname|0),0,4096)|0;
 $tracker = 1792;
 $detected = 0;
 $ptkloop = 0;
 $tracker_id = 0;
 $has_loop_0 = 0;
 $has_vol_in_empty_ins = 0;
 $out_of_range = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $mod;
 $8 = ((($7)) + 140|0);
 HEAP32[$8>>2] = 31;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 $14 = $mod;
 $15 = ((($14)) + 136|0);
 HEAP32[$15>>2] = 0;
 $smp_size = 0;
 $16 = $1;
 $17 = ((($16)) + 1284|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 8192;
 HEAP32[$17>>2] = $19;
 $20 = $2;
 (_hio_read($mh,20,1,$20)|0);
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = ($21|0)<(31);
  if (!($22)) {
   break;
  }
  $23 = $i;
  $24 = ((($mh)) + 20|0);
  $25 = (($24) + (($23*30)|0)|0);
  $26 = $2;
  (_hio_read($25,22,1,$26)|0);
  $27 = $2;
  $28 = (_hio_read16b($27)|0);
  $29 = $i;
  $30 = ((($mh)) + 20|0);
  $31 = (($30) + (($29*30)|0)|0);
  $32 = ((($31)) + 22|0);
  HEAP16[$32>>1] = $28;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $i;
  $36 = ((($mh)) + 20|0);
  $37 = (($36) + (($35*30)|0)|0);
  $38 = ((($37)) + 24|0);
  HEAP8[$38>>0] = $34;
  $39 = $2;
  $40 = (_hio_read8($39)|0);
  $41 = $i;
  $42 = ((($mh)) + 20|0);
  $43 = (($42) + (($41*30)|0)|0);
  $44 = ((($43)) + 25|0);
  HEAP8[$44>>0] = $40;
  $45 = $2;
  $46 = (_hio_read16b($45)|0);
  $47 = $i;
  $48 = ((($mh)) + 20|0);
  $49 = (($48) + (($47*30)|0)|0);
  $50 = ((($49)) + 26|0);
  HEAP16[$50>>1] = $46;
  $51 = $2;
  $52 = (_hio_read16b($51)|0);
  $53 = $i;
  $54 = ((($mh)) + 20|0);
  $55 = (($54) + (($53*30)|0)|0);
  $56 = ((($55)) + 28|0);
  HEAP16[$56>>1] = $52;
  $57 = $i;
  $58 = ((($mh)) + 20|0);
  $59 = (($58) + (($57*30)|0)|0);
  $60 = ((($59)) + 22|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = $62<<1;
  $64 = $smp_size;
  $65 = (($64) + ($63))|0;
  $smp_size = $65;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = $2;
 $69 = (_hio_read8($68)|0);
 $70 = ((($mh)) + 950|0);
 HEAP8[$70>>0] = $69;
 $71 = $2;
 $72 = (_hio_read8($71)|0);
 $73 = ((($mh)) + 951|0);
 HEAP8[$73>>0] = $72;
 $74 = ((($mh)) + 952|0);
 $75 = $2;
 (_hio_read($74,128,1,$75)|0);
 ;HEAP8[$magic>>0]=0|0;HEAP8[$magic+1>>0]=0|0;HEAP8[$magic+2>>0]=0|0;HEAP8[$magic+3>>0]=0|0;HEAP8[$magic+4>>0]=0|0;HEAP8[$magic+5>>0]=0|0;HEAP8[$magic+6>>0]=0|0;HEAP8[$magic+7>>0]=0|0;
 $76 = $2;
 (_hio_read($magic,4,1,$76)|0);
 $i = 0;
 while(1) {
  $77 = $i;
  $78 = (1456 + ($77<<4)|0);
  $79 = ((($78)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0);
  if (!($81)) {
   break;
  }
  $82 = $i;
  $83 = (1456 + ($82<<4)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_strncmp($magic,$84,4)|0);
  $86 = ($85|0)!=(0);
  $87 = $i;
  if (!($86)) {
   label = 7;
   break;
  }
  $101 = (($87) + 1)|0;
  $i = $101;
 }
 if ((label|0) == 7) {
  $88 = (1456 + ($87<<4)|0);
  $89 = ((($88)) + 12|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $mod;
  $92 = ((($91)) + 136|0);
  HEAP32[$92>>2] = $90;
  $93 = $i;
  $94 = (1456 + ($93<<4)|0);
  $95 = ((($94)) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $tracker_id = $96;
  $97 = $i;
  $98 = (1456 + ($97<<4)|0);
  $99 = ((($98)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $detected = $100;
 }
 $102 = $mod;
 $103 = ((($102)) + 136|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  $106 = ((($magic)) + 2|0);
  $107 = (_strncmp($106,1832,2)|0);
  $108 = ($107|0)!=(0);
  if ($108) {
   label = 14;
  } else {
   $109 = HEAP8[$magic>>0]|0;
   $110 = $109 << 24 >> 24;
   $111 = (_isdigit($110)|0);
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = ((($magic)) + 1|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114 << 24 >> 24;
    $116 = (_isdigit($115)|0);
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = HEAP8[$magic>>0]|0;
     $119 = $118 << 24 >> 24;
     $120 = (($119) - 48)|0;
     $121 = ($120*10)|0;
     $122 = ((($magic)) + 1|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123 << 24 >> 24;
     $125 = (($121) + ($124))|0;
     $126 = (($125) - 48)|0;
     $127 = $mod;
     $128 = ((($127)) + 136|0);
     HEAP32[$128>>2] = $126;
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
  }
  do {
   if ((label|0) == 14) {
    $129 = ((($magic)) + 1|0);
    $130 = (_strncmp($129,1840,3)|0);
    $131 = ($130|0)!=(0);
    if (!($131)) {
     $132 = HEAP8[$magic>>0]|0;
     $133 = $132 << 24 >> 24;
     $134 = (_isdigit($133)|0);
     $135 = ($134|0)!=(0);
     if ($135) {
      $136 = HEAP8[$magic>>0]|0;
      $137 = $136 << 24 >> 24;
      $138 = (($137) - 48)|0;
      $139 = $mod;
      $140 = ((($139)) + 136|0);
      HEAP32[$140>>2] = $138;
      break;
     }
    }
    $0 = -1;
    $953 = $0;
    STACKTOP = sp;return ($953|0);
   }
  } while(0);
  $141 = $mod;
  $142 = ((($141)) + 136|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $143 & 1;
  $145 = ($144|0)!=(0);
  $146 = $145 ? 6 : 4;
  $tracker_id = $146;
  $detected = 1;
 }
 $147 = $mod;
 (_strncpy(($147|0),($mh|0),20)|0);
 $148 = ((($mh)) + 950|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = $mod;
 $152 = ((($151)) + 156|0);
 HEAP32[$152>>2] = $150;
 $153 = $mod;
 $154 = ((($153)) + 160|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = $mod;
 $157 = ((($156)) + 156|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($155|0)>=($158|0);
 if ($159) {
  $160 = $mod;
  $161 = ((($160)) + 160|0);
  HEAP32[$161>>2] = 0;
 }
 $162 = $mod;
 $163 = ((($162)) + 952|0);
 $164 = ((($mh)) + 952|0);
 dest=$163; src=$164; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $165 = $i;
  $166 = ($165|0)<(128);
  if (!($166)) {
   break;
  }
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 952|0);
  $170 = (($169) + ($167)|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = ($172|0)>(127);
  if ($173) {
   break;
  }
  $174 = $i;
  $175 = $mod;
  $176 = ((($175)) + 952|0);
  $177 = (($176) + ($174)|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = $mod;
  $181 = ((($180)) + 128|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ($179|0)>($182|0);
  if ($183) {
   $184 = $i;
   $185 = $mod;
   $186 = ((($185)) + 952|0);
   $187 = (($186) + ($184)|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = $mod;
   $191 = ((($190)) + 128|0);
   HEAP32[$191>>2] = $189;
  }
  $192 = $i;
  $193 = (($192) + 1)|0;
  $i = $193;
 }
 $194 = $mod;
 $195 = ((($194)) + 128|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (($196) + 1)|0;
 HEAP32[$195>>2] = $197;
 $198 = $mod;
 $199 = (_instrument_init($198)|0);
 $200 = ($199|0)<(0);
 if ($200) {
  $0 = -1;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 $i = 0;
 while(1) {
  $201 = $i;
  $202 = $mod;
  $203 = ((($202)) + 140|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($201|0)<($204|0);
  if (!($205)) {
   break;
  }
  $206 = $mod;
  $207 = $i;
  $208 = (_subinstrument_alloc($206,$207,1)|0);
  $209 = ($208|0)<(0);
  if ($209) {
   label = 32;
   break;
  }
  $210 = $i;
  $211 = ((($mh)) + 20|0);
  $212 = (($211) + (($210*30)|0)|0);
  $213 = ((($212)) + 22|0);
  $214 = HEAP16[$213>>1]|0;
  $215 = $214&65535;
  $216 = ($215|0)>=(32768);
  if ($216) {
   $tracker_id = 11;
   $detected = 1;
  }
  $217 = $i;
  $218 = ((($mh)) + 20|0);
  $219 = (($218) + (($217*30)|0)|0);
  $220 = ((($219)) + 22|0);
  $221 = HEAP16[$220>>1]|0;
  $222 = $221&65535;
  $223 = $222<<1;
  $224 = $i;
  $225 = $mod;
  $226 = ((($225)) + 180|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + (($224*52)|0)|0);
  $229 = ((($228)) + 32|0);
  HEAP32[$229>>2] = $223;
  $230 = $i;
  $231 = ((($mh)) + 20|0);
  $232 = (($231) + (($230*30)|0)|0);
  $233 = ((($232)) + 26|0);
  $234 = HEAP16[$233>>1]|0;
  $235 = $234&65535;
  $236 = $235<<1;
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 180|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*52)|0)|0);
  $242 = ((($241)) + 36|0);
  HEAP32[$242>>2] = $236;
  $243 = $i;
  $244 = $mod;
  $245 = ((($244)) + 180|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($246) + (($243*52)|0)|0);
  $248 = ((($247)) + 36|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $i;
  $251 = ((($mh)) + 20|0);
  $252 = (($251) + (($250*30)|0)|0);
  $253 = ((($252)) + 28|0);
  $254 = HEAP16[$253>>1]|0;
  $255 = $254&65535;
  $256 = $255<<1;
  $257 = (($249) + ($256))|0;
  $258 = $i;
  $259 = $mod;
  $260 = ((($259)) + 180|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (($261) + (($258*52)|0)|0);
  $263 = ((($262)) + 40|0);
  HEAP32[$263>>2] = $257;
  $264 = $i;
  $265 = $mod;
  $266 = ((($265)) + 180|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = (($267) + (($264*52)|0)|0);
  $269 = ((($268)) + 40|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $i;
  $272 = $mod;
  $273 = ((($272)) + 180|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + (($271*52)|0)|0);
  $276 = ((($275)) + 32|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($270|0)>($277|0);
  if ($278) {
   $279 = $i;
   $280 = $mod;
   $281 = ((($280)) + 180|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + (($279*52)|0)|0);
   $284 = ((($283)) + 32|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $i;
   $287 = $mod;
   $288 = ((($287)) + 180|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (($289) + (($286*52)|0)|0);
   $291 = ((($290)) + 40|0);
   HEAP32[$291>>2] = $285;
  }
  $292 = $i;
  $293 = ((($mh)) + 20|0);
  $294 = (($293) + (($292*30)|0)|0);
  $295 = ((($294)) + 28|0);
  $296 = HEAP16[$295>>1]|0;
  $297 = $296&65535;
  $298 = ($297|0)>(1);
  if ($298) {
   $299 = $i;
   $300 = $mod;
   $301 = ((($300)) + 180|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = (($302) + (($299*52)|0)|0);
   $304 = ((($303)) + 40|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ($305|0)>=(4);
   $307 = $306;
  } else {
   $307 = 0;
  }
  $308 = $307 ? 2 : 0;
  $309 = $i;
  $310 = $mod;
  $311 = ((($310)) + 180|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = (($312) + (($309*52)|0)|0);
  $314 = ((($313)) + 44|0);
  HEAP32[$314>>2] = $308;
  $315 = $i;
  $316 = ((($mh)) + 20|0);
  $317 = (($316) + (($315*30)|0)|0);
  $318 = ((($317)) + 24|0);
  $319 = HEAP8[$318>>0]|0;
  $320 = $319 << 24 >> 24;
  $321 = $320 << 4;
  $322 = $321&255;
  $323 = $322 << 24 >> 24;
  $324 = $i;
  $325 = $mod;
  $326 = ((($325)) + 176|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = (($327) + (($324*764)|0)|0);
  $329 = ((($328)) + 756|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = ((($330)) + 16|0);
  HEAP32[$331>>2] = $323;
  $332 = $i;
  $333 = ((($mh)) + 20|0);
  $334 = (($333) + (($332*30)|0)|0);
  $335 = ((($334)) + 25|0);
  $336 = HEAP8[$335>>0]|0;
  $337 = $336 << 24 >> 24;
  $338 = $i;
  $339 = $mod;
  $340 = ((($339)) + 176|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = (($341) + (($338*764)|0)|0);
  $343 = ((($342)) + 756|0);
  $344 = HEAP32[$343>>2]|0;
  HEAP32[$344>>2] = $337;
  $345 = $i;
  $346 = $mod;
  $347 = ((($346)) + 176|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = (($348) + (($345*764)|0)|0);
  $350 = ((($349)) + 756|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = ((($351)) + 8|0);
  HEAP32[$352>>2] = 128;
  $353 = $i;
  $354 = $i;
  $355 = $mod;
  $356 = ((($355)) + 176|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = (($357) + (($354*764)|0)|0);
  $359 = ((($358)) + 756|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = ((($360)) + 40|0);
  HEAP32[$361>>2] = $353;
  $362 = $mod;
  $363 = $i;
  $364 = $i;
  $365 = ((($mh)) + 20|0);
  $366 = (($365) + (($364*30)|0)|0);
  (_instrument_name($362,$363,$366,22)|0);
  $367 = $i;
  $368 = $mod;
  $369 = ((($368)) + 180|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($370) + (($367*52)|0)|0);
  $372 = ((($371)) + 32|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = ($373|0)>(0);
  if ($374) {
   $375 = $i;
   $376 = $mod;
   $377 = ((($376)) + 176|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = (($378) + (($375*764)|0)|0);
   $380 = ((($379)) + 36|0);
   HEAP32[$380>>2] = 1;
  }
  $381 = $i;
  $382 = (($381) + 1)|0;
  $i = $382;
 }
 if ((label|0) == 32) {
  $0 = -1;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 $383 = $detected;
 $384 = ($383|0)!=(0);
 L62: do {
  if (!($384)) {
   $385 = $mod;
   $386 = ((($385)) + 128|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = $387<<2;
   $389 = $mod;
   $390 = ((($389)) + 136|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = Math_imul($388, $391)|0;
   $393 = $392<<6;
   $394 = (1084 + ($393))|0;
   $395 = $smp_size;
   $396 = (($394) + ($395))|0;
   $397 = $1;
   $398 = ((($397)) + 1240|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = ($396|0)<($399|0);
   if ($400) {
    $401 = $2;
    $402 = (_hio_tell($401)|0);
    $pos = $402;
    $403 = $2;
    $404 = $3;
    $405 = (($404) + 1084)|0;
    $406 = $mod;
    $407 = ((($406)) + 128|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = $408<<2;
    $410 = $mod;
    $411 = ((($410)) + 136|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = Math_imul($409, $412)|0;
    $414 = $413<<6;
    $415 = (($405) + ($414))|0;
    $416 = $smp_size;
    $417 = (($415) + ($416))|0;
    (_hio_seek($403,$417,0)|0);
    $418 = $2;
    (_hio_read($idbuffer,1,4,$418)|0);
    $419 = $2;
    $420 = $3;
    $421 = $pos;
    $422 = (($420) + ($421))|0;
    (_hio_seek($419,$422,0)|0);
    $423 = (_memcmp($idbuffer,1848,4)|0);
    $424 = ($423|0)!=(0);
    if (!($424)) {
     $tracker_id = 8;
     break;
    }
   }
   $425 = (_strncmp($magic,7040,4)|0);
   $426 = ($425|0)!=(0);
   if ($426) {
    $440 = 0;
   } else {
    $427 = $mod;
    $428 = ((($427)) + 128|0);
    $429 = HEAP32[$428>>2]|0;
    $430 = $429<<5;
    $431 = $430<<6;
    $432 = (1084 + ($431))|0;
    $433 = $smp_size;
    $434 = (($432) + ($433))|0;
    $435 = $1;
    $436 = ((($435)) + 1240|0);
    $437 = HEAP32[$436>>2]|0;
    $438 = ($434|0)==($437|0);
    $440 = $438;
   }
   $439 = $440&1;
   $wow = $439;
   if ($440) {
    $441 = $mod;
    $442 = ((($441)) + 136|0);
    HEAP32[$442>>2] = 8;
    $tracker_id = 9;
    break;
   }
   $443 = (_strncmp($magic,7040,4)|0);
   $444 = ($443|0)!=(0);
   if ($444) {
    $455 = 0;
   } else {
    $445 = $mod;
    $446 = ((($445)) + 128|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = $447<<10;
    $449 = (1084 + ($448))|0;
    $450 = $1;
    $451 = ((($450)) + 1240|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = ($449|0)==($452|0);
    $455 = $453;
   }
   $454 = $455&1;
   $ptsong = $454;
   if ($455) {
    $tracker_id = 0;
    break;
   }
   $i = 0;
   while(1) {
    $456 = $i;
    $457 = ($456|0)<(31);
    if (!($457)) {
     break;
    }
    $458 = $i;
    $459 = ((($mh)) + 20|0);
    $460 = (($459) + (($458*30)|0)|0);
    $461 = ((($460)) + 28|0);
    $462 = HEAP16[$461>>1]|0;
    $463 = $462&65535;
    $464 = ($463|0)==(0);
    if ($464) {
     label = 57;
     break;
    }
    $465 = $i;
    $466 = (($465) + 1)|0;
    $i = $466;
   }
   if ((label|0) == 57) {
    $has_loop_0 = 1;
   }
   $i = 0;
   while(1) {
    $467 = $i;
    $468 = ($467|0)<(31);
    if (!($468)) {
     break;
    }
    $469 = $i;
    $470 = ((($mh)) + 20|0);
    $471 = (($470) + (($469*30)|0)|0);
    $472 = ((($471)) + 22|0);
    $473 = HEAP16[$472>>1]|0;
    $474 = $473&65535;
    $475 = ($474|0)==(0);
    if ($475) {
     $476 = $i;
     $477 = ((($mh)) + 20|0);
     $478 = (($477) + (($476*30)|0)|0);
     $479 = ((($478)) + 25|0);
     $480 = HEAP8[$479>>0]|0;
     $481 = $480 << 24 >> 24;
     $482 = ($481|0)>(0);
     if ($482) {
      label = 63;
      break;
     }
    }
    $483 = $i;
    $484 = (($483) + 1)|0;
    $i = $484;
   }
   if ((label|0) == 63) {
    $has_vol_in_empty_ins = 1;
   }
   $485 = $mod;
   $486 = ((($485)) + 136|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = ($487|0)==(4);
   if ($488) {
    $489 = ((($mh)) + 951|0);
    $490 = HEAP8[$489>>0]|0;
    $491 = $490&255;
    $492 = $mod;
    $493 = ((($492)) + 128|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ($491|0)==($494|0);
    if ($495) {
     $tracker_id = 2;
    } else {
     label = 68;
    }
   } else {
    label = 68;
   }
   do {
    if ((label|0) == 68) {
     $496 = $mod;
     $497 = ((($496)) + 136|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = ($498|0)==(4);
     if ($499) {
      $500 = ((($mh)) + 951|0);
      $501 = HEAP8[$500>>0]|0;
      $502 = $501&255;
      $503 = ($502|0)==(120);
      if ($503) {
       $tracker_id = 20;
       break;
      }
     }
     $504 = ((($mh)) + 951|0);
     $505 = HEAP8[$504>>0]|0;
     $506 = $505&255;
     $507 = ($506|0)<(127);
     if ($507) {
      $508 = $mod;
      $509 = ((($508)) + 136|0);
      $510 = HEAP32[$509>>2]|0;
      $511 = ($510|0)!=(4);
      $512 = $has_vol_in_empty_ins;
      $513 = ($512|0)!=(0);
      $or$cond = $511 | $513;
      if ($or$cond) {
       $tracker_id = 99;
      } else {
       $tracker_id = 1;
      }
      $514 = ((($mh)) + 951|0);
      $515 = HEAP8[$514>>0]|0;
      $516 = $515&255;
      $517 = $mod;
      $518 = ((($517)) + 160|0);
      HEAP32[$518>>2] = $516;
     }
    }
   } while(0);
   $519 = $mod;
   $520 = ((($519)) + 136|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = ($521|0)!=(4);
   if ($522) {
    $523 = ((($mh)) + 951|0);
    $524 = HEAP8[$523>>0]|0;
    $525 = $524&255;
    $526 = ($525|0)==(127);
    if ($526) {
     $tracker_id = 10;
     $527 = $1;
     $528 = ((($527)) + 1288|0);
     HEAP32[$528>>2] = 2;
    }
   }
   $529 = $mod;
   $530 = ((($529)) + 136|0);
   $531 = HEAP32[$530>>2]|0;
   $532 = ($531|0)==(4);
   if ($532) {
    $533 = ((($mh)) + 951|0);
    $534 = HEAP8[$533>>0]|0;
    $535 = $534&255;
    $536 = ($535|0)==(127);
    $537 = $has_loop_0;
    $538 = ($537|0)!=(0);
    $or$cond13 = $536 & $538;
    if ($or$cond13) {
     $tracker_id = 98;
    }
   }
   $539 = ((($mh)) + 951|0);
   $540 = HEAP8[$539>>0]|0;
   $541 = $540&255;
   $542 = ($541|0)!=(120);
   if ($542) {
    $543 = ((($mh)) + 951|0);
    $544 = HEAP8[$543>>0]|0;
    $545 = $544&255;
    $546 = ($545|0)<(127);
    if ($546) {
     $547 = $has_loop_0;
     $548 = ($547|0)!=(0);
     if ($548) {
      $i = 15;
      while(1) {
       $614 = $i;
       $615 = ($614|0)<(31);
       if (!($615)) {
        break;
       }
       $616 = $i;
       $617 = ((($mh)) + 20|0);
       $618 = (($617) + (($616*30)|0)|0);
       $619 = (_strlen(($618|0))|0);
       $620 = ($619|0)!=(0);
       if ($620) {
        break;
       }
       $621 = $i;
       $622 = ((($mh)) + 20|0);
       $623 = (($622) + (($621*30)|0)|0);
       $624 = ((($623)) + 22|0);
       $625 = HEAP16[$624>>1]|0;
       $626 = $625&65535;
       $627 = ($626|0)>(0);
       if ($627) {
        break;
       }
       $628 = $i;
       $629 = (($628) + 1)|0;
       $i = $629;
      }
      $630 = $i;
      $631 = ($630|0)==(31);
      if ($631) {
       $632 = ((($mh)) + 20|0);
       $633 = ((($632)) + 420|0);
       $634 = (_is_st_ins($633)|0);
       $635 = ($634|0)!=(0);
       if ($635) {
        $tracker_id = 96;
        break;
       }
      }
      $i = 0;
      while(1) {
       $636 = $i;
       $637 = ($636|0)<(31);
       if (!($637)) {
        break;
       }
       $638 = $i;
       $639 = ((($mh)) + 20|0);
       $640 = (($639) + (($638*30)|0)|0);
       $641 = (_is_st_ins($640)|0);
       $642 = ($641|0)!=(0);
       if ($642) {
        break;
       }
       $643 = $i;
       $644 = (($643) + 1)|0;
       $i = $644;
      }
      $645 = $i;
      $646 = ($645|0)<(31);
      if ($646) {
       $tracker_id = 95;
       break;
      }
      $647 = $mod;
      $648 = ((($647)) + 136|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = ($649|0)==(4);
      do {
       if (!($650)) {
        $651 = $mod;
        $652 = ((($651)) + 136|0);
        $653 = HEAP32[$652>>2]|0;
        $654 = ($653|0)==(6);
        if ($654) {
         break;
        }
        $655 = $mod;
        $656 = ((($655)) + 136|0);
        $657 = HEAP32[$656>>2]|0;
        $658 = ($657|0)==(8);
        if ($658) {
         break;
        }
        $tracker_id = 99;
        break L62;
       }
      } while(0);
      $tracker_id = 3;
      break;
     }
     $i = 0;
     while(1) {
      $549 = $i;
      $550 = ($549|0)<(31);
      if (!($550)) {
       break;
      }
      $551 = $i;
      $552 = ((($mh)) + 20|0);
      $553 = (($552) + (($551*30)|0)|0);
      $554 = ((($553)) + 22|0);
      $555 = HEAP16[$554>>1]|0;
      $556 = $555&65535;
      $557 = ($556|0)==(1);
      if ($557) {
       $558 = $i;
       $559 = ((($mh)) + 20|0);
       $560 = (($559) + (($558*30)|0)|0);
       $561 = ((($560)) + 25|0);
       $562 = HEAP8[$561>>0]|0;
       $563 = $562 << 24 >> 24;
       $564 = ($563|0)==(0);
       if ($564) {
        label = 89;
        break;
       }
      }
      $565 = $i;
      $566 = (($565) + 1)|0;
      $i = $566;
     }
     if ((label|0) == 89) {
      $tracker_id = 97;
      break;
     }
     $i = 0;
     while(1) {
      $567 = $i;
      $568 = ($567|0)<(31);
      if (!($568)) {
       break;
      }
      $569 = $i;
      $570 = ((($mh)) + 20|0);
      $571 = (($570) + (($569*30)|0)|0);
      $572 = (_is_st_ins($571)|0);
      $573 = ($572|0)!=(0);
      if ($573) {
       break;
      }
      $574 = $i;
      $575 = (($574) + 1)|0;
      $i = $575;
     }
     $576 = $i;
     $577 = ($576|0)==(31);
     if ($577) {
      $i = 0;
      while(1) {
       $578 = $i;
       $579 = ($578|0)<(31);
       if (!($579)) {
        break;
       }
       $580 = $i;
       $581 = ((($mh)) + 20|0);
       $582 = (($581) + (($580*30)|0)|0);
       $583 = ((($582)) + 22|0);
       $584 = HEAP16[$583>>1]|0;
       $585 = $584&65535;
       $586 = ($585|0)==(0);
       if ($586) {
        $587 = $i;
        $588 = ((($mh)) + 20|0);
        $589 = (($588) + (($587*30)|0)|0);
        $590 = ((($589)) + 28|0);
        $591 = HEAP16[$590>>1]|0;
        $592 = $591&65535;
        $593 = ($592|0)==(1);
        if ($593) {
         label = 100;
         break;
        }
       }
       $600 = $i;
       $601 = (($600) + 1)|0;
       $i = $601;
      }
      if ((label|0) == 100) {
       $594 = $mod;
       $595 = ((($594)) + 136|0);
       $596 = HEAP32[$595>>2]|0;
       if ((($596|0) == 4)) {
        $597 = $has_vol_in_empty_ins;
        $598 = ($597|0)!=(0);
        $599 = $598 ? 11 : 1;
        $tracker_id = $599;
        break;
       } else if ((($596|0) == 8) | (($596|0) == 6)) {
        $tracker_id = 5;
        break;
       } else {
        $tracker_id = 99;
        break;
       }
      }
      $602 = $mod;
      $603 = ((($602)) + 136|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = ($604|0)==(4);
      if ($605) {
       $tracker_id = 0;
       break;
      }
      $606 = $mod;
      $607 = ((($606)) + 136|0);
      $608 = HEAP32[$607>>2]|0;
      $609 = ($608|0)==(6);
      do {
       if (!($609)) {
        $610 = $mod;
        $611 = ((($610)) + 136|0);
        $612 = HEAP32[$611>>2]|0;
        $613 = ($612|0)==(8);
        if ($613) {
         break;
        }
        $tracker_id = 99;
        break L62;
       }
      } while(0);
      $tracker_id = 3;
     }
    }
   }
  }
 } while(0);
 $659 = $mod;
 $660 = ((($659)) + 136|0);
 $661 = HEAP32[$660>>2]|0;
 $662 = $mod;
 $663 = ((($662)) + 128|0);
 $664 = HEAP32[$663>>2]|0;
 $665 = Math_imul($661, $664)|0;
 $666 = $mod;
 $667 = ((($666)) + 132|0);
 HEAP32[$667>>2] = $665;
 $i = 0;
 while(1) {
  $668 = $i;
  $669 = $mod;
  $670 = ((($669)) + 140|0);
  $671 = HEAP32[$670>>2]|0;
  $672 = ($668|0)<($671|0);
  if (!($672)) {
   break;
  }
  $673 = $i;
  $674 = (($673) + 1)|0;
  $i = $674;
 }
 $675 = $mod;
 $676 = (_pattern_init($675)|0);
 $677 = ($676|0)<(0);
 if ($677) {
  $0 = -1;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 $i = 0;
 while(1) {
  $678 = $i;
  $679 = $mod;
  $680 = ((($679)) + 128|0);
  $681 = HEAP32[$680>>2]|0;
  $682 = ($678|0)<($681|0);
  if (!($682)) {
   break;
  }
  $683 = $mod;
  $684 = $i;
  $685 = (_pattern_tracks_alloc($683,$684,64)|0);
  $686 = ($685|0)<(0);
  if ($686) {
   label = 138;
   break;
  }
  $687 = $2;
  $688 = (_hio_tell($687)|0);
  $pos1 = $688;
  $j = 0;
  while(1) {
   $689 = $j;
   $690 = $mod;
   $691 = ((($690)) + 136|0);
   $692 = HEAP32[$691>>2]|0;
   $693 = $692<<6;
   $694 = ($689|0)<($693|0);
   if (!($694)) {
    break;
   }
   $695 = $j;
   $696 = $mod;
   $697 = ((($696)) + 136|0);
   $698 = HEAP32[$697>>2]|0;
   $699 = (($695|0) / ($698|0))&-1;
   $700 = $j;
   $701 = $mod;
   $702 = ((($701)) + 136|0);
   $703 = HEAP32[$702>>2]|0;
   $704 = (($700|0) % ($703|0))&-1;
   $705 = $i;
   $706 = $1;
   $707 = ((($706)) + 168|0);
   $708 = HEAP32[$707>>2]|0;
   $709 = (($708) + ($705<<2)|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = ((($710)) + 4|0);
   $712 = (($711) + ($704<<2)|0);
   $713 = HEAP32[$712>>2]|0;
   $714 = $1;
   $715 = ((($714)) + 172|0);
   $716 = HEAP32[$715>>2]|0;
   $717 = (($716) + ($713<<2)|0);
   $718 = HEAP32[$717>>2]|0;
   $719 = ((($718)) + 4|0);
   $720 = (($719) + ($699<<3)|0);
   $event = $720;
   $721 = $2;
   (_hio_read($mod_event,1,4,$721)|0);
   $722 = HEAP8[$mod_event>>0]|0;
   $723 = $722&255;
   $724 = $723 & 15;
   $725 = $724 << 8;
   $726 = ((($mod_event)) + 1|0);
   $727 = HEAP8[$726>>0]|0;
   $728 = $727&255;
   $729 = $725 | $728;
   $period = $729;
   $730 = $period;
   $731 = ($730|0)!=(0);
   if ($731) {
    $732 = $period;
    $733 = ($732|0)<(108);
    $734 = $period;
    $735 = ($734|0)>(907);
    $or$cond3 = $733 | $735;
    if ($or$cond3) {
     $out_of_range = 1;
     $736 = $tracker_id;
     $737 = ($736|0)==(0);
     $738 = $tracker_id;
     $739 = ($738|0)==(1);
     $or$cond5 = $737 | $739;
     $740 = $tracker_id;
     $741 = ($740|0)==(20);
     $or$cond7 = $or$cond5 | $741;
     $742 = $tracker_id;
     $743 = ($742|0)==(2);
     $or$cond9 = $or$cond7 | $743;
     if ($or$cond9) {
      $tracker_id = 99;
     }
    }
   }
   $744 = $tracker_id;
   $745 = ($744|0)==(20);
   do {
    if ($745) {
     $746 = ((($mod_event)) + 2|0);
     $747 = HEAP8[$746>>0]|0;
     $748 = $747&255;
     $749 = $748 & 15;
     $750 = $749&255;
     $fxt = $750;
     $751 = ((($mod_event)) + 3|0);
     $752 = HEAP8[$751>>0]|0;
     $753 = $752&255;
     $754 = $753 & 15;
     $755 = $754&255;
     $fxp = $755;
     $756 = $fxt;
     $757 = $756&255;
     $758 = ($757|0)>(6);
     if ($758) {
      $759 = $fxt;
      $760 = $759&255;
      $761 = ($760|0)<(10);
      if (!($761)) {
       label = 148;
      }
     } else {
      label = 148;
     }
     if ((label|0) == 148) {
      label = 0;
      $762 = $fxt;
      $763 = $762&255;
      $764 = ($763|0)==(14);
      if (!($764)) {
       break;
      }
      $765 = $fxp;
      $766 = $765&255;
      $767 = ($766|0)>(1);
      if (!($767)) {
       break;
      }
     }
     $tracker_id = 99;
    }
   } while(0);
   $768 = $j;
   $769 = (($768) + 1)|0;
   $j = $769;
  }
  $770 = $2;
  $771 = $pos1;
  (_hio_seek($770,$771,0)|0);
  $j = 0;
  while(1) {
   $772 = $j;
   $773 = $mod;
   $774 = ((($773)) + 136|0);
   $775 = HEAP32[$774>>2]|0;
   $776 = $775<<6;
   $777 = ($772|0)<($776|0);
   if (!($777)) {
    break;
   }
   $778 = $j;
   $779 = $mod;
   $780 = ((($779)) + 136|0);
   $781 = HEAP32[$780>>2]|0;
   $782 = (($778|0) / ($781|0))&-1;
   $783 = $j;
   $784 = $mod;
   $785 = ((($784)) + 136|0);
   $786 = HEAP32[$785>>2]|0;
   $787 = (($783|0) % ($786|0))&-1;
   $788 = $i;
   $789 = $1;
   $790 = ((($789)) + 168|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = (($791) + ($788<<2)|0);
   $793 = HEAP32[$792>>2]|0;
   $794 = ((($793)) + 4|0);
   $795 = (($794) + ($787<<2)|0);
   $796 = HEAP32[$795>>2]|0;
   $797 = $1;
   $798 = ((($797)) + 172|0);
   $799 = HEAP32[$798>>2]|0;
   $800 = (($799) + ($796<<2)|0);
   $801 = HEAP32[$800>>2]|0;
   $802 = ((($801)) + 4|0);
   $803 = (($802) + ($782<<3)|0);
   $event = $803;
   $804 = $2;
   (_hio_read($mod_event,1,4,$804)|0);
   $805 = $tracker_id;
   if ((($805|0) == 1) | (($805|0) == 20)) {
    $806 = $event;
    _decode_noisetracker_event($806,$mod_event);
   } else {
    $807 = $event;
    _decode_protracker_event($807,$mod_event);
   }
   $808 = $j;
   $809 = (($808) + 1)|0;
   $j = $809;
  }
  $810 = $i;
  $811 = (($810) + 1)|0;
  $i = $811;
 }
 if ((label|0) == 138) {
  $0 = -1;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 $812 = $tracker_id;
 do {
  switch ($812|0) {
  case 11:  {
   $tracker = 2024;
   $ptkloop = 1;
   break;
  }
  case 98:  {
   $tracker = 2000;
   $825 = $1;
   $826 = ((($825)) + 1284|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = $827 & -8193;
   HEAP32[$826>>2] = $828;
   break;
  }
  case 10:  {
   $tracker = 1968;
   $821 = $1;
   $822 = ((($821)) + 1284|0);
   $823 = HEAP32[$822>>2]|0;
   $824 = $823 & -8193;
   HEAP32[$822>>2] = $824;
   break;
  }
  case 97: case 96:  {
   $tracker = 1984;
   break;
  }
  case 6:  {
   $tracker = 1904;
   $817 = $1;
   $818 = ((($817)) + 1284|0);
   $819 = HEAP32[$818>>2]|0;
   $820 = $819 & -8193;
   HEAP32[$818>>2] = $820;
   break;
  }
  case 5:  {
   $tracker = 1920;
   break;
  }
  case 7:  {
   $tracker = 6184;
   break;
  }
  case 8:  {
   $tracker = 1936;
   break;
  }
  case 9:  {
   $tracker = 1952;
   break;
  }
  case 4: case 3:  {
   $tracker = 1888;
   $813 = $1;
   $814 = ((($813)) + 1284|0);
   $815 = HEAP32[$814>>2]|0;
   $816 = $815 & -8193;
   HEAP32[$814>>2] = $816;
   break;
  }
  case 2:  {
   $tracker = 4536;
   $ptkloop = 1;
   break;
  }
  case 0:  {
   $tracker = 1856;
   $ptkloop = 1;
   break;
  }
  case 1: case 20:  {
   $tracker = 1872;
   $ptkloop = 1;
   break;
  }
  default: {
   $tracker = 2032;
   $829 = $1;
   $830 = ((($829)) + 1284|0);
   $831 = HEAP32[$830>>2]|0;
   $832 = $831 & -8193;
   HEAP32[$830>>2] = $832;
  }
  }
 } while(0);
 $833 = $out_of_range;
 $834 = ($833|0)!=(0);
 if ($834) {
  $835 = $1;
  $836 = ((($835)) + 1284|0);
  $837 = HEAP32[$836>>2]|0;
  $838 = $837 & -8193;
  HEAP32[$836>>2] = $838;
 }
 $839 = $tracker_id;
 $840 = ($839|0)==(9);
 $841 = $mod;
 $842 = ((($841)) + 64|0);
 $843 = $tracker;
 if ($840) {
  HEAP32[$vararg_buffer>>2] = $843;
  (_snprintf($842,64,7048,$vararg_buffer)|0);
 } else {
  HEAP32[$vararg_buffer14>>2] = $843;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $magic;
  (_snprintf($842,64,2048,$vararg_buffer14)|0);
 }
 $844 = $1;
 $845 = ((($844)) + 1216|0);
 $846 = HEAP32[$845>>2]|0;
 $847 = ($846|0)!=(0|0);
 if ($847) {
  $848 = $1;
  $849 = ((($848)) + 1216|0);
  $850 = HEAP32[$849>>2]|0;
  $851 = (_strrchr($850,47)|0);
  $x = $851;
  $852 = ($851|0)!=(0|0);
  if ($852) {
   $853 = $1;
   $854 = ((($853)) + 1216|0);
   $855 = HEAP32[$854>>2]|0;
   $856 = $x;
   $857 = $1;
   $858 = ((($857)) + 1216|0);
   $859 = HEAP32[$858>>2]|0;
   $860 = $856;
   $861 = $859;
   $862 = (($860) - ($861))|0;
   (_strncpy(($pathname|0),($855|0),($862|0))|0);
  }
 }
 $i = 0;
 L252: while(1) {
  $863 = $i;
  $864 = $mod;
  $865 = ((($864)) + 144|0);
  $866 = HEAP32[$865>>2]|0;
  $867 = ($863|0)<($866|0);
  if (!($867)) {
   label = 196;
   break;
  }
  $868 = $i;
  $869 = $mod;
  $870 = ((($869)) + 180|0);
  $871 = HEAP32[$870>>2]|0;
  $872 = (($871) + (($868*52)|0)|0);
  $873 = ((($872)) + 32|0);
  $874 = HEAP32[$873>>2]|0;
  $875 = ($874|0)!=(0);
  do {
   if ($875) {
    $876 = $ptkloop;
    $877 = ($876|0)!=(0);
    $878 = $877 ? 512 : 0;
    $flags = $878;
    $879 = $ptsong;
    $880 = ($879|0)!=(0);
    if ($880) {
     $881 = $i;
     $882 = $mod;
     $883 = ((($882)) + 176|0);
     $884 = HEAP32[$883>>2]|0;
     $885 = (($884) + (($881*764)|0)|0);
     HEAP32[$vararg_buffer18>>2] = $pathname;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = $885;
     (_snprintf($sn,64,7312,$vararg_buffer18)|0);
     $886 = (_hio_open($sn,7360)|0);
     $s = $886;
     $887 = ($886|0)!=(0|0);
     if (!($887)) {
      break;
     }
     $888 = $1;
     $889 = $s;
     $890 = $flags;
     $891 = $i;
     $892 = $mod;
     $893 = ((($892)) + 180|0);
     $894 = HEAP32[$893>>2]|0;
     $895 = (($894) + (($891*52)|0)|0);
     $896 = (_load_sample($888,$889,$890,$895,0)|0);
     $897 = ($896|0)<(0);
     $898 = $s;
     (_hio_close($898)|0);
     if ($897) {
      label = 188;
      break L252;
     } else {
      break;
     }
    }
    $899 = $2;
    $900 = (_hio_tell($899)|0);
    $pos2 = $900;
    $901 = $2;
    $902 = (_hio_read($buf,1,5,$901)|0);
    $num = $902;
    $903 = $num;
    $904 = ($903|0)==(5);
    if ($904) {
     $905 = (_memcmp($buf,2056,5)|0);
     $906 = ($905|0)!=(0);
     if ($906) {
      label = 192;
     } else {
      $907 = $flags;
      $908 = $907 | 16384;
      $flags = $908;
     }
    } else {
     label = 192;
    }
    if ((label|0) == 192) {
     label = 0;
     $909 = $2;
     $910 = $pos2;
     (_hio_seek($909,$910,0)|0);
    }
    $911 = $1;
    $912 = $2;
    $913 = $flags;
    $914 = $i;
    $915 = $mod;
    $916 = ((($915)) + 180|0);
    $917 = HEAP32[$916>>2]|0;
    $918 = (($917) + (($914*52)|0)|0);
    $919 = (_load_sample($911,$912,$913,$918,0)|0);
    $920 = ($919|0)<(0);
    if ($920) {
     label = 194;
     break L252;
    }
   }
  } while(0);
  $921 = $i;
  $922 = (($921) + 1)|0;
  $i = $922;
 }
 if ((label|0) == 188) {
  $0 = -1;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 else if ((label|0) == 194) {
  $0 = -1;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 else if ((label|0) == 196) {
  $923 = $tracker_id;
  $924 = ($923|0)==(0);
  $925 = $tracker_id;
  $926 = ($925|0)==(11);
  $or$cond11 = $924 | $926;
  do {
   if ($or$cond11) {
    $927 = $1;
    $928 = ((($927)) + 1284|0);
    $929 = HEAP32[$928>>2]|0;
    $930 = $929 | 4;
    HEAP32[$928>>2] = $930;
   } else {
    $931 = $tracker_id;
    $932 = ($931|0)==(10);
    if ($932) {
     $933 = $1;
     $934 = ((($933)) + 1284|0);
     $935 = HEAP32[$934>>2]|0;
     $936 = $935 | 285213217;
     HEAP32[$934>>2] = $936;
     $937 = $1;
     $938 = ((($937)) + 1288|0);
     HEAP32[$938>>2] = 2;
     break;
    }
    $939 = $mod;
    $940 = ((($939)) + 136|0);
    $941 = HEAP32[$940>>2]|0;
    $942 = ($941|0)>(4);
    if ($942) {
     $943 = $1;
     $944 = ((($943)) + 1284|0);
     $945 = HEAP32[$944>>2]|0;
     $946 = $945 & -8193;
     HEAP32[$944>>2] = $946;
     $947 = $1;
     $948 = ((($947)) + 1284|0);
     $949 = HEAP32[$948>>2]|0;
     $950 = $949 | 33554464;
     HEAP32[$948>>2] = $950;
     $951 = $1;
     $952 = ((($951)) + 1288|0);
     HEAP32[$952>>2] = 1;
    }
   }
  } while(0);
  $0 = 0;
  $953 = $0;
  STACKTOP = sp;return ($953|0);
 }
 return (0)|0;
}
function _is_st_ins($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)!=(115);
 if ($5) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(83);
  if ($9) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)!=(116);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(84);
  if ($19) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $20 = $1;
 $21 = ((($20)) + 2|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)!=(45);
 if (!($24)) {
  $25 = $1;
  $26 = ((($25)) + 5|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(58);
  if (!($29)) {
   $30 = $1;
   $31 = ((($30)) + 3|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = (_isdigit($33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $1;
    $37 = ((($36)) + 4|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = (_isdigit($39)|0);
    $41 = ($40|0)!=(0);
    if ($41) {
     $0 = 1;
     $42 = $0;
     STACKTOP = sp;return ($42|0);
    }
   }
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 }
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _validate_pattern($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $i = 0;
 L1: while(1) {
  $2 = $i;
  $3 = ($2|0)<(64);
  if (!($3)) {
   label = 9;
   break;
  }
  $j = 0;
  while(1) {
   $4 = $j;
   $5 = ($4|0)<(4);
   if (!($5)) {
    break;
   }
   $6 = $1;
   $7 = $i;
   $8 = $7<<2;
   $9 = $j;
   $10 = (($8) + ($9))|0;
   $11 = $10<<2;
   $12 = (($6) + ($11)|0);
   $d = $12;
   $13 = $d;
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = $15 >> 4;
   $17 = ($16|0)>(1);
   if ($17) {
    label = 6;
    break L1;
   }
   $18 = $j;
   $19 = (($18) + 1)|0;
   $j = $19;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 9) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _s3m_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 44)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1396920909);
 if ($9) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 $10 = $1;
 $11 = $3;
 $12 = (($11) + 29)|0;
 (_hio_seek($10,$12,0)|0);
 $13 = $1;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $16 = ($15|0)!=(16);
 if ($16) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $17 = $1;
  $18 = $3;
  $19 = (($18) + 0)|0;
  (_hio_seek($17,$19,0)|0);
  $20 = $1;
  $21 = $2;
  _read_title($20,$21,28);
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _s3m_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $dummy = 0, $event = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0;
 var $i5 = 0, $i6 = 0, $i7 = 0, $i8 = 0, $mod = 0, $n = 0, $pat_len = 0, $pp_ins = 0, $pp_pat = 0, $quirk87 = 0, $r = 0, $ret = 0, $sah = 0, $sfh = 0, $sih = 0, $sub = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0, $x = 0, $x4 = 0, $x8 = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer23 = sp + 48|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $dummy = sp + 464|0;
 $sfh = sp + 288|0;
 $sih = sp + 208|0;
 $sah = sp + 128|0;
 $tracker_name = sp + 424|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $quirk87 = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,28,1,$7)|0);
 $8 = $2;
 (_hio_read8($8)|0);
 $9 = $2;
 $10 = (_hio_read8($9)|0);
 $11 = ((($sfh)) + 29|0);
 HEAP8[$11>>0] = $10;
 $12 = $2;
 (_hio_read16l($12)|0);
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($sfh)) + 32|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read16l($16)|0);
 $18 = ((($sfh)) + 34|0);
 HEAP16[$18>>1] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($sfh)) + 36|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($sfh)) + 38|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($sfh)) + 40|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($sfh)) + 42|0);
 HEAP16[$30>>1] = $29;
 $31 = ((($sfh)) + 42|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = ($33|0)!=(1);
 if ($34) {
  $35 = ((($sfh)) + 42|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ($37|0)!=(2);
  if (!($38)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $39 = ((($sfh)) + 32|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = ($41|0)>(255);
  if (!($42)) {
   $43 = ((($sfh)) + 34|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44&65535;
   $46 = ($45|0)>(255);
   if (!($46)) {
    $47 = ((($sfh)) + 36|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48&65535;
    $50 = ($49|0)>(255);
    if (!($50)) {
     $51 = $2;
     $52 = (_hio_read32b($51)|0);
     $53 = ((($sfh)) + 44|0);
     HEAP32[$53>>2] = $52;
     $54 = $2;
     $55 = (_hio_read8($54)|0);
     $56 = ((($sfh)) + 48|0);
     HEAP8[$56>>0] = $55;
     $57 = $2;
     $58 = (_hio_read8($57)|0);
     $59 = ((($sfh)) + 49|0);
     HEAP8[$59>>0] = $58;
     $60 = $2;
     $61 = (_hio_read8($60)|0);
     $62 = ((($sfh)) + 50|0);
     HEAP8[$62>>0] = $61;
     $63 = $2;
     $64 = (_hio_read8($63)|0);
     $65 = ((($sfh)) + 51|0);
     HEAP8[$65>>0] = $64;
     $66 = $2;
     $67 = (_hio_read8($66)|0);
     $68 = ((($sfh)) + 52|0);
     HEAP8[$68>>0] = $67;
     $69 = $2;
     $70 = (_hio_read8($69)|0);
     $71 = ((($sfh)) + 53|0);
     HEAP8[$71>>0] = $70;
     $72 = $2;
     (_hio_read32l($72)|0);
     $73 = $2;
     (_hio_read32l($73)|0);
     $74 = $2;
     $75 = (_hio_read16l($74)|0);
     $76 = ((($sfh)) + 62|0);
     HEAP16[$76>>1] = $75;
     $77 = ((($sfh)) + 64|0);
     $78 = $2;
     (_hio_read($77,32,1,$78)|0);
     $79 = ((($sfh)) + 40|0);
     $80 = HEAP16[$79>>1]|0;
     $81 = $80&65535;
     $82 = ($81|0)==(4865);
     if ($82) {
      $83 = ((($sfh)) + 27|0);
      $84 = HEAP8[$83>>0]|0;
      $85 = $84&255;
      $86 = ($85|0)==(135);
      if ($86) {
       $quirk87 = 1;
      }
     }
     $87 = $quirk87;
     $88 = ($87|0)!=(0);
     L12: do {
      if ($88) {
       $i1 = 0;
       while(1) {
        $89 = $i1;
        $90 = ($89>>>0)<(28);
        if (!($90)) {
         break;
        }
        $91 = $i1;
        $92 = (($sfh) + ($91)|0);
        $93 = HEAP8[$92>>0]|0;
        $94 = $93&255;
        $95 = ($94|0)==(135);
        if ($95) {
         $96 = $i1;
         $97 = (($sfh) + ($96)|0);
         HEAP8[$97>>0] = 0;
        }
        $98 = $i1;
        $99 = (($98) + 1)|0;
        $i1 = $99;
       }
       $i2 = 0;
       while(1) {
        $100 = $i2;
        $101 = ($100>>>0)<(2);
        if (!($101)) {
         break;
        }
        $102 = ((($sfh)) + 36|0);
        $103 = $i2;
        $104 = (($102) + ($103)|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = ($106|0)==(135);
        if ($107) {
         $108 = ((($sfh)) + 36|0);
         $109 = $i2;
         $110 = (($108) + ($109)|0);
         HEAP8[$110>>0] = 0;
        }
        $111 = $i2;
        $112 = (($111) + 1)|0;
        $i2 = $112;
       }
       $i3 = 0;
       while(1) {
        $113 = $i3;
        $114 = ($113>>>0)<(2);
        if (!($114)) {
         break L12;
        }
        $115 = ((($sfh)) + 38|0);
        $116 = $i3;
        $117 = (($115) + ($116)|0);
        $118 = HEAP8[$117>>0]|0;
        $119 = $118&255;
        $120 = ($119|0)==(135);
        if ($120) {
         $121 = ((($sfh)) + 38|0);
         $122 = $i3;
         $123 = (($121) + ($122)|0);
         HEAP8[$123>>0] = 0;
        }
        $124 = $i3;
        $125 = (($124) + 1)|0;
        $i3 = $125;
       }
      }
     } while(0);
     $126 = $mod;
     (_copy_adjust($126,$sfh,28)|0);
     $127 = ((($sfh)) + 34|0);
     $128 = HEAP16[$127>>1]|0;
     $129 = $128&65535;
     $130 = (_calloc(2,$129)|0);
     $pp_ins = $130;
     $131 = $pp_ins;
     $132 = ($131|0)==(0|0);
     if (!($132)) {
      $133 = ((($sfh)) + 36|0);
      $134 = HEAP16[$133>>1]|0;
      $135 = $134&65535;
      $136 = (_calloc(2,$135)|0);
      $pp_pat = $136;
      $137 = $pp_pat;
      $138 = ($137|0)==(0|0);
      if (!($138)) {
       $139 = ((($sfh)) + 38|0);
       $140 = HEAP16[$139>>1]|0;
       $141 = $140&65535;
       $142 = $141 & 16;
       $143 = ($142|0)!=(0);
       if ($143) {
        $144 = $1;
        $145 = ((($144)) + 1284|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = $146 | 8192;
        HEAP32[$145>>2] = $147;
       }
       $148 = ((($sfh)) + 38|0);
       $149 = HEAP16[$148>>1]|0;
       $150 = $149&65535;
       $151 = $150 & 64;
       $152 = ($151|0)!=(0);
       if ($152) {
        $153 = $1;
        $154 = ((($153)) + 1284|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = $155 | 64;
        HEAP32[$154>>2] = $156;
       }
       $157 = ((($sfh)) + 49|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158&255;
       $160 = $mod;
       $161 = ((($160)) + 148|0);
       HEAP32[$161>>2] = $159;
       $162 = ((($sfh)) + 50|0);
       $163 = HEAP8[$162>>0]|0;
       $164 = $163&255;
       $165 = $mod;
       $166 = ((($165)) + 152|0);
       HEAP32[$166>>2] = $164;
       $i = 0;
       while(1) {
        $167 = $i;
        $168 = ($167|0)<(32);
        if (!($168)) {
         break;
        }
        $169 = $i;
        $170 = ((($sfh)) + 64|0);
        $171 = (($170) + ($169)|0);
        $172 = HEAP8[$171>>0]|0;
        $173 = $172&255;
        $174 = ($173|0)==(255);
        do {
         if (!($174)) {
          $175 = $i;
          $176 = (($175) + 1)|0;
          $177 = $mod;
          $178 = ((($177)) + 136|0);
          HEAP32[$178>>2] = $176;
          $179 = ((($sfh)) + 51|0);
          $180 = HEAP8[$179>>0]|0;
          $181 = $180&255;
          $182 = $181 & 128;
          $183 = ($182|0)!=(0);
          $184 = $i;
          if ($183) {
           $185 = ((($sfh)) + 64|0);
           $186 = (($185) + ($184)|0);
           $187 = HEAP8[$186>>0]|0;
           $188 = $187&255;
           $189 = $188 & 127;
           $x = $189;
           $190 = $x;
           $191 = $190 & 15;
           $192 = ($191|0)<(8);
           $193 = $192 ? 48 : 192;
           $194 = $i;
           $195 = $mod;
           $196 = ((($195)) + 184|0);
           $197 = (($196) + (($194*12)|0)|0);
           HEAP32[$197>>2] = $193;
           break;
          } else {
           $198 = $mod;
           $199 = ((($198)) + 184|0);
           $200 = (($199) + (($184*12)|0)|0);
           HEAP32[$200>>2] = 128;
           break;
          }
         }
        } while(0);
        $201 = $i;
        $202 = (($201) + 1)|0;
        $i = $202;
       }
       $203 = ((($sfh)) + 32|0);
       $204 = HEAP16[$203>>1]|0;
       $205 = $204&65535;
       $206 = ($205|0)<=(256);
       if ($206) {
        $207 = ((($sfh)) + 32|0);
        $208 = HEAP16[$207>>1]|0;
        $209 = $208&65535;
        $210 = $mod;
        $211 = ((($210)) + 156|0);
        HEAP32[$211>>2] = $209;
        $212 = $mod;
        $213 = ((($212)) + 952|0);
        $214 = $mod;
        $215 = ((($214)) + 156|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = $2;
        (_hio_read($213,1,$216,$217)|0);
       } else {
        $218 = $mod;
        $219 = ((($218)) + 156|0);
        HEAP32[$219>>2] = 256;
        $220 = $mod;
        $221 = ((($220)) + 952|0);
        $222 = $mod;
        $223 = ((($222)) + 156|0);
        $224 = HEAP32[$223>>2]|0;
        $225 = $2;
        (_hio_read($221,1,$224,$225)|0);
        $226 = $2;
        $227 = ((($sfh)) + 32|0);
        $228 = HEAP16[$227>>1]|0;
        $229 = $228&65535;
        $230 = (($229) - 256)|0;
        (_hio_seek($226,$230,1)|0);
       }
       $231 = $mod;
       $232 = ((($231)) + 128|0);
       HEAP32[$232>>2] = -1;
       $i = 0;
       while(1) {
        $233 = $i;
        $234 = $mod;
        $235 = ((($234)) + 156|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = ($233|0)<($236|0);
        if (!($237)) {
         break;
        }
        $238 = $i;
        $239 = $mod;
        $240 = ((($239)) + 952|0);
        $241 = (($240) + ($238)|0);
        $242 = HEAP8[$241>>0]|0;
        $243 = $242&255;
        $244 = ($243|0)<(255);
        if (!($244)) {
         break;
        }
        $245 = $i;
        $246 = $mod;
        $247 = ((($246)) + 952|0);
        $248 = (($247) + ($245)|0);
        $249 = HEAP8[$248>>0]|0;
        $250 = $249&255;
        $251 = $mod;
        $252 = ((($251)) + 128|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = ($250|0)>($253|0);
        if ($254) {
         $255 = $i;
         $256 = $mod;
         $257 = ((($256)) + 952|0);
         $258 = (($257) + ($255)|0);
         $259 = HEAP8[$258>>0]|0;
         $260 = $259&255;
         $261 = $mod;
         $262 = ((($261)) + 128|0);
         HEAP32[$262>>2] = $260;
        }
        $263 = $i;
        $264 = (($263) + 1)|0;
        $i = $264;
       }
       $265 = $mod;
       $266 = ((($265)) + 128|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (($267) + 1)|0;
       HEAP32[$266>>2] = $268;
       $269 = $mod;
       $270 = ((($269)) + 128|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = ((($sfh)) + 36|0);
       $273 = HEAP16[$272>>1]|0;
       $274 = $273&65535;
       $275 = ($271|0)>($274|0);
       if ($275) {
        $276 = ((($sfh)) + 36|0);
        $277 = HEAP16[$276>>1]|0;
        $278 = $277&65535;
        $279 = $mod;
        $280 = ((($279)) + 128|0);
        HEAP32[$280>>2] = $278;
       }
       $281 = $mod;
       $282 = ((($281)) + 128|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = ($283|0)==(0);
       L69: do {
        if (!($284)) {
         $285 = $mod;
         $286 = ((($285)) + 128|0);
         $287 = HEAP32[$286>>2]|0;
         $288 = $mod;
         $289 = ((($288)) + 136|0);
         $290 = HEAP32[$289>>2]|0;
         $291 = Math_imul($287, $290)|0;
         $292 = $mod;
         $293 = ((($292)) + 132|0);
         HEAP32[$293>>2] = $291;
         $294 = ((($sfh)) + 34|0);
         $295 = HEAP16[$294>>1]|0;
         $296 = $295&65535;
         $297 = $mod;
         $298 = ((($297)) + 140|0);
         HEAP32[$298>>2] = $296;
         $299 = $mod;
         $300 = ((($299)) + 140|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = $mod;
         $303 = ((($302)) + 144|0);
         HEAP32[$303>>2] = $301;
         $i = 0;
         while(1) {
          $304 = $i;
          $305 = ((($sfh)) + 34|0);
          $306 = HEAP16[$305>>1]|0;
          $307 = $306&65535;
          $308 = ($304|0)<($307|0);
          if (!($308)) {
           break;
          }
          $309 = $2;
          $310 = (_hio_read16l($309)|0);
          $311 = $i;
          $312 = $pp_ins;
          $313 = (($312) + ($311<<1)|0);
          HEAP16[$313>>1] = $310;
          $314 = $i;
          $315 = (($314) + 1)|0;
          $i = $315;
         }
         $i = 0;
         while(1) {
          $316 = $i;
          $317 = ((($sfh)) + 36|0);
          $318 = HEAP16[$317>>1]|0;
          $319 = $318&65535;
          $320 = ($316|0)<($319|0);
          if (!($320)) {
           break;
          }
          $321 = $2;
          $322 = (_hio_read16l($321)|0);
          $323 = $i;
          $324 = $pp_pat;
          $325 = (($324) + ($323<<1)|0);
          HEAP16[$325>>1] = $322;
          $326 = $i;
          $327 = (($326) + 1)|0;
          $i = $327;
         }
         $i = 0;
         $328 = ((($sfh)) + 53|0);
         $329 = HEAP8[$328>>0]|0;
         $330 = $329&255;
         $331 = (($330) - 252)|0;
         $332 = $331&255;
         HEAP8[$328>>0] = $332;
         while(1) {
          $333 = ((($sfh)) + 53|0);
          $334 = HEAP8[$333>>0]|0;
          $335 = ($334<<24>>24)!=(0);
          $336 = $i;
          $337 = ($336|0)<(32);
          $338 = $335 ? 0 : $337;
          if (!($338)) {
           break;
          }
          $339 = $2;
          $340 = (_hio_read8($339)|0);
          $x4 = $340;
          $341 = $x4;
          $342 = $341&255;
          $343 = $342 & 32;
          $344 = ($343|0)!=(0);
          if ($344) {
           $345 = $x4;
           $346 = $345&255;
           $347 = $346 << 4;
           $348 = $347 & 255;
           $349 = $i;
           $350 = $mod;
           $351 = ((($350)) + 184|0);
           $352 = (($351) + (($349*12)|0)|0);
           HEAP32[$352>>2] = $348;
          } else {
           $353 = ((($sfh)) + 51|0);
           $354 = HEAP8[$353>>0]|0;
           $355 = $354&255;
           $356 = (($355|0) % 128)&-1;
           $357 = ($356|0)!=(0);
           if ($357) {
            $358 = $i;
            $359 = $358 & 1;
            $360 = ($359*160)|0;
            $361 = (48 + ($360))|0;
            $366 = $361;
           } else {
            $366 = 128;
           }
           $362 = $i;
           $363 = $mod;
           $364 = ((($363)) + 184|0);
           $365 = (($364) + (($362*12)|0)|0);
           HEAP32[$365>>2] = $366;
          }
          $367 = $i;
          $368 = (($367) + 1)|0;
          $i = $368;
         }
         $369 = $1;
         $370 = ((($369)) + 1264|0);
         HEAP32[$370>>2] = 8363;
         $371 = ((($sfh)) + 40|0);
         $372 = HEAP16[$371>>1]|0;
         $373 = $372&65535;
         $374 = ($373|0)==(4864);
         if ($374) {
          $375 = $1;
          $376 = ((($375)) + 1284|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = $377 | 64;
          HEAP32[$376>>2] = $378;
         }
         $379 = ((($sfh)) + 40|0);
         $380 = HEAP16[$379>>1]|0;
         $381 = $380&65535;
         $382 = $381 >> 12;
         L93: do {
          switch ($382|0) {
          case 6:  {
           label = 77;
           break;
          }
          case 5:  {
           $422 = ((($sfh)) + 40|0);
           $423 = HEAP16[$422>>1]|0;
           $424 = $423&65535;
           $425 = $424 & 3840;
           $426 = $425 >> 8;
           $427 = ((($sfh)) + 40|0);
           $428 = HEAP16[$427>>1]|0;
           $429 = $428&65535;
           $430 = $429 & 255;
           HEAP32[$vararg_buffer11>>2] = $426;
           $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
           HEAP32[$vararg_ptr14>>2] = $430;
           (_snprintf($tracker_name,40,3824,$vararg_buffer11)|0);
           break;
          }
          case 3:  {
           $405 = ((($sfh)) + 40|0);
           $406 = HEAP16[$405>>1]|0;
           $407 = $406&65535;
           $408 = ($407|0)==(12822);
           if ($408) {
            (_strcpy(($tracker_name|0),(3624|0))|0);
            break L93;
           }
           $409 = ((($sfh)) + 40|0);
           $410 = HEAP16[$409>>1]|0;
           $411 = $410&65535;
           $412 = ($411|0)==(12823);
           if ($412) {
            (_strcpy(($tracker_name|0),(3648|0))|0);
            break L93;
           } else {
            $413 = ((($sfh)) + 40|0);
            $414 = HEAP16[$413>>1]|0;
            $415 = $414&65535;
            $416 = $415 & 3840;
            $417 = $416 >> 8;
            $418 = ((($sfh)) + 40|0);
            $419 = HEAP16[$418>>1]|0;
            $420 = $419&65535;
            $421 = $420 & 255;
            HEAP32[$vararg_buffer7>>2] = $417;
            $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
            HEAP32[$vararg_ptr10>>2] = $421;
            (_snprintf($tracker_name,40,3696,$vararg_buffer7)|0);
            break L93;
           }
           break;
          }
          case 1:  {
           $383 = ((($sfh)) + 40|0);
           $384 = HEAP16[$383>>1]|0;
           $385 = $384&65535;
           $386 = $385 & 3840;
           $387 = $386 >> 8;
           $388 = ((($sfh)) + 40|0);
           $389 = HEAP16[$388>>1]|0;
           $390 = $389&65535;
           $391 = $390 & 255;
           HEAP32[$vararg_buffer>>2] = $387;
           $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
           HEAP32[$vararg_ptr2>>2] = $391;
           (_snprintf($tracker_name,40,2104,$vararg_buffer)|0);
           $392 = $1;
           $393 = ((($392)) + 1284|0);
           $394 = HEAP32[$393>>2]|0;
           $395 = $394 | 16;
           HEAP32[$393>>2] = $395;
           break;
          }
          case 4:  {
           $431 = ((($sfh)) + 40|0);
           $432 = HEAP16[$431>>1]|0;
           $433 = $432&65535;
           $434 = ($433|0)!=(16640);
           if ($434) {
            $435 = ((($sfh)) + 40|0);
            $436 = HEAP16[$435>>1]|0;
            $437 = $436&65535;
            $438 = $437 & 3840;
            $439 = $438 >> 8;
            $440 = ((($sfh)) + 40|0);
            $441 = HEAP16[$440>>1]|0;
            $442 = $441&65535;
            $443 = $442 & 255;
            HEAP32[$vararg_buffer15>>2] = $439;
            $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
            HEAP32[$vararg_ptr18>>2] = $443;
            (_snprintf($tracker_name,40,2152,$vararg_buffer15)|0);
           } else {
            label = 77;
           }
           break;
          }
          case 2:  {
           $396 = ((($sfh)) + 40|0);
           $397 = HEAP16[$396>>1]|0;
           $398 = $397&65535;
           $399 = $398 & 3840;
           $400 = $399 >> 8;
           $401 = ((($sfh)) + 40|0);
           $402 = HEAP16[$401>>1]|0;
           $403 = $402&65535;
           $404 = $403 & 255;
           HEAP32[$vararg_buffer3>>2] = $400;
           $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
           HEAP32[$vararg_ptr6>>2] = $404;
           (_snprintf($tracker_name,40,2128,$vararg_buffer3)|0);
           break;
          }
          default: {
           $453 = ((($sfh)) + 40|0);
           $454 = HEAP16[$453>>1]|0;
           $455 = $454&65535;
           HEAP32[$vararg_buffer23>>2] = $455;
           (_snprintf($tracker_name,40,3752,$vararg_buffer23)|0);
          }
          }
         } while(0);
         if ((label|0) == 77) {
          $444 = ((($sfh)) + 40|0);
          $445 = HEAP16[$444>>1]|0;
          $446 = $445&65535;
          $447 = $446 & 3840;
          $448 = $447 >> 8;
          $449 = ((($sfh)) + 40|0);
          $450 = HEAP16[$449>>1]|0;
          $451 = $450&65535;
          $452 = $451 & 255;
          HEAP32[$vararg_buffer19>>2] = $448;
          $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
          HEAP32[$vararg_ptr22>>2] = $452;
          (_snprintf($tracker_name,40,3864,$vararg_buffer19)|0);
         }
         $456 = $1;
         HEAP32[$vararg_buffer26>>2] = $tracker_name;
         _set_type($456,2176,$vararg_buffer26);
         $457 = $mod;
         $458 = (_pattern_init($457)|0);
         $459 = ($458|0)<(0);
         if (!($459)) {
          $i = 0;
          while(1) {
           $460 = $i;
           $461 = $mod;
           $462 = ((($461)) + 128|0);
           $463 = HEAP32[$462>>2]|0;
           $464 = ($460|0)<($463|0);
           $465 = $mod;
           if (!($464)) {
            break;
           }
           $466 = $i;
           $467 = (_pattern_tracks_alloc($465,$466,64)|0);
           $468 = ($467|0)<(0);
           if ($468) {
            break L69;
           }
           $469 = $i;
           $470 = $pp_pat;
           $471 = (($470) + ($469<<1)|0);
           $472 = HEAP16[$471>>1]|0;
           $473 = $472&65535;
           $474 = ($473|0)==(0);
           L115: do {
            if (!($474)) {
             $475 = $2;
             $476 = $3;
             $477 = $i;
             $478 = $pp_pat;
             $479 = (($478) + ($477<<1)|0);
             $480 = HEAP16[$479>>1]|0;
             $481 = $480&65535;
             $482 = $481<<4;
             $483 = (($476) + ($482))|0;
             (_hio_seek($475,$483,0)|0);
             $r = 0;
             $484 = $2;
             $485 = (_hio_read16l($484)|0);
             $486 = $485&65535;
             $487 = (($486) - 2)|0;
             $pat_len = $487;
             while(1) {
              $488 = $pat_len;
              $489 = ($488|0)>=(0);
              if (!($489)) {
               break L115;
              }
              $490 = $r;
              $491 = $i;
              $492 = $mod;
              $493 = ((($492)) + 168|0);
              $494 = HEAP32[$493>>2]|0;
              $495 = (($494) + ($491<<2)|0);
              $496 = HEAP32[$495>>2]|0;
              $497 = HEAP32[$496>>2]|0;
              $498 = ($490|0)<($497|0);
              if (!($498)) {
               break L115;
              }
              $499 = $2;
              $500 = (_hio_read8($499)|0);
              $b = $500;
              $501 = $b;
              $502 = $501&255;
              $503 = ($502|0)==(0);
              if ($503) {
               $504 = $r;
               $505 = (($504) + 1)|0;
               $r = $505;
               continue;
              }
              $506 = $b;
              $507 = $506&255;
              $508 = $507 & 31;
              $c = $508;
              $509 = $c;
              $510 = $mod;
              $511 = ((($510)) + 136|0);
              $512 = HEAP32[$511>>2]|0;
              $513 = ($509|0)>=($512|0);
              if ($513) {
               $532 = $dummy;
              } else {
               $514 = $r;
               $515 = $c;
               $516 = $i;
               $517 = $1;
               $518 = ((($517)) + 168|0);
               $519 = HEAP32[$518>>2]|0;
               $520 = (($519) + ($516<<2)|0);
               $521 = HEAP32[$520>>2]|0;
               $522 = ((($521)) + 4|0);
               $523 = (($522) + ($515<<2)|0);
               $524 = HEAP32[$523>>2]|0;
               $525 = $1;
               $526 = ((($525)) + 172|0);
               $527 = HEAP32[$526>>2]|0;
               $528 = (($527) + ($524<<2)|0);
               $529 = HEAP32[$528>>2]|0;
               $530 = ((($529)) + 4|0);
               $531 = (($530) + ($514<<3)|0);
               $532 = $531;
              }
              $event = $532;
              $533 = $b;
              $534 = $533&255;
              $535 = $534 & 32;
              $536 = ($535|0)!=(0);
              if ($536) {
               $537 = $2;
               $538 = (_hio_read8($537)|0);
               $n = $538;
               $539 = $538&255;
               if ((($539|0) == 255)) {
                $n = 0;
               } else if ((($539|0) == 254)) {
                $n = -127;
               } else {
                $540 = $n;
                $541 = $540&255;
                $542 = $541 & 240;
                $543 = $542 >> 4;
                $544 = ($543*12)|0;
                $545 = (13 + ($544))|0;
                $546 = $n;
                $547 = $546&255;
                $548 = $547 & 15;
                $549 = (($545) + ($548))|0;
                $550 = $549&255;
                $n = $550;
               }
               $551 = $n;
               $552 = $event;
               HEAP8[$552>>0] = $551;
               $553 = $2;
               $554 = (_hio_read8($553)|0);
               $555 = $event;
               $556 = ((($555)) + 1|0);
               HEAP8[$556>>0] = $554;
               $557 = $pat_len;
               $558 = (($557) - 2)|0;
               $pat_len = $558;
              }
              $559 = $b;
              $560 = $559&255;
              $561 = $560 & 64;
              $562 = ($561|0)!=(0);
              if ($562) {
               $563 = $2;
               $564 = (_hio_read8($563)|0);
               $565 = $564&255;
               $566 = (($565) + 1)|0;
               $567 = $566&255;
               $568 = $event;
               $569 = ((($568)) + 2|0);
               HEAP8[$569>>0] = $567;
               $570 = $pat_len;
               $571 = (($570) + -1)|0;
               $pat_len = $571;
              }
              $572 = $b;
              $573 = $572&255;
              $574 = $573 & 128;
              $575 = ($574|0)!=(0);
              if (!($575)) {
               continue;
              }
              $576 = $2;
              $577 = (_hio_read8($576)|0);
              $578 = $event;
              $579 = ((($578)) + 3|0);
              HEAP8[$579>>0] = $577;
              $580 = $2;
              $581 = (_hio_read8($580)|0);
              $582 = $event;
              $583 = ((($582)) + 4|0);
              HEAP8[$583>>0] = $581;
              $584 = $c;
              $585 = $event;
              _xlat_fx($584,$585);
              $586 = $pat_len;
              $587 = (($586) - 2)|0;
              $pat_len = $587;
             }
            }
           } while(0);
           $588 = $i;
           $589 = (($588) + 1)|0;
           $i = $589;
          }
          $590 = (_instrument_init($465)|0);
          $591 = ($590|0)<(0);
          if (!($591)) {
           $i = 0;
           while(1) {
            $592 = $i;
            $593 = $mod;
            $594 = ((($593)) + 140|0);
            $595 = HEAP32[$594>>2]|0;
            $596 = ($592|0)<($595|0);
            if (!($596)) {
             label = 141;
             break;
            }
            $597 = $i;
            $598 = $mod;
            $599 = ((($598)) + 176|0);
            $600 = HEAP32[$599>>2]|0;
            $601 = (($600) + (($597*764)|0)|0);
            $xxi = $601;
            $602 = $i;
            $603 = $mod;
            $604 = ((($603)) + 180|0);
            $605 = HEAP32[$604>>2]|0;
            $606 = (($605) + (($602*52)|0)|0);
            $xxs = $606;
            $607 = (_calloc(64,1)|0);
            $608 = $xxi;
            $609 = ((($608)) + 756|0);
            HEAP32[$609>>2] = $607;
            $610 = $xxi;
            $611 = ((($610)) + 756|0);
            $612 = HEAP32[$611>>2]|0;
            $613 = ($612|0)==(0|0);
            if ($613) {
             break L69;
            }
            $614 = $xxi;
            $615 = ((($614)) + 756|0);
            $616 = HEAP32[$615>>2]|0;
            $sub = $616;
            $617 = $2;
            $618 = $3;
            $619 = $i;
            $620 = $pp_ins;
            $621 = (($620) + ($619<<1)|0);
            $622 = HEAP16[$621>>1]|0;
            $623 = $622&65535;
            $624 = $623<<4;
            $625 = (($618) + ($624))|0;
            (_hio_seek($617,$625,0)|0);
            $626 = $2;
            $627 = (_hio_read8($626)|0);
            $x8 = $627;
            $628 = $sub;
            $629 = ((($628)) + 8|0);
            HEAP32[$629>>2] = 128;
            $630 = $i;
            $631 = $sub;
            $632 = ((($631)) + 40|0);
            HEAP32[$632>>2] = $630;
            $633 = $x8;
            $634 = $633&255;
            $635 = ($634|0)>=(2);
            if ($635) {
             $636 = $2;
             (_hio_read($sah,12,1,$636)|0);
             $637 = ((($sah)) + 12|0);
             $638 = $2;
             (_hio_read($637,3,1,$638)|0);
             $639 = ((($sah)) + 15|0);
             $640 = $2;
             (_hio_read($639,12,1,$640)|0);
             $641 = $2;
             $642 = (_hio_read8($641)|0);
             $643 = ((($sah)) + 27|0);
             HEAP8[$643>>0] = $642;
             $644 = $2;
             $645 = (_hio_read8($644)|0);
             $646 = ((($sah)) + 28|0);
             HEAP8[$646>>0] = $645;
             $647 = $2;
             (_hio_read16l($647)|0);
             $648 = $2;
             $649 = (_hio_read16l($648)|0);
             $650 = ((($sah)) + 32|0);
             HEAP16[$650>>1] = $649;
             $651 = $2;
             (_hio_read16l($651)|0);
             $652 = ((($sah)) + 36|0);
             $653 = $2;
             (_hio_read($652,12,1,$653)|0);
             $654 = ((($sah)) + 48|0);
             $655 = $2;
             (_hio_read($654,28,1,$655)|0);
             $656 = $2;
             $657 = (_hio_read32b($656)|0);
             $658 = ((($sah)) + 76|0);
             HEAP32[$658>>2] = $657;
             $659 = ((($sah)) + 76|0);
             $660 = HEAP32[$659>>2]|0;
             $661 = ($660|0)!=(1396920905);
             if ($661) {
              break L69;
             }
             $662 = ((($sah)) + 76|0);
             HEAP32[$662>>2] = 0;
             $663 = $mod;
             $664 = $i;
             $665 = ((($sah)) + 48|0);
             (_instrument_name($663,$664,$665,28)|0);
             $666 = $xxi;
             $667 = ((($666)) + 36|0);
             HEAP32[$667>>2] = 1;
             $668 = ((($sah)) + 27|0);
             $669 = HEAP8[$668>>0]|0;
             $670 = $669&255;
             $671 = $sub;
             HEAP32[$671>>2] = $670;
             $672 = ((($sah)) + 32|0);
             $673 = HEAP16[$672>>1]|0;
             $674 = $673&65535;
             $675 = $sub;
             $676 = ((($675)) + 12|0);
             $677 = $sub;
             $678 = ((($677)) + 16|0);
             _c2spd_to_note($674,$676,$678);
             $679 = $sub;
             $680 = ((($679)) + 12|0);
             $681 = HEAP32[$680>>2]|0;
             $682 = (($681) + 12)|0;
             HEAP32[$680>>2] = $682;
             $683 = $1;
             $684 = $2;
             $685 = $xxs;
             $686 = ((($sah)) + 15|0);
             $687 = (_load_sample($683,$684,4096,$685,$686)|0);
             $ret = $687;
             $688 = $ret;
             $689 = ($688|0)<(0);
             if ($689) {
              break L69;
             }
            } else {
             $690 = $2;
             (_hio_read($sih,13,1,$690)|0);
             $691 = $2;
             $692 = (_hio_read16l($691)|0);
             $693 = ((($sih)) + 14|0);
             HEAP16[$693>>1] = $692;
             $694 = $2;
             $695 = (_hio_read32l($694)|0);
             $696 = ((($sih)) + 16|0);
             HEAP32[$696>>2] = $695;
             $697 = ((($sfh)) + 40|0);
             $698 = HEAP16[$697>>1]|0;
             $699 = $698&65535;
             $700 = $699 >> 12;
             $701 = ($700|0)==(1);
             do {
              if ($701) {
               $702 = ((($sih)) + 16|0);
               $703 = HEAP32[$702>>2]|0;
               $704 = ($703>>>0)>(64000);
               if (!($704)) {
                break;
               }
               $705 = ((($sih)) + 16|0);
               HEAP32[$705>>2] = 64000;
              }
             } while(0);
             $706 = ((($sih)) + 16|0);
             $707 = HEAP32[$706>>2]|0;
             $708 = ($707>>>0)>(268435456);
             if ($708) {
              label = 113;
              break;
             }
             $709 = $2;
             $710 = (_hio_read32l($709)|0);
             $711 = ((($sih)) + 20|0);
             HEAP32[$711>>2] = $710;
             $712 = $2;
             $713 = (_hio_read32l($712)|0);
             $714 = ((($sih)) + 24|0);
             HEAP32[$714>>2] = $713;
             $715 = $2;
             $716 = (_hio_read8($715)|0);
             $717 = ((($sih)) + 28|0);
             HEAP8[$717>>0] = $716;
             $718 = $2;
             $719 = (_hio_read8($718)|0);
             $720 = ((($sih)) + 29|0);
             HEAP8[$720>>0] = $719;
             $721 = $2;
             $722 = (_hio_read8($721)|0);
             $723 = ((($sih)) + 30|0);
             HEAP8[$723>>0] = $722;
             $724 = $2;
             $725 = (_hio_read8($724)|0);
             $726 = ((($sih)) + 31|0);
             HEAP8[$726>>0] = $725;
             $727 = $2;
             $728 = (_hio_read16l($727)|0);
             $729 = ((($sih)) + 32|0);
             HEAP16[$729>>1] = $728;
             $730 = $2;
             $731 = (_hio_read16l($730)|0);
             $732 = ((($sih)) + 34|0);
             HEAP16[$732>>1] = $731;
             $733 = ((($sih)) + 36|0);
             $734 = $2;
             (_hio_read($733,4,1,$734)|0);
             $735 = $2;
             $736 = (_hio_read16l($735)|0);
             $737 = ((($sih)) + 40|0);
             HEAP16[$737>>1] = $736;
             $738 = $2;
             $739 = (_hio_read16l($738)|0);
             $740 = ((($sih)) + 42|0);
             HEAP16[$740>>1] = $739;
             $741 = $2;
             $742 = (_hio_read32l($741)|0);
             $743 = ((($sih)) + 44|0);
             HEAP32[$743>>2] = $742;
             $744 = ((($sih)) + 48|0);
             $745 = $2;
             (_hio_read($744,28,1,$745)|0);
             $746 = $2;
             $747 = (_hio_read32b($746)|0);
             $748 = ((($sih)) + 76|0);
             HEAP32[$748>>2] = $747;
             $749 = $x8;
             $750 = $749&255;
             $751 = ($750|0)==(1);
             if ($751) {
              $752 = ((($sih)) + 76|0);
              $753 = HEAP32[$752>>2]|0;
              $754 = ($753|0)!=(1396920915);
              if ($754) {
               break L69;
              }
             }
             $755 = $quirk87;
             $756 = ($755|0)!=(0);
             L158: do {
              if ($756) {
               $i5 = 0;
               while(1) {
                $757 = $i5;
                $758 = ($757>>>0)<(4);
                if (!($758)) {
                 break;
                }
                $759 = ((($sih)) + 16|0);
                $760 = $i5;
                $761 = (($759) + ($760)|0);
                $762 = HEAP8[$761>>0]|0;
                $763 = $762&255;
                $764 = ($763|0)==(135);
                if ($764) {
                 $765 = ((($sih)) + 16|0);
                 $766 = $i5;
                 $767 = (($765) + ($766)|0);
                 HEAP8[$767>>0] = 0;
                }
                $768 = $i5;
                $769 = (($768) + 1)|0;
                $i5 = $769;
               }
               $i6 = 0;
               while(1) {
                $770 = $i6;
                $771 = ($770>>>0)<(4);
                if (!($771)) {
                 break;
                }
                $772 = ((($sih)) + 20|0);
                $773 = $i6;
                $774 = (($772) + ($773)|0);
                $775 = HEAP8[$774>>0]|0;
                $776 = $775&255;
                $777 = ($776|0)==(135);
                if ($777) {
                 $778 = ((($sih)) + 20|0);
                 $779 = $i6;
                 $780 = (($778) + ($779)|0);
                 HEAP8[$780>>0] = 0;
                }
                $781 = $i6;
                $782 = (($781) + 1)|0;
                $i6 = $782;
               }
               $i7 = 0;
               while(1) {
                $783 = $i7;
                $784 = ($783>>>0)<(4);
                if (!($784)) {
                 break;
                }
                $785 = ((($sih)) + 24|0);
                $786 = $i7;
                $787 = (($785) + ($786)|0);
                $788 = HEAP8[$787>>0]|0;
                $789 = $788&255;
                $790 = ($789|0)==(135);
                if ($790) {
                 $791 = ((($sih)) + 24|0);
                 $792 = $i7;
                 $793 = (($791) + ($792)|0);
                 HEAP8[$793>>0] = 0;
                }
                $794 = $i7;
                $795 = (($794) + 1)|0;
                $i7 = $795;
               }
               $i8 = 0;
               while(1) {
                $796 = $i8;
                $797 = ($796>>>0)<(1);
                if (!($797)) {
                 break L158;
                }
                $798 = ((($sih)) + 31|0);
                $799 = $i8;
                $800 = (($798) + ($799)|0);
                $801 = HEAP8[$800>>0]|0;
                $802 = $801&255;
                $803 = ($802|0)==(135);
                if ($803) {
                 $804 = ((($sih)) + 31|0);
                 $805 = $i8;
                 $806 = (($804) + ($805)|0);
                 HEAP8[$806>>0] = 0;
                }
                $807 = $i8;
                $808 = (($807) + 1)|0;
                $i8 = $808;
               }
              }
             } while(0);
             $809 = ((($sih)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = $xxs;
             $812 = ((($811)) + 32|0);
             HEAP32[$812>>2] = $810;
             $813 = ((($sih)) + 16|0);
             $814 = HEAP32[$813>>2]|0;
             $815 = ($814>>>0)>(0);
             $816 = $815 ? 1 : 0;
             $817 = $xxi;
             $818 = ((($817)) + 36|0);
             HEAP32[$818>>2] = $816;
             $819 = ((($sih)) + 20|0);
             $820 = HEAP32[$819>>2]|0;
             $821 = $xxs;
             $822 = ((($821)) + 36|0);
             HEAP32[$822>>2] = $820;
             $823 = ((($sih)) + 24|0);
             $824 = HEAP32[$823>>2]|0;
             $825 = $xxs;
             $826 = ((($825)) + 40|0);
             HEAP32[$826>>2] = $824;
             $827 = ((($sih)) + 31|0);
             $828 = HEAP8[$827>>0]|0;
             $829 = $828&255;
             $830 = $829 & 1;
             $831 = ($830|0)!=(0);
             $832 = $831 ? 2 : 0;
             $833 = $xxs;
             $834 = ((($833)) + 44|0);
             HEAP32[$834>>2] = $832;
             $835 = ((($sih)) + 31|0);
             $836 = HEAP8[$835>>0]|0;
             $837 = $836&255;
             $838 = $837 & 4;
             $839 = ($838|0)!=(0);
             if ($839) {
              $840 = $xxs;
              $841 = ((($840)) + 44|0);
              $842 = HEAP32[$841>>2]|0;
              $843 = $842 | 1;
              HEAP32[$841>>2] = $843;
             }
             $844 = ((($sih)) + 28|0);
             $845 = HEAP8[$844>>0]|0;
             $846 = $845&255;
             $847 = $sub;
             HEAP32[$847>>2] = $846;
             $848 = ((($sih)) + 76|0);
             HEAP32[$848>>2] = 0;
             $849 = $mod;
             $850 = $i;
             $851 = ((($sih)) + 48|0);
             (_instrument_name($849,$850,$851,28)|0);
             $852 = ((($sih)) + 32|0);
             $853 = HEAP16[$852>>1]|0;
             $854 = $853&65535;
             $855 = $sub;
             $856 = ((($855)) + 12|0);
             $857 = $sub;
             $858 = ((($857)) + 16|0);
             _c2spd_to_note($854,$856,$858);
             $859 = $2;
             $860 = $3;
             $861 = ((($sih)) + 14|0);
             $862 = HEAP16[$861>>1]|0;
             $863 = $862&65535;
             $864 = $863<<4;
             $865 = (($860) + ($864))|0;
             (_hio_seek($859,$865,0)|0);
             $866 = $1;
             $867 = $2;
             $868 = ((($sfh)) + 42|0);
             $869 = HEAP16[$868>>1]|0;
             $870 = $869&65535;
             $871 = ($870|0)==(1);
             $872 = $871 ? 0 : 2;
             $873 = $xxs;
             $874 = (_load_sample($866,$867,$872,$873,0)|0);
             $ret = $874;
             $875 = $ret;
             $876 = ($875|0)<(0);
             if ($876) {
              break L69;
             }
            }
            $877 = $i;
            $878 = (($877) + 1)|0;
            $i = $878;
           }
           if ((label|0) == 113) {
            $0 = -1;
            $891 = $0;
            STACKTOP = sp;return ($891|0);
           }
           else if ((label|0) == 141) {
            $879 = $pp_pat;
            _free($879);
            $880 = $pp_ins;
            _free($880);
            $881 = $1;
            $882 = ((($881)) + 7584|0);
            HEAP32[$882>>2] = 22896;
            $883 = $1;
            $884 = ((($883)) + 1284|0);
            $885 = HEAP32[$884>>2]|0;
            $886 = $885 | 285213217;
            HEAP32[$884>>2] = $886;
            $887 = $1;
            $888 = ((($887)) + 1288|0);
            HEAP32[$888>>2] = 2;
            $0 = 0;
            $891 = $0;
            STACKTOP = sp;return ($891|0);
           }
          }
         }
        }
       } while(0);
       $889 = $pp_pat;
       _free($889);
      }
      $890 = $pp_ins;
      _free($890);
     }
    }
   }
  }
 }
 $0 = -1;
 $891 = $0;
 STACKTOP = sp;return ($891|0);
}
function _xlat_fx($c,$e) {
 $c = $c|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $e;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 240;
 $7 = $6 >> 4;
 $8 = $7&255;
 $h = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 15;
 $14 = $13&255;
 $l = $14;
 $15 = $1;
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (2184 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $1;
 $22 = ((($21)) + 3|0);
 HEAP8[$22>>0] = $20;
 $23 = $20&255;
 if ((($23|0) == 171)) {
  $24 = $1;
  $25 = ((($24)) + 4|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)<(32);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = $1;
  $30 = ((($29)) + 3|0);
  HEAP8[$30>>0] = 0;
  $31 = $1;
  $32 = ((($31)) + 4|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 } else if ((($23|0) == 254)) {
  $33 = $1;
  $34 = ((($33)) + 3|0);
  HEAP8[$34>>0] = 14;
  $35 = $h;
  $36 = $35&255;
  switch ($36|0) {
  case 11:  {
   $85 = $1;
   $86 = ((($85)) + 4|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = $88 & 15;
   $90 = $89 | 96;
   $91 = $90&255;
   $92 = $1;
   $93 = ((($92)) + 4|0);
   HEAP8[$93>>0] = $91;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $37 = $1;
   $38 = ((($37)) + 4|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 & 15;
   $42 = $41 | 48;
   $43 = $42&255;
   $44 = $1;
   $45 = ((($44)) + 4|0);
   HEAP8[$45>>0] = $43;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $77 = $1;
   $78 = ((($77)) + 3|0);
   HEAP8[$78>>0] = 8;
   $79 = $l;
   $80 = $79&255;
   $81 = $80 << 4;
   $82 = $81&255;
   $83 = $1;
   $84 = ((($83)) + 4|0);
   HEAP8[$84>>0] = $82;
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $46 = $1;
   $47 = ((($46)) + 4|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 & 15;
   $51 = $50 | 80;
   $52 = $51&255;
   $53 = $1;
   $54 = ((($53)) + 4|0);
   HEAP8[$54>>0] = $52;
   STACKTOP = sp;return;
   break;
  }
  case 10: case 9: case 7: case 6: case 5:  {
   $73 = $1;
   $74 = ((($73)) + 4|0);
   HEAP8[$74>>0] = 0;
   $75 = $1;
   $76 = ((($75)) + 3|0);
   HEAP8[$76>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $94 = $l;
   $95 = ($94<<24>>24)!=(0);
   if ($95) {
    STACKTOP = sp;return;
   }
   $96 = $1;
   $97 = ((($96)) + 4|0);
   HEAP8[$97>>0] = 0;
   $98 = $1;
   $99 = ((($98)) + 3|0);
   HEAP8[$99>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $55 = $1;
   $56 = ((($55)) + 4|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 & 15;
   $60 = $59 | 64;
   $61 = $60&255;
   $62 = $1;
   $63 = ((($62)) + 4|0);
   HEAP8[$63>>0] = $61;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $64 = $1;
   $65 = ((($64)) + 4|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $67 & 15;
   $69 = $68 | 112;
   $70 = $69&255;
   $71 = $1;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = $70;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } else if ((($23|0) == 255)) {
  $100 = $1;
  $101 = ((($100)) + 4|0);
  HEAP8[$101>>0] = 0;
  $102 = $1;
  $103 = ((($102)) + 3|0);
  HEAP8[$103>>0] = 0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _stm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 20)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,8,$7)|0);
 $9 = ($8>>>0)<(8);
 do {
  if ($9) {
   $0 = -1;
  } else {
   $10 = (_memcmp($buf,4032,8)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = (_memcmp($buf,3968,8)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $0 = -1;
     break;
    }
   }
   $14 = $1;
   (_hio_read8($14)|0);
   $15 = $1;
   $16 = (_hio_read8($15)|0);
   $17 = $16&255;
   $18 = ($17|0)!=(2);
   if ($18) {
    $0 = -1;
    break;
   }
   $19 = $1;
   $20 = (_hio_read8($19)|0);
   $21 = $20&255;
   $22 = ($21|0)<(1);
   if ($22) {
    $0 = -1;
    break;
   } else {
    $23 = $1;
    $24 = $3;
    $25 = (($24) + 0)|0;
    (_hio_seek($23,$25,0)|0);
    $26 = $1;
    $27 = $2;
    _read_title($26,$27,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _stm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bmod2stm = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $sfh = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sfh = sp + 20|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $bmod2stm = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,20,1,$7)|0);
 $8 = ((($sfh)) + 20|0);
 $9 = $2;
 (_hio_read($8,8,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($sfh)) + 28|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($sfh)) + 29|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($sfh)) + 30|0);
 HEAP8[$18>>0] = $17;
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = ((($sfh)) + 31|0);
 HEAP8[$21>>0] = $20;
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = ((($sfh)) + 32|0);
 HEAP8[$24>>0] = $23;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = ((($sfh)) + 33|0);
 HEAP8[$27>>0] = $26;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = ((($sfh)) + 34|0);
 HEAP8[$30>>0] = $29;
 $31 = ((($sfh)) + 35|0);
 $32 = $2;
 (_hio_read($31,13,1,$32)|0);
 $i = 0;
 while(1) {
  $33 = $i;
  $34 = ($33|0)<(31);
  if (!($34)) {
   break;
  }
  $35 = $i;
  $36 = ((($sfh)) + 48|0);
  $37 = (($36) + (($35*36)|0)|0);
  $38 = $2;
  (_hio_read($37,12,1,$38)|0);
  $39 = $2;
  $40 = (_hio_read8($39)|0);
  $41 = $i;
  $42 = ((($sfh)) + 48|0);
  $43 = (($42) + (($41*36)|0)|0);
  $44 = ((($43)) + 12|0);
  HEAP8[$44>>0] = $40;
  $45 = $2;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = ((($sfh)) + 48|0);
  $49 = (($48) + (($47*36)|0)|0);
  $50 = ((($49)) + 13|0);
  HEAP8[$50>>0] = $46;
  $51 = $2;
  $52 = (_hio_read16l($51)|0);
  $53 = $i;
  $54 = ((($sfh)) + 48|0);
  $55 = (($54) + (($53*36)|0)|0);
  $56 = ((($55)) + 14|0);
  HEAP16[$56>>1] = $52;
  $57 = $2;
  $58 = (_hio_read16l($57)|0);
  $59 = $i;
  $60 = ((($sfh)) + 48|0);
  $61 = (($60) + (($59*36)|0)|0);
  $62 = ((($61)) + 16|0);
  HEAP16[$62>>1] = $58;
  $63 = $2;
  $64 = (_hio_read16l($63)|0);
  $65 = $i;
  $66 = ((($sfh)) + 48|0);
  $67 = (($66) + (($65*36)|0)|0);
  $68 = ((($67)) + 18|0);
  HEAP16[$68>>1] = $64;
  $69 = $2;
  $70 = (_hio_read16l($69)|0);
  $71 = $i;
  $72 = ((($sfh)) + 48|0);
  $73 = (($72) + (($71*36)|0)|0);
  $74 = ((($73)) + 20|0);
  HEAP16[$74>>1] = $70;
  $75 = $2;
  $76 = (_hio_read8($75)|0);
  $77 = $i;
  $78 = ((($sfh)) + 48|0);
  $79 = (($78) + (($77*36)|0)|0);
  $80 = ((($79)) + 22|0);
  HEAP8[$80>>0] = $76;
  $81 = $2;
  $82 = (_hio_read8($81)|0);
  $83 = $i;
  $84 = ((($sfh)) + 48|0);
  $85 = (($84) + (($83*36)|0)|0);
  $86 = ((($85)) + 23|0);
  HEAP8[$86>>0] = $82;
  $87 = $2;
  $88 = (_hio_read16l($87)|0);
  $89 = $i;
  $90 = ((($sfh)) + 48|0);
  $91 = (($90) + (($89*36)|0)|0);
  $92 = ((($91)) + 24|0);
  HEAP16[$92>>1] = $88;
  $93 = $2;
  $94 = (_hio_read32l($93)|0);
  $95 = $i;
  $96 = ((($sfh)) + 48|0);
  $97 = (($96) + (($95*36)|0)|0);
  $98 = ((($97)) + 28|0);
  HEAP32[$98>>2] = $94;
  $99 = $2;
  $100 = (_hio_read16l($99)|0);
  $101 = $i;
  $102 = ((($sfh)) + 48|0);
  $103 = (($102) + (($101*36)|0)|0);
  $104 = ((($103)) + 32|0);
  HEAP16[$104>>1] = $100;
  $105 = $i;
  $106 = (($105) + 1)|0;
  $i = $106;
 }
 $107 = ((($sfh)) + 20|0);
 $108 = (_strncmp($107,3968,8)|0);
 $109 = ($108|0)!=(0);
 if (!($109)) {
  $bmod2stm = 1;
 }
 $110 = ((($sfh)) + 33|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = $mod;
 $114 = ((($113)) + 128|0);
 HEAP32[$114>>2] = $112;
 $115 = $mod;
 $116 = ((($115)) + 128|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $mod;
 $119 = ((($118)) + 136|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = Math_imul($117, $120)|0;
 $122 = $mod;
 $123 = ((($122)) + 132|0);
 HEAP32[$123>>2] = $121;
 $124 = ((($sfh)) + 32|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = $125&255;
 $127 = $126 & 240;
 $128 = $127 >> 4;
 $129 = $mod;
 $130 = ((($129)) + 148|0);
 HEAP32[$130>>2] = $128;
 $131 = $mod;
 $132 = ((($131)) + 140|0);
 HEAP32[$132>>2] = 31;
 $133 = $mod;
 $134 = ((($133)) + 140|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $mod;
 $137 = ((($136)) + 144|0);
 HEAP32[$137>>2] = $135;
 $138 = $1;
 $139 = ((($138)) + 1264|0);
 HEAP32[$139>>2] = 8363;
 $140 = $mod;
 (_copy_adjust($140,$sfh,20)|0);
 $141 = $bmod2stm;
 $142 = ($141|0)!=(0);
 $143 = $mod;
 $144 = ((($143)) + 64|0);
 if ($142) {
  (_snprintf($144,64,2256,$vararg_buffer)|0);
 } else {
  $145 = ((($sfh)) + 30|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = ((($sfh)) + 31|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  HEAP32[$vararg_buffer1>>2] = $147;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $150;
  (_snprintf($144,64,2272,$vararg_buffer1)|0);
 }
 $151 = $mod;
 $152 = (_instrument_init($151)|0);
 $153 = ($152|0)<(0);
 if ($153) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 140|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($154|0)<($157|0);
  $159 = $mod;
  if (!($158)) {
   break;
  }
  $160 = $i;
  $161 = (_subinstrument_alloc($159,$160,1)|0);
  $162 = ($161|0)<(0);
  if ($162) {
   label = 14;
   break;
  }
  $163 = $i;
  $164 = ((($sfh)) + 48|0);
  $165 = (($164) + (($163*36)|0)|0);
  $166 = ((($165)) + 16|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $167&65535;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 32|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = ((($sfh)) + 48|0);
  $177 = (($176) + (($175*36)|0)|0);
  $178 = ((($177)) + 18|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 180|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*52)|0)|0);
  $186 = ((($185)) + 36|0);
  HEAP32[$186>>2] = $180;
  $187 = $i;
  $188 = ((($sfh)) + 48|0);
  $189 = (($188) + (($187*36)|0)|0);
  $190 = ((($189)) + 20|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = $i;
  $194 = $mod;
  $195 = ((($194)) + 180|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($196) + (($193*52)|0)|0);
  $198 = ((($197)) + 40|0);
  HEAP32[$198>>2] = $192;
  $199 = $i;
  $200 = $mod;
  $201 = ((($200)) + 180|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + (($199*52)|0)|0);
  $204 = ((($203)) + 40|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($205|0)==(65535);
  if ($206) {
   $207 = $i;
   $208 = $mod;
   $209 = ((($208)) + 180|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + (($207*52)|0)|0);
   $212 = ((($211)) + 40|0);
   HEAP32[$212>>2] = 0;
  }
  $213 = $i;
  $214 = $mod;
  $215 = ((($214)) + 180|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + (($213*52)|0)|0);
  $218 = ((($217)) + 40|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = ($219|0)>(0);
  $221 = $220 ? 2 : 0;
  $222 = $i;
  $223 = $mod;
  $224 = ((($223)) + 180|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($225) + (($222*52)|0)|0);
  $227 = ((($226)) + 44|0);
  HEAP32[$227>>2] = $221;
  $228 = $i;
  $229 = ((($sfh)) + 48|0);
  $230 = (($229) + (($228*36)|0)|0);
  $231 = ((($230)) + 22|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = $i;
  $235 = $mod;
  $236 = ((($235)) + 176|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + (($234*764)|0)|0);
  $239 = ((($238)) + 756|0);
  $240 = HEAP32[$239>>2]|0;
  HEAP32[$240>>2] = $233;
  $241 = $i;
  $242 = $mod;
  $243 = ((($242)) + 176|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($244) + (($241*764)|0)|0);
  $246 = ((($245)) + 756|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 8|0);
  HEAP32[$248>>2] = 128;
  $249 = $i;
  $250 = $i;
  $251 = $mod;
  $252 = ((($251)) + 176|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + (($250*764)|0)|0);
  $255 = ((($254)) + 756|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ((($256)) + 40|0);
  HEAP32[$257>>2] = $249;
  $258 = $i;
  $259 = $mod;
  $260 = ((($259)) + 180|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (($261) + (($258*52)|0)|0);
  $263 = ((($262)) + 32|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = ($264|0)>(0);
  if ($265) {
   $266 = $i;
   $267 = $mod;
   $268 = ((($267)) + 176|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (($269) + (($266*764)|0)|0);
   $271 = ((($270)) + 36|0);
   HEAP32[$271>>2] = 1;
  }
  $272 = $mod;
  $273 = $i;
  $274 = $i;
  $275 = ((($sfh)) + 48|0);
  $276 = (($275) + (($274*36)|0)|0);
  (_instrument_name($272,$273,$276,12)|0);
  $277 = $i;
  $278 = ((($sfh)) + 48|0);
  $279 = (($278) + (($277*36)|0)|0);
  $280 = ((($279)) + 24|0);
  $281 = HEAP16[$280>>1]|0;
  $282 = $281&65535;
  $283 = ($282*8363)|0;
  $284 = (($283|0) / 8448)&-1;
  $285 = $284&65535;
  $286 = $i;
  $287 = ((($sfh)) + 48|0);
  $288 = (($287) + (($286*36)|0)|0);
  $289 = ((($288)) + 24|0);
  HEAP16[$289>>1] = $285;
  $290 = $i;
  $291 = ((($sfh)) + 48|0);
  $292 = (($291) + (($290*36)|0)|0);
  $293 = ((($292)) + 24|0);
  $294 = HEAP16[$293>>1]|0;
  $295 = $294&65535;
  $296 = $i;
  $297 = $mod;
  $298 = ((($297)) + 176|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($299) + (($296*764)|0)|0);
  $301 = ((($300)) + 756|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = ((($302)) + 12|0);
  $304 = $i;
  $305 = $mod;
  $306 = ((($305)) + 176|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($307) + (($304*764)|0)|0);
  $309 = ((($308)) + 756|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = ((($310)) + 16|0);
  _c2spd_to_note($295,$303,$311);
  $312 = $i;
  $313 = (($312) + 1)|0;
  $i = $313;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $314 = ((($159)) + 952|0);
 $315 = $2;
 (_hio_read($314,1,128,$315)|0);
 $i = 0;
 while(1) {
  $316 = $i;
  $317 = ($316|0)<(128);
  if (!($317)) {
   break;
  }
  $318 = $i;
  $319 = $mod;
  $320 = ((($319)) + 952|0);
  $321 = (($320) + ($318)|0);
  $322 = HEAP8[$321>>0]|0;
  $323 = $322&255;
  $324 = $mod;
  $325 = ((($324)) + 128|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($323|0)>=($326|0);
  if ($327) {
   break;
  }
  $328 = $i;
  $329 = (($328) + 1)|0;
  $i = $329;
 }
 $330 = $i;
 $331 = $mod;
 $332 = ((($331)) + 156|0);
 HEAP32[$332>>2] = $330;
 $333 = $mod;
 $334 = (_pattern_init($333)|0);
 $335 = ($334|0)<(0);
 if ($335) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $336 = $i;
  $337 = $mod;
  $338 = ((($337)) + 128|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = ($336|0)<($339|0);
  if (!($340)) {
   break;
  }
  $341 = $mod;
  $342 = $i;
  $343 = (_pattern_tracks_alloc($341,$342,64)|0);
  $344 = ($343|0)<(0);
  if ($344) {
   label = 29;
   break;
  }
  $j = 0;
  while(1) {
   $345 = $j;
   $346 = $mod;
   $347 = ((($346)) + 136|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $348<<6;
   $350 = ($345|0)<($349|0);
   if (!($350)) {
    break;
   }
   $351 = $j;
   $352 = $mod;
   $353 = ((($352)) + 136|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = (($351|0) / ($354|0))&-1;
   $356 = $j;
   $357 = $mod;
   $358 = ((($357)) + 136|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = (($356|0) % ($359|0))&-1;
   $361 = $i;
   $362 = $1;
   $363 = ((($362)) + 168|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (($364) + ($361<<2)|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = ((($366)) + 4|0);
   $368 = (($367) + ($360<<2)|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $1;
   $371 = ((($370)) + 172|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (($372) + ($369<<2)|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = ((($374)) + 4|0);
   $376 = (($375) + ($355<<3)|0);
   $event = $376;
   $377 = $2;
   $378 = (_hio_read8($377)|0);
   $b = $378;
   $379 = $event;
   ;HEAP8[$379>>0]=0|0;HEAP8[$379+1>>0]=0|0;HEAP8[$379+2>>0]=0|0;HEAP8[$379+3>>0]=0|0;HEAP8[$379+4>>0]=0|0;HEAP8[$379+5>>0]=0|0;HEAP8[$379+6>>0]=0|0;HEAP8[$379+7>>0]=0|0;
   $380 = $b;
   $381 = $380&255;
   $$off = (($381) + -251)|0;
   $switch = ($$off>>>0)<(3);
   do {
    if (!($switch)) {
     $382 = $b;
     $383 = $382&255;
     $384 = ($383|0)==(255);
     if ($384) {
      $397 = 0;
     } else {
      $385 = $b;
      $386 = $385&255;
      $387 = $386 & 15;
      $388 = (1 + ($387))|0;
      $389 = $b;
      $390 = $389&255;
      $391 = $390 & 240;
      $392 = $391 >> 4;
      $393 = (3 + ($392))|0;
      $394 = ($393*12)|0;
      $395 = (($388) + ($394))|0;
      $397 = $395;
     }
     $396 = $397&255;
     $398 = $event;
     HEAP8[$398>>0] = $396;
     $399 = $2;
     $400 = (_hio_read8($399)|0);
     $b = $400;
     $401 = $b;
     $402 = $401&255;
     $403 = $402 & 7;
     $404 = $403&255;
     $405 = $event;
     $406 = ((($405)) + 2|0);
     HEAP8[$406>>0] = $404;
     $407 = $b;
     $408 = $407&255;
     $409 = $408 & 248;
     $410 = $409 >> 3;
     $411 = $410&255;
     $412 = $event;
     $413 = ((($412)) + 1|0);
     HEAP8[$413>>0] = $411;
     $414 = $2;
     $415 = (_hio_read8($414)|0);
     $b = $415;
     $416 = $b;
     $417 = $416&255;
     $418 = $417 & 240;
     $419 = $418 >> 1;
     $420 = $event;
     $421 = ((($420)) + 2|0);
     $422 = HEAP8[$421>>0]|0;
     $423 = $422&255;
     $424 = (($423) + ($419))|0;
     $425 = $424&255;
     HEAP8[$421>>0] = $425;
     $426 = $event;
     $427 = ((($426)) + 2|0);
     $428 = HEAP8[$427>>0]|0;
     $429 = $428&255;
     $430 = ($429|0)>(64);
     $431 = $event;
     $432 = ((($431)) + 2|0);
     if ($430) {
      HEAP8[$432>>0] = 0;
     } else {
      $433 = HEAP8[$432>>0]|0;
      $434 = (($433) + 1)<<24>>24;
      HEAP8[$432>>0] = $434;
     }
     $435 = $b;
     $436 = $435&255;
     $437 = $436 & 15;
     $438 = (2304 + ($437)|0);
     $439 = HEAP8[$438>>0]|0;
     $440 = $event;
     $441 = ((($440)) + 3|0);
     HEAP8[$441>>0] = $439;
     $442 = $2;
     $443 = (_hio_read8($442)|0);
     $444 = $event;
     $445 = ((($444)) + 4|0);
     HEAP8[$445>>0] = $443;
     $446 = $event;
     $447 = ((($446)) + 3|0);
     $448 = HEAP8[$447>>0]|0;
     $449 = $448&255;
     if ((($449|0) == 255)) {
      $459 = $event;
      $460 = ((($459)) + 3|0);
      HEAP8[$460>>0] = 0;
      $461 = $event;
      $462 = ((($461)) + 4|0);
      HEAP8[$462>>0] = 0;
      break;
     } else if ((($449|0) == 15)) {
      $450 = $event;
      $451 = ((($450)) + 4|0);
      $452 = HEAP8[$451>>0]|0;
      $453 = $452&255;
      $454 = $453 & 240;
      $455 = $454 >> 4;
      $456 = $455&255;
      $457 = $event;
      $458 = ((($457)) + 4|0);
      HEAP8[$458>>0] = $456;
      break;
     } else {
      break;
     }
    }
   } while(0);
   $463 = $j;
   $464 = (($463) + 1)|0;
   $j = $464;
  }
  $465 = $i;
  $466 = (($465) + 1)|0;
  $i = $466;
 }
 if ((label|0) == 29) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 $i = 0;
 while(1) {
  $467 = $i;
  $468 = $mod;
  $469 = ((($468)) + 140|0);
  $470 = HEAP32[$469>>2]|0;
  $471 = ($467|0)<($470|0);
  if (!($471)) {
   label = 50;
   break;
  }
  $472 = $i;
  $473 = $mod;
  $474 = ((($473)) + 180|0);
  $475 = HEAP32[$474>>2]|0;
  $476 = (($475) + (($472*52)|0)|0);
  $477 = ((($476)) + 32|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = ($478|0)>(1);
  if ($479) {
   $480 = $1;
   $481 = $2;
   $482 = $i;
   $483 = $mod;
   $484 = ((($483)) + 180|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = (($485) + (($482*52)|0)|0);
   $487 = (_load_sample($480,$481,0,$486,0)|0);
   $488 = ($487|0)<(0);
   if ($488) {
    label = 47;
    break;
   }
  } else {
   $489 = $i;
   $490 = $mod;
   $491 = ((($490)) + 176|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = (($492) + (($489*764)|0)|0);
   $494 = ((($493)) + 36|0);
   HEAP32[$494>>2] = 0;
  }
  $495 = $i;
  $496 = (($495) + 1)|0;
  $i = $496;
 }
 if ((label|0) == 47) {
  $0 = -1;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 else if ((label|0) == 50) {
  $497 = $1;
  $498 = ((($497)) + 1284|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = $499 | 285213281;
  HEAP32[$498>>2] = $500;
  $501 = $1;
  $502 = ((($501)) + 1288|0);
  HEAP32[$502>>2] = 2;
  $0 = 0;
  $503 = $0;
  STACKTOP = sp;return ($503|0);
 }
 return (0)|0;
}
function _ssn_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read16b($4)|0);
 $id = $5;
 $6 = $id;
 $7 = $6&65535;
 $8 = ($7|0)!=(26982);
 if ($8) {
  $9 = $id;
  $10 = $9&65535;
  $11 = ($10|0)!=(19022);
  if ($11) {
   $0 = -1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = $1;
   (_hio_seek($12,110,0)|0);
   $13 = $1;
   $14 = (_hio_read8($13)|0);
   $15 = $14&255;
   $16 = ($15|0)>(64);
   if ($16) {
    $0 = -1;
    break;
   }
   $17 = $1;
   $18 = (_hio_read8($17)|0);
   $19 = $18&255;
   $20 = ($19|0)>(128);
   if ($20) {
    $0 = -1;
    break;
   }
   $21 = $1;
   (_hio_seek($21,240,0)|0);
   $22 = $1;
   $23 = (_hio_read8($22)|0);
   $24 = $23&255;
   $25 = ($24|0)!=(255);
   if ($25) {
    $0 = -1;
    break;
   } else {
    $26 = $1;
    $27 = $3;
    $28 = (($27) + 2)|0;
    (_hio_seek($26,$28,0)|0);
    $29 = $1;
    $30 = $2;
    _read_title($29,$30,36);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _ssn_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ev = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $pbrk = 0, $sfh = 0, $sih = 0, $sub = 0, $vararg_buffer = 0, $xxi = 0, $xxs = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sfh = sp + 83|0;
 $sih = sp + 20|0;
 $ev = sp + 80|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,2,1,$7)|0);
 $8 = ((($sfh)) + 2|0);
 $9 = $2;
 (_hio_read($8,108,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($sfh)) + 110|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($sfh)) + 111|0);
 HEAP8[$15>>0] = $14;
 $16 = ((($sfh)) + 111|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(128);
 if ($19) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 $20 = $2;
 $21 = (_hio_read8($20)|0);
 $22 = ((($sfh)) + 112|0);
 HEAP8[$22>>0] = $21;
 $23 = ((($sfh)) + 113|0);
 $24 = $2;
 $25 = (_hio_read($23,1,128,$24)|0);
 $26 = ($25|0)!=(128);
 if ($26) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 $27 = ((($sfh)) + 241|0);
 $28 = $2;
 $29 = (_hio_read($27,1,128,$28)|0);
 $30 = ($29|0)!=(128);
 if ($30) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 $31 = ((($sfh)) + 369|0);
 $32 = $2;
 $33 = (_hio_read($31,1,128,$32)|0);
 $34 = ($33|0)!=(128);
 if ($34) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 $35 = $mod;
 $36 = ((($35)) + 136|0);
 HEAP32[$36>>2] = 8;
 $37 = ((($sfh)) + 110|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $mod;
 $41 = ((($40)) + 140|0);
 HEAP32[$41>>2] = $39;
 $42 = ((($sfh)) + 111|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $mod;
 $46 = ((($45)) + 128|0);
 HEAP32[$46>>2] = $44;
 $47 = $mod;
 $48 = ((($47)) + 136|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $mod;
 $51 = ((($50)) + 128|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = Math_imul($49, $52)|0;
 $54 = $mod;
 $55 = ((($54)) + 132|0);
 HEAP32[$55>>2] = $53;
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(128);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = ((($sfh)) + 113|0);
  $60 = (($59) + ($58)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = ((($sfh)) + 111|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = ($62|0)>($65|0);
  if ($66) {
   break;
  }
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $69 = $i;
 $70 = $mod;
 $71 = ((($70)) + 156|0);
 HEAP32[$71>>2] = $69;
 $72 = $mod;
 $73 = ((($72)) + 952|0);
 $74 = ((($sfh)) + 113|0);
 $75 = $mod;
 $76 = ((($75)) + 156|0);
 $77 = HEAP32[$76>>2]|0;
 _memcpy(($73|0),($74|0),($77|0))|0;
 $78 = $mod;
 $79 = ((($78)) + 148|0);
 HEAP32[$79>>2] = 6;
 $80 = $mod;
 $81 = ((($80)) + 152|0);
 HEAP32[$81>>2] = 76;
 $82 = $mod;
 $83 = ((($82)) + 140|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $mod;
 $86 = ((($85)) + 144|0);
 HEAP32[$86>>2] = $84;
 $87 = $1;
 $88 = ((($87)) + 1284|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 | 4096;
 HEAP32[$88>>2] = $90;
 $91 = $mod;
 $92 = ((($sfh)) + 2|0);
 (_copy_adjust($91,$92,36)|0);
 $93 = $1;
 $94 = (_strncmp($sfh,2352,2)|0);
 $95 = ($94|0)!=(0);
 $96 = $95 ? 2360 : 2336;
 _set_type($93,$96,$vararg_buffer);
 $97 = (_malloc(109)|0);
 $98 = $1;
 $99 = ((($98)) + 1220|0);
 HEAP32[$99>>2] = $97;
 $100 = $1;
 $101 = ((($100)) + 1220|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($sfh)) + 2|0);
 dest=$102; src=$103; stop=dest+108|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $104 = $1;
 $105 = ((($104)) + 1220|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($106)) + 108|0);
 HEAP8[$107>>0] = 0;
 $108 = $mod;
 $109 = (_instrument_init($108)|0);
 $110 = ($109|0)<(0);
 if ($110) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 $i = 0;
 while(1) {
  $111 = $i;
  $112 = $mod;
  $113 = ((($112)) + 140|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($111|0)<($114|0);
  if (!($115)) {
   label = 24;
   break;
  }
  $116 = $i;
  $117 = $mod;
  $118 = ((($117)) + 176|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + (($116*764)|0)|0);
  $xxi = $120;
  $121 = $i;
  $122 = $mod;
  $123 = ((($122)) + 180|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + (($121*52)|0)|0);
  $xxs = $125;
  $126 = $mod;
  $127 = $i;
  $128 = (_subinstrument_alloc($126,$127,1)|0);
  $129 = ($128|0)<(0);
  if ($129) {
   label = 18;
   break;
  }
  $130 = $xxi;
  $131 = ((($130)) + 756|0);
  $132 = HEAP32[$131>>2]|0;
  $sub = $132;
  $133 = $2;
  (_hio_read($sih,13,1,$133)|0);
  $134 = $2;
  $135 = (_hio_read32l($134)|0);
  $136 = ((($sih)) + 16|0);
  HEAP32[$136>>2] = $135;
  $137 = $2;
  $138 = (_hio_read32l($137)|0);
  $139 = ((($sih)) + 20|0);
  HEAP32[$139>>2] = $138;
  $140 = $2;
  $141 = (_hio_read32l($140)|0);
  $142 = ((($sih)) + 24|0);
  HEAP32[$142>>2] = $141;
  $143 = ((($sih)) + 16|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144>>>0)>(268435456);
  if ($145) {
   label = 20;
   break;
  }
  $146 = ((($sih)) + 16|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $xxs;
  $149 = ((($148)) + 32|0);
  HEAP32[$149>>2] = $147;
  $150 = ((($sih)) + 20|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $xxs;
  $153 = ((($152)) + 36|0);
  HEAP32[$153>>2] = $151;
  $154 = ((($sih)) + 24|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155>>>0)>=(1048575);
  $157 = ((($sih)) + 24|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $156 ? 0 : $158;
  $160 = $xxs;
  $161 = ((($160)) + 40|0);
  HEAP32[$161>>2] = $159;
  $162 = $xxs;
  $163 = ((($162)) + 40|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($164|0)!=(0);
  $166 = $165 ? 2 : 0;
  $167 = $xxs;
  $168 = ((($167)) + 44|0);
  HEAP32[$168>>2] = $166;
  $169 = $sub;
  HEAP32[$169>>2] = 64;
  $170 = $sub;
  $171 = ((($170)) + 8|0);
  HEAP32[$171>>2] = 128;
  $172 = $i;
  $173 = $sub;
  $174 = ((($173)) + 40|0);
  HEAP32[$174>>2] = $172;
  $175 = $xxs;
  $176 = ((($175)) + 32|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($177|0)>(0);
  if ($178) {
   $179 = $xxi;
   $180 = ((($179)) + 36|0);
   HEAP32[$180>>2] = 1;
  }
  $181 = $mod;
  $182 = $i;
  (_instrument_name($181,$182,$sih,13)|0);
  $183 = $i;
  $184 = (($183) + 1)|0;
  $i = $184;
 }
 if ((label|0) == 18) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 else if ((label|0) == 20) {
  $0 = -1;
  $421 = $0;
  STACKTOP = sp;return ($421|0);
 }
 else if ((label|0) == 24) {
  $185 = $mod;
  $186 = (_pattern_init($185)|0);
  $187 = ($186|0)<(0);
  if ($187) {
   $0 = -1;
   $421 = $0;
   STACKTOP = sp;return ($421|0);
  }
  $i = 0;
  while(1) {
   $188 = $i;
   $189 = $mod;
   $190 = ((($189)) + 128|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = ($188|0)<($191|0);
   if (!($192)) {
    label = 49;
    break;
   }
   $193 = $mod;
   $194 = $i;
   $195 = (_pattern_tracks_alloc($193,$194,64)|0);
   $196 = ($195|0)<(0);
   if ($196) {
    label = 29;
    break;
   }
   $197 = $i;
   $198 = $1;
   $199 = ((($198)) + 168|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + ($197<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ((($202)) + 4|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $1;
   $206 = ((($205)) + 172|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($207) + ($204<<2)|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = ((($209)) + 4|0);
   $event = $210;
   $211 = $event;
   $212 = ((($211)) + 5|0);
   HEAP8[$212>>0] = 126;
   $213 = $i;
   $214 = ((($sfh)) + 241|0);
   $215 = (($214) + ($213)|0);
   $216 = HEAP8[$215>>0]|0;
   $217 = $event;
   $218 = ((($217)) + 6|0);
   HEAP8[$218>>0] = $216;
   $219 = $i;
   $220 = ((($sfh)) + 369|0);
   $221 = (($220) + ($219)|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $pbrk = $223;
   $224 = $pbrk;
   $225 = ($224|0)>=(64);
   if ($225) {
    label = 31;
    break;
   }
   $226 = $pbrk;
   $227 = $i;
   $228 = $1;
   $229 = ((($228)) + 168|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + ($227<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = ((($233)) + 4|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = $1;
   $237 = ((($236)) + 172|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = (($238) + ($235<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ((($240)) + 4|0);
   $242 = (($241) + ($226<<3)|0);
   $event = $242;
   $243 = $event;
   $244 = ((($243)) + 5|0);
   HEAP8[$244>>0] = 13;
   $245 = $event;
   $246 = ((($245)) + 6|0);
   HEAP8[$246>>0] = 0;
   $j = 0;
   while(1) {
    $247 = $j;
    $248 = ($247|0)<(512);
    if (!($248)) {
     break;
    }
    $249 = $j;
    $250 = (($249|0) / 8)&-1;
    $251 = $j;
    $252 = (($251|0) % 8)&-1;
    $253 = $i;
    $254 = $1;
    $255 = ((($254)) + 168|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = (($256) + ($253<<2)|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((($258)) + 4|0);
    $260 = (($259) + ($252<<2)|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = $1;
    $263 = ((($262)) + 172|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = (($264) + ($261<<2)|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = ((($266)) + 4|0);
    $268 = (($267) + ($250<<3)|0);
    $event = $268;
    $269 = $2;
    (_hio_read($ev,1,3,$269)|0);
    $270 = HEAP8[$ev>>0]|0;
    $271 = $270&255;
    $272 = $271 & 254;
    $273 = ($272|0)!=(254);
    if ($273) {
     $274 = HEAP8[$ev>>0]|0;
     $275 = $274&255;
     $276 = $275 >> 2;
     $277 = (37 + ($276))|0;
     $278 = $277&255;
     $279 = $event;
     HEAP8[$279>>0] = $278;
     $280 = ((($ev)) + 1|0);
     $281 = HEAP8[$280>>0]|0;
     $282 = $281&255;
     $283 = $282 & 240;
     $284 = $283 >> 4;
     $285 = (1 + ($284))|0;
     $286 = HEAP8[$ev>>0]|0;
     $287 = $286&255;
     $288 = $287 & 3;
     $289 = $288 << 4;
     $290 = (($285) + ($289))|0;
     $291 = $290&255;
     $292 = $event;
     $293 = ((($292)) + 1|0);
     HEAP8[$293>>0] = $291;
    }
    $294 = HEAP8[$ev>>0]|0;
    $295 = $294&255;
    $296 = ($295|0)!=(255);
    if ($296) {
     $297 = ((($ev)) + 1|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = $298&255;
     $300 = $299 & 15;
     $301 = $300 << 2;
     $302 = (($301) + 1)|0;
     $303 = $302&255;
     $304 = $event;
     $305 = ((($304)) + 2|0);
     HEAP8[$305>>0] = $303;
    }
    $306 = ((($ev)) + 2|0);
    $307 = HEAP8[$306>>0]|0;
    $308 = $307&255;
    $309 = ($308|0)!=(255);
    L54: do {
     if ($309) {
      $310 = ((($ev)) + 2|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $312 & 240;
      $314 = $313 >> 4;
      $315 = ($314|0)>(5);
      if (!($315)) {
       $316 = ((($ev)) + 2|0);
       $317 = HEAP8[$316>>0]|0;
       $318 = $317&255;
       $319 = ($318|0)<(5);
       $320 = $319&1;
       $321 = $320 & 240;
       $322 = $321 >> 4;
       $323 = ($322|0)!=(0);
       if ($323) {
        $324 = $event;
        $325 = ((($324)) + 1|0);
        $326 = HEAP8[$325>>0]|0;
        $327 = ($326<<24>>24)!=(0);
        if (!($327)) {
         break;
        }
       }
       $328 = ((($ev)) + 2|0);
       $329 = HEAP8[$328>>0]|0;
       $330 = $329&255;
       $331 = $330 & 240;
       $332 = $331 >> 4;
       $333 = (2376 + ($332)|0);
       $334 = HEAP8[$333>>0]|0;
       $335 = $event;
       $336 = ((($335)) + 3|0);
       HEAP8[$336>>0] = $334;
       $337 = $event;
       $338 = ((($337)) + 3|0);
       $339 = HEAP8[$338>>0]|0;
       $340 = $339&255;
       switch ($340|0) {
       case 126:  {
        $359 = ((($ev)) + 2|0);
        $360 = HEAP8[$359>>0]|0;
        $361 = $360&255;
        $362 = $361 & 15;
        $363 = $362&255;
        $364 = $event;
        $365 = ((($364)) + 4|0);
        HEAP8[$365>>0] = $363;
        $366 = $event;
        $367 = ((($366)) + 5|0);
        HEAP8[$367>>0] = 127;
        break L54;
        break;
       }
       case 166:  {
        $350 = ((($ev)) + 2|0);
        $351 = HEAP8[$350>>0]|0;
        $352 = $351&255;
        $353 = $352 & 15;
        $354 = $353 << 4;
        $355 = (128 + ($354))|0;
        $356 = $355&255;
        $357 = $event;
        $358 = ((($357)) + 4|0);
        HEAP8[$358>>0] = $356;
        break L54;
        break;
       }
       case 122: case 120: case 121:  {
        $341 = ((($ev)) + 2|0);
        $342 = HEAP8[$341>>0]|0;
        $343 = $342&255;
        $344 = $343 & 15;
        $345 = $344&255;
        $346 = $event;
        $347 = ((($346)) + 4|0);
        HEAP8[$347>>0] = $345;
        break L54;
        break;
       }
       case 123:  {
        $348 = $event;
        $349 = ((($348)) + 4|0);
        HEAP8[$349>>0] = 1;
        break L54;
        break;
       }
       default: {
        break L54;
       }
       }
      }
     }
    } while(0);
    $368 = $j;
    $369 = (($368) + 1)|0;
    $j = $369;
   }
   $370 = $i;
   $371 = (($370) + 1)|0;
   $i = $371;
  }
  if ((label|0) == 29) {
   $0 = -1;
   $421 = $0;
   STACKTOP = sp;return ($421|0);
  }
  else if ((label|0) == 31) {
   $0 = -1;
   $421 = $0;
   STACKTOP = sp;return ($421|0);
  }
  else if ((label|0) == 49) {
   $i = 0;
   while(1) {
    $372 = $i;
    $373 = $mod;
    $374 = ((($373)) + 140|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($372|0)<($375|0);
    if (!($376)) {
     break;
    }
    $377 = $i;
    $378 = $mod;
    $379 = ((($378)) + 180|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = (($380) + (($377*52)|0)|0);
    $382 = ((($381)) + 32|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = ($383|0)<=(2);
    if (!($384)) {
     $385 = $1;
     $386 = $2;
     $387 = $i;
     $388 = $mod;
     $389 = ((($388)) + 180|0);
     $390 = HEAP32[$389>>2]|0;
     $391 = (($390) + (($387*52)|0)|0);
     $392 = (_load_sample($385,$386,2,$391,0)|0);
     $393 = ($392|0)<(0);
     if ($393) {
      label = 53;
      break;
     }
    }
    $394 = $i;
    $395 = (($394) + 1)|0;
    $i = $395;
   }
   if ((label|0) == 53) {
    $0 = -1;
    $421 = $0;
    STACKTOP = sp;return ($421|0);
   }
   $i = 0;
   while(1) {
    $396 = $i;
    $397 = $mod;
    $398 = ((($397)) + 136|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = ($396|0)<($399|0);
    if (!($400)) {
     break;
    }
    $401 = $i;
    $402 = (($401|0) % 2)&-1;
    $403 = ($402*255)|0;
    $404 = (($403) - 128)|0;
    $405 = $1;
    $406 = ((($405)) + 1296|0);
    $407 = HEAP32[$406>>2]|0;
    $408 = Math_imul($404, $407)|0;
    $409 = (($408|0) / 100)&-1;
    $410 = (128 + ($409))|0;
    $411 = $i;
    $412 = $mod;
    $413 = ((($412)) + 184|0);
    $414 = (($413) + (($411*12)|0)|0);
    HEAP32[$414>>2] = $410;
    $415 = $i;
    $416 = (($415) + 1)|0;
    $i = $416;
   }
   $417 = $1;
   $418 = ((($417)) + 1284|0);
   $419 = HEAP32[$418>>2]|0;
   $420 = $419 | 256;
   HEAP32[$418>>2] = $420;
   $0 = 0;
   $421 = $0;
   STACKTOP = sp;return ($421|0);
  }
 }
 return (0)|0;
}
function _far_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1178686206);
 if ($6) {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,40);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _far_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $brk = 0, $event = 0, $ffh = 0, $ffh2 = 0, $fih = 0, $fxb = 0, $i = 0, $ins = 0, $j = 0, $mod = 0, $note = 0, $or$cond = 0, $rows = 0, $sample_map = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $vib = 0, $vol = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ffh = sp + 64|0;
 $ffh2 = sp + 200|0;
 $fih = sp + 12|0;
 $sample_map = sp + 984|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $vib = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = ((($ffh)) + 4|0);
 $9 = $2;
 (_hio_read($8,40,1,$9)|0);
 $10 = ((($ffh)) + 44|0);
 $11 = $2;
 (_hio_read($10,3,1,$11)|0);
 $12 = $2;
 $13 = (_hio_read16l($12)|0);
 $14 = ((($ffh)) + 48|0);
 HEAP16[$14>>1] = $13;
 $15 = $2;
 $16 = (_hio_read8($15)|0);
 $17 = ((($ffh)) + 50|0);
 HEAP8[$17>>0] = $16;
 $18 = ((($ffh)) + 51|0);
 $19 = $2;
 (_hio_read($18,16,1,$19)|0);
 $20 = $2;
 (_hio_seek($20,9,1)|0);
 $21 = $2;
 $22 = (_hio_read8($21)|0);
 $23 = ((($ffh)) + 76|0);
 HEAP8[$23>>0] = $22;
 $24 = ((($ffh)) + 77|0);
 $25 = $2;
 (_hio_read($24,16,1,$25)|0);
 $26 = $2;
 (_hio_read32l($26)|0);
 $27 = $2;
 $28 = (_hio_read16l($27)|0);
 $29 = ((($ffh)) + 98|0);
 HEAP16[$29>>1] = $28;
 $30 = ((($ffh)) + 76|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)==(0);
 if ($33) {
  $0 = -1;
  $581 = $0;
  STACKTOP = sp;return ($581|0);
 }
 $34 = $2;
 $35 = ((($ffh)) + 98|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 (_hio_seek($34,$37,1)|0);
 $38 = $2;
 (_hio_read($ffh2,256,1,$38)|0);
 $39 = $2;
 $40 = (_hio_read8($39)|0);
 $41 = ((($ffh2)) + 256|0);
 HEAP8[$41>>0] = $40;
 $42 = $2;
 $43 = (_hio_read8($42)|0);
 $44 = ((($ffh2)) + 257|0);
 HEAP8[$44>>0] = $43;
 $45 = $2;
 $46 = (_hio_read8($45)|0);
 $47 = ((($ffh2)) + 258|0);
 HEAP8[$47>>0] = $46;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = ($48|0)<(256);
  if (!($49)) {
   break;
  }
  $50 = $2;
  $51 = (_hio_read16l($50)|0);
  $52 = $i;
  $53 = ((($ffh2)) + 260|0);
  $54 = (($53) + ($52<<1)|0);
  HEAP16[$54>>1] = $51;
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = $mod;
 $58 = ((($57)) + 136|0);
 HEAP32[$58>>2] = 16;
 $59 = ((($ffh2)) + 257|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $mod;
 $63 = ((($62)) + 156|0);
 HEAP32[$63>>2] = $61;
 $64 = $mod;
 $65 = ((($64)) + 148|0);
 HEAP32[$65>>2] = 6;
 $66 = ((($ffh)) + 76|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (480 / ($68|0))&-1;
 $70 = $mod;
 $71 = ((($70)) + 152|0);
 HEAP32[$71>>2] = $69;
 $72 = $mod;
 $73 = ((($72)) + 952|0);
 $74 = $mod;
 $75 = ((($74)) + 156|0);
 $76 = HEAP32[$75>>2]|0;
 _memcpy(($73|0),($ffh2|0),($76|0))|0;
 $i = 0;
 $77 = $mod;
 $78 = ((($77)) + 128|0);
 HEAP32[$78>>2] = 0;
 while(1) {
  $79 = $i;
  $80 = ($79|0)<(256);
  if (!($80)) {
   break;
  }
  $81 = $i;
  $82 = ((($ffh2)) + 260|0);
  $83 = (($82) + ($81<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = ($84<<16>>16)!=(0);
  if ($85) {
   $86 = $i;
   $87 = (($86) + 1)|0;
   $88 = $mod;
   $89 = ((($88)) + 128|0);
   HEAP32[$89>>2] = $87;
  }
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 $92 = $mod;
 $93 = ((($92)) + 136|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $mod;
 $96 = ((($95)) + 128|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = Math_imul($94, $97)|0;
 $99 = $mod;
 $100 = ((($99)) + 132|0);
 HEAP32[$100>>2] = $98;
 $101 = $mod;
 $102 = ((($ffh)) + 4|0);
 (_strncpy(($101|0),($102|0),40)|0);
 $103 = $1;
 $104 = ((($ffh)) + 50|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 $107 = $106 & 240;
 $108 = $107 >> 4;
 $109 = ((($ffh)) + 50|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = $111 & 15;
 HEAP32[$vararg_buffer>>2] = $108;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $112;
 _set_type($103,2424,$vararg_buffer);
 $113 = $mod;
 $114 = (_pattern_init($113)|0);
 $115 = ($114|0)<(0);
 if ($115) {
  $0 = -1;
  $581 = $0;
  STACKTOP = sp;return ($581|0);
 }
 $i = 0;
 L20: while(1) {
  $116 = $i;
  $117 = $mod;
  $118 = ((($117)) + 128|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($116|0)<($119|0);
  $121 = $mod;
  if (!($120)) {
   label = 50;
   break;
  }
  $122 = $i;
  $123 = (_pattern_alloc($121,$122)|0);
  $124 = ($123|0)<(0);
  if ($124) {
   label = 16;
   break;
  }
  $125 = $i;
  $126 = ((($ffh2)) + 260|0);
  $127 = (($126) + ($125<<1)|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = ($128<<16>>16)!=(0);
  L24: do {
   if ($129) {
    $130 = $i;
    $131 = ((($ffh2)) + 260|0);
    $132 = (($131) + ($130<<1)|0);
    $133 = HEAP16[$132>>1]|0;
    $134 = $133&65535;
    $135 = (($134) - 2)|0;
    $136 = (($135|0) / 64)&-1;
    $rows = $136;
    $137 = $rows;
    $138 = ($137|0)<=(0);
    $139 = $rows;
    $140 = ($139|0)>(256);
    $or$cond = $138 | $140;
    if ($or$cond) {
     label = 19;
     break L20;
    }
    $141 = $rows;
    $142 = $i;
    $143 = $mod;
    $144 = ((($143)) + 168|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($142<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    HEAP32[$147>>2] = $141;
    $148 = $mod;
    $149 = $i;
    $150 = (_tracks_in_pattern_alloc($148,$149)|0);
    $151 = ($150|0)<(0);
    if ($151) {
     label = 21;
     break L20;
    }
    $152 = $2;
    $153 = (_hio_read8($152)|0);
    $154 = $153&255;
    $155 = (($154) + 1)|0;
    $156 = $155&255;
    $brk = $156;
    $157 = $2;
    (_hio_read8($157)|0);
    $j = 0;
    while(1) {
     $158 = $j;
     $159 = $i;
     $160 = $mod;
     $161 = ((($160)) + 168|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + ($159<<2)|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = HEAP32[$164>>2]|0;
     $166 = $mod;
     $167 = ((($166)) + 136|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = Math_imul($165, $168)|0;
     $170 = ($158|0)<($169|0);
     if (!($170)) {
      break L24;
     }
     $171 = $j;
     $172 = $mod;
     $173 = ((($172)) + 136|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = (($171|0) / ($174|0))&-1;
     $176 = $j;
     $177 = $mod;
     $178 = ((($177)) + 136|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = (($176|0) % ($179|0))&-1;
     $181 = $i;
     $182 = $1;
     $183 = ((($182)) + 168|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (($184) + ($181<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ((($186)) + 4|0);
     $188 = (($187) + ($180<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $1;
     $191 = ((($190)) + 172|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = (($192) + ($189<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ((($194)) + 4|0);
     $196 = (($195) + ($175<<3)|0);
     $event = $196;
     $197 = $j;
     $198 = $mod;
     $199 = ((($198)) + 136|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($197|0) % ($200|0))&-1;
     $202 = ($201|0)==(0);
     if ($202) {
      $203 = $j;
      $204 = $mod;
      $205 = ((($204)) + 136|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = (($203|0) / ($206|0))&-1;
      $208 = $brk;
      $209 = $208&255;
      $210 = ($207|0)==($209|0);
      if ($210) {
       $211 = $event;
       $212 = ((($211)) + 5|0);
       HEAP8[$212>>0] = 13;
      }
     }
     $213 = $2;
     $214 = (_hio_read8($213)|0);
     $note = $214;
     $215 = $2;
     $216 = (_hio_read8($215)|0);
     $ins = $216;
     $217 = $2;
     $218 = (_hio_read8($217)|0);
     $vol = $218;
     $219 = $2;
     $220 = (_hio_read8($219)|0);
     $fxb = $220;
     $221 = $note;
     $222 = ($221<<24>>24)!=(0);
     if ($222) {
      $223 = $note;
      $224 = $223&255;
      $225 = (($224) + 48)|0;
      $226 = $225&255;
      $227 = $event;
      HEAP8[$227>>0] = $226;
     }
     $228 = $event;
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230|0)!=(0);
     if ($231) {
      label = 31;
     } else {
      $232 = $ins;
      $233 = $232&255;
      $234 = ($233|0)!=(0);
      if ($234) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      label = 0;
      $235 = $ins;
      $236 = $235&255;
      $237 = (($236) + 1)|0;
      $238 = $237&255;
      $239 = $event;
      $240 = ((($239)) + 1|0);
      HEAP8[$240>>0] = $238;
     }
     $241 = $vol;
     $242 = $241&255;
     $243 = $242 & 15;
     $244 = $243<<4;
     $245 = $vol;
     $246 = $245&255;
     $247 = $246 & 240;
     $248 = $247 >> 4;
     $249 = (($244) + ($248))|0;
     $250 = $249&255;
     $vol = $250;
     $251 = $vol;
     $252 = ($251<<24>>24)!=(0);
     if ($252) {
      $253 = $vol;
      $254 = $253&255;
      $255 = (($254) - 16)|0;
      $256 = $255&255;
      $257 = $event;
      $258 = ((($257)) + 2|0);
      HEAP8[$258>>0] = $256;
     }
     $259 = $fxb;
     $260 = $259&255;
     $261 = $260 & 240;
     $262 = $261 >> 4;
     $263 = (2456 + ($262)|0);
     $264 = HEAP8[$263>>0]|0;
     $265 = $event;
     $266 = ((($265)) + 3|0);
     HEAP8[$266>>0] = $264;
     $267 = $fxb;
     $268 = $267&255;
     $269 = $268 & 15;
     $270 = $269&255;
     $271 = $event;
     $272 = ((($271)) + 4|0);
     HEAP8[$272>>0] = $270;
     $273 = $event;
     $274 = ((($273)) + 3|0);
     $275 = HEAP8[$274>>0]|0;
     $276 = $275&255;
     L46: do {
      switch ($276|0) {
      case 255:  {
       $277 = $event;
       $278 = ((($277)) + 4|0);
       HEAP8[$278>>0] = 0;
       $279 = $event;
       $280 = ((($279)) + 3|0);
       HEAP8[$280>>0] = 0;
       break;
      }
      case 253:  {
       $342 = $event;
       $343 = ((($342)) + 3|0);
       HEAP8[$343>>0] = 14;
       $344 = $event;
       $345 = ((($344)) + 4|0);
       $346 = HEAP8[$345>>0]|0;
       $347 = $346&255;
       $348 = $347 | 160;
       $349 = $348&255;
       HEAP8[$345>>0] = $349;
       break;
      }
      case 15:  {
       $358 = $event;
       $359 = ((($358)) + 4|0);
       $360 = HEAP8[$359>>0]|0;
       $361 = $360&255;
       $362 = ($361|0)!=(0);
       $363 = $event;
       if ($362) {
        $364 = ((($363)) + 4|0);
        $365 = HEAP8[$364>>0]|0;
        $366 = $365&255;
        $367 = (480 / ($366|0))&-1;
        $368 = $367&255;
        $369 = $event;
        $370 = ((($369)) + 4|0);
        HEAP8[$370>>0] = $368;
        break L46;
       } else {
        $371 = ((($363)) + 3|0);
        HEAP8[$371>>0] = 0;
        break L46;
       }
       break;
      }
      case 248:  {
       $289 = $event;
       $290 = ((($289)) + 3|0);
       HEAP8[$290>>0] = 14;
       $291 = $event;
       $292 = ((($291)) + 4|0);
       $293 = HEAP8[$292>>0]|0;
       $294 = $293&255;
       $295 = $294 | 32;
       $296 = $295&255;
       HEAP8[$292>>0] = $296;
       break;
      }
      case 4:  {
       $322 = $event;
       $323 = ((($322)) + 4|0);
       $324 = HEAP8[$323>>0]|0;
       $325 = $324&255;
       $326 = $325 << 4;
       $327 = $vib;
       $328 = (($326) + ($327))|0;
       $329 = $328&255;
       $330 = $event;
       $331 = ((($330)) + 4|0);
       HEAP8[$331>>0] = $329;
       break;
      }
      case 249:  {
       $281 = $event;
       $282 = ((($281)) + 3|0);
       HEAP8[$282>>0] = 14;
       $283 = $event;
       $284 = ((($283)) + 4|0);
       $285 = HEAP8[$284>>0]|0;
       $286 = $285&255;
       $287 = $286 | 16;
       $288 = $287&255;
       HEAP8[$284>>0] = $288;
       break;
      }
      case 250:  {
       $305 = $event;
       $306 = ((($305)) + 3|0);
       HEAP8[$306>>0] = 14;
       $307 = $event;
       $308 = ((($307)) + 4|0);
       $309 = HEAP8[$308>>0]|0;
       $310 = $309&255;
       $311 = $310 | 208;
       $312 = $311&255;
       HEAP8[$308>>0] = $312;
       break;
      }
      case 252:  {
       $350 = $event;
       $351 = ((($350)) + 3|0);
       HEAP8[$351>>0] = 14;
       $352 = $event;
       $353 = ((($352)) + 4|0);
       $354 = HEAP8[$353>>0]|0;
       $355 = $354&255;
       $356 = $355 | 176;
       $357 = $356&255;
       HEAP8[$353>>0] = $357;
       break;
      }
      case 251:  {
       $297 = $event;
       $298 = ((($297)) + 3|0);
       HEAP8[$298>>0] = 14;
       $299 = $event;
       $300 = ((($299)) + 4|0);
       $301 = HEAP8[$300>>0]|0;
       $302 = $301&255;
       $303 = $302 | 144;
       $304 = $303&255;
       HEAP8[$300>>0] = $304;
       break;
      }
      case 123:  {
       $332 = $event;
       $333 = ((($332)) + 4|0);
       $334 = HEAP8[$333>>0]|0;
       $335 = $334&255;
       $336 = $335 << 4;
       $337 = $vib;
       $338 = (($336) + ($337))|0;
       $339 = $338&255;
       $340 = $event;
       $341 = ((($340)) + 4|0);
       HEAP8[$341>>0] = $339;
       break;
      }
      case 254:  {
       $313 = $event;
       $314 = ((($313)) + 4|0);
       $315 = HEAP8[$314>>0]|0;
       $316 = $315&255;
       $317 = $316 & 15;
       $vib = $317;
       $318 = $event;
       $319 = ((($318)) + 4|0);
       HEAP8[$319>>0] = 0;
       $320 = $event;
       $321 = ((($320)) + 3|0);
       HEAP8[$321>>0] = 0;
       break;
      }
      default: {
      }
      }
     } while(0);
     $372 = $j;
     $373 = (($372) + 1)|0;
     $j = $373;
    }
   }
  } while(0);
  $374 = $i;
  $375 = (($374) + 1)|0;
  $i = $375;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $581 = $0;
  STACKTOP = sp;return ($581|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $581 = $0;
  STACKTOP = sp;return ($581|0);
 }
 else if ((label|0) == 21) {
  $0 = -1;
  $581 = $0;
  STACKTOP = sp;return ($581|0);
 }
 else if ((label|0) == 50) {
  $376 = ((($121)) + 140|0);
  HEAP32[$376>>2] = -1;
  $377 = $2;
  (_hio_read($sample_map,1,8,$377)|0);
  $i = 0;
  while(1) {
   $378 = $i;
   $379 = ($378|0)<(64);
   if (!($379)) {
    break;
   }
   $380 = $i;
   $381 = (($380|0) / 8)&-1;
   $382 = (($sample_map) + ($381)|0);
   $383 = HEAP8[$382>>0]|0;
   $384 = $383&255;
   $385 = $i;
   $386 = (($385|0) % 8)&-1;
   $387 = 1 << $386;
   $388 = $384 & $387;
   $389 = ($388|0)!=(0);
   if ($389) {
    $390 = $i;
    $391 = $mod;
    $392 = ((($391)) + 140|0);
    HEAP32[$392>>2] = $390;
   }
   $393 = $i;
   $394 = (($393) + 1)|0;
   $i = $394;
  }
  $395 = $mod;
  $396 = ((($395)) + 140|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (($397) + 1)|0;
  HEAP32[$396>>2] = $398;
  $399 = $mod;
  $400 = ((($399)) + 140|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = $mod;
  $403 = ((($402)) + 144|0);
  HEAP32[$403>>2] = $401;
  $404 = $mod;
  $405 = (_instrument_init($404)|0);
  $406 = ($405|0)<(0);
  if ($406) {
   $0 = -1;
   $581 = $0;
   STACKTOP = sp;return ($581|0);
  }
  $i = 0;
  while(1) {
   $407 = $i;
   $408 = $mod;
   $409 = ((($408)) + 140|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = ($407|0)<($410|0);
   if (!($411)) {
    label = 73;
    break;
   }
   $412 = $i;
   $413 = (($412|0) / 8)&-1;
   $414 = (($sample_map) + ($413)|0);
   $415 = HEAP8[$414>>0]|0;
   $416 = $415&255;
   $417 = $i;
   $418 = (($417|0) % 8)&-1;
   $419 = 1 << $418;
   $420 = $416 & $419;
   $421 = ($420|0)!=(0);
   if ($421) {
    $422 = $mod;
    $423 = $i;
    $424 = (_subinstrument_alloc($422,$423,1)|0);
    $425 = ($424|0)<(0);
    if ($425) {
     label = 61;
     break;
    }
    $426 = $2;
    (_hio_read($fih,32,1,$426)|0);
    $427 = $2;
    $428 = (_hio_read32l($427)|0);
    $429 = ((($fih)) + 32|0);
    HEAP32[$429>>2] = $428;
    $430 = $2;
    $431 = (_hio_read8($430)|0);
    $432 = ((($fih)) + 36|0);
    HEAP8[$432>>0] = $431;
    $433 = $2;
    $434 = (_hio_read8($433)|0);
    $435 = ((($fih)) + 37|0);
    HEAP8[$435>>0] = $434;
    $436 = $2;
    $437 = (_hio_read32l($436)|0);
    $438 = ((($fih)) + 40|0);
    HEAP32[$438>>2] = $437;
    $439 = $2;
    $440 = (_hio_read32l($439)|0);
    $441 = ((($fih)) + 44|0);
    HEAP32[$441>>2] = $440;
    $442 = $2;
    $443 = (_hio_read8($442)|0);
    $444 = ((($fih)) + 48|0);
    HEAP8[$444>>0] = $443;
    $445 = $2;
    $446 = (_hio_read8($445)|0);
    $447 = ((($fih)) + 49|0);
    HEAP8[$447>>0] = $446;
    $448 = ((($fih)) + 32|0);
    $449 = HEAP32[$448>>2]|0;
    $450 = ($449>>>0)>(65536);
    if ($450) {
     label = 65;
     break;
    }
    $451 = ((($fih)) + 40|0);
    $452 = HEAP32[$451>>2]|0;
    $453 = ($452>>>0)>(65536);
    if ($453) {
     label = 65;
     break;
    }
    $454 = ((($fih)) + 44|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = ($455>>>0)>(65536);
    if ($456) {
     label = 65;
     break;
    }
    $457 = ((($fih)) + 32|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $i;
    $460 = $mod;
    $461 = ((($460)) + 180|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = (($462) + (($459*52)|0)|0);
    $464 = ((($463)) + 32|0);
    HEAP32[$464>>2] = $458;
    $465 = ((($fih)) + 40|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = $i;
    $468 = $mod;
    $469 = ((($468)) + 180|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = (($470) + (($467*52)|0)|0);
    $472 = ((($471)) + 36|0);
    HEAP32[$472>>2] = $466;
    $473 = ((($fih)) + 44|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = $i;
    $476 = $mod;
    $477 = ((($476)) + 180|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = (($478) + (($475*52)|0)|0);
    $480 = ((($479)) + 40|0);
    HEAP32[$480>>2] = $474;
    $481 = $i;
    $482 = $mod;
    $483 = ((($482)) + 180|0);
    $484 = HEAP32[$483>>2]|0;
    $485 = (($484) + (($481*52)|0)|0);
    $486 = ((($485)) + 44|0);
    HEAP32[$486>>2] = 0;
    $487 = $i;
    $488 = $mod;
    $489 = ((($488)) + 180|0);
    $490 = HEAP32[$489>>2]|0;
    $491 = (($490) + (($487*52)|0)|0);
    $492 = ((($491)) + 32|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = ($493|0)>(0);
    if ($494) {
     $495 = $i;
     $496 = $mod;
     $497 = ((($496)) + 176|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = (($498) + (($495*764)|0)|0);
     $500 = ((($499)) + 36|0);
     HEAP32[$500>>2] = 1;
    }
    $501 = ((($fih)) + 48|0);
    $502 = HEAP8[$501>>0]|0;
    $503 = $502&255;
    $504 = ($503|0)!=(0);
    if ($504) {
     $505 = $i;
     $506 = $mod;
     $507 = ((($506)) + 180|0);
     $508 = HEAP32[$507>>2]|0;
     $509 = (($508) + (($505*52)|0)|0);
     $510 = ((($509)) + 44|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = $511 | 1;
     HEAP32[$510>>2] = $512;
     $513 = $i;
     $514 = $mod;
     $515 = ((($514)) + 180|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = (($516) + (($513*52)|0)|0);
     $518 = ((($517)) + 32|0);
     $519 = HEAP32[$518>>2]|0;
     $520 = $519 >> 1;
     HEAP32[$518>>2] = $520;
     $521 = $i;
     $522 = $mod;
     $523 = ((($522)) + 180|0);
     $524 = HEAP32[$523>>2]|0;
     $525 = (($524) + (($521*52)|0)|0);
     $526 = ((($525)) + 36|0);
     $527 = HEAP32[$526>>2]|0;
     $528 = $527 >> 1;
     HEAP32[$526>>2] = $528;
     $529 = $i;
     $530 = $mod;
     $531 = ((($530)) + 180|0);
     $532 = HEAP32[$531>>2]|0;
     $533 = (($532) + (($529*52)|0)|0);
     $534 = ((($533)) + 40|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 >> 1;
     HEAP32[$534>>2] = $536;
    }
    $537 = ((($fih)) + 49|0);
    $538 = HEAP8[$537>>0]|0;
    $539 = $538&255;
    $540 = ($539|0)!=(0);
    $541 = $540 ? 2 : 0;
    $542 = $i;
    $543 = $mod;
    $544 = ((($543)) + 180|0);
    $545 = HEAP32[$544>>2]|0;
    $546 = (($545) + (($542*52)|0)|0);
    $547 = ((($546)) + 44|0);
    $548 = HEAP32[$547>>2]|0;
    $549 = $548 | $541;
    HEAP32[$547>>2] = $549;
    $550 = $i;
    $551 = $mod;
    $552 = ((($551)) + 176|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = (($553) + (($550*764)|0)|0);
    $555 = ((($554)) + 756|0);
    $556 = HEAP32[$555>>2]|0;
    HEAP32[$556>>2] = 255;
    $557 = $i;
    $558 = $i;
    $559 = $mod;
    $560 = ((($559)) + 176|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = (($561) + (($558*764)|0)|0);
    $563 = ((($562)) + 756|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = ((($564)) + 40|0);
    HEAP32[$565>>2] = $557;
    $566 = $mod;
    $567 = $i;
    (_instrument_name($566,$567,$fih,32)|0);
    $568 = $1;
    $569 = $2;
    $570 = $i;
    $571 = $mod;
    $572 = ((($571)) + 180|0);
    $573 = HEAP32[$572>>2]|0;
    $574 = (($573) + (($570*52)|0)|0);
    $575 = (_load_sample($568,$569,0,$574,0)|0);
    $576 = ($575|0)<(0);
    if ($576) {
     label = 71;
     break;
    }
   }
   $577 = $i;
   $578 = (($577) + 1)|0;
   $i = $578;
  }
  if ((label|0) == 61) {
   $0 = -1;
   $581 = $0;
   STACKTOP = sp;return ($581|0);
  }
  else if ((label|0) == 65) {
   $0 = -1;
   $581 = $0;
   STACKTOP = sp;return ($581|0);
  }
  else if ((label|0) == 71) {
   $0 = -1;
   $581 = $0;
   STACKTOP = sp;return ($581|0);
  }
  else if ((label|0) == 73) {
   $579 = $1;
   $580 = ((($579)) + 1268|0);
   HEAP32[$580>>2] = 255;
   $0 = 0;
   $581 = $0;
   STACKTOP = sp;return ($581|0);
  }
 }
 return (0)|0;
}
function _mtm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,2536,3)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   }
   $9 = ((($buf)) + 3|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)!=(16);
   if ($12) {
    $0 = -1;
    break;
   } else {
    $13 = $1;
    $14 = $2;
    _read_title($13,$14,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _mtm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $e = 0, $i = 0, $j = 0, $mfh = 0, $mih = 0, $mod = 0, $mt = 0, $sub = 0, $track = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mfh = sp + 100|0;
 $mih = sp + 32|0;
 $mt = sp + 168|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($mfh,3,1,$7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = ((($mfh)) + 3|0);
 HEAP8[$10>>0] = $9;
 $11 = ((($mfh)) + 4|0);
 $12 = $2;
 (_hio_read($11,20,1,$12)|0);
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($mfh)) + 24|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($mfh)) + 26|0);
 HEAP8[$18>>0] = $17;
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = ((($mfh)) + 27|0);
 HEAP8[$21>>0] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($mfh)) + 28|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = ((($mfh)) + 30|0);
 HEAP8[$27>>0] = $26;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = ((($mfh)) + 31|0);
 HEAP8[$30>>0] = $29;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = ((($mfh)) + 32|0);
 HEAP8[$33>>0] = $32;
 $34 = ((($mfh)) + 32|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)!=(64);
 if ($37) {
  $0 = -1;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $38 = $2;
 $39 = (_hio_read8($38)|0);
 $40 = ((($mfh)) + 33|0);
 HEAP8[$40>>0] = $39;
 $41 = ((($mfh)) + 34|0);
 $42 = $2;
 (_hio_read($41,32,1,$42)|0);
 $43 = ((($mfh)) + 33|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = ($45|0)>(64);
 if ($46) {
  $0 = -1;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $47 = ((($mfh)) + 24|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $50 = (($49) + 1)|0;
 $51 = $mod;
 $52 = ((($51)) + 132|0);
 HEAP32[$52>>2] = $50;
 $53 = ((($mfh)) + 26|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = (($55) + 1)|0;
 $57 = $mod;
 $58 = ((($57)) + 128|0);
 HEAP32[$58>>2] = $56;
 $59 = ((($mfh)) + 27|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (($61) + 1)|0;
 $63 = $mod;
 $64 = ((($63)) + 156|0);
 HEAP32[$64>>2] = $62;
 $65 = ((($mfh)) + 30|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $mod;
 $69 = ((($68)) + 140|0);
 HEAP32[$69>>2] = $67;
 $70 = $mod;
 $71 = ((($70)) + 140|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $mod;
 $74 = ((($73)) + 144|0);
 HEAP32[$74>>2] = $72;
 $75 = ((($mfh)) + 33|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $mod;
 $79 = ((($78)) + 136|0);
 HEAP32[$79>>2] = $77;
 $80 = $mod;
 $81 = ((($80)) + 148|0);
 HEAP32[$81>>2] = 6;
 $82 = $mod;
 $83 = ((($82)) + 152|0);
 HEAP32[$83>>2] = 125;
 $84 = $mod;
 $85 = ((($mfh)) + 4|0);
 (_strncpy(($84|0),($85|0),20)|0);
 $86 = $1;
 $87 = ((($mfh)) + 3|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = $89 & 240;
 $91 = $90 >> 4;
 $92 = ((($mfh)) + 3|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $94 & 15;
 HEAP32[$vararg_buffer>>2] = $91;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $95;
 _set_type($86,2504,$vararg_buffer);
 $96 = $mod;
 $97 = (_instrument_init($96)|0);
 $98 = ($97|0)<(0);
 if ($98) {
  $0 = -1;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $i = 0;
 while(1) {
  $99 = $i;
  $100 = $mod;
  $101 = ((($100)) + 140|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($99|0)<($102|0);
  if (!($103)) {
   label = 18;
   break;
  }
  $104 = $i;
  $105 = $mod;
  $106 = ((($105)) + 176|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + (($104*764)|0)|0);
  $xxi = $108;
  $109 = $i;
  $110 = $mod;
  $111 = ((($110)) + 180|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + (($109*52)|0)|0);
  $xxs = $113;
  $114 = $mod;
  $115 = $i;
  $116 = (_subinstrument_alloc($114,$115,1)|0);
  $117 = ($116|0)<(0);
  if ($117) {
   label = 10;
   break;
  }
  $118 = $xxi;
  $119 = ((($118)) + 756|0);
  $120 = HEAP32[$119>>2]|0;
  $sub = $120;
  $121 = $2;
  (_hio_read($mih,22,1,$121)|0);
  $122 = $2;
  $123 = (_hio_read32l($122)|0);
  $124 = ((($mih)) + 24|0);
  HEAP32[$124>>2] = $123;
  $125 = ((($mih)) + 24|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126>>>0)>(268435456);
  if ($127) {
   label = 12;
   break;
  }
  $128 = $2;
  $129 = (_hio_read32l($128)|0);
  $130 = ((($mih)) + 28|0);
  HEAP32[$130>>2] = $129;
  $131 = $2;
  $132 = (_hio_read32l($131)|0);
  $133 = ((($mih)) + 32|0);
  HEAP32[$133>>2] = $132;
  $134 = $2;
  $135 = (_hio_read8($134)|0);
  $136 = ((($mih)) + 36|0);
  HEAP8[$136>>0] = $135;
  $137 = $2;
  $138 = (_hio_read8($137)|0);
  $139 = ((($mih)) + 37|0);
  HEAP8[$139>>0] = $138;
  $140 = $2;
  $141 = (_hio_read8($140)|0);
  $142 = ((($mih)) + 38|0);
  HEAP8[$142>>0] = $141;
  $143 = ((($mih)) + 24|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $xxs;
  $146 = ((($145)) + 32|0);
  HEAP32[$146>>2] = $144;
  $147 = ((($mih)) + 28|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $xxs;
  $150 = ((($149)) + 36|0);
  HEAP32[$150>>2] = $148;
  $151 = ((($mih)) + 32|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $xxs;
  $154 = ((($153)) + 40|0);
  HEAP32[$154>>2] = $152;
  $155 = $xxs;
  $156 = ((($155)) + 40|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($157|0)!=(0);
  $159 = $158 ? 2 : 0;
  $160 = $xxs;
  $161 = ((($160)) + 44|0);
  HEAP32[$161>>2] = $159;
  $162 = ((($mfh)) + 31|0);
  $163 = HEAP8[$162>>0]|0;
  $164 = $163&255;
  $165 = $164 & 1;
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $xxs;
   $168 = ((($167)) + 44|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $169 | 1;
   HEAP32[$168>>2] = $170;
   $171 = $xxs;
   $172 = ((($171)) + 32|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $173 >> 1;
   HEAP32[$172>>2] = $174;
   $175 = $xxs;
   $176 = ((($175)) + 36|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177 >> 1;
   HEAP32[$176>>2] = $178;
   $179 = $xxs;
   $180 = ((($179)) + 40|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $181 >> 1;
   HEAP32[$180>>2] = $182;
  }
  $183 = ((($mih)) + 37|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $sub;
  HEAP32[$186>>2] = $185;
  $187 = ((($mih)) + 36|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188&255;
  $190 = $sub;
  $191 = ((($190)) + 16|0);
  HEAP32[$191>>2] = $189;
  $192 = $sub;
  $193 = ((($192)) + 8|0);
  HEAP32[$193>>2] = 128;
  $194 = $i;
  $195 = $sub;
  $196 = ((($195)) + 40|0);
  HEAP32[$196>>2] = $194;
  $197 = $mod;
  $198 = $i;
  (_instrument_name($197,$198,$mih,22)|0);
  $199 = $xxs;
  $200 = ((($199)) + 32|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)>(0);
  if ($202) {
   $203 = $i;
   $204 = $mod;
   $205 = ((($204)) + 176|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($206) + (($203*764)|0)|0);
   $208 = ((($207)) + 36|0);
   HEAP32[$208>>2] = 1;
  }
  $209 = $i;
  $210 = (($209) + 1)|0;
  $i = $210;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 18) {
  $211 = $mod;
  $212 = ((($211)) + 952|0);
  $213 = $2;
  (_hio_read($212,1,128,$213)|0);
  $214 = $mod;
  $215 = (_pattern_init($214)|0);
  $216 = ($215|0)<(0);
  if ($216) {
   $0 = -1;
   $402 = $0;
   STACKTOP = sp;return ($402|0);
  }
  $i = 0;
  L34: while(1) {
   $217 = $i;
   $218 = $mod;
   $219 = ((($218)) + 132|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ($217|0)<($220|0);
   if (!($221)) {
    label = 38;
    break;
   }
   $222 = $mod;
   $223 = $i;
   $224 = ((($mfh)) + 32|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = (_track_alloc($222,$223,$226)|0);
   $228 = ($227|0)<(0);
   if ($228) {
    label = 23;
    break;
   }
   $229 = $i;
   $230 = ($229|0)==(0);
   L38: do {
    if (!($230)) {
     $231 = $2;
     $232 = (_hio_read($mt,3,64,$231)|0);
     $233 = ($232|0)!=(64);
     if ($233) {
      label = 26;
      break L34;
     }
     $j = 0;
     while(1) {
      $234 = $j;
      $235 = ($234|0)<(64);
      if (!($235)) {
       break L38;
      }
      $236 = $j;
      $237 = $i;
      $238 = $mod;
      $239 = ((($238)) + 172|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = (($240) + ($237<<2)|0);
      $242 = HEAP32[$241>>2]|0;
      $243 = ((($242)) + 4|0);
      $244 = (($243) + ($236<<3)|0);
      $e = $244;
      $245 = $j;
      $246 = ($245*3)|0;
      $247 = (($mt) + ($246)|0);
      $d = $247;
      $248 = $d;
      $249 = HEAP8[$248>>0]|0;
      $250 = $249&255;
      $251 = $250 >> 2;
      $252 = $251&255;
      $253 = $e;
      HEAP8[$253>>0] = $252;
      $254 = ($252<<24>>24)!=(0);
      if ($254) {
       $255 = $e;
       $256 = HEAP8[$255>>0]|0;
       $257 = $256&255;
       $258 = (($257) + 37)|0;
       $259 = $258&255;
       HEAP8[$255>>0] = $259;
      }
      $260 = $d;
      $261 = HEAP8[$260>>0]|0;
      $262 = $261&255;
      $263 = $262 & 3;
      $264 = $263 << 4;
      $265 = $d;
      $266 = ((($265)) + 1|0);
      $267 = HEAP8[$266>>0]|0;
      $268 = $267&255;
      $269 = $268 & 240;
      $270 = $269 >> 4;
      $271 = (($264) + ($270))|0;
      $272 = $271&255;
      $273 = $e;
      $274 = ((($273)) + 1|0);
      HEAP8[$274>>0] = $272;
      $275 = $d;
      $276 = ((($275)) + 1|0);
      $277 = HEAP8[$276>>0]|0;
      $278 = $277&255;
      $279 = $278 & 15;
      $280 = $279&255;
      $281 = $e;
      $282 = ((($281)) + 3|0);
      HEAP8[$282>>0] = $280;
      $283 = $d;
      $284 = ((($283)) + 2|0);
      $285 = HEAP8[$284>>0]|0;
      $286 = $e;
      $287 = ((($286)) + 4|0);
      HEAP8[$287>>0] = $285;
      $288 = $e;
      $289 = ((($288)) + 3|0);
      $290 = HEAP8[$289>>0]|0;
      $291 = $290&255;
      $292 = ($291|0)>(15);
      if ($292) {
       $293 = $e;
       $294 = ((($293)) + 4|0);
       HEAP8[$294>>0] = 0;
       $295 = $e;
       $296 = ((($295)) + 3|0);
       HEAP8[$296>>0] = 0;
      }
      $297 = $e;
      $298 = ((($297)) + 3|0);
      $299 = HEAP8[$298>>0]|0;
      $300 = $299&255;
      $301 = ($300|0)==(14);
      if ($301) {
       $302 = $e;
       $303 = ((($302)) + 4|0);
       $304 = HEAP8[$303>>0]|0;
       $305 = $304&255;
       $306 = $305 & 240;
       $307 = $306 >> 4;
       $308 = ($307|0)==(8);
       if ($308) {
        $309 = $e;
        $310 = ((($309)) + 3|0);
        HEAP8[$310>>0] = 8;
        $311 = $e;
        $312 = ((($311)) + 4|0);
        $313 = HEAP8[$312>>0]|0;
        $314 = $313&255;
        $315 = $314 << 4;
        $316 = $315&255;
        HEAP8[$312>>0] = $316;
       }
      }
      $317 = $j;
      $318 = (($317) + 1)|0;
      $j = $318;
     }
    }
   } while(0);
   $319 = $i;
   $320 = (($319) + 1)|0;
   $i = $320;
  }
  if ((label|0) == 23) {
   $0 = -1;
   $402 = $0;
   STACKTOP = sp;return ($402|0);
  }
  else if ((label|0) == 26) {
   $0 = -1;
   $402 = $0;
   STACKTOP = sp;return ($402|0);
  }
  else if ((label|0) == 38) {
   $i = 0;
   while(1) {
    $321 = $i;
    $322 = $mod;
    $323 = ((($322)) + 128|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($321|0)<($324|0);
    if (!($325)) {
     break;
    }
    $326 = $mod;
    $327 = $i;
    $328 = (_pattern_alloc($326,$327)|0);
    $329 = ($328|0)<(0);
    if ($329) {
     label = 41;
     break;
    }
    $330 = $i;
    $331 = $mod;
    $332 = ((($331)) + 168|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = (($333) + ($330<<2)|0);
    $335 = HEAP32[$334>>2]|0;
    HEAP32[$335>>2] = 64;
    $j = 0;
    while(1) {
     $336 = $j;
     $337 = ($336|0)<(32);
     if (!($337)) {
      break;
     }
     $338 = $2;
     $339 = (_hio_read16l($338)|0);
     $340 = $339&65535;
     $track = $340;
     $341 = $track;
     $342 = $mod;
     $343 = ((($342)) + 132|0);
     $344 = HEAP32[$343>>2]|0;
     $345 = ($341|0)>=($344|0);
     $$ = $345 ? 0 : $340;
     $track = $$;
     $346 = $j;
     $347 = $mod;
     $348 = ((($347)) + 136|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = ($346|0)<($349|0);
     if ($350) {
      $351 = $track;
      $352 = $j;
      $353 = $i;
      $354 = $mod;
      $355 = ((($354)) + 168|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = (($356) + ($353<<2)|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = ((($358)) + 4|0);
      $360 = (($359) + ($352<<2)|0);
      HEAP32[$360>>2] = $351;
     }
     $361 = $j;
     $362 = (($361) + 1)|0;
     $j = $362;
    }
    $363 = $i;
    $364 = (($363) + 1)|0;
    $i = $364;
   }
   if ((label|0) == 41) {
    $0 = -1;
    $402 = $0;
    STACKTOP = sp;return ($402|0);
   }
   $365 = $2;
   $366 = ((($mfh)) + 28|0);
   $367 = HEAP16[$366>>1]|0;
   $368 = $367&65535;
   (_hio_seek($365,$368,1)|0);
   $i = 0;
   while(1) {
    $369 = $i;
    $370 = $mod;
    $371 = ((($370)) + 140|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = ($369|0)<($372|0);
    if (!($373)) {
     break;
    }
    $374 = $1;
    $375 = $2;
    $376 = $i;
    $377 = $mod;
    $378 = ((($377)) + 180|0);
    $379 = HEAP32[$378>>2]|0;
    $380 = (($379) + (($376*52)|0)|0);
    $381 = (_load_sample($374,$375,2,$380,0)|0);
    $382 = ($381|0)<(0);
    if ($382) {
     label = 51;
     break;
    }
    $383 = $i;
    $384 = (($383) + 1)|0;
    $i = $384;
   }
   if ((label|0) == 51) {
    $0 = -1;
    $402 = $0;
    STACKTOP = sp;return ($402|0);
   }
   $i = 0;
   while(1) {
    $385 = $i;
    $386 = $mod;
    $387 = ((($386)) + 136|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = ($385|0)<($388|0);
    if (!($389)) {
     break;
    }
    $390 = $i;
    $391 = ((($mfh)) + 34|0);
    $392 = (($391) + ($390)|0);
    $393 = HEAP8[$392>>0]|0;
    $394 = $393&255;
    $395 = $394 << 4;
    $396 = $i;
    $397 = $mod;
    $398 = ((($397)) + 184|0);
    $399 = (($398) + (($396*12)|0)|0);
    HEAP32[$399>>2] = $395;
    $400 = $i;
    $401 = (($400) + 1)|0;
    $i = $401;
   }
   $0 = 0;
   $402 = $0;
   STACKTOP = sp;return ($402|0);
  }
 }
 return (0)|0;
}
function _ptm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 44)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1347702086);
 if ($9) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $10 = $1;
  $11 = $3;
  $12 = (($11) + 0)|0;
  (_hio_seek($10,$12,0)|0);
  $13 = $1;
  $14 = $2;
  _read_title($13,$14,28);
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _ptm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $event = 0, $i = 0, $mod = 0, $n = 0, $pfh = 0, $pih = 0, $r = 0, $smp_ofs = 0, $sub = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $xxi = 0;
 var $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $smp_ofs = sp + 720|0;
 $pfh = sp + 104|0;
 $pih = sp + 20|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($pfh,28,1,$7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = ((($pfh)) + 28|0);
 HEAP8[$10>>0] = $9;
 $11 = $2;
 $12 = (_hio_read8($11)|0);
 $13 = ((($pfh)) + 29|0);
 HEAP8[$13>>0] = $12;
 $14 = $2;
 $15 = (_hio_read8($14)|0);
 $16 = ((($pfh)) + 30|0);
 HEAP8[$16>>0] = $15;
 $17 = $2;
 $18 = (_hio_read8($17)|0);
 $19 = ((($pfh)) + 31|0);
 HEAP8[$19>>0] = $18;
 $20 = $2;
 $21 = (_hio_read16l($20)|0);
 $22 = ((($pfh)) + 32|0);
 HEAP16[$22>>1] = $21;
 $23 = $2;
 $24 = (_hio_read16l($23)|0);
 $25 = ((($pfh)) + 34|0);
 HEAP16[$25>>1] = $24;
 $26 = $2;
 $27 = (_hio_read16l($26)|0);
 $28 = ((($pfh)) + 36|0);
 HEAP16[$28>>1] = $27;
 $29 = $2;
 $30 = (_hio_read16l($29)|0);
 $31 = ((($pfh)) + 38|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read16l($32)|0);
 $34 = ((($pfh)) + 40|0);
 HEAP16[$34>>1] = $33;
 $35 = $2;
 $36 = (_hio_read16l($35)|0);
 $37 = ((($pfh)) + 42|0);
 HEAP16[$37>>1] = $36;
 $38 = $2;
 $39 = (_hio_read32b($38)|0);
 $40 = ((($pfh)) + 44|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($pfh)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(1347702086);
 if ($43) {
  $0 = -1;
  $505 = $0;
  STACKTOP = sp;return ($505|0);
 }
 $44 = ((($pfh)) + 32|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = ($46|0)>(256);
 if (!($47)) {
  $48 = ((($pfh)) + 34|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49&65535;
  $51 = ($50|0)>(255);
  if (!($51)) {
   $52 = ((($pfh)) + 36|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53&65535;
   $55 = ($54|0)>(256);
   if (!($55)) {
    $56 = ((($pfh)) + 38|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57&65535;
    $59 = ($58|0)>(64);
    if (!($59)) {
     $60 = ((($pfh)) + 48|0);
     $61 = $2;
     (_hio_read($60,16,1,$61)|0);
     $62 = ((($pfh)) + 64|0);
     $63 = $2;
     (_hio_read($62,32,1,$63)|0);
     $64 = ((($pfh)) + 96|0);
     $65 = $2;
     (_hio_read($64,256,1,$65)|0);
     $i = 0;
     while(1) {
      $66 = $i;
      $67 = ($66|0)<(128);
      if (!($67)) {
       break;
      }
      $68 = $2;
      $69 = (_hio_read16l($68)|0);
      $70 = $i;
      $71 = ((($pfh)) + 352|0);
      $72 = (($71) + ($70<<1)|0);
      HEAP16[$72>>1] = $69;
      $73 = $i;
      $74 = (($73) + 1)|0;
      $i = $74;
     }
     $75 = ((($pfh)) + 32|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = $76&65535;
     $78 = $mod;
     $79 = ((($78)) + 156|0);
     HEAP32[$79>>2] = $77;
     $80 = ((($pfh)) + 34|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = $81&65535;
     $83 = $mod;
     $84 = ((($83)) + 140|0);
     HEAP32[$84>>2] = $82;
     $85 = ((($pfh)) + 36|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = $86&65535;
     $88 = $mod;
     $89 = ((($88)) + 128|0);
     HEAP32[$89>>2] = $87;
     $90 = ((($pfh)) + 38|0);
     $91 = HEAP16[$90>>1]|0;
     $92 = $91&65535;
     $93 = $mod;
     $94 = ((($93)) + 136|0);
     HEAP32[$94>>2] = $92;
     $95 = $mod;
     $96 = ((($95)) + 128|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $mod;
     $99 = ((($98)) + 136|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = Math_imul($97, $100)|0;
     $102 = $mod;
     $103 = ((($102)) + 132|0);
     HEAP32[$103>>2] = $101;
     $104 = $mod;
     $105 = ((($104)) + 140|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $mod;
     $108 = ((($107)) + 144|0);
     HEAP32[$108>>2] = $106;
     $109 = $mod;
     $110 = ((($109)) + 148|0);
     HEAP32[$110>>2] = 6;
     $111 = $mod;
     $112 = ((($111)) + 152|0);
     HEAP32[$112>>2] = 125;
     $113 = $mod;
     $114 = ((($113)) + 952|0);
     $115 = ((($pfh)) + 96|0);
     _memcpy(($114|0),($115|0),256)|0;
     $116 = $1;
     $117 = ((($116)) + 1264|0);
     HEAP32[$117>>2] = 8363;
     $118 = $mod;
     (_copy_adjust($118,$pfh,28)|0);
     $119 = $1;
     $120 = ((($pfh)) + 30|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = ((($pfh)) + 29|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = $124&255;
     HEAP32[$vararg_buffer>>2] = $122;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $125;
     _set_type($119,2576,$vararg_buffer);
     $126 = $mod;
     $127 = (_instrument_init($126)|0);
     $128 = ($127|0)<(0);
     if ($128) {
      $0 = -1;
      $505 = $0;
      STACKTOP = sp;return ($505|0);
     }
     $i = 0;
     while(1) {
      $129 = $i;
      $130 = $mod;
      $131 = ((($130)) + 140|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($129|0)<($132|0);
      if (!($133)) {
       break;
      }
      $134 = $i;
      $135 = $mod;
      $136 = ((($135)) + 176|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = (($137) + (($134*764)|0)|0);
      $xxi = $138;
      $139 = $i;
      $140 = $mod;
      $141 = ((($140)) + 180|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($142) + (($139*52)|0)|0);
      $xxs = $143;
      $144 = $2;
      $145 = (_hio_read8($144)|0);
      HEAP8[$pih>>0] = $145;
      $146 = ((($pih)) + 1|0);
      $147 = $2;
      (_hio_read($146,12,1,$147)|0);
      $148 = $2;
      $149 = (_hio_read8($148)|0);
      $150 = ((($pih)) + 13|0);
      HEAP8[$150>>0] = $149;
      $151 = $2;
      $152 = (_hio_read16l($151)|0);
      $153 = ((($pih)) + 14|0);
      HEAP16[$153>>1] = $152;
      $154 = $2;
      $155 = (_hio_read16l($154)|0);
      $156 = ((($pih)) + 16|0);
      HEAP16[$156>>1] = $155;
      $157 = $2;
      $158 = (_hio_read32l($157)|0);
      $159 = ((($pih)) + 20|0);
      HEAP32[$159>>2] = $158;
      $160 = $2;
      $161 = (_hio_read32l($160)|0);
      $162 = ((($pih)) + 24|0);
      HEAP32[$162>>2] = $161;
      $163 = $2;
      $164 = (_hio_read32l($163)|0);
      $165 = ((($pih)) + 28|0);
      HEAP32[$165>>2] = $164;
      $166 = $2;
      $167 = (_hio_read32l($166)|0);
      $168 = ((($pih)) + 32|0);
      HEAP32[$168>>2] = $167;
      $169 = $2;
      $170 = (_hio_read32l($169)|0);
      $171 = ((($pih)) + 36|0);
      HEAP32[$171>>2] = $170;
      $172 = $2;
      $173 = (_hio_read32l($172)|0);
      $174 = ((($pih)) + 40|0);
      HEAP32[$174>>2] = $173;
      $175 = $2;
      $176 = (_hio_read32l($175)|0);
      $177 = ((($pih)) + 44|0);
      HEAP32[$177>>2] = $176;
      $178 = $2;
      $179 = (_hio_read8($178)|0);
      $180 = ((($pih)) + 48|0);
      HEAP8[$180>>0] = $179;
      $181 = $2;
      $182 = (_hio_read8($181)|0);
      $183 = ((($pih)) + 49|0);
      HEAP8[$183>>0] = $182;
      $184 = ((($pih)) + 50|0);
      $185 = $2;
      (_hio_read($184,28,1,$185)|0);
      $186 = $2;
      $187 = (_hio_read32b($186)|0);
      $188 = ((($pih)) + 80|0);
      HEAP32[$188>>2] = $187;
      $189 = HEAP8[$pih>>0]|0;
      $190 = $189&255;
      $191 = $190 & 3;
      $192 = ($191|0)!=(1);
      if (!($192)) {
       $193 = $mod;
       $194 = $i;
       $195 = (_subinstrument_alloc($193,$194,1)|0);
       $196 = ($195|0)<(0);
       if ($196) {
        label = 17;
        break;
       }
       $197 = $xxi;
       $198 = ((($197)) + 756|0);
       $199 = HEAP32[$198>>2]|0;
       $sub = $199;
       $200 = ((($pih)) + 20|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $i;
       $203 = (($smp_ofs) + ($202<<2)|0);
       HEAP32[$203>>2] = $201;
       $204 = ((($pih)) + 24|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $xxs;
       $207 = ((($206)) + 32|0);
       HEAP32[$207>>2] = $205;
       $208 = ((($pih)) + 28|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $xxs;
       $211 = ((($210)) + 36|0);
       HEAP32[$211>>2] = $209;
       $212 = ((($pih)) + 32|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $xxs;
       $215 = ((($214)) + 40|0);
       HEAP32[$215>>2] = $213;
       $216 = $i;
       $217 = $mod;
       $218 = ((($217)) + 180|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = (($219) + (($216*52)|0)|0);
       $221 = ((($220)) + 32|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = ($222|0)>(0);
       if ($223) {
        $224 = $i;
        $225 = $mod;
        $226 = ((($225)) + 176|0);
        $227 = HEAP32[$226>>2]|0;
        $228 = (($227) + (($224*764)|0)|0);
        $229 = ((($228)) + 36|0);
        HEAP32[$229>>2] = 1;
       }
       $230 = $xxs;
       $231 = ((($230)) + 44|0);
       HEAP32[$231>>2] = 0;
       $232 = HEAP8[$pih>>0]|0;
       $233 = $232&255;
       $234 = $233 & 4;
       $235 = ($234|0)!=(0);
       if ($235) {
        $236 = $xxs;
        $237 = ((($236)) + 44|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = $238 | 2;
        HEAP32[$237>>2] = $239;
       }
       $240 = HEAP8[$pih>>0]|0;
       $241 = $240&255;
       $242 = $241 & 8;
       $243 = ($242|0)!=(0);
       if ($243) {
        $244 = $xxs;
        $245 = ((($244)) + 44|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = $246 | 6;
        HEAP32[$245>>2] = $247;
       }
       $248 = HEAP8[$pih>>0]|0;
       $249 = $248&255;
       $250 = $249 & 16;
       $251 = ($250|0)!=(0);
       if ($251) {
        $252 = $xxs;
        $253 = ((($252)) + 44|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $254 | 1;
        HEAP32[$253>>2] = $255;
        $256 = $xxs;
        $257 = ((($256)) + 32|0);
        $258 = HEAP32[$257>>2]|0;
        $259 = $258 >> 1;
        HEAP32[$257>>2] = $259;
        $260 = $xxs;
        $261 = ((($260)) + 36|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = $262 >> 1;
        HEAP32[$261>>2] = $263;
        $264 = $xxs;
        $265 = ((($264)) + 40|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $266 >> 1;
        HEAP32[$265>>2] = $267;
       }
       $268 = ((($pih)) + 13|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = $269&255;
       $271 = $sub;
       HEAP32[$271>>2] = $270;
       $272 = $sub;
       $273 = ((($272)) + 8|0);
       HEAP32[$273>>2] = 128;
       $274 = $i;
       $275 = $sub;
       $276 = ((($275)) + 40|0);
       HEAP32[$276>>2] = $274;
       $277 = ((($pih)) + 80|0);
       HEAP32[$277>>2] = 0;
       $278 = $mod;
       $279 = $i;
       $280 = ((($pih)) + 50|0);
       (_instrument_name($278,$279,$280,28)|0);
       $281 = ((($pih)) + 14|0);
       $282 = HEAP16[$281>>1]|0;
       $283 = $282&65535;
       $284 = $sub;
       $285 = ((($284)) + 12|0);
       $286 = $sub;
       $287 = ((($286)) + 16|0);
       _c2spd_to_note($283,$285,$287);
      }
      $288 = $i;
      $289 = (($288) + 1)|0;
      $i = $289;
     }
     if ((label|0) == 17) {
      $0 = -1;
      $505 = $0;
      STACKTOP = sp;return ($505|0);
     }
     $290 = $mod;
     $291 = (_pattern_init($290)|0);
     $292 = ($291|0)<(0);
     if ($292) {
      $0 = -1;
      $505 = $0;
      STACKTOP = sp;return ($505|0);
     }
     $i = 0;
     L45: while(1) {
      $293 = $i;
      $294 = $mod;
      $295 = ((($294)) + 128|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ($293|0)<($296|0);
      if (!($297)) {
       break;
      }
      $298 = $i;
      $299 = ((($pfh)) + 352|0);
      $300 = (($299) + ($298<<1)|0);
      $301 = HEAP16[$300>>1]|0;
      $302 = ($301<<16>>16)!=(0);
      L48: do {
       if ($302) {
        $303 = $mod;
        $304 = $i;
        $305 = (_pattern_tracks_alloc($303,$304,64)|0);
        $306 = ($305|0)<(0);
        if ($306) {
         label = 34;
         break L45;
        }
        $307 = $2;
        $308 = $3;
        $309 = $i;
        $310 = ((($pfh)) + 352|0);
        $311 = (($310) + ($309<<1)|0);
        $312 = HEAP16[$311>>1]|0;
        $313 = $312&65535;
        $314 = $313<<4;
        $315 = (($308) + ($314))|0;
        (_hio_seek($307,$315,0)|0);
        $r = 0;
        while(1) {
         $316 = $r;
         $317 = ($316|0)<(64);
         if (!($317)) {
          break L48;
         }
         $318 = $2;
         $319 = (_hio_read8($318)|0);
         $b = $319;
         $320 = $b;
         $321 = ($320<<24>>24)!=(0);
         if (!($321)) {
          $322 = $r;
          $323 = (($322) + 1)|0;
          $r = $323;
          continue;
         }
         $324 = $b;
         $325 = $324&255;
         $326 = $325 & 31;
         $c = $326;
         $327 = $c;
         $328 = $mod;
         $329 = ((($328)) + 136|0);
         $330 = HEAP32[$329>>2]|0;
         $331 = ($327|0)>=($330|0);
         if ($331) {
          continue;
         }
         $332 = $r;
         $333 = $c;
         $334 = $i;
         $335 = $1;
         $336 = ((($335)) + 168|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = (($337) + ($334<<2)|0);
         $339 = HEAP32[$338>>2]|0;
         $340 = ((($339)) + 4|0);
         $341 = (($340) + ($333<<2)|0);
         $342 = HEAP32[$341>>2]|0;
         $343 = $1;
         $344 = ((($343)) + 172|0);
         $345 = HEAP32[$344>>2]|0;
         $346 = (($345) + ($342<<2)|0);
         $347 = HEAP32[$346>>2]|0;
         $348 = ((($347)) + 4|0);
         $349 = (($348) + ($332<<3)|0);
         $event = $349;
         $350 = $b;
         $351 = $350&255;
         $352 = $351 & 32;
         $353 = ($352|0)!=(0);
         if ($353) {
          $354 = $2;
          $355 = (_hio_read8($354)|0);
          $n = $355;
          $356 = $n;
          $357 = $356&255;
          if ((($357|0) == 255)) {
           $n = 0;
          } else if ((($357|0) == 254)) {
           $n = -127;
          } else {
           $358 = $n;
           $359 = $358&255;
           $360 = (($359) + 12)|0;
           $361 = $360&255;
           $n = $361;
          }
          $362 = $n;
          $363 = $event;
          HEAP8[$363>>0] = $362;
          $364 = $2;
          $365 = (_hio_read8($364)|0);
          $366 = $event;
          $367 = ((($366)) + 1|0);
          HEAP8[$367>>0] = $365;
         }
         $368 = $b;
         $369 = $368&255;
         $370 = $369 & 64;
         $371 = ($370|0)!=(0);
         L66: do {
          if ($371) {
           $372 = $2;
           $373 = (_hio_read8($372)|0);
           $374 = $event;
           $375 = ((($374)) + 3|0);
           HEAP8[$375>>0] = $373;
           $376 = $2;
           $377 = (_hio_read8($376)|0);
           $378 = $event;
           $379 = ((($378)) + 4|0);
           HEAP8[$379>>0] = $377;
           $380 = $event;
           $381 = ((($380)) + 3|0);
           $382 = HEAP8[$381>>0]|0;
           $383 = $382&255;
           $384 = ($383|0)>(23);
           if ($384) {
            $385 = $event;
            $386 = ((($385)) + 4|0);
            HEAP8[$386>>0] = 0;
            $387 = $event;
            $388 = ((($387)) + 3|0);
            HEAP8[$388>>0] = 0;
           }
           $389 = $event;
           $390 = ((($389)) + 3|0);
           $391 = HEAP8[$390>>0]|0;
           $392 = $391&255;
           switch ($392|0) {
           case 17:  {
            $413 = $event;
            $414 = ((($413)) + 3|0);
            HEAP8[$414>>0] = 27;
            break L66;
            break;
           }
           case 21:  {
            $421 = $event;
            $422 = ((($421)) + 3|0);
            HEAP8[$422>>0] = -97;
            break L66;
            break;
           }
           case 18:  {
            $415 = $event;
            $416 = ((($415)) + 3|0);
            HEAP8[$416>>0] = -84;
            break L66;
            break;
           }
           case 22:  {
            $423 = $event;
            $424 = ((($423)) + 3|0);
            HEAP8[$424>>0] = -98;
            break L66;
            break;
           }
           case 19:  {
            $417 = $event;
            $418 = ((($417)) + 3|0);
            HEAP8[$418>>0] = -100;
            break L66;
            break;
           }
           case 14:  {
            $393 = $event;
            $394 = ((($393)) + 4|0);
            $395 = HEAP8[$394>>0]|0;
            $396 = $395&255;
            $397 = $396 & 240;
            $398 = $397 >> 4;
            $399 = ($398|0)==(8);
            if (!($399)) {
             break L66;
            }
            $400 = $event;
            $401 = ((($400)) + 3|0);
            HEAP8[$401>>0] = 8;
            $402 = $event;
            $403 = ((($402)) + 4|0);
            $404 = HEAP8[$403>>0]|0;
            $405 = $404&255;
            $406 = $405 & 15;
            $407 = $406 << 4;
            $408 = $407&255;
            $409 = $event;
            $410 = ((($409)) + 4|0);
            HEAP8[$410>>0] = $408;
            break L66;
            break;
           }
           case 23:  {
            $425 = $event;
            $426 = ((($425)) + 4|0);
            HEAP8[$426>>0] = 0;
            $427 = $event;
            $428 = ((($427)) + 3|0);
            HEAP8[$428>>0] = 0;
            break L66;
            break;
           }
           case 20:  {
            $419 = $event;
            $420 = ((($419)) + 3|0);
            HEAP8[$420>>0] = -99;
            break L66;
            break;
           }
           case 16:  {
            $411 = $event;
            $412 = ((($411)) + 3|0);
            HEAP8[$412>>0] = 16;
            break L66;
            break;
           }
           default: {
            break L66;
           }
           }
          }
         } while(0);
         $429 = $b;
         $430 = $429&255;
         $431 = $430 & 128;
         $432 = ($431|0)!=(0);
         if (!($432)) {
          continue;
         }
         $433 = $2;
         $434 = (_hio_read8($433)|0);
         $435 = $434&255;
         $436 = (($435) + 1)|0;
         $437 = $436&255;
         $438 = $event;
         $439 = ((($438)) + 2|0);
         HEAP8[$439>>0] = $437;
        }
       }
      } while(0);
      $440 = $i;
      $441 = (($440) + 1)|0;
      $i = $441;
     }
     if ((label|0) == 34) {
      $0 = -1;
      $505 = $0;
      STACKTOP = sp;return ($505|0);
     }
     $i = 0;
     while(1) {
      $442 = $i;
      $443 = $mod;
      $444 = ((($443)) + 144|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = ($442|0)<($445|0);
      if (!($446)) {
       break;
      }
      $447 = $i;
      $448 = $mod;
      $449 = ((($448)) + 176|0);
      $450 = HEAP32[$449>>2]|0;
      $451 = (($450) + (($447*764)|0)|0);
      $452 = ((($451)) + 36|0);
      $453 = HEAP32[$452>>2]|0;
      $454 = ($453|0)==(0);
      if (!($454)) {
       $455 = $i;
       $456 = $mod;
       $457 = ((($456)) + 180|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = (($458) + (($455*52)|0)|0);
       $460 = ((($459)) + 32|0);
       $461 = HEAP32[$460>>2]|0;
       $462 = ($461|0)==(0);
       if (!($462)) {
        $463 = $2;
        $464 = $3;
        $465 = $i;
        $466 = (($smp_ofs) + ($465<<2)|0);
        $467 = HEAP32[$466>>2]|0;
        $468 = (($464) + ($467))|0;
        (_hio_seek($463,$468,0)|0);
        $469 = $1;
        $470 = $2;
        $471 = $i;
        $472 = $mod;
        $473 = ((($472)) + 180|0);
        $474 = HEAP32[$473>>2]|0;
        $475 = (($474) + (($471*52)|0)|0);
        $476 = (_load_sample($469,$470,4,$475,0)|0);
        $477 = ($476|0)<(0);
        if ($477) {
         label = 68;
         break;
        }
       }
      }
      $478 = $i;
      $479 = (($478) + 1)|0;
      $i = $479;
     }
     if ((label|0) == 68) {
      $0 = -1;
      $505 = $0;
      STACKTOP = sp;return ($505|0);
     }
     $480 = $1;
     $481 = ((($480)) + 1280|0);
     HEAP32[$481>>2] = 2608;
     $i = 0;
     while(1) {
      $482 = $i;
      $483 = $mod;
      $484 = ((($483)) + 136|0);
      $485 = HEAP32[$484>>2]|0;
      $486 = ($482|0)<($485|0);
      if (!($486)) {
       break;
      }
      $487 = $i;
      $488 = ((($pfh)) + 64|0);
      $489 = (($488) + ($487)|0);
      $490 = HEAP8[$489>>0]|0;
      $491 = $490&255;
      $492 = $491 << 4;
      $493 = $i;
      $494 = $mod;
      $495 = ((($494)) + 184|0);
      $496 = (($495) + (($493*12)|0)|0);
      HEAP32[$496>>2] = $492;
      $497 = $i;
      $498 = (($497) + 1)|0;
      $i = $498;
     }
     $499 = $1;
     $500 = ((($499)) + 1284|0);
     $501 = HEAP32[$500>>2]|0;
     $502 = $501 | 285213217;
     HEAP32[$500>>2] = $502;
     $503 = $1;
     $504 = ((($503)) + 1288|0);
     HEAP32[$504>>2] = 2;
     $0 = 0;
     $505 = $0;
     STACKTOP = sp;return ($505|0);
    }
   }
  }
 }
 $0 = -1;
 $505 = $0;
 STACKTOP = sp;return ($505|0);
}
function _okt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($magic,1,8,$4)|0);
 $6 = ($5>>>0)<(8);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_strncmp($magic,3064,8)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _okt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $data = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_seek($6,8,1)|0);
 $7 = (_iff_new()|0);
 $handle = $7;
 $8 = $handle;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 _memset(($data|0),0,296)|0;
 $10 = $handle;
 $11 = (_iff_register($10,2904,216)|0);
 $ret = $11;
 $12 = $handle;
 $13 = (_iff_register($12,6440,217)|0);
 $14 = $ret;
 $15 = $14 | $13;
 $ret = $15;
 $16 = $handle;
 $17 = (_iff_register($16,2912,218)|0);
 $18 = $ret;
 $19 = $18 | $17;
 $ret = $19;
 $20 = $handle;
 $21 = (_iff_register($20,2920,219)|0);
 $22 = $ret;
 $23 = $22 | $21;
 $ret = $23;
 $24 = $handle;
 $25 = (_iff_register($24,6424,220)|0);
 $26 = $ret;
 $27 = $26 | $25;
 $ret = $27;
 $28 = $handle;
 $29 = (_iff_register($28,7192,221)|0);
 $30 = $ret;
 $31 = $30 | $29;
 $ret = $31;
 $32 = $handle;
 $33 = (_iff_register($32,5464,222)|0);
 $34 = $ret;
 $35 = $34 | $33;
 $ret = $35;
 $36 = $handle;
 $37 = (_iff_register($36,2928,223)|0);
 $38 = $ret;
 $39 = $38 | $37;
 $ret = $39;
 $40 = $ret;
 $41 = ($40|0)!=(0);
 if ($41) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $42 = $1;
 _set_type($42,2888,$vararg_buffer);
 $43 = $handle;
 $44 = $1;
 $45 = $2;
 $46 = (_iff_load($43,$44,$45,$data)|0);
 $47 = ($46|0)<(0);
 $48 = $handle;
 _iff_release($48);
 if ($47) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _get_cmod($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, $p = 0, $pan = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 136|0);
 HEAP32[$6>>2] = 0;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(4);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = (($9) + 1)|0;
  $11 = (($10|0) / 2)&-1;
  $12 = (($11|0) % 2)&-1;
  $13 = ($12*255)|0;
  $pan = $13;
  $14 = $pan;
  $15 = (($14) - 128)|0;
  $16 = $0;
  $17 = ((($16)) + 1296|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = Math_imul($15, $18)|0;
  $20 = (($19|0) / 100)&-1;
  $21 = (128 + ($20))|0;
  $p = $21;
  $22 = $2;
  $23 = (_hio_read16b($22)|0);
  $24 = $23&65535;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $p;
   $27 = $mod;
   $28 = ((($27)) + 136|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$28>>2] = $30;
   $31 = $mod;
   $32 = ((($31)) + 184|0);
   $33 = (($32) + (($29*12)|0)|0);
   HEAP32[$33>>2] = $26;
  } else {
   $34 = $i;
   $35 = $34 << 4;
   $36 = 4 | $35;
   $37 = $mod;
   $38 = ((($37)) + 136|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $mod;
   $41 = ((($40)) + 184|0);
   $42 = (($41) + (($39*12)|0)|0);
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | $36;
   HEAP32[$43>>2] = $45;
   $46 = $p;
   $47 = $mod;
   $48 = ((($47)) + 136|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$48>>2] = $50;
   $51 = $mod;
   $52 = ((($51)) + 184|0);
   $53 = (($52) + (($49*12)|0)|0);
   HEAP32[$53>>2] = $46;
   $54 = $i;
   $55 = $54 << 4;
   $56 = 4 | $55;
   $57 = $mod;
   $58 = ((($57)) + 136|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $mod;
   $61 = ((($60)) + 184|0);
   $62 = (($61) + (($59*12)|0)|0);
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 | $56;
   HEAP32[$63>>2] = $65;
   $66 = $p;
   $67 = $mod;
   $68 = ((($67)) + 136|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + 1)|0;
   HEAP32[$68>>2] = $70;
   $71 = $mod;
   $72 = ((($71)) + 184|0);
   $73 = (($72) + (($69*12)|0)|0);
   HEAP32[$73>>2] = $66;
  }
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 STACKTOP = sp;return 0;
}
function _get_samp($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $i = 0, $j = 0, $looplen = 0, $mod = 0, $sub = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $2;
 $8 = ($7|0)!=(1152);
 if ($8) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $9 = $2;
 $10 = (($9|0) / 32)&-1;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 HEAP32[$12>>2] = $10;
 $13 = $mod;
 $14 = ((($13)) + 140|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $mod;
 $17 = ((($16)) + 144|0);
 HEAP32[$17>>2] = $15;
 $18 = $mod;
 $19 = (_instrument_init($18)|0);
 $20 = ($19|0)<(0);
 if ($20) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $i = 0;
 $j = 0;
 while(1) {
  $21 = $i;
  $22 = $mod;
  $23 = ((($22)) + 140|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<($24|0);
  if (!($25)) {
   label = 12;
   break;
  }
  $26 = $i;
  $27 = $mod;
  $28 = ((($27)) + 176|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + (($26*764)|0)|0);
  $xxi = $30;
  $31 = $j;
  $32 = $mod;
  $33 = ((($32)) + 180|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + (($31*52)|0)|0);
  $xxs = $35;
  $36 = $mod;
  $37 = $i;
  $38 = (_subinstrument_alloc($36,$37,1)|0);
  $39 = ($38|0)<(0);
  if ($39) {
   label = 8;
   break;
  }
  $40 = $xxi;
  $41 = ((($40)) + 756|0);
  $42 = HEAP32[$41>>2]|0;
  $sub = $42;
  $43 = $xxi;
  $44 = $3;
  (_hio_read($43,1,20,$44)|0);
  $45 = $xxi;
  (_adjust_string($45)|0);
  $46 = $3;
  $47 = (_hio_read32b($46)|0);
  $48 = $47 & -2;
  $49 = $xxs;
  $50 = ((($49)) + 32|0);
  HEAP32[$50>>2] = $48;
  $51 = $3;
  $52 = (_hio_read16b($51)|0);
  $53 = $52&65535;
  $54 = $53 << 1;
  $55 = $xxs;
  $56 = ((($55)) + 36|0);
  HEAP32[$56>>2] = $54;
  $57 = $3;
  $58 = (_hio_read16b($57)|0);
  $59 = $58&65535;
  $60 = $59 << 1;
  $looplen = $60;
  $61 = $xxs;
  $62 = ((($61)) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $looplen;
  $65 = (($63) + ($64))|0;
  $66 = $xxs;
  $67 = ((($66)) + 40|0);
  HEAP32[$67>>2] = $65;
  $68 = $looplen;
  $69 = ($68|0)>(2);
  $70 = $69 ? 2 : 0;
  $71 = $xxs;
  $72 = ((($71)) + 44|0);
  HEAP32[$72>>2] = $70;
  $73 = $3;
  $74 = (_hio_read16b($73)|0);
  $75 = $74&65535;
  $76 = $sub;
  HEAP32[$76>>2] = $75;
  $77 = $3;
  $78 = (_hio_read16b($77)|0);
  $79 = $78&65535;
  $80 = $i;
  $81 = $data;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $79;
  $83 = $sub;
  $84 = ((($83)) + 8|0);
  HEAP32[$84>>2] = 128;
  $85 = $j;
  $86 = $sub;
  $87 = ((($86)) + 40|0);
  HEAP32[$87>>2] = $85;
  $88 = $i;
  $89 = $j;
  $90 = $data;
  $91 = ((($90)) + 144|0);
  $92 = (($91) + ($89<<2)|0);
  HEAP32[$92>>2] = $88;
  $93 = $xxs;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)>(0);
  if ($96) {
   $97 = $xxi;
   $98 = ((($97)) + 36|0);
   HEAP32[$98>>2] = 1;
   $99 = $j;
   $100 = (($99) + 1)|0;
   $j = $100;
  }
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function _get_spee($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = $mod;
 $9 = ((($8)) + 148|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 152|0);
 HEAP32[$11>>2] = 125;
 STACKTOP = sp;return 0;
}
function _get_slen($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = $mod;
 $9 = ((($8)) + 128|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $mod;
 $14 = ((($13)) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $17 = $mod;
 $18 = ((($17)) + 132|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return 0;
}
function _get_plen($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = $mod;
 $10 = ((($9)) + 156|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 156|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(256);
 if ($14) {
  $0 = -1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 } else {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _get_patt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = ((($6)) + 952|0);
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (_hio_read($7,1,$10,$11)|0);
 $13 = $mod;
 $14 = ((($13)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)!=($15|0);
 if ($16) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _get_pbod($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $data = 0, $e = 0, $ins = 0, $j = 0, $mod = 0, $note = 0, $rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 288|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>=($12|0);
 if ($13) {
  $0 = 0;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 $14 = $data;
 $15 = ((($14)) + 288|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $18 = $mod;
  $19 = (_pattern_init($18)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $0 = -1;
   $201 = $0;
   STACKTOP = sp;return ($201|0);
  }
 }
 $21 = $3;
 $22 = (_hio_read16b($21)|0);
 $rows = $22;
 $23 = $mod;
 $24 = $data;
 $25 = ((($24)) + 288|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $rows;
 $28 = $27&65535;
 $29 = (_pattern_tracks_alloc($23,$26,$28)|0);
 $30 = ($29|0)<(0);
 if ($30) {
  $0 = -1;
  $201 = $0;
  STACKTOP = sp;return ($201|0);
 }
 $j = 0;
 while(1) {
  $31 = $j;
  $32 = $rows;
  $33 = $32&65535;
  $34 = $mod;
  $35 = ((($34)) + 136|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = Math_imul($33, $36)|0;
  $38 = ($31|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $j;
  $40 = $mod;
  $41 = ((($40)) + 136|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39|0) / ($42|0))&-1;
  $44 = $j;
  $45 = $mod;
  $46 = ((($45)) + 136|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44|0) % ($47|0))&-1;
  $49 = $data;
  $50 = ((($49)) + 288|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = ((($52)) + 168|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 4|0);
  $58 = (($57) + ($48<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $1;
  $61 = ((($60)) + 172|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 4|0);
  $66 = (($65) + ($43<<3)|0);
  $e = $66;
  $67 = $e;
  ;HEAP8[$67>>0]=0|0;HEAP8[$67+1>>0]=0|0;HEAP8[$67+2>>0]=0|0;HEAP8[$67+3>>0]=0|0;HEAP8[$67+4>>0]=0|0;HEAP8[$67+5>>0]=0|0;HEAP8[$67+6>>0]=0|0;HEAP8[$67+7>>0]=0|0;
  $68 = $3;
  $69 = (_hio_read8($68)|0);
  $note = $69;
  $70 = $3;
  $71 = (_hio_read8($70)|0);
  $ins = $71;
  $72 = $note;
  $73 = ($72<<24>>24)!=(0);
  if ($73) {
   $74 = $note;
   $75 = $74&255;
   $76 = (48 + ($75))|0;
   $77 = $76&255;
   $78 = $e;
   HEAP8[$78>>0] = $77;
   $79 = $ins;
   $80 = $79&255;
   $81 = (1 + ($80))|0;
   $82 = $81&255;
   $83 = $e;
   $84 = ((($83)) + 1|0);
   HEAP8[$84>>0] = $82;
  }
  $85 = $3;
  $86 = (_hio_read8($85)|0);
  $87 = $86&255;
  $88 = (2936 + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89&255;
  $91 = $e;
  $92 = ((($91)) + 3|0);
  HEAP8[$92>>0] = $90;
  $93 = $3;
  $94 = (_hio_read8($93)|0);
  $95 = $e;
  $96 = ((($95)) + 4|0);
  HEAP8[$96>>0] = $94;
  $97 = $e;
  $98 = ((($97)) + 3|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = ($100|0)==(12);
  do {
   if ($101) {
    $102 = $e;
    $103 = ((($102)) + 4|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($105|0)>(64);
    if ($106) {
     $107 = $e;
     $108 = ((($107)) + 4|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109&255;
     $111 = ($110|0)<=(80);
     $112 = $e;
     if ($111) {
      $113 = ((($112)) + 3|0);
      HEAP8[$113>>0] = 10;
      $114 = $e;
      $115 = ((($114)) + 4|0);
      $116 = HEAP8[$115>>0]|0;
      $117 = $116&255;
      $118 = (($117) - 64)|0;
      $119 = $118&255;
      HEAP8[$115>>0] = $119;
      break;
     }
     $120 = ((($112)) + 4|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = ($122|0)<=(96);
     $124 = $e;
     if ($123) {
      $125 = ((($124)) + 3|0);
      HEAP8[$125>>0] = 10;
      $126 = $e;
      $127 = ((($126)) + 4|0);
      $128 = HEAP8[$127>>0]|0;
      $129 = $128&255;
      $130 = (($129) - 80)|0;
      $131 = $130 << 4;
      $132 = $131&255;
      $133 = $e;
      $134 = ((($133)) + 4|0);
      HEAP8[$134>>0] = $132;
      break;
     }
     $135 = ((($124)) + 4|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = ($137|0)<=(112);
     $139 = $e;
     if ($138) {
      $140 = ((($139)) + 3|0);
      HEAP8[$140>>0] = -82;
      $141 = $e;
      $142 = ((($141)) + 4|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = (($144) - 96)|0;
      $146 = $145&255;
      $147 = $e;
      $148 = ((($147)) + 4|0);
      HEAP8[$148>>0] = $146;
      break;
     }
     $149 = ((($139)) + 4|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = ($151|0)<=(128);
     if ($152) {
      $153 = $e;
      $154 = ((($153)) + 3|0);
      HEAP8[$154>>0] = -83;
      $155 = $e;
      $156 = ((($155)) + 4|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157&255;
      $159 = (($158) - 112)|0;
      $160 = $159&255;
      $161 = $e;
      $162 = ((($161)) + 4|0);
      HEAP8[$162>>0] = $160;
     }
    }
   }
  } while(0);
  $163 = $e;
  $164 = ((($163)) + 3|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  $167 = ($166|0)==(0);
  if ($167) {
   $168 = $e;
   $169 = ((($168)) + 4|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 & 240;
   $173 = $172 >> 4;
   $174 = (24 - ($173))|0;
   $175 = (($174|0) % 12)&-1;
   $176 = $175 << 4;
   $177 = $e;
   $178 = ((($177)) + 4|0);
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $180 & 15;
   $182 = $176 | $181;
   $183 = $182&255;
   $184 = $e;
   $185 = ((($184)) + 4|0);
   HEAP8[$185>>0] = $183;
  }
  $186 = $e;
  $187 = ((($186)) + 3|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188&255;
  $190 = ($189|0)==(255);
  if ($190) {
   $191 = $e;
   $192 = ((($191)) + 4|0);
   HEAP8[$192>>0] = 0;
   $193 = $e;
   $194 = ((($193)) + 3|0);
   HEAP8[$194>>0] = 0;
  }
  $195 = $j;
  $196 = (($195) + 1)|0;
  $j = $196;
 }
 $197 = $data;
 $198 = ((($197)) + 288|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (($199) + 1)|0;
 HEAP32[$198>>2] = $200;
 $0 = 0;
 $201 = $0;
 STACKTOP = sp;return ($201|0);
}
function _get_sbod($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $flags = 0, $i = 0, $mod = 0, $sid = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $flags = 0;
 $7 = $data;
 $8 = ((($7)) + 292|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>=($12|0);
 if ($13) {
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $14 = $data;
 $15 = ((($14)) + 292|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $data;
 $18 = ((($17)) + 144|0);
 $19 = (($18) + ($16<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $i = $20;
 $21 = $i;
 $22 = $data;
 $23 = (($22) + ($21<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  label = 5;
 } else {
  $26 = $i;
  $27 = $data;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(2);
  if ($30) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $flags = 8;
 }
 $31 = $i;
 $32 = $mod;
 $33 = ((($32)) + 176|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + (($31*764)|0)|0);
 $36 = ((($35)) + 756|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $sid = $39;
 $40 = $1;
 $41 = $3;
 $42 = $flags;
 $43 = $sid;
 $44 = $mod;
 $45 = ((($44)) + 180|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($43*52)|0)|0);
 $48 = (_load_sample($40,$41,$42,$47,0)|0);
 $49 = ($48|0)<(0);
 if ($49) {
  $0 = -1;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 } else {
  $50 = $data;
  $51 = ((($50)) + 292|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$51>>2] = $53;
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _amd_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1062)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,9,$7)|0);
 $9 = ($8>>>0)<(9);
 if ($9) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $10 = (_memcmp($buf,3168,2)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = ((($buf)) + 6|0);
  $13 = (_memcmp($12,3176,3)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $1;
   $16 = $3;
   $17 = (($16) + 0)|0;
   (_hio_seek($15,$17,0)|0);
   $18 = $1;
   $19 = $2;
   _read_title($18,$19,24);
   $0 = 0;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $0 = -1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _amd_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $afh = 0, $i = 0;
 var $j = 0, $mod = 0, $regs = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $afh = sp + 48|0;
 $regs = sp + 32|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($afh,24,1,$7)|0);
 $8 = ((($afh)) + 24|0);
 $9 = $2;
 (_hio_read($8,24,1,$9)|0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(26);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = ((($afh)) + 48|0);
  $14 = (($13) + (($12*34)|0)|0);
  $15 = $2;
  (_hio_read($14,23,1,$15)|0);
  $16 = $i;
  $17 = ((($afh)) + 48|0);
  $18 = (($17) + (($16*34)|0)|0);
  $19 = ((($18)) + 23|0);
  $20 = $2;
  (_hio_read($19,11,1,$20)|0);
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = ((($afh)) + 932|0);
 HEAP8[$25>>0] = $24;
 $26 = $2;
 $27 = (_hio_read8($26)|0);
 $28 = ((($afh)) + 933|0);
 HEAP8[$28>>0] = $27;
 $29 = ((($afh)) + 934|0);
 $30 = $2;
 (_hio_read($29,128,1,$30)|0);
 $31 = ((($afh)) + 1062|0);
 $32 = $2;
 (_hio_read($31,9,1,$32)|0);
 $33 = $2;
 $34 = (_hio_read8($33)|0);
 $35 = ((($afh)) + 1071|0);
 HEAP8[$35>>0] = $34;
 $36 = ((($afh)) + 1071|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ($38|0)!=(16);
 if ($39) {
  $40 = ((($afh)) + 1071|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)!=(17);
  if ($43) {
   $0 = -1;
   $177 = $0;
   STACKTOP = sp;return ($177|0);
  }
 }
 $44 = $mod;
 $45 = ((($44)) + 136|0);
 HEAP32[$45>>2] = 9;
 $46 = $mod;
 $47 = ((($46)) + 152|0);
 HEAP32[$47>>2] = 125;
 $48 = $mod;
 $49 = ((($48)) + 148|0);
 HEAP32[$49>>2] = 6;
 $50 = ((($afh)) + 932|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $mod;
 $54 = ((($53)) + 156|0);
 HEAP32[$54>>2] = $52;
 $55 = ((($afh)) + 933|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = (($57) + 1)|0;
 $59 = $mod;
 $60 = ((($59)) + 128|0);
 HEAP32[$60>>2] = $58;
 $61 = $mod;
 $62 = ((($61)) + 140|0);
 HEAP32[$62>>2] = 26;
 $63 = $mod;
 $64 = ((($63)) + 140|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $mod;
 $67 = ((($66)) + 144|0);
 HEAP32[$67>>2] = $65;
 $68 = $mod;
 $69 = ((($68)) + 952|0);
 $70 = ((($afh)) + 934|0);
 $71 = $mod;
 $72 = ((($71)) + 156|0);
 $73 = HEAP32[$72>>2]|0;
 _memcpy(($69|0),($70|0),($73|0))|0;
 $74 = $1;
 _set_type($74,3096,$vararg_buffer);
 $75 = $mod;
 (_strncpy(($75|0),($afh|0),24)|0);
 $76 = $mod;
 $77 = (_instrument_init($76)|0);
 $78 = ($77|0)<(0);
 if ($78) {
  $0 = -1;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 $i = 0;
 while(1) {
  $79 = $i;
  $80 = $mod;
  $81 = ((($80)) + 140|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79|0)<($82|0);
  if (!($83)) {
   label = 19;
   break;
  }
  $84 = $mod;
  $85 = $i;
  $86 = (_subinstrument_alloc($84,$85,1)|0);
  $87 = ($86|0)<(0);
  if ($87) {
   label = 12;
   break;
  }
  $88 = $mod;
  $89 = $i;
  $90 = $i;
  $91 = ((($afh)) + 48|0);
  $92 = (($91) + (($90*34)|0)|0);
  (_instrument_name($88,$89,$92,23)|0);
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$99>>2] = 64;
  $100 = $i;
  $101 = $mod;
  $102 = ((($101)) + 176|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + (($100*764)|0)|0);
  $105 = ((($104)) + 756|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($106)) + 8|0);
  HEAP32[$107>>2] = 128;
  $108 = $i;
  $109 = $i;
  $110 = $mod;
  $111 = ((($110)) + 176|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + (($109*764)|0)|0);
  $114 = ((($113)) + 756|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ((($115)) + 40|0);
  HEAP32[$116>>2] = $108;
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 176|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($117*764)|0)|0);
  $122 = ((($121)) + 36|0);
  HEAP32[$122>>2] = 1;
  $j = 0;
  while(1) {
   $123 = $j;
   $124 = ($123|0)<(11);
   if (!($124)) {
    break;
   }
   $125 = $j;
   $126 = (3120 + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $i;
   $129 = ((($afh)) + 48|0);
   $130 = (($129) + (($128*34)|0)|0);
   $131 = ((($130)) + 23|0);
   $132 = (($131) + ($127)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $j;
   $135 = (($regs) + ($134)|0);
   HEAP8[$135>>0] = $133;
   $136 = $j;
   $137 = (($136) + 1)|0;
   $j = $137;
  }
  $138 = $1;
  $139 = $2;
  $140 = $i;
  $141 = $mod;
  $142 = ((($141)) + 180|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($143) + (($140*52)|0)|0);
  $145 = (_load_sample($138,$139,4096,$144,$regs)|0);
  $146 = ($145|0)<(0);
  if ($146) {
   label = 17;
   break;
  }
  $147 = $i;
  $148 = (($147) + 1)|0;
  $i = $148;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 else if ((label|0) == 19) {
  $149 = ((($afh)) + 1071|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = ($151|0)==(16);
  $153 = $1;
  $154 = $2;
  if ($152) {
   $155 = (_load_unpacked_patterns($153,$154)|0);
   $156 = ($155|0)<(0);
   if ($156) {
    $0 = -1;
    $177 = $0;
    STACKTOP = sp;return ($177|0);
   }
  } else {
   $157 = (_load_packed_patterns($153,$154)|0);
   $158 = ($157|0)<(0);
   if ($158) {
    $0 = -1;
    $177 = $0;
    STACKTOP = sp;return ($177|0);
   }
  }
  $i = 0;
  while(1) {
   $159 = $i;
   $160 = $mod;
   $161 = ((($160)) + 136|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($159|0)<($162|0);
   if (!($163)) {
    break;
   }
   $164 = $i;
   $165 = $mod;
   $166 = ((($165)) + 184|0);
   $167 = (($166) + (($164*12)|0)|0);
   HEAP32[$167>>2] = 128;
   $168 = $i;
   $169 = $mod;
   $170 = ((($169)) + 184|0);
   $171 = (($170) + (($168*12)|0)|0);
   $172 = ((($171)) + 8|0);
   HEAP32[$172>>2] = 1;
   $173 = $i;
   $174 = (($173) + 1)|0;
   $i = $174;
  }
  $175 = $1;
  $176 = ((($175)) + 7584|0);
  HEAP32[$176>>2] = 22896;
  $0 = 0;
  $177 = $0;
  STACKTOP = sp;return ($177|0);
 }
 return (0)|0;
}
function _load_unpacked_patterns($m,$f) {
 $m = $m|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $b = 0, $event = 0, $i = 0, $j = 0;
 var $mod = 0, $tmode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $1;
 $mod = $3;
 $tmode = 1;
 $4 = $mod;
 $5 = ((($4)) + 128|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6*9)|0;
 $8 = $mod;
 $9 = ((($8)) + 132|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = (_pattern_init($10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $0 = -1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $mod;
  $15 = ((($14)) + 128|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   label = 13;
   break;
  }
  $18 = $mod;
  $19 = $i;
  $20 = (_pattern_tracks_alloc($18,$19,64)|0);
  $21 = ($20|0)<(0);
  if ($21) {
   label = 6;
   break;
  }
  $j = 0;
  while(1) {
   $22 = $j;
   $23 = $mod;
   $24 = ((($23)) + 136|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25<<6;
   $27 = ($22|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $j;
   $29 = $mod;
   $30 = ((($29)) + 136|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($28|0) / ($31|0))&-1;
   $33 = $j;
   $34 = $mod;
   $35 = ((($34)) + 136|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($33|0) % ($36|0))&-1;
   $38 = $i;
   $39 = $1;
   $40 = ((($39)) + 168|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = (($44) + ($37<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = ((($47)) + 172|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 4|0);
   $53 = (($52) + ($32<<3)|0);
   $event = $53;
   $54 = $2;
   $55 = (_hio_read8($54)|0);
   $b = $55;
   $56 = $b;
   $57 = $event;
   $58 = $2;
   _read_event511($56,$57,$58);
   $59 = $event;
   $60 = ((($59)) + 4|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = ($62|0)==(15);
   if ($63) {
    $tmode = 3;
   }
   $64 = $tmode;
   $65 = $event;
   $66 = ((($65)) + 4|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = Math_imul($68, $64)|0;
   $70 = $69&255;
   HEAP8[$66>>0] = $70;
   $71 = $j;
   $72 = (($71) + 1)|0;
   $j = $72;
  }
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _load_packed_patterns($m,$f) {
 $m = $m|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $r = 0, $stored_tracks = 0, $tmode = 0;
 var $w = 0, $w1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $1;
 $mod = $3;
 $tmode = 1;
 $4 = $mod;
 $5 = ((($4)) + 128|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (_calloc(4,$7)|0);
 $9 = $mod;
 $10 = ((($9)) + 168|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 128|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  $20 = $mod;
  if (!($19)) {
   break;
  }
  $21 = $i;
  $22 = (_pattern_alloc($20,$21)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   label = 6;
   break;
  }
  $j = 0;
  while(1) {
   $24 = $j;
   $25 = ($24|0)<(9);
   if (!($25)) {
    break;
   }
   $26 = $2;
   $27 = (_hio_read16l($26)|0);
   $w1 = $27;
   $28 = $w1;
   $29 = $28&65535;
   $30 = $j;
   $31 = $i;
   $32 = $mod;
   $33 = ((($32)) + 168|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + ($31<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = (($37) + ($30<<2)|0);
   HEAP32[$38>>2] = $29;
   $39 = $w1;
   $40 = $39&65535;
   $41 = $mod;
   $42 = ((($41)) + 132|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($40|0)>($43|0);
   if ($44) {
    $45 = $w1;
    $46 = $45&65535;
    $47 = $mod;
    $48 = ((($47)) + 132|0);
    HEAP32[$48>>2] = $46;
   }
   $49 = $j;
   $50 = (($49) + 1)|0;
   $j = $50;
  }
  $51 = $i;
  $52 = $mod;
  $53 = ((($52)) + 168|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$56>>2] = 64;
  $57 = $i;
  $58 = (($57) + 1)|0;
  $i = $58;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 $59 = ((($20)) + 132|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[$59>>2] = $61;
 $62 = $mod;
 $63 = ((($62)) + 132|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $mod;
 $66 = ((($65)) + 128|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67*9)|0;
 $69 = ($64|0)>($68|0);
 if ($69) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 $70 = $2;
 $71 = (_hio_read16l($70)|0);
 $72 = $71&65535;
 $stored_tracks = $72;
 $73 = $stored_tracks;
 $74 = ($73|0)<=(0);
 if ($74) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 $75 = $mod;
 $76 = ((($75)) + 132|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (_calloc(4,$77)|0);
 $79 = $mod;
 $80 = ((($79)) + 172|0);
 HEAP32[$80>>2] = $78;
 $81 = $mod;
 $82 = ((($81)) + 172|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if ($84) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 $i = 0;
 while(1) {
  $85 = $i;
  $86 = $stored_tracks;
  $87 = ($85|0)<($86|0);
  if (!($87)) {
   label = 35;
   break;
  }
  $88 = $2;
  $89 = (_hio_read16l($88)|0);
  $w = $89;
  $90 = $w;
  $91 = $90&65535;
  $92 = $mod;
  $93 = ((($92)) + 132|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($91|0)>=($94|0);
  if ($95) {
   label = 23;
   break;
  }
  $96 = $w;
  $97 = $96&65535;
  $98 = $mod;
  $99 = ((($98)) + 172|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($97<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)!=(0|0);
  if ($103) {
   label = 23;
   break;
  }
  $104 = $mod;
  $105 = $w;
  $106 = $105&65535;
  $107 = (_track_alloc($104,$106,64)|0);
  $108 = ($107|0)<(0);
  if ($108) {
   label = 25;
   break;
  }
  $r = 0;
  while(1) {
   $109 = $r;
   $110 = ($109|0)<(64);
   if (!($110)) {
    break;
   }
   $111 = $r;
   $112 = $w;
   $113 = $112&65535;
   $114 = $mod;
   $115 = ((($114)) + 172|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($113<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ((($118)) + 4|0);
   $120 = (($119) + ($111<<3)|0);
   $event = $120;
   $121 = $2;
   $122 = (_hio_read8($121)|0);
   $b = $122;
   $123 = $b;
   $124 = $123&255;
   $125 = $124 & 128;
   $126 = ($125|0)!=(0);
   $127 = $b;
   if ($126) {
    $128 = $127&255;
    $129 = $128 & 127;
    $130 = (($129) - 1)|0;
    $131 = $r;
    $132 = (($131) + ($130))|0;
    $r = $132;
   } else {
    $133 = $event;
    $134 = $2;
    _read_event511($127,$133,$134);
    $135 = $event;
    $136 = ((($135)) + 4|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = ($138|0)==(15);
    if ($139) {
     $tmode = 3;
    }
    $140 = $tmode;
    $141 = $event;
    $142 = ((($141)) + 4|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = Math_imul($144, $140)|0;
    $146 = $145&255;
    HEAP8[$142>>0] = $146;
   }
   $147 = $r;
   $148 = (($147) + 1)|0;
   $r = $148;
  }
  $149 = $i;
  $150 = (($149) + 1)|0;
  $i = $150;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 else if ((label|0) == 25) {
  $0 = -1;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 else if ((label|0) == 35) {
  $0 = 0;
  $151 = $0;
  STACKTOP = sp;return ($151|0);
 }
 return (0)|0;
}
function _read_event511($b,$event,$f) {
 $b = $b|0;
 $event = $event|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = $event;
 $2 = $f;
 $3 = $0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = $3;
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $0 = $7;
 $8 = $0;
 $9 = $8&255;
 $10 = $9 & 240;
 $11 = $10 >> 4;
 $12 = $11&255;
 $13 = $1;
 $14 = ((($13)) + 1|0);
 HEAP8[$14>>0] = $12;
 $15 = $0;
 $16 = $15&255;
 $17 = $16 & 15;
 $18 = $17&255;
 $0 = $18;
 $19 = $18&255;
 L1: do {
  switch ($19|0) {
  case 6:  {
   $0 = 13;
   break;
  }
  case 9: case 3:  {
   $0 = 0;
   $20 = $1;
   $21 = ((($20)) + 4|0);
   HEAP8[$21>>0] = 0;
   break;
  }
  case 4:  {
   $0 = 12;
   break;
  }
  case 5:  {
   $0 = 11;
   break;
  }
  case 8:  {
   $0 = 3;
   break;
  }
  case 7:  {
   $22 = $1;
   $23 = ((($22)) + 4|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)>(31);
   if ($26) {
    $0 = 0;
    $27 = $1;
    $28 = ((($27)) + 4|0);
    HEAP8[$28>>0] = 0;
    break L1;
   } else {
    $0 = 15;
    break L1;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $29 = $0;
 $30 = $1;
 $31 = ((($30)) + 3|0);
 HEAP8[$31>>0] = $29;
 $32 = $2;
 $33 = (_hio_read8($32)|0);
 $0 = $33;
 $34 = $0;
 $35 = $34&255;
 $36 = $35 & 1;
 $37 = $36 << 4;
 $38 = $1;
 $39 = ((($38)) + 1|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 | $37;
 $43 = $42&255;
 HEAP8[$39>>0] = $43;
 $44 = $0;
 $45 = $44&255;
 $46 = $45 & 240;
 $47 = $46 >> 4;
 $48 = $47&255;
 $49 = $1;
 HEAP8[$49>>0] = $48;
 $50 = ($48<<24>>24)!=(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $0;
 $52 = $51&255;
 $53 = $52 & 14;
 $54 = $53 >> 1;
 $55 = (2 + ($54))|0;
 $56 = ($55*12)|0;
 $57 = $1;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = (($59) + ($56))|0;
 $61 = $60&255;
 HEAP8[$57>>0] = $61;
 STACKTOP = sp;return;
}
function _rad_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,16,$4)|0);
 $6 = ($5>>>0)<(16);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,3240,16)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _rad_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $event = 0, $flags = 0, $i = 0, $j = 0, $mod = 0, $pos = 0;
 var $ppat = 0, $r = 0, $sid = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sid = sp + 117|0;
 $ppat = sp + 48|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_seek($7,16,0)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $version = $9;
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $flags = $11;
 $12 = $mod;
 $13 = ((($12)) + 136|0);
 HEAP32[$13>>2] = 9;
 $14 = $mod;
 $15 = ((($14)) + 152|0);
 HEAP32[$15>>2] = 125;
 $16 = $flags;
 $17 = $16&255;
 $18 = $17 & 31;
 $19 = $mod;
 $20 = ((($19)) + 148|0);
 HEAP32[$20>>2] = $18;
 $21 = $mod;
 $22 = ((($21)) + 148|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<=(2);
 if ($24) {
  $25 = $mod;
  $26 = ((($25)) + 148|0);
  HEAP32[$26>>2] = 6;
 }
 $27 = $mod;
 $28 = ((($27)) + 144|0);
 HEAP32[$28>>2] = 0;
 $29 = $1;
 $30 = $version;
 $31 = $30&255;
 $32 = $31 & 240;
 $33 = $32 >> 4;
 $34 = $version;
 $35 = $34&255;
 $36 = $35 & 15;
 HEAP32[$vararg_buffer>>2] = $33;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $36;
 _set_type($29,3224,$vararg_buffer);
 $37 = $flags;
 $38 = $37&255;
 $39 = $38 & 128;
 $40 = ($39|0)!=(0);
 if ($40) {
  while(1) {
   $41 = $2;
   $42 = (_hio_read8($41)|0);
   $b = $42;
   $43 = $42&255;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    break;
   }
  }
 }
 $45 = $2;
 $46 = (_hio_tell($45)|0);
 $pos = $46;
 $47 = $mod;
 $48 = ((($47)) + 140|0);
 HEAP32[$48>>2] = 0;
 while(1) {
  $49 = $2;
  $50 = (_hio_read8($49)|0);
  $b = $50;
  $51 = $50&255;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   break;
  }
  $53 = $b;
  $54 = $53&255;
  $55 = $mod;
  $56 = ((($55)) + 140|0);
  HEAP32[$56>>2] = $54;
  $57 = $2;
  (_hio_read($sid,1,11,$57)|0);
 }
 $58 = $2;
 $59 = $pos;
 (_hio_seek($58,$59,0)|0);
 $60 = $mod;
 $61 = ((($60)) + 140|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $mod;
 $64 = ((($63)) + 144|0);
 HEAP32[$64>>2] = $62;
 $65 = $mod;
 $66 = (_instrument_init($65)|0);
 $67 = ($66|0)<(0);
 if ($67) {
  $0 = -1;
  $371 = $0;
  STACKTOP = sp;return ($371|0);
 }
 while(1) {
  $68 = $2;
  $69 = (_hio_read8($68)|0);
  $b = $69;
  $70 = $69&255;
  $71 = ($70|0)!=(0);
  if (!($71)) {
   label = 18;
   break;
  }
  $72 = $b;
  $73 = $72&255;
  $74 = $mod;
  $75 = ((($74)) + 140|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($73|0)>($76|0);
  if ($77) {
   label = 13;
   break;
  }
  $78 = $b;
  $79 = $78&255;
  $80 = (($79) - 1)|0;
  $81 = $mod;
  $82 = ((($81)) + 180|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + (($80*52)|0)|0);
  $85 = ((($84)) + 48|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86|0)!=(0|0);
  if ($87) {
   label = 13;
   break;
  }
  $88 = $2;
  $89 = (_hio_read($sid,1,11,$88)|0);
  $90 = ($89|0)!=(11);
  if ($90) {
   label = 15;
   break;
  }
  $91 = $1;
  $92 = $2;
  $93 = $b;
  $94 = $93&255;
  $95 = (($94) - 1)|0;
  $96 = $mod;
  $97 = ((($96)) + 180|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($95*52)|0)|0);
  $100 = (_load_sample($91,$92,12288,$99,$sid)|0);
  $101 = ($100|0)<(0);
  if ($101) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 13) {
  $0 = -1;
  $371 = $0;
  STACKTOP = sp;return ($371|0);
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $371 = $0;
  STACKTOP = sp;return ($371|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $371 = $0;
  STACKTOP = sp;return ($371|0);
 }
 else if ((label|0) == 18) {
  $i = 0;
  while(1) {
   $102 = $i;
   $103 = $mod;
   $104 = ((($103)) + 140|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)<($105|0);
   if (!($106)) {
    break;
   }
   $107 = $mod;
   $108 = $i;
   $109 = (_subinstrument_alloc($107,$108,1)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    label = 21;
    break;
   }
   $111 = $i;
   $112 = $mod;
   $113 = ((($112)) + 176|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + (($111*764)|0)|0);
   $116 = ((($115)) + 756|0);
   $117 = HEAP32[$116>>2]|0;
   HEAP32[$117>>2] = 64;
   $118 = $i;
   $119 = $mod;
   $120 = ((($119)) + 176|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + (($118*764)|0)|0);
   $123 = ((($122)) + 756|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((($124)) + 8|0);
   HEAP32[$125>>2] = 128;
   $126 = $i;
   $127 = $mod;
   $128 = ((($127)) + 176|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + (($126*764)|0)|0);
   $131 = ((($130)) + 756|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ((($132)) + 12|0);
   HEAP32[$133>>2] = -1;
   $134 = $i;
   $135 = $i;
   $136 = $mod;
   $137 = ((($136)) + 176|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + (($135*764)|0)|0);
   $140 = ((($139)) + 756|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 40|0);
   HEAP32[$142>>2] = $134;
   $143 = $i;
   $144 = $mod;
   $145 = ((($144)) + 176|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($146) + (($143*764)|0)|0);
   $148 = ((($147)) + 36|0);
   HEAP32[$148>>2] = 1;
   $149 = $i;
   $150 = (($149) + 1)|0;
   $i = $150;
  }
  if ((label|0) == 21) {
   $0 = -1;
   $371 = $0;
   STACKTOP = sp;return ($371|0);
  }
  $151 = $2;
  $152 = (_hio_read8($151)|0);
  $153 = $152&255;
  $154 = $mod;
  $155 = ((($154)) + 156|0);
  HEAP32[$155>>2] = $153;
  $i = 0;
  $j = 0;
  while(1) {
   $156 = $i;
   $157 = $mod;
   $158 = ((($157)) + 156|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($156|0)<($159|0);
   if (!($160)) {
    break;
   }
   $161 = $2;
   $162 = (_hio_read8($161)|0);
   $b = $162;
   $163 = $b;
   $164 = $163&255;
   $165 = ($164|0)<(128);
   if ($165) {
    $166 = $b;
    $167 = $j;
    $168 = (($167) + 1)|0;
    $j = $168;
    $169 = $mod;
    $170 = ((($169)) + 952|0);
    $171 = (($170) + ($167)|0);
    HEAP8[$171>>0] = $166;
   }
   $172 = $i;
   $173 = (($172) + 1)|0;
   $i = $173;
  }
  $i = 0;
  $174 = $mod;
  $175 = ((($174)) + 128|0);
  HEAP32[$175>>2] = 0;
  while(1) {
   $176 = $i;
   $177 = ($176|0)<(32);
   if (!($177)) {
    break;
   }
   $178 = $2;
   $179 = (_hio_read16l($178)|0);
   $180 = $i;
   $181 = (($ppat) + ($180<<1)|0);
   HEAP16[$181>>1] = $179;
   $182 = $i;
   $183 = (($ppat) + ($182<<1)|0);
   $184 = HEAP16[$183>>1]|0;
   $185 = ($184<<16>>16)!=(0);
   if ($185) {
    $186 = $mod;
    $187 = ((($186)) + 128|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = (($188) + 1)|0;
    HEAP32[$187>>2] = $189;
   }
   $190 = $i;
   $191 = (($190) + 1)|0;
   $i = $191;
  }
  $192 = $mod;
  $193 = ((($192)) + 128|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $mod;
  $196 = ((($195)) + 136|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = Math_imul($194, $197)|0;
  $199 = $mod;
  $200 = ((($199)) + 132|0);
  HEAP32[$200>>2] = $198;
  $201 = $mod;
  $202 = (_pattern_init($201)|0);
  $203 = ($202|0)<(0);
  if ($203) {
   $0 = -1;
   $371 = $0;
   STACKTOP = sp;return ($371|0);
  }
  $i = 0;
  L53: while(1) {
   $204 = $i;
   $205 = $mod;
   $206 = ((($205)) + 128|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($204|0)<($207|0);
   if (!($208)) {
    label = 57;
    break;
   }
   $209 = $mod;
   $210 = $i;
   $211 = (_pattern_tracks_alloc($209,$210,64)|0);
   $212 = ($211|0)<(0);
   if ($212) {
    label = 38;
    break;
   }
   $213 = $i;
   $214 = (($ppat) + ($213<<1)|0);
   $215 = HEAP16[$214>>1]|0;
   $216 = $215&65535;
   $217 = ($216|0)==(0);
   if (!($217)) {
    $218 = $2;
    $219 = $3;
    $220 = $i;
    $221 = (($ppat) + ($220<<1)|0);
    $222 = HEAP16[$221>>1]|0;
    $223 = $222&65535;
    $224 = (($219) + ($223))|0;
    (_hio_seek($218,$224,0)|0);
    while(1) {
     $225 = $2;
     $226 = (_hio_read8($225)|0);
     $r = $226;
     $227 = $r;
     $228 = $227&255;
     $229 = $228 & 127;
     $230 = ($229|0)>=(64);
     if ($230) {
      label = 42;
      break L53;
     }
     while(1) {
      $231 = $2;
      $232 = (_hio_read8($231)|0);
      $c = $232;
      $233 = $c;
      $234 = $233&255;
      $235 = $234 & 127;
      $236 = $mod;
      $237 = ((($236)) + 136|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)>=($238|0);
      if ($239) {
       label = 45;
       break L53;
      }
      $240 = $r;
      $241 = $240&255;
      $242 = $241 & 127;
      $243 = ($242|0)>=(64);
      if ($243) {
       label = 45;
       break L53;
      }
      $244 = $r;
      $245 = $244&255;
      $246 = $245 & 127;
      $247 = $c;
      $248 = $247&255;
      $249 = $248 & 127;
      $250 = $i;
      $251 = $1;
      $252 = ((($251)) + 168|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = (($253) + ($250<<2)|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = ((($255)) + 4|0);
      $257 = (($256) + ($249<<2)|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $1;
      $260 = ((($259)) + 172|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = (($261) + ($258<<2)|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = ((($263)) + 4|0);
      $265 = (($264) + ($246<<3)|0);
      $event = $265;
      $266 = $2;
      $267 = (_hio_read8($266)|0);
      $b = $267;
      $268 = $b;
      $269 = $268&255;
      $270 = $269 & 128;
      $271 = $270 >> 3;
      $272 = $271&255;
      $273 = $event;
      $274 = ((($273)) + 1|0);
      HEAP8[$274>>0] = $272;
      $275 = $b;
      $276 = $275&255;
      $277 = $276 & 15;
      $278 = $277&255;
      $279 = $event;
      HEAP8[$279>>0] = $278;
      $280 = $event;
      $281 = HEAP8[$280>>0]|0;
      $282 = $281&255;
      $283 = ($282|0)==(15);
      $284 = $event;
      if ($283) {
       HEAP8[$284>>0] = -127;
      } else {
       $285 = HEAP8[$284>>0]|0;
       $286 = ($285<<24>>24)!=(0);
       if ($286) {
        $287 = $b;
        $288 = $287&255;
        $289 = $288 & 112;
        $290 = $289 >> 4;
        $291 = ($290*12)|0;
        $292 = (26 + ($291))|0;
        $293 = $event;
        $294 = HEAP8[$293>>0]|0;
        $295 = $294&255;
        $296 = (($295) + ($292))|0;
        $297 = $296&255;
        HEAP8[$293>>0] = $297;
       }
      }
      $298 = $2;
      $299 = (_hio_read8($298)|0);
      $b = $299;
      $300 = $b;
      $301 = $300&255;
      $302 = $301 & 240;
      $303 = $302 >> 4;
      $304 = $event;
      $305 = ((($304)) + 1|0);
      $306 = HEAP8[$305>>0]|0;
      $307 = $306&255;
      $308 = $307 | $303;
      $309 = $308&255;
      HEAP8[$305>>0] = $309;
      $310 = $b;
      $311 = $310&255;
      $312 = $311 & 15;
      $313 = $312&255;
      $314 = $event;
      $315 = ((($314)) + 3|0);
      HEAP8[$315>>0] = $313;
      $316 = $event;
      $317 = ((($316)) + 3|0);
      $318 = HEAP8[$317>>0]|0;
      $319 = ($318<<24>>24)!=(0);
      if ($319) {
       $320 = $2;
       $321 = (_hio_read8($320)|0);
       $b = $321;
       $322 = $b;
       $323 = $event;
       $324 = ((($323)) + 4|0);
       HEAP8[$324>>0] = $322;
       $325 = $event;
       $326 = ((($325)) + 3|0);
       $327 = HEAP8[$326>>0]|0;
       $328 = $327&255;
       $329 = ($328|0)==(15);
       if ($329) {
        $330 = $event;
        $331 = ((($330)) + 4|0);
        $332 = HEAP8[$331>>0]|0;
        $333 = $332&255;
        $334 = ($333|0)<=(2);
        if ($334) {
         $335 = $event;
         $336 = ((($335)) + 4|0);
         HEAP8[$336>>0] = 6;
        }
       }
      }
      $337 = $c;
      $338 = $337&255;
      $339 = $338 ^ -1;
      $340 = $339 & 128;
      $341 = ($340|0)!=(0);
      if (!($341)) {
       break;
      }
     }
     $342 = $r;
     $343 = $342&255;
     $344 = $343 ^ -1;
     $345 = $344 & 128;
     $346 = ($345|0)!=(0);
     if (!($346)) {
      break;
     }
    }
   }
   $347 = $i;
   $348 = (($347) + 1)|0;
   $i = $348;
  }
  if ((label|0) == 38) {
   $0 = -1;
   $371 = $0;
   STACKTOP = sp;return ($371|0);
  }
  else if ((label|0) == 42) {
   $0 = -1;
   $371 = $0;
   STACKTOP = sp;return ($371|0);
  }
  else if ((label|0) == 45) {
   $0 = -1;
   $371 = $0;
   STACKTOP = sp;return ($371|0);
  }
  else if ((label|0) == 57) {
   $i = 0;
   while(1) {
    $349 = $i;
    $350 = $mod;
    $351 = ((($350)) + 136|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = ($349|0)<($352|0);
    if (!($353)) {
     break;
    }
    $354 = $i;
    $355 = $mod;
    $356 = ((($355)) + 184|0);
    $357 = (($356) + (($354*12)|0)|0);
    HEAP32[$357>>2] = 128;
    $358 = $i;
    $359 = $mod;
    $360 = ((($359)) + 184|0);
    $361 = (($360) + (($358*12)|0)|0);
    $362 = ((($361)) + 8|0);
    HEAP32[$362>>2] = 1;
    $363 = $i;
    $364 = (($363) + 1)|0;
    $i = $364;
   }
   $365 = $1;
   $366 = ((($365)) + 7584|0);
   HEAP32[$366>>2] = 22896;
   $367 = $1;
   $368 = ((($367)) + 1284|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $369 | 4096;
   HEAP32[$368>>2] = $370;
   $0 = 0;
   $371 = $0;
   STACKTOP = sp;return ($371|0);
  }
 }
 return (0)|0;
}
function _ult_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,15,$4)|0);
 $6 = ($5>>>0)<(15);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,3376,14)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   }
   $9 = ((($buf)) + 14|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)<(48);
   if (!($12)) {
    $13 = ((($buf)) + 14|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($15|0)>(52);
    if (!($16)) {
     $17 = $1;
     $18 = $2;
     _read_title($17,$18,32);
     $0 = 0;
     break;
    }
   }
   $0 = -1;
  }
 } while(0);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _ult_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cnt = 0, $event = 0, $i = 0, $j = 0, $k = 0, $keep_porta1 = 0;
 var $keep_porta2 = 0, $mod = 0, $ue = 0, $ufh = 0, $ufh2 = 0, $uih = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, $verstr = 0, $x8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ufh = sp + 416|0;
 $ufh2 = sp + 152|0;
 $uih = sp + 32|0;
 $ue = sp + 148|0;
 $verstr = sp + 16|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 ;HEAP32[$verstr>>2]=HEAP32[3296>>2]|0;HEAP32[$verstr+4>>2]=HEAP32[3296+4>>2]|0;HEAP32[$verstr+8>>2]=HEAP32[3296+8>>2]|0;HEAP32[$verstr+12>>2]=HEAP32[3296+12>>2]|0;
 $keep_porta1 = 0;
 $keep_porta2 = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ufh,15,1,$7)|0);
 $8 = ((($ufh)) + 15|0);
 $9 = $2;
 (_hio_read($8,32,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($ufh)) + 47|0);
 HEAP8[$12>>0] = $11;
 $13 = ((($ufh)) + 14|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) - 48)|0;
 $ver = $16;
 $17 = $mod;
 $18 = ((($ufh)) + 15|0);
 (_strncpy(($17|0),($18|0),32)|0);
 $19 = ((($ufh)) + 15|0);
 HEAP8[$19>>0] = 0;
 $20 = $1;
 $21 = $ver;
 $22 = (($21) - 1)|0;
 $23 = (($verstr) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $ver;
 HEAP32[$vararg_buffer>>2] = $24;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 _set_type($20,3312,$vararg_buffer);
 $26 = $2;
 $27 = ((($ufh)) + 47|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29<<5;
 (_hio_seek($26,$30,1)|0);
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = $32&255;
 $34 = $mod;
 $35 = ((($34)) + 144|0);
 HEAP32[$35>>2] = $33;
 $36 = $mod;
 $37 = ((($36)) + 140|0);
 HEAP32[$37>>2] = $33;
 $38 = $mod;
 $39 = (_instrument_init($38)|0);
 $40 = ($39|0)<(0);
 if ($40) {
  $0 = -1;
  $513 = $0;
  STACKTOP = sp;return ($513|0);
 }
 $i = 0;
 while(1) {
  $41 = $i;
  $42 = $mod;
  $43 = ((($42)) + 140|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $mod;
  $47 = $i;
  $48 = (_subinstrument_alloc($46,$47,1)|0);
  $49 = ($48|0)<(0);
  if ($49) {
   label = 6;
   break;
  }
  $50 = $2;
  (_hio_read($uih,32,1,$50)|0);
  $51 = ((($uih)) + 32|0);
  $52 = $2;
  (_hio_read($51,12,1,$52)|0);
  $53 = $2;
  $54 = (_hio_read32l($53)|0);
  $55 = ((($uih)) + 44|0);
  HEAP32[$55>>2] = $54;
  $56 = $2;
  $57 = (_hio_read32l($56)|0);
  $58 = ((($uih)) + 48|0);
  HEAP32[$58>>2] = $57;
  $59 = $2;
  $60 = (_hio_read32l($59)|0);
  $61 = ((($uih)) + 52|0);
  HEAP32[$61>>2] = $60;
  $62 = $2;
  $63 = (_hio_read32l($62)|0);
  $64 = ((($uih)) + 56|0);
  HEAP32[$64>>2] = $63;
  $65 = $2;
  $66 = (_hio_read8($65)|0);
  $67 = ((($uih)) + 60|0);
  HEAP8[$67>>0] = $66;
  $68 = $2;
  $69 = (_hio_read8($68)|0);
  $70 = ((($uih)) + 61|0);
  HEAP8[$70>>0] = $69;
  $71 = $2;
  $72 = (_hio_read16l($71)|0);
  $73 = ((($uih)) + 62|0);
  HEAP16[$73>>1] = $72;
  $74 = $ver;
  $75 = ($74|0)<(4);
  if ($75) {
   $80 = 0;
  } else {
   $76 = $2;
   $77 = (_hio_read16l($76)|0);
   $78 = $77&65535;
   $80 = $78;
  }
  $79 = $80&65535;
  $81 = ((($uih)) + 64|0);
  HEAP16[$81>>1] = $79;
  $82 = $ver;
  $83 = ($82|0)>(3);
  if ($83) {
   $84 = ((($uih)) + 62|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85&65535;
   $87 = ((($uih)) + 64|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88&65535;
   $90 = $89 ^ $86;
   $91 = $90&65535;
   HEAP16[$87>>1] = $91;
   $92 = ((($uih)) + 64|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93&65535;
   $95 = ((($uih)) + 62|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&65535;
   $98 = $97 ^ $94;
   $99 = $98&65535;
   HEAP16[$95>>1] = $99;
   $100 = ((($uih)) + 62|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101&65535;
   $103 = ((($uih)) + 64|0);
   $104 = HEAP16[$103>>1]|0;
   $105 = $104&65535;
   $106 = $105 ^ $102;
   $107 = $106&65535;
   HEAP16[$103>>1] = $107;
  }
  $108 = ((($uih)) + 56|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($uih)) + 52|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) - ($111))|0;
  $113 = $i;
  $114 = $mod;
  $115 = ((($114)) + 180|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + (($113*52)|0)|0);
  $118 = ((($117)) + 32|0);
  HEAP32[$118>>2] = $112;
  $119 = ((($uih)) + 44|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $i;
  $122 = $mod;
  $123 = ((($122)) + 180|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + (($121*52)|0)|0);
  $126 = ((($125)) + 36|0);
  HEAP32[$126>>2] = $120;
  $127 = ((($uih)) + 48|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 180|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + (($129*52)|0)|0);
  $134 = ((($133)) + 40|0);
  HEAP32[$134>>2] = $128;
  $135 = $i;
  $136 = $mod;
  $137 = ((($136)) + 180|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + (($135*52)|0)|0);
  $140 = ((($139)) + 32|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)>(0);
  if ($142) {
   $143 = $i;
   $144 = $mod;
   $145 = ((($144)) + 176|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($146) + (($143*764)|0)|0);
   $148 = ((($147)) + 36|0);
   HEAP32[$148>>2] = 1;
  }
  $149 = ((($uih)) + 61|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  switch ($151|0) {
  case 8:  {
   $158 = $i;
   $159 = $mod;
   $160 = ((($159)) + 180|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + (($158*52)|0)|0);
   $163 = ((($162)) + 44|0);
   HEAP32[$163>>2] = 2;
   break;
  }
  case 4: case 20:  {
   $152 = $i;
   $153 = $mod;
   $154 = ((($153)) + 180|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + (($152*52)|0)|0);
   $157 = ((($156)) + 44|0);
   HEAP32[$157>>2] = 1;
   break;
  }
  case 28:  {
   $176 = $i;
   $177 = $mod;
   $178 = ((($177)) + 180|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($179) + (($176*52)|0)|0);
   $181 = ((($180)) + 44|0);
   HEAP32[$181>>2] = 11;
   break;
  }
  case 24:  {
   $170 = $i;
   $171 = $mod;
   $172 = ((($171)) + 180|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($173) + (($170*52)|0)|0);
   $175 = ((($174)) + 44|0);
   HEAP32[$175>>2] = 10;
   break;
  }
  case 12:  {
   $164 = $i;
   $165 = $mod;
   $166 = ((($165)) + 180|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + (($164*52)|0)|0);
   $169 = ((($168)) + 44|0);
   HEAP32[$169>>2] = 3;
   break;
  }
  default: {
  }
  }
  $182 = ((($uih)) + 60|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = $i;
  $186 = $mod;
  $187 = ((($186)) + 176|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + (($185*764)|0)|0);
  $190 = ((($189)) + 756|0);
  $191 = HEAP32[$190>>2]|0;
  HEAP32[$191>>2] = $184;
  $192 = $i;
  $193 = $mod;
  $194 = ((($193)) + 176|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + (($192*764)|0)|0);
  $197 = ((($196)) + 756|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ((($198)) + 8|0);
  HEAP32[$199>>2] = 128;
  $200 = $i;
  $201 = $i;
  $202 = $mod;
  $203 = ((($202)) + 176|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = (($204) + (($201*764)|0)|0);
  $206 = ((($205)) + 756|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($207)) + 40|0);
  HEAP32[$208>>2] = $200;
  $209 = $mod;
  $210 = $i;
  (_instrument_name($209,$210,$uih,24)|0);
  $211 = $ver;
  $212 = ($211|0)>(3);
  if ($212) {
   $213 = ((($uih)) + 64|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214&65535;
   $216 = $i;
   $217 = $mod;
   $218 = ((($217)) + 176|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = (($219) + (($216*764)|0)|0);
   $221 = ((($220)) + 756|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = ((($222)) + 12|0);
   $224 = $i;
   $225 = $mod;
   $226 = ((($225)) + 176|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = (($227) + (($224*764)|0)|0);
   $229 = ((($228)) + 756|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = ((($230)) + 16|0);
   _c2spd_to_note($215,$223,$231);
  }
  $232 = $i;
  $233 = (($232) + 1)|0;
  $i = $233;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $513 = $0;
  STACKTOP = sp;return ($513|0);
 }
 $234 = $2;
 (_hio_read($ufh2,256,1,$234)|0);
 $235 = $2;
 $236 = (_hio_read8($235)|0);
 $237 = ((($ufh2)) + 256|0);
 HEAP8[$237>>0] = $236;
 $238 = $2;
 $239 = (_hio_read8($238)|0);
 $240 = ((($ufh2)) + 257|0);
 HEAP8[$240>>0] = $239;
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = ($241|0)<(256);
  if (!($242)) {
   break;
  }
  $243 = $i;
  $244 = (($ufh2) + ($243)|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = ($246|0)==(255);
  if ($247) {
   break;
  }
  $248 = $i;
  $249 = (($ufh2) + ($248)|0);
  $250 = HEAP8[$249>>0]|0;
  $251 = $i;
  $252 = $mod;
  $253 = ((($252)) + 952|0);
  $254 = (($253) + ($251)|0);
  HEAP8[$254>>0] = $250;
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 $257 = $i;
 $258 = $mod;
 $259 = ((($258)) + 156|0);
 HEAP32[$259>>2] = $257;
 $260 = ((($ufh2)) + 256|0);
 $261 = HEAP8[$260>>0]|0;
 $262 = $261&255;
 $263 = (($262) + 1)|0;
 $264 = $mod;
 $265 = ((($264)) + 136|0);
 HEAP32[$265>>2] = $263;
 $266 = ((($ufh2)) + 257|0);
 $267 = HEAP8[$266>>0]|0;
 $268 = $267&255;
 $269 = (($268) + 1)|0;
 $270 = $mod;
 $271 = ((($270)) + 128|0);
 HEAP32[$271>>2] = $269;
 $272 = $mod;
 $273 = ((($272)) + 148|0);
 HEAP32[$273>>2] = 6;
 $274 = $mod;
 $275 = ((($274)) + 152|0);
 HEAP32[$275>>2] = 125;
 $276 = $mod;
 $277 = ((($276)) + 136|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = $mod;
 $280 = ((($279)) + 128|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = Math_imul($278, $281)|0;
 $283 = $mod;
 $284 = ((($283)) + 132|0);
 HEAP32[$284>>2] = $282;
 $i = 0;
 while(1) {
  $285 = $i;
  $286 = $mod;
  $287 = ((($286)) + 136|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = ($285|0)<($288|0);
  if (!($289)) {
   break;
  }
  $290 = $ver;
  $291 = ($290|0)>=(3);
  if ($291) {
   $292 = $2;
   $293 = (_hio_read8($292)|0);
   $x8 = $293;
   $294 = $x8;
   $295 = $294&255;
   $296 = ($295*255)|0;
   $297 = (($296|0) / 15)&-1;
   $298 = $i;
   $299 = $mod;
   $300 = ((($299)) + 184|0);
   $301 = (($300) + (($298*12)|0)|0);
   HEAP32[$301>>2] = $297;
  } else {
   $302 = $i;
   $303 = (($302) + 1)|0;
   $304 = (($303|0) / 2)&-1;
   $305 = (($304|0) % 2)&-1;
   $306 = ($305*255)|0;
   $307 = (($306) - 128)|0;
   $308 = $1;
   $309 = ((($308)) + 1296|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = Math_imul($307, $310)|0;
   $312 = (($311|0) / 100)&-1;
   $313 = (128 + ($312))|0;
   $314 = $i;
   $315 = $mod;
   $316 = ((($315)) + 184|0);
   $317 = (($316) + (($314*12)|0)|0);
   HEAP32[$317>>2] = $313;
  }
  $318 = $i;
  $319 = (($318) + 1)|0;
  $i = $319;
 }
 $320 = $mod;
 $321 = (_pattern_init($320)|0);
 $322 = ($321|0)<(0);
 if ($322) {
  $0 = -1;
  $513 = $0;
  STACKTOP = sp;return ($513|0);
 }
 $i = 0;
 while(1) {
  $323 = $i;
  $324 = $mod;
  $325 = ((($324)) + 128|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = ($323|0)<($326|0);
  if (!($327)) {
   break;
  }
  $328 = $mod;
  $329 = $i;
  $330 = (_pattern_tracks_alloc($328,$329,64)|0);
  $331 = ($330|0)<(0);
  if ($331) {
   label = 37;
   break;
  }
  $332 = $i;
  $333 = (($332) + 1)|0;
  $i = $333;
 }
 if ((label|0) == 37) {
  $0 = -1;
  $513 = $0;
  STACKTOP = sp;return ($513|0);
 }
 $i = 0;
 while(1) {
  $334 = $i;
  $335 = $mod;
  $336 = ((($335)) + 136|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = ($334|0)<($337|0);
  if (!($338)) {
   break;
  }
  $j = 0;
  L60: while(1) {
   $339 = $j;
   $340 = $mod;
   $341 = ((($340)) + 128|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = $342<<6;
   $344 = ($339|0)<($343|0);
   if (!($344)) {
    break;
   }
   $cnt = 1;
   $345 = $2;
   $346 = (_hio_read8($345)|0);
   $x8 = $346;
   $347 = $x8;
   $348 = $347&255;
   $349 = ($348|0)==(252);
   if ($349) {
    $350 = $2;
    $351 = (_hio_read8($350)|0);
    $352 = $351&255;
    $cnt = $352;
    $353 = $2;
    $354 = (_hio_read8($353)|0);
    $x8 = $354;
   }
   $355 = $2;
   (_hio_read($ue,4,1,$355)|0);
   $356 = $cnt;
   $357 = ($356|0)==(0);
   if ($357) {
    $358 = $cnt;
    $359 = (($358) + 1)|0;
    $cnt = $359;
   }
   $k = 0;
   while(1) {
    $360 = $k;
    $361 = $cnt;
    $362 = ($360|0)<($361|0);
    if (!($362)) {
     continue L60;
    }
    $363 = $j;
    $364 = $363 & 63;
    $365 = $i;
    $366 = $j;
    $367 = $366 >> 6;
    $368 = $1;
    $369 = ((($368)) + 168|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = (($370) + ($367<<2)|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = ((($372)) + 4|0);
    $374 = (($373) + ($365<<2)|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = $1;
    $377 = ((($376)) + 172|0);
    $378 = HEAP32[$377>>2]|0;
    $379 = (($378) + ($375<<2)|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = ((($380)) + 4|0);
    $382 = (($381) + ($364<<3)|0);
    $event = $382;
    $383 = $event;
    ;HEAP8[$383>>0]=0|0;HEAP8[$383+1>>0]=0|0;HEAP8[$383+2>>0]=0|0;HEAP8[$383+3>>0]=0|0;HEAP8[$383+4>>0]=0|0;HEAP8[$383+5>>0]=0|0;HEAP8[$383+6>>0]=0|0;HEAP8[$383+7>>0]=0|0;
    $384 = $x8;
    $385 = ($384<<24>>24)!=(0);
    if ($385) {
     $386 = $x8;
     $387 = $386&255;
     $388 = (($387) + 36)|0;
     $389 = $388&255;
     $390 = $event;
     HEAP8[$390>>0] = $389;
    }
    $391 = HEAP8[$ue>>0]|0;
    $392 = $event;
    $393 = ((($392)) + 1|0);
    HEAP8[$393>>0] = $391;
    $394 = ((($ue)) + 1|0);
    $395 = HEAP8[$394>>0]|0;
    $396 = $395&255;
    $397 = $396 & 240;
    $398 = $397 >> 4;
    $399 = $398&255;
    $400 = $event;
    $401 = ((($400)) + 3|0);
    HEAP8[$401>>0] = $399;
    $402 = ((($ue)) + 1|0);
    $403 = HEAP8[$402>>0]|0;
    $404 = $403&255;
    $405 = $404 & 15;
    $406 = $405&255;
    $407 = $event;
    $408 = ((($407)) + 5|0);
    HEAP8[$408>>0] = $406;
    $409 = ((($ue)) + 3|0);
    $410 = HEAP8[$409>>0]|0;
    $411 = $event;
    $412 = ((($411)) + 4|0);
    HEAP8[$412>>0] = $410;
    $413 = ((($ue)) + 2|0);
    $414 = HEAP8[$413>>0]|0;
    $415 = $event;
    $416 = ((($415)) + 6|0);
    HEAP8[$416>>0] = $414;
    $417 = $event;
    $418 = ((($417)) + 3|0);
    $419 = HEAP8[$418>>0]|0;
    $420 = $419&255;
    switch ($420|0) {
    case 6: case 5:  {
     $431 = $event;
     $432 = ((($431)) + 4|0);
     HEAP8[$432>>0] = 0;
     $433 = $event;
     $434 = ((($433)) + 3|0);
     HEAP8[$434>>0] = 0;
     break;
    }
    case 11:  {
     $435 = $event;
     $436 = ((($435)) + 3|0);
     HEAP8[$436>>0] = 8;
     $437 = $event;
     $438 = ((($437)) + 4|0);
     $439 = HEAP8[$438>>0]|0;
     $440 = $439&255;
     $441 = $440 << 4;
     $442 = $441&255;
     HEAP8[$438>>0] = $442;
     break;
    }
    case 3:  {
     $keep_porta1 = 32;
     break;
    }
    case 9:  {
     $443 = $event;
     $444 = ((($443)) + 4|0);
     $445 = HEAP8[$444>>0]|0;
     $446 = $445&255;
     $447 = $446 << 2;
     $448 = $447&255;
     HEAP8[$444>>0] = $448;
     break;
    }
    case 0:  {
     $421 = $event;
     $422 = ((($421)) + 4|0);
     $423 = HEAP8[$422>>0]|0;
     $424 = ($423<<24>>24)!=(0);
     if ($424) {
      $keep_porta1 = 0;
     }
     $425 = $keep_porta1;
     $426 = ($425|0)!=(0);
     if ($426) {
      $427 = $event;
      $428 = ((($427)) + 3|0);
      HEAP8[$428>>0] = 3;
      $429 = $keep_porta1;
      $430 = (($429) + -1)|0;
      $keep_porta1 = $430;
     }
     break;
    }
    default: {
    }
    }
    $449 = $event;
    $450 = ((($449)) + 5|0);
    $451 = HEAP8[$450>>0]|0;
    $452 = $451&255;
    switch ($452|0) {
    case 6: case 5:  {
     $463 = $event;
     $464 = ((($463)) + 6|0);
     HEAP8[$464>>0] = 0;
     $465 = $event;
     $466 = ((($465)) + 5|0);
     HEAP8[$466>>0] = 0;
     break;
    }
    case 11:  {
     $467 = $event;
     $468 = ((($467)) + 5|0);
     HEAP8[$468>>0] = 8;
     $469 = $event;
     $470 = ((($469)) + 6|0);
     $471 = HEAP8[$470>>0]|0;
     $472 = $471&255;
     $473 = $472 << 4;
     $474 = $473&255;
     HEAP8[$470>>0] = $474;
     break;
    }
    case 9:  {
     $475 = $event;
     $476 = ((($475)) + 6|0);
     $477 = HEAP8[$476>>0]|0;
     $478 = $477&255;
     $479 = $478 << 2;
     $480 = $479&255;
     HEAP8[$476>>0] = $480;
     break;
    }
    case 0:  {
     $453 = $event;
     $454 = ((($453)) + 6|0);
     $455 = HEAP8[$454>>0]|0;
     $456 = ($455<<24>>24)!=(0);
     if ($456) {
      $keep_porta2 = 0;
     }
     $457 = $keep_porta2;
     $458 = ($457|0)!=(0);
     if ($458) {
      $459 = $event;
      $460 = ((($459)) + 5|0);
      HEAP8[$460>>0] = 3;
      $461 = $keep_porta2;
      $462 = (($461) + -1)|0;
      $keep_porta2 = $462;
     }
     break;
    }
    case 3:  {
     $keep_porta2 = 32;
     break;
    }
    default: {
    }
    }
    $481 = $k;
    $482 = (($481) + 1)|0;
    $k = $482;
    $483 = $j;
    $484 = (($483) + 1)|0;
    $j = $484;
   }
  }
  $485 = $i;
  $486 = (($485) + 1)|0;
  $i = $486;
 }
 $i = 0;
 while(1) {
  $487 = $i;
  $488 = $mod;
  $489 = ((($488)) + 140|0);
  $490 = HEAP32[$489>>2]|0;
  $491 = ($487|0)<($490|0);
  if (!($491)) {
   label = 77;
   break;
  }
  $492 = $i;
  $493 = $mod;
  $494 = ((($493)) + 180|0);
  $495 = HEAP32[$494>>2]|0;
  $496 = (($495) + (($492*52)|0)|0);
  $497 = ((($496)) + 32|0);
  $498 = HEAP32[$497>>2]|0;
  $499 = ($498|0)!=(0);
  if ($499) {
   $500 = $1;
   $501 = $2;
   $502 = $i;
   $503 = $mod;
   $504 = ((($503)) + 180|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = (($505) + (($502*52)|0)|0);
   $507 = (_load_sample($500,$501,0,$506,0)|0);
   $508 = ($507|0)<(0);
   if ($508) {
    label = 75;
    break;
   }
  }
  $509 = $i;
  $510 = (($509) + 1)|0;
  $i = $510;
 }
 if ((label|0) == 75) {
  $0 = -1;
  $513 = $0;
  STACKTOP = sp;return ($513|0);
 }
 else if ((label|0) == 77) {
  $511 = $1;
  $512 = ((($511)) + 1268|0);
  HEAP32[$512>>2] = 256;
  $0 = 0;
  $513 = $0;
  STACKTOP = sp;return ($513|0);
 }
 return (0)|0;
}
function _mdl_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1145914444);
 if ($6) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $7 = $1;
 (_hio_read8($7)|0);
 $8 = $1;
 $9 = (_hio_read16b($8)|0);
 $id = $9;
 $10 = $id;
 $11 = $10&65535;
 $12 = ($11|0)==(18766);
 $13 = $1;
 if ($12) {
  (_hio_read32b($13)|0);
  $14 = $1;
  $15 = $2;
  _read_title($14,$15,32);
 } else {
  $16 = $2;
  _read_title($13,$16,0);
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _mdl_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $e = 0, $handle = 0, $i = 0, $j = 0, $k = 0;
 var $l = 0, $mod = 0, $retval = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 112|0;
 $data = sp + 16|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $retval = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 dest=$data; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read($buf,1,1,$8)|0);
 $9 = (_iff_new()|0);
 $handle = $9;
 $10 = $handle;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $272 = $0;
  STACKTOP = sp;return ($272|0);
 }
 $12 = $handle;
 (_iff_register($12,3424,224)|0);
 $13 = $handle;
 (_iff_register($13,3432,225)|0);
 $14 = $handle;
 (_iff_register($14,3440,226)|0);
 $15 = $handle;
 (_iff_register($15,3448,227)|0);
 $16 = $handle;
 (_iff_register($16,3456,228)|0);
 $17 = $handle;
 (_iff_register($17,3464,229)|0);
 $18 = HEAP8[$buf>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = $19 & 240;
 $21 = $20 >> 4;
 $22 = ($21|0)!=(0);
 $23 = $handle;
 if ($22) {
  (_iff_register($23,3472,230)|0);
  $24 = $handle;
  (_iff_register($24,3480,231)|0);
  $25 = $handle;
  (_iff_register($25,3488,232)|0);
 } else {
  (_iff_register($23,3480,233)|0);
  $26 = $handle;
  (_iff_register($26,3488,234)|0);
 }
 $27 = $handle;
 _iff_id_size($27,2);
 $28 = $handle;
 _iff_set_quirk($28,1);
 $29 = $1;
 $30 = HEAP8[$buf>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = $31 & 240;
 $33 = $32 >> 4;
 $34 = HEAP8[$buf>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = $35 & 15;
 HEAP32[$vararg_buffer>>2] = $33;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $36;
 _set_type($29,3496,$vararg_buffer);
 $37 = $1;
 $38 = ((($37)) + 1268|0);
 HEAP32[$38>>2] = 255;
 $39 = $1;
 $40 = ((($39)) + 1264|0);
 HEAP32[$40>>2] = 8363;
 $41 = ((($data)) + 36|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($data)) + 32|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($data)) + 28|0);
 HEAP32[$43>>2] = 0;
 $44 = (_calloc(256,4)|0);
 $45 = ((($data)) + 4|0);
 HEAP32[$45>>2] = $44;
 $46 = (_calloc(256,4)|0);
 HEAP32[$data>>2] = $46;
 $47 = (_malloc(1024)|0);
 $48 = ((($data)) + 8|0);
 HEAP32[$48>>2] = $47;
 $49 = (_malloc(1024)|0);
 $50 = ((($data)) + 12|0);
 HEAP32[$50>>2] = $49;
 $51 = (_malloc(1024)|0);
 $52 = ((($data)) + 16|0);
 HEAP32[$52>>2] = $51;
 $53 = (_calloc(256,4)|0);
 $54 = ((($data)) + 20|0);
 HEAP32[$54>>2] = $53;
 $i = 0;
 while(1) {
  $55 = $i;
  $56 = ($55|0)<(256);
  if (!($56)) {
   break;
  }
  $57 = $i;
  $58 = ((($data)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($57<<2)|0);
  HEAP32[$60>>2] = -1;
  $61 = $i;
  $62 = ((($data)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($61<<2)|0);
  HEAP32[$64>>2] = -1;
  $65 = $i;
  $66 = ((($data)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = -1;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = $handle;
 $72 = $1;
 $73 = $2;
 $74 = (_iff_load($71,$72,$73,$data)|0);
 $75 = ($74|0)<(0);
 $76 = $handle;
 _iff_release($76);
 L13: do {
  if ($75) {
   $retval = -1;
  } else {
   $i = 0;
   while(1) {
    $77 = $i;
    $78 = $mod;
    $79 = ((($78)) + 132|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($77|0)<($80|0);
    if (!($81)) {
     break;
    }
    $j = 0;
    while(1) {
     $82 = $j;
     $83 = $i;
     $84 = $mod;
     $85 = ((($84)) + 172|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($83<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = HEAP32[$88>>2]|0;
     $90 = ($82|0)<($89|0);
     if (!($90)) {
      break;
     }
     $91 = $j;
     $92 = $i;
     $93 = $mod;
     $94 = ((($93)) + 172|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($95) + ($92<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($97)) + 4|0);
     $99 = (($98) + ($91<<3)|0);
     $e = $99;
     $l = 0;
     while(1) {
      $100 = $l;
      $101 = $mod;
      $102 = ((($101)) + 140|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($100|0)<($103|0);
      if (!($104)) {
       break;
      }
      $105 = $e;
      $106 = ((($105)) + 1|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107&255;
      $109 = ($108|0)!=(0);
      if ($109) {
       $110 = $e;
       $111 = ((($110)) + 1|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = $l;
       $115 = HEAP32[$data>>2]|0;
       $116 = (($115) + ($114<<2)|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($113|0)==($117|0);
       if ($118) {
        label = 19;
        break;
       }
      }
      $124 = $l;
      $125 = (($124) + 1)|0;
      $l = $125;
     }
     if ((label|0) == 19) {
      label = 0;
      $119 = $l;
      $120 = (($119) + 1)|0;
      $121 = $120&255;
      $122 = $e;
      $123 = ((($122)) + 1|0);
      HEAP8[$123>>0] = $121;
     }
     $126 = $j;
     $127 = (($126) + 1)|0;
     $j = $127;
    }
    $128 = $i;
    $129 = (($128) + 1)|0;
    $i = $129;
   }
   $i = 0;
   while(1) {
    $130 = $i;
    $131 = $mod;
    $132 = ((($131)) + 140|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($130|0)<($133|0);
    if (!($134)) {
     break L13;
    }
    $135 = $i;
    $136 = $i;
    $137 = $mod;
    $138 = ((($137)) + 176|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (($139) + (($136*764)|0)|0);
    $141 = ((($140)) + 44|0);
    $142 = ((($data)) + 40|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ((($data)) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ((($data)) + 28|0);
    $147 = HEAP32[$146>>2]|0;
    _fix_env($135,$141,$143,$145,$147);
    $148 = $i;
    $149 = $i;
    $150 = $mod;
    $151 = ((($150)) + 176|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($152) + (($149*764)|0)|0);
    $154 = ((($153)) + 200|0);
    $155 = ((($data)) + 44|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($data)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ((($data)) + 32|0);
    $160 = HEAP32[$159>>2]|0;
    _fix_env($148,$154,$156,$158,$160);
    $161 = $i;
    $162 = $i;
    $163 = $mod;
    $164 = ((($163)) + 176|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) + (($162*764)|0)|0);
    $167 = ((($166)) + 356|0);
    $168 = ((($data)) + 48|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = ((($data)) + 16|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = ((($data)) + 36|0);
    $173 = HEAP32[$172>>2]|0;
    _fix_env($161,$167,$169,$171,$173);
    $j = 0;
    while(1) {
     $174 = $j;
     $175 = $i;
     $176 = $mod;
     $177 = ((($176)) + 176|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (($178) + (($175*764)|0)|0);
     $180 = ((($179)) + 36|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($174|0)<($181|0);
     if (!($182)) {
      break;
     }
     $k = 0;
     while(1) {
      $183 = $k;
      $184 = $mod;
      $185 = ((($184)) + 144|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = ($183|0)<($186|0);
      if (!($187)) {
       break;
      }
      $188 = $j;
      $189 = $i;
      $190 = $mod;
      $191 = ((($190)) + 176|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($192) + (($189*764)|0)|0);
      $194 = ((($193)) + 756|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = (($195) + ($188<<6)|0);
      $197 = ((($196)) + 40|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $k;
      $200 = ((($data)) + 4|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = (($201) + ($199<<2)|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($198|0)==($203|0);
      $205 = $k;
      if ($204) {
       label = 30;
       break;
      }
      $241 = (($205) + 1)|0;
      $k = $241;
     }
     if ((label|0) == 30) {
      label = 0;
      $206 = $j;
      $207 = $i;
      $208 = $mod;
      $209 = ((($208)) + 176|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = (($210) + (($207*764)|0)|0);
      $212 = ((($211)) + 756|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = (($213) + ($206<<6)|0);
      $215 = ((($214)) + 40|0);
      HEAP32[$215>>2] = $205;
      $216 = $k;
      $217 = ((($data)) + 20|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = (($218) + ($216<<2)|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $j;
      $222 = $i;
      $223 = $mod;
      $224 = ((($223)) + 176|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (($225) + (($222*764)|0)|0);
      $227 = ((($226)) + 756|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = (($228) + ($221<<6)|0);
      $230 = ((($229)) + 12|0);
      $231 = $j;
      $232 = $i;
      $233 = $mod;
      $234 = ((($233)) + 176|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = (($235) + (($232*764)|0)|0);
      $237 = ((($236)) + 756|0);
      $238 = HEAP32[$237>>2]|0;
      $239 = (($238) + ($231<<6)|0);
      $240 = ((($239)) + 16|0);
      _c2spd_to_note($220,$230,$240);
     }
     $242 = $j;
     $243 = (($242) + 1)|0;
     $j = $243;
    }
    $244 = $i;
    $245 = (($244) + 1)|0;
    $i = $245;
   }
  }
 } while(0);
 $246 = ((($data)) + 20|0);
 $247 = HEAP32[$246>>2]|0;
 _free($247);
 $248 = ((($data)) + 16|0);
 $249 = HEAP32[$248>>2]|0;
 _free($249);
 $250 = ((($data)) + 12|0);
 $251 = HEAP32[$250>>2]|0;
 _free($251);
 $252 = ((($data)) + 8|0);
 $253 = HEAP32[$252>>2]|0;
 _free($253);
 $254 = HEAP32[$data>>2]|0;
 _free($254);
 $255 = ((($data)) + 4|0);
 $256 = HEAP32[$255>>2]|0;
 _free($256);
 $257 = ((($data)) + 40|0);
 $258 = HEAP32[$257>>2]|0;
 _free($258);
 $259 = ((($data)) + 44|0);
 $260 = HEAP32[$259>>2]|0;
 _free($260);
 $261 = ((($data)) + 48|0);
 $262 = HEAP32[$261>>2]|0;
 _free($262);
 $263 = ((($data)) + 24|0);
 $264 = HEAP32[$263>>2]|0;
 _free($264);
 $265 = $1;
 $266 = ((($265)) + 1284|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = $267 | 33816608;
 HEAP32[$266>>2] = $268;
 $269 = $1;
 $270 = ((($269)) + 1288|0);
 HEAP32[$270>>2] = 1;
 $271 = $retval;
 $0 = $271;
 $272 = $0;
 STACKTOP = sp;return ($272|0);
}
function _get_chunk_in($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $chinfo = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = $3;
 (_hio_read($6,1,32,$7)|0);
 $8 = $3;
 (_hio_seek($8,20,1)|0);
 $9 = $3;
 $10 = (_hio_read16l($9)|0);
 $11 = $10&65535;
 $12 = $mod;
 $13 = ((($12)) + 156|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = (_hio_read16l($14)|0);
 $16 = $15&65535;
 $17 = $mod;
 $18 = ((($17)) + 160|0);
 HEAP32[$18>>2] = $16;
 $19 = $3;
 (_hio_read8($19)|0);
 $20 = $3;
 $21 = (_hio_read8($20)|0);
 $22 = $21&255;
 $23 = $mod;
 $24 = ((($23)) + 148|0);
 HEAP32[$24>>2] = $22;
 $25 = $3;
 $26 = (_hio_read8($25)|0);
 $27 = $26&255;
 $28 = $mod;
 $29 = ((($28)) + 152|0);
 HEAP32[$29>>2] = $27;
 $30 = $mod;
 $31 = ((($30)) + 156|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)>(256);
 if (!($33)) {
  $34 = $mod;
  $35 = ((($34)) + 160|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(255);
  if (!($37)) {
   $i = 0;
   while(1) {
    $38 = $i;
    $39 = ($38|0)<(32);
    if (!($39)) {
     break;
    }
    $40 = $3;
    $41 = (_hio_read8($40)|0);
    $chinfo = $41;
    $42 = $chinfo;
    $43 = $42&255;
    $44 = $43 & 128;
    $45 = ($44|0)!=(0);
    if ($45) {
     break;
    }
    $46 = $chinfo;
    $47 = $46&255;
    $48 = $47 << 1;
    $49 = $i;
    $50 = $mod;
    $51 = ((($50)) + 184|0);
    $52 = (($51) + (($49*12)|0)|0);
    HEAP32[$52>>2] = $48;
    $53 = $i;
    $54 = (($53) + 1)|0;
    $i = $54;
   }
   $55 = $i;
   $56 = $mod;
   $57 = ((($56)) + 136|0);
   HEAP32[$57>>2] = $55;
   $58 = $3;
   $59 = $i;
   $60 = (32 - ($59))|0;
   $61 = (($60) - 1)|0;
   (_hio_seek($58,$61,1)|0);
   $62 = $mod;
   $63 = ((($62)) + 952|0);
   $64 = $mod;
   $65 = ((($64)) + 156|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   (_hio_read($63,1,$66,$67)|0);
   $0 = 0;
   $68 = $0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $0 = -1;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _get_chunk_tr($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $ev = 0, $ev1 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $max_trk = 0, $mod = 0, $row = 0, $track = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16l($6)|0);
 $8 = $7&65535;
 $9 = (($8) + 1)|0;
 $10 = $mod;
 $11 = ((($10)) + 132|0);
 HEAP32[$11>>2] = $9;
 $max_trk = 0;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 128|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $j = 0;
  while(1) {
   $17 = $j;
   $18 = $mod;
   $19 = ((($18)) + 136|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $max_trk;
   $23 = $j;
   $24 = $i;
   $25 = $mod;
   $26 = ((($25)) + 168|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   $31 = (($30) + ($23<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($22|0)<($32|0);
   if ($33) {
    $34 = $j;
    $35 = $i;
    $36 = $mod;
    $37 = ((($36)) + 168|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) + ($35<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 4|0);
    $42 = (($41) + ($34<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $max_trk = $43;
   }
   $44 = $j;
   $45 = (($44) + 1)|0;
   $j = $45;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $max_trk;
 $49 = $mod;
 $50 = ((($49)) + 132|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($48|0)>=($51|0);
 if ($52) {
  $0 = -1;
  $248 = $0;
  STACKTOP = sp;return ($248|0);
 }
 $53 = $mod;
 $54 = ((($53)) + 132|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (_calloc(4,$55)|0);
 $57 = $mod;
 $58 = ((($57)) + 172|0);
 HEAP32[$58>>2] = $56;
 $59 = ($56|0)==(0|0);
 if ($59) {
  $0 = -1;
  $248 = $0;
  STACKTOP = sp;return ($248|0);
 }
 $60 = (_calloc(1,2052)|0);
 $track = $60;
 $61 = $track;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  $63 = $mod;
  $64 = (_track_alloc($63,0,256)|0);
  $65 = ($64|0)<(0);
  L22: do {
   if (!($65)) {
    $i = 1;
    while(1) {
     $66 = $i;
     $67 = $mod;
     $68 = ((($67)) + 132|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($66|0)<($69|0);
     if (!($70)) {
      break;
     }
     $71 = $3;
     $72 = (_hio_read16l($71)|0);
     $73 = $72&65535;
     $len = $73;
     $74 = $track;
     _memset(($74|0),0,2052)|0;
     $row = 0;
     while(1) {
      $75 = $len;
      $76 = ($75|0)!=(0);
      $77 = $row;
      if (!($76)) {
       break;
      }
      $78 = $track;
      $79 = ((($78)) + 4|0);
      $80 = (($79) + ($77<<3)|0);
      $ev = $80;
      $81 = $row;
      $82 = ($81|0)>(255);
      if ($82) {
       break L22;
      }
      $83 = $3;
      $84 = (_hio_read8($83)|0);
      $85 = $84&255;
      $j = $85;
      $86 = $len;
      $87 = (($86) + -1)|0;
      $len = $87;
      $88 = $j;
      $89 = $88 & 3;
      if ((($89|0) == 3)) {
       $123 = $j;
       $124 = $123 & 4;
       $125 = ($124|0)!=(0);
       if ($125) {
        $126 = $3;
        $127 = (_hio_read8($126)|0);
        $b = $127;
        $128 = $len;
        $129 = (($128) + -1)|0;
        $len = $129;
        $130 = $b;
        $131 = $130&255;
        $132 = ($131|0)==(255);
        if ($132) {
         $137 = 129;
        } else {
         $133 = $b;
         $134 = $133&255;
         $135 = (($134) + 12)|0;
         $137 = $135;
        }
        $136 = $137&255;
        $138 = $ev;
        HEAP8[$138>>0] = $136;
       }
       $139 = $j;
       $140 = $139 & 8;
       $141 = ($140|0)!=(0);
       if ($141) {
        $142 = $len;
        $143 = (($142) + -1)|0;
        $len = $143;
        $144 = $3;
        $145 = (_hio_read8($144)|0);
        $146 = $ev;
        $147 = ((($146)) + 1|0);
        HEAP8[$147>>0] = $145;
       }
       $148 = $j;
       $149 = $148 & 16;
       $150 = ($149|0)!=(0);
       if ($150) {
        $151 = $len;
        $152 = (($151) + -1)|0;
        $len = $152;
        $153 = $3;
        $154 = (_hio_read8($153)|0);
        $155 = $ev;
        $156 = ((($155)) + 2|0);
        HEAP8[$156>>0] = $154;
       }
       $157 = $j;
       $158 = $157 & 32;
       $159 = ($158|0)!=(0);
       if ($159) {
        $160 = $len;
        $161 = (($160) + -1)|0;
        $len = $161;
        $162 = $3;
        $163 = (_hio_read8($162)|0);
        $164 = $163&255;
        $k = $164;
        $165 = $k;
        $166 = $165 & 15;
        $167 = $166&255;
        $168 = $ev;
        $169 = ((($168)) + 3|0);
        HEAP8[$169>>0] = $167;
        $170 = $k;
        $171 = $170 & 240;
        $172 = $171 >> 4;
        $173 = $172&255;
        $174 = $ev;
        $175 = ((($174)) + 5|0);
        HEAP8[$175>>0] = $173;
       }
       $176 = $j;
       $177 = $176 & 64;
       $178 = ($177|0)!=(0);
       if ($178) {
        $179 = $len;
        $180 = (($179) + -1)|0;
        $len = $180;
        $181 = $3;
        $182 = (_hio_read8($181)|0);
        $183 = $ev;
        $184 = ((($183)) + 4|0);
        HEAP8[$184>>0] = $182;
       }
       $185 = $j;
       $186 = $185 & 128;
       $187 = ($186|0)!=(0);
       if ($187) {
        $188 = $len;
        $189 = (($188) + -1)|0;
        $len = $189;
        $190 = $3;
        $191 = (_hio_read8($190)|0);
        $192 = $ev;
        $193 = ((($192)) + 6|0);
        HEAP8[$193>>0] = $191;
       }
      } else if ((($89|0) == 1)) {
       $94 = $row;
       $95 = $j;
       $96 = $95 >> 2;
       $97 = (($94) + ($96))|0;
       $98 = ($97|0)>(255);
       if ($98) {
        break L22;
       }
       $k = 0;
       while(1) {
        $99 = $k;
        $100 = $j;
        $101 = $100 >> 2;
        $102 = ($99|0)<=($101|0);
        $103 = $k;
        if (!($102)) {
         break;
        }
        $104 = $ev;
        $105 = (($104) + ($103<<3)|0);
        $106 = $ev;
        $107 = ((($106)) + -8|0);
        ;HEAP8[$105>>0]=HEAP8[$107>>0]|0;HEAP8[$105+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$105+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$105+3>>0]=HEAP8[$107+3>>0]|0;HEAP8[$105+4>>0]=HEAP8[$107+4>>0]|0;HEAP8[$105+5>>0]=HEAP8[$107+5>>0]|0;HEAP8[$105+6>>0]=HEAP8[$107+6>>0]|0;HEAP8[$105+7>>0]=HEAP8[$107+7>>0]|0;
        $108 = $k;
        $109 = (($108) + 1)|0;
        $k = $109;
       }
       $110 = (($103) - 1)|0;
       $111 = $row;
       $112 = (($111) + ($110))|0;
       $row = $112;
      } else if ((($89|0) == 2)) {
       $113 = $j;
       $114 = $113 >> 2;
       $115 = $row;
       $116 = ($114|0)==($115|0);
       if ($116) {
        break L22;
       }
       $117 = $ev;
       $118 = $j;
       $119 = $118 >> 2;
       $120 = $track;
       $121 = ((($120)) + 4|0);
       $122 = (($121) + ($119<<3)|0);
       ;HEAP8[$117>>0]=HEAP8[$122>>0]|0;HEAP8[$117+1>>0]=HEAP8[$122+1>>0]|0;HEAP8[$117+2>>0]=HEAP8[$122+2>>0]|0;HEAP8[$117+3>>0]=HEAP8[$122+3>>0]|0;HEAP8[$117+4>>0]=HEAP8[$122+4>>0]|0;HEAP8[$117+5>>0]=HEAP8[$122+5>>0]|0;HEAP8[$117+6>>0]=HEAP8[$122+6>>0]|0;HEAP8[$117+7>>0]=HEAP8[$122+7>>0]|0;
      } else if ((($89|0) == 0)) {
       $90 = $j;
       $91 = $90 >> 2;
       $92 = $row;
       $93 = (($92) + ($91))|0;
       $row = $93;
      }
      $194 = $row;
      $195 = (($194) + 1)|0;
      $row = $195;
     }
     $196 = ($77|0)<=(64);
     do {
      if ($196) {
       $row = 64;
      } else {
       $197 = $row;
       $198 = ($197|0)<=(128);
       if ($198) {
        $row = 128;
        break;
       } else {
        $row = 256;
        break;
       }
      }
     } while(0);
     $199 = $mod;
     $200 = $i;
     $201 = $row;
     $202 = (_track_alloc($199,$200,$201)|0);
     $203 = ($202|0)<(0);
     if ($203) {
      break L22;
     }
     $204 = $i;
     $205 = $mod;
     $206 = ((($205)) + 172|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($204<<2)|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = $track;
     $211 = $row;
     $212 = (($211) - 1)|0;
     $213 = $212<<3;
     $214 = (12 + ($213))|0;
     _memcpy(($209|0),($210|0),($214|0))|0;
     $215 = $row;
     $216 = $i;
     $217 = $mod;
     $218 = ((($217)) + 172|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = (($219) + ($216<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     HEAP32[$221>>2] = $215;
     $j = 0;
     while(1) {
      $222 = $j;
      $223 = $row;
      $224 = ($222|0)<($223|0);
      if (!($224)) {
       break;
      }
      $225 = $j;
      $226 = $i;
      $227 = $mod;
      $228 = ((($227)) + 172|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = (($229) + ($226<<2)|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = ((($231)) + 4|0);
      $233 = (($232) + ($225<<3)|0);
      $ev1 = $233;
      $234 = $ev1;
      $235 = ((($234)) + 3|0);
      $236 = $ev1;
      $237 = ((($236)) + 4|0);
      _xlat_fx1($235,$237);
      $238 = $ev1;
      $239 = ((($238)) + 5|0);
      $240 = $ev1;
      $241 = ((($240)) + 6|0);
      _xlat_fx2($239,$241);
      $242 = $j;
      $243 = (($242) + 1)|0;
      $j = $243;
     }
     $244 = $i;
     $245 = (($244) + 1)|0;
     $i = $245;
    }
    $246 = $track;
    _free($246);
    $0 = 0;
    $248 = $0;
    STACKTOP = sp;return ($248|0);
   }
  } while(0);
  $247 = $track;
  _free($247);
 }
 $0 = -1;
 $248 = $0;
 STACKTOP = sp;return ($248|0);
}
function _get_chunk_sa($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $i = 0, $len = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $smpbuf = 0, $xxs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $mod;
  $9 = ((($8)) + 144|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 22;
   break;
  }
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 180|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*52)|0)|0);
  $xxs = $16;
  $17 = $xxs;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $len = $19;
  $20 = $xxs;
  $21 = ((($20)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 1;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $len;
   $26 = $25 << 1;
   $len = $26;
  }
  $27 = $len;
  $28 = (_calloc(1,$27)|0);
  $smpbuf = $28;
  $29 = ($28|0)==(0|0);
  if ($29) {
   break;
  }
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  if ((($35|0) == 0)) {
   $36 = $smpbuf;
   $37 = $len;
   $38 = $3;
   (_hio_read($36,1,$37,$38)|0);
  } else if ((($35|0) == 2)) {
   $69 = $3;
   $70 = (_hio_read32l($69)|0);
   $len = $70;
   $71 = $xxs;
   $72 = ((($71)) + 44|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 ^ -1;
   $75 = $74 & 1;
   $76 = ($75|0)!=(0);
   if ($76) {
    label = 24;
    break;
   }
   $77 = $len;
   $78 = ($77|0)<=(0);
   $79 = $len;
   $80 = ($79|0)>(268435456);
   $or$cond3 = $78 | $80;
   if ($or$cond3) {
    label = 24;
    break;
   }
   $81 = $len;
   $82 = (($81) + 4)|0;
   $83 = (_malloc($82)|0);
   $buf = $83;
   $84 = ($83|0)==(0|0);
   if ($84) {
    label = 24;
    break;
   }
   $85 = $buf;
   $86 = $len;
   $87 = $3;
   $88 = (_hio_read($85,1,$86,$87)|0);
   $89 = $len;
   $90 = ($88|0)!=($89|0);
   if ($90) {
    label = 23;
    break;
   }
   $91 = $smpbuf;
   $92 = $buf;
   $93 = $len;
   $94 = $xxs;
   $95 = ((($94)) + 32|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (_unpack_sample16($91,$92,$93,$96)|0);
   $98 = ($97|0)<(0);
   if ($98) {
    label = 23;
    break;
   }
   $99 = $buf;
   _free($99);
  } else if ((($35|0) == 1)) {
   $39 = $3;
   $40 = (_hio_read32l($39)|0);
   $len = $40;
   $41 = $xxs;
   $42 = ((($41)) + 44|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 & 1;
   $45 = ($44|0)!=(0);
   if ($45) {
    label = 24;
    break;
   }
   $46 = $len;
   $47 = ($46|0)<=(0);
   $48 = $len;
   $49 = ($48|0)>(524288);
   $or$cond = $47 | $49;
   if ($or$cond) {
    label = 24;
    break;
   }
   $50 = $len;
   $51 = (($50) + 4)|0;
   $52 = (_malloc($51)|0);
   $buf = $52;
   $53 = ($52|0)==(0|0);
   if ($53) {
    label = 24;
    break;
   }
   $54 = $buf;
   $55 = $len;
   $56 = $3;
   $57 = (_hio_read($54,1,$55,$56)|0);
   $58 = $len;
   $59 = ($57|0)!=($58|0);
   if ($59) {
    label = 23;
    break;
   }
   $60 = $smpbuf;
   $61 = $buf;
   $62 = $len;
   $63 = $xxs;
   $64 = ((($63)) + 32|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_unpack_sample8($60,$61,$62,$65)|0);
   $67 = ($66|0)<(0);
   if ($67) {
    label = 23;
    break;
   }
   $68 = $buf;
   _free($68);
  } else {
   label = 24;
   break;
  }
  $100 = $1;
  $101 = $xxs;
  $102 = $smpbuf;
  $103 = (_load_sample($100,0,16,$101,$102)|0);
  $104 = ($103|0)<(0);
  if ($104) {
   label = 24;
   break;
  }
  $105 = $smpbuf;
  _free($105);
  $106 = $i;
  $107 = (($106) + 1)|0;
  $i = $107;
 }
 if ((label|0) == 22) {
  $0 = 0;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 else if ((label|0) == 23) {
  $108 = $buf;
  _free($108);
  label = 24;
 }
 if ((label|0) == 24) {
  $109 = $smpbuf;
  _free($109);
 }
 $0 = -1;
 $110 = $0;
 STACKTOP = sp;return ($110|0);
}
function _get_chunk_ve($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $data;
 $10 = ((($9)) + 28|0);
 HEAP32[$10>>2] = $8;
 $11 = ($8|0)==(0);
 if ($11) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $data;
 $13 = ((($12)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc($14,33)|0);
 $16 = $data;
 $17 = ((($16)) + 40|0);
 HEAP32[$17>>2] = $15;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $data;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = $data;
  $27 = ((($26)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*33)|0)|0);
  HEAP8[$29>>0] = $24;
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($30*33)|0)|0);
  $35 = ((($34)) + 1|0);
  $36 = $3;
  (_hio_read($35,1,30,$36)|0);
  $37 = $3;
  $38 = (_hio_read8($37)|0);
  $39 = $i;
  $40 = $data;
  $41 = ((($40)) + 40|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*33)|0)|0);
  $44 = ((($43)) + 31|0);
  HEAP8[$44>>0] = $38;
  $45 = $3;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = $data;
  $49 = ((($48)) + 40|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*33)|0)|0);
  $52 = ((($51)) + 32|0);
  HEAP8[$52>>0] = $46;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_chunk_pe($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $data;
 $10 = ((($9)) + 32|0);
 HEAP32[$10>>2] = $8;
 $11 = ($8|0)==(0);
 if ($11) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $data;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc($14,33)|0);
 $16 = $data;
 $17 = ((($16)) + 44|0);
 HEAP32[$17>>2] = $15;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $data;
  $20 = ((($19)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = $data;
  $27 = ((($26)) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*33)|0)|0);
  HEAP8[$29>>0] = $24;
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($30*33)|0)|0);
  $35 = ((($34)) + 1|0);
  $36 = $3;
  (_hio_read($35,1,30,$36)|0);
  $37 = $3;
  $38 = (_hio_read8($37)|0);
  $39 = $i;
  $40 = $data;
  $41 = ((($40)) + 44|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*33)|0)|0);
  $44 = ((($43)) + 31|0);
  HEAP8[$44>>0] = $38;
  $45 = $3;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = $data;
  $49 = ((($48)) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*33)|0)|0);
  $52 = ((($51)) + 32|0);
  HEAP8[$52>>0] = $46;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_chunk_fe($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $data;
 $10 = ((($9)) + 36|0);
 HEAP32[$10>>2] = $8;
 $11 = ($8|0)==(0);
 if ($11) {
  $0 = 0;
  $55 = $0;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $data;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc($14,33)|0);
 $16 = $data;
 $17 = ((($16)) + 48|0);
 HEAP32[$17>>2] = $15;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $data;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = $data;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*33)|0)|0);
  HEAP8[$29>>0] = $24;
  $30 = $i;
  $31 = $data;
  $32 = ((($31)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($30*33)|0)|0);
  $35 = ((($34)) + 1|0);
  $36 = $3;
  (_hio_read($35,1,30,$36)|0);
  $37 = $3;
  $38 = (_hio_read8($37)|0);
  $39 = $i;
  $40 = $data;
  $41 = ((($40)) + 48|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*33)|0)|0);
  $44 = ((($43)) + 31|0);
  HEAP8[$44>>0] = $38;
  $45 = $3;
  $46 = (_hio_read8($45)|0);
  $47 = $i;
  $48 = $data;
  $49 = ((($48)) + 48|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*33)|0)|0);
  $52 = ((($51)) + 32|0);
  HEAP8[$52>>0] = $46;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $0 = 0;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_chunk_ii($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $i = 0, $j = 0, $k = 0, $last_map = 0, $map = 0, $mod = 0, $sub = 0, $x = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 64|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = (_instrument_init($12)|0);
 $14 = ($13|0)<(0);
 if ($14) {
  $0 = -1;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 140|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   label = 31;
   break;
  }
  $20 = $i;
  $21 = $mod;
  $22 = ((($21)) + 176|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*764)|0)|0);
  $xxi = $24;
  $25 = $3;
  $26 = (_hio_read8($25)|0);
  $27 = $26&255;
  $28 = $i;
  $29 = $data;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($28<<2)|0);
  HEAP32[$31>>2] = $27;
  $32 = $3;
  $33 = (_hio_read8($32)|0);
  $34 = $33&255;
  $35 = $xxi;
  $36 = ((($35)) + 36|0);
  HEAP32[$36>>2] = $34;
  $37 = $3;
  (_hio_read($buf,1,32,$37)|0);
  $38 = ((($buf)) + 32|0);
  HEAP8[$38>>0] = 0;
  (_adjust_string($buf)|0);
  $39 = $xxi;
  (_strncpy(($39|0),($buf|0),32)|0);
  $40 = $mod;
  $41 = $i;
  $42 = $xxi;
  $43 = ((($42)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_subinstrument_alloc($40,$41,$44)|0);
  $46 = ($45|0)<(0);
  if ($46) {
   label = 6;
   break;
  }
  $j = 0;
  while(1) {
   $47 = $j;
   $48 = ($47|0)<(121);
   if (!($48)) {
    break;
   }
   $49 = $j;
   $50 = $xxi;
   $51 = ((($50)) + 512|0);
   $52 = (($51) + ($49<<1)|0);
   HEAP8[$52>>0] = -1;
   $53 = $j;
   $54 = (($53) + 1)|0;
   $j = $54;
  }
  $j = 0;
  $last_map = 0;
  while(1) {
   $55 = $j;
   $56 = $i;
   $57 = $mod;
   $58 = ((($57)) + 176|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + (($56*764)|0)|0);
   $61 = ((($60)) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($55|0)<($62|0);
   if (!($63)) {
    break;
   }
   $64 = $j;
   $65 = $xxi;
   $66 = ((($65)) + 756|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($64<<6)|0);
   $sub = $68;
   $69 = $3;
   $70 = (_hio_read8($69)|0);
   $71 = $70&255;
   $72 = $sub;
   $73 = ((($72)) + 40|0);
   HEAP32[$73>>2] = $71;
   $74 = $3;
   $75 = (_hio_read8($74)|0);
   $76 = $75&255;
   $77 = (($76) + 12)|0;
   $map = $77;
   $78 = $3;
   $79 = (_hio_read8($78)|0);
   $80 = $79&255;
   $81 = $sub;
   HEAP32[$81>>2] = $80;
   $82 = $last_map;
   $k = $82;
   while(1) {
    $83 = $k;
    $84 = $map;
    $85 = ($83|0)<=($84|0);
    if (!($85)) {
     break;
    }
    $86 = $k;
    $87 = ($86|0)<(121);
    if ($87) {
     $88 = $j;
     $89 = $88&255;
     $90 = $k;
     $91 = $xxi;
     $92 = ((($91)) + 512|0);
     $93 = (($92) + ($90<<1)|0);
     HEAP8[$93>>0] = $89;
    }
    $94 = $k;
    $95 = (($94) + 1)|0;
    $k = $95;
   }
   $96 = $map;
   $97 = (($96) + 1)|0;
   $last_map = $97;
   $98 = $3;
   $99 = (_hio_read8($98)|0);
   $100 = $99&255;
   $x = $100;
   $101 = $j;
   $102 = ($101|0)==(0);
   if ($102) {
    $103 = $x;
    $104 = $103 & 128;
    $105 = ($104|0)!=(0);
    $106 = $x;
    $107 = $106 & 63;
    $108 = $105 ? $107 : -1;
    $109 = $i;
    $110 = $data;
    $111 = ((($110)) + 8|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($109<<2)|0);
    HEAP32[$113>>2] = $108;
   }
   $114 = $x;
   $115 = $114 ^ -1;
   $116 = $115 & 64;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $sub;
    HEAP32[$118>>2] = 255;
   }
   $119 = $3;
   $120 = (_hio_read8($119)|0);
   $121 = $120&255;
   $122 = $121 << 1;
   $123 = $j;
   $124 = $i;
   $125 = $mod;
   $126 = ((($125)) + 176|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + (($124*764)|0)|0);
   $129 = ((($128)) + 756|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($123<<6)|0);
   $132 = ((($131)) + 8|0);
   HEAP32[$132>>2] = $122;
   $133 = $3;
   $134 = (_hio_read8($133)|0);
   $135 = $134&255;
   $x = $135;
   $136 = $j;
   $137 = ($136|0)==(0);
   if ($137) {
    $138 = $x;
    $139 = $138 & 128;
    $140 = ($139|0)!=(0);
    $141 = $x;
    $142 = $141 & 63;
    $143 = $140 ? $142 : -1;
    $144 = $i;
    $145 = $data;
    $146 = ((($145)) + 12|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + ($144<<2)|0);
    HEAP32[$148>>2] = $143;
   }
   $149 = $x;
   $150 = $149 ^ -1;
   $151 = $150 & 64;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $sub;
    $154 = ((($153)) + 8|0);
    HEAP32[$154>>2] = 128;
   }
   $155 = $3;
   $156 = (_hio_read16l($155)|0);
   $157 = $156&65535;
   $x = $157;
   $158 = $j;
   $159 = ($158|0)==(0);
   if ($159) {
    $160 = $x;
    $161 = $xxi;
    $162 = ((($161)) + 40|0);
    HEAP32[$162>>2] = $160;
   }
   $163 = $3;
   $164 = (_hio_read8($163)|0);
   $165 = $164&255;
   $166 = $sub;
   $167 = ((($166)) + 28|0);
   HEAP32[$167>>2] = $165;
   $168 = $3;
   $169 = (_hio_read8($168)|0);
   $170 = $169&255;
   $171 = $170 >> 1;
   $172 = $sub;
   $173 = ((($172)) + 24|0);
   HEAP32[$173>>2] = $171;
   $174 = $3;
   $175 = (_hio_read8($174)|0);
   $176 = $175&255;
   $177 = $sub;
   $178 = ((($177)) + 32|0);
   HEAP32[$178>>2] = $176;
   $179 = $3;
   $180 = (_hio_read8($179)|0);
   $181 = $180&255;
   $182 = $sub;
   $183 = ((($182)) + 20|0);
   HEAP32[$183>>2] = $181;
   $184 = $3;
   (_hio_read8($184)|0);
   $185 = $3;
   $186 = (_hio_read8($185)|0);
   $187 = $186&255;
   $x = $187;
   $188 = $j;
   $189 = ($188|0)==(0);
   if ($189) {
    $190 = $x;
    $191 = $190 & 128;
    $192 = ($191|0)!=(0);
    $193 = $x;
    $194 = $193 & 63;
    $195 = $192 ? $194 : -1;
    $196 = $i;
    $197 = $data;
    $198 = ((($197)) + 16|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = (($199) + ($196<<2)|0);
    HEAP32[$200>>2] = $195;
   }
   $201 = $j;
   $202 = (($201) + 1)|0;
   $j = $202;
  }
  $203 = $i;
  $204 = (($203) + 1)|0;
  $i = $204;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 else if ((label|0) == 31) {
  $0 = 0;
  $205 = $0;
  STACKTOP = sp;return ($205|0);
 }
 return (0)|0;
}
function _get_chunk_pa($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $chn = 0, $i = 0, $j = 0, $mod = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = ((($6)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $10 = $3;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $13 = $mod;
 $14 = ((($13)) + 128|0);
 HEAP32[$14>>2] = $12;
 $15 = $mod;
 $16 = ((($15)) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_calloc(4,$17)|0);
 $19 = $mod;
 $20 = ((($19)) + 168|0);
 HEAP32[$20>>2] = $18;
 $21 = ($18|0)==(0|0);
 if ($21) {
  $0 = -1;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $mod;
  $24 = ((($23)) + 128|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)<($25|0);
  if (!($26)) {
   label = 15;
   break;
  }
  $27 = $mod;
  $28 = $i;
  $29 = (_pattern_alloc($27,$28)|0);
  $30 = ($29|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $31 = $3;
  $32 = (_hio_read8($31)|0);
  $33 = $32&255;
  $chn = $33;
  $34 = $3;
  $35 = (_hio_read8($34)|0);
  $36 = $35&255;
  $37 = (($36) + 1)|0;
  $38 = $i;
  $39 = $mod;
  $40 = ((($39)) + 168|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$43>>2] = $37;
  $44 = $3;
  (_hio_seek($44,16,1)|0);
  $j = 0;
  while(1) {
   $45 = $j;
   $46 = $chn;
   $47 = ($45|0)<($46|0);
   if (!($47)) {
    break;
   }
   $48 = $3;
   $49 = (_hio_read16l($48)|0);
   $50 = $49&65535;
   $x = $50;
   $51 = $j;
   $52 = $mod;
   $53 = ((($52)) + 136|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($51|0)<($54|0);
   if ($55) {
    $56 = $x;
    $57 = $j;
    $58 = $i;
    $59 = $mod;
    $60 = ((($59)) + 168|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($58<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 4|0);
    $65 = (($64) + ($57<<2)|0);
    HEAP32[$65>>2] = $56;
   }
   $66 = $j;
   $67 = (($66) + 1)|0;
   $j = $67;
  }
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function _get_chunk_is($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $i = 0, $mod = 0, $x = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = $mod;
 $11 = ((($10)) + 144|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_calloc(52,$14)|0);
 $16 = $mod;
 $17 = ((($16)) + 180|0);
 HEAP32[$17>>2] = $15;
 $18 = ($15|0)==(0|0);
 if ($18) {
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $19 = $mod;
 $20 = ((($19)) + 144|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_calloc(4,$21)|0);
 $23 = $data;
 $24 = ((($23)) + 24|0);
 HEAP32[$24>>2] = $22;
 $25 = $data;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 144|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 180|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($34*52)|0)|0);
  $xxs = $38;
  $39 = $3;
  $40 = (_hio_read8($39)|0);
  $41 = $40&255;
  $42 = $i;
  $43 = $data;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<2)|0);
  HEAP32[$46>>2] = $41;
  $47 = $3;
  (_hio_read($buf,1,32,$47)|0);
  $48 = ((($buf)) + 32|0);
  HEAP8[$48>>0] = 0;
  (_adjust_string($buf)|0);
  $49 = $xxs;
  (_strncpy(($49|0),($buf|0),32)|0);
  $50 = $3;
  (_hio_seek($50,8,1)|0);
  $51 = $3;
  $52 = (_hio_read32l($51)|0);
  $53 = $i;
  $54 = $data;
  $55 = ((($54)) + 20|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + ($53<<2)|0);
  HEAP32[$57>>2] = $52;
  $58 = $3;
  $59 = (_hio_read32l($58)|0);
  $60 = $xxs;
  $61 = ((($60)) + 32|0);
  HEAP32[$61>>2] = $59;
  $62 = $3;
  $63 = (_hio_read32l($62)|0);
  $64 = $xxs;
  $65 = ((($64)) + 36|0);
  HEAP32[$65>>2] = $63;
  $66 = $3;
  $67 = (_hio_read32l($66)|0);
  $68 = $xxs;
  $69 = ((($68)) + 40|0);
  HEAP32[$69>>2] = $67;
  $70 = $xxs;
  $71 = ((($70)) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)>(0);
  $74 = $73 ? 2 : 0;
  $75 = $xxs;
  $76 = ((($75)) + 44|0);
  HEAP32[$76>>2] = $74;
  $77 = $xxs;
  $78 = ((($77)) + 36|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $xxs;
  $81 = ((($80)) + 40|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($79) + ($82))|0;
  $84 = $xxs;
  $85 = ((($84)) + 40|0);
  HEAP32[$85>>2] = $83;
  $86 = $3;
  (_hio_read8($86)|0);
  $87 = $3;
  $88 = (_hio_read8($87)|0);
  $x = $88;
  $89 = $x;
  $90 = $89&255;
  $91 = $90 & 1;
  $92 = ($91|0)!=(0);
  if ($92) {
   $93 = $xxs;
   $94 = ((($93)) + 44|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 | 1;
   HEAP32[$94>>2] = $96;
   $97 = $xxs;
   $98 = ((($97)) + 32|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 >> 1;
   HEAP32[$98>>2] = $100;
   $101 = $xxs;
   $102 = ((($101)) + 36|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $103 >> 1;
   HEAP32[$102>>2] = $104;
   $105 = $xxs;
   $106 = ((($105)) + 40|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107 >> 1;
   HEAP32[$106>>2] = $108;
  }
  $109 = $x;
  $110 = $109&255;
  $111 = $110 & 2;
  $112 = ($111|0)!=(0);
  $113 = $112 ? 4 : 0;
  $114 = $xxs;
  $115 = ((($114)) + 44|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 | $113;
  HEAP32[$115>>2] = $117;
  $118 = $x;
  $119 = $118&255;
  $120 = $119 & 12;
  $121 = $120 >> 2;
  $122 = $i;
  $123 = $data;
  $124 = ((($123)) + 24|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + ($122<<2)|0);
  HEAP32[$126>>2] = $121;
  $127 = $i;
  $128 = (($127) + 1)|0;
  $i = $128;
 }
 $0 = 0;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _get_chunk_p0($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $j = 0, $mod = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = ((($6)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $10 = $3;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $13 = $mod;
 $14 = ((($13)) + 128|0);
 HEAP32[$14>>2] = $12;
 $15 = $mod;
 $16 = ((($15)) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_calloc(4,$17)|0);
 $19 = $mod;
 $20 = ((($19)) + 168|0);
 HEAP32[$20>>2] = $18;
 $21 = ($18|0)==(0|0);
 if ($21) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $mod;
  $24 = ((($23)) + 128|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)<($25|0);
  if (!($26)) {
   label = 15;
   break;
  }
  $27 = $mod;
  $28 = $i;
  $29 = (_pattern_alloc($27,$28)|0);
  $30 = ($29|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $31 = $i;
  $32 = $mod;
  $33 = ((($32)) + 168|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$36>>2] = 64;
  $j = 0;
  while(1) {
   $37 = $j;
   $38 = ($37|0)<(32);
   if (!($38)) {
    break;
   }
   $39 = $3;
   $40 = (_hio_read16l($39)|0);
   $x = $40;
   $41 = $j;
   $42 = $mod;
   $43 = ((($42)) + 136|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)<($44|0);
   if ($45) {
    $46 = $x;
    $47 = $46&65535;
    $48 = $j;
    $49 = $i;
    $50 = $mod;
    $51 = ((($50)) + 168|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($49<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 4|0);
    $56 = (($55) + ($48<<2)|0);
    HEAP32[$56>>2] = $47;
   }
   $57 = $j;
   $58 = (($57) + 1)|0;
   $j = $58;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _get_chunk_i0($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0;
 var $i = 0, $mod = 0, $sub = 0, $x = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 48|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = $mod;
 $11 = ((($10)) + 144|0);
 HEAP32[$11>>2] = $9;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = $9;
 $14 = $mod;
 $15 = (_instrument_init($14)|0);
 $16 = ($15|0)<(0);
 if ($16) {
  $0 = -1;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $17 = $mod;
 $18 = ((($17)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_calloc(4,$19)|0);
 $21 = $data;
 $22 = ((($21)) + 24|0);
 HEAP32[$22>>2] = $20;
 $23 = ($20|0)==(0|0);
 if ($23) {
  $0 = -1;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $mod;
  $26 = ((($25)) + 140|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)<($27|0);
  if (!($28)) {
   label = 12;
   break;
  }
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 180|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + (($29*52)|0)|0);
  $xxs = $33;
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 176|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($34*764)|0)|0);
  $39 = ((($38)) + 36|0);
  HEAP32[$39>>2] = 1;
  $40 = $mod;
  $41 = $i;
  $42 = (_subinstrument_alloc($40,$41,1)|0);
  $43 = ($42|0)<(0);
  if ($43) {
   label = 8;
   break;
  }
  $44 = $i;
  $45 = $mod;
  $46 = ((($45)) + 176|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + (($44*764)|0)|0);
  $49 = ((($48)) + 756|0);
  $50 = HEAP32[$49>>2]|0;
  $sub = $50;
  $51 = $3;
  $52 = (_hio_read8($51)|0);
  $53 = $52&255;
  $54 = $i;
  $55 = $data;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54<<2)|0);
  HEAP32[$58>>2] = $53;
  $59 = $i;
  $60 = $data;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($59<<2)|0);
  HEAP32[$62>>2] = $53;
  $63 = $sub;
  $64 = ((($63)) + 40|0);
  HEAP32[$64>>2] = $53;
  $65 = $3;
  (_hio_read($buf,1,32,$65)|0);
  $66 = ((($buf)) + 32|0);
  HEAP8[$66>>0] = 0;
  (_adjust_string($buf)|0);
  $67 = $3;
  (_hio_seek($67,8,1)|0);
  $68 = $i;
  $69 = $mod;
  $70 = ((($69)) + 176|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($68*764)|0)|0);
  (_strncpy(($72|0),($buf|0),32)|0);
  $73 = $3;
  $74 = (_hio_read16l($73)|0);
  $75 = $74&65535;
  $76 = $i;
  $77 = $data;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + ($76<<2)|0);
  HEAP32[$80>>2] = $75;
  $81 = $3;
  $82 = (_hio_read32l($81)|0);
  $83 = $xxs;
  $84 = ((($83)) + 32|0);
  HEAP32[$84>>2] = $82;
  $85 = $3;
  $86 = (_hio_read32l($85)|0);
  $87 = $xxs;
  $88 = ((($87)) + 36|0);
  HEAP32[$88>>2] = $86;
  $89 = $3;
  $90 = (_hio_read32l($89)|0);
  $91 = $xxs;
  $92 = ((($91)) + 40|0);
  HEAP32[$92>>2] = $90;
  $93 = $xxs;
  $94 = ((($93)) + 40|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)>(0);
  $97 = $96 ? 2 : 0;
  $98 = $xxs;
  $99 = ((($98)) + 44|0);
  HEAP32[$99>>2] = $97;
  $100 = $xxs;
  $101 = ((($100)) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $xxs;
  $104 = ((($103)) + 40|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($102) + ($105))|0;
  $107 = $xxs;
  $108 = ((($107)) + 40|0);
  HEAP32[$108>>2] = $106;
  $109 = $3;
  $110 = (_hio_read8($109)|0);
  $111 = $110&255;
  $112 = $sub;
  HEAP32[$112>>2] = $111;
  $113 = $sub;
  $114 = ((($113)) + 8|0);
  HEAP32[$114>>2] = 128;
  $115 = $3;
  $116 = (_hio_read8($115)|0);
  $x = $116;
  $117 = $x;
  $118 = $117&255;
  $119 = $118 & 1;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $xxs;
   $122 = ((($121)) + 44|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 | 1;
   HEAP32[$122>>2] = $124;
   $125 = $xxs;
   $126 = ((($125)) + 32|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 >> 1;
   HEAP32[$126>>2] = $128;
   $129 = $xxs;
   $130 = ((($129)) + 36|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 >> 1;
   HEAP32[$130>>2] = $132;
   $133 = $xxs;
   $134 = ((($133)) + 40|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135 >> 1;
   HEAP32[$134>>2] = $136;
  }
  $137 = $x;
  $138 = $137&255;
  $139 = $138 & 2;
  $140 = ($139|0)!=(0);
  $141 = $140 ? 4 : 0;
  $142 = $xxs;
  $143 = ((($142)) + 44|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 | $141;
  HEAP32[$143>>2] = $145;
  $146 = $x;
  $147 = $146&255;
  $148 = $147 & 12;
  $149 = $148 >> 2;
  $150 = $i;
  $151 = $data;
  $152 = ((($151)) + 24|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($150<<2)|0);
  HEAP32[$154>>2] = $149;
  $155 = $i;
  $156 = (($155) + 1)|0;
  $i = $156;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $157 = $0;
  STACKTOP = sp;return ($157|0);
 }
 return (0)|0;
}
function _fix_env($i,$ei,$env,$index,$envnum) {
 $i = $i|0;
 $ei = $ei|0;
 $env = $env|0;
 $index = $index|0;
 $envnum = $envnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $lastx = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $ei;
 $2 = $env;
 $3 = $index;
 $4 = $envnum;
 $5 = $0;
 $6 = $3;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 HEAP32[$10>>2] = 1;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 16;
 $j = 0;
 while(1) {
  $13 = $j;
  $14 = $4;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   label = 11;
   break;
  }
  $16 = $0;
  $17 = $3;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $j;
  $21 = $2;
  $22 = (($21) + (($20*33)|0)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($19|0)==($24|0);
  $26 = $j;
  if ($25) {
   break;
  }
  $130 = (($26) + 1)|0;
  $j = $130;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
 $27 = $2;
 $28 = (($27) + (($26*33)|0)|0);
 $29 = ((($28)) + 31|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 & 16;
 $33 = ($32|0)!=(0);
 $34 = $33 ? 2 : 0;
 $35 = $1;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 | $34;
 HEAP32[$35>>2] = $37;
 $38 = $j;
 $39 = $2;
 $40 = (($39) + (($38*33)|0)|0);
 $41 = ((($40)) + 31|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 & 32;
 $45 = ($44|0)!=(0);
 $46 = $45 ? 4 : 0;
 $47 = $1;
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 | $46;
 HEAP32[$47>>2] = $49;
 $50 = $j;
 $51 = $2;
 $52 = (($51) + (($50*33)|0)|0);
 $53 = ((($52)) + 31|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 15;
 $57 = $1;
 $58 = ((($57)) + 12|0);
 HEAP32[$58>>2] = $56;
 $59 = $j;
 $60 = $2;
 $61 = (($60) + (($59*33)|0)|0);
 $62 = ((($61)) + 32|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $64 & 15;
 $66 = $1;
 $67 = ((($66)) + 20|0);
 HEAP32[$67>>2] = $65;
 $68 = $j;
 $69 = $2;
 $70 = (($69) + (($68*33)|0)|0);
 $71 = ((($70)) + 32|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 & 240;
 $75 = $1;
 $76 = ((($75)) + 24|0);
 HEAP32[$76>>2] = $74;
 $lastx = -1;
 $k = 0;
 while(1) {
  $77 = $k;
  $78 = $1;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($77|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = $k;
  $83 = $82<<1;
  $84 = $j;
  $85 = $2;
  $86 = (($85) + (($84*33)|0)|0);
  $87 = ((($86)) + 1|0);
  $88 = (($87) + ($83)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $x = $90;
  $91 = $x;
  $92 = ($91|0)==(0);
  if ($92) {
   break;
  }
  $93 = $lastx;
  $94 = $x;
  $95 = (($93) + ($94))|0;
  $96 = $95&65535;
  $97 = $k;
  $98 = $97<<1;
  $99 = $1;
  $100 = ((($99)) + 28|0);
  $101 = (($100) + ($98<<1)|0);
  HEAP16[$101>>1] = $96;
  $102 = $k;
  $103 = $102<<1;
  $104 = (($103) + 1)|0;
  $105 = $j;
  $106 = $2;
  $107 = (($106) + (($105*33)|0)|0);
  $108 = ((($107)) + 1|0);
  $109 = (($108) + ($104)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = $k;
  $113 = $112<<1;
  $114 = (($113) + 1)|0;
  $115 = $1;
  $116 = ((($115)) + 28|0);
  $117 = (($116) + ($114<<1)|0);
  HEAP16[$117>>1] = $111;
  $118 = $k;
  $119 = $118<<1;
  $120 = $1;
  $121 = ((($120)) + 28|0);
  $122 = (($121) + ($119<<1)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123 << 16 >> 16;
  $lastx = $124;
  $125 = $k;
  $126 = (($125) + 1)|0;
  $k = $126;
 }
 $127 = $k;
 $128 = $1;
 $129 = ((($128)) + 4|0);
 HEAP32[$129>>2] = $127;
 STACKTOP = sp;return;
}
function _unpack_sample8($t,$f,$len,$l) {
 $t = $t|0;
 $f = $f|0;
 $len = $len|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bits = 0, $d = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $bits = sp;
 $1 = $t;
 HEAP32[$2>>2] = $f;
 HEAP32[$3>>2] = $len;
 $4 = $l;
 (_get_bits158(0,$2,$3,$bits)|0);
 $d = 0;
 $b = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 15;
   break;
  }
  $8 = HEAP32[$3>>2]|0;
  $9 = ($8|0)<(0);
  if ($9) {
   label = 4;
   break;
  }
  $10 = (_get_bits158(1,$2,$3,$bits)|0);
  $s = $10;
  $11 = (_get_bits158(1,$2,$3,$bits)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = (_get_bits158(3,$2,$3,$bits)|0);
   $14 = $13&255;
   $b = $14;
  } else {
   $b = 8;
   while(1) {
    $15 = HEAP32[$3>>2]|0;
    $16 = ($15|0)>=(0);
    if (!($16)) {
     break;
    }
    $17 = (_get_bits158(1,$2,$3,$bits)|0);
    $18 = ($17|0)==(0);
    if (!($18)) {
     break;
    }
    $19 = $b;
    $20 = $19&255;
    $21 = (($20) + 16)|0;
    $22 = $21&255;
    $b = $22;
   }
   $23 = (_get_bits158(4,$2,$3,$bits)|0);
   $24 = $b;
   $25 = $24&255;
   $26 = (($25) + ($23))|0;
   $27 = $26&255;
   $b = $27;
  }
  $28 = $s;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = $b;
   $31 = $30&255;
   $32 = $31 ^ 255;
   $33 = $32&255;
   $b = $33;
  }
  $34 = $b;
  $35 = $34&255;
  $36 = $d;
  $37 = $36&255;
  $38 = (($37) + ($35))|0;
  $39 = $38&255;
  $d = $39;
  $40 = $d;
  $41 = $1;
  $42 = ((($41)) + 1|0);
  $1 = $42;
  HEAP8[$41>>0] = $40;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _unpack_sample16($t,$f,$len,$l) {
 $t = $t|0;
 $f = $f|0;
 $len = $len|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $bits = 0, $d = 0, $i = 0, $lo = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $bits = sp;
 $1 = $t;
 HEAP32[$2>>2] = $f;
 HEAP32[$3>>2] = $len;
 $4 = $l;
 (_get_bits158(0,$2,$3,$bits)|0);
 $d = 0;
 $b = 0;
 $lo = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   label = 15;
   break;
  }
  $8 = HEAP32[$3>>2]|0;
  $9 = ($8|0)<(0);
  if ($9) {
   label = 4;
   break;
  }
  $10 = (_get_bits158(8,$2,$3,$bits)|0);
  $lo = $10;
  $11 = (_get_bits158(1,$2,$3,$bits)|0);
  $s = $11;
  $12 = (_get_bits158(1,$2,$3,$bits)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = (_get_bits158(3,$2,$3,$bits)|0);
   $15 = $14&255;
   $b = $15;
  } else {
   $b = 8;
   while(1) {
    $16 = HEAP32[$3>>2]|0;
    $17 = ($16|0)>=(0);
    if (!($17)) {
     break;
    }
    $18 = (_get_bits158(1,$2,$3,$bits)|0);
    $19 = ($18|0)==(0);
    if (!($19)) {
     break;
    }
    $20 = $b;
    $21 = $20&255;
    $22 = (($21) + 16)|0;
    $23 = $22&255;
    $b = $23;
   }
   $24 = (_get_bits158(4,$2,$3,$bits)|0);
   $25 = $b;
   $26 = $25&255;
   $27 = (($26) + ($24))|0;
   $28 = $27&255;
   $b = $28;
  }
  $29 = $s;
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $b;
   $32 = $31&255;
   $33 = $32 ^ 255;
   $34 = $33&255;
   $b = $34;
  }
  $35 = $b;
  $36 = $35&255;
  $37 = $d;
  $38 = $37&255;
  $39 = (($38) + ($36))|0;
  $40 = $39&255;
  $d = $40;
  $41 = $lo;
  $42 = $41&255;
  $43 = $1;
  $44 = ((($43)) + 1|0);
  $1 = $44;
  HEAP8[$43>>0] = $42;
  $45 = $d;
  $46 = $1;
  $47 = ((($46)) + 1|0);
  $1 = $47;
  HEAP8[$46>>0] = $45;
  $48 = $i;
  $49 = (($48) + 1)|0;
  $i = $49;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _get_bits158($i,$buf,$len,$bits) {
 $i = $i|0;
 $buf = $buf|0;
 $len = $len|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $i;
 $2 = $buf;
 $3 = $len;
 $4 = $bits;
 $5 = $1;
 $6 = $5 << 24 >> 24;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = (_readmem32l($9)|0);
  $11 = $4;
  HEAP32[$11>>2] = $10;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 4|0);
  HEAP32[$12>>2] = $14;
  $15 = $3;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - 4)|0;
  HEAP32[$15>>2] = $17;
  $18 = $4;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = 32;
 }
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = $22 << 24 >> 24;
 $24 = 1 << $23;
 $25 = (($24) - 1)|0;
 $26 = $21 & $25;
 $x = $26;
 $27 = $1;
 $28 = $27 << 24 >> 24;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 >>> $28;
 HEAP32[$29>>2] = $31;
 $32 = $1;
 $33 = $32 << 24 >> 24;
 $34 = $4;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) - ($33))|0;
 HEAP32[$35>>2] = $37;
 $38 = ($37>>>0)<=(24);
 do {
  if ($38) {
   $39 = $3;
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)<=(0);
   if (!($41)) {
    $43 = $2;
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($44)) + 1|0);
    HEAP32[$43>>2] = $45;
    $46 = (_readmem32l($44)|0);
    $47 = $4;
    $48 = ((($47)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $46 << $49;
    $51 = $4;
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 | $50;
    HEAP32[$51>>2] = $53;
    $54 = $4;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 8)|0;
    HEAP32[$55>>2] = $57;
    $58 = $3;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + -1)|0;
    HEAP32[$58>>2] = $60;
    break;
   }
   $42 = $x;
   $0 = $42;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 $61 = $x;
 $0 = $61;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _xlat_fx1($t,$p) {
 $t = $t|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $p;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 if ((($4|0) == 6)) {
  $7 = $1;
  HEAP8[$7>>0] = 0;
  $8 = $0;
  HEAP8[$8>>0] = 0;
 } else if ((($4|0) == 5)) {
  $6 = $0;
  HEAP8[$6>>0] = 0;
 } else if ((($4|0) == 0)) {
  $5 = $1;
  HEAP8[$5>>0] = 0;
 }
 $9 = $0;
 $10 = $1;
 _xlat_fx_common($9,$10);
 STACKTOP = sp;return;
}
function _xlat_fx2($t,$p) {
 $t = $t|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $p;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 4:  {
  $9 = $0;
  HEAP8[$9>>0] = 7;
  break;
 }
 case 0:  {
  $5 = $1;
  HEAP8[$5>>0] = 0;
  break;
 }
 case 2:  {
  $7 = $0;
  HEAP8[$7>>0] = -95;
  break;
 }
 case 3:  {
  $8 = $0;
  HEAP8[$8>>0] = 27;
  break;
 }
 case 6:  {
  $11 = $1;
  HEAP8[$11>>0] = 0;
  $12 = $0;
  HEAP8[$12>>0] = 0;
  break;
 }
 case 5:  {
  $10 = $0;
  HEAP8[$10>>0] = 29;
  break;
 }
 case 1:  {
  $6 = $0;
  HEAP8[$6>>0] = -96;
  break;
 }
 default: {
 }
 }
 $13 = $0;
 $14 = $1;
 _xlat_fx_common($13,$14);
 STACKTOP = sp;return;
}
function _xlat_fx_common($t,$p) {
 $t = $t|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = $p;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 L1: do {
  switch ($4|0) {
  case 15:  {
   $27 = $0;
   HEAP8[$27>>0] = -93;
   break;
  }
  case 7:  {
   $5 = $0;
   HEAP8[$5>>0] = -85;
   break;
  }
  case 14:  {
   $8 = $1;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = $10 & 240;
   $12 = $11 >> 4;
   switch ($12|0) {
   case 1:  {
    $15 = $0;
    HEAP8[$15>>0] = 25;
    $16 = $1;
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = $18 << 4;
    $20 = $19&255;
    HEAP8[$16>>0] = $20;
    break L1;
    break;
   }
   case 2:  {
    $21 = $0;
    HEAP8[$21>>0] = 25;
    $22 = $1;
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 & 15;
    $26 = $25&255;
    HEAP8[$22>>0] = $26;
    break L1;
    break;
   }
   case 8: case 3: case 0:  {
    $13 = $1;
    HEAP8[$13>>0] = 0;
    $14 = $0;
    HEAP8[$14>>0] = 0;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
   break;
  }
  case 10: case 9: case 8:  {
   $6 = $1;
   HEAP8[$6>>0] = 0;
   $7 = $0;
   HEAP8[$7>>0] = 0;
   break;
  }
  default: {
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _it_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1229803597);
 if ($6) {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,26);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _it_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $b = 0, $buf = 0, $c = 0, $cvt = 0, $cwtv = 0, $dca2nna = 0, $dummy = 0, $env = 0, $event = 0, $i = 0, $i1h = 0;
 var $i2h = 0, $ifh = 0, $inst_map = 0, $inst_rmap = 0, $ish = 0, $j = 0, $k = 0, $last_fxp = 0, $lastevent = 0, $mask = 0, $max_ch = 0, $mod = 0, $new_fx = 0, $or$cond = 0, $or$cond3 = 0, $pat_len = 0, $pp_ins = 0, $pp_pat = 0, $pp_smp = 0, $r = 0;
 var $ret = 0, $sample_mode = 0, $sub = 0, $sub1 = 0, $sub2 = 0, $tnum = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr30 = 0;
 var $vararg_ptr31 = 0, $vararg_ptr4 = 0, $version = 0, $version_sec = 0, $xxc = 0, $xxi = 0, $xxs = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 64|0;
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer = sp;
 $dummy = sp + 3152|0;
 $lastevent = sp + 2640|0;
 $ifh = sp + 2112|0;
 $i1h = sp + 1552|0;
 $i2h = sp + 1248|0;
 $ish = sp + 1168|0;
 $env = sp + 2356|0;
 $mask = sp + 2568|0;
 $inst_map = sp + 680|0;
 $inst_rmap = sp + 196|0;
 $tracker_name = sp + 2528|0;
 $last_fxp = sp + 2464|0;
 $dca2nna = sp + 172|0;
 $version = sp + 116|0;
 $version_sec = sp + 112|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 ;HEAP32[$dca2nna>>2]=HEAP32[3552>>2]|0;HEAP32[$dca2nna+4>>2]=HEAP32[3552+4>>2]|0;HEAP32[$dca2nna+8>>2]=HEAP32[3552+8>>2]|0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = ((($ifh)) + 4|0);
 $9 = $2;
 (_hio_read($8,26,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($ifh)) + 30|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($ifh)) + 31|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read16l($16)|0);
 $18 = ((($ifh)) + 32|0);
 HEAP16[$18>>1] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($ifh)) + 34|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($ifh)) + 36|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($ifh)) + 38|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($ifh)) + 40|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read16l($31)|0);
 $33 = ((($ifh)) + 42|0);
 HEAP16[$33>>1] = $32;
 $34 = $2;
 $35 = (_hio_read16l($34)|0);
 $36 = ((($ifh)) + 44|0);
 HEAP16[$36>>1] = $35;
 $37 = $2;
 $38 = (_hio_read16l($37)|0);
 $39 = ((($ifh)) + 46|0);
 HEAP16[$39>>1] = $38;
 $40 = $2;
 $41 = (_hio_read8($40)|0);
 $42 = ((($ifh)) + 48|0);
 HEAP8[$42>>0] = $41;
 $43 = $2;
 $44 = (_hio_read8($43)|0);
 $45 = ((($ifh)) + 49|0);
 HEAP8[$45>>0] = $44;
 $46 = $2;
 $47 = (_hio_read8($46)|0);
 $48 = ((($ifh)) + 50|0);
 HEAP8[$48>>0] = $47;
 $49 = $2;
 $50 = (_hio_read8($49)|0);
 $51 = ((($ifh)) + 51|0);
 HEAP8[$51>>0] = $50;
 $52 = $2;
 $53 = (_hio_read8($52)|0);
 $54 = ((($ifh)) + 52|0);
 HEAP8[$54>>0] = $53;
 $55 = $2;
 $56 = (_hio_read8($55)|0);
 $57 = ((($ifh)) + 53|0);
 HEAP8[$57>>0] = $56;
 $58 = ((($ifh)) + 48|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = ($60|0)>(128);
 do {
  if (!($61)) {
   $62 = ((($ifh)) + 49|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = ($64|0)>(128);
   if (!($65)) {
    $66 = $2;
    $67 = (_hio_read16l($66)|0);
    $68 = ((($ifh)) + 54|0);
    HEAP16[$68>>1] = $67;
    $69 = $2;
    $70 = (_hio_read32l($69)|0);
    $71 = ((($ifh)) + 56|0);
    HEAP32[$71>>2] = $70;
    $72 = $2;
    $73 = (_hio_read32l($72)|0);
    $74 = ((($ifh)) + 60|0);
    HEAP32[$74>>2] = $73;
    $75 = ((($ifh)) + 64|0);
    $76 = $2;
    (_hio_read($75,64,1,$76)|0);
    $77 = ((($ifh)) + 128|0);
    $78 = $2;
    (_hio_read($77,64,1,$78)|0);
    $79 = $mod;
    $80 = ((($ifh)) + 4|0);
    (_strncpy(($79|0),($80|0),64)|0);
    $81 = ((($ifh)) + 32|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = $82&65535;
    $84 = $mod;
    $85 = ((($84)) + 156|0);
    HEAP32[$85>>2] = $83;
    $86 = ((($ifh)) + 34|0);
    $87 = HEAP16[$86>>1]|0;
    $88 = $87&65535;
    $89 = $mod;
    $90 = ((($89)) + 140|0);
    HEAP32[$90>>2] = $88;
    $91 = ((($ifh)) + 36|0);
    $92 = HEAP16[$91>>1]|0;
    $93 = $92&65535;
    $94 = $mod;
    $95 = ((($94)) + 144|0);
    HEAP32[$95>>2] = $93;
    $96 = ((($ifh)) + 38|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&65535;
    $99 = $mod;
    $100 = ((($99)) + 128|0);
    HEAP32[$100>>2] = $98;
    _memset(($lastevent|0),0,512)|0;
    ;HEAP8[$dummy>>0]=0|0;HEAP8[$dummy+1>>0]=0|0;HEAP8[$dummy+2>>0]=0|0;HEAP8[$dummy+3>>0]=0|0;HEAP8[$dummy+4>>0]=0|0;HEAP8[$dummy+5>>0]=0|0;HEAP8[$dummy+6>>0]=0|0;HEAP8[$dummy+7>>0]=0|0;
    $101 = $mod;
    $102 = ((($101)) + 140|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)>(255);
    if (!($104)) {
     $105 = $mod;
     $106 = ((($105)) + 144|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)>(255);
     if (!($108)) {
      $109 = $mod;
      $110 = ((($109)) + 128|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = ($111|0)>(255);
      if (!($112)) {
       $113 = $mod;
       $114 = ((($113)) + 140|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($115|0)!=(0);
       if ($116) {
        $117 = $mod;
        $118 = ((($117)) + 140|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = (_calloc(4,$119)|0);
        $pp_ins = $120;
        $121 = $pp_ins;
        $122 = ($121|0)==(0|0);
        if ($122) {
         break;
        }
       } else {
        $pp_ins = 0;
       }
       $123 = $mod;
       $124 = ((($123)) + 144|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = (_calloc(4,$125)|0);
       $pp_smp = $126;
       $127 = $pp_smp;
       $128 = ($127|0)==(0|0);
       if (!($128)) {
        $129 = $mod;
        $130 = ((($129)) + 128|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (_calloc(4,$131)|0);
        $pp_pat = $132;
        $133 = $pp_pat;
        $134 = ($133|0)==(0|0);
        if (!($134)) {
         $135 = ((($ifh)) + 50|0);
         $136 = HEAP8[$135>>0]|0;
         $137 = $136&255;
         $138 = $mod;
         $139 = ((($138)) + 148|0);
         HEAP32[$139>>2] = $137;
         $140 = ((($ifh)) + 51|0);
         $141 = HEAP8[$140>>0]|0;
         $142 = $141&255;
         $143 = $mod;
         $144 = ((($143)) + 152|0);
         HEAP32[$144>>2] = $142;
         $145 = ((($ifh)) + 44|0);
         $146 = HEAP16[$145>>1]|0;
         $147 = $146&65535;
         $148 = $147 ^ -1;
         $149 = $148 & 4;
         $sample_mode = $149;
         $150 = ((($ifh)) + 44|0);
         $151 = HEAP16[$150>>1]|0;
         $152 = $151&65535;
         $153 = $152 & 8;
         $154 = ($153|0)!=(0);
         if ($154) {
          $155 = $1;
          $156 = ((($155)) + 1284|0);
          $157 = HEAP32[$156>>2]|0;
          $158 = $157 | 4096;
          HEAP32[$156>>2] = $158;
         }
         $159 = $sample_mode;
         $160 = ($159|0)!=(0);
         if (!($160)) {
          $161 = ((($ifh)) + 42|0);
          $162 = HEAP16[$161>>1]|0;
          $163 = $162&65535;
          $164 = ($163|0)>=(512);
          if ($164) {
           $165 = $1;
           $166 = ((($165)) + 1284|0);
           $167 = HEAP32[$166>>2]|0;
           $168 = $167 | 16384;
           HEAP32[$166>>2] = $168;
          }
         }
         $i = 0;
         while(1) {
          $169 = $i;
          $170 = ($169|0)<(64);
          if (!($170)) {
           break;
          }
          $171 = $i;
          $172 = $mod;
          $173 = ((($172)) + 184|0);
          $174 = (($173) + (($171*12)|0)|0);
          $xxc = $174;
          $175 = $i;
          $176 = ((($ifh)) + 64|0);
          $177 = (($176) + ($175)|0);
          $178 = HEAP8[$177>>0]|0;
          $179 = $178&255;
          $180 = ($179|0)==(100);
          if ($180) {
           $181 = $i;
           $182 = $mod;
           $183 = ((($182)) + 184|0);
           $184 = (($183) + (($181*12)|0)|0);
           $185 = ((($184)) + 8|0);
           $186 = HEAP32[$185>>2]|0;
           $187 = $186 | 16;
           HEAP32[$185>>2] = $187;
          }
          $188 = $i;
          $189 = ((($ifh)) + 64|0);
          $190 = (($189) + ($188)|0);
          $191 = HEAP8[$190>>0]|0;
          $192 = $191&255;
          $193 = $192 & 128;
          $194 = ($193|0)!=(0);
          if ($194) {
           $195 = $i;
           $196 = ((($ifh)) + 128|0);
           $197 = (($196) + ($195)|0);
           HEAP8[$197>>0] = 0;
           $198 = $i;
           $199 = $mod;
           $200 = ((($199)) + 184|0);
           $201 = (($200) + (($198*12)|0)|0);
           $202 = ((($201)) + 8|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = $203 | 2;
           HEAP32[$202>>2] = $204;
          }
          $205 = ((($ifh)) + 44|0);
          $206 = HEAP16[$205>>1]|0;
          $207 = $206&65535;
          $208 = $207 & 1;
          $209 = ($208|0)!=(0);
          if ($209) {
           $210 = $i;
           $211 = ((($ifh)) + 64|0);
           $212 = (($211) + ($210)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = $213&255;
           $215 = $214<<7;
           $216 = $215 >> 5;
           $217 = $xxc;
           HEAP32[$217>>2] = $216;
           $218 = $xxc;
           $219 = HEAP32[$218>>2]|0;
           $220 = ($219|0)>(255);
           if ($220) {
            $221 = $xxc;
            HEAP32[$221>>2] = 255;
           }
          } else {
           $222 = $xxc;
           HEAP32[$222>>2] = 128;
          }
          $223 = $i;
          $224 = ((($ifh)) + 128|0);
          $225 = (($224) + ($223)|0);
          $226 = HEAP8[$225>>0]|0;
          $227 = $226&255;
          $228 = $xxc;
          $229 = ((($228)) + 4|0);
          HEAP32[$229>>2] = $227;
          $230 = $i;
          $231 = (($230) + 1)|0;
          $i = $231;
         }
         $232 = $mod;
         $233 = ((($232)) + 156|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = ($234|0)<=(256);
         $236 = $mod;
         $237 = ((($236)) + 952|0);
         if ($235) {
          $238 = $mod;
          $239 = ((($238)) + 156|0);
          $240 = HEAP32[$239>>2]|0;
          $241 = $2;
          (_hio_read($237,1,$240,$241)|0);
         } else {
          $242 = $2;
          (_hio_read($237,1,256,$242)|0);
          $243 = $2;
          $244 = $mod;
          $245 = ((($244)) + 156|0);
          $246 = HEAP32[$245>>2]|0;
          $247 = (($246) - 256)|0;
          (_hio_seek($243,$247,1)|0);
          $248 = $mod;
          $249 = ((($248)) + 156|0);
          HEAP32[$249>>2] = 256;
         }
         $250 = ((($ifh)) + 44|0);
         $251 = HEAP16[$250>>1]|0;
         $252 = $251&65535;
         $253 = $252 & 16;
         $254 = ($253|0)!=(0);
         $255 = $254 ? 0 : 1;
         $new_fx = $255;
         $i = 0;
         while(1) {
          $256 = $i;
          $257 = $mod;
          $258 = ((($257)) + 140|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = ($256|0)<($259|0);
          if (!($260)) {
           break;
          }
          $261 = $2;
          $262 = (_hio_read32l($261)|0);
          $263 = $i;
          $264 = $pp_ins;
          $265 = (($264) + ($263<<2)|0);
          HEAP32[$265>>2] = $262;
          $266 = $i;
          $267 = (($266) + 1)|0;
          $i = $267;
         }
         $i = 0;
         while(1) {
          $268 = $i;
          $269 = $mod;
          $270 = ((($269)) + 144|0);
          $271 = HEAP32[$270>>2]|0;
          $272 = ($268|0)<($271|0);
          if (!($272)) {
           break;
          }
          $273 = $2;
          $274 = (_hio_read32l($273)|0);
          $275 = $i;
          $276 = $pp_smp;
          $277 = (($276) + ($275<<2)|0);
          HEAP32[$277>>2] = $274;
          $278 = $i;
          $279 = (($278) + 1)|0;
          $i = $279;
         }
         $i = 0;
         while(1) {
          $280 = $i;
          $281 = $mod;
          $282 = ((($281)) + 128|0);
          $283 = HEAP32[$282>>2]|0;
          $284 = ($280|0)<($283|0);
          if (!($284)) {
           break;
          }
          $285 = $2;
          $286 = (_hio_read32l($285)|0);
          $287 = $i;
          $288 = $pp_pat;
          $289 = (($288) + ($287<<2)|0);
          HEAP32[$289>>2] = $286;
          $290 = $i;
          $291 = (($290) + 1)|0;
          $i = $291;
         }
         $292 = $1;
         $293 = ((($292)) + 1264|0);
         HEAP32[$293>>2] = 8363;
         $294 = ((($ifh)) + 40|0);
         $295 = HEAP16[$294>>1]|0;
         $296 = $295&65535;
         $297 = $296 >> 8;
         L53: do {
          switch ($297|0) {
          case 0:  {
           (_strcpy(($tracker_name|0),(3568|0))|0);
           break;
          }
          case 127: case 8:  {
           $401 = ((($ifh)) + 40|0);
           $402 = HEAP16[$401>>1]|0;
           $403 = $402&65535;
           $404 = ($403|0)==(2184);
           if ($404) {
            (_strcpy(($tracker_name|0),(3720|0))|0);
            break L53;
           }
           $405 = ((($ifh)) + 40|0);
           $406 = HEAP16[$405>>1]|0;
           $407 = $406&65535;
           $408 = ($407|0)==(32767);
           if ($408) {
            (_strcpy(($tracker_name|0),(3736|0))|0);
            break L53;
           } else {
            $409 = ((($ifh)) + 40|0);
            $410 = HEAP16[$409>>1]|0;
            $411 = $410&65535;
            HEAP32[$vararg_buffer5>>2] = $411;
            (_snprintf($tracker_name,40,3752,$vararg_buffer5)|0);
            break L53;
           }
           break;
          }
          case 2: case 1:  {
           $298 = ((($ifh)) + 42|0);
           $299 = HEAP16[$298>>1]|0;
           $300 = $299&65535;
           $301 = ($300|0)==(512);
           do {
            if ($301) {
             $302 = ((($ifh)) + 40|0);
             $303 = HEAP16[$302>>1]|0;
             $304 = $303&65535;
             $305 = ($304|0)==(532);
             if ($305) {
              $306 = ((($ifh)) + 44|0);
              $307 = HEAP16[$306>>1]|0;
              $308 = $307&65535;
              $309 = ($308|0)==(9);
              if ($309) {
               $310 = ((($ifh)) + 46|0);
               $311 = HEAP16[$310>>1]|0;
               $312 = $311&65535;
               $313 = ($312|0)==(0);
               if ($313) {
                $314 = ((($ifh)) + 31|0);
                $315 = HEAP8[$314>>0]|0;
                $316 = $315&255;
                $317 = ($316|0)==(0);
                if (!($317)) {
                 break;
                }
                $318 = ((($ifh)) + 30|0);
                $319 = HEAP8[$318>>0]|0;
                $320 = $319&255;
                $321 = ($320|0)==(0);
                if (!($321)) {
                 break;
                }
                $322 = ((($ifh)) + 34|0);
                $323 = HEAP16[$322>>1]|0;
                $324 = $323&65535;
                $325 = ($324|0)==(0);
                if (!($325)) {
                 break;
                }
                $326 = ((($ifh)) + 38|0);
                $327 = HEAP16[$326>>1]|0;
                $328 = $327&65535;
                $329 = (($328) + 1)|0;
                $330 = ((($ifh)) + 32|0);
                $331 = HEAP16[$330>>1]|0;
                $332 = $331&65535;
                $333 = ($329|0)==($332|0);
                if (!($333)) {
                 break;
                }
                $334 = ((($ifh)) + 48|0);
                $335 = HEAP8[$334>>0]|0;
                $336 = $335&255;
                $337 = ($336|0)==(128);
                if (!($337)) {
                 break;
                }
                $338 = ((($ifh)) + 49|0);
                $339 = HEAP8[$338>>0]|0;
                $340 = $339&255;
                $341 = ($340|0)==(100);
                if (!($341)) {
                 break;
                }
                $342 = ((($ifh)) + 50|0);
                $343 = HEAP8[$342>>0]|0;
                $344 = $343&255;
                $345 = ($344|0)==(1);
                if (!($345)) {
                 break;
                }
                $346 = ((($ifh)) + 52|0);
                $347 = HEAP8[$346>>0]|0;
                $348 = $347&255;
                $349 = ($348|0)==(128);
                if (!($349)) {
                 break;
                }
                $350 = ((($ifh)) + 53|0);
                $351 = HEAP8[$350>>0]|0;
                $352 = $351&255;
                $353 = ($352|0)==(0);
                if (!($353)) {
                 break;
                }
                $354 = ((($ifh)) + 54|0);
                $355 = HEAP16[$354>>1]|0;
                $356 = $355&65535;
                $357 = ($356|0)==(0);
                if (!($357)) {
                 break;
                }
                $358 = ((($ifh)) + 56|0);
                $359 = HEAP32[$358>>2]|0;
                $360 = ($359|0)==(0);
                if (!($360)) {
                 break;
                }
                $361 = ((($ifh)) + 60|0);
                $362 = HEAP32[$361>>2]|0;
                $363 = ($362|0)==(0);
                if (!($363)) {
                 break;
                }
                (_strcpy(($tracker_name|0),(3576|0))|0);
                break L53;
               }
              }
             }
            }
           } while(0);
           $364 = ((($ifh)) + 42|0);
           $365 = HEAP16[$364>>1]|0;
           $366 = $365&65535;
           $367 = ($366|0)==(512);
           if ($367) {
            $368 = ((($ifh)) + 40|0);
            $369 = HEAP16[$368>>1]|0;
            $370 = $369&65535;
            $371 = ($370|0)==(535);
            if ($371) {
             (_strcpy(($tracker_name|0),(3600|0))|0);
             $372 = $sample_mode;
             $373 = ($372|0)!=(0);
             $374 = $373 ? 256 : 532;
             $375 = $374&65535;
             $376 = ((($ifh)) + 42|0);
             HEAP16[$376>>1] = $375;
             break L53;
            }
           }
           $377 = ((($ifh)) + 40|0);
           $378 = HEAP16[$377>>1]|0;
           $379 = $378&65535;
           $380 = ($379|0)==(534);
           if ($380) {
            (_strcpy(($tracker_name|0),(3624|0))|0);
            break L53;
           }
           $381 = ((($ifh)) + 40|0);
           $382 = HEAP16[$381>>1]|0;
           $383 = $382&65535;
           $384 = ($383|0)==(535);
           if ($384) {
            (_strcpy(($tracker_name|0),(3648|0))|0);
            break L53;
           }
           $385 = ((($ifh)) + 40|0);
           $386 = HEAP16[$385>>1]|0;
           $387 = $386&65535;
           $388 = ($387|0)==(532);
           do {
            if ($388) {
             $389 = ((($ifh)) + 60|0);
             $390 = (_memcmp($389,3672,4)|0);
             $391 = ($390|0)!=(0);
             if ($391) {
              break;
             }
             (_strcpy(($tracker_name|0),(3680|0))|0);
             break L53;
            }
           } while(0);
           $392 = ((($ifh)) + 40|0);
           $393 = HEAP16[$392>>1]|0;
           $394 = $393&65535;
           $395 = $394 & 3840;
           $396 = $395 >> 8;
           $397 = ((($ifh)) + 40|0);
           $398 = HEAP16[$397>>1]|0;
           $399 = $398&65535;
           $400 = $399 & 255;
           HEAP32[$vararg_buffer>>2] = $396;
           $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
           HEAP32[$vararg_ptr4>>2] = $400;
           (_snprintf($tracker_name,40,3696,$vararg_buffer)|0);
           break;
          }
          default: {
           $412 = ((($ifh)) + 40|0);
           $413 = HEAP16[$412>>1]|0;
           $414 = $413&65535;
           $415 = $414 >> 12;
           if ((($415|0) == 6)) {
            $453 = ((($ifh)) + 40|0);
            $454 = HEAP16[$453>>1]|0;
            $455 = $454&65535;
            $456 = $455 & 3840;
            $457 = $456 >> 8;
            $458 = ((($ifh)) + 40|0);
            $459 = HEAP16[$458>>1]|0;
            $460 = $459&65535;
            $461 = $460 & 255;
            HEAP32[$vararg_buffer20>>2] = $457;
            $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
            HEAP32[$vararg_ptr23>>2] = $461;
            (_snprintf($tracker_name,40,3864,$vararg_buffer20)|0);
            break L53;
           } else if ((($415|0) == 1)) {
            $416 = ((($ifh)) + 40|0);
            $417 = HEAP16[$416>>1]|0;
            $418 = $417&65535;
            $419 = $418 & 4095;
            $420 = $419&65535;
            $cwtv = $420;
            $421 = $cwtv;
            $422 = $421&65535;
            $423 = ($422|0)>(80);
            if (!($423)) {
             $439 = $cwtv;
             $440 = $439&65535;
             HEAP32[$vararg_buffer13>>2] = $440;
             (_snprintf($tracker_name,40,3800,$vararg_buffer13)|0);
             break L53;
            }
            $424 = $cwtv;
            $425 = $424&65535;
            $426 = (($425) - 80)|0;
            $427 = ($426*86400)|0;
            $428 = (($427) + 1254355200)|0;
            HEAP32[$version_sec>>2] = $428;
            $429 = (_localtime_r(($version_sec|0),($version|0))|0);
            $430 = ($429|0)!=(0|0);
            if (!($430)) {
             break L53;
            }
            $431 = ((($version)) + 20|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = (($432) + 1900)|0;
            $434 = ((($version)) + 16|0);
            $435 = HEAP32[$434>>2]|0;
            $436 = (($435) + 1)|0;
            $437 = ((($version)) + 12|0);
            $438 = HEAP32[$437>>2]|0;
            HEAP32[$vararg_buffer8>>2] = $433;
            $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
            HEAP32[$vararg_ptr11>>2] = $436;
            $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
            HEAP32[$vararg_ptr12>>2] = $438;
            (_snprintf($tracker_name,40,3768,$vararg_buffer8)|0);
            break L53;
           } else if ((($415|0) == 5)) {
            $441 = ((($ifh)) + 40|0);
            $442 = HEAP16[$441>>1]|0;
            $443 = $442&65535;
            $444 = $443 & 3840;
            $445 = $444 >> 8;
            $446 = ((($ifh)) + 40|0);
            $447 = HEAP16[$446>>1]|0;
            $448 = $447&65535;
            $449 = $448 & 255;
            HEAP32[$vararg_buffer16>>2] = $445;
            $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
            HEAP32[$vararg_ptr19>>2] = $449;
            (_snprintf($tracker_name,40,3824,$vararg_buffer16)|0);
            $450 = ((($ifh)) + 60|0);
            $451 = (_memcmp($450,3840,4)|0);
            $452 = ($451|0)!=(0);
            if (!($452)) {
             break L53;
            }
            (_strncat($tracker_name,3848,40)|0);
            break L53;
           } else {
            $462 = ((($ifh)) + 40|0);
            $463 = HEAP16[$462>>1]|0;
            $464 = $463&65535;
            HEAP32[$vararg_buffer24>>2] = $464;
            (_snprintf($tracker_name,40,3752,$vararg_buffer24)|0);
            break L53;
           }
          }
          }
         } while(0);
         $465 = $1;
         $466 = ((($ifh)) + 42|0);
         $467 = HEAP16[$466>>1]|0;
         $468 = $467&65535;
         $469 = $468 >> 8;
         $470 = ((($ifh)) + 42|0);
         $471 = HEAP16[$470>>1]|0;
         $472 = $471&65535;
         $473 = $472 & 255;
         HEAP32[$vararg_buffer27>>2] = $tracker_name;
         $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
         HEAP32[$vararg_ptr30>>2] = $469;
         $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
         HEAP32[$vararg_ptr31>>2] = $473;
         _set_type($465,3888,$vararg_buffer27);
         $474 = $sample_mode;
         $475 = ($474|0)!=(0);
         if ($475) {
          $476 = $mod;
          $477 = ((($476)) + 144|0);
          $478 = HEAP32[$477>>2]|0;
          $479 = $mod;
          $480 = ((($479)) + 140|0);
          HEAP32[$480>>2] = $478;
         }
         $481 = $mod;
         $482 = (_instrument_init($481)|0);
         $483 = ($482|0)<(0);
         L110: do {
          if (!($483)) {
           $i = 0;
           while(1) {
            $484 = $i;
            $485 = $mod;
            $486 = ((($485)) + 140|0);
            $487 = HEAP32[$486>>2]|0;
            $488 = ($484|0)<($487|0);
            if (!($488)) {
             break;
            }
            $489 = $i;
            $490 = $mod;
            $491 = ((($490)) + 176|0);
            $492 = HEAP32[$491>>2]|0;
            $493 = (($492) + (($489*764)|0)|0);
            $xxi = $493;
            $494 = $sample_mode;
            $495 = ($494|0)!=(0);
            L115: do {
             if ($495) {
              label = 131;
             } else {
              $496 = ((($ifh)) + 42|0);
              $497 = HEAP16[$496>>1]|0;
              $498 = $497&65535;
              $499 = ($498|0)>=(512);
              if (!($499)) {
               label = 131;
               break;
              }
              $500 = $2;
              $501 = $3;
              $502 = $i;
              $503 = $pp_ins;
              $504 = (($503) + ($502<<2)|0);
              $505 = HEAP32[$504>>2]|0;
              $506 = (($501) + ($505))|0;
              $507 = (_hio_seek($500,$506,0)|0);
              $508 = ($507|0)!=(0);
              if ($508) {
               break L110;
              }
              $509 = $2;
              $510 = (_hio_read32b($509)|0);
              HEAP32[$i2h>>2] = $510;
              $511 = ((($i2h)) + 4|0);
              $512 = $2;
              (_hio_read($511,12,1,$512)|0);
              $513 = $2;
              $514 = (_hio_read8($513)|0);
              $515 = ((($i2h)) + 16|0);
              HEAP8[$515>>0] = $514;
              $516 = $2;
              $517 = (_hio_read8($516)|0);
              $518 = ((($i2h)) + 17|0);
              HEAP8[$518>>0] = $517;
              $519 = $2;
              $520 = (_hio_read8($519)|0);
              $521 = ((($i2h)) + 18|0);
              HEAP8[$521>>0] = $520;
              $522 = $2;
              $523 = (_hio_read8($522)|0);
              $524 = ((($i2h)) + 19|0);
              HEAP8[$524>>0] = $523;
              $525 = $2;
              $526 = (_hio_read16l($525)|0);
              $527 = ((($i2h)) + 20|0);
              HEAP16[$527>>1] = $526;
              $528 = $2;
              $529 = (_hio_read8($528)|0);
              $530 = ((($i2h)) + 22|0);
              HEAP8[$530>>0] = $529;
              $531 = $2;
              $532 = (_hio_read8($531)|0);
              $533 = ((($i2h)) + 23|0);
              HEAP8[$533>>0] = $532;
              $534 = $2;
              $535 = (_hio_read8($534)|0);
              $536 = ((($i2h)) + 24|0);
              HEAP8[$536>>0] = $535;
              $537 = $2;
              $538 = (_hio_read8($537)|0);
              $539 = ((($i2h)) + 25|0);
              HEAP8[$539>>0] = $538;
              $540 = $2;
              $541 = (_hio_read8($540)|0);
              $542 = ((($i2h)) + 26|0);
              HEAP8[$542>>0] = $541;
              $543 = $2;
              $544 = (_hio_read8($543)|0);
              $545 = ((($i2h)) + 27|0);
              HEAP8[$545>>0] = $544;
              $546 = $2;
              $547 = (_hio_read16l($546)|0);
              $548 = ((($i2h)) + 28|0);
              HEAP16[$548>>1] = $547;
              $549 = $2;
              $550 = (_hio_read8($549)|0);
              $551 = ((($i2h)) + 30|0);
              HEAP8[$551>>0] = $550;
              $552 = $2;
              $553 = (_hio_read8($552)|0);
              $554 = ((($i2h)) + 31|0);
              HEAP8[$554>>0] = $553;
              $555 = ((($i2h)) + 32|0);
              $556 = $2;
              $557 = (_hio_read($555,1,26,$556)|0);
              $558 = ($557|0)!=(26);
              if ($558) {
               break L110;
              }
              $559 = ((($i2h)) + 32|0);
              _fix_name($559,26);
              $560 = $2;
              $561 = (_hio_read8($560)|0);
              $562 = ((($i2h)) + 58|0);
              HEAP8[$562>>0] = $561;
              $563 = $2;
              $564 = (_hio_read8($563)|0);
              $565 = ((($i2h)) + 59|0);
              HEAP8[$565>>0] = $564;
              $566 = $2;
              $567 = (_hio_read8($566)|0);
              $568 = ((($i2h)) + 60|0);
              HEAP8[$568>>0] = $567;
              $569 = $2;
              $570 = (_hio_read8($569)|0);
              $571 = ((($i2h)) + 61|0);
              HEAP8[$571>>0] = $570;
              $572 = $2;
              $573 = (_hio_read16l($572)|0);
              $574 = ((($i2h)) + 62|0);
              HEAP16[$574>>1] = $573;
              $575 = ((($i2h)) + 64|0);
              $576 = $2;
              $577 = (_hio_read($575,1,240,$576)|0);
              $578 = ($577|0)!=(240);
              if ($578) {
               break L110;
              }
              $579 = $xxi;
              $580 = ((($i2h)) + 32|0);
              (_copy_adjust($579,$580,25)|0);
              $581 = ((($i2h)) + 20|0);
              $582 = HEAP16[$581>>1]|0;
              $583 = $582&65535;
              $584 = $583 << 6;
              $585 = $xxi;
              $586 = ((($585)) + 40|0);
              HEAP32[$586>>2] = $584;
              $587 = $xxi;
              $588 = ((($587)) + 44|0);
              $589 = $2;
              _read_envelope($588,$env,$589);
              $590 = $xxi;
              $591 = ((($590)) + 200|0);
              $592 = $2;
              _read_envelope($591,$env,$592);
              $593 = $xxi;
              $594 = ((($593)) + 356|0);
              $595 = $2;
              _read_envelope($594,$env,$595);
              $596 = $xxi;
              $597 = ((($596)) + 200|0);
              $598 = HEAP32[$597>>2]|0;
              $599 = $598 & 1;
              $600 = ($599|0)!=(0);
              L121: do {
               if ($600) {
                $j = 0;
                while(1) {
                 $601 = $j;
                 $602 = $xxi;
                 $603 = ((($602)) + 200|0);
                 $604 = ((($603)) + 4|0);
                 $605 = HEAP32[$604>>2]|0;
                 $606 = ($601|0)<($605|0);
                 if (!($606)) {
                  break L121;
                 }
                 $607 = $j;
                 $608 = $607<<1;
                 $609 = (($608) + 1)|0;
                 $610 = $xxi;
                 $611 = ((($610)) + 200|0);
                 $612 = ((($611)) + 28|0);
                 $613 = (($612) + ($609<<1)|0);
                 $614 = HEAP16[$613>>1]|0;
                 $615 = $614 << 16 >> 16;
                 $616 = (($615) + 32)|0;
                 $617 = $616&65535;
                 HEAP16[$613>>1] = $617;
                 $618 = $j;
                 $619 = (($618) + 1)|0;
                 $j = $619;
                }
               }
              } while(0);
              $620 = $xxi;
              $621 = ((($620)) + 44|0);
              $622 = HEAP32[$621>>2]|0;
              $623 = $622 & 1;
              $624 = ($623|0)!=(0);
              do {
               if ($624) {
                $625 = $xxi;
                $626 = ((($625)) + 44|0);
                $627 = ((($626)) + 4|0);
                $628 = HEAP32[$627>>2]|0;
                $629 = ($628|0)==(0);
                if (!($629)) {
                 break;
                }
                $630 = $xxi;
                $631 = ((($630)) + 44|0);
                $632 = ((($631)) + 4|0);
                HEAP32[$632>>2] = 1;
               }
              } while(0);
              $633 = $xxi;
              $634 = ((($633)) + 200|0);
              $635 = HEAP32[$634>>2]|0;
              $636 = $635 & 1;
              $637 = ($636|0)!=(0);
              do {
               if ($637) {
                $638 = $xxi;
                $639 = ((($638)) + 200|0);
                $640 = ((($639)) + 4|0);
                $641 = HEAP32[$640>>2]|0;
                $642 = ($641|0)==(0);
                if (!($642)) {
                 break;
                }
                $643 = $xxi;
                $644 = ((($643)) + 200|0);
                $645 = ((($644)) + 4|0);
                HEAP32[$645>>2] = 1;
               }
              } while(0);
              $646 = $xxi;
              $647 = ((($646)) + 356|0);
              $648 = HEAP32[$647>>2]|0;
              $649 = $648 & 1;
              $650 = ($649|0)!=(0);
              do {
               if ($650) {
                $651 = $xxi;
                $652 = ((($651)) + 356|0);
                $653 = ((($652)) + 4|0);
                $654 = HEAP32[$653>>2]|0;
                $655 = ($654|0)==(0);
                if (!($655)) {
                 break;
                }
                $656 = $xxi;
                $657 = ((($656)) + 356|0);
                $658 = ((($657)) + 4|0);
                HEAP32[$658>>2] = 1;
               }
              } while(0);
              $659 = HEAP8[$env>>0]|0;
              $660 = $659&255;
              $661 = $660 & 128;
              $662 = ($661|0)!=(0);
              L139: do {
               if ($662) {
                $663 = $xxi;
                $664 = ((($663)) + 356|0);
                $665 = HEAP32[$664>>2]|0;
                $666 = $665 | 8;
                HEAP32[$664>>2] = $666;
                $j = 0;
                while(1) {
                 $667 = $j;
                 $668 = ((($env)) + 1|0);
                 $669 = HEAP8[$668>>0]|0;
                 $670 = $669&255;
                 $671 = ($667|0)<($670|0);
                 if (!($671)) {
                  break L139;
                 }
                 $672 = $j;
                 $673 = $672<<1;
                 $674 = (($673) + 1)|0;
                 $675 = $xxi;
                 $676 = ((($675)) + 356|0);
                 $677 = ((($676)) + 28|0);
                 $678 = (($677) + ($674<<1)|0);
                 $679 = HEAP16[$678>>1]|0;
                 $680 = $679 << 16 >> 16;
                 $681 = (($680) + 32)|0;
                 $682 = $681&65535;
                 HEAP16[$678>>1] = $682;
                 $683 = $j;
                 $684 = $683<<1;
                 $685 = (($684) + 1)|0;
                 $686 = $xxi;
                 $687 = ((($686)) + 356|0);
                 $688 = ((($687)) + 28|0);
                 $689 = (($688) + ($685<<1)|0);
                 $690 = HEAP16[$689>>1]|0;
                 $691 = $690 << 16 >> 16;
                 $692 = $691<<2;
                 $693 = $692&65535;
                 HEAP16[$689>>1] = $693;
                 $694 = $j;
                 $695 = (($694) + 1)|0;
                 $j = $695;
                }
               } else {
                $j = 0;
                while(1) {
                 $696 = $j;
                 $697 = ((($env)) + 1|0);
                 $698 = HEAP8[$697>>0]|0;
                 $699 = $698&255;
                 $700 = ($696|0)<($699|0);
                 if (!($700)) {
                  break L139;
                 }
                 $701 = $j;
                 $702 = $701<<1;
                 $703 = (($702) + 1)|0;
                 $704 = $xxi;
                 $705 = ((($704)) + 356|0);
                 $706 = ((($705)) + 28|0);
                 $707 = (($706) + ($703<<1)|0);
                 $708 = HEAP16[$707>>1]|0;
                 $709 = $708 << 16 >> 16;
                 $710 = ($709*50)|0;
                 $711 = $710&65535;
                 HEAP16[$707>>1] = $711;
                 $712 = $j;
                 $713 = (($712) + 1)|0;
                 $j = $713;
                }
               }
              } while(0);
              $j = 0;
              while(1) {
               $714 = $j;
               $715 = ($714|0)<(120);
               if (!($715)) {
                break;
               }
               $716 = $j;
               $717 = (($inst_map) + ($716<<2)|0);
               HEAP32[$717>>2] = -1;
               $718 = $j;
               $719 = (($718) + 1)|0;
               $j = $719;
              }
              $j = 0;
              $k = 0;
              while(1) {
               $720 = $j;
               $721 = ($720|0)<(120);
               if (!($721)) {
                break;
               }
               $722 = $j;
               $723 = $722<<1;
               $724 = (($723) + 1)|0;
               $725 = ((($i2h)) + 64|0);
               $726 = (($725) + ($724)|0);
               $727 = HEAP8[$726>>0]|0;
               $728 = $727&255;
               $729 = (($728) - 1)|0;
               $c = $729;
               $730 = $c;
               $731 = ($730|0)<(0);
               $732 = $c;
               $733 = ($732|0)>=(120);
               $or$cond = $731 | $733;
               if ($or$cond) {
                $734 = $j;
                $735 = $xxi;
                $736 = ((($735)) + 512|0);
                $737 = (($736) + ($734<<1)|0);
                HEAP8[$737>>0] = -1;
                $738 = $j;
                $739 = $xxi;
                $740 = ((($739)) + 512|0);
                $741 = (($740) + ($738<<1)|0);
                $742 = ((($741)) + 1|0);
                HEAP8[$742>>0] = 0;
               } else {
                $743 = $c;
                $744 = (($inst_map) + ($743<<2)|0);
                $745 = HEAP32[$744>>2]|0;
                $746 = ($745|0)==(-1);
                if ($746) {
                 $747 = $k;
                 $748 = $c;
                 $749 = (($inst_map) + ($748<<2)|0);
                 HEAP32[$749>>2] = $747;
                 $750 = $c;
                 $751 = $k;
                 $752 = (($inst_rmap) + ($751<<2)|0);
                 HEAP32[$752>>2] = $750;
                 $753 = $k;
                 $754 = (($753) + 1)|0;
                 $k = $754;
                }
                $755 = $c;
                $756 = (($inst_map) + ($755<<2)|0);
                $757 = HEAP32[$756>>2]|0;
                $758 = $757&255;
                $759 = $j;
                $760 = $xxi;
                $761 = ((($760)) + 512|0);
                $762 = (($761) + ($759<<1)|0);
                HEAP8[$762>>0] = $758;
                $763 = $j;
                $764 = $763<<1;
                $765 = ((($i2h)) + 64|0);
                $766 = (($765) + ($764)|0);
                $767 = HEAP8[$766>>0]|0;
                $768 = $767&255;
                $769 = $j;
                $770 = (($768) - ($769))|0;
                $771 = $770&255;
                $772 = $j;
                $773 = $xxi;
                $774 = ((($773)) + 512|0);
                $775 = (($774) + ($772<<1)|0);
                $776 = ((($775)) + 1|0);
                HEAP8[$776>>0] = $771;
               }
               $777 = $j;
               $778 = (($777) + 1)|0;
               $j = $778;
              }
              $779 = $k;
              $780 = $xxi;
              $781 = ((($780)) + 36|0);
              HEAP32[$781>>2] = $779;
              $782 = ((($i2h)) + 24|0);
              $783 = HEAP8[$782>>0]|0;
              $784 = $783&255;
              $785 = $784 >> 1;
              $786 = $xxi;
              $787 = ((($786)) + 32|0);
              HEAP32[$787>>2] = $785;
              $788 = $k;
              $789 = ($788|0)!=(0);
              if (!($789)) {
               break;
              }
              $790 = $k;
              $791 = (_calloc(64,$790)|0);
              $792 = $xxi;
              $793 = ((($792)) + 756|0);
              HEAP32[$793>>2] = $791;
              $794 = $xxi;
              $795 = ((($794)) + 756|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               break L110;
              }
              $j = 0;
              while(1) {
               $798 = $j;
               $799 = $k;
               $800 = ($798|0)<($799|0);
               if (!($800)) {
                break L115;
               }
               $801 = $j;
               $802 = $xxi;
               $803 = ((($802)) + 756|0);
               $804 = HEAP32[$803>>2]|0;
               $805 = (($804) + ($801<<6)|0);
               $sub = $805;
               $806 = $j;
               $807 = (($inst_rmap) + ($806<<2)|0);
               $808 = HEAP32[$807>>2]|0;
               $809 = $sub;
               $810 = ((($809)) + 40|0);
               HEAP32[$810>>2] = $808;
               $811 = ((($i2h)) + 17|0);
               $812 = HEAP8[$811>>0]|0;
               $813 = $812&255;
               $814 = $sub;
               $815 = ((($814)) + 44|0);
               HEAP32[$815>>2] = $813;
               $816 = ((($i2h)) + 18|0);
               $817 = HEAP8[$816>>0]|0;
               $818 = $817&255;
               $819 = $sub;
               $820 = ((($819)) + 48|0);
               HEAP32[$820>>2] = $818;
               $821 = ((($i2h)) + 19|0);
               $822 = HEAP8[$821>>0]|0;
               $823 = $822&255;
               $824 = $823 & 3;
               $825 = (($dca2nna) + ($824<<2)|0);
               $826 = HEAP32[$825>>2]|0;
               $827 = $sub;
               $828 = ((($827)) + 52|0);
               HEAP32[$828>>2] = $826;
               $829 = ((($i2h)) + 25|0);
               $830 = HEAP8[$829>>0]|0;
               $831 = $830&255;
               $832 = $831 & 128;
               $833 = ($832|0)!=(0);
               if ($833) {
                $840 = -1;
               } else {
                $834 = ((($i2h)) + 25|0);
                $835 = HEAP8[$834>>0]|0;
                $836 = $835&255;
                $837 = $836<<2;
                $840 = $837;
               }
               $838 = $sub;
               $839 = ((($838)) + 8|0);
               HEAP32[$839>>2] = $840;
               $841 = ((($i2h)) + 58|0);
               $842 = HEAP8[$841>>0]|0;
               $843 = $842&255;
               $844 = $sub;
               $845 = ((($844)) + 56|0);
               HEAP32[$845>>2] = $843;
               $846 = ((($i2h)) + 59|0);
               $847 = HEAP8[$846>>0]|0;
               $848 = $847&255;
               $849 = $sub;
               $850 = ((($849)) + 60|0);
               HEAP32[$850>>2] = $848;
               $851 = ((($i2h)) + 27|0);
               $852 = HEAP8[$851>>0]|0;
               $853 = $852&255;
               $854 = $853 << 8;
               $855 = ((($i2h)) + 26|0);
               $856 = HEAP8[$855>>0]|0;
               $857 = $856&255;
               $858 = $854 | $857;
               $859 = $sub;
               $860 = ((($859)) + 36|0);
               HEAP32[$860>>2] = $858;
               $861 = $j;
               $862 = (($861) + 1)|0;
               $j = $862;
              }
             }
            } while(0);
            L172: do {
             if ((label|0) == 131) {
              label = 0;
              $863 = $sample_mode;
              $864 = ($863|0)!=(0);
              if ($864) {
               break;
              }
              $865 = $2;
              $866 = $3;
              $867 = $i;
              $868 = $pp_ins;
              $869 = (($868) + ($867<<2)|0);
              $870 = HEAP32[$869>>2]|0;
              $871 = (($866) + ($870))|0;
              (_hio_seek($865,$871,0)|0);
              $872 = $2;
              $873 = (_hio_read32b($872)|0);
              HEAP32[$i1h>>2] = $873;
              $874 = ((($i1h)) + 4|0);
              $875 = $2;
              (_hio_read($874,12,1,$875)|0);
              $876 = $2;
              $877 = (_hio_read8($876)|0);
              $878 = ((($i1h)) + 16|0);
              HEAP8[$878>>0] = $877;
              $879 = $2;
              $880 = (_hio_read8($879)|0);
              $881 = ((($i1h)) + 17|0);
              HEAP8[$881>>0] = $880;
              $882 = $2;
              $883 = (_hio_read8($882)|0);
              $884 = ((($i1h)) + 18|0);
              HEAP8[$884>>0] = $883;
              $885 = $2;
              $886 = (_hio_read8($885)|0);
              $887 = ((($i1h)) + 19|0);
              HEAP8[$887>>0] = $886;
              $888 = $2;
              $889 = (_hio_read8($888)|0);
              $890 = ((($i1h)) + 20|0);
              HEAP8[$890>>0] = $889;
              $891 = $2;
              $892 = (_hio_read8($891)|0);
              $893 = ((($i1h)) + 21|0);
              HEAP8[$893>>0] = $892;
              $894 = $2;
              $895 = (_hio_read16l($894)|0);
              $896 = ((($i1h)) + 22|0);
              HEAP16[$896>>1] = $895;
              $897 = $2;
              $898 = (_hio_read16l($897)|0);
              $899 = ((($i1h)) + 24|0);
              HEAP16[$899>>1] = $898;
              $900 = $2;
              $901 = (_hio_read8($900)|0);
              $902 = ((($i1h)) + 26|0);
              HEAP8[$902>>0] = $901;
              $903 = $2;
              $904 = (_hio_read8($903)|0);
              $905 = ((($i1h)) + 27|0);
              HEAP8[$905>>0] = $904;
              $906 = $2;
              $907 = (_hio_read16l($906)|0);
              $908 = ((($i1h)) + 28|0);
              HEAP16[$908>>1] = $907;
              $909 = $2;
              $910 = (_hio_read8($909)|0);
              $911 = ((($i1h)) + 30|0);
              HEAP8[$911>>0] = $910;
              $912 = $2;
              $913 = (_hio_read8($912)|0);
              $914 = ((($i1h)) + 31|0);
              HEAP8[$914>>0] = $913;
              $915 = ((($i1h)) + 32|0);
              $916 = $2;
              $917 = (_hio_read($915,1,26,$916)|0);
              $918 = ($917|0)!=(26);
              if ($918) {
               break L110;
              }
              $919 = ((($i1h)) + 32|0);
              _fix_name($919,26);
              $920 = ((($i1h)) + 58|0);
              $921 = $2;
              $922 = (_hio_read($920,1,6,$921)|0);
              $923 = ($922|0)!=(6);
              if ($923) {
               break L110;
              }
              $924 = ((($i1h)) + 64|0);
              $925 = $2;
              $926 = (_hio_read($924,1,240,$925)|0);
              $927 = ($926|0)!=(240);
              if ($927) {
               break L110;
              }
              $928 = ((($i1h)) + 304|0);
              $929 = $2;
              $930 = (_hio_read($928,1,200,$929)|0);
              $931 = ($930|0)!=(200);
              if ($931) {
               break L110;
              }
              $932 = ((($i1h)) + 504|0);
              $933 = $2;
              $934 = (_hio_read($932,1,50,$933)|0);
              $935 = ($934|0)!=(50);
              if ($935) {
               break L110;
              }
              $936 = $xxi;
              $937 = ((($i1h)) + 32|0);
              (_copy_adjust($936,$937,25)|0);
              $938 = ((($i1h)) + 24|0);
              $939 = HEAP16[$938>>1]|0;
              $940 = $939&65535;
              $941 = $940 << 7;
              $942 = $xxi;
              $943 = ((($942)) + 40|0);
              HEAP32[$943>>2] = $941;
              $944 = $xxi;
              $945 = ((($944)) + 44|0);
              HEAP32[$945>>2] = 0;
              $946 = ((($i1h)) + 17|0);
              $947 = HEAP8[$946>>0]|0;
              $948 = $947&255;
              $949 = $948 & 1;
              $950 = ($949|0)!=(0);
              if ($950) {
               $951 = $xxi;
               $952 = ((($951)) + 44|0);
               $953 = HEAP32[$952>>2]|0;
               $954 = $953 | 1;
               HEAP32[$952>>2] = $954;
              }
              $955 = ((($i1h)) + 17|0);
              $956 = HEAP8[$955>>0]|0;
              $957 = $956&255;
              $958 = $957 & 2;
              $959 = ($958|0)!=(0);
              if ($959) {
               $960 = $xxi;
               $961 = ((($960)) + 44|0);
               $962 = HEAP32[$961>>2]|0;
               $963 = $962 | 4;
               HEAP32[$961>>2] = $963;
              }
              $964 = ((($i1h)) + 17|0);
              $965 = HEAP8[$964>>0]|0;
              $966 = $965&255;
              $967 = $966 & 4;
              $968 = ($967|0)!=(0);
              if ($968) {
               $969 = $xxi;
               $970 = ((($969)) + 44|0);
               $971 = HEAP32[$970>>2]|0;
               $972 = $971 | 18;
               HEAP32[$970>>2] = $972;
              }
              $973 = ((($i1h)) + 17|0);
              $974 = HEAP8[$973>>0]|0;
              $975 = $974&255;
              $976 = $975 & 8;
              $977 = ($976|0)!=(0);
              if ($977) {
               $978 = $xxi;
               $979 = ((($978)) + 44|0);
               $980 = HEAP32[$979>>2]|0;
               $981 = $980 | 34;
               HEAP32[$979>>2] = $981;
              }
              $982 = ((($i1h)) + 18|0);
              $983 = HEAP8[$982>>0]|0;
              $984 = $983&255;
              $985 = $xxi;
              $986 = ((($985)) + 44|0);
              $987 = ((($986)) + 20|0);
              HEAP32[$987>>2] = $984;
              $988 = ((($i1h)) + 19|0);
              $989 = HEAP8[$988>>0]|0;
              $990 = $989&255;
              $991 = $xxi;
              $992 = ((($991)) + 44|0);
              $993 = ((($992)) + 24|0);
              HEAP32[$993>>2] = $990;
              $994 = ((($i1h)) + 20|0);
              $995 = HEAP8[$994>>0]|0;
              $996 = $995&255;
              $997 = $xxi;
              $998 = ((($997)) + 44|0);
              $999 = ((($998)) + 12|0);
              HEAP32[$999>>2] = $996;
              $1000 = ((($i1h)) + 21|0);
              $1001 = HEAP8[$1000>>0]|0;
              $1002 = $1001&255;
              $1003 = $xxi;
              $1004 = ((($1003)) + 44|0);
              $1005 = ((($1004)) + 16|0);
              HEAP32[$1005>>2] = $1002;
              $k = 0;
              while(1) {
               $1006 = $k;
               $1007 = ($1006|0)<(25);
               if (!($1007)) {
                break;
               }
               $1008 = $k;
               $1009 = $1008<<1;
               $1010 = ((($i1h)) + 504|0);
               $1011 = (($1010) + ($1009)|0);
               $1012 = HEAP8[$1011>>0]|0;
               $1013 = $1012&255;
               $1014 = ($1013|0)!=(255);
               if (!($1014)) {
                break;
               }
               $1015 = $k;
               $1016 = (($1015) + 1)|0;
               $k = $1016;
              }
              $1017 = $k;
              $1018 = ($1017|0)>=(25);
              if ($1018) {
               break L110;
              }
              $1019 = $k;
              $1020 = $1019<<1;
              $1021 = ((($i1h)) + 504|0);
              $1022 = (($1021) + ($1020)|0);
              $1023 = HEAP8[$1022>>0]|0;
              $1024 = $1023&255;
              $1025 = ($1024|0)!=(255);
              if ($1025) {
               break L110;
              }
              $1026 = $k;
              $1027 = $xxi;
              $1028 = ((($1027)) + 44|0);
              $1029 = ((($1028)) + 4|0);
              HEAP32[$1029>>2] = $1026;
              while(1) {
               $1030 = $k;
               $1031 = (($1030) + -1)|0;
               $k = $1031;
               $1032 = ($1030|0)!=(0);
               if (!($1032)) {
                break;
               }
               $1033 = $k;
               $1034 = $1033<<1;
               $1035 = ((($i1h)) + 504|0);
               $1036 = (($1035) + ($1034)|0);
               $1037 = HEAP8[$1036>>0]|0;
               $1038 = $1037&255;
               $1039 = $k;
               $1040 = $1039<<1;
               $1041 = $xxi;
               $1042 = ((($1041)) + 44|0);
               $1043 = ((($1042)) + 28|0);
               $1044 = (($1043) + ($1040<<1)|0);
               HEAP16[$1044>>1] = $1038;
               $1045 = $k;
               $1046 = $1045<<1;
               $1047 = (($1046) + 1)|0;
               $1048 = ((($i1h)) + 504|0);
               $1049 = (($1048) + ($1047)|0);
               $1050 = HEAP8[$1049>>0]|0;
               $1051 = $1050&255;
               $1052 = $k;
               $1053 = $1052<<1;
               $1054 = (($1053) + 1)|0;
               $1055 = $xxi;
               $1056 = ((($1055)) + 44|0);
               $1057 = ((($1056)) + 28|0);
               $1058 = (($1057) + ($1054<<1)|0);
               HEAP16[$1058>>1] = $1051;
              }
              $j = 0;
              while(1) {
               $1059 = $j;
               $1060 = ($1059|0)<(120);
               if (!($1060)) {
                break;
               }
               $1061 = $j;
               $1062 = (($inst_map) + ($1061<<2)|0);
               HEAP32[$1062>>2] = -1;
               $1063 = $j;
               $1064 = (($1063) + 1)|0;
               $j = $1064;
              }
              $j = 0;
              $k = 0;
              while(1) {
               $1065 = $j;
               $1066 = ($1065|0)<(121);
               if (!($1066)) {
                break;
               }
               $1067 = $j;
               $1068 = ($1067|0)<(120);
               if ($1068) {
                $1069 = $j;
                $1070 = $1069<<1;
                $1071 = (($1070) + 1)|0;
                $1072 = ((($i1h)) + 64|0);
                $1073 = (($1072) + ($1071)|0);
                $1074 = HEAP8[$1073>>0]|0;
                $1075 = $1074&255;
                $1076 = (($1075) - 1)|0;
                $1077 = $1076;
               } else {
                $1077 = -1;
               }
               $c = $1077;
               $1078 = $c;
               $1079 = ($1078|0)<(0);
               $1080 = $c;
               $1081 = ($1080|0)>=(120);
               $or$cond3 = $1079 | $1081;
               if ($or$cond3) {
                $1082 = $j;
                $1083 = $xxi;
                $1084 = ((($1083)) + 512|0);
                $1085 = (($1084) + ($1082<<1)|0);
                HEAP8[$1085>>0] = 0;
                $1086 = $j;
                $1087 = $xxi;
                $1088 = ((($1087)) + 512|0);
                $1089 = (($1088) + ($1086<<1)|0);
                $1090 = ((($1089)) + 1|0);
                HEAP8[$1090>>0] = 0;
               } else {
                $1091 = $c;
                $1092 = (($inst_map) + ($1091<<2)|0);
                $1093 = HEAP32[$1092>>2]|0;
                $1094 = ($1093|0)==(-1);
                if ($1094) {
                 $1095 = $k;
                 $1096 = $c;
                 $1097 = (($inst_map) + ($1096<<2)|0);
                 HEAP32[$1097>>2] = $1095;
                 $1098 = $c;
                 $1099 = $k;
                 $1100 = (($inst_rmap) + ($1099<<2)|0);
                 HEAP32[$1100>>2] = $1098;
                 $1101 = $k;
                 $1102 = (($1101) + 1)|0;
                 $k = $1102;
                }
                $1103 = $c;
                $1104 = (($inst_map) + ($1103<<2)|0);
                $1105 = HEAP32[$1104>>2]|0;
                $1106 = $1105&255;
                $1107 = $j;
                $1108 = $xxi;
                $1109 = ((($1108)) + 512|0);
                $1110 = (($1109) + ($1107<<1)|0);
                HEAP8[$1110>>0] = $1106;
                $1111 = $j;
                $1112 = $1111<<1;
                $1113 = ((($i1h)) + 64|0);
                $1114 = (($1113) + ($1112)|0);
                $1115 = HEAP8[$1114>>0]|0;
                $1116 = $1115&255;
                $1117 = $j;
                $1118 = (($1116) - ($1117))|0;
                $1119 = $1118&255;
                $1120 = $j;
                $1121 = $xxi;
                $1122 = ((($1121)) + 512|0);
                $1123 = (($1122) + ($1120<<1)|0);
                $1124 = ((($1123)) + 1|0);
                HEAP8[$1124>>0] = $1119;
               }
               $1125 = $j;
               $1126 = (($1125) + 1)|0;
               $j = $1126;
              }
              $1127 = $k;
              $1128 = $xxi;
              $1129 = ((($1128)) + 36|0);
              HEAP32[$1129>>2] = $1127;
              $1130 = ((($i2h)) + 24|0);
              $1131 = HEAP8[$1130>>0]|0;
              $1132 = $1131&255;
              $1133 = $1132 >> 1;
              $1134 = $xxi;
              $1135 = ((($1134)) + 32|0);
              HEAP32[$1135>>2] = $1133;
              $1136 = $k;
              $1137 = ($1136|0)!=(0);
              if (!($1137)) {
               break;
              }
              $1138 = $k;
              $1139 = (_calloc(64,$1138)|0);
              $1140 = $xxi;
              $1141 = ((($1140)) + 756|0);
              HEAP32[$1141>>2] = $1139;
              $1142 = $xxi;
              $1143 = ((($1142)) + 756|0);
              $1144 = HEAP32[$1143>>2]|0;
              $1145 = ($1144|0)==(0|0);
              if ($1145) {
               break L110;
              }
              $j = 0;
              while(1) {
               $1146 = $j;
               $1147 = $k;
               $1148 = ($1146|0)<($1147|0);
               if (!($1148)) {
                break L172;
               }
               $1149 = $j;
               $1150 = $xxi;
               $1151 = ((($1150)) + 756|0);
               $1152 = HEAP32[$1151>>2]|0;
               $1153 = (($1152) + ($1149<<6)|0);
               $sub1 = $1153;
               $1154 = $j;
               $1155 = (($inst_rmap) + ($1154<<2)|0);
               $1156 = HEAP32[$1155>>2]|0;
               $1157 = $sub1;
               $1158 = ((($1157)) + 40|0);
               HEAP32[$1158>>2] = $1156;
               $1159 = ((($i1h)) + 26|0);
               $1160 = HEAP8[$1159>>0]|0;
               $1161 = $1160&255;
               $1162 = $sub1;
               $1163 = ((($1162)) + 44|0);
               HEAP32[$1163>>2] = $1161;
               $1164 = ((($i1h)) + 27|0);
               $1165 = HEAP8[$1164>>0]|0;
               $1166 = $1165&255;
               $1167 = ($1166|0)!=(0);
               $1168 = $1167 ? 1 : 0;
               $1169 = $sub1;
               $1170 = ((($1169)) + 48|0);
               HEAP32[$1170>>2] = $1168;
               $1171 = $sub1;
               $1172 = ((($1171)) + 52|0);
               HEAP32[$1172>>2] = 0;
               $1173 = $sub1;
               $1174 = ((($1173)) + 8|0);
               HEAP32[$1174>>2] = 128;
               $1175 = $j;
               $1176 = (($1175) + 1)|0;
               $j = $1176;
              }
             }
            } while(0);
            $1177 = $i;
            $1178 = (($1177) + 1)|0;
            $i = $1178;
           }
           $i = 0;
           while(1) {
            $1179 = $i;
            $1180 = $mod;
            $1181 = ((($1180)) + 144|0);
            $1182 = HEAP32[$1181>>2]|0;
            $1183 = ($1179|0)<($1182|0);
            if (!($1183)) {
             break;
            }
            $1184 = $i;
            $1185 = $mod;
            $1186 = ((($1185)) + 180|0);
            $1187 = HEAP32[$1186>>2]|0;
            $1188 = (($1187) + (($1184*52)|0)|0);
            $xxs = $1188;
            $1189 = $sample_mode;
            $1190 = ($1189|0)!=(0);
            if ($1190) {
             $1191 = (_calloc(64,1)|0);
             $1192 = $i;
             $1193 = $mod;
             $1194 = ((($1193)) + 176|0);
             $1195 = HEAP32[$1194>>2]|0;
             $1196 = (($1195) + (($1192*764)|0)|0);
             $1197 = ((($1196)) + 756|0);
             HEAP32[$1197>>2] = $1191;
             $1198 = $i;
             $1199 = $mod;
             $1200 = ((($1199)) + 176|0);
             $1201 = HEAP32[$1200>>2]|0;
             $1202 = (($1201) + (($1198*764)|0)|0);
             $1203 = ((($1202)) + 756|0);
             $1204 = HEAP32[$1203>>2]|0;
             $1205 = ($1204|0)==(0|0);
             if ($1205) {
              break L110;
             }
            }
            $1206 = $2;
            $1207 = $3;
            $1208 = $i;
            $1209 = $pp_smp;
            $1210 = (($1209) + ($1208<<2)|0);
            $1211 = HEAP32[$1210>>2]|0;
            $1212 = (($1207) + ($1211))|0;
            (_hio_seek($1206,$1212,0)|0);
            $1213 = $2;
            $1214 = (_hio_read32b($1213)|0);
            HEAP32[$ish>>2] = $1214;
            $1215 = ((($ish)) + 4|0);
            $1216 = $2;
            (_hio_read($1215,12,1,$1216)|0);
            $1217 = $2;
            $1218 = (_hio_read8($1217)|0);
            $1219 = ((($ish)) + 16|0);
            HEAP8[$1219>>0] = $1218;
            $1220 = $2;
            $1221 = (_hio_read8($1220)|0);
            $1222 = ((($ish)) + 17|0);
            HEAP8[$1222>>0] = $1221;
            $1223 = $2;
            $1224 = (_hio_read8($1223)|0);
            $1225 = ((($ish)) + 18|0);
            HEAP8[$1225>>0] = $1224;
            $1226 = $2;
            $1227 = (_hio_read8($1226)|0);
            $1228 = ((($ish)) + 19|0);
            HEAP8[$1228>>0] = $1227;
            $1229 = ((($ish)) + 20|0);
            $1230 = $2;
            $1231 = (_hio_read($1229,1,26,$1230)|0);
            $1232 = ($1231|0)!=(26);
            if ($1232) {
             break L110;
            }
            $1233 = ((($ish)) + 20|0);
            _fix_name($1233,26);
            $1234 = $2;
            $1235 = (_hio_read8($1234)|0);
            $1236 = ((($ish)) + 46|0);
            HEAP8[$1236>>0] = $1235;
            $1237 = $2;
            $1238 = (_hio_read8($1237)|0);
            $1239 = ((($ish)) + 47|0);
            HEAP8[$1239>>0] = $1238;
            $1240 = $2;
            $1241 = (_hio_read32l($1240)|0);
            $1242 = ((($ish)) + 48|0);
            HEAP32[$1242>>2] = $1241;
            $1243 = $2;
            $1244 = (_hio_read32l($1243)|0);
            $1245 = ((($ish)) + 52|0);
            HEAP32[$1245>>2] = $1244;
            $1246 = $2;
            $1247 = (_hio_read32l($1246)|0);
            $1248 = ((($ish)) + 56|0);
            HEAP32[$1248>>2] = $1247;
            $1249 = $2;
            $1250 = (_hio_read32l($1249)|0);
            $1251 = ((($ish)) + 60|0);
            HEAP32[$1251>>2] = $1250;
            $1252 = $2;
            $1253 = (_hio_read32l($1252)|0);
            $1254 = ((($ish)) + 64|0);
            HEAP32[$1254>>2] = $1253;
            $1255 = $2;
            $1256 = (_hio_read32l($1255)|0);
            $1257 = ((($ish)) + 68|0);
            HEAP32[$1257>>2] = $1256;
            $1258 = $2;
            $1259 = (_hio_read32l($1258)|0);
            $1260 = ((($ish)) + 72|0);
            HEAP32[$1260>>2] = $1259;
            $1261 = $2;
            $1262 = (_hio_read8($1261)|0);
            $1263 = ((($ish)) + 76|0);
            HEAP8[$1263>>0] = $1262;
            $1264 = $2;
            $1265 = (_hio_read8($1264)|0);
            $1266 = ((($ish)) + 77|0);
            HEAP8[$1266>>0] = $1265;
            $1267 = $2;
            $1268 = (_hio_read8($1267)|0);
            $1269 = ((($ish)) + 78|0);
            HEAP8[$1269>>0] = $1268;
            $1270 = $2;
            $1271 = (_hio_read8($1270)|0);
            $1272 = ((($ish)) + 79|0);
            HEAP8[$1272>>0] = $1271;
            $1273 = HEAP32[$ish>>2]|0;
            $1274 = ($1273|0)!=(1229803603);
            do {
             if (!($1274)) {
              $1275 = ((($ish)) + 18|0);
              $1276 = HEAP8[$1275>>0]|0;
              $1277 = $1276&255;
              $1278 = $1277 & 2;
              $1279 = ($1278|0)!=(0);
              if ($1279) {
               $1280 = $xxs;
               $1281 = ((($1280)) + 44|0);
               HEAP32[$1281>>2] = 1;
              }
              $1282 = ((($ish)) + 48|0);
              $1283 = HEAP32[$1282>>2]|0;
              $1284 = $xxs;
              $1285 = ((($1284)) + 32|0);
              HEAP32[$1285>>2] = $1283;
              $1286 = $xxs;
              $1287 = ((($1286)) + 32|0);
              $1288 = HEAP32[$1287>>2]|0;
              $1289 = ($1288|0)>(268435456);
              if ($1289) {
               break L110;
              }
              $1290 = ((($ish)) + 52|0);
              $1291 = HEAP32[$1290>>2]|0;
              $1292 = $xxs;
              $1293 = ((($1292)) + 36|0);
              HEAP32[$1293>>2] = $1291;
              $1294 = ((($ish)) + 56|0);
              $1295 = HEAP32[$1294>>2]|0;
              $1296 = $xxs;
              $1297 = ((($1296)) + 40|0);
              HEAP32[$1297>>2] = $1295;
              $1298 = ((($ish)) + 18|0);
              $1299 = HEAP8[$1298>>0]|0;
              $1300 = $1299&255;
              $1301 = $1300 & 16;
              $1302 = ($1301|0)!=(0);
              $1303 = $1302 ? 2 : 0;
              $1304 = $xxs;
              $1305 = ((($1304)) + 44|0);
              $1306 = HEAP32[$1305>>2]|0;
              $1307 = $1306 | $1303;
              HEAP32[$1305>>2] = $1307;
              $1308 = ((($ish)) + 18|0);
              $1309 = HEAP8[$1308>>0]|0;
              $1310 = $1309&255;
              $1311 = $1310 & 64;
              $1312 = ($1311|0)!=(0);
              $1313 = $1312 ? 4 : 0;
              $1314 = $xxs;
              $1315 = ((($1314)) + 44|0);
              $1316 = HEAP32[$1315>>2]|0;
              $1317 = $1316 | $1313;
              HEAP32[$1315>>2] = $1317;
              $1318 = $sample_mode;
              $1319 = ($1318|0)!=(0);
              if ($1319) {
               $1320 = ((($ish)) + 19|0);
               $1321 = HEAP8[$1320>>0]|0;
               $1322 = $1321&255;
               $1323 = $i;
               $1324 = $mod;
               $1325 = ((($1324)) + 176|0);
               $1326 = HEAP32[$1325>>2]|0;
               $1327 = (($1326) + (($1323*764)|0)|0);
               $1328 = ((($1327)) + 756|0);
               $1329 = HEAP32[$1328>>2]|0;
               HEAP32[$1329>>2] = $1322;
               $1330 = $i;
               $1331 = $mod;
               $1332 = ((($1331)) + 176|0);
               $1333 = HEAP32[$1332>>2]|0;
               $1334 = (($1333) + (($1330*764)|0)|0);
               $1335 = ((($1334)) + 756|0);
               $1336 = HEAP32[$1335>>2]|0;
               $1337 = ((($1336)) + 8|0);
               HEAP32[$1337>>2] = 128;
               $1338 = $i;
               $1339 = $i;
               $1340 = $mod;
               $1341 = ((($1340)) + 176|0);
               $1342 = HEAP32[$1341>>2]|0;
               $1343 = (($1342) + (($1339*764)|0)|0);
               $1344 = ((($1343)) + 756|0);
               $1345 = HEAP32[$1344>>2]|0;
               $1346 = ((($1345)) + 40|0);
               HEAP32[$1346>>2] = $1338;
               $1347 = $xxs;
               $1348 = ((($1347)) + 32|0);
               $1349 = HEAP32[$1348>>2]|0;
               $1350 = ($1349|0)!=(0);
               $1351 = $1350 ^ 1;
               $1352 = $1351 ^ 1;
               $1353 = $1352&1;
               $1354 = $i;
               $1355 = $mod;
               $1356 = ((($1355)) + 176|0);
               $1357 = HEAP32[$1356>>2]|0;
               $1358 = (($1357) + (($1354*764)|0)|0);
               $1359 = ((($1358)) + 36|0);
               HEAP32[$1359>>2] = $1353;
               $1360 = $mod;
               $1361 = $i;
               $1362 = ((($ish)) + 20|0);
               (_instrument_name($1360,$1361,$1362,25)|0);
              } else {
               $1363 = $xxs;
               $1364 = ((($ish)) + 20|0);
               (_copy_adjust($1363,$1364,25)|0);
              }
              $j = 0;
              while(1) {
               $1365 = $j;
               $1366 = $mod;
               $1367 = ((($1366)) + 140|0);
               $1368 = HEAP32[$1367>>2]|0;
               $1369 = ($1365|0)<($1368|0);
               if (!($1369)) {
                break;
               }
               $k = 0;
               while(1) {
                $1370 = $k;
                $1371 = $j;
                $1372 = $mod;
                $1373 = ((($1372)) + 176|0);
                $1374 = HEAP32[$1373>>2]|0;
                $1375 = (($1374) + (($1371*764)|0)|0);
                $1376 = ((($1375)) + 36|0);
                $1377 = HEAP32[$1376>>2]|0;
                $1378 = ($1370|0)<($1377|0);
                if (!($1378)) {
                 break;
                }
                $1379 = $k;
                $1380 = $j;
                $1381 = $mod;
                $1382 = ((($1381)) + 176|0);
                $1383 = HEAP32[$1382>>2]|0;
                $1384 = (($1383) + (($1380*764)|0)|0);
                $1385 = ((($1384)) + 756|0);
                $1386 = HEAP32[$1385>>2]|0;
                $1387 = (($1386) + ($1379<<6)|0);
                $sub2 = $1387;
                $1388 = $sub2;
                $1389 = ((($1388)) + 40|0);
                $1390 = HEAP32[$1389>>2]|0;
                $1391 = $i;
                $1392 = ($1390|0)==($1391|0);
                do {
                 if ($1392) {
                  $1393 = ((($ish)) + 19|0);
                  $1394 = HEAP8[$1393>>0]|0;
                  $1395 = $1394&255;
                  $1396 = $sub2;
                  HEAP32[$1396>>2] = $1395;
                  $1397 = ((($ish)) + 17|0);
                  $1398 = HEAP8[$1397>>0]|0;
                  $1399 = $1398&255;
                  $1400 = $sub2;
                  $1401 = ((($1400)) + 4|0);
                  HEAP32[$1401>>2] = $1399;
                  $1402 = ((($ish)) + 76|0);
                  $1403 = HEAP8[$1402>>0]|0;
                  $1404 = $1403&255;
                  $1405 = $sub2;
                  $1406 = ((($1405)) + 28|0);
                  HEAP32[$1406>>2] = $1404;
                  $1407 = ((($ish)) + 77|0);
                  $1408 = HEAP8[$1407>>0]|0;
                  $1409 = $1408&255;
                  $1410 = $1409 >> 1;
                  $1411 = $sub2;
                  $1412 = ((($1411)) + 24|0);
                  HEAP32[$1412>>2] = $1410;
                  $1413 = ((($ish)) + 79|0);
                  $1414 = HEAP8[$1413>>0]|0;
                  $1415 = $1414&255;
                  $1416 = $sub2;
                  $1417 = ((($1416)) + 20|0);
                  HEAP32[$1417>>2] = $1415;
                  $1418 = ((($ish)) + 78|0);
                  $1419 = HEAP8[$1418>>0]|0;
                  $1420 = $1419&255;
                  $1421 = (255 - ($1420))|0;
                  $1422 = $1421 >> 1;
                  $1423 = $sub2;
                  $1424 = ((($1423)) + 32|0);
                  HEAP32[$1424>>2] = $1422;
                  $1425 = ((($ish)) + 60|0);
                  $1426 = HEAP32[$1425>>2]|0;
                  $1427 = $k;
                  $1428 = $j;
                  $1429 = $mod;
                  $1430 = ((($1429)) + 176|0);
                  $1431 = HEAP32[$1430>>2]|0;
                  $1432 = (($1431) + (($1428*764)|0)|0);
                  $1433 = ((($1432)) + 756|0);
                  $1434 = HEAP32[$1433>>2]|0;
                  $1435 = (($1434) + ($1427<<6)|0);
                  $1436 = ((($1435)) + 12|0);
                  $1437 = $k;
                  $1438 = $j;
                  $1439 = $mod;
                  $1440 = ((($1439)) + 176|0);
                  $1441 = HEAP32[$1440>>2]|0;
                  $1442 = (($1441) + (($1438*764)|0)|0);
                  $1443 = ((($1442)) + 756|0);
                  $1444 = HEAP32[$1443>>2]|0;
                  $1445 = (($1444) + ($1437<<6)|0);
                  $1446 = ((($1445)) + 16|0);
                  _c2spd_to_note($1426,$1436,$1446);
                  $1447 = ((($ish)) + 47|0);
                  $1448 = HEAP8[$1447>>0]|0;
                  $1449 = $1448&255;
                  $1450 = $1449 & 128;
                  $1451 = ($1450|0)!=(0);
                  if (!($1451)) {
                   break;
                  }
                  $1452 = ((($ish)) + 47|0);
                  $1453 = HEAP8[$1452>>0]|0;
                  $1454 = $1453&255;
                  $1455 = $1454 & 127;
                  $1456 = $1455<<2;
                  $1457 = $sub2;
                  $1458 = ((($1457)) + 8|0);
                  HEAP32[$1458>>2] = $1456;
                 }
                } while(0);
                $1459 = $k;
                $1460 = (($1459) + 1)|0;
                $k = $1460;
               }
               $1461 = $j;
               $1462 = (($1461) + 1)|0;
               $j = $1462;
              }
              $1463 = ((($ish)) + 18|0);
              $1464 = HEAP8[$1463>>0]|0;
              $1465 = $1464&255;
              $1466 = $1465 & 1;
              $1467 = ($1466|0)!=(0);
              if (!($1467)) {
               break;
              }
              $1468 = $xxs;
              $1469 = ((($1468)) + 32|0);
              $1470 = HEAP32[$1469>>2]|0;
              $1471 = ($1470|0)>(1);
              if (!($1471)) {
               break;
              }
              $cvt = 0;
              $1472 = $2;
              $1473 = $3;
              $1474 = ((($ish)) + 72|0);
              $1475 = HEAP32[$1474>>2]|0;
              $1476 = (($1473) + ($1475))|0;
              $1477 = (_hio_seek($1472,$1476,0)|0);
              $1478 = (0)!=($1477|0);
              if ($1478) {
               break L110;
              }
              $1479 = $xxs;
              $1480 = ((($1479)) + 40|0);
              $1481 = HEAP32[$1480>>2]|0;
              $1482 = $xxs;
              $1483 = ((($1482)) + 32|0);
              $1484 = HEAP32[$1483>>2]|0;
              $1485 = ($1481|0)>($1484|0);
              if ($1485) {
               label = 199;
              } else {
               $1486 = $xxs;
               $1487 = ((($1486)) + 36|0);
               $1488 = HEAP32[$1487>>2]|0;
               $1489 = $xxs;
               $1490 = ((($1489)) + 40|0);
               $1491 = HEAP32[$1490>>2]|0;
               $1492 = ($1488|0)>=($1491|0);
               if ($1492) {
                label = 199;
               }
              }
              if ((label|0) == 199) {
               label = 0;
               $1493 = $xxs;
               $1494 = ((($1493)) + 44|0);
               $1495 = HEAP32[$1494>>2]|0;
               $1496 = $1495 & -3;
               HEAP32[$1494>>2] = $1496;
              }
              $1497 = ((($ish)) + 46|0);
              $1498 = HEAP8[$1497>>0]|0;
              $1499 = $1498&255;
              $1500 = $1499 ^ -1;
              $1501 = $1500 & 1;
              $1502 = ($1501|0)!=(0);
              if ($1502) {
               $1503 = $cvt;
               $1504 = $1503 | 2;
               $cvt = $1504;
              }
              $1505 = ((($ish)) + 18|0);
              $1506 = HEAP8[$1505>>0]|0;
              $1507 = $1506&255;
              $1508 = $1507 & 8;
              $1509 = ($1508|0)!=(0);
              if (!($1509)) {
               $1544 = $1;
               $1545 = $2;
               $1546 = $cvt;
               $1547 = $i;
               $1548 = $mod;
               $1549 = ((($1548)) + 180|0);
               $1550 = HEAP32[$1549>>2]|0;
               $1551 = (($1550) + (($1547*52)|0)|0);
               $1552 = (_load_sample($1544,$1545,$1546,$1551,0)|0);
               $1553 = ($1552|0)<(0);
               if ($1553) {
                break L110;
               } else {
                break;
               }
              }
              $1510 = $xxs;
              $1511 = ((($1510)) + 32|0);
              $1512 = HEAP32[$1511>>2]|0;
              $1513 = $1512<<1;
              $1514 = (_calloc(1,$1513)|0);
              $buf = $1514;
              $1515 = $buf;
              $1516 = ($1515|0)==(0|0);
              if ($1516) {
               break L110;
              }
              $1517 = ((($ish)) + 18|0);
              $1518 = HEAP8[$1517>>0]|0;
              $1519 = $1518&255;
              $1520 = $1519 & 2;
              $1521 = ($1520|0)!=(0);
              $1522 = $2;
              $1523 = $buf;
              $1524 = $xxs;
              $1525 = ((($1524)) + 32|0);
              $1526 = HEAP32[$1525>>2]|0;
              $1527 = ((($ish)) + 46|0);
              $1528 = HEAP8[$1527>>0]|0;
              $1529 = $1528&255;
              $1530 = $1529 & 4;
              if ($1521) {
               (_itsex_decompress16($1522,$1523,$1526,$1530)|0);
              } else {
               (_itsex_decompress8($1522,$1523,$1526,$1530)|0);
              }
              $1531 = $1;
              $1532 = $cvt;
              $1533 = 16 | $1532;
              $1534 = $i;
              $1535 = $mod;
              $1536 = ((($1535)) + 180|0);
              $1537 = HEAP32[$1536>>2]|0;
              $1538 = (($1537) + (($1534*52)|0)|0);
              $1539 = $buf;
              $1540 = (_load_sample($1531,0,$1533,$1538,$1539)|0);
              $ret = $1540;
              $1541 = $ret;
              $1542 = ($1541|0)<(0);
              $1543 = $buf;
              _free($1543);
              if ($1542) {
               break L110;
              }
             }
            } while(0);
            $1554 = $i;
            $1555 = (($1554) + 1)|0;
            $i = $1555;
           }
           $max_ch = 0;
           $i = 0;
           while(1) {
            $1556 = $i;
            $1557 = $mod;
            $1558 = ((($1557)) + 128|0);
            $1559 = HEAP32[$1558>>2]|0;
            $1560 = ($1556|0)<($1559|0);
            if (!($1560)) {
             break;
            }
            $1561 = $i;
            $1562 = $pp_pat;
            $1563 = (($1562) + ($1561<<2)|0);
            $1564 = HEAP32[$1563>>2]|0;
            $1565 = ($1564|0)==(0);
            L281: do {
             if (!($1565)) {
              $1566 = $2;
              $1567 = $3;
              $1568 = $i;
              $1569 = $pp_pat;
              $1570 = (($1569) + ($1568<<2)|0);
              $1571 = HEAP32[$1570>>2]|0;
              $1572 = (($1567) + ($1571))|0;
              (_hio_seek($1566,$1572,0)|0);
              $1573 = $2;
              $1574 = (_hio_read16l($1573)|0);
              $1575 = $1574&65535;
              $pat_len = $1575;
              $1576 = $2;
              (_hio_read16l($1576)|0);
              dest=$mask; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
              $1577 = $2;
              (_hio_read16l($1577)|0);
              $1578 = $2;
              (_hio_read16l($1578)|0);
              while(1) {
               $1579 = $pat_len;
               $1580 = (($1579) + -1)|0;
               $pat_len = $1580;
               $1581 = ($1580|0)>=(0);
               if (!($1581)) {
                break L281;
               }
               $1582 = $2;
               $1583 = (_hio_read8($1582)|0);
               $b = $1583;
               $1584 = $b;
               $1585 = $1584&255;
               $1586 = ($1585|0)==(0);
               if ($1586) {
                continue;
               }
               $1587 = $b;
               $1588 = $1587&255;
               $1589 = (($1588) - 1)|0;
               $1590 = $1589 & 63;
               $c = $1590;
               $1591 = $c;
               $1592 = $max_ch;
               $1593 = ($1591|0)>($1592|0);
               if ($1593) {
                $1594 = $c;
                $max_ch = $1594;
               }
               $1595 = $b;
               $1596 = $1595&255;
               $1597 = $1596 & 128;
               $1598 = ($1597|0)!=(0);
               if ($1598) {
                $1599 = $2;
                $1600 = (_hio_read8($1599)|0);
                $1601 = $c;
                $1602 = (($mask) + ($1601)|0);
                HEAP8[$1602>>0] = $1600;
                $1603 = $pat_len;
                $1604 = (($1603) + -1)|0;
                $pat_len = $1604;
               }
               $1605 = $c;
               $1606 = (($mask) + ($1605)|0);
               $1607 = HEAP8[$1606>>0]|0;
               $1608 = $1607&255;
               $1609 = $1608 & 1;
               $1610 = ($1609|0)!=(0);
               if ($1610) {
                $1611 = $2;
                (_hio_read8($1611)|0);
                $1612 = $pat_len;
                $1613 = (($1612) + -1)|0;
                $pat_len = $1613;
               }
               $1614 = $c;
               $1615 = (($mask) + ($1614)|0);
               $1616 = HEAP8[$1615>>0]|0;
               $1617 = $1616&255;
               $1618 = $1617 & 2;
               $1619 = ($1618|0)!=(0);
               if ($1619) {
                $1620 = $2;
                (_hio_read8($1620)|0);
                $1621 = $pat_len;
                $1622 = (($1621) + -1)|0;
                $pat_len = $1622;
               }
               $1623 = $c;
               $1624 = (($mask) + ($1623)|0);
               $1625 = HEAP8[$1624>>0]|0;
               $1626 = $1625&255;
               $1627 = $1626 & 4;
               $1628 = ($1627|0)!=(0);
               if ($1628) {
                $1629 = $2;
                (_hio_read8($1629)|0);
                $1630 = $pat_len;
                $1631 = (($1630) + -1)|0;
                $pat_len = $1631;
               }
               $1632 = $c;
               $1633 = (($mask) + ($1632)|0);
               $1634 = HEAP8[$1633>>0]|0;
               $1635 = $1634&255;
               $1636 = $1635 & 8;
               $1637 = ($1636|0)!=(0);
               if (!($1637)) {
                continue;
               }
               $1638 = $2;
               (_hio_read8($1638)|0);
               $1639 = $2;
               (_hio_read8($1639)|0);
               $1640 = $pat_len;
               $1641 = (($1640) - 2)|0;
               $pat_len = $1641;
              }
             }
            } while(0);
            $1642 = $i;
            $1643 = (($1642) + 1)|0;
            $i = $1643;
           }
           $1644 = $max_ch;
           $1645 = (($1644) + 1)|0;
           $1646 = $mod;
           $1647 = ((($1646)) + 136|0);
           HEAP32[$1647>>2] = $1645;
           $1648 = $mod;
           $1649 = ((($1648)) + 128|0);
           $1650 = HEAP32[$1649>>2]|0;
           $1651 = $mod;
           $1652 = ((($1651)) + 136|0);
           $1653 = HEAP32[$1652>>2]|0;
           $1654 = Math_imul($1650, $1653)|0;
           $1655 = $mod;
           $1656 = ((($1655)) + 132|0);
           HEAP32[$1656>>2] = $1654;
           dest=$last_fxp; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           $1657 = $mod;
           $1658 = (_pattern_init($1657)|0);
           $1659 = ($1658|0)<(0);
           if (!($1659)) {
            $i = 0;
            while(1) {
             $1660 = $i;
             $1661 = $mod;
             $1662 = ((($1661)) + 128|0);
             $1663 = HEAP32[$1662>>2]|0;
             $1664 = ($1660|0)<($1663|0);
             if (!($1664)) {
              break;
             }
             $1665 = $mod;
             $1666 = $i;
             $1667 = (_pattern_alloc($1665,$1666)|0);
             $1668 = ($1667|0)<(0);
             if ($1668) {
              break L110;
             }
             $r = 0;
             $1669 = $i;
             $1670 = $pp_pat;
             $1671 = (($1670) + ($1669<<2)|0);
             $1672 = HEAP32[$1671>>2]|0;
             $1673 = ($1672|0)==(0);
             L310: do {
              if ($1673) {
               $1674 = $i;
               $1675 = $mod;
               $1676 = ((($1675)) + 168|0);
               $1677 = HEAP32[$1676>>2]|0;
               $1678 = (($1677) + ($1674<<2)|0);
               $1679 = HEAP32[$1678>>2]|0;
               HEAP32[$1679>>2] = 64;
               $j = 0;
               while(1) {
                $1680 = $j;
                $1681 = $mod;
                $1682 = ((($1681)) + 136|0);
                $1683 = HEAP32[$1682>>2]|0;
                $1684 = ($1680|0)<($1683|0);
                if (!($1684)) {
                 break L310;
                }
                $1685 = $i;
                $1686 = $mod;
                $1687 = ((($1686)) + 136|0);
                $1688 = HEAP32[$1687>>2]|0;
                $1689 = Math_imul($1685, $1688)|0;
                $1690 = $j;
                $1691 = (($1689) + ($1690))|0;
                $tnum = $1691;
                $1692 = $mod;
                $1693 = $tnum;
                $1694 = (_track_alloc($1692,$1693,64)|0);
                $1695 = ($1694|0)<(0);
                if ($1695) {
                 break L110;
                }
                $1696 = $tnum;
                $1697 = $j;
                $1698 = $i;
                $1699 = $mod;
                $1700 = ((($1699)) + 168|0);
                $1701 = HEAP32[$1700>>2]|0;
                $1702 = (($1701) + ($1698<<2)|0);
                $1703 = HEAP32[$1702>>2]|0;
                $1704 = ((($1703)) + 4|0);
                $1705 = (($1704) + ($1697<<2)|0);
                HEAP32[$1705>>2] = $1696;
                $1706 = $j;
                $1707 = (($1706) + 1)|0;
                $j = $1707;
               }
              } else {
               $1708 = $2;
               $1709 = $3;
               $1710 = $i;
               $1711 = $pp_pat;
               $1712 = (($1711) + ($1710<<2)|0);
               $1713 = HEAP32[$1712>>2]|0;
               $1714 = (($1709) + ($1713))|0;
               (_hio_seek($1708,$1714,0)|0);
               $1715 = $2;
               $1716 = (_hio_read16l($1715)|0);
               $1717 = $1716&65535;
               $pat_len = $1717;
               $1718 = $2;
               $1719 = (_hio_read16l($1718)|0);
               $1720 = $1719&65535;
               $1721 = $i;
               $1722 = $mod;
               $1723 = ((($1722)) + 168|0);
               $1724 = HEAP32[$1723>>2]|0;
               $1725 = (($1724) + ($1721<<2)|0);
               $1726 = HEAP32[$1725>>2]|0;
               HEAP32[$1726>>2] = $1720;
               $1727 = $mod;
               $1728 = $i;
               $1729 = (_tracks_in_pattern_alloc($1727,$1728)|0);
               $1730 = ($1729|0)<(0);
               if ($1730) {
                break L110;
               }
               dest=$mask; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
               $1731 = $2;
               (_hio_read16l($1731)|0);
               $1732 = $2;
               (_hio_read16l($1732)|0);
               while(1) {
                $1733 = $pat_len;
                $1734 = (($1733) + -1)|0;
                $pat_len = $1734;
                $1735 = ($1734|0)>=(0);
                if (!($1735)) {
                 break L310;
                }
                $1736 = $2;
                $1737 = (_hio_read8($1736)|0);
                $b = $1737;
                $1738 = $b;
                $1739 = ($1738<<24>>24)!=(0);
                if (!($1739)) {
                 $1740 = $r;
                 $1741 = (($1740) + 1)|0;
                 $r = $1741;
                 continue;
                }
                $1742 = $b;
                $1743 = $1742&255;
                $1744 = (($1743) - 1)|0;
                $1745 = $1744 & 63;
                $c = $1745;
                $1746 = $b;
                $1747 = $1746&255;
                $1748 = $1747 & 128;
                $1749 = ($1748|0)!=(0);
                if ($1749) {
                 $1750 = $2;
                 $1751 = (_hio_read8($1750)|0);
                 $1752 = $c;
                 $1753 = (($mask) + ($1752)|0);
                 HEAP8[$1753>>0] = $1751;
                 $1754 = $pat_len;
                 $1755 = (($1754) + -1)|0;
                 $pat_len = $1755;
                }
                $1756 = $c;
                $1757 = $mod;
                $1758 = ((($1757)) + 136|0);
                $1759 = HEAP32[$1758>>2]|0;
                $1760 = ($1756|0)>=($1759|0);
                do {
                 if ($1760) {
                  label = 247;
                 } else {
                  $1761 = $r;
                  $1762 = $i;
                  $1763 = $mod;
                  $1764 = ((($1763)) + 168|0);
                  $1765 = HEAP32[$1764>>2]|0;
                  $1766 = (($1765) + ($1762<<2)|0);
                  $1767 = HEAP32[$1766>>2]|0;
                  $1768 = HEAP32[$1767>>2]|0;
                  $1769 = ($1761|0)>=($1768|0);
                  if ($1769) {
                   label = 247;
                   break;
                  }
                  $1770 = $r;
                  $1771 = $c;
                  $1772 = $i;
                  $1773 = $1;
                  $1774 = ((($1773)) + 168|0);
                  $1775 = HEAP32[$1774>>2]|0;
                  $1776 = (($1775) + ($1772<<2)|0);
                  $1777 = HEAP32[$1776>>2]|0;
                  $1778 = ((($1777)) + 4|0);
                  $1779 = (($1778) + ($1771<<2)|0);
                  $1780 = HEAP32[$1779>>2]|0;
                  $1781 = $1;
                  $1782 = ((($1781)) + 172|0);
                  $1783 = HEAP32[$1782>>2]|0;
                  $1784 = (($1783) + ($1780<<2)|0);
                  $1785 = HEAP32[$1784>>2]|0;
                  $1786 = ((($1785)) + 4|0);
                  $1787 = (($1786) + ($1770<<3)|0);
                  $event = $1787;
                 }
                } while(0);
                if ((label|0) == 247) {
                 label = 0;
                 $event = $dummy;
                }
                $1788 = $c;
                $1789 = (($mask) + ($1788)|0);
                $1790 = HEAP8[$1789>>0]|0;
                $1791 = $1790&255;
                $1792 = $1791 & 1;
                $1793 = ($1792|0)!=(0);
                if ($1793) {
                 $1794 = $2;
                 $1795 = (_hio_read8($1794)|0);
                 $b = $1795;
                 $1796 = $b;
                 $1797 = $1796&255;
                 do {
                  if ((($1797|0) == 255)) {
                   $b = -127;
                  } else if ((($1797|0) == 254)) {
                   $b = -126;
                  } else {
                   $1798 = $b;
                   $1799 = $1798&255;
                   $1800 = ($1799|0)>(119);
                   if ($1800) {
                    $b = -125;
                    break;
                   } else {
                    $1801 = $b;
                    $1802 = (($1801) + 1)<<24>>24;
                    $b = $1802;
                    break;
                   }
                  }
                 } while(0);
                 $1803 = $b;
                 $1804 = $event;
                 HEAP8[$1804>>0] = $1803;
                 $1805 = $c;
                 $1806 = (($lastevent) + ($1805<<3)|0);
                 HEAP8[$1806>>0] = $1803;
                 $1807 = $pat_len;
                 $1808 = (($1807) + -1)|0;
                 $pat_len = $1808;
                }
                $1809 = $c;
                $1810 = (($mask) + ($1809)|0);
                $1811 = HEAP8[$1810>>0]|0;
                $1812 = $1811&255;
                $1813 = $1812 & 2;
                $1814 = ($1813|0)!=(0);
                if ($1814) {
                 $1815 = $2;
                 $1816 = (_hio_read8($1815)|0);
                 $b = $1816;
                 $1817 = $b;
                 $1818 = $event;
                 $1819 = ((($1818)) + 1|0);
                 HEAP8[$1819>>0] = $1817;
                 $1820 = $c;
                 $1821 = (($lastevent) + ($1820<<3)|0);
                 $1822 = ((($1821)) + 1|0);
                 HEAP8[$1822>>0] = $1817;
                 $1823 = $pat_len;
                 $1824 = (($1823) + -1)|0;
                 $pat_len = $1824;
                }
                $1825 = $c;
                $1826 = (($mask) + ($1825)|0);
                $1827 = HEAP8[$1826>>0]|0;
                $1828 = $1827&255;
                $1829 = $1828 & 4;
                $1830 = ($1829|0)!=(0);
                if ($1830) {
                 $1831 = $2;
                 $1832 = (_hio_read8($1831)|0);
                 $b = $1832;
                 $1833 = $b;
                 $1834 = $event;
                 $1835 = ((($1834)) + 2|0);
                 HEAP8[$1835>>0] = $1833;
                 $1836 = $c;
                 $1837 = (($lastevent) + ($1836<<3)|0);
                 $1838 = ((($1837)) + 2|0);
                 HEAP8[$1838>>0] = $1833;
                 $1839 = $event;
                 _xlat_volfx($1839);
                 $1840 = $pat_len;
                 $1841 = (($1840) + -1)|0;
                 $pat_len = $1841;
                }
                $1842 = $c;
                $1843 = (($mask) + ($1842)|0);
                $1844 = HEAP8[$1843>>0]|0;
                $1845 = $1844&255;
                $1846 = $1845 & 8;
                $1847 = ($1846|0)!=(0);
                if ($1847) {
                 $1848 = $2;
                 $1849 = (_hio_read8($1848)|0);
                 $b = $1849;
                 $1850 = $b;
                 $1851 = $event;
                 $1852 = ((($1851)) + 3|0);
                 HEAP8[$1852>>0] = $1850;
                 $1853 = $2;
                 $1854 = (_hio_read8($1853)|0);
                 $1855 = $event;
                 $1856 = ((($1855)) + 4|0);
                 HEAP8[$1856>>0] = $1854;
                 $1857 = $c;
                 $1858 = $event;
                 $1859 = $new_fx;
                 _xlat_fx178($1857,$1858,$last_fxp,$1859);
                 $1860 = $event;
                 $1861 = ((($1860)) + 3|0);
                 $1862 = HEAP8[$1861>>0]|0;
                 $1863 = $c;
                 $1864 = (($lastevent) + ($1863<<3)|0);
                 $1865 = ((($1864)) + 3|0);
                 HEAP8[$1865>>0] = $1862;
                 $1866 = $event;
                 $1867 = ((($1866)) + 4|0);
                 $1868 = HEAP8[$1867>>0]|0;
                 $1869 = $c;
                 $1870 = (($lastevent) + ($1869<<3)|0);
                 $1871 = ((($1870)) + 4|0);
                 HEAP8[$1871>>0] = $1868;
                 $1872 = $pat_len;
                 $1873 = (($1872) - 2)|0;
                 $pat_len = $1873;
                }
                $1874 = $c;
                $1875 = (($mask) + ($1874)|0);
                $1876 = HEAP8[$1875>>0]|0;
                $1877 = $1876&255;
                $1878 = $1877 & 16;
                $1879 = ($1878|0)!=(0);
                if ($1879) {
                 $1880 = $c;
                 $1881 = (($lastevent) + ($1880<<3)|0);
                 $1882 = HEAP8[$1881>>0]|0;
                 $1883 = $event;
                 HEAP8[$1883>>0] = $1882;
                }
                $1884 = $c;
                $1885 = (($mask) + ($1884)|0);
                $1886 = HEAP8[$1885>>0]|0;
                $1887 = $1886&255;
                $1888 = $1887 & 32;
                $1889 = ($1888|0)!=(0);
                if ($1889) {
                 $1890 = $c;
                 $1891 = (($lastevent) + ($1890<<3)|0);
                 $1892 = ((($1891)) + 1|0);
                 $1893 = HEAP8[$1892>>0]|0;
                 $1894 = $event;
                 $1895 = ((($1894)) + 1|0);
                 HEAP8[$1895>>0] = $1893;
                }
                $1896 = $c;
                $1897 = (($mask) + ($1896)|0);
                $1898 = HEAP8[$1897>>0]|0;
                $1899 = $1898&255;
                $1900 = $1899 & 64;
                $1901 = ($1900|0)!=(0);
                if ($1901) {
                 $1902 = $c;
                 $1903 = (($lastevent) + ($1902<<3)|0);
                 $1904 = ((($1903)) + 2|0);
                 $1905 = HEAP8[$1904>>0]|0;
                 $1906 = $event;
                 $1907 = ((($1906)) + 2|0);
                 HEAP8[$1907>>0] = $1905;
                 $1908 = $event;
                 _xlat_volfx($1908);
                }
                $1909 = $c;
                $1910 = (($mask) + ($1909)|0);
                $1911 = HEAP8[$1910>>0]|0;
                $1912 = $1911&255;
                $1913 = $1912 & 128;
                $1914 = ($1913|0)!=(0);
                if (!($1914)) {
                 continue;
                }
                $1915 = $c;
                $1916 = (($lastevent) + ($1915<<3)|0);
                $1917 = ((($1916)) + 3|0);
                $1918 = HEAP8[$1917>>0]|0;
                $1919 = $event;
                $1920 = ((($1919)) + 3|0);
                HEAP8[$1920>>0] = $1918;
                $1921 = $c;
                $1922 = (($lastevent) + ($1921<<3)|0);
                $1923 = ((($1922)) + 4|0);
                $1924 = HEAP8[$1923>>0]|0;
                $1925 = $event;
                $1926 = ((($1925)) + 4|0);
                HEAP8[$1926>>0] = $1924;
               }
              }
             } while(0);
             $1927 = $i;
             $1928 = (($1927) + 1)|0;
             $i = $1928;
            }
            $1929 = $pp_pat;
            _free($1929);
            $1930 = $pp_smp;
            _free($1930);
            $1931 = $pp_ins;
            _free($1931);
            $1932 = ((($ifh)) + 46|0);
            $1933 = HEAP16[$1932>>1]|0;
            $1934 = $1933&65535;
            $1935 = $1934 & 1;
            $1936 = ($1935|0)!=(0);
            do {
             if ($1936) {
              $1937 = ((($ifh)) + 54|0);
              $1938 = HEAP16[$1937>>1]|0;
              $1939 = $1938&65535;
              $1940 = (($1939) + 1)|0;
              $1941 = (_malloc($1940)|0);
              $1942 = $1;
              $1943 = ((($1942)) + 1220|0);
              HEAP32[$1943>>2] = $1941;
              $1944 = ($1941|0)!=(0|0);
              if (!($1944)) {
               break;
              }
              $1945 = $2;
              $1946 = $3;
              $1947 = ((($ifh)) + 56|0);
              $1948 = HEAP32[$1947>>2]|0;
              $1949 = (($1946) + ($1948))|0;
              (_hio_seek($1945,$1949,0)|0);
              $j = 0;
              while(1) {
               $1950 = $j;
               $1951 = ((($ifh)) + 54|0);
               $1952 = HEAP16[$1951>>1]|0;
               $1953 = $1952&65535;
               $1954 = ($1950|0)<($1953|0);
               if (!($1954)) {
                break;
               }
               $1955 = $2;
               $1956 = (_hio_read8($1955)|0);
               $b = $1956;
               $1957 = $b;
               $1958 = $1957&255;
               $1959 = ($1958|0)==(13);
               do {
                if ($1959) {
                 $b = 10;
                } else {
                 $1960 = $b;
                 $1961 = $1960&255;
                 $1962 = ($1961|0)<(32);
                 if (!($1962)) {
                  $1963 = $b;
                  $1964 = $1963&255;
                  $1965 = ($1964|0)>(127);
                  if (!($1965)) {
                   break;
                  }
                 }
                 $1966 = $b;
                 $1967 = $1966&255;
                 $1968 = ($1967|0)!=(10);
                 if (!($1968)) {
                  break;
                 }
                 $1969 = $b;
                 $1970 = $1969&255;
                 $1971 = ($1970|0)!=(9);
                 if (!($1971)) {
                  break;
                 }
                 $b = 46;
                }
               } while(0);
               $1972 = $b;
               $1973 = $j;
               $1974 = $1;
               $1975 = ((($1974)) + 1220|0);
               $1976 = HEAP32[$1975>>2]|0;
               $1977 = (($1976) + ($1973)|0);
               HEAP8[$1977>>0] = $1972;
               $1978 = $j;
               $1979 = (($1978) + 1)|0;
               $j = $1979;
              }
              $1980 = $j;
              $1981 = $1;
              $1982 = ((($1981)) + 1220|0);
              $1983 = HEAP32[$1982>>2]|0;
              $1984 = (($1983) + ($1980)|0);
              HEAP8[$1984>>0] = 0;
             }
            } while(0);
            $1985 = $1;
            $1986 = ((($1985)) + 1284|0);
            $1987 = HEAP32[$1986>>2]|0;
            $1988 = $1987 | 1092061219;
            HEAP32[$1986>>2] = $1988;
            $1989 = ((($ifh)) + 44|0);
            $1990 = HEAP16[$1989>>1]|0;
            $1991 = $1990&65535;
            $1992 = $1991 & 32;
            $1993 = ($1992|0)!=(0);
            $1994 = $1;
            $1995 = ((($1994)) + 1284|0);
            $1996 = HEAP32[$1995>>2]|0;
            if ($1993) {
             $1997 = $1996 | 4194304;
             HEAP32[$1995>>2] = $1997;
            } else {
             $1998 = $1996 | 1024;
             HEAP32[$1995>>2] = $1998;
            }
            $1999 = $new_fx;
            $2000 = ($1999|0)!=(0);
            $2001 = $1;
            $2002 = ((($2001)) + 1284|0);
            $2003 = HEAP32[$2002>>2]|0;
            if ($2000) {
             $2004 = $2003 | 2621440;
             HEAP32[$2002>>2] = $2004;
            } else {
             $2005 = $2003 & -1048577;
             HEAP32[$2002>>2] = $2005;
             $2006 = $1;
             $2007 = ((($2006)) + 1284|0);
             $2008 = HEAP32[$2007>>2]|0;
             $2009 = $2008 | 8388608;
             HEAP32[$2007>>2] = $2009;
            }
            $2010 = $sample_mode;
            $2011 = ($2010|0)!=(0);
            if ($2011) {
             $2012 = $1;
             $2013 = ((($2012)) + 1284|0);
             $2014 = HEAP32[$2013>>2]|0;
             $2015 = $2014 & -1073774593;
             HEAP32[$2013>>2] = $2015;
            }
            $2016 = $1;
            $2017 = ((($2016)) + 1272|0);
            HEAP32[$2017>>2] = 128;
            $2018 = ((($ifh)) + 48|0);
            $2019 = HEAP8[$2018>>0]|0;
            $2020 = $2019&255;
            $2021 = $1;
            $2022 = ((($2021)) + 1276|0);
            HEAP32[$2022>>2] = $2020;
            $2023 = $1;
            $2024 = ((($2023)) + 1288|0);
            HEAP32[$2024>>2] = 3;
            $0 = 0;
            $2028 = $0;
            STACKTOP = sp;return ($2028|0);
           }
          }
         } while(0);
         $2025 = $pp_pat;
         _free($2025);
        }
        $2026 = $pp_smp;
        _free($2026);
       }
       $2027 = $pp_ins;
       _free($2027);
      }
     }
    }
   }
  }
 } while(0);
 $0 = -1;
 $2028 = $0;
 STACKTOP = sp;return ($2028|0);
}
function _fix_name($s,$l) {
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $l;
 $2 = $1;
 $3 = (($2) + -1)|0;
 $1 = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $1;
  $6 = ($4|0)<($5|0);
  $7 = $i;
  if (!($6)) {
   break;
  }
  $8 = $0;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $i;
   $14 = $0;
   $15 = (($14) + ($13)|0);
   HEAP8[$15>>0] = 32;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = (($7) + -1)|0;
 $i = $18;
 while(1) {
  $19 = $i;
  $20 = ($19|0)>=(0);
  if (!($20)) {
   label = 12;
   break;
  }
  $21 = $i;
  $22 = $0;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(32);
  if (!($26)) {
   label = 12;
   break;
  }
  $27 = $i;
  $28 = $0;
  $29 = (($28) + ($27)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(32);
  if ($32) {
   $33 = $i;
   $34 = $0;
   $35 = (($34) + ($33)|0);
   HEAP8[$35>>0] = 0;
  }
  $36 = $i;
  $37 = (($36) + -1)|0;
  $i = $37;
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _read_envelope($ei,$env,$f) {
 $ei = $ei|0;
 $env = $env|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ei;
 $1 = $env;
 $2 = $f;
 $3 = $2;
 $4 = (_hio_read8($3)|0);
 $5 = $1;
 HEAP8[$5>>0] = $4;
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $8 = $1;
 $9 = ((($8)) + 1|0);
 HEAP8[$9>>0] = $7;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>=(32);
 if ($14) {
  $15 = $1;
  HEAP8[$15>>0] = 0;
  $16 = $1;
  $17 = ((($16)) + 1|0);
  HEAP8[$17>>0] = 0;
  STACKTOP = sp;return;
 }
 $18 = $2;
 $19 = (_hio_read8($18)|0);
 $20 = $1;
 $21 = ((($20)) + 2|0);
 HEAP8[$21>>0] = $19;
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = $1;
 $25 = ((($24)) + 3|0);
 HEAP8[$25>>0] = $23;
 $26 = $2;
 $27 = (_hio_read8($26)|0);
 $28 = $1;
 $29 = ((($28)) + 4|0);
 HEAP8[$29>>0] = $27;
 $30 = $2;
 $31 = (_hio_read8($30)|0);
 $32 = $1;
 $33 = ((($32)) + 5|0);
 HEAP8[$33>>0] = $31;
 $j = 0;
 while(1) {
  $34 = $j;
  $35 = ($34|0)<(25);
  $36 = $2;
  $37 = (_hio_read8($36)|0);
  if (!($35)) {
   break;
  }
  $38 = $j;
  $39 = $1;
  $40 = ((($39)) + 6|0);
  $41 = (($40) + ($38<<2)|0);
  HEAP8[$41>>0] = $37;
  $42 = $2;
  $43 = (_hio_read16l($42)|0);
  $44 = $j;
  $45 = $1;
  $46 = ((($45)) + 6|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = ((($47)) + 2|0);
  HEAP16[$48>>1] = $43;
  $49 = $j;
  $50 = (($49) + 1)|0;
  $j = $50;
 }
 $51 = $1;
 $52 = ((($51)) + 106|0);
 HEAP8[$52>>0] = $37;
 $53 = $1;
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 & 1;
 $57 = ($56|0)!=(0);
 $58 = $57 ? 1 : 0;
 $59 = $0;
 HEAP32[$59>>2] = $58;
 $60 = $1;
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $62 & 2;
 $64 = ($63|0)!=(0);
 $65 = $64 ? 4 : 0;
 $66 = $0;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 | $65;
 HEAP32[$66>>2] = $68;
 $69 = $1;
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 & 4;
 $73 = ($72|0)!=(0);
 $74 = $73 ? 18 : 0;
 $75 = $0;
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 | $74;
 HEAP32[$75>>2] = $77;
 $78 = $1;
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $80 & 8;
 $82 = ($81|0)!=(0);
 $83 = $82 ? 32 : 0;
 $84 = $0;
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 | $83;
 HEAP32[$84>>2] = $86;
 $87 = $1;
 $88 = ((($87)) + 1|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = $0;
 $92 = ((($91)) + 4|0);
 HEAP32[$92>>2] = $90;
 $93 = $1;
 $94 = ((($93)) + 4|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = $0;
 $98 = ((($97)) + 12|0);
 HEAP32[$98>>2] = $96;
 $99 = $1;
 $100 = ((($99)) + 5|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $0;
 $104 = ((($103)) + 16|0);
 HEAP32[$104>>2] = $102;
 $105 = $1;
 $106 = ((($105)) + 2|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $0;
 $110 = ((($109)) + 20|0);
 HEAP32[$110>>2] = $108;
 $111 = $1;
 $112 = ((($111)) + 3|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $0;
 $116 = ((($115)) + 24|0);
 HEAP32[$116>>2] = $114;
 $117 = $0;
 $118 = ((($117)) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)>(0);
 if ($120) {
  $121 = $0;
  $122 = ((($121)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)<(32);
  if ($124) {
   $j = 0;
   while(1) {
    $125 = $j;
    $126 = $0;
    $127 = ((($126)) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($125|0)<($128|0);
    if (!($129)) {
     break;
    }
    $130 = $j;
    $131 = $1;
    $132 = ((($131)) + 6|0);
    $133 = (($132) + ($130<<2)|0);
    $134 = ((($133)) + 2|0);
    $135 = HEAP16[$134>>1]|0;
    $136 = $j;
    $137 = $136<<1;
    $138 = $0;
    $139 = ((($138)) + 28|0);
    $140 = (($139) + ($137<<1)|0);
    HEAP16[$140>>1] = $135;
    $141 = $j;
    $142 = $1;
    $143 = ((($142)) + 6|0);
    $144 = (($143) + ($141<<2)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145 << 24 >> 24;
    $147 = $j;
    $148 = $147<<1;
    $149 = (($148) + 1)|0;
    $150 = $0;
    $151 = ((($150)) + 28|0);
    $152 = (($151) + ($149<<1)|0);
    HEAP16[$152>>1] = $146;
    $153 = $j;
    $154 = (($153) + 1)|0;
    $j = $154;
   }
   STACKTOP = sp;return;
  }
 }
 $155 = $0;
 $156 = HEAP32[$155>>2]|0;
 $157 = $156 & -2;
 HEAP32[$155>>2] = $157;
 STACKTOP = sp;return;
}
function _xlat_volfx($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $b = $4;
 $5 = $0;
 $6 = ((($5)) + 2|0);
 HEAP8[$6>>0] = 0;
 $7 = $b;
 $8 = ($7|0)<=(64);
 $9 = $b;
 if ($8) {
  $10 = (($9) + 1)|0;
  $11 = $10&255;
  $12 = $0;
  $13 = ((($12)) + 2|0);
  HEAP8[$13>>0] = $11;
  STACKTOP = sp;return;
 }
 $14 = ($9|0)>=(65);
 $15 = $b;
 $16 = ($15|0)<=(74);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $0;
  $18 = ((($17)) + 5|0);
  HEAP8[$18>>0] = -62;
  $19 = $b;
  $20 = (($19) - 65)|0;
  $21 = $20&255;
  $22 = $0;
  $23 = ((($22)) + 6|0);
  HEAP8[$23>>0] = $21;
  STACKTOP = sp;return;
 }
 $24 = $b;
 $25 = ($24|0)>=(75);
 $26 = $b;
 $27 = ($26|0)<=(84);
 $or$cond3 = $25 & $27;
 if ($or$cond3) {
  $28 = $0;
  $29 = ((($28)) + 5|0);
  HEAP8[$29>>0] = -61;
  $30 = $b;
  $31 = (($30) - 75)|0;
  $32 = $31&255;
  $33 = $0;
  $34 = ((($33)) + 6|0);
  HEAP8[$34>>0] = $32;
  STACKTOP = sp;return;
 }
 $35 = $b;
 $36 = ($35|0)>=(85);
 $37 = $b;
 $38 = ($37|0)<=(94);
 $or$cond5 = $36 & $38;
 if ($or$cond5) {
  $39 = $0;
  $40 = ((($39)) + 5|0);
  HEAP8[$40>>0] = -64;
  $41 = $b;
  $42 = (($41) - 85)|0;
  $43 = $42&255;
  $44 = $0;
  $45 = ((($44)) + 6|0);
  HEAP8[$45>>0] = $43;
  STACKTOP = sp;return;
 }
 $46 = $b;
 $47 = ($46|0)>=(95);
 $48 = $b;
 $49 = ($48|0)<=(104);
 $or$cond7 = $47 & $49;
 if ($or$cond7) {
  $50 = $0;
  $51 = ((($50)) + 5|0);
  HEAP8[$51>>0] = -63;
  $52 = $b;
  $53 = (($52) - 95)|0;
  $54 = $53&255;
  $55 = $0;
  $56 = ((($55)) + 6|0);
  HEAP8[$56>>0] = $54;
  STACKTOP = sp;return;
 }
 $57 = $b;
 $58 = ($57|0)>=(105);
 $59 = $b;
 $60 = ($59|0)<=(114);
 $or$cond9 = $58 & $60;
 if ($or$cond9) {
  $61 = $0;
  $62 = ((($61)) + 5|0);
  HEAP8[$62>>0] = 2;
  $63 = $b;
  $64 = (($63) - 105)|0;
  $65 = $64 << 2;
  $66 = $65&255;
  $67 = $0;
  $68 = ((($67)) + 6|0);
  HEAP8[$68>>0] = $66;
  STACKTOP = sp;return;
 }
 $69 = $b;
 $70 = ($69|0)>=(115);
 $71 = $b;
 $72 = ($71|0)<=(124);
 $or$cond11 = $70 & $72;
 if ($or$cond11) {
  $73 = $0;
  $74 = ((($73)) + 5|0);
  HEAP8[$74>>0] = 1;
  $75 = $b;
  $76 = (($75) - 115)|0;
  $77 = $76 << 2;
  $78 = $77&255;
  $79 = $0;
  $80 = ((($79)) + 6|0);
  HEAP8[$80>>0] = $78;
  STACKTOP = sp;return;
 }
 $81 = $b;
 $82 = ($81|0)>=(128);
 $83 = $b;
 $84 = ($83|0)<=(192);
 $or$cond13 = $82 & $84;
 $85 = $b;
 if ($or$cond13) {
  $86 = ($85|0)==(192);
  if ($86) {
   $b = 191;
  }
  $87 = $0;
  $88 = ((($87)) + 5|0);
  HEAP8[$88>>0] = 8;
  $89 = $b;
  $90 = (($89) - 128)|0;
  $91 = $90 << 2;
  $92 = $91&255;
  $93 = $0;
  $94 = ((($93)) + 6|0);
  HEAP8[$94>>0] = $92;
  STACKTOP = sp;return;
 }
 $95 = ($85|0)>=(193);
 $96 = $b;
 $97 = ($96|0)<=(202);
 $or$cond15 = $95 & $97;
 if ($or$cond15) {
  $98 = $0;
  $99 = ((($98)) + 5|0);
  HEAP8[$99>>0] = 3;
  $100 = $b;
  $101 = (($100) - 193)|0;
  $102 = $101 << 2;
  $103 = $102&255;
  $104 = $0;
  $105 = ((($104)) + 6|0);
  HEAP8[$105>>0] = $103;
  STACKTOP = sp;return;
 }
 $106 = $b;
 $107 = ($106|0)>=(203);
 $108 = $b;
 $109 = ($108|0)<=(212);
 $or$cond17 = $107 & $109;
 if (!($or$cond17)) {
  STACKTOP = sp;return;
 }
 $110 = $0;
 $111 = ((($110)) + 5|0);
 HEAP8[$111>>0] = 4;
 $112 = $b;
 $113 = (($112) - 203)|0;
 $114 = $113&255;
 $115 = $0;
 $116 = ((($115)) + 6|0);
 HEAP8[$116>>0] = $114;
 STACKTOP = sp;return;
}
function _xlat_fx178($c,$e,$last_fxp,$new_fx) {
 $c = $c|0;
 $e = $e|0;
 $last_fxp = $last_fxp|0;
 $new_fx = $new_fx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $e;
 $2 = $last_fxp;
 $3 = $new_fx;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 240;
 $9 = $8 >> 4;
 $10 = $9&255;
 $h = $10;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 & 15;
 $16 = $15&255;
 $l = $16;
 $17 = $1;
 $18 = ((($17)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (3904 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $1;
 $24 = ((($23)) + 3|0);
 HEAP8[$24>>0] = $22;
 $25 = $22&255;
 L1: do {
  switch ($25|0) {
  case 16:  {
   $215 = $1;
   $216 = ((($215)) + 4|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = ($218|0)>(128);
   if ($219) {
    $220 = $1;
    $221 = ((($220)) + 4|0);
    HEAP8[$221>>0] = 0;
    $222 = $1;
    $223 = ((($222)) + 3|0);
    HEAP8[$223>>0] = 0;
   }
   break;
  }
  case 29:  {
   $190 = $3;
   $191 = ($190|0)!=(0);
   if (!($191)) {
    $192 = $1;
    $193 = ((($192)) + 4|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194&255;
    $196 = ($195|0)!=(0);
    if ($196) {
     $197 = $1;
     $198 = ((($197)) + 4|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = $199&255;
     $201 = $200 & 240;
     $202 = $201 >> 4;
     $203 = (($202) + 1)|0;
     $204 = $203 << 4;
     $205 = $1;
     $206 = ((($205)) + 4|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $207&255;
     $209 = $208 & 15;
     $210 = (($209) + 1)|0;
     $211 = $204 | $210;
     $212 = $211&255;
     $213 = $1;
     $214 = ((($213)) + 4|0);
     HEAP8[$214>>0] = $212;
    }
   }
   break;
  }
  case 132:  {
   $163 = $1;
   $164 = ((($163)) + 4|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = ($166|0)>(127);
   if ($167) {
    $168 = $1;
    $169 = ((($168)) + 4|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = ($171|0)<(144);
    if ($172) {
     $173 = $1;
     $174 = ((($173)) + 3|0);
     HEAP8[$174>>0] = -123;
     $175 = $1;
     $176 = ((($175)) + 4|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $177&255;
     $179 = (($178) - 128)|0;
     $180 = $179<<4;
     $181 = $180&255;
     $182 = $1;
     $183 = ((($182)) + 4|0);
     HEAP8[$183>>0] = $181;
     break L1;
    }
   }
   $184 = $1;
   $185 = ((($184)) + 4|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = $187<<1;
   $189 = $188&255;
   HEAP8[$185>>0] = $189;
   break;
  }
  case 255:  {
   $224 = $1;
   $225 = ((($224)) + 4|0);
   HEAP8[$225>>0] = 0;
   $226 = $1;
   $227 = ((($226)) + 3|0);
   HEAP8[$227>>0] = 0;
   break;
  }
  case 254:  {
   $26 = $1;
   $27 = ((($26)) + 3|0);
   HEAP8[$27>>0] = 14;
   $28 = $h;
   $29 = $28&255;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 4|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34|0)==(0);
    if ($35) {
     $36 = $0;
     $37 = $2;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $1;
     $41 = ((($40)) + 4|0);
     HEAP8[$41>>0] = $39;
     $42 = $1;
     $43 = ((($42)) + 4|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $46 = $45 & 240;
     $47 = $46 >> 4;
     $48 = $47&255;
     $h = $48;
     $49 = $1;
     $50 = ((($49)) + 4|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = $52 & 15;
     $54 = $53&255;
     $l = $54;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   if ((label|0) == 5) {
    $55 = $1;
    $56 = ((($55)) + 4|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $0;
    $59 = $2;
    $60 = (($59) + ($58)|0);
    HEAP8[$60>>0] = $57;
   }
   $61 = $h;
   $62 = $61&255;
   do {
    switch ($62|0) {
    case 9:  {
     $120 = $1;
     $121 = ((($120)) + 3|0);
     HEAP8[$121>>0] = -115;
     $122 = $l;
     $123 = $1;
     $124 = ((($123)) + 4|0);
     HEAP8[$124>>0] = $122;
     break L1;
     break;
    }
    case 11:  {
     $130 = $l;
     $131 = $130&255;
     $132 = 96 | $131;
     $133 = $132&255;
     $134 = $1;
     $135 = ((($134)) + 4|0);
     HEAP8[$135>>0] = $133;
     break L1;
     break;
    }
    case 6:  {
     $98 = $l;
     $99 = $98&255;
     $100 = 224 | $99;
     $101 = $100&255;
     $102 = $1;
     $103 = ((($102)) + 4|0);
     HEAP8[$103>>0] = $101;
     break L1;
     break;
    }
    case 2:  {
     $69 = $l;
     $70 = $69&255;
     $71 = 80 | $70;
     $72 = $71&255;
     $73 = $1;
     $74 = ((($73)) + 4|0);
     HEAP8[$74>>0] = $72;
     break L1;
     break;
    }
    case 10:  {
     $125 = $1;
     $126 = ((($125)) + 3|0);
     HEAP8[$126>>0] = -116;
     $127 = $l;
     $128 = $1;
     $129 = ((($128)) + 4|0);
     HEAP8[$129>>0] = $127;
     break L1;
     break;
    }
    case 8:  {
     $112 = $1;
     $113 = ((($112)) + 3|0);
     HEAP8[$113>>0] = 8;
     $114 = $l;
     $115 = $114&255;
     $116 = $115 << 4;
     $117 = $116&255;
     $118 = $1;
     $119 = ((($118)) + 4|0);
     HEAP8[$119>>0] = $117;
     break L1;
     break;
    }
    case 14:  {
     $154 = $1;
     $155 = ((($154)) + 3|0);
     HEAP8[$155>>0] = -120;
     $156 = $l;
     $157 = $1;
     $158 = ((($157)) + 4|0);
     HEAP8[$158>>0] = $156;
     break L1;
     break;
    }
    case 3:  {
     $75 = $l;
     $76 = $75&255;
     $77 = 64 | $76;
     $78 = $77&255;
     $79 = $1;
     $80 = ((($79)) + 4|0);
     HEAP8[$80>>0] = $78;
     break L1;
     break;
    }
    case 13: case 12:  {
     $136 = $l;
     $137 = $1;
     $138 = ((($137)) + 4|0);
     HEAP8[$138>>0] = $136;
     $139 = $136&255;
     $140 = ($139|0)==(0);
     if ($140) {
      $141 = $1;
      $142 = ((($141)) + 4|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = (($143) + 1)<<24>>24;
      HEAP8[$142>>0] = $144;
     }
     $145 = $h;
     $146 = $145&255;
     $147 = $146 << 4;
     $148 = $1;
     $149 = ((($148)) + 4|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = $151 | $147;
     $153 = $152&255;
     HEAP8[$149>>0] = $153;
     break L1;
     break;
    }
    case 4:  {
     $81 = $l;
     $82 = $81&255;
     $83 = 112 | $82;
     $84 = $83&255;
     $85 = $1;
     $86 = ((($85)) + 4|0);
     HEAP8[$86>>0] = $84;
     break L1;
     break;
    }
    case 1:  {
     $63 = $l;
     $64 = $63&255;
     $65 = 48 | $64;
     $66 = $65&255;
     $67 = $1;
     $68 = ((($67)) + 4|0);
     HEAP8[$68>>0] = $66;
     break L1;
     break;
    }
    case 5:  {
     $87 = $l;
     $88 = $87&255;
     $89 = ($88|0)<=(3);
     $90 = $1;
     if ($89) {
      $91 = ((($90)) + 3|0);
      HEAP8[$91>>0] = -117;
      $92 = $l;
      $93 = $1;
      $94 = ((($93)) + 4|0);
      HEAP8[$94>>0] = $92;
      break L1;
     } else {
      $95 = ((($90)) + 4|0);
      HEAP8[$95>>0] = 0;
      $96 = $1;
      $97 = ((($96)) + 3|0);
      HEAP8[$97>>0] = 0;
      break L1;
     }
     break;
    }
    case 7:  {
     $104 = $1;
     $105 = ((($104)) + 3|0);
     HEAP8[$105>>0] = -125;
     $106 = $1;
     $107 = ((($106)) + 4|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = $108&255;
     $110 = $109 & 15;
     $111 = $110&255;
     HEAP8[$107>>0] = $111;
     break L1;
     break;
    }
    default: {
     $159 = $1;
     $160 = ((($159)) + 4|0);
     HEAP8[$160>>0] = 0;
     $161 = $1;
     $162 = ((($161)) + 3|0);
     HEAP8[$162>>0] = 0;
     break L1;
    }
    }
   } while(0);
   break;
  }
  default: {
  }
  }
 } while(0);
 $228 = $1;
 $229 = ((($228)) + 3|0);
 $230 = HEAP8[$229>>0]|0;
 $231 = $230&255;
 $232 = ($231|0)==(9);
 if (!($232)) {
  STACKTOP = sp;return;
 }
 $233 = $1;
 $234 = ((($233)) + 5|0);
 $235 = HEAP8[$234>>0]|0;
 $236 = $235&255;
 $237 = ($236|0)==(3);
 if (!($237)) {
  STACKTOP = sp;return;
 }
 $238 = $1;
 $239 = ((($238)) + 6|0);
 HEAP8[$239>>0] = 0;
 $240 = $1;
 $241 = ((($240)) + 5|0);
 HEAP8[$241>>0] = 0;
 STACKTOP = sp;return;
}
function _stx_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 20)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,8,$7)|0);
 $9 = ($8>>>0)<(8);
 do {
  if ($9) {
   $0 = -1;
  } else {
   $10 = (_memcmp($buf,4032,8)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = (_memcmp($buf,3968,8)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $0 = -1;
     break;
    }
   }
   $14 = $1;
   $15 = $3;
   $16 = (($15) + 60)|0;
   (_hio_seek($14,$16,0)|0);
   $17 = $1;
   $18 = (_hio_read($buf,1,4,$17)|0);
   $19 = ($18>>>0)<(4);
   if ($19) {
    $0 = -1;
    break;
   }
   $20 = (_memcmp($buf,4048,4)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    $0 = -1;
    break;
   } else {
    $22 = $1;
    $23 = $3;
    $24 = (($23) + 0)|0;
    (_hio_seek($22,$24,0)|0);
    $25 = $1;
    $26 = $2;
    _read_title($25,$26,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _stx_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bmod2stm = 0, $broken = 0, $c = 0, $dummy = 0, $event = 0, $i = 0, $mod = 0, $n = 0, $pp_ins = 0, $pp_pat = 0, $r = 0, $sfh = 0, $sih = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $x16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dummy = sp + 224|0;
 $sfh = sp + 152|0;
 $sih = sp + 24|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $broken = 0;
 $event = 0;
 $bmod2stm = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($sfh,20,1,$7)|0);
 $8 = ((($sfh)) + 20|0);
 $9 = $2;
 (_hio_read($8,8,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read16l($10)|0);
 $12 = ((($sfh)) + 28|0);
 HEAP16[$12>>1] = $11;
 $13 = $2;
 $14 = (_hio_read16l($13)|0);
 $15 = ((($sfh)) + 30|0);
 HEAP16[$15>>1] = $14;
 $16 = $2;
 $17 = (_hio_read16l($16)|0);
 $18 = ((($sfh)) + 32|0);
 HEAP16[$18>>1] = $17;
 $19 = $2;
 $20 = (_hio_read16l($19)|0);
 $21 = ((($sfh)) + 34|0);
 HEAP16[$21>>1] = $20;
 $22 = $2;
 $23 = (_hio_read16l($22)|0);
 $24 = ((($sfh)) + 36|0);
 HEAP16[$24>>1] = $23;
 $25 = $2;
 $26 = (_hio_read16l($25)|0);
 $27 = ((($sfh)) + 38|0);
 HEAP16[$27>>1] = $26;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = ((($sfh)) + 40|0);
 HEAP16[$30>>1] = $29;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = ((($sfh)) + 42|0);
 HEAP8[$33>>0] = $32;
 $34 = $2;
 $35 = (_hio_read8($34)|0);
 $36 = ((($sfh)) + 43|0);
 HEAP8[$36>>0] = $35;
 $37 = $2;
 $38 = (_hio_read16l($37)|0);
 $39 = ((($sfh)) + 44|0);
 HEAP16[$39>>1] = $38;
 $40 = $2;
 $41 = (_hio_read16l($40)|0);
 $42 = ((($sfh)) + 46|0);
 HEAP16[$42>>1] = $41;
 $43 = $2;
 $44 = (_hio_read16l($43)|0);
 $45 = ((($sfh)) + 48|0);
 HEAP16[$45>>1] = $44;
 $46 = $2;
 $47 = (_hio_read16l($46)|0);
 $48 = ((($sfh)) + 50|0);
 HEAP16[$48>>1] = $47;
 $49 = $2;
 $50 = (_hio_read16l($49)|0);
 $51 = ((($sfh)) + 52|0);
 HEAP16[$51>>1] = $50;
 $52 = $2;
 $53 = (_hio_read16l($52)|0);
 $54 = ((($sfh)) + 54|0);
 HEAP16[$54>>1] = $53;
 $55 = $2;
 $56 = (_hio_read16l($55)|0);
 $57 = ((($sfh)) + 56|0);
 HEAP16[$57>>1] = $56;
 $58 = $2;
 $59 = (_hio_read16l($58)|0);
 $60 = ((($sfh)) + 58|0);
 HEAP16[$60>>1] = $59;
 $61 = ((($sfh)) + 60|0);
 $62 = $2;
 (_hio_read($61,4,1,$62)|0);
 $63 = ((($sfh)) + 48|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = ($65|0)>(254);
 if (!($66)) {
  $67 = ((($sfh)) + 50|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = ($69|0)>(256);
  if (!($70)) {
   $71 = ((($sfh)) + 52|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72&65535;
   $74 = ($73|0)>(256);
   if (!($74)) {
    $75 = ((($sfh)) + 20|0);
    $76 = (_strncmp($75,3968,8)|0);
    $77 = ($76|0)!=(0);
    if (!($77)) {
     $bmod2stm = 1;
    }
    $78 = ((($sfh)) + 50|0);
    $79 = HEAP16[$78>>1]|0;
    $80 = $79&65535;
    $81 = $mod;
    $82 = ((($81)) + 140|0);
    HEAP32[$82>>2] = $80;
    $83 = ((($sfh)) + 48|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84&65535;
    $86 = $mod;
    $87 = ((($86)) + 128|0);
    HEAP32[$87>>2] = $85;
    $88 = $mod;
    $89 = ((($88)) + 128|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $mod;
    $92 = ((($91)) + 136|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = Math_imul($90, $93)|0;
    $95 = $mod;
    $96 = ((($95)) + 132|0);
    HEAP32[$96>>2] = $94;
    $97 = ((($sfh)) + 52|0);
    $98 = HEAP16[$97>>1]|0;
    $99 = $98&65535;
    $100 = $mod;
    $101 = ((($100)) + 156|0);
    HEAP32[$101>>2] = $99;
    $102 = ((($sfh)) + 43|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = $104 & 240;
    $106 = $105 >> 4;
    $107 = $mod;
    $108 = ((($107)) + 148|0);
    HEAP32[$108>>2] = $106;
    $109 = $mod;
    $110 = ((($109)) + 140|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $mod;
    $113 = ((($112)) + 144|0);
    HEAP32[$113>>2] = $111;
    $114 = $1;
    $115 = ((($114)) + 1264|0);
    HEAP32[$115>>2] = 8363;
    $116 = $2;
    $117 = $3;
    $118 = ((($sfh)) + 32|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = $119&65535;
    $121 = $120 << 4;
    $122 = (($117) + ($121))|0;
    (_hio_seek($116,$122,0)|0);
    $123 = $2;
    $124 = (_hio_read16l($123)|0);
    $x16 = $124;
    $125 = $2;
    $126 = $3;
    $127 = $x16;
    $128 = $127&65535;
    $129 = $128 << 4;
    $130 = (($126) + ($129))|0;
    (_hio_seek($125,$130,0)|0);
    $131 = $2;
    $132 = (_hio_read16l($131)|0);
    $x16 = $132;
    $133 = $x16;
    $134 = $133&65535;
    $135 = ((($sfh)) + 28|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = $136&65535;
    $138 = ($134|0)==($137|0);
    if ($138) {
     $broken = 1;
    }
    $139 = $mod;
    (_strncpy(($139|0),($sfh|0),20)|0);
    $140 = $bmod2stm;
    $141 = ($140|0)!=(0);
    if ($141) {
     $142 = $1;
     _set_type($142,3984,$vararg_buffer);
    } else {
     $143 = $mod;
     $144 = ((($143)) + 64|0);
     $145 = $broken;
     $146 = ($145|0)!=(0);
     $147 = $146 ? 0 : 1;
     HEAP32[$vararg_buffer1>>2] = $147;
     (_snprintf($144,64,4000,$vararg_buffer1)|0);
    }
    $148 = $mod;
    $149 = ((($148)) + 128|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (_calloc(2,$150)|0);
    $pp_pat = $151;
    $152 = $pp_pat;
    $153 = ($152|0)==(0|0);
    L15: do {
     if (!($153)) {
      $154 = $mod;
      $155 = ((($154)) + 140|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (_calloc(2,$156)|0);
      $pp_ins = $157;
      $158 = $pp_ins;
      $159 = ($158|0)==(0|0);
      if (!($159)) {
       $160 = $2;
       $161 = $3;
       $162 = ((($sfh)) + 32|0);
       $163 = HEAP16[$162>>1]|0;
       $164 = $163&65535;
       $165 = $164 << 4;
       $166 = (($161) + ($165))|0;
       (_hio_seek($160,$166,0)|0);
       $i = 0;
       while(1) {
        $167 = $i;
        $168 = $mod;
        $169 = ((($168)) + 128|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ($167|0)<($170|0);
        $172 = $2;
        if (!($171)) {
         break;
        }
        $173 = (_hio_read16l($172)|0);
        $174 = $i;
        $175 = $pp_pat;
        $176 = (($175) + ($174<<1)|0);
        HEAP16[$176>>1] = $173;
        $177 = $i;
        $178 = (($177) + 1)|0;
        $i = $178;
       }
       $179 = $3;
       $180 = ((($sfh)) + 34|0);
       $181 = HEAP16[$180>>1]|0;
       $182 = $181&65535;
       $183 = $182 << 4;
       $184 = (($179) + ($183))|0;
       (_hio_seek($172,$184,0)|0);
       $i = 0;
       while(1) {
        $185 = $i;
        $186 = $mod;
        $187 = ((($186)) + 140|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($185|0)<($188|0);
        $190 = $2;
        if (!($189)) {
         break;
        }
        $191 = (_hio_read16l($190)|0);
        $192 = $i;
        $193 = $pp_ins;
        $194 = (($193) + ($192<<1)|0);
        HEAP16[$194>>1] = $191;
        $195 = $i;
        $196 = (($195) + 1)|0;
        $i = $196;
       }
       $197 = $3;
       $198 = ((($sfh)) + 36|0);
       $199 = HEAP16[$198>>1]|0;
       $200 = $199&65535;
       $201 = $200 << 4;
       $202 = (($197) + ($201))|0;
       $203 = (($202) + 32)|0;
       (_hio_seek($190,$203,0)|0);
       $i = 0;
       while(1) {
        $204 = $i;
        $205 = $mod;
        $206 = ((($205)) + 156|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = ($204|0)<($207|0);
        if (!($208)) {
         break;
        }
        $209 = $2;
        $210 = (_hio_read8($209)|0);
        $211 = $i;
        $212 = $mod;
        $213 = ((($212)) + 952|0);
        $214 = (($213) + ($211)|0);
        HEAP8[$214>>0] = $210;
        $215 = $2;
        (_hio_seek($215,4,1)|0);
        $216 = $i;
        $217 = (($216) + 1)|0;
        $i = $217;
       }
       $218 = $mod;
       $219 = (_instrument_init($218)|0);
       $220 = ($219|0)<(0);
       L31: do {
        if (!($220)) {
         $i = 0;
         while(1) {
          $221 = $i;
          $222 = $mod;
          $223 = ((($222)) + 140|0);
          $224 = HEAP32[$223>>2]|0;
          $225 = ($221|0)<($224|0);
          $226 = $mod;
          if (!($225)) {
           break;
          }
          $227 = $i;
          $228 = (_subinstrument_alloc($226,$227,1)|0);
          $229 = ($228|0)<(0);
          if ($229) {
           break L31;
          }
          $230 = $2;
          $231 = $3;
          $232 = $i;
          $233 = $pp_ins;
          $234 = (($233) + ($232<<1)|0);
          $235 = HEAP16[$234>>1]|0;
          $236 = $235&65535;
          $237 = $236 << 4;
          $238 = (($231) + ($237))|0;
          (_hio_seek($230,$238,0)|0);
          $239 = $2;
          $240 = (_hio_read8($239)|0);
          HEAP8[$sih>>0] = $240;
          $241 = ((($sih)) + 1|0);
          $242 = $2;
          (_hio_read($241,13,1,$242)|0);
          $243 = $2;
          $244 = (_hio_read16l($243)|0);
          $245 = ((($sih)) + 14|0);
          HEAP16[$245>>1] = $244;
          $246 = $2;
          $247 = (_hio_read32l($246)|0);
          $248 = ((($sih)) + 16|0);
          HEAP32[$248>>2] = $247;
          $249 = $2;
          $250 = (_hio_read32l($249)|0);
          $251 = ((($sih)) + 20|0);
          HEAP32[$251>>2] = $250;
          $252 = $2;
          $253 = (_hio_read32l($252)|0);
          $254 = ((($sih)) + 24|0);
          HEAP32[$254>>2] = $253;
          $255 = $2;
          $256 = (_hio_read8($255)|0);
          $257 = ((($sih)) + 28|0);
          HEAP8[$257>>0] = $256;
          $258 = $2;
          $259 = (_hio_read8($258)|0);
          $260 = ((($sih)) + 29|0);
          HEAP8[$260>>0] = $259;
          $261 = $2;
          $262 = (_hio_read8($261)|0);
          $263 = ((($sih)) + 30|0);
          HEAP8[$263>>0] = $262;
          $264 = $2;
          $265 = (_hio_read8($264)|0);
          $266 = ((($sih)) + 31|0);
          HEAP8[$266>>0] = $265;
          $267 = $2;
          $268 = (_hio_read16l($267)|0);
          $269 = ((($sih)) + 32|0);
          HEAP16[$269>>1] = $268;
          $270 = $2;
          $271 = (_hio_read16l($270)|0);
          $272 = ((($sih)) + 34|0);
          HEAP16[$272>>1] = $271;
          $273 = ((($sih)) + 36|0);
          $274 = $2;
          (_hio_read($273,4,1,$274)|0);
          $275 = $2;
          $276 = (_hio_read16l($275)|0);
          $277 = ((($sih)) + 40|0);
          HEAP16[$277>>1] = $276;
          $278 = $2;
          $279 = (_hio_read16l($278)|0);
          $280 = ((($sih)) + 42|0);
          HEAP16[$280>>1] = $279;
          $281 = $2;
          $282 = (_hio_read32l($281)|0);
          $283 = ((($sih)) + 44|0);
          HEAP32[$283>>2] = $282;
          $284 = ((($sih)) + 48|0);
          $285 = $2;
          (_hio_read($284,28,1,$285)|0);
          $286 = ((($sih)) + 76|0);
          $287 = $2;
          (_hio_read($286,4,1,$287)|0);
          $288 = ((($sih)) + 16|0);
          $289 = HEAP32[$288>>2]|0;
          $290 = $i;
          $291 = $mod;
          $292 = ((($291)) + 180|0);
          $293 = HEAP32[$292>>2]|0;
          $294 = (($293) + (($290*52)|0)|0);
          $295 = ((($294)) + 32|0);
          HEAP32[$295>>2] = $289;
          $296 = ((($sih)) + 20|0);
          $297 = HEAP32[$296>>2]|0;
          $298 = $i;
          $299 = $mod;
          $300 = ((($299)) + 180|0);
          $301 = HEAP32[$300>>2]|0;
          $302 = (($301) + (($298*52)|0)|0);
          $303 = ((($302)) + 36|0);
          HEAP32[$303>>2] = $297;
          $304 = ((($sih)) + 24|0);
          $305 = HEAP32[$304>>2]|0;
          $306 = $i;
          $307 = $mod;
          $308 = ((($307)) + 180|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = (($309) + (($306*52)|0)|0);
          $311 = ((($310)) + 40|0);
          HEAP32[$311>>2] = $305;
          $312 = $i;
          $313 = $mod;
          $314 = ((($313)) + 180|0);
          $315 = HEAP32[$314>>2]|0;
          $316 = (($315) + (($312*52)|0)|0);
          $317 = ((($316)) + 40|0);
          $318 = HEAP32[$317>>2]|0;
          $319 = ($318|0)==(65535);
          if ($319) {
           $320 = $i;
           $321 = $mod;
           $322 = ((($321)) + 180|0);
           $323 = HEAP32[$322>>2]|0;
           $324 = (($323) + (($320*52)|0)|0);
           $325 = ((($324)) + 40|0);
           HEAP32[$325>>2] = 0;
          }
          $326 = $i;
          $327 = $mod;
          $328 = ((($327)) + 180|0);
          $329 = HEAP32[$328>>2]|0;
          $330 = (($329) + (($326*52)|0)|0);
          $331 = ((($330)) + 40|0);
          $332 = HEAP32[$331>>2]|0;
          $333 = ($332|0)>(0);
          $334 = $333 ? 2 : 0;
          $335 = $i;
          $336 = $mod;
          $337 = ((($336)) + 180|0);
          $338 = HEAP32[$337>>2]|0;
          $339 = (($338) + (($335*52)|0)|0);
          $340 = ((($339)) + 44|0);
          HEAP32[$340>>2] = $334;
          $341 = ((($sih)) + 28|0);
          $342 = HEAP8[$341>>0]|0;
          $343 = $342&255;
          $344 = $i;
          $345 = $mod;
          $346 = ((($345)) + 176|0);
          $347 = HEAP32[$346>>2]|0;
          $348 = (($347) + (($344*764)|0)|0);
          $349 = ((($348)) + 756|0);
          $350 = HEAP32[$349>>2]|0;
          HEAP32[$350>>2] = $343;
          $351 = $i;
          $352 = $mod;
          $353 = ((($352)) + 176|0);
          $354 = HEAP32[$353>>2]|0;
          $355 = (($354) + (($351*764)|0)|0);
          $356 = ((($355)) + 756|0);
          $357 = HEAP32[$356>>2]|0;
          $358 = ((($357)) + 8|0);
          HEAP32[$358>>2] = 128;
          $359 = $i;
          $360 = $i;
          $361 = $mod;
          $362 = ((($361)) + 176|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = (($363) + (($360*764)|0)|0);
          $365 = ((($364)) + 756|0);
          $366 = HEAP32[$365>>2]|0;
          $367 = ((($366)) + 40|0);
          HEAP32[$367>>2] = $359;
          $368 = $i;
          $369 = $mod;
          $370 = ((($369)) + 176|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = (($371) + (($368*764)|0)|0);
          $373 = ((($372)) + 36|0);
          HEAP32[$373>>2] = 1;
          $374 = $mod;
          $375 = $i;
          $376 = ((($sih)) + 48|0);
          (_instrument_name($374,$375,$376,12)|0);
          $377 = ((($sih)) + 32|0);
          $378 = HEAP16[$377>>1]|0;
          $379 = $378&65535;
          $380 = ($379*8363)|0;
          $381 = (($380|0) / 8448)&-1;
          $382 = $381&65535;
          $383 = ((($sih)) + 32|0);
          HEAP16[$383>>1] = $382;
          $384 = ((($sih)) + 32|0);
          $385 = HEAP16[$384>>1]|0;
          $386 = $385&65535;
          $387 = $i;
          $388 = $mod;
          $389 = ((($388)) + 176|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = (($390) + (($387*764)|0)|0);
          $392 = ((($391)) + 756|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ((($393)) + 12|0);
          $395 = $i;
          $396 = $mod;
          $397 = ((($396)) + 176|0);
          $398 = HEAP32[$397>>2]|0;
          $399 = (($398) + (($395*764)|0)|0);
          $400 = ((($399)) + 756|0);
          $401 = HEAP32[$400>>2]|0;
          $402 = ((($401)) + 16|0);
          _c2spd_to_note($386,$394,$402);
          $403 = $i;
          $404 = (($403) + 1)|0;
          $i = $404;
         }
         $405 = (_pattern_init($226)|0);
         $406 = ($405|0)<(0);
         if (!($406)) {
          $i = 0;
          while(1) {
           $407 = $i;
           $408 = $mod;
           $409 = ((($408)) + 128|0);
           $410 = HEAP32[$409>>2]|0;
           $411 = ($407|0)<($410|0);
           if (!($411)) {
            break;
           }
           $412 = $mod;
           $413 = $i;
           $414 = (_pattern_tracks_alloc($412,$413,64)|0);
           $415 = ($414|0)<(0);
           if ($415) {
            break L31;
           }
           $416 = $i;
           $417 = $pp_pat;
           $418 = (($417) + ($416<<1)|0);
           $419 = HEAP16[$418>>1]|0;
           $420 = $419&65535;
           $421 = ($420|0)==(0);
           L46: do {
            if (!($421)) {
             $422 = $2;
             $423 = $3;
             $424 = $i;
             $425 = $pp_pat;
             $426 = (($425) + ($424<<1)|0);
             $427 = HEAP16[$426>>1]|0;
             $428 = $427&65535;
             $429 = $428 << 4;
             $430 = (($423) + ($429))|0;
             (_hio_seek($422,$430,0)|0);
             $431 = $broken;
             $432 = ($431|0)!=(0);
             if ($432) {
              $433 = $2;
              (_hio_seek($433,2,1)|0);
             }
             $r = 0;
             while(1) {
              $434 = $r;
              $435 = ($434|0)<(64);
              if (!($435)) {
               break L46;
              }
              $436 = $2;
              $437 = (_hio_read8($436)|0);
              $b = $437;
              $438 = $b;
              $439 = $438&255;
              $440 = ($439|0)==(0);
              if ($440) {
               $441 = $r;
               $442 = (($441) + 1)|0;
               $r = $442;
               continue;
              }
              $443 = $b;
              $444 = $443&255;
              $445 = $444 & 31;
              $c = $445;
              $446 = $c;
              $447 = $mod;
              $448 = ((($447)) + 136|0);
              $449 = HEAP32[$448>>2]|0;
              $450 = ($446|0)>=($449|0);
              if ($450) {
               $469 = $dummy;
              } else {
               $451 = $r;
               $452 = $c;
               $453 = $i;
               $454 = $1;
               $455 = ((($454)) + 168|0);
               $456 = HEAP32[$455>>2]|0;
               $457 = (($456) + ($453<<2)|0);
               $458 = HEAP32[$457>>2]|0;
               $459 = ((($458)) + 4|0);
               $460 = (($459) + ($452<<2)|0);
               $461 = HEAP32[$460>>2]|0;
               $462 = $1;
               $463 = ((($462)) + 172|0);
               $464 = HEAP32[$463>>2]|0;
               $465 = (($464) + ($461<<2)|0);
               $466 = HEAP32[$465>>2]|0;
               $467 = ((($466)) + 4|0);
               $468 = (($467) + ($451<<3)|0);
               $469 = $468;
              }
              $event = $469;
              $470 = $b;
              $471 = $470&255;
              $472 = $471 & 32;
              $473 = ($472|0)!=(0);
              if ($473) {
               $474 = $2;
               $475 = (_hio_read8($474)|0);
               $n = $475;
               $476 = $n;
               $477 = $476&255;
               if ((($477|0) == 255)) {
                $n = 0;
               } else if ((($477|0) == 254)) {
                $n = -127;
               } else {
                $478 = $n;
                $479 = $478&255;
                $480 = $479 & 240;
                $481 = $480 >> 4;
                $482 = ($481*12)|0;
                $483 = (37 + ($482))|0;
                $484 = $n;
                $485 = $484&255;
                $486 = $485 & 15;
                $487 = (($483) + ($486))|0;
                $488 = $487&255;
                $n = $488;
               }
               $489 = $n;
               $490 = $event;
               HEAP8[$490>>0] = $489;
               $491 = $2;
               $492 = (_hio_read8($491)|0);
               $493 = $event;
               $494 = ((($493)) + 1|0);
               HEAP8[$494>>0] = $492;
              }
              $495 = $b;
              $496 = $495&255;
              $497 = $496 & 64;
              $498 = ($497|0)!=(0);
              if ($498) {
               $499 = $2;
               $500 = (_hio_read8($499)|0);
               $501 = $500&255;
               $502 = (($501) + 1)|0;
               $503 = $502&255;
               $504 = $event;
               $505 = ((($504)) + 2|0);
               HEAP8[$505>>0] = $503;
              }
              $506 = $b;
              $507 = $506&255;
              $508 = $507 & 128;
              $509 = ($508|0)!=(0);
              if (!($509)) {
               continue;
              }
              $510 = $2;
              $511 = (_hio_read8($510)|0);
              $512 = $511&255;
              $513 = (4016 + ($512)|0);
              $514 = HEAP8[$513>>0]|0;
              $515 = $event;
              $516 = ((($515)) + 3|0);
              HEAP8[$516>>0] = $514;
              $517 = $2;
              $518 = (_hio_read8($517)|0);
              $519 = $event;
              $520 = ((($519)) + 4|0);
              HEAP8[$520>>0] = $518;
              $521 = $event;
              $522 = ((($521)) + 3|0);
              $523 = HEAP8[$522>>0]|0;
              $524 = $523&255;
              if ((($524|0) == 15)) {
               $525 = $event;
               $526 = ((($525)) + 4|0);
               $527 = HEAP8[$526>>0]|0;
               $528 = $527&255;
               $529 = $528 & 240;
               $530 = $529 >> 4;
               $531 = $530&255;
               $532 = $event;
               $533 = ((($532)) + 4|0);
               HEAP8[$533>>0] = $531;
               continue;
              } else if ((($524|0) == 255)) {
               $534 = $event;
               $535 = ((($534)) + 3|0);
               HEAP8[$535>>0] = 0;
               $536 = $event;
               $537 = ((($536)) + 4|0);
               HEAP8[$537>>0] = 0;
               continue;
              } else {
               continue;
              }
             }
            }
           } while(0);
           $538 = $i;
           $539 = (($538) + 1)|0;
           $i = $539;
          }
          $540 = $pp_ins;
          _free($540);
          $541 = $pp_pat;
          _free($541);
          $i = 0;
          while(1) {
           $542 = $i;
           $543 = $mod;
           $544 = ((($543)) + 140|0);
           $545 = HEAP32[$544>>2]|0;
           $546 = ($542|0)<($545|0);
           $547 = $1;
           if (!($546)) {
            break;
           }
           $548 = $2;
           $549 = $i;
           $550 = $mod;
           $551 = ((($550)) + 180|0);
           $552 = HEAP32[$551>>2]|0;
           $553 = (($552) + (($549*52)|0)|0);
           $554 = (_load_sample($547,$548,0,$553,0)|0);
           $555 = ($554|0)<(0);
           if ($555) {
            break L15;
           }
           $556 = $i;
           $557 = (($556) + 1)|0;
           $i = $557;
          }
          $558 = ((($547)) + 1284|0);
          $559 = HEAP32[$558>>2]|0;
          $560 = $559 | 285213281;
          HEAP32[$558>>2] = $560;
          $561 = $1;
          $562 = ((($561)) + 1288|0);
          HEAP32[$562>>2] = 2;
          $0 = 0;
          $565 = $0;
          STACKTOP = sp;return ($565|0);
         }
        }
       } while(0);
       $563 = $pp_ins;
       _free($563);
      }
      $564 = $pp_pat;
      _free($564);
     }
    } while(0);
    $0 = -1;
    $565 = $0;
    STACKTOP = sp;return ($565|0);
   }
  }
 }
 $0 = -1;
 $565 = $0;
 STACKTOP = sp;return ($565|0);
}
function _pt3_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1179603533);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32b($7)|0);
   $8 = $1;
   $9 = (_hio_read32b($8)|0);
   $10 = ($9|0)!=(1297040460);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = (_hio_read32b($11)|0);
   $13 = ($12|0)!=(1447383635);
   if ($13) {
    $0 = -1;
    break;
   }
   $14 = $1;
   (_hio_read32b($14)|0);
   $15 = $1;
   (_hio_seek($15,10,1)|0);
   $16 = $1;
   $17 = (_hio_read32b($16)|0);
   $18 = ($17|0)==(1229866575);
   $19 = $1;
   if ($18) {
    (_hio_read32b($19)|0);
    $20 = $1;
    $21 = $2;
    _read_title($20,$21,32);
   } else {
    $22 = $2;
    _read_title($19,$22,0);
   }
   $0 = 0;
  }
 } while(0);
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _pt3_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $handle = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 28|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_read32b($6)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = $2;
 (_hio_read32b($9)|0);
 $10 = $2;
 (_hio_read32b($10)|0);
 $11 = $2;
 (_hio_read($buf,1,10,$11)|0);
 $12 = $1;
 $13 = ((($buf)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $13;
 _set_type($12,4088,$vararg_buffer);
 $14 = (_iff_new()|0);
 $handle = $14;
 $15 = $handle;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $17 = $handle;
 $18 = (_iff_register($17,6776,235)|0);
 $ret = $18;
 $19 = $handle;
 $20 = (_iff_register($19,4104,236)|0);
 $21 = $ret;
 $22 = $21 | $20;
 $ret = $22;
 $23 = $handle;
 $24 = (_iff_register($23,4112,237)|0);
 $25 = $ret;
 $26 = $25 | $24;
 $ret = $26;
 $27 = $ret;
 $28 = ($27|0)!=(0);
 if ($28) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $29 = $handle;
 _iff_set_quirk($29,2);
 $30 = $handle;
 $31 = $1;
 $32 = $2;
 $33 = (_iff_load($30,$31,$32,0)|0);
 $34 = ($33|0)<(0);
 $35 = $handle;
 _iff_release($35);
 if ($34) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $36 = $1;
 $37 = ((($36)) + 144|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)<=(0);
 if ($39) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _get_info($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = $3;
 (_hio_read($6,1,32,$7)|0);
 $8 = $3;
 $9 = (_hio_read16b($8)|0);
 $10 = $9&65535;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 HEAP32[$12>>2] = $10;
 $13 = $3;
 $14 = (_hio_read16b($13)|0);
 $15 = $14&65535;
 $16 = $mod;
 $17 = ((($16)) + 156|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = (_hio_read16b($18)|0);
 $20 = $19&65535;
 $21 = $mod;
 $22 = ((($21)) + 128|0);
 HEAP32[$22>>2] = $20;
 $23 = $3;
 $24 = (_hio_read16b($23)|0);
 $25 = $24&65535;
 $26 = $mod;
 $27 = ((($26)) + 164|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = (_hio_read16b($28)|0);
 $30 = $29&65535;
 $31 = $mod;
 $32 = ((($31)) + 152|0);
 HEAP32[$32>>2] = $30;
 $33 = $3;
 (_hio_read16b($33)|0);
 $34 = $3;
 (_hio_read16b($34)|0);
 $35 = $3;
 (_hio_read16b($35)|0);
 $36 = $3;
 (_hio_read16b($36)|0);
 $37 = $3;
 (_hio_read16b($37)|0);
 $38 = $3;
 (_hio_read16b($38)|0);
 $39 = $3;
 (_hio_read16b($39)|0);
 $40 = $3;
 (_hio_read16b($40)|0);
 $41 = $3;
 (_hio_read16b($41)|0);
 $42 = $3;
 (_hio_read16b($42)|0);
 $43 = $mod;
 $44 = ((($43)) + 140|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)>(255);
 if (!($46)) {
  $47 = $mod;
  $48 = ((($47)) + 156|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)>(256);
  if (!($50)) {
   $51 = $mod;
   $52 = ((($51)) + 128|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)>(255);
   if (!($54)) {
    $0 = 0;
    $55 = $0;
    STACKTOP = sp;return ($55|0);
   }
  }
 }
 $0 = -1;
 $55 = $0;
 STACKTOP = sp;return ($55|0);
}
function _get_cmnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 STACKTOP = sp;return 0;
}
function _get_ptdt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $5 = $2;
 (_ptdt_load($4,$5,0)|0);
 STACKTOP = sp;return 0;
}
function _ptdt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $mod_event = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mh = sp + 32|0;
 $mod_event = sp + 1116|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 (_hio_read($mh,20,1,$5)|0);
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(31);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = ((($mh)) + 20|0);
  $10 = (($9) + (($8*30)|0)|0);
  $11 = $2;
  (_hio_read($10,22,1,$11)|0);
  $12 = $2;
  $13 = (_hio_read16b($12)|0);
  $14 = $i;
  $15 = ((($mh)) + 20|0);
  $16 = (($15) + (($14*30)|0)|0);
  $17 = ((($16)) + 22|0);
  HEAP16[$17>>1] = $13;
  $18 = $2;
  $19 = (_hio_read8($18)|0);
  $20 = $i;
  $21 = ((($mh)) + 20|0);
  $22 = (($21) + (($20*30)|0)|0);
  $23 = ((($22)) + 24|0);
  HEAP8[$23>>0] = $19;
  $24 = $2;
  $25 = (_hio_read8($24)|0);
  $26 = $i;
  $27 = ((($mh)) + 20|0);
  $28 = (($27) + (($26*30)|0)|0);
  $29 = ((($28)) + 25|0);
  HEAP8[$29>>0] = $25;
  $30 = $2;
  $31 = (_hio_read16b($30)|0);
  $32 = $i;
  $33 = ((($mh)) + 20|0);
  $34 = (($33) + (($32*30)|0)|0);
  $35 = ((($34)) + 26|0);
  HEAP16[$35>>1] = $31;
  $36 = $2;
  $37 = (_hio_read16b($36)|0);
  $38 = $i;
  $39 = ((($mh)) + 20|0);
  $40 = (($39) + (($38*30)|0)|0);
  $41 = ((($40)) + 28|0);
  HEAP16[$41>>1] = $37;
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $44 = $2;
 $45 = (_hio_read8($44)|0);
 $46 = ((($mh)) + 950|0);
 HEAP8[$46>>0] = $45;
 $47 = $2;
 $48 = (_hio_read8($47)|0);
 $49 = ((($mh)) + 951|0);
 HEAP8[$49>>0] = $48;
 $50 = ((($mh)) + 952|0);
 $51 = $2;
 (_hio_read($50,128,1,$51)|0);
 $52 = ((($mh)) + 1080|0);
 $53 = $2;
 (_hio_read($52,4,1,$53)|0);
 $54 = $mod;
 $55 = ((($54)) + 140|0);
 HEAP32[$55>>2] = 31;
 $56 = $mod;
 $57 = ((($56)) + 140|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $mod;
 $60 = ((($59)) + 144|0);
 HEAP32[$60>>2] = $58;
 $61 = $mod;
 $62 = ((($61)) + 136|0);
 HEAP32[$62>>2] = 4;
 $63 = ((($mh)) + 950|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $mod;
 $67 = ((($66)) + 156|0);
 HEAP32[$67>>2] = $65;
 $68 = ((($mh)) + 951|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $mod;
 $72 = ((($71)) + 160|0);
 HEAP32[$72>>2] = $70;
 $73 = $mod;
 $74 = ((($73)) + 952|0);
 $75 = ((($mh)) + 952|0);
 dest=$74; src=$75; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(128);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = $mod;
  $80 = ((($79)) + 952|0);
  $81 = (($80) + ($78)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $mod;
  $85 = ((($84)) + 128|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83|0)>($86|0);
  if ($87) {
   $88 = $i;
   $89 = $mod;
   $90 = ((($89)) + 952|0);
   $91 = (($90) + ($88)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $mod;
   $95 = ((($94)) + 128|0);
   HEAP32[$95>>2] = $93;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $98 = $mod;
 $99 = ((($98)) + 128|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[$99>>2] = $101;
 $102 = $mod;
 $103 = ((($102)) + 136|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $mod;
 $106 = ((($105)) + 128|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = Math_imul($104, $107)|0;
 $109 = $mod;
 $110 = ((($109)) + 132|0);
 HEAP32[$110>>2] = $108;
 $111 = $mod;
 $112 = (_instrument_init($111)|0);
 $113 = ($112|0)<(0);
 if ($113) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $i = 0;
 while(1) {
  $114 = $i;
  $115 = $mod;
  $116 = ((($115)) + 140|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($114|0)<($117|0);
  $119 = $mod;
  if (!($118)) {
   break;
  }
  $120 = $i;
  $121 = (_subinstrument_alloc($119,$120,1)|0);
  $122 = ($121|0)<(0);
  if ($122) {
   label = 14;
   break;
  }
  $123 = $i;
  $124 = ((($mh)) + 20|0);
  $125 = (($124) + (($123*30)|0)|0);
  $126 = ((($125)) + 22|0);
  $127 = HEAP16[$126>>1]|0;
  $128 = $127&65535;
  $129 = $128<<1;
  $130 = $i;
  $131 = $mod;
  $132 = ((($131)) + 180|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($130*52)|0)|0);
  $135 = ((($134)) + 32|0);
  HEAP32[$135>>2] = $129;
  $136 = $i;
  $137 = ((($mh)) + 20|0);
  $138 = (($137) + (($136*30)|0)|0);
  $139 = ((($138)) + 26|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140&65535;
  $142 = $141<<1;
  $143 = $i;
  $144 = $mod;
  $145 = ((($144)) + 180|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($146) + (($143*52)|0)|0);
  $148 = ((($147)) + 36|0);
  HEAP32[$148>>2] = $142;
  $149 = $i;
  $150 = $mod;
  $151 = ((($150)) + 180|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + (($149*52)|0)|0);
  $154 = ((($153)) + 36|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $i;
  $157 = ((($mh)) + 20|0);
  $158 = (($157) + (($156*30)|0)|0);
  $159 = ((($158)) + 28|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160&65535;
  $162 = $161<<1;
  $163 = (($155) + ($162))|0;
  $164 = $i;
  $165 = $mod;
  $166 = ((($165)) + 180|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + (($164*52)|0)|0);
  $169 = ((($168)) + 40|0);
  HEAP32[$169>>2] = $163;
  $170 = $i;
  $171 = ((($mh)) + 20|0);
  $172 = (($171) + (($170*30)|0)|0);
  $173 = ((($172)) + 28|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174&65535;
  $176 = ($175|0)>(1);
  $177 = $176 ? 2 : 0;
  $178 = $i;
  $179 = $mod;
  $180 = ((($179)) + 180|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + (($178*52)|0)|0);
  $183 = ((($182)) + 44|0);
  HEAP32[$183>>2] = $177;
  $184 = $i;
  $185 = $mod;
  $186 = ((($185)) + 180|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = (($187) + (($184*52)|0)|0);
  $189 = ((($188)) + 32|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ($190|0)>(0);
  if ($191) {
   $192 = $i;
   $193 = $mod;
   $194 = ((($193)) + 176|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + (($192*764)|0)|0);
   $197 = ((($196)) + 36|0);
   HEAP32[$197>>2] = 1;
  }
  $198 = $i;
  $199 = ((($mh)) + 20|0);
  $200 = (($199) + (($198*30)|0)|0);
  $201 = ((($200)) + 24|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $202 << 24 >> 24;
  $204 = $203 << 4;
  $205 = $204&255;
  $206 = $205 << 24 >> 24;
  $207 = $i;
  $208 = $mod;
  $209 = ((($208)) + 176|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + (($207*764)|0)|0);
  $212 = ((($211)) + 756|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($213)) + 16|0);
  HEAP32[$214>>2] = $206;
  $215 = $i;
  $216 = ((($mh)) + 20|0);
  $217 = (($216) + (($215*30)|0)|0);
  $218 = ((($217)) + 25|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $219 << 24 >> 24;
  $221 = $i;
  $222 = $mod;
  $223 = ((($222)) + 176|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + (($221*764)|0)|0);
  $226 = ((($225)) + 756|0);
  $227 = HEAP32[$226>>2]|0;
  HEAP32[$227>>2] = $220;
  $228 = $i;
  $229 = $mod;
  $230 = ((($229)) + 176|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + (($228*764)|0)|0);
  $233 = ((($232)) + 756|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ((($234)) + 8|0);
  HEAP32[$235>>2] = 128;
  $236 = $i;
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 176|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*764)|0)|0);
  $242 = ((($241)) + 756|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ((($243)) + 40|0);
  HEAP32[$244>>2] = $236;
  $245 = $i;
  $246 = $mod;
  $247 = ((($246)) + 176|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = (($248) + (($245*764)|0)|0);
  $250 = ((($249)) + 40|0);
  HEAP32[$250>>2] = 4095;
  $251 = $mod;
  $252 = $i;
  $253 = $i;
  $254 = ((($mh)) + 20|0);
  $255 = (($254) + (($253*30)|0)|0);
  (_instrument_name($251,$252,$255,22)|0);
  $256 = $i;
  $257 = (($256) + 1)|0;
  $i = $257;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $258 = (_pattern_init($119)|0);
 $259 = ($258|0)<(0);
 if ($259) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $i = 0;
 while(1) {
  $260 = $i;
  $261 = $mod;
  $262 = ((($261)) + 128|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($260|0)<($263|0);
  if (!($264)) {
   break;
  }
  $265 = $mod;
  $266 = $i;
  $267 = (_pattern_tracks_alloc($265,$266,64)|0);
  $268 = ($267|0)<(0);
  if ($268) {
   label = 23;
   break;
  }
  $j = 0;
  while(1) {
   $269 = $j;
   $270 = ($269|0)<(256);
   if (!($270)) {
    break;
   }
   $271 = $j;
   $272 = (($271|0) / 4)&-1;
   $273 = $j;
   $274 = (($273|0) % 4)&-1;
   $275 = $i;
   $276 = $1;
   $277 = ((($276)) + 168|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (($278) + ($275<<2)|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = ((($280)) + 4|0);
   $282 = (($281) + ($274<<2)|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = $1;
   $285 = ((($284)) + 172|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + ($283<<2)|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = (($289) + ($272<<3)|0);
   $event = $290;
   $291 = $2;
   (_hio_read($mod_event,1,4,$291)|0);
   $292 = $event;
   _decode_protracker_event($292,$mod_event);
   $293 = $j;
   $294 = (($293) + 1)|0;
   $j = $294;
  }
  $295 = $i;
  $296 = (($295) + 1)|0;
  $i = $296;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 $297 = $1;
 $298 = ((($297)) + 1284|0);
 $299 = HEAP32[$298>>2]|0;
 $300 = $299 | 8192;
 HEAP32[$298>>2] = $300;
 $i = 0;
 while(1) {
  $301 = $i;
  $302 = $mod;
  $303 = ((($302)) + 144|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ($301|0)<($304|0);
  if (!($305)) {
   label = 34;
   break;
  }
  $306 = $i;
  $307 = $mod;
  $308 = ((($307)) + 180|0);
  $309 = HEAP32[$308>>2]|0;
  $310 = (($309) + (($306*52)|0)|0);
  $311 = ((($310)) + 32|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($312|0)!=(0);
  if ($313) {
   $314 = $1;
   $315 = $2;
   $316 = $i;
   $317 = $mod;
   $318 = ((($317)) + 180|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + (($316*52)|0)|0);
   $321 = (_load_sample($314,$315,0,$320,0)|0);
   $322 = ($321|0)<(0);
   if ($322) {
    label = 32;
    break;
   }
  }
  $323 = $i;
  $324 = (($323) + 1)|0;
  $i = $324;
 }
 if ((label|0) == 32) {
  $0 = -1;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 34) {
  $0 = 0;
  $325 = $0;
  STACKTOP = sp;return ($325|0);
 }
 return (0)|0;
}
function _sfx_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 (_hio_seek($4,60,1)|0);
 $5 = $1;
 $6 = (_hio_read32b($5)|0);
 $a = $6;
 $7 = $1;
 (_hio_seek($7,60,1)|0);
 $8 = $1;
 $9 = (_hio_read32b($8)|0);
 $b = $9;
 $10 = $a;
 $11 = ($10|0)!=(1397706311);
 $12 = $b;
 $13 = ($12|0)!=(1397706311);
 $or$cond = $11 & $13;
 if ($or$cond) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $14 = $1;
  $15 = $2;
  _read_title($14,$15,0);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _sfx_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_sfx_13_20_load($4,$5,15,$6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = (_sfx_13_20_load($9,$10,31,$11)|0);
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _sfx_13_20_load($m,$f,$nins,$start) {
 $m = $m|0;
 $f = $f|0;
 $nins = $nins|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $i = 0, $ins = 0, $ins_size = 0, $j = 0, $mod = 0, $sfx = 0, $sfx2 = 0, $sub = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $xxi = 0, $xxs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sfx = sp + 148|0;
 $sfx2 = sp + 1140|0;
 $ev = sp + 1136|0;
 $ins_size = sp + 24|0;
 $ins = sp + 204|0;
 $1 = $m;
 $2 = $f;
 $3 = $nins;
 $4 = $start;
 $5 = $1;
 $mod = $5;
 $6 = $2;
 $7 = $4;
 (_hio_seek($6,$7,0)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $3;
  $10 = ($8|0)<($9|0);
  $11 = $2;
  $12 = (_hio_read32b($11)|0);
  if (!($10)) {
   break;
  }
  $13 = $i;
  $14 = (($ins_size) + ($13<<2)|0);
  HEAP32[$14>>2] = $12;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 HEAP32[$sfx>>2] = $12;
 $17 = $2;
 $18 = (_hio_read16b($17)|0);
 $19 = ((($sfx)) + 4|0);
 HEAP16[$19>>1] = $18;
 $20 = ((($sfx)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22|0)<(178);
 if ($23) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $24 = ((($sfx)) + 6|0);
 $25 = $2;
 (_hio_read($24,14,1,$25)|0);
 $26 = HEAP32[$sfx>>2]|0;
 $27 = ($26|0)!=(1397706311);
 if ($27) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $28 = $3;
 $29 = $mod;
 $30 = ((($29)) + 140|0);
 HEAP32[$30>>2] = $28;
 $31 = $mod;
 $32 = ((($31)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $mod;
 $35 = ((($34)) + 144|0);
 HEAP32[$35>>2] = $33;
 $36 = ((($sfx)) + 4|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = (1776930 / ($38|0))&-1;
 $40 = $mod;
 $41 = ((($40)) + 152|0);
 HEAP32[$41>>2] = $39;
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $mod;
  $44 = ((($43)) + 140|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $i;
  $48 = (($ins) + (($47*30)|0)|0);
  $49 = $2;
  (_hio_read($48,22,1,$49)|0);
  $50 = $2;
  $51 = (_hio_read16b($50)|0);
  $52 = $i;
  $53 = (($ins) + (($52*30)|0)|0);
  $54 = ((($53)) + 22|0);
  HEAP16[$54>>1] = $51;
  $55 = $2;
  $56 = (_hio_read8($55)|0);
  $57 = $i;
  $58 = (($ins) + (($57*30)|0)|0);
  $59 = ((($58)) + 24|0);
  HEAP8[$59>>0] = $56;
  $60 = $2;
  $61 = (_hio_read8($60)|0);
  $62 = $i;
  $63 = (($ins) + (($62*30)|0)|0);
  $64 = ((($63)) + 25|0);
  HEAP8[$64>>0] = $61;
  $65 = $2;
  $66 = (_hio_read16b($65)|0);
  $67 = $i;
  $68 = (($ins) + (($67*30)|0)|0);
  $69 = ((($68)) + 26|0);
  HEAP16[$69>>1] = $66;
  $70 = $2;
  $71 = (_hio_read16b($70)|0);
  $72 = $i;
  $73 = (($ins) + (($72*30)|0)|0);
  $74 = ((($73)) + 28|0);
  HEAP16[$74>>1] = $71;
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 $77 = $2;
 $78 = (_hio_read8($77)|0);
 HEAP8[$sfx2>>0] = $78;
 $79 = $2;
 $80 = (_hio_read8($79)|0);
 $81 = ((($sfx2)) + 1|0);
 HEAP8[$81>>0] = $80;
 $82 = ((($sfx2)) + 2|0);
 $83 = $2;
 $84 = (_hio_read($82,1,128,$83)|0);
 $85 = ($84|0)!=(128);
 if ($85) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $86 = HEAP8[$sfx2>>0]|0;
 $87 = $86&255;
 $88 = $mod;
 $89 = ((($88)) + 156|0);
 HEAP32[$89>>2] = $87;
 $90 = $mod;
 $91 = ((($90)) + 156|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)>(127);
 if ($93) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $94 = $mod;
 $95 = ((($94)) + 952|0);
 $96 = ((($sfx2)) + 2|0);
 $97 = $mod;
 $98 = ((($97)) + 156|0);
 $99 = HEAP32[$98>>2]|0;
 _memcpy(($95|0),($96|0),($99|0))|0;
 $i = 0;
 $100 = $mod;
 $101 = ((($100)) + 128|0);
 HEAP32[$101>>2] = 0;
 while(1) {
  $102 = $i;
  $103 = $mod;
  $104 = ((($103)) + 156|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($102|0)<($105|0);
  if (!($106)) {
   break;
  }
  $107 = $i;
  $108 = $mod;
  $109 = ((($108)) + 952|0);
  $110 = (($109) + ($107)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = $mod;
  $114 = ((($113)) + 128|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($112|0)>($115|0);
  if ($116) {
   $117 = $i;
   $118 = $mod;
   $119 = ((($118)) + 952|0);
   $120 = (($119) + ($117)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = $mod;
   $124 = ((($123)) + 128|0);
   HEAP32[$124>>2] = $122;
  }
  $125 = $i;
  $126 = (($125) + 1)|0;
  $i = $126;
 }
 $127 = $mod;
 $128 = ((($127)) + 128|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + 1)|0;
 HEAP32[$128>>2] = $130;
 $131 = $mod;
 $132 = ((($131)) + 136|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = $mod;
 $135 = ((($134)) + 128|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = Math_imul($133, $136)|0;
 $138 = $mod;
 $139 = ((($138)) + 132|0);
 HEAP32[$139>>2] = $137;
 $140 = $mod;
 $141 = ((($140)) + 140|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)==(15);
 $144 = $1;
 if ($143) {
  _set_type($144,4160,$vararg_buffer);
 } else {
  _set_type($144,4176,$vararg_buffer1);
 }
 $145 = $mod;
 $146 = (_instrument_init($145)|0);
 $147 = ($146|0)<(0);
 if ($147) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $i = 0;
 while(1) {
  $148 = $i;
  $149 = $mod;
  $150 = ((($149)) + 140|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($148|0)<($151|0);
  $153 = $mod;
  if (!($152)) {
   break;
  }
  $154 = $i;
  $155 = (_subinstrument_alloc($153,$154,1)|0);
  $156 = ($155|0)<(0);
  if ($156) {
   label = 28;
   break;
  }
  $157 = $i;
  $158 = $mod;
  $159 = ((($158)) + 176|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + (($157*764)|0)|0);
  $xxi = $161;
  $162 = $i;
  $163 = $mod;
  $164 = ((($163)) + 180|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + (($162*52)|0)|0);
  $xxs = $166;
  $167 = $xxi;
  $168 = ((($167)) + 756|0);
  $169 = HEAP32[$168>>2]|0;
  $sub = $169;
  $170 = $i;
  $171 = (($ins_size) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $xxs;
  $174 = ((($173)) + 32|0);
  HEAP32[$174>>2] = $172;
  $175 = $i;
  $176 = (($ins) + (($175*30)|0)|0);
  $177 = ((($176)) + 26|0);
  $178 = HEAP16[$177>>1]|0;
  $179 = $178&65535;
  $180 = $xxs;
  $181 = ((($180)) + 36|0);
  HEAP32[$181>>2] = $179;
  $182 = $xxs;
  $183 = ((($182)) + 36|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $i;
  $186 = (($ins) + (($185*30)|0)|0);
  $187 = ((($186)) + 28|0);
  $188 = HEAP16[$187>>1]|0;
  $189 = $188&65535;
  $190 = $189<<1;
  $191 = (($184) + ($190))|0;
  $192 = $xxs;
  $193 = ((($192)) + 40|0);
  HEAP32[$193>>2] = $191;
  $194 = $i;
  $195 = (($ins) + (($194*30)|0)|0);
  $196 = ((($195)) + 28|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197&65535;
  $199 = ($198|0)>(1);
  $200 = $199 ? 2 : 0;
  $201 = $xxs;
  $202 = ((($201)) + 44|0);
  HEAP32[$202>>2] = $200;
  $203 = $xxi;
  $204 = ((($203)) + 36|0);
  HEAP32[$204>>2] = 1;
  $205 = $i;
  $206 = (($ins) + (($205*30)|0)|0);
  $207 = ((($206)) + 25|0);
  $208 = HEAP8[$207>>0]|0;
  $209 = $208&255;
  $210 = $sub;
  HEAP32[$210>>2] = $209;
  $211 = $i;
  $212 = (($ins) + (($211*30)|0)|0);
  $213 = ((($212)) + 24|0);
  $214 = HEAP8[$213>>0]|0;
  $215 = $214&255;
  $216 = $215 << 4;
  $217 = $216&255;
  $218 = $217 << 24 >> 24;
  $219 = $sub;
  $220 = ((($219)) + 16|0);
  HEAP32[$220>>2] = $218;
  $221 = $sub;
  $222 = ((($221)) + 8|0);
  HEAP32[$222>>2] = 128;
  $223 = $i;
  $224 = $sub;
  $225 = ((($224)) + 40|0);
  HEAP32[$225>>2] = $223;
  $226 = $mod;
  $227 = $i;
  $228 = $i;
  $229 = (($ins) + (($228*30)|0)|0);
  (_instrument_name($226,$227,$229,22)|0);
  $230 = $i;
  $231 = (($230) + 1)|0;
  $i = $231;
 }
 if ((label|0) == 28) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $232 = (_pattern_init($153)|0);
 $233 = ($232|0)<(0);
 if ($233) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $i = 0;
 while(1) {
  $234 = $i;
  $235 = $mod;
  $236 = ((($235)) + 128|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = ($234|0)<($237|0);
  if (!($238)) {
   break;
  }
  $239 = $mod;
  $240 = $i;
  $241 = (_pattern_tracks_alloc($239,$240,64)|0);
  $242 = ($241|0)<(0);
  if ($242) {
   label = 35;
   break;
  }
  $j = 0;
  while(1) {
   $243 = $j;
   $244 = $mod;
   $245 = ((($244)) + 136|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = $246<<6;
   $248 = ($243|0)<($247|0);
   if (!($248)) {
    break;
   }
   $249 = $j;
   $250 = $mod;
   $251 = ((($250)) + 136|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = (($249|0) / ($252|0))&-1;
   $254 = $j;
   $255 = $mod;
   $256 = ((($255)) + 136|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = (($254|0) % ($257|0))&-1;
   $259 = $i;
   $260 = $1;
   $261 = ((($260)) + 168|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($262) + ($259<<2)|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = ((($264)) + 4|0);
   $266 = (($265) + ($258<<2)|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = $1;
   $269 = ((($268)) + 172|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = (($270) + ($267<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = ((($272)) + 4|0);
   $274 = (($273) + ($253<<3)|0);
   $event = $274;
   $275 = $2;
   (_hio_read($ev,1,4,$275)|0);
   $276 = HEAP8[$ev>>0]|0;
   $277 = $276&255;
   $278 = $277 & 15;
   $279 = $278 << 8;
   $280 = ((($ev)) + 1|0);
   $281 = HEAP8[$280>>0]|0;
   $282 = $281&255;
   $283 = $279 | $282;
   $284 = (_period_to_note($283)|0);
   $285 = $284&255;
   $286 = $event;
   HEAP8[$286>>0] = $285;
   $287 = HEAP8[$ev>>0]|0;
   $288 = $287&255;
   $289 = $288 & 240;
   $290 = $289 >> 4;
   $291 = $290 << 4;
   $292 = ((($ev)) + 2|0);
   $293 = HEAP8[$292>>0]|0;
   $294 = $293&255;
   $295 = $294 & 240;
   $296 = $295 >> 4;
   $297 = $291 | $296;
   $298 = $297&255;
   $299 = $event;
   $300 = ((($299)) + 1|0);
   HEAP8[$300>>0] = $298;
   $301 = ((($ev)) + 3|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $event;
   $304 = ((($303)) + 4|0);
   HEAP8[$304>>0] = $302;
   $305 = ((($ev)) + 2|0);
   $306 = HEAP8[$305>>0]|0;
   $307 = $306&255;
   $308 = $307 & 15;
   do {
    if ((($308|0) == 5)) {
     $338 = $event;
     $339 = ((($338)) + 3|0);
     HEAP8[$339>>0] = -95;
    } else if ((($308|0) == 6)) {
     $340 = $event;
     $341 = ((($340)) + 3|0);
     HEAP8[$341>>0] = 12;
     $342 = ((($ev)) + 3|0);
     $343 = HEAP8[$342>>0]|0;
     $344 = $343&255;
     $345 = (64 - ($344))|0;
     $346 = $345&255;
     $347 = $event;
     $348 = ((($347)) + 4|0);
     HEAP8[$348>>0] = $346;
    } else if ((($308|0) == 2)) {
     $311 = $event;
     $312 = ((($311)) + 4|0);
     $313 = HEAP8[$312>>0]|0;
     $314 = $313&255;
     $315 = $314 >> 4;
     $316 = ($315|0)!=(0);
     $317 = $event;
     if ($316) {
      $318 = ((($317)) + 3|0);
      HEAP8[$318>>0] = 2;
      $319 = $event;
      $320 = ((($319)) + 4|0);
      $321 = HEAP8[$320>>0]|0;
      $322 = $321&255;
      $323 = $322 >> 4;
      $324 = $323&255;
      HEAP8[$320>>0] = $324;
      break;
     }
     $325 = ((($317)) + 4|0);
     $326 = HEAP8[$325>>0]|0;
     $327 = $326&255;
     $328 = $327 & 15;
     $329 = ($328|0)!=(0);
     if ($329) {
      $330 = $event;
      $331 = ((($330)) + 3|0);
      HEAP8[$331>>0] = 1;
      $332 = $event;
      $333 = ((($332)) + 4|0);
      $334 = HEAP8[$333>>0]|0;
      $335 = $334&255;
      $336 = $335 & 15;
      $337 = $336&255;
      HEAP8[$333>>0] = $337;
     }
    } else if ((($308|0) == 1)) {
     $309 = $event;
     $310 = ((($309)) + 3|0);
     HEAP8[$310>>0] = 0;
    } else {
     $349 = $event;
     $350 = ((($349)) + 4|0);
     HEAP8[$350>>0] = 0;
     $351 = $event;
     $352 = ((($351)) + 3|0);
     HEAP8[$352>>0] = 0;
    }
   } while(0);
   $353 = $j;
   $354 = (($353) + 1)|0;
   $j = $354;
  }
  $355 = $i;
  $356 = (($355) + 1)|0;
  $i = $356;
 }
 if ((label|0) == 35) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 $357 = $1;
 $358 = ((($357)) + 1284|0);
 $359 = HEAP32[$358>>2]|0;
 $360 = $359 | 8192;
 HEAP32[$358>>2] = $360;
 $i = 0;
 while(1) {
  $361 = $i;
  $362 = $mod;
  $363 = ((($362)) + 140|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = ($361|0)<($364|0);
  if (!($365)) {
   label = 55;
   break;
  }
  $366 = $i;
  $367 = $mod;
  $368 = ((($367)) + 180|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = (($369) + (($366*52)|0)|0);
  $371 = ((($370)) + 32|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = ($372|0)<=(2);
  if (!($373)) {
   $374 = $1;
   $375 = $2;
   $376 = $i;
   $377 = $mod;
   $378 = ((($377)) + 180|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = (($379) + (($376*52)|0)|0);
   $381 = (_load_sample($374,$375,0,$380,0)|0);
   $382 = ($381|0)<(0);
   if ($382) {
    label = 53;
    break;
   }
  }
  $383 = $i;
  $384 = (($383) + 1)|0;
  $i = $384;
 }
 if ((label|0) == 53) {
  $0 = -1;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 else if ((label|0) == 55) {
  $0 = 0;
  $385 = $0;
  STACKTOP = sp;return ($385|0);
 }
 return (0)|0;
}
function _flt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1080)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,4,$7)|0);
 $9 = ($8>>>0)<(4);
 if ($9) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $10 = (_memcmp($buf,4504,3)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = (_memcmp($buf,4512,3)|0);
  $13 = ($12|0)!=(0);
  if ($13) {
   $0 = -1;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $14 = ((($buf)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 << 24 >> 24;
 $17 = ($16|0)!=(52);
 if ($17) {
  $18 = ((($buf)) + 3|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(56);
  if ($21) {
   $22 = ((($buf)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(77);
   if ($25) {
    $0 = -1;
    $31 = $0;
    STACKTOP = sp;return ($31|0);
   }
  }
 }
 $26 = $1;
 $27 = $3;
 $28 = (($27) + 0)|0;
 (_hio_seek($26,$28,0)|0);
 $29 = $1;
 $30 = $2;
 _read_title($29,$30,20);
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _flt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $am_synth = 0;
 var $buf = 0, $event = 0, $filename = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $mod_event = 0, $nt = 0, $sub = 0, $tracker = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr9 = 0, $xxi = 0, $xxs = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 96|0;
 $mod_event = sp + 2224|0;
 $filename = sp + 1200|0;
 $buf = sp + 1184|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $am_synth = 0;
 $7 = $1;
 $8 = ((($7)) + 1208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = ((($10)) + 1212|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 (_snprintf($filename,1024,4224,$vararg_buffer)|0);
 $13 = (_fopen(($filename|0),(7360|0))|0);
 $nt = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 1208|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 1212|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $17;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $20;
  (_snprintf($filename,1024,4232,$vararg_buffer2)|0);
  $21 = (_fopen(($filename|0),(7360|0))|0);
  $nt = $21;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $23 = $1;
   $24 = ((($23)) + 1208|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $1;
   $27 = ((($26)) + 1212|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $25;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $28;
   (_snprintf($filename,1024,4240,$vararg_buffer6)|0);
   $29 = (_fopen(($filename|0),(7360|0))|0);
   $nt = $29;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 1208|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    $35 = ((($34)) + 1212|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $33;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = $36;
    (_snprintf($filename,1024,4248,$vararg_buffer10)|0);
    $37 = (_fopen(($filename|0),(7360|0))|0);
    $nt = $37;
   }
  }
 }
 $tracker = 4208;
 $38 = $nt;
 $39 = ($38|0)!=(0|0);
 do {
  if ($39) {
   $40 = $nt;
   (_fread(($buf|0),1,16,($40|0))|0);
   $41 = (_memcmp($buf,4256,16)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $am_synth = 1;
    $tracker = 4280;
    break;
   }
   $43 = (_memcmp($buf,4296,16)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    $am_synth = 1;
    $tracker = 4320;
    break;
   }
   $45 = (_memcmp($buf,4336,16)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $am_synth = 1;
    $tracker = 4360;
   }
  }
 } while(0);
 $47 = $2;
 (_hio_read($mh,20,1,$47)|0);
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = ($48|0)<(31);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = ((($mh)) + 20|0);
  $52 = (($51) + (($50*30)|0)|0);
  $53 = $2;
  (_hio_read($52,22,1,$53)|0);
  $54 = $2;
  $55 = (_hio_read16b($54)|0);
  $56 = $i;
  $57 = ((($mh)) + 20|0);
  $58 = (($57) + (($56*30)|0)|0);
  $59 = ((($58)) + 22|0);
  HEAP16[$59>>1] = $55;
  $60 = $2;
  $61 = (_hio_read8($60)|0);
  $62 = $i;
  $63 = ((($mh)) + 20|0);
  $64 = (($63) + (($62*30)|0)|0);
  $65 = ((($64)) + 24|0);
  HEAP8[$65>>0] = $61;
  $66 = $2;
  $67 = (_hio_read8($66)|0);
  $68 = $i;
  $69 = ((($mh)) + 20|0);
  $70 = (($69) + (($68*30)|0)|0);
  $71 = ((($70)) + 25|0);
  HEAP8[$71>>0] = $67;
  $72 = $2;
  $73 = (_hio_read16b($72)|0);
  $74 = $i;
  $75 = ((($mh)) + 20|0);
  $76 = (($75) + (($74*30)|0)|0);
  $77 = ((($76)) + 26|0);
  HEAP16[$77>>1] = $73;
  $78 = $2;
  $79 = (_hio_read16b($78)|0);
  $80 = $i;
  $81 = ((($mh)) + 20|0);
  $82 = (($81) + (($80*30)|0)|0);
  $83 = ((($82)) + 28|0);
  HEAP16[$83>>1] = $79;
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 $86 = $2;
 $87 = (_hio_read8($86)|0);
 $88 = ((($mh)) + 950|0);
 HEAP8[$88>>0] = $87;
 $89 = $2;
 $90 = (_hio_read8($89)|0);
 $91 = ((($mh)) + 951|0);
 HEAP8[$91>>0] = $90;
 $92 = ((($mh)) + 952|0);
 $93 = $2;
 (_hio_read($92,128,1,$93)|0);
 $94 = ((($mh)) + 1080|0);
 $95 = $2;
 (_hio_read($94,4,1,$95)|0);
 $96 = ((($mh)) + 1080|0);
 $97 = ((($96)) + 3|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = ($99|0)==(52);
 $101 = $mod;
 $102 = ((($101)) + 136|0);
 if ($100) {
  HEAP32[$102>>2] = 4;
 } else {
  HEAP32[$102>>2] = 8;
 }
 $103 = $mod;
 $104 = ((($103)) + 140|0);
 HEAP32[$104>>2] = 31;
 $105 = $mod;
 $106 = ((($105)) + 140|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $mod;
 $109 = ((($108)) + 144|0);
 HEAP32[$109>>2] = $107;
 $110 = ((($mh)) + 950|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = $mod;
 $114 = ((($113)) + 156|0);
 HEAP32[$114>>2] = $112;
 $115 = ((($mh)) + 951|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $mod;
 $119 = ((($118)) + 160|0);
 HEAP32[$119>>2] = $117;
 $120 = $mod;
 $121 = ((($120)) + 952|0);
 $122 = ((($mh)) + 952|0);
 dest=$121; src=$122; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $123 = $i;
  $124 = ($123|0)<(128);
  $125 = $mod;
  if (!($124)) {
   break;
  }
  $126 = ((($125)) + 136|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)>(4);
  if ($128) {
   $129 = $i;
   $130 = $mod;
   $131 = ((($130)) + 952|0);
   $132 = (($131) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $134 >> 1;
   $136 = $135&255;
   HEAP8[$132>>0] = $136;
  }
  $137 = $i;
  $138 = $mod;
  $139 = ((($138)) + 952|0);
  $140 = (($139) + ($137)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = $mod;
  $144 = ((($143)) + 128|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ($142|0)>($145|0);
  if ($146) {
   $147 = $i;
   $148 = $mod;
   $149 = ((($148)) + 952|0);
   $150 = (($149) + ($147)|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = $mod;
   $154 = ((($153)) + 128|0);
   HEAP32[$154>>2] = $152;
  }
  $155 = $i;
  $156 = (($155) + 1)|0;
  $i = $156;
 }
 $157 = ((($125)) + 128|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + 1)|0;
 HEAP32[$157>>2] = $159;
 $160 = $mod;
 $161 = ((($160)) + 136|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $mod;
 $164 = ((($163)) + 128|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = Math_imul($162, $165)|0;
 $167 = $mod;
 $168 = ((($167)) + 132|0);
 HEAP32[$168>>2] = $166;
 $169 = $mod;
 (_strncpy(($169|0),($mh|0),20)|0);
 $170 = $1;
 $171 = $tracker;
 $172 = ((($mh)) + 1080|0);
 HEAP32[$vararg_buffer14>>2] = $171;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $172;
 _set_type($170,4384,$vararg_buffer14);
 $173 = $mod;
 $174 = (_instrument_init($173)|0);
 $175 = ($174|0)<(0);
 if ($175) {
  $0 = -1;
  $398 = $0;
  STACKTOP = sp;return ($398|0);
 }
 $i = 0;
 while(1) {
  $176 = $i;
  $177 = $mod;
  $178 = ((($177)) + 140|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($176|0)<($179|0);
  if (!($180)) {
   label = 33;
   break;
  }
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 176|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*764)|0)|0);
  $xxi = $185;
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 180|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($186*52)|0)|0);
  $xxs = $190;
  $191 = $mod;
  $192 = $i;
  $193 = (_subinstrument_alloc($191,$192,1)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   break;
  }
  $195 = $xxi;
  $196 = ((($195)) + 756|0);
  $197 = HEAP32[$196>>2]|0;
  $sub = $197;
  $198 = $i;
  $199 = ((($mh)) + 20|0);
  $200 = (($199) + (($198*30)|0)|0);
  $201 = ((($200)) + 22|0);
  $202 = HEAP16[$201>>1]|0;
  $203 = $202&65535;
  $204 = $203<<1;
  $205 = $xxs;
  $206 = ((($205)) + 32|0);
  HEAP32[$206>>2] = $204;
  $207 = $i;
  $208 = ((($mh)) + 20|0);
  $209 = (($208) + (($207*30)|0)|0);
  $210 = ((($209)) + 26|0);
  $211 = HEAP16[$210>>1]|0;
  $212 = $211&65535;
  $213 = $212<<1;
  $214 = $xxs;
  $215 = ((($214)) + 36|0);
  HEAP32[$215>>2] = $213;
  $216 = $xxs;
  $217 = ((($216)) + 36|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $i;
  $220 = ((($mh)) + 20|0);
  $221 = (($220) + (($219*30)|0)|0);
  $222 = ((($221)) + 28|0);
  $223 = HEAP16[$222>>1]|0;
  $224 = $223&65535;
  $225 = $224<<1;
  $226 = (($218) + ($225))|0;
  $227 = $xxs;
  $228 = ((($227)) + 40|0);
  HEAP32[$228>>2] = $226;
  $229 = $i;
  $230 = ((($mh)) + 20|0);
  $231 = (($230) + (($229*30)|0)|0);
  $232 = ((($231)) + 28|0);
  $233 = HEAP16[$232>>1]|0;
  $234 = $233&65535;
  $235 = ($234|0)>(1);
  $236 = $235 ? 2 : 0;
  $237 = $xxs;
  $238 = ((($237)) + 44|0);
  HEAP32[$238>>2] = $236;
  $239 = $i;
  $240 = ((($mh)) + 20|0);
  $241 = (($240) + (($239*30)|0)|0);
  $242 = ((($241)) + 24|0);
  $243 = HEAP8[$242>>0]|0;
  $244 = $243 << 24 >> 24;
  $245 = $244 << 4;
  $246 = $245&255;
  $247 = $246 << 24 >> 24;
  $248 = $sub;
  $249 = ((($248)) + 16|0);
  HEAP32[$249>>2] = $247;
  $250 = $i;
  $251 = ((($mh)) + 20|0);
  $252 = (($251) + (($250*30)|0)|0);
  $253 = ((($252)) + 25|0);
  $254 = HEAP8[$253>>0]|0;
  $255 = $254 << 24 >> 24;
  $256 = $sub;
  HEAP32[$256>>2] = $255;
  $257 = $sub;
  $258 = ((($257)) + 8|0);
  HEAP32[$258>>2] = 128;
  $259 = $i;
  $260 = $sub;
  $261 = ((($260)) + 40|0);
  HEAP32[$261>>2] = $259;
  $262 = $xxi;
  $263 = ((($262)) + 40|0);
  HEAP32[$263>>2] = 4095;
  $264 = $xxs;
  $265 = ((($264)) + 32|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($266|0)>(0);
  if ($267) {
   $268 = $xxi;
   $269 = ((($268)) + 36|0);
   HEAP32[$269>>2] = 1;
  }
  $270 = $mod;
  $271 = $i;
  $272 = $i;
  $273 = ((($mh)) + 20|0);
  $274 = (($273) + (($272*30)|0)|0);
  (_instrument_name($270,$271,$274,22)|0);
  $275 = $i;
  $276 = (($275) + 1)|0;
  $i = $276;
 }
 L45: do {
  if ((label|0) == 33) {
   $277 = $mod;
   $278 = (_pattern_init($277)|0);
   $279 = ($278|0)<(0);
   if (!($279)) {
    $i = 0;
    while(1) {
     $280 = $i;
     $281 = $mod;
     $282 = ((($281)) + 128|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($280|0)<($283|0);
     if (!($284)) {
      break;
     }
     $285 = $mod;
     $286 = $i;
     $287 = (_pattern_tracks_alloc($285,$286,64)|0);
     $288 = ($287|0)<(0);
     if ($288) {
      break L45;
     }
     $j = 0;
     while(1) {
      $289 = $j;
      $290 = ($289|0)<(256);
      if (!($290)) {
       break;
      }
      $291 = $j;
      $292 = (($291|0) / 4)&-1;
      $293 = $j;
      $294 = (($293|0) % 4)&-1;
      $295 = $i;
      $296 = $1;
      $297 = ((($296)) + 168|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = (($298) + ($295<<2)|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = ((($300)) + 4|0);
      $302 = (($301) + ($294<<2)|0);
      $303 = HEAP32[$302>>2]|0;
      $304 = $1;
      $305 = ((($304)) + 172|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (($306) + ($303<<2)|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = ((($308)) + 4|0);
      $310 = (($309) + ($292<<3)|0);
      $event = $310;
      $311 = $2;
      (_hio_read($mod_event,1,4,$311)|0);
      $312 = $event;
      _decode_noisetracker_event($312,$mod_event);
      $313 = $j;
      $314 = (($313) + 1)|0;
      $j = $314;
     }
     $315 = $mod;
     $316 = ((($315)) + 136|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = ($317|0)>(4);
     L56: do {
      if ($318) {
       $j = 0;
       while(1) {
        $319 = $j;
        $320 = ($319|0)<(256);
        if (!($320)) {
         break L56;
        }
        $321 = $j;
        $322 = (($321|0) / 4)&-1;
        $323 = $j;
        $324 = (($323|0) % 4)&-1;
        $325 = (($324) + 4)|0;
        $326 = $i;
        $327 = $1;
        $328 = ((($327)) + 168|0);
        $329 = HEAP32[$328>>2]|0;
        $330 = (($329) + ($326<<2)|0);
        $331 = HEAP32[$330>>2]|0;
        $332 = ((($331)) + 4|0);
        $333 = (($332) + ($325<<2)|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = $1;
        $336 = ((($335)) + 172|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = (($337) + ($334<<2)|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = ((($339)) + 4|0);
        $341 = (($340) + ($322<<3)|0);
        $event = $341;
        $342 = $2;
        (_hio_read($mod_event,1,4,$342)|0);
        $343 = $event;
        _decode_noisetracker_event($343,$mod_event);
        $344 = $event;
        $345 = ((($344)) + 3|0);
        $346 = HEAP8[$345>>0]|0;
        $347 = $346&255;
        $348 = ($347|0)==(14);
        if ($348) {
         $349 = $event;
         $350 = ((($349)) + 4|0);
         HEAP8[$350>>0] = 0;
         $351 = $event;
         $352 = ((($351)) + 3|0);
         HEAP8[$352>>0] = 0;
        }
        $353 = $j;
        $354 = (($353) + 1)|0;
        $j = $354;
       }
      }
     } while(0);
     $355 = $i;
     $356 = (($355) + 1)|0;
     $i = $356;
    }
    $i = 0;
    while(1) {
     $357 = $i;
     $358 = $mod;
     $359 = ((($358)) + 144|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = ($357|0)<($360|0);
     if (!($361)) {
      break;
     }
     $362 = $i;
     $363 = $mod;
     $364 = ((($363)) + 180|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($365) + (($362*52)|0)|0);
     $367 = ((($366)) + 32|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ($368|0)==(0);
     if ($369) {
      $370 = $am_synth;
      $371 = ($370|0)!=(0);
      if ($371) {
       $372 = $nt;
       $373 = $i;
       $374 = (_is_am_instrument($372,$373)|0);
       $375 = ($374|0)!=(0);
       if ($375) {
        $376 = $1;
        $377 = $nt;
        $378 = $i;
        $379 = (_read_am_instrument($376,$377,$378)|0);
        $380 = ($379|0)<(0);
        if ($380) {
         break L45;
        }
       }
      }
     } else {
      $381 = $1;
      $382 = $2;
      $383 = $i;
      $384 = $mod;
      $385 = ((($384)) + 180|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = (($386) + (($383*52)|0)|0);
      $388 = (_load_sample($381,$382,512,$387,0)|0);
      $389 = ($388|0)<(0);
      if ($389) {
       break L45;
      }
     }
     $390 = $i;
     $391 = (($390) + 1)|0;
     $i = $391;
    }
    $392 = $nt;
    $393 = ($392|0)!=(0|0);
    if ($393) {
     $394 = $nt;
     (_fclose(($394|0))|0);
    }
    $0 = 0;
    $398 = $0;
    STACKTOP = sp;return ($398|0);
   }
  }
 } while(0);
 $395 = $nt;
 $396 = ($395|0)!=(0|0);
 if ($396) {
  $397 = $nt;
  (_fclose(($397|0))|0);
 }
 $0 = -1;
 $398 = $0;
 STACKTOP = sp;return ($398|0);
}
function _is_am_instrument($nt,$i) {
 $nt = $nt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf = 0, $wf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 14|0;
 $1 = $nt;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 $5 = ($4*120)|0;
 $6 = (144 + ($5))|0;
 (_fseek(($3|0),($6|0),0)|0);
 $7 = $1;
 $8 = (_fread(($buf|0),1,2,($7|0))|0);
 $9 = ($8>>>0)<(2);
 do {
  if ($9) {
   $0 = 0;
  } else {
   $10 = (_memcmp($buf,4496,2)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $0 = 0;
    break;
   }
   $12 = $1;
   (_fseek(($12|0),24,1)|0);
   $13 = $1;
   $14 = (_read16b($13)|0);
   $wf = $14;
   $15 = $wf;
   $16 = $15 << 16 >> 16;
   $17 = ($16|0)<(0);
   if (!($17)) {
    $18 = $wf;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)>(3);
    if (!($20)) {
     $0 = 1;
     break;
    }
   }
   $0 = 0;
  }
 } while(0);
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _read_am_instrument($m,$nt,$i) {
 $m = $m|0;
 $nt = $nt|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $am = 0;
 var $am_noise = 0, $b = 0, $freq_env = 0, $j = 0, $mod = 0, $vol_env = 0, $wave = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $am = sp + 52|0;
 $am_noise = sp + 80|0;
 $1 = $m;
 $2 = $nt;
 $3 = $i;
 $4 = $1;
 $mod = $4;
 $5 = $3;
 $6 = $mod;
 $7 = ((($6)) + 176|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*764)|0)|0);
 $xxi = $9;
 $10 = $3;
 $11 = $mod;
 $12 = ((($11)) + 180|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*52)|0)|0);
 $xxs = $14;
 $15 = $xxi;
 $16 = ((($15)) + 44|0);
 $vol_env = $16;
 $17 = $xxi;
 $18 = ((($17)) + 356|0);
 $freq_env = $18;
 $19 = $2;
 $20 = $3;
 $21 = ($20*120)|0;
 $22 = (144 + ($21))|0;
 $23 = (($22) + 2)|0;
 $24 = (($23) + 4)|0;
 (_fseek(($19|0),($24|0),0)|0);
 $25 = $2;
 $26 = (_read16b($25)|0);
 HEAP16[$am>>1] = $26;
 $27 = $2;
 $28 = (_read16b($27)|0);
 $29 = ((($am)) + 2|0);
 HEAP16[$29>>1] = $28;
 $30 = $2;
 $31 = (_read16b($30)|0);
 $32 = ((($am)) + 4|0);
 HEAP16[$32>>1] = $31;
 $33 = $2;
 $34 = (_read16b($33)|0);
 $35 = ((($am)) + 6|0);
 HEAP16[$35>>1] = $34;
 $36 = $2;
 $37 = (_read16b($36)|0);
 $38 = ((($am)) + 8|0);
 HEAP16[$38>>1] = $37;
 $39 = $2;
 $40 = (_read16b($39)|0);
 $41 = ((($am)) + 10|0);
 HEAP16[$41>>1] = $40;
 $42 = $2;
 $43 = (_read16b($42)|0);
 $44 = ((($am)) + 12|0);
 HEAP16[$44>>1] = $43;
 $45 = $2;
 $46 = (_read16b($45)|0);
 $47 = ((($am)) + 14|0);
 HEAP16[$47>>1] = $46;
 $48 = $2;
 (_read16b($48)|0);
 $49 = $2;
 $50 = (_read16b($49)|0);
 $51 = ((($am)) + 16|0);
 HEAP16[$51>>1] = $50;
 $52 = $2;
 $53 = (_read16b($52)|0);
 $54 = ((($am)) + 18|0);
 HEAP16[$54>>1] = $53;
 $55 = $2;
 $56 = (_read16b($55)|0);
 $57 = $56 << 16 >> 16;
 $58 = (0 - ($57))|0;
 $59 = $58&65535;
 $60 = ((($am)) + 20|0);
 HEAP16[$60>>1] = $59;
 $61 = $2;
 $62 = (_read16b($61)|0);
 $63 = ((($am)) + 22|0);
 HEAP16[$63>>1] = $62;
 $64 = $2;
 $65 = (_read16b($64)|0);
 $66 = ((($am)) + 24|0);
 HEAP16[$66>>1] = $65;
 $67 = $2;
 $68 = (_read16b($67)|0);
 $69 = ((($am)) + 26|0);
 HEAP16[$69>>1] = $68;
 $70 = ((($am)) + 18|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = $71 << 16 >> 16;
 $73 = ($72|0)<(3);
 $74 = $xxs;
 $75 = ((($74)) + 32|0);
 if ($73) {
  HEAP32[$75>>2] = 32;
  $76 = $xxs;
  $77 = ((($76)) + 36|0);
  HEAP32[$77>>2] = 0;
  $78 = $xxs;
  $79 = ((($78)) + 40|0);
  HEAP32[$79>>2] = 32;
  $80 = ((($am)) + 18|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81 << 16 >> 16;
  $83 = (4400 + ($82<<5)|0);
  $wave = $83;
 } else {
  HEAP32[$75>>2] = 1024;
  $84 = $xxs;
  $85 = ((($84)) + 36|0);
  HEAP32[$85>>2] = 0;
  $86 = $xxs;
  $87 = ((($86)) + 40|0);
  HEAP32[$87>>2] = 1024;
  $j = 0;
  while(1) {
   $88 = $j;
   $89 = ($88|0)<(1024);
   if (!($89)) {
    break;
   }
   $90 = (_rand()|0);
   $91 = (($90|0) % 256)&-1;
   $92 = $91&255;
   $93 = $j;
   $94 = (($am_noise) + ($93)|0);
   HEAP8[$94>>0] = $92;
   $95 = $j;
   $96 = (($95) + 1)|0;
   $j = $96;
  }
  $wave = $am_noise;
 }
 $97 = $xxs;
 $98 = ((($97)) + 44|0);
 HEAP32[$98>>2] = 2;
 $99 = $xxi;
 $100 = ((($99)) + 756|0);
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$101>>2] = 64;
 $102 = $xxi;
 $103 = ((($102)) + 36|0);
 HEAP32[$103>>2] = 1;
 $104 = ((($am)) + 26|0);
 $105 = HEAP16[$104>>1]|0;
 $106 = $105 << 16 >> 16;
 $107 = Math_imul(-12, $106)|0;
 $108 = $xxi;
 $109 = ((($108)) + 756|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($110)) + 12|0);
 HEAP32[$111>>2] = $107;
 $112 = $xxi;
 $113 = ((($112)) + 756|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($114)) + 20|0);
 HEAP32[$115>>2] = 0;
 $116 = ((($am)) + 22|0);
 $117 = HEAP16[$116>>1]|0;
 $118 = $117 << 16 >> 16;
 $119 = $xxi;
 $120 = ((($119)) + 756|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ((($121)) + 24|0);
 HEAP32[$122>>2] = $118;
 $123 = ((($am)) + 24|0);
 $124 = HEAP16[$123>>1]|0;
 $125 = $124 << 16 >> 16;
 $126 = $xxi;
 $127 = ((($126)) + 756|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($128)) + 28|0);
 HEAP32[$129>>2] = $125;
 $130 = ((($am)) + 4|0);
 $131 = HEAP16[$130>>1]|0;
 $132 = $131 << 16 >> 16;
 $133 = ($132|0)==(0);
 if ($133) {
  $134 = ((($am)) + 4|0);
  HEAP16[$134>>1] = 1;
 }
 $135 = ((($am)) + 8|0);
 $136 = HEAP16[$135>>1]|0;
 $137 = $136 << 16 >> 16;
 $138 = ($137|0)==(0);
 if ($138) {
  $139 = ((($am)) + 8|0);
  HEAP16[$139>>1] = 1;
 }
 $140 = ((($am)) + 12|0);
 $141 = HEAP16[$140>>1]|0;
 $142 = $141 << 16 >> 16;
 $143 = ($142|0)==(0);
 if ($143) {
  $144 = ((($am)) + 12|0);
  HEAP16[$144>>1] = 1;
 }
 $145 = ((($am)) + 16|0);
 $146 = HEAP16[$145>>1]|0;
 $147 = $146 << 16 >> 16;
 $148 = ($147|0)==(0);
 if ($148) {
  $149 = ((($am)) + 16|0);
  HEAP16[$149>>1] = 1;
 }
 $150 = $vol_env;
 $151 = ((($150)) + 4|0);
 HEAP32[$151>>2] = 6;
 $152 = $vol_env;
 HEAP32[$152>>2] = 1;
 $153 = $vol_env;
 $154 = ((($153)) + 28|0);
 HEAP16[$154>>1] = 0;
 $155 = HEAP16[$am>>1]|0;
 $156 = $155 << 16 >> 16;
 $157 = (($156|0) / 4)&-1;
 $158 = $157&65535;
 $159 = $vol_env;
 $160 = ((($159)) + 28|0);
 $161 = ((($160)) + 2|0);
 HEAP16[$161>>1] = $158;
 $162 = ((($am)) + 2|0);
 $163 = HEAP16[$162>>1]|0;
 $164 = $163 << 16 >> 16;
 $165 = HEAP16[$am>>1]|0;
 $166 = $165 << 16 >> 16;
 $167 = ($164|0)>($166|0);
 if ($167) {
  $168 = ((($am)) + 2|0);
  $169 = HEAP16[$168>>1]|0;
  $170 = $169 << 16 >> 16;
  $171 = HEAP16[$am>>1]|0;
  $172 = $171 << 16 >> 16;
  $173 = (($170) - ($172))|0;
  $a = $173;
  $174 = HEAP16[$am>>1]|0;
  $175 = $174 << 16 >> 16;
  $176 = (256 - ($175))|0;
  $b = $176;
 } else {
  $177 = HEAP16[$am>>1]|0;
  $178 = $177 << 16 >> 16;
  $179 = ((($am)) + 2|0);
  $180 = HEAP16[$179>>1]|0;
  $181 = $180 << 16 >> 16;
  $182 = (($178) - ($181))|0;
  $a = $182;
  $183 = HEAP16[$am>>1]|0;
  $184 = $183 << 16 >> 16;
  $b = $184;
 }
 $185 = $b;
 $186 = ($185|0)==(0);
 if ($186) {
  $b = 1;
 }
 $187 = $vol_env;
 $188 = ((($187)) + 28|0);
 $189 = HEAP16[$188>>1]|0;
 $190 = $189 << 16 >> 16;
 $191 = $a;
 $192 = $191<<8;
 $193 = ((($am)) + 4|0);
 $194 = HEAP16[$193>>1]|0;
 $195 = $194 << 16 >> 16;
 $196 = $b;
 $197 = Math_imul($195, $196)|0;
 $198 = (($192|0) / ($197|0))&-1;
 $199 = (($190) + ($198))|0;
 $200 = $199&65535;
 $201 = $vol_env;
 $202 = ((($201)) + 28|0);
 $203 = ((($202)) + 4|0);
 HEAP16[$203>>1] = $200;
 $204 = ((($am)) + 2|0);
 $205 = HEAP16[$204>>1]|0;
 $206 = $205 << 16 >> 16;
 $207 = (($206|0) / 4)&-1;
 $208 = $207&65535;
 $209 = $vol_env;
 $210 = ((($209)) + 28|0);
 $211 = ((($210)) + 6|0);
 HEAP16[$211>>1] = $208;
 $212 = ((($am)) + 6|0);
 $213 = HEAP16[$212>>1]|0;
 $214 = $213 << 16 >> 16;
 $215 = ((($am)) + 2|0);
 $216 = HEAP16[$215>>1]|0;
 $217 = $216 << 16 >> 16;
 $218 = ($214|0)>($217|0);
 if ($218) {
  $219 = ((($am)) + 6|0);
  $220 = HEAP16[$219>>1]|0;
  $221 = $220 << 16 >> 16;
  $222 = ((($am)) + 2|0);
  $223 = HEAP16[$222>>1]|0;
  $224 = $223 << 16 >> 16;
  $225 = (($221) - ($224))|0;
  $a = $225;
  $226 = ((($am)) + 2|0);
  $227 = HEAP16[$226>>1]|0;
  $228 = $227 << 16 >> 16;
  $229 = (256 - ($228))|0;
  $b = $229;
 } else {
  $230 = ((($am)) + 2|0);
  $231 = HEAP16[$230>>1]|0;
  $232 = $231 << 16 >> 16;
  $233 = ((($am)) + 6|0);
  $234 = HEAP16[$233>>1]|0;
  $235 = $234 << 16 >> 16;
  $236 = (($232) - ($235))|0;
  $a = $236;
  $237 = ((($am)) + 2|0);
  $238 = HEAP16[$237>>1]|0;
  $239 = $238 << 16 >> 16;
  $b = $239;
 }
 $240 = $b;
 $241 = ($240|0)==(0);
 if ($241) {
  $b = 1;
 }
 $242 = $vol_env;
 $243 = ((($242)) + 28|0);
 $244 = ((($243)) + 4|0);
 $245 = HEAP16[$244>>1]|0;
 $246 = $245 << 16 >> 16;
 $247 = $a;
 $248 = $247<<8;
 $249 = ((($am)) + 8|0);
 $250 = HEAP16[$249>>1]|0;
 $251 = $250 << 16 >> 16;
 $252 = $b;
 $253 = Math_imul($251, $252)|0;
 $254 = (($248|0) / ($253|0))&-1;
 $255 = (($246) + ($254))|0;
 $256 = $255&65535;
 $257 = $vol_env;
 $258 = ((($257)) + 28|0);
 $259 = ((($258)) + 8|0);
 HEAP16[$259>>1] = $256;
 $260 = ((($am)) + 6|0);
 $261 = HEAP16[$260>>1]|0;
 $262 = $261 << 16 >> 16;
 $263 = (($262|0) / 4)&-1;
 $264 = $263&65535;
 $265 = $vol_env;
 $266 = ((($265)) + 28|0);
 $267 = ((($266)) + 10|0);
 HEAP16[$267>>1] = $264;
 $268 = ((($am)) + 10|0);
 $269 = HEAP16[$268>>1]|0;
 $270 = $269 << 16 >> 16;
 $271 = ((($am)) + 6|0);
 $272 = HEAP16[$271>>1]|0;
 $273 = $272 << 16 >> 16;
 $274 = ($270|0)>($273|0);
 if ($274) {
  $275 = ((($am)) + 10|0);
  $276 = HEAP16[$275>>1]|0;
  $277 = $276 << 16 >> 16;
  $278 = ((($am)) + 6|0);
  $279 = HEAP16[$278>>1]|0;
  $280 = $279 << 16 >> 16;
  $281 = (($277) - ($280))|0;
  $a = $281;
  $282 = ((($am)) + 6|0);
  $283 = HEAP16[$282>>1]|0;
  $284 = $283 << 16 >> 16;
  $285 = (256 - ($284))|0;
  $b = $285;
 } else {
  $286 = ((($am)) + 6|0);
  $287 = HEAP16[$286>>1]|0;
  $288 = $287 << 16 >> 16;
  $289 = ((($am)) + 10|0);
  $290 = HEAP16[$289>>1]|0;
  $291 = $290 << 16 >> 16;
  $292 = (($288) - ($291))|0;
  $a = $292;
  $293 = ((($am)) + 6|0);
  $294 = HEAP16[$293>>1]|0;
  $295 = $294 << 16 >> 16;
  $b = $295;
 }
 $296 = $b;
 $297 = ($296|0)==(0);
 if ($297) {
  $b = 1;
 }
 $298 = $vol_env;
 $299 = ((($298)) + 28|0);
 $300 = ((($299)) + 8|0);
 $301 = HEAP16[$300>>1]|0;
 $302 = $301 << 16 >> 16;
 $303 = $a;
 $304 = $303<<8;
 $305 = ((($am)) + 12|0);
 $306 = HEAP16[$305>>1]|0;
 $307 = $306 << 16 >> 16;
 $308 = $b;
 $309 = Math_imul($307, $308)|0;
 $310 = (($304|0) / ($309|0))&-1;
 $311 = (($302) + ($310))|0;
 $312 = $311&65535;
 $313 = $vol_env;
 $314 = ((($313)) + 28|0);
 $315 = ((($314)) + 12|0);
 HEAP16[$315>>1] = $312;
 $316 = ((($am)) + 10|0);
 $317 = HEAP16[$316>>1]|0;
 $318 = $317 << 16 >> 16;
 $319 = (($318|0) / 4)&-1;
 $320 = $319&65535;
 $321 = $vol_env;
 $322 = ((($321)) + 28|0);
 $323 = ((($322)) + 14|0);
 HEAP16[$323>>1] = $320;
 $324 = $vol_env;
 $325 = ((($324)) + 28|0);
 $326 = ((($325)) + 12|0);
 $327 = HEAP16[$326>>1]|0;
 $328 = $327 << 16 >> 16;
 $329 = ((($am)) + 14|0);
 $330 = HEAP16[$329>>1]|0;
 $331 = $330 << 16 >> 16;
 $332 = (($328) + ($331))|0;
 $333 = $332&65535;
 $334 = $vol_env;
 $335 = ((($334)) + 28|0);
 $336 = ((($335)) + 16|0);
 HEAP16[$336>>1] = $333;
 $337 = ((($am)) + 10|0);
 $338 = HEAP16[$337>>1]|0;
 $339 = $338 << 16 >> 16;
 $340 = (($339|0) / 4)&-1;
 $341 = $340&65535;
 $342 = $vol_env;
 $343 = ((($342)) + 28|0);
 $344 = ((($343)) + 18|0);
 HEAP16[$344>>1] = $341;
 $345 = $vol_env;
 $346 = ((($345)) + 28|0);
 $347 = ((($346)) + 16|0);
 $348 = HEAP16[$347>>1]|0;
 $349 = $348 << 16 >> 16;
 $350 = ((($am)) + 16|0);
 $351 = HEAP16[$350>>1]|0;
 $352 = $351 << 16 >> 16;
 $353 = (256 / ($352|0))&-1;
 $354 = (($349) + ($353))|0;
 $355 = $354&65535;
 $356 = $vol_env;
 $357 = ((($356)) + 28|0);
 $358 = ((($357)) + 20|0);
 HEAP16[$358>>1] = $355;
 $359 = $vol_env;
 $360 = ((($359)) + 28|0);
 $361 = ((($360)) + 22|0);
 HEAP16[$361>>1] = 0;
 $362 = ((($am)) + 20|0);
 $363 = HEAP16[$362>>1]|0;
 $364 = ($363<<16>>16)!=(0);
 if ($364) {
  $365 = $freq_env;
  $366 = ((($365)) + 4|0);
  HEAP32[$366>>2] = 2;
  $367 = $freq_env;
  HEAP32[$367>>2] = 1;
  $368 = $freq_env;
  $369 = ((($368)) + 28|0);
  HEAP16[$369>>1] = 0;
  $370 = $freq_env;
  $371 = ((($370)) + 28|0);
  $372 = ((($371)) + 2|0);
  HEAP16[$372>>1] = 0;
  $373 = ((($am)) + 20|0);
  $374 = HEAP16[$373>>1]|0;
  $375 = $374 << 16 >> 16;
  $376 = (Math_abs(($375|0))|0);
  $377 = (1024 / ($376|0))&-1;
  $378 = $377&65535;
  $379 = $freq_env;
  $380 = ((($379)) + 28|0);
  $381 = ((($380)) + 4|0);
  HEAP16[$381>>1] = $378;
  $382 = ((($am)) + 20|0);
  $383 = HEAP16[$382>>1]|0;
  $384 = $383 << 16 >> 16;
  $385 = ($384|0)<(0);
  $386 = $385 ? -256 : 256;
  $387 = ($386*10)|0;
  $388 = $387&65535;
  $389 = $freq_env;
  $390 = ((($389)) + 28|0);
  $391 = ((($390)) + 6|0);
  HEAP16[$391>>1] = $388;
 }
 $392 = $1;
 $393 = $xxs;
 $394 = $wave;
 $395 = (_load_sample($392,0,16,$393,$394)|0);
 $396 = ($395|0)!=(0);
 if ($396) {
  $0 = -1;
  $397 = $0;
  STACKTOP = sp;return ($397|0);
 } else {
  $0 = 0;
  $397 = $0;
  STACKTOP = sp;return ($397|0);
 }
 return (0)|0;
}
function _st_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $mh = 0, $mod_event = 0, $or$cond = 0, $p = 0, $pat = 0, $s = 0, $size = 0, $smp_size = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mh = sp + 56|0;
 $mod_event = sp + 656|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_size($4)|0);
 $size = $5;
 $6 = $size;
 $7 = ($6|0)<(600);
 if ($7) {
  $0 = -1;
  $282 = $0;
  STACKTOP = sp;return ($282|0);
 }
 $smp_size = 0;
 $8 = $1;
 $9 = $3;
 (_hio_seek($8,$9,0)|0);
 $10 = $1;
 (_hio_read($mh,1,20,$10)|0);
 $11 = (_test_name($mh,20)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $0 = -1;
  $282 = $0;
  STACKTOP = sp;return ($282|0);
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(15);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = ((($mh)) + 20|0);
  $17 = (($16) + (($15*30)|0)|0);
  $18 = $1;
  (_hio_read($17,1,22,$18)|0);
  $19 = $1;
  $20 = (_hio_read16b($19)|0);
  $21 = $i;
  $22 = ((($mh)) + 20|0);
  $23 = (($22) + (($21*30)|0)|0);
  $24 = ((($23)) + 22|0);
  HEAP16[$24>>1] = $20;
  $25 = $1;
  $26 = (_hio_read8($25)|0);
  $27 = $i;
  $28 = ((($mh)) + 20|0);
  $29 = (($28) + (($27*30)|0)|0);
  $30 = ((($29)) + 24|0);
  HEAP8[$30>>0] = $26;
  $31 = $1;
  $32 = (_hio_read8($31)|0);
  $33 = $i;
  $34 = ((($mh)) + 20|0);
  $35 = (($34) + (($33*30)|0)|0);
  $36 = ((($35)) + 25|0);
  HEAP8[$36>>0] = $32;
  $37 = $1;
  $38 = (_hio_read16b($37)|0);
  $39 = $i;
  $40 = ((($mh)) + 20|0);
  $41 = (($40) + (($39*30)|0)|0);
  $42 = ((($41)) + 26|0);
  HEAP16[$42>>1] = $38;
  $43 = $1;
  $44 = (_hio_read16b($43)|0);
  $45 = $i;
  $46 = ((($mh)) + 20|0);
  $47 = (($46) + (($45*30)|0)|0);
  $48 = ((($47)) + 28|0);
  HEAP16[$48>>1] = $44;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $1;
 $52 = (_hio_read8($51)|0);
 $53 = ((($mh)) + 470|0);
 HEAP8[$53>>0] = $52;
 $54 = $1;
 $55 = (_hio_read8($54)|0);
 $56 = ((($mh)) + 471|0);
 HEAP8[$56>>0] = $55;
 $57 = ((($mh)) + 472|0);
 $58 = $1;
 (_hio_read($57,1,128,$58)|0);
 $i = 0;
 $pat = 0;
 while(1) {
  $59 = $i;
  $60 = ($59|0)<(128);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = ((($mh)) + 472|0);
  $63 = (($62) + ($61)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = ($65|0)>(127);
  if ($66) {
   label = 11;
   break;
  }
  $67 = $i;
  $68 = ((($mh)) + 472|0);
  $69 = (($68) + ($67)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $pat;
  $73 = ($71|0)>($72|0);
  if ($73) {
   $74 = $i;
   $75 = ((($mh)) + 472|0);
   $76 = (($75) + ($74)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $pat = $78;
  }
  $79 = $i;
  $80 = (($79) + 1)|0;
  $i = $80;
 }
 if ((label|0) == 11) {
  $0 = -1;
  $282 = $0;
  STACKTOP = sp;return ($282|0);
 }
 $81 = $pat;
 $82 = (($81) + 1)|0;
 $pat = $82;
 $83 = $pat;
 $84 = ($83|0)>(127);
 if (!($84)) {
  $85 = ((($mh)) + 470|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = ($87|0)==(0);
  if (!($88)) {
   $89 = ((($mh)) + 470|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)>(127);
   if (!($92)) {
    $i = 0;
    while(1) {
     $93 = $i;
     $94 = ($93|0)<(15);
     if (!($94)) {
      label = 42;
      break;
     }
     $95 = $i;
     $96 = ((($mh)) + 20|0);
     $97 = (($96) + (($95*30)|0)|0);
     $98 = (_test_name($97,22)|0);
     $99 = ($98|0)<(0);
     if ($99) {
      label = 22;
      break;
     }
     $100 = $i;
     $101 = ((($mh)) + 20|0);
     $102 = (($101) + (($100*30)|0)|0);
     $103 = ((($102)) + 25|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104 << 24 >> 24;
     $106 = ($105|0)>(64);
     if ($106) {
      label = 24;
      break;
     }
     $107 = $i;
     $108 = ((($mh)) + 20|0);
     $109 = (($108) + (($107*30)|0)|0);
     $110 = ((($109)) + 24|0);
     $111 = HEAP8[$110>>0]|0;
     $112 = $111 << 24 >> 24;
     $113 = ($112|0)>(15);
     if ($113) {
      label = 26;
      break;
     }
     $114 = $i;
     $115 = ((($mh)) + 20|0);
     $116 = (($115) + (($114*30)|0)|0);
     $117 = ((($116)) + 22|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = $118&65535;
     $120 = ($119|0)>(32768);
     if ($120) {
      label = 28;
      break;
     }
     $121 = $i;
     $122 = ((($mh)) + 20|0);
     $123 = (($122) + (($121*30)|0)|0);
     $124 = ((($123)) + 26|0);
     $125 = HEAP16[$124>>1]|0;
     $126 = $125&65535;
     $127 = $126 >> 1;
     $128 = ($127|0)>(32768);
     if ($128) {
      label = 30;
      break;
     }
     $129 = $i;
     $130 = ((($mh)) + 20|0);
     $131 = (($130) + (($129*30)|0)|0);
     $132 = ((($131)) + 28|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $133&65535;
     $135 = ($134|0)>(32768);
     if ($135) {
      label = 32;
      break;
     }
     $136 = $i;
     $137 = ((($mh)) + 20|0);
     $138 = (($137) + (($136*30)|0)|0);
     $139 = ((($138)) + 26|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = $141 >> 1;
     $143 = $i;
     $144 = ((($mh)) + 20|0);
     $145 = (($144) + (($143*30)|0)|0);
     $146 = ((($145)) + 22|0);
     $147 = HEAP16[$146>>1]|0;
     $148 = $147&65535;
     $149 = ($142|0)>($148|0);
     if ($149) {
      label = 34;
      break;
     }
     $150 = $i;
     $151 = ((($mh)) + 20|0);
     $152 = (($151) + (($150*30)|0)|0);
     $153 = ((($152)) + 22|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $154&65535;
     $156 = ($155|0)!=(0);
     if ($156) {
      $157 = $i;
      $158 = ((($mh)) + 20|0);
      $159 = (($158) + (($157*30)|0)|0);
      $160 = ((($159)) + 26|0);
      $161 = HEAP16[$160>>1]|0;
      $162 = $161&65535;
      $163 = $162 >> 1;
      $164 = $i;
      $165 = ((($mh)) + 20|0);
      $166 = (($165) + (($164*30)|0)|0);
      $167 = ((($166)) + 22|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168&65535;
      $170 = ($163|0)==($169|0);
      if ($170) {
       label = 37;
       break;
      }
     }
     $171 = $i;
     $172 = ((($mh)) + 20|0);
     $173 = (($172) + (($171*30)|0)|0);
     $174 = ((($173)) + 22|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = $175&65535;
     $177 = ($176|0)==(0);
     if ($177) {
      $178 = $i;
      $179 = ((($mh)) + 20|0);
      $180 = (($179) + (($178*30)|0)|0);
      $181 = ((($180)) + 26|0);
      $182 = HEAP16[$181>>1]|0;
      $183 = $182&65535;
      $184 = ($183|0)>(0);
      if ($184) {
       label = 40;
       break;
      }
     }
     $185 = $i;
     $186 = ((($mh)) + 20|0);
     $187 = (($186) + (($185*30)|0)|0);
     $188 = ((($187)) + 22|0);
     $189 = HEAP16[$188>>1]|0;
     $190 = $189&65535;
     $191 = $190<<1;
     $192 = $smp_size;
     $193 = (($192) + ($191))|0;
     $smp_size = $193;
     $194 = $i;
     $195 = (($194) + 1)|0;
     $i = $195;
    }
    switch (label|0) {
     case 22: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 24: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 26: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 28: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 30: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 32: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 34: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 37: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 40: {
      $0 = -1;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
      break;
     }
     case 42: {
      $196 = $smp_size;
      $197 = ($196|0)<(8);
      if ($197) {
       $0 = -1;
       $282 = $0;
       STACKTOP = sp;return ($282|0);
      }
      $i = 0;
      $ins = 0;
      L60: while(1) {
       $198 = $i;
       $199 = $pat;
       $200 = ($198|0)<($199|0);
       if (!($200)) {
        label = 61;
        break;
       }
       $j = 0;
       while(1) {
        $201 = $j;
        $202 = ($201|0)<(256);
        if (!($202)) {
         break;
        }
        $203 = $1;
        (_hio_read($mod_event,1,4,$203)|0);
        $204 = HEAP8[$mod_event>>0]|0;
        $205 = $204&255;
        $206 = $205 & 240;
        $207 = ((($mod_event)) + 2|0);
        $208 = HEAP8[$207>>0]|0;
        $209 = $208&255;
        $210 = $209 & 240;
        $211 = $210 >> 4;
        $212 = $206 | $211;
        $s = $212;
        $213 = $s;
        $214 = ($213|0)>(15);
        if ($214) {
         label = 49;
         break L60;
        }
        $215 = $s;
        $216 = $ins;
        $217 = ($215|0)>($216|0);
        if ($217) {
         $218 = $s;
         $ins = $218;
        }
        $219 = HEAP8[$mod_event>>0]|0;
        $220 = $219&255;
        $221 = $220 & 15;
        $222 = $221<<8;
        $223 = ((($mod_event)) + 1|0);
        $224 = HEAP8[$223>>0]|0;
        $225 = $224&255;
        $226 = (($222) + ($225))|0;
        $p = $226;
        $227 = $p;
        $228 = ($227|0)==(0);
        $229 = $p;
        $230 = ($229|0)==(162);
        $or$cond = $228 | $230;
        if (!($or$cond)) {
         $k = 0;
         while(1) {
          $231 = $k;
          $232 = (4632 + ($231<<2)|0);
          $233 = HEAP32[$232>>2]|0;
          $234 = ($233|0)>=(0);
          if (!($234)) {
           break;
          }
          $235 = $p;
          $236 = $k;
          $237 = (4632 + ($236<<2)|0);
          $238 = HEAP32[$237>>2]|0;
          $239 = ($235|0)==($238|0);
          if ($239) {
           break;
          }
          $240 = $k;
          $241 = (($240) + 1)|0;
          $k = $241;
         }
         $242 = $k;
         $243 = (4632 + ($242<<2)|0);
         $244 = HEAP32[$243>>2]|0;
         $245 = ($244|0)<(0);
         if ($245) {
          label = 58;
          break L60;
         }
        }
        $246 = $j;
        $247 = (($246) + 1)|0;
        $j = $247;
       }
       $248 = $i;
       $249 = (($248) + 1)|0;
       $i = $249;
      }
      if ((label|0) == 49) {
       $0 = -1;
       $282 = $0;
       STACKTOP = sp;return ($282|0);
      }
      else if ((label|0) == 58) {
       $0 = -1;
       $282 = $0;
       STACKTOP = sp;return ($282|0);
      }
      else if ((label|0) == 61) {
       $250 = $size;
       $251 = $pat;
       $252 = $251<<10;
       $253 = (600 + ($252))|0;
       $254 = $smp_size;
       $255 = (($253) + ($254))|0;
       $256 = ($250|0)<($255|0);
       if ($256) {
        $i = 0;
        $ss = 0;
        while(1) {
         $257 = $i;
         $258 = $ins;
         $259 = ($257|0)<($258|0);
         if (!($259)) {
          break;
         }
         $260 = $i;
         $261 = ((($mh)) + 20|0);
         $262 = (($261) + (($260*30)|0)|0);
         $263 = ((($262)) + 22|0);
         $264 = HEAP16[$263>>1]|0;
         $265 = $264&65535;
         $266 = $265<<1;
         $267 = $ss;
         $268 = (($267) + ($266))|0;
         $ss = $268;
         $269 = $i;
         $270 = (($269) + 1)|0;
         $i = $270;
        }
        $271 = $size;
        $272 = $pat;
        $273 = $272<<10;
        $274 = (600 + ($273))|0;
        $275 = $ss;
        $276 = (($274) + ($275))|0;
        $277 = ($271|0)<($276|0);
        if ($277) {
         $0 = -1;
         $282 = $0;
         STACKTOP = sp;return ($282|0);
        }
       }
       $278 = $1;
       $279 = $3;
       (_hio_seek($278,$279,0)|0);
       $280 = $1;
       $281 = $2;
       _read_title($280,$281,20);
       $0 = 0;
       $282 = $0;
       STACKTOP = sp;return ($282|0);
      }
      break;
     }
    }
   }
  }
 }
 $0 = -1;
 $282 = $0;
 STACKTOP = sp;return ($282|0);
}
function _st_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $fxused = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $mod_event = 0, $modtype = 0, $pos = 0, $size = 0, $smp_size = 0, $sub = 0, $used_ins = 0, $ust = 0, $vararg_buffer = 0, $xxi = 0;
 var $xxs = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ev = sp + 688|0;
 $mh = sp + 80|0;
 $mod_event = sp + 680|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ust = 1;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_hio_size($7)|0);
 $size = $8;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 HEAP32[$10>>2] = 15;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = $13;
 $smp_size = 0;
 $16 = $2;
 (_hio_read($mh,1,20,$16)|0);
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<(15);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = ((($mh)) + 20|0);
  $21 = (($20) + (($19*30)|0)|0);
  $22 = $2;
  (_hio_read($21,1,22,$22)|0);
  $23 = $2;
  $24 = (_hio_read16b($23)|0);
  $25 = $i;
  $26 = ((($mh)) + 20|0);
  $27 = (($26) + (($25*30)|0)|0);
  $28 = ((($27)) + 22|0);
  HEAP16[$28>>1] = $24;
  $29 = $2;
  $30 = (_hio_read8($29)|0);
  $31 = $i;
  $32 = ((($mh)) + 20|0);
  $33 = (($32) + (($31*30)|0)|0);
  $34 = ((($33)) + 24|0);
  HEAP8[$34>>0] = $30;
  $35 = $2;
  $36 = (_hio_read8($35)|0);
  $37 = $i;
  $38 = ((($mh)) + 20|0);
  $39 = (($38) + (($37*30)|0)|0);
  $40 = ((($39)) + 25|0);
  HEAP8[$40>>0] = $36;
  $41 = $2;
  $42 = (_hio_read16b($41)|0);
  $43 = $i;
  $44 = ((($mh)) + 20|0);
  $45 = (($44) + (($43*30)|0)|0);
  $46 = ((($45)) + 26|0);
  HEAP16[$46>>1] = $42;
  $47 = $2;
  $48 = (_hio_read16b($47)|0);
  $49 = $i;
  $50 = ((($mh)) + 20|0);
  $51 = (($50) + (($49*30)|0)|0);
  $52 = ((($51)) + 28|0);
  HEAP16[$52>>1] = $48;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $55 = $2;
 $56 = (_hio_read8($55)|0);
 $57 = ((($mh)) + 470|0);
 HEAP8[$57>>0] = $56;
 $58 = $2;
 $59 = (_hio_read8($58)|0);
 $60 = ((($mh)) + 471|0);
 HEAP8[$60>>0] = $59;
 $61 = ((($mh)) + 472|0);
 $62 = $2;
 (_hio_read($61,1,128,$62)|0);
 $63 = ((($mh)) + 470|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $mod;
 $67 = ((($66)) + 156|0);
 HEAP32[$67>>2] = $65;
 $68 = ((($mh)) + 471|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $mod;
 $72 = ((($71)) + 160|0);
 HEAP32[$72>>2] = $70;
 $73 = $mod;
 $74 = ((($73)) + 160|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)<(64);
 if ($76) {
  $ust = 0;
 }
 $77 = $mod;
 $78 = ((($77)) + 952|0);
 $79 = ((($mh)) + 472|0);
 dest=$78; src=$79; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = ($80|0)<(128);
  if (!($81)) {
   break;
  }
  $82 = $i;
  $83 = $mod;
  $84 = ((($83)) + 952|0);
  $85 = (($84) + ($82)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $mod;
  $89 = ((($88)) + 128|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($87|0)>($90|0);
  if ($91) {
   $92 = $i;
   $93 = $mod;
   $94 = ((($93)) + 952|0);
   $95 = (($94) + ($92)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $mod;
   $99 = ((($98)) + 128|0);
   HEAP32[$99>>2] = $97;
  }
  $100 = $i;
  $101 = (($100) + 1)|0;
  $i = $101;
 }
 $102 = $mod;
 $103 = ((($102)) + 128|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 1)|0;
 HEAP32[$103>>2] = $105;
 $i = 0;
 while(1) {
  $106 = $i;
  $107 = $mod;
  $108 = ((($107)) + 140|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($106|0)<($109|0);
  if (!($110)) {
   break;
  }
  $111 = $i;
  $112 = ((($mh)) + 20|0);
  $113 = (($112) + (($111*30)|0)|0);
  $114 = ((($113)) + 24|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = ($115<<24>>24)!=(0);
  if ($116) {
   $ust = 0;
  }
  $117 = $i;
  $118 = ((($mh)) + 20|0);
  $119 = (($118) + (($117*30)|0)|0);
  $120 = ((($119)) + 22|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121&65535;
  $123 = ($122|0)>(4999);
  if ($123) {
   label = 18;
  } else {
   $124 = $i;
   $125 = ((($mh)) + 20|0);
   $126 = (($125) + (($124*30)|0)|0);
   $127 = ((($126)) + 26|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $128&65535;
   $130 = ($129|0)>(9999);
   if ($130) {
    label = 18;
   } else {
    $131 = $i;
    $132 = ((($mh)) + 20|0);
    $133 = (($132) + (($131*30)|0)|0);
    $134 = ((($133)) + 28|0);
    $135 = HEAP16[$134>>1]|0;
    $136 = $135&65535;
    $137 = ($136|0)>(4999);
    if ($137) {
     label = 18;
    }
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $ust = 0;
  }
  $138 = $i;
  $139 = ((($mh)) + 20|0);
  $140 = (($139) + (($138*30)|0)|0);
  $141 = ((($140)) + 22|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $142&65535;
  $144 = $143<<1;
  $145 = $smp_size;
  $146 = (($145) + ($144))|0;
  $smp_size = $146;
  $147 = $i;
  $148 = (($147) + 1)|0;
  $i = $148;
 }
 $149 = $mod;
 $150 = (_instrument_init($149)|0);
 $151 = ($150|0)<(0);
 if ($151) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 $i = 0;
 while(1) {
  $152 = $i;
  $153 = $mod;
  $154 = ((($153)) + 140|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($152|0)<($155|0);
  if (!($156)) {
   break;
  }
  $157 = $i;
  $158 = $mod;
  $159 = ((($158)) + 176|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($160) + (($157*764)|0)|0);
  $xxi = $161;
  $162 = $i;
  $163 = $mod;
  $164 = ((($163)) + 180|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + (($162*52)|0)|0);
  $xxs = $166;
  $167 = $mod;
  $168 = $i;
  $169 = (_subinstrument_alloc($167,$168,1)|0);
  $170 = ($169|0)<(0);
  if ($170) {
   label = 25;
   break;
  }
  $171 = $xxi;
  $172 = ((($171)) + 756|0);
  $173 = HEAP32[$172>>2]|0;
  $sub = $173;
  $174 = $i;
  $175 = ((($mh)) + 20|0);
  $176 = (($175) + (($174*30)|0)|0);
  $177 = ((($176)) + 22|0);
  $178 = HEAP16[$177>>1]|0;
  $179 = $178&65535;
  $180 = $179<<1;
  $181 = $i;
  $182 = ((($mh)) + 20|0);
  $183 = (($182) + (($181*30)|0)|0);
  $184 = ((($183)) + 26|0);
  $185 = HEAP16[$184>>1]|0;
  $186 = $185&65535;
  $187 = (($180) - ($186))|0;
  $188 = $xxs;
  $189 = ((($188)) + 32|0);
  HEAP32[$189>>2] = $187;
  $190 = $xxs;
  $191 = ((($190)) + 36|0);
  HEAP32[$191>>2] = 0;
  $192 = $xxs;
  $193 = ((($192)) + 36|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $i;
  $196 = ((($mh)) + 20|0);
  $197 = (($196) + (($195*30)|0)|0);
  $198 = ((($197)) + 28|0);
  $199 = HEAP16[$198>>1]|0;
  $200 = $199&65535;
  $201 = $200<<1;
  $202 = (($194) + ($201))|0;
  $203 = $xxs;
  $204 = ((($203)) + 40|0);
  HEAP32[$204>>2] = $202;
  $205 = $i;
  $206 = ((($mh)) + 20|0);
  $207 = (($206) + (($205*30)|0)|0);
  $208 = ((($207)) + 28|0);
  $209 = HEAP16[$208>>1]|0;
  $210 = $209&65535;
  $211 = ($210|0)>(1);
  $212 = $211 ? 2 : 0;
  $213 = $xxs;
  $214 = ((($213)) + 44|0);
  HEAP32[$214>>2] = $212;
  $215 = $i;
  $216 = ((($mh)) + 20|0);
  $217 = (($216) + (($215*30)|0)|0);
  $218 = ((($217)) + 24|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $219 << 24 >> 24;
  $221 = $220 << 4;
  $222 = $221&255;
  $223 = $222 << 24 >> 24;
  $224 = $sub;
  $225 = ((($224)) + 16|0);
  HEAP32[$225>>2] = $223;
  $226 = $i;
  $227 = ((($mh)) + 20|0);
  $228 = (($227) + (($226*30)|0)|0);
  $229 = ((($228)) + 25|0);
  $230 = HEAP8[$229>>0]|0;
  $231 = $230 << 24 >> 24;
  $232 = $sub;
  HEAP32[$232>>2] = $231;
  $233 = $sub;
  $234 = ((($233)) + 8|0);
  HEAP32[$234>>2] = 128;
  $235 = $i;
  $236 = $sub;
  $237 = ((($236)) + 40|0);
  HEAP32[$237>>2] = $235;
  $238 = $xxi;
  $239 = $i;
  $240 = ((($mh)) + 20|0);
  $241 = (($240) + (($239*30)|0)|0);
  (_strncpy(($238|0),($241|0),22)|0);
  $242 = $xxi;
  (_adjust_string($242)|0);
  $243 = $xxs;
  $244 = ((($243)) + 32|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ($245|0)>(0);
  if ($246) {
   $247 = $xxi;
   $248 = ((($247)) + 36|0);
   HEAP32[$248>>2] = 1;
  }
  $249 = $i;
  $250 = (($249) + 1)|0;
  $i = $250;
 }
 if ((label|0) == 25) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 $251 = $mod;
 $252 = ((($251)) + 136|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = $mod;
 $255 = ((($254)) + 128|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = Math_imul($253, $256)|0;
 $258 = $mod;
 $259 = ((($258)) + 132|0);
 HEAP32[$259>>2] = $257;
 $260 = $mod;
 (_strncpy(($260|0),($mh|0),20)|0);
 $fxused = 0;
 $261 = $2;
 $262 = (_hio_tell($261)|0);
 $pos = $262;
 $i = 0;
 while(1) {
  $263 = $i;
  $264 = $mod;
  $265 = ((($264)) + 128|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($263|0)<($266|0);
  if (!($267)) {
   break;
  }
  $j = 0;
  while(1) {
   $268 = $j;
   $269 = $mod;
   $270 = ((($269)) + 136|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = $271<<6;
   $273 = ($268|0)<($272|0);
   if (!($273)) {
    break;
   }
   $274 = $2;
   (_hio_read($mod_event,1,4,$274)|0);
   _decode_protracker_event($ev,$mod_event);
   $275 = ((($ev)) + 3|0);
   $276 = HEAP8[$275>>0]|0;
   $277 = ($276<<24>>24)!=(0);
   if ($277) {
    $278 = ((($ev)) + 3|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = 1 << $280;
    $282 = $fxused;
    $283 = $282 | $281;
    $fxused = $283;
   } else {
    $284 = ((($ev)) + 4|0);
    $285 = HEAP8[$284>>0]|0;
    $286 = ($285<<24>>24)!=(0);
    if ($286) {
     $287 = $fxused;
     $288 = $287 | 1;
     $fxused = $288;
    }
   }
   $289 = ((($ev)) + 3|0);
   $290 = HEAP8[$289>>0]|0;
   $291 = $290&255;
   $292 = ($291|0)!=(0);
   if ($292) {
    $293 = ((($ev)) + 3|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294&255;
    $296 = ($295|0)!=(1);
    if ($296) {
     $297 = ((($ev)) + 3|0);
     $298 = HEAP8[$297>>0]|0;
     $299 = $298&255;
     $300 = ($299|0)!=(2);
     if ($300) {
      $ust = 0;
     }
    }
   }
   $301 = ((($ev)) + 3|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $304 = ($303|0)==(1);
   if ($304) {
    $305 = ((($ev)) + 4|0);
    $306 = HEAP8[$305>>0]|0;
    $307 = $306&255;
    $308 = ($307|0)==(0);
    if ($308) {
     $ust = 0;
    }
   }
   $309 = ((($ev)) + 3|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = $310&255;
   $312 = ($311|0)==(2);
   if ($312) {
    $313 = ((($ev)) + 4|0);
    $314 = HEAP8[$313>>0]|0;
    $315 = $314&255;
    $316 = $315 & 15;
    $317 = ($316|0)!=(0);
    if ($317) {
     $318 = ((($ev)) + 4|0);
     $319 = HEAP8[$318>>0]|0;
     $320 = $319&255;
     $321 = $320 & 240;
     $322 = ($321|0)!=(0);
     if ($322) {
      $ust = 0;
     }
    }
   }
   $323 = $j;
   $324 = (($323) + 1)|0;
   $j = $324;
  }
  $325 = $i;
  $326 = (($325) + 1)|0;
  $i = $326;
 }
 $327 = $fxused;
 $328 = $327 & -7;
 $329 = ($328|0)!=(0);
 if ($329) {
  $ust = 0;
 }
 $330 = $ust;
 $331 = ($330|0)!=(0);
 do {
  if ($331) {
   $modtype = 4552;
  } else {
   $332 = $fxused;
   $333 = $332 & -53256;
   $334 = ($333|0)==(0);
   if ($334) {
    $modtype = 4576;
    break;
   }
   $335 = $fxused;
   $336 = $335 & -63496;
   $337 = ($336|0)==(0);
   if ($337) {
    $modtype = 4592;
    break;
   } else {
    $modtype = 4616;
    break;
   }
  }
 } while(0);
 $338 = $mod;
 $339 = ((($338)) + 64|0);
 $340 = $modtype;
 HEAP32[$vararg_buffer>>2] = $340;
 (_snprintf($339,64,7048,$vararg_buffer)|0);
 $341 = $2;
 $342 = $3;
 $343 = $pos;
 $344 = (($342) + ($343))|0;
 (_hio_seek($341,$344,0)|0);
 $345 = $mod;
 $346 = (_pattern_init($345)|0);
 $347 = ($346|0)<(0);
 if ($347) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 $used_ins = 0;
 $i = 0;
 while(1) {
  $348 = $i;
  $349 = $mod;
  $350 = ((($349)) + 128|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = ($348|0)<($351|0);
  if (!($352)) {
   break;
  }
  $353 = $mod;
  $354 = $i;
  $355 = (_pattern_tracks_alloc($353,$354,64)|0);
  $356 = ($355|0)<(0);
  if ($356) {
   label = 64;
   break;
  }
  $j = 0;
  while(1) {
   $357 = $j;
   $358 = $mod;
   $359 = ((($358)) + 136|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $360<<6;
   $362 = ($357|0)<($361|0);
   if (!($362)) {
    break;
   }
   $363 = $j;
   $364 = $mod;
   $365 = ((($364)) + 136|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = (($363|0) / ($366|0))&-1;
   $368 = $j;
   $369 = $mod;
   $370 = ((($369)) + 136|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = (($368|0) % ($371|0))&-1;
   $373 = $i;
   $374 = $1;
   $375 = ((($374)) + 168|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = (($376) + ($373<<2)|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ((($378)) + 4|0);
   $380 = (($379) + ($372<<2)|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = $1;
   $383 = ((($382)) + 172|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = (($384) + ($381<<2)|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ((($386)) + 4|0);
   $388 = (($387) + ($367<<3)|0);
   $event = $388;
   $389 = $2;
   (_hio_read($mod_event,1,4,$389)|0);
   $390 = $event;
   _decode_protracker_event($390,$mod_event);
   $391 = ((($ev)) + 1|0);
   $392 = HEAP8[$391>>0]|0;
   $393 = $392&255;
   $394 = $used_ins;
   $395 = ($393|0)>($394|0);
   if ($395) {
    $396 = ((($ev)) + 1|0);
    $397 = HEAP8[$396>>0]|0;
    $398 = $397&255;
    $used_ins = $398;
   }
   $399 = $j;
   $400 = (($399) + 1)|0;
   $j = $400;
  }
  $401 = $i;
  $402 = (($401) + 1)|0;
  $i = $402;
 }
 if ((label|0) == 64) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 $i = 0;
 while(1) {
  $403 = $i;
  $404 = $mod;
  $405 = ((($404)) + 140|0);
  $406 = HEAP32[$405>>2]|0;
  $407 = ($403|0)<($406|0);
  if (!($407)) {
   break;
  }
  $408 = $i;
  $409 = (($408) + 1)|0;
  $i = $409;
 }
 $410 = $1;
 $411 = ((($410)) + 1284|0);
 $412 = HEAP32[$411>>2]|0;
 $413 = $412 | 8192;
 HEAP32[$411>>2] = $413;
 $414 = $ust;
 $415 = ($414|0)!=(0);
 $416 = $mod;
 $417 = ((($416)) + 160|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = $mod;
 L106: do {
  if ($415) {
   $420 = ((($419)) + 152|0);
   HEAP32[$420>>2] = $418;
   $421 = $mod;
   $422 = ((($421)) + 160|0);
   HEAP32[$422>>2] = 0;
   $i = 0;
   while(1) {
    $423 = $i;
    $424 = $mod;
    $425 = ((($424)) + 140|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = ($423|0)<($426|0);
    if (!($427)) {
     break;
    }
    $428 = $i;
    $429 = (($428) + 1)|0;
    $i = $429;
   }
   $i = 0;
   while(1) {
    $430 = $i;
    $431 = $mod;
    $432 = ((($431)) + 128|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = ($430|0)<($433|0);
    if (!($434)) {
     break L106;
    }
    $j = 0;
    while(1) {
     $435 = $j;
     $436 = $mod;
     $437 = ((($436)) + 136|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = $438<<6;
     $440 = ($435|0)<($439|0);
     if (!($440)) {
      break;
     }
     $441 = $j;
     $442 = $mod;
     $443 = ((($442)) + 136|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = (($441|0) / ($444|0))&-1;
     $446 = $j;
     $447 = $mod;
     $448 = ((($447)) + 136|0);
     $449 = HEAP32[$448>>2]|0;
     $450 = (($446|0) % ($449|0))&-1;
     $451 = $i;
     $452 = $1;
     $453 = ((($452)) + 168|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = (($454) + ($451<<2)|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ((($456)) + 4|0);
     $458 = (($457) + ($450<<2)|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = $1;
     $461 = ((($460)) + 172|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = (($462) + ($459<<2)|0);
     $464 = HEAP32[$463>>2]|0;
     $465 = ((($464)) + 4|0);
     $466 = (($465) + ($445<<3)|0);
     $event = $466;
     $467 = $event;
     $468 = ((($467)) + 3|0);
     $469 = HEAP8[$468>>0]|0;
     $470 = $469&255;
     $471 = ($470|0)==(1);
     $472 = $event;
     $473 = ((($472)) + 3|0);
     do {
      if ($471) {
       HEAP8[$473>>0] = 0;
      } else {
       $474 = HEAP8[$473>>0]|0;
       $475 = $474&255;
       $476 = ($475|0)==(2);
       if ($476) {
        $477 = $event;
        $478 = ((($477)) + 4|0);
        $479 = HEAP8[$478>>0]|0;
        $480 = $479&255;
        $481 = $480 & 240;
        $482 = ($481|0)==(0);
        if ($482) {
         $483 = $event;
         $484 = ((($483)) + 3|0);
         HEAP8[$484>>0] = 1;
         break;
        }
       }
       $485 = $event;
       $486 = ((($485)) + 3|0);
       $487 = HEAP8[$486>>0]|0;
       $488 = $487&255;
       $489 = ($488|0)==(2);
       if ($489) {
        $490 = $event;
        $491 = ((($490)) + 4|0);
        $492 = HEAP8[$491>>0]|0;
        $493 = $492&255;
        $494 = $493 & 15;
        $495 = ($494|0)==(0);
        if ($495) {
         $496 = $event;
         $497 = ((($496)) + 4|0);
         $498 = HEAP8[$497>>0]|0;
         $499 = $498&255;
         $500 = $499 >> 4;
         $501 = $500&255;
         HEAP8[$497>>0] = $501;
        }
       }
      }
     } while(0);
     $502 = $j;
     $503 = (($502) + 1)|0;
     $j = $503;
    }
    $504 = $i;
    $505 = (($504) + 1)|0;
    $i = $505;
   }
  } else {
   $506 = ((($419)) + 156|0);
   $507 = HEAP32[$506>>2]|0;
   $508 = ($418|0)>=($507|0);
   if ($508) {
    $509 = $mod;
    $510 = ((($509)) + 160|0);
    HEAP32[$510>>2] = 0;
   }
  }
 } while(0);
 $i = 0;
 while(1) {
  $511 = $i;
  $512 = $mod;
  $513 = ((($512)) + 140|0);
  $514 = HEAP32[$513>>2]|0;
  $515 = ($511|0)<($514|0);
  if (!($515)) {
   label = 100;
   break;
  }
  $516 = $i;
  $517 = $mod;
  $518 = ((($517)) + 180|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = (($519) + (($516*52)|0)|0);
  $521 = ((($520)) + 32|0);
  $522 = HEAP32[$521>>2]|0;
  $523 = ($522|0)!=(0);
  if ($523) {
   $524 = $2;
   $525 = $i;
   $526 = ((($mh)) + 20|0);
   $527 = (($526) + (($525*30)|0)|0);
   $528 = ((($527)) + 26|0);
   $529 = HEAP16[$528>>1]|0;
   $530 = $529&65535;
   (_hio_seek($524,$530,1)|0);
   $531 = $1;
   $532 = $2;
   $533 = $i;
   $534 = $mod;
   $535 = ((($534)) + 180|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = (($536) + (($533*52)|0)|0);
   $538 = (_load_sample($531,$532,0,$537,0)|0);
   $539 = ($538|0)<(0);
   if ($539) {
    label = 98;
    break;
   }
  }
  $540 = $i;
  $541 = (($540) + 1)|0;
  $i = $541;
 }
 if ((label|0) == 98) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 else if ((label|0) == 100) {
  $0 = 0;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 return (0)|0;
}
function _emod_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1179603533);
 if ($6) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $7 = $1;
 (_hio_read32b($7)|0);
 $8 = $1;
 $9 = (_hio_read32b($8)|0);
 $10 = ($9|0)!=(1162694468);
 if ($10) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $11 = $1;
 $12 = (_hio_read32b($11)|0);
 $13 = ($12|0)==(1162692931);
 $14 = $1;
 if ($13) {
  (_hio_read32b($14)|0);
  $15 = $1;
  (_hio_read16b($15)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,20);
 } else {
  $18 = $2;
  _read_title($14,$18,0);
 }
 $0 = 0;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _emod_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_read32b($6)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = (_iff_new()|0);
 $handle = $9;
 $10 = $handle;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $12 = $handle;
 $13 = (_iff_register($12,4816,238)|0);
 $ret = $13;
 $14 = $handle;
 $15 = (_iff_register($14,7192,239)|0);
 $16 = $ret;
 $17 = $16 | $15;
 $ret = $17;
 $18 = $handle;
 $19 = (_iff_register($18,4824,240)|0);
 $20 = $ret;
 $21 = $20 | $19;
 $ret = $21;
 $22 = $ret;
 $23 = ($22|0)!=(0);
 if ($23) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $24 = $handle;
 $25 = $1;
 $26 = $2;
 $27 = (_iff_load($24,$25,$26,0)|0);
 $28 = ($27|0)<(0);
 $29 = $handle;
 _iff_release($29);
 if ($28) {
  $0 = -1;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 } else {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _get_emic($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $mod = 0, $reorder = 0, $sub = 0, $vararg_buffer = 0;
 var $ver = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $reorder = sp + 48|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $ver = $8;
 $9 = $mod;
 $10 = $3;
 (_hio_read($9,1,20,$10)|0);
 $11 = $3;
 (_hio_seek($11,20,1)|0);
 $12 = $3;
 $13 = (_hio_read8($12)|0);
 $14 = $13&255;
 $15 = $mod;
 $16 = ((($15)) + 152|0);
 HEAP32[$16>>2] = $14;
 $17 = $3;
 $18 = (_hio_read8($17)|0);
 $19 = $18&255;
 $20 = $mod;
 $21 = ((($20)) + 140|0);
 HEAP32[$21>>2] = $19;
 $22 = $mod;
 $23 = ((($22)) + 140|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $mod;
 $26 = ((($25)) + 144|0);
 HEAP32[$26>>2] = $24;
 $27 = $1;
 $28 = ((($27)) + 1284|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 | 8192;
 HEAP32[$28>>2] = $30;
 $31 = $mod;
 $32 = ((($31)) + 64|0);
 $33 = $ver;
 HEAP32[$vararg_buffer>>2] = $33;
 (_snprintf($32,64,4832,$vararg_buffer)|0);
 $34 = $mod;
 $35 = (_instrument_init($34)|0);
 $36 = ($35|0)<(0);
 if ($36) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = $mod;
  $39 = ((($38)) + 140|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = $mod;
  $44 = ((($43)) + 176|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + (($42*764)|0)|0);
  $xxi = $46;
  $47 = $i;
  $48 = $mod;
  $49 = ((($48)) + 180|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($47*52)|0)|0);
  $xxs = $51;
  $52 = $mod;
  $53 = $i;
  $54 = (_subinstrument_alloc($52,$53,1)|0);
  $55 = ($54|0)<(0);
  if ($55) {
   label = 6;
   break;
  }
  $56 = $xxi;
  $57 = ((($56)) + 756|0);
  $58 = HEAP32[$57>>2]|0;
  $sub = $58;
  $59 = $3;
  (_hio_read8($59)|0);
  $60 = $3;
  $61 = (_hio_read8($60)|0);
  $62 = $61&255;
  $63 = $sub;
  HEAP32[$63>>2] = $62;
  $64 = $3;
  $65 = (_hio_read16b($64)|0);
  $66 = $65&65535;
  $67 = $66<<1;
  $68 = $xxs;
  $69 = ((($68)) + 32|0);
  HEAP32[$69>>2] = $67;
  $70 = $xxi;
  $71 = $3;
  (_hio_read($70,1,20,$71)|0);
  $72 = $3;
  $73 = (_hio_read8($72)|0);
  $74 = $73&255;
  $75 = $74 & 1;
  $76 = ($75|0)!=(0);
  $77 = $76 ? 2 : 0;
  $78 = $xxs;
  $79 = ((($78)) + 44|0);
  HEAP32[$79>>2] = $77;
  $80 = $3;
  $81 = (_hio_read8s($80)|0);
  $82 = $81 << 24 >> 24;
  $83 = $82 << 4;
  $84 = $sub;
  $85 = ((($84)) + 16|0);
  HEAP32[$85>>2] = $83;
  $86 = $3;
  $87 = (_hio_read16b($86)|0);
  $88 = $87&65535;
  $89 = $88<<1;
  $90 = $xxs;
  $91 = ((($90)) + 36|0);
  HEAP32[$91>>2] = $89;
  $92 = $xxs;
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $3;
  $96 = (_hio_read16b($95)|0);
  $97 = $96&65535;
  $98 = $97<<1;
  $99 = (($94) + ($98))|0;
  $100 = $xxs;
  $101 = ((($100)) + 40|0);
  HEAP32[$101>>2] = $99;
  $102 = $3;
  (_hio_read32b($102)|0);
  $103 = $xxi;
  $104 = ((($103)) + 36|0);
  HEAP32[$104>>2] = 1;
  $105 = $sub;
  $106 = ((($105)) + 8|0);
  HEAP32[$106>>2] = 128;
  $107 = $i;
  $108 = $sub;
  $109 = ((($108)) + 40|0);
  HEAP32[$109>>2] = $107;
  $110 = $i;
  $111 = (($110) + 1)|0;
  $i = $111;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 $112 = $3;
 (_hio_read8($112)|0);
 $113 = $3;
 $114 = (_hio_read8($113)|0);
 $115 = $114&255;
 $116 = $mod;
 $117 = ((($116)) + 128|0);
 HEAP32[$117>>2] = $115;
 $118 = $mod;
 $119 = ((($118)) + 128|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $mod;
 $122 = ((($121)) + 136|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = Math_imul($120, $123)|0;
 $125 = $mod;
 $126 = ((($125)) + 132|0);
 HEAP32[$126>>2] = $124;
 $127 = $mod;
 $128 = (_pattern_init($127)|0);
 $129 = ($128|0)<(0);
 if ($129) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 _memset(($reorder|0),0,256)|0;
 $i = 0;
 while(1) {
  $130 = $i;
  $131 = $mod;
  $132 = ((($131)) + 128|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($130|0)<($133|0);
  if (!($134)) {
   break;
  }
  $135 = $i;
  $136 = $135&255;
  $137 = $3;
  $138 = (_hio_read8($137)|0);
  $139 = $138&255;
  $140 = (($reorder) + ($139)|0);
  HEAP8[$140>>0] = $136;
  $141 = $mod;
  $142 = $i;
  $143 = $3;
  $144 = (_hio_read8($143)|0);
  $145 = $144&255;
  $146 = (($145) + 1)|0;
  $147 = (_pattern_tracks_alloc($141,$142,$146)|0);
  $148 = ($147|0)<(0);
  if ($148) {
   label = 13;
   break;
  }
  $149 = $3;
  (_hio_seek($149,20,1)|0);
  $150 = $3;
  (_hio_read32b($150)|0);
  $151 = $i;
  $152 = (($151) + 1)|0;
  $i = $152;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 $153 = $3;
 $154 = (_hio_read8($153)|0);
 $155 = $154&255;
 $156 = $mod;
 $157 = ((($156)) + 156|0);
 HEAP32[$157>>2] = $155;
 $i = 0;
 while(1) {
  $158 = $i;
  $159 = $mod;
  $160 = ((($159)) + 156|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($158|0)<($161|0);
  if (!($162)) {
   break;
  }
  $163 = $3;
  $164 = (_hio_read8($163)|0);
  $165 = $164&255;
  $166 = (($reorder) + ($165)|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $i;
  $169 = $mod;
  $170 = ((($169)) + 952|0);
  $171 = (($170) + ($168)|0);
  HEAP8[$171>>0] = $167;
  $172 = $i;
  $173 = (($172) + 1)|0;
  $i = $173;
 }
 $0 = 0;
 $174 = $0;
 STACKTOP = sp;return ($174|0);
}
function _get_patt221($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0;
 var $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $mod;
  $7 = ((($6)) + 128|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $j = 0;
  while(1) {
   $10 = $j;
   $11 = $i;
   $12 = $mod;
   $13 = ((($12)) + 168|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($11<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($10|0)<($17|0);
   if (!($18)) {
    break;
   }
   $k = 0;
   while(1) {
    $19 = $k;
    $20 = $mod;
    $21 = ((($20)) + 136|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19|0)<($22|0);
    $24 = $j;
    if (!($23)) {
     break;
    }
    $25 = $k;
    $26 = $i;
    $27 = $0;
    $28 = ((($27)) + 168|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($26<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 4|0);
    $33 = (($32) + ($25<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $0;
    $36 = ((($35)) + 172|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($34<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 4|0);
    $41 = (($40) + ($24<<3)|0);
    $event = $41;
    $42 = $2;
    $43 = (_hio_read8($42)|0);
    $44 = $event;
    $45 = ((($44)) + 1|0);
    HEAP8[$45>>0] = $43;
    $46 = $2;
    $47 = (_hio_read8($46)|0);
    $48 = $47&255;
    $49 = (($48) + 1)|0;
    $50 = $49&255;
    $51 = $event;
    HEAP8[$51>>0] = $50;
    $52 = $event;
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)!=(0);
    if ($55) {
     $56 = $event;
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = (($58) + 48)|0;
     $60 = $59&255;
     HEAP8[$56>>0] = $60;
    }
    $61 = $2;
    $62 = (_hio_read8($61)|0);
    $63 = $62&255;
    $64 = $63 & 15;
    $65 = $64&255;
    $66 = $event;
    $67 = ((($66)) + 3|0);
    HEAP8[$67>>0] = $65;
    $68 = $2;
    $69 = (_hio_read8($68)|0);
    $70 = $event;
    $71 = ((($70)) + 4|0);
    HEAP8[$71>>0] = $69;
    $72 = $event;
    $73 = ((($72)) + 3|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    if ((($75|0) == 4)) {
     $76 = $event;
     $77 = ((($76)) + 4|0);
     $78 = HEAP8[$77>>0]|0;
     $x = $78;
     $79 = $x;
     $80 = $79&255;
     $81 = $80 & 240;
     $82 = $x;
     $83 = $82&255;
     $84 = $83 << 1;
     $85 = $84 & 15;
     $86 = $81 | $85;
     $87 = $86&255;
     $88 = $event;
     $89 = ((($88)) + 4|0);
     HEAP8[$89>>0] = $87;
    } else if ((($75|0) == 9)) {
     $90 = $event;
     $91 = ((($90)) + 3|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 << 1;
     $95 = $94&255;
     HEAP8[$91>>0] = $95;
    } else if ((($75|0) == 11)) {
     $96 = $event;
     $97 = ((($96)) + 3|0);
     $98 = HEAP8[$97>>0]|0;
     $x = $98;
     $99 = $x;
     $100 = $99&255;
     $101 = (($100|0) / 10)&-1;
     $102 = $101<<4;
     $103 = $x;
     $104 = $103&255;
     $105 = (($104|0) % 10)&-1;
     $106 = (($102) + ($105))|0;
     $107 = $106&255;
     $108 = $event;
     $109 = ((($108)) + 3|0);
     HEAP8[$109>>0] = $107;
    }
    $110 = $k;
    $111 = (($110) + 1)|0;
    $k = $111;
   }
   $112 = (($24) + 1)|0;
   $j = $112;
  }
  $113 = $i;
  $114 = (($113) + 1)|0;
  $i = $114;
 }
 STACKTOP = sp;return 0;
}
function _get_8smp($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $mod;
  $8 = ((($7)) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $1;
  $12 = $3;
  $13 = $i;
  $14 = $mod;
  $15 = ((($14)) + 180|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + (($13*52)|0)|0);
  $18 = (_load_sample($11,$12,0,$17,0)|0);
  $19 = ($18|0)<(0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _imf_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 60)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1229795632);
 if ($9) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $1;
  $11 = $3;
  (_hio_seek($10,$11,0)|0);
  $12 = $1;
  $13 = $2;
  _read_title($12,$13,32);
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _imf_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $b = 0, $c = 0, $dummy = 0, $event = 0, $i = 0, $ih = 0, $ii = 0, $is = 0, $j = 0, $mod = 0, $n = 0, $pat_len = 0, $r = 0, $rows = 0, $sid = 0, $smp_num = 0, $sub = 0;
 var $vararg_buffer = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1376|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dummy = sp + 1360|0;
 $ih = sp + 480|0;
 $ii = sp + 96|0;
 $is = sp + 32|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ih,32,1,$7)|0);
 $8 = $2;
 $9 = (_hio_read16l($8)|0);
 $10 = ((($ih)) + 32|0);
 HEAP16[$10>>1] = $9;
 $11 = $2;
 $12 = (_hio_read16l($11)|0);
 $13 = ((($ih)) + 34|0);
 HEAP16[$13>>1] = $12;
 $14 = $2;
 $15 = (_hio_read16l($14)|0);
 $16 = ((($ih)) + 36|0);
 HEAP16[$16>>1] = $15;
 $17 = $2;
 $18 = (_hio_read16l($17)|0);
 $19 = ((($ih)) + 38|0);
 HEAP16[$19>>1] = $18;
 $20 = ((($ih)) + 40|0);
 $21 = $2;
 (_hio_read($20,8,1,$21)|0);
 $22 = $2;
 $23 = (_hio_read8($22)|0);
 $24 = ((($ih)) + 48|0);
 HEAP8[$24>>0] = $23;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = ((($ih)) + 49|0);
 HEAP8[$27>>0] = $26;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = ((($ih)) + 50|0);
 HEAP8[$30>>0] = $29;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = ((($ih)) + 51|0);
 HEAP8[$33>>0] = $32;
 $34 = ((($ih)) + 52|0);
 $35 = $2;
 (_hio_read($34,8,1,$35)|0);
 $36 = $2;
 $37 = (_hio_read32b($36)|0);
 $38 = ((($ih)) + 60|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($ih)) + 32|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = ($41|0)>(256);
 if (!($42)) {
  $43 = ((($ih)) + 34|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = ($45|0)>(256);
  if (!($46)) {
   $47 = ((($ih)) + 36|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48&65535;
   $50 = ($49|0)>(255);
   if (!($50)) {
    $i = 0;
    while(1) {
     $51 = $i;
     $52 = ($51|0)<(32);
     if (!($52)) {
      break;
     }
     $53 = $i;
     $54 = ((($ih)) + 64|0);
     $55 = (($54) + ($53<<4)|0);
     $56 = $2;
     (_hio_read($55,12,1,$56)|0);
     $57 = $2;
     $58 = (_hio_read8($57)|0);
     $59 = $i;
     $60 = ((($ih)) + 64|0);
     $61 = (($60) + ($59<<4)|0);
     $62 = ((($61)) + 12|0);
     HEAP8[$62>>0] = $58;
     $63 = $2;
     $64 = (_hio_read8($63)|0);
     $65 = $i;
     $66 = ((($ih)) + 64|0);
     $67 = (($66) + ($65<<4)|0);
     $68 = ((($67)) + 13|0);
     HEAP8[$68>>0] = $64;
     $69 = $2;
     $70 = (_hio_read8($69)|0);
     $71 = $i;
     $72 = ((($ih)) + 64|0);
     $73 = (($72) + ($71<<4)|0);
     $74 = ((($73)) + 14|0);
     HEAP8[$74>>0] = $70;
     $75 = $2;
     $76 = (_hio_read8($75)|0);
     $77 = $i;
     $78 = ((($ih)) + 64|0);
     $79 = (($78) + ($77<<4)|0);
     $80 = ((($79)) + 15|0);
     HEAP8[$80>>0] = $76;
     $81 = $i;
     $82 = (($81) + 1)|0;
     $i = $82;
    }
    $83 = ((($ih)) + 576|0);
    $84 = $2;
    (_hio_read($83,256,1,$84)|0);
    $85 = ((($ih)) + 60|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)!=(1229795632);
    if ($87) {
     $0 = -1;
     $702 = $0;
     STACKTOP = sp;return ($702|0);
    }
    $88 = $mod;
    (_copy_adjust($88,$ih,32)|0);
    $89 = ((($ih)) + 32|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90&65535;
    $92 = $mod;
    $93 = ((($92)) + 156|0);
    HEAP32[$93>>2] = $91;
    $94 = ((($ih)) + 36|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = $mod;
    $98 = ((($97)) + 140|0);
    HEAP32[$98>>2] = $96;
    $99 = $mod;
    $100 = ((($99)) + 144|0);
    HEAP32[$100>>2] = 1024;
    $101 = ((($ih)) + 34|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = $102&65535;
    $104 = $mod;
    $105 = ((($104)) + 128|0);
    HEAP32[$105>>2] = $103;
    $106 = ((($ih)) + 38|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = $108 & 1;
    $110 = ($109|0)!=(0);
    if ($110) {
     $111 = $1;
     $112 = ((($111)) + 1284|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = $113 | 4096;
     HEAP32[$112>>2] = $114;
    }
    $115 = ((($ih)) + 48|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = $mod;
    $119 = ((($118)) + 148|0);
    HEAP32[$119>>2] = $117;
    $120 = ((($ih)) + 49|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = $mod;
    $124 = ((($123)) + 152|0);
    HEAP32[$124>>2] = $122;
    $125 = $1;
    _set_type($125,4904,$vararg_buffer);
    $i = 0;
    $126 = $mod;
    $127 = ((($126)) + 136|0);
    HEAP32[$127>>2] = 0;
    while(1) {
     $128 = $i;
     $129 = ($128|0)<(32);
     if (!($129)) {
      break;
     }
     $130 = $i;
     $131 = ((($ih)) + 64|0);
     $132 = (($131) + ($130<<4)|0);
     $133 = ((($132)) + 12|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = $134&255;
     $136 = ($135|0)!=(0);
     if ($136) {
      $137 = $i;
      $138 = (($137) + 1)|0;
      $139 = $mod;
      $140 = ((($139)) + 136|0);
      HEAP32[$140>>2] = $138;
      $141 = $i;
      $142 = ((($ih)) + 64|0);
      $143 = (($142) + ($141<<4)|0);
      $144 = ((($143)) + 13|0);
      $145 = HEAP8[$144>>0]|0;
      $146 = $145&255;
      $147 = $i;
      $148 = $mod;
      $149 = ((($148)) + 184|0);
      $150 = (($149) + (($147*12)|0)|0);
      HEAP32[$150>>2] = $146;
     }
     $151 = $i;
     $152 = (($151) + 1)|0;
     $i = $152;
    }
    $153 = $mod;
    $154 = ((($153)) + 128|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $mod;
    $157 = ((($156)) + 136|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = Math_imul($155, $158)|0;
    $160 = $mod;
    $161 = ((($160)) + 132|0);
    HEAP32[$161>>2] = $159;
    $162 = $mod;
    $163 = ((($162)) + 952|0);
    $164 = ((($ih)) + 576|0);
    $165 = $mod;
    $166 = ((($165)) + 156|0);
    $167 = HEAP32[$166>>2]|0;
    _memcpy(($163|0),($164|0),($167|0))|0;
    $i = 0;
    while(1) {
     $168 = $i;
     $169 = $mod;
     $170 = ((($169)) + 156|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($168|0)<($171|0);
     if (!($172)) {
      break;
     }
     $173 = $i;
     $174 = $mod;
     $175 = ((($174)) + 952|0);
     $176 = (($175) + ($173)|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $177&255;
     $179 = ($178|0)==(255);
     if ($179) {
      $180 = $i;
      $181 = $mod;
      $182 = ((($181)) + 952|0);
      $183 = (($182) + ($180)|0);
      $184 = HEAP8[$183>>0]|0;
      $185 = (($184) + -1)<<24>>24;
      HEAP8[$183>>0] = $185;
     }
     $186 = $i;
     $187 = (($186) + 1)|0;
     $i = $187;
    }
    $188 = $1;
    $189 = ((($188)) + 1264|0);
    HEAP32[$189>>2] = 8363;
    $190 = $mod;
    $191 = (_pattern_init($190)|0);
    $192 = ($191|0)<(0);
    if ($192) {
     $0 = -1;
     $702 = $0;
     STACKTOP = sp;return ($702|0);
    }
    $i = 0;
    L34: while(1) {
     $193 = $i;
     $194 = $mod;
     $195 = ((($194)) + 128|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($193|0)<($196|0);
     if (!($197)) {
      label = 48;
      break;
     }
     $198 = $2;
     $199 = (_hio_read16l($198)|0);
     $200 = $199&65535;
     $201 = (($200) - 4)|0;
     $pat_len = $201;
     $202 = $2;
     $203 = (_hio_read16l($202)|0);
     $204 = $203&65535;
     $rows = $204;
     $205 = $rows;
     $206 = ($205|0)>(256);
     if ($206) {
      label = 27;
      break;
     }
     $207 = $mod;
     $208 = $i;
     $209 = $rows;
     $210 = (_pattern_tracks_alloc($207,$208,$209)|0);
     $211 = ($210|0)<(0);
     if ($211) {
      label = 29;
      break;
     }
     $r = 0;
     while(1) {
      $212 = $pat_len;
      $213 = (($212) + -1)|0;
      $pat_len = $213;
      $214 = ($213|0)>=(0);
      if (!($214)) {
       break;
      }
      $215 = $2;
      $216 = (_hio_read8($215)|0);
      $b = $216;
      $217 = $b;
      $218 = $217&255;
      $219 = ($218|0)==(0);
      $220 = $r;
      if ($219) {
       $221 = (($220) + 1)|0;
       $r = $221;
       continue;
      }
      $222 = $rows;
      $223 = ($220|0)>=($222|0);
      if ($223) {
       label = 35;
       break L34;
      }
      $224 = $b;
      $225 = $224&255;
      $226 = $225 & 31;
      $c = $226;
      $227 = $c;
      $228 = $mod;
      $229 = ((($228)) + 136|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ($227|0)>=($230|0);
      if ($231) {
       $250 = $dummy;
      } else {
       $232 = $r;
       $233 = $c;
       $234 = $i;
       $235 = $1;
       $236 = ((($235)) + 168|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = (($237) + ($234<<2)|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = ((($239)) + 4|0);
       $241 = (($240) + ($233<<2)|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = $1;
       $244 = ((($243)) + 172|0);
       $245 = HEAP32[$244>>2]|0;
       $246 = (($245) + ($242<<2)|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ((($247)) + 4|0);
       $249 = (($248) + ($232<<3)|0);
       $250 = $249;
      }
      $event = $250;
      $251 = $b;
      $252 = $251&255;
      $253 = $252 & 32;
      $254 = ($253|0)!=(0);
      if ($254) {
       $255 = $2;
       $256 = (_hio_read8($255)|0);
       $n = $256;
       $257 = $n;
       $258 = $257&255;
       if ((($258|0) == 160) | (($258|0) == 255)) {
        $n = -127;
       } else {
        $259 = $n;
        $260 = $259&255;
        $261 = $260 & 240;
        $262 = $261 >> 4;
        $263 = ($262*12)|0;
        $264 = (13 + ($263))|0;
        $265 = $n;
        $266 = $265&255;
        $267 = $266 & 15;
        $268 = (($264) + ($267))|0;
        $269 = $268&255;
        $n = $269;
       }
       $270 = $n;
       $271 = $event;
       HEAP8[$271>>0] = $270;
       $272 = $2;
       $273 = (_hio_read8($272)|0);
       $274 = $event;
       $275 = ((($274)) + 1|0);
       HEAP8[$275>>0] = $273;
       $276 = $pat_len;
       $277 = (($276) - 2)|0;
       $pat_len = $277;
      }
      $278 = $b;
      $279 = $278&255;
      $280 = $279 & 128;
      $281 = ($280|0)!=(0);
      if ($281) {
       $282 = $2;
       $283 = (_hio_read8($282)|0);
       $284 = $event;
       $285 = ((($284)) + 3|0);
       HEAP8[$285>>0] = $283;
       $286 = $2;
       $287 = (_hio_read8($286)|0);
       $288 = $event;
       $289 = ((($288)) + 4|0);
       HEAP8[$289>>0] = $287;
       $290 = $c;
       $291 = $event;
       $292 = ((($291)) + 3|0);
       $293 = $event;
       $294 = ((($293)) + 4|0);
       _xlat_fx226($290,$292,$294);
       $295 = $pat_len;
       $296 = (($295) - 2)|0;
       $pat_len = $296;
      }
      $297 = $b;
      $298 = $297&255;
      $299 = $298 & 64;
      $300 = ($299|0)!=(0);
      if (!($300)) {
       continue;
      }
      $301 = $2;
      $302 = (_hio_read8($301)|0);
      $303 = $event;
      $304 = ((($303)) + 5|0);
      HEAP8[$304>>0] = $302;
      $305 = $2;
      $306 = (_hio_read8($305)|0);
      $307 = $event;
      $308 = ((($307)) + 6|0);
      HEAP8[$308>>0] = $306;
      $309 = $c;
      $310 = $event;
      $311 = ((($310)) + 5|0);
      $312 = $event;
      $313 = ((($312)) + 6|0);
      _xlat_fx226($309,$311,$313);
      $314 = $pat_len;
      $315 = (($314) - 2)|0;
      $pat_len = $315;
     }
     $316 = $i;
     $317 = (($316) + 1)|0;
     $i = $317;
    }
    if ((label|0) == 27) {
     $0 = -1;
     $702 = $0;
     STACKTOP = sp;return ($702|0);
    }
    else if ((label|0) == 29) {
     $0 = -1;
     $702 = $0;
     STACKTOP = sp;return ($702|0);
    }
    else if ((label|0) == 35) {
     $0 = -1;
     $702 = $0;
     STACKTOP = sp;return ($702|0);
    }
    else if ((label|0) == 48) {
     $318 = $mod;
     $319 = (_instrument_init($318)|0);
     $320 = ($319|0)<(0);
     if ($320) {
      $0 = -1;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     $i = 0;
     $smp_num = 0;
     L73: while(1) {
      $321 = $i;
      $322 = $mod;
      $323 = ((($322)) + 140|0);
      $324 = HEAP32[$323>>2]|0;
      $325 = ($321|0)<($324|0);
      if (!($325)) {
       label = 92;
       break;
      }
      $326 = $i;
      $327 = $mod;
      $328 = ((($327)) + 176|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = (($329) + (($326*764)|0)|0);
      $xxi = $330;
      $331 = $2;
      (_hio_read($ii,32,1,$331)|0);
      $332 = ((($ii)) + 32|0);
      $333 = $2;
      (_hio_read($332,120,1,$333)|0);
      $334 = ((($ii)) + 152|0);
      $335 = $2;
      (_hio_read($334,8,1,$335)|0);
      $j = 0;
      while(1) {
       $336 = $j;
       $337 = ($336|0)<(32);
       if (!($337)) {
        break;
       }
       $338 = $2;
       $339 = (_hio_read16l($338)|0);
       $340 = $j;
       $341 = ((($ii)) + 160|0);
       $342 = (($341) + ($340<<1)|0);
       HEAP16[$342>>1] = $339;
       $343 = $j;
       $344 = (($343) + 1)|0;
       $j = $344;
      }
      $j = 0;
      while(1) {
       $345 = $j;
       $346 = ($345|0)<(32);
       if (!($346)) {
        break;
       }
       $347 = $2;
       $348 = (_hio_read16l($347)|0);
       $349 = $j;
       $350 = ((($ii)) + 224|0);
       $351 = (($350) + ($349<<1)|0);
       HEAP16[$351>>1] = $348;
       $352 = $j;
       $353 = (($352) + 1)|0;
       $j = $353;
      }
      $j = 0;
      while(1) {
       $354 = $j;
       $355 = ($354|0)<(32);
       if (!($355)) {
        break;
       }
       $356 = $2;
       $357 = (_hio_read16l($356)|0);
       $358 = $j;
       $359 = ((($ii)) + 288|0);
       $360 = (($359) + ($358<<1)|0);
       HEAP16[$360>>1] = $357;
       $361 = $j;
       $362 = (($361) + 1)|0;
       $j = $362;
      }
      $j = 0;
      while(1) {
       $363 = $j;
       $364 = ($363|0)<(3);
       $365 = $2;
       if (!($364)) {
        break;
       }
       $366 = (_hio_read8($365)|0);
       $367 = $j;
       $368 = ((($ii)) + 352|0);
       $369 = (($368) + ($367<<3)|0);
       HEAP8[$369>>0] = $366;
       $370 = $2;
       $371 = (_hio_read8($370)|0);
       $372 = $j;
       $373 = ((($ii)) + 352|0);
       $374 = (($373) + ($372<<3)|0);
       $375 = ((($374)) + 1|0);
       HEAP8[$375>>0] = $371;
       $376 = $2;
       $377 = (_hio_read8($376)|0);
       $378 = $j;
       $379 = ((($ii)) + 352|0);
       $380 = (($379) + ($378<<3)|0);
       $381 = ((($380)) + 2|0);
       HEAP8[$381>>0] = $377;
       $382 = $2;
       $383 = (_hio_read8($382)|0);
       $384 = $j;
       $385 = ((($ii)) + 352|0);
       $386 = (($385) + ($384<<3)|0);
       $387 = ((($386)) + 3|0);
       HEAP8[$387>>0] = $383;
       $388 = $2;
       $389 = (_hio_read8($388)|0);
       $390 = $j;
       $391 = ((($ii)) + 352|0);
       $392 = (($391) + ($390<<3)|0);
       $393 = ((($392)) + 4|0);
       HEAP8[$393>>0] = $389;
       $394 = $j;
       $395 = ((($ii)) + 352|0);
       $396 = (($395) + ($394<<3)|0);
       $397 = ((($396)) + 5|0);
       $398 = $2;
       (_hio_read($397,3,1,$398)|0);
       $399 = $j;
       $400 = (($399) + 1)|0;
       $j = $400;
      }
      $401 = (_hio_read16l($365)|0);
      $402 = ((($ii)) + 376|0);
      HEAP16[$402>>1] = $401;
      $403 = $2;
      $404 = (_hio_read16l($403)|0);
      $405 = ((($ii)) + 378|0);
      HEAP16[$405>>1] = $404;
      $406 = $2;
      $407 = (_hio_read32b($406)|0);
      $408 = ((($ii)) + 380|0);
      HEAP32[$408>>2] = $407;
      $409 = ((($ii)) + 378|0);
      $410 = HEAP16[$409>>1]|0;
      $411 = $410&65535;
      $412 = ($411|0)>(255);
      if ($412) {
       label = 65;
       break;
      }
      $413 = ((($ii)) + 380|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = ($414|0)!=(1229533488);
      if ($415) {
       label = 67;
       break;
      }
      $416 = ((($ii)) + 378|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $419 = $xxi;
      $420 = ((($419)) + 36|0);
      HEAP32[$420>>2] = $418;
      $421 = $xxi;
      $422 = ((($421)) + 36|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = ($423|0)>(0);
      if ($424) {
       $425 = $mod;
       $426 = $i;
       $427 = $xxi;
       $428 = ((($427)) + 36|0);
       $429 = HEAP32[$428>>2]|0;
       $430 = (_subinstrument_alloc($425,$426,$429)|0);
       $431 = ($430|0)<(0);
       if ($431) {
        label = 70;
        break;
       }
      }
      (_adjust_string($ii)|0);
      $432 = $xxi;
      (_strncpy(($432|0),($ii|0),24)|0);
      $j = 0;
      while(1) {
       $433 = $j;
       $434 = ($433|0)<(108);
       if (!($434)) {
        break;
       }
       $435 = $j;
       $436 = ((($ii)) + 32|0);
       $437 = (($436) + ($435)|0);
       $438 = HEAP8[$437>>0]|0;
       $439 = $j;
       $440 = (($439) + 12)|0;
       $441 = $xxi;
       $442 = ((($441)) + 512|0);
       $443 = (($442) + ($440<<1)|0);
       HEAP8[$443>>0] = $438;
       $444 = $j;
       $445 = (($444) + 1)|0;
       $j = $445;
      }
      $446 = ((($ii)) + 352|0);
      $447 = HEAP8[$446>>0]|0;
      $448 = $447&255;
      $449 = $xxi;
      $450 = ((($449)) + 44|0);
      $451 = ((($450)) + 4|0);
      HEAP32[$451>>2] = $448;
      $452 = ((($ii)) + 352|0);
      $453 = ((($452)) + 1|0);
      $454 = HEAP8[$453>>0]|0;
      $455 = $454&255;
      $456 = $xxi;
      $457 = ((($456)) + 44|0);
      $458 = ((($457)) + 12|0);
      HEAP32[$458>>2] = $455;
      $459 = ((($ii)) + 352|0);
      $460 = ((($459)) + 2|0);
      $461 = HEAP8[$460>>0]|0;
      $462 = $461&255;
      $463 = $xxi;
      $464 = ((($463)) + 44|0);
      $465 = ((($464)) + 20|0);
      HEAP32[$465>>2] = $462;
      $466 = ((($ii)) + 352|0);
      $467 = ((($466)) + 3|0);
      $468 = HEAP8[$467>>0]|0;
      $469 = $468&255;
      $470 = $xxi;
      $471 = ((($470)) + 44|0);
      $472 = ((($471)) + 24|0);
      HEAP32[$472>>2] = $469;
      $473 = ((($ii)) + 352|0);
      $474 = ((($473)) + 4|0);
      $475 = HEAP8[$474>>0]|0;
      $476 = $475&255;
      $477 = $476 & 1;
      $478 = ($477|0)!=(0);
      $479 = $478 ? 1 : 0;
      $480 = $xxi;
      $481 = ((($480)) + 44|0);
      HEAP32[$481>>2] = $479;
      $482 = ((($ii)) + 352|0);
      $483 = ((($482)) + 4|0);
      $484 = HEAP8[$483>>0]|0;
      $485 = $484&255;
      $486 = $485 & 2;
      $487 = ($486|0)!=(0);
      $488 = $487 ? 2 : 0;
      $489 = $xxi;
      $490 = ((($489)) + 44|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = $491 | $488;
      HEAP32[$490>>2] = $492;
      $493 = ((($ii)) + 352|0);
      $494 = ((($493)) + 4|0);
      $495 = HEAP8[$494>>0]|0;
      $496 = $495&255;
      $497 = $496 & 4;
      $498 = ($497|0)!=(0);
      $499 = $498 ? 4 : 0;
      $500 = $xxi;
      $501 = ((($500)) + 44|0);
      $502 = HEAP32[$501>>2]|0;
      $503 = $502 | $499;
      HEAP32[$501>>2] = $503;
      $504 = $xxi;
      $505 = ((($504)) + 44|0);
      $506 = ((($505)) + 4|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = ($507|0)>=(32);
      if ($508) {
       label = 75;
       break;
      }
      $j = 0;
      while(1) {
       $509 = $j;
       $510 = $xxi;
       $511 = ((($510)) + 44|0);
       $512 = ((($511)) + 4|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = ($509|0)<($513|0);
       if (!($514)) {
        break;
       }
       $515 = $j;
       $516 = $515<<1;
       $517 = ((($ii)) + 160|0);
       $518 = (($517) + ($516<<1)|0);
       $519 = HEAP16[$518>>1]|0;
       $520 = $j;
       $521 = $520<<1;
       $522 = $xxi;
       $523 = ((($522)) + 44|0);
       $524 = ((($523)) + 28|0);
       $525 = (($524) + ($521<<1)|0);
       HEAP16[$525>>1] = $519;
       $526 = $j;
       $527 = $526<<1;
       $528 = (($527) + 1)|0;
       $529 = ((($ii)) + 160|0);
       $530 = (($529) + ($528<<1)|0);
       $531 = HEAP16[$530>>1]|0;
       $532 = $j;
       $533 = $532<<1;
       $534 = (($533) + 1)|0;
       $535 = $xxi;
       $536 = ((($535)) + 44|0);
       $537 = ((($536)) + 28|0);
       $538 = (($537) + ($534<<1)|0);
       HEAP16[$538>>1] = $531;
       $539 = $j;
       $540 = (($539) + 1)|0;
       $j = $540;
      }
      $j = 0;
      while(1) {
       $541 = $j;
       $542 = ((($ii)) + 378|0);
       $543 = HEAP16[$542>>1]|0;
       $544 = $543&65535;
       $545 = ($541|0)<($544|0);
       if (!($545)) {
        break;
       }
       $546 = $j;
       $547 = $xxi;
       $548 = ((($547)) + 756|0);
       $549 = HEAP32[$548>>2]|0;
       $550 = (($549) + ($546<<6)|0);
       $sub = $550;
       $551 = $smp_num;
       $552 = $mod;
       $553 = ((($552)) + 180|0);
       $554 = HEAP32[$553>>2]|0;
       $555 = (($554) + (($551*52)|0)|0);
       $xxs = $555;
       $556 = $2;
       (_hio_read($is,13,1,$556)|0);
       $557 = ((($is)) + 13|0);
       $558 = $2;
       (_hio_read($557,3,1,$558)|0);
       $559 = $2;
       $560 = (_hio_read32l($559)|0);
       $561 = ((($is)) + 16|0);
       HEAP32[$561>>2] = $560;
       $562 = $2;
       $563 = (_hio_read32l($562)|0);
       $564 = ((($is)) + 20|0);
       HEAP32[$564>>2] = $563;
       $565 = $2;
       $566 = (_hio_read32l($565)|0);
       $567 = ((($is)) + 24|0);
       HEAP32[$567>>2] = $566;
       $568 = $2;
       $569 = (_hio_read32l($568)|0);
       $570 = ((($is)) + 28|0);
       HEAP32[$570>>2] = $569;
       $571 = $2;
       $572 = (_hio_read8($571)|0);
       $573 = ((($is)) + 32|0);
       HEAP8[$573>>0] = $572;
       $574 = $2;
       $575 = (_hio_read8($574)|0);
       $576 = ((($is)) + 33|0);
       HEAP8[$576>>0] = $575;
       $577 = ((($is)) + 34|0);
       $578 = $2;
       (_hio_read($577,14,1,$578)|0);
       $579 = $2;
       $580 = (_hio_read8($579)|0);
       $581 = ((($is)) + 48|0);
       HEAP8[$581>>0] = $580;
       $582 = ((($is)) + 49|0);
       $583 = $2;
       (_hio_read($582,5,1,$583)|0);
       $584 = $2;
       $585 = (_hio_read16l($584)|0);
       $586 = ((($is)) + 54|0);
       HEAP16[$586>>1] = $585;
       $587 = $2;
       $588 = (_hio_read32l($587)|0);
       $589 = ((($is)) + 56|0);
       HEAP32[$589>>2] = $588;
       $590 = $2;
       $591 = (_hio_read32b($590)|0);
       $592 = ((($is)) + 60|0);
       HEAP32[$592>>2] = $591;
       $593 = ((($is)) + 16|0);
       $594 = HEAP32[$593>>2]|0;
       $595 = ($594>>>0)>(1048576);
       if ($595) {
        label = 84;
        break L73;
       }
       $596 = ((($is)) + 20|0);
       $597 = HEAP32[$596>>2]|0;
       $598 = ($597>>>0)>(1048576);
       if ($598) {
        label = 84;
        break L73;
       }
       $599 = ((($is)) + 24|0);
       $600 = HEAP32[$599>>2]|0;
       $601 = ($600>>>0)>(1048576);
       if ($601) {
        label = 84;
        break L73;
       }
       $602 = $smp_num;
       $603 = $sub;
       $604 = ((($603)) + 40|0);
       HEAP32[$604>>2] = $602;
       $605 = ((($is)) + 32|0);
       $606 = HEAP8[$605>>0]|0;
       $607 = $606&255;
       $608 = $sub;
       HEAP32[$608>>2] = $607;
       $609 = ((($is)) + 33|0);
       $610 = HEAP8[$609>>0]|0;
       $611 = $610&255;
       $612 = $sub;
       $613 = ((($612)) + 8|0);
       HEAP32[$613>>2] = $611;
       $614 = ((($is)) + 16|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = $xxs;
       $617 = ((($616)) + 32|0);
       HEAP32[$617>>2] = $615;
       $618 = ((($is)) + 20|0);
       $619 = HEAP32[$618>>2]|0;
       $620 = $xxs;
       $621 = ((($620)) + 36|0);
       HEAP32[$621>>2] = $619;
       $622 = ((($is)) + 24|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = $xxs;
       $625 = ((($624)) + 40|0);
       HEAP32[$625>>2] = $623;
       $626 = ((($is)) + 48|0);
       $627 = HEAP8[$626>>0]|0;
       $628 = $627&255;
       $629 = $628 & 1;
       $630 = ($629|0)!=(0);
       $631 = $630 ? 2 : 0;
       $632 = $xxs;
       $633 = ((($632)) + 44|0);
       HEAP32[$633>>2] = $631;
       $634 = ((($is)) + 48|0);
       $635 = HEAP8[$634>>0]|0;
       $636 = $635&255;
       $637 = $636 & 4;
       $638 = ($637|0)!=(0);
       if ($638) {
        $639 = $xxs;
        $640 = ((($639)) + 44|0);
        $641 = HEAP32[$640>>2]|0;
        $642 = $641 | 1;
        HEAP32[$640>>2] = $642;
        $643 = $xxs;
        $644 = ((($643)) + 32|0);
        $645 = HEAP32[$644>>2]|0;
        $646 = $645 >> 1;
        HEAP32[$644>>2] = $646;
        $647 = $xxs;
        $648 = ((($647)) + 36|0);
        $649 = HEAP32[$648>>2]|0;
        $650 = $649 >> 1;
        HEAP32[$648>>2] = $650;
        $651 = $xxs;
        $652 = ((($651)) + 40|0);
        $653 = HEAP32[$652>>2]|0;
        $654 = $653 >> 1;
        HEAP32[$652>>2] = $654;
       }
       $655 = ((($is)) + 28|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = $sub;
       $658 = ((($657)) + 12|0);
       $659 = $sub;
       $660 = ((($659)) + 16|0);
       _c2spd_to_note($656,$658,$660);
       $661 = $xxs;
       $662 = ((($661)) + 32|0);
       $663 = HEAP32[$662>>2]|0;
       $664 = ($663|0)<=(0);
       if (!($664)) {
        $665 = $sub;
        $666 = ((($665)) + 40|0);
        $667 = HEAP32[$666>>2]|0;
        $sid = $667;
        $668 = $1;
        $669 = $2;
        $670 = $sid;
        $671 = $mod;
        $672 = ((($671)) + 180|0);
        $673 = HEAP32[$672>>2]|0;
        $674 = (($673) + (($670*52)|0)|0);
        $675 = (_load_sample($668,$669,0,$674,0)|0);
        $676 = ($675|0)<(0);
        if ($676) {
         label = 89;
         break L73;
        }
       }
       $677 = $j;
       $678 = (($677) + 1)|0;
       $j = $678;
       $679 = $smp_num;
       $680 = (($679) + 1)|0;
       $smp_num = $680;
      }
      $681 = $i;
      $682 = (($681) + 1)|0;
      $i = $682;
     }
     if ((label|0) == 65) {
      $0 = -1;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     else if ((label|0) == 67) {
      $0 = -2;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     else if ((label|0) == 70) {
      $0 = -1;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     else if ((label|0) == 75) {
      $0 = -1;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     else if ((label|0) == 84) {
      $0 = -1;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     else if ((label|0) == 89) {
      $0 = -1;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
     else if ((label|0) == 92) {
      $683 = $smp_num;
      $684 = $mod;
      $685 = ((($684)) + 144|0);
      HEAP32[$685>>2] = $683;
      $686 = $mod;
      $687 = ((($686)) + 180|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = $mod;
      $690 = ((($689)) + 144|0);
      $691 = HEAP32[$690>>2]|0;
      $692 = ($691*52)|0;
      $693 = (_realloc($688,$692)|0);
      $694 = $mod;
      $695 = ((($694)) + 180|0);
      HEAP32[$695>>2] = $693;
      $696 = $1;
      $697 = ((($696)) + 1284|0);
      $698 = HEAP32[$697>>2]|0;
      $699 = $698 | 285278753;
      HEAP32[$697>>2] = $699;
      $700 = $1;
      $701 = ((($700)) + 1288|0);
      HEAP32[$701>>2] = 2;
      $0 = 0;
      $702 = $0;
      STACKTOP = sp;return ($702|0);
     }
    }
   }
  }
 }
 $0 = -1;
 $702 = $0;
 STACKTOP = sp;return ($702|0);
}
function _xlat_fx226($c,$fxt,$fxp) {
 $c = $c|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $fxt;
 $2 = $fxp;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 240;
 $7 = $6 >> 4;
 $8 = $7&255;
 $h = $8;
 $9 = $2;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 15;
 $13 = $12&255;
 $l = $13;
 $14 = $1;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (4928 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $1;
 HEAP8[$19>>0] = $18;
 $20 = $18&255;
 if ((($20|0) == 254)) {
  $21 = $1;
  HEAP8[$21>>0] = 1;
  $22 = $2;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)<(48);
  $26 = $2;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  if ($25) {
   $29 = $28 >> 2;
   $30 = $29 & 15;
   $31 = $30 | 224;
   $32 = $31&255;
   $33 = $2;
   HEAP8[$33>>0] = $32;
   STACKTOP = sp;return;
  } else {
   $34 = $28 >> 4;
   $35 = $34 & 15;
   $36 = $35 | 240;
   $37 = $36&255;
   $38 = $2;
   HEAP8[$38>>0] = $37;
   STACKTOP = sp;return;
  }
 } else if ((($20|0) == 14)) {
  $57 = $h;
  $58 = $57&255;
  switch ($58|0) {
  case 15: case 14: case 9: case 7: case 6: case 4: case 2: case 1:  {
   $59 = $1;
   HEAP8[$59>>0] = 0;
   $60 = $2;
   HEAP8[$60>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $61 = $l;
   $62 = $61&255;
   $63 = $62 | 48;
   $64 = $63&255;
   $65 = $2;
   HEAP8[$65>>0] = $64;
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $76 = $l;
   $77 = $76&255;
   $78 = $77 | 96;
   $79 = $78&255;
   $80 = $2;
   HEAP8[$80>>0] = $79;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $71 = $l;
   $72 = $71&255;
   $73 = $72 | 112;
   $74 = $73&255;
   $75 = $2;
   HEAP8[$75>>0] = $74;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $86 = $l;
   $87 = $86&255;
   $88 = ($87|0)==(0);
   if (!($88)) {
    STACKTOP = sp;return;
   }
   $89 = $2;
   HEAP8[$89>>0] = 0;
   $90 = $1;
   HEAP8[$90>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $81 = $l;
   $82 = $81&255;
   $83 = $82 | 224;
   $84 = $83&255;
   $85 = $2;
   HEAP8[$85>>0] = $84;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $66 = $l;
   $67 = $66&255;
   $68 = $67 | 64;
   $69 = $68&255;
   $70 = $2;
   HEAP8[$70>>0] = $69;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } else if ((($20|0) == 253)) {
  $39 = $1;
  HEAP8[$39>>0] = 2;
  $40 = $2;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)<(48);
  $44 = $2;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  if ($43) {
   $47 = $46 >> 2;
   $48 = $47 & 15;
   $49 = $48 | 224;
   $50 = $49&255;
   $51 = $2;
   HEAP8[$51>>0] = $50;
   STACKTOP = sp;return;
  } else {
   $52 = $46 >> 4;
   $53 = $52 & 15;
   $54 = $53 | 240;
   $55 = $54&255;
   $56 = $2;
   HEAP8[$56>>0] = $55;
   STACKTOP = sp;return;
  }
 } else if ((($20|0) == 255)) {
  $91 = $2;
  HEAP8[$91>>0] = 0;
  $92 = $1;
  HEAP8[$92>>0] = 0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _digi_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,20,$4)|0);
 $6 = ($5>>>0)<(20);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,5024,19)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    (_hio_seek($9,156,1)|0);
    $10 = $1;
    (_hio_seek($10,384,1)|0);
    $11 = $1;
    (_hio_seek($11,64,1)|0);
    $12 = $1;
    $13 = $2;
    _read_title($12,$13,32);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function _digi_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $chn_table = 0, $dh = 0, $digi_event = 0, $event = 0, $i = 0, $j = 0;
 var $k = 0, $mod = 0, $vararg_buffer = 0, $w = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1696|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dh = sp + 20|0;
 $digi_event = sp + 1688|0;
 $chn_table = sp + 1624|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($dh,20,1,$7)|0);
 $8 = ((($dh)) + 20|0);
 $9 = $2;
 (_hio_read($8,4,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = ((($dh)) + 24|0);
 HEAP8[$12>>0] = $11;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = ((($dh)) + 25|0);
 HEAP8[$15>>0] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = ((($dh)) + 26|0);
 HEAP8[$18>>0] = $17;
 $19 = ((($dh)) + 27|0);
 $20 = $2;
 (_hio_read($19,19,1,$20)|0);
 $21 = $2;
 $22 = (_hio_read8($21)|0);
 $23 = ((($dh)) + 46|0);
 HEAP8[$23>>0] = $22;
 $24 = $2;
 $25 = (_hio_read8($24)|0);
 $26 = ((($dh)) + 47|0);
 HEAP8[$26>>0] = $25;
 $27 = ((($dh)) + 48|0);
 $28 = $2;
 (_hio_read($27,128,1,$28)|0);
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(31);
  if (!($30)) {
   break;
  }
  $31 = $2;
  $32 = (_hio_read32b($31)|0);
  $33 = $i;
  $34 = ((($dh)) + 176|0);
  $35 = (($34) + ($33<<2)|0);
  HEAP32[$35>>2] = $32;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(31);
  if (!($39)) {
   break;
  }
  $40 = $2;
  $41 = (_hio_read32b($40)|0);
  $42 = $i;
  $43 = ((($dh)) + 300|0);
  $44 = (($43) + ($42<<2)|0);
  HEAP32[$44>>2] = $41;
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = ($47|0)<(31);
  if (!($48)) {
   break;
  }
  $49 = $2;
  $50 = (_hio_read32b($49)|0);
  $51 = $i;
  $52 = ((($dh)) + 424|0);
  $53 = (($52) + ($51<<2)|0);
  HEAP32[$53>>2] = $50;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(31);
  if (!($57)) {
   break;
  }
  $58 = $2;
  $59 = (_hio_read8($58)|0);
  $60 = $i;
  $61 = ((($dh)) + 548|0);
  $62 = (($61) + ($60)|0);
  HEAP8[$62>>0] = $59;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $i = 0;
 while(1) {
  $65 = $i;
  $66 = ($65|0)<(31);
  if (!($66)) {
   break;
  }
  $67 = $2;
  $68 = (_hio_read8s($67)|0);
  $69 = $i;
  $70 = ((($dh)) + 579|0);
  $71 = (($70) + ($69)|0);
  HEAP8[$71>>0] = $68;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $74 = ((($dh)) + 610|0);
 $75 = $2;
 (_hio_read($74,32,1,$75)|0);
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(31);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = ((($dh)) + 642|0);
  $80 = (($79) + (($78*30)|0)|0);
  $81 = $2;
  (_hio_read($80,30,1,$81)|0);
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $84 = $mod;
 $85 = ((($84)) + 140|0);
 HEAP32[$85>>2] = 31;
 $86 = $mod;
 $87 = ((($86)) + 140|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $mod;
 $90 = ((($89)) + 144|0);
 HEAP32[$90>>2] = $88;
 $91 = ((($dh)) + 46|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = (($93) + 1)|0;
 $95 = $mod;
 $96 = ((($95)) + 128|0);
 HEAP32[$96>>2] = $94;
 $97 = ((($dh)) + 25|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = $mod;
 $101 = ((($100)) + 136|0);
 HEAP32[$101>>2] = $99;
 $102 = $mod;
 $103 = ((($102)) + 128|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $mod;
 $106 = ((($105)) + 136|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = Math_imul($104, $107)|0;
 $109 = $mod;
 $110 = ((($109)) + 132|0);
 HEAP32[$110>>2] = $108;
 $111 = ((($dh)) + 47|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = $112&255;
 $114 = (($113) + 1)|0;
 $115 = $mod;
 $116 = ((($115)) + 156|0);
 HEAP32[$116>>2] = $114;
 $117 = $1;
 $118 = ((($117)) + 1284|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 | 8192;
 HEAP32[$118>>2] = $120;
 $121 = $mod;
 $122 = ((($dh)) + 610|0);
 (_copy_adjust($121,$122,32)|0);
 $123 = $1;
 $124 = ((($dh)) + 20|0);
 HEAP32[$vararg_buffer>>2] = $124;
 _set_type($123,5000,$vararg_buffer);
 $i = 0;
 while(1) {
  $125 = $i;
  $126 = $mod;
  $127 = ((($126)) + 156|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($125|0)<($128|0);
  if (!($129)) {
   break;
  }
  $130 = $i;
  $131 = ((($dh)) + 48|0);
  $132 = (($131) + ($130)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $i;
  $135 = $mod;
  $136 = ((($135)) + 952|0);
  $137 = (($136) + ($134)|0);
  HEAP8[$137>>0] = $133;
  $138 = $i;
  $139 = (($138) + 1)|0;
  $i = $139;
 }
 $140 = $mod;
 $141 = (_instrument_init($140)|0);
 $142 = ($141|0)<(0);
 if ($142) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $i = 0;
 while(1) {
  $143 = $i;
  $144 = $mod;
  $145 = ((($144)) + 140|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($143|0)<($146|0);
  $148 = $mod;
  if (!($147)) {
   break;
  }
  $149 = $i;
  $150 = (_subinstrument_alloc($148,$149,1)|0);
  $151 = ($150|0)<(0);
  if ($151) {
   label = 27;
   break;
  }
  $152 = $i;
  $153 = ((($dh)) + 176|0);
  $154 = (($153) + ($152<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $i;
  $157 = $mod;
  $158 = ((($157)) + 180|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + (($156*52)|0)|0);
  $161 = ((($160)) + 32|0);
  HEAP32[$161>>2] = $155;
  $162 = $i;
  $163 = ((($dh)) + 300|0);
  $164 = (($163) + ($162<<2)|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $i;
  $167 = $mod;
  $168 = ((($167)) + 180|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + (($166*52)|0)|0);
  $171 = ((($170)) + 36|0);
  HEAP32[$171>>2] = $165;
  $172 = $i;
  $173 = ((($dh)) + 300|0);
  $174 = (($173) + ($172<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $i;
  $177 = ((($dh)) + 424|0);
  $178 = (($177) + ($176<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = (($175) + ($179))|0;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 180|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($184) + (($181*52)|0)|0);
  $186 = ((($185)) + 40|0);
  HEAP32[$186>>2] = $180;
  $187 = $i;
  $188 = $mod;
  $189 = ((($188)) + 180|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + (($187*52)|0)|0);
  $192 = ((($191)) + 40|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)>(0);
  $195 = $194 ? 2 : 0;
  $196 = $i;
  $197 = $mod;
  $198 = ((($197)) + 180|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($199) + (($196*52)|0)|0);
  $201 = ((($200)) + 44|0);
  HEAP32[$201>>2] = $195;
  $202 = $i;
  $203 = ((($dh)) + 548|0);
  $204 = (($203) + ($202)|0);
  $205 = HEAP8[$204>>0]|0;
  $206 = $205&255;
  $207 = $i;
  $208 = $mod;
  $209 = ((($208)) + 176|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + (($207*764)|0)|0);
  $212 = ((($211)) + 756|0);
  $213 = HEAP32[$212>>2]|0;
  HEAP32[$213>>2] = $206;
  $214 = $i;
  $215 = ((($dh)) + 579|0);
  $216 = (($215) + ($214)|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = $217 << 24 >> 24;
  $219 = $i;
  $220 = $mod;
  $221 = ((($220)) + 176|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + (($219*764)|0)|0);
  $224 = ((($223)) + 756|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ((($225)) + 16|0);
  HEAP32[$226>>2] = $218;
  $227 = $i;
  $228 = $mod;
  $229 = ((($228)) + 176|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + (($227*764)|0)|0);
  $232 = ((($231)) + 756|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ((($233)) + 8|0);
  HEAP32[$234>>2] = 128;
  $235 = $i;
  $236 = $i;
  $237 = $mod;
  $238 = ((($237)) + 176|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = (($239) + (($236*764)|0)|0);
  $241 = ((($240)) + 756|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = ((($242)) + 40|0);
  HEAP32[$243>>2] = $235;
  $244 = $i;
  $245 = $mod;
  $246 = ((($245)) + 180|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($247) + (($244*52)|0)|0);
  $249 = ((($248)) + 32|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ($250|0)>(0);
  if ($251) {
   $252 = $i;
   $253 = $mod;
   $254 = ((($253)) + 176|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (($255) + (($252*764)|0)|0);
   $257 = ((($256)) + 36|0);
   HEAP32[$257>>2] = 1;
  }
  $258 = $mod;
  $259 = $i;
  $260 = $i;
  $261 = ((($dh)) + 642|0);
  $262 = (($261) + (($260*30)|0)|0);
  (_instrument_name($258,$259,$262,30)|0);
  $263 = $i;
  $264 = (($263) + 1)|0;
  $i = $264;
 }
 if ((label|0) == 27) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $265 = (_pattern_init($148)|0);
 $266 = ($265|0)<(0);
 if ($266) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $i = 0;
 while(1) {
  $267 = $i;
  $268 = $mod;
  $269 = ((($268)) + 128|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($267|0)<($270|0);
  if (!($271)) {
   break;
  }
  $272 = $mod;
  $273 = $i;
  $274 = (_pattern_tracks_alloc($272,$273,64)|0);
  $275 = ($274|0)<(0);
  if ($275) {
   label = 36;
   break;
  }
  $276 = ((($dh)) + 26|0);
  $277 = HEAP8[$276>>0]|0;
  $278 = ($277<<24>>24)!=(0);
  if ($278) {
   $279 = $2;
   $280 = (_hio_read16b($279)|0);
   $281 = $280&65535;
   $282 = (($281) - 64)|0;
   $283 = $282 >> 2;
   $284 = $283&65535;
   $w = $284;
   $285 = $2;
   (_hio_read($chn_table,1,64,$285)|0);
  } else {
   $286 = $mod;
   $287 = ((($286)) + 136|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = $288<<6;
   $290 = $289&65535;
   $w = $290;
   dest=$chn_table; stop=dest+64|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
  $j = 0;
  while(1) {
   $291 = $j;
   $292 = ($291|0)<(64);
   if (!($292)) {
    break;
   }
   $c = 0;
   $k = 128;
   while(1) {
    $293 = $c;
    $294 = $mod;
    $295 = ((($294)) + 136|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = ($293|0)<($296|0);
    $298 = $j;
    if (!($297)) {
     break;
    }
    $299 = (($chn_table) + ($298)|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = $k;
    $303 = $301 & $302;
    $304 = ($303|0)!=(0);
    if ($304) {
     $305 = $2;
     (_hio_read($digi_event,4,1,$305)|0);
     $306 = $j;
     $307 = $c;
     $308 = $i;
     $309 = $1;
     $310 = ((($309)) + 168|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (($311) + ($308<<2)|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = ((($313)) + 4|0);
     $315 = (($314) + ($307<<2)|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = $1;
     $318 = ((($317)) + 172|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = (($319) + ($316<<2)|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ((($321)) + 4|0);
     $323 = (($322) + ($306<<3)|0);
     $event = $323;
     $324 = $event;
     _decode_protracker_event($324,$digi_event);
     $325 = $event;
     $326 = ((($325)) + 3|0);
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     L64: do {
      if ((($328|0) == 14)) {
       $333 = $event;
       $334 = ((($333)) + 4|0);
       $335 = HEAP8[$334>>0]|0;
       $336 = $335&255;
       $337 = $336 & 240;
       $338 = $337 >> 4;
       switch ($338|0) {
       case 9: case 8: case 3: case 0:  {
        $339 = $event;
        $340 = ((($339)) + 4|0);
        HEAP8[$340>>0] = 0;
        $341 = $event;
        $342 = ((($341)) + 3|0);
        HEAP8[$342>>0] = 0;
        break L64;
        break;
       }
       case 4:  {
        $343 = $event;
        $344 = ((($343)) + 3|0);
        HEAP8[$344>>0] = 12;
        $345 = $event;
        $346 = ((($345)) + 4|0);
        HEAP8[$346>>0] = 0;
        break L64;
        break;
       }
       default: {
        break L64;
       }
       }
      } else if ((($328|0) == 8)) {
       $329 = $event;
       $330 = ((($329)) + 4|0);
       HEAP8[$330>>0] = 0;
       $331 = $event;
       $332 = ((($331)) + 3|0);
       HEAP8[$332>>0] = 0;
      }
     } while(0);
     $347 = $w;
     $348 = (($347) + -1)<<16>>16;
     $w = $348;
    }
    $349 = $c;
    $350 = (($349) + 1)|0;
    $c = $350;
    $351 = $k;
    $352 = $351 >> 1;
    $k = $352;
   }
   $353 = (($298) + 1)|0;
   $j = $353;
  }
  $354 = $i;
  $355 = (($354) + 1)|0;
  $i = $355;
 }
 if ((label|0) == 36) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 $i = 0;
 while(1) {
  $356 = $i;
  $357 = $mod;
  $358 = ((($357)) + 140|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = ($356|0)<($359|0);
  if (!($360)) {
   label = 59;
   break;
  }
  $361 = $1;
  $362 = $2;
  $363 = $i;
  $364 = $mod;
  $365 = ((($364)) + 180|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = (($366) + (($363*52)|0)|0);
  $368 = (_load_sample($361,$362,0,$367,0)|0);
  $369 = ($368|0)<(0);
  if ($369) {
   label = 57;
   break;
  }
  $370 = $i;
  $371 = (($370) + 1)|0;
  $i = $371;
 }
 if ((label|0) == 57) {
  $0 = -1;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 else if ((label|0) == 59) {
  $0 = 0;
  $372 = $0;
  STACKTOP = sp;return ($372|0);
 }
 return (0)|0;
}
function _fnk_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1182101099);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read8($7)|0);
   $8 = $1;
   $9 = (_hio_read8($8)|0);
   $a = $9;
   $10 = $1;
   $11 = (_hio_read8($10)|0);
   $b = $11;
   $12 = $1;
   (_hio_read8($12)|0);
   $13 = $a;
   $14 = $13&255;
   $15 = $14 >> 1;
   $16 = ($15|0)<(10);
   if ($16) {
    $0 = -1;
    break;
   }
   $17 = $b;
   $18 = $17&255;
   $19 = $18 & 240;
   $20 = $19 >> 4;
   $21 = ($20|0)>(7);
   if (!($21)) {
    $22 = $b;
    $23 = $22&255;
    $24 = $23 & 15;
    $25 = ($24|0)>(9);
    if (!($25)) {
     $26 = $1;
     $27 = (_hio_read32l($26)|0);
     $size = $27;
     $28 = $size;
     $29 = ($28|0)<(1024);
     if ($29) {
      $0 = -1;
      break;
     }
     $30 = $1;
     $31 = (_hio_size($30)|0);
     $32 = $size;
     $33 = ($31|0)!=($32|0);
     if ($33) {
      $0 = -1;
      break;
     } else {
      $34 = $1;
      $35 = $2;
      _read_title($34,$35,0);
      $0 = 0;
      break;
     }
    }
   }
   $0 = -1;
  }
 } while(0);
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _fnk_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $ffh = 0, $i = 0, $j = 0, $mod = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ffh = sp + 20|0;
 $ev = sp + 2760|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ffh,4,1,$7)|0);
 $8 = ((($ffh)) + 4|0);
 $9 = $2;
 (_hio_read($8,4,1,$9)|0);
 $10 = $2;
 $11 = (_hio_read32l($10)|0);
 $12 = ((($ffh)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($ffh)) + 12|0);
 $14 = $2;
 (_hio_read($13,4,1,$14)|0);
 $15 = $2;
 $16 = (_hio_read8($15)|0);
 $17 = ((($ffh)) + 16|0);
 HEAP8[$17>>0] = $16;
 $18 = ((($ffh)) + 17|0);
 $19 = $2;
 (_hio_read($18,256,1,$19)|0);
 $20 = ((($ffh)) + 273|0);
 $21 = $2;
 (_hio_read($20,128,1,$21)|0);
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22|0)<(64);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = ((($ffh)) + 404|0);
  $26 = (($25) + (($24*36)|0)|0);
  $27 = $2;
  (_hio_read($26,19,1,$27)|0);
  $28 = $2;
  $29 = (_hio_read32l($28)|0);
  $30 = $i;
  $31 = ((($ffh)) + 404|0);
  $32 = (($31) + (($30*36)|0)|0);
  $33 = ((($32)) + 20|0);
  HEAP32[$33>>2] = $29;
  $34 = $2;
  $35 = (_hio_read32l($34)|0);
  $36 = $i;
  $37 = ((($ffh)) + 404|0);
  $38 = (($37) + (($36*36)|0)|0);
  $39 = ((($38)) + 24|0);
  HEAP32[$39>>2] = $35;
  $40 = $2;
  $41 = (_hio_read8($40)|0);
  $42 = $i;
  $43 = ((($ffh)) + 404|0);
  $44 = (($43) + (($42*36)|0)|0);
  $45 = ((($44)) + 28|0);
  HEAP8[$45>>0] = $41;
  $46 = $2;
  $47 = (_hio_read8($46)|0);
  $48 = $i;
  $49 = ((($ffh)) + 404|0);
  $50 = (($49) + (($48*36)|0)|0);
  $51 = ((($50)) + 29|0);
  HEAP8[$51>>0] = $47;
  $52 = $2;
  $53 = (_hio_read8($52)|0);
  $54 = $i;
  $55 = ((($ffh)) + 404|0);
  $56 = (($55) + (($54*36)|0)|0);
  $57 = ((($56)) + 30|0);
  HEAP8[$57>>0] = $53;
  $58 = $2;
  $59 = (_hio_read8($58)|0);
  $60 = $i;
  $61 = ((($ffh)) + 404|0);
  $62 = (($61) + (($60*36)|0)|0);
  $63 = ((($62)) + 31|0);
  HEAP8[$63>>0] = $59;
  $64 = $2;
  $65 = (_hio_read8($64)|0);
  $66 = $i;
  $67 = ((($ffh)) + 404|0);
  $68 = (($67) + (($66*36)|0)|0);
  $69 = ((($68)) + 32|0);
  HEAP8[$69>>0] = $65;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $mod;
 $73 = ((($72)) + 140|0);
 HEAP32[$73>>2] = 64;
 $74 = $mod;
 $75 = ((($74)) + 144|0);
 HEAP32[$75>>2] = 64;
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = ($76|0)<(256);
  if (!($77)) {
   break;
  }
  $78 = $i;
  $79 = ((($ffh)) + 17|0);
  $80 = (($79) + ($78)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82|0)!=(255);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = ((($ffh)) + 17|0);
  $86 = (($85) + ($84)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $mod;
  $90 = ((($89)) + 128|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($88|0)>($91|0);
  if ($92) {
   $93 = $i;
   $94 = ((($ffh)) + 17|0);
   $95 = (($94) + ($93)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $mod;
   $99 = ((($98)) + 128|0);
   HEAP32[$99>>2] = $97;
  }
  $100 = $i;
  $101 = (($100) + 1)|0;
  $i = $101;
 }
 $102 = $mod;
 $103 = ((($102)) + 128|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 1)|0;
 HEAP32[$103>>2] = $105;
 $106 = $i;
 $107 = $mod;
 $108 = ((($107)) + 156|0);
 HEAP32[$108>>2] = $106;
 $109 = $mod;
 $110 = ((($109)) + 952|0);
 $111 = ((($ffh)) + 17|0);
 $112 = $mod;
 $113 = ((($112)) + 156|0);
 $114 = HEAP32[$113>>2]|0;
 _memcpy(($110|0),($111|0),($114|0))|0;
 $115 = $mod;
 $116 = ((($115)) + 148|0);
 HEAP32[$116>>2] = 4;
 $117 = $mod;
 $118 = ((($117)) + 152|0);
 HEAP32[$118>>2] = 125;
 $119 = $mod;
 $120 = ((($119)) + 136|0);
 HEAP32[$120>>2] = 0;
 $121 = ((($ffh)) + 12|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = ($123|0)==(70);
 if ($124) {
  $125 = ((($ffh)) + 12|0);
  $126 = ((($125)) + 1|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = ($128|0)==(50);
  if ($129) {
   $130 = ((($ffh)) + 4|0);
   $131 = ((($130)) + 3|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132 << 24 >> 24;
   $134 = $133 >> 1;
   $135 = $134 & 64;
   $136 = ($135|0)!=(0);
   $137 = ((($ffh)) + 4|0);
   $138 = ((($137)) + 3|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = $140 >> 1;
   $142 = $141 & 63;
   $143 = $mod;
   $144 = ((($143)) + 152|0);
   $145 = HEAP32[$144>>2]|0;
   if ($136) {
    $146 = (($145) - ($142))|0;
    HEAP32[$144>>2] = $146;
   } else {
    $147 = (($145) + ($142))|0;
    HEAP32[$144>>2] = $147;
   }
   $148 = $1;
   _set_type($148,5080,$vararg_buffer);
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 L20: do {
  if ((label|0) == 16) {
   $149 = ((($ffh)) + 12|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = ($151|0)==(70);
   do {
    if ($152) {
     $153 = ((($ffh)) + 12|0);
     $154 = ((($153)) + 1|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = ($156|0)==(118);
     if (!($157)) {
      $158 = ((($ffh)) + 12|0);
      $159 = ((($158)) + 1|0);
      $160 = HEAP8[$159>>0]|0;
      $161 = $160&255;
      $162 = ($161|0)==(107);
      if (!($162)) {
       break;
      }
     }
     $163 = $1;
     _set_type($163,5064,$vararg_buffer1);
     break L20;
    }
   } while(0);
   $164 = $mod;
   $165 = ((($164)) + 136|0);
   HEAP32[$165>>2] = 8;
   $166 = $1;
   _set_type($166,5096,$vararg_buffer3);
  }
 } while(0);
 $167 = $mod;
 $168 = ((($167)) + 136|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)==(0);
 if ($170) {
  $171 = ((($ffh)) + 12|0);
  $172 = ((($171)) + 2|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = ($174|0)<(48);
  if ($175) {
   $205 = 8;
  } else {
   $176 = ((($ffh)) + 12|0);
   $177 = ((($176)) + 2|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = ($179|0)>(57);
   if ($180) {
    $205 = 8;
   } else {
    $181 = ((($ffh)) + 12|0);
    $182 = ((($181)) + 3|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = ($184|0)<(48);
    if ($185) {
     $205 = 8;
    } else {
     $186 = ((($ffh)) + 12|0);
     $187 = ((($186)) + 3|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = $188&255;
     $190 = ($189|0)>(57);
     if ($190) {
      $205 = 8;
     } else {
      $191 = ((($ffh)) + 12|0);
      $192 = ((($191)) + 2|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = $193&255;
      $195 = (($194) - 48)|0;
      $196 = ($195*10)|0;
      $197 = ((($ffh)) + 12|0);
      $198 = ((($197)) + 3|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = (($196) + ($200))|0;
      $202 = (($201) - 48)|0;
      $205 = $202;
     }
    }
   }
  }
  $203 = $mod;
  $204 = ((($203)) + 136|0);
  HEAP32[$204>>2] = $205;
 }
 $206 = $mod;
 $207 = ((($206)) + 152|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = $208<<2;
 $210 = (($209|0) / 5)&-1;
 $211 = $mod;
 $212 = ((($211)) + 152|0);
 HEAP32[$212>>2] = $210;
 $213 = $mod;
 $214 = ((($213)) + 136|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = $mod;
 $217 = ((($216)) + 128|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = Math_imul($215, $218)|0;
 $220 = $mod;
 $221 = ((($220)) + 132|0);
 HEAP32[$221>>2] = $219;
 $222 = $1;
 $223 = ((($222)) + 1284|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = $224 | 4096;
 HEAP32[$223>>2] = $225;
 $226 = $mod;
 $227 = (_instrument_init($226)|0);
 $228 = ($227|0)<(0);
 if ($228) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $229 = $i;
  $230 = $mod;
  $231 = ((($230)) + 140|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($229|0)<($232|0);
  $234 = $mod;
  if (!($233)) {
   break;
  }
  $235 = $i;
  $236 = (_subinstrument_alloc($234,$235,1)|0);
  $237 = ($236|0)<(0);
  if ($237) {
   label = 33;
   break;
  }
  $238 = $i;
  $239 = ((($ffh)) + 404|0);
  $240 = (($239) + (($238*36)|0)|0);
  $241 = ((($240)) + 24|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = $i;
  $244 = $mod;
  $245 = ((($244)) + 180|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = (($246) + (($243*52)|0)|0);
  $248 = ((($247)) + 32|0);
  HEAP32[$248>>2] = $242;
  $249 = $i;
  $250 = ((($ffh)) + 404|0);
  $251 = (($250) + (($249*36)|0)|0);
  $252 = ((($251)) + 20|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $i;
  $255 = $mod;
  $256 = ((($255)) + 180|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($257) + (($254*52)|0)|0);
  $259 = ((($258)) + 36|0);
  HEAP32[$259>>2] = $253;
  $260 = $i;
  $261 = $mod;
  $262 = ((($261)) + 180|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + (($260*52)|0)|0);
  $265 = ((($264)) + 36|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($266|0)==(-1);
  if ($267) {
   $268 = $i;
   $269 = $mod;
   $270 = ((($269)) + 180|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($271) + (($268*52)|0)|0);
   $273 = ((($272)) + 36|0);
   HEAP32[$273>>2] = 0;
  }
  $274 = $i;
  $275 = ((($ffh)) + 404|0);
  $276 = (($275) + (($274*36)|0)|0);
  $277 = ((($276)) + 24|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $i;
  $280 = $mod;
  $281 = ((($280)) + 180|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = (($282) + (($279*52)|0)|0);
  $284 = ((($283)) + 40|0);
  HEAP32[$284>>2] = $278;
  $285 = $i;
  $286 = ((($ffh)) + 404|0);
  $287 = (($286) + (($285*36)|0)|0);
  $288 = ((($287)) + 20|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)!=(-1);
  $291 = $290 ? 2 : 0;
  $292 = $i;
  $293 = $mod;
  $294 = ((($293)) + 180|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + (($292*52)|0)|0);
  $297 = ((($296)) + 44|0);
  HEAP32[$297>>2] = $291;
  $298 = $i;
  $299 = ((($ffh)) + 404|0);
  $300 = (($299) + (($298*36)|0)|0);
  $301 = ((($300)) + 28|0);
  $302 = HEAP8[$301>>0]|0;
  $303 = $302&255;
  $304 = $i;
  $305 = $mod;
  $306 = ((($305)) + 176|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($307) + (($304*764)|0)|0);
  $309 = ((($308)) + 756|0);
  $310 = HEAP32[$309>>2]|0;
  HEAP32[$310>>2] = $303;
  $311 = $i;
  $312 = ((($ffh)) + 404|0);
  $313 = (($312) + (($311*36)|0)|0);
  $314 = ((($313)) + 29|0);
  $315 = HEAP8[$314>>0]|0;
  $316 = $315&255;
  $317 = $i;
  $318 = $mod;
  $319 = ((($318)) + 176|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($320) + (($317*764)|0)|0);
  $322 = ((($321)) + 756|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ((($323)) + 8|0);
  HEAP32[$324>>2] = $316;
  $325 = $i;
  $326 = $i;
  $327 = $mod;
  $328 = ((($327)) + 176|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = (($329) + (($326*764)|0)|0);
  $331 = ((($330)) + 756|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ((($332)) + 40|0);
  HEAP32[$333>>2] = $325;
  $334 = $i;
  $335 = $mod;
  $336 = ((($335)) + 180|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = (($337) + (($334*52)|0)|0);
  $339 = ((($338)) + 32|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($340|0)>(0);
  if ($341) {
   $342 = $i;
   $343 = $mod;
   $344 = ((($343)) + 176|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = (($345) + (($342*764)|0)|0);
   $347 = ((($346)) + 36|0);
   HEAP32[$347>>2] = 1;
  }
  $348 = $mod;
  $349 = $i;
  $350 = $i;
  $351 = ((($ffh)) + 404|0);
  $352 = (($351) + (($350*36)|0)|0);
  (_instrument_name($348,$349,$352,19)|0);
  $353 = $i;
  $354 = (($353) + 1)|0;
  $i = $354;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $355 = (_pattern_init($234)|0);
 $356 = ($355|0)<(0);
 if ($356) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $357 = $i;
  $358 = $mod;
  $359 = ((($358)) + 128|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = ($357|0)<($360|0);
  if (!($361)) {
   break;
  }
  $362 = $mod;
  $363 = $i;
  $364 = (_pattern_tracks_alloc($362,$363,64)|0);
  $365 = ($364|0)<(0);
  if ($365) {
   label = 44;
   break;
  }
  $366 = $i;
  $367 = ((($ffh)) + 273|0);
  $368 = (($367) + ($366)|0);
  $369 = HEAP8[$368>>0]|0;
  $370 = $369&255;
  $371 = $i;
  $372 = $1;
  $373 = ((($372)) + 168|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = (($374) + ($371<<2)|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = ((($376)) + 4|0);
  $378 = ((($377)) + 4|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = $1;
  $381 = ((($380)) + 172|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = (($382) + ($379<<2)|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = ((($384)) + 4|0);
  $386 = (($385) + ($370<<3)|0);
  $387 = ((($386)) + 5|0);
  HEAP8[$387>>0] = 13;
  $j = 0;
  while(1) {
   $388 = $j;
   $389 = $mod;
   $390 = ((($389)) + 136|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $391<<6;
   $393 = ($388|0)<($392|0);
   if (!($393)) {
    break;
   }
   $394 = $j;
   $395 = $mod;
   $396 = ((($395)) + 136|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = (($394|0) / ($397|0))&-1;
   $399 = $j;
   $400 = $mod;
   $401 = ((($400)) + 136|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = (($399|0) % ($402|0))&-1;
   $404 = $i;
   $405 = $1;
   $406 = ((($405)) + 168|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($407) + ($404<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = ((($409)) + 4|0);
   $411 = (($410) + ($403<<2)|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = $1;
   $414 = ((($413)) + 172|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = (($415) + ($412<<2)|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = ((($417)) + 4|0);
   $419 = (($418) + ($398<<3)|0);
   $event = $419;
   $420 = $2;
   (_hio_read($ev,1,3,$420)|0);
   $421 = HEAP8[$ev>>0]|0;
   $422 = $421&255;
   $423 = $422 >> 2;
   $$off = (($423) + -61)|0;
   $switch = ($$off>>>0)<(3);
   if (!($switch)) {
    $424 = HEAP8[$ev>>0]|0;
    $425 = $424&255;
    $426 = $425 >> 2;
    $427 = (37 + ($426))|0;
    $428 = $427&255;
    $429 = $event;
    HEAP8[$429>>0] = $428;
    $430 = ((($ev)) + 1|0);
    $431 = HEAP8[$430>>0]|0;
    $432 = $431&255;
    $433 = $432 & 240;
    $434 = $433 >> 4;
    $435 = (1 + ($434))|0;
    $436 = HEAP8[$ev>>0]|0;
    $437 = $436&255;
    $438 = $437 & 3;
    $439 = $438 << 4;
    $440 = (($435) + ($439))|0;
    $441 = $440&255;
    $442 = $event;
    $443 = ((($442)) + 1|0);
    HEAP8[$443>>0] = $441;
    $444 = $event;
    $445 = ((($444)) + 1|0);
    $446 = HEAP8[$445>>0]|0;
    $447 = $446&255;
    $448 = (($447) - 1)|0;
    $449 = ((($ffh)) + 404|0);
    $450 = (($449) + (($448*36)|0)|0);
    $451 = ((($450)) + 28|0);
    $452 = HEAP8[$451>>0]|0;
    $453 = $event;
    $454 = ((($453)) + 2|0);
    HEAP8[$454>>0] = $452;
   }
   $455 = ((($ev)) + 1|0);
   $456 = HEAP8[$455>>0]|0;
   $457 = $456&255;
   $458 = $457 & 15;
   L70: do {
    switch ($458|0) {
    case 13:  {
     $507 = $event;
     $508 = ((($507)) + 3|0);
     HEAP8[$508>>0] = 12;
     $509 = ((($ev)) + 2|0);
     $510 = HEAP8[$509>>0]|0;
     $511 = $event;
     $512 = ((($511)) + 4|0);
     HEAP8[$512>>0] = $510;
     break;
    }
    case 3:  {
     $477 = $event;
     $478 = ((($477)) + 3|0);
     HEAP8[$478>>0] = 123;
     $479 = ((($ev)) + 2|0);
     $480 = HEAP8[$479>>0]|0;
     $481 = $event;
     $482 = ((($481)) + 4|0);
     HEAP8[$482>>0] = $480;
     break;
    }
    case 6:  {
     $483 = $event;
     $484 = ((($483)) + 3|0);
     HEAP8[$484>>0] = 124;
     $485 = ((($ev)) + 2|0);
     $486 = HEAP8[$485>>0]|0;
     $487 = $486&255;
     $488 = $487 << 1;
     $489 = $488&255;
     $490 = $event;
     $491 = ((($490)) + 4|0);
     HEAP8[$491>>0] = $489;
     break;
    }
    case 14:  {
     $513 = ((($ev)) + 2|0);
     $514 = HEAP8[$513>>0]|0;
     $515 = $514&255;
     $516 = ($515|0)==(10);
     if (!($516)) {
      $517 = ((($ev)) + 2|0);
      $518 = HEAP8[$517>>0]|0;
      $519 = $518&255;
      $520 = ($519|0)==(11);
      if (!($520)) {
       $521 = ((($ev)) + 2|0);
       $522 = HEAP8[$521>>0]|0;
       $523 = $522&255;
       $524 = ($523|0)==(12);
       if (!($524)) {
        $527 = ((($ev)) + 2|0);
        $528 = HEAP8[$527>>0]|0;
        $529 = $528&255;
        $530 = $529 & 240;
        $531 = $530 >> 4;
        switch ($531|0) {
        case 2:  {
         $542 = $event;
         $543 = ((($542)) + 3|0);
         HEAP8[$543>>0] = 14;
         $544 = ((($ev)) + 2|0);
         $545 = HEAP8[$544>>0]|0;
         $546 = $545&255;
         $547 = $546 & 15;
         $548 = 208 | $547;
         $549 = $548&255;
         $550 = $event;
         $551 = ((($550)) + 4|0);
         HEAP8[$551>>0] = $549;
         break L70;
         break;
        }
        case 1:  {
         $532 = $event;
         $533 = ((($532)) + 3|0);
         HEAP8[$533>>0] = 14;
         $534 = ((($ev)) + 2|0);
         $535 = HEAP8[$534>>0]|0;
         $536 = $535&255;
         $537 = $536 & 15;
         $538 = 192 | $537;
         $539 = $538&255;
         $540 = $event;
         $541 = ((($540)) + 4|0);
         HEAP8[$541>>0] = $539;
         break L70;
         break;
        }
        case 14:  {
         $562 = $event;
         $563 = ((($562)) + 3|0);
         HEAP8[$563>>0] = 8;
         $564 = ((($ev)) + 2|0);
         $565 = HEAP8[$564>>0]|0;
         $566 = $565&255;
         $567 = $566 & 15;
         $568 = $567 << 4;
         $569 = (8 + ($568))|0;
         $570 = $569&255;
         $571 = $event;
         $572 = ((($571)) + 4|0);
         HEAP8[$572>>0] = $570;
         break L70;
         break;
        }
        case 13:  {
         $552 = $event;
         $553 = ((($552)) + 3|0);
         HEAP8[$553>>0] = 14;
         $554 = ((($ev)) + 2|0);
         $555 = HEAP8[$554>>0]|0;
         $556 = $555&255;
         $557 = $556 & 15;
         $558 = 144 | $557;
         $559 = $558&255;
         $560 = $event;
         $561 = ((($560)) + 4|0);
         HEAP8[$561>>0] = $559;
         break L70;
         break;
        }
        case 15:  {
         $573 = $event;
         $574 = ((($573)) + 3|0);
         HEAP8[$574>>0] = 15;
         $575 = ((($ev)) + 2|0);
         $576 = HEAP8[$575>>0]|0;
         $577 = $576&255;
         $578 = $577 & 15;
         $579 = $578&255;
         $580 = $event;
         $581 = ((($580)) + 4|0);
         HEAP8[$581>>0] = $579;
         break L70;
         break;
        }
        default: {
         break L70;
        }
        }
       }
      }
     }
     $525 = $event;
     $526 = ((($525)) + 3|0);
     HEAP8[$526>>0] = 127;
     break;
    }
    case 11:  {
     $501 = $event;
     $502 = ((($501)) + 3|0);
     HEAP8[$502>>0] = 0;
     $503 = ((($ev)) + 2|0);
     $504 = HEAP8[$503>>0]|0;
     $505 = $event;
     $506 = ((($505)) + 4|0);
     HEAP8[$506>>0] = $504;
     break;
    }
    case 2:  {
     $471 = $event;
     $472 = ((($471)) + 3|0);
     HEAP8[$472>>0] = 122;
     $473 = ((($ev)) + 2|0);
     $474 = HEAP8[$473>>0]|0;
     $475 = $event;
     $476 = ((($475)) + 4|0);
     HEAP8[$476>>0] = $474;
     break;
    }
    case 1:  {
     $465 = $event;
     $466 = ((($465)) + 3|0);
     HEAP8[$466>>0] = 120;
     $467 = ((($ev)) + 2|0);
     $468 = HEAP8[$467>>0]|0;
     $469 = $event;
     $470 = ((($469)) + 4|0);
     HEAP8[$470>>0] = $468;
     break;
    }
    case 0:  {
     $459 = $event;
     $460 = ((($459)) + 3|0);
     HEAP8[$460>>0] = 121;
     $461 = ((($ev)) + 2|0);
     $462 = HEAP8[$461>>0]|0;
     $463 = $event;
     $464 = ((($463)) + 4|0);
     HEAP8[$464>>0] = $462;
     break;
    }
    case 7:  {
     $492 = $event;
     $493 = ((($492)) + 3|0);
     HEAP8[$493>>0] = 125;
     $494 = ((($ev)) + 2|0);
     $495 = HEAP8[$494>>0]|0;
     $496 = $495&255;
     $497 = $496 << 1;
     $498 = $497&255;
     $499 = $event;
     $500 = ((($499)) + 4|0);
     HEAP8[$500>>0] = $498;
     break;
    }
    default: {
    }
    }
   } while(0);
   $582 = $j;
   $583 = (($582) + 1)|0;
   $j = $583;
  }
  $584 = $i;
  $585 = (($584) + 1)|0;
  $i = $585;
 }
 if ((label|0) == 44) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $586 = $i;
  $587 = $mod;
  $588 = ((($587)) + 140|0);
  $589 = HEAP32[$588>>2]|0;
  $590 = ($586|0)<($589|0);
  if (!($590)) {
   break;
  }
  $591 = $i;
  $592 = $mod;
  $593 = ((($592)) + 180|0);
  $594 = HEAP32[$593>>2]|0;
  $595 = (($594) + (($591*52)|0)|0);
  $596 = ((($595)) + 32|0);
  $597 = HEAP32[$596>>2]|0;
  $598 = ($597|0)<=(2);
  if (!($598)) {
   $599 = $1;
   $600 = $2;
   $601 = $i;
   $602 = $mod;
   $603 = ((($602)) + 180|0);
   $604 = HEAP32[$603>>2]|0;
   $605 = (($604) + (($601*52)|0)|0);
   $606 = (_load_sample($599,$600,0,$605,0)|0);
   $607 = ($606|0)<(0);
   if ($607) {
    label = 74;
    break;
   }
  }
  $608 = $i;
  $609 = (($608) + 1)|0;
  $i = $609;
 }
 if ((label|0) == 74) {
  $0 = -1;
  $625 = $0;
  STACKTOP = sp;return ($625|0);
 }
 $i = 0;
 while(1) {
  $610 = $i;
  $611 = $mod;
  $612 = ((($611)) + 136|0);
  $613 = HEAP32[$612>>2]|0;
  $614 = ($610|0)<($613|0);
  if (!($614)) {
   break;
  }
  $615 = $i;
  $616 = $mod;
  $617 = ((($616)) + 184|0);
  $618 = (($617) + (($615*12)|0)|0);
  HEAP32[$618>>2] = 128;
  $619 = $i;
  $620 = (($619) + 1)|0;
  $i = $620;
 }
 $621 = $1;
 $622 = ((($621)) + 1268|0);
 HEAP32[$622>>2] = 255;
 $623 = $1;
 $624 = ((($623)) + 1284|0);
 HEAP32[$624>>2] = 64;
 $0 = 0;
 $625 = $0;
 STACKTOP = sp;return ($625|0);
}
function _ice_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1464)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $magic = $8;
 $9 = $magic;
 $10 = ($9|0)!=(1297370624);
 $11 = $magic;
 $12 = ($11|0)!=(1230254384);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $1;
  $14 = $3;
  $15 = (($14) + 0)|0;
  (_hio_seek($13,$15,0)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,28);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _ice_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ev = 0, $event = 0, $i = 0, $ih = 0, $j = 0, $mod = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ih = sp + 20|0;
 $ev = sp + 1520|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($ih,20,1,$7)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = ((($ih)) + 20|0);
  $12 = (($11) + (($10*30)|0)|0);
  $13 = $2;
  (_hio_read($12,22,1,$13)|0);
  $14 = $2;
  $15 = (_hio_read16b($14)|0);
  $16 = $i;
  $17 = ((($ih)) + 20|0);
  $18 = (($17) + (($16*30)|0)|0);
  $19 = ((($18)) + 22|0);
  HEAP16[$19>>1] = $15;
  $20 = $2;
  $21 = (_hio_read8($20)|0);
  $22 = $i;
  $23 = ((($ih)) + 20|0);
  $24 = (($23) + (($22*30)|0)|0);
  $25 = ((($24)) + 24|0);
  HEAP8[$25>>0] = $21;
  $26 = $2;
  $27 = (_hio_read8($26)|0);
  $28 = $i;
  $29 = ((($ih)) + 20|0);
  $30 = (($29) + (($28*30)|0)|0);
  $31 = ((($30)) + 25|0);
  HEAP8[$31>>0] = $27;
  $32 = $2;
  $33 = (_hio_read16b($32)|0);
  $34 = $i;
  $35 = ((($ih)) + 20|0);
  $36 = (($35) + (($34*30)|0)|0);
  $37 = ((($36)) + 26|0);
  HEAP16[$37>>1] = $33;
  $38 = $2;
  $39 = (_hio_read16b($38)|0);
  $40 = $i;
  $41 = ((($ih)) + 20|0);
  $42 = (($41) + (($40*30)|0)|0);
  $43 = ((($42)) + 28|0);
  HEAP16[$43>>1] = $39;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $2;
 $47 = (_hio_read8($46)|0);
 $48 = ((($ih)) + 950|0);
 HEAP8[$48>>0] = $47;
 $49 = $2;
 $50 = (_hio_read8($49)|0);
 $51 = ((($ih)) + 951|0);
 HEAP8[$51>>0] = $50;
 $52 = ((($ih)) + 952|0);
 $53 = $2;
 (_hio_read($52,512,1,$53)|0);
 $54 = $2;
 $55 = (_hio_read32b($54)|0);
 $56 = ((($ih)) + 1464|0);
 HEAP32[$56>>2] = $55;
 $57 = ((($ih)) + 950|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ($59|0)>(128);
 if ($60) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $i = 0;
 L9: while(1) {
  $61 = $i;
  $62 = ((($ih)) + 950|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($61|0)<($64|0);
  if (!($65)) {
   break;
  }
  $j = 0;
  while(1) {
   $66 = $j;
   $67 = ($66|0)<(4);
   if (!($67)) {
    break;
   }
   $68 = $j;
   $69 = $i;
   $70 = ((($ih)) + 952|0);
   $71 = (($70) + ($69<<2)|0);
   $72 = (($71) + ($68)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   $75 = ((($ih)) + 951|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = ($74|0)>=($77|0);
   if ($78) {
    label = 11;
    break L9;
   }
   $79 = $j;
   $80 = (($79) + 1)|0;
   $j = $80;
  }
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 if ((label|0) == 11) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $83 = ((($ih)) + 1464|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(1230254384);
 do {
  if ($85) {
   $86 = $1;
   _set_type($86,5168,$vararg_buffer);
  } else {
   $87 = ((($ih)) + 1464|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(1297370624);
   if ($89) {
    $90 = $1;
    _set_type($90,5184,$vararg_buffer1);
    break;
   }
   $0 = -1;
   $332 = $0;
   STACKTOP = sp;return ($332|0);
  }
 } while(0);
 $91 = $mod;
 $92 = ((($91)) + 140|0);
 HEAP32[$92>>2] = 31;
 $93 = $mod;
 $94 = ((($93)) + 140|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $mod;
 $97 = ((($96)) + 144|0);
 HEAP32[$97>>2] = $95;
 $98 = ((($ih)) + 950|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = $mod;
 $102 = ((($101)) + 128|0);
 HEAP32[$102>>2] = $100;
 $103 = ((($ih)) + 950|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = $mod;
 $107 = ((($106)) + 156|0);
 HEAP32[$107>>2] = $105;
 $108 = ((($ih)) + 951|0);
 $109 = HEAP8[$108>>0]|0;
 $110 = $109&255;
 $111 = $mod;
 $112 = ((($111)) + 132|0);
 HEAP32[$112>>2] = $110;
 $113 = $mod;
 (_strncpy(($113|0),($ih|0),20)|0);
 $114 = $mod;
 $115 = (_instrument_init($114)|0);
 $116 = ($115|0)<(0);
 if ($116) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $i = 0;
 while(1) {
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 140|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($117|0)<($120|0);
  $122 = $mod;
  if (!($121)) {
   break;
  }
  $123 = $i;
  $124 = (_subinstrument_alloc($122,$123,1)|0);
  $125 = ($124|0)<(0);
  if ($125) {
   label = 24;
   break;
  }
  $126 = $i;
  $127 = $mod;
  $128 = ((($127)) + 176|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + (($126*764)|0)|0);
  $xxi = $130;
  $131 = $i;
  $132 = $mod;
  $133 = ((($132)) + 180|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + (($131*52)|0)|0);
  $xxs = $135;
  $136 = $i;
  $137 = ((($ih)) + 20|0);
  $138 = (($137) + (($136*30)|0)|0);
  $139 = ((($138)) + 22|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140&65535;
  $142 = $141<<1;
  $143 = $xxs;
  $144 = ((($143)) + 32|0);
  HEAP32[$144>>2] = $142;
  $145 = $i;
  $146 = ((($ih)) + 20|0);
  $147 = (($146) + (($145*30)|0)|0);
  $148 = ((($147)) + 26|0);
  $149 = HEAP16[$148>>1]|0;
  $150 = $149&65535;
  $151 = $150<<1;
  $152 = $xxs;
  $153 = ((($152)) + 36|0);
  HEAP32[$153>>2] = $151;
  $154 = $xxs;
  $155 = ((($154)) + 36|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $i;
  $158 = ((($ih)) + 20|0);
  $159 = (($158) + (($157*30)|0)|0);
  $160 = ((($159)) + 28|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = $161&65535;
  $163 = $162<<1;
  $164 = (($156) + ($163))|0;
  $165 = $xxs;
  $166 = ((($165)) + 40|0);
  HEAP32[$166>>2] = $164;
  $167 = $i;
  $168 = ((($ih)) + 20|0);
  $169 = (($168) + (($167*30)|0)|0);
  $170 = ((($169)) + 28|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = $171&65535;
  $173 = ($172|0)>(1);
  $174 = $173 ? 2 : 0;
  $175 = $xxs;
  $176 = ((($175)) + 44|0);
  HEAP32[$176>>2] = $174;
  $177 = $i;
  $178 = ((($ih)) + 20|0);
  $179 = (($178) + (($177*30)|0)|0);
  $180 = ((($179)) + 25|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $xxi;
  $184 = ((($183)) + 756|0);
  $185 = HEAP32[$184>>2]|0;
  HEAP32[$185>>2] = $182;
  $186 = $xxi;
  $187 = ((($186)) + 756|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ((($188)) + 8|0);
  HEAP32[$189>>2] = 128;
  $190 = $i;
  $191 = $xxi;
  $192 = ((($191)) + 756|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ((($193)) + 40|0);
  HEAP32[$194>>2] = $190;
  $195 = $xxs;
  $196 = ((($195)) + 32|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)>(0);
  if ($198) {
   $199 = $xxi;
   $200 = ((($199)) + 36|0);
   HEAP32[$200>>2] = 1;
  }
  $201 = $i;
  $202 = (($201) + 1)|0;
  $i = $202;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $203 = (_pattern_init($122)|0);
 $204 = ($203|0)<(0);
 if ($204) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $i = 0;
 while(1) {
  $205 = $i;
  $206 = $mod;
  $207 = ((($206)) + 128|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = ($205|0)<($208|0);
  if (!($209)) {
   break;
  }
  $210 = $mod;
  $211 = $i;
  $212 = (_pattern_alloc($210,$211)|0);
  $213 = ($212|0)<(0);
  if ($213) {
   label = 33;
   break;
  }
  $214 = $i;
  $215 = $mod;
  $216 = ((($215)) + 168|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($214<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  HEAP32[$219>>2] = 64;
  $j = 0;
  while(1) {
   $220 = $j;
   $221 = $mod;
   $222 = ((($221)) + 136|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = ($220|0)<($223|0);
   if (!($224)) {
    break;
   }
   $225 = $j;
   $226 = $i;
   $227 = ((($ih)) + 952|0);
   $228 = (($227) + ($226<<2)|0);
   $229 = (($228) + ($225)|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = $j;
   $233 = $i;
   $234 = $mod;
   $235 = ((($234)) + 168|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (($236) + ($233<<2)|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = ((($238)) + 4|0);
   $240 = (($239) + ($232<<2)|0);
   HEAP32[$240>>2] = $231;
   $241 = $j;
   $242 = (($241) + 1)|0;
   $j = $242;
  }
  $243 = $i;
  $244 = $243&255;
  $245 = $i;
  $246 = $mod;
  $247 = ((($246)) + 952|0);
  $248 = (($247) + ($245)|0);
  HEAP8[$248>>0] = $244;
  $249 = $i;
  $250 = (($249) + 1)|0;
  $i = $250;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $i = 0;
 while(1) {
  $251 = $i;
  $252 = $mod;
  $253 = ((($252)) + 132|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ($251|0)<($254|0);
  if (!($255)) {
   break;
  }
  $256 = $mod;
  $257 = $i;
  $258 = (_track_alloc($256,$257,64)|0);
  $259 = ($258|0)<(0);
  if ($259) {
   label = 41;
   break;
  }
  $j = 0;
  while(1) {
   $260 = $j;
   $261 = $i;
   $262 = $mod;
   $263 = ((($262)) + 172|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = (($264) + ($261<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = HEAP32[$266>>2]|0;
   $268 = ($260|0)<($267|0);
   if (!($268)) {
    break;
   }
   $269 = $j;
   $270 = $i;
   $271 = $mod;
   $272 = ((($271)) + 172|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = (($273) + ($270<<2)|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ((($275)) + 4|0);
   $277 = (($276) + ($269<<3)|0);
   $event = $277;
   $278 = $2;
   (_hio_read($ev,1,4,$278)|0);
   $279 = $event;
   _decode_protracker_event($279,$ev);
   $280 = $event;
   $281 = ((($280)) + 3|0);
   $282 = HEAP8[$281>>0]|0;
   $283 = $282&255;
   $284 = ($283|0)==(15);
   if ($284) {
    $285 = $event;
    $286 = ((($285)) + 4|0);
    $287 = HEAP8[$286>>0]|0;
    $288 = $287&255;
    $289 = $288 & 240;
    $290 = $289 >> 4;
    $291 = ($290|0)!=(0);
    if ($291) {
     $292 = $event;
     $293 = ((($292)) + 4|0);
     $294 = HEAP8[$293>>0]|0;
     $295 = $294&255;
     $296 = $295 & 15;
     $297 = ($296|0)!=(0);
     if ($297) {
      $298 = $event;
      $299 = ((($298)) + 3|0);
      HEAP8[$299>>0] = -94;
     }
    }
   }
   $300 = $j;
   $301 = (($300) + 1)|0;
   $j = $301;
  }
  $302 = $i;
  $303 = (($302) + 1)|0;
  $i = $303;
 }
 if ((label|0) == 41) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 $304 = $1;
 $305 = ((($304)) + 1284|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = $306 | 8192;
 HEAP32[$305>>2] = $307;
 $i = 0;
 while(1) {
  $308 = $i;
  $309 = $mod;
  $310 = ((($309)) + 140|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = ($308|0)<($311|0);
  if (!($312)) {
   label = 56;
   break;
  }
  $313 = $i;
  $314 = $mod;
  $315 = ((($314)) + 180|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = (($316) + (($313*52)|0)|0);
  $318 = ((($317)) + 32|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = ($319|0)<=(4);
  if (!($320)) {
   $321 = $1;
   $322 = $2;
   $323 = $i;
   $324 = $mod;
   $325 = ((($324)) + 180|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = (($326) + (($323*52)|0)|0);
   $328 = (_load_sample($321,$322,0,$327,0)|0);
   $329 = ($328|0)<(0);
   if ($329) {
    label = 54;
    break;
   }
  }
  $330 = $i;
  $331 = (($330) + 1)|0;
  $i = $331;
 }
 if ((label|0) == 54) {
  $0 = -1;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 else if ((label|0) == 56) {
  $0 = 0;
  $332 = $0;
  STACKTOP = sp;return ($332|0);
 }
 return (0)|0;
}
function _hsc_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $buf = 0, $c = 0, $i = 0, $m = 0, $n = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 (_hio_seek($4,1536,1)|0);
 $5 = $1;
 $6 = (_hio_read($buf,1,51,$5)|0);
 $7 = ($6|0)!=(51);
 if ($7) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 $p = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(51);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = (($buf) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)==(255);
  if ($14) {
   break;
  }
  $15 = $i;
  $16 = (($buf) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $p;
  $20 = ($18|0)>($19|0);
  if ($20) {
   $21 = $i;
   $22 = (($buf) + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $p = $24;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 $27 = $i;
 $28 = ($27|0)!=(0);
 $29 = $p;
 $30 = ($29|0)!=(0);
 $or$cond = $28 & $30;
 $or$cond$not = $or$cond ^ 1;
 $31 = $i;
 $32 = ($31|0)>(50);
 $or$cond3 = $or$cond$not | $32;
 $33 = $p;
 $34 = ($33|0)>(50);
 $or$cond5 = $or$cond3 | $34;
 if ($or$cond5) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 L17: while(1) {
  $35 = $i;
  $36 = $p;
  $37 = ($35|0)<($36|0);
  if (!($37)) {
   label = 27;
   break;
  }
  $38 = $1;
  (_hio_read($buf,1,1152,$38)|0);
  $r = 0;
  while(1) {
   $39 = $r;
   $40 = ($39|0)<(64);
   if (!($40)) {
    break;
   }
   $c = 0;
   while(1) {
    $41 = $c;
    $42 = ($41|0)<(9);
    $43 = $r;
    if (!($42)) {
     break;
    }
    $44 = ($43*9)|0;
    $45 = $44<<1;
    $46 = $c;
    $47 = $46<<1;
    $48 = (($45) + ($47))|0;
    $49 = (($buf) + ($48)|0);
    $50 = HEAP8[$49>>0]|0;
    $n = $50;
    $51 = $r;
    $52 = ($51*9)|0;
    $53 = $52<<1;
    $54 = $c;
    $55 = $54<<1;
    $56 = (($53) + ($55))|0;
    $57 = (($56) + 1)|0;
    $58 = (($buf) + ($57)|0);
    $59 = HEAP8[$58>>0]|0;
    $m = $59;
    $60 = $m;
    $61 = $60&255;
    $62 = ($61|0)>(6);
    if ($62) {
     $63 = $m;
     $64 = $63&255;
     $65 = ($64|0)<(16);
     if ($65) {
      $66 = $n;
      $67 = $66&255;
      $68 = ($67|0)!=(128);
      if ($68) {
       label = 20;
       break L17;
      }
     }
    }
    $69 = $m;
    $70 = $69&255;
    $71 = $70 & 240;
    $72 = $71 >> 4;
    $73 = ($72|0)>(6);
    if ($73) {
     $74 = $m;
     $75 = $74&255;
     $76 = $75 & 240;
     $77 = $76 >> 4;
     $78 = ($77|0)<(10);
     if ($78) {
      label = 23;
      break L17;
     }
    }
    $79 = $c;
    $80 = (($79) + 1)|0;
    $c = $80;
   }
   $81 = (($43) + 1)|0;
   $r = $81;
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 if ((label|0) == 20) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 23) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 27) {
  $84 = $1;
  $85 = $2;
  _read_title($84,$85,0);
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _hsc_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $buf = 0, $c = 0, $e = 0, $event = 0, $i = 0, $ins = 0, $mod = 0, $pat = 0, $r = 0, $sid = 0, $vararg_buffer = 0, $x = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $e = sp + 1624|0;
 $buf = sp + 88|0;
 $ins = sp + 4|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($buf,1,1536,$7)|0);
 $x = $buf;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(128);
  if (!($9)) {
   break;
  }
  $10 = $x;
  $11 = ((($10)) + 9|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & -4;
  $15 = ($14|0)!=(0);
  if ($15) {
   break;
  }
  $16 = $x;
  $17 = ((($16)) + 10|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $19 & -4;
  $21 = ($20|0)!=(0);
  if ($21) {
   break;
  }
  $22 = $x;
  $23 = ((($22)) + 8|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 & -16;
  $27 = ($26|0)!=(0);
  if ($27) {
   break;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
  $30 = $x;
  $31 = ((($30)) + 12|0);
  $x = $31;
 }
 $32 = $i;
 $33 = $mod;
 $34 = ((($33)) + 140|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 $36 = $3;
 $37 = (($36) + 0)|0;
 (_hio_seek($35,$37,0)|0);
 $38 = $mod;
 $39 = ((($38)) + 136|0);
 HEAP32[$39>>2] = 9;
 $40 = $mod;
 $41 = ((($40)) + 152|0);
 HEAP32[$41>>2] = 135;
 $42 = $mod;
 $43 = ((($42)) + 148|0);
 HEAP32[$43>>2] = 6;
 $44 = $mod;
 $45 = ((($44)) + 140|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $mod;
 $48 = ((($47)) + 144|0);
 HEAP32[$48>>2] = $46;
 $49 = $1;
 $50 = ((($49)) + 1284|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 | 4096;
 HEAP32[$50>>2] = $52;
 $53 = $1;
 _set_type($53,5224,$vararg_buffer);
 $54 = $mod;
 $55 = (_instrument_init($54)|0);
 $56 = ($55|0)<(0);
 if ($56) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $57 = $2;
 (_hio_read($buf,1,1536,$57)|0);
 $sid = $buf;
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = $mod;
  $60 = ((($59)) + 140|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($58|0)<($61|0);
  if (!($62)) {
   label = 16;
   break;
  }
  $63 = $mod;
  $64 = $i;
  $65 = (_subinstrument_alloc($63,$64,1)|0);
  $66 = ($65|0)<(0);
  if ($66) {
   label = 12;
   break;
  }
  $67 = $i;
  $68 = $mod;
  $69 = ((($68)) + 176|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + (($67*764)|0)|0);
  $72 = ((($71)) + 36|0);
  HEAP32[$72>>2] = 1;
  $73 = $i;
  $74 = $mod;
  $75 = ((($74)) + 176|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + (($73*764)|0)|0);
  $78 = ((($77)) + 756|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$79>>2] = 64;
  $80 = $sid;
  $81 = ((($80)) + 11|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = (($83|0) / 4)&-1;
  $85 = $i;
  $86 = $mod;
  $87 = ((($86)) + 176|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + (($85*764)|0)|0);
  $90 = ((($89)) + 756|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($91)) + 16|0);
  HEAP32[$92>>2] = $84;
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ((($99)) + 8|0);
  HEAP32[$100>>2] = 128;
  $101 = $i;
  $102 = $mod;
  $103 = ((($102)) + 176|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + (($101*764)|0)|0);
  $106 = ((($105)) + 756|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($107)) + 12|0);
  HEAP32[$108>>2] = 0;
  $109 = $i;
  $110 = $i;
  $111 = $mod;
  $112 = ((($111)) + 176|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + (($110*764)|0)|0);
  $115 = ((($114)) + 756|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($116)) + 40|0);
  HEAP32[$117>>2] = $109;
  $118 = $sid;
  $119 = ((($118)) + 7|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $121 & 15;
  $123 = $122<<5;
  $124 = $i;
  $125 = $mod;
  $126 = ((($125)) + 176|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + (($124*764)|0)|0);
  $129 = ((($128)) + 40|0);
  HEAP32[$129>>2] = $123;
  $130 = $1;
  $131 = $2;
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 180|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + (($132*52)|0)|0);
  $137 = $sid;
  $138 = (_load_sample($130,$131,12288,$136,$137)|0);
  $139 = ($138|0)<(0);
  if ($139) {
   label = 14;
   break;
  }
  $140 = $i;
  $141 = (($140) + 1)|0;
  $i = $141;
  $142 = $sid;
  $143 = ((($142)) + 12|0);
  $sid = $143;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 else if ((label|0) == 16) {
  $i = 0;
  $pat = 0;
  while(1) {
   $144 = $i;
   $145 = ($144|0)<(51);
   if (!($145)) {
    break;
   }
   $146 = $i;
   $147 = $mod;
   $148 = ((($147)) + 952|0);
   $149 = (($148) + ($146)|0);
   $150 = $2;
   (_hio_read($149,1,1,$150)|0);
   $151 = $i;
   $152 = $mod;
   $153 = ((($152)) + 952|0);
   $154 = (($153) + ($151)|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = $156 & 128;
   $158 = ($157|0)!=(0);
   if ($158) {
    break;
   }
   $159 = $i;
   $160 = $mod;
   $161 = ((($160)) + 952|0);
   $162 = (($161) + ($159)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = $pat;
   $166 = ($164|0)>($165|0);
   if ($166) {
    $167 = $i;
    $168 = $mod;
    $169 = ((($168)) + 952|0);
    $170 = (($169) + ($167)|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $pat = $172;
   }
   $173 = $i;
   $174 = (($173) + 1)|0;
   $i = $174;
  }
  $175 = $2;
  $176 = $i;
  $177 = (50 - ($176))|0;
  (_hio_seek($175,$177,1)|0);
  $178 = $i;
  $179 = $mod;
  $180 = ((($179)) + 156|0);
  HEAP32[$180>>2] = $178;
  $181 = $pat;
  $182 = (($181) + 1)|0;
  $183 = $mod;
  $184 = ((($183)) + 128|0);
  HEAP32[$184>>2] = $182;
  $185 = $mod;
  $186 = ((($185)) + 128|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $mod;
  $189 = ((($188)) + 136|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = Math_imul($187, $190)|0;
  $192 = $mod;
  $193 = ((($192)) + 132|0);
  HEAP32[$193>>2] = $191;
  $194 = $mod;
  $195 = (_pattern_init($194)|0);
  $196 = ($195|0)<(0);
  if ($196) {
   $0 = -1;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
  }
  $i = 0;
  while(1) {
   $197 = $i;
   $198 = $mod;
   $199 = ((($198)) + 128|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($197|0)<($200|0);
   if (!($201)) {
    break;
   }
   dest=$ins; src=5240; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $202 = $mod;
   $203 = $i;
   $204 = (_pattern_tracks_alloc($202,$203,64)|0);
   $205 = ($204|0)<(0);
   if ($205) {
    label = 27;
    break;
   }
   $r = 0;
   while(1) {
    $206 = $r;
    $207 = $i;
    $208 = $mod;
    $209 = ((($208)) + 168|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = (($210) + ($207<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = HEAP32[$212>>2]|0;
    $214 = ($206|0)<($213|0);
    if (!($214)) {
     break;
    }
    $c = 0;
    while(1) {
     $215 = $c;
     $216 = ($215|0)<(9);
     if (!($216)) {
      break;
     }
     $217 = $2;
     (_hio_read($e,1,2,$217)|0);
     $218 = $r;
     $219 = $c;
     $220 = $i;
     $221 = $1;
     $222 = ((($221)) + 168|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (($223) + ($220<<2)|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ((($225)) + 4|0);
     $227 = (($226) + ($219<<2)|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = $1;
     $230 = ((($229)) + 172|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = (($231) + ($228<<2)|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ((($233)) + 4|0);
     $235 = (($234) + ($218<<3)|0);
     $event = $235;
     $236 = HEAP8[$e>>0]|0;
     $237 = $236&255;
     $238 = $237 & 128;
     $239 = ($238|0)!=(0);
     do {
      if ($239) {
       $240 = ((($e)) + 1|0);
       $241 = HEAP8[$240>>0]|0;
       $242 = $241&255;
       $243 = (($242) + 1)|0;
       $244 = $c;
       $245 = (($ins) + ($244<<2)|0);
       HEAP32[$245>>2] = $243;
      } else {
       $246 = HEAP8[$e>>0]|0;
       $247 = $246&255;
       $248 = ($247|0)==(127);
       if ($248) {
        $249 = $event;
        HEAP8[$249>>0] = -127;
        break;
       }
       $250 = HEAP8[$e>>0]|0;
       $251 = $250&255;
       $252 = ($251|0)>(0);
       if ($252) {
        $253 = HEAP8[$e>>0]|0;
        $254 = $253&255;
        $255 = (($254) + 25)|0;
        $256 = $255&255;
        $257 = $event;
        HEAP8[$257>>0] = $256;
        $258 = $c;
        $259 = (($ins) + ($258<<2)|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260&255;
        $262 = $event;
        $263 = ((($262)) + 1|0);
        HEAP8[$263>>0] = $261;
       }
      }
     } while(0);
     $264 = $event;
     $265 = ((($264)) + 3|0);
     HEAP8[$265>>0] = 0;
     $266 = $event;
     $267 = ((($266)) + 4|0);
     HEAP8[$267>>0] = 0;
     $268 = ((($e)) + 1|0);
     $269 = HEAP8[$268>>0]|0;
     $270 = $269&255;
     $271 = ($270|0)==(1);
     if ($271) {
      $272 = $event;
      $273 = ((($272)) + 3|0);
      HEAP8[$273>>0] = 13;
      $274 = $event;
      $275 = ((($274)) + 4|0);
      HEAP8[$275>>0] = 0;
     }
     $276 = $c;
     $277 = (($276) + 1)|0;
     $c = $277;
    }
    $278 = $r;
    $279 = (($278) + 1)|0;
    $r = $279;
   }
   $280 = $i;
   $281 = (($280) + 1)|0;
   $i = $281;
  }
  if ((label|0) == 27) {
   $0 = -1;
   $300 = $0;
   STACKTOP = sp;return ($300|0);
  }
  $i = 0;
  while(1) {
   $282 = $i;
   $283 = $mod;
   $284 = ((($283)) + 136|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($282|0)<($285|0);
   if (!($286)) {
    break;
   }
   $287 = $i;
   $288 = $mod;
   $289 = ((($288)) + 184|0);
   $290 = (($289) + (($287*12)|0)|0);
   HEAP32[$290>>2] = 128;
   $291 = $i;
   $292 = $mod;
   $293 = ((($292)) + 184|0);
   $294 = (($293) + (($291*12)|0)|0);
   $295 = ((($294)) + 8|0);
   HEAP32[$295>>2] = 1;
   $296 = $i;
   $297 = (($296) + 1)|0;
   $i = $297;
  }
  $298 = $1;
  $299 = ((($298)) + 7584|0);
  HEAP32[$299>>2] = 22896;
  $0 = 0;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 return (0)|0;
}
function _liq_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,14,$4)|0);
 $6 = ($5>>>0)<(14);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,5344,14)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,30);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _liq_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $channel = 0, $count = 0, $event = 0, $i = 0, $lh = 0, $li = 0, $lp = 0, $mod = 0, $pan = 0;
 var $pmag = 0, $row = 0, $sub = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $x1 = 0, $x2 = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $lh = sp + 232|0;
 $li = sp + 80|0;
 $lp = sp + 40|0;
 $tracker_name = sp + 377|0;
 $b = sp + 372|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $event = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($lh,14,1,$7)|0);
 $8 = ((($lh)) + 14|0);
 $9 = $2;
 (_hio_read($8,30,1,$9)|0);
 $10 = ((($lh)) + 44|0);
 $11 = $2;
 (_hio_read($10,20,1,$11)|0);
 $12 = $2;
 (_hio_read8($12)|0);
 $13 = ((($lh)) + 65|0);
 $14 = $2;
 (_hio_read($13,20,1,$14)|0);
 $15 = $2;
 $16 = (_hio_read16l($15)|0);
 $17 = ((($lh)) + 86|0);
 HEAP16[$17>>1] = $16;
 $18 = $2;
 $19 = (_hio_read16l($18)|0);
 $20 = ((($lh)) + 88|0);
 HEAP16[$20>>1] = $19;
 $21 = $2;
 $22 = (_hio_read16l($21)|0);
 $23 = ((($lh)) + 90|0);
 HEAP16[$23>>1] = $22;
 $24 = $2;
 $25 = (_hio_read16l($24)|0);
 $26 = ((($lh)) + 92|0);
 HEAP16[$26>>1] = $25;
 $27 = $2;
 $28 = (_hio_read16l($27)|0);
 $29 = ((($lh)) + 94|0);
 HEAP16[$29>>1] = $28;
 $30 = $2;
 $31 = (_hio_read16l($30)|0);
 $32 = ((($lh)) + 96|0);
 HEAP16[$32>>1] = $31;
 $33 = $2;
 $34 = (_hio_read32l($33)|0);
 $35 = ((($lh)) + 100|0);
 HEAP32[$35>>2] = $34;
 $36 = $2;
 $37 = (_hio_read16l($36)|0);
 $38 = ((($lh)) + 104|0);
 HEAP16[$38>>1] = $37;
 $39 = $2;
 $40 = (_hio_read16l($39)|0);
 $41 = ((($lh)) + 106|0);
 HEAP16[$41>>1] = $40;
 $42 = $2;
 $43 = (_hio_read16l($42)|0);
 $44 = ((($lh)) + 108|0);
 HEAP16[$44>>1] = $43;
 $45 = $2;
 $46 = (_hio_read16l($45)|0);
 $47 = ((($lh)) + 110|0);
 HEAP16[$47>>1] = $46;
 $48 = ((($lh)) + 96|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = ($50|0)>(64);
 if (!($51)) {
  $52 = ((($lh)) + 104|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = ($54|0)>(256);
  if (!($55)) {
   $56 = ((($lh)) + 106|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $57&65535;
   $59 = ($58|0)>(256);
   if (!($59)) {
    $60 = ((($lh)) + 86|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61&65535;
    $63 = $62 >> 8;
    $64 = ($63|0)==(0);
    if ($64) {
     $65 = ((($lh)) + 108|0);
     $66 = HEAP16[$65>>1]|0;
     $67 = ((($lh)) + 110|0);
     HEAP16[$67>>1] = $66;
     $68 = ((($lh)) + 108|0);
     HEAP16[$68>>1] = 0;
     $69 = $2;
     (_hio_seek($69,-2,1)|0);
    }
    $70 = ((($lh)) + 108|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $73 = ($72|0)>(256);
    if ($73) {
     $0 = -1;
     $769 = $0;
     STACKTOP = sp;return ($769|0);
    }
    $74 = ((($lh)) + 88|0);
    $75 = HEAP16[$74>>1]|0;
    $76 = $75&65535;
    $77 = $mod;
    $78 = ((($77)) + 148|0);
    HEAP32[$78>>2] = $76;
    $79 = ((($lh)) + 90|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80&65535;
    $82 = $mod;
    $83 = ((($82)) + 152|0);
    HEAP32[$83>>2] = $81;
    $84 = ((($lh)) + 96|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $85&65535;
    $87 = $mod;
    $88 = ((($87)) + 136|0);
    HEAP32[$88>>2] = $86;
    $89 = ((($lh)) + 104|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90&65535;
    $92 = $mod;
    $93 = ((($92)) + 128|0);
    HEAP32[$93>>2] = $91;
    $94 = ((($lh)) + 106|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = $mod;
    $98 = ((($97)) + 144|0);
    HEAP32[$98>>2] = $96;
    $99 = $mod;
    $100 = ((($99)) + 140|0);
    HEAP32[$100>>2] = $96;
    $101 = ((($lh)) + 108|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = $102&65535;
    $104 = $mod;
    $105 = ((($104)) + 156|0);
    HEAP32[$105>>2] = $103;
    $106 = $mod;
    $107 = ((($106)) + 136|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $mod;
    $110 = ((($109)) + 128|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = Math_imul($108, $111)|0;
    $113 = $mod;
    $114 = ((($113)) + 132|0);
    HEAP32[$114>>2] = $112;
    $115 = $1;
    $116 = ((($115)) + 1284|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $117 | 16384;
    HEAP32[$116>>2] = $118;
    $119 = $mod;
    $120 = ((($lh)) + 14|0);
    (_strncpy(($119|0),($120|0),30)|0);
    $121 = ((($lh)) + 65|0);
    (_strncpy(($tracker_name|0),($121|0),20)|0);
    $122 = ((($tracker_name)) + 20|0);
    HEAP8[$122>>0] = 0;
    $i = 20;
    while(1) {
     $123 = $i;
     $124 = ($123|0)>=(0);
     if (!($124)) {
      break;
     }
     $125 = $i;
     $126 = (($tracker_name) + ($125)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127 << 24 >> 24;
     $129 = ($128|0)==(32);
     if ($129) {
      $130 = $i;
      $131 = (($tracker_name) + ($130)|0);
      HEAP8[$131>>0] = 0;
     }
     $132 = $i;
     $133 = (($tracker_name) + ($132)|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = ($134<<24>>24)!=(0);
     if ($135) {
      break;
     }
     $136 = $i;
     $137 = (($136) + -1)|0;
     $i = $137;
    }
    $138 = $mod;
    $139 = ((($138)) + 64|0);
    $140 = ((($lh)) + 86|0);
    $141 = HEAP16[$140>>1]|0;
    $142 = $141&65535;
    $143 = $142 >> 8;
    $144 = ((($lh)) + 86|0);
    $145 = HEAP16[$144>>1]|0;
    $146 = $145&65535;
    $147 = $146 & 255;
    HEAP32[$vararg_buffer>>2] = $tracker_name;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $143;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $147;
    (_snprintf($139,64,5296,$vararg_buffer)|0);
    $148 = ((($lh)) + 86|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = ($150|0)>(0);
    if ($151) {
     $i = 0;
     while(1) {
      $152 = $i;
      $153 = $mod;
      $154 = ((($153)) + 136|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($152|0)<($155|0);
      if (!($156)) {
       break;
      }
      $157 = $2;
      $158 = (_hio_read8($157)|0);
      $pan = $158;
      $159 = $pan;
      $160 = $159&255;
      $161 = ($160|0)>=(64);
      if ($161) {
       label = 19;
       break;
      }
      $162 = $pan;
      $163 = $162&255;
      $164 = $163 << 2;
      $165 = $i;
      $166 = $mod;
      $167 = ((($166)) + 184|0);
      $168 = (($167) + (($165*12)|0)|0);
      HEAP32[$168>>2] = $164;
      $169 = $i;
      $170 = (($169) + 1)|0;
      $i = $170;
     }
     if ((label|0) == 19) {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
     }
     $i = 0;
     while(1) {
      $171 = $i;
      $172 = $mod;
      $173 = ((($172)) + 136|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($171|0)<($174|0);
      if (!($175)) {
       break;
      }
      $176 = $2;
      $177 = (_hio_read8($176)|0);
      $178 = $177&255;
      $179 = $i;
      $180 = $mod;
      $181 = ((($180)) + 184|0);
      $182 = (($181) + (($179*12)|0)|0);
      $183 = ((($182)) + 4|0);
      HEAP32[$183>>2] = $178;
      $184 = $i;
      $185 = (($184) + 1)|0;
      $i = $185;
     }
     $186 = $mod;
     $187 = ((($186)) + 952|0);
     $188 = $mod;
     $189 = ((($188)) + 156|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = $2;
     (_hio_read($187,1,$190,$191)|0);
     $192 = $2;
     $193 = ((($lh)) + 110|0);
     $194 = HEAP16[$193>>1]|0;
     $195 = $194&65535;
     $196 = $mod;
     $197 = ((($196)) + 136|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $198<<1;
     $200 = (109 + ($199))|0;
     $201 = $mod;
     $202 = ((($201)) + 156|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = (($200) + ($203))|0;
     $205 = (($195) - ($204))|0;
     (_hio_seek($192,$205,1)|0);
    } else {
     $206 = $2;
     $207 = $3;
     $208 = (($207) + 240)|0;
     (_hio_seek($206,$208,0)|0);
     $209 = $mod;
     $210 = ((($209)) + 952|0);
     $211 = $2;
     (_hio_read($210,1,256,$211)|0);
     $212 = $2;
     $213 = $3;
     $214 = ((($lh)) + 110|0);
     $215 = HEAP16[$214>>1]|0;
     $216 = $215&65535;
     $217 = (($213) + ($216))|0;
     (_hio_seek($212,$217,0)|0);
     $i = 0;
     while(1) {
      $218 = $i;
      $219 = ($218|0)<(256);
      if (!($219)) {
       break;
      }
      $220 = $i;
      $221 = $mod;
      $222 = ((($221)) + 952|0);
      $223 = (($222) + ($220)|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      $226 = ($225|0)==(255);
      if ($226) {
       break;
      }
      $227 = $i;
      $228 = (($227) + 1)|0;
      $i = $228;
     }
     $229 = $i;
     $230 = $mod;
     $231 = ((($230)) + 156|0);
     HEAP32[$231>>2] = $229;
    }
    $232 = $mod;
    $233 = (_pattern_init($232)|0);
    $234 = ($233|0)<(0);
    if ($234) {
     $0 = -1;
     $769 = $0;
     STACKTOP = sp;return ($769|0);
    }
    $x2 = 0;
    $x1 = 0;
    $i = 0;
    L45: while(1) {
     $235 = $i;
     $236 = $mod;
     $237 = ((($236)) + 128|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ($235|0)<($238|0);
     $240 = $mod;
     if (!($239)) {
      label = 107;
      break;
     }
     $241 = $i;
     $242 = (_pattern_alloc($240,$241)|0);
     $243 = ($242|0)<(0);
     if ($243) {
      label = 35;
      break;
     }
     $244 = $2;
     $245 = (_hio_read32b($244)|0);
     $pmag = $245;
     $246 = $pmag;
     $247 = ($246|0)==(555819297);
     if (!($247)) {
      $248 = $pmag;
      $249 = ($248|0)!=(1280311296);
      if ($249) {
       label = 38;
       break;
      }
      $250 = $2;
      (_hio_read($lp,30,1,$250)|0);
      $251 = $2;
      $252 = (_hio_read16l($251)|0);
      $253 = ((($lp)) + 30|0);
      HEAP16[$253>>1] = $252;
      $254 = $2;
      $255 = (_hio_read32l($254)|0);
      $256 = ((($lp)) + 32|0);
      HEAP32[$256>>2] = $255;
      $257 = $2;
      $258 = (_hio_read32l($257)|0);
      $259 = ((($lp)) + 36|0);
      HEAP32[$259>>2] = $258;
      $260 = ((($lp)) + 30|0);
      $261 = HEAP16[$260>>1]|0;
      $262 = $261&65535;
      $263 = ($262|0)>(256);
      if ($263) {
       label = 40;
       break;
      }
      $264 = ((($lp)) + 30|0);
      $265 = HEAP16[$264>>1]|0;
      $266 = $265&65535;
      $267 = $i;
      $268 = $mod;
      $269 = ((($268)) + 168|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = (($270) + ($267<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      HEAP32[$272>>2] = $266;
      $273 = $mod;
      $274 = $i;
      (_tracks_in_pattern_alloc($273,$274)|0);
      $row = 0;
      $channel = 0;
      $275 = $2;
      $276 = (_hio_tell($275)|0);
      $count = $276;
      L53: while(1) {
       $277 = $i;
       $278 = $mod;
       $279 = ((($278)) + 128|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = ($277|0)>=($280|0);
       if ($281) {
        label = 45;
        break L45;
       }
       $282 = $channel;
       $283 = $mod;
       $284 = ((($283)) + 136|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = ($282|0)>=($285|0);
       if ($286) {
        label = 45;
        break L45;
       }
       $287 = $row;
       $288 = $i;
       $289 = $mod;
       $290 = ((($289)) + 168|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = (($291) + ($288<<2)|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = HEAP32[$293>>2]|0;
       $295 = ($287|0)>=($294|0);
       if ($295) {
        label = 45;
        break L45;
       }
       $296 = $row;
       $297 = $channel;
       $298 = $i;
       $299 = $1;
       $300 = ((($299)) + 168|0);
       $301 = HEAP32[$300>>2]|0;
       $302 = (($301) + ($298<<2)|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = ((($303)) + 4|0);
       $305 = (($304) + ($297<<2)|0);
       $306 = HEAP32[$305>>2]|0;
       $307 = $1;
       $308 = ((($307)) + 172|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = (($309) + ($306<<2)|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = ((($311)) + 4|0);
       $313 = (($312) + ($296<<3)|0);
       $event = $313;
       $314 = $x2;
       $315 = ($314<<24>>24)!=(0);
       L58: do {
        if ($315) {
         $316 = $x1;
         $317 = $event;
         $318 = $2;
         $319 = (_decode_event($316,$317,$318)|0);
         $320 = ($319|0)<(0);
         if ($320) {
          label = 48;
          break L45;
         }
         $321 = $channel;
         $322 = $event;
         _xlat_fx240($321,$322);
         $323 = $x2;
         $324 = (($323) + -1)<<24>>24;
         $x2 = $324;
        } else {
         $325 = $2;
         $326 = (_hio_read8($325)|0);
         $x1 = $326;
         L60: while(1) {
          $327 = $i;
          $328 = $mod;
          $329 = ((($328)) + 128|0);
          $330 = HEAP32[$329>>2]|0;
          $331 = ($327|0)>=($330|0);
          if ($331) {
           label = 54;
           break L45;
          }
          $332 = $channel;
          $333 = $mod;
          $334 = ((($333)) + 136|0);
          $335 = HEAP32[$334>>2]|0;
          $336 = ($332|0)>=($335|0);
          if ($336) {
           label = 54;
           break L45;
          }
          $337 = $row;
          $338 = $i;
          $339 = $mod;
          $340 = ((($339)) + 168|0);
          $341 = HEAP32[$340>>2]|0;
          $342 = (($341) + ($338<<2)|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = HEAP32[$343>>2]|0;
          $345 = ($337|0)>=($344|0);
          if ($345) {
           label = 54;
           break L45;
          }
          $346 = $row;
          $347 = $channel;
          $348 = $i;
          $349 = $1;
          $350 = ((($349)) + 168|0);
          $351 = HEAP32[$350>>2]|0;
          $352 = (($351) + ($348<<2)|0);
          $353 = HEAP32[$352>>2]|0;
          $354 = ((($353)) + 4|0);
          $355 = (($354) + ($347<<2)|0);
          $356 = HEAP32[$355>>2]|0;
          $357 = $1;
          $358 = ((($357)) + 172|0);
          $359 = HEAP32[$358>>2]|0;
          $360 = (($359) + ($356<<2)|0);
          $361 = HEAP32[$360>>2]|0;
          $362 = ((($361)) + 4|0);
          $363 = (($362) + ($346<<3)|0);
          $event = $363;
          $364 = $x1;
          $365 = $364&255;
          switch ($365|0) {
          case 128:  {
           break L58;
           break;
          }
          case 224:  {
           label = 62;
           break L60;
           break;
          }
          case 160:  {
           break L60;
           break;
          }
          case 225:  {
           label = 58;
           break L60;
           break;
          }
          case 192:  {
           break L53;
           break;
          }
          default: {
          }
          }
          $394 = $x1;
          $395 = $394&255;
          $396 = ($395|0)>(192);
          if ($396) {
           $397 = $x1;
           $398 = $397&255;
           $399 = ($398|0)<(224);
           if ($399) {
            label = 65;
            break;
           }
          }
          $407 = $x1;
          $408 = $407&255;
          $409 = ($408|0)>(160);
          if ($409) {
           $410 = $x1;
           $411 = $410&255;
           $412 = ($411|0)<(192);
           if ($412) {
            label = 70;
            break;
           }
          }
          $422 = $x1;
          $423 = $422&255;
          $424 = ($423|0)>(128);
          if ($424) {
           $425 = $x1;
           $426 = $425&255;
           $427 = ($426|0)<(160);
           if ($427) {
            label = 75;
            break;
           }
          }
          $467 = $x1;
          $468 = $467&255;
          $469 = ($468|0)!=(255);
          $470 = $x1;
          $471 = $470&255;
          do {
           if ($469) {
            $472 = (37 + ($471))|0;
            $473 = $472&255;
            $474 = $event;
            HEAP8[$474>>0] = $473;
           } else {
            $475 = ($471|0)==(254);
            if (!($475)) {
             break;
            }
            $476 = $event;
            HEAP8[$476>>0] = -127;
           }
          } while(0);
          $477 = $2;
          $478 = (_hio_read8($477)|0);
          $x1 = $478;
          $479 = $x1;
          $480 = $479&255;
          $481 = ($480|0)>(100);
          if (!($481)) {
           label = 88;
           break;
          }
          $482 = $row;
          $483 = (($482) + 1)|0;
          $row = $483;
         }
         if ((label|0) == 58) {
          label = 0;
          $373 = $2;
          $374 = (_hio_read8($373)|0);
          $x1 = $374;
          $375 = $x1;
          $376 = $375&255;
          $377 = $channel;
          $378 = (($377) + ($376))|0;
          $channel = $378;
         }
         else if ((label|0) == 62) {
          label = 0;
          $388 = $2;
          $389 = (_hio_read8($388)|0);
          $x1 = $389;
          $390 = $x1;
          $391 = $390&255;
          $392 = $row;
          $393 = (($392) + ($391))|0;
          $row = $393;
          break;
         }
         else if ((label|0) == 65) {
          label = 0;
          $400 = $x1;
          $401 = $event;
          $402 = $2;
          $403 = (_decode_event($400,$401,$402)|0);
          $404 = ($403|0)<(0);
          if ($404) {
           label = 66;
           break L45;
          }
          $405 = $channel;
          $406 = $event;
          _xlat_fx240($405,$406);
          break;
         }
         else if ((label|0) == 70) {
          label = 0;
          $413 = $2;
          $414 = (_hio_read8($413)|0);
          $x2 = $414;
          $415 = $x1;
          $416 = $event;
          $417 = $2;
          $418 = (_decode_event($415,$416,$417)|0);
          $419 = ($418|0)<(0);
          if ($419) {
           label = 71;
           break L45;
          }
          $420 = $channel;
          $421 = $event;
          _xlat_fx240($420,$421);
          break;
         }
         else if ((label|0) == 75) {
          label = 0;
          $428 = $2;
          $429 = (_hio_read8($428)|0);
          $x2 = $429;
          $430 = $x1;
          $431 = $event;
          $432 = $2;
          $433 = (_decode_event($430,$431,$432)|0);
          $434 = ($433|0)<(0);
          if ($434) {
           label = 76;
           break L45;
          }
          $435 = $channel;
          $436 = $event;
          _xlat_fx240($435,$436);
          while(1) {
           $437 = $x2;
           $438 = ($437<<24>>24)!=(0);
           if (!($438)) {
            break L58;
           }
           $439 = $row;
           $440 = (($439) + 1)|0;
           $row = $440;
           $441 = $row;
           $442 = ((($lp)) + 30|0);
           $443 = HEAP16[$442>>1]|0;
           $444 = $443&65535;
           $445 = ($441|0)>=($444|0);
           if ($445) {
            label = 80;
            break L45;
           }
           $446 = $row;
           $447 = $channel;
           $448 = $i;
           $449 = $1;
           $450 = ((($449)) + 168|0);
           $451 = HEAP32[$450>>2]|0;
           $452 = (($451) + ($448<<2)|0);
           $453 = HEAP32[$452>>2]|0;
           $454 = ((($453)) + 4|0);
           $455 = (($454) + ($447<<2)|0);
           $456 = HEAP32[$455>>2]|0;
           $457 = $1;
           $458 = ((($457)) + 172|0);
           $459 = HEAP32[$458>>2]|0;
           $460 = (($459) + ($456<<2)|0);
           $461 = HEAP32[$460>>2]|0;
           $462 = ((($461)) + 4|0);
           $463 = (($462) + ($446<<3)|0);
           $464 = $event;
           ;HEAP8[$463>>0]=HEAP8[$464>>0]|0;HEAP8[$463+1>>0]=HEAP8[$464+1>>0]|0;HEAP8[$463+2>>0]=HEAP8[$464+2>>0]|0;HEAP8[$463+3>>0]=HEAP8[$464+3>>0]|0;HEAP8[$463+4>>0]=HEAP8[$464+4>>0]|0;HEAP8[$463+5>>0]=HEAP8[$464+5>>0]|0;HEAP8[$463+6>>0]=HEAP8[$464+6>>0]|0;HEAP8[$463+7>>0]=HEAP8[$464+7>>0]|0;
           $465 = $x2;
           $466 = (($465) + -1)<<24>>24;
           $x2 = $466;
          }
         }
         else if ((label|0) == 88) {
          label = 0;
          $484 = $x1;
          $485 = $484&255;
          $486 = ($485|0)!=(255);
          if ($486) {
           $487 = $x1;
           $488 = $487&255;
           $489 = (($488) + 1)|0;
           $490 = $489&255;
           $491 = $event;
           $492 = ((($491)) + 1|0);
           HEAP8[$492>>0] = $490;
          }
          $493 = $2;
          $494 = (_hio_read8($493)|0);
          $x1 = $494;
          $495 = $x1;
          $496 = $495&255;
          $497 = ($496|0)!=(255);
          if ($497) {
           $498 = $x1;
           $499 = $event;
           $500 = ((($499)) + 2|0);
           HEAP8[$500>>0] = $498;
          }
          $501 = $2;
          $502 = (_hio_read8($501)|0);
          $x1 = $502;
          $503 = $x1;
          $504 = $503&255;
          $505 = ($504|0)!=(255);
          if ($505) {
           $506 = $x1;
           $507 = $506&255;
           $508 = (($507) - 65)|0;
           $509 = $508&255;
           $510 = $event;
           $511 = ((($510)) + 3|0);
           HEAP8[$511>>0] = $509;
          }
          $512 = $2;
          $513 = (_hio_read8($512)|0);
          $x1 = $513;
          $514 = $x1;
          $515 = $event;
          $516 = ((($515)) + 4|0);
          HEAP8[$516>>0] = $514;
          $517 = $event;
          $518 = ((($517)) + 3|0);
          $519 = HEAP8[$518>>0]|0;
          $520 = $519&255;
          $521 = ($520|0)>(26);
          if ($521) {
           label = 95;
           break L45;
          }
          $522 = $channel;
          $523 = $event;
          _xlat_fx240($522,$523);
          $524 = $event;
          $525 = HEAP8[$524>>0]|0;
          $526 = $525&255;
          $527 = ($526|0)>(119);
          if ($527) {
           $528 = $event;
           $529 = HEAP8[$528>>0]|0;
           $530 = $529&255;
           $531 = ($530|0)!=(129);
           if ($531) {
            label = 98;
            break L45;
           }
          }
          $532 = $event;
          $533 = ((($532)) + 1|0);
          $534 = HEAP8[$533>>0]|0;
          $535 = $534&255;
          $536 = ($535|0)>(100);
          if ($536) {
           label = 101;
           break L45;
          }
          $537 = $event;
          $538 = ((($537)) + 2|0);
          $539 = HEAP8[$538>>0]|0;
          $540 = $539&255;
          $541 = ($540|0)>(65);
          if ($541) {
           label = 101;
           break L45;
          } else {
           break;
          }
         }
         $379 = $channel;
         $380 = (($379) + 1)|0;
         $channel = $380;
         $381 = $channel;
         $382 = $mod;
         $383 = ((($382)) + 136|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($381|0)>=($384|0);
         if ($385) {
          $386 = $channel;
          $387 = (($386) + -1)|0;
          $channel = $387;
         }
         $row = -1;
        }
       } while(0);
       $542 = $row;
       $543 = (($542) + 1)|0;
       $row = $543;
       $544 = $row;
       $545 = $i;
       $546 = $mod;
       $547 = ((($546)) + 168|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = (($548) + ($545<<2)|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = HEAP32[$550>>2]|0;
       $552 = ($544|0)>=($551|0);
       if ($552) {
        $row = 0;
        $x2 = 0;
        $553 = $channel;
        $554 = (($553) + 1)|0;
        $channel = $554;
       }
       $555 = $channel;
       $556 = $mod;
       $557 = ((($556)) + 136|0);
       $558 = HEAP32[$557>>2]|0;
       $559 = ($555|0)>=($558|0);
       if (!($559)) {
        continue;
       }
       $channel = 0;
      }
      $366 = $2;
      $367 = (_hio_tell($366)|0);
      $368 = $count;
      $369 = (($367) - ($368))|0;
      $370 = ((($lp)) + 32|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = ($369|0)!=($371|0);
      if ($372) {
       label = 57;
       break;
      }
     }
     $560 = $i;
     $561 = (($560) + 1)|0;
     $i = $561;
    }
    switch (label|0) {
     case 35: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 38: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 40: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 45: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 48: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 54: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 57: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 66: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 71: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 76: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 80: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 95: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 98: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 101: {
      $0 = -1;
      $769 = $0;
      STACKTOP = sp;return ($769|0);
      break;
     }
     case 107: {
      $562 = (_instrument_init($240)|0);
      $563 = ($562|0)<(0);
      if ($563) {
       $0 = -1;
       $769 = $0;
       STACKTOP = sp;return ($769|0);
      }
      $i = 0;
      L128: while(1) {
       $564 = $i;
       $565 = $mod;
       $566 = ((($565)) + 140|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = ($564|0)<($567|0);
       if (!($568)) {
        label = 130;
        break;
       }
       $569 = $i;
       $570 = $mod;
       $571 = ((($570)) + 176|0);
       $572 = HEAP32[$571>>2]|0;
       $573 = (($572) + (($569*764)|0)|0);
       $xxi = $573;
       $574 = $i;
       $575 = $mod;
       $576 = ((($575)) + 180|0);
       $577 = HEAP32[$576>>2]|0;
       $578 = (($577) + (($574*52)|0)|0);
       $xxs = $578;
       $579 = $mod;
       $580 = $i;
       $581 = (_subinstrument_alloc($579,$580,1)|0);
       $582 = ($581|0)<(0);
       if ($582) {
        label = 112;
        break;
       }
       $583 = $xxi;
       $584 = ((($583)) + 756|0);
       $585 = HEAP32[$584>>2]|0;
       $sub = $585;
       $586 = $2;
       (_hio_read($b,1,4,$586)|0);
       $587 = HEAP8[$b>>0]|0;
       $588 = $587&255;
       $589 = ($588|0)==(63);
       if ($589) {
        $590 = ((($b)) + 1|0);
        $591 = HEAP8[$590>>0]|0;
        $592 = $591&255;
        $593 = ($592|0)==(63);
        if ($593) {
         $594 = ((($b)) + 2|0);
         $595 = HEAP8[$594>>0]|0;
         $596 = $595&255;
         $597 = ($596|0)==(63);
         if ($597) {
          $598 = ((($b)) + 3|0);
          $599 = HEAP8[$598>>0]|0;
          $600 = $599&255;
          $601 = ($600|0)==(63);
          if (!($601)) {
           label = 117;
          }
         } else {
          label = 117;
         }
        } else {
         label = 117;
        }
       } else {
        label = 117;
       }
       do {
        if ((label|0) == 117) {
         label = 0;
         $602 = HEAP8[$b>>0]|0;
         $603 = $602&255;
         $604 = ($603|0)!=(76);
         if ($604) {
          label = 121;
          break L128;
         }
         $605 = ((($b)) + 1|0);
         $606 = HEAP8[$605>>0]|0;
         $607 = $606&255;
         $608 = ($607|0)!=(68);
         if ($608) {
          label = 121;
          break L128;
         }
         $609 = ((($b)) + 2|0);
         $610 = HEAP8[$609>>0]|0;
         $611 = $610&255;
         $612 = ($611|0)!=(83);
         if ($612) {
          label = 121;
          break L128;
         }
         $613 = ((($b)) + 3|0);
         $614 = HEAP8[$613>>0]|0;
         $615 = $614&255;
         $616 = ($615|0)!=(83);
         if ($616) {
          label = 121;
          break L128;
         }
         $617 = $2;
         $618 = (_hio_read16l($617)|0);
         HEAP16[$li>>1] = $618;
         $619 = ((($li)) + 2|0);
         $620 = $2;
         (_hio_read($619,30,1,$620)|0);
         $621 = ((($li)) + 32|0);
         $622 = $2;
         (_hio_read($621,20,1,$622)|0);
         $623 = ((($li)) + 52|0);
         $624 = $2;
         (_hio_read($623,20,1,$624)|0);
         $625 = $2;
         $626 = (_hio_read8($625)|0);
         $627 = ((($li)) + 72|0);
         HEAP8[$627>>0] = $626;
         $628 = $2;
         $629 = (_hio_read32l($628)|0);
         $630 = ((($li)) + 76|0);
         HEAP32[$630>>2] = $629;
         $631 = $2;
         $632 = (_hio_read32l($631)|0);
         $633 = ((($li)) + 80|0);
         HEAP32[$633>>2] = $632;
         $634 = $2;
         $635 = (_hio_read32l($634)|0);
         $636 = ((($li)) + 84|0);
         HEAP32[$636>>2] = $635;
         $637 = $2;
         $638 = (_hio_read32l($637)|0);
         $639 = ((($li)) + 88|0);
         HEAP32[$639>>2] = $638;
         $640 = $2;
         $641 = (_hio_read8($640)|0);
         $642 = ((($li)) + 92|0);
         HEAP8[$642>>0] = $641;
         $643 = $2;
         $644 = (_hio_read8($643)|0);
         $645 = ((($li)) + 93|0);
         HEAP8[$645>>0] = $644;
         $646 = $2;
         $647 = (_hio_read8($646)|0);
         $648 = ((($li)) + 94|0);
         HEAP8[$648>>0] = $647;
         $649 = $2;
         $650 = (_hio_read8($649)|0);
         $651 = ((($li)) + 95|0);
         HEAP8[$651>>0] = $650;
         $652 = $2;
         $653 = (_hio_read8($652)|0);
         $654 = ((($li)) + 96|0);
         HEAP8[$654>>0] = $653;
         $655 = $2;
         $656 = (_hio_read8($655)|0);
         $657 = ((($li)) + 97|0);
         HEAP8[$657>>0] = $656;
         $658 = $2;
         $659 = (_hio_read16l($658)|0);
         $660 = ((($li)) + 98|0);
         HEAP16[$660>>1] = $659;
         $661 = $2;
         $662 = (_hio_read16l($661)|0);
         $663 = ((($li)) + 100|0);
         HEAP16[$663>>1] = $662;
         $664 = $2;
         $665 = (_hio_read32l($664)|0);
         $666 = ((($li)) + 104|0);
         HEAP32[$666>>2] = $665;
         $667 = $2;
         $668 = (_hio_read8($667)|0);
         $669 = ((($li)) + 108|0);
         HEAP8[$669>>0] = $668;
         $670 = ((($li)) + 109|0);
         $671 = $2;
         (_hio_read($670,11,1,$671)|0);
         $672 = ((($li)) + 120|0);
         $673 = $2;
         (_hio_read($672,25,1,$673)|0);
         $674 = ((($li)) + 76|0);
         $675 = HEAP32[$674>>2]|0;
         $676 = ($675|0)!=(0);
         $677 = $676 ^ 1;
         $678 = $677 ^ 1;
         $679 = $678&1;
         $680 = $xxi;
         $681 = ((($680)) + 36|0);
         HEAP32[$681>>2] = $679;
         $682 = $xxi;
         $683 = ((($682)) + 32|0);
         HEAP32[$683>>2] = 64;
         $684 = ((($li)) + 76|0);
         $685 = HEAP32[$684>>2]|0;
         $686 = $xxs;
         $687 = ((($686)) + 32|0);
         HEAP32[$687>>2] = $685;
         $688 = ((($li)) + 80|0);
         $689 = HEAP32[$688>>2]|0;
         $690 = $xxs;
         $691 = ((($690)) + 36|0);
         HEAP32[$691>>2] = $689;
         $692 = ((($li)) + 84|0);
         $693 = HEAP32[$692>>2]|0;
         $694 = $xxs;
         $695 = ((($694)) + 40|0);
         HEAP32[$695>>2] = $693;
         $696 = ((($li)) + 93|0);
         $697 = HEAP8[$696>>0]|0;
         $698 = $697&255;
         $699 = $698 & 1;
         $700 = ($699|0)!=(0);
         if ($700) {
          $701 = $xxs;
          $702 = ((($701)) + 44|0);
          HEAP32[$702>>2] = 1;
          $703 = $xxs;
          $704 = ((($703)) + 32|0);
          $705 = HEAP32[$704>>2]|0;
          $706 = $705 >> 1;
          HEAP32[$704>>2] = $706;
          $707 = $xxs;
          $708 = ((($707)) + 36|0);
          $709 = HEAP32[$708>>2]|0;
          $710 = $709 >> 1;
          HEAP32[$708>>2] = $710;
          $711 = $xxs;
          $712 = ((($711)) + 40|0);
          $713 = HEAP32[$712>>2]|0;
          $714 = $713 >> 1;
          HEAP32[$712>>2] = $714;
         }
         $715 = ((($li)) + 84|0);
         $716 = HEAP32[$715>>2]|0;
         $717 = ($716>>>0)>(0);
         if ($717) {
          $718 = $xxs;
          $719 = ((($718)) + 44|0);
          HEAP32[$719>>2] = 2;
         }
         $720 = ((($li)) + 96|0);
         HEAP8[$720>>0] = 64;
         $721 = ((($li)) + 92|0);
         $722 = HEAP8[$721>>0]|0;
         $723 = $722&255;
         $724 = $sub;
         HEAP32[$724>>2] = $723;
         $725 = ((($li)) + 96|0);
         $726 = HEAP8[$725>>0]|0;
         $727 = $726&255;
         $728 = $sub;
         $729 = ((($728)) + 4|0);
         HEAP32[$729>>2] = $727;
         $730 = ((($li)) + 94|0);
         $731 = HEAP8[$730>>0]|0;
         $732 = $731&255;
         $733 = $sub;
         $734 = ((($733)) + 8|0);
         HEAP32[$734>>2] = $732;
         $735 = $i;
         $736 = $sub;
         $737 = ((($736)) + 40|0);
         HEAP32[$737>>2] = $735;
         $738 = $mod;
         $739 = $i;
         $740 = ((($li)) + 2|0);
         (_instrument_name($738,$739,$740,31)|0);
         $741 = ((($li)) + 88|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = $sub;
         $744 = ((($743)) + 12|0);
         $745 = $sub;
         $746 = ((($745)) + 16|0);
         _c2spd_to_note($742,$744,$746);
         $747 = $2;
         $748 = ((($li)) + 98|0);
         $749 = HEAP16[$748>>1]|0;
         $750 = $749&65535;
         $751 = (($750) - 144)|0;
         (_hio_seek($747,$751,1)|0);
         $752 = $xxs;
         $753 = ((($752)) + 32|0);
         $754 = HEAP32[$753>>2]|0;
         $755 = ($754|0)==(0);
         if ($755) {
          break;
         }
         $756 = $1;
         $757 = $2;
         $758 = $xxs;
         $759 = (_load_sample($756,$757,0,$758,0)|0);
         $760 = ($759|0)<(0);
         if ($760) {
          label = 128;
          break L128;
         }
        }
       } while(0);
       $761 = $i;
       $762 = (($761) + 1)|0;
       $i = $762;
      }
      if ((label|0) == 112) {
       $0 = -1;
       $769 = $0;
       STACKTOP = sp;return ($769|0);
      }
      else if ((label|0) == 121) {
       $0 = -1;
       $769 = $0;
       STACKTOP = sp;return ($769|0);
      }
      else if ((label|0) == 128) {
       $0 = -1;
       $769 = $0;
       STACKTOP = sp;return ($769|0);
      }
      else if ((label|0) == 130) {
       $763 = $1;
       $764 = ((($763)) + 1284|0);
       $765 = HEAP32[$764>>2]|0;
       $766 = $765 | 285213217;
       HEAP32[$764>>2] = $766;
       $767 = $1;
       $768 = ((($767)) + 1288|0);
       HEAP32[$768>>2] = 2;
       $0 = 0;
       $769 = $0;
       STACKTOP = sp;return ($769|0);
      }
      break;
     }
    }
   }
  }
 }
 $0 = -1;
 $769 = $0;
 STACKTOP = sp;return ($769|0);
}
function _decode_event($x1,$event,$f) {
 $x1 = $x1|0;
 $event = $event|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x1;
 $2 = $event;
 $3 = $f;
 $4 = $2;
 ;HEAP8[$4>>0]=0|0;HEAP8[$4+1>>0]=0|0;HEAP8[$4+2>>0]=0|0;HEAP8[$4+3>>0]=0|0;HEAP8[$4+4>>0]=0|0;HEAP8[$4+5>>0]=0|0;HEAP8[$4+6>>0]=0|0;HEAP8[$4+7>>0]=0|0;
 $5 = $1;
 $6 = $5&255;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = $3;
   $10 = (_hio_read8($9)|0);
   $x2 = $10;
   $11 = $x2;
   $12 = $11&255;
   $13 = ($12|0)==(254);
   if ($13) {
    $14 = $2;
    HEAP8[$14>>0] = -127;
    break;
   } else {
    $15 = $x2;
    $16 = $15&255;
    $17 = (($16) + 1)|0;
    $18 = (($17) + 36)|0;
    $19 = $18&255;
    $20 = $2;
    HEAP8[$20>>0] = $19;
    break;
   }
  }
 } while(0);
 $21 = $1;
 $22 = $21&255;
 $23 = $22 & 2;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $3;
  $26 = (_hio_read8($25)|0);
  $27 = $26&255;
  $28 = (($27) + 1)|0;
  $29 = $28&255;
  $30 = $2;
  $31 = ((($30)) + 1|0);
  HEAP8[$31>>0] = $29;
 }
 $32 = $1;
 $33 = $32&255;
 $34 = $33 & 4;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $3;
  $37 = (_hio_read8($36)|0);
  $38 = $2;
  $39 = ((($38)) + 2|0);
  HEAP8[$39>>0] = $37;
 }
 $40 = $1;
 $41 = $40&255;
 $42 = $41 & 8;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $3;
  $45 = (_hio_read8($44)|0);
  $46 = $45&255;
  $47 = (($46) - 65)|0;
  $48 = $47&255;
  $49 = $2;
  $50 = ((($49)) + 3|0);
  HEAP8[$50>>0] = $48;
 }
 $51 = $1;
 $52 = $51&255;
 $53 = $52 & 16;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $3;
  $56 = (_hio_read8($55)|0);
  $57 = $2;
  $58 = ((($57)) + 4|0);
  HEAP8[$58>>0] = $56;
 }
 $59 = $2;
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ($61|0)>(107);
 if ($62) {
  $63 = $2;
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = ($65|0)!=(129);
  if ($66) {
   $0 = -1;
   $82 = $0;
   STACKTOP = sp;return ($82|0);
  }
 }
 $67 = $2;
 $68 = ((($67)) + 1|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = ($70|0)>(100);
 if (!($71)) {
  $72 = $2;
  $73 = ((($72)) + 2|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = ($75|0)>(64);
  if (!($76)) {
   $77 = $2;
   $78 = ((($77)) + 3|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = ($80|0)>(26);
   if (!($81)) {
    $0 = 0;
    $82 = $0;
    STACKTOP = sp;return ($82|0);
   }
  }
 }
 $0 = -1;
 $82 = $0;
 STACKTOP = sp;return ($82|0);
}
function _xlat_fx240($c,$e) {
 $c = $c|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $e;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 240;
 $7 = $6 >> 4;
 $8 = $7&255;
 $h = $8;
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 15;
 $14 = $13&255;
 $l = $14;
 $15 = $1;
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (5312 + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $1;
 $22 = ((($21)) + 3|0);
 HEAP8[$22>>0] = $20;
 $23 = $20&255;
 if ((($23|0) == 255)) {
  $88 = $1;
  $89 = ((($88)) + 4|0);
  HEAP8[$89>>0] = 0;
  $90 = $1;
  $91 = ((($90)) + 3|0);
  HEAP8[$91>>0] = 0;
  STACKTOP = sp;return;
 } else if ((($23|0) == 14)) {
  $24 = $h;
  $25 = $24&255;
  switch ($25|0) {
  case 6:  {
   $49 = $l;
   $50 = $49&255;
   $51 = $50 | 96;
   $52 = $51&255;
   $53 = $1;
   $54 = ((($53)) + 4|0);
   HEAP8[$54>>0] = $52;
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $78 = $l;
   $79 = $78&255;
   $80 = $79 | 224;
   $81 = $80&255;
   $82 = $1;
   $83 = ((($82)) + 4|0);
   HEAP8[$83>>0] = $81;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $43 = $l;
   $44 = $43&255;
   $45 = $44 | 80;
   $46 = $45&255;
   $47 = $1;
   $48 = ((($47)) + 4|0);
   HEAP8[$48>>0] = $46;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $66 = $l;
   $67 = $66&255;
   $68 = $67 | 192;
   $69 = $68&255;
   $70 = $1;
   $71 = ((($70)) + 4|0);
   HEAP8[$71>>0] = $69;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $32 = $l;
   $33 = $32&255;
   $34 = ($33|0)==(3);
   if ($34) {
    $35 = $l;
    $36 = (($35) + 1)<<24>>24;
    $l = $36;
   }
   $37 = $l;
   $38 = $37&255;
   $39 = $38 | 64;
   $40 = $39&255;
   $41 = $1;
   $42 = ((($41)) + 4|0);
   HEAP8[$42>>0] = $40;
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $72 = $l;
   $73 = $72&255;
   $74 = $73 | 208;
   $75 = $74&255;
   $76 = $1;
   $77 = ((($76)) + 4|0);
   HEAP8[$77>>0] = $75;
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $26 = $l;
   $27 = $26&255;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = $1;
   $31 = ((($30)) + 4|0);
   HEAP8[$31>>0] = $29;
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $55 = $l;
   $56 = $55&255;
   $57 = ($56|0)==(3);
   if ($57) {
    $58 = $l;
    $59 = (($58) + 1)<<24>>24;
    $l = $59;
   }
   $60 = $l;
   $61 = $60&255;
   $62 = $61 | 112;
   $63 = $62&255;
   $64 = $1;
   $65 = ((($64)) + 4|0);
   HEAP8[$65>>0] = $63;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $84 = $1;
   $85 = ((($84)) + 4|0);
   HEAP8[$85>>0] = 0;
   $86 = $1;
   $87 = ((($86)) + 3|0);
   HEAP8[$87>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _ims_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $ih = 0, $pat = 0, $smp_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ih = sp + 28|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $smp_size = 0;
 $4 = $1;
 (_hio_read($ih,20,1,$4)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(31);
  if (!($6)) {
   label = 17;
   break;
  }
  $7 = $i;
  $8 = ((($ih)) + 20|0);
  $9 = (($8) + (($7*30)|0)|0);
  $10 = $1;
  $11 = (_hio_read($9,1,20,$10)|0);
  $12 = ($11>>>0)<(20);
  if ($12) {
   label = 4;
   break;
  }
  $13 = $1;
  $14 = (_hio_read16b($13)|0);
  $15 = $i;
  $16 = ((($ih)) + 20|0);
  $17 = (($16) + (($15*30)|0)|0);
  $18 = ((($17)) + 20|0);
  HEAP16[$18>>1] = $14;
  $19 = $1;
  $20 = (_hio_read16b($19)|0);
  $21 = $i;
  $22 = ((($ih)) + 20|0);
  $23 = (($22) + (($21*30)|0)|0);
  $24 = ((($23)) + 22|0);
  HEAP16[$24>>1] = $20;
  $25 = $1;
  $26 = (_hio_read8($25)|0);
  $27 = $i;
  $28 = ((($ih)) + 20|0);
  $29 = (($28) + (($27*30)|0)|0);
  $30 = ((($29)) + 24|0);
  HEAP8[$30>>0] = $26;
  $31 = $1;
  $32 = (_hio_read8($31)|0);
  $33 = $i;
  $34 = ((($ih)) + 20|0);
  $35 = (($34) + (($33*30)|0)|0);
  $36 = ((($35)) + 25|0);
  HEAP8[$36>>0] = $32;
  $37 = $1;
  $38 = (_hio_read16b($37)|0);
  $39 = $i;
  $40 = ((($ih)) + 20|0);
  $41 = (($40) + (($39*30)|0)|0);
  $42 = ((($41)) + 26|0);
  HEAP16[$42>>1] = $38;
  $43 = $1;
  $44 = (_hio_read16b($43)|0);
  $45 = $i;
  $46 = ((($ih)) + 20|0);
  $47 = (($46) + (($45*30)|0)|0);
  $48 = ((($47)) + 28|0);
  HEAP16[$48>>1] = $44;
  $49 = $i;
  $50 = ((($ih)) + 20|0);
  $51 = (($50) + (($49*30)|0)|0);
  $52 = ((($51)) + 22|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53&65535;
  $55 = $54<<1;
  $56 = $smp_size;
  $57 = (($56) + ($55))|0;
  $smp_size = $57;
  $58 = $i;
  $59 = ((($ih)) + 20|0);
  $60 = (($59) + (($58*30)|0)|0);
  $61 = (_test_name($60,20)|0);
  $62 = ($61|0)<(0);
  if ($62) {
   label = 6;
   break;
  }
  $63 = $i;
  $64 = ((($ih)) + 20|0);
  $65 = (($64) + (($63*30)|0)|0);
  $66 = ((($65)) + 25|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(64);
  if ($69) {
   label = 8;
   break;
  }
  $70 = $i;
  $71 = ((($ih)) + 20|0);
  $72 = (($71) + (($70*30)|0)|0);
  $73 = ((($72)) + 22|0);
  $74 = HEAP16[$73>>1]|0;
  $75 = $74&65535;
  $76 = ($75|0)>(32768);
  if ($76) {
   label = 10;
   break;
  }
  $77 = $i;
  $78 = ((($ih)) + 20|0);
  $79 = (($78) + (($77*30)|0)|0);
  $80 = ((($79)) + 26|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = $i;
  $84 = ((($ih)) + 20|0);
  $85 = (($84) + (($83*30)|0)|0);
  $86 = ((($85)) + 22|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87&65535;
  $89 = ($82|0)>($88|0);
  if ($89) {
   label = 12;
   break;
  }
  $90 = $i;
  $91 = ((($ih)) + 20|0);
  $92 = (($91) + (($90*30)|0)|0);
  $93 = ((($92)) + 22|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = ($95|0)!=(0);
  if ($96) {
   $97 = $i;
   $98 = ((($ih)) + 20|0);
   $99 = (($98) + (($97*30)|0)|0);
   $100 = ((($99)) + 28|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101&65535;
   $103 = $i;
   $104 = ((($ih)) + 20|0);
   $105 = (($104) + (($103*30)|0)|0);
   $106 = ((($105)) + 22|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   $109 = $108<<1;
   $110 = ($102|0)>($109|0);
   if ($110) {
    label = 15;
    break;
   }
  }
  $111 = $i;
  $112 = (($111) + 1)|0;
  $i = $112;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 15) {
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 17) {
  $113 = $smp_size;
  $114 = ($113|0)<(8);
  if ($114) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $115 = $1;
  $116 = (_hio_read8($115)|0);
  $117 = ((($ih)) + 950|0);
  HEAP8[$117>>0] = $116;
  $118 = $1;
  $119 = (_hio_read8($118)|0);
  $120 = ((($ih)) + 951|0);
  HEAP8[$120>>0] = $119;
  $121 = ((($ih)) + 952|0);
  $122 = $1;
  (_hio_read($121,128,1,$122)|0);
  $123 = ((($ih)) + 1080|0);
  $124 = $1;
  (_hio_read($123,4,1,$124)|0);
  $125 = ((($ih)) + 951|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = ($127|0)>(1);
  if ($128) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $129 = ((($ih)) + 1080|0);
  $130 = ((($129)) + 3|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = ($132|0)!=(60);
  if ($133) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $134 = ((($ih)) + 950|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = ($136|0)>(127);
  if ($137) {
   $0 = -1;
   $174 = $0;
   STACKTOP = sp;return ($174|0);
  }
  $i = 0;
  $pat = 0;
  while(1) {
   $138 = $i;
   $139 = ((($ih)) + 950|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = ($138|0)<($141|0);
   if (!($142)) {
    break;
   }
   $143 = $i;
   $144 = ((($ih)) + 952|0);
   $145 = (($144) + ($143)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = $pat;
   $149 = ($147|0)>($148|0);
   if ($149) {
    $150 = $i;
    $151 = ((($ih)) + 952|0);
    $152 = (($151) + ($150)|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $pat = $154;
   }
   $155 = $i;
   $156 = (($155) + 1)|0;
   $i = $156;
  }
  $157 = $pat;
  $158 = (($157) + 1)|0;
  $pat = $158;
  $159 = $pat;
  $160 = ($159|0)>(127);
  if (!($160)) {
   $161 = ((($ih)) + 950|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = ($163|0)==(0);
   if (!($164)) {
    $165 = ((($ih)) + 950|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    $168 = ($167|0)>(127);
    if (!($168)) {
     $169 = $1;
     $170 = $3;
     $171 = (($170) + 0)|0;
     (_hio_seek($169,$171,0)|0);
     $172 = $1;
     $173 = $2;
     _read_title($172,$173,20);
     $0 = 0;
     $174 = $0;
     STACKTOP = sp;return ($174|0);
    }
   }
  }
  $0 = -1;
  $174 = $0;
  STACKTOP = sp;return ($174|0);
 }
 return (0)|0;
}
function _ims_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $ih = 0, $ims_event = 0, $j = 0, $mod = 0, $smp_size = 0, $vararg_buffer = 0, $xpo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ih = sp + 44|0;
 $ims_event = sp + 1128|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $xpo = 21;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $mod;
 $8 = ((($7)) + 140|0);
 HEAP32[$8>>2] = 31;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 $smp_size = 0;
 $14 = $2;
 (_hio_read($ih,20,1,$14)|0);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(31);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = ((($ih)) + 20|0);
  $19 = (($18) + (($17*30)|0)|0);
  $20 = $2;
  (_hio_read($19,20,1,$20)|0);
  $21 = $2;
  $22 = (_hio_read16b($21)|0);
  $23 = $i;
  $24 = ((($ih)) + 20|0);
  $25 = (($24) + (($23*30)|0)|0);
  $26 = ((($25)) + 20|0);
  HEAP16[$26>>1] = $22;
  $27 = $2;
  $28 = (_hio_read16b($27)|0);
  $29 = $i;
  $30 = ((($ih)) + 20|0);
  $31 = (($30) + (($29*30)|0)|0);
  $32 = ((($31)) + 22|0);
  HEAP16[$32>>1] = $28;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $i;
  $36 = ((($ih)) + 20|0);
  $37 = (($36) + (($35*30)|0)|0);
  $38 = ((($37)) + 24|0);
  HEAP8[$38>>0] = $34;
  $39 = $2;
  $40 = (_hio_read8($39)|0);
  $41 = $i;
  $42 = ((($ih)) + 20|0);
  $43 = (($42) + (($41*30)|0)|0);
  $44 = ((($43)) + 25|0);
  HEAP8[$44>>0] = $40;
  $45 = $2;
  $46 = (_hio_read16b($45)|0);
  $47 = $i;
  $48 = ((($ih)) + 20|0);
  $49 = (($48) + (($47*30)|0)|0);
  $50 = ((($49)) + 26|0);
  HEAP16[$50>>1] = $46;
  $51 = $2;
  $52 = (_hio_read16b($51)|0);
  $53 = $i;
  $54 = ((($ih)) + 20|0);
  $55 = (($54) + (($53*30)|0)|0);
  $56 = ((($55)) + 28|0);
  HEAP16[$56>>1] = $52;
  $57 = $i;
  $58 = ((($ih)) + 20|0);
  $59 = (($58) + (($57*30)|0)|0);
  $60 = ((($59)) + 22|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = $62<<1;
  $64 = $smp_size;
  $65 = (($64) + ($63))|0;
  $smp_size = $65;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = $2;
 $69 = (_hio_read8($68)|0);
 $70 = ((($ih)) + 950|0);
 HEAP8[$70>>0] = $69;
 $71 = $2;
 $72 = (_hio_read8($71)|0);
 $73 = ((($ih)) + 951|0);
 HEAP8[$73>>0] = $72;
 $74 = ((($ih)) + 952|0);
 $75 = $2;
 (_hio_read($74,128,1,$75)|0);
 $76 = ((($ih)) + 1080|0);
 $77 = $2;
 (_hio_read($76,4,1,$77)|0);
 $78 = ((($ih)) + 950|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $mod;
 $82 = ((($81)) + 156|0);
 HEAP32[$82>>2] = $80;
 $83 = $mod;
 $84 = ((($83)) + 952|0);
 $85 = ((($ih)) + 952|0);
 $86 = $mod;
 $87 = ((($86)) + 156|0);
 $88 = HEAP32[$87>>2]|0;
 _memcpy(($84|0),($85|0),($88|0))|0;
 $i = 0;
 while(1) {
  $89 = $i;
  $90 = $mod;
  $91 = ((($90)) + 156|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($89|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $i;
  $95 = $mod;
  $96 = ((($95)) + 952|0);
  $97 = (($96) + ($94)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $mod;
  $101 = ((($100)) + 128|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($99|0)>($102|0);
  if ($103) {
   $104 = $i;
   $105 = $mod;
   $106 = ((($105)) + 952|0);
   $107 = (($106) + ($104)|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $mod;
   $111 = ((($110)) + 128|0);
   HEAP32[$111>>2] = $109;
  }
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 $114 = $mod;
 $115 = ((($114)) + 128|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 1)|0;
 HEAP32[$115>>2] = $117;
 $118 = $mod;
 $119 = ((($118)) + 136|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $mod;
 $122 = ((($121)) + 128|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = Math_imul($120, $123)|0;
 $125 = $mod;
 $126 = ((($125)) + 132|0);
 HEAP32[$126>>2] = $124;
 $127 = $mod;
 (_strncpy(($127|0),($ih|0),20)|0);
 $128 = $1;
 _set_type($128,5376,$vararg_buffer);
 $129 = $mod;
 $130 = (_instrument_init($129)|0);
 $131 = ($130|0)<(0);
 if ($131) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $i = 0;
 while(1) {
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 140|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ($132|0)<($135|0);
  $137 = $mod;
  if (!($136)) {
   break;
  }
  $138 = $i;
  $139 = (_subinstrument_alloc($137,$138,1)|0);
  $140 = ($139|0)<(0);
  if ($140) {
   label = 14;
   break;
  }
  $141 = $i;
  $142 = ((($ih)) + 20|0);
  $143 = (($142) + (($141*30)|0)|0);
  $144 = ((($143)) + 22|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = $146<<1;
  $148 = $i;
  $149 = $mod;
  $150 = ((($149)) + 180|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + (($148*52)|0)|0);
  $153 = ((($152)) + 32|0);
  HEAP32[$153>>2] = $147;
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 180|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + (($154*52)|0)|0);
  $159 = ((($158)) + 36|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $i;
  $162 = ((($ih)) + 20|0);
  $163 = (($162) + (($161*30)|0)|0);
  $164 = ((($163)) + 28|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = $165&65535;
  $167 = $166<<1;
  $168 = (($160) + ($167))|0;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 40|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = ((($ih)) + 20|0);
  $177 = (($176) + (($175*30)|0)|0);
  $178 = ((($177)) + 28|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $181 = ($180|0)>(1);
  $182 = $181 ? 2 : 0;
  $183 = $i;
  $184 = $mod;
  $185 = ((($184)) + 180|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + (($183*52)|0)|0);
  $188 = ((($187)) + 44|0);
  HEAP32[$188>>2] = $182;
  $189 = $i;
  $190 = $mod;
  $191 = ((($190)) + 176|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($192) + (($189*764)|0)|0);
  $194 = ((($193)) + 756|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ((($195)) + 16|0);
  HEAP32[$196>>2] = 0;
  $197 = $i;
  $198 = ((($ih)) + 20|0);
  $199 = (($198) + (($197*30)|0)|0);
  $200 = ((($199)) + 25|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = $i;
  $204 = $mod;
  $205 = ((($204)) + 176|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + (($203*764)|0)|0);
  $208 = ((($207)) + 756|0);
  $209 = HEAP32[$208>>2]|0;
  HEAP32[$209>>2] = $202;
  $210 = $i;
  $211 = $mod;
  $212 = ((($211)) + 176|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($210*764)|0)|0);
  $215 = ((($214)) + 756|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 8|0);
  HEAP32[$217>>2] = 128;
  $218 = $i;
  $219 = $i;
  $220 = $mod;
  $221 = ((($220)) + 176|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($222) + (($219*764)|0)|0);
  $224 = ((($223)) + 756|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ((($225)) + 40|0);
  HEAP32[$226>>2] = $218;
  $227 = $i;
  $228 = $mod;
  $229 = ((($228)) + 176|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = (($230) + (($227*764)|0)|0);
  $232 = ((($231)) + 40|0);
  HEAP32[$232>>2] = 4095;
  $233 = $i;
  $234 = $mod;
  $235 = ((($234)) + 180|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($236) + (($233*52)|0)|0);
  $238 = ((($237)) + 32|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = ($239|0)>(0);
  if ($240) {
   $241 = $i;
   $242 = $mod;
   $243 = ((($242)) + 176|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = (($244) + (($241*764)|0)|0);
   $246 = ((($245)) + 36|0);
   HEAP32[$246>>2] = 1;
  }
  $247 = $mod;
  $248 = $i;
  $249 = $i;
  $250 = ((($ih)) + 20|0);
  $251 = (($250) + (($249*30)|0)|0);
  (_instrument_name($247,$248,$251,20)|0);
  $252 = $i;
  $253 = (($252) + 1)|0;
  $i = $253;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $254 = (_pattern_init($137)|0);
 $255 = ($254|0)<(0);
 if ($255) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $i = 0;
 while(1) {
  $256 = $i;
  $257 = $mod;
  $258 = ((($257)) + 128|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ($256|0)<($259|0);
  if (!($260)) {
   break;
  }
  $261 = $mod;
  $262 = $i;
  $263 = (_pattern_tracks_alloc($261,$262,64)|0);
  $264 = ($263|0)<(0);
  if ($264) {
   label = 23;
   break;
  }
  $j = 0;
  while(1) {
   $265 = $j;
   $266 = ($265|0)<(256);
   if (!($266)) {
    break;
   }
   $267 = $j;
   $268 = $267 >> 2;
   $269 = $j;
   $270 = $269 & 3;
   $271 = $i;
   $272 = $1;
   $273 = ((($272)) + 168|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = (($274) + ($271<<2)|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = ((($276)) + 4|0);
   $278 = (($277) + ($270<<2)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $1;
   $281 = ((($280)) + 172|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + ($279<<2)|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = (($285) + ($268<<3)|0);
   $event = $286;
   $287 = $2;
   (_hio_read($ims_event,1,3,$287)|0);
   $288 = HEAP8[$ims_event>>0]|0;
   $289 = $288&255;
   $290 = $289 & 63;
   $291 = $290&255;
   $292 = $event;
   HEAP8[$292>>0] = $291;
   $293 = $event;
   $294 = HEAP8[$293>>0]|0;
   $295 = $294&255;
   $296 = ($295|0)!=(0);
   if ($296) {
    $297 = $event;
    $298 = HEAP8[$297>>0]|0;
    $299 = $298&255;
    $300 = ($299|0)!=(63);
    if ($300) {
     $301 = $xpo;
     $302 = (($301) + 12)|0;
     $303 = $event;
     $304 = HEAP8[$303>>0]|0;
     $305 = $304&255;
     $306 = (($305) + ($302))|0;
     $307 = $306&255;
     HEAP8[$303>>0] = $307;
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
   if ((label|0) == 29) {
    label = 0;
    $308 = $event;
    HEAP8[$308>>0] = 0;
   }
   $309 = HEAP8[$ims_event>>0]|0;
   $310 = $309&255;
   $311 = $310 & 64;
   $312 = $311 >> 2;
   $313 = ((($ims_event)) + 1|0);
   $314 = HEAP8[$313>>0]|0;
   $315 = $314&255;
   $316 = $315 & 240;
   $317 = $316 >> 4;
   $318 = $312 | $317;
   $319 = $318&255;
   $320 = $event;
   $321 = ((($320)) + 1|0);
   HEAP8[$321>>0] = $319;
   $322 = ((($ims_event)) + 1|0);
   $323 = HEAP8[$322>>0]|0;
   $324 = $323&255;
   $325 = $324 & 15;
   $326 = $325&255;
   $327 = $event;
   $328 = ((($327)) + 3|0);
   HEAP8[$328>>0] = $326;
   $329 = ((($ims_event)) + 2|0);
   $330 = HEAP8[$329>>0]|0;
   $331 = $event;
   $332 = ((($331)) + 4|0);
   HEAP8[$332>>0] = $330;
   $333 = $event;
   _disable_continue_fx($333);
   $334 = $event;
   $335 = ((($334)) + 3|0);
   $336 = HEAP8[$335>>0]|0;
   $337 = $336&255;
   $338 = ($337|0)==(13);
   if ($338) {
    $339 = $event;
    $340 = ((($339)) + 4|0);
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = (($342|0) / 10)&-1;
    $344 = $343 << 4;
    $345 = $event;
    $346 = ((($345)) + 4|0);
    $347 = HEAP8[$346>>0]|0;
    $348 = $347&255;
    $349 = (($348|0) % 10)&-1;
    $350 = $344 | $349;
    $351 = $350&255;
    $352 = $event;
    $353 = ((($352)) + 4|0);
    HEAP8[$353>>0] = $351;
   }
   $354 = $j;
   $355 = (($354) + 1)|0;
   $j = $355;
  }
  $356 = $i;
  $357 = (($356) + 1)|0;
  $i = $357;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 $358 = $1;
 $359 = ((($358)) + 1284|0);
 $360 = HEAP32[$359>>2]|0;
 $361 = $360 | 8192;
 HEAP32[$359>>2] = $361;
 $i = 0;
 while(1) {
  $362 = $i;
  $363 = $mod;
  $364 = ((($363)) + 144|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = ($362|0)<($365|0);
  if (!($366)) {
   label = 40;
   break;
  }
  $367 = $i;
  $368 = $mod;
  $369 = ((($368)) + 180|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($370) + (($367*52)|0)|0);
  $372 = ((($371)) + 32|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = ($373|0)!=(0);
  if ($374) {
   $375 = $1;
   $376 = $2;
   $377 = $i;
   $378 = $mod;
   $379 = ((($378)) + 180|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = (($380) + (($377*52)|0)|0);
   $382 = (_load_sample($375,$376,0,$381,0)|0);
   $383 = ($382|0)<(0);
   if ($383) {
    label = 38;
    break;
   }
  }
  $384 = $i;
  $385 = (($384) + 1)|0;
  $i = $385;
 }
 if ((label|0) == 38) {
  $0 = -1;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 else if ((label|0) == 40) {
  $0 = 0;
  $386 = $0;
  STACKTOP = sp;return ($386|0);
 }
 return (0)|0;
}
function _masi_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1347636512);
 if ($6) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $7 = $1;
 (_hio_read8($7)|0);
 $8 = $1;
 (_hio_read8($8)|0);
 $9 = $1;
 (_hio_read8($9)|0);
 $10 = $1;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $13 = ($12|0)!=(0);
 if ($13) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $14 = $1;
 $15 = (_hio_read32b($14)|0);
 $16 = ($15|0)!=(1179208773);
 if ($16) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $17 = $1;
 (_hio_read32b($17)|0);
 $18 = $1;
 $19 = (_hio_read32l($18)|0);
 $val = $19;
 $20 = $1;
 $21 = $val;
 (_hio_seek($20,$21,1)|0);
 $22 = $1;
 $23 = (_hio_read32b($22)|0);
 $24 = ($23|0)==(1414091852);
 $25 = $1;
 if ($24) {
  $26 = (_hio_read32l($25)|0);
  $val = $26;
  $27 = $1;
  $28 = $2;
  $29 = $val;
  _read_title($27,$28,$29);
 } else {
  $30 = $2;
  _read_title($25,$30,0);
 }
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _masi_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $handle = 0, $i = 0;
 var $j = 0, $mod = 0, $offset = 0, $ret = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $data = sp + 4|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 HEAP32[$data>>2] = 0;
 $8 = $mod;
 HEAP8[$8>>0] = 0;
 $9 = $2;
 (_hio_seek($9,8,1)|0);
 $10 = $mod;
 $11 = ((($10)) + 140|0);
 HEAP32[$11>>2] = 0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($data)) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($data)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = (_hio_tell($16)|0);
 $offset = $17;
 $18 = (_iff_new()|0);
 $handle = $18;
 $19 = $handle;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = $handle;
  $22 = (_iff_register($21,5440,241)|0);
  $ret = $22;
  $23 = $handle;
  $24 = (_iff_register($23,5448,242)|0);
  $25 = $ret;
  $26 = $25 | $24;
  $ret = $26;
  $27 = $handle;
  $28 = (_iff_register($27,6784,243)|0);
  $29 = $ret;
  $30 = $29 | $28;
  $ret = $30;
  $31 = $handle;
  $32 = (_iff_register($31,5456,244)|0);
  $33 = $ret;
  $34 = $33 | $32;
  $ret = $34;
  $35 = $handle;
  $36 = (_iff_register($35,5464,245)|0);
  $37 = $ret;
  $38 = $37 | $36;
  $ret = $38;
  $39 = $ret;
  $40 = ($39|0)!=(0);
  if (!($40)) {
   $41 = $handle;
   _iff_set_quirk($41,1);
   $42 = $handle;
   $43 = $1;
   $44 = $2;
   $45 = (_iff_load($42,$43,$44,$data)|0);
   $46 = ($45|0)<(0);
   $47 = $handle;
   _iff_release($47);
   if (!($46)) {
    $48 = $mod;
    $49 = ((($48)) + 128|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $mod;
    $52 = ((($51)) + 136|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = Math_imul($50, $53)|0;
    $55 = $mod;
    $56 = ((($55)) + 132|0);
    HEAP32[$56>>2] = $54;
    $57 = $mod;
    $58 = ((($57)) + 128|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59<<3;
    $61 = (_malloc($60)|0);
    $62 = ((($data)) + 12|0);
    HEAP32[$62>>2] = $61;
    $63 = ((($data)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0|0);
    if (!($65)) {
     $66 = (_malloc(2040)|0);
     $67 = ((($data)) + 16|0);
     HEAP32[$67>>2] = $66;
     $68 = ((($data)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(0|0);
     if (!($70)) {
      $71 = $1;
      $72 = HEAP32[$data>>2]|0;
      $73 = ($72|0)!=(0);
      $74 = $73 ? 5472 : 5488;
      _set_type($71,$74,$vararg_buffer);
      $75 = $mod;
      $76 = (_instrument_init($75)|0);
      $77 = ($76|0)<(0);
      if (!($77)) {
       $78 = $mod;
       $79 = (_pattern_init($78)|0);
       $80 = ($79|0)<(0);
       if (!($80)) {
        $81 = $2;
        $82 = $3;
        $83 = $offset;
        $84 = (($82) + ($83))|0;
        (_hio_seek($81,$84,0)|0);
        $85 = $mod;
        $86 = ((($85)) + 156|0);
        HEAP32[$86>>2] = 0;
        $87 = (_iff_new()|0);
        $handle = $87;
        $88 = $handle;
        $89 = ($88|0)==(0|0);
        if (!($89)) {
         $90 = $handle;
         $91 = (_iff_register($90,6784,246)|0);
         $ret = $91;
         $92 = $handle;
         $93 = (_iff_register($92,5456,247)|0);
         $94 = $ret;
         $95 = $94 | $93;
         $ret = $95;
         $96 = $handle;
         $97 = (_iff_register($96,5464,248)|0);
         $98 = $ret;
         $99 = $98 | $97;
         $ret = $99;
         $100 = $ret;
         $101 = ($100|0)!=(0);
         if (!($101)) {
          $102 = $handle;
          _iff_set_quirk($102,1);
          $103 = $handle;
          $104 = $1;
          $105 = $2;
          $106 = (_iff_load($103,$104,$105,$data)|0);
          $107 = ($106|0)<(0);
          $108 = $handle;
          _iff_release($108);
          if (!($107)) {
           $i = 0;
           while(1) {
            $109 = $i;
            $110 = $mod;
            $111 = ((($110)) + 156|0);
            $112 = HEAP32[$111>>2]|0;
            $113 = ($109|0)<($112|0);
            if (!($113)) {
             break;
            }
            $j = 0;
            while(1) {
             $114 = $j;
             $115 = $mod;
             $116 = ((($115)) + 128|0);
             $117 = HEAP32[$116>>2]|0;
             $118 = ($114|0)<($117|0);
             if (!($118)) {
              break;
             }
             $119 = ((($data)) + 16|0);
             $120 = HEAP32[$119>>2]|0;
             $121 = $i;
             $122 = $121<<3;
             $123 = (($120) + ($122)|0);
             $124 = ((($data)) + 12|0);
             $125 = HEAP32[$124>>2]|0;
             $126 = $j;
             $127 = $126<<3;
             $128 = (($125) + ($127)|0);
             $129 = HEAP32[$data>>2]|0;
             $130 = ($129|0)!=(0);
             $131 = $130 ? 8 : 4;
             $132 = (_memcmp($123,$128,$131)|0);
             $133 = ($132|0)!=(0);
             $134 = $j;
             if (!($133)) {
              label = 16;
              break;
             }
             $140 = (($134) + 1)|0;
             $j = $140;
            }
            if ((label|0) == 16) {
             label = 0;
             $135 = $134&255;
             $136 = $i;
             $137 = $mod;
             $138 = ((($137)) + 952|0);
             $139 = (($138) + ($136)|0);
             HEAP8[$139>>0] = $135;
            }
            $141 = $j;
            $142 = $mod;
            $143 = ((($142)) + 128|0);
            $144 = HEAP32[$143>>2]|0;
            $145 = ($141|0)==($144|0);
            if ($145) {
             break;
            }
            $146 = $i;
            $147 = (($146) + 1)|0;
            $i = $147;
           }
           $148 = ((($data)) + 16|0);
           $149 = HEAP32[$148>>2]|0;
           _free($149);
           $150 = ((($data)) + 12|0);
           $151 = HEAP32[$150>>2]|0;
           _free($151);
           $0 = 0;
           $156 = $0;
           STACKTOP = sp;return ($156|0);
          }
         }
        }
       }
      }
      $152 = ((($data)) + 16|0);
      $153 = HEAP32[$152>>2]|0;
      _free($153);
     }
     $154 = ((($data)) + 12|0);
     $155 = HEAP32[$154>>2]|0;
     _free($155);
    }
   }
  }
 }
 $0 = -1;
 $156 = $0;
 STACKTOP = sp;return ($156|0);
}
function _get_titl($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read($buf,1,40,$5)|0);
 $6 = $mod;
 $7 = $1;
 $8 = ($7|0)>(32);
 $9 = $1;
 $10 = $8 ? 32 : $9;
 (_strncpy(($6|0),($buf|0),($10|0))|0);
 STACKTOP = sp;return 0;
}
function _get_sdft($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 STACKTOP = sp;return 0;
}
function _get_song($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_seek($5,10,1)|0);
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = $mod;
 $10 = ((($9)) + 136|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return 0;
}
function _get_dsmp_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 140|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $mod;
 $10 = ((($9)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $mod;
 $13 = ((($12)) + 144|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return 0;
}
function _get_pbod_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $data = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $mod;
 $7 = ((($6)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = $2;
 (_hio_read($buf,1,20,$10)|0);
 $11 = ((($buf)) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return 0;
 }
 $15 = ((($buf)) + 13|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)==(0);
 if (!($18)) {
  STACKTOP = sp;return 0;
 }
 $19 = $data;
 HEAP32[$19>>2] = 1;
 STACKTOP = sp;return 0;
}
function _get_song_2($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $buf = 0, $c = 0, $data = 0, $i = 0;
 var $magic = 0, $mod = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 (_hio_read($buf,1,9,$7)|0);
 $8 = $3;
 (_hio_read16l($8)|0);
 $9 = $3;
 $10 = (_hio_read32b($9)|0);
 $magic = $10;
 while(1) {
  $11 = $magic;
  $12 = ($11|0)!=(1330662472);
  $13 = $3;
  $14 = (_hio_read32l($13)|0);
  if (!($12)) {
   break;
  }
  $skip = $14;
  $15 = $3;
  $16 = $skip;
  (_hio_seek($15,$16,1)|0);
  $17 = $3;
  $18 = (_hio_read32b($17)|0);
  $magic = $18;
 }
 $19 = $3;
 (_hio_seek($19,9,1)|0);
 $20 = $3;
 $21 = (_hio_read8($20)|0);
 $c = $21;
 $i = 0;
 while(1) {
  $22 = $c;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(1);
  if (!($24)) {
   break;
  }
  $25 = $c;
  $26 = $25 << 24 >> 24;
  if ((($26|0) == 14)) {
   $49 = $3;
   (_hio_read8($49)|0);
   $50 = $3;
   (_hio_read8($50)|0);
  } else if ((($26|0) == 7)) {
   $27 = $3;
   $28 = (_hio_read8($27)|0);
   $29 = $28&255;
   $30 = $mod;
   $31 = ((($30)) + 148|0);
   HEAP32[$31>>2] = $29;
   $32 = $3;
   (_hio_read8($32)|0);
   $33 = $3;
   $34 = (_hio_read8($33)|0);
   $35 = $34&255;
   $36 = $mod;
   $37 = ((($36)) + 152|0);
   HEAP32[$37>>2] = $35;
  } else if ((($26|0) == 13)) {
   $38 = $3;
   (_hio_read8($38)|0);
   $39 = $3;
   $40 = (_hio_read8($39)|0);
   $41 = $40&255;
   $42 = $i;
   $43 = $mod;
   $44 = ((($43)) + 184|0);
   $45 = (($44) + (($42*12)|0)|0);
   HEAP32[$45>>2] = $41;
   $46 = $3;
   (_hio_read8($46)|0);
   $47 = $i;
   $48 = (($47) + 1)|0;
   $i = $48;
  } else {
   label = 10;
   break;
  }
  $51 = $3;
  $52 = (_hio_read8($51)|0);
  $c = $52;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $75 = $0;
  STACKTOP = sp;return ($75|0);
 }
 while(1) {
  $53 = $c;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)==(1);
  if (!($55)) {
   break;
  }
  $56 = $data;
  $57 = ((($56)) + 16|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $mod;
  $60 = ((($59)) + 156|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61<<3;
  $63 = (($58) + ($62)|0);
  $64 = $data;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  $67 = $66 ? 8 : 4;
  $68 = $3;
  (_hio_read($63,1,$67,$68)|0);
  $69 = $mod;
  $70 = ((($69)) + 156|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$70>>2] = $72;
  $73 = $3;
  $74 = (_hio_read8($73)|0);
  $c = $74;
 }
 $0 = 0;
 $75 = $0;
 STACKTOP = sp;return ($75|0);
}
function _get_dsmp($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $finetune = 0, $i = 0, $mod = 0, $srate = 0;
 var $sub = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 (_hio_read8($7)|0);
 $8 = $3;
 (_hio_seek($8,8,1)|0);
 $9 = $3;
 $10 = $data;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 $13 = $12 ? 8 : 4;
 (_hio_seek($9,$13,1)|0);
 $14 = $data;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $i = $16;
 $17 = $mod;
 $18 = $i;
 $19 = (_subinstrument_alloc($17,$18,1)|0);
 $20 = ($19|0)<(0);
 if ($20) {
  $0 = -1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 $21 = $i;
 $22 = $mod;
 $23 = ((($22)) + 176|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + (($21*764)|0)|0);
 $xxi = $25;
 $26 = $xxi;
 $27 = ((($26)) + 756|0);
 $28 = HEAP32[$27>>2]|0;
 $sub = $28;
 $29 = $i;
 $30 = $mod;
 $31 = ((($30)) + 180|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + (($29*52)|0)|0);
 $xxs = $33;
 $34 = $xxi;
 $35 = $3;
 (_hio_read($34,1,31,$35)|0);
 $36 = $xxi;
 (_adjust_string($36)|0);
 $37 = $3;
 (_hio_seek($37,8,1)|0);
 $38 = $3;
 (_hio_read8($38)|0);
 $39 = $3;
 (_hio_read8($39)|0);
 $40 = $3;
 $41 = (_hio_read32l($40)|0);
 $42 = $xxs;
 $43 = ((($42)) + 32|0);
 HEAP32[$43>>2] = $41;
 $44 = $3;
 $45 = (_hio_read32l($44)|0);
 $46 = $xxs;
 $47 = ((($46)) + 36|0);
 HEAP32[$47>>2] = $45;
 $48 = $3;
 $49 = (_hio_read32l($48)|0);
 $50 = $xxs;
 $51 = ((($50)) + 40|0);
 HEAP32[$51>>2] = $49;
 $52 = $xxs;
 $53 = ((($52)) + 40|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)>(2);
 $56 = $55 ? 2 : 0;
 $57 = $xxs;
 $58 = ((($57)) + 44|0);
 HEAP32[$58>>2] = $56;
 $59 = $3;
 (_hio_read16l($59)|0);
 $60 = $xxs;
 $61 = ((($60)) + 40|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)<(0);
 if ($63) {
  $64 = $xxs;
  $65 = ((($64)) + 40|0);
  HEAP32[$65>>2] = 0;
 }
 $66 = $xxs;
 $67 = ((($66)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)>(0);
 if ($69) {
  $70 = $xxi;
  $71 = ((($70)) + 36|0);
  HEAP32[$71>>2] = 1;
 }
 $finetune = 0;
 $72 = $data;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $xxs;
  $76 = ((($75)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)>(2);
  if ($78) {
   $79 = $xxs;
   $80 = ((($79)) + 32|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) - 2)|0;
   HEAP32[$80>>2] = $82;
  }
  $83 = $xxs;
  $84 = ((($83)) + 40|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)>(2);
  if ($86) {
   $87 = $xxs;
   $88 = ((($87)) + 40|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) - 2)|0;
   HEAP32[$88>>2] = $90;
  }
  $91 = $3;
  $92 = (_hio_read8s($91)|0);
  $93 = $92 << 24 >> 24;
  $94 = $93 << 4;
  $95 = $94&255;
  $96 = $95 << 24 >> 24;
  $finetune = $96;
 }
 $97 = $3;
 $98 = (_hio_read8($97)|0);
 $99 = $98&255;
 $100 = (($99|0) / 2)&-1;
 $101 = (($100) + 1)|0;
 $102 = $sub;
 HEAP32[$102>>2] = $101;
 $103 = $3;
 (_hio_read32l($103)|0);
 $104 = $sub;
 $105 = ((($104)) + 8|0);
 HEAP32[$105>>2] = 128;
 $106 = $i;
 $107 = $sub;
 $108 = ((($107)) + 40|0);
 HEAP32[$108>>2] = $106;
 $109 = $3;
 $110 = (_hio_read32l($109)|0);
 $srate = $110;
 $111 = $srate;
 $112 = ($111*8363)|0;
 $113 = (($112|0) / 8448)&-1;
 $srate = $113;
 $114 = $srate;
 $115 = $sub;
 $116 = ((($115)) + 12|0);
 $117 = $sub;
 $118 = ((($117)) + 16|0);
 _c2spd_to_note($114,$116,$118);
 $119 = $finetune;
 $120 = $sub;
 $121 = ((($120)) + 16|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + ($119))|0;
 HEAP32[$121>>2] = $123;
 $124 = $3;
 (_hio_seek($124,16,1)|0);
 $125 = $1;
 $126 = $3;
 $127 = $xxs;
 $128 = (_load_sample($125,$126,4,$127,0)|0);
 $129 = ($128|0)<(0);
 if ($129) {
  $0 = -1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 } else {
  $130 = $data;
  $131 = ((($130)) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 1)|0;
  HEAP32[$131>>2] = $133;
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function _get_pbod252($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $chan = 0, $cond = 0, $data = 0, $dummy = 0, $event = 0, $flag = 0, $fxp = 0, $fxt = 0, $i = 0, $mod = 0, $note = 0, $note1 = 0, $r = 0, $rowlen = 0, $rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp + 56|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $i = $9;
 $10 = $3;
 (_hio_read32l($10)|0);
 $11 = $data;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $i;
 $15 = $14<<3;
 $16 = (($13) + ($15)|0);
 $17 = $data;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = $19 ? 8 : 4;
 $21 = $3;
 (_hio_read($16,1,$20,$21)|0);
 $22 = $3;
 $23 = (_hio_read16l($22)|0);
 $24 = $23&65535;
 $rows = $24;
 $25 = $mod;
 $26 = $i;
 $27 = $rows;
 $28 = (_pattern_tracks_alloc($25,$26,$27)|0);
 $29 = ($28|0)<(0);
 if ($29) {
  $0 = -1;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $r = 0;
 L5: while(1) {
  $30 = $3;
  $31 = (_hio_read16l($30)|0);
  $32 = $31&65535;
  $33 = (($32) - 2)|0;
  $rowlen = $33;
  while(1) {
   $34 = $rowlen;
   $35 = ($34|0)>(0);
   if (!($35)) {
    break;
   }
   $36 = $3;
   $37 = (_hio_read8($36)|0);
   $flag = $37;
   $38 = $rowlen;
   $39 = ($38|0)==(1);
   if ($39) {
    break;
   }
   $40 = $3;
   $41 = (_hio_read8($40)|0);
   $chan = $41;
   $42 = $rowlen;
   $43 = (($42) - 2)|0;
   $rowlen = $43;
   $44 = $chan;
   $45 = $44&255;
   $46 = $mod;
   $47 = ((($46)) + 136|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)<($48|0);
   if ($49) {
    $50 = $r;
    $51 = $chan;
    $52 = $51&255;
    $53 = $i;
    $54 = $1;
    $55 = ((($54)) + 168|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + ($53<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($58)) + 4|0);
    $60 = (($59) + ($52<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $1;
    $63 = ((($62)) + 172|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($61<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 4|0);
    $68 = (($67) + ($50<<3)|0);
    $69 = $68;
   } else {
    $69 = $dummy;
   }
   $event = $69;
   $70 = $flag;
   $71 = $70&255;
   $72 = $71 & 128;
   $73 = ($72|0)!=(0);
   if ($73) {
    $74 = $3;
    $75 = (_hio_read8($74)|0);
    $note = $75;
    $76 = $rowlen;
    $77 = (($76) + -1)|0;
    $rowlen = $77;
    $78 = $data;
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)!=(0);
    $81 = $note;
    $82 = $81&255;
    if ($80) {
     $83 = (($82) + 36)|0;
     $84 = $83&255;
     $note = $84;
    } else {
     $85 = $82 >> 4;
     $86 = ($85*12)|0;
     $87 = $note;
     $88 = $87&255;
     $89 = $88 & 15;
     $90 = (($86) + ($89))|0;
     $91 = (($90) + 1)|0;
     $92 = (($91) + 12)|0;
     $93 = $92&255;
     $note = $93;
    }
    $94 = $note;
    $95 = $event;
    HEAP8[$95>>0] = $94;
   }
   $96 = $flag;
   $97 = $96&255;
   $98 = $97 & 64;
   $99 = ($98|0)!=(0);
   if ($99) {
    $100 = $3;
    $101 = (_hio_read8($100)|0);
    $102 = $101&255;
    $103 = (($102) + 1)|0;
    $104 = $103&255;
    $105 = $event;
    $106 = ((($105)) + 1|0);
    HEAP8[$106>>0] = $104;
    $107 = $rowlen;
    $108 = (($107) + -1)|0;
    $rowlen = $108;
   }
   $109 = $flag;
   $110 = $109&255;
   $111 = $110 & 32;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $3;
    $114 = (_hio_read8($113)|0);
    $115 = $114&255;
    $116 = (($115|0) / 2)&-1;
    $117 = (($116) + 1)|0;
    $118 = $117&255;
    $119 = $event;
    $120 = ((($119)) + 2|0);
    HEAP8[$120>>0] = $118;
    $121 = $rowlen;
    $122 = (($121) + -1)|0;
    $rowlen = $122;
   }
   $123 = $flag;
   $124 = $123&255;
   $125 = $124 & 16;
   $126 = ($125|0)!=(0);
   if (!($126)) {
    continue;
   }
   $127 = $3;
   $128 = (_hio_read8($127)|0);
   $fxt = $128;
   $129 = $3;
   $130 = (_hio_read8($129)|0);
   $fxp = $130;
   $131 = $rowlen;
   $132 = (($131) - 2)|0;
   $rowlen = $132;
   $133 = $fxt;
   $134 = $133&255;
   $135 = ($134|0)>=(64);
   L28: do {
    if ($135) {
     $136 = $fxp;
     $137 = $136&255;
     $138 = $137 >> 4;
     $cond = ($138|0)==(0);
     if (!($cond)) {
      label = 22;
      break L5;
     }
     $139 = $fxt;
     $140 = $139&255;
     $141 = $140 >> 4;
     $142 = ($141*12)|0;
     $143 = $fxt;
     $144 = $143&255;
     $145 = $144 & 15;
     $146 = (($142) + ($145))|0;
     $147 = (($146) + 1)|0;
     $148 = $147&255;
     $note1 = $148;
     $149 = $note1;
     $150 = $event;
     HEAP8[$150>>0] = $149;
     $fxt = 3;
     $151 = $fxp;
     $152 = $151&255;
     $153 = (($152) + 1)|0;
     $154 = $153<<1;
     $155 = $154&255;
     $fxp = $155;
    } else {
     $156 = $fxt;
     $157 = $156&255;
     do {
      switch ($157|0) {
      case 12:  {
       $fxt = 1;
       $179 = $fxp;
       $180 = $179&255;
       $181 = (($180) - 1)|0;
       $182 = (($181|0) / 2)&-1;
       $183 = $182&255;
       $fxp = $183;
       break L28;
       break;
      }
      case 21:  {
       $193 = $data;
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194|0)!=(0);
       $196 = $195 ? 4 : 172;
       $197 = $196&255;
       $fxt = $197;
       break L28;
       break;
      }
      case 52:  {
       $fxt = 13;
       break L28;
       break;
      }
      case 61:  {
       $fxt = 15;
       break L28;
       break;
      }
      case 2:  {
       $fxt = 10;
       $164 = $fxp;
       $165 = $164&255;
       $166 = (($165|0) / 2)&-1;
       $167 = $166 << 4;
       $168 = $167&255;
       $fxp = $168;
       break L28;
       break;
      }
      case 42:  {
       $fxt = 14;
       $198 = $fxp;
       $199 = $198&255;
       $200 = $199 & 15;
       $201 = 144 | $200;
       $202 = $201&255;
       $fxp = $202;
       break L28;
       break;
      }
      case 62:  {
       $fxt = 15;
       break L28;
       break;
      }
      case 51:  {
       $fxt = 11;
       break L28;
       break;
      }
      case 4:  {
       $fxt = 10;
       $175 = $fxp;
       $176 = $175&255;
       $177 = (($176|0) / 2)&-1;
       $178 = $177&255;
       $fxp = $178;
       break L28;
       break;
      }
      case 41:  {
       $203 = $3;
       (_hio_read16l($203)|0);
       $204 = $rowlen;
       $205 = (($204) - 2)|0;
       $rowlen = $205;
       break L28;
       break;
      }
      case 1:  {
       $fxt = 14;
       $158 = $fxp;
       $159 = $158&255;
       $160 = (($159|0) / 2)&-1;
       $161 = $160 & 15;
       $162 = 160 | $161;
       $163 = $162&255;
       $fxp = $163;
       break L28;
       break;
      }
      case 3:  {
       $fxt = 14;
       $169 = $fxp;
       $170 = $169&255;
       $171 = (($170|0) / 2)&-1;
       $172 = $171 & 15;
       $173 = 176 | $172;
       $174 = $173&255;
       $fxp = $174;
       break L28;
       break;
      }
      case 14:  {
       $fxt = 2;
       $184 = $fxp;
       $185 = $184&255;
       $186 = (($185) - 1)|0;
       $187 = (($186|0) / 2)&-1;
       $188 = $187&255;
       $fxp = $188;
       break L28;
       break;
      }
      case 15:  {
       $fxt = 3;
       $189 = $fxp;
       $190 = $189&255;
       $191 = (($190|0) / 4)&-1;
       $192 = $191&255;
       $fxp = $192;
       break L28;
       break;
      }
      default: {
       $fxp = 0;
       $fxt = 0;
       break L28;
      }
      }
     } while(0);
    }
   } while(0);
   $206 = $fxt;
   $207 = $event;
   $208 = ((($207)) + 3|0);
   HEAP8[$208>>0] = $206;
   $209 = $fxp;
   $210 = $event;
   $211 = ((($210)) + 4|0);
   HEAP8[$211>>0] = $209;
  }
  $212 = $r;
  $213 = (($212) + 1)|0;
  $r = $213;
  $214 = $r;
  $215 = $rows;
  $216 = ($214|0)<($215|0);
  if (!($216)) {
   label = 41;
   break;
  }
 }
 if ((label|0) == 22) {
  $0 = -1;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 else if ((label|0) == 41) {
  $217 = $data;
  $218 = ((($217)) + 4|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = (($219) + 1)|0;
  HEAP32[$218>>2] = $220;
  $0 = 0;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 return (0)|0;
}
function _amf_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $or$cond = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,3,$4)|0);
 $6 = ($5>>>0)<(3);
 if ($6) {
  $0 = -1;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 $7 = HEAP8[$buf>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8|0)!=(65);
 if (!($9)) {
  $10 = ((($buf)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(77);
  if (!($13)) {
   $14 = ((($buf)) + 2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)!=(70);
   if (!($17)) {
    $18 = $1;
    $19 = (_hio_read8($18)|0);
    $20 = $19&255;
    $ver = $20;
    $21 = $ver;
    $22 = ($21|0)<(10);
    $23 = $ver;
    $24 = ($23|0)>(14);
    $or$cond = $22 | $24;
    if ($or$cond) {
     $0 = -1;
     $27 = $0;
     STACKTOP = sp;return ($27|0);
    } else {
     $25 = $1;
     $26 = $2;
     _read_title($25,$26,32);
     $0 = 0;
     $27 = $0;
     STACKTOP = sp;return ($27|0);
    }
   }
  }
 }
 $0 = -1;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function _amf_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0;
 var $c2spd = 0, $end = 0, $event = 0, $fxp = 0, $fxt = 0, $i = 0, $j = 0, $k = 0, $len = 0, $mod = 0, $newtrk = 0, $pos = 0, $size = 0, $start1 = 0, $t = 0, $t1 = 0, $t2 = 0, $t23 = 0, $t3 = 0, $trkmap = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 96|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($buf,1,3,$7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $ver = $10;
 $11 = $2;
 (_hio_read($buf,1,32,$11)|0);
 $12 = $mod;
 (_strncpy(($12|0),($buf|0),32)|0);
 $13 = $1;
 $14 = $ver;
 $15 = (($14|0) / 10)&-1;
 $16 = $ver;
 $17 = (($16|0) % 10)&-1;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 _set_type($13,5560,$vararg_buffer);
 $18 = $2;
 $19 = (_hio_read8($18)|0);
 $20 = $19&255;
 $21 = $mod;
 $22 = ((($21)) + 140|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = $24&255;
 $26 = $mod;
 $27 = ((($26)) + 156|0);
 HEAP32[$27>>2] = $25;
 $28 = $2;
 $29 = (_hio_read16l($28)|0);
 $30 = $29&65535;
 $31 = $mod;
 $32 = ((($31)) + 132|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 $34 = (_hio_read8($33)|0);
 $35 = $34&255;
 $36 = $mod;
 $37 = ((($36)) + 136|0);
 HEAP32[$37>>2] = $35;
 $38 = $mod;
 $39 = ((($38)) + 140|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = $mod;
  $43 = ((($42)) + 156|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0);
  if (!($45)) {
   $46 = $mod;
   $47 = ((($46)) + 132|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   if (!($49)) {
    $50 = $mod;
    $51 = ((($50)) + 136|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if (!($53)) {
     $54 = $mod;
     $55 = ((($54)) + 140|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $mod;
     $58 = ((($57)) + 144|0);
     HEAP32[$58>>2] = $56;
     $59 = $mod;
     $60 = ((($59)) + 156|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $mod;
     $63 = ((($62)) + 128|0);
     HEAP32[$63>>2] = $61;
     $64 = $ver;
     $65 = ($64|0)==(10);
     if ($65) {
      $66 = $2;
      (_hio_read($buf,1,16,$66)|0);
     }
     $67 = $ver;
     $68 = ($67|0)>=(13);
     if ($68) {
      $69 = $2;
      (_hio_read($buf,1,32,$69)|0);
      $i = 0;
      while(1) {
       $70 = $i;
       $71 = ($70|0)<(32);
       if (!($71)) {
        break;
       }
       $72 = $i;
       $73 = (($buf) + ($72)|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = $74 << 24 >> 24;
       $76 = $75<<1;
       $77 = (128 + ($76))|0;
       $78 = $mod;
       $79 = ((($78)) + 184|0);
       HEAP32[$79>>2] = $77;
       $80 = $i;
       $81 = (($80) + 1)|0;
       $i = $81;
      }
      $82 = $2;
      $83 = (_hio_read8($82)|0);
      $84 = $83&255;
      $85 = $mod;
      $86 = ((($85)) + 152|0);
      HEAP32[$86>>2] = $84;
      $87 = $2;
      $88 = (_hio_read8($87)|0);
      $89 = $88&255;
      $90 = $mod;
      $91 = ((($90)) + 148|0);
      HEAP32[$91>>2] = $89;
     } else {
      $92 = $ver;
      $93 = ($92|0)>=(11);
      if ($93) {
       $94 = $2;
       (_hio_read($buf,1,16,$94)|0);
      }
     }
     $i = 0;
     while(1) {
      $95 = $i;
      $96 = $mod;
      $97 = ((($96)) + 156|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($95|0)<($98|0);
      if (!($99)) {
       break;
      }
      $100 = $i;
      $101 = $100&255;
      $102 = $i;
      $103 = $mod;
      $104 = ((($103)) + 952|0);
      $105 = (($104) + ($102)|0);
      HEAP8[$105>>0] = $101;
      $106 = $i;
      $107 = (($106) + 1)|0;
      $i = $107;
     }
     $108 = $mod;
     $109 = ((($108)) + 128|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (_calloc(4,$110)|0);
     $112 = $mod;
     $113 = ((($112)) + 168|0);
     HEAP32[$113>>2] = $111;
     $114 = $mod;
     $115 = ((($114)) + 168|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $0 = -1;
      $697 = $0;
      STACKTOP = sp;return ($697|0);
     }
     $i = 0;
     while(1) {
      $118 = $i;
      $119 = $mod;
      $120 = ((($119)) + 128|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($118|0)<($121|0);
      $123 = $mod;
      if (!($122)) {
       label = 32;
       break;
      }
      $124 = $i;
      $125 = (_pattern_alloc($123,$124)|0);
      $126 = ($125|0)<(0);
      if ($126) {
       label = 23;
       break;
      }
      $127 = $ver;
      $128 = ($127|0)>=(14);
      if ($128) {
       $129 = $2;
       $130 = (_hio_read16l($129)|0);
       $131 = $130&65535;
       $138 = $131;
      } else {
       $138 = 64;
      }
      $132 = $i;
      $133 = $mod;
      $134 = ((($133)) + 168|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (($135) + ($132<<2)|0);
      $137 = HEAP32[$136>>2]|0;
      HEAP32[$137>>2] = $138;
      $139 = $i;
      $140 = $mod;
      $141 = ((($140)) + 168|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($142) + ($139<<2)|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = HEAP32[$144>>2]|0;
      $146 = ($145|0)>(256);
      if ($146) {
       label = 27;
       break;
      }
      $j = 0;
      while(1) {
       $147 = $j;
       $148 = $mod;
       $149 = ((($148)) + 136|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($147|0)<($150|0);
       if (!($151)) {
        break;
       }
       $152 = $2;
       $153 = (_hio_read16l($152)|0);
       $t = $153;
       $154 = $t;
       $155 = $154&65535;
       $156 = $j;
       $157 = $i;
       $158 = $mod;
       $159 = ((($158)) + 168|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = (($160) + ($157<<2)|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ((($162)) + 4|0);
       $164 = (($163) + ($156<<2)|0);
       HEAP32[$164>>2] = $155;
       $165 = $j;
       $166 = (($165) + 1)|0;
       $j = $166;
      }
      $167 = $i;
      $168 = (($167) + 1)|0;
      $i = $168;
     }
     if ((label|0) == 23) {
      $0 = -1;
      $697 = $0;
      STACKTOP = sp;return ($697|0);
     }
     else if ((label|0) == 27) {
      $0 = -1;
      $697 = $0;
      STACKTOP = sp;return ($697|0);
     }
     else if ((label|0) == 32) {
      $169 = (_instrument_init($123)|0);
      $170 = ($169|0)<(0);
      if ($170) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      $171 = $ver;
      $172 = ($171|0)<=(10);
      if ($172) {
       $173 = $2;
       $174 = (_hio_tell($173)|0);
       $pos = $174;
       $i = 0;
       while(1) {
        $175 = $i;
        $176 = $mod;
        $177 = ((($176)) + 140|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($175|0)<($178|0);
        if (!($179)) {
         break;
        }
        $180 = $2;
        $181 = (_hio_read8($180)|0);
        $b = $181;
        $182 = $b;
        $183 = $182&255;
        $184 = ($183|0)!=(0);
        if ($184) {
         $185 = $b;
         $186 = $185&255;
         $187 = ($186|0)!=(1);
         if ($187) {
          label = 39;
          break;
         }
        }
        $188 = $2;
        (_hio_seek($188,45,1)|0);
        $189 = $2;
        $190 = (_hio_read32l($189)|0);
        $191 = ($190>>>0)>(1048576);
        if ($191) {
         label = 41;
         break;
        }
        $192 = $2;
        $193 = (_hio_read32l($192)|0);
        $len = $193;
        $194 = $len;
        $195 = ($194>>>0)>(1048576);
        if ($195) {
         label = 43;
         break;
        }
        $196 = $2;
        $197 = (_hio_read16l($196)|0);
        $198 = $197&65535;
        $199 = ($198|0)==(0);
        if ($199) {
         label = 45;
         break;
        }
        $200 = $2;
        $201 = (_hio_read8($200)|0);
        $202 = $201&255;
        $203 = ($202|0)>(64);
        if ($203) {
         label = 47;
         break;
        }
        $204 = $2;
        $205 = (_hio_read32l($204)|0);
        $start1 = $205;
        $206 = $start1;
        $207 = $len;
        $208 = ($206>>>0)>($207>>>0);
        if ($208) {
         label = 49;
         break;
        }
        $209 = $2;
        $210 = (_hio_read32l($209)|0);
        $end = $210;
        $211 = $end;
        $212 = $len;
        $213 = ($211>>>0)>($212>>>0);
        if ($213) {
         label = 51;
         break;
        }
        $214 = $i;
        $215 = (($214) + 1)|0;
        $i = $215;
       }
       if ((label|0) == 39) {
        $ver = 9;
       }
       else if ((label|0) == 41) {
        $ver = 9;
       }
       else if ((label|0) == 43) {
        $ver = 9;
       }
       else if ((label|0) == 45) {
        $ver = 9;
       }
       else if ((label|0) == 47) {
        $ver = 9;
       }
       else if ((label|0) == 49) {
        $ver = 9;
       }
       else if ((label|0) == 51) {
        $ver = 9;
       }
       $216 = $2;
       $217 = $pos;
       (_hio_seek($216,$217,0)|0);
      }
      $i = 0;
      while(1) {
       $218 = $i;
       $219 = $mod;
       $220 = ((($219)) + 140|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = ($218|0)<($221|0);
       $223 = $mod;
       if (!($222)) {
        break;
       }
       $224 = $i;
       $225 = (_subinstrument_alloc($223,$224,1)|0);
       $226 = ($225|0)<(0);
       if ($226) {
        label = 57;
        break;
       }
       $227 = $2;
       (_hio_read8($227)|0);
       $228 = $2;
       (_hio_read($buf,1,32,$228)|0);
       $229 = $mod;
       $230 = $i;
       (_instrument_name($229,$230,$buf,32)|0);
       $231 = $2;
       (_hio_read($buf,1,13,$231)|0);
       $232 = $2;
       (_hio_read32l($232)|0);
       $233 = $i;
       $234 = $mod;
       $235 = ((($234)) + 176|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = (($236) + (($233*764)|0)|0);
       $238 = ((($237)) + 36|0);
       HEAP32[$238>>2] = 1;
       $239 = $i;
       $240 = $i;
       $241 = $mod;
       $242 = ((($241)) + 176|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = (($243) + (($240*764)|0)|0);
       $245 = ((($244)) + 756|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ((($246)) + 40|0);
       HEAP32[$247>>2] = $239;
       $248 = $i;
       $249 = $mod;
       $250 = ((($249)) + 176|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = (($251) + (($248*764)|0)|0);
       $253 = ((($252)) + 756|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = ((($254)) + 8|0);
       HEAP32[$255>>2] = 128;
       $256 = $2;
       $257 = (_hio_read32l($256)|0);
       $258 = $i;
       $259 = $mod;
       $260 = ((($259)) + 180|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (($261) + (($258*52)|0)|0);
       $263 = ((($262)) + 32|0);
       HEAP32[$263>>2] = $257;
       $264 = $2;
       $265 = (_hio_read16l($264)|0);
       $266 = $265&65535;
       $c2spd = $266;
       $267 = $c2spd;
       $268 = $i;
       $269 = $mod;
       $270 = ((($269)) + 176|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = (($271) + (($268*764)|0)|0);
       $273 = ((($272)) + 756|0);
       $274 = HEAP32[$273>>2]|0;
       $275 = ((($274)) + 12|0);
       $276 = $i;
       $277 = $mod;
       $278 = ((($277)) + 176|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = (($279) + (($276*764)|0)|0);
       $281 = ((($280)) + 756|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = ((($282)) + 16|0);
       _c2spd_to_note($267,$275,$283);
       $284 = $2;
       $285 = (_hio_read8($284)|0);
       $286 = $285&255;
       $287 = $i;
       $288 = $mod;
       $289 = ((($288)) + 176|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = (($290) + (($287*764)|0)|0);
       $292 = ((($291)) + 756|0);
       $293 = HEAP32[$292>>2]|0;
       HEAP32[$293>>2] = $286;
       $294 = $ver;
       $295 = ($294|0)<(10);
       $296 = $2;
       if ($295) {
        $297 = (_hio_read16l($296)|0);
        $298 = $297&65535;
        $299 = $i;
        $300 = $mod;
        $301 = ((($300)) + 180|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = (($302) + (($299*52)|0)|0);
        $304 = ((($303)) + 36|0);
        HEAP32[$304>>2] = $298;
        $305 = $i;
        $306 = $mod;
        $307 = ((($306)) + 180|0);
        $308 = HEAP32[$307>>2]|0;
        $309 = (($308) + (($305*52)|0)|0);
        $310 = ((($309)) + 32|0);
        $311 = HEAP32[$310>>2]|0;
        $312 = $i;
        $313 = $mod;
        $314 = ((($313)) + 180|0);
        $315 = HEAP32[$314>>2]|0;
        $316 = (($315) + (($312*52)|0)|0);
        $317 = ((($316)) + 40|0);
        HEAP32[$317>>2] = $311;
       } else {
        $318 = (_hio_read32l($296)|0);
        $319 = $i;
        $320 = $mod;
        $321 = ((($320)) + 180|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = (($322) + (($319*52)|0)|0);
        $324 = ((($323)) + 36|0);
        HEAP32[$324>>2] = $318;
        $325 = $2;
        $326 = (_hio_read32l($325)|0);
        $327 = $i;
        $328 = $mod;
        $329 = ((($328)) + 180|0);
        $330 = HEAP32[$329>>2]|0;
        $331 = (($330) + (($327*52)|0)|0);
        $332 = ((($331)) + 40|0);
        HEAP32[$332>>2] = $326;
       }
       $333 = $ver;
       $334 = ($333|0)<(10);
       $335 = $i;
       $336 = $mod;
       $337 = ((($336)) + 180|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = (($338) + (($335*52)|0)|0);
       if ($334) {
        $340 = ((($339)) + 36|0);
        $341 = HEAP32[$340>>2]|0;
        $342 = ($341|0)>(0);
        $343 = $342 ? 2 : 0;
        $344 = $i;
        $345 = $mod;
        $346 = ((($345)) + 180|0);
        $347 = HEAP32[$346>>2]|0;
        $348 = (($347) + (($344*52)|0)|0);
        $349 = ((($348)) + 44|0);
        HEAP32[$349>>2] = $343;
       } else {
        $350 = ((($339)) + 40|0);
        $351 = HEAP32[$350>>2]|0;
        $352 = $i;
        $353 = $mod;
        $354 = ((($353)) + 180|0);
        $355 = HEAP32[$354>>2]|0;
        $356 = (($355) + (($352*52)|0)|0);
        $357 = ((($356)) + 36|0);
        $358 = HEAP32[$357>>2]|0;
        $359 = ($351|0)>($358|0);
        $360 = $359 ? 2 : 0;
        $361 = $i;
        $362 = $mod;
        $363 = ((($362)) + 180|0);
        $364 = HEAP32[$363>>2]|0;
        $365 = (($364) + (($361*52)|0)|0);
        $366 = ((($365)) + 44|0);
        HEAP32[$366>>2] = $360;
       }
       $367 = $i;
       $368 = (($367) + 1)|0;
       $i = $368;
      }
      if ((label|0) == 57) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      $369 = ((($223)) + 132|0);
      $370 = HEAP32[$369>>2]|0;
      $371 = (_calloc(4,$370)|0);
      $trkmap = $371;
      $372 = $trkmap;
      $373 = ($372|0)==(0|0);
      if ($373) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      $newtrk = 0;
      $i = 0;
      while(1) {
       $374 = $i;
       $375 = $mod;
       $376 = ((($375)) + 132|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = ($374|0)<($377|0);
       if (!($378)) {
        break;
       }
       $379 = $2;
       $380 = (_hio_read16l($379)|0);
       $t2 = $380;
       $381 = $t2;
       $382 = $381&65535;
       $383 = $i;
       $384 = $trkmap;
       $385 = (($384) + ($383<<2)|0);
       HEAP32[$385>>2] = $382;
       $386 = $t2;
       $387 = $386&65535;
       $388 = $newtrk;
       $389 = ($387|0)>($388|0);
       if ($389) {
        $390 = $t2;
        $391 = $390&65535;
        $newtrk = $391;
       }
       $392 = $i;
       $393 = (($392) + 1)|0;
       $i = $393;
      }
      $i = 0;
      while(1) {
       $394 = $i;
       $395 = $mod;
       $396 = ((($395)) + 128|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = ($394|0)<($397|0);
       if (!($398)) {
        break;
       }
       $j = 0;
       while(1) {
        $399 = $j;
        $400 = $mod;
        $401 = ((($400)) + 136|0);
        $402 = HEAP32[$401>>2]|0;
        $403 = ($399|0)<($402|0);
        if (!($403)) {
         break;
        }
        $404 = $j;
        $405 = $i;
        $406 = $mod;
        $407 = ((($406)) + 168|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = (($408) + ($405<<2)|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = ((($410)) + 4|0);
        $412 = (($411) + ($404<<2)|0);
        $413 = HEAP32[$412>>2]|0;
        $414 = (($413) - 1)|0;
        $k = $414;
        $415 = $k;
        $416 = ($415|0)<(0);
        if ($416) {
         label = 78;
        } else {
         $417 = $k;
         $418 = $mod;
         $419 = ((($418)) + 132|0);
         $420 = HEAP32[$419>>2]|0;
         $421 = ($417|0)>=($420|0);
         if ($421) {
          label = 78;
         }
        }
        if ((label|0) == 78) {
         label = 0;
         $k = 0;
        }
        $422 = $k;
        $423 = $trkmap;
        $424 = (($423) + ($422<<2)|0);
        $425 = HEAP32[$424>>2]|0;
        $426 = $j;
        $427 = $i;
        $428 = $mod;
        $429 = ((($428)) + 168|0);
        $430 = HEAP32[$429>>2]|0;
        $431 = (($430) + ($427<<2)|0);
        $432 = HEAP32[$431>>2]|0;
        $433 = ((($432)) + 4|0);
        $434 = (($433) + ($426<<2)|0);
        HEAP32[$434>>2] = $425;
        $435 = $j;
        $436 = (($435) + 1)|0;
        $j = $436;
       }
       $437 = $i;
       $438 = (($437) + 1)|0;
       $i = $438;
      }
      $439 = $newtrk;
      $440 = $mod;
      $441 = ((($440)) + 132|0);
      HEAP32[$441>>2] = $439;
      $442 = $trkmap;
      _free($442);
      $443 = $mod;
      $444 = ((($443)) + 132|0);
      $445 = HEAP32[$444>>2]|0;
      $446 = (($445) + 1)|0;
      HEAP32[$444>>2] = $446;
      $447 = $mod;
      $448 = ((($447)) + 132|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = (_calloc(4,$449)|0);
      $451 = $mod;
      $452 = ((($451)) + 172|0);
      HEAP32[$452>>2] = $450;
      $453 = $mod;
      $454 = ((($453)) + 172|0);
      $455 = HEAP32[$454>>2]|0;
      $456 = ($455|0)==(0|0);
      if ($456) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      $457 = $mod;
      $458 = (_track_alloc($457,0,64)|0);
      $459 = ($458|0)<(0);
      if ($459) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      $i = 1;
      L120: while(1) {
       $460 = $i;
       $461 = $mod;
       $462 = ((($461)) + 132|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = ($460|0)<($463|0);
       if (!($464)) {
        label = 150;
        break;
       }
       $465 = $mod;
       $466 = $i;
       $467 = (_track_alloc($465,$466,64)|0);
       $468 = ($467|0)<(0);
       if ($468) {
        label = 88;
        break;
       }
       $469 = $2;
       $470 = (_hio_read24l($469)|0);
       $size = $470;
       $j = 0;
       L124: while(1) {
        $471 = $j;
        $472 = $size;
        $473 = ($471|0)<($472|0);
        if (!($473)) {
         break;
        }
        $474 = $2;
        $475 = (_hio_read8($474)|0);
        $t1 = $475;
        $476 = $2;
        $477 = (_hio_read8($476)|0);
        $t23 = $477;
        $478 = $2;
        $479 = (_hio_read8($478)|0);
        $t3 = $479;
        $480 = $t1;
        $481 = $480&255;
        $482 = ($481|0)==(255);
        do {
         if ($482) {
          $483 = $t23;
          $484 = $483&255;
          $485 = ($484|0)==(255);
          if (!($485)) {
           break;
          }
          $486 = $t3;
          $487 = $486&255;
          $488 = ($487|0)==(255);
          if ($488) {
           break L124;
          }
         }
        } while(0);
        $489 = $t1;
        $490 = $489&255;
        $491 = $i;
        $492 = $mod;
        $493 = ((($492)) + 172|0);
        $494 = HEAP32[$493>>2]|0;
        $495 = (($494) + ($491<<2)|0);
        $496 = HEAP32[$495>>2]|0;
        $497 = HEAP32[$496>>2]|0;
        $498 = ($490|0)>=($497|0);
        if ($498) {
         label = 95;
         break L120;
        }
        $499 = $t1;
        $500 = $499&255;
        $501 = $i;
        $502 = $mod;
        $503 = ((($502)) + 172|0);
        $504 = HEAP32[$503>>2]|0;
        $505 = (($504) + ($501<<2)|0);
        $506 = HEAP32[$505>>2]|0;
        $507 = ((($506)) + 4|0);
        $508 = (($507) + ($500<<3)|0);
        $event = $508;
        $509 = $t23;
        $510 = $509&255;
        $511 = ($510|0)<(127);
        $512 = $t23;
        $513 = $512&255;
        do {
         if ($511) {
          $514 = ($513|0)>(0);
          if ($514) {
           $515 = $t23;
           $516 = $515&255;
           $517 = (($516) + 1)|0;
           $518 = $517&255;
           $519 = $event;
           HEAP8[$519>>0] = $518;
          }
          $520 = $t3;
          $521 = $event;
          $522 = ((($521)) + 2|0);
          HEAP8[$522>>0] = $520;
         } else {
          $523 = ($513|0)==(127);
          if ($523) {
           $524 = $t1;
           $525 = $524&255;
           $526 = ($525|0)==(0);
           if ($526) {
            label = 103;
            break L120;
           }
           $527 = $t1;
           $528 = $527&255;
           $529 = ($528|0)>(256);
           if ($529) {
            label = 103;
            break L120;
           }
           $530 = $event;
           $531 = $t1;
           $532 = $531&255;
           $533 = (($532) - 1)|0;
           $534 = $i;
           $535 = $mod;
           $536 = ((($535)) + 172|0);
           $537 = HEAP32[$536>>2]|0;
           $538 = (($537) + ($534<<2)|0);
           $539 = HEAP32[$538>>2]|0;
           $540 = ((($539)) + 4|0);
           $541 = (($540) + ($533<<3)|0);
           ;HEAP8[$530>>0]=HEAP8[$541>>0]|0;HEAP8[$530+1>>0]=HEAP8[$541+1>>0]|0;HEAP8[$530+2>>0]=HEAP8[$541+2>>0]|0;HEAP8[$530+3>>0]=HEAP8[$541+3>>0]|0;HEAP8[$530+4>>0]=HEAP8[$541+4>>0]|0;HEAP8[$530+5>>0]=HEAP8[$541+5>>0]|0;HEAP8[$530+6>>0]=HEAP8[$541+6>>0]|0;HEAP8[$530+7>>0]=HEAP8[$541+7>>0]|0;
           break;
          }
          $542 = $t23;
          $543 = $542&255;
          $544 = ($543|0)==(128);
          if ($544) {
           $545 = $t3;
           $546 = $545&255;
           $547 = (($546) + 1)|0;
           $548 = $547&255;
           $549 = $event;
           $550 = ((($549)) + 1|0);
           HEAP8[$550>>0] = $548;
           break;
          }
          $fxt = 0;
          $fxp = 0;
          $551 = $t23;
          $552 = $551&255;
          L142: do {
           switch ($552|0) {
           case 139:  {
            $594 = $t3;
            $595 = $594 << 24 >> 24;
            $596 = ($595|0)>(0);
            $fxt = 6;
            $597 = $t3;
            if ($596) {
             $598 = $597&255;
             $599 = $598 << 4;
             $600 = $599&255;
             $fxp = $600;
             break L142;
            } else {
             $601 = $597 << 24 >> 24;
             $602 = (0 - ($601))|0;
             $603 = $602 & 15;
             $604 = $603&255;
             $fxp = $604;
             break L142;
            }
            break;
           }
           case 134:  {
            $fxt = 3;
            $579 = $t3;
            $fxp = $579;
            break;
           }
           case 135:  {
            $fxt = 7;
            $580 = $t3;
            $fxp = $580;
            break;
           }
           case 131:  {
            $565 = $t3;
            $566 = $event;
            $567 = ((($566)) + 2|0);
            HEAP8[$567>>0] = $565;
            break;
           }
           case 132:  {
            $568 = $t3;
            $569 = $568 << 24 >> 24;
            $570 = ($569|0)>=(0);
            if ($570) {
             $fxt = 2;
             $571 = $t3;
             $fxp = $571;
             break L142;
            }
            $572 = $t3;
            $573 = $572&255;
            $574 = ($573|0)==(128);
            $fxt = 1;
            if ($574) {
             $fxp = 0;
             break L142;
            } else {
             $575 = $t3;
             $576 = $575 << 24 >> 24;
             $577 = (0 - ($576))|0;
             $578 = $577&255;
             $fxp = $578;
             break L142;
            }
            break;
           }
           case 140:  {
            $fxt = 13;
            $605 = $t3;
            $fxp = $605;
            break;
           }
           case 151:  {
            $fxt = 8;
            $663 = $t3;
            $664 = $663 << 24 >> 24;
            $665 = $664<<1;
            $666 = (128 + ($665))|0;
            $667 = $666&255;
            $fxp = $667;
            break;
           }
           case 141:  {
            $fxt = 11;
            $606 = $t3;
            $fxp = $606;
            break;
           }
           case 149:  {
            $fxt = 15;
            $646 = $t3;
            $647 = $646&255;
            $648 = ($647|0)<(33);
            if ($648) {
             $t3 = 33;
            }
            $649 = $t3;
            $fxp = $649;
            break;
           }
           case 150:  {
            $650 = $t3;
            $651 = $650 << 24 >> 24;
            $652 = ($651|0)>(0);
            if ($652) {
             $fxt = 2;
             $653 = $fxp;
             $654 = $653&255;
             $655 = $654 & 15;
             $656 = 224 | $655;
             $657 = $656&255;
             $fxp = $657;
             break L142;
            } else {
             $fxt = 1;
             $658 = $fxp;
             $659 = $658&255;
             $660 = $659 & 15;
             $661 = 224 | $660;
             $662 = $661&255;
             $fxp = $662;
             break L142;
            }
            break;
           }
           case 138:  {
            $583 = $t3;
            $584 = $583 << 24 >> 24;
            $585 = ($584|0)>(0);
            $fxt = 5;
            $586 = $t3;
            if ($585) {
             $587 = $586&255;
             $588 = $587 << 4;
             $589 = $588&255;
             $fxp = $589;
             break L142;
            } else {
             $590 = $586 << 24 >> 24;
             $591 = (0 - ($590))|0;
             $592 = $591 & 15;
             $593 = $592&255;
             $fxp = $593;
             break L142;
            }
            break;
           }
           case 146:  {
            $623 = $t3;
            $624 = $623 << 24 >> 24;
            $625 = ($624|0)>(0);
            if ($625) {
             $fxt = 2;
             $626 = $fxp;
             $627 = $626&255;
             $628 = $627 & 15;
             $629 = 240 | $628;
             $630 = $629&255;
             $fxp = $630;
             break L142;
            } else {
             $fxt = 1;
             $631 = $fxp;
             $632 = $631&255;
             $633 = $632 & 15;
             $634 = 240 | $633;
             $635 = $634&255;
             $fxp = $635;
             break L142;
            }
            break;
           }
           case 143:  {
            $fxt = 14;
            $607 = $t3;
            $608 = $607&255;
            $609 = $608 & 15;
            $610 = 144 | $609;
            $611 = $610&255;
            $fxp = $611;
            break;
           }
           case 148:  {
            $fxt = 14;
            $641 = $t3;
            $642 = $641&255;
            $643 = $642 & 15;
            $644 = 192 | $643;
            $645 = $644&255;
            $fxp = $645;
            break;
           }
           case 145:  {
            $613 = $t3;
            $614 = $613 << 24 >> 24;
            $615 = ($614|0)>(0);
            $fxt = 14;
            $616 = $t3;
            $617 = $616&255;
            $618 = $617 & 15;
            if ($615) {
             $619 = 160 | $618;
             $620 = $619&255;
             $fxp = $620;
             break L142;
            } else {
             $621 = 176 | $618;
             $622 = $621&255;
             $fxp = $622;
             break L142;
            }
            break;
           }
           case 136:  {
            $fxt = 0;
            $581 = $t3;
            $fxp = $581;
            break;
           }
           case 137:  {
            $fxt = 4;
            $582 = $t3;
            $fxp = $582;
            break;
           }
           case 144:  {
            $fxt = 9;
            $612 = $t3;
            $fxp = $612;
            break;
           }
           case 129:  {
            $fxt = 15;
            $553 = $t3;
            $fxp = $553;
            break;
           }
           case 130:  {
            $554 = $t3;
            $555 = $554 << 24 >> 24;
            $556 = ($555|0)>(0);
            $fxt = 10;
            $557 = $t3;
            if ($556) {
             $558 = $557&255;
             $559 = $558 << 4;
             $560 = $559&255;
             $fxp = $560;
             break L142;
            } else {
             $561 = $557 << 24 >> 24;
             $562 = (0 - ($561))|0;
             $563 = $562 & 15;
             $564 = $563&255;
             $fxp = $564;
             break L142;
            }
            break;
           }
           case 147:  {
            $fxt = 14;
            $636 = $t3;
            $637 = $636&255;
            $638 = $637 & 15;
            $639 = 208 | $638;
            $640 = $639&255;
            $fxp = $640;
            break;
           }
           default: {
           }
           }
          } while(0);
          $668 = $fxt;
          $669 = $event;
          $670 = ((($669)) + 3|0);
          HEAP8[$670>>0] = $668;
          $671 = $fxp;
          $672 = $event;
          $673 = ((($672)) + 4|0);
          HEAP8[$673>>0] = $671;
         }
        } while(0);
        $674 = $j;
        $675 = (($674) + 1)|0;
        $j = $675;
       }
       $676 = $i;
       $677 = (($676) + 1)|0;
       $i = $677;
      }
      if ((label|0) == 88) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      else if ((label|0) == 95) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      else if ((label|0) == 103) {
       $0 = -1;
       $697 = $0;
       STACKTOP = sp;return ($697|0);
      }
      else if ((label|0) == 150) {
       $i = 0;
       while(1) {
        $678 = $i;
        $679 = $mod;
        $680 = ((($679)) + 140|0);
        $681 = HEAP32[$680>>2]|0;
        $682 = ($678|0)<($681|0);
        $683 = $1;
        if (!($682)) {
         label = 155;
         break;
        }
        $684 = $2;
        $685 = $i;
        $686 = $mod;
        $687 = ((($686)) + 180|0);
        $688 = HEAP32[$687>>2]|0;
        $689 = (($688) + (($685*52)|0)|0);
        $690 = (_load_sample($683,$684,2,$689,0)|0);
        $691 = ($690|0)<(0);
        if ($691) {
         label = 153;
         break;
        }
        $692 = $i;
        $693 = (($692) + 1)|0;
        $i = $693;
       }
       if ((label|0) == 153) {
        $0 = -1;
        $697 = $0;
        STACKTOP = sp;return ($697|0);
       }
       else if ((label|0) == 155) {
        $694 = ((($683)) + 1284|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = $695 | 32;
        HEAP32[$694>>2] = $696;
        $0 = 0;
        $697 = $0;
        STACKTOP = sp;return ($697|0);
       }
      }
     }
    }
   }
  }
 }
 $0 = -1;
 $697 = $0;
 STACKTOP = sp;return ($697|0);
}
function _psm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1347636734);
 if ($6) {
  $0 = -1;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,60);
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _psm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0, $c = 0, $c2spd = 0, $chan = 0, $event = 0, $finetune = 0, $flags = 0, $i = 0, $len = 0, $mod = 0, $p_chn = 0;
 var $p_ins = 0, $p_ord = 0, $p_pat = 0, $p_smp = 0, $r = 0, $rows = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1376|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 344|0;
 $p_smp = sp + 24|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read($buf,1,60,$8)|0);
 $9 = $mod;
 (_strncpy(($9|0),($buf|0),64)|0);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $type = $12;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $ver = $15;
 $16 = $2;
 (_hio_read8($16)|0);
 $17 = $type;
 $18 = $17 & 1;
 $19 = ($18|0)!=(0);
 if ($19) {
  $0 = -1;
  $427 = $0;
  STACKTOP = sp;return ($427|0);
 }
 $20 = $1;
 $21 = $ver;
 $22 = $21 & 240;
 $23 = $22 >> 4;
 $24 = $ver;
 $25 = $24 & 15;
 HEAP32[$vararg_buffer>>2] = $23;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $25;
 _set_type($20,5616,$vararg_buffer);
 $26 = $2;
 $27 = (_hio_read8($26)|0);
 $28 = $27&255;
 $29 = $mod;
 $30 = ((($29)) + 148|0);
 HEAP32[$30>>2] = $28;
 $31 = $2;
 $32 = (_hio_read8($31)|0);
 $33 = $32&255;
 $34 = $mod;
 $35 = ((($34)) + 152|0);
 HEAP32[$35>>2] = $33;
 $36 = $2;
 (_hio_read8($36)|0);
 $37 = $2;
 (_hio_read16l($37)|0);
 $38 = $2;
 $39 = (_hio_read16l($38)|0);
 $40 = $39&65535;
 $41 = $mod;
 $42 = ((($41)) + 156|0);
 HEAP32[$42>>2] = $40;
 $43 = $2;
 $44 = (_hio_read16l($43)|0);
 $45 = $44&65535;
 $46 = $mod;
 $47 = ((($46)) + 128|0);
 HEAP32[$47>>2] = $45;
 $48 = $2;
 $49 = (_hio_read16l($48)|0);
 $50 = $49&65535;
 $51 = $mod;
 $52 = ((($51)) + 140|0);
 HEAP32[$52>>2] = $50;
 $53 = $2;
 (_hio_read16l($53)|0);
 $54 = $2;
 $55 = (_hio_read16l($54)|0);
 $56 = $55&65535;
 $57 = $mod;
 $58 = ((($57)) + 136|0);
 HEAP32[$58>>2] = $56;
 $59 = $mod;
 $60 = ((($59)) + 140|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $mod;
 $63 = ((($62)) + 144|0);
 HEAP32[$63>>2] = $61;
 $64 = $mod;
 $65 = ((($64)) + 128|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $mod;
 $68 = ((($67)) + 136|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = Math_imul($66, $69)|0;
 $71 = $mod;
 $72 = ((($71)) + 132|0);
 HEAP32[$72>>2] = $70;
 $73 = $mod;
 $74 = ((($73)) + 156|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)>(256);
 if (!($76)) {
  $77 = $mod;
  $78 = ((($77)) + 128|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)>(256);
  if (!($80)) {
   $81 = $mod;
   $82 = ((($81)) + 140|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)>(255);
   if (!($84)) {
    $85 = $mod;
    $86 = ((($85)) + 136|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)>(64);
    if (!($88)) {
     $89 = $2;
     $90 = (_hio_read32l($89)|0);
     $p_ord = $90;
     $91 = $2;
     $92 = (_hio_read32l($91)|0);
     $p_chn = $92;
     $93 = $2;
     $94 = (_hio_read32l($93)|0);
     $p_pat = $94;
     $95 = $2;
     $96 = (_hio_read32l($95)|0);
     $p_ins = $96;
     $97 = $2;
     $98 = $3;
     $99 = $p_ord;
     $100 = (($98) + ($99))|0;
     (_hio_seek($97,$100,0)|0);
     $101 = $mod;
     $102 = ((($101)) + 952|0);
     $103 = $mod;
     $104 = ((($103)) + 156|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $2;
     (_hio_read($102,1,$105,$106)|0);
     $107 = $2;
     $108 = $3;
     $109 = $p_chn;
     $110 = (($108) + ($109))|0;
     (_hio_seek($107,$110,0)|0);
     $111 = $2;
     (_hio_read($buf,1,16,$111)|0);
     $112 = $mod;
     $113 = (_instrument_init($112)|0);
     $114 = ($113|0)<(0);
     if ($114) {
      $0 = -1;
      $427 = $0;
      STACKTOP = sp;return ($427|0);
     }
     $115 = $2;
     $116 = $3;
     $117 = $p_ins;
     $118 = (($116) + ($117))|0;
     (_hio_seek($115,$118,0)|0);
     $i = 0;
     while(1) {
      $119 = $i;
      $120 = $mod;
      $121 = ((($120)) + 140|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($119|0)<($122|0);
      $124 = $mod;
      if (!($123)) {
       break;
      }
      $125 = $i;
      $126 = (_subinstrument_alloc($124,$125,1)|0);
      $127 = ($126|0)<(0);
      if ($127) {
       label = 13;
       break;
      }
      $128 = $2;
      (_hio_read($buf,1,13,$128)|0);
      $129 = $2;
      (_hio_read($buf,1,24,$129)|0);
      $130 = $i;
      $131 = $mod;
      $132 = ((($131)) + 176|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($133) + (($130*764)|0)|0);
      (_strncpy(($134|0),($buf|0),24)|0);
      $135 = $i;
      $136 = $mod;
      $137 = ((($136)) + 176|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($138) + (($135*764)|0)|0);
      (_adjust_string($139)|0);
      $140 = $2;
      $141 = (_hio_read32l($140)|0);
      $142 = $i;
      $143 = (($p_smp) + ($142<<2)|0);
      HEAP32[$143>>2] = $141;
      $144 = $2;
      (_hio_read32l($144)|0);
      $145 = $2;
      (_hio_read16l($145)|0);
      $146 = $2;
      $147 = (_hio_read8($146)|0);
      $148 = $147&255;
      $flags = $148;
      $149 = $2;
      $150 = (_hio_read32l($149)|0);
      $151 = $i;
      $152 = $mod;
      $153 = ((($152)) + 180|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = (($154) + (($151*52)|0)|0);
      $156 = ((($155)) + 32|0);
      HEAP32[$156>>2] = $150;
      $157 = $2;
      $158 = (_hio_read32l($157)|0);
      $159 = $i;
      $160 = $mod;
      $161 = ((($160)) + 180|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (($162) + (($159*52)|0)|0);
      $164 = ((($163)) + 36|0);
      HEAP32[$164>>2] = $158;
      $165 = $2;
      $166 = (_hio_read32l($165)|0);
      $167 = $i;
      $168 = $mod;
      $169 = ((($168)) + 180|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = (($170) + (($167*52)|0)|0);
      $172 = ((($171)) + 40|0);
      HEAP32[$172>>2] = $166;
      $173 = $2;
      $174 = (_hio_read8($173)|0);
      $175 = $174&255;
      $176 = $175 << 4;
      $177 = $176&255;
      $178 = $177 << 24 >> 24;
      $finetune = $178;
      $179 = $2;
      $180 = (_hio_read8($179)|0);
      $181 = $180&255;
      $182 = $i;
      $183 = $mod;
      $184 = ((($183)) + 176|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = (($185) + (($182*764)|0)|0);
      $187 = ((($186)) + 756|0);
      $188 = HEAP32[$187>>2]|0;
      HEAP32[$188>>2] = $181;
      $189 = $2;
      $190 = (_hio_read16l($189)|0);
      $191 = $190&65535;
      $192 = ($191*8363)|0;
      $193 = (($192|0) / 8448)&-1;
      $194 = $193&65535;
      $c2spd = $194;
      $195 = $i;
      $196 = $mod;
      $197 = ((($196)) + 176|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (($198) + (($195*764)|0)|0);
      $200 = ((($199)) + 756|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = ((($201)) + 8|0);
      HEAP32[$202>>2] = 128;
      $203 = $i;
      $204 = $i;
      $205 = $mod;
      $206 = ((($205)) + 176|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($207) + (($204*764)|0)|0);
      $209 = ((($208)) + 756|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ((($210)) + 40|0);
      HEAP32[$211>>2] = $203;
      $212 = $flags;
      $213 = $212&65535;
      $214 = $213 & 128;
      $215 = ($214|0)!=(0);
      $216 = $215 ? 2 : 0;
      $217 = $i;
      $218 = $mod;
      $219 = ((($218)) + 180|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = (($220) + (($217*52)|0)|0);
      $222 = ((($221)) + 44|0);
      HEAP32[$222>>2] = $216;
      $223 = $flags;
      $224 = $223&65535;
      $225 = $224 & 32;
      $226 = ($225|0)!=(0);
      $227 = $226 ? 4 : 0;
      $228 = $i;
      $229 = $mod;
      $230 = ((($229)) + 180|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = (($231) + (($228*52)|0)|0);
      $233 = ((($232)) + 44|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = $234 | $227;
      HEAP32[$233>>2] = $235;
      $236 = $c2spd;
      $237 = $236&65535;
      $238 = $i;
      $239 = $mod;
      $240 = ((($239)) + 176|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = (($241) + (($238*764)|0)|0);
      $243 = ((($242)) + 756|0);
      $244 = HEAP32[$243>>2]|0;
      $245 = ((($244)) + 12|0);
      $246 = $i;
      $247 = $mod;
      $248 = ((($247)) + 176|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (($249) + (($246*764)|0)|0);
      $251 = ((($250)) + 756|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ((($252)) + 16|0);
      _c2spd_to_note($237,$245,$253);
      $254 = $finetune;
      $255 = $i;
      $256 = $mod;
      $257 = ((($256)) + 176|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = (($258) + (($255*764)|0)|0);
      $260 = ((($259)) + 756|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = ((($261)) + 16|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + ($254))|0;
      HEAP32[$262>>2] = $264;
      $265 = $i;
      $266 = $mod;
      $267 = ((($266)) + 180|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = (($268) + (($265*52)|0)|0);
      $270 = ((($269)) + 32|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = ($271|0)>(0);
      if ($272) {
       $273 = $i;
       $274 = $mod;
       $275 = ((($274)) + 176|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = (($276) + (($273*764)|0)|0);
       $278 = ((($277)) + 36|0);
       HEAP32[$278>>2] = 1;
      }
      $279 = $i;
      $280 = (($279) + 1)|0;
      $i = $280;
     }
     if ((label|0) == 13) {
      $0 = -1;
      $427 = $0;
      STACKTOP = sp;return ($427|0);
     }
     $281 = (_pattern_init($124)|0);
     $282 = ($281|0)<(0);
     if ($282) {
      $0 = -1;
      $427 = $0;
      STACKTOP = sp;return ($427|0);
     }
     $283 = $2;
     $284 = $3;
     $285 = $p_pat;
     $286 = (($284) + ($285))|0;
     (_hio_seek($283,$286,0)|0);
     $i = 0;
     L29: while(1) {
      $287 = $i;
      $288 = $mod;
      $289 = ((($288)) + 128|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = ($287|0)<($290|0);
      if (!($291)) {
       label = 39;
       break;
      }
      $292 = $2;
      $293 = (_hio_read16l($292)|0);
      $294 = $293&65535;
      $295 = (($294) - 4)|0;
      $len = $295;
      $296 = $2;
      $297 = (_hio_read8($296)|0);
      $rows = $297;
      $298 = $2;
      $299 = (_hio_read8($298)|0);
      $chan = $299;
      $300 = $mod;
      $301 = $i;
      $302 = $rows;
      $303 = $302&255;
      $304 = (_pattern_tracks_alloc($300,$301,$303)|0);
      $305 = ($304|0)<(0);
      if ($305) {
       label = 22;
       break;
      }
      $r = 0;
      while(1) {
       $306 = $r;
       $307 = $rows;
       $308 = $307&255;
       $309 = ($306|0)<($308|0);
       if (!($309)) {
        break;
       }
       while(1) {
        $310 = $len;
        $311 = ($310|0)>(0);
        if (!($311)) {
         break;
        }
        $312 = $2;
        $313 = (_hio_read8($312)|0);
        $b = $313;
        $314 = $len;
        $315 = (($314) + -1)|0;
        $len = $315;
        $316 = $b;
        $317 = $316&255;
        $318 = ($317|0)==(0);
        if ($318) {
         break;
        }
        $319 = $b;
        $320 = $319&255;
        $321 = $320 & 15;
        $c = $321;
        $322 = $c;
        $323 = $mod;
        $324 = ((($323)) + 136|0);
        $325 = HEAP32[$324>>2]|0;
        $326 = ($322|0)>=($325|0);
        if ($326) {
         label = 28;
         break L29;
        }
        $327 = $r;
        $328 = $c;
        $329 = $i;
        $330 = $1;
        $331 = ((($330)) + 168|0);
        $332 = HEAP32[$331>>2]|0;
        $333 = (($332) + ($329<<2)|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = ((($334)) + 4|0);
        $336 = (($335) + ($328<<2)|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = $1;
        $339 = ((($338)) + 172|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = (($340) + ($337<<2)|0);
        $342 = HEAP32[$341>>2]|0;
        $343 = ((($342)) + 4|0);
        $344 = (($343) + ($327<<3)|0);
        $event = $344;
        $345 = $b;
        $346 = $345&255;
        $347 = $346 & 128;
        $348 = ($347|0)!=(0);
        if ($348) {
         $349 = $2;
         $350 = (_hio_read8($349)|0);
         $351 = $350&255;
         $352 = (($351) + 36)|0;
         $353 = (($352) + 1)|0;
         $354 = $353&255;
         $355 = $event;
         HEAP8[$355>>0] = $354;
         $356 = $2;
         $357 = (_hio_read8($356)|0);
         $358 = $event;
         $359 = ((($358)) + 1|0);
         HEAP8[$359>>0] = $357;
         $360 = $len;
         $361 = (($360) - 2)|0;
         $len = $361;
        }
        $362 = $b;
        $363 = $362&255;
        $364 = $363 & 64;
        $365 = ($364|0)!=(0);
        if ($365) {
         $366 = $2;
         $367 = (_hio_read8($366)|0);
         $368 = $367&255;
         $369 = (($368) + 1)|0;
         $370 = $369&255;
         $371 = $event;
         $372 = ((($371)) + 2|0);
         HEAP8[$372>>0] = $370;
         $373 = $len;
         $374 = (($373) + -1)|0;
         $len = $374;
        }
        $375 = $b;
        $376 = $375&255;
        $377 = $376 & 32;
        $378 = ($377|0)!=(0);
        if (!($378)) {
         continue;
        }
        $379 = $2;
        $380 = (_hio_read8($379)|0);
        $381 = $event;
        $382 = ((($381)) + 3|0);
        HEAP8[$382>>0] = $380;
        $383 = $2;
        $384 = (_hio_read8($383)|0);
        $385 = $event;
        $386 = ((($385)) + 4|0);
        HEAP8[$386>>0] = $384;
        $387 = $len;
        $388 = (($387) - 2)|0;
        $len = $388;
       }
       $389 = $r;
       $390 = (($389) + 1)|0;
       $r = $390;
      }
      $391 = $len;
      $392 = ($391|0)>(0);
      if ($392) {
       $393 = $2;
       $394 = $len;
       (_hio_seek($393,$394,1)|0);
      }
      $395 = $i;
      $396 = (($395) + 1)|0;
      $i = $396;
     }
     if ((label|0) == 22) {
      $0 = -1;
      $427 = $0;
      STACKTOP = sp;return ($427|0);
     }
     else if ((label|0) == 28) {
      $0 = -1;
      $427 = $0;
      STACKTOP = sp;return ($427|0);
     }
     else if ((label|0) == 39) {
      $i = 0;
      while(1) {
       $397 = $i;
       $398 = $mod;
       $399 = ((($398)) + 140|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = ($397|0)<($400|0);
       if (!($401)) {
        label = 44;
        break;
       }
       $402 = $2;
       $403 = $3;
       $404 = $i;
       $405 = (($p_smp) + ($404<<2)|0);
       $406 = HEAP32[$405>>2]|0;
       $407 = (($403) + ($406))|0;
       (_hio_seek($402,$407,0)|0);
       $408 = $1;
       $409 = $2;
       $410 = $i;
       $411 = $mod;
       $412 = ((($411)) + 176|0);
       $413 = HEAP32[$412>>2]|0;
       $414 = (($413) + (($410*764)|0)|0);
       $415 = ((($414)) + 756|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = ((($416)) + 40|0);
       $418 = HEAP32[$417>>2]|0;
       $419 = $mod;
       $420 = ((($419)) + 180|0);
       $421 = HEAP32[$420>>2]|0;
       $422 = (($421) + (($418*52)|0)|0);
       $423 = (_load_sample($408,$409,1,$422,0)|0);
       $424 = ($423|0)<(0);
       if ($424) {
        label = 42;
        break;
       }
       $425 = $i;
       $426 = (($425) + 1)|0;
       $i = $426;
      }
      if ((label|0) == 42) {
       $0 = -1;
       $427 = $0;
       STACKTOP = sp;return ($427|0);
      }
      else if ((label|0) == 44) {
       $0 = 0;
       $427 = $0;
       STACKTOP = sp;return ($427|0);
      }
     }
    }
   }
  }
 }
 $0 = -1;
 $427 = $0;
 STACKTOP = sp;return ($427|0);
}
function _stim_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1398032717);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   $8 = (_hio_read16b($7)|0);
   $9 = $8&65535;
   $10 = ($9|0)>(16);
   if ($10) {
    $0 = -1;
    break;
   } else {
    $11 = $1;
    $12 = $2;
    _read_title($11,$12,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _stim_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $b1 = 0, $b2 = 0, $b3 = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0, $sh = 0, $si = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sh = sp + 8|0;
 $si = sp + 456|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_hio_read32b($7)|0);
 HEAP32[$sh>>2] = $8;
 $9 = $2;
 $10 = (_hio_read32b($9)|0);
 $11 = ((($sh)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = $2;
 (_hio_read32b($12)|0);
 $13 = $2;
 (_hio_read32b($13)|0);
 $14 = $2;
 $15 = (_hio_read16b($14)|0);
 $16 = ((($sh)) + 16|0);
 HEAP16[$16>>1] = $15;
 $17 = $2;
 $18 = (_hio_read16b($17)|0);
 $19 = ((($sh)) + 18|0);
 HEAP16[$19>>1] = $18;
 $20 = $2;
 $21 = (_hio_read16b($20)|0);
 $22 = ((($sh)) + 20|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($sh)) + 22|0);
 $24 = $2;
 (_hio_read($23,128,1,$24)|0);
 $25 = ((($sh)) + 16|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = ($27|0)>(31);
 if (!($28)) {
  $29 = ((($sh)) + 18|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = ($31|0)>(256);
  if (!($32)) {
   $33 = ((($sh)) + 20|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = ($35|0)>(64);
   if (!($36)) {
    $i = 0;
    while(1) {
     $37 = $i;
     $38 = ($37|0)<(64);
     if (!($38)) {
      break;
     }
     $39 = $2;
     $40 = (_hio_read32b($39)|0);
     $41 = (($40) + 12)|0;
     $42 = $i;
     $43 = ((($sh)) + 152|0);
     $44 = (($43) + ($42<<2)|0);
     HEAP32[$44>>2] = $41;
     $45 = $i;
     $46 = ((($sh)) + 152|0);
     $47 = (($46) + ($45<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48>>>0)>(1048576);
     if ($49) {
      label = 8;
      break;
     }
     $50 = $i;
     $51 = (($50) + 1)|0;
     $i = $51;
    }
    if ((label|0) == 8) {
     $0 = -1;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
    $52 = ((($sh)) + 18|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = $53&65535;
    $55 = $mod;
    $56 = ((($55)) + 156|0);
    HEAP32[$56>>2] = $54;
    $57 = ((($sh)) + 20|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = $58&65535;
    $60 = $mod;
    $61 = ((($60)) + 128|0);
    HEAP32[$61>>2] = $59;
    $62 = ((($sh)) + 16|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63&65535;
    $65 = $mod;
    $66 = ((($65)) + 140|0);
    HEAP32[$66>>2] = $64;
    $67 = $mod;
    $68 = ((($67)) + 140|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $mod;
    $71 = ((($70)) + 144|0);
    HEAP32[$71>>2] = $69;
    $72 = $mod;
    $73 = ((($72)) + 128|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $mod;
    $76 = ((($75)) + 136|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = Math_imul($74, $77)|0;
    $79 = $mod;
    $80 = ((($79)) + 132|0);
    HEAP32[$80>>2] = $78;
    $i = 0;
    while(1) {
     $81 = $i;
     $82 = $mod;
     $83 = ((($82)) + 156|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($81|0)<($84|0);
     if (!($85)) {
      break;
     }
     $86 = $i;
     $87 = ((($sh)) + 22|0);
     $88 = (($87) + ($86)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $i;
     $91 = $mod;
     $92 = ((($91)) + 952|0);
     $93 = (($92) + ($90)|0);
     HEAP8[$93>>0] = $89;
     $94 = $i;
     $95 = (($94) + 1)|0;
     $i = $95;
    }
    $96 = $1;
    _set_type($96,5664,$vararg_buffer);
    $97 = $mod;
    $98 = (_pattern_init($97)|0);
    $99 = ($98|0)<(0);
    if ($99) {
     $0 = -1;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
    $i = 0;
    while(1) {
     $100 = $i;
     $101 = $mod;
     $102 = ((($101)) + 128|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($100|0)<($103|0);
     $105 = $mod;
     if (!($104)) {
      break;
     }
     $106 = $i;
     $107 = (_pattern_tracks_alloc($105,$106,64)|0);
     $108 = ($107|0)<(0);
     if ($108) {
      label = 18;
      break;
     }
     $109 = $2;
     $110 = $3;
     $111 = $i;
     $112 = ((($sh)) + 152|0);
     $113 = (($112) + ($111<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($110) + ($114))|0;
     $116 = (($115) + 8)|0;
     (_hio_seek($109,$116,0)|0);
     $j = 0;
     while(1) {
      $117 = $j;
      $118 = ($117|0)<(4);
      if (!($118)) {
       break;
      }
      $k = 0;
      while(1) {
       $119 = $k;
       $120 = ($119|0)<(64);
       if (!($120)) {
        break;
       }
       $121 = $k;
       $122 = $j;
       $123 = $i;
       $124 = $1;
       $125 = ((($124)) + 168|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = (($126) + ($123<<2)|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ((($128)) + 4|0);
       $130 = (($129) + ($122<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = $1;
       $133 = ((($132)) + 172|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = (($134) + ($131<<2)|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = ((($136)) + 4|0);
       $138 = (($137) + ($121<<3)|0);
       $event = $138;
       $139 = $2;
       $140 = (_hio_read8($139)|0);
       $b1 = $140;
       $141 = $b1;
       $142 = $141&255;
       $143 = $142 & 128;
       $144 = ($143|0)!=(0);
       if ($144) {
        $145 = $b1;
        $146 = $145&255;
        $147 = $146 & 127;
        $148 = $k;
        $149 = (($148) + ($147))|0;
        $k = $149;
       } else {
        $150 = $2;
        $151 = (_hio_read8($150)|0);
        $b2 = $151;
        $152 = $2;
        $153 = (_hio_read8($152)|0);
        $b3 = $153;
        $154 = $b2;
        $155 = $154&255;
        $156 = $155 & 63;
        $157 = $156&255;
        $158 = $event;
        HEAP8[$158>>0] = $157;
        $159 = $157&255;
        $160 = ($159|0)!=(0);
        if ($160) {
         $161 = $event;
         $162 = HEAP8[$161>>0]|0;
         $163 = $162&255;
         $164 = (($163) + 47)|0;
         $165 = $164&255;
         HEAP8[$161>>0] = $165;
        }
        $166 = $b1;
        $167 = $166&255;
        $168 = $167 & 31;
        $169 = $168&255;
        $170 = $event;
        $171 = ((($170)) + 1|0);
        HEAP8[$171>>0] = $169;
        $172 = $b2;
        $173 = $172&255;
        $174 = $173 >> 4;
        $175 = $174 & 12;
        $176 = $b1;
        $177 = $176&255;
        $178 = $177 >> 5;
        $179 = $175 | $178;
        $180 = $179&255;
        $181 = $event;
        $182 = ((($181)) + 3|0);
        HEAP8[$182>>0] = $180;
        $183 = $b3;
        $184 = $event;
        $185 = ((($184)) + 4|0);
        HEAP8[$185>>0] = $183;
        $186 = $event;
        _disable_continue_fx($186);
       }
       $187 = $k;
       $188 = (($187) + 1)|0;
       $k = $188;
      }
      $189 = $j;
      $190 = (($189) + 1)|0;
      $j = $190;
     }
     $191 = $i;
     $192 = (($191) + 1)|0;
     $i = $192;
    }
    if ((label|0) == 18) {
     $0 = -1;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
    $193 = (_instrument_init($105)|0);
    $194 = ($193|0)<(0);
    if ($194) {
     $0 = -1;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
    $195 = $2;
    $196 = $3;
    $197 = ((($sh)) + 4|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (($196) + ($198))|0;
    $200 = $mod;
    $201 = ((($200)) + 144|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $202<<2;
    $204 = (($199) + ($203))|0;
    (_hio_seek($195,$204,0)|0);
    $i = 0;
    while(1) {
     $205 = $i;
     $206 = $mod;
     $207 = ((($206)) + 144|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($205|0)<($208|0);
     if (!($209)) {
      label = 43;
      break;
     }
     $210 = $2;
     $211 = (_hio_read16b($210)|0);
     HEAP16[$si>>1] = $211;
     $212 = $2;
     $213 = (_hio_read8($212)|0);
     $214 = ((($si)) + 2|0);
     HEAP8[$214>>0] = $213;
     $215 = $2;
     $216 = (_hio_read8($215)|0);
     $217 = ((($si)) + 3|0);
     HEAP8[$217>>0] = $216;
     $218 = $2;
     $219 = (_hio_read16b($218)|0);
     $220 = ((($si)) + 4|0);
     HEAP16[$220>>1] = $219;
     $221 = $2;
     $222 = (_hio_read16b($221)|0);
     $223 = ((($si)) + 6|0);
     HEAP16[$223>>1] = $222;
     $224 = $mod;
     $225 = $i;
     $226 = (_subinstrument_alloc($224,$225,1)|0);
     $227 = ($226|0)<(0);
     if ($227) {
      label = 36;
      break;
     }
     $228 = HEAP16[$si>>1]|0;
     $229 = $228&65535;
     $230 = $229<<1;
     $231 = $i;
     $232 = $mod;
     $233 = ((($232)) + 180|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = (($234) + (($231*52)|0)|0);
     $236 = ((($235)) + 32|0);
     HEAP32[$236>>2] = $230;
     $237 = ((($si)) + 4|0);
     $238 = HEAP16[$237>>1]|0;
     $239 = $238&65535;
     $240 = $239<<1;
     $241 = $i;
     $242 = $mod;
     $243 = ((($242)) + 180|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = (($244) + (($241*52)|0)|0);
     $246 = ((($245)) + 36|0);
     HEAP32[$246>>2] = $240;
     $247 = $i;
     $248 = $mod;
     $249 = ((($248)) + 180|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = (($250) + (($247*52)|0)|0);
     $252 = ((($251)) + 36|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = ((($si)) + 6|0);
     $255 = HEAP16[$254>>1]|0;
     $256 = $255&65535;
     $257 = $256<<1;
     $258 = (($253) + ($257))|0;
     $259 = $i;
     $260 = $mod;
     $261 = ((($260)) + 180|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (($262) + (($259*52)|0)|0);
     $264 = ((($263)) + 40|0);
     HEAP32[$264>>2] = $258;
     $265 = ((($si)) + 6|0);
     $266 = HEAP16[$265>>1]|0;
     $267 = $266&65535;
     $268 = ($267|0)>(1);
     $269 = $268 ? 2 : 0;
     $270 = $i;
     $271 = $mod;
     $272 = ((($271)) + 180|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = (($273) + (($270*52)|0)|0);
     $275 = ((($274)) + 44|0);
     HEAP32[$275>>2] = $269;
     $276 = ((($si)) + 2|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = $277&255;
     $279 = $278 << 4;
     $280 = $279&255;
     $281 = $280 << 24 >> 24;
     $282 = $i;
     $283 = $mod;
     $284 = ((($283)) + 176|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = (($285) + (($282*764)|0)|0);
     $287 = ((($286)) + 756|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = ((($288)) + 16|0);
     HEAP32[$289>>2] = $281;
     $290 = ((($si)) + 3|0);
     $291 = HEAP8[$290>>0]|0;
     $292 = $291&255;
     $293 = $i;
     $294 = $mod;
     $295 = ((($294)) + 176|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = (($296) + (($293*764)|0)|0);
     $298 = ((($297)) + 756|0);
     $299 = HEAP32[$298>>2]|0;
     HEAP32[$299>>2] = $292;
     $300 = $i;
     $301 = $mod;
     $302 = ((($301)) + 176|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = (($303) + (($300*764)|0)|0);
     $305 = ((($304)) + 756|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ((($306)) + 8|0);
     HEAP32[$307>>2] = 128;
     $308 = $i;
     $309 = $i;
     $310 = $mod;
     $311 = ((($310)) + 176|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = (($312) + (($309*764)|0)|0);
     $314 = ((($313)) + 756|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ((($315)) + 40|0);
     HEAP32[$316>>2] = $308;
     $317 = $i;
     $318 = $mod;
     $319 = ((($318)) + 176|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = (($320) + (($317*764)|0)|0);
     $322 = ((($321)) + 40|0);
     HEAP32[$322>>2] = 4095;
     $323 = $i;
     $324 = $mod;
     $325 = ((($324)) + 180|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = (($326) + (($323*52)|0)|0);
     $328 = ((($327)) + 32|0);
     $329 = HEAP32[$328>>2]|0;
     $330 = ($329|0)>(0);
     if ($330) {
      $331 = $i;
      $332 = $mod;
      $333 = ((($332)) + 176|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = (($334) + (($331*764)|0)|0);
      $336 = ((($335)) + 36|0);
      HEAP32[$336>>2] = 1;
     }
     $337 = $i;
     $338 = $mod;
     $339 = ((($338)) + 180|0);
     $340 = HEAP32[$339>>2]|0;
     $341 = (($340) + (($337*52)|0)|0);
     $342 = ((($341)) + 32|0);
     $343 = HEAP32[$342>>2]|0;
     $344 = ($343|0)!=(0);
     if ($344) {
      $345 = $1;
      $346 = $2;
      $347 = $i;
      $348 = $mod;
      $349 = ((($348)) + 180|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = (($350) + (($347*52)|0)|0);
      $352 = (_load_sample($345,$346,0,$351,0)|0);
      $353 = ($352|0)<(0);
      if ($353) {
       label = 41;
       break;
      }
     }
     $354 = $i;
     $355 = (($354) + 1)|0;
     $i = $355;
    }
    if ((label|0) == 36) {
     $0 = -1;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
    else if ((label|0) == 41) {
     $0 = -1;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
    else if ((label|0) == 43) {
     $356 = $1;
     $357 = ((($356)) + 1284|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = $358 | 8192;
     HEAP32[$357>>2] = $359;
     $0 = 0;
     $360 = $0;
     STACKTOP = sp;return ($360|0);
    }
   }
  }
 }
 $0 = -1;
 $360 = $0;
 STACKTOP = sp;return ($360|0);
}
function _mmd_xlat_fx($event,$bpm_on,$bpmlen,$med_8ch,$hexvol) {
 $event = $event|0;
 $bpm_on = $bpm_on|0;
 $bpmlen = $bpmlen|0;
 $med_8ch = $med_8ch|0;
 $hexvol = $hexvol|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fxp = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $bpm_on;
 $2 = $bpmlen;
 $3 = $med_8ch;
 $4 = $hexvol;
 $5 = $0;
 $6 = ((($5)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 do {
  switch ($8|0) {
  case 25:  {
   $137 = $0;
   $138 = ((($137)) + 3|0);
   HEAP8[$138>>0] = 9;
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $11 = $0;
   $12 = ((($11)) + 4|0);
   HEAP8[$12>>0] = 0;
   $13 = $0;
   $14 = ((($13)) + 3|0);
   HEAP8[$14>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $32 = $0;
   $33 = ((($32)) + 3|0);
   HEAP8[$33>>0] = 10;
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $15 = $0;
   $16 = ((($15)) + 3|0);
   HEAP8[$16>>0] = 15;
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $92 = $0;
   $93 = ((($92)) + 3|0);
   HEAP8[$93>>0] = -80;
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $107 = $0;
   $108 = ((($107)) + 3|0);
   HEAP8[$108>>0] = 14;
   $109 = $0;
   $110 = ((($109)) + 4|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = ($112|0)>(15);
   if ($113) {
    $114 = $0;
    $115 = ((($114)) + 4|0);
    HEAP8[$115>>0] = 15;
   }
   $116 = $0;
   $117 = ((($116)) + 4|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $119 | 96;
   $121 = $120&255;
   HEAP8[$117>>0] = $121;
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $145 = $0;
   $146 = ((($145)) + 3|0);
   HEAP8[$146>>0] = -77;
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $94 = $0;
   $95 = ((($94)) + 3|0);
   HEAP8[$95>>0] = 4;
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $9 = $0;
   $10 = ((($9)) + 3|0);
   HEAP8[$10>>0] = -110;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $147 = $0;
   $148 = ((($147)) + 4|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = $150 & 240;
   $152 = $151 >> 4;
   $153 = ($152|0)!=(0);
   $154 = $0;
   if ($153) {
    $155 = ((($154)) + 3|0);
    HEAP8[$155>>0] = 14;
    $156 = $0;
    $157 = ((($156)) + 4|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158&255;
    $160 = $159 >> 4;
    $161 = 208 | $160;
    $162 = $161&255;
    $163 = $0;
    $164 = ((($163)) + 4|0);
    HEAP8[$164>>0] = $162;
    STACKTOP = sp;return;
   }
   $165 = ((($154)) + 4|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = $167 & 15;
   $169 = ($168|0)!=(0);
   if (!($169)) {
    STACKTOP = sp;return;
   }
   $170 = $0;
   $171 = ((($170)) + 3|0);
   HEAP8[$171>>0] = 14;
   $172 = $0;
   $173 = ((($172)) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $175 & 15;
   $177 = 144 | $176;
   $178 = $177&255;
   $179 = $0;
   $180 = ((($179)) + 4|0);
   HEAP8[$180>>0] = $178;
   STACKTOP = sp;return;
   break;
  }
  case 7: case 6: case 5: case 3: case 2: case 1: case 0:  {
   STACKTOP = sp;return;
   break;
  }
  case 27:  {
   $141 = $0;
   $142 = ((($141)) + 3|0);
   HEAP8[$142>>0] = -82;
   STACKTOP = sp;return;
   break;
  }
  case 26:  {
   $139 = $0;
   $140 = ((($139)) + 3|0);
   HEAP8[$140>>0] = -83;
   STACKTOP = sp;return;
   break;
  }
  case 15:  {
   $38 = $0;
   $39 = ((($38)) + 4|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)==(0);
   $43 = $0;
   if ($42) {
    $44 = ((($43)) + 3|0);
    HEAP8[$44>>0] = 13;
    STACKTOP = sp;return;
   }
   $45 = ((($43)) + 4|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ($47|0)<=(240);
   $49 = $0;
   if ($48) {
    $50 = ((($49)) + 3|0);
    HEAP8[$50>>0] = -85;
    $51 = $3;
    $52 = ($51|0)!=(0);
    $53 = $0;
    $54 = ((($53)) + 4|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    if ($52) {
     $57 = (_get_8ch_tempo($56)|0);
     $59 = $57;
    } else {
     $59 = $56;
    }
    $58 = $59&255;
    $60 = $0;
    $61 = ((($60)) + 4|0);
    HEAP8[$61>>0] = $58;
    STACKTOP = sp;return;
   }
   $62 = ((($49)) + 4|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   switch ($64|0) {
   case 243:  {
    $73 = $0;
    $74 = ((($73)) + 3|0);
    HEAP8[$74>>0] = 14;
    $75 = $0;
    $76 = ((($75)) + 4|0);
    HEAP8[$76>>0] = -110;
    STACKTOP = sp;return;
    break;
   }
   case 254: case 253: case 251: case 250: case 249: case 248:  {
    $77 = $0;
    $78 = ((($77)) + 4|0);
    HEAP8[$78>>0] = 0;
    $79 = $0;
    $80 = ((($79)) + 3|0);
    HEAP8[$80>>0] = 0;
    STACKTOP = sp;return;
    break;
   }
   case 242:  {
    $69 = $0;
    $70 = ((($69)) + 3|0);
    HEAP8[$70>>0] = 14;
    $71 = $0;
    $72 = ((($71)) + 4|0);
    HEAP8[$72>>0] = -45;
    STACKTOP = sp;return;
    break;
   }
   case 241:  {
    $65 = $0;
    $66 = ((($65)) + 3|0);
    HEAP8[$66>>0] = 14;
    $67 = $0;
    $68 = ((($67)) + 4|0);
    HEAP8[$68>>0] = -109;
    STACKTOP = sp;return;
    break;
   }
   case 255:  {
    $81 = $0;
    $82 = ((($81)) + 4|0);
    HEAP8[$82>>0] = 0;
    $83 = $0;
    $84 = ((($83)) + 3|0);
    HEAP8[$84>>0] = 0;
    $85 = $0;
    HEAP8[$85>>0] = -126;
    STACKTOP = sp;return;
    break;
   }
   default: {
    $86 = $0;
    $87 = ((($86)) + 4|0);
    HEAP8[$87>>0] = 0;
    $88 = $0;
    $89 = ((($88)) + 3|0);
    HEAP8[$89>>0] = 0;
    STACKTOP = sp;return;
   }
   }
   break;
  }
  case 46:  {
   $181 = $0;
   $182 = ((($181)) + 4|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = ($184|0)>=(240);
   if (!($185)) {
    $186 = $0;
    $187 = ((($186)) + 4|0);
    $188 = HEAP8[$187>>0]|0;
    $189 = $188&255;
    $190 = ($189|0)<=(16);
    if (!($190)) {
     STACKTOP = sp;return;
    }
   }
   $191 = $0;
   $192 = ((($191)) + 4|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193 << 24 >> 24;
   $195 = (($194) + 16)|0;
   $fxp = $195;
   $196 = $fxp;
   $197 = $196 << 3;
   $fxp = $197;
   $198 = $fxp;
   $199 = ($198|0)==(256);
   if ($199) {
    $200 = $fxp;
    $201 = (($200) + -1)|0;
    $fxp = $201;
   }
   $202 = $0;
   $203 = ((($202)) + 3|0);
   HEAP8[$203>>0] = 8;
   $204 = $fxp;
   $205 = $204&255;
   $206 = $0;
   $207 = ((($206)) + 4|0);
   HEAP8[$207>>0] = $205;
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $90 = $0;
   $91 = ((($90)) + 3|0);
   HEAP8[$91>>0] = -81;
   STACKTOP = sp;return;
   break;
  }
  case 24:  {
   $122 = $0;
   $123 = ((($122)) + 3|0);
   HEAP8[$123>>0] = 14;
   $124 = $0;
   $125 = ((($124)) + 4|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)>(15);
   if ($128) {
    $129 = $0;
    $130 = ((($129)) + 4|0);
    HEAP8[$130>>0] = 15;
   }
   $131 = $0;
   $132 = ((($131)) + 4|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $134 | 192;
   $136 = $135&255;
   HEAP8[$132>>0] = $136;
   STACKTOP = sp;return;
   break;
  }
  case 12: case 11: case 10:  {
   $17 = $4;
   $18 = ($17|0)!=(0);
   if ($18) {
    STACKTOP = sp;return;
   }
   $19 = $0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $p = $22;
   $23 = $p;
   $24 = $23 >> 8;
   $25 = ($24*10)|0;
   $26 = $p;
   $27 = $26 & 255;
   $28 = (($25) + ($27))|0;
   $29 = $28&255;
   $30 = $0;
   $31 = ((($30)) + 4|0);
   HEAP8[$31>>0] = $29;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $143 = $0;
   $144 = ((($143)) + 3|0);
   HEAP8[$144>>0] = 13;
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $34 = $0;
   $35 = ((($34)) + 4|0);
   HEAP8[$35>>0] = 0;
   $36 = $0;
   $37 = ((($36)) + 3|0);
   HEAP8[$37>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $96 = $0;
   $97 = ((($96)) + 3|0);
   HEAP8[$97>>0] = -90;
   $98 = $0;
   $99 = ((($98)) + 4|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = (($101) + 8)|0;
   $103 = $102 << 4;
   $104 = $103&255;
   $105 = $0;
   $106 = ((($105)) + 4|0);
   HEAP8[$106>>0] = $104;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $208 = $0;
   $209 = ((($208)) + 4|0);
   HEAP8[$209>>0] = 0;
   $210 = $0;
   $211 = ((($210)) + 3|0);
   HEAP8[$211>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _mmd_alloc_tables($m,$i,$synth) {
 $m = $m|0;
 $i = $i|0;
 $synth = $synth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $me = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $i;
 $3 = $synth;
 $4 = $1;
 $5 = ((($4)) + 7580|0);
 $6 = HEAP32[$5>>2]|0;
 $me = $6;
 $7 = $3;
 $8 = ((($7)) + 14|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (_calloc(1,$10)|0);
 $12 = $2;
 $13 = $me;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($12<<2)|0);
 HEAP32[$16>>2] = $11;
 $17 = $2;
 $18 = $me;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($17<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 do {
  if (!($23)) {
   $24 = $2;
   $25 = $me;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($24<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $3;
   $31 = ((($30)) + 22|0);
   $32 = $3;
   $33 = ((($32)) + 14|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   _memcpy(($29|0),($31|0),($35|0))|0;
   $36 = $3;
   $37 = ((($36)) + 16|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38&65535;
   $40 = (_calloc(1,$39)|0);
   $41 = $2;
   $42 = $me;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + ($41<<2)|0);
   HEAP32[$45>>2] = $40;
   $46 = $2;
   $47 = $me;
   $48 = ((($47)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   $53 = $2;
   $54 = $me;
   if ($52) {
    $65 = ((($54)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($53<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    _free($68);
    break;
   }
   $55 = ((($54)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($53<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $3;
   $60 = ((($59)) + 150|0);
   $61 = $3;
   $62 = ((($61)) + 16|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63&65535;
   _memcpy(($58|0),($60|0),($64|0))|0;
   $0 = 0;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 } while(0);
 $0 = -1;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _mmd_load_hybrid_instrument($f,$m,$i,$smp_idx,$synth,$exp_smp,$sample) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $synth = $synth|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $length = 0, $mod = 0, $pos = 0, $sub = 0, $type = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $synth;
 $6 = $exp_smp;
 $7 = $sample;
 $8 = $2;
 $mod = $8;
 $9 = $3;
 $10 = $mod;
 $11 = ((($10)) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*764)|0)|0);
 $xxi = $13;
 $14 = $1;
 $15 = (_hio_tell($14)|0);
 $pos = $15;
 $16 = $4;
 $17 = $mod;
 $18 = ((($17)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)>=($19|0);
 if ($20) {
  $0 = -1;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $21 = $1;
 $22 = (_hio_read8($21)|0);
 $23 = $5;
 $24 = ((($23)) + 6|0);
 HEAP8[$24>>0] = $22;
 $25 = $1;
 (_hio_seek($25,3,1)|0);
 $26 = $1;
 $27 = (_hio_read16b($26)|0);
 $28 = $5;
 $29 = ((($28)) + 10|0);
 HEAP16[$29>>1] = $27;
 $30 = $1;
 $31 = (_hio_read16b($30)|0);
 $32 = $5;
 $33 = ((($32)) + 12|0);
 HEAP16[$33>>1] = $31;
 $34 = $1;
 $35 = (_hio_read16b($34)|0);
 $36 = $5;
 $37 = ((($36)) + 14|0);
 HEAP16[$37>>1] = $35;
 $38 = $1;
 $39 = (_hio_read16b($38)|0);
 $40 = $5;
 $41 = ((($40)) + 16|0);
 HEAP16[$41>>1] = $39;
 $42 = $1;
 $43 = (_hio_read8($42)|0);
 $44 = $5;
 $45 = ((($44)) + 18|0);
 HEAP8[$45>>0] = $43;
 $46 = $1;
 $47 = (_hio_read8($46)|0);
 $48 = $5;
 $49 = ((($48)) + 19|0);
 HEAP8[$49>>0] = $47;
 $50 = $1;
 $51 = (_hio_read16b($50)|0);
 $52 = $5;
 $53 = ((($52)) + 20|0);
 HEAP16[$53>>1] = $51;
 $54 = $5;
 $55 = ((($54)) + 22|0);
 $56 = $1;
 (_hio_read($55,1,128,$56)|0);
 $57 = $5;
 $58 = ((($57)) + 150|0);
 $59 = $1;
 (_hio_read($58,1,128,$59)|0);
 $60 = $5;
 $61 = ((($60)) + 14|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = ($63|0)>(128);
 if (!($64)) {
  $65 = $5;
  $66 = ((($65)) + 16|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67&65535;
  $69 = ($68|0)>(128);
  if (!($69)) {
   $70 = $1;
   $71 = $pos;
   $72 = (($71) - 6)|0;
   $73 = $1;
   $74 = (_hio_read32b($73)|0);
   $75 = (($72) + ($74))|0;
   (_hio_seek($70,$75,0)|0);
   $76 = $1;
   $77 = (_hio_read32b($76)|0);
   $length = $77;
   $78 = $1;
   $79 = (_hio_read16b($78)|0);
   $80 = $79&65535;
   $type = $80;
   $81 = $xxi;
   $82 = (_med_new_instrument_extras($81)|0);
   $83 = ($82|0)!=(0);
   if ($83) {
    $0 = -1;
    $170 = $0;
    STACKTOP = sp;return ($170|0);
   }
   $84 = $xxi;
   $85 = ((($84)) + 36|0);
   HEAP32[$85>>2] = 1;
   $86 = $mod;
   $87 = $3;
   $88 = (_subinstrument_alloc($86,$87,1)|0);
   $89 = ($88|0)<(0);
   if ($89) {
    $0 = -1;
    $170 = $0;
    STACKTOP = sp;return ($170|0);
   }
   $90 = $5;
   $91 = ((($90)) + 18|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = $xxi;
   $95 = ((($94)) + 760|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ((($96)) + 4|0);
   HEAP32[$97>>2] = $93;
   $98 = $5;
   $99 = ((($98)) + 19|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = $xxi;
   $103 = ((($102)) + 760|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($104)) + 8|0);
   HEAP32[$105>>2] = $101;
   $106 = $xxi;
   $107 = ((($106)) + 756|0);
   $108 = HEAP32[$107>>2]|0;
   $sub = $108;
   $109 = $sub;
   $110 = ((($109)) + 8|0);
   HEAP32[$110>>2] = 128;
   $111 = $7;
   $112 = ((($111)) + 6|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = $sub;
   HEAP32[$115>>2] = $114;
   $116 = $7;
   $117 = ((($116)) + 7|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118 << 24 >> 24;
   $120 = (($119) + 36)|0;
   $121 = $sub;
   $122 = ((($121)) + 12|0);
   HEAP32[$122>>2] = $120;
   $123 = $4;
   $124 = $sub;
   $125 = ((($124)) + 40|0);
   HEAP32[$125>>2] = $123;
   $126 = $6;
   $127 = ((($126)) + 3|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128 << 24 >> 24;
   $130 = $sub;
   $131 = ((($130)) + 16|0);
   HEAP32[$131>>2] = $129;
   $132 = $4;
   $133 = $mod;
   $134 = ((($133)) + 180|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + (($132*52)|0)|0);
   $xxs = $136;
   $137 = $length;
   $138 = $xxs;
   $139 = ((($138)) + 32|0);
   HEAP32[$139>>2] = $137;
   $140 = $7;
   $141 = HEAP16[$140>>1]|0;
   $142 = $141&65535;
   $143 = $142<<1;
   $144 = $xxs;
   $145 = ((($144)) + 36|0);
   HEAP32[$145>>2] = $143;
   $146 = $xxs;
   $147 = ((($146)) + 36|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $7;
   $150 = ((($149)) + 2|0);
   $151 = HEAP16[$150>>1]|0;
   $152 = $151&65535;
   $153 = $152<<1;
   $154 = (($148) + ($153))|0;
   $155 = $xxs;
   $156 = ((($155)) + 40|0);
   HEAP32[$156>>2] = $154;
   $157 = $7;
   $158 = ((($157)) + 2|0);
   $159 = HEAP16[$158>>1]|0;
   $160 = $159&65535;
   $161 = ($160|0)>(1);
   $162 = $161 ? 2 : 0;
   $163 = $xxs;
   $164 = ((($163)) + 44|0);
   HEAP32[$164>>2] = $162;
   $165 = $2;
   $166 = $1;
   $167 = $xxs;
   $168 = (_load_sample($165,$166,0,$167,0)|0);
   $169 = ($168|0)<(0);
   if ($169) {
    $0 = -1;
    $170 = $0;
    STACKTOP = sp;return ($170|0);
   } else {
    $0 = 0;
    $170 = $0;
    STACKTOP = sp;return ($170|0);
   }
  }
 }
 $0 = -1;
 $170 = $0;
 STACKTOP = sp;return ($170|0);
}
function _mmd_load_synth_instrument($f,$m,$i,$smp_idx,$synth,$exp_smp,$sample) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $synth = $synth|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $mod = 0, $pos = 0, $sub = 0;
 var $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $synth;
 $6 = $exp_smp;
 $7 = $sample;
 $8 = $2;
 $mod = $8;
 $9 = $3;
 $10 = $mod;
 $11 = ((($10)) + 176|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($9*764)|0)|0);
 $xxi = $13;
 $14 = $1;
 $15 = (_hio_tell($14)|0);
 $pos = $15;
 $16 = $1;
 $17 = (_hio_read8($16)|0);
 $18 = $5;
 $19 = ((($18)) + 6|0);
 HEAP8[$19>>0] = $17;
 $20 = $1;
 (_hio_seek($20,3,1)|0);
 $21 = $1;
 $22 = (_hio_read16b($21)|0);
 $23 = $5;
 $24 = ((($23)) + 10|0);
 HEAP16[$24>>1] = $22;
 $25 = $1;
 $26 = (_hio_read16b($25)|0);
 $27 = $5;
 $28 = ((($27)) + 12|0);
 HEAP16[$28>>1] = $26;
 $29 = $1;
 $30 = (_hio_read16b($29)|0);
 $31 = $5;
 $32 = ((($31)) + 14|0);
 HEAP16[$32>>1] = $30;
 $33 = $1;
 $34 = (_hio_read16b($33)|0);
 $35 = $5;
 $36 = ((($35)) + 16|0);
 HEAP16[$36>>1] = $34;
 $37 = $1;
 $38 = (_hio_read8($37)|0);
 $39 = $5;
 $40 = ((($39)) + 18|0);
 HEAP8[$40>>0] = $38;
 $41 = $1;
 $42 = (_hio_read8($41)|0);
 $43 = $5;
 $44 = ((($43)) + 19|0);
 HEAP8[$44>>0] = $42;
 $45 = $1;
 $46 = (_hio_read16b($45)|0);
 $47 = $5;
 $48 = ((($47)) + 20|0);
 HEAP16[$48>>1] = $46;
 $49 = $5;
 $50 = ((($49)) + 22|0);
 $51 = $1;
 (_hio_read($50,1,128,$51)|0);
 $52 = $5;
 $53 = ((($52)) + 150|0);
 $54 = $1;
 (_hio_read($53,1,128,$54)|0);
 $j = 0;
 while(1) {
  $55 = $j;
  $56 = ($55|0)<(64);
  if (!($56)) {
   break;
  }
  $57 = $1;
  $58 = (_hio_read32b($57)|0);
  $59 = $j;
  $60 = $5;
  $61 = ((($60)) + 280|0);
  $62 = (($61) + ($59<<2)|0);
  HEAP32[$62>>2] = $58;
  $63 = $j;
  $64 = (($63) + 1)|0;
  $j = $64;
 }
 $65 = $5;
 $66 = ((($65)) + 14|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67&65535;
 $69 = ($68|0)>(128);
 if (!($69)) {
  $70 = $5;
  $71 = ((($70)) + 16|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72&65535;
  $74 = ($73|0)>(128);
  if (!($74)) {
   $75 = $5;
   $76 = ((($75)) + 20|0);
   $77 = HEAP16[$76>>1]|0;
   $78 = $77&65535;
   $79 = ($78|0)>(256);
   if (!($79)) {
    $80 = $5;
    $81 = ((($80)) + 20|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = $82&65535;
    $84 = ($83|0)==(65535);
    if ($84) {
     $85 = $xxi;
     $86 = ((($85)) + 36|0);
     HEAP32[$86>>2] = 0;
     $0 = 1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    $87 = $5;
    $88 = ((($87)) + 20|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = ($90|0)>(64);
    if ($91) {
     $0 = -1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    $92 = $3;
    $93 = $mod;
    $94 = ((($93)) + 176|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + (($92*764)|0)|0);
    $97 = (_med_new_instrument_extras($96)|0);
    $98 = ($97|0)!=(0);
    if ($98) {
     $0 = -1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    $99 = $5;
    $100 = ((($99)) + 20|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = $101&65535;
    $103 = $3;
    $104 = $mod;
    $105 = ((($104)) + 176|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + (($103*764)|0)|0);
    $108 = ((($107)) + 36|0);
    HEAP32[$108>>2] = $102;
    $109 = $mod;
    $110 = $3;
    $111 = $5;
    $112 = ((($111)) + 20|0);
    $113 = HEAP16[$112>>1]|0;
    $114 = $113&65535;
    $115 = (_subinstrument_alloc($109,$110,$114)|0);
    $116 = ($115|0)<(0);
    if ($116) {
     $0 = -1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    $117 = $5;
    $118 = ((($117)) + 18|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119&255;
    $121 = $xxi;
    $122 = ((($121)) + 760|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ((($123)) + 4|0);
    HEAP32[$124>>2] = $120;
    $125 = $5;
    $126 = ((($125)) + 19|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = $xxi;
    $130 = ((($129)) + 760|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ((($131)) + 8|0);
    HEAP32[$132>>2] = $128;
    $j = 0;
    while(1) {
     $133 = $j;
     $134 = $5;
     $135 = ((($134)) + 20|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136&65535;
     $138 = ($133|0)<($137|0);
     if (!($138)) {
      label = 24;
      break;
     }
     $139 = $j;
     $140 = $xxi;
     $141 = ((($140)) + 756|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = (($142) + ($139<<6)|0);
     $sub = $143;
     $144 = $4;
     $145 = $mod;
     $146 = ((($145)) + 180|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($147) + (($144*52)|0)|0);
     $xxs = $148;
     $149 = $j;
     $150 = $xxi;
     $151 = ((($150)) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($149|0)>=($152|0);
     if ($153) {
      label = 20;
      break;
     }
     $154 = $4;
     $155 = $mod;
     $156 = ((($155)) + 144|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($154|0)>=($157|0);
     if ($158) {
      label = 20;
      break;
     }
     $159 = $sub;
     $160 = ((($159)) + 8|0);
     HEAP32[$160>>2] = 128;
     $161 = $sub;
     HEAP32[$161>>2] = 64;
     $162 = $7;
     $163 = ((($162)) + 7|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164 << 24 >> 24;
     $166 = (12 + ($165))|0;
     $167 = $sub;
     $168 = ((($167)) + 12|0);
     HEAP32[$168>>2] = $166;
     $169 = $4;
     $170 = $sub;
     $171 = ((($170)) + 40|0);
     HEAP32[$171>>2] = $169;
     $172 = $6;
     $173 = ((($172)) + 3|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174 << 24 >> 24;
     $176 = $sub;
     $177 = ((($176)) + 16|0);
     HEAP32[$177>>2] = $175;
     $178 = $1;
     $179 = $pos;
     $180 = (($179) - 6)|0;
     $181 = $j;
     $182 = $5;
     $183 = ((($182)) + 280|0);
     $184 = (($183) + ($181<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (($180) + ($185))|0;
     (_hio_seek($178,$186,0)|0);
     $187 = $1;
     $188 = (_hio_read16b($187)|0);
     $189 = $188&65535;
     $190 = $189<<1;
     $191 = $xxs;
     $192 = ((($191)) + 32|0);
     HEAP32[$192>>2] = $190;
     $193 = $xxs;
     $194 = ((($193)) + 36|0);
     HEAP32[$194>>2] = 0;
     $195 = $4;
     $196 = $mod;
     $197 = ((($196)) + 180|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (($198) + (($195*52)|0)|0);
     $200 = ((($199)) + 32|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $xxs;
     $203 = ((($202)) + 40|0);
     HEAP32[$203>>2] = $201;
     $204 = $xxs;
     $205 = ((($204)) + 44|0);
     HEAP32[$205>>2] = 2;
     $206 = $2;
     $207 = $1;
     $208 = $xxs;
     $209 = (_load_sample($206,$207,0,$208,0)|0);
     $210 = ($209|0)<(0);
     if ($210) {
      label = 22;
      break;
     }
     $211 = $4;
     $212 = (($211) + 1)|0;
     $4 = $212;
     $213 = $j;
     $214 = (($213) + 1)|0;
     $j = $214;
    }
    if ((label|0) == 20) {
     $0 = -1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    else if ((label|0) == 22) {
     $0 = -1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    else if ((label|0) == 24) {
     $0 = 0;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
   }
  }
 }
 $0 = -1;
 $215 = $0;
 STACKTOP = sp;return ($215|0);
}
function _mmd_load_sampled_instrument($f,$m,$i,$smp_idx,$instr,$expdata,$exp_smp,$sample,$ver) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $instr = $instr|0;
 $expdata = $expdata|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 $ver = $ver|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $mod = 0, $sub = 0, $xpo = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $instr;
 $6 = $expdata;
 $7 = $exp_smp;
 $8 = $sample;
 $9 = $ver;
 $10 = $2;
 $mod = $10;
 $11 = $3;
 $12 = $mod;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($11*764)|0)|0);
 $xxi = $15;
 $16 = $4;
 $17 = $mod;
 $18 = ((($17)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)>=($19|0);
 if ($20) {
  $0 = -1;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 $21 = $xxi;
 $22 = (_med_new_instrument_extras($21)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $0 = -1;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 $24 = $7;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $xxi;
 $28 = ((($27)) + 760|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = $26;
 $31 = $7;
 $32 = ((($31)) + 1|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 4;
 $36 = (4095 - ($35))|0;
 $37 = $xxi;
 $38 = ((($37)) + 40|0);
 HEAP32[$38>>2] = $36;
 $39 = $xxi;
 $40 = ((($39)) + 36|0);
 HEAP32[$40>>2] = 1;
 $41 = $mod;
 $42 = $3;
 $43 = (_subinstrument_alloc($41,$42,1)|0);
 $44 = ($43|0)<(0);
 if ($44) {
  $0 = -1;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 $45 = $xxi;
 $46 = ((($45)) + 756|0);
 $47 = HEAP32[$46>>2]|0;
 $sub = $47;
 $48 = $8;
 $49 = ((($48)) + 6|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $sub;
 HEAP32[$52>>2] = $51;
 $53 = $sub;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = 128;
 $55 = $8;
 $56 = ((($55)) + 7|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = (($58) + 36)|0;
 $60 = $sub;
 $61 = ((($60)) + 12|0);
 HEAP32[$61>>2] = $59;
 $62 = $9;
 $63 = ($62|0)>=(2);
 if ($63) {
  $64 = $6;
  $65 = ((($64)) + 10|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66&65535;
  $68 = ($67|0)>(4);
  if ($68) {
   $69 = $7;
   $70 = ((($69)) + 4|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = ($71<<24>>24)!=(0);
   if ($72) {
    $73 = $7;
    $74 = ((($73)) + 4|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = (($76) - 25)|0;
    $78 = $sub;
    $79 = ((($78)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($77))|0;
    HEAP32[$79>>2] = $81;
   }
  }
 }
 $82 = $4;
 $83 = $sub;
 $84 = ((($83)) + 40|0);
 HEAP32[$84>>2] = $82;
 $85 = $7;
 $86 = ((($85)) + 3|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87 << 24 >> 24;
 $89 = $88 << 4;
 $90 = $sub;
 $91 = ((($90)) + 16|0);
 HEAP32[$91>>2] = $89;
 $92 = $4;
 $93 = $mod;
 $94 = ((($93)) + 180|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + (($92*52)|0)|0);
 $xxs = $96;
 $97 = $5;
 $98 = HEAP32[$97>>2]|0;
 $99 = $xxs;
 $100 = ((($99)) + 32|0);
 HEAP32[$100>>2] = $98;
 $101 = $8;
 $102 = HEAP16[$101>>1]|0;
 $103 = $102&65535;
 $104 = $103<<1;
 $105 = $xxs;
 $106 = ((($105)) + 36|0);
 HEAP32[$106>>2] = $104;
 $107 = $xxs;
 $108 = ((($107)) + 36|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $8;
 $111 = ((($110)) + 2|0);
 $112 = HEAP16[$111>>1]|0;
 $113 = $112&65535;
 $114 = $113<<1;
 $115 = (($109) + ($114))|0;
 $116 = $xxs;
 $117 = ((($116)) + 40|0);
 HEAP32[$117>>2] = $115;
 $118 = $xxs;
 $119 = ((($118)) + 44|0);
 HEAP32[$119>>2] = 0;
 $120 = $8;
 $121 = ((($120)) + 2|0);
 $122 = HEAP16[$121>>1]|0;
 $123 = $122&65535;
 $124 = ($123|0)>(1);
 if ($124) {
  $125 = $xxs;
  $126 = ((($125)) + 44|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $127 | 2;
  HEAP32[$126>>2] = $128;
 }
 $129 = $5;
 $130 = ((($129)) + 4|0);
 $131 = HEAP16[$130>>1]|0;
 $132 = $131 << 16 >> 16;
 $133 = $132 & 16;
 $134 = ($133|0)!=(0);
 if ($134) {
  $135 = $xxs;
  $136 = ((($135)) + 44|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $139 = $xxs;
  $140 = ((($139)) + 32|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $141 >> 1;
  HEAP32[$140>>2] = $142;
  $143 = $xxs;
  $144 = ((($143)) + 36|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 >> 1;
  HEAP32[$144>>2] = $146;
  $147 = $xxs;
  $148 = ((($147)) + 40|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $149 >> 1;
  HEAP32[$148>>2] = $150;
 }
 $151 = $9;
 $152 = ($151|0)<(3);
 L24: do {
  if ($152) {
   $j = 0;
   while(1) {
    $153 = $j;
    $154 = ($153|0)<(9);
    if (!($154)) {
     break L24;
    }
    $k = 0;
    while(1) {
     $155 = $k;
     $156 = ($155|0)<(12);
     if (!($156)) {
      break;
     }
     $xpo = 0;
     $157 = $j;
     $158 = ($157|0)<(1);
     $159 = $j;
     if ($158) {
      $160 = (1 - ($159))|0;
      $161 = ($160*12)|0;
      $xpo = $161;
     } else {
      $162 = ($159|0)>(3);
      if ($162) {
       $163 = $j;
       $164 = (($163) - 3)|0;
       $165 = Math_imul(-12, $164)|0;
       $xpo = $165;
      }
     }
     $166 = $xpo;
     $167 = $166&255;
     $168 = $j;
     $169 = ($168*12)|0;
     $170 = $k;
     $171 = (($169) + ($170))|0;
     $172 = $xxi;
     $173 = ((($172)) + 512|0);
     $174 = (($173) + ($171<<1)|0);
     $175 = ((($174)) + 1|0);
     HEAP8[$175>>0] = $167;
     $176 = $k;
     $177 = (($176) + 1)|0;
     $k = $177;
    }
    $178 = $j;
    $179 = (($178) + 1)|0;
    $j = $179;
   }
  }
 } while(0);
 $180 = $2;
 $181 = $1;
 $182 = $xxs;
 $183 = (_load_sample($180,$181,64,$182,0)|0);
 $184 = ($183|0)<(0);
 if ($184) {
  $0 = -1;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 } else {
  $0 = 0;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 return (0)|0;
}
function _mmd_load_iffoct_instrument($f,$m,$i,$smp_idx,$instr,$num_oct,$exp_smp,$sample) {
 $f = $f|0;
 $m = $m|0;
 $i = $i|0;
 $smp_idx = $smp_idx|0;
 $instr = $instr|0;
 $num_oct = $num_oct|0;
 $exp_smp = $exp_smp|0;
 $sample = $sample|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $j = 0, $k = 0, $mod = 0, $or$cond = 0;
 var $rep = 0, $replen = 0, $size = 0, $sub = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $m;
 $3 = $i;
 $4 = $smp_idx;
 $5 = $instr;
 $6 = $num_oct;
 $7 = $exp_smp;
 $8 = $sample;
 $9 = $2;
 $mod = $9;
 $10 = $3;
 $11 = $mod;
 $12 = ((($11)) + 176|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*764)|0)|0);
 $xxi = $14;
 $15 = $6;
 $16 = ($15|0)<(2);
 $17 = $6;
 $18 = ($17|0)>(7);
 $or$cond = $16 | $18;
 if ($or$cond) {
  $0 = -1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $19 = $4;
 $20 = $6;
 $21 = (($19) + ($20))|0;
 $22 = $mod;
 $23 = ((($22)) + 144|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21|0)>($24|0);
 if ($25) {
  $0 = -1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $26 = $xxi;
 $27 = (_med_new_instrument_extras($26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $0 = -1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $29 = $7;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $xxi;
 $33 = ((($32)) + 760|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $31;
 $36 = $7;
 $37 = ((($36)) + 1|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 4;
 $41 = (4095 - ($40))|0;
 $42 = $xxi;
 $43 = ((($42)) + 40|0);
 HEAP32[$43>>2] = $41;
 $44 = $6;
 $45 = $xxi;
 $46 = ((($45)) + 36|0);
 HEAP32[$46>>2] = $44;
 $47 = $mod;
 $48 = $3;
 $49 = $6;
 $50 = (_subinstrument_alloc($47,$48,$49)|0);
 $51 = ($50|0)<(0);
 if ($51) {
  $0 = -1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $52 = $5;
 $53 = HEAP32[$52>>2]|0;
 $54 = $6;
 $55 = 1 << $54;
 $56 = (($55) - 1)|0;
 $57 = (($53>>>0) / ($56>>>0))&-1;
 $size = $57;
 $58 = $8;
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = $60<<1;
 $rep = $61;
 $62 = $8;
 $63 = ((($62)) + 2|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = $65<<1;
 $replen = $66;
 $j = 0;
 while(1) {
  $67 = $j;
  $68 = $6;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $j;
  $71 = $xxi;
  $72 = ((($71)) + 756|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70<<6)|0);
  $sub = $74;
  $75 = $8;
  $76 = ((($75)) + 6|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $sub;
  HEAP32[$79>>2] = $78;
  $80 = $sub;
  $81 = ((($80)) + 8|0);
  HEAP32[$81>>2] = 128;
  $82 = $8;
  $83 = ((($82)) + 7|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84 << 24 >> 24;
  $86 = (24 + ($85))|0;
  $87 = $sub;
  $88 = ((($87)) + 12|0);
  HEAP32[$88>>2] = $86;
  $89 = $4;
  $90 = $sub;
  $91 = ((($90)) + 40|0);
  HEAP32[$91>>2] = $89;
  $92 = $7;
  $93 = ((($92)) + 3|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94 << 24 >> 24;
  $96 = $95 << 4;
  $97 = $sub;
  $98 = ((($97)) + 16|0);
  HEAP32[$98>>2] = $96;
  $99 = $4;
  $100 = $mod;
  $101 = ((($100)) + 180|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + (($99*52)|0)|0);
  $xxs = $103;
  $104 = $size;
  $105 = $xxs;
  $106 = ((($105)) + 32|0);
  HEAP32[$106>>2] = $104;
  $107 = $rep;
  $108 = $xxs;
  $109 = ((($108)) + 36|0);
  HEAP32[$109>>2] = $107;
  $110 = $rep;
  $111 = $replen;
  $112 = (($110) + ($111))|0;
  $113 = $xxs;
  $114 = ((($113)) + 40|0);
  HEAP32[$114>>2] = $112;
  $115 = $xxs;
  $116 = ((($115)) + 44|0);
  HEAP32[$116>>2] = 0;
  $117 = $8;
  $118 = ((($117)) + 2|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $121 = ($120|0)>(1);
  if ($121) {
   $122 = $xxs;
   $123 = ((($122)) + 44|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 | 2;
   HEAP32[$123>>2] = $125;
  }
  $126 = $2;
  $127 = $1;
  $128 = $xxs;
  $129 = (_load_sample($126,$127,64,$128,0)|0);
  $130 = ($129|0)<(0);
  if ($130) {
   label = 14;
   break;
  }
  $131 = $4;
  $132 = (($131) + 1)|0;
  $4 = $132;
  $133 = $size;
  $134 = $133 << 1;
  $size = $134;
  $135 = $rep;
  $136 = $135 << 1;
  $rep = $136;
  $137 = $replen;
  $138 = $137 << 1;
  $replen = $138;
  $139 = $j;
  $140 = (($139) + 1)|0;
  $j = $140;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $j = 0;
 while(1) {
  $141 = $j;
  $142 = ($141|0)<(9);
  if (!($142)) {
   break;
  }
  $k = 0;
  while(1) {
   $143 = $k;
   $144 = ($143|0)<(12);
   $145 = $j;
   if (!($144)) {
    break;
   }
   $146 = $6;
   $147 = (($146) - 2)|0;
   $148 = (5680 + (($147*9)|0)|0);
   $149 = (($148) + ($145)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $j;
   $152 = ($151*12)|0;
   $153 = $k;
   $154 = (($152) + ($153))|0;
   $155 = $xxi;
   $156 = ((($155)) + 512|0);
   $157 = (($156) + ($154<<1)|0);
   HEAP8[$157>>0] = $150;
   $158 = $j;
   $159 = $6;
   $160 = (($159) - 2)|0;
   $161 = (5736 + (($160*9)|0)|0);
   $162 = (($161) + ($158)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $j;
   $165 = ($164*12)|0;
   $166 = $k;
   $167 = (($165) + ($166))|0;
   $168 = $xxi;
   $169 = ((($168)) + 512|0);
   $170 = (($169) + ($167<<1)|0);
   $171 = ((($170)) + 1|0);
   HEAP8[$171>>0] = $163;
   $172 = $k;
   $173 = (($172) + 1)|0;
   $k = $173;
  }
  $174 = (($145) + 1)|0;
  $j = $174;
 }
 $0 = 0;
 $175 = $0;
 STACKTOP = sp;return ($175|0);
}
function _mmd_set_bpm($m,$med_8ch,$deftempo,$bpm_on,$bpmlen) {
 $m = $m|0;
 $med_8ch = $med_8ch|0;
 $deftempo = $deftempo|0;
 $bpm_on = $bpm_on|0;
 $bpmlen = $bpmlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $med_8ch;
 $2 = $deftempo;
 $3 = $bpm_on;
 $4 = $bpmlen;
 $5 = $0;
 $mod = $5;
 $6 = $1;
 $7 = ($6|0)!=(0);
 $8 = $2;
 if ($7) {
  $9 = (_get_8ch_tempo($8)|0);
  $10 = $mod;
  $11 = ((($10)) + 152|0);
  HEAP32[$11>>2] = $9;
  STACKTOP = sp;return;
 }
 $12 = $mod;
 $13 = ((($12)) + 152|0);
 HEAP32[$13>>2] = $8;
 $14 = $3;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $4;
 $17 = (+($16|0));
 $18 = 40.0 / $17;
 $19 = $0;
 $20 = ((($19)) + 1256|0);
 HEAPF64[$20>>3] = $18;
 STACKTOP = sp;return;
}
function _mmd_info_text($f,$m,$offset) {
 $f = $f|0;
 $m = $m|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $m;
 $2 = $offset;
 $3 = $0;
 (_hio_read32b($3)|0);
 $4 = $0;
 (_hio_read16b($4)|0);
 $5 = $0;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $type = $7;
 $8 = $type;
 $9 = ($8|0)==(1);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = (_hio_read32b($10)|0);
 $len = $11;
 $12 = $len;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $len;
 $15 = (($14) + 1)|0;
 $16 = (_malloc($15)|0);
 $17 = $1;
 $18 = ((($17)) + 1220|0);
 HEAP32[$18>>2] = $16;
 $19 = $1;
 $20 = ((($19)) + 1220|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 $24 = ((($23)) + 1220|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $len;
 $27 = $0;
 (_hio_read($25,1,$26,$27)|0);
 $28 = $len;
 $29 = $1;
 $30 = ((($29)) + 1220|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($28)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function _get_8ch_tempo($tempo) {
 $tempo = $tempo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tempo;
 $2 = $1;
 $3 = ($2|0)>(0);
 $4 = $1;
 if ($3) {
  $5 = ($4|0)>(10);
  $6 = $1;
  $7 = $5 ? 10 : $6;
  $1 = $7;
  $8 = $1;
  $9 = (($8) - 1)|0;
  $10 = (5792 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = $4;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _mmd1_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 24|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($id,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 if ($6) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $7 = (_memcmp($id,5960,4)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (_memcmp($id,5968,4)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $0 = -1;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $11 = $1;
 (_hio_seek($11,28,1)|0);
 $12 = $1;
 $13 = (_hio_read32b($12)|0);
 $offset = $13;
 $14 = $offset;
 $15 = ($14|0)!=(0);
 $16 = $1;
 if ($15) {
  $17 = $3;
  $18 = $offset;
  $19 = (($17) + ($18))|0;
  $20 = (($19) + 44)|0;
  (_hio_seek($16,$20,0)|0);
  $21 = $1;
  $22 = (_hio_read32b($21)|0);
  $offset = $22;
  $23 = $1;
  $24 = (_hio_read32b($23)|0);
  $len = $24;
  $25 = $1;
  $26 = $3;
  $27 = $offset;
  $28 = (($26) + ($27))|0;
  (_hio_seek($25,$28,0)|0);
  $29 = $1;
  $30 = $2;
  $31 = $len;
  _read_title($29,$30,$31);
 } else {
  $32 = $2;
  _read_title($16,$32,0);
 }
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _mmd1_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $annotxt_offset = 0, $block = 0, $block_offset = 0, $block_offset1 = 0, $blockarr_offset = 0, $bpm_on = 0, $bpmlen = 0, $e = 0, $event = 0, $exp_smp = 0, $expdata = 0, $expdata_offset = 0, $expsmp_offset = 0, $header = 0, $hexvol = 0, $i = 0, $iinfo_offset = 0, $instr = 0;
 var $j = 0, $k = 0, $med_8ch = 0, $mod = 0, $oct = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $pos = 0, $ret = 0, $ret3 = 0, $ret4 = 0, $ret5 = 0, $smp_idx = 0, $smpl_offset = 0, $smpl_offset2 = 0, $smplarr_offset = 0, $song = 0, $song_offset = 0, $songname_offset = 0;
 var $synth = 0, $type = 0, $vararg_buffer = 0, $ver = 0, $wforms = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $header = sp + 768|0;
 $song = sp + 856|0;
 $block = sp + 760|0;
 $instr = sp + 752|0;
 $synth = sp + 216|0;
 $exp_smp = sp + 196|0;
 $expdata = sp + 112|0;
 $e = sp + 1644|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ver = 0;
 $smp_idx = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($header,4,1,$7)|0);
 $8 = ((($header)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($10) - 49)|0;
 $12 = (($11) + 1)|0;
 $ver = $12;
 $13 = $2;
 $14 = (_hio_read32b($13)|0);
 $15 = ((($header)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = (_hio_read32b($16)|0);
 $song_offset = $17;
 $18 = $2;
 (_hio_read16b($18)|0);
 $19 = $2;
 (_hio_read16b($19)|0);
 $20 = $2;
 $21 = (_hio_read32b($20)|0);
 $blockarr_offset = $21;
 $22 = $2;
 (_hio_read32b($22)|0);
 $23 = $2;
 $24 = (_hio_read32b($23)|0);
 $smplarr_offset = $24;
 $25 = $2;
 (_hio_read32b($25)|0);
 $26 = $2;
 $27 = (_hio_read32b($26)|0);
 $expdata_offset = $27;
 $28 = $2;
 (_hio_read32b($28)|0);
 $29 = $2;
 $30 = (_hio_read16b($29)|0);
 $31 = ((($header)) + 40|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read16b($32)|0);
 $34 = ((($header)) + 42|0);
 HEAP16[$34>>1] = $33;
 $35 = $2;
 $36 = (_hio_read16b($35)|0);
 $37 = ((($header)) + 44|0);
 HEAP16[$37>>1] = $36;
 $38 = $2;
 $39 = (_hio_read16b($38)|0);
 $40 = ((($header)) + 46|0);
 HEAP16[$40>>1] = $39;
 $41 = $2;
 $42 = (_hio_read16b($41)|0);
 $43 = ((($header)) + 48|0);
 HEAP16[$43>>1] = $42;
 $44 = $2;
 $45 = (_hio_read8($44)|0);
 $46 = ((($header)) + 50|0);
 HEAP8[$46>>0] = $45;
 $47 = $2;
 $48 = (_hio_read8($47)|0);
 $49 = ((($header)) + 51|0);
 HEAP8[$49>>0] = $48;
 $50 = $2;
 $51 = $3;
 $52 = $song_offset;
 $53 = (($51) + ($52))|0;
 $54 = (_hio_seek($50,$53,0)|0);
 $55 = ($54|0)!=(0);
 if ($55) {
  $0 = -1;
  $921 = $0;
  STACKTOP = sp;return ($921|0);
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(63);
  $58 = $2;
  $59 = (_hio_read16b($58)|0);
  if (!($57)) {
   break;
  }
  $60 = $i;
  $61 = (($song) + ($60<<3)|0);
  HEAP16[$61>>1] = $59;
  $62 = $2;
  $63 = (_hio_read16b($62)|0);
  $64 = $i;
  $65 = (($song) + ($64<<3)|0);
  $66 = ((($65)) + 2|0);
  HEAP16[$66>>1] = $63;
  $67 = $2;
  $68 = (_hio_read8($67)|0);
  $69 = $i;
  $70 = (($song) + ($69<<3)|0);
  $71 = ((($70)) + 4|0);
  HEAP8[$71>>0] = $68;
  $72 = $2;
  $73 = (_hio_read8($72)|0);
  $74 = $i;
  $75 = (($song) + ($74<<3)|0);
  $76 = ((($75)) + 5|0);
  HEAP8[$76>>0] = $73;
  $77 = $2;
  $78 = (_hio_read8($77)|0);
  $79 = $i;
  $80 = (($song) + ($79<<3)|0);
  $81 = ((($80)) + 6|0);
  HEAP8[$81>>0] = $78;
  $82 = $2;
  $83 = (_hio_read8s($82)|0);
  $84 = $i;
  $85 = (($song) + ($84<<3)|0);
  $86 = ((($85)) + 7|0);
  HEAP8[$86>>0] = $83;
  $87 = $i;
  $88 = (($87) + 1)|0;
  $i = $88;
 }
 $89 = ((($song)) + 504|0);
 HEAP16[$89>>1] = $59;
 $90 = $2;
 $91 = (_hio_read16b($90)|0);
 $92 = ((($song)) + 506|0);
 HEAP16[$92>>1] = $91;
 $93 = ((($song)) + 504|0);
 $94 = HEAP16[$93>>1]|0;
 $95 = $94&65535;
 $96 = ($95|0)>(255);
 if (!($96)) {
  $97 = ((($song)) + 506|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98&65535;
  $100 = ($99|0)>(256);
  if (!($100)) {
   $i = 0;
   while(1) {
    $101 = $i;
    $102 = ($101|0)<(256);
    $103 = $2;
    if (!($102)) {
     break;
    }
    $104 = (_hio_read8($103)|0);
    $105 = $i;
    $106 = ((($song)) + 508|0);
    $107 = (($106) + ($105)|0);
    HEAP8[$107>>0] = $104;
    $108 = $i;
    $109 = (($108) + 1)|0;
    $i = $109;
   }
   $110 = (_hio_read16b($103)|0);
   $111 = ((($song)) + 764|0);
   HEAP16[$111>>1] = $110;
   $112 = $2;
   $113 = (_hio_read8($112)|0);
   $114 = ((($song)) + 766|0);
   HEAP8[$114>>0] = $113;
   $115 = $2;
   $116 = (_hio_read8($115)|0);
   $117 = ((($song)) + 767|0);
   HEAP8[$117>>0] = $116;
   $118 = $2;
   $119 = (_hio_read8($118)|0);
   $120 = ((($song)) + 768|0);
   HEAP8[$120>>0] = $119;
   $121 = $2;
   $122 = (_hio_read8($121)|0);
   $123 = ((($song)) + 769|0);
   HEAP8[$123>>0] = $122;
   $i = 0;
   while(1) {
    $124 = $i;
    $125 = ($124|0)<(16);
    $126 = $2;
    $127 = (_hio_read8($126)|0);
    if (!($125)) {
     break;
    }
    $128 = $i;
    $129 = ((($song)) + 770|0);
    $130 = (($129) + ($128)|0);
    HEAP8[$130>>0] = $127;
    $131 = $i;
    $132 = (($131) + 1)|0;
    $i = $132;
   }
   $133 = ((($song)) + 786|0);
   HEAP8[$133>>0] = $127;
   $134 = $2;
   $135 = (_hio_read8($134)|0);
   $136 = ((($song)) + 787|0);
   HEAP8[$136>>0] = $135;
   $137 = $1;
   $138 = ((($137)) + 1264|0);
   HEAP32[$138>>2] = 8363;
   $139 = ((($song)) + 767|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = $141 & 32;
   $143 = ($142|0)!=(0);
   $144 = $143 ? 0 : 192;
   $145 = $1;
   $146 = ((($145)) + 1284|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 | $144;
   HEAP32[$146>>2] = $148;
   $149 = ((($song)) + 767|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = $151 & 16;
   $hexvol = $152;
   $153 = ((($song)) + 767|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = $155 & 64;
   $med_8ch = $156;
   $157 = ((($song)) + 768|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = $159 & 32;
   $bpm_on = $160;
   $161 = ((($song)) + 768|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = $163 & 31;
   $165 = (1 + ($164))|0;
   $bpmlen = $165;
   $166 = $1;
   $167 = ((($166)) + 1256|0);
   HEAPF64[$167>>3] = 2.6400000000000001;
   $168 = $1;
   $169 = $med_8ch;
   $170 = ((($song)) + 764|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = $171&65535;
   $173 = $bpm_on;
   $174 = $bpmlen;
   _mmd_set_bpm($168,$169,$172,$173,$174);
   $175 = ((($song)) + 769|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $mod;
   $179 = ((($178)) + 148|0);
   HEAP32[$179>>2] = $177;
   $180 = ((($song)) + 504|0);
   $181 = HEAP16[$180>>1]|0;
   $182 = $181&65535;
   $183 = $mod;
   $184 = ((($183)) + 128|0);
   HEAP32[$184>>2] = $182;
   $185 = ((($song)) + 787|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = $mod;
   $189 = ((($188)) + 140|0);
   HEAP32[$189>>2] = $187;
   $190 = ((($song)) + 506|0);
   $191 = HEAP16[$190>>1]|0;
   $192 = $191&65535;
   $193 = $mod;
   $194 = ((($193)) + 156|0);
   HEAP32[$194>>2] = $192;
   $195 = $mod;
   $196 = ((($195)) + 160|0);
   HEAP32[$196>>2] = 0;
   $197 = $mod;
   $198 = ((($197)) + 136|0);
   HEAP32[$198>>2] = 0;
   $199 = $mod;
   $200 = ((($199)) + 952|0);
   $201 = ((($song)) + 508|0);
   $202 = $mod;
   $203 = ((($202)) + 156|0);
   $204 = HEAP32[$203>>2]|0;
   _memcpy(($200|0),($201|0),($204|0))|0;
   $205 = $mod;
   HEAP8[$205>>0] = 0;
   $206 = $mod;
   $207 = ((($206)) + 144|0);
   HEAP32[$207>>2] = 0;
   $i = 0;
   L20: while(1) {
    $208 = $i;
    $209 = $mod;
    $210 = ((($209)) + 140|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ($208|0)<($211|0);
    if (!($212)) {
     label = 31;
     break;
    }
    $213 = $2;
    $214 = $3;
    $215 = $smplarr_offset;
    $216 = (($214) + ($215))|0;
    $217 = $i;
    $218 = $217<<2;
    $219 = (($216) + ($218))|0;
    $220 = (_hio_seek($213,$219,0)|0);
    $221 = ($220|0)!=(0);
    if ($221) {
     label = 18;
     break;
    }
    $222 = $2;
    $223 = (_hio_read32b($222)|0);
    $smpl_offset = $223;
    $224 = $smpl_offset;
    $225 = ($224|0)==(0);
    do {
     if (!($225)) {
      $226 = $2;
      $227 = $3;
      $228 = $smpl_offset;
      $229 = (($227) + ($228))|0;
      $230 = (_hio_seek($226,$229,0)|0);
      $231 = ($230|0)!=(0);
      if ($231) {
       label = 21;
       break L20;
      }
      $232 = $2;
      (_hio_read32b($232)|0);
      $233 = $2;
      $234 = (_hio_read16b($233)|0);
      $type = $234;
      $235 = $type;
      $236 = $235 << 16 >> 16;
      $237 = ($236|0)==(-1);
      if ($237) {
       $238 = $2;
       (_hio_seek($238,14,1)|0);
       $239 = $2;
       $240 = (_hio_read16b($239)|0);
       $241 = $240&65535;
       $wforms = $241;
       $242 = $wforms;
       $243 = ($242|0)>(256);
       if ($243) {
        label = 24;
        break L20;
       }
       $244 = $wforms;
       $245 = $mod;
       $246 = ((($245)) + 144|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = (($247) + ($244))|0;
       HEAP32[$246>>2] = $248;
       break;
      }
      $249 = $type;
      $250 = $249 << 16 >> 16;
      $251 = ($250|0)>=(1);
      if ($251) {
       $252 = $type;
       $253 = $252 << 16 >> 16;
       $254 = ($253|0)<=(6);
       if ($254) {
        $255 = $type;
        $256 = $255 << 16 >> 16;
        $257 = (($256) - 1)|0;
        $258 = (5872 + ($257<<2)|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $mod;
        $261 = ((($260)) + 144|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = (($262) + ($259))|0;
        HEAP32[$261>>2] = $263;
        break;
       }
      }
      $264 = $mod;
      $265 = ((($264)) + 144|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = (($266) + 1)|0;
      HEAP32[$265>>2] = $267;
     }
    } while(0);
    $268 = $i;
    $269 = (($268) + 1)|0;
    $i = $269;
   }
   if ((label|0) == 18) {
    $0 = -1;
    $921 = $0;
    STACKTOP = sp;return ($921|0);
   }
   else if ((label|0) == 21) {
    $0 = -1;
    $921 = $0;
    STACKTOP = sp;return ($921|0);
   }
   else if ((label|0) == 24) {
    $0 = -1;
    $921 = $0;
    STACKTOP = sp;return ($921|0);
   }
   else if ((label|0) == 31) {
    $270 = ((($expdata)) + 8|0);
    HEAP16[$270>>1] = 0;
    $271 = ((($expdata)) + 10|0);
    HEAP16[$271>>1] = 0;
    $272 = ((($expdata)) + 24|0);
    HEAP16[$272>>1] = 0;
    $273 = ((($expdata)) + 26|0);
    HEAP16[$273>>1] = 0;
    $expsmp_offset = 0;
    $iinfo_offset = 0;
    $274 = $expdata_offset;
    $275 = ($274|0)!=(0);
    do {
     if ($275) {
      $276 = $2;
      $277 = $3;
      $278 = $expdata_offset;
      $279 = (($277) + ($278))|0;
      $280 = (_hio_seek($276,$279,0)|0);
      $281 = ($280|0)!=(0);
      if ($281) {
       $0 = -1;
       $921 = $0;
       STACKTOP = sp;return ($921|0);
      }
      $282 = $2;
      (_hio_read32b($282)|0);
      $283 = $2;
      $284 = (_hio_read32b($283)|0);
      $expsmp_offset = $284;
      $285 = $2;
      $286 = (_hio_read16b($285)|0);
      $287 = ((($expdata)) + 8|0);
      HEAP16[$287>>1] = $286;
      $288 = $2;
      $289 = (_hio_read16b($288)|0);
      $290 = ((($expdata)) + 10|0);
      HEAP16[$290>>1] = $289;
      $291 = $2;
      $292 = (_hio_read32b($291)|0);
      $annotxt_offset = $292;
      $293 = $2;
      $294 = (_hio_read32b($293)|0);
      $295 = ((($expdata)) + 16|0);
      HEAP32[$295>>2] = $294;
      $296 = $2;
      $297 = (_hio_read32b($296)|0);
      $iinfo_offset = $297;
      $298 = $2;
      $299 = (_hio_read16b($298)|0);
      $300 = ((($expdata)) + 24|0);
      HEAP16[$300>>1] = $299;
      $301 = $2;
      $302 = (_hio_read16b($301)|0);
      $303 = ((($expdata)) + 26|0);
      HEAP16[$303>>1] = $302;
      $304 = $expsmp_offset;
      $305 = ($304|0)<(0);
      $306 = $annotxt_offset;
      $307 = ($306|0)<(0);
      $or$cond = $305 | $307;
      if (!($or$cond)) {
       $308 = ((($expdata)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309>>>0)>(65536);
       $311 = $iinfo_offset;
       $312 = ($311|0)<(0);
       $or$cond3 = $310 | $312;
       if (!($or$cond3)) {
        $313 = $2;
        (_hio_read32b($313)|0);
        $314 = $2;
        (_hio_read32b($314)|0);
        $315 = $2;
        (_hio_read32b($315)|0);
        $316 = $2;
        (_hio_read32b($316)|0);
        $317 = $2;
        $318 = (_hio_read32b($317)|0);
        $songname_offset = $318;
        $319 = $2;
        $320 = (_hio_read32b($319)|0);
        $321 = ((($expdata)) + 48|0);
        HEAP32[$321>>2] = $320;
        $322 = $2;
        $323 = $3;
        $324 = $songname_offset;
        $325 = (($323) + ($324))|0;
        (_hio_seek($322,$325,0)|0);
        $i = 0;
        while(1) {
         $326 = $i;
         $327 = ((($expdata)) + 48|0);
         $328 = HEAP32[$327>>2]|0;
         $329 = ($326>>>0)>=($328>>>0);
         $330 = $i;
         $331 = ($330|0)>=(64);
         $or$cond5 = $329 | $331;
         if ($or$cond5) {
          break;
         }
         $332 = $2;
         $333 = (_hio_read8($332)|0);
         $334 = $i;
         $335 = $mod;
         $336 = (($335) + ($334)|0);
         HEAP8[$336>>0] = $333;
         $337 = $i;
         $338 = (($337) + 1)|0;
         $i = $338;
        }
        $339 = $annotxt_offset;
        $340 = ($339|0)!=(0);
        if (!($340)) {
         break;
        }
        $341 = ((($expdata)) + 16|0);
        $342 = HEAP32[$341>>2]|0;
        $343 = ($342|0)!=(0);
        if (!($343)) {
         break;
        }
        $344 = ((($expdata)) + 16|0);
        $345 = HEAP32[$344>>2]|0;
        $346 = (($345) + 1)|0;
        $347 = (_malloc($346)|0);
        $348 = $1;
        $349 = ((($348)) + 1220|0);
        HEAP32[$349>>2] = $347;
        $350 = $1;
        $351 = ((($350)) + 1220|0);
        $352 = HEAP32[$351>>2]|0;
        $353 = ($352|0)!=(0|0);
        if (!($353)) {
         break;
        }
        $354 = $2;
        $355 = $3;
        $356 = $annotxt_offset;
        $357 = (($355) + ($356))|0;
        (_hio_seek($354,$357,0)|0);
        $358 = $1;
        $359 = ((($358)) + 1220|0);
        $360 = HEAP32[$359>>2]|0;
        $361 = ((($expdata)) + 16|0);
        $362 = HEAP32[$361>>2]|0;
        $363 = $2;
        (_hio_read($360,1,$362,$363)|0);
        $364 = ((($expdata)) + 16|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = $1;
        $367 = ((($366)) + 1220|0);
        $368 = HEAP32[$367>>2]|0;
        $369 = (($368) + ($365)|0);
        HEAP8[$369>>0] = 0;
        break;
       }
      }
      $0 = -1;
      $921 = $0;
      STACKTOP = sp;return ($921|0);
     }
    } while(0);
    $i = 0;
    while(1) {
     $370 = $i;
     $371 = $mod;
     $372 = ((($371)) + 128|0);
     $373 = HEAP32[$372>>2]|0;
     $374 = ($370|0)<($373|0);
     if (!($374)) {
      label = 57;
      break;
     }
     $375 = $2;
     $376 = $3;
     $377 = $blockarr_offset;
     $378 = (($376) + ($377))|0;
     $379 = $i;
     $380 = $379<<2;
     $381 = (($378) + ($380))|0;
     $382 = (_hio_seek($375,$381,0)|0);
     $383 = ($382|0)!=(0);
     if ($383) {
      label = 47;
      break;
     }
     $384 = $2;
     $385 = (_hio_read32b($384)|0);
     $block_offset = $385;
     $386 = $block_offset;
     $387 = ($386|0)==(0);
     if (!($387)) {
      $388 = $2;
      $389 = $3;
      $390 = $block_offset;
      $391 = (($389) + ($390))|0;
      $392 = (_hio_seek($388,$391,0)|0);
      $393 = ($392|0)!=(0);
      if ($393) {
       label = 50;
       break;
      }
      $394 = $ver;
      $395 = ($394|0)>(0);
      $396 = $2;
      if ($395) {
       $397 = (_hio_read16b($396)|0);
       HEAP16[$block>>1] = $397;
       $398 = $2;
       $399 = (_hio_read16b($398)|0);
       $400 = ((($block)) + 2|0);
       HEAP16[$400>>1] = $399;
      } else {
       $401 = (_hio_read8($396)|0);
       $402 = $401&255;
       HEAP16[$block>>1] = $402;
       $403 = $2;
       $404 = (_hio_read8($403)|0);
       $405 = $404&255;
       $406 = ((($block)) + 2|0);
       HEAP16[$406>>1] = $405;
      }
      $407 = HEAP16[$block>>1]|0;
      $408 = $407&65535;
      $409 = $mod;
      $410 = ((($409)) + 136|0);
      $411 = HEAP32[$410>>2]|0;
      $412 = ($408|0)>($411|0);
      if ($412) {
       $413 = HEAP16[$block>>1]|0;
       $414 = $413&65535;
       $415 = $mod;
       $416 = ((($415)) + 136|0);
       HEAP32[$416>>2] = $414;
      }
     }
     $417 = $i;
     $418 = (($417) + 1)|0;
     $i = $418;
    }
    if ((label|0) == 47) {
     $0 = -1;
     $921 = $0;
     STACKTOP = sp;return ($921|0);
    }
    else if ((label|0) == 50) {
     $0 = -1;
     $921 = $0;
     STACKTOP = sp;return ($921|0);
    }
    else if ((label|0) == 57) {
     $419 = $mod;
     $420 = ((($419)) + 136|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = ($421|0)>(64);
     if ($422) {
      $0 = -1;
      $921 = $0;
      STACKTOP = sp;return ($921|0);
     }
     $423 = $mod;
     $424 = ((($423)) + 128|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = $mod;
     $427 = ((($426)) + 136|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = Math_imul($425, $428)|0;
     $430 = $mod;
     $431 = ((($430)) + 132|0);
     HEAP32[$431>>2] = $429;
     $432 = $1;
     $433 = $ver;
     $434 = ($433|0)==(0);
     if ($434) {
      $435 = $mod;
      $436 = ((($435)) + 136|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = ($437|0)>(4);
      $439 = $438 ? 5896 : 5920;
      $440 = $439;
     } else {
      $440 = 5936;
     }
     _set_type($432,$440,$vararg_buffer);
     $441 = $mod;
     $442 = (_pattern_init($441)|0);
     $443 = ($442|0)<(0);
     if ($443) {
      $0 = -1;
      $921 = $0;
      STACKTOP = sp;return ($921|0);
     }
     $i = 0;
     L89: while(1) {
      $444 = $i;
      $445 = $mod;
      $446 = ((($445)) + 128|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = ($444|0)<($447|0);
      if (!($448)) {
       label = 101;
       break;
      }
      $449 = $2;
      $450 = $3;
      $451 = $blockarr_offset;
      $452 = (($450) + ($451))|0;
      $453 = $i;
      $454 = $453<<2;
      $455 = (($452) + ($454))|0;
      $456 = (_hio_seek($449,$455,0)|0);
      $457 = ($456|0)!=(0);
      if ($457) {
       label = 66;
       break;
      }
      $458 = $2;
      $459 = (_hio_read32b($458)|0);
      $block_offset1 = $459;
      $460 = $block_offset1;
      $461 = ($460|0)==(0);
      L93: do {
       if (!($461)) {
        $462 = $2;
        $463 = $3;
        $464 = $block_offset1;
        $465 = (($463) + ($464))|0;
        $466 = (_hio_seek($462,$465,0)|0);
        $467 = ($466|0)!=(0);
        if ($467) {
         label = 69;
         break L89;
        }
        $468 = $ver;
        $469 = ($468|0)>(0);
        $470 = $2;
        if ($469) {
         $471 = (_hio_read16b($470)|0);
         HEAP16[$block>>1] = $471;
         $472 = $2;
         $473 = (_hio_read16b($472)|0);
         $474 = ((($block)) + 2|0);
         HEAP16[$474>>1] = $473;
         $475 = $2;
         (_hio_read32b($475)|0);
        } else {
         $476 = (_hio_read8($470)|0);
         $477 = $476&255;
         HEAP16[$block>>1] = $477;
         $478 = $2;
         $479 = (_hio_read8($478)|0);
         $480 = $479&255;
         $481 = ((($block)) + 2|0);
         HEAP16[$481>>1] = $480;
        }
        $482 = $mod;
        $483 = $i;
        $484 = ((($block)) + 2|0);
        $485 = HEAP16[$484>>1]|0;
        $486 = $485&65535;
        $487 = (($486) + 1)|0;
        $488 = (_pattern_tracks_alloc($482,$483,$487)|0);
        $489 = ($488|0)<(0);
        if ($489) {
         label = 74;
         break L89;
        }
        $490 = $ver;
        $491 = ($490|0)>(0);
        $j = 0;
        if ($491) {
         while(1) {
          $492 = $j;
          $493 = $i;
          $494 = $mod;
          $495 = ((($494)) + 168|0);
          $496 = HEAP32[$495>>2]|0;
          $497 = (($496) + ($493<<2)|0);
          $498 = HEAP32[$497>>2]|0;
          $499 = HEAP32[$498>>2]|0;
          $500 = ($492|0)<($499|0);
          if (!($500)) {
           break L93;
          }
          $k = 0;
          while(1) {
           $501 = $k;
           $502 = HEAP16[$block>>1]|0;
           $503 = $502&65535;
           $504 = ($501|0)<($503|0);
           if (!($504)) {
            break;
           }
           $505 = $2;
           $506 = (_hio_read8($505)|0);
           HEAP8[$e>>0] = $506;
           $507 = $2;
           $508 = (_hio_read8($507)|0);
           $509 = ((($e)) + 1|0);
           HEAP8[$509>>0] = $508;
           $510 = $2;
           $511 = (_hio_read8($510)|0);
           $512 = ((($e)) + 2|0);
           HEAP8[$512>>0] = $511;
           $513 = $2;
           $514 = (_hio_read8($513)|0);
           $515 = ((($e)) + 3|0);
           HEAP8[$515>>0] = $514;
           $516 = $j;
           $517 = $k;
           $518 = $i;
           $519 = $1;
           $520 = ((($519)) + 168|0);
           $521 = HEAP32[$520>>2]|0;
           $522 = (($521) + ($518<<2)|0);
           $523 = HEAP32[$522>>2]|0;
           $524 = ((($523)) + 4|0);
           $525 = (($524) + ($517<<2)|0);
           $526 = HEAP32[$525>>2]|0;
           $527 = $1;
           $528 = ((($527)) + 172|0);
           $529 = HEAP32[$528>>2]|0;
           $530 = (($529) + ($526<<2)|0);
           $531 = HEAP32[$530>>2]|0;
           $532 = ((($531)) + 4|0);
           $533 = (($532) + ($516<<3)|0);
           $event = $533;
           $534 = HEAP8[$e>>0]|0;
           $535 = $534&255;
           $536 = $535 & 127;
           $537 = $536&255;
           $538 = $event;
           HEAP8[$538>>0] = $537;
           $539 = $event;
           $540 = HEAP8[$539>>0]|0;
           $541 = ($540<<24>>24)!=(0);
           if ($541) {
            $542 = ((($song)) + 766|0);
            $543 = HEAP8[$542>>0]|0;
            $544 = $543 << 24 >> 24;
            $545 = (12 + ($544))|0;
            $546 = $event;
            $547 = HEAP8[$546>>0]|0;
            $548 = $547&255;
            $549 = (($548) + ($545))|0;
            $550 = $549&255;
            HEAP8[$546>>0] = $550;
           }
           $551 = $event;
           $552 = HEAP8[$551>>0]|0;
           $553 = $552&255;
           $554 = ($553|0)>=(121);
           if ($554) {
            $555 = $event;
            HEAP8[$555>>0] = 0;
           }
           $556 = ((($e)) + 1|0);
           $557 = HEAP8[$556>>0]|0;
           $558 = $557&255;
           $559 = $558 & 63;
           $560 = $559&255;
           $561 = $event;
           $562 = ((($561)) + 1|0);
           HEAP8[$562>>0] = $560;
           $563 = $event;
           $564 = ((($563)) + 1|0);
           $565 = HEAP8[$564>>0]|0;
           $566 = $565&255;
           $567 = ($566|0)!=(0);
           do {
            if ($567) {
             $568 = $event;
             $569 = HEAP8[$568>>0]|0;
             $570 = ($569<<24>>24)!=(0);
             if ($570) {
              break;
             }
             $571 = $event;
             $572 = ((($571)) + 5|0);
             HEAP8[$572>>0] = -79;
            }
           } while(0);
           $573 = ((($e)) + 2|0);
           $574 = HEAP8[$573>>0]|0;
           $575 = $event;
           $576 = ((($575)) + 3|0);
           HEAP8[$576>>0] = $574;
           $577 = ((($e)) + 3|0);
           $578 = HEAP8[$577>>0]|0;
           $579 = $event;
           $580 = ((($579)) + 4|0);
           HEAP8[$580>>0] = $578;
           $581 = $event;
           $582 = $bpm_on;
           $583 = $bpmlen;
           $584 = $med_8ch;
           $585 = $hexvol;
           _mmd_xlat_fx($581,$582,$583,$584,$585);
           $586 = $k;
           $587 = (($586) + 1)|0;
           $k = $587;
          }
          $588 = $j;
          $589 = (($588) + 1)|0;
          $j = $589;
         }
        } else {
         while(1) {
          $590 = $j;
          $591 = $i;
          $592 = $mod;
          $593 = ((($592)) + 168|0);
          $594 = HEAP32[$593>>2]|0;
          $595 = (($594) + ($591<<2)|0);
          $596 = HEAP32[$595>>2]|0;
          $597 = HEAP32[$596>>2]|0;
          $598 = ($590|0)<($597|0);
          if (!($598)) {
           break L93;
          }
          $k = 0;
          while(1) {
           $599 = $k;
           $600 = HEAP16[$block>>1]|0;
           $601 = $600&65535;
           $602 = ($599|0)<($601|0);
           if (!($602)) {
            break;
           }
           $603 = $2;
           $604 = (_hio_read8($603)|0);
           HEAP8[$e>>0] = $604;
           $605 = $2;
           $606 = (_hio_read8($605)|0);
           $607 = ((($e)) + 1|0);
           HEAP8[$607>>0] = $606;
           $608 = $2;
           $609 = (_hio_read8($608)|0);
           $610 = ((($e)) + 2|0);
           HEAP8[$610>>0] = $609;
           $611 = $j;
           $612 = $k;
           $613 = $i;
           $614 = $1;
           $615 = ((($614)) + 168|0);
           $616 = HEAP32[$615>>2]|0;
           $617 = (($616) + ($613<<2)|0);
           $618 = HEAP32[$617>>2]|0;
           $619 = ((($618)) + 4|0);
           $620 = (($619) + ($612<<2)|0);
           $621 = HEAP32[$620>>2]|0;
           $622 = $1;
           $623 = ((($622)) + 172|0);
           $624 = HEAP32[$623>>2]|0;
           $625 = (($624) + ($621<<2)|0);
           $626 = HEAP32[$625>>2]|0;
           $627 = ((($626)) + 4|0);
           $628 = (($627) + ($611<<3)|0);
           $event = $628;
           $629 = HEAP8[$e>>0]|0;
           $630 = $629&255;
           $631 = $630 & 63;
           $632 = $631&255;
           $633 = $event;
           HEAP8[$633>>0] = $632;
           $634 = $event;
           $635 = HEAP8[$634>>0]|0;
           $636 = ($635<<24>>24)!=(0);
           if ($636) {
            $637 = $event;
            $638 = HEAP8[$637>>0]|0;
            $639 = $638&255;
            $640 = (($639) + 12)|0;
            $641 = $640&255;
            HEAP8[$637>>0] = $641;
           }
           $642 = $event;
           $643 = HEAP8[$642>>0]|0;
           $644 = $643&255;
           $645 = ($644|0)>=(121);
           if ($645) {
            $646 = $event;
            HEAP8[$646>>0] = 0;
           }
           $647 = ((($e)) + 1|0);
           $648 = HEAP8[$647>>0]|0;
           $649 = $648&255;
           $650 = $649 >> 4;
           $651 = HEAP8[$e>>0]|0;
           $652 = $651&255;
           $653 = $652 & 128;
           $654 = $653 >> 3;
           $655 = $650 | $654;
           $656 = HEAP8[$e>>0]|0;
           $657 = $656&255;
           $658 = $657 & 64;
           $659 = $658 >> 1;
           $660 = $655 | $659;
           $661 = $660&255;
           $662 = $event;
           $663 = ((($662)) + 1|0);
           HEAP8[$663>>0] = $661;
           $664 = $event;
           $665 = ((($664)) + 1|0);
           $666 = HEAP8[$665>>0]|0;
           $667 = $666&255;
           $668 = ($667|0)!=(0);
           do {
            if ($668) {
             $669 = $event;
             $670 = HEAP8[$669>>0]|0;
             $671 = ($670<<24>>24)!=(0);
             if ($671) {
              break;
             }
             $672 = $event;
             $673 = ((($672)) + 5|0);
             HEAP8[$673>>0] = -79;
            }
           } while(0);
           $674 = ((($e)) + 1|0);
           $675 = HEAP8[$674>>0]|0;
           $676 = $675&255;
           $677 = $676 & 15;
           $678 = $677&255;
           $679 = $event;
           $680 = ((($679)) + 3|0);
           HEAP8[$680>>0] = $678;
           $681 = ((($e)) + 2|0);
           $682 = HEAP8[$681>>0]|0;
           $683 = $event;
           $684 = ((($683)) + 4|0);
           HEAP8[$684>>0] = $682;
           $685 = $event;
           $686 = $bpm_on;
           $687 = $bpmlen;
           $688 = $med_8ch;
           $689 = $hexvol;
           _mmd_xlat_fx($685,$686,$687,$688,$689);
           $690 = $k;
           $691 = (($690) + 1)|0;
           $k = $691;
          }
          $692 = $j;
          $693 = (($692) + 1)|0;
          $j = $693;
         }
        }
       }
      } while(0);
      $694 = $i;
      $695 = (($694) + 1)|0;
      $i = $695;
     }
     if ((label|0) == 66) {
      $0 = -1;
      $921 = $0;
      STACKTOP = sp;return ($921|0);
     }
     else if ((label|0) == 69) {
      $0 = -1;
      $921 = $0;
      STACKTOP = sp;return ($921|0);
     }
     else if ((label|0) == 74) {
      $0 = -1;
      $921 = $0;
      STACKTOP = sp;return ($921|0);
     }
     else if ((label|0) == 101) {
      $696 = $1;
      $697 = (_med_new_module_extras($696)|0);
      $698 = ($697|0)!=(0);
      if ($698) {
       $0 = -1;
       $921 = $0;
       STACKTOP = sp;return ($921|0);
      }
      $699 = $mod;
      $700 = (_instrument_init($699)|0);
      $701 = ($700|0)<(0);
      if ($701) {
       $0 = -1;
       $921 = $0;
       STACKTOP = sp;return ($921|0);
      }
      $i = 0;
      $smp_idx = 0;
      L151: while(1) {
       $702 = $i;
       $703 = $mod;
       $704 = ((($703)) + 140|0);
       $705 = HEAP32[$704>>2]|0;
       $706 = ($702|0)<($705|0);
       if (!($706)) {
        label = 144;
        break;
       }
       $707 = $2;
       $708 = $3;
       $709 = $smplarr_offset;
       $710 = (($708) + ($709))|0;
       $711 = $i;
       $712 = $711<<2;
       $713 = (($710) + ($712))|0;
       $714 = (_hio_seek($707,$713,0)|0);
       $715 = ($714|0)!=(0);
       if ($715) {
        label = 108;
        break;
       }
       $716 = $2;
       $717 = (_hio_read32b($716)|0);
       $smpl_offset2 = $717;
       $718 = $smpl_offset2;
       $719 = ($718|0)==(0);
       L155: do {
        if (!($719)) {
         $720 = $2;
         $721 = $3;
         $722 = $smpl_offset2;
         $723 = (($721) + ($722))|0;
         $724 = (_hio_seek($720,$723,0)|0);
         $725 = ($724|0)!=(0);
         if ($725) {
          label = 111;
          break L151;
         }
         $726 = $2;
         $727 = (_hio_read32b($726)|0);
         HEAP32[$instr>>2] = $727;
         $728 = $2;
         $729 = (_hio_read16b($728)|0);
         $730 = ((($instr)) + 4|0);
         HEAP16[$730>>1] = $729;
         $731 = $2;
         $732 = (_hio_tell($731)|0);
         $pos = $732;
         $733 = $expdata_offset;
         $734 = ($733|0)!=(0);
         do {
          if ($734) {
           $735 = $i;
           $736 = ((($expdata)) + 24|0);
           $737 = HEAP16[$736>>1]|0;
           $738 = $737&65535;
           $739 = ($735|0)<($738|0);
           if (!($739)) {
            break;
           }
           $740 = $i;
           $741 = $mod;
           $742 = ((($741)) + 176|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = (($743) + (($740*764)|0)|0);
           $xxi = $744;
           $745 = $2;
           $746 = $iinfo_offset;
           $747 = $i;
           $748 = ((($expdata)) + 26|0);
           $749 = HEAP16[$748>>1]|0;
           $750 = $749&65535;
           $751 = Math_imul($747, $750)|0;
           $752 = (($746) + ($751))|0;
           $753 = (_hio_seek($745,$752,0)|0);
           $754 = ($753|0)!=(0);
           if ($754) {
            label = 115;
            break L151;
           }
           $755 = $xxi;
           $756 = $2;
           (_hio_read($755,40,1,$756)|0);
          }
         } while(0);
         $757 = ((($exp_smp)) + 3|0);
         HEAP8[$757>>0] = 0;
         $758 = $expdata_offset;
         $759 = ($758|0)!=(0);
         do {
          if ($759) {
           $760 = $i;
           $761 = ((($expdata)) + 8|0);
           $762 = HEAP16[$761>>1]|0;
           $763 = $762&65535;
           $764 = ($760|0)<($763|0);
           if (!($764)) {
            break;
           }
           $765 = $2;
           $766 = $expsmp_offset;
           $767 = $i;
           $768 = ((($expdata)) + 10|0);
           $769 = HEAP16[$768>>1]|0;
           $770 = $769&65535;
           $771 = Math_imul($767, $770)|0;
           $772 = (($766) + ($771))|0;
           $773 = (_hio_seek($765,$772,0)|0);
           $774 = ($773|0)!=(0);
           if ($774) {
            label = 120;
            break L151;
           }
           $775 = $2;
           $776 = (_hio_read8($775)|0);
           HEAP8[$exp_smp>>0] = $776;
           $777 = $2;
           $778 = (_hio_read8($777)|0);
           $779 = ((($exp_smp)) + 1|0);
           HEAP8[$779>>0] = $778;
           $780 = $2;
           $781 = (_hio_read8($780)|0);
           $782 = ((($exp_smp)) + 2|0);
           HEAP8[$782>>0] = $781;
           $783 = $2;
           $784 = (_hio_read8($783)|0);
           $785 = ((($exp_smp)) + 3|0);
           HEAP8[$785>>0] = $784;
          }
         } while(0);
         $786 = $2;
         $787 = $pos;
         (_hio_seek($786,$787,0)|0);
         $788 = ((($instr)) + 4|0);
         $789 = HEAP16[$788>>1]|0;
         $790 = $789 << 16 >> 16;
         $791 = ($790|0)==(-2);
         if ($791) {
          $792 = $2;
          $793 = $1;
          $794 = $i;
          $795 = $smp_idx;
          $796 = $i;
          $797 = (($song) + ($796<<3)|0);
          $798 = (_mmd_load_hybrid_instrument($792,$793,$794,$795,$synth,$exp_smp,$797)|0);
          $ret = $798;
          $799 = $smp_idx;
          $800 = (($799) + 1)|0;
          $smp_idx = $800;
          $801 = $ret;
          $802 = ($801|0)<(0);
          if ($802) {
           label = 124;
           break L151;
          }
          $803 = $1;
          $804 = $i;
          $805 = (_mmd_alloc_tables($803,$804,$synth)|0);
          $806 = ($805|0)!=(0);
          if ($806) {
           label = 126;
           break L151;
          } else {
           break;
          }
         }
         $807 = ((($instr)) + 4|0);
         $808 = HEAP16[$807>>1]|0;
         $809 = $808 << 16 >> 16;
         $810 = ($809|0)==(-1);
         if ($810) {
          $811 = $2;
          $812 = $1;
          $813 = $i;
          $814 = $smp_idx;
          $815 = $i;
          $816 = (($song) + ($815<<3)|0);
          $817 = (_mmd_load_synth_instrument($811,$812,$813,$814,$synth,$exp_smp,$816)|0);
          $ret3 = $817;
          $818 = $ret3;
          $819 = ($818|0)>(0);
          if ($819) {
           break;
          }
          $820 = $ret3;
          $821 = ($820|0)<(0);
          if ($821) {
           label = 130;
           break L151;
          }
          $822 = ((($synth)) + 20|0);
          $823 = HEAP16[$822>>1]|0;
          $824 = $823&65535;
          $825 = $smp_idx;
          $826 = (($825) + ($824))|0;
          $smp_idx = $826;
          $827 = $1;
          $828 = $i;
          $829 = (_mmd_alloc_tables($827,$828,$synth)|0);
          $830 = ($829|0)!=(0);
          if ($830) {
           label = 132;
           break L151;
          } else {
           break;
          }
         }
         $831 = ((($instr)) + 4|0);
         $832 = HEAP16[$831>>1]|0;
         $833 = $832 << 16 >> 16;
         $834 = ($833|0)>=(1);
         do {
          if ($834) {
           $835 = ((($instr)) + 4|0);
           $836 = HEAP16[$835>>1]|0;
           $837 = $836 << 16 >> 16;
           $838 = ($837|0)<=(6);
           if (!($838)) {
            break;
           }
           $839 = ((($instr)) + 4|0);
           $840 = HEAP16[$839>>1]|0;
           $841 = $840 << 16 >> 16;
           $842 = (($841) - 1)|0;
           $843 = (5872 + ($842<<2)|0);
           $844 = HEAP32[$843>>2]|0;
           $oct = $844;
           $845 = $2;
           $846 = $3;
           $847 = $smpl_offset2;
           $848 = (($846) + ($847))|0;
           $849 = (($848) + 6)|0;
           (_hio_seek($845,$849,0)|0);
           $850 = $2;
           $851 = $1;
           $852 = $i;
           $853 = $smp_idx;
           $854 = $oct;
           $855 = $i;
           $856 = (($song) + ($855<<3)|0);
           $857 = (_mmd_load_iffoct_instrument($850,$851,$852,$853,$instr,$854,$exp_smp,$856)|0);
           $ret4 = $857;
           $858 = $ret4;
           $859 = ($858|0)<(0);
           if ($859) {
            label = 136;
            break L151;
           }
           $860 = $oct;
           $861 = $smp_idx;
           $862 = (($861) + ($860))|0;
           $smp_idx = $862;
           break L155;
          }
         } while(0);
         $863 = ((($instr)) + 4|0);
         $864 = HEAP16[$863>>1]|0;
         $865 = $864 << 16 >> 16;
         $866 = ($865|0)==(0);
         if (!($866)) {
          label = 142;
          break L151;
         }
         $867 = $2;
         $868 = $3;
         $869 = $smpl_offset2;
         $870 = (($868) + ($869))|0;
         $871 = (($870) + 6)|0;
         (_hio_seek($867,$871,0)|0);
         $872 = $2;
         $873 = $1;
         $874 = $i;
         $875 = $smp_idx;
         $876 = $i;
         $877 = (($song) + ($876<<3)|0);
         $878 = $ver;
         $879 = (_mmd_load_sampled_instrument($872,$873,$874,$875,$instr,$expdata,$exp_smp,$877,$878)|0);
         $ret5 = $879;
         $880 = $ret5;
         $881 = ($880|0)<(0);
         if ($881) {
          label = 140;
          break L151;
         }
         $882 = $smp_idx;
         $883 = (($882) + 1)|0;
         $smp_idx = $883;
        }
       } while(0);
       $884 = $i;
       $885 = (($884) + 1)|0;
       $i = $885;
      }
      switch (label|0) {
       case 108: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 111: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 115: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 120: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 124: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 126: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 130: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 132: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 136: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 140: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 142: {
        $0 = -1;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
       case 144: {
        $i = 0;
        while(1) {
         $886 = $i;
         $887 = $mod;
         $888 = ((($887)) + 136|0);
         $889 = HEAP32[$888>>2]|0;
         $890 = ($886|0)<($889|0);
         if (!($890)) {
          break;
         }
         $891 = $i;
         $892 = ((($song)) + 770|0);
         $893 = (($892) + ($891)|0);
         $894 = HEAP8[$893>>0]|0;
         $895 = $894&255;
         $896 = $i;
         $897 = $mod;
         $898 = ((($897)) + 184|0);
         $899 = (($898) + (($896*12)|0)|0);
         $900 = ((($899)) + 4|0);
         HEAP32[$900>>2] = $895;
         $901 = $i;
         $902 = (($901) + 1)|0;
         $903 = (($902|0) / 2)&-1;
         $904 = (($903|0) % 2)&-1;
         $905 = ($904*255)|0;
         $906 = (($905) - 128)|0;
         $907 = $1;
         $908 = ((($907)) + 1296|0);
         $909 = HEAP32[$908>>2]|0;
         $910 = Math_imul($906, $909)|0;
         $911 = (($910|0) / 100)&-1;
         $912 = (128 + ($911))|0;
         $913 = $i;
         $914 = $mod;
         $915 = ((($914)) + 184|0);
         $916 = (($915) + (($913*12)|0)|0);
         HEAP32[$916>>2] = $912;
         $917 = $i;
         $918 = (($917) + 1)|0;
         $i = $918;
        }
        $919 = $1;
        $920 = ((($919)) + 1288|0);
        HEAP32[$920>>2] = 4;
        $0 = 0;
        $921 = $0;
        STACKTOP = sp;return ($921|0);
        break;
       }
      }
     }
    }
   }
  }
 }
 $0 = -1;
 $921 = $0;
 STACKTOP = sp;return ($921|0);
}
function _mmd3_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $id = sp + 24|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($id,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 if ($6) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 $7 = (_memcmp($id,6072,4)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (_memcmp($id,6080,4)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $0 = -1;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $11 = $1;
 (_hio_seek($11,28,1)|0);
 $12 = $1;
 $13 = (_hio_read32b($12)|0);
 $offset = $13;
 $14 = $offset;
 $15 = ($14|0)!=(0);
 $16 = $1;
 if ($15) {
  $17 = $3;
  $18 = $offset;
  $19 = (($17) + ($18))|0;
  $20 = (($19) + 44)|0;
  (_hio_seek($16,$20,0)|0);
  $21 = $1;
  $22 = (_hio_read32b($21)|0);
  $offset = $22;
  $23 = $1;
  $24 = (_hio_read32b($23)|0);
  $len = $24;
  $25 = $1;
  $26 = $3;
  $27 = $offset;
  $28 = (($26) + ($27))|0;
  (_hio_seek($25,$28,0)|0);
  $29 = $1;
  $30 = $2;
  $31 = $len;
  _read_title($29,$30,$31);
 } else {
  $32 = $2;
  _read_title($16,$32,0);
 }
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _mmd3_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $block_offset = 0, $block_offset1 = 0, $blockarr_offset = 0, $bpm_on = 0, $bpmlen = 0, $e = 0, $event = 0, $exp_smp = 0;
 var $expdata = 0, $expdata_offset = 0, $expsmp_offset = 0, $header = 0, $hexvol = 0, $i = 0, $iinfo_offset = 0, $instr = 0, $j = 0, $k = 0, $med_8ch = 0, $mmdinfo_offset = 0, $mod = 0, $oct = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $playseq_offset = 0, $pos = 0, $ret = 0;
 var $ret3 = 0, $ret4 = 0, $ret5 = 0, $seqtable_offset = 0, $smp_idx = 0, $smpl_offset = 0, $smpl_offset2 = 0, $smplarr_offset = 0, $song = 0, $song_offset = 0, $songname_offset = 0, $synth = 0, $trackpans_offset = 0, $trackvols_offset = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $ver = 0, $xxi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1680|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $header = sp + 1580|0;
 $song = sp + 792|0;
 $block = sp + 784|0;
 $instr = sp + 776|0;
 $synth = sp + 240|0;
 $exp_smp = sp + 220|0;
 $expdata = sp + 136|0;
 $e = sp + 1668|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $ver = 0;
 $smp_idx = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read($header,4,1,$7)|0);
 $8 = ((($header)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 << 24 >> 24;
 $11 = (($10) - 49)|0;
 $12 = (($11) + 1)|0;
 $ver = $12;
 $13 = $2;
 $14 = (_hio_read32b($13)|0);
 $15 = ((($header)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = (_hio_read32b($16)|0);
 $song_offset = $17;
 $18 = $2;
 (_hio_read16b($18)|0);
 $19 = $2;
 (_hio_read16b($19)|0);
 $20 = $2;
 $21 = (_hio_read32b($20)|0);
 $blockarr_offset = $21;
 $22 = $2;
 (_hio_read32b($22)|0);
 $23 = $2;
 $24 = (_hio_read32b($23)|0);
 $smplarr_offset = $24;
 $25 = $2;
 (_hio_read32b($25)|0);
 $26 = $2;
 $27 = (_hio_read32b($26)|0);
 $expdata_offset = $27;
 $28 = $2;
 (_hio_read32b($28)|0);
 $29 = $2;
 $30 = (_hio_read16b($29)|0);
 $31 = ((($header)) + 40|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read16b($32)|0);
 $34 = ((($header)) + 42|0);
 HEAP16[$34>>1] = $33;
 $35 = $2;
 $36 = (_hio_read16b($35)|0);
 $37 = ((($header)) + 44|0);
 HEAP16[$37>>1] = $36;
 $38 = $2;
 $39 = (_hio_read16b($38)|0);
 $40 = ((($header)) + 46|0);
 HEAP16[$40>>1] = $39;
 $41 = $2;
 $42 = (_hio_read16b($41)|0);
 $43 = ((($header)) + 48|0);
 HEAP16[$43>>1] = $42;
 $44 = $2;
 $45 = (_hio_read8($44)|0);
 $46 = ((($header)) + 50|0);
 HEAP8[$46>>0] = $45;
 $47 = $2;
 $48 = (_hio_read8($47)|0);
 $49 = ((($header)) + 51|0);
 HEAP8[$49>>0] = $48;
 $50 = $2;
 $51 = $3;
 $52 = $song_offset;
 $53 = (($51) + ($52))|0;
 (_hio_seek($50,$53,0)|0);
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = ($54|0)<(63);
  $56 = $2;
  $57 = (_hio_read16b($56)|0);
  if (!($55)) {
   break;
  }
  $58 = $i;
  $59 = (($song) + ($58<<3)|0);
  HEAP16[$59>>1] = $57;
  $60 = $2;
  $61 = (_hio_read16b($60)|0);
  $62 = $i;
  $63 = (($song) + ($62<<3)|0);
  $64 = ((($63)) + 2|0);
  HEAP16[$64>>1] = $61;
  $65 = $2;
  $66 = (_hio_read8($65)|0);
  $67 = $i;
  $68 = (($song) + ($67<<3)|0);
  $69 = ((($68)) + 4|0);
  HEAP8[$69>>0] = $66;
  $70 = $2;
  $71 = (_hio_read8($70)|0);
  $72 = $i;
  $73 = (($song) + ($72<<3)|0);
  $74 = ((($73)) + 5|0);
  HEAP8[$74>>0] = $71;
  $75 = $2;
  $76 = (_hio_read8($75)|0);
  $77 = $i;
  $78 = (($song) + ($77<<3)|0);
  $79 = ((($78)) + 6|0);
  HEAP8[$79>>0] = $76;
  $80 = $2;
  $81 = (_hio_read8s($80)|0);
  $82 = $i;
  $83 = (($song) + ($82<<3)|0);
  $84 = ((($83)) + 7|0);
  HEAP8[$84>>0] = $81;
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 $87 = ((($song)) + 504|0);
 HEAP16[$87>>1] = $57;
 $88 = $2;
 $89 = (_hio_read16b($88)|0);
 $90 = ((($song)) + 506|0);
 HEAP16[$90>>1] = $89;
 $91 = $2;
 $92 = (_hio_read32b($91)|0);
 $seqtable_offset = $92;
 $93 = $2;
 (_hio_read32b($93)|0);
 $94 = $2;
 $95 = (_hio_read32b($94)|0);
 $trackvols_offset = $95;
 $96 = $2;
 $97 = (_hio_read16b($96)|0);
 $98 = ((($song)) + 520|0);
 HEAP16[$98>>1] = $97;
 $99 = $2;
 $100 = (_hio_read16b($99)|0);
 $101 = ((($song)) + 522|0);
 HEAP16[$101>>1] = $100;
 $102 = $2;
 $103 = (_hio_read32b($102)|0);
 $trackpans_offset = $103;
 $104 = $2;
 $105 = (_hio_read32b($104)|0);
 $106 = ((($song)) + 528|0);
 HEAP32[$106>>2] = $105;
 $107 = $2;
 $108 = (_hio_read16b($107)|0);
 $109 = ((($song)) + 532|0);
 HEAP16[$109>>1] = $108;
 $110 = $2;
 $111 = (_hio_read16b($110)|0);
 $112 = ((($song)) + 534|0);
 HEAP16[$112>>1] = $111;
 $113 = $2;
 $114 = (_hio_read8($113)|0);
 $115 = ((($song)) + 536|0);
 HEAP8[$115>>0] = $114;
 $116 = $2;
 $117 = (_hio_read8($116)|0);
 $118 = ((($song)) + 537|0);
 HEAP8[$118>>0] = $117;
 $119 = $2;
 $120 = (_hio_read16b($119)|0);
 $121 = ((($song)) + 538|0);
 HEAP16[$121>>1] = $120;
 $122 = $2;
 $123 = (_hio_read8($122)|0);
 $124 = ((($song)) + 540|0);
 HEAP8[$124>>0] = $123;
 $125 = $2;
 (_hio_seek($125,223,1)|0);
 $126 = $2;
 $127 = (_hio_read16b($126)|0);
 $128 = ((($song)) + 764|0);
 HEAP16[$128>>1] = $127;
 $129 = $2;
 $130 = (_hio_read8($129)|0);
 $131 = ((($song)) + 766|0);
 HEAP8[$131>>0] = $130;
 $132 = $2;
 $133 = (_hio_read8($132)|0);
 $134 = ((($song)) + 767|0);
 HEAP8[$134>>0] = $133;
 $135 = $2;
 $136 = (_hio_read8($135)|0);
 $137 = ((($song)) + 768|0);
 HEAP8[$137>>0] = $136;
 $138 = $2;
 $139 = (_hio_read8($138)|0);
 $140 = ((($song)) + 769|0);
 HEAP8[$140>>0] = $139;
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = ($141|0)<(16);
  $143 = $2;
  $144 = (_hio_read8($143)|0);
  if (!($142)) {
   break;
  }
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 $147 = ((($song)) + 786|0);
 HEAP8[$147>>0] = $144;
 $148 = $2;
 $149 = (_hio_read8($148)|0);
 $150 = ((($song)) + 787|0);
 HEAP8[$150>>0] = $149;
 $151 = $2;
 $152 = $3;
 $153 = $seqtable_offset;
 $154 = (($152) + ($153))|0;
 (_hio_seek($151,$154,0)|0);
 $155 = $2;
 $156 = (_hio_read32b($155)|0);
 $playseq_offset = $156;
 $157 = $2;
 $158 = $3;
 $159 = $playseq_offset;
 $160 = (($158) + ($159))|0;
 (_hio_seek($157,$160,0)|0);
 $161 = $2;
 (_hio_seek($161,32,1)|0);
 $162 = $2;
 (_hio_read32b($162)|0);
 $163 = $2;
 (_hio_read32b($163)|0);
 $164 = $2;
 $165 = (_hio_read16b($164)|0);
 $166 = $165&65535;
 $167 = $mod;
 $168 = ((($167)) + 156|0);
 HEAP32[$168>>2] = $166;
 $169 = $mod;
 $170 = ((($169)) + 156|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)>(255);
 if ($172) {
  $0 = -1;
  $810 = $0;
  STACKTOP = sp;return ($810|0);
 }
 $i = 0;
 while(1) {
  $173 = $i;
  $174 = $mod;
  $175 = ((($174)) + 156|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($173|0)<($176|0);
  if (!($177)) {
   break;
  }
  $178 = $2;
  $179 = (_hio_read16b($178)|0);
  $180 = $179&255;
  $181 = $i;
  $182 = $mod;
  $183 = ((($182)) + 952|0);
  $184 = (($183) + ($181)|0);
  HEAP8[$184>>0] = $180;
  $185 = $i;
  $186 = (($185) + 1)|0;
  $i = $186;
 }
 $187 = $1;
 $188 = ((($187)) + 1264|0);
 HEAP32[$188>>2] = 8363;
 $189 = ((($song)) + 767|0);
 $190 = HEAP8[$189>>0]|0;
 $191 = $190&255;
 $192 = $191 & 32;
 $193 = ($192|0)!=(0);
 $194 = $193 ? 0 : 192;
 $195 = $1;
 $196 = ((($195)) + 1284|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = $197 | $194;
 HEAP32[$196>>2] = $198;
 $199 = ((($song)) + 767|0);
 $200 = HEAP8[$199>>0]|0;
 $201 = $200&255;
 $202 = $201 & 16;
 $hexvol = $202;
 $203 = ((($song)) + 767|0);
 $204 = HEAP8[$203>>0]|0;
 $205 = $204&255;
 $206 = $205 & 64;
 $med_8ch = $206;
 $207 = ((($song)) + 768|0);
 $208 = HEAP8[$207>>0]|0;
 $209 = $208&255;
 $210 = $209 & 32;
 $bpm_on = $210;
 $211 = ((($song)) + 768|0);
 $212 = HEAP8[$211>>0]|0;
 $213 = $212&255;
 $214 = $213 & 31;
 $215 = (1 + ($214))|0;
 $bpmlen = $215;
 $216 = $1;
 $217 = ((($216)) + 1256|0);
 HEAPF64[$217>>3] = 2.6400000000000001;
 $218 = $1;
 $219 = $med_8ch;
 $220 = ((($song)) + 764|0);
 $221 = HEAP16[$220>>1]|0;
 $222 = $221&65535;
 $223 = $bpm_on;
 $224 = $bpmlen;
 _mmd_set_bpm($218,$219,$222,$223,$224);
 $225 = ((($song)) + 769|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&255;
 $228 = $mod;
 $229 = ((($228)) + 148|0);
 HEAP32[$229>>2] = $227;
 $230 = ((($song)) + 504|0);
 $231 = HEAP16[$230>>1]|0;
 $232 = $231&65535;
 $233 = $mod;
 $234 = ((($233)) + 128|0);
 HEAP32[$234>>2] = $232;
 $235 = ((($song)) + 787|0);
 $236 = HEAP8[$235>>0]|0;
 $237 = $236&255;
 $238 = $mod;
 $239 = ((($238)) + 140|0);
 HEAP32[$239>>2] = $237;
 $240 = $mod;
 $241 = ((($240)) + 160|0);
 HEAP32[$241>>2] = 0;
 $242 = $mod;
 $243 = ((($242)) + 136|0);
 HEAP32[$243>>2] = 0;
 $244 = $mod;
 HEAP8[$244>>0] = 0;
 $245 = $mod;
 $246 = ((($245)) + 144|0);
 HEAP32[$246>>2] = 0;
 $i = 0;
 while(1) {
  $247 = $i;
  $248 = $mod;
  $249 = ((($248)) + 140|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ($247|0)<($250|0);
  if (!($251)) {
   break;
  }
  $252 = $2;
  $253 = $3;
  $254 = $smplarr_offset;
  $255 = (($253) + ($254))|0;
  $256 = $i;
  $257 = $256<<2;
  $258 = (($255) + ($257))|0;
  (_hio_seek($252,$258,0)|0);
  $259 = $2;
  $260 = (_hio_read32b($259)|0);
  $smpl_offset = $260;
  $261 = $smpl_offset;
  $262 = ($261|0)==(0);
  do {
   if (!($262)) {
    $263 = $2;
    $264 = $3;
    $265 = $smpl_offset;
    $266 = (($264) + ($265))|0;
    (_hio_seek($263,$266,0)|0);
    $267 = $2;
    (_hio_read32b($267)|0);
    $268 = $2;
    $269 = (_hio_read16b($268)|0);
    $type = $269;
    $270 = $type;
    $271 = $270 << 16 >> 16;
    $272 = ($271|0)==(-1);
    if ($272) {
     $273 = $2;
     (_hio_seek($273,14,1)|0);
     $274 = $2;
     $275 = (_hio_read16b($274)|0);
     $276 = $275&65535;
     $277 = $mod;
     $278 = ((($277)) + 144|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + ($276))|0;
     HEAP32[$278>>2] = $280;
     break;
    } else {
     $281 = $mod;
     $282 = ((($281)) + 144|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = (($283) + 1)|0;
     HEAP32[$282>>2] = $284;
     break;
    }
   }
  } while(0);
  $285 = $i;
  $286 = (($285) + 1)|0;
  $i = $286;
 }
 $287 = ((($expdata)) + 8|0);
 HEAP16[$287>>1] = 0;
 $288 = ((($expdata)) + 10|0);
 HEAP16[$288>>1] = 0;
 $289 = ((($expdata)) + 24|0);
 HEAP16[$289>>1] = 0;
 $290 = ((($expdata)) + 26|0);
 HEAP16[$290>>1] = 0;
 $expsmp_offset = 0;
 $iinfo_offset = 0;
 $291 = $expdata_offset;
 $292 = ($291|0)!=(0);
 if ($292) {
  $293 = $2;
  $294 = $3;
  $295 = $expdata_offset;
  $296 = (($294) + ($295))|0;
  (_hio_seek($293,$296,0)|0);
  $297 = $2;
  (_hio_read32b($297)|0);
  $298 = $2;
  $299 = (_hio_read32b($298)|0);
  $expsmp_offset = $299;
  $300 = $2;
  $301 = (_hio_read16b($300)|0);
  $302 = ((($expdata)) + 8|0);
  HEAP16[$302>>1] = $301;
  $303 = $2;
  $304 = (_hio_read16b($303)|0);
  $305 = ((($expdata)) + 10|0);
  HEAP16[$305>>1] = $304;
  $306 = $2;
  (_hio_read32b($306)|0);
  $307 = $2;
  (_hio_read32b($307)|0);
  $308 = $2;
  $309 = (_hio_read32b($308)|0);
  $iinfo_offset = $309;
  $310 = $2;
  $311 = (_hio_read16b($310)|0);
  $312 = ((($expdata)) + 24|0);
  HEAP16[$312>>1] = $311;
  $313 = $2;
  $314 = (_hio_read16b($313)|0);
  $315 = ((($expdata)) + 26|0);
  HEAP16[$315>>1] = $314;
  $316 = $expsmp_offset;
  $317 = ($316|0)<(0);
  $318 = $iinfo_offset;
  $319 = ($318|0)<(0);
  $or$cond = $317 | $319;
  if ($or$cond) {
   $0 = -1;
   $810 = $0;
   STACKTOP = sp;return ($810|0);
  }
  $320 = $2;
  (_hio_read32b($320)|0);
  $321 = $2;
  (_hio_read32b($321)|0);
  $322 = $2;
  (_hio_read32b($322)|0);
  $323 = $2;
  (_hio_read32b($323)|0);
  $324 = $2;
  $325 = (_hio_read32b($324)|0);
  $songname_offset = $325;
  $326 = $2;
  $327 = (_hio_read32b($326)|0);
  $328 = ((($expdata)) + 48|0);
  HEAP32[$328>>2] = $327;
  $329 = $2;
  (_hio_read32b($329)|0);
  $330 = $2;
  $331 = (_hio_read32b($330)|0);
  $mmdinfo_offset = $331;
  $332 = $2;
  $333 = $3;
  $334 = $songname_offset;
  $335 = (($333) + ($334))|0;
  (_hio_seek($332,$335,0)|0);
  $i = 0;
  while(1) {
   $336 = $i;
   $337 = ((($expdata)) + 48|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = ($336>>>0)>=($338>>>0);
   $340 = $i;
   $341 = ($340|0)>=(64);
   $or$cond3 = $339 | $341;
   if ($or$cond3) {
    break;
   }
   $342 = $2;
   $343 = (_hio_read8($342)|0);
   $344 = $i;
   $345 = $mod;
   $346 = (($345) + ($344)|0);
   HEAP8[$346>>0] = $343;
   $347 = $i;
   $348 = (($347) + 1)|0;
   $i = $348;
  }
  $349 = $mmdinfo_offset;
  $350 = ($349|0)!=(0);
  if ($350) {
   $351 = $2;
   $352 = $3;
   $353 = $mmdinfo_offset;
   $354 = (($352) + ($353))|0;
   (_hio_seek($351,$354,0)|0);
   $355 = $2;
   $356 = $1;
   $357 = $mmdinfo_offset;
   _mmd_info_text($355,$356,$357);
  }
 }
 $i = 0;
 while(1) {
  $358 = $i;
  $359 = $mod;
  $360 = ((($359)) + 128|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = ($358|0)<($361|0);
  if (!($362)) {
   break;
  }
  $363 = $2;
  $364 = $3;
  $365 = $blockarr_offset;
  $366 = (($364) + ($365))|0;
  $367 = $i;
  $368 = $367<<2;
  $369 = (($366) + ($368))|0;
  (_hio_seek($363,$369,0)|0);
  $370 = $2;
  $371 = (_hio_read32b($370)|0);
  $block_offset = $371;
  $372 = $block_offset;
  $373 = ($372|0)==(0);
  if (!($373)) {
   $374 = $2;
   $375 = $3;
   $376 = $block_offset;
   $377 = (($375) + ($376))|0;
   (_hio_seek($374,$377,0)|0);
   $378 = $2;
   $379 = (_hio_read16b($378)|0);
   HEAP16[$block>>1] = $379;
   $380 = $2;
   $381 = (_hio_read16b($380)|0);
   $382 = ((($block)) + 2|0);
   HEAP16[$382>>1] = $381;
   $383 = HEAP16[$block>>1]|0;
   $384 = $383&65535;
   $385 = $mod;
   $386 = ((($385)) + 136|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = ($384|0)>($387|0);
   if ($388) {
    $389 = HEAP16[$block>>1]|0;
    $390 = $389&65535;
    $391 = $mod;
    $392 = ((($391)) + 136|0);
    HEAP32[$392>>2] = $390;
   }
  }
  $393 = $i;
  $394 = (($393) + 1)|0;
  $i = $394;
 }
 $395 = $mod;
 $396 = ((($395)) + 136|0);
 $397 = HEAP32[$396>>2]|0;
 $398 = ($397|0)<=(0);
 if (!($398)) {
  $399 = $mod;
  $400 = ((($399)) + 136|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = ($401|0)>(64);
  if (!($402)) {
   $403 = $mod;
   $404 = ((($403)) + 128|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = $mod;
   $407 = ((($406)) + 136|0);
   $408 = HEAP32[$407>>2]|0;
   $409 = Math_imul($405, $408)|0;
   $410 = $mod;
   $411 = ((($410)) + 132|0);
   HEAP32[$411>>2] = $409;
   $412 = $ver;
   $413 = ($412|0)==(2);
   $414 = $1;
   if ($413) {
    _set_type($414,6000,$vararg_buffer);
   } else {
    $415 = $ver;
    $416 = (48 + ($415))|0;
    HEAP32[$vararg_buffer4>>2] = $416;
    _set_type($414,6016,$vararg_buffer4);
   }
   $417 = $mod;
   $418 = (_pattern_init($417)|0);
   $419 = ($418|0)<(0);
   if ($419) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   $i = 0;
   L58: while(1) {
    $420 = $i;
    $421 = $mod;
    $422 = ((($421)) + 128|0);
    $423 = HEAP32[$422>>2]|0;
    $424 = ($420|0)<($423|0);
    if (!($424)) {
     break;
    }
    $425 = $2;
    $426 = $3;
    $427 = $blockarr_offset;
    $428 = (($426) + ($427))|0;
    $429 = $i;
    $430 = $429<<2;
    $431 = (($428) + ($430))|0;
    (_hio_seek($425,$431,0)|0);
    $432 = $2;
    $433 = (_hio_read32b($432)|0);
    $block_offset1 = $433;
    $434 = $block_offset1;
    $435 = ($434|0)==(0);
    L61: do {
     if (!($435)) {
      $436 = $2;
      $437 = $3;
      $438 = $block_offset1;
      $439 = (($437) + ($438))|0;
      (_hio_seek($436,$439,0)|0);
      $440 = $2;
      $441 = (_hio_read16b($440)|0);
      HEAP16[$block>>1] = $441;
      $442 = $2;
      $443 = (_hio_read16b($442)|0);
      $444 = ((($block)) + 2|0);
      HEAP16[$444>>1] = $443;
      $445 = $2;
      (_hio_read32b($445)|0);
      $446 = $mod;
      $447 = $i;
      $448 = ((($block)) + 2|0);
      $449 = HEAP16[$448>>1]|0;
      $450 = $449&65535;
      $451 = (($450) + 1)|0;
      $452 = (_pattern_tracks_alloc($446,$447,$451)|0);
      $453 = ($452|0)<(0);
      if ($453) {
       label = 45;
       break L58;
      }
      $j = 0;
      while(1) {
       $454 = $j;
       $455 = $i;
       $456 = $mod;
       $457 = ((($456)) + 168|0);
       $458 = HEAP32[$457>>2]|0;
       $459 = (($458) + ($455<<2)|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = HEAP32[$460>>2]|0;
       $462 = ($454|0)<($461|0);
       if (!($462)) {
        break L61;
       }
       $k = 0;
       while(1) {
        $463 = $k;
        $464 = HEAP16[$block>>1]|0;
        $465 = $464&65535;
        $466 = ($463|0)<($465|0);
        if (!($466)) {
         break;
        }
        $467 = $2;
        $468 = (_hio_read8($467)|0);
        HEAP8[$e>>0] = $468;
        $469 = $2;
        $470 = (_hio_read8($469)|0);
        $471 = ((($e)) + 1|0);
        HEAP8[$471>>0] = $470;
        $472 = $2;
        $473 = (_hio_read8($472)|0);
        $474 = ((($e)) + 2|0);
        HEAP8[$474>>0] = $473;
        $475 = $2;
        $476 = (_hio_read8($475)|0);
        $477 = ((($e)) + 3|0);
        HEAP8[$477>>0] = $476;
        $478 = $j;
        $479 = $k;
        $480 = $i;
        $481 = $1;
        $482 = ((($481)) + 168|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (($483) + ($480<<2)|0);
        $485 = HEAP32[$484>>2]|0;
        $486 = ((($485)) + 4|0);
        $487 = (($486) + ($479<<2)|0);
        $488 = HEAP32[$487>>2]|0;
        $489 = $1;
        $490 = ((($489)) + 172|0);
        $491 = HEAP32[$490>>2]|0;
        $492 = (($491) + ($488<<2)|0);
        $493 = HEAP32[$492>>2]|0;
        $494 = ((($493)) + 4|0);
        $495 = (($494) + ($478<<3)|0);
        $event = $495;
        $496 = HEAP8[$e>>0]|0;
        $497 = $496&255;
        $498 = $497 & 127;
        $499 = $498&255;
        $500 = $event;
        HEAP8[$500>>0] = $499;
        $501 = $event;
        $502 = HEAP8[$501>>0]|0;
        $503 = ($502<<24>>24)!=(0);
        do {
         if ($503) {
          $504 = ((($song)) + 766|0);
          $505 = HEAP8[$504>>0]|0;
          $506 = $505 << 24 >> 24;
          $507 = $event;
          $508 = HEAP8[$507>>0]|0;
          $509 = $508&255;
          $510 = (($509) + ($506))|0;
          $511 = $510&255;
          HEAP8[$507>>0] = $511;
          $512 = $ver;
          $513 = ($512|0)==(2);
          $514 = $event;
          $515 = HEAP8[$514>>0]|0;
          $516 = $515&255;
          if ($513) {
           $517 = (($516) + 12)|0;
           $518 = $517&255;
           HEAP8[$514>>0] = $518;
           break;
          } else {
           $519 = (($516) - 12)|0;
           $520 = $519&255;
           HEAP8[$514>>0] = $520;
           break;
          }
         }
        } while(0);
        $521 = $event;
        $522 = HEAP8[$521>>0]|0;
        $523 = $522&255;
        $524 = ($523|0)>=(121);
        if ($524) {
         $525 = $event;
         HEAP8[$525>>0] = 0;
        }
        $526 = ((($e)) + 1|0);
        $527 = HEAP8[$526>>0]|0;
        $528 = $527&255;
        $529 = $528 & 63;
        $530 = $529&255;
        $531 = $event;
        $532 = ((($531)) + 1|0);
        HEAP8[$532>>0] = $530;
        $533 = $event;
        $534 = ((($533)) + 1|0);
        $535 = HEAP8[$534>>0]|0;
        $536 = $535&255;
        $537 = ($536|0)!=(0);
        do {
         if ($537) {
          $538 = $event;
          $539 = HEAP8[$538>>0]|0;
          $540 = ($539<<24>>24)!=(0);
          if ($540) {
           break;
          }
          $541 = $event;
          $542 = ((($541)) + 5|0);
          HEAP8[$542>>0] = -79;
         }
        } while(0);
        $543 = ((($e)) + 2|0);
        $544 = HEAP8[$543>>0]|0;
        $545 = $event;
        $546 = ((($545)) + 3|0);
        HEAP8[$546>>0] = $544;
        $547 = ((($e)) + 3|0);
        $548 = HEAP8[$547>>0]|0;
        $549 = $event;
        $550 = ((($549)) + 4|0);
        HEAP8[$550>>0] = $548;
        $551 = $event;
        $552 = $bpm_on;
        $553 = $bpmlen;
        $554 = $med_8ch;
        $555 = $hexvol;
        _mmd_xlat_fx($551,$552,$553,$554,$555);
        $556 = $k;
        $557 = (($556) + 1)|0;
        $k = $557;
       }
       $558 = $j;
       $559 = (($558) + 1)|0;
       $j = $559;
      }
     }
    } while(0);
    $560 = $i;
    $561 = (($560) + 1)|0;
    $i = $561;
   }
   if ((label|0) == 45) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   $562 = $1;
   $563 = (_med_new_module_extras($562)|0);
   $564 = ($563|0)!=(0);
   if ($564) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   $565 = $mod;
   $566 = (_instrument_init($565)|0);
   $567 = ($566|0)<(0);
   if ($567) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   $i = 0;
   $smp_idx = 0;
   L97: while(1) {
    $568 = $i;
    $569 = $mod;
    $570 = ((($569)) + 140|0);
    $571 = HEAP32[$570>>2]|0;
    $572 = ($568|0)<($571|0);
    $573 = $2;
    $574 = $3;
    if (!($572)) {
     label = 98;
     break;
    }
    $575 = $smplarr_offset;
    $576 = (($574) + ($575))|0;
    $577 = $i;
    $578 = $577<<2;
    $579 = (($576) + ($578))|0;
    (_hio_seek($573,$579,0)|0);
    $580 = $2;
    $581 = (_hio_read32b($580)|0);
    $smpl_offset2 = $581;
    $582 = $smpl_offset2;
    $583 = ($582|0)==(0);
    do {
     if (!($583)) {
      $584 = $2;
      $585 = $3;
      $586 = $smpl_offset2;
      $587 = (($585) + ($586))|0;
      (_hio_seek($584,$587,0)|0);
      $588 = $2;
      $589 = (_hio_read32b($588)|0);
      HEAP32[$instr>>2] = $589;
      $590 = $2;
      $591 = (_hio_read16b($590)|0);
      $592 = ((($instr)) + 4|0);
      HEAP16[$592>>1] = $591;
      $593 = $2;
      $594 = (_hio_tell($593)|0);
      $pos = $594;
      $595 = $expdata_offset;
      $596 = ($595|0)!=(0);
      if ($596) {
       $597 = $i;
       $598 = ((($expdata)) + 24|0);
       $599 = HEAP16[$598>>1]|0;
       $600 = $599&65535;
       $601 = ($597|0)<($600|0);
       if ($601) {
        $602 = $i;
        $603 = $mod;
        $604 = ((($603)) + 176|0);
        $605 = HEAP32[$604>>2]|0;
        $606 = (($605) + (($602*764)|0)|0);
        $xxi = $606;
        $607 = $2;
        $608 = $iinfo_offset;
        $609 = $i;
        $610 = ((($expdata)) + 26|0);
        $611 = HEAP16[$610>>1]|0;
        $612 = $611&65535;
        $613 = Math_imul($609, $612)|0;
        $614 = (($608) + ($613))|0;
        (_hio_seek($607,$614,0)|0);
        $615 = $xxi;
        $616 = $2;
        (_hio_read($615,40,1,$616)|0);
       }
      }
      ;HEAP32[$exp_smp>>2]=0|0;HEAP32[$exp_smp+4>>2]=0|0;HEAP32[$exp_smp+8>>2]=0|0;HEAP32[$exp_smp+12>>2]=0|0;HEAP32[$exp_smp+16>>2]=0|0;
      $617 = $expdata_offset;
      $618 = ($617|0)!=(0);
      if ($618) {
       $619 = $i;
       $620 = ((($expdata)) + 8|0);
       $621 = HEAP16[$620>>1]|0;
       $622 = $621&65535;
       $623 = ($619|0)<($622|0);
       if ($623) {
        $624 = $2;
        $625 = $expsmp_offset;
        $626 = $i;
        $627 = ((($expdata)) + 10|0);
        $628 = HEAP16[$627>>1]|0;
        $629 = $628&65535;
        $630 = Math_imul($626, $629)|0;
        $631 = (($625) + ($630))|0;
        (_hio_seek($624,$631,0)|0);
        $632 = $2;
        $633 = (_hio_read8($632)|0);
        HEAP8[$exp_smp>>0] = $633;
        $634 = $2;
        $635 = (_hio_read8($634)|0);
        $636 = ((($exp_smp)) + 1|0);
        HEAP8[$636>>0] = $635;
        $637 = $2;
        $638 = (_hio_read8($637)|0);
        $639 = ((($exp_smp)) + 2|0);
        HEAP8[$639>>0] = $638;
        $640 = $2;
        $641 = (_hio_read8($640)|0);
        $642 = ((($exp_smp)) + 3|0);
        HEAP8[$642>>0] = $641;
        $643 = ((($expdata)) + 10|0);
        $644 = HEAP16[$643>>1]|0;
        $645 = $644&65535;
        $646 = ($645|0)>(4);
        if ($646) {
         $647 = $2;
         $648 = (_hio_read8($647)|0);
         $649 = ((($exp_smp)) + 4|0);
         HEAP8[$649>>0] = $648;
         $650 = $2;
         $651 = (_hio_read8($650)|0);
         $652 = ((($exp_smp)) + 5|0);
         HEAP8[$652>>0] = $651;
        }
       }
      }
      $653 = $2;
      $654 = $pos;
      (_hio_seek($653,$654,0)|0);
      $655 = ((($instr)) + 4|0);
      $656 = HEAP16[$655>>1]|0;
      $657 = $656 << 16 >> 16;
      $658 = ($657|0)==(-2);
      if ($658) {
       $659 = $2;
       $660 = $1;
       $661 = $i;
       $662 = $smp_idx;
       $663 = $i;
       $664 = (($song) + ($663<<3)|0);
       $665 = (_mmd_load_hybrid_instrument($659,$660,$661,$662,$synth,$exp_smp,$664)|0);
       $ret = $665;
       $666 = $ret;
       $667 = ($666|0)<(0);
       if ($667) {
        label = 78;
        break L97;
       }
       $668 = $smp_idx;
       $669 = (($668) + 1)|0;
       $smp_idx = $669;
       $670 = $1;
       $671 = $i;
       $672 = (_mmd_alloc_tables($670,$671,$synth)|0);
       $673 = ($672|0)!=(0);
       if ($673) {
        label = 80;
        break L97;
       } else {
        break;
       }
      }
      $674 = ((($instr)) + 4|0);
      $675 = HEAP16[$674>>1]|0;
      $676 = $675 << 16 >> 16;
      $677 = ($676|0)==(-1);
      if ($677) {
       $678 = $2;
       $679 = $1;
       $680 = $i;
       $681 = $smp_idx;
       $682 = $i;
       $683 = (($song) + ($682<<3)|0);
       $684 = (_mmd_load_synth_instrument($678,$679,$680,$681,$synth,$exp_smp,$683)|0);
       $ret3 = $684;
       $685 = $ret3;
       $686 = ($685|0)>(0);
       if ($686) {
        break;
       }
       $687 = $ret3;
       $688 = ($687|0)<(0);
       if ($688) {
        label = 84;
        break L97;
       }
       $689 = ((($synth)) + 20|0);
       $690 = HEAP16[$689>>1]|0;
       $691 = $690&65535;
       $692 = $smp_idx;
       $693 = (($692) + ($691))|0;
       $smp_idx = $693;
       $694 = $1;
       $695 = $i;
       $696 = (_mmd_alloc_tables($694,$695,$synth)|0);
       $697 = ($696|0)!=(0);
       if ($697) {
        label = 86;
        break L97;
       } else {
        break;
       }
      }
      $698 = ((($instr)) + 4|0);
      $699 = HEAP16[$698>>1]|0;
      $700 = $699 << 16 >> 16;
      $701 = ($700|0)>=(1);
      if ($701) {
       $702 = ((($instr)) + 4|0);
       $703 = HEAP16[$702>>1]|0;
       $704 = $703 << 16 >> 16;
       $705 = ($704|0)<=(6);
       if ($705) {
        $706 = ((($instr)) + 4|0);
        $707 = HEAP16[$706>>1]|0;
        $708 = $707 << 16 >> 16;
        $709 = (($708) - 1)|0;
        $710 = (6048 + ($709<<2)|0);
        $711 = HEAP32[$710>>2]|0;
        $oct = $711;
        $712 = $2;
        $713 = $3;
        $714 = $smpl_offset2;
        $715 = (($713) + ($714))|0;
        $716 = (($715) + 6)|0;
        (_hio_seek($712,$716,0)|0);
        $717 = $2;
        $718 = $1;
        $719 = $i;
        $720 = $smp_idx;
        $721 = $oct;
        $722 = $i;
        $723 = (($song) + ($722<<3)|0);
        $724 = (_mmd_load_iffoct_instrument($717,$718,$719,$720,$instr,$721,$exp_smp,$723)|0);
        $ret4 = $724;
        $725 = $ret4;
        $726 = ($725|0)<(0);
        if ($726) {
         label = 90;
         break L97;
        }
        $727 = $oct;
        $728 = $smp_idx;
        $729 = (($728) + ($727))|0;
        $smp_idx = $729;
        break;
       }
      }
      $730 = ((($instr)) + 4|0);
      $731 = HEAP16[$730>>1]|0;
      $732 = $731 << 16 >> 16;
      $733 = $732 & -17;
      $734 = ($733|0)==(0);
      if (!($734)) {
       label = 96;
       break L97;
      }
      $735 = $2;
      $736 = $3;
      $737 = $smpl_offset2;
      $738 = (($736) + ($737))|0;
      $739 = (($738) + 6)|0;
      (_hio_seek($735,$739,0)|0);
      $740 = $2;
      $741 = $1;
      $742 = $i;
      $743 = $smp_idx;
      $744 = $i;
      $745 = (($song) + ($744<<3)|0);
      $746 = $ver;
      $747 = (_mmd_load_sampled_instrument($740,$741,$742,$743,$instr,$expdata,$exp_smp,$745,$746)|0);
      $ret5 = $747;
      $748 = $ret5;
      $749 = ($748|0)<(0);
      if ($749) {
       label = 94;
       break L97;
      }
      $750 = $smp_idx;
      $751 = (($750) + 1)|0;
      $smp_idx = $751;
     }
    } while(0);
    $752 = $i;
    $753 = (($752) + 1)|0;
    $i = $753;
   }
   if ((label|0) == 78) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 80) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 84) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 86) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 90) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 94) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 96) {
    $0 = -1;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
   else if ((label|0) == 98) {
    $754 = $trackvols_offset;
    $755 = (($574) + ($754))|0;
    (_hio_seek($573,$755,0)|0);
    $i = 0;
    while(1) {
     $756 = $i;
     $757 = $mod;
     $758 = ((($757)) + 136|0);
     $759 = HEAP32[$758>>2]|0;
     $760 = ($756|0)<($759|0);
     if (!($760)) {
      break;
     }
     $761 = $2;
     $762 = (_hio_read8($761)|0);
     $763 = $762&255;
     $764 = $i;
     $765 = $mod;
     $766 = ((($765)) + 184|0);
     $767 = (($766) + (($764*12)|0)|0);
     $768 = ((($767)) + 4|0);
     HEAP32[$768>>2] = $763;
     $769 = $i;
     $770 = (($769) + 1)|0;
     $i = $770;
    }
    $771 = $trackpans_offset;
    $772 = ($771|0)!=(0);
    L134: do {
     if ($772) {
      $773 = $2;
      $774 = $3;
      $775 = $trackpans_offset;
      $776 = (($774) + ($775))|0;
      (_hio_seek($773,$776,0)|0);
      $i = 0;
      while(1) {
       $777 = $i;
       $778 = $mod;
       $779 = ((($778)) + 136|0);
       $780 = HEAP32[$779>>2]|0;
       $781 = ($777|0)<($780|0);
       if (!($781)) {
        break L134;
       }
       $782 = $2;
       $783 = (_hio_read8s($782)|0);
       $784 = $783 << 24 >> 24;
       $785 = $784<<3;
       $p = $785;
       $786 = $p;
       $787 = ($786|0)>(127);
       $788 = $p;
       $789 = $787 ? 127 : $788;
       $790 = (128 + ($789))|0;
       $791 = $i;
       $792 = $mod;
       $793 = ((($792)) + 184|0);
       $794 = (($793) + (($791*12)|0)|0);
       HEAP32[$794>>2] = $790;
       $795 = $i;
       $796 = (($795) + 1)|0;
       $i = $796;
      }
     } else {
      $i = 0;
      while(1) {
       $797 = $i;
       $798 = $mod;
       $799 = ((($798)) + 136|0);
       $800 = HEAP32[$799>>2]|0;
       $801 = ($797|0)<($800|0);
       if (!($801)) {
        break L134;
       }
       $802 = $i;
       $803 = $mod;
       $804 = ((($803)) + 184|0);
       $805 = (($804) + (($802*12)|0)|0);
       HEAP32[$805>>2] = 128;
       $806 = $i;
       $807 = (($806) + 1)|0;
       $i = $807;
      }
     }
    } while(0);
    $808 = $1;
    $809 = ((($808)) + 1288|0);
    HEAP32[$809>>2] = 4;
    $0 = 0;
    $810 = $0;
    STACKTOP = sp;return ($810|0);
   }
  }
 }
 $0 = -1;
 $810 = $0;
 STACKTOP = sp;return ($810|0);
}
function _rtm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,4,$4)|0);
 $6 = ($5>>>0)<(4);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,6120,4)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   }
   $9 = $1;
   $10 = (_hio_read8($9)|0);
   $11 = $10&255;
   $12 = ($11|0)!=(32);
   if ($12) {
    $0 = -1;
    break;
   } else {
    $13 = $1;
    $14 = $2;
    _read_title($13,$14,32);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _rtm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $composer = 0, $event = 0, $i = 0, $j = 0, $mod = 0, $offset = 0, $oh = 0, $r = 0;
 var $rh = 0, $ri = 0, $rp = 0, $rs = 0, $smpnum = 0, $sub = 0, $tracker_name = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $version = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $oh = sp + 600|0;
 $rh = sp + 432|0;
 $rp = sp + 420|0;
 $ri = sp + 64|0;
 $rs = sp + 36|0;
 $tracker_name = sp + 676|0;
 $composer = sp + 643|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_read_object_header($7,$oh,6120)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 $10 = ((($oh)) + 38|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $version = $12;
 $13 = $2;
 (_hio_read($tracker_name,1,20,$13)|0);
 $14 = ((($tracker_name)) + 20|0);
 HEAP8[$14>>0] = 0;
 $15 = $2;
 (_hio_read($composer,1,32,$15)|0);
 $16 = ((($composer)) + 32|0);
 HEAP8[$16>>0] = 0;
 $17 = $2;
 $18 = (_hio_read16l($17)|0);
 $19 = ((($rh)) + 52|0);
 HEAP16[$19>>1] = $18;
 $20 = $2;
 $21 = (_hio_read8($20)|0);
 $22 = ((($rh)) + 54|0);
 HEAP8[$22>>0] = $21;
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = ((($rh)) + 55|0);
 HEAP8[$25>>0] = $24;
 $26 = $2;
 $27 = (_hio_read16l($26)|0);
 $28 = ((($rh)) + 56|0);
 HEAP16[$28>>1] = $27;
 $29 = $2;
 $30 = (_hio_read16l($29)|0);
 $31 = ((($rh)) + 58|0);
 HEAP16[$31>>1] = $30;
 $32 = $2;
 $33 = (_hio_read8($32)|0);
 $34 = ((($rh)) + 60|0);
 HEAP8[$34>>0] = $33;
 $35 = $2;
 $36 = (_hio_read8($35)|0);
 $37 = ((($rh)) + 61|0);
 HEAP8[$37>>0] = $36;
 $38 = ((($rh)) + 62|0);
 $39 = $2;
 (_hio_read($38,32,1,$39)|0);
 $40 = $2;
 $41 = (_hio_read32l($40)|0);
 $42 = ((($rh)) + 96|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($rh)) + 56|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45|0)>(255);
 if ($46) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 $47 = ((($rh)) + 54|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)>(32);
 if ($50) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 $51 = ((($rh)) + 58|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52&65535;
 $54 = ($53|0)>(255);
 if ($54) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 $55 = $version;
 $56 = ($55|0)>=(274);
 if ($56) {
  $57 = $2;
  (_hio_seek($57,32,1)|0);
 }
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = ((($rh)) + 56|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60&65535;
  $62 = ($58|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $2;
  $64 = (_hio_read16l($63)|0);
  $65 = $64&255;
  $66 = $i;
  $67 = $mod;
  $68 = ((($67)) + 952|0);
  $69 = (($68) + ($66)|0);
  HEAP8[$69>>0] = $65;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $mod;
 $73 = ((($oh)) + 5|0);
 (_strncpy(($72|0),($73|0),20)|0);
 $74 = $mod;
 $75 = ((($74)) + 64|0);
 $76 = $version;
 $77 = $76 >> 8;
 $78 = $version;
 $79 = $78 & 255;
 HEAP32[$vararg_buffer>>2] = $tracker_name;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $77;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $79;
 (_snprintf($75,64,6128,$vararg_buffer)|0);
 $80 = ((($rh)) + 56|0);
 $81 = HEAP16[$80>>1]|0;
 $82 = $81&65535;
 $83 = $mod;
 $84 = ((($83)) + 156|0);
 HEAP32[$84>>2] = $82;
 $85 = ((($rh)) + 58|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = $mod;
 $89 = ((($88)) + 128|0);
 HEAP32[$89>>2] = $87;
 $90 = ((($rh)) + 54|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $mod;
 $94 = ((($93)) + 136|0);
 HEAP32[$94>>2] = $92;
 $95 = $mod;
 $96 = ((($95)) + 136|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $mod;
 $99 = ((($98)) + 128|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = Math_imul($97, $100)|0;
 $102 = $mod;
 $103 = ((($102)) + 132|0);
 HEAP32[$103>>2] = $101;
 $104 = ((($rh)) + 55|0);
 $105 = HEAP8[$104>>0]|0;
 $106 = $105&255;
 $107 = $mod;
 $108 = ((($107)) + 140|0);
 HEAP32[$108>>2] = $106;
 $109 = ((($rh)) + 60|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = $mod;
 $113 = ((($112)) + 148|0);
 HEAP32[$113>>2] = $111;
 $114 = ((($rh)) + 61|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = $mod;
 $118 = ((($117)) + 152|0);
 HEAP32[$118>>2] = $116;
 $119 = ((($rh)) + 52|0);
 $120 = HEAP16[$119>>1]|0;
 $121 = $120&65535;
 $122 = $121 & 1;
 $123 = ($122|0)!=(0);
 $124 = $123 ? 4096 : 0;
 $125 = $1;
 $126 = ((($125)) + 1284|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 | $124;
 HEAP32[$126>>2] = $128;
 $i = 0;
 while(1) {
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 136|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($129|0)<($132|0);
  if (!($133)) {
   break;
  }
  $134 = $i;
  $135 = ((($rh)) + 62|0);
  $136 = (($135) + ($134)|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $137 << 24 >> 24;
  $139 = $138 & 255;
  $140 = $i;
  $141 = $mod;
  $142 = ((($141)) + 184|0);
  $143 = (($142) + (($140*12)|0)|0);
  HEAP32[$143>>2] = $139;
  $144 = $i;
  $145 = (($144) + 1)|0;
  $i = $145;
 }
 $146 = $mod;
 $147 = (_pattern_init($146)|0);
 $148 = ($147|0)<(0);
 if ($148) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 $149 = ((($oh)) + 40|0);
 $150 = HEAP16[$149>>1]|0;
 $151 = $150&65535;
 $152 = (42 + ($151))|0;
 $153 = ((($rh)) + 96|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($152) + ($154))|0;
 $offset = $155;
 $i = 0;
 L32: while(1) {
  $156 = $i;
  $157 = $mod;
  $158 = ((($157)) + 128|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($156|0)<($159|0);
  $161 = $2;
  $162 = $3;
  $163 = $offset;
  $164 = (($162) + ($163))|0;
  (_hio_seek($161,$164,0)|0);
  if (!($160)) {
   label = 55;
   break;
  }
  $165 = $2;
  $166 = (_read_object_header($165,$oh,6144)|0);
  $167 = ($166|0)<(0);
  if ($167) {
   label = 22;
   break;
  }
  $168 = $2;
  $169 = (_hio_read16l($168)|0);
  HEAP16[$rp>>1] = $169;
  $170 = $2;
  $171 = (_hio_read8($170)|0);
  $172 = ((($rp)) + 2|0);
  HEAP8[$172>>0] = $171;
  $173 = $2;
  $174 = (_hio_read16l($173)|0);
  $175 = ((($rp)) + 4|0);
  HEAP16[$175>>1] = $174;
  $176 = $2;
  $177 = (_hio_read32l($176)|0);
  $178 = ((($rp)) + 8|0);
  HEAP32[$178>>2] = $177;
  $179 = ((($rp)) + 2|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180&255;
  $182 = ((($rh)) + 54|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = ($181|0)>($184|0);
  if ($185) {
   label = 25;
   break;
  }
  $186 = ((($rp)) + 4|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187&65535;
  $189 = ($188|0)>(256);
  if ($189) {
   label = 25;
   break;
  }
  $190 = ((($oh)) + 40|0);
  $191 = HEAP16[$190>>1]|0;
  $192 = $191&65535;
  $193 = (42 + ($192))|0;
  $194 = ((($rp)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($193) + ($195))|0;
  $197 = $offset;
  $198 = (($197) + ($196))|0;
  $offset = $198;
  $199 = $mod;
  $200 = $i;
  $201 = ((($rp)) + 4|0);
  $202 = HEAP16[$201>>1]|0;
  $203 = $202&65535;
  $204 = (_pattern_tracks_alloc($199,$200,$203)|0);
  $205 = ($204|0)<(0);
  if ($205) {
   label = 27;
   break;
  }
  $r = 0;
  while(1) {
   $206 = $r;
   $207 = ((($rp)) + 4|0);
   $208 = HEAP16[$207>>1]|0;
   $209 = $208&65535;
   $210 = ($206|0)<($209|0);
   if (!($210)) {
    break;
   }
   $j = 0;
   while(1) {
    $211 = $2;
    $212 = (_hio_read8($211)|0);
    $c = $212;
    $213 = $c;
    $214 = $213&255;
    $215 = ($214|0)==(0);
    if ($215) {
     break;
    }
    $216 = $j;
    $217 = ((($rp)) + 2|0);
    $218 = HEAP8[$217>>0]|0;
    $219 = $218&255;
    $220 = ($216|0)>=($219|0);
    if ($220) {
     label = 33;
     break L32;
    }
    $221 = $r;
    $222 = $j;
    $223 = $i;
    $224 = $1;
    $225 = ((($224)) + 168|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + ($223<<2)|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ((($228)) + 4|0);
    $230 = (($229) + ($222<<2)|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $1;
    $233 = ((($232)) + 172|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + ($231<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ((($236)) + 4|0);
    $238 = (($237) + ($221<<3)|0);
    $event = $238;
    $239 = $c;
    $240 = $239&255;
    $241 = $240 & 1;
    $242 = ($241|0)!=(0);
    if ($242) {
     $243 = $2;
     $244 = (_hio_read8($243)|0);
     $245 = $244&255;
     $j = $245;
     $246 = $j;
     $247 = ((($rp)) + 2|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = ($246|0)>=($249|0);
     if ($250) {
      label = 36;
      break L32;
     }
     $251 = $r;
     $252 = $j;
     $253 = $i;
     $254 = $1;
     $255 = ((($254)) + 168|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = (($256) + ($253<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ((($258)) + 4|0);
     $260 = (($259) + ($252<<2)|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = $1;
     $263 = ((($262)) + 172|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = (($264) + ($261<<2)|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = ((($266)) + 4|0);
     $268 = (($267) + ($251<<3)|0);
     $event = $268;
    }
    $269 = $c;
    $270 = $269&255;
    $271 = $270 & 2;
    $272 = ($271|0)!=(0);
    do {
     if ($272) {
      $273 = $2;
      $274 = (_hio_read8($273)|0);
      $275 = $274&255;
      $276 = (($275) + 1)|0;
      $277 = $276&255;
      $278 = $event;
      HEAP8[$278>>0] = $277;
      $279 = $event;
      $280 = HEAP8[$279>>0]|0;
      $281 = $280&255;
      $282 = ($281|0)==(255);
      $283 = $event;
      if ($282) {
       HEAP8[$283>>0] = -127;
       break;
      } else {
       $284 = HEAP8[$283>>0]|0;
       $285 = $284&255;
       $286 = (($285) + 12)|0;
       $287 = $286&255;
       HEAP8[$283>>0] = $287;
       break;
      }
     }
    } while(0);
    $288 = $c;
    $289 = $288&255;
    $290 = $289 & 4;
    $291 = ($290|0)!=(0);
    if ($291) {
     $292 = $2;
     $293 = (_hio_read8($292)|0);
     $294 = $event;
     $295 = ((($294)) + 1|0);
     HEAP8[$295>>0] = $293;
    }
    $296 = $c;
    $297 = $296&255;
    $298 = $297 & 8;
    $299 = ($298|0)!=(0);
    if ($299) {
     $300 = $2;
     $301 = (_hio_read8($300)|0);
     $302 = $event;
     $303 = ((($302)) + 3|0);
     HEAP8[$303>>0] = $301;
    }
    $304 = $c;
    $305 = $304&255;
    $306 = $305 & 16;
    $307 = ($306|0)!=(0);
    if ($307) {
     $308 = $2;
     $309 = (_hio_read8($308)|0);
     $310 = $event;
     $311 = ((($310)) + 4|0);
     HEAP8[$311>>0] = $309;
    }
    $312 = $c;
    $313 = $312&255;
    $314 = $313 & 32;
    $315 = ($314|0)!=(0);
    if ($315) {
     $316 = $2;
     $317 = (_hio_read8($316)|0);
     $318 = $event;
     $319 = ((($318)) + 5|0);
     HEAP8[$319>>0] = $317;
    }
    $320 = $c;
    $321 = $320&255;
    $322 = $321 & 64;
    $323 = ($322|0)!=(0);
    if ($323) {
     $324 = $2;
     $325 = (_hio_read8($324)|0);
     $326 = $event;
     $327 = ((($326)) + 6|0);
     HEAP8[$327>>0] = $325;
    }
    $328 = $j;
    $329 = (($328) + 1)|0;
    $j = $329;
   }
   $330 = $r;
   $331 = (($330) + 1)|0;
   $r = $331;
  }
  $332 = $i;
  $333 = (($332) + 1)|0;
  $i = $333;
 }
 if ((label|0) == 22) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 else if ((label|0) == 25) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 else if ((label|0) == 27) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 else if ((label|0) == 33) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 else if ((label|0) == 36) {
  $0 = -1;
  $870 = $0;
  STACKTOP = sp;return ($870|0);
 }
 else if ((label|0) == 55) {
  $334 = $mod;
  $335 = ((($334)) + 144|0);
  HEAP32[$335>>2] = 1024;
  $336 = $mod;
  $337 = (_instrument_init($336)|0);
  $338 = ($337|0)<(0);
  if ($338) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  $smpnum = 0;
  $i = 0;
  L85: while(1) {
   $339 = $i;
   $340 = $mod;
   $341 = ((($340)) + 140|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = ($339|0)<($342|0);
   if (!($343)) {
    label = 105;
    break;
   }
   $344 = $i;
   $345 = $mod;
   $346 = ((($345)) + 176|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = (($347) + (($344*764)|0)|0);
   $xxi = $348;
   $349 = $2;
   $350 = (_read_object_header($349,$oh,6152)|0);
   $351 = ($350|0)<(0);
   if ($351) {
    label = 60;
    break;
   }
   $352 = $mod;
   $353 = $i;
   $354 = ((($oh)) + 5|0);
   (_instrument_name($352,$353,$354,32)|0);
   $355 = ((($oh)) + 40|0);
   $356 = HEAP16[$355>>1]|0;
   $357 = $356&65535;
   $358 = ($357|0)==(0);
   L89: do {
    if ($358) {
     HEAP8[$ri>>0] = 0;
    } else {
     $359 = $2;
     $360 = (_hio_read8($359)|0);
     HEAP8[$ri>>0] = $360;
     $361 = $2;
     $362 = (_hio_read16l($361)|0);
     $363 = ((($ri)) + 2|0);
     HEAP16[$363>>1] = $362;
     $364 = ((($ri)) + 4|0);
     $365 = $2;
     $366 = (_hio_read($364,1,120,$365)|0);
     $367 = ($366|0)!=(120);
     if ($367) {
      label = 64;
      break L85;
     }
     $368 = $2;
     $369 = (_hio_read8($368)|0);
     $370 = ((($ri)) + 124|0);
     HEAP8[$370>>0] = $369;
     $371 = ((($ri)) + 124|0);
     $372 = HEAP8[$371>>0]|0;
     $373 = $372&255;
     $374 = ($373|0)>=(12);
     if ($374) {
      label = 66;
      break L85;
     }
     $j = 0;
     while(1) {
      $375 = $j;
      $376 = ($375|0)<(12);
      $377 = $2;
      if (!($376)) {
       break;
      }
      $378 = (_hio_read32l($377)|0);
      $379 = $j;
      $380 = ((($ri)) + 124|0);
      $381 = ((($380)) + 4|0);
      $382 = (($381) + ($379<<3)|0);
      HEAP32[$382>>2] = $378;
      $383 = $2;
      $384 = (_hio_read32l($383)|0);
      $385 = $j;
      $386 = ((($ri)) + 124|0);
      $387 = ((($386)) + 4|0);
      $388 = (($387) + ($385<<3)|0);
      $389 = ((($388)) + 4|0);
      HEAP32[$389>>2] = $384;
      $390 = $j;
      $391 = (($390) + 1)|0;
      $j = $391;
     }
     $392 = (_hio_read8($377)|0);
     $393 = ((($ri)) + 124|0);
     $394 = ((($393)) + 100|0);
     HEAP8[$394>>0] = $392;
     $395 = $2;
     $396 = (_hio_read8($395)|0);
     $397 = ((($ri)) + 124|0);
     $398 = ((($397)) + 101|0);
     HEAP8[$398>>0] = $396;
     $399 = $2;
     $400 = (_hio_read8($399)|0);
     $401 = ((($ri)) + 124|0);
     $402 = ((($401)) + 102|0);
     HEAP8[$402>>0] = $400;
     $403 = $2;
     $404 = (_hio_read16l($403)|0);
     $405 = ((($ri)) + 124|0);
     $406 = ((($405)) + 104|0);
     HEAP16[$406>>1] = $404;
     $407 = $2;
     $408 = (_hio_read8($407)|0);
     $409 = ((($ri)) + 232|0);
     HEAP8[$409>>0] = $408;
     $410 = ((($ri)) + 232|0);
     $411 = HEAP8[$410>>0]|0;
     $412 = $411&255;
     $413 = ($412|0)>=(12);
     if ($413) {
      label = 71;
      break L85;
     }
     $j = 0;
     while(1) {
      $414 = $j;
      $415 = ($414|0)<(12);
      $416 = $2;
      if (!($415)) {
       break;
      }
      $417 = (_hio_read32l($416)|0);
      $418 = $j;
      $419 = ((($ri)) + 232|0);
      $420 = ((($419)) + 4|0);
      $421 = (($420) + ($418<<3)|0);
      HEAP32[$421>>2] = $417;
      $422 = $2;
      $423 = (_hio_read32l($422)|0);
      $424 = $j;
      $425 = ((($ri)) + 232|0);
      $426 = ((($425)) + 4|0);
      $427 = (($426) + ($424<<3)|0);
      $428 = ((($427)) + 4|0);
      HEAP32[$428>>2] = $423;
      $429 = $j;
      $430 = (($429) + 1)|0;
      $j = $430;
     }
     $431 = (_hio_read8($416)|0);
     $432 = ((($ri)) + 232|0);
     $433 = ((($432)) + 100|0);
     HEAP8[$433>>0] = $431;
     $434 = $2;
     $435 = (_hio_read8($434)|0);
     $436 = ((($ri)) + 232|0);
     $437 = ((($436)) + 101|0);
     HEAP8[$437>>0] = $435;
     $438 = $2;
     $439 = (_hio_read8($438)|0);
     $440 = ((($ri)) + 232|0);
     $441 = ((($440)) + 102|0);
     HEAP8[$441>>0] = $439;
     $442 = $2;
     $443 = (_hio_read16l($442)|0);
     $444 = ((($ri)) + 232|0);
     $445 = ((($444)) + 104|0);
     HEAP16[$445>>1] = $443;
     $446 = $2;
     $447 = (_hio_read8($446)|0);
     $448 = ((($ri)) + 340|0);
     HEAP8[$448>>0] = $447;
     $449 = $2;
     $450 = (_hio_read8($449)|0);
     $451 = ((($ri)) + 341|0);
     HEAP8[$451>>0] = $450;
     $452 = $2;
     $453 = (_hio_read8($452)|0);
     $454 = ((($ri)) + 342|0);
     HEAP8[$454>>0] = $453;
     $455 = $2;
     $456 = (_hio_read8($455)|0);
     $457 = ((($ri)) + 343|0);
     HEAP8[$457>>0] = $456;
     $458 = $2;
     $459 = (_hio_read16l($458)|0);
     $460 = ((($ri)) + 344|0);
     HEAP16[$460>>1] = $459;
     $461 = $version;
     $462 = ($461|0)>=(272);
     if ($462) {
      $463 = $2;
      $464 = (_hio_read8($463)|0);
      $465 = ((($ri)) + 346|0);
      HEAP8[$465>>0] = $464;
      $466 = $2;
      $467 = (_hio_read8($466)|0);
      $468 = ((($ri)) + 347|0);
      HEAP8[$468>>0] = $467;
      $469 = $2;
      $470 = (_hio_read8($469)|0);
      $471 = ((($ri)) + 348|0);
      HEAP8[$471>>0] = $470;
      $472 = $2;
      $473 = (_hio_read8($472)|0);
      $474 = ((($ri)) + 349|0);
      HEAP8[$474>>0] = $473;
     }
     $475 = $version;
     $476 = ($475|0)>=(274);
     if ($476) {
      $477 = $2;
      $478 = (_hio_read8($477)|0);
      $479 = ((($ri)) + 350|0);
      HEAP8[$479>>0] = $478;
      $480 = $2;
      $481 = (_hio_read8($480)|0);
      $482 = ((($ri)) + 351|0);
      HEAP8[$482>>0] = $481;
      $483 = $2;
      $484 = (_hio_read8($483)|0);
      $485 = ((($ri)) + 352|0);
      HEAP8[$485>>0] = $484;
      $486 = $2;
      $487 = (_hio_read8($486)|0);
      $488 = ((($ri)) + 353|0);
      HEAP8[$488>>0] = $487;
     }
     $489 = HEAP8[$ri>>0]|0;
     $490 = $489&255;
     $491 = $xxi;
     $492 = ((($491)) + 36|0);
     HEAP32[$492>>2] = $490;
     $493 = $xxi;
     $494 = ((($493)) + 36|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = ($495|0)>(16);
     if ($496) {
      $497 = $xxi;
      $498 = ((($497)) + 36|0);
      HEAP32[$498>>2] = 16;
     }
     $499 = $mod;
     $500 = $i;
     $501 = $xxi;
     $502 = ((($501)) + 36|0);
     $503 = HEAP32[$502>>2]|0;
     $504 = (_subinstrument_alloc($499,$500,$503)|0);
     $505 = ($504|0)<(0);
     if ($505) {
      label = 82;
      break L85;
     }
     $j = 0;
     while(1) {
      $506 = $j;
      $507 = ($506|0)<(120);
      if (!($507)) {
       break;
      }
      $508 = $j;
      $509 = ((($ri)) + 4|0);
      $510 = (($509) + ($508)|0);
      $511 = HEAP8[$510>>0]|0;
      $512 = $j;
      $513 = $xxi;
      $514 = ((($513)) + 512|0);
      $515 = (($514) + ($512<<1)|0);
      HEAP8[$515>>0] = $511;
      $516 = $j;
      $517 = (($516) + 1)|0;
      $j = $517;
     }
     $518 = ((($ri)) + 344|0);
     $519 = HEAP16[$518>>1]|0;
     $520 = $519&65535;
     $521 = $xxi;
     $522 = ((($521)) + 40|0);
     HEAP32[$522>>2] = $520;
     $523 = ((($ri)) + 124|0);
     $524 = HEAP8[$523>>0]|0;
     $525 = $524&255;
     $526 = $xxi;
     $527 = ((($526)) + 44|0);
     $528 = ((($527)) + 4|0);
     HEAP32[$528>>2] = $525;
     $529 = ((($ri)) + 124|0);
     $530 = ((($529)) + 100|0);
     $531 = HEAP8[$530>>0]|0;
     $532 = $531&255;
     $533 = $xxi;
     $534 = ((($533)) + 44|0);
     $535 = ((($534)) + 12|0);
     HEAP32[$535>>2] = $532;
     $536 = ((($ri)) + 124|0);
     $537 = ((($536)) + 101|0);
     $538 = HEAP8[$537>>0]|0;
     $539 = $538&255;
     $540 = $xxi;
     $541 = ((($540)) + 44|0);
     $542 = ((($541)) + 20|0);
     HEAP32[$542>>2] = $539;
     $543 = ((($ri)) + 124|0);
     $544 = ((($543)) + 102|0);
     $545 = HEAP8[$544>>0]|0;
     $546 = $545&255;
     $547 = $xxi;
     $548 = ((($547)) + 44|0);
     $549 = ((($548)) + 24|0);
     HEAP32[$549>>2] = $546;
     $550 = ((($ri)) + 124|0);
     $551 = ((($550)) + 104|0);
     $552 = HEAP16[$551>>1]|0;
     $553 = $552&65535;
     $554 = $xxi;
     $555 = ((($554)) + 44|0);
     HEAP32[$555>>2] = $553;
     $556 = ((($ri)) + 232|0);
     $557 = HEAP8[$556>>0]|0;
     $558 = $557&255;
     $559 = $xxi;
     $560 = ((($559)) + 200|0);
     $561 = ((($560)) + 4|0);
     HEAP32[$561>>2] = $558;
     $562 = ((($ri)) + 232|0);
     $563 = ((($562)) + 100|0);
     $564 = HEAP8[$563>>0]|0;
     $565 = $564&255;
     $566 = $xxi;
     $567 = ((($566)) + 200|0);
     $568 = ((($567)) + 12|0);
     HEAP32[$568>>2] = $565;
     $569 = ((($ri)) + 232|0);
     $570 = ((($569)) + 101|0);
     $571 = HEAP8[$570>>0]|0;
     $572 = $571&255;
     $573 = $xxi;
     $574 = ((($573)) + 200|0);
     $575 = ((($574)) + 20|0);
     HEAP32[$575>>2] = $572;
     $576 = ((($ri)) + 232|0);
     $577 = ((($576)) + 102|0);
     $578 = HEAP8[$577>>0]|0;
     $579 = $578&255;
     $580 = $xxi;
     $581 = ((($580)) + 200|0);
     $582 = ((($581)) + 24|0);
     HEAP32[$582>>2] = $579;
     $583 = ((($ri)) + 232|0);
     $584 = ((($583)) + 104|0);
     $585 = HEAP16[$584>>1]|0;
     $586 = $585&65535;
     $587 = $xxi;
     $588 = ((($587)) + 200|0);
     HEAP32[$588>>2] = $586;
     $j = 0;
     while(1) {
      $589 = $j;
      $590 = $xxi;
      $591 = ((($590)) + 44|0);
      $592 = ((($591)) + 4|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = ($589|0)<($593|0);
      if (!($594)) {
       break;
      }
      $595 = $j;
      $596 = ((($ri)) + 124|0);
      $597 = ((($596)) + 4|0);
      $598 = (($597) + ($595<<3)|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = $599&65535;
      $601 = $j;
      $602 = $601<<1;
      $603 = (($602) + 0)|0;
      $604 = $xxi;
      $605 = ((($604)) + 44|0);
      $606 = ((($605)) + 28|0);
      $607 = (($606) + ($603<<1)|0);
      HEAP16[$607>>1] = $600;
      $608 = $j;
      $609 = ((($ri)) + 124|0);
      $610 = ((($609)) + 4|0);
      $611 = (($610) + ($608<<3)|0);
      $612 = ((($611)) + 4|0);
      $613 = HEAP32[$612>>2]|0;
      $614 = (($613|0) / 2)&-1;
      $615 = $614&65535;
      $616 = $j;
      $617 = $616<<1;
      $618 = (($617) + 1)|0;
      $619 = $xxi;
      $620 = ((($619)) + 44|0);
      $621 = ((($620)) + 28|0);
      $622 = (($621) + ($618<<1)|0);
      HEAP16[$622>>1] = $615;
      $623 = $j;
      $624 = (($623) + 1)|0;
      $j = $624;
     }
     $j = 0;
     while(1) {
      $625 = $j;
      $626 = $xxi;
      $627 = ((($626)) + 200|0);
      $628 = ((($627)) + 4|0);
      $629 = HEAP32[$628>>2]|0;
      $630 = ($625|0)<($629|0);
      if (!($630)) {
       break;
      }
      $631 = $j;
      $632 = ((($ri)) + 232|0);
      $633 = ((($632)) + 4|0);
      $634 = (($633) + ($631<<3)|0);
      $635 = HEAP32[$634>>2]|0;
      $636 = $635&65535;
      $637 = $j;
      $638 = $637<<1;
      $639 = (($638) + 0)|0;
      $640 = $xxi;
      $641 = ((($640)) + 200|0);
      $642 = ((($641)) + 28|0);
      $643 = (($642) + ($639<<1)|0);
      HEAP16[$643>>1] = $636;
      $644 = $j;
      $645 = ((($ri)) + 232|0);
      $646 = ((($645)) + 4|0);
      $647 = (($646) + ($644<<3)|0);
      $648 = ((($647)) + 4|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = (($649|0) / 2)&-1;
      $651 = (32 + ($650))|0;
      $652 = $651&65535;
      $653 = $j;
      $654 = $653<<1;
      $655 = (($654) + 1)|0;
      $656 = $xxi;
      $657 = ((($656)) + 200|0);
      $658 = ((($657)) + 28|0);
      $659 = (($658) + ($655<<1)|0);
      HEAP16[$659>>1] = $652;
      $660 = $j;
      $661 = (($660) + 1)|0;
      $j = $661;
     }
     $j = 0;
     while(1) {
      $662 = $j;
      $663 = $xxi;
      $664 = ((($663)) + 36|0);
      $665 = HEAP32[$664>>2]|0;
      $666 = ($662|0)<($665|0);
      if (!($666)) {
       break L89;
      }
      $667 = $j;
      $668 = $xxi;
      $669 = ((($668)) + 756|0);
      $670 = HEAP32[$669>>2]|0;
      $671 = (($670) + ($667<<6)|0);
      $sub = $671;
      $672 = $2;
      $673 = (_read_object_header($672,$oh,6160)|0);
      $674 = ($673|0)<(0);
      if ($674) {
       label = 95;
       break L85;
      }
      $675 = $2;
      $676 = (_hio_read16l($675)|0);
      HEAP16[$rs>>1] = $676;
      $677 = $2;
      $678 = (_hio_read8($677)|0);
      $679 = ((($rs)) + 2|0);
      HEAP8[$679>>0] = $678;
      $680 = $2;
      $681 = (_hio_read8($680)|0);
      $682 = ((($rs)) + 3|0);
      HEAP8[$682>>0] = $681;
      $683 = $2;
      $684 = (_hio_read32l($683)|0);
      $685 = ((($rs)) + 4|0);
      HEAP32[$685>>2] = $684;
      $686 = $2;
      $687 = (_hio_read32l($686)|0);
      $688 = $687&255;
      $689 = ((($rs)) + 8|0);
      HEAP8[$689>>0] = $688;
      $690 = $2;
      $691 = (_hio_read32l($690)|0);
      $692 = ((($rs)) + 12|0);
      HEAP32[$692>>2] = $691;
      $693 = $2;
      $694 = (_hio_read32l($693)|0);
      $695 = ((($rs)) + 16|0);
      HEAP32[$695>>2] = $694;
      $696 = $2;
      $697 = (_hio_read32l($696)|0);
      $698 = ((($rs)) + 20|0);
      HEAP32[$698>>2] = $697;
      $699 = $2;
      $700 = (_hio_read8($699)|0);
      $701 = ((($rs)) + 24|0);
      HEAP8[$701>>0] = $700;
      $702 = $2;
      $703 = (_hio_read8($702)|0);
      $704 = ((($rs)) + 25|0);
      HEAP8[$704>>0] = $703;
      $705 = ((($rs)) + 20|0);
      $706 = HEAP32[$705>>2]|0;
      $707 = $sub;
      $708 = ((($707)) + 12|0);
      $709 = $sub;
      $710 = ((($709)) + 16|0);
      _c2spd_to_note($706,$708,$710);
      $711 = ((($rs)) + 24|0);
      $712 = HEAP8[$711>>0]|0;
      $713 = $712&255;
      $714 = (48 - ($713))|0;
      $715 = $sub;
      $716 = ((($715)) + 12|0);
      $717 = HEAP32[$716>>2]|0;
      $718 = (($717) + ($714))|0;
      HEAP32[$716>>2] = $718;
      $719 = ((($rs)) + 3|0);
      $720 = HEAP8[$719>>0]|0;
      $721 = $720&255;
      $722 = ((($rs)) + 2|0);
      $723 = HEAP8[$722>>0]|0;
      $724 = $723&255;
      $725 = Math_imul($721, $724)|0;
      $726 = (($725|0) / 64)&-1;
      $727 = $sub;
      HEAP32[$727>>2] = $726;
      $728 = ((($rs)) + 25|0);
      $729 = HEAP8[$728>>0]|0;
      $730 = $729 << 24 >> 24;
      $731 = $730<<1;
      $732 = (128 + ($731))|0;
      $733 = $sub;
      $734 = ((($733)) + 8|0);
      HEAP32[$734>>2] = $732;
      $735 = ((($ri)) + 340|0);
      $736 = HEAP8[$735>>0]|0;
      $737 = $736 << 24 >> 24;
      $738 = $sub;
      $739 = ((($738)) + 20|0);
      HEAP32[$739>>2] = $737;
      $740 = ((($ri)) + 342|0);
      $741 = HEAP8[$740>>0]|0;
      $742 = $741 << 24 >> 24;
      $743 = $sub;
      $744 = ((($743)) + 24|0);
      HEAP32[$744>>2] = $742;
      $745 = ((($ri)) + 343|0);
      $746 = HEAP8[$745>>0]|0;
      $747 = $746 << 24 >> 24;
      $748 = $sub;
      $749 = ((($748)) + 28|0);
      HEAP32[$749>>2] = $747;
      $750 = ((($ri)) + 341|0);
      $751 = HEAP8[$750>>0]|0;
      $752 = $751 << 24 >> 24;
      $753 = $sub;
      $754 = ((($753)) + 32|0);
      HEAP32[$754>>2] = $752;
      $755 = $smpnum;
      $756 = $sub;
      $757 = ((($756)) + 40|0);
      HEAP32[$757>>2] = $755;
      $758 = $smpnum;
      $759 = $mod;
      $760 = ((($759)) + 144|0);
      $761 = HEAP32[$760>>2]|0;
      $762 = ($758|0)>=($761|0);
      if ($762) {
       $763 = $mod;
       $764 = ((($763)) + 180|0);
       $765 = HEAP32[$764>>2]|0;
       $766 = $mod;
       $767 = ((($766)) + 144|0);
       $768 = $mod;
       $769 = ((($768)) + 144|0);
       $770 = HEAP32[$769>>2]|0;
       $771 = ($770*3)|0;
       $772 = (($771|0) / 2)&-1;
       $773 = (_realloc_samples($765,$767,$772)|0);
       $774 = $mod;
       $775 = ((($774)) + 180|0);
       HEAP32[$775>>2] = $773;
       $776 = $mod;
       $777 = ((($776)) + 180|0);
       $778 = HEAP32[$777>>2]|0;
       $779 = ($778|0)==(0|0);
       if ($779) {
        label = 98;
        break L85;
       }
      }
      $780 = $smpnum;
      $781 = $mod;
      $782 = ((($781)) + 180|0);
      $783 = HEAP32[$782>>2]|0;
      $784 = (($783) + (($780*52)|0)|0);
      $xxs = $784;
      $785 = $xxs;
      $786 = ((($oh)) + 5|0);
      (_copy_adjust($785,$786,32)|0);
      $787 = ((($rs)) + 4|0);
      $788 = HEAP32[$787>>2]|0;
      $789 = $xxs;
      $790 = ((($789)) + 32|0);
      HEAP32[$790>>2] = $788;
      $791 = ((($rs)) + 12|0);
      $792 = HEAP32[$791>>2]|0;
      $793 = $xxs;
      $794 = ((($793)) + 36|0);
      HEAP32[$794>>2] = $792;
      $795 = ((($rs)) + 16|0);
      $796 = HEAP32[$795>>2]|0;
      $797 = $xxs;
      $798 = ((($797)) + 40|0);
      HEAP32[$798>>2] = $796;
      $799 = $xxs;
      $800 = ((($799)) + 44|0);
      HEAP32[$800>>2] = 0;
      $801 = HEAP16[$rs>>1]|0;
      $802 = $801&65535;
      $803 = $802 & 2;
      $804 = ($803|0)!=(0);
      if ($804) {
       $805 = $xxs;
       $806 = ((($805)) + 44|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = $807 | 1;
       HEAP32[$806>>2] = $808;
       $809 = $xxs;
       $810 = ((($809)) + 32|0);
       $811 = HEAP32[$810>>2]|0;
       $812 = $811 >> 1;
       HEAP32[$810>>2] = $812;
       $813 = $xxs;
       $814 = ((($813)) + 36|0);
       $815 = HEAP32[$814>>2]|0;
       $816 = $815 >> 1;
       HEAP32[$814>>2] = $816;
       $817 = $xxs;
       $818 = ((($817)) + 40|0);
       $819 = HEAP32[$818>>2]|0;
       $820 = $819 >> 1;
       HEAP32[$818>>2] = $820;
      }
      $821 = ((($rs)) + 8|0);
      $822 = HEAP8[$821>>0]|0;
      $823 = $822&255;
      $824 = $823 & 3;
      $825 = ($824|0)!=(0);
      $826 = $825 ? 2 : 0;
      $827 = $xxs;
      $828 = ((($827)) + 44|0);
      $829 = HEAP32[$828>>2]|0;
      $830 = $829 | $826;
      HEAP32[$828>>2] = $830;
      $831 = ((($rs)) + 8|0);
      $832 = HEAP8[$831>>0]|0;
      $833 = $832&255;
      $834 = ($833|0)==(2);
      $835 = $834 ? 4 : 0;
      $836 = $xxs;
      $837 = ((($836)) + 44|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = $838 | $835;
      HEAP32[$837>>2] = $839;
      $840 = $1;
      $841 = $2;
      $842 = $xxs;
      $843 = (_load_sample($840,$841,1,$842,0)|0);
      $844 = ($843|0)<(0);
      if ($844) {
       label = 102;
       break L85;
      }
      $845 = $j;
      $846 = (($845) + 1)|0;
      $j = $846;
      $847 = $smpnum;
      $848 = (($847) + 1)|0;
      $smpnum = $848;
     }
    }
   } while(0);
   $849 = $i;
   $850 = (($849) + 1)|0;
   $i = $850;
  }
  if ((label|0) == 60) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 64) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 66) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 71) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 82) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 95) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 98) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 102) {
   $0 = -1;
   $870 = $0;
   STACKTOP = sp;return ($870|0);
  }
  else if ((label|0) == 105) {
   $851 = $mod;
   $852 = ((($851)) + 180|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = $mod;
   $855 = ((($854)) + 144|0);
   $856 = $smpnum;
   $857 = (_realloc_samples($853,$855,$856)|0);
   $858 = $mod;
   $859 = ((($858)) + 180|0);
   HEAP32[$859>>2] = $857;
   $860 = $mod;
   $861 = ((($860)) + 180|0);
   $862 = HEAP32[$861>>2]|0;
   $863 = ($862|0)==(0|0);
   if ($863) {
    $0 = -1;
    $870 = $0;
    STACKTOP = sp;return ($870|0);
   } else {
    $864 = $1;
    $865 = ((($864)) + 1284|0);
    $866 = HEAP32[$865>>2]|0;
    $867 = $866 | 33554464;
    HEAP32[$865>>2] = $867;
    $868 = $1;
    $869 = ((($868)) + 1288|0);
    HEAP32[$869>>2] = 1;
    $0 = 0;
    $870 = $0;
    STACKTOP = sp;return ($870|0);
   }
  }
 }
 return (0)|0;
}
function _read_object_header($f,$h,$id) {
 $f = $f|0;
 $h = $h|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $h;
 $3 = $id;
 $4 = $2;
 $5 = $1;
 (_hio_read($4,4,1,$5)|0);
 $6 = $3;
 $7 = $2;
 $8 = (_memcmp($6,$7,4)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $10 = $1;
 $11 = (_hio_read8($10)|0);
 $12 = $2;
 $13 = ((($12)) + 4|0);
 HEAP8[$13>>0] = $11;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = ($17|0)!=(32);
 if ($18) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $19 = $2;
 $20 = ((($19)) + 5|0);
 $21 = $1;
 $22 = (_hio_read($20,1,32,$21)|0);
 $23 = ($22|0)!=(32);
 if ($23) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $24 = $1;
  $25 = (_hio_read8($24)|0);
  $26 = $2;
  $27 = ((($26)) + 37|0);
  HEAP8[$27>>0] = $25;
  $28 = $1;
  $29 = (_hio_read16l($28)|0);
  $30 = $2;
  $31 = ((($30)) + 38|0);
  HEAP16[$31>>1] = $29;
  $32 = $1;
  $33 = (_hio_read16l($32)|0);
  $34 = $2;
  $35 = ((($34)) + 40|0);
  HEAP16[$35>>1] = $33;
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _dt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1143886894);
 if ($6) {
  $0 = -1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $7 = $1;
  (_hio_read32b($7)|0);
  $8 = $1;
  (_hio_read16b($8)|0);
  $9 = $1;
  (_hio_read16b($9)|0);
  $10 = $1;
  (_hio_read16b($10)|0);
  $11 = $1;
  (_hio_read16b($11)|0);
  $12 = $1;
  (_hio_read16b($12)|0);
  $13 = $1;
  (_hio_read32b($13)|0);
  $14 = $1;
  $15 = $2;
  _read_title($14,$15,32);
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _dt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0;
 var $handle = 0, $i = 0, $mod = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 12|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 ;HEAP32[$data>>2]=0|0;HEAP32[$data+4>>2]=0|0;HEAP32[$data+8>>2]=0|0;HEAP32[$data+12>>2]=0|0;HEAP32[$data+16>>2]=0|0;
 $7 = (_iff_new()|0);
 $handle = $7;
 $8 = $handle;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $10 = $handle;
 $11 = (_iff_register($10,6200,249)|0);
 $ret = $11;
 $12 = $handle;
 $13 = (_iff_register($12,6208,250)|0);
 $14 = $ret;
 $15 = $14 | $13;
 $ret = $15;
 $16 = $handle;
 $17 = (_iff_register($16,7192,251)|0);
 $18 = $ret;
 $19 = $18 | $17;
 $ret = $19;
 $20 = $handle;
 $21 = (_iff_register($20,7200,252)|0);
 $22 = $ret;
 $23 = $22 | $21;
 $ret = $23;
 $24 = $handle;
 $25 = (_iff_register($24,6216,253)|0);
 $26 = $ret;
 $27 = $26 | $25;
 $ret = $27;
 $28 = $handle;
 $29 = (_iff_register($28,6224,254)|0);
 $30 = $ret;
 $31 = $30 | $29;
 $ret = $31;
 $32 = $ret;
 $33 = ($32|0)!=(0);
 if ($33) {
  $0 = -1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $34 = $handle;
 $35 = $1;
 $36 = $2;
 $37 = (_iff_load($34,$35,$36,$data)|0);
 $ret = $37;
 $38 = $handle;
 _iff_release($38);
 $39 = $ret;
 $40 = ($39|0)<(0);
 if ($40) {
  $0 = -1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $41 = $mod;
 $42 = ((($41)) + 168|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 L13: do {
  if ($44) {
   $45 = ((($data)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $i = $46;
   while(1) {
    $47 = $i;
    $48 = $mod;
    $49 = ((($48)) + 128|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($47|0)<($50|0);
    if (!($51)) {
     break L13;
    }
    $52 = $mod;
    $53 = $i;
    $54 = (_pattern_tracks_alloc($52,$53,64)|0);
    $55 = ($54|0)<(0);
    if ($55) {
     break;
    }
    $56 = $i;
    $57 = (($56) + 1)|0;
    $i = $57;
   }
   $0 = -1;
   $58 = $0;
   STACKTOP = sp;return ($58|0);
  }
 } while(0);
 $0 = 0;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _get_d_t_($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read16b($5)|0);
 $6 = $2;
 (_hio_read16b($6)|0);
 $7 = $2;
 (_hio_read16b($7)|0);
 $8 = $2;
 $9 = (_hio_read16b($8)|0);
 $10 = $9&65535;
 $11 = $mod;
 $12 = ((($11)) + 148|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = (_hio_read16b($13)|0);
 $15 = $14&65535;
 $b = $15;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = $b;
  $18 = $mod;
  $19 = ((($18)) + 152|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $2;
 (_hio_read32b($20)|0);
 $21 = $mod;
 $22 = $2;
 (_hio_read($21,32,1,$22)|0);
 $23 = $0;
 _set_type($23,6232,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _get_s_q_($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $maxpat = 0;
 var $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = ((($6)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $10 = $3;
 $11 = (_hio_read16b($10)|0);
 $12 = $11&65535;
 $13 = $mod;
 $14 = ((($13)) + 156|0);
 HEAP32[$14>>2] = $12;
 $15 = $3;
 $16 = (_hio_read16b($15)|0);
 $17 = $16&65535;
 $18 = $mod;
 $19 = ((($18)) + 160|0);
 HEAP32[$19>>2] = $17;
 $20 = $mod;
 $21 = ((($20)) + 156|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)>(256);
 if (!($23)) {
  $24 = $mod;
  $25 = ((($24)) + 160|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(255);
  if (!($27)) {
   $28 = $3;
   (_hio_read32b($28)|0);
   $i = 0;
   $maxpat = 0;
   while(1) {
    $29 = $i;
    $30 = ($29|0)<(128);
    if (!($30)) {
     break;
    }
    $31 = $3;
    $32 = (_hio_read8($31)|0);
    $33 = $i;
    $34 = $mod;
    $35 = ((($34)) + 952|0);
    $36 = (($35) + ($33)|0);
    HEAP8[$36>>0] = $32;
    $37 = $i;
    $38 = $mod;
    $39 = ((($38)) + 952|0);
    $40 = (($39) + ($37)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = $maxpat;
    $44 = ($42|0)>($43|0);
    if ($44) {
     $45 = $i;
     $46 = $mod;
     $47 = ((($46)) + 952|0);
     $48 = (($47) + ($45)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $maxpat = $50;
    }
    $51 = $i;
    $52 = (($51) + 1)|0;
    $i = $52;
   }
   $53 = $maxpat;
   $54 = (($53) + 1)|0;
   $55 = $mod;
   $56 = ((($55)) + 128|0);
   HEAP32[$56>>2] = $54;
   $0 = 0;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
 }
 $0 = -1;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _get_patt280($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $2;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = $mod;
 $10 = ((($9)) + 136|0);
 HEAP32[$10>>2] = $8;
 $11 = $2;
 $12 = (_hio_read16b($11)|0);
 $13 = $12&65535;
 $14 = $data;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $mod;
 $17 = ((($16)) + 136|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $mod;
 $20 = ((($19)) + 128|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($18, $21)|0;
 $23 = $mod;
 $24 = ((($23)) + 132|0);
 HEAP32[$24>>2] = $22;
 STACKTOP = sp;return 0;
}
function _get_inst($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c2spd = 0, $fine = 0, $flag = 0, $i = 0, $mod = 0, $name = 0, $replen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $name = sp + 44|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = $mod;
 $10 = ((($9)) + 144|0);
 HEAP32[$10>>2] = $8;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 HEAP32[$12>>2] = $8;
 $13 = $mod;
 $14 = (_instrument_init($13)|0);
 $15 = ($14|0)<(0);
 if ($15) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $mod;
  $18 = ((($17)) + 140|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   label = 10;
   break;
  }
  $21 = $mod;
  $22 = $i;
  $23 = (_subinstrument_alloc($21,$22,1)|0);
  $24 = ($23|0)<(0);
  if ($24) {
   label = 6;
   break;
  }
  $25 = $3;
  (_hio_read32b($25)|0);
  $26 = $3;
  $27 = (_hio_read32b($26)|0);
  $28 = $i;
  $29 = $mod;
  $30 = ((($29)) + 180|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*52)|0)|0);
  $33 = ((($32)) + 32|0);
  HEAP32[$33>>2] = $27;
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 180|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($34*52)|0)|0);
  $39 = ((($38)) + 32|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0);
  $42 = $41 ^ 1;
  $43 = $42 ^ 1;
  $44 = $43&1;
  $45 = $i;
  $46 = $mod;
  $47 = ((($46)) + 176|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + (($45*764)|0)|0);
  $50 = ((($49)) + 36|0);
  HEAP32[$50>>2] = $44;
  $51 = $3;
  $52 = (_hio_read8s($51)|0);
  $53 = $52 << 24 >> 24;
  $fine = $53;
  $54 = $3;
  $55 = (_hio_read8($54)|0);
  $56 = $55&255;
  $57 = $i;
  $58 = $mod;
  $59 = ((($58)) + 176|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + (($57*764)|0)|0);
  $62 = ((($61)) + 756|0);
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$63>>2] = $56;
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 176|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + (($64*764)|0)|0);
  $69 = ((($68)) + 756|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 8|0);
  HEAP32[$71>>2] = 128;
  $72 = $3;
  $73 = (_hio_read32b($72)|0);
  $74 = $i;
  $75 = $mod;
  $76 = ((($75)) + 180|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + (($74*52)|0)|0);
  $79 = ((($78)) + 36|0);
  HEAP32[$79>>2] = $73;
  $80 = $3;
  $81 = (_hio_read32b($80)|0);
  $replen = $81;
  $82 = $i;
  $83 = $mod;
  $84 = ((($83)) + 180|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($82*52)|0)|0);
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $replen;
  $90 = (($88) + ($89))|0;
  $91 = (($90) - 1)|0;
  $92 = $i;
  $93 = $mod;
  $94 = ((($93)) + 180|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + (($92*52)|0)|0);
  $97 = ((($96)) + 40|0);
  HEAP32[$97>>2] = $91;
  $98 = $replen;
  $99 = ($98|0)>(2);
  $100 = $99 ? 2 : 0;
  $101 = $i;
  $102 = $mod;
  $103 = ((($102)) + 180|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + (($101*52)|0)|0);
  $106 = ((($105)) + 44|0);
  HEAP32[$106>>2] = $100;
  $107 = $3;
  (_hio_read($name,22,1,$107)|0);
  $108 = $mod;
  $109 = $i;
  (_instrument_name($108,$109,$name,22)|0);
  $110 = $3;
  $111 = (_hio_read16b($110)|0);
  $112 = $111&65535;
  $flag = $112;
  $113 = $flag;
  $114 = $113 & 255;
  $115 = ($114|0)>(8);
  if ($115) {
   $116 = $i;
   $117 = $mod;
   $118 = ((($117)) + 180|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + (($116*52)|0)|0);
   $121 = ((($120)) + 44|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $122 | 1;
   HEAP32[$121>>2] = $123;
   $124 = $i;
   $125 = $mod;
   $126 = ((($125)) + 180|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + (($124*52)|0)|0);
   $129 = ((($128)) + 32|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $130 >> 1;
   HEAP32[$129>>2] = $131;
   $132 = $i;
   $133 = $mod;
   $134 = ((($133)) + 180|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($135) + (($132*52)|0)|0);
   $137 = ((($136)) + 36|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 >> 1;
   HEAP32[$137>>2] = $139;
   $140 = $i;
   $141 = $mod;
   $142 = ((($141)) + 180|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (($143) + (($140*52)|0)|0);
   $145 = ((($144)) + 40|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $146 >> 1;
   HEAP32[$145>>2] = $147;
  }
  $148 = $3;
  (_hio_read32b($148)|0);
  $149 = $3;
  $150 = (_hio_read32b($149)|0);
  $c2spd = $150;
  $151 = $c2spd;
  $152 = $i;
  $153 = $mod;
  $154 = ((($153)) + 176|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($152*764)|0)|0);
  $157 = ((($156)) + 756|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($158)) + 12|0);
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 176|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*764)|0)|0);
  $165 = ((($164)) + 756|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ((($166)) + 16|0);
  _c2spd_to_note($151,$159,$167);
  $168 = $fine;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 176|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*764)|0)|0);
  $174 = ((($173)) + 756|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($175)) + 16|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + ($168))|0;
  HEAP32[$176>>2] = $178;
  $179 = $i;
  $180 = $i;
  $181 = $mod;
  $182 = ((($181)) + 176|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + (($180*764)|0)|0);
  $185 = ((($184)) + 756|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ((($186)) + 40|0);
  HEAP32[$187>>2] = $179;
  $188 = $i;
  $189 = (($188) + 1)|0;
  $i = $189;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $190 = $0;
  STACKTOP = sp;return ($190|0);
 }
 return (0)|0;
}
function _get_dapt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $c = 0, $d = 0;
 var $data = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $pat = 0, $rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $data;
  HEAP32[$10>>2] = 1;
  $11 = $data;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 0;
  $13 = $mod;
  $14 = (_pattern_init($13)|0);
  $15 = ($14|0)<(0);
  if ($15) {
   $0 = -1;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
 }
 $16 = $3;
 (_hio_read32b($16)|0);
 $17 = $3;
 $18 = (_hio_read16b($17)|0);
 $19 = $18&65535;
 $pat = $19;
 $20 = $3;
 $21 = (_hio_read16b($20)|0);
 $22 = $21&65535;
 $rows = $22;
 $23 = $pat;
 $24 = ($23|0)<(0);
 if (!($24)) {
  $25 = $pat;
  $26 = $mod;
  $27 = ((($26)) + 128|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)>=($28|0);
  $30 = $rows;
  $31 = ($30|0)<(0);
  $or$cond = $29 | $31;
  $32 = $rows;
  $33 = ($32|0)>(256);
  $or$cond3 = $or$cond | $33;
  if (!($or$cond3)) {
   $34 = $pat;
   $35 = $data;
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($34|0)<($37|0);
   if ($38) {
    $0 = -1;
    $135 = $0;
    STACKTOP = sp;return ($135|0);
   }
   $39 = $data;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $i = $41;
   while(1) {
    $42 = $i;
    $43 = $pat;
    $44 = ($42|0)<=($43|0);
    if (!($44)) {
     break;
    }
    $45 = $mod;
    $46 = $i;
    $47 = $rows;
    $48 = (_pattern_tracks_alloc($45,$46,$47)|0);
    $49 = ($48|0)<(0);
    if ($49) {
     label = 12;
     break;
    }
    $50 = $i;
    $51 = (($50) + 1)|0;
    $i = $51;
   }
   if ((label|0) == 12) {
    $0 = -1;
    $135 = $0;
    STACKTOP = sp;return ($135|0);
   }
   $52 = $pat;
   $53 = (($52) + 1)|0;
   $54 = $data;
   $55 = ((($54)) + 12|0);
   HEAP32[$55>>2] = $53;
   $j = 0;
   while(1) {
    $56 = $j;
    $57 = $rows;
    $58 = ($56|0)<($57|0);
    if (!($58)) {
     break;
    }
    $k = 0;
    while(1) {
     $59 = $k;
     $60 = $mod;
     $61 = ((($60)) + 136|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($59|0)<($62|0);
     $64 = $j;
     if (!($63)) {
      break;
     }
     $65 = $k;
     $66 = $pat;
     $67 = $1;
     $68 = ((($67)) + 168|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($66<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 4|0);
     $73 = (($72) + ($65<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $1;
     $76 = ((($75)) + 172|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($74<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($79)) + 4|0);
     $81 = (($80) + ($64<<3)|0);
     $event = $81;
     $82 = $3;
     $83 = (_hio_read8($82)|0);
     $a = $83;
     $84 = $3;
     $85 = (_hio_read8($84)|0);
     $b = $85;
     $86 = $3;
     $87 = (_hio_read8($86)|0);
     $c = $87;
     $88 = $3;
     $89 = (_hio_read8($88)|0);
     $d = $89;
     $90 = $a;
     $91 = ($90<<24>>24)!=(0);
     if ($91) {
      $92 = $a;
      $93 = (($92) + -1)<<24>>24;
      $a = $93;
      $94 = $a;
      $95 = $94&255;
      $96 = $95 >> 4;
      $97 = ($96*12)|0;
      $98 = $a;
      $99 = $98&255;
      $100 = $99 & 15;
      $101 = (($97) + ($100))|0;
      $102 = (($101) + 12)|0;
      $103 = $102&255;
      $104 = $event;
      HEAP8[$104>>0] = $103;
     }
     $105 = $b;
     $106 = $105&255;
     $107 = $106 & 252;
     $108 = $107 >> 2;
     $109 = $108&255;
     $110 = $event;
     $111 = ((($110)) + 2|0);
     HEAP8[$111>>0] = $109;
     $112 = $b;
     $113 = $112&255;
     $114 = $113 & 3;
     $115 = $114 << 4;
     $116 = $c;
     $117 = $116&255;
     $118 = $117 >> 4;
     $119 = (($115) + ($118))|0;
     $120 = $119&255;
     $121 = $event;
     $122 = ((($121)) + 1|0);
     HEAP8[$122>>0] = $120;
     $123 = $c;
     $124 = $123&255;
     $125 = $124 & 15;
     $126 = $125&255;
     $127 = $event;
     $128 = ((($127)) + 3|0);
     HEAP8[$128>>0] = $126;
     $129 = $d;
     $130 = $event;
     $131 = ((($130)) + 4|0);
     HEAP8[$131>>0] = $129;
     $132 = $k;
     $133 = (($132) + 1)|0;
     $k = $133;
    }
    $134 = (($64) + 1)|0;
    $j = $134;
   }
   $0 = 0;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
 }
 $0 = -1;
 $135 = $0;
 STACKTOP = sp;return ($135|0);
}
function _get_dait($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $mod = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $data;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = 1;
  $13 = $data;
  $14 = ((($13)) + 16|0);
  HEAP32[$14>>2] = 0;
 }
 $15 = $2;
 $16 = ($15|0)>(2);
 if ($16) {
  $17 = $data;
  $18 = ((($17)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $mod;
  $21 = ((($20)) + 140|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)>=($22|0);
  if ($23) {
   $0 = -1;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
  $24 = $1;
  $25 = $3;
  $26 = $data;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $mod;
  $30 = ((($29)) + 176|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*764)|0)|0);
  $33 = ((($32)) + 756|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $mod;
  $38 = ((($37)) + 180|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($36*52)|0)|0);
  $41 = (_load_sample($24,$25,64,$40,0)|0);
  $ret = $41;
  $42 = $ret;
  $43 = ($42|0)<(0);
  if ($43) {
   $0 = -1;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
 }
 $44 = $data;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$45>>2] = $47;
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _no_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chn = 0, $i = 0, $nsize = 0, $or$cond = 0, $pat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 (_hio_seek($4,$5,1)|0);
 $6 = $1;
 $7 = (_hio_read32b($6)|0);
 $8 = ($7|0)!=(1313800192);
 if ($8) {
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $9 = $1;
 $10 = (_hio_read8($9)|0);
 $11 = $10&255;
 $nsize = $11;
 $12 = $nsize;
 $13 = ($12|0)!=(20);
 if ($13) {
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $nsize;
  $16 = ($14|0)<($15|0);
  $17 = $1;
  if (!($16)) {
   break;
  }
  $18 = (_hio_read8($17)|0);
  $19 = $18&255;
  $20 = ($19|0)==(0);
  if ($20) {
   label = 8;
   break;
  }
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 (_hio_seek($17,9,1)|0);
 $23 = $1;
 $24 = (_hio_read8($23)|0);
 $25 = $24&255;
 $pat = $25;
 $26 = $pat;
 $27 = ($26|0)==(0);
 if ($27) {
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $28 = $1;
 (_hio_read8($28)|0);
 $29 = $1;
 $30 = (_hio_read8($29)|0);
 $31 = $30&255;
 $chn = $31;
 $32 = $chn;
 $33 = ($32|0)<=(0);
 $34 = $chn;
 $35 = ($34|0)>(16);
 $or$cond = $33 | $35;
 if ($or$cond) {
  $0 = -1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $36 = $1;
 $37 = $3;
 $38 = (($37) + 5)|0;
 (_hio_seek($36,$38,0)|0);
 $39 = $nsize;
 $40 = ($39|0)>(64);
 $41 = $1;
 $42 = $2;
 if ($40) {
  _read_title($41,$42,64);
  $43 = $1;
  $44 = $nsize;
  $45 = (($44) - 64)|0;
  (_hio_seek($43,$45,1)|0);
 } else {
  $46 = $nsize;
  _read_title($41,$42,$46);
 }
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _no_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c2spd = 0, $event = 0, $fxp = 0, $fxt = 0, $hasname = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $mod = 0, $note = 0, $nsize = 0, $vararg_buffer = 0, $vol = 0, $x = 0, $x1 = 0;
 var $x2 = 0, $x3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $1;
 _set_type($8,6296,$vararg_buffer);
 $9 = $2;
 $10 = (_hio_read8($9)|0);
 $11 = $10&255;
 $nsize = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $nsize;
  $14 = ($12|0)<($13|0);
  $15 = $2;
  if (!($14)) {
   break;
  }
  $16 = (_hio_read8($15)|0);
  $x = $16;
  $17 = $i;
  $18 = ($17|0)<(64);
  if ($18) {
   $19 = $x;
   $20 = $i;
   $21 = $mod;
   $22 = (($21) + ($20)|0);
   HEAP8[$22>>0] = $19;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 (_hio_read16l($15)|0);
 $25 = $2;
 (_hio_read16l($25)|0);
 $26 = $2;
 (_hio_read16l($26)|0);
 $27 = $2;
 (_hio_read16l($27)|0);
 $28 = $2;
 (_hio_read8($28)|0);
 $29 = $2;
 $30 = (_hio_read8($29)|0);
 $31 = $30&255;
 $32 = $mod;
 $33 = ((($32)) + 128|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 (_hio_read8($34)|0);
 $35 = $2;
 $36 = (_hio_read8($35)|0);
 $37 = $36&255;
 $38 = $mod;
 $39 = ((($38)) + 136|0);
 HEAP32[$39>>2] = $37;
 $40 = $mod;
 $41 = ((($40)) + 128|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $mod;
 $44 = ((($43)) + 136|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = Math_imul($42, $45)|0;
 $47 = $mod;
 $48 = ((($47)) + 132|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 (_hio_read8($49)|0);
 $50 = $2;
 (_hio_read16l($50)|0);
 $51 = $2;
 (_hio_read16l($51)|0);
 $52 = $2;
 (_hio_read8($52)|0);
 $53 = $mod;
 $54 = ((($53)) + 144|0);
 HEAP32[$54>>2] = 63;
 $55 = $mod;
 $56 = ((($55)) + 140|0);
 HEAP32[$56>>2] = 63;
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = ($57|0)<(256);
  if (!($58)) {
   break;
  }
  $59 = $2;
  $60 = (_hio_read8($59)|0);
  $x1 = $60;
  $61 = $x1;
  $62 = $61&255;
  $63 = ($62|0)==(255);
  if ($63) {
   break;
  }
  $64 = $x1;
  $65 = $i;
  $66 = $mod;
  $67 = ((($66)) + 952|0);
  $68 = (($67) + ($65)|0);
  HEAP8[$68>>0] = $64;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = $2;
 $72 = $i;
 $73 = (255 - ($72))|0;
 (_hio_seek($71,$73,1)|0);
 $74 = $i;
 $75 = $mod;
 $76 = ((($75)) + 156|0);
 HEAP32[$76>>2] = $74;
 $77 = $mod;
 $78 = (_instrument_init($77)|0);
 $79 = ($78|0)<(0);
 if ($79) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = $mod;
  $82 = ((($81)) + 140|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)<($83|0);
  $85 = $mod;
  if (!($84)) {
   break;
  }
  $86 = $i;
  $87 = (_subinstrument_alloc($85,$86,1)|0);
  $88 = ($87|0)<(0);
  if ($88) {
   label = 15;
   break;
  }
  $89 = $2;
  $90 = (_hio_read8($89)|0);
  $91 = $90&255;
  $nsize = $91;
  $hasname = 0;
  $j = 0;
  while(1) {
   $92 = $j;
   $93 = $nsize;
   $94 = ($92|0)<($93|0);
   if (!($94)) {
    break;
   }
   $95 = $2;
   $96 = (_hio_read8($95)|0);
   $x2 = $96;
   $97 = $x2;
   $98 = $97&255;
   $99 = ($98|0)!=(32);
   if ($99) {
    $hasname = 1;
   }
   $100 = $j;
   $101 = ($100|0)<(32);
   if ($101) {
    $102 = $x2;
    $103 = $j;
    $104 = $i;
    $105 = $mod;
    $106 = ((($105)) + 176|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + (($104*764)|0)|0);
    $109 = (($108) + ($103)|0);
    HEAP8[$109>>0] = $102;
   }
   $110 = $j;
   $111 = (($110) + 1)|0;
   $j = $111;
  }
  $112 = $hasname;
  $113 = ($112|0)!=(0);
  if (!($113)) {
   $114 = $i;
   $115 = $mod;
   $116 = ((($115)) + 176|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + (($114*764)|0)|0);
   HEAP8[$118>>0] = 0;
  }
  $119 = $2;
  (_hio_read32l($119)|0);
  $120 = $2;
  (_hio_read32l($120)|0);
  $121 = $2;
  $122 = (_hio_read8($121)|0);
  $123 = $122&255;
  $124 = $i;
  $125 = $mod;
  $126 = ((($125)) + 176|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + (($124*764)|0)|0);
  $129 = ((($128)) + 756|0);
  $130 = HEAP32[$129>>2]|0;
  HEAP32[$130>>2] = $123;
  $131 = $2;
  $132 = (_hio_read16l($131)|0);
  $133 = $132&65535;
  $c2spd = $133;
  $134 = $2;
  $135 = (_hio_read16l($134)|0);
  $136 = $135&65535;
  $137 = $i;
  $138 = $mod;
  $139 = ((($138)) + 180|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + (($137*52)|0)|0);
  $142 = ((($141)) + 32|0);
  HEAP32[$142>>2] = $136;
  $143 = $2;
  $144 = (_hio_read16l($143)|0);
  $145 = $144&65535;
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 180|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + (($146*52)|0)|0);
  $151 = ((($150)) + 36|0);
  HEAP32[$151>>2] = $145;
  $152 = $2;
  $153 = (_hio_read16l($152)|0);
  $154 = $153&65535;
  $155 = $i;
  $156 = $mod;
  $157 = ((($156)) + 180|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + (($155*52)|0)|0);
  $160 = ((($159)) + 40|0);
  HEAP32[$160>>2] = $154;
  $161 = $2;
  (_hio_read32l($161)|0);
  $162 = $2;
  (_hio_read16l($162)|0);
  $163 = $i;
  $164 = $mod;
  $165 = ((($164)) + 180|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + (($163*52)|0)|0);
  $168 = ((($167)) + 32|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)>(0);
  if ($170) {
   $171 = $i;
   $172 = $mod;
   $173 = ((($172)) + 176|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + (($171*764)|0)|0);
   $176 = ((($175)) + 36|0);
   HEAP32[$176>>2] = 1;
  }
  $177 = $i;
  $178 = $mod;
  $179 = ((($178)) + 180|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + (($177*52)|0)|0);
  $182 = ((($181)) + 40|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)>(0);
  $185 = $184 ? 2 : 0;
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 180|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + (($186*52)|0)|0);
  $191 = ((($190)) + 44|0);
  HEAP32[$191>>2] = $185;
  $192 = $i;
  $193 = $mod;
  $194 = ((($193)) + 176|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = (($195) + (($192*764)|0)|0);
  $197 = ((($196)) + 756|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ((($198)) + 16|0);
  HEAP32[$199>>2] = 0;
  $200 = $i;
  $201 = $mod;
  $202 = ((($201)) + 176|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) + (($200*764)|0)|0);
  $205 = ((($204)) + 756|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ((($206)) + 8|0);
  HEAP32[$207>>2] = 128;
  $208 = $i;
  $209 = $i;
  $210 = $mod;
  $211 = ((($210)) + 176|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = (($212) + (($209*764)|0)|0);
  $214 = ((($213)) + 756|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($215)) + 40|0);
  HEAP32[$216>>2] = $208;
  $217 = $c2spd;
  $218 = ($217*8363)|0;
  $219 = (($218|0) / 8448)&-1;
  $c2spd = $219;
  $220 = $c2spd;
  $221 = $i;
  $222 = $mod;
  $223 = ((($222)) + 176|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + (($221*764)|0)|0);
  $226 = ((($225)) + 756|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = ((($227)) + 12|0);
  $229 = $i;
  $230 = $mod;
  $231 = ((($230)) + 176|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = (($232) + (($229*764)|0)|0);
  $234 = ((($233)) + 756|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = ((($235)) + 16|0);
  _c2spd_to_note($220,$228,$236);
  $237 = $i;
  $238 = (($237) + 1)|0;
  $i = $238;
 }
 if ((label|0) == 15) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $239 = (_pattern_init($85)|0);
 $240 = ($239|0)<(0);
 if ($240) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = $mod;
  $243 = ((($242)) + 128|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($241|0)<($244|0);
  if (!($245)) {
   break;
  }
  $246 = $mod;
  $247 = $i;
  $248 = (_pattern_tracks_alloc($246,$247,64)|0);
  $249 = ($248|0)<(0);
  if ($249) {
   label = 33;
   break;
  }
  $j = 0;
  while(1) {
   $250 = $j;
   $251 = $i;
   $252 = $mod;
   $253 = ((($252)) + 168|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($254) + ($251<<2)|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = HEAP32[$256>>2]|0;
   $258 = ($250|0)<($257|0);
   if (!($258)) {
    break;
   }
   $k = 0;
   while(1) {
    $259 = $k;
    $260 = $mod;
    $261 = ((($260)) + 136|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)<($262|0);
    $264 = $j;
    if (!($263)) {
     break;
    }
    $265 = $k;
    $266 = $i;
    $267 = $1;
    $268 = ((($267)) + 168|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + ($266<<2)|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ((($271)) + 4|0);
    $273 = (($272) + ($265<<2)|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $1;
    $276 = ((($275)) + 172|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = (($277) + ($274<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ((($279)) + 4|0);
    $281 = (($280) + ($264<<3)|0);
    $event = $281;
    $282 = $2;
    $283 = (_hio_read32l($282)|0);
    $x3 = $283;
    $284 = $x3;
    $285 = $284 & 63;
    $note = $285;
    $286 = $x3;
    $287 = $286 & 8128;
    $288 = $287 >>> 6;
    $ins = $288;
    $289 = $x3;
    $290 = $289 & 1040384;
    $291 = $290 >>> 13;
    $vol = $291;
    $292 = $x3;
    $293 = $292 & 15728640;
    $294 = $293 >>> 20;
    $fxt = $294;
    $295 = $x3;
    $296 = $295 & -16777216;
    $297 = $296 >>> 24;
    $fxp = $297;
    $298 = $note;
    $299 = ($298|0)!=(63);
    if ($299) {
     $300 = $note;
     $301 = (36 + ($300))|0;
     $302 = $301&255;
     $303 = $event;
     HEAP8[$303>>0] = $302;
    }
    $304 = $ins;
    $305 = ($304|0)!=(127);
    if ($305) {
     $306 = $ins;
     $307 = (1 + ($306))|0;
     $308 = $307&255;
     $309 = $event;
     $310 = ((($309)) + 1|0);
     HEAP8[$310>>0] = $308;
    }
    $311 = $vol;
    $312 = ($311|0)!=(127);
    if ($312) {
     $313 = $vol;
     $314 = $313&255;
     $315 = $event;
     $316 = ((($315)) + 2|0);
     HEAP8[$316>>0] = $314;
    }
    $317 = $fxt;
    $318 = ($317|0)!=(15);
    if ($318) {
     $319 = $fxt;
     $320 = (6312 + ($319)|0);
     $321 = HEAP8[$320>>0]|0;
     $322 = $event;
     $323 = ((($322)) + 3|0);
     HEAP8[$323>>0] = $321;
     $324 = $fxp;
     $325 = $324&255;
     $326 = $event;
     $327 = ((($326)) + 4|0);
     HEAP8[$327>>0] = $325;
    }
    $328 = $k;
    $329 = (($328) + 1)|0;
    $k = $329;
   }
   $330 = (($264) + 1)|0;
   $j = $330;
  }
  $331 = $i;
  $332 = (($331) + 1)|0;
  $i = $332;
 }
 if ((label|0) == 33) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 $i = 0;
 while(1) {
  $333 = $i;
  $334 = $mod;
  $335 = ((($334)) + 140|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ($333|0)<($336|0);
  if (!($337)) {
   label = 55;
   break;
  }
  $338 = $i;
  $339 = $mod;
  $340 = ((($339)) + 180|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = (($341) + (($338*52)|0)|0);
  $343 = ((($342)) + 32|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = ($344|0)==(0);
  if (!($345)) {
   $346 = $1;
   $347 = $2;
   $348 = $i;
   $349 = $mod;
   $350 = ((($349)) + 180|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (($351) + (($348*52)|0)|0);
   $353 = (_load_sample($346,$347,2,$352,0)|0);
   $354 = ($353|0)<(0);
   if ($354) {
    label = 53;
    break;
   }
  }
  $355 = $i;
  $356 = (($355) + 1)|0;
  $i = $356;
 }
 if ((label|0) == 53) {
  $0 = -1;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 else if ((label|0) == 55) {
  $357 = $1;
  $358 = ((($357)) + 1284|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = $359 | 285213217;
  HEAP32[$358>>2] = $360;
  $361 = $1;
  $362 = ((($361)) + 1288|0);
  HEAP32[$362>>2] = 2;
  $0 = 0;
  $363 = $0;
  STACKTOP = sp;return ($363|0);
 }
 return (0)|0;
}
function _arch_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1297437528);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32l($7)|0);
   while(1) {
    $8 = $1;
    $9 = (_hio_eof($8)|0);
    $10 = ($9|0)!=(0);
    $11 = $10 ^ 1;
    $12 = $1;
    if (!($11)) {
     label = 10;
     break;
    }
    $13 = (_hio_read32b($12)|0);
    $id = $13;
    $14 = $1;
    $15 = (_hio_read32l($14)|0);
    $len = $15;
    $16 = $len;
    $17 = ($16>>>0)>(1048576);
    if ($17) {
     label = 6;
     break;
    }
    $18 = $id;
    $19 = ($18|0)==(1296974157);
    $20 = $1;
    if ($19) {
     label = 8;
     break;
    }
    $22 = $len;
    (_hio_seek($20,$22,1)|0);
   }
   if ((label|0) == 6) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 8) {
    $21 = $2;
    _read_title($20,$21,32);
    $0 = 0;
    break;
   }
   else if ((label|0) == 10) {
    $23 = $2;
    _read_title($12,$23,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _arch_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0;
 var $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = ((($data)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($data)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($data)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($data)) + 4|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$data>>2] = 0;
 $13 = (_iff_new()|0);
 $handle = $13;
 $14 = $handle;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $16 = $handle;
 (_iff_register($16,6368,255)|0);
 $17 = $handle;
 (_iff_register($17,6376,256)|0);
 $18 = $handle;
 (_iff_register($18,6384,257)|0);
 $19 = $handle;
 (_iff_register($19,6392,258)|0);
 $20 = $handle;
 (_iff_register($20,6400,259)|0);
 $21 = $handle;
 (_iff_register($21,6408,260)|0);
 $22 = $handle;
 (_iff_register($22,6416,261)|0);
 $23 = $handle;
 (_iff_register($23,6424,262)|0);
 $24 = $handle;
 (_iff_register($24,6432,263)|0);
 $25 = $handle;
 (_iff_register($25,7192,264)|0);
 $26 = $handle;
 (_iff_register($26,6440,265)|0);
 $27 = $handle;
 _iff_set_quirk($27,1);
 $28 = $handle;
 $29 = $1;
 $30 = $2;
 $31 = (_iff_load($28,$29,$30,$data)|0);
 $32 = ($31|0)<(0);
 $33 = $handle;
 _iff_release($33);
 if ($32) {
  $0 = -1;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = $mod;
  $36 = ((($35)) + 136|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = (($39) + 3)|0;
  $41 = (($40|0) / 2)&-1;
  $42 = (($41|0) % 2)&-1;
  $43 = ($42*255)|0;
  $44 = (($43) - 128)|0;
  $45 = $1;
  $46 = ((($45)) + 1296|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $49 = (($48|0) / 100)&-1;
  $50 = (128 + ($49))|0;
  $51 = $i;
  $52 = $mod;
  $53 = ((($52)) + 184|0);
  $54 = (($53) + (($51*12)|0)|0);
  HEAP32[$54>>2] = $50;
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $0 = 0;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _get_tinf($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $3;
 $data = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $x = $7;
 $8 = $x;
 $9 = $8 & 240;
 $10 = $9 >> 4;
 $11 = ($10*10)|0;
 $12 = $x;
 $13 = $12 & 15;
 $14 = (($11) + ($13))|0;
 $15 = $data;
 HEAP32[$15>>2] = $14;
 $16 = $2;
 $17 = (_hio_read8($16)|0);
 $18 = $17&255;
 $x = $18;
 $19 = $x;
 $20 = $19 & 240;
 $21 = $20 >> 4;
 $22 = ($21*1000)|0;
 $23 = $x;
 $24 = $23 & 15;
 $25 = ($24*100)|0;
 $26 = (($22) + ($25))|0;
 $27 = $data;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($26))|0;
 HEAP32[$27>>2] = $29;
 $30 = $2;
 $31 = (_hio_read8($30)|0);
 $32 = $31&255;
 $x = $32;
 $33 = $x;
 $34 = $33 & 240;
 $35 = $34 >> 4;
 $36 = ($35*10)|0;
 $37 = $x;
 $38 = $37 & 15;
 $39 = (($36) + ($38))|0;
 $40 = $data;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $2;
 $43 = (_hio_read8($42)|0);
 $44 = $43&255;
 $x = $44;
 $45 = $x;
 $46 = $45 & 240;
 $47 = $46 >> 4;
 $48 = ($47*10)|0;
 $49 = $x;
 $50 = $49 & 15;
 $51 = (($48) + ($50))|0;
 $52 = $data;
 $53 = ((($52)) + 8|0);
 HEAP32[$53>>2] = $51;
 STACKTOP = sp;return 0;
}
function _get_mvox($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read32l($6)|0);
 $8 = $mod;
 $9 = ((($8)) + 136|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 136|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(1);
 if (!($13)) {
  $14 = $mod;
  $15 = ((($14)) + 136|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)>(8);
  if (!($17)) {
   $0 = 0;
   $18 = $0;
   STACKTOP = sp;return ($18|0);
  }
 }
 $0 = -1;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _get_ster($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 28|0);
 $9 = $3;
 $10 = (_hio_read($8,1,8,$9)|0);
 $11 = ($10|0)!=(8);
 if ($11) {
  $0 = -1;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 136|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $data;
  $19 = ((($18)) + 28|0);
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = $i;
   $25 = $data;
   $26 = ((($25)) + 28|0);
   $27 = (($26) + ($24)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)<(8);
   if ($30) {
    $31 = $i;
    $32 = $data;
    $33 = ((($32)) + 28|0);
    $34 = (($33) + ($31)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36*42)|0;
    $38 = (($37) - 40)|0;
    $39 = $i;
    $40 = $mod;
    $41 = ((($40)) + 184|0);
    $42 = (($41) + (($39*12)|0)|0);
    HEAP32[$42>>2] = $38;
   }
  }
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $0 = 0;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _get_mnam($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = $3;
 $8 = (_hio_read($6,1,32,$7)|0);
 $9 = ($8|0)!=(32);
 if ($9) {
  $0 = -1;
 } else {
  $0 = 0;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _get_anam($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 STACKTOP = sp;return 0;
}
function _get_mlen($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read32l($6)|0);
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 156|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(255);
 if ($13) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _get_pnum($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read32l($6)|0);
 $8 = $mod;
 $9 = ((($8)) + 128|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(64);
 if ($13) {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _get_plen297($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $4;
 $data = $5;
 $6 = $data;
 $7 = ((($6)) + 36|0);
 $8 = $3;
 $9 = (_hio_read($7,1,64,$8)|0);
 $10 = ($9|0)!=(64);
 if ($10) {
  $0 = -1;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _get_sequ($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 952|0);
 $7 = $2;
 (_hio_read($6,1,128,$7)|0);
 $8 = $0;
 _set_type($8,6344,$vararg_buffer);
 STACKTOP = sp;return 0;
}
function _get_patt300($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $event = 0, $i = 0, $j = 0, $k = 0, $mod = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $data;
  $12 = ((($11)) + 12|0);
  HEAP32[$12>>2] = 1;
  $13 = $data;
  $14 = ((($13)) + 24|0);
  HEAP32[$14>>2] = 0;
  $15 = $mod;
  $16 = ((($15)) + 128|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $mod;
  $19 = ((($18)) + 136|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = $mod;
  $23 = ((($22)) + 132|0);
  HEAP32[$23>>2] = $21;
  $24 = $mod;
  $25 = (_pattern_init($24)|0);
  $26 = ($25|0)<(0);
  if ($26) {
   $0 = -1;
   $113 = $0;
   STACKTOP = sp;return ($113|0);
  }
 }
 $27 = $data;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $mod;
 $31 = ((($30)) + 128|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($29|0)>=($32|0);
 if (!($33)) {
  $34 = $data;
  $35 = ((($34)) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>=(64);
  if (!($37)) {
   $38 = $data;
   $39 = ((($38)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $i = $40;
   $41 = $mod;
   $42 = $i;
   $43 = $i;
   $44 = $data;
   $45 = ((($44)) + 36|0);
   $46 = (($45) + ($43)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (_pattern_tracks_alloc($41,$42,$48)|0);
   $50 = ($49|0)<(0);
   if ($50) {
    $0 = -1;
    $113 = $0;
    STACKTOP = sp;return ($113|0);
   }
   $j = 0;
   while(1) {
    $51 = $j;
    $52 = $i;
    $53 = $data;
    $54 = ((($53)) + 36|0);
    $55 = (($54) + ($52)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = ($51|0)<($57|0);
    if (!($58)) {
     break;
    }
    $k = 0;
    while(1) {
     $59 = $k;
     $60 = $mod;
     $61 = ((($60)) + 136|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($59|0)<($62|0);
     $64 = $j;
     if (!($63)) {
      break;
     }
     $65 = $k;
     $66 = $i;
     $67 = $1;
     $68 = ((($67)) + 168|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($66<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 4|0);
     $73 = (($72) + ($65<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $1;
     $76 = ((($75)) + 172|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($74<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($79)) + 4|0);
     $81 = (($80) + ($64<<3)|0);
     $event = $81;
     $82 = $3;
     $83 = (_hio_read8($82)|0);
     $84 = $event;
     $85 = ((($84)) + 4|0);
     HEAP8[$85>>0] = $83;
     $86 = $3;
     $87 = (_hio_read8($86)|0);
     $88 = $event;
     $89 = ((($88)) + 3|0);
     HEAP8[$89>>0] = $87;
     $90 = $3;
     $91 = (_hio_read8($90)|0);
     $92 = $event;
     $93 = ((($92)) + 1|0);
     HEAP8[$93>>0] = $91;
     $94 = $3;
     $95 = (_hio_read8($94)|0);
     $96 = $event;
     HEAP8[$96>>0] = $95;
     $97 = $event;
     $98 = HEAP8[$97>>0]|0;
     $99 = ($98<<24>>24)!=(0);
     if ($99) {
      $100 = $event;
      $101 = HEAP8[$100>>0]|0;
      $102 = $101&255;
      $103 = (($102) + 48)|0;
      $104 = $103&255;
      HEAP8[$100>>0] = $104;
     }
     $105 = $event;
     _fix_effect329($105);
     $106 = $k;
     $107 = (($106) + 1)|0;
     $k = $107;
    }
    $108 = (($64) + 1)|0;
    $j = $108;
   }
   $109 = $data;
   $110 = ((($109)) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 1)|0;
   HEAP32[$110>>2] = $112;
   $0 = 0;
   $113 = $0;
   STACKTOP = sp;return ($113|0);
  }
 }
 $0 = -1;
 $113 = $0;
 STACKTOP = sp;return ($113|0);
}
function _get_samp302($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $i = 0, $mod = 0, $name_len = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $mod;
   $12 = ((($11)) + 140|0);
   HEAP32[$12>>2] = 36;
   $13 = $mod;
   $14 = ((($13)) + 144|0);
   HEAP32[$14>>2] = 36;
   $15 = $mod;
   $16 = (_instrument_init($15)|0);
   $17 = ($16|0)<(0);
   if (!($17)) {
    $18 = $data;
    $19 = ((($18)) + 16|0);
    HEAP32[$19>>2] = 1;
    $20 = $data;
    $21 = ((($20)) + 20|0);
    HEAP32[$21>>2] = 0;
    break;
   }
   $0 = -1;
   $209 = $0;
   STACKTOP = sp;return ($209|0);
  }
 } while(0);
 $22 = $data;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>=(36);
 if ($25) {
  $0 = 0;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $26 = $data;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $i = $28;
 $29 = $i;
 $30 = $mod;
 $31 = ((($30)) + 176|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + (($29*764)|0)|0);
 $34 = ((($33)) + 36|0);
 HEAP32[$34>>2] = 1;
 $35 = $mod;
 $36 = $i;
 $37 = (_subinstrument_alloc($35,$36,1)|0);
 $38 = ($37|0)<(0);
 if ($38) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $39 = $3;
 $40 = (_hio_read32b($39)|0);
 $41 = ($40|0)!=(1397637453);
 if ($41) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $42 = $3;
 $43 = (_hio_read32l($42)|0);
 $name_len = $43;
 $44 = $name_len;
 $45 = ($44|0)<(0);
 $46 = $name_len;
 $47 = ($46|0)>(32);
 $or$cond = $45 | $47;
 if ($or$cond) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $48 = $i;
 $49 = $mod;
 $50 = ((($49)) + 176|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + (($48*764)|0)|0);
 $53 = $name_len;
 $54 = $3;
 (_hio_read($52,1,$53,$54)|0);
 $55 = $3;
 $56 = (_hio_read32b($55)|0);
 $57 = ($56|0)!=(1398165324);
 if ($57) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $58 = $3;
 (_hio_read32l($58)|0);
 $59 = $3;
 $60 = (_hio_read32l($59)|0);
 $61 = $60 & 255;
 $62 = $i;
 $63 = $mod;
 $64 = ((($63)) + 176|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + (($62*764)|0)|0);
 $67 = ((($66)) + 756|0);
 $68 = HEAP32[$67>>2]|0;
 HEAP32[$68>>2] = $61;
 $69 = $3;
 $70 = (_hio_read32b($69)|0);
 $71 = ($70|0)!=(1397507406);
 if ($71) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $72 = $3;
 (_hio_read32l($72)|0);
 $73 = $3;
 $74 = (_hio_read32l($73)|0);
 $75 = $i;
 $76 = $mod;
 $77 = ((($76)) + 180|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + (($75*52)|0)|0);
 $80 = ((($79)) + 32|0);
 HEAP32[$80>>2] = $74;
 $81 = $3;
 $82 = (_hio_read32b($81)|0);
 $83 = ($82|0)!=(1380927059);
 if ($83) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $84 = $3;
 (_hio_read32l($84)|0);
 $85 = $3;
 $86 = (_hio_read32l($85)|0);
 $87 = $i;
 $88 = $mod;
 $89 = ((($88)) + 180|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + (($87*52)|0)|0);
 $92 = ((($91)) + 36|0);
 HEAP32[$92>>2] = $86;
 $93 = $3;
 $94 = (_hio_read32b($93)|0);
 $95 = ($94|0)!=(1380730190);
 if ($95) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $96 = $3;
 (_hio_read32l($96)|0);
 $97 = $3;
 $98 = (_hio_read32l($97)|0);
 $99 = $i;
 $100 = $mod;
 $101 = ((($100)) + 180|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + (($99*52)|0)|0);
 $104 = ((($103)) + 40|0);
 HEAP32[$104>>2] = $98;
 $105 = $3;
 $106 = (_hio_read32b($105)|0);
 $107 = ($106|0)!=(1396982100);
 if ($107) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 $108 = $3;
 (_hio_read32l($108)|0);
 $109 = $3;
 (_hio_read32l($109)|0);
 $110 = $i;
 $111 = $i;
 $112 = $mod;
 $113 = ((($112)) + 176|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($114) + (($111*764)|0)|0);
 $116 = ((($115)) + 756|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($117)) + 40|0);
 HEAP32[$118>>2] = $110;
 $119 = $i;
 $120 = $mod;
 $121 = ((($120)) + 176|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (($122) + (($119*764)|0)|0);
 $124 = ((($123)) + 756|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ((($125)) + 8|0);
 HEAP32[$126>>2] = 128;
 $127 = $1;
 $128 = ((($127)) + 1280|0);
 HEAP32[$128>>2] = 88;
 $129 = $1;
 $130 = ((($129)) + 1268|0);
 HEAP32[$130>>2] = 255;
 $131 = $i;
 $132 = $mod;
 $133 = ((($132)) + 180|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (($134) + (($131*52)|0)|0);
 $136 = ((($135)) + 40|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)>(2);
 $139 = $i;
 $140 = $mod;
 $141 = ((($140)) + 180|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + (($139*52)|0)|0);
 if ($138) {
  $144 = ((($143)) + 44|0);
  HEAP32[$144>>2] = 2;
  $145 = $i;
  $146 = $mod;
  $147 = ((($146)) + 180|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + (($145*52)|0)|0);
  $150 = ((($149)) + 36|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $i;
  $153 = $mod;
  $154 = ((($153)) + 180|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($152*52)|0)|0);
  $157 = ((($156)) + 40|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($151) + ($158))|0;
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 180|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*52)|0)|0);
  $165 = ((($164)) + 40|0);
  HEAP32[$165>>2] = $159;
 } else {
  $166 = ((($143)) + 40|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)==(2);
  if ($168) {
   $169 = $i;
   $170 = $mod;
   $171 = ((($170)) + 180|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + (($169*52)|0)|0);
   $174 = ((($173)) + 36|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)>(0);
   if ($176) {
    $177 = $i;
    $178 = $mod;
    $179 = ((($178)) + 180|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + (($177*52)|0)|0);
    $182 = ((($181)) + 44|0);
    HEAP32[$182>>2] = 2;
    $183 = $i;
    $184 = $mod;
    $185 = ((($184)) + 180|0);
    $186 = HEAP32[$185>>2]|0;
    $187 = (($186) + (($183*52)|0)|0);
    $188 = ((($187)) + 32|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $i;
    $191 = $mod;
    $192 = ((($191)) + 180|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + (($190*52)|0)|0);
    $195 = ((($194)) + 40|0);
    HEAP32[$195>>2] = $189;
   }
  }
 }
 $196 = $1;
 $197 = $3;
 $198 = $i;
 $199 = $mod;
 $200 = ((($199)) + 180|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = (($201) + (($198*52)|0)|0);
 $203 = (_load_sample($196,$197,128,$202,0)|0);
 $204 = ($203|0)<(0);
 if ($204) {
  $0 = -1;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 } else {
  $205 = $data;
  $206 = ((($205)) + 20|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + 1)|0;
  HEAP32[$206>>2] = $208;
  $0 = 0;
  $209 = $0;
  STACKTOP = sp;return ($209|0);
 }
 return (0)|0;
}
function _fix_effect329($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e;
 $1 = $0;
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 do {
  switch ($4|0) {
  case 3:  {
   $11 = $0;
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $9 = $0;
   $10 = ((($9)) + 3|0);
   HEAP8[$10>>0] = 2;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $7 = $0;
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $61 = $0;
   $62 = ((($61)) + 3|0);
   HEAP8[$62>>0] = 11;
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $57 = $0;
   $58 = ((($57)) + 3|0);
   HEAP8[$58>>0] = -96;
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $5 = $0;
   $6 = ((($5)) + 3|0);
   HEAP8[$6>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $63 = $0;
   $64 = ((($63)) + 4|0);
   HEAP8[$64>>0] = 0;
   $65 = $0;
   $66 = ((($65)) + 3|0);
   HEAP8[$66>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $15 = $0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)<=(64);
   $20 = $0;
   $21 = ((($20)) + 3|0);
   if ($19) {
    HEAP8[$21>>0] = 12;
    $22 = $0;
    $23 = ((($22)) + 4|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = (6448 + ($25)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $0;
    $29 = ((($28)) + 4|0);
    HEAP8[$29>>0] = $27;
    STACKTOP = sp;return;
   } else {
    HEAP8[$21>>0] = 0;
    $30 = $0;
    $31 = ((($30)) + 4|0);
    HEAP8[$31>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 25: case 14:  {
   $32 = $0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)>(0);
   if ($36) {
    $37 = $0;
    $38 = ((($37)) + 4|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = ($40|0)<(8);
    if ($41) {
     $42 = $0;
     $43 = ((($42)) + 3|0);
     HEAP8[$43>>0] = 8;
     $44 = $0;
     $45 = ((($44)) + 4|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = ($47*42)|0;
     $49 = (($48) - 40)|0;
     $50 = $49&255;
     $51 = $0;
     $52 = ((($51)) + 4|0);
     HEAP8[$52>>0] = $50;
     STACKTOP = sp;return;
    }
   }
   $53 = $0;
   $54 = ((($53)) + 4|0);
   HEAP8[$54>>0] = 0;
   $55 = $0;
   $56 = ((($55)) + 3|0);
   HEAP8[$56>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $13 = $0;
   $14 = ((($13)) + 3|0);
   HEAP8[$14>>0] = 13;
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $67 = $0;
   $68 = ((($67)) + 3|0);
   HEAP8[$68>>0] = 15;
   STACKTOP = sp;return;
   break;
  }
  case 17:  {
   $59 = $0;
   $60 = ((($59)) + 3|0);
   HEAP8[$60>>0] = -95;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $69 = $0;
   $70 = ((($69)) + 3|0);
   HEAP8[$70>>0] = 12;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $71 = $0;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = 0;
   $73 = $0;
   $74 = ((($73)) + 3|0);
   HEAP8[$74>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _sym_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $b = 0, $i = 0, $or$cond = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $a = $8;
 $9 = $1;
 $10 = (_hio_read32b($9)|0);
 $b = $10;
 $11 = $a;
 $12 = ($11|0)!=(33624851);
 $13 = $b;
 $14 = ($13|0)!=(336724235);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $15 = $1;
 $16 = (_hio_read8($15)|0);
 $17 = $16&255;
 $ver = $17;
 $18 = $ver;
 $19 = ($18|0)>(1);
 if ($19) {
  $0 = -1;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $20 = $1;
 (_hio_read8($20)|0);
 $21 = $1;
 (_hio_read16l($21)|0);
 $22 = $1;
 (_hio_read16l($22)|0);
 $23 = $1;
 (_hio_read24l($23)|0);
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(63);
  $26 = $1;
  if (!($25)) {
   break;
  }
  $27 = (_hio_read8($26)|0);
  $28 = $27&255;
  $29 = $28 ^ -1;
  $30 = $29 & 128;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $1;
   (_hio_read24l($32)|0);
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $35 = $2;
 $36 = $1;
 $37 = (_hio_read8($36)|0);
 $38 = $37&255;
 _read_title($26,$35,$38);
 $0 = 0;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _sym_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $allowed_effects = 0, $b = 0, $b3 = 0, $buf = 0, $buf2 = 0, $event = 0, $i = 0, $idx = 0, $infolen = 0, $j = 0;
 var $looplen = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $parm = 0, $ret = 0, $size = 0, $sn = 0, $t = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $x = 0, $x1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $sn = sp + 64|0;
 $allowed_effects = sp + 488|0;
 $buf2 = sp + 360|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_seek($7,8,1)|0);
 $8 = $2;
 (_hio_read8($8)|0);
 $9 = $1;
 _set_type($9,6536,$vararg_buffer);
 $10 = $2;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $13 = $mod;
 $14 = ((($13)) + 136|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = (_hio_read16l($15)|0);
 $17 = $16&65535;
 $18 = $mod;
 $19 = ((($18)) + 128|0);
 HEAP32[$19>>2] = $17;
 $20 = $mod;
 $21 = ((($20)) + 156|0);
 HEAP32[$21>>2] = $17;
 $22 = $mod;
 $23 = ((($22)) + 136|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(8);
 if (!($25)) {
  $26 = $mod;
  $27 = ((($26)) + 128|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)>(256);
  if (!($29)) {
   $30 = $2;
   $31 = (_hio_read16l($30)|0);
   $32 = $31&65535;
   $33 = $mod;
   $34 = ((($33)) + 132|0);
   HEAP32[$34>>2] = $32;
   $35 = $2;
   $36 = (_hio_read24l($35)|0);
   $infolen = $36;
   $37 = $mod;
   $38 = ((($37)) + 144|0);
   HEAP32[$38>>2] = 63;
   $39 = $mod;
   $40 = ((($39)) + 140|0);
   HEAP32[$40>>2] = 63;
   $41 = $mod;
   $42 = (_instrument_init($41)|0);
   $43 = ($42|0)<(0);
   if ($43) {
    $0 = -1;
    $528 = $0;
    STACKTOP = sp;return ($528|0);
   }
   $i = 0;
   while(1) {
    $44 = $i;
    $45 = $mod;
    $46 = ((($45)) + 140|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($44|0)<($47|0);
    if (!($48)) {
     label = 14;
     break;
    }
    $49 = $mod;
    $50 = $i;
    $51 = (_subinstrument_alloc($49,$50,1)|0);
    $52 = ($51|0)<(0);
    if ($52) {
     label = 9;
     break;
    }
    $53 = $2;
    $54 = (_hio_read8($53)|0);
    $55 = $54&255;
    $56 = $i;
    $57 = (($sn) + ($56<<2)|0);
    HEAP32[$57>>2] = $55;
    $58 = $i;
    $59 = (($sn) + ($58<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60 ^ -1;
    $62 = $61 & 128;
    $63 = ($62|0)!=(0);
    if ($63) {
     $64 = $2;
     $65 = (_hio_read24l($64)|0);
     $66 = $65 << 1;
     $67 = $i;
     $68 = $mod;
     $69 = ((($68)) + 180|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + (($67*52)|0)|0);
     $72 = ((($71)) + 32|0);
     HEAP32[$72>>2] = $66;
     $73 = $i;
     $74 = $mod;
     $75 = ((($74)) + 176|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + (($73*764)|0)|0);
     $78 = ((($77)) + 36|0);
     HEAP32[$78>>2] = 1;
     $79 = $i;
     $80 = $mod;
     $81 = ((($80)) + 180|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($82) + (($79*52)|0)|0);
     $84 = ((($83)) + 32|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)>(524288);
     if ($86) {
      label = 12;
      break;
     }
    }
    $87 = $i;
    $88 = (($87) + 1)|0;
    $i = $88;
   }
   if ((label|0) == 9) {
    $0 = -1;
    $528 = $0;
    STACKTOP = sp;return ($528|0);
   }
   else if ((label|0) == 12) {
    $0 = -1;
    $528 = $0;
    STACKTOP = sp;return ($528|0);
   }
   else if ((label|0) == 14) {
    $89 = $2;
    $90 = (_hio_read8($89)|0);
    $91 = $90&255;
    $a = $91;
    $92 = $a;
    $93 = ($92>>>0)>(32);
    $94 = $mod;
    if ($93) {
     $95 = $2;
     (_hio_read($94,1,32,$95)|0);
     $96 = $2;
     $97 = $a;
     $98 = (($97) - 32)|0;
     (_hio_seek($96,$98,0)|0);
    } else {
     $99 = $a;
     $100 = $2;
     (_hio_read($94,1,$99,$100)|0);
    }
    $101 = $2;
    (_hio_read($allowed_effects,1,8,$101)|0);
    $102 = $mod;
    $103 = ((($102)) + 132|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 1)|0;
    HEAP32[$103>>2] = $105;
    $106 = $mod;
    $107 = (_pattern_init($106)|0);
    $108 = ($107|0)<(0);
    if ($108) {
     $0 = -1;
     $528 = $0;
     STACKTOP = sp;return ($528|0);
    }
    $109 = $2;
    $110 = (_hio_read8($109)|0);
    $111 = $110&255;
    $a = $111;
    $112 = $a;
    $113 = ($112|0)!=(0);
    $114 = $a;
    $115 = ($114|0)!=(1);
    $or$cond = $113 & $115;
    if ($or$cond) {
     $0 = -1;
     $528 = $0;
     STACKTOP = sp;return ($528|0);
    }
    $116 = $mod;
    $117 = ((($116)) + 156|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $mod;
    $120 = ((($119)) + 136|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = Math_imul($118, $121)|0;
    $123 = $122<<1;
    $size = $123;
    $124 = $size;
    $125 = (_malloc($124)|0);
    $buf = $125;
    $126 = ($125|0)==(0|0);
    if ($126) {
     $0 = -1;
     $528 = $0;
     STACKTOP = sp;return ($528|0);
    }
    $127 = $a;
    $128 = ($127|0)!=(0);
    if ($128) {
     $129 = $2;
     $130 = ((($129)) + 8|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $buf;
     $133 = $size;
     $134 = $size;
     $135 = (_read_lzw_dynamic($131,$132,13,0,$133,$134,31)|0);
     $x = $135;
     $136 = $x;
     $137 = ($136|0)==(0|0);
     if ($137) {
      $138 = $buf;
      _free($138);
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
    } else {
     $139 = $buf;
     $140 = $size;
     $141 = $2;
     $142 = (_hio_read($139,1,$140,$141)|0);
     $143 = $size;
     $144 = ($142|0)!=($143|0);
     if ($144) {
      $145 = $buf;
      _free($145);
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
    }
    $i = 0;
    L43: while(1) {
     $146 = $i;
     $147 = $mod;
     $148 = ((($147)) + 156|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($146|0)<($149|0);
     if (!($150)) {
      label = 40;
      break;
     }
     $151 = $mod;
     $152 = $i;
     $153 = (_pattern_alloc($151,$152)|0);
     $154 = ($153|0)<(0);
     if ($154) {
      label = 31;
      break;
     }
     $156 = $i;
     $157 = $mod;
     $158 = ((($157)) + 168|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (($159) + ($156<<2)|0);
     $161 = HEAP32[$160>>2]|0;
     HEAP32[$161>>2] = 64;
     $j = 0;
     while(1) {
      $162 = $j;
      $163 = $mod;
      $164 = ((($163)) + 136|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($162|0)<($165|0);
      $167 = $i;
      if (!($166)) {
       break;
      }
      $168 = $mod;
      $169 = ((($168)) + 136|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = Math_imul($167, $170)|0;
      $172 = $j;
      $173 = (($171) + ($172))|0;
      $174 = $173<<1;
      $idx = $174;
      $175 = $idx;
      $176 = $buf;
      $177 = (($176) + ($175)|0);
      $178 = (_readptr16l($177)|0);
      $t = $178;
      $179 = $t;
      $180 = $mod;
      $181 = ((($180)) + 132|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = (($182) - 1)|0;
      $184 = ($179|0)>=($183|0);
      if ($184) {
       label = 35;
       break L43;
      }
      $186 = $t;
      $187 = ($186|0)==(4096);
      if ($187) {
       $188 = $mod;
       $189 = ((($188)) + 132|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = (($190) - 1)|0;
       $t = $191;
      }
      $192 = $t;
      $193 = $j;
      $194 = $i;
      $195 = $mod;
      $196 = ((($195)) + 168|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = (($197) + ($194<<2)|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ((($199)) + 4|0);
      $201 = (($200) + ($193<<2)|0);
      HEAP32[$201>>2] = $192;
      $202 = $j;
      $203 = (($202) + 1)|0;
      $j = $203;
     }
     $204 = $167&255;
     $205 = $i;
     $206 = $mod;
     $207 = ((($206)) + 952|0);
     $208 = (($207) + ($205)|0);
     HEAP8[$208>>0] = $204;
     $209 = $i;
     $210 = (($209) + 1)|0;
     $i = $210;
    }
    if ((label|0) == 31) {
     $155 = $buf;
     _free($155);
     $0 = -1;
     $528 = $0;
     STACKTOP = sp;return ($528|0);
    }
    else if ((label|0) == 35) {
     $185 = $buf;
     _free($185);
     $0 = -1;
     $528 = $0;
     STACKTOP = sp;return ($528|0);
    }
    else if ((label|0) == 40) {
     $211 = $buf;
     _free($211);
     $212 = $2;
     $213 = (_hio_read8($212)|0);
     $214 = $213&255;
     $a = $214;
     $215 = $a;
     $216 = ($215|0)!=(0);
     $217 = $a;
     $218 = ($217|0)!=(1);
     $or$cond3 = $216 & $218;
     if ($or$cond3) {
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
     $219 = $mod;
     $220 = ((($219)) + 132|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) - 1)|0;
     $223 = $222<<6;
     $224 = $223<<2;
     $size = $224;
     $225 = $size;
     $226 = (_malloc($225)|0);
     $buf = $226;
     $227 = ($226|0)==(0|0);
     if ($227) {
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
     $228 = $a;
     $229 = ($228|0)!=(0);
     if ($229) {
      $230 = $2;
      $231 = ((($230)) + 8|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $buf;
      $234 = $size;
      $235 = $size;
      $236 = (_read_lzw_dynamic($232,$233,13,0,$234,$235,31)|0);
      $x1 = $236;
      $237 = $x1;
      $238 = ($237|0)==(0|0);
      if ($238) {
       $239 = $buf;
       _free($239);
       $0 = -1;
       $528 = $0;
       STACKTOP = sp;return ($528|0);
      }
     } else {
      $240 = $buf;
      $241 = $size;
      $242 = $2;
      $243 = (_hio_read($240,1,$241,$242)|0);
      $244 = $size;
      $245 = ($243|0)!=($244|0);
      if ($245) {
       $246 = $buf;
       _free($246);
       $0 = -1;
       $528 = $0;
       STACKTOP = sp;return ($528|0);
      }
     }
     $i = 0;
     while(1) {
      $247 = $i;
      $248 = $mod;
      $249 = ((($248)) + 132|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = (($250) - 1)|0;
      $252 = ($247|0)<($251|0);
      if (!($252)) {
       break;
      }
      $253 = $mod;
      $254 = $i;
      $255 = (_track_alloc($253,$254,64)|0);
      $256 = ($255|0)<(0);
      if ($256) {
       label = 52;
       break;
      }
      $j = 0;
      while(1) {
       $258 = $j;
       $259 = $i;
       $260 = $mod;
       $261 = ((($260)) + 172|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = (($262) + ($259<<2)|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = HEAP32[$264>>2]|0;
       $266 = ($258|0)<($265|0);
       if (!($266)) {
        break;
       }
       $267 = $j;
       $268 = $i;
       $269 = $mod;
       $270 = ((($269)) + 172|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = (($271) + ($268<<2)|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = ((($273)) + 4|0);
       $275 = (($274) + ($267<<3)|0);
       $event = $275;
       $276 = $i;
       $277 = $276<<6;
       $278 = $j;
       $279 = (($277) + ($278))|0;
       $280 = $279<<2;
       $281 = $buf;
       $282 = (($281) + ($280)|0);
       $283 = (_readptr32l($282)|0);
       $b = $283;
       $284 = $b;
       $285 = $284 & 63;
       $286 = $285&255;
       $287 = $event;
       HEAP8[$287>>0] = $286;
       $288 = $event;
       $289 = HEAP8[$288>>0]|0;
       $290 = ($289<<24>>24)!=(0);
       if ($290) {
        $291 = $event;
        $292 = HEAP8[$291>>0]|0;
        $293 = $292&255;
        $294 = (($293) + 48)|0;
        $295 = $294&255;
        HEAP8[$291>>0] = $295;
       }
       $296 = $b;
       $297 = $296 & 8128;
       $298 = $297 >>> 6;
       $299 = $298&255;
       $300 = $event;
       $301 = ((($300)) + 1|0);
       HEAP8[$301>>0] = $299;
       $302 = $b;
       $303 = $302 & 1032192;
       $304 = $303 >>> 14;
       $305 = $304&255;
       $306 = $event;
       $307 = ((($306)) + 3|0);
       HEAP8[$307>>0] = $305;
       $308 = $b;
       $309 = $308 & -1048576;
       $310 = $309 >>> 20;
       $parm = $310;
       $311 = $event;
       $312 = ((($311)) + 3|0);
       $313 = HEAP8[$312>>0]|0;
       $314 = $313&255;
       $315 = $314 >> 3;
       $316 = (($allowed_effects) + ($315)|0);
       $317 = HEAP8[$316>>0]|0;
       $318 = $317&255;
       $319 = $event;
       $320 = ((($319)) + 3|0);
       $321 = HEAP8[$320>>0]|0;
       $322 = $321&255;
       $323 = $322 & 7;
       $324 = 1 << $323;
       $325 = $318 & $324;
       $326 = ($325|0)!=(0);
       $327 = $event;
       if ($326) {
        $328 = $parm;
        _fix_effect304($327,$328);
       } else {
        $329 = ((($327)) + 3|0);
        HEAP8[$329>>0] = 0;
       }
       $330 = $j;
       $331 = (($330) + 1)|0;
       $j = $331;
      }
      $332 = $i;
      $333 = (($332) + 1)|0;
      $i = $333;
     }
     if ((label|0) == 52) {
      $257 = $buf;
      _free($257);
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
     $334 = $buf;
     _free($334);
     $335 = $mod;
     $336 = $i;
     $337 = (_track_alloc($335,$336,64)|0);
     $338 = ($337|0)<(0);
     if ($338) {
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
     $i = 0;
     L100: while(1) {
      $339 = $i;
      $340 = $mod;
      $341 = ((($340)) + 140|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = ($339|0)<($342|0);
      if (!($343)) {
       break;
      }
      dest=$buf2; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $344 = $i;
      $345 = (($sn) + ($344<<2)|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = $346 & 127;
      $348 = $2;
      (_hio_read($buf2,1,$347,$348)|0);
      $349 = $mod;
      $350 = $i;
      (_instrument_name($349,$350,$buf2,32)|0);
      $351 = $i;
      $352 = (($sn) + ($351<<2)|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = $353 ^ -1;
      $355 = $354 & 128;
      $356 = ($355|0)!=(0);
      if ($356) {
       $357 = $2;
       $358 = (_hio_read24l($357)|0);
       $359 = $358 << 1;
       $360 = $i;
       $361 = $mod;
       $362 = ((($361)) + 180|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = (($363) + (($360*52)|0)|0);
       $365 = ((($364)) + 36|0);
       HEAP32[$365>>2] = $359;
       $366 = $2;
       $367 = (_hio_read24l($366)|0);
       $368 = $367 << 1;
       $looplen = $368;
       $369 = $looplen;
       $370 = ($369|0)>(2);
       if ($370) {
        $371 = $i;
        $372 = $mod;
        $373 = ((($372)) + 180|0);
        $374 = HEAP32[$373>>2]|0;
        $375 = (($374) + (($371*52)|0)|0);
        $376 = ((($375)) + 44|0);
        $377 = HEAP32[$376>>2]|0;
        $378 = $377 | 2;
        HEAP32[$376>>2] = $378;
       }
       $379 = $i;
       $380 = $mod;
       $381 = ((($380)) + 180|0);
       $382 = HEAP32[$381>>2]|0;
       $383 = (($382) + (($379*52)|0)|0);
       $384 = ((($383)) + 36|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = $looplen;
       $387 = (($385) + ($386))|0;
       $388 = $i;
       $389 = $mod;
       $390 = ((($389)) + 180|0);
       $391 = HEAP32[$390>>2]|0;
       $392 = (($391) + (($388*52)|0)|0);
       $393 = ((($392)) + 40|0);
       HEAP32[$393>>2] = $387;
       $394 = $2;
       $395 = (_hio_read8($394)|0);
       $396 = $395&255;
       $397 = $i;
       $398 = $mod;
       $399 = ((($398)) + 176|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = (($400) + (($397*764)|0)|0);
       $402 = ((($401)) + 756|0);
       $403 = HEAP32[$402>>2]|0;
       HEAP32[$403>>2] = $396;
       $404 = $i;
       $405 = $mod;
       $406 = ((($405)) + 176|0);
       $407 = HEAP32[$406>>2]|0;
       $408 = (($407) + (($404*764)|0)|0);
       $409 = ((($408)) + 756|0);
       $410 = HEAP32[$409>>2]|0;
       $411 = ((($410)) + 8|0);
       HEAP32[$411>>2] = 128;
       $412 = $2;
       $413 = (_hio_read8($412)|0);
       $414 = $413&255;
       $415 = $414 << 4;
       $416 = $415&255;
       $417 = $416 << 24 >> 24;
       $418 = $i;
       $419 = $mod;
       $420 = ((($419)) + 176|0);
       $421 = HEAP32[$420>>2]|0;
       $422 = (($421) + (($418*764)|0)|0);
       $423 = ((($422)) + 756|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = ((($424)) + 16|0);
       HEAP32[$425>>2] = $417;
       $426 = $i;
       $427 = $i;
       $428 = $mod;
       $429 = ((($428)) + 176|0);
       $430 = HEAP32[$429>>2]|0;
       $431 = (($430) + (($427*764)|0)|0);
       $432 = ((($431)) + 756|0);
       $433 = HEAP32[$432>>2]|0;
       $434 = ((($433)) + 40|0);
       HEAP32[$434>>2] = $426;
      }
      $435 = $i;
      $436 = (($sn) + ($435<<2)|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = $437 & 128;
      $439 = ($438|0)!=(0);
      do {
       if (!($439)) {
        $440 = $i;
        $441 = $mod;
        $442 = ((($441)) + 180|0);
        $443 = HEAP32[$442>>2]|0;
        $444 = (($443) + (($440*52)|0)|0);
        $445 = ((($444)) + 32|0);
        $446 = HEAP32[$445>>2]|0;
        $447 = ($446|0)==(0);
        if ($447) {
         break;
        }
        $448 = $2;
        $449 = (_hio_read8($448)|0);
        $450 = $449&255;
        $a = $450;
        $451 = $a;
        $452 = ($451|0)!=(0);
        $453 = $a;
        $454 = ($453|0)!=(1);
        $or$cond5 = $452 & $454;
        if ($or$cond5) {
         $455 = HEAP32[_stderr>>2]|0;
         (_fprintf(($455|0),(6560|0),($vararg_buffer6|0))|0);
        }
        $456 = $a;
        $457 = ($456|0)==(1);
        if ($457) {
         $458 = $i;
         $459 = $mod;
         $460 = ((($459)) + 180|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = (($461) + (($458*52)|0)|0);
         $463 = ((($462)) + 32|0);
         $464 = HEAP32[$463>>2]|0;
         $465 = (_malloc($464)|0);
         $b3 = $465;
         $466 = $2;
         $467 = ((($466)) + 8|0);
         $468 = HEAP32[$467>>2]|0;
         $469 = $b3;
         $470 = $i;
         $471 = $mod;
         $472 = ((($471)) + 180|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = (($473) + (($470*52)|0)|0);
         $475 = ((($474)) + 32|0);
         $476 = HEAP32[$475>>2]|0;
         $477 = $i;
         $478 = $mod;
         $479 = ((($478)) + 180|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = (($480) + (($477*52)|0)|0);
         $482 = ((($481)) + 32|0);
         $483 = HEAP32[$482>>2]|0;
         (_read_lzw_dynamic($468,$469,13,0,$476,$483,31)|0);
         $484 = $1;
         $485 = $i;
         $486 = $mod;
         $487 = ((($486)) + 180|0);
         $488 = HEAP32[$487>>2]|0;
         $489 = (($488) + (($485*52)|0)|0);
         $490 = $b3;
         $491 = (_load_sample($484,0,17,$489,$490)|0);
         $ret = $491;
         $492 = $b3;
         _free($492);
        } else {
         $493 = $1;
         $494 = $2;
         $495 = $i;
         $496 = $mod;
         $497 = ((($496)) + 180|0);
         $498 = HEAP32[$497>>2]|0;
         $499 = (($498) + (($495*52)|0)|0);
         $500 = (_load_sample($493,$494,128,$499,0)|0);
         $ret = $500;
        }
        $501 = $ret;
        $502 = ($501|0)<(0);
        if ($502) {
         label = 78;
         break L100;
        }
       }
      } while(0);
      $503 = $i;
      $504 = (($503) + 1)|0;
      $i = $504;
     }
     if ((label|0) == 78) {
      $0 = -1;
      $528 = $0;
      STACKTOP = sp;return ($528|0);
     }
     $i = 0;
     while(1) {
      $505 = $i;
      $506 = $mod;
      $507 = ((($506)) + 136|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ($505|0)<($508|0);
      if (!($509)) {
       break;
      }
      $510 = $i;
      $511 = (($510) + 3)|0;
      $512 = (($511|0) / 2)&-1;
      $513 = (($512|0) % 2)&-1;
      $514 = ($513*255)|0;
      $515 = (($514) - 128)|0;
      $516 = $1;
      $517 = ((($516)) + 1296|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = Math_imul($515, $518)|0;
      $520 = (($519|0) / 100)&-1;
      $521 = (128 + ($520))|0;
      $522 = $i;
      $523 = $mod;
      $524 = ((($523)) + 184|0);
      $525 = (($524) + (($522*12)|0)|0);
      HEAP32[$525>>2] = $521;
      $526 = $i;
      $527 = (($526) + 1)|0;
      $i = $527;
     }
     $0 = 0;
     $528 = $0;
     STACKTOP = sp;return ($528|0);
    }
   }
  }
 }
 $0 = -1;
 $528 = $0;
 STACKTOP = sp;return ($528|0);
}
function _readptr16l($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1|0);
 $0 = $2;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $0 = $6;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $b = $8;
 $9 = $b;
 $10 = $9 << 8;
 $11 = $a;
 $12 = $10 | $11;
 STACKTOP = sp;return ($12|0);
}
function _readptr32l($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = ((($1)) + 1|0);
 $0 = $2;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 1|0);
 $0 = $6;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $b = $8;
 $9 = $0;
 $10 = ((($9)) + 1|0);
 $0 = $10;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&255;
 $c = $12;
 $13 = $0;
 $14 = ((($13)) + 1|0);
 $0 = $14;
 $15 = HEAP8[$13>>0]|0;
 $16 = $15&255;
 $d = $16;
 $17 = $d;
 $18 = $17 << 24;
 $19 = $c;
 $20 = $19 << 16;
 $21 = $18 | $20;
 $22 = $b;
 $23 = $22 << 8;
 $24 = $21 | $23;
 $25 = $a;
 $26 = $24 | $25;
 STACKTOP = sp;return ($26|0);
}
function _fix_effect304($e,$parm) {
 $e = $e|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $pitch_effect = 0, $vol_effect = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e;
 $1 = $parm;
 $2 = $0;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 do {
  switch ($5|0) {
  case 22:  {
   $89 = $0;
   $90 = ((($89)) + 3|0);
   HEAP8[$90>>0] = 14;
   $91 = $1;
   $92 = $91 & 15;
   $93 = 96 | $92;
   $94 = $93&255;
   $95 = $0;
   $96 = ((($95)) + 4|0);
   HEAP8[$96>>0] = $94;
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $234 = $0;
   $235 = ((($234)) + 3|0);
   HEAP8[$235>>0] = 2;
   $236 = $1;
   $237 = $236 & 255;
   $238 = $237&255;
   $239 = $0;
   $240 = ((($239)) + 4|0);
   HEAP8[$240>>0] = $238;
   $241 = $1;
   $242 = $241 >> 8;
   $243 = ($242|0)!=(0);
   if (!($243)) {
    STACKTOP = sp;return;
   }
   $244 = $0;
   $245 = ((($244)) + 5|0);
   HEAP8[$245>>0] = -95;
   $246 = $1;
   $247 = $246 >> 8;
   $248 = $247&255;
   $249 = $0;
   $250 = ((($249)) + 6|0);
   HEAP8[$250>>0] = $248;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $81 = $0;
   $82 = ((($81)) + 3|0);
   HEAP8[$82>>0] = 14;
   $83 = $1;
   $84 = $83 & 15;
   $85 = 80 | $84;
   $86 = $85&255;
   $87 = $0;
   $88 = ((($87)) + 4|0);
   HEAP8[$88>>0] = $86;
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $73 = $0;
   $74 = ((($73)) + 3|0);
   HEAP8[$74>>0] = 14;
   $75 = $1;
   $76 = $75 & 15;
   $77 = 64 | $76;
   $78 = $77&255;
   $79 = $0;
   $80 = ((($79)) + 4|0);
   HEAP8[$80>>0] = $78;
   STACKTOP = sp;return;
   break;
  }
  case 6: case 5:  {
   $25 = $1;
   $26 = $25&255;
   $27 = $0;
   $28 = ((($27)) + 4|0);
   HEAP8[$28>>0] = $26;
   $29 = $1;
   $30 = ($29|0)!=(0);
   if ($30) {
    STACKTOP = sp;return;
   }
   $31 = $0;
   $32 = ((($31)) + 3|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($34) - 2)|0;
   $36 = $35&255;
   HEAP8[$32>>0] = $36;
   STACKTOP = sp;return;
   break;
  }
  case 47:  {
   $251 = $1;
   $252 = ($251|0)>=(256);
   $253 = $1;
   $254 = ($253|0)<=(2048);
   $or$cond = $252 & $254;
   if (!($or$cond)) {
    STACKTOP = sp;return;
   }
   $255 = $0;
   $256 = ((($255)) + 3|0);
   HEAP8[$256>>0] = 15;
   $257 = $1;
   $258 = (($257) + 4)|0;
   $259 = $258 >> 3;
   $260 = $259&255;
   $261 = $0;
   $262 = ((($261)) + 4|0);
   HEAP8[$262>>0] = $260;
   STACKTOP = sp;return;
   break;
  }
  case 30:  {
   $190 = $0;
   $191 = ((($190)) + 3|0);
   HEAP8[$191>>0] = 14;
   $192 = $1;
   $193 = $192 & 15;
   $194 = 224 | $193;
   $195 = $194&255;
   $196 = $0;
   $197 = ((($196)) + 4|0);
   HEAP8[$197>>0] = $195;
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $200 = $0;
   $201 = ((($200)) + 3|0);
   HEAP8[$201>>0] = 0;
   $202 = $1;
   $203 = $202 & 255;
   $204 = $203&255;
   $205 = $0;
   $206 = ((($205)) + 4|0);
   HEAP8[$206>>0] = $204;
   $207 = $1;
   $208 = $207 >> 8;
   $209 = ($208|0)!=(0);
   if (!($209)) {
    STACKTOP = sp;return;
   }
   $210 = $0;
   $211 = ((($210)) + 5|0);
   HEAP8[$211>>0] = -95;
   $212 = $1;
   $213 = $212 >> 8;
   $214 = $213&255;
   $215 = $0;
   $216 = ((($215)) + 6|0);
   HEAP8[$216>>0] = $214;
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $217 = $0;
   $218 = ((($217)) + 3|0);
   HEAP8[$218>>0] = 1;
   $219 = $1;
   $220 = $219 & 255;
   $221 = $220&255;
   $222 = $0;
   $223 = ((($222)) + 4|0);
   HEAP8[$223>>0] = $221;
   $224 = $1;
   $225 = $224 >> 8;
   $226 = ($225|0)!=(0);
   if (!($226)) {
    STACKTOP = sp;return;
   }
   $227 = $0;
   $228 = ((($227)) + 5|0);
   HEAP8[$228>>0] = -95;
   $229 = $1;
   $230 = $229 >> 8;
   $231 = $230&255;
   $232 = $0;
   $233 = ((($232)) + 6|0);
   HEAP8[$233>>0] = $231;
   STACKTOP = sp;return;
   break;
  }
  case 2: case 1: case 0:  {
   $6 = $1;
   $7 = $6 & 255;
   $8 = $7&255;
   $9 = $0;
   $10 = ((($9)) + 4|0);
   HEAP8[$10>>0] = $8;
   $11 = $1;
   $12 = $11 >> 8;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    STACKTOP = sp;return;
   }
   $14 = $0;
   $15 = ((($14)) + 5|0);
   HEAP8[$15>>0] = -96;
   $16 = $1;
   $17 = $16 >> 8;
   $18 = $17&255;
   $19 = $0;
   $20 = ((($19)) + 6|0);
   HEAP8[$20>>0] = $18;
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $65 = $0;
   $66 = ((($65)) + 3|0);
   HEAP8[$66>>0] = 14;
   $67 = $1;
   $68 = $67 & 15;
   $69 = 48 | $68;
   $70 = $69&255;
   $71 = $0;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = $70;
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $37 = $1;
   $38 = $37 >> 1;
   $39 = $38&255;
   $40 = $0;
   $41 = ((($40)) + 4|0);
   HEAP8[$41>>0] = $39;
   STACKTOP = sp;return;
   break;
  }
  case 28:  {
   $174 = $0;
   $175 = ((($174)) + 3|0);
   HEAP8[$175>>0] = 14;
   $176 = $1;
   $177 = $176 & 15;
   $178 = 192 | $177;
   $179 = $178&255;
   $180 = $0;
   $181 = ((($180)) + 4|0);
   HEAP8[$181>>0] = $179;
   STACKTOP = sp;return;
   break;
  }
  case 25:  {
   $105 = $1;
   $106 = ($105|0)<(16);
   $107 = $0;
   $108 = ((($107)) + 3|0);
   if ($106) {
    HEAP8[$108>>0] = 14;
    $109 = $1;
    $110 = $109 & 15;
    $111 = 144 | $110;
    $112 = $111&255;
    $113 = $0;
    $114 = ((($113)) + 4|0);
    HEAP8[$114>>0] = $112;
    STACKTOP = sp;return;
   } else {
    HEAP8[$108>>0] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 27: case 26: case 18: case 17:  {
   $115 = $0;
   $116 = ((($115)) + 3|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = ($118|0)==(17);
   if ($119) {
    $125 = 1;
   } else {
    $120 = $0;
    $121 = ((($120)) + 3|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = ($123|0)==(26);
    $125 = $124;
   }
   $126 = $125 ? 1 : 2;
   $127 = $126&255;
   $pitch_effect = $127;
   $128 = $0;
   $129 = ((($128)) + 3|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = ($131|0)==(17);
   if ($132) {
    $138 = 1;
   } else {
    $133 = $0;
    $134 = ((($133)) + 3|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = ($136|0)==(18);
    $138 = $137;
   }
   $139 = $138 ? 10 : 11;
   $140 = $139&255;
   $vol_effect = $140;
   $141 = $1;
   $142 = $141 & 255;
   $143 = ($142|0)!=(0);
   if ($143) {
    $144 = $1;
    $145 = $144 & 255;
    $146 = ($145|0)<(16);
    if ($146) {
     $147 = $0;
     $148 = ((($147)) + 3|0);
     HEAP8[$148>>0] = 14;
     $149 = $pitch_effect;
     $150 = $149&255;
     $151 = $150 << 4;
     $152 = $1;
     $153 = $152 & 15;
     $154 = $151 | $153;
     $155 = $154&255;
     $156 = $0;
     $157 = ((($156)) + 4|0);
     HEAP8[$157>>0] = $155;
    } else {
     label = 28;
    }
   } else {
    label = 28;
   }
   if ((label|0) == 28) {
    $158 = $0;
    $159 = ((($158)) + 3|0);
    HEAP8[$159>>0] = 0;
   }
   $160 = $1;
   $161 = $160 >> 8;
   $162 = ($161|0)!=(0);
   if (!($162)) {
    STACKTOP = sp;return;
   }
   $163 = $0;
   $164 = ((($163)) + 5|0);
   HEAP8[$164>>0] = 14;
   $165 = $vol_effect;
   $166 = $165&255;
   $167 = $166 << 4;
   $168 = $1;
   $169 = $168 >> 8;
   $170 = $167 | $169;
   $171 = $170&255;
   $172 = $0;
   $173 = ((($172)) + 6|0);
   HEAP8[$173>>0] = $171;
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   $198 = $0;
   $199 = ((($198)) + 3|0);
   HEAP8[$199>>0] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $97 = $0;
   $98 = ((($97)) + 3|0);
   HEAP8[$98>>0] = 14;
   $99 = $1;
   $100 = $99 & 15;
   $101 = 112 | $100;
   $102 = $101&255;
   $103 = $0;
   $104 = ((($103)) + 4|0);
   HEAP8[$104>>0] = $102;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $182 = $0;
   $183 = ((($182)) + 3|0);
   HEAP8[$183>>0] = 14;
   $184 = $1;
   $185 = $184 & 15;
   $186 = 208 | $185;
   $187 = $186&255;
   $188 = $0;
   $189 = ((($188)) + 4|0);
   HEAP8[$189>>0] = $187;
   STACKTOP = sp;return;
   break;
  }
  case 15: case 13: case 12: case 11:  {
   $61 = $1;
   $62 = $61&255;
   $63 = $0;
   $64 = ((($63)) + 4|0);
   HEAP8[$64>>0] = $62;
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $42 = $1;
   $43 = $42 & 255;
   $44 = ($43|0)!=(0);
   if ($44) {
    $45 = $1;
    $46 = $45 & 255;
    $47 = $46&255;
    $48 = $0;
    $49 = ((($48)) + 4|0);
    HEAP8[$49>>0] = $47;
   } else {
    $50 = $0;
    $51 = ((($50)) + 3|0);
    HEAP8[$51>>0] = 0;
   }
   $52 = $0;
   $53 = ((($52)) + 5|0);
   HEAP8[$53>>0] = 14;
   $54 = $1;
   $55 = $54 & 3840;
   $56 = $55 >> 8;
   $57 = 16 | $56;
   $58 = $57&255;
   $59 = $0;
   $60 = ((($59)) + 6|0);
   HEAP8[$60>>0] = $58;
   STACKTOP = sp;return;
   break;
  }
  case 7: case 4: case 3:  {
   $21 = $1;
   $22 = $21&255;
   $23 = $0;
   $24 = ((($23)) + 4|0);
   HEAP8[$24>>0] = $22;
   STACKTOP = sp;return;
   break;
  }
  default: {
   $263 = $0;
   $264 = ((($263)) + 3|0);
   HEAP8[$264>>0] = 0;
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _med2_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1296385026);
 if ($6) {
  $0 = -1;
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,0);
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _med2_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $event = 0, $found = 0, $i = 0, $ins_path = 0;
 var $j = 0, $k = 0, $lsiz = 0, $mod = 0, $name = 0, $or$cond = 0, $path = 0, $ret = 0, $s = 0, $sliding = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr4 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf = sp + 4688|0;
 $path = sp + 584|0;
 $ins_path = sp + 328|0;
 $name = sp + 72|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 $8 = (_hio_read32b($7)|0);
 $9 = ($8|0)!=(1296385026);
 if ($9) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $10 = $1;
 _set_type($10,6616,$vararg_buffer);
 $11 = $mod;
 $12 = ((($11)) + 144|0);
 HEAP32[$12>>2] = 32;
 $13 = $mod;
 $14 = ((($13)) + 140|0);
 HEAP32[$14>>2] = 32;
 $15 = $mod;
 $16 = (_instrument_init($15)|0);
 $17 = ($16|0)<(0);
 if ($17) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $18 = $2;
 (_hio_read($buf,1,40,$18)|0);
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = ($19|0)<(31);
  if (!($20)) {
   break;
  }
  $21 = $2;
  (_hio_read($buf,1,40,$21)|0);
  $22 = $mod;
  $23 = $i;
  (_instrument_name($22,$23,$buf,32)|0);
  $24 = $mod;
  $25 = $i;
  $26 = (_subinstrument_alloc($24,$25,1)|0);
  $27 = ($26|0)<(0);
  if ($27) {
   label = 8;
   break;
  }
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $30 = $2;
 (_hio_read8($30)|0);
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = ($31|0)<(31);
  $33 = $2;
  if (!($32)) {
   break;
  }
  $34 = (_hio_read8($33)|0);
  $35 = $34&255;
  $36 = $i;
  $37 = $mod;
  $38 = ((($37)) + 176|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($36*764)|0)|0);
  $41 = ((($40)) + 756|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$42>>2] = $35;
  $43 = $i;
  $44 = $mod;
  $45 = ((($44)) + 176|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + (($43*764)|0)|0);
  $48 = ((($47)) + 756|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 8|0);
  HEAP32[$50>>2] = 128;
  $51 = $i;
  $52 = $mod;
  $53 = ((($52)) + 176|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + (($51*764)|0)|0);
  $56 = ((($55)) + 756|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 16|0);
  HEAP32[$58>>2] = 0;
  $59 = $i;
  $60 = $i;
  $61 = $mod;
  $62 = ((($61)) + 176|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + (($60*764)|0)|0);
  $65 = ((($64)) + 756|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 40|0);
  HEAP32[$67>>2] = $59;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 (_hio_read16b($33)|0);
 $i = 0;
 while(1) {
  $70 = $i;
  $71 = ($70|0)<(31);
  $72 = $2;
  $73 = (_hio_read16b($72)|0);
  if (!($71)) {
   break;
  }
  $74 = $73&65535;
  $75 = $i;
  $76 = $mod;
  $77 = ((($76)) + 180|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + (($75*52)|0)|0);
  $80 = ((($79)) + 36|0);
  HEAP32[$80>>2] = $74;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $i = 0;
 while(1) {
  $83 = $i;
  $84 = ($83|0)<(31);
  if (!($84)) {
   break;
  }
  $85 = $2;
  $86 = (_hio_read16b($85)|0);
  $87 = $86&65535;
  $lsiz = $87;
  $88 = $i;
  $89 = $mod;
  $90 = ((($89)) + 180|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + (($88*52)|0)|0);
  $93 = ((($92)) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $lsiz;
  $96 = (($94) + ($95))|0;
  $97 = $i;
  $98 = $mod;
  $99 = ((($98)) + 180|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + (($97*52)|0)|0);
  $102 = ((($101)) + 40|0);
  HEAP32[$102>>2] = $96;
  $103 = $lsiz;
  $104 = ($103>>>0)>(1);
  $105 = $104 ? 2 : 0;
  $106 = $i;
  $107 = $mod;
  $108 = ((($107)) + 180|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + (($106*52)|0)|0);
  $111 = ((($110)) + 44|0);
  HEAP32[$111>>2] = $105;
  $112 = $i;
  $113 = (($112) + 1)|0;
  $i = $113;
 }
 $114 = $mod;
 $115 = ((($114)) + 136|0);
 HEAP32[$115>>2] = 4;
 $116 = $2;
 $117 = (_hio_read16b($116)|0);
 $118 = $117&65535;
 $119 = $mod;
 $120 = ((($119)) + 128|0);
 HEAP32[$120>>2] = $118;
 $121 = $mod;
 $122 = ((($121)) + 136|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $mod;
 $125 = ((($124)) + 128|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = Math_imul($123, $126)|0;
 $128 = $mod;
 $129 = ((($128)) + 132|0);
 HEAP32[$129>>2] = $127;
 $130 = $mod;
 $131 = ((($130)) + 952|0);
 $132 = $2;
 $133 = (_hio_read($131,1,100,$132)|0);
 $134 = ($133|0)!=(100);
 if ($134) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $135 = $2;
 $136 = (_hio_read16b($135)|0);
 $137 = $136&65535;
 $138 = $mod;
 $139 = ((($138)) + 156|0);
 HEAP32[$139>>2] = $137;
 $140 = $mod;
 $141 = ((($140)) + 128|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)>(256);
 if (!($143)) {
  $144 = $mod;
  $145 = ((($144)) + 156|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ($146|0)>(100);
  if (!($147)) {
   $148 = $2;
   $149 = (_hio_read16b($148)|0);
   $150 = $149&65535;
   $k = $150;
   $151 = $k;
   $152 = ($151|0)<(1);
   if ($152) {
    $0 = -1;
    $312 = $0;
    STACKTOP = sp;return ($312|0);
   }
   $153 = $k;
   $154 = (192 / ($153|0))&-1;
   $155 = $mod;
   $156 = ((($155)) + 148|0);
   HEAP32[$156>>2] = $154;
   $157 = $2;
   (_hio_read16b($157)|0);
   $158 = $2;
   $159 = (_hio_read16b($158)|0);
   $160 = $159&65535;
   $sliding = $160;
   $161 = $2;
   (_hio_read32b($161)|0);
   $162 = $2;
   (_hio_seek($162,16,1)|0);
   $163 = $sliding;
   $164 = ($163|0)==(6);
   if ($164) {
    $165 = $1;
    $166 = ((($165)) + 1284|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $167 | 192;
    HEAP32[$166>>2] = $168;
   }
   $169 = $mod;
   $170 = (_pattern_init($169)|0);
   $171 = ($170|0)<(0);
   if ($171) {
    $0 = -1;
    $312 = $0;
    STACKTOP = sp;return ($312|0);
   }
   $i = 0;
   while(1) {
    $172 = $i;
    $173 = $mod;
    $174 = ((($173)) + 128|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ($172|0)<($175|0);
    if (!($176)) {
     break;
    }
    $177 = $mod;
    $178 = $i;
    $179 = (_pattern_tracks_alloc($177,$178,64)|0);
    $180 = ($179|0)<(0);
    if ($180) {
     label = 33;
     break;
    }
    $181 = $2;
    (_hio_read32b($181)|0);
    $j = 0;
    while(1) {
     $182 = $j;
     $183 = ($182|0)<(64);
     if (!($183)) {
      break;
     }
     $k = 0;
     while(1) {
      $184 = $k;
      $185 = ($184|0)<(4);
      $186 = $j;
      if (!($185)) {
       break;
      }
      $187 = $k;
      $188 = $i;
      $189 = $1;
      $190 = ((($189)) + 168|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($191) + ($188<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ((($193)) + 4|0);
      $195 = (($194) + ($187<<2)|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $1;
      $198 = ((($197)) + 172|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = (($199) + ($196<<2)|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = ((($201)) + 4|0);
      $203 = (($202) + ($186<<3)|0);
      $event = $203;
      $204 = $2;
      $205 = (_hio_read16b($204)|0);
      $206 = $205&65535;
      $207 = (_period_to_note($206)|0);
      $208 = $207&255;
      $209 = $event;
      HEAP8[$209>>0] = $208;
      $210 = $2;
      $211 = (_hio_read8($210)|0);
      $x = $211;
      $212 = $x;
      $213 = $212&255;
      $214 = $213 >> 4;
      $215 = $214&255;
      $216 = $event;
      $217 = ((($216)) + 1|0);
      HEAP8[$217>>0] = $215;
      $218 = $x;
      $219 = $218&255;
      $220 = $219 & 15;
      $221 = $220&255;
      $222 = $event;
      $223 = ((($222)) + 3|0);
      HEAP8[$223>>0] = $221;
      $224 = $2;
      $225 = (_hio_read8($224)|0);
      $226 = $event;
      $227 = ((($226)) + 4|0);
      HEAP8[$227>>0] = $225;
      $228 = $event;
      $229 = ((($228)) + 3|0);
      $230 = HEAP8[$229>>0]|0;
      $231 = $230&255;
      if ((($231|0) == 15)) {
       $234 = $event;
       $235 = ((($234)) + 3|0);
       $236 = HEAP8[$235>>0]|0;
       $237 = $236&255;
       $238 = (192 / ($237|0))&-1;
       $239 = $238&255;
       $240 = $event;
       $241 = ((($240)) + 3|0);
       HEAP8[$241>>0] = $239;
      } else if ((($231|0) == 13) | (($231|0) == 14)) {
       $232 = $event;
       $233 = ((($232)) + 3|0);
       HEAP8[$233>>0] = 10;
      }
      $242 = $k;
      $243 = (($242) + 1)|0;
      $k = $243;
     }
     $244 = (($186) + 1)|0;
     $j = $244;
    }
    $245 = $i;
    $246 = (($245) + 1)|0;
    $i = $246;
   }
   if ((label|0) == 33) {
    $0 = -1;
    $312 = $0;
    STACKTOP = sp;return ($312|0);
   }
   $i = 0;
   while(1) {
    $247 = $i;
    $248 = ($247|0)<(31);
    if (!($248)) {
     label = 57;
     break;
    }
    $s = 0;
    $249 = $1;
    _get_instrument_path($249,$ins_path,256);
    $250 = $i;
    $251 = $mod;
    $252 = ((($251)) + 176|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + (($250*764)|0)|0);
    $255 = (_check_filename_case($ins_path,$254,$name,256)|0);
    $found = $255;
    $256 = $found;
    $257 = ($256|0)!=(0);
    if ($257) {
     HEAP32[$vararg_buffer2>>2] = $ins_path;
     $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $name;
     (_snprintf($path,4096,6632,$vararg_buffer2)|0);
     $258 = (_hio_open($path,7360)|0);
     $s = $258;
     $259 = ($258|0)!=(0|0);
     if ($259) {
      $260 = $s;
      $261 = (_hio_size($260)|0);
      $262 = $i;
      $263 = $mod;
      $264 = ((($263)) + 180|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = (($265) + (($262*52)|0)|0);
      $267 = ((($266)) + 32|0);
      HEAP32[$267>>2] = $261;
     }
    }
    $268 = $i;
    $269 = $mod;
    $270 = ((($269)) + 180|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = (($271) + (($268*52)|0)|0);
    $273 = ((($272)) + 32|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)>(0);
    if ($275) {
     $276 = $i;
     $277 = $mod;
     $278 = ((($277)) + 176|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + (($276*764)|0)|0);
     $281 = ((($280)) + 36|0);
     HEAP32[$281>>2] = 1;
    }
    $282 = $i;
    $283 = $mod;
    $284 = ((($283)) + 176|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($285) + (($282*764)|0)|0);
    $287 = (_strlen(($286|0))|0);
    $288 = ($287|0)!=(0);
    if ($288) {
     $$old = $found;
     $$old1 = ($$old|0)!=(0);
     if ($$old1) {
      label = 54;
     }
    } else {
     $289 = $i;
     $290 = $mod;
     $291 = ((($290)) + 180|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = (($292) + (($289*52)|0)|0);
     $294 = ((($293)) + 32|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ($295|0)!=(0);
     $297 = $found;
     $298 = ($297|0)!=(0);
     $or$cond = $296 & $298;
     if ($or$cond) {
      label = 54;
     }
    }
    if ((label|0) == 54) {
     label = 0;
     $299 = $1;
     $300 = $s;
     $301 = $i;
     $302 = $mod;
     $303 = ((($302)) + 180|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = (($304) + (($301*52)|0)|0);
     $306 = (_load_sample($299,$300,0,$305,0)|0);
     $ret = $306;
     $307 = $s;
     (_hio_close($307)|0);
     $308 = $ret;
     $309 = ($308|0)<(0);
     if ($309) {
      label = 55;
      break;
     }
    }
    $310 = $i;
    $311 = (($310) + 1)|0;
    $i = $311;
   }
   if ((label|0) == 55) {
    $0 = -1;
    $312 = $0;
    STACKTOP = sp;return ($312|0);
   }
   else if ((label|0) == 57) {
    $0 = 0;
    $312 = $0;
    STACKTOP = sp;return ($312|0);
   }
  }
 }
 $0 = -1;
 $312 = $0;
 STACKTOP = sp;return ($312|0);
}
function _med3_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1296385027);
 if ($6) {
  $0 = -1;
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,0);
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _med3_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0, $c = 0;
 var $conv = 0, $convsz = 0, $i = 0, $j = 0, $lsiz = 0, $mask = 0, $mod = 0, $sliding = 0, $tracks = 0, $transp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 56|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $1;
 _set_type($8,6656,$vararg_buffer);
 $9 = $mod;
 $10 = ((($9)) + 144|0);
 HEAP32[$10>>2] = 32;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 HEAP32[$12>>2] = 32;
 $13 = $mod;
 $14 = (_instrument_init($13)|0);
 $15 = ($14|0)<(0);
 if ($15) {
  $0 = -1;
  $416 = $0;
  STACKTOP = sp;return ($416|0);
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(32);
  if (!($17)) {
   break;
  }
  $j = 0;
  while(1) {
   $18 = $j;
   $19 = ($18|0)<(40);
   if (!($19)) {
    break;
   }
   $20 = $2;
   $21 = (_hio_read8($20)|0);
   $c = $21;
   $22 = $c;
   $23 = $j;
   $24 = (($buf) + ($23)|0);
   HEAP8[$24>>0] = $22;
   $25 = $c;
   $26 = $25&255;
   $27 = ($26|0)==(0);
   if ($27) {
    break;
   }
   $28 = $j;
   $29 = (($28) + 1)|0;
   $j = $29;
  }
  $30 = $mod;
  $31 = $i;
  (_instrument_name($30,$31,$buf,32)|0);
  $32 = $mod;
  $33 = $i;
  $34 = (_subinstrument_alloc($32,$33,1)|0);
  $35 = ($34|0)<(0);
  if ($35) {
   label = 10;
   break;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $416 = $0;
  STACKTOP = sp;return ($416|0);
 }
 $38 = $2;
 $39 = (_hio_read32b($38)|0);
 $mask = $39;
 $i = 0;
 while(1) {
  $40 = $i;
  $41 = ($40|0)<(32);
  if (!($41)) {
   break;
  }
  $42 = $mask;
  $43 = $42 & -2147483648;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $2;
   $46 = (_hio_read8($45)|0);
   $47 = $46&255;
   $55 = $47;
  } else {
   $55 = 0;
  }
  $48 = $i;
  $49 = $mod;
  $50 = ((($49)) + 176|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($48*764)|0)|0);
  $53 = ((($52)) + 756|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$54>>2] = $55;
  $56 = $i;
  $57 = $mod;
  $58 = ((($57)) + 176|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + (($56*764)|0)|0);
  $61 = ((($60)) + 756|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 8|0);
  HEAP32[$63>>2] = 128;
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 176|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + (($64*764)|0)|0);
  $69 = ((($68)) + 756|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($70)) + 16|0);
  HEAP32[$71>>2] = 0;
  $72 = $i;
  $73 = $i;
  $74 = $mod;
  $75 = ((($74)) + 176|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + (($73*764)|0)|0);
  $78 = ((($77)) + 756|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 40|0);
  HEAP32[$80>>2] = $72;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
  $83 = $mask;
  $84 = $83 << 1;
  $mask = $84;
 }
 $85 = $2;
 $86 = (_hio_read32b($85)|0);
 $mask = $86;
 $i = 0;
 while(1) {
  $87 = $i;
  $88 = ($87|0)<(32);
  if (!($88)) {
   break;
  }
  $89 = $mask;
  $90 = $89 & -2147483648;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $2;
   $93 = (_hio_read16b($92)|0);
   $94 = $93&65535;
   $101 = $94;
  } else {
   $101 = 0;
  }
  $95 = $i;
  $96 = $mod;
  $97 = ((($96)) + 180|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($95*52)|0)|0);
  $100 = ((($99)) + 36|0);
  HEAP32[$100>>2] = $101;
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
  $104 = $mask;
  $105 = $104 << 1;
  $mask = $105;
 }
 $106 = $2;
 $107 = (_hio_read32b($106)|0);
 $mask = $107;
 $i = 0;
 while(1) {
  $108 = $i;
  $109 = ($108|0)<(32);
  if (!($109)) {
   break;
  }
  $110 = $mask;
  $111 = $110 & -2147483648;
  $112 = ($111|0)!=(0);
  if ($112) {
   $113 = $2;
   $114 = (_hio_read16b($113)|0);
   $115 = $114&65535;
   $116 = $115;
  } else {
   $116 = 0;
  }
  $lsiz = $116;
  $117 = $i;
  $118 = $mod;
  $119 = ((($118)) + 180|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + (($117*52)|0)|0);
  $122 = ((($121)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $lsiz;
  $125 = (($123) + ($124))|0;
  $126 = $i;
  $127 = $mod;
  $128 = ((($127)) + 180|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + (($126*52)|0)|0);
  $131 = ((($130)) + 32|0);
  HEAP32[$131>>2] = $125;
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 180|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + (($132*52)|0)|0);
  $137 = ((($136)) + 36|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $lsiz;
  $140 = (($138) + ($139))|0;
  $141 = $i;
  $142 = $mod;
  $143 = ((($142)) + 180|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + (($141*52)|0)|0);
  $146 = ((($145)) + 40|0);
  HEAP32[$146>>2] = $140;
  $147 = $lsiz;
  $148 = ($147>>>0)>(1);
  $149 = $148 ? 2 : 0;
  $150 = $i;
  $151 = $mod;
  $152 = ((($151)) + 180|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + (($150*52)|0)|0);
  $155 = ((($154)) + 44|0);
  HEAP32[$155>>2] = $149;
  $156 = $i;
  $157 = (($156) + 1)|0;
  $i = $157;
  $158 = $mask;
  $159 = $158 << 1;
  $mask = $159;
 }
 $160 = $mod;
 $161 = ((($160)) + 136|0);
 HEAP32[$161>>2] = 4;
 $162 = $2;
 $163 = (_hio_read16b($162)|0);
 $164 = $163&65535;
 $165 = $mod;
 $166 = ((($165)) + 128|0);
 HEAP32[$166>>2] = $164;
 $167 = $mod;
 $168 = ((($167)) + 136|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $mod;
 $171 = ((($170)) + 128|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = Math_imul($169, $172)|0;
 $174 = $mod;
 $175 = ((($174)) + 132|0);
 HEAP32[$175>>2] = $173;
 $176 = $2;
 $177 = (_hio_read16b($176)|0);
 $178 = $177&65535;
 $179 = $mod;
 $180 = ((($179)) + 156|0);
 HEAP32[$180>>2] = $178;
 $181 = $mod;
 $182 = ((($181)) + 156|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)>(256);
 if (!($184)) {
  $185 = $mod;
  $186 = ((($185)) + 128|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($187|0)>(256);
  if (!($188)) {
   $189 = $mod;
   $190 = ((($189)) + 952|0);
   $191 = $mod;
   $192 = ((($191)) + 156|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $2;
   (_hio_read($190,1,$193,$194)|0);
   $195 = $2;
   $196 = (_hio_read16b($195)|0);
   $197 = $196&65535;
   $198 = $mod;
   $199 = ((($198)) + 148|0);
   HEAP32[$199>>2] = $197;
   $200 = $mod;
   $201 = ((($200)) + 148|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($202|0)>(10);
   if ($203) {
    $204 = $mod;
    $205 = ((($204)) + 148|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($206*125)|0;
    $208 = (($207|0) / 33)&-1;
    $209 = $mod;
    $210 = ((($209)) + 152|0);
    HEAP32[$210>>2] = $208;
    $211 = $mod;
    $212 = ((($211)) + 148|0);
    HEAP32[$212>>2] = 6;
   }
   $213 = $2;
   $214 = (_hio_read8s($213)|0);
   $215 = $214 << 24 >> 24;
   $transp = $215;
   $216 = $2;
   (_hio_read8($216)|0);
   $217 = $2;
   $218 = (_hio_read16b($217)|0);
   $219 = $218&65535;
   $sliding = $219;
   $220 = $2;
   (_hio_read32b($220)|0);
   $221 = $2;
   (_hio_seek($221,16,1)|0);
   $222 = $2;
   $223 = (_hio_read32b($222)|0);
   $mask = $223;
   $i = 0;
   while(1) {
    $224 = $i;
    $225 = ($224|0)<(32);
    if (!($225)) {
     break;
    }
    $226 = $mask;
    $227 = $226 & -2147483648;
    $228 = ($227|0)!=(0);
    if ($228) {
     $229 = $2;
     (_hio_read8($229)|0);
    }
    $230 = $i;
    $231 = (($230) + 1)|0;
    $i = $231;
    $232 = $mask;
    $233 = $232 << 1;
    $mask = $233;
   }
   $234 = $2;
   $235 = (_hio_read32b($234)|0);
   $mask = $235;
   $i = 0;
   while(1) {
    $236 = $i;
    $237 = ($236|0)<(32);
    if (!($237)) {
     break;
    }
    $238 = $mask;
    $239 = $238 & -2147483648;
    $240 = ($239|0)!=(0);
    if ($240) {
     $241 = $2;
     (_hio_read8($241)|0);
    }
    $242 = $i;
    $243 = (($242) + 1)|0;
    $i = $243;
    $244 = $mask;
    $245 = $244 << 1;
    $mask = $245;
   }
   $246 = $sliding;
   $247 = ($246|0)==(6);
   if ($247) {
    $248 = $1;
    $249 = ((($248)) + 1284|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = $250 | 192;
    HEAP32[$249>>2] = $251;
   }
   $i = 0;
   while(1) {
    $252 = $i;
    $253 = ($252|0)<(32);
    if (!($253)) {
     break;
    }
    $254 = $transp;
    $255 = $i;
    $256 = $mod;
    $257 = ((($256)) + 176|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = (($258) + (($255*764)|0)|0);
    $260 = ((($259)) + 756|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = ((($261)) + 12|0);
    HEAP32[$262>>2] = $254;
    $263 = $i;
    $264 = (($263) + 1)|0;
    $i = $264;
   }
   $265 = $mod;
   $266 = (_pattern_init($265)|0);
   $267 = ($266|0)<(0);
   if ($267) {
    $0 = -1;
    $416 = $0;
    STACKTOP = sp;return ($416|0);
   }
   $i = 0;
   while(1) {
    $268 = $i;
    $269 = $mod;
    $270 = ((($269)) + 128|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ($268|0)<($271|0);
    if (!($272)) {
     label = 78;
     break;
    }
    $273 = $mod;
    $274 = $i;
    $275 = (_pattern_tracks_alloc($273,$274,64)|0);
    $276 = ($275|0)<(0);
    if ($276) {
     label = 52;
     break;
    }
    $277 = $2;
    $278 = (_hio_read8($277)|0);
    $tracks = $278;
    $279 = $2;
    $280 = (_hio_read8($279)|0);
    $b = $280;
    $281 = $2;
    $282 = (_hio_read16b($281)|0);
    $convsz = $282;
    $283 = $convsz;
    $284 = $283&65535;
    $285 = (($284) + 16)|0;
    $286 = (_calloc(1,$285)|0);
    $conv = $286;
    $287 = $conv;
    $288 = ($287|0)==(0|0);
    if ($288) {
     label = 54;
     break;
    }
    $289 = $b;
    $290 = $289&255;
    $291 = $290 & 16;
    $292 = ($291|0)!=(0);
    do {
     if ($292) {
      $293 = $conv;
      HEAP32[$293>>2] = 0;
     } else {
      $294 = $b;
      $295 = $294&255;
      $296 = $295 & 1;
      $297 = ($296|0)!=(0);
      if ($297) {
       $298 = $conv;
       HEAP32[$298>>2] = -1;
       break;
      } else {
       $299 = $2;
       $300 = (_hio_read32b($299)|0);
       $301 = $conv;
       HEAP32[$301>>2] = $300;
       break;
      }
     }
    } while(0);
    $302 = $b;
    $303 = $302&255;
    $304 = $303 & 32;
    $305 = ($304|0)!=(0);
    do {
     if ($305) {
      $306 = $conv;
      $307 = ((($306)) + 4|0);
      HEAP32[$307>>2] = 0;
     } else {
      $308 = $b;
      $309 = $308&255;
      $310 = $309 & 2;
      $311 = ($310|0)!=(0);
      if ($311) {
       $312 = $conv;
       $313 = ((($312)) + 4|0);
       HEAP32[$313>>2] = -1;
       break;
      } else {
       $314 = $2;
       $315 = (_hio_read32b($314)|0);
       $316 = $conv;
       $317 = ((($316)) + 4|0);
       HEAP32[$317>>2] = $315;
       break;
      }
     }
    } while(0);
    $318 = $b;
    $319 = $318&255;
    $320 = $319 & 64;
    $321 = ($320|0)!=(0);
    do {
     if ($321) {
      $322 = $conv;
      $323 = ((($322)) + 8|0);
      HEAP32[$323>>2] = 0;
     } else {
      $324 = $b;
      $325 = $324&255;
      $326 = $325 & 4;
      $327 = ($326|0)!=(0);
      if ($327) {
       $328 = $conv;
       $329 = ((($328)) + 8|0);
       HEAP32[$329>>2] = -1;
       break;
      } else {
       $330 = $2;
       $331 = (_hio_read32b($330)|0);
       $332 = $conv;
       $333 = ((($332)) + 8|0);
       HEAP32[$333>>2] = $331;
       break;
      }
     }
    } while(0);
    $334 = $b;
    $335 = $334&255;
    $336 = $335 & 128;
    $337 = ($336|0)!=(0);
    do {
     if ($337) {
      $338 = $conv;
      $339 = ((($338)) + 12|0);
      HEAP32[$339>>2] = 0;
     } else {
      $340 = $b;
      $341 = $340&255;
      $342 = $341 & 8;
      $343 = ($342|0)!=(0);
      if ($343) {
       $344 = $conv;
       $345 = ((($344)) + 12|0);
       HEAP32[$345>>2] = -1;
       break;
      } else {
       $346 = $2;
       $347 = (_hio_read32b($346)|0);
       $348 = $conv;
       $349 = ((($348)) + 12|0);
       HEAP32[$349>>2] = $347;
       break;
      }
     }
    } while(0);
    $350 = $conv;
    $351 = ((($350)) + 16|0);
    $352 = $convsz;
    $353 = $352&65535;
    $354 = $2;
    (_hio_read($351,1,$353,$354)|0);
    $355 = $1;
    $356 = $i;
    $357 = $356&65535;
    $358 = $conv;
    $359 = (_unpack_block($355,$357,$358)|0);
    $360 = ($359|0)<(0);
    $361 = $conv;
    _free($361);
    if ($360) {
     label = 76;
     break;
    }
    $362 = $i;
    $363 = (($362) + 1)|0;
    $i = $363;
   }
   if ((label|0) == 52) {
    $0 = -1;
    $416 = $0;
    STACKTOP = sp;return ($416|0);
   }
   else if ((label|0) == 54) {
    $0 = -1;
    $416 = $0;
    STACKTOP = sp;return ($416|0);
   }
   else if ((label|0) == 76) {
    $0 = -1;
    $416 = $0;
    STACKTOP = sp;return ($416|0);
   }
   else if ((label|0) == 78) {
    $364 = $2;
    $365 = (_hio_read32b($364)|0);
    $mask = $365;
    $i = 0;
    while(1) {
     $366 = $i;
     $367 = ($366|0)<(32);
     if (!($367)) {
      label = 87;
      break;
     }
     $368 = $mask;
     $369 = $368 ^ -1;
     $370 = $369 & -2147483648;
     $371 = ($370|0)!=(0);
     if (!($371)) {
      $372 = $i;
      $373 = $mod;
      $374 = ((($373)) + 176|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = (($375) + (($372*764)|0)|0);
      $377 = ((($376)) + 36|0);
      HEAP32[$377>>2] = 1;
      $378 = $2;
      $379 = (_hio_read32b($378)|0);
      $380 = $i;
      $381 = $mod;
      $382 = ((($381)) + 180|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = (($383) + (($380*52)|0)|0);
      $385 = ((($384)) + 32|0);
      HEAP32[$385>>2] = $379;
      $386 = $i;
      $387 = $mod;
      $388 = ((($387)) + 180|0);
      $389 = HEAP32[$388>>2]|0;
      $390 = (($389) + (($386*52)|0)|0);
      $391 = ((($390)) + 32|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = ($392|0)==(0);
      if ($393) {
       $394 = $i;
       $395 = $mod;
       $396 = ((($395)) + 176|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = (($397) + (($394*764)|0)|0);
       $399 = ((($398)) + 36|0);
       HEAP32[$399>>2] = 0;
      }
      $400 = $2;
      $401 = (_hio_read16b($400)|0);
      $402 = ($401<<16>>16)!=(0);
      if (!($402)) {
       $403 = $1;
       $404 = $2;
       $405 = $i;
       $406 = $mod;
       $407 = ((($406)) + 180|0);
       $408 = HEAP32[$407>>2]|0;
       $409 = (($408) + (($405*52)|0)|0);
       $410 = (_load_sample($403,$404,0,$409,0)|0);
       $411 = ($410|0)<(0);
       if ($411) {
        label = 85;
        break;
       }
      }
     }
     $412 = $i;
     $413 = (($412) + 1)|0;
     $i = $413;
     $414 = $mask;
     $415 = $414 << 1;
     $mask = $415;
    }
    if ((label|0) == 85) {
     $0 = -1;
     $416 = $0;
     STACKTOP = sp;return ($416|0);
    }
    else if ((label|0) == 87) {
     $0 = 0;
     $416 = $0;
     STACKTOP = sp;return ($416|0);
    }
   }
  }
 }
 $0 = -1;
 $416 = $0;
 STACKTOP = sp;return ($416|0);
}
function _unpack_block($m,$bnum,$from) {
 $m = $m|0;
 $bnum = $bnum|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bcnt = 0, $event = 0, $fromn = 0, $fromst = 0, $fxmsk0 = 0, $fxmsk1 = 0, $fxptr = 0;
 var $i = 0, $j = 0, $linemsk0 = 0, $linemsk1 = 0, $lmptr = 0, $lmsk = 0, $mod = 0, $patbuf = 0, $tmpto = 0, $to = 0, $trkn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $linemsk0 = sp + 48|0;
 $linemsk1 = sp + 44|0;
 $fxmsk0 = sp + 40|0;
 $fxmsk1 = sp + 36|0;
 $fromn = sp + 74|0;
 $1 = $m;
 $2 = $bnum;
 $3 = $from;
 $4 = $1;
 $mod = $4;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$linemsk0>>2] = $6;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$linemsk1>>2] = $9;
 $10 = $3;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$fxmsk0>>2] = $12;
 $13 = $3;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$fxmsk1>>2] = $15;
 $lmptr = $linemsk0;
 $fxptr = $fxmsk0;
 HEAP16[$fromn>>1] = 0;
 $16 = $3;
 $17 = ((($16)) + 16|0);
 $fromst = $17;
 $18 = $mod;
 $19 = ((($18)) + 136|0);
 $20 = HEAP32[$19>>2]|0;
 $trkn = $20;
 $21 = (_calloc(3,256)|0);
 $to = $21;
 $patbuf = $21;
 $22 = $to;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $0 = -1;
  $312 = $0;
  STACKTOP = sp;return ($312|0);
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(64);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = ($26|0)==(32);
  if ($27) {
   $lmptr = $linemsk1;
   $fxptr = $fxmsk1;
  }
  $28 = $lmptr;
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & -2147483648;
  $31 = ($30|0)!=(0);
  L11: do {
   if ($31) {
    $32 = $fromst;
    $33 = $trkn;
    $34 = (($33|0) / 4)&-1;
    $35 = $34&255;
    $36 = (_get_nibbles($32,$fromn,$35)|0);
    $lmsk = $36;
    $37 = $trkn;
    $38 = (16 - ($37))|0;
    $39 = $lmsk;
    $40 = $39&65535;
    $41 = $40 << $38;
    $42 = $41&65535;
    $lmsk = $42;
    $43 = $to;
    $tmpto = $43;
    $bcnt = 0;
    while(1) {
     $44 = $bcnt;
     $45 = $44&255;
     $46 = $trkn;
     $47 = ($45|0)<($46|0);
     if (!($47)) {
      break L11;
     }
     $48 = $lmsk;
     $49 = $48&65535;
     $50 = $49 & 32768;
     $51 = ($50|0)!=(0);
     if ($51) {
      $52 = $fromst;
      $53 = (_get_nibbles($52,$fromn,2)|0);
      $54 = $53&255;
      $55 = $tmpto;
      HEAP8[$55>>0] = $54;
      $56 = $fromst;
      $57 = (_get_nibble($56,$fromn)|0);
      $58 = $57&255;
      $59 = $58 << 4;
      $60 = $59&255;
      $61 = $tmpto;
      $62 = ((($61)) + 1|0);
      HEAP8[$62>>0] = $60;
     }
     $63 = $lmsk;
     $64 = $63&65535;
     $65 = $64 << 1;
     $66 = $65&65535;
     $lmsk = $66;
     $67 = $tmpto;
     $68 = ((($67)) + 3|0);
     $tmpto = $68;
     $69 = $bcnt;
     $70 = (($69) + 1)<<24>>24;
     $bcnt = $70;
    }
   }
  } while(0);
  $71 = $fxptr;
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & -2147483648;
  $74 = ($73|0)!=(0);
  L20: do {
   if ($74) {
    $75 = $fromst;
    $76 = $trkn;
    $77 = (($76|0) / 4)&-1;
    $78 = $77&255;
    $79 = (_get_nibbles($75,$fromn,$78)|0);
    $lmsk = $79;
    $80 = $trkn;
    $81 = (16 - ($80))|0;
    $82 = $lmsk;
    $83 = $82&65535;
    $84 = $83 << $81;
    $85 = $84&65535;
    $lmsk = $85;
    $86 = $to;
    $tmpto = $86;
    $bcnt = 0;
    while(1) {
     $87 = $bcnt;
     $88 = $87&255;
     $89 = $trkn;
     $90 = ($88|0)<($89|0);
     if (!($90)) {
      break L20;
     }
     $91 = $lmsk;
     $92 = $91&65535;
     $93 = $92 & 32768;
     $94 = ($93|0)!=(0);
     if ($94) {
      $95 = $fromst;
      $96 = (_get_nibble($95,$fromn)|0);
      $97 = $96&255;
      $98 = $tmpto;
      $99 = ((($98)) + 1|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100&255;
      $102 = $101 | $97;
      $103 = $102&255;
      HEAP8[$99>>0] = $103;
      $104 = $fromst;
      $105 = (_get_nibbles($104,$fromn,2)|0);
      $106 = $105&255;
      $107 = $tmpto;
      $108 = ((($107)) + 2|0);
      HEAP8[$108>>0] = $106;
     }
     $109 = $lmsk;
     $110 = $109&65535;
     $111 = $110 << 1;
     $112 = $111&65535;
     $lmsk = $112;
     $113 = $tmpto;
     $114 = ((($113)) + 3|0);
     $tmpto = $114;
     $115 = $bcnt;
     $116 = (($115) + 1)<<24>>24;
     $bcnt = $116;
    }
   }
  } while(0);
  $117 = $trkn;
  $118 = ($117*3)|0;
  $119 = $to;
  $120 = (($119) + ($118)|0);
  $to = $120;
  $121 = $lmptr;
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 << 1;
  HEAP32[$121>>2] = $123;
  $124 = $fxptr;
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 << 1;
  HEAP32[$124>>2] = $126;
  $127 = $i;
  $128 = (($127) + 1)|0;
  $i = $128;
 }
 $i = 0;
 while(1) {
  $129 = $i;
  $130 = ($129|0)<(64);
  if (!($130)) {
   break;
  }
  $j = 0;
  while(1) {
   $131 = $j;
   $132 = ($131|0)<(4);
   $133 = $i;
   if (!($132)) {
    break;
   }
   $134 = $j;
   $135 = $2;
   $136 = $135&65535;
   $137 = $1;
   $138 = ((($137)) + 168|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + ($136<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 4|0);
   $143 = (($142) + ($134<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $1;
   $146 = ((($145)) + 172|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + ($144<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ((($149)) + 4|0);
   $151 = (($150) + ($133<<3)|0);
   $event = $151;
   $152 = $i;
   $153 = ($152*12)|0;
   $154 = $j;
   $155 = ($154*3)|0;
   $156 = (($153) + ($155))|0;
   $157 = (($156) + 0)|0;
   $158 = $patbuf;
   $159 = (($158) + ($157)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $event;
   HEAP8[$161>>0] = $160;
   $162 = $event;
   $163 = HEAP8[$162>>0]|0;
   $164 = ($163<<24>>24)!=(0);
   if ($164) {
    $165 = $event;
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    $168 = (($167) + 48)|0;
    $169 = $168&255;
    HEAP8[$165>>0] = $169;
   }
   $170 = $i;
   $171 = ($170*12)|0;
   $172 = $j;
   $173 = ($172*3)|0;
   $174 = (($171) + ($173))|0;
   $175 = (($174) + 1)|0;
   $176 = $patbuf;
   $177 = (($176) + ($175)|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $179 >> 4;
   $181 = $180&255;
   $182 = $event;
   $183 = ((($182)) + 1|0);
   HEAP8[$183>>0] = $181;
   $184 = $event;
   $185 = ((($184)) + 1|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = ($186<<24>>24)!=(0);
   if ($187) {
    $188 = $event;
    $189 = ((($188)) + 1|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = (($190) + 1)<<24>>24;
    HEAP8[$189>>0] = $191;
   }
   $192 = $i;
   $193 = ($192*12)|0;
   $194 = $j;
   $195 = ($194*3)|0;
   $196 = (($193) + ($195))|0;
   $197 = (($196) + 1)|0;
   $198 = $patbuf;
   $199 = (($198) + ($197)|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = $201 & 15;
   $203 = $202&255;
   $204 = $event;
   $205 = ((($204)) + 3|0);
   HEAP8[$205>>0] = $203;
   $206 = $i;
   $207 = ($206*12)|0;
   $208 = $j;
   $209 = ($208*3)|0;
   $210 = (($207) + ($209))|0;
   $211 = (($210) + 2)|0;
   $212 = $patbuf;
   $213 = (($212) + ($211)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $event;
   $216 = ((($215)) + 4|0);
   HEAP8[$216>>0] = $214;
   $217 = $event;
   $218 = ((($217)) + 3|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   L42: do {
    switch ($220|0) {
    case 13:  {
     $237 = $event;
     $238 = ((($237)) + 3|0);
     HEAP8[$238>>0] = 10;
     break;
    }
    case 4: case 3: case 2: case 1: case 0:  {
     break;
    }
    case 15:  {
     $239 = $event;
     $240 = ((($239)) + 4|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = $241&255;
     $243 = ($242|0)==(0);
     if ($243) {
      $244 = $event;
      $245 = ((($244)) + 3|0);
      HEAP8[$245>>0] = 13;
     }
     $246 = $event;
     $247 = ((($246)) + 4|0);
     $248 = HEAP8[$247>>0]|0;
     $249 = $248&255;
     $250 = ($249|0)==(255);
     $251 = $event;
     if ($250) {
      $252 = ((($251)) + 3|0);
      HEAP8[$252>>0] = 0;
      $253 = $event;
      $254 = ((($253)) + 4|0);
      HEAP8[$254>>0] = 0;
      $255 = $event;
      $256 = ((($255)) + 2|0);
      HEAP8[$256>>0] = 1;
      break L42;
     }
     $257 = ((($251)) + 4|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = ($259|0)==(254);
     $261 = $event;
     if ($260) {
      $262 = ((($261)) + 3|0);
      HEAP8[$262>>0] = 0;
      $263 = $event;
      $264 = ((($263)) + 4|0);
      HEAP8[$264>>0] = 0;
      break L42;
     }
     $265 = ((($261)) + 4|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $266&255;
     $268 = ($267|0)==(241);
     $269 = $event;
     if ($268) {
      $270 = ((($269)) + 3|0);
      HEAP8[$270>>0] = 14;
      $271 = $event;
      $272 = ((($271)) + 4|0);
      HEAP8[$272>>0] = -109;
      break L42;
     }
     $273 = ((($269)) + 4|0);
     $274 = HEAP8[$273>>0]|0;
     $275 = $274&255;
     $276 = ($275|0)==(242);
     $277 = $event;
     if ($276) {
      $278 = ((($277)) + 3|0);
      HEAP8[$278>>0] = 14;
      $279 = $event;
      $280 = ((($279)) + 4|0);
      HEAP8[$280>>0] = -61;
      break L42;
     }
     $281 = ((($277)) + 4|0);
     $282 = HEAP8[$281>>0]|0;
     $283 = $282&255;
     $284 = ($283|0)==(243);
     $285 = $event;
     if ($284) {
      $286 = ((($285)) + 3|0);
      HEAP8[$286>>0] = 14;
      $287 = $event;
      $288 = ((($287)) + 4|0);
      HEAP8[$288>>0] = -45;
      break L42;
     }
     $289 = ((($285)) + 4|0);
     $290 = HEAP8[$289>>0]|0;
     $291 = $290&255;
     $292 = ($291|0)>(10);
     if ($292) {
      $293 = $event;
      $294 = ((($293)) + 3|0);
      HEAP8[$294>>0] = -85;
      $295 = $event;
      $296 = ((($295)) + 4|0);
      $297 = HEAP8[$296>>0]|0;
      $298 = $297&255;
      $299 = ($298*125)|0;
      $300 = (($299|0) / 33)&-1;
      $301 = $300&255;
      $302 = $event;
      $303 = ((($302)) + 4|0);
      HEAP8[$303>>0] = $301;
     }
     break;
    }
    case 12:  {
     $221 = $event;
     $222 = ((($221)) + 4|0);
     $223 = HEAP8[$222>>0]|0;
     $224 = $223&255;
     $225 = $224 & 240;
     $226 = $225 >> 4;
     $227 = ($226*10)|0;
     $228 = $event;
     $229 = ((($228)) + 4|0);
     $230 = HEAP8[$229>>0]|0;
     $231 = $230&255;
     $232 = $231 & 15;
     $233 = (($227) + ($232))|0;
     $234 = $233&255;
     $235 = $event;
     $236 = ((($235)) + 4|0);
     HEAP8[$236>>0] = $234;
     break;
    }
    default: {
     $304 = $event;
     $305 = ((($304)) + 3|0);
     HEAP8[$305>>0] = 0;
     $306 = $event;
     $307 = ((($306)) + 4|0);
     HEAP8[$307>>0] = 0;
    }
    }
   } while(0);
   $308 = $j;
   $309 = (($308) + 1)|0;
   $j = $309;
  }
  $310 = (($133) + 1)|0;
  $i = $310;
 }
 $311 = $patbuf;
 _free($311);
 $0 = 0;
 $312 = $0;
 STACKTOP = sp;return ($312|0);
}
function _get_nibbles($mem,$nbnum,$nbs) {
 $mem = $mem|0;
 $nbnum = $nbnum|0;
 $nbs = $nbs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mem;
 $1 = $nbnum;
 $2 = $nbs;
 $res = 0;
 while(1) {
  $3 = $2;
  $4 = (($3) + -1)<<24>>24;
  $2 = $4;
  $5 = ($3<<24>>24)!=(0);
  $6 = $res;
  if (!($5)) {
   break;
  }
  $7 = $6&65535;
  $8 = $7 << 4;
  $9 = $8&65535;
  $res = $9;
  $10 = $0;
  $11 = $1;
  $12 = (_get_nibble($10,$11)|0);
  $13 = $12&255;
  $14 = $res;
  $15 = $14&65535;
  $16 = $15 | $13;
  $17 = $16&65535;
  $res = $17;
 }
 STACKTOP = sp;return ($6|0);
}
function _get_nibble($mem,$nbnum) {
 $mem = $mem|0;
 $nbnum = $nbnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mloc = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mem;
 $1 = $nbnum;
 $2 = $0;
 $3 = $1;
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = (($5|0) / 2)&-1;
 $7 = (($2) + ($6)|0);
 $mloc = $7;
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 1;
 $12 = ($11|0)!=(0);
 $13 = $mloc;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 if ($12) {
  $16 = $15 & 15;
  $17 = $16&255;
  $res = $17;
 } else {
  $18 = $15 >> 4;
  $19 = $18&255;
  $res = $19;
 }
 $20 = $1;
 $21 = HEAP16[$20>>1]|0;
 $22 = (($21) + 1)<<16>>16;
 HEAP16[$20>>1] = $22;
 $23 = $res;
 STACKTOP = sp;return ($23|0);
}
function _med4_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1296385028);
 if ($6) {
  $0 = -1;
 } else {
  $7 = $1;
  $8 = $2;
  _read_title($7,$8,0);
  $0 = 0;
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _med4_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $_len = 0, $_mask = 0, $_pos = 0, $_type = 0, $buf = 0;
 var $buf1 = 0, $c = 0, $c6 = 0, $chmsk = 0, $chn = 0, $chn5 = 0, $ctl = 0, $event = 0, $flags = 0, $fxmask = 0, $hexvol = 0, $i = 0, $id = 0, $j = 0, $k = 0, $length = 0, $length7 = 0, $line = 0, $linemask = 0, $loop_len = 0;
 var $m0 = 0, $mask = 0, $masksz = 0, $mod = 0, $num_ins = 0, $num_masks = 0, $num_smp = 0, $or$cond = 0, $plen = 0, $plen4 = 0, $pos = 0, $pos10 = 0, $pos12 = 0, $pos9 = 0, $rows = 0, $s = 0, $s2 = 0, $size = 0, $size11 = 0, $size2 = 0;
 var $size3 = 0, $smp_idx = 0, $stream = 0, $sub = 0, $synth = 0, $temp_inst = 0, $tempo = 0, $transp = 0, $trkvol = 0, $type = 0, $type8 = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, $ver = 0, $vermaj = 0, $vermin = 0, $x = 0, $xpo = 0, $xxi = 0, $xxs = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $mask = sp + 8|0;
 $trkvol = sp + 5008|0;
 $buf = sp + 3984|0;
 $temp_inst = sp + 768|0;
 $buf1 = sp + 3936|0;
 $ctl = sp + 3928|0;
 $linemask = sp + 704|0;
 $fxmask = sp + 672|0;
 $stream = sp + 648|0;
 $_mask = sp;
 $synth = sp + 80|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $hexvol = 0;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $vermaj = 2;
 $vermin = 10;
 $8 = $2;
 $9 = (_hio_tell($8)|0);
 $pos = $9;
 $10 = $2;
 (_hio_seek($10,0,2)|0);
 $11 = $2;
 $12 = (_hio_tell($11)|0);
 $13 = ($12|0)>(2000);
 L1: do {
  if ($13) {
   $14 = $2;
   (_hio_seek($14,-1024,1)|0);
   $15 = $2;
   (_hio_read($buf,1,1024,$15)|0);
   $i = 0;
   while(1) {
    $16 = $i;
    $17 = ($16|0)<(1013);
    if (!($17)) {
     break L1;
    }
    $18 = $i;
    $19 = (($buf) + ($18)|0);
    $20 = (_memcmp($19,6704,8)|0);
    $21 = ($20|0)!=(0);
    if (!($21)) {
     break;
    }
    $32 = $i;
    $33 = (($32) + 1)|0;
    $i = $33;
   }
   $22 = $i;
   $23 = (($buf) + ($22)|0);
   $24 = ((($23)) + 10|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $vermaj = $26;
   $27 = $i;
   $28 = (($buf) + ($27)|0);
   $29 = ((($28)) + 11|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $vermin = $31;
  }
 } while(0);
 $34 = $2;
 $35 = $3;
 $36 = $pos;
 $37 = (($35) + ($36))|0;
 (_hio_seek($34,$37,0)|0);
 $38 = $mod;
 $39 = ((($38)) + 64|0);
 $40 = $vermaj;
 $41 = $vermin;
 HEAP32[$vararg_buffer>>2] = $40;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $41;
 (_snprintf($39,64,6720,$vararg_buffer)|0);
 $42 = $2;
 $43 = (_hio_read8($42)|0);
 $m0 = $43;
 $masksz = 0;
 $44 = $mask;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = 0;
 $i = 0;
 while(1) {
  $48 = $m0;
  $49 = $48&255;
  $50 = ($49|0)!=(0);
  $51 = $i;
  $52 = ($51|0)<(8);
  $53 = $50 ? $52 : 0;
  if (!($53)) {
   break;
  }
  $54 = $m0;
  $55 = $54&255;
  $56 = $55 & 128;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $mask;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (_bitshift64Shl(($60|0),($63|0),8)|0);
   $65 = tempRet0;
   $66 = $mask;
   $67 = $66;
   HEAP32[$67>>2] = $64;
   $68 = (($66) + 4)|0;
   $69 = $68;
   HEAP32[$69>>2] = $65;
   $70 = $2;
   $71 = (_hio_read8($70)|0);
   $72 = $71&255;
   $73 = $mask;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = (($73) + 4)|0;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = $75 | $72;
   $80 = $mask;
   $81 = $80;
   HEAP32[$81>>2] = $79;
   $82 = (($80) + 4)|0;
   $83 = $82;
   HEAP32[$83>>2] = $78;
   $84 = $masksz;
   $85 = (($84) + 1)|0;
   $masksz = $85;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
  $88 = $m0;
  $89 = $88&255;
  $90 = $89 << 1;
  $91 = $90&255;
  $m0 = $91;
 }
 $92 = $masksz;
 $93 = (8 - ($92))|0;
 $94 = $93<<3;
 $95 = $mask;
 $96 = $95;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($95) + 4)|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (_bitshift64Shl(($97|0),($100|0),($94|0))|0);
 $102 = tempRet0;
 $103 = $mask;
 $104 = $103;
 HEAP32[$104>>2] = $101;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = $102;
 $num_ins = 0;
 _memset(($temp_inst|0),0,3072)|0;
 $i = 0;
 while(1) {
  $107 = $mask;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) + 4)|0;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = ($109|0)!=(0);
  $114 = ($112|0)!=(0);
  $115 = $113 | $114;
  $116 = $i;
  $117 = ($116|0)<(64);
  $118 = $115 ? $117 : 0;
  if (!($118)) {
   break;
  }
  $loop_len = 0;
  $119 = $mask;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = (($119) + 4)|0;
  $123 = $122;
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)>(0);
  $126 = ($121>>>0)>(0);
  $127 = ($124|0)==(0);
  $128 = $127 & $126;
  $129 = $125 | $128;
  if (!($129)) {
   $130 = $i;
   $131 = (($130) + 1)|0;
   $num_ins = $131;
   $132 = $2;
   $133 = (_hio_read8($132)|0);
   $c = $133;
   $134 = $2;
   $135 = (_hio_read8($134)|0);
   $size = $135;
   $j = 0;
   while(1) {
    $136 = $j;
    $137 = $size;
    $138 = $137&255;
    $139 = ($136|0)<($138|0);
    if (!($139)) {
     break;
    }
    $140 = $2;
    $141 = (_hio_read8($140)|0);
    $142 = $j;
    $143 = (($buf1) + ($142)|0);
    HEAP8[$143>>0] = $141;
    $144 = $j;
    $145 = (($144) + 1)|0;
    $j = $145;
   }
   $146 = $j;
   $147 = (($buf1) + ($146)|0);
   HEAP8[$147>>0] = 0;
   $148 = $i;
   $149 = (($temp_inst) + (($148*48)|0)|0);
   $150 = ((($149)) + 40|0);
   HEAP32[$150>>2] = 64;
   $151 = $c;
   $152 = $151&255;
   $153 = $152 & 1;
   $154 = ($153|0)==(0);
   if ($154) {
    $155 = $2;
    $156 = (_hio_read16b($155)|0);
    $157 = $156&65535;
    $158 = $157 << 1;
    $159 = $i;
    $160 = (($temp_inst) + (($159*48)|0)|0);
    $161 = ((($160)) + 32|0);
    HEAP32[$161>>2] = $158;
   }
   $162 = $c;
   $163 = $162&255;
   $164 = $163 & 2;
   $165 = ($164|0)==(0);
   if ($165) {
    $166 = $2;
    $167 = (_hio_read16b($166)|0);
    $168 = $167&65535;
    $169 = $168 << 1;
    $170 = $169&65535;
    $loop_len = $170;
   }
   $171 = $c;
   $172 = $171&255;
   $173 = $172 & 4;
   $174 = ($173|0)==(0);
   if ($174) {
    $175 = $2;
    (_hio_read8($175)|0);
   }
   $176 = $c;
   $177 = $176&255;
   $178 = $177 & 8;
   $179 = ($178|0)==(0);
   if ($179) {
    $180 = $2;
    (_hio_read8($180)|0);
   }
   $181 = $c;
   $182 = $181&255;
   $183 = $182 & 48;
   $184 = ($183|0)==(0);
   if ($184) {
    $185 = $2;
    $186 = (_hio_read8($185)|0);
    $187 = $186&255;
    $188 = $i;
    $189 = (($temp_inst) + (($188*48)|0)|0);
    $190 = ((($189)) + 40|0);
    HEAP32[$190>>2] = $187;
   }
   $191 = $c;
   $192 = $191&255;
   $193 = $192 & 64;
   $194 = ($193|0)==(0);
   if ($194) {
    $195 = $2;
    $196 = (_hio_read8s($195)|0);
    $197 = $196 << 24 >> 24;
    $198 = $i;
    $199 = (($temp_inst) + (($198*48)|0)|0);
    $200 = ((($199)) + 44|0);
    HEAP32[$200>>2] = $197;
   }
   $201 = $i;
   $202 = (($temp_inst) + (($201*48)|0)|0);
   $203 = ((($202)) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $loop_len;
   $206 = $205&65535;
   $207 = (($204) + ($206))|0;
   $208 = $i;
   $209 = (($temp_inst) + (($208*48)|0)|0);
   $210 = ((($209)) + 36|0);
   HEAP32[$210>>2] = $207;
   $211 = $i;
   $212 = (($temp_inst) + (($211*48)|0)|0);
   (_copy_adjust($212,$buf1,32)|0);
  }
  $213 = $i;
  $214 = (($213) + 1)|0;
  $i = $214;
  $215 = $mask;
  $216 = $215;
  $217 = HEAP32[$216>>2]|0;
  $218 = (($215) + 4)|0;
  $219 = $218;
  $220 = HEAP32[$219>>2]|0;
  $221 = (_bitshift64Shl(($217|0),($220|0),1)|0);
  $222 = tempRet0;
  $223 = $mask;
  $224 = $223;
  HEAP32[$224>>2] = $221;
  $225 = (($223) + 4)|0;
  $226 = $225;
  HEAP32[$226>>2] = $222;
 }
 $227 = $2;
 $228 = (_hio_read16b($227)|0);
 $229 = $228&65535;
 $230 = $mod;
 $231 = ((($230)) + 128|0);
 HEAP32[$231>>2] = $229;
 $232 = $2;
 $233 = (_hio_read16b($232)|0);
 $234 = $233&65535;
 $235 = $mod;
 $236 = ((($235)) + 156|0);
 HEAP32[$236>>2] = $234;
 $237 = $mod;
 $238 = ((($237)) + 156|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)>(256);
 if ($240) {
  $0 = -1;
  $1234 = $0;
  STACKTOP = sp;return ($1234|0);
 }
 $241 = $mod;
 $242 = ((($241)) + 952|0);
 $243 = $mod;
 $244 = ((($243)) + 156|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = $2;
 (_hio_read($242,1,$245,$246)|0);
 $247 = $2;
 $248 = (_hio_read16b($247)|0);
 $249 = $248&65535;
 $tempo = $249;
 $250 = $tempo;
 $251 = ($250|0)<=(10);
 $252 = $tempo;
 if ($251) {
  $253 = $mod;
  $254 = ((($253)) + 148|0);
  HEAP32[$254>>2] = $252;
  $255 = $mod;
  $256 = ((($255)) + 152|0);
  HEAP32[$256>>2] = 125;
 } else {
  $257 = ($252*125)|0;
  $258 = (($257|0) / 33)&-1;
  $259 = $mod;
  $260 = ((($259)) + 152|0);
  HEAP32[$260>>2] = $258;
 }
 $261 = $2;
 $262 = (_hio_read8s($261)|0);
 $263 = $262 << 24 >> 24;
 $transp = $263;
 $264 = $2;
 (_hio_read8s($264)|0);
 $265 = $2;
 $266 = (_hio_read8s($265)|0);
 $267 = $266 << 24 >> 24;
 $flags = $267;
 $268 = $2;
 $269 = (_hio_read8($268)|0);
 $270 = $269&255;
 $271 = $mod;
 $272 = ((($271)) + 148|0);
 HEAP32[$272>>2] = $270;
 $273 = $flags;
 $274 = $273 ^ -1;
 $275 = $274 & 32;
 $276 = ($275|0)!=(0);
 if ($276) {
  $277 = $1;
  $278 = ((($277)) + 1284|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $279 | 192;
  HEAP32[$278>>2] = $280;
 }
 $281 = $flags;
 $282 = $281 & 16;
 $283 = ($282|0)!=(0);
 if ($283) {
  $hexvol = 1;
 }
 $284 = $vermaj;
 $285 = ($284|0)==(2);
 if ($285) {
  $286 = $flags;
  $287 = $286 & 32;
  $288 = ($287|0)!=(0);
  $289 = $288 ? 5 : 6;
  $290 = $mod;
  $291 = ((($290)) + 148|0);
  HEAP32[$291>>2] = $289;
 }
 $292 = $2;
 (_hio_seek($292,20,1)|0);
 $293 = $2;
 (_hio_read($trkvol,1,16,$293)|0);
 $294 = $2;
 (_hio_read8($294)|0);
 $i = 0;
 while(1) {
  $295 = $i;
  $296 = ($295|0)<(64);
  if (!($296)) {
   break;
  }
  $297 = $transp;
  $298 = $i;
  $299 = (($temp_inst) + (($298*48)|0)|0);
  $300 = ((($299)) + 44|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = (($301) + ($297))|0;
  HEAP32[$300>>2] = $302;
  $303 = $i;
  $304 = (($303) + 1)|0;
  $i = $304;
 }
 $305 = $mod;
 $306 = ((($305)) + 136|0);
 HEAP32[$306>>2] = 0;
 $307 = $2;
 $308 = (_hio_tell($307)|0);
 $pos = $308;
 $i = 0;
 while(1) {
  $309 = $i;
  $310 = $mod;
  $311 = ((($310)) + 128|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = ($309|0)<($312|0);
  if (!($313)) {
   break;
  }
  $314 = $2;
  $315 = (_hio_read8($314)|0);
  $316 = $315&255;
  $size2 = $316;
  $317 = $2;
  $318 = (_hio_read8($317)|0);
  $319 = $318&255;
  $chn = $319;
  $320 = $chn;
  $321 = $mod;
  $322 = ((($321)) + 136|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ($320|0)>($323|0);
  if ($324) {
   $325 = $chn;
   $326 = $mod;
   $327 = ((($326)) + 136|0);
   HEAP32[$327>>2] = $325;
  }
  $328 = $2;
  (_hio_read8($328)|0);
  $329 = $2;
  $330 = (_hio_read16b($329)|0);
  $331 = $330&65535;
  $plen = $331;
  $332 = $2;
  $333 = $size2;
  $334 = $plen;
  $335 = (($333) + ($334))|0;
  $336 = (($335) - 4)|0;
  (_hio_seek($332,$336,1)|0);
  $337 = $i;
  $338 = (($337) + 1)|0;
  $i = $338;
 }
 $339 = $mod;
 $340 = ((($339)) + 136|0);
 $341 = HEAP32[$340>>2]|0;
 $342 = ($341|0)>(16);
 if ($342) {
  $0 = -1;
  $1234 = $0;
  STACKTOP = sp;return ($1234|0);
 }
 $343 = $mod;
 $344 = ((($343)) + 136|0);
 $345 = HEAP32[$344>>2]|0;
 $346 = $mod;
 $347 = ((($346)) + 128|0);
 $348 = HEAP32[$347>>2]|0;
 $349 = Math_imul($345, $348)|0;
 $350 = $mod;
 $351 = ((($350)) + 132|0);
 HEAP32[$351>>2] = $349;
 $352 = $mod;
 $353 = (_pattern_init($352)|0);
 $354 = ($353|0)<(0);
 if ($354) {
  $0 = -1;
  $1234 = $0;
  STACKTOP = sp;return ($1234|0);
 }
 $355 = $2;
 $356 = $pos;
 (_hio_seek($355,$356,0)|0);
 $i = 0;
 while(1) {
  $357 = $i;
  $358 = $mod;
  $359 = ((($358)) + 128|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = ($357|0)<($360|0);
  if (!($361)) {
   label = 100;
   break;
  }
  $362 = $2;
  $363 = (_hio_read8($362)|0);
  $364 = $363&255;
  $size3 = $364;
  $365 = $2;
  $366 = (_hio_tell($365)|0);
  $pos = $366;
  $367 = $2;
  $368 = (_hio_read8($367)|0);
  $chn5 = $368;
  $369 = $chn5;
  $370 = $369&255;
  $371 = $mod;
  $372 = ((($371)) + 136|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = ($370|0)>($373|0);
  if ($374) {
   label = 58;
   break;
  }
  $375 = $2;
  $376 = (_hio_read8($375)|0);
  $377 = $376&255;
  $378 = (($377) + 1)|0;
  $rows = $378;
  $379 = $2;
  $380 = (_hio_read16b($379)|0);
  $381 = $380&65535;
  $plen4 = $381;
  $j = 0;
  while(1) {
   $382 = $j;
   $383 = ($382|0)<(4);
   if (!($383)) {
    break;
   }
   $384 = $rows;
   $385 = $j;
   $386 = $385<<6;
   $387 = ($384|0)>($386|0);
   if (!($387)) {
    break;
   }
   $388 = $2;
   $389 = (_hio_read8($388)|0);
   $390 = $j;
   $391 = (($ctl) + ($390)|0);
   HEAP8[$391>>0] = $389;
   $392 = $j;
   $393 = (($392) + 1)|0;
   $j = $393;
  }
  $394 = $mod;
  $395 = $i;
  $396 = $rows;
  $397 = (_pattern_tracks_alloc($394,$395,$396)|0);
  $398 = ($397|0)<(0);
  if ($398) {
   label = 64;
   break;
  }
  $y = 0;
  while(1) {
   $399 = $y;
   $400 = ($399|0)<(8);
   if (!($400)) {
    break;
   }
   $401 = $y;
   $402 = (($linemask) + ($401<<2)|0);
   HEAP32[$402>>2] = 0;
   $403 = $y;
   $404 = (($fxmask) + ($403<<2)|0);
   HEAP32[$404>>2] = 0;
   $405 = $y;
   $406 = (($405) + 1)|0;
   $y = $406;
  }
  $num_masks = 0;
  $y = 0;
  while(1) {
   $407 = $y;
   $408 = ($407|0)<(8);
   if (!($408)) {
    break;
   }
   $409 = $rows;
   $410 = $y;
   $411 = $410<<5;
   $412 = ($409|0)>($411|0);
   if (!($412)) {
    break;
   }
   $413 = $y;
   $414 = (($413|0) / 2)&-1;
   $415 = (($ctl) + ($414)|0);
   $416 = HEAP8[$415>>0]|0;
   $417 = $416&255;
   $c6 = $417;
   $418 = $y;
   $419 = (($418|0) % 2)&-1;
   $420 = $419<<2;
   $s = $420;
   $421 = $c6;
   $422 = $s;
   $423 = 128 >> $422;
   $424 = $421 & $423;
   $425 = ($424|0)!=(0);
   if ($425) {
    $435 = -1;
   } else {
    $426 = $c6;
    $427 = $s;
    $428 = 64 >> $427;
    $429 = $426 & $428;
    $430 = ($429|0)!=(0);
    if ($430) {
     $435 = 0;
    } else {
     $431 = $2;
     $432 = (_hio_read32b($431)|0);
     $435 = $432;
    }
   }
   $433 = $y;
   $434 = (($linemask) + ($433<<2)|0);
   HEAP32[$434>>2] = $435;
   $436 = $c6;
   $437 = $s;
   $438 = 32 >> $437;
   $439 = $436 & $438;
   $440 = ($439|0)!=(0);
   if ($440) {
    $450 = -1;
   } else {
    $441 = $c6;
    $442 = $s;
    $443 = 16 >> $442;
    $444 = $441 & $443;
    $445 = ($444|0)!=(0);
    if ($445) {
     $450 = 0;
    } else {
     $446 = $2;
     $447 = (_hio_read32b($446)|0);
     $450 = $447;
    }
   }
   $448 = $y;
   $449 = (($fxmask) + ($448<<2)|0);
   HEAP32[$449>>2] = $450;
   $451 = $num_masks;
   $452 = (($451) + 1)|0;
   $num_masks = $452;
   $453 = $y;
   $454 = (($453) + 1)|0;
   $y = $454;
  }
  $455 = $2;
  $456 = $pos;
  $457 = $size3;
  $458 = (($456) + ($457))|0;
  (_hio_seek($455,$458,0)|0);
  $459 = $2;
  _stream_init($459,$stream);
  $y = 0;
  while(1) {
   $460 = $y;
   $461 = $num_masks;
   $462 = ($460|0)<($461|0);
   if (!($462)) {
    break;
   }
   $j = 0;
   while(1) {
    $463 = $j;
    $464 = ($463|0)<(32);
    if (!($464)) {
     break;
    }
    $465 = $y;
    $466 = $465<<5;
    $467 = $j;
    $468 = (($466) + ($467))|0;
    $line = $468;
    $469 = $line;
    $470 = $rows;
    $471 = ($469|0)>=($470|0);
    if ($471) {
     break;
    }
    $472 = $y;
    $473 = (($linemask) + ($472<<2)|0);
    $474 = HEAP32[$473>>2]|0;
    $475 = $474 & -2147483648;
    $476 = ($475|0)!=(0);
    L115: do {
     if ($476) {
      $477 = $chn5;
      $478 = $477&255;
      $479 = (_stream_read_aligned16($stream,$478)|0);
      $480 = $479&65535;
      $chmsk = $480;
      $k = 0;
      while(1) {
       $481 = $k;
       $482 = $chn5;
       $483 = $482&255;
       $484 = ($481|0)<($483|0);
       if (!($484)) {
        break L115;
       }
       $485 = $line;
       $486 = $k;
       $487 = $i;
       $488 = $1;
       $489 = ((($488)) + 168|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = (($490) + ($487<<2)|0);
       $492 = HEAP32[$491>>2]|0;
       $493 = ((($492)) + 4|0);
       $494 = (($493) + ($486<<2)|0);
       $495 = HEAP32[$494>>2]|0;
       $496 = $1;
       $497 = ((($496)) + 172|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = (($498) + ($495<<2)|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = ((($500)) + 4|0);
       $502 = (($501) + ($485<<3)|0);
       $event = $502;
       $503 = $chmsk;
       $504 = $503 & 32768;
       $505 = ($504|0)!=(0);
       if ($505) {
        $506 = (_stream_read12($stream)|0);
        $x = $506;
        $507 = $x;
        $508 = $507 >>> 4;
        $509 = $508&255;
        $510 = $event;
        HEAP8[$510>>0] = $509;
        $511 = $event;
        $512 = HEAP8[$511>>0]|0;
        $513 = ($512<<24>>24)!=(0);
        if ($513) {
         $514 = $event;
         $515 = HEAP8[$514>>0]|0;
         $516 = $515&255;
         $517 = (($516) + 48)|0;
         $518 = $517&255;
         HEAP8[$514>>0] = $518;
        }
        $519 = $x;
        $520 = $519 & 15;
        $521 = $520&255;
        $522 = $event;
        $523 = ((($522)) + 1|0);
        HEAP8[$523>>0] = $521;
       }
       $524 = $k;
       $525 = (($524) + 1)|0;
       $k = $525;
       $526 = $chmsk;
       $527 = $526 << 1;
       $chmsk = $527;
      }
     }
    } while(0);
    $528 = $y;
    $529 = (($fxmask) + ($528<<2)|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = $530 & -2147483648;
    $532 = ($531|0)!=(0);
    L127: do {
     if ($532) {
      $533 = $chn5;
      $534 = $533&255;
      $535 = (_stream_read_aligned16($stream,$534)|0);
      $536 = $535&65535;
      $chmsk = $536;
      $k = 0;
      while(1) {
       $537 = $k;
       $538 = $chn5;
       $539 = $538&255;
       $540 = ($537|0)<($539|0);
       if (!($540)) {
        break L127;
       }
       $541 = $line;
       $542 = $k;
       $543 = $i;
       $544 = $1;
       $545 = ((($544)) + 168|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($546) + ($543<<2)|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = ((($548)) + 4|0);
       $550 = (($549) + ($542<<2)|0);
       $551 = HEAP32[$550>>2]|0;
       $552 = $1;
       $553 = ((($552)) + 172|0);
       $554 = HEAP32[$553>>2]|0;
       $555 = (($554) + ($551<<2)|0);
       $556 = HEAP32[$555>>2]|0;
       $557 = ((($556)) + 4|0);
       $558 = (($557) + ($541<<3)|0);
       $event = $558;
       $559 = $chmsk;
       $560 = $559 & 32768;
       $561 = ($560|0)!=(0);
       if ($561) {
        $562 = (_stream_read12($stream)|0);
        $x = $562;
        $563 = $x;
        $564 = $563 >>> 8;
        $565 = $564&255;
        $566 = $event;
        $567 = ((($566)) + 3|0);
        HEAP8[$567>>0] = $565;
        $568 = $x;
        $569 = $568 & 255;
        $570 = $569&255;
        $571 = $event;
        $572 = ((($571)) + 4|0);
        HEAP8[$572>>0] = $570;
        $573 = $event;
        _fix_effect313($573);
       }
       $574 = $k;
       $575 = (($574) + 1)|0;
       $k = $575;
       $576 = $chmsk;
       $577 = $576 << 1;
       $chmsk = $577;
      }
     }
    } while(0);
    $578 = $y;
    $579 = (($linemask) + ($578<<2)|0);
    $580 = HEAP32[$579>>2]|0;
    $581 = $580 << 1;
    HEAP32[$579>>2] = $581;
    $582 = $y;
    $583 = (($fxmask) + ($582<<2)|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = $584 << 1;
    HEAP32[$583>>2] = $585;
    $586 = $j;
    $587 = (($586) + 1)|0;
    $j = $587;
   }
   $588 = $y;
   $589 = (($588) + 1)|0;
   $y = $589;
  }
  $590 = $2;
  $591 = $pos;
  $592 = $size3;
  $593 = (($591) + ($592))|0;
  $594 = $plen4;
  $595 = (($593) + ($594))|0;
  (_hio_seek($590,$595,0)|0);
  $596 = $i;
  $597 = (($596) + 1)|0;
  $i = $597;
 }
 if ((label|0) == 58) {
  $0 = -1;
  $1234 = $0;
  STACKTOP = sp;return ($1234|0);
 }
 else if ((label|0) == 64) {
  $0 = -1;
  $1234 = $0;
  STACKTOP = sp;return ($1234|0);
 }
 else if ((label|0) == 100) {
  $598 = $num_ins;
  $599 = $mod;
  $600 = ((($599)) + 140|0);
  HEAP32[$600>>2] = $598;
  $601 = $1;
  $602 = (_med_new_module_extras($601)|0);
  $603 = ($602|0)!=(0);
  if ($603) {
   $0 = -1;
   $1234 = $0;
   STACKTOP = sp;return ($1234|0);
  }
  $604 = $2;
  $605 = (_hio_read32b($604)|0);
  $606 = $mask;
  $607 = $606;
  HEAP32[$607>>2] = $605;
  $608 = (($606) + 4)|0;
  $609 = $608;
  HEAP32[$609>>2] = 0;
  $610 = $mask;
  $611 = $610;
  $612 = HEAP32[$611>>2]|0;
  $613 = (($610) + 4)|0;
  $614 = $613;
  $615 = HEAP32[$614>>2]|0;
  $616 = ($612|0)==(1296385110);
  $617 = ($615|0)==(0);
  $618 = $616 & $617;
  L144: do {
   if ($618) {
    $619 = $mod;
    $620 = ((($619)) + 144|0);
    HEAP32[$620>>2] = 0;
    $621 = $mod;
    $622 = (_instrument_init($621)|0);
    $623 = ($622|0)<(0);
    if (!($623)) {
     $624 = $2;
     (_hio_seek($624,-4,1)|0);
     break;
    }
    $0 = -1;
    $1234 = $0;
    STACKTOP = sp;return ($1234|0);
   } else {
    $625 = $mask;
    $626 = $625;
    $627 = HEAP32[$626>>2]|0;
    $628 = (($625) + 4)|0;
    $629 = $628;
    $630 = HEAP32[$629>>2]|0;
    $631 = $mask;
    $632 = $631;
    HEAP32[$632>>2] = 0;
    $633 = (($631) + 4)|0;
    $634 = $633;
    HEAP32[$634>>2] = $627;
    $635 = $2;
    $636 = (_hio_read32b($635)|0);
    $637 = $mask;
    $638 = $637;
    $639 = HEAP32[$638>>2]|0;
    $640 = (($637) + 4)|0;
    $641 = $640;
    $642 = HEAP32[$641>>2]|0;
    $643 = $639 | $636;
    $644 = $mask;
    $645 = $644;
    HEAP32[$645>>2] = $643;
    $646 = (($644) + 4)|0;
    $647 = $646;
    HEAP32[$647>>2] = $642;
    $648 = $mask;
    $649 = $648;
    $650 = HEAP32[$649>>2]|0;
    $651 = (($648) + 4)|0;
    $652 = $651;
    $653 = HEAP32[$652>>2]|0;
    $654 = (_bitshift64Shl(($650|0),($653|0),1)|0);
    $655 = tempRet0;
    $656 = $mask;
    $657 = $656;
    HEAP32[$657>>2] = $654;
    $658 = (($656) + 4)|0;
    $659 = $658;
    HEAP32[$659>>2] = $655;
    $660 = $2;
    $661 = (_hio_tell($660)|0);
    $pos = $661;
    $num_smp = 0;
    $662 = $mask;
    $663 = $662;
    $664 = HEAP32[$663>>2]|0;
    $665 = (($662) + 4)|0;
    $666 = $665;
    $667 = HEAP32[$666>>2]|0;
    $668 = $_mask;
    $669 = $668;
    HEAP32[$669>>2] = $664;
    $670 = (($668) + 4)|0;
    $671 = $670;
    HEAP32[$671>>2] = $667;
    $i = 0;
    while(1) {
     $672 = $_mask;
     $673 = $672;
     $674 = HEAP32[$673>>2]|0;
     $675 = (($672) + 4)|0;
     $676 = $675;
     $677 = HEAP32[$676>>2]|0;
     $678 = ($674|0)!=(0);
     $679 = ($677|0)!=(0);
     $680 = $678 | $679;
     $681 = $i;
     $682 = ($681|0)<(64);
     $683 = $680 ? $682 : 0;
     if (!($683)) {
      break;
     }
     $684 = $_mask;
     $685 = $684;
     $686 = HEAP32[$685>>2]|0;
     $687 = (($684) + 4)|0;
     $688 = $687;
     $689 = HEAP32[$688>>2]|0;
     $690 = ($689|0)>(0);
     $691 = ($686>>>0)>(0);
     $692 = ($689|0)==(0);
     $693 = $692 & $691;
     $694 = $690 | $693;
     if (!($694)) {
      $695 = $2;
      $696 = (_hio_read32b($695)|0);
      $_len = $696;
      $697 = $2;
      $698 = (_hio_read16b($697)|0);
      $699 = $698 << 16 >> 16;
      $_type = $699;
      $700 = $2;
      $701 = (_hio_tell($700)|0);
      $_pos = $701;
      $702 = $_type;
      $703 = ($702|0)==(0);
      $704 = $_type;
      $705 = ($704|0)==(-2);
      $or$cond = $703 | $705;
      if ($or$cond) {
       $706 = $num_smp;
       $707 = (($706) + 1)|0;
       $num_smp = $707;
      } else {
       $708 = $_type;
       $709 = ($708|0)==(-1);
       if ($709) {
        $710 = $2;
        (_hio_seek($710,20,1)|0);
        $711 = $2;
        $712 = (_hio_read16b($711)|0);
        $713 = $712&65535;
        $714 = $num_smp;
        $715 = (($714) + ($713))|0;
        $num_smp = $715;
       }
      }
      $716 = $2;
      $717 = $_pos;
      $718 = $_len;
      $719 = (($717) + ($718))|0;
      (_hio_seek($716,$719,0)|0);
     }
     $720 = $i;
     $721 = (($720) + 1)|0;
     $i = $721;
     $722 = $_mask;
     $723 = $722;
     $724 = HEAP32[$723>>2]|0;
     $725 = (($722) + 4)|0;
     $726 = $725;
     $727 = HEAP32[$726>>2]|0;
     $728 = (_bitshift64Shl(($724|0),($727|0),1)|0);
     $729 = tempRet0;
     $730 = $_mask;
     $731 = $730;
     HEAP32[$731>>2] = $728;
     $732 = (($730) + 4)|0;
     $733 = $732;
     HEAP32[$733>>2] = $729;
    }
    $734 = $2;
    $735 = $pos;
    (_hio_seek($734,$735,0)|0);
    $736 = $num_smp;
    $737 = $mod;
    $738 = ((($737)) + 144|0);
    HEAP32[$738>>2] = $736;
    $739 = $mod;
    $740 = (_instrument_init($739)|0);
    $741 = ($740|0)<(0);
    if ($741) {
     $0 = -1;
     $1234 = $0;
     STACKTOP = sp;return ($1234|0);
    }
    $smp_idx = 0;
    $i = 0;
    L162: while(1) {
     $742 = $mask;
     $743 = $742;
     $744 = HEAP32[$743>>2]|0;
     $745 = (($742) + 4)|0;
     $746 = $745;
     $747 = HEAP32[$746>>2]|0;
     $748 = ($744|0)!=(0);
     $749 = ($747|0)!=(0);
     $750 = $748 | $749;
     if (!($750)) {
      label = 177;
      break;
     }
     $751 = $i;
     $752 = $num_ins;
     $753 = ($751|0)<($752|0);
     if (!($753)) {
      label = 177;
      break;
     }
     $754 = $mask;
     $755 = $754;
     $756 = HEAP32[$755>>2]|0;
     $757 = (($754) + 4)|0;
     $758 = $757;
     $759 = HEAP32[$758>>2]|0;
     $760 = ($759|0)>(0);
     $761 = ($756>>>0)>(0);
     $762 = ($759|0)==(0);
     $763 = $762 & $761;
     $764 = $760 | $763;
     do {
      if (!($764)) {
       $765 = $i;
       $766 = $mod;
       $767 = ((($766)) + 176|0);
       $768 = HEAP32[$767>>2]|0;
       $769 = (($768) + (($765*764)|0)|0);
       $xxi = $769;
       $770 = $2;
       $771 = (_hio_read32b($770)|0);
       $length = $771;
       $772 = $2;
       $773 = (_hio_read16b($772)|0);
       $774 = $773 << 16 >> 16;
       $type = $774;
       $775 = $xxi;
       $776 = $i;
       $777 = (($temp_inst) + (($776*48)|0)|0);
       (_strncpy(($775|0),($777|0),32)|0);
       $778 = $type;
       $779 = ($778|0)==(-2);
       if ($779) {
        $780 = $2;
        $781 = (_hio_tell($780)|0);
        $pos9 = $781;
        $782 = $2;
        (_hio_read32b($782)|0);
        $783 = $2;
        (_hio_read16b($783)|0);
        $784 = $2;
        (_hio_read16b($784)|0);
        $785 = $2;
        (_hio_read16b($785)|0);
        $786 = $2;
        $787 = (_hio_read16b($786)|0);
        $788 = ((($synth)) + 10|0);
        HEAP16[$788>>1] = $787;
        $789 = $2;
        $790 = (_hio_read16b($789)|0);
        $791 = ((($synth)) + 12|0);
        HEAP16[$791>>1] = $790;
        $792 = $2;
        $793 = (_hio_read16b($792)|0);
        $794 = ((($synth)) + 14|0);
        HEAP16[$794>>1] = $793;
        $795 = $2;
        $796 = (_hio_read16b($795)|0);
        $797 = ((($synth)) + 16|0);
        HEAP16[$797>>1] = $796;
        $798 = $2;
        $799 = (_hio_read8($798)|0);
        $800 = ((($synth)) + 18|0);
        HEAP8[$800>>0] = $799;
        $801 = $2;
        $802 = (_hio_read8($801)|0);
        $803 = ((($synth)) + 19|0);
        HEAP8[$803>>0] = $802;
        $804 = $2;
        $805 = (_hio_read16b($804)|0);
        $806 = ((($synth)) + 20|0);
        HEAP16[$806>>1] = $805;
        $807 = ((($synth)) + 14|0);
        $808 = HEAP16[$807>>1]|0;
        $809 = $808&65535;
        $810 = ($809|0)>(128);
        if ($810) {
         label = 125;
         break L162;
        }
        $811 = ((($synth)) + 16|0);
        $812 = HEAP16[$811>>1]|0;
        $813 = $812&65535;
        $814 = ($813|0)>(128);
        if ($814) {
         label = 125;
         break L162;
        }
        $815 = ((($synth)) + 20|0);
        $816 = HEAP16[$815>>1]|0;
        $817 = $816&65535;
        $818 = ($817|0)>(256);
        if ($818) {
         label = 125;
         break L162;
        }
        $819 = ((($synth)) + 22|0);
        $820 = ((($synth)) + 14|0);
        $821 = HEAP16[$820>>1]|0;
        $822 = $821&65535;
        $823 = $2;
        (_hio_read($819,1,$822,$823)|0);
        $824 = ((($synth)) + 150|0);
        $825 = ((($synth)) + 16|0);
        $826 = HEAP16[$825>>1]|0;
        $827 = $826&65535;
        $828 = $2;
        (_hio_read($824,1,$827,$828)|0);
        $829 = $2;
        $830 = $pos9;
        $831 = $2;
        $832 = (_hio_read32b($831)|0);
        $833 = (($830) + ($832))|0;
        (_hio_seek($829,$833,0)|0);
        $834 = $2;
        $835 = (_hio_read32b($834)|0);
        $length7 = $835;
        $836 = $2;
        $837 = (_hio_read16b($836)|0);
        $838 = $837&65535;
        $type8 = $838;
        $839 = $xxi;
        $840 = (_med_new_instrument_extras($839)|0);
        $841 = ($840|0)!=(0);
        if ($841) {
         label = 127;
         break L162;
        }
        $842 = $xxi;
        $843 = ((($842)) + 36|0);
        HEAP32[$843>>2] = 1;
        $844 = $mod;
        $845 = $i;
        $846 = (_subinstrument_alloc($844,$845,1)|0);
        $847 = ($846|0)<(0);
        if ($847) {
         label = 129;
         break L162;
        }
        $848 = $xxi;
        $849 = ((($848)) + 756|0);
        $850 = HEAP32[$849>>2]|0;
        $sub = $850;
        $851 = ((($synth)) + 18|0);
        $852 = HEAP8[$851>>0]|0;
        $853 = $852&255;
        $854 = $xxi;
        $855 = ((($854)) + 760|0);
        $856 = HEAP32[$855>>2]|0;
        $857 = ((($856)) + 4|0);
        HEAP32[$857>>2] = $853;
        $858 = ((($synth)) + 19|0);
        $859 = HEAP8[$858>>0]|0;
        $860 = $859&255;
        $861 = $xxi;
        $862 = ((($861)) + 760|0);
        $863 = HEAP32[$862>>2]|0;
        $864 = ((($863)) + 8|0);
        HEAP32[$864>>2] = $860;
        $865 = $sub;
        $866 = ((($865)) + 8|0);
        HEAP32[$866>>2] = 128;
        $867 = $i;
        $868 = (($temp_inst) + (($867*48)|0)|0);
        $869 = ((($868)) + 40|0);
        $870 = HEAP32[$869>>2]|0;
        $871 = $sub;
        HEAP32[$871>>2] = $870;
        $872 = $i;
        $873 = (($temp_inst) + (($872*48)|0)|0);
        $874 = ((($873)) + 44|0);
        $875 = HEAP32[$874>>2]|0;
        $876 = $sub;
        $877 = ((($876)) + 12|0);
        HEAP32[$877>>2] = $875;
        $878 = $smp_idx;
        $879 = $sub;
        $880 = ((($879)) + 40|0);
        HEAP32[$880>>2] = $878;
        $881 = $sub;
        $882 = ((($881)) + 16|0);
        HEAP32[$882>>2] = 0;
        $883 = $smp_idx;
        $884 = $mod;
        $885 = ((($884)) + 180|0);
        $886 = HEAP32[$885>>2]|0;
        $887 = (($886) + (($883*52)|0)|0);
        $xxs = $887;
        $888 = $length7;
        $889 = $xxs;
        $890 = ((($889)) + 32|0);
        HEAP32[$890>>2] = $888;
        $891 = $i;
        $892 = (($temp_inst) + (($891*48)|0)|0);
        $893 = ((($892)) + 32|0);
        $894 = HEAP32[$893>>2]|0;
        $895 = $xxs;
        $896 = ((($895)) + 36|0);
        HEAP32[$896>>2] = $894;
        $897 = $i;
        $898 = (($temp_inst) + (($897*48)|0)|0);
        $899 = ((($898)) + 36|0);
        $900 = HEAP32[$899>>2]|0;
        $901 = $xxs;
        $902 = ((($901)) + 40|0);
        HEAP32[$902>>2] = $900;
        $903 = $i;
        $904 = (($temp_inst) + (($903*48)|0)|0);
        $905 = ((($904)) + 36|0);
        $906 = HEAP32[$905>>2]|0;
        $907 = ($906|0)>(2);
        $908 = $907 ? 2 : 0;
        $909 = $xxs;
        $910 = ((($909)) + 44|0);
        HEAP32[$910>>2] = $908;
        $911 = $1;
        $912 = $2;
        $913 = $xxs;
        $914 = (_load_sample($911,$912,0,$913,0)|0);
        $915 = ($914|0)<(0);
        if ($915) {
         label = 131;
         break L162;
        }
        $916 = $smp_idx;
        $917 = (($916) + 1)|0;
        $smp_idx = $917;
        $918 = $1;
        $919 = $i;
        $920 = (_mmd_alloc_tables($918,$919,$synth)|0);
        $921 = ($920|0)!=(0);
        if ($921) {
         label = 133;
         break L162;
        } else {
         break;
        }
       }
       $922 = $type;
       $923 = ($922|0)==(-1);
       if ($923) {
        $924 = $2;
        $925 = (_hio_tell($924)|0);
        $pos10 = $925;
        $926 = $2;
        (_hio_read32b($926)|0);
        $927 = $2;
        (_hio_read16b($927)|0);
        $928 = $2;
        (_hio_read16b($928)|0);
        $929 = $2;
        (_hio_read16b($929)|0);
        $930 = $2;
        $931 = (_hio_read16b($930)|0);
        $932 = ((($synth)) + 10|0);
        HEAP16[$932>>1] = $931;
        $933 = $2;
        $934 = (_hio_read16b($933)|0);
        $935 = ((($synth)) + 12|0);
        HEAP16[$935>>1] = $934;
        $936 = $2;
        $937 = (_hio_read16b($936)|0);
        $938 = ((($synth)) + 14|0);
        HEAP16[$938>>1] = $937;
        $939 = $2;
        $940 = (_hio_read16b($939)|0);
        $941 = ((($synth)) + 16|0);
        HEAP16[$941>>1] = $940;
        $942 = $2;
        $943 = (_hio_read8($942)|0);
        $944 = ((($synth)) + 18|0);
        HEAP8[$944>>0] = $943;
        $945 = $2;
        $946 = (_hio_read8($945)|0);
        $947 = ((($synth)) + 19|0);
        HEAP8[$947>>0] = $946;
        $948 = $2;
        $949 = (_hio_read16b($948)|0);
        $950 = ((($synth)) + 20|0);
        HEAP16[$950>>1] = $949;
        $951 = ((($synth)) + 14|0);
        $952 = HEAP16[$951>>1]|0;
        $953 = $952&65535;
        $954 = ($953|0)>(128);
        if ($954) {
         label = 138;
         break L162;
        }
        $955 = ((($synth)) + 16|0);
        $956 = HEAP16[$955>>1]|0;
        $957 = $956&65535;
        $958 = ($957|0)>(128);
        if ($958) {
         label = 138;
         break L162;
        }
        $959 = ((($synth)) + 20|0);
        $960 = HEAP16[$959>>1]|0;
        $961 = $960&65535;
        $962 = ($961|0)>(256);
        if ($962) {
         label = 138;
         break L162;
        }
        $963 = ((($synth)) + 22|0);
        $964 = ((($synth)) + 14|0);
        $965 = HEAP16[$964>>1]|0;
        $966 = $965&65535;
        $967 = $2;
        (_hio_read($963,1,$966,$967)|0);
        $968 = ((($synth)) + 150|0);
        $969 = ((($synth)) + 16|0);
        $970 = HEAP16[$969>>1]|0;
        $971 = $970&65535;
        $972 = $2;
        (_hio_read($968,1,$971,$972)|0);
        $973 = ((($synth)) + 20|0);
        $974 = HEAP16[$973>>1]|0;
        $975 = $974&65535;
        $976 = ($975|0)==(65535);
        if ($976) {
         break;
        }
        $977 = ((($synth)) + 20|0);
        $978 = HEAP16[$977>>1]|0;
        $979 = $978&65535;
        $980 = ($979|0)>(64);
        if ($980) {
         label = 141;
         break L162;
        }
        $j = 0;
        while(1) {
         $981 = $j;
         $982 = ((($synth)) + 20|0);
         $983 = HEAP16[$982>>1]|0;
         $984 = $983&65535;
         $985 = ($981|0)<($984|0);
         if (!($985)) {
          break;
         }
         $986 = $2;
         $987 = (_hio_read32b($986)|0);
         $988 = $j;
         $989 = ((($synth)) + 280|0);
         $990 = (($989) + ($988<<2)|0);
         HEAP32[$990>>2] = $987;
         $991 = $j;
         $992 = (($991) + 1)|0;
         $j = $992;
        }
        $993 = $i;
        $994 = $mod;
        $995 = ((($994)) + 176|0);
        $996 = HEAP32[$995>>2]|0;
        $997 = (($996) + (($993*764)|0)|0);
        $998 = (_med_new_instrument_extras($997)|0);
        $999 = ($998|0)!=(0);
        if ($999) {
         label = 146;
         break L162;
        }
        $1000 = ((($synth)) + 20|0);
        $1001 = HEAP16[$1000>>1]|0;
        $1002 = $1001&65535;
        $1003 = $i;
        $1004 = $mod;
        $1005 = ((($1004)) + 176|0);
        $1006 = HEAP32[$1005>>2]|0;
        $1007 = (($1006) + (($1003*764)|0)|0);
        $1008 = ((($1007)) + 36|0);
        HEAP32[$1008>>2] = $1002;
        $1009 = $mod;
        $1010 = $i;
        $1011 = ((($synth)) + 20|0);
        $1012 = HEAP16[$1011>>1]|0;
        $1013 = $1012&65535;
        $1014 = (_subinstrument_alloc($1009,$1010,$1013)|0);
        $1015 = ($1014|0)<(0);
        if ($1015) {
         label = 148;
         break L162;
        }
        $1016 = ((($synth)) + 18|0);
        $1017 = HEAP8[$1016>>0]|0;
        $1018 = $1017&255;
        $1019 = $xxi;
        $1020 = ((($1019)) + 760|0);
        $1021 = HEAP32[$1020>>2]|0;
        $1022 = ((($1021)) + 4|0);
        HEAP32[$1022>>2] = $1018;
        $1023 = ((($synth)) + 19|0);
        $1024 = HEAP8[$1023>>0]|0;
        $1025 = $1024&255;
        $1026 = $xxi;
        $1027 = ((($1026)) + 760|0);
        $1028 = HEAP32[$1027>>2]|0;
        $1029 = ((($1028)) + 8|0);
        HEAP32[$1029>>2] = $1025;
        $j = 0;
        while(1) {
         $1030 = $j;
         $1031 = ((($synth)) + 20|0);
         $1032 = HEAP16[$1031>>1]|0;
         $1033 = $1032&65535;
         $1034 = ($1030|0)<($1033|0);
         if (!($1034)) {
          break;
         }
         $1035 = $j;
         $1036 = $xxi;
         $1037 = ((($1036)) + 756|0);
         $1038 = HEAP32[$1037>>2]|0;
         $1039 = (($1038) + ($1035<<6)|0);
         $sub = $1039;
         $1040 = $sub;
         $1041 = ((($1040)) + 8|0);
         HEAP32[$1041>>2] = 128;
         $1042 = $sub;
         HEAP32[$1042>>2] = 64;
         $1043 = $sub;
         $1044 = ((($1043)) + 12|0);
         HEAP32[$1044>>2] = -24;
         $1045 = $smp_idx;
         $1046 = $sub;
         $1047 = ((($1046)) + 40|0);
         HEAP32[$1047>>2] = $1045;
         $1048 = $sub;
         $1049 = ((($1048)) + 16|0);
         HEAP32[$1049>>2] = 0;
         $1050 = $2;
         $1051 = $pos10;
         $1052 = $j;
         $1053 = ((($synth)) + 280|0);
         $1054 = (($1053) + ($1052<<2)|0);
         $1055 = HEAP32[$1054>>2]|0;
         $1056 = (($1051) + ($1055))|0;
         (_hio_seek($1050,$1056,0)|0);
         $1057 = $smp_idx;
         $1058 = $mod;
         $1059 = ((($1058)) + 180|0);
         $1060 = HEAP32[$1059>>2]|0;
         $1061 = (($1060) + (($1057*52)|0)|0);
         $xxs = $1061;
         $1062 = $2;
         $1063 = (_hio_read16b($1062)|0);
         $1064 = $1063&65535;
         $1065 = $1064<<1;
         $1066 = $xxs;
         $1067 = ((($1066)) + 32|0);
         HEAP32[$1067>>2] = $1065;
         $1068 = $xxs;
         $1069 = ((($1068)) + 36|0);
         HEAP32[$1069>>2] = 0;
         $1070 = $xxs;
         $1071 = ((($1070)) + 32|0);
         $1072 = HEAP32[$1071>>2]|0;
         $1073 = $xxs;
         $1074 = ((($1073)) + 40|0);
         HEAP32[$1074>>2] = $1072;
         $1075 = $xxs;
         $1076 = ((($1075)) + 44|0);
         HEAP32[$1076>>2] = 2;
         $1077 = $1;
         $1078 = $2;
         $1079 = $xxs;
         $1080 = (_load_sample($1077,$1078,0,$1079,0)|0);
         $1081 = ($1080|0)<(0);
         if ($1081) {
          label = 152;
          break L162;
         }
         $1082 = $smp_idx;
         $1083 = (($1082) + 1)|0;
         $smp_idx = $1083;
         $1084 = $j;
         $1085 = (($1084) + 1)|0;
         $j = $1085;
        }
        $1086 = $1;
        $1087 = $i;
        $1088 = (_mmd_alloc_tables($1086,$1087,$synth)|0);
        $1089 = ($1088|0)!=(0);
        if ($1089) {
         label = 155;
         break L162;
        }
        $1090 = $2;
        $1091 = $pos10;
        $1092 = $length;
        $1093 = (($1091) + ($1092))|0;
        (_hio_seek($1090,$1093,0)|0);
        break;
       } else {
        $1094 = $type;
        $1095 = ($1094|0)!=(0);
        if ($1095) {
         $1096 = $2;
         $1097 = $length;
         (_hio_seek($1096,$1097,1)|0);
         break;
        }
        $1098 = $xxi;
        $1099 = ((($1098)) + 36|0);
        HEAP32[$1099>>2] = 1;
        $1100 = $mod;
        $1101 = $i;
        $1102 = (_subinstrument_alloc($1100,$1101,1)|0);
        $1103 = ($1102|0)<(0);
        if ($1103) {
         label = 160;
         break L162;
        }
        $1104 = $xxi;
        $1105 = ((($1104)) + 756|0);
        $1106 = HEAP32[$1105>>2]|0;
        $sub = $1106;
        $1107 = $i;
        $1108 = (($temp_inst) + (($1107*48)|0)|0);
        $1109 = ((($1108)) + 40|0);
        $1110 = HEAP32[$1109>>2]|0;
        $1111 = $sub;
        HEAP32[$1111>>2] = $1110;
        $1112 = $sub;
        $1113 = ((($1112)) + 8|0);
        HEAP32[$1113>>2] = 128;
        $1114 = $i;
        $1115 = (($temp_inst) + (($1114*48)|0)|0);
        $1116 = ((($1115)) + 44|0);
        $1117 = HEAP32[$1116>>2]|0;
        $1118 = $sub;
        $1119 = ((($1118)) + 12|0);
        HEAP32[$1119>>2] = $1117;
        $1120 = $smp_idx;
        $1121 = $sub;
        $1122 = ((($1121)) + 40|0);
        HEAP32[$1122>>2] = $1120;
        $1123 = $smp_idx;
        $1124 = $mod;
        $1125 = ((($1124)) + 144|0);
        $1126 = HEAP32[$1125>>2]|0;
        $1127 = ($1123|0)>=($1126|0);
        if ($1127) {
         label = 162;
         break L162;
        }
        $1128 = $smp_idx;
        $1129 = $mod;
        $1130 = ((($1129)) + 180|0);
        $1131 = HEAP32[$1130>>2]|0;
        $1132 = (($1131) + (($1128*52)|0)|0);
        $xxs = $1132;
        $1133 = $length;
        $1134 = $xxs;
        $1135 = ((($1134)) + 32|0);
        HEAP32[$1135>>2] = $1133;
        $1136 = $i;
        $1137 = (($temp_inst) + (($1136*48)|0)|0);
        $1138 = ((($1137)) + 32|0);
        $1139 = HEAP32[$1138>>2]|0;
        $1140 = $xxs;
        $1141 = ((($1140)) + 36|0);
        HEAP32[$1141>>2] = $1139;
        $1142 = $i;
        $1143 = (($temp_inst) + (($1142*48)|0)|0);
        $1144 = ((($1143)) + 36|0);
        $1145 = HEAP32[$1144>>2]|0;
        $1146 = $xxs;
        $1147 = ((($1146)) + 40|0);
        HEAP32[$1147>>2] = $1145;
        $1148 = $i;
        $1149 = (($temp_inst) + (($1148*48)|0)|0);
        $1150 = ((($1149)) + 36|0);
        $1151 = HEAP32[$1150>>2]|0;
        $1152 = ($1151|0)>(2);
        $1153 = $1152 ? 2 : 0;
        $1154 = $xxs;
        $1155 = ((($1154)) + 44|0);
        HEAP32[$1155>>2] = $1153;
        $1156 = $1;
        $1157 = $2;
        $1158 = $xxs;
        $1159 = (_load_sample($1156,$1157,0,$1158,0)|0);
        $1160 = ($1159|0)<(0);
        if ($1160) {
         label = 164;
         break L162;
        }
        $j = 0;
        while(1) {
         $1161 = $j;
         $1162 = ($1161|0)<(9);
         if (!($1162)) {
          break;
         }
         $k = 0;
         while(1) {
          $1163 = $k;
          $1164 = ($1163|0)<(12);
          if (!($1164)) {
           break;
          }
          $xpo = 0;
          $1165 = $j;
          $1166 = ($1165|0)<(4);
          $1167 = $j;
          do {
           if ($1166) {
            $1168 = (4 - ($1167))|0;
            $1169 = ($1168*12)|0;
            $xpo = $1169;
           } else {
            $1170 = ($1167|0)>(6);
            if (!($1170)) {
             break;
            }
            $1171 = $j;
            $1172 = (($1171) - 6)|0;
            $1173 = Math_imul(-12, $1172)|0;
            $xpo = $1173;
           }
          } while(0);
          $1174 = $xpo;
          $1175 = $1174&255;
          $1176 = $j;
          $1177 = ($1176*12)|0;
          $1178 = $k;
          $1179 = (($1177) + ($1178))|0;
          $1180 = $xxi;
          $1181 = ((($1180)) + 512|0);
          $1182 = (($1181) + ($1179<<1)|0);
          $1183 = ((($1182)) + 1|0);
          HEAP8[$1183>>0] = $1175;
          $1184 = $k;
          $1185 = (($1184) + 1)|0;
          $k = $1185;
         }
         $1186 = $j;
         $1187 = (($1186) + 1)|0;
         $j = $1187;
        }
        $1188 = $smp_idx;
        $1189 = (($1188) + 1)|0;
        $smp_idx = $1189;
        break;
       }
      }
     } while(0);
     $1190 = $i;
     $1191 = (($1190) + 1)|0;
     $i = $1191;
     $1192 = $mask;
     $1193 = $1192;
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = (($1192) + 4)|0;
     $1196 = $1195;
     $1197 = HEAP32[$1196>>2]|0;
     $1198 = (_bitshift64Shl(($1194|0),($1197|0),1)|0);
     $1199 = tempRet0;
     $1200 = $mask;
     $1201 = $1200;
     HEAP32[$1201>>2] = $1198;
     $1202 = (($1200) + 4)|0;
     $1203 = $1202;
     HEAP32[$1203>>2] = $1199;
    }
    switch (label|0) {
     case 125: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 127: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 129: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 131: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 133: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 138: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 141: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 146: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 148: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 152: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 155: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 160: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 162: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 164: {
      $0 = -1;
      $1234 = $0;
      STACKTOP = sp;return ($1234|0);
      break;
     }
     case 177: {
      $1204 = $2;
      (_hio_read16b($1204)|0);
      break L144;
      break;
     }
    }
   }
  } while(0);
  while(1) {
   $1205 = $2;
   $1206 = (_hio_eof($1205)|0);
   $1207 = ($1206|0)!=(0);
   $1208 = $1207 ^ 1;
   if (!($1208)) {
    break;
   }
   $1209 = $2;
   $1210 = (_hio_read32b($1209)|0);
   $id = $1210;
   $1211 = ($1210|0)<(0);
   if ($1211) {
    break;
   }
   $1212 = $2;
   $1213 = (_hio_read32b($1212)|0);
   $size11 = $1213;
   $1214 = ($1213|0)<(0);
   if ($1214) {
    break;
   }
   $1215 = $2;
   $1216 = (_hio_tell($1215)|0);
   $pos12 = $1216;
   $1217 = $id;
   if ((($1217|0) == 1095650895)) {
    $1220 = $size11;
    $1221 = ($1220|0)<(1023);
    $1222 = $size11;
    $1223 = $1221 ? $1222 : 1023;
    $s2 = $1223;
    $1224 = $s2;
    $1225 = $2;
    (_hio_read($buf,1,$1224,$1225)|0);
    $1226 = $s2;
    $1227 = (($buf) + ($1226)|0);
    HEAP8[$1227>>0] = 0;
   } else if ((($1217|0) == 1296385110)) {
    $1218 = $2;
    $1219 = (_hio_read32b($1218)|0);
    $ver = $1219;
   }
   $1228 = $2;
   $1229 = $pos12;
   $1230 = $size11;
   $1231 = (($1229) + ($1230))|0;
   (_hio_seek($1228,$1231,0)|0);
  }
  $1232 = $1;
  $1233 = ((($1232)) + 1288|0);
  HEAP32[$1233>>2] = 4;
  $0 = 0;
  $1234 = $0;
  STACKTOP = sp;return ($1234|0);
 }
 return (0)|0;
}
function _stream_init($f,$s) {
 $f = $f|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 HEAP8[$5>>0] = 0;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _stream_read_aligned16($s,$bits) {
 $s = $s|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $bits;
 $3 = $2;
 $4 = ($3|0)<=(4);
 do {
  if ($4) {
   $5 = $1;
   $6 = (_stream_read4($5)|0);
   $7 = $6 << 12;
   $8 = $7&65535;
   $0 = $8;
  } else {
   $9 = $2;
   $10 = ($9|0)<=(8);
   if ($10) {
    $11 = $1;
    $12 = (_stream_read8($11)|0);
    $13 = $12 << 8;
    $14 = $13&65535;
    $0 = $14;
    break;
   }
   $15 = $2;
   $16 = ($15|0)<=(12);
   $17 = $1;
   if ($16) {
    $18 = (_stream_read12($17)|0);
    $19 = $18 << 4;
    $20 = $19&65535;
    $0 = $20;
    break;
   } else {
    $21 = (_stream_read16($17)|0);
    $0 = $21;
    break;
   }
  }
 } while(0);
 $22 = $0;
 STACKTOP = sp;return ($22|0);
}
function _stream_read12($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_stream_read4($1)|0);
 $a = $2;
 $3 = $0;
 $4 = (_stream_read4($3)|0);
 $b = $4;
 $5 = $0;
 $6 = (_stream_read4($5)|0);
 $c = $6;
 $7 = $a;
 $8 = $7 << 8;
 $9 = $b;
 $10 = $9 << 4;
 $11 = $8 | $10;
 $12 = $c;
 $13 = $11 | $12;
 STACKTOP = sp;return ($13|0);
}
function _fix_effect313($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 4: case 3: case 2: case 1: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 case 15:  {
  $23 = $0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(0);
  if ($27) {
   $28 = $0;
   $29 = ((($28)) + 3|0);
   HEAP8[$29>>0] = 13;
  }
  $30 = $0;
  $31 = ((($30)) + 4|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(255);
  $35 = $0;
  if ($34) {
   $36 = ((($35)) + 3|0);
   HEAP8[$36>>0] = 0;
   $37 = $0;
   $38 = ((($37)) + 4|0);
   HEAP8[$38>>0] = 0;
   $39 = $0;
   $40 = ((($39)) + 2|0);
   HEAP8[$40>>0] = 1;
   STACKTOP = sp;return;
  }
  $41 = ((($35)) + 4|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)==(241);
  $45 = $0;
  if ($44) {
   $46 = ((($45)) + 3|0);
   HEAP8[$46>>0] = 14;
   $47 = $0;
   $48 = ((($47)) + 4|0);
   HEAP8[$48>>0] = -109;
   STACKTOP = sp;return;
  }
  $49 = ((($45)) + 4|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = ($51|0)==(242);
  $53 = $0;
  if ($52) {
   $54 = ((($53)) + 3|0);
   HEAP8[$54>>0] = 14;
   $55 = $0;
   $56 = ((($55)) + 4|0);
   HEAP8[$56>>0] = -61;
   STACKTOP = sp;return;
  }
  $57 = ((($53)) + 4|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)==(243);
  $61 = $0;
  if ($60) {
   $62 = ((($61)) + 3|0);
   HEAP8[$62>>0] = 14;
   $63 = $0;
   $64 = ((($63)) + 4|0);
   HEAP8[$64>>0] = -45;
   STACKTOP = sp;return;
  }
  $65 = ((($61)) + 4|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = ($67|0)>(240);
  $69 = $0;
  if ($68) {
   $70 = ((($69)) + 3|0);
   HEAP8[$70>>0] = 0;
   $71 = $0;
   $72 = ((($71)) + 4|0);
   HEAP8[$72>>0] = 0;
   STACKTOP = sp;return;
  }
  $73 = ((($69)) + 4|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = ($75|0)>(10);
  if (!($76)) {
   STACKTOP = sp;return;
  }
  $77 = $0;
  $78 = ((($77)) + 3|0);
  HEAP8[$78>>0] = -85;
  $79 = $0;
  $80 = ((($79)) + 4|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82*125)|0;
  $84 = (($83|0) / 33)&-1;
  $85 = $84&255;
  $86 = $0;
  $87 = ((($86)) + 4|0);
  HEAP8[$87>>0] = $85;
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  $21 = $0;
  $22 = ((($21)) + 3|0);
  HEAP8[$22>>0] = 10;
  STACKTOP = sp;return;
  break;
 }
 case 12:  {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 & 240;
  $10 = $9 >> 4;
  $11 = ($10*10)|0;
  $12 = $0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 & 15;
  $17 = (($11) + ($16))|0;
  $18 = $17&255;
  $19 = $0;
  $20 = ((($19)) + 4|0);
  HEAP8[$20>>0] = $18;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $88 = $0;
  $89 = ((($88)) + 3|0);
  HEAP8[$89>>0] = 0;
  $90 = $0;
  $91 = ((($90)) + 4|0);
  HEAP8[$91>>0] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _stream_read4($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $5 ^ 1;
 $7 = $6&1;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = $1;
 if ($13) {
  $19 = HEAP32[$14>>2]|0;
  $20 = (_hio_read8($19)|0);
  $21 = $1;
  $22 = ((($21)) + 8|0);
  HEAP8[$22>>0] = $20;
  $23 = $1;
  $24 = ((($23)) + 8|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 >> 4;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 } else {
  $15 = ((($14)) + 8|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 & 15;
  $0 = $18;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _stream_read8($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_stream_read4($1)|0);
 $a = $2;
 $3 = $0;
 $4 = (_stream_read4($3)|0);
 $b = $4;
 $5 = $a;
 $6 = $5 << 4;
 $7 = $b;
 $8 = $6 | $7;
 STACKTOP = sp;return ($8|0);
}
function _stream_read16($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (_stream_read4($1)|0);
 $a = $2;
 $3 = $0;
 $4 = (_stream_read4($3)|0);
 $b = $4;
 $5 = $0;
 $6 = (_stream_read4($5)|0);
 $c = $6;
 $7 = $0;
 $8 = (_stream_read4($7)|0);
 $d = $8;
 $9 = $a;
 $10 = $9 << 12;
 $11 = $b;
 $12 = $11 << 8;
 $13 = $10 | $12;
 $14 = $c;
 $15 = $14 << 4;
 $16 = $13 | $15;
 $17 = $d;
 $18 = $16 | $17;
 $19 = $18&65535;
 STACKTOP = sp;return ($19|0);
}
function _dbm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1145195824);
 if ($6) {
  $0 = -1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $7 = $1;
  (_hio_seek($7,12,1)|0);
  $8 = $1;
  $9 = $2;
  _read_title($8,$9,44);
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _dbm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $handle = 0, $i = 0, $mod = 0, $name = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $name = sp + 48|0;
 $data = sp + 8|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 HEAP32[$data>>2] = 0;
 $8 = $2;
 $9 = (_hio_read16b($8)|0);
 $version = $9;
 $10 = $2;
 (_hio_seek($10,10,1)|0);
 $11 = $2;
 (_hio_read($name,1,44,$11)|0);
 $12 = (_iff_new()|0);
 $handle = $12;
 $13 = $handle;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $15 = $handle;
 $16 = (_iff_register($15,6776,266)|0);
 $ret = $16;
 $17 = $handle;
 $18 = (_iff_register($17,6784,267)|0);
 $19 = $ret;
 $20 = $19 | $18;
 $ret = $20;
 $21 = $handle;
 $22 = (_iff_register($21,7200,268)|0);
 $23 = $ret;
 $24 = $23 | $22;
 $ret = $24;
 $25 = $handle;
 $26 = (_iff_register($25,7192,269)|0);
 $27 = $ret;
 $28 = $27 | $26;
 $ret = $28;
 $29 = $handle;
 $30 = (_iff_register($29,6792,270)|0);
 $31 = $ret;
 $32 = $31 | $30;
 $ret = $32;
 $33 = $handle;
 $34 = (_iff_register($33,6800,271)|0);
 $35 = $ret;
 $36 = $35 | $34;
 $ret = $36;
 $37 = $ret;
 $38 = ($37|0)!=(0);
 if ($38) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $39 = $mod;
 (_strncpy(($39|0),($name|0),64)|0);
 $40 = $mod;
 $41 = ((($40)) + 64|0);
 $42 = $version;
 $43 = $42&65535;
 $44 = $43 >> 8;
 $45 = $version;
 $46 = $45&65535;
 $47 = $46 & 255;
 HEAP32[$vararg_buffer>>2] = $44;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $47;
 (_snprintf($41,64,6808,$vararg_buffer)|0);
 $48 = $handle;
 $49 = $1;
 $50 = $2;
 $51 = (_iff_load($48,$49,$50,$data)|0);
 $52 = ($51|0)<(0);
 $53 = $handle;
 _iff_release($53);
 if ($52) {
  $0 = -1;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = $mod;
  $56 = ((($55)) + 136|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54|0)<($57|0);
  if (!($58)) {
   break;
  }
  $59 = $i;
  $60 = $mod;
  $61 = ((($60)) + 184|0);
  $62 = (($61) + (($59*12)|0)|0);
  HEAP32[$62>>2] = 128;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $0 = 0;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _get_info316($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = ((($6)) + 140|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = -1;
  $67 = $0;
  STACKTOP = sp;return ($67|0);
 }
 $10 = $3;
 $11 = (_hio_read16b($10)|0);
 $12 = $11&65535;
 $val = $12;
 $13 = $val;
 $14 = ($13|0)<(0);
 $15 = $val;
 $16 = ($15|0)>(255);
 $or$cond = $14 | $16;
 if (!($or$cond)) {
  $17 = $val;
  $18 = $mod;
  $19 = ((($18)) + 140|0);
  HEAP32[$19>>2] = $17;
  $20 = $3;
  $21 = (_hio_read16b($20)|0);
  $22 = $21&65535;
  $val = $22;
  $23 = $val;
  $24 = ($23|0)<(0);
  if (!($24)) {
   $25 = $val;
   $26 = $mod;
   $27 = ((($26)) + 144|0);
   HEAP32[$27>>2] = $25;
   $28 = $3;
   (_hio_read16b($28)|0);
   $29 = $3;
   $30 = (_hio_read16b($29)|0);
   $31 = $30&65535;
   $val = $31;
   $32 = $val;
   $33 = ($32|0)<(0);
   $34 = $val;
   $35 = ($34|0)>(256);
   $or$cond3 = $33 | $35;
   do {
    if (!($or$cond3)) {
     $36 = $val;
     $37 = $mod;
     $38 = ((($37)) + 128|0);
     HEAP32[$38>>2] = $36;
     $39 = $3;
     $40 = (_hio_read16b($39)|0);
     $41 = $40&65535;
     $val = $41;
     $42 = $val;
     $43 = ($42|0)<(0);
     $44 = $val;
     $45 = ($44|0)>(64);
     $or$cond5 = $43 | $45;
     if ($or$cond5) {
      $61 = $mod;
      $62 = ((($61)) + 128|0);
      HEAP32[$62>>2] = 0;
      break;
     }
     $46 = $val;
     $47 = $mod;
     $48 = ((($47)) + 136|0);
     HEAP32[$48>>2] = $46;
     $49 = $mod;
     $50 = ((($49)) + 128|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $mod;
     $53 = ((($52)) + 136|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = Math_imul($51, $54)|0;
     $56 = $mod;
     $57 = ((($56)) + 132|0);
     HEAP32[$57>>2] = $55;
     $58 = $mod;
     $59 = (_instrument_init($58)|0);
     $60 = ($59|0)<(0);
     if ($60) {
      $0 = -1;
      $67 = $0;
      STACKTOP = sp;return ($67|0);
     } else {
      $0 = 0;
      $67 = $0;
      STACKTOP = sp;return ($67|0);
     }
    }
   } while(0);
   $63 = $mod;
   $64 = ((($63)) + 144|0);
   HEAP32[$64>>2] = 0;
  }
  $65 = $mod;
  $66 = ((($65)) + 140|0);
  HEAP32[$66>>2] = 0;
 }
 $0 = -1;
 $67 = $0;
 STACKTOP = sp;return ($67|0);
}
function _get_song318($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $data = 0, $i = 0, $mod = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 32|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $data;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $10 = $data;
 HEAP32[$10>>2] = 1;
 $11 = $3;
 (_hio_read($buffer,44,1,$11)|0);
 $12 = $3;
 $13 = (_hio_read16b($12)|0);
 $14 = $13&65535;
 $15 = $mod;
 $16 = ((($15)) + 156|0);
 HEAP32[$16>>2] = $14;
 $17 = $mod;
 $18 = ((($17)) + 156|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(256);
 if ($20) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $mod;
  $23 = ((($22)) + 156|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $3;
  $27 = (_hio_read16b($26)|0);
  $28 = $27&255;
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 952|0);
  $32 = (($31) + ($29)|0);
  HEAP8[$32>>0] = $28;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _get_inst320($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c2spd = 0, $flags = 0, $i = 0, $mod = 0;
 var $snum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 40|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $mod;
  $8 = ((($7)) + 140|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 11;
   break;
  }
  $11 = $i;
  $12 = $mod;
  $13 = ((($12)) + 176|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + (($11*764)|0)|0);
  $16 = ((($15)) + 36|0);
  HEAP32[$16>>2] = 1;
  $17 = $mod;
  $18 = $i;
  $19 = (_subinstrument_alloc($17,$18,1)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   label = 4;
   break;
  }
  $21 = $3;
  (_hio_read($buffer,30,1,$21)|0);
  $22 = $mod;
  $23 = $i;
  (_instrument_name($22,$23,$buffer,30)|0);
  $24 = $3;
  $25 = (_hio_read16b($24)|0);
  $26 = $25&65535;
  $snum = $26;
  $27 = $snum;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $29 = $snum;
   $30 = $mod;
   $31 = ((($30)) + 144|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29|0)>($32|0);
   if (!($33)) {
    $34 = $snum;
    $35 = (($34) + -1)|0;
    $snum = $35;
    $36 = $i;
    $37 = $mod;
    $38 = ((($37)) + 176|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + (($36*764)|0)|0);
    $41 = ((($40)) + 756|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 40|0);
    HEAP32[$43>>2] = $35;
    $44 = $3;
    $45 = (_hio_read16b($44)|0);
    $46 = $45&65535;
    $47 = $i;
    $48 = $mod;
    $49 = ((($48)) + 176|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + (($47*764)|0)|0);
    $52 = ((($51)) + 756|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$53>>2] = $46;
    $54 = $3;
    $55 = (_hio_read32b($54)|0);
    $c2spd = $55;
    $56 = $3;
    $57 = (_hio_read32b($56)|0);
    $58 = $snum;
    $59 = $mod;
    $60 = ((($59)) + 180|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + (($58*52)|0)|0);
    $63 = ((($62)) + 36|0);
    HEAP32[$63>>2] = $57;
    $64 = $i;
    $65 = $mod;
    $66 = ((($65)) + 180|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + (($64*52)|0)|0);
    $69 = ((($68)) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $3;
    $72 = (_hio_read32b($71)|0);
    $73 = (($70) + ($72))|0;
    $74 = $snum;
    $75 = $mod;
    $76 = ((($75)) + 180|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + (($74*52)|0)|0);
    $79 = ((($78)) + 40|0);
    HEAP32[$79>>2] = $73;
    $80 = $3;
    $81 = (_hio_read16b($80)|0);
    $82 = $81 << 16 >> 16;
    $83 = (128 + ($82))|0;
    $84 = $i;
    $85 = $mod;
    $86 = ((($85)) + 176|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + (($84*764)|0)|0);
    $89 = ((($88)) + 756|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 8|0);
    HEAP32[$91>>2] = $83;
    $92 = $i;
    $93 = $mod;
    $94 = ((($93)) + 176|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + (($92*764)|0)|0);
    $97 = ((($96)) + 756|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($98)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)>(255);
    if ($101) {
     $102 = $i;
     $103 = $mod;
     $104 = ((($103)) + 176|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($105) + (($102*764)|0)|0);
     $107 = ((($106)) + 756|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ((($108)) + 8|0);
     HEAP32[$109>>2] = 255;
    }
    $110 = $3;
    $111 = (_hio_read16b($110)|0);
    $112 = $111&65535;
    $flags = $112;
    $113 = $flags;
    $114 = $113 & 3;
    $115 = ($114|0)!=(0);
    $116 = $115 ? 2 : 0;
    $117 = $snum;
    $118 = $mod;
    $119 = ((($118)) + 180|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (($120) + (($117*52)|0)|0);
    $122 = ((($121)) + 44|0);
    HEAP32[$122>>2] = $116;
    $123 = $flags;
    $124 = $123 & 2;
    $125 = ($124|0)!=(0);
    $126 = $125 ? 4 : 0;
    $127 = $snum;
    $128 = $mod;
    $129 = ((($128)) + 180|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) + (($127*52)|0)|0);
    $132 = ((($131)) + 44|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $133 | $126;
    HEAP32[$132>>2] = $134;
    $135 = $c2spd;
    $136 = $i;
    $137 = $mod;
    $138 = ((($137)) + 176|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = (($139) + (($136*764)|0)|0);
    $141 = ((($140)) + 756|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ((($142)) + 12|0);
    $144 = $i;
    $145 = $mod;
    $146 = ((($145)) + 176|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + (($144*764)|0)|0);
    $149 = ((($148)) + 756|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($150)) + 16|0);
    _c2spd_to_note($135,$143,$151);
   }
  }
  $152 = $i;
  $153 = (($152) + 1)|0;
  $i = $153;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
 }
 return (0)|0;
}
function _get_patt322($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c = 0, $dummy = 0, $event = 0, $i = 0, $mod = 0, $n = 0, $r = 0, $sz = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp + 56|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $mod;
 $7 = (_pattern_init($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $mod;
  $11 = ((($10)) + 128|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   label = 38;
   break;
  }
  $14 = $mod;
  $15 = $i;
  $16 = $3;
  $17 = (_hio_read16b($16)|0);
  $18 = $17&65535;
  $19 = (_pattern_tracks_alloc($14,$15,$18)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   label = 6;
   break;
  }
  $21 = $3;
  $22 = (_hio_read32b($21)|0);
  $sz = $22;
  $r = 0;
  while(1) {
   $23 = $sz;
   $24 = ($23|0)>(0);
   if (!($24)) {
    break;
   }
   $25 = $3;
   $26 = (_hio_read8($25)|0);
   $27 = $26&255;
   $c = $27;
   $28 = $sz;
   $29 = (($28) + -1)|0;
   $sz = $29;
   $30 = ($29|0)<=(0);
   if ($30) {
    break;
   }
   $31 = $c;
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = $r;
    $34 = (($33) + 1)|0;
    $r = $34;
    continue;
   }
   $35 = $c;
   $36 = (($35) + -1)|0;
   $c = $36;
   $37 = $3;
   $38 = (_hio_read8($37)|0);
   $39 = $38&255;
   $n = $39;
   $40 = $sz;
   $41 = (($40) + -1)|0;
   $sz = $41;
   $42 = ($41|0)<=(0);
   if ($42) {
    break;
   }
   $43 = $c;
   $44 = $mod;
   $45 = ((($44)) + 136|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($43|0)>=($46|0);
   if ($47) {
    label = 15;
   } else {
    $48 = $r;
    $49 = $i;
    $50 = $mod;
    $51 = ((($50)) + 168|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($49<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[$54>>2]|0;
    $56 = ($48|0)>=($55|0);
    if ($56) {
     label = 15;
    } else {
     $57 = $r;
     $58 = $c;
     $59 = $i;
     $60 = $1;
     $61 = ((($60)) + 168|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + ($59<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($64)) + 4|0);
     $66 = (($65) + ($58<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $1;
     $69 = ((($68)) + 172|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($72)) + 4|0);
     $74 = (($73) + ($57<<3)|0);
     $event = $74;
    }
   }
   if ((label|0) == 15) {
    label = 0;
    $event = $dummy;
   }
   $75 = $event;
   ;HEAP8[$75>>0]=0|0;HEAP8[$75+1>>0]=0|0;HEAP8[$75+2>>0]=0|0;HEAP8[$75+3>>0]=0|0;HEAP8[$75+4>>0]=0|0;HEAP8[$75+5>>0]=0|0;HEAP8[$75+6>>0]=0|0;HEAP8[$75+7>>0]=0|0;
   $76 = $n;
   $77 = $76 & 1;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = $3;
    $80 = (_hio_read8($79)|0);
    $x = $80;
    $81 = $x;
    $82 = $81&255;
    $83 = $82 & 240;
    $84 = $83 >> 4;
    $85 = ($84*12)|0;
    $86 = (13 + ($85))|0;
    $87 = $x;
    $88 = $87&255;
    $89 = $88 & 15;
    $90 = (($86) + ($89))|0;
    $91 = $90&255;
    $92 = $event;
    HEAP8[$92>>0] = $91;
    $93 = $sz;
    $94 = (($93) + -1)|0;
    $sz = $94;
    $95 = ($94|0)<=(0);
    if ($95) {
     break;
    }
   }
   $96 = $n;
   $97 = $96 & 2;
   $98 = ($97|0)!=(0);
   if ($98) {
    $99 = $3;
    $100 = (_hio_read8($99)|0);
    $101 = $event;
    $102 = ((($101)) + 1|0);
    HEAP8[$102>>0] = $100;
    $103 = $sz;
    $104 = (($103) + -1)|0;
    $sz = $104;
    $105 = ($104|0)<=(0);
    if ($105) {
     break;
    }
   }
   $106 = $n;
   $107 = $106 & 4;
   $108 = ($107|0)!=(0);
   if ($108) {
    $109 = $3;
    $110 = (_hio_read8($109)|0);
    $111 = $event;
    $112 = ((($111)) + 3|0);
    HEAP8[$112>>0] = $110;
    $113 = $sz;
    $114 = (($113) + -1)|0;
    $sz = $114;
    $115 = ($114|0)<=(0);
    if ($115) {
     break;
    }
   }
   $116 = $n;
   $117 = $116 & 8;
   $118 = ($117|0)!=(0);
   if ($118) {
    $119 = $3;
    $120 = (_hio_read8($119)|0);
    $121 = $event;
    $122 = ((($121)) + 4|0);
    HEAP8[$122>>0] = $120;
    $123 = $sz;
    $124 = (($123) + -1)|0;
    $sz = $124;
    $125 = ($124|0)<=(0);
    if ($125) {
     break;
    }
   }
   $126 = $n;
   $127 = $126 & 16;
   $128 = ($127|0)!=(0);
   if ($128) {
    $129 = $3;
    $130 = (_hio_read8($129)|0);
    $131 = $event;
    $132 = ((($131)) + 5|0);
    HEAP8[$132>>0] = $130;
    $133 = $sz;
    $134 = (($133) + -1)|0;
    $sz = $134;
    $135 = ($134|0)<=(0);
    if ($135) {
     break;
    }
   }
   $136 = $n;
   $137 = $136 & 32;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = $3;
    $140 = (_hio_read8($139)|0);
    $141 = $event;
    $142 = ((($141)) + 6|0);
    HEAP8[$142>>0] = $140;
    $143 = $sz;
    $144 = (($143) + -1)|0;
    $sz = $144;
    $145 = ($144|0)<=(0);
    if ($145) {
     break;
    }
   }
   $146 = $event;
   $147 = ((($146)) + 3|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = ($149|0)==(28);
   if ($150) {
    $151 = $event;
    $152 = ((($151)) + 3|0);
    HEAP8[$152>>0] = -85;
   }
   $153 = $event;
   $154 = ((($153)) + 3|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = ($156|0)>(28);
   if ($157) {
    $158 = $event;
    $159 = ((($158)) + 6|0);
    HEAP8[$159>>0] = 0;
    $160 = $event;
    $161 = ((($160)) + 3|0);
    HEAP8[$161>>0] = 0;
   }
   $162 = $event;
   $163 = ((($162)) + 5|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = ($165|0)==(28);
   if ($166) {
    $167 = $event;
    $168 = ((($167)) + 5|0);
    HEAP8[$168>>0] = -85;
   }
   $169 = $event;
   $170 = ((($169)) + 5|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = ($172|0)>(28);
   if (!($173)) {
    continue;
   }
   $174 = $event;
   $175 = ((($174)) + 6|0);
   HEAP8[$175>>0] = 0;
   $176 = $event;
   $177 = ((($176)) + 5|0);
   HEAP8[$177>>0] = 0;
  }
  $178 = $i;
  $179 = (($178) + 1)|0;
  $i = $179;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 else if ((label|0) == 38) {
  $0 = 0;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 return (0)|0;
}
function _get_smpl($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $flags = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $mod;
  $8 = ((($7)) + 144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = $3;
  $12 = (_hio_read32b($11)|0);
  $flags = $12;
  $13 = $3;
  $14 = (_hio_read32b($13)|0);
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 180|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($15*52)|0)|0);
  $20 = ((($19)) + 32|0);
  HEAP32[$20>>2] = $14;
  $21 = $flags;
  $22 = $21 & 2;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $i;
   $25 = $mod;
   $26 = ((($25)) + 180|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + (($24*52)|0)|0);
   $29 = ((($28)) + 44|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 | 1;
   HEAP32[$29>>2] = $31;
  }
  $32 = $flags;
  $33 = $32 & 4;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $i;
   $36 = $mod;
   $37 = ((($36)) + 180|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + (($35*52)|0)|0);
   $40 = ((($39)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 << 2;
   HEAP32[$40>>2] = $42;
   $43 = $3;
   $44 = $i;
   $45 = $mod;
   $46 = ((($45)) + 180|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + (($44*52)|0)|0);
   $49 = ((($48)) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   (_hio_seek($43,$50,1)|0);
  } else {
   $51 = $1;
   $52 = $3;
   $53 = $i;
   $54 = $mod;
   $55 = ((($54)) + 180|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + (($53*52)|0)|0);
   $58 = (_load_sample($51,$52,64,$57,0)|0);
   $59 = ($58|0)<(0);
   if ($59) {
    label = 8;
    break;
   }
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _get_venv($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $i = 0, $ins = 0;
 var $j = 0, $mod = 0, $nenv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $nenv = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $nenv;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = (_hio_read16b($11)|0);
  $13 = $12&65535;
  $14 = (($13) - 1)|0;
  $ins = $14;
  $15 = $2;
  $16 = (_hio_read8($15)|0);
  $17 = $16&255;
  $18 = $17 & 7;
  $19 = $ins;
  $20 = $mod;
  $21 = ((($20)) + 176|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($19*764)|0)|0);
  $24 = ((($23)) + 44|0);
  HEAP32[$24>>2] = $18;
  $25 = $2;
  $26 = (_hio_read8($25)|0);
  $27 = $26&255;
  $28 = $ins;
  $29 = $mod;
  $30 = ((($29)) + 176|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*764)|0)|0);
  $33 = ((($32)) + 44|0);
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $27;
  $35 = $2;
  $36 = (_hio_read8($35)|0);
  $37 = $36&255;
  $38 = $ins;
  $39 = $mod;
  $40 = ((($39)) + 176|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + (($38*764)|0)|0);
  $43 = ((($42)) + 44|0);
  $44 = ((($43)) + 12|0);
  HEAP32[$44>>2] = $37;
  $45 = $2;
  $46 = (_hio_read8($45)|0);
  $47 = $46&255;
  $48 = $ins;
  $49 = $mod;
  $50 = ((($49)) + 176|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + (($48*764)|0)|0);
  $53 = ((($52)) + 44|0);
  $54 = ((($53)) + 20|0);
  HEAP32[$54>>2] = $47;
  $55 = $2;
  $56 = (_hio_read8($55)|0);
  $57 = $56&255;
  $58 = $ins;
  $59 = $mod;
  $60 = ((($59)) + 176|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + (($58*764)|0)|0);
  $63 = ((($62)) + 44|0);
  $64 = ((($63)) + 24|0);
  HEAP32[$64>>2] = $57;
  $65 = $2;
  (_hio_read8($65)|0);
  $j = 0;
  while(1) {
   $66 = $j;
   $67 = ($66|0)<(32);
   if (!($67)) {
    break;
   }
   $68 = $2;
   $69 = (_hio_read16b($68)|0);
   $70 = $j;
   $71 = $70<<1;
   $72 = (($71) + 0)|0;
   $73 = $ins;
   $74 = $mod;
   $75 = ((($74)) + 176|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + (($73*764)|0)|0);
   $78 = ((($77)) + 44|0);
   $79 = ((($78)) + 28|0);
   $80 = (($79) + ($72<<1)|0);
   HEAP16[$80>>1] = $69;
   $81 = $2;
   $82 = (_hio_read16b($81)|0);
   $83 = $j;
   $84 = $83<<1;
   $85 = (($84) + 1)|0;
   $86 = $ins;
   $87 = $mod;
   $88 = ((($87)) + 176|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + (($86*764)|0)|0);
   $91 = ((($90)) + 44|0);
   $92 = ((($91)) + 28|0);
   $93 = (($92) + ($85<<1)|0);
   HEAP16[$93>>1] = $82;
   $94 = $j;
   $95 = (($94) + 1)|0;
   $j = $95;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 STACKTOP = sp;return 0;
}
function _umx_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0;
 var $i = 0, $id = 0, $offset = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $offset = -1;
 $b = $buf;
 $4 = $1;
 $5 = (_hio_read($buf,1,1500,$4)|0);
 $6 = ($5>>>0)<(1500);
 if ($6) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $7 = $b;
 $8 = (_readmem32b($7)|0);
 $id = $8;
 $9 = $id;
 $10 = ($9|0)!=(-1048368482);
 if ($10) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(1500);
  if (!($12)) {
   break;
  }
  $13 = $b;
  $14 = (_readmem32b($13)|0);
  $id = $14;
  $15 = $b;
  $16 = (_memcmp($15,6872,16)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   label = 8;
   break;
  }
  $19 = $id;
  $20 = ($19|0)==(1229803597);
  $21 = $i;
  if ($20) {
   label = 10;
   break;
  }
  $22 = ($21|0)>(44);
  $23 = $id;
  $24 = ($23|0)==(1396920909);
  $or$cond = $22 & $24;
  $25 = $i;
  if ($or$cond) {
   label = 12;
   break;
  }
  $27 = ($25|0)>(1080);
  $28 = $id;
  $29 = ($28|0)==(1294879534);
  $or$cond3 = $27 & $29;
  $30 = $i;
  if ($or$cond3) {
   label = 14;
   break;
  }
  $32 = (($30) + 1)|0;
  $i = $32;
  $33 = $b;
  $34 = ((($33)) + 1|0);
  $b = $34;
 }
 if ((label|0) == 8) {
  $18 = $i;
  $offset = $18;
 }
 else if ((label|0) == 10) {
  $offset = $21;
 }
 else if ((label|0) == 12) {
  $26 = (($25) - 44)|0;
  $offset = $26;
 }
 else if ((label|0) == 14) {
  $31 = (($30) - 1080)|0;
  $offset = $31;
 }
 $35 = $offset;
 $36 = ($35|0)<(0);
 if ($36) {
  $0 = -1;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 } else {
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _umx_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buf = 0, $i = 0, $id = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 28|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $b = $buf;
 $4 = $2;
 $5 = $3;
 (_hio_seek($4,$5,0)|0);
 $6 = $2;
 (_hio_read($buf,1,1500,$6)|0);
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(1500);
  if (!($8)) {
   label = 12;
   break;
  }
  $9 = $b;
  $10 = (_readmem32b($9)|0);
  $id = $10;
  $11 = $b;
  $12 = (_memcmp($11,6872,16)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   label = 4;
   break;
  }
  $19 = $id;
  $20 = ($19|0)==(1229803597);
  if ($20) {
   label = 6;
   break;
  }
  $26 = $i;
  $27 = ($26|0)>(44);
  $28 = $id;
  $29 = ($28|0)==(1396920909);
  $or$cond = $27 & $29;
  if ($or$cond) {
   label = 8;
   break;
  }
  $36 = $i;
  $37 = ($36|0)>(1080);
  $38 = $id;
  $39 = ($38|0)==(1294879534);
  $or$cond3 = $37 & $39;
  if ($or$cond3) {
   label = 10;
   break;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
  $48 = $b;
  $49 = ((($48)) + 1|0);
  $b = $49;
 }
 if ((label|0) == 4) {
  $14 = HEAP32[(1256)>>2]|0;
  $15 = $1;
  $16 = $2;
  $17 = $i;
  $18 = (FUNCTION_TABLE_iiii[$14 & 255]($15,$16,$17)|0);
  $0 = $18;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 6) {
  $21 = HEAP32[(3528)>>2]|0;
  $22 = $1;
  $23 = $2;
  $24 = $i;
  $25 = (FUNCTION_TABLE_iiii[$21 & 255]($22,$23,$24)|0);
  $0 = $25;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 8) {
  $30 = HEAP32[(2072)>>2]|0;
  $31 = $1;
  $32 = $2;
  $33 = $i;
  $34 = (($33) - 44)|0;
  $35 = (FUNCTION_TABLE_iiii[$30 & 255]($31,$32,$34)|0);
  $0 = $35;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 10) {
  $40 = HEAP32[(1688)>>2]|0;
  $41 = $1;
  $42 = $2;
  $43 = $i;
  $44 = (($43) - 1080)|0;
  $45 = (FUNCTION_TABLE_iiii[$40 & 255]($41,$42,$44)|0);
  $0 = $45;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _fix_effect($fxt,$fxp) {
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fxt;
 $1 = $fxp;
 $2 = $0;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 do {
  switch ($4|0) {
  case 8:  {
   $6 = $0;
   HEAP8[$6>>0] = 29;
   break;
  }
  case 20:  {
   $12 = $0;
   HEAP8[$12>>0] = -84;
   break;
  }
  case 31:  {
   $15 = $0;
   HEAP8[$15>>0] = -85;
   break;
  }
  case 15: case 14: case 13: case 12: case 11: case 10: case 9: case 7: case 6: case 5: case 4: case 3: case 2: case 1:  {
   break;
  }
  case 18:  {
   $10 = $0;
   HEAP8[$10>>0] = 27;
   break;
  }
  case 17:  {
   $8 = $1;
   HEAP8[$8>>0] = 0;
   $9 = $0;
   HEAP8[$9>>0] = 0;
   break;
  }
  case 16:  {
   $7 = $0;
   HEAP8[$7>>0] = -76;
   break;
  }
  case 0:  {
   $5 = $1;
   HEAP8[$5>>0] = 0;
   break;
  }
  case 19:  {
   $11 = $0;
   HEAP8[$11>>0] = 16;
   break;
  }
  case 30:  {
   $13 = $1;
   HEAP8[$13>>0] = 0;
   $14 = $0;
   HEAP8[$14>>0] = 0;
   break;
  }
  default: {
   $16 = $1;
   HEAP8[$16>>0] = 0;
   $17 = $0;
   HEAP8[$17>>0] = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _gdm_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1195658750);
 if ($6) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $1;
 $8 = $3;
 $9 = (($8) + 71)|0;
 (_hio_seek($7,$9,0)|0);
 $10 = $1;
 $11 = (_hio_read32b($10)|0);
 $12 = ($11|0)!=(1196246611);
 if ($12) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $1;
  $14 = $3;
  $15 = (($14) + 4)|0;
  (_hio_seek($13,$15,0)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,32);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _gdm_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c = 0, $c2 = 0, $c4spd = 0, $event = 0, $flg = 0, $i = 0, $ins_ofs = 0, $k = 0, $k4 = 0, $len = 0, $len1 = 0, $mod = 0, $or$cond = 0, $ord_ofs = 0, $pan = 0, $panmap = 0;
 var $pat_ofs = 0, $r = 0, $r3 = 0, $smp_ofs = 0, $tracker = 0, $tvmaj = 0, $tvmin = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $vermaj = 0, $vermin = 0, $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer = sp;
 $buffer = sp + 176|0;
 $panmap = sp + 144|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $mod;
 $9 = $2;
 (_hio_read($8,1,32,$9)|0);
 $10 = $2;
 (_hio_seek($10,32,1)|0);
 $11 = $2;
 (_hio_seek($11,7,1)|0);
 $12 = $2;
 $13 = (_hio_read8($12)|0);
 $14 = $13&255;
 $vermaj = $14;
 $15 = $2;
 $16 = (_hio_read8($15)|0);
 $17 = $16&255;
 $vermin = $17;
 $18 = $2;
 $19 = (_hio_read16l($18)|0);
 $20 = $19&65535;
 $tracker = $20;
 $21 = $2;
 $22 = (_hio_read8($21)|0);
 $23 = $22&255;
 $tvmaj = $23;
 $24 = $2;
 $25 = (_hio_read8($24)|0);
 $26 = $25&255;
 $tvmin = $26;
 $27 = $tracker;
 $28 = ($27|0)==(0);
 $29 = $1;
 $30 = $vermaj;
 $31 = $vermin;
 $32 = $tvmaj;
 $33 = $tvmin;
 if ($28) {
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr2>>2] = $31;
  $vararg_ptr3 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $32;
  $vararg_ptr4 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr4>>2] = $33;
  _set_type($29,6936,$vararg_buffer);
 } else {
  HEAP32[$vararg_buffer5>>2] = $30;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $31;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $32;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $33;
  _set_type($29,6968,$vararg_buffer5);
 }
 $34 = $2;
 (_hio_read($panmap,32,1,$34)|0);
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ($35|0)<(32);
  if (!($36)) {
   break;
  }
  $37 = $i;
  $38 = (($panmap) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)==(255);
  $42 = $i;
  $43 = (($panmap) + ($42)|0);
  if ($41) {
   HEAP8[$43>>0] = 8;
   $44 = $i;
   $45 = $mod;
   $46 = ((($45)) + 184|0);
   $47 = (($46) + (($44*12)|0)|0);
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = 0;
   $49 = $i;
   $50 = $mod;
   $51 = ((($50)) + 184|0);
   $52 = (($51) + (($49*12)|0)|0);
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 | 2;
   HEAP32[$53>>2] = $55;
  } else {
   $56 = HEAP8[$43>>0]|0;
   $57 = $56&255;
   $58 = ($57|0)==(16);
   if ($58) {
    $59 = $i;
    $60 = (($panmap) + ($59)|0);
    HEAP8[$60>>0] = 8;
   }
  }
  $61 = $i;
  $62 = (($panmap) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (($64) - 8)|0;
  $66 = $65<<4;
  $67 = (128 + ($66))|0;
  $68 = $i;
  $69 = $mod;
  $70 = ((($69)) + 184|0);
  $71 = (($70) + (($68*12)|0)|0);
  HEAP32[$71>>2] = $67;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $74 = $2;
 $75 = (_hio_read8($74)|0);
 $76 = $75&255;
 $77 = $mod;
 $78 = ((($77)) + 164|0);
 HEAP32[$78>>2] = $76;
 $79 = $2;
 $80 = (_hio_read8($79)|0);
 $81 = $80&255;
 $82 = $mod;
 $83 = ((($82)) + 148|0);
 HEAP32[$83>>2] = $81;
 $84 = $2;
 $85 = (_hio_read8($84)|0);
 $86 = $85&255;
 $87 = $mod;
 $88 = ((($87)) + 152|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 (_hio_read16l($89)|0);
 $90 = $2;
 $91 = (_hio_read32l($90)|0);
 $ord_ofs = $91;
 $92 = $2;
 $93 = (_hio_read8($92)|0);
 $94 = $93&255;
 $95 = (($94) + 1)|0;
 $96 = $mod;
 $97 = ((($96)) + 156|0);
 HEAP32[$97>>2] = $95;
 $98 = $2;
 $99 = (_hio_read32l($98)|0);
 $pat_ofs = $99;
 $100 = $2;
 $101 = (_hio_read8($100)|0);
 $102 = $101&255;
 $103 = (($102) + 1)|0;
 $104 = $mod;
 $105 = ((($104)) + 128|0);
 HEAP32[$105>>2] = $103;
 $106 = $2;
 $107 = (_hio_read32l($106)|0);
 $ins_ofs = $107;
 $108 = $2;
 $109 = (_hio_read32l($108)|0);
 $smp_ofs = $109;
 $110 = $2;
 $111 = (_hio_read8($110)|0);
 $112 = $111&255;
 $113 = (($112) + 1)|0;
 $114 = $mod;
 $115 = ((($114)) + 144|0);
 HEAP32[$115>>2] = $113;
 $116 = $mod;
 $117 = ((($116)) + 140|0);
 HEAP32[$117>>2] = $113;
 $118 = $2;
 $119 = $3;
 $120 = $ord_ofs;
 $121 = (($119) + ($120))|0;
 (_hio_seek($118,$121,0)|0);
 $i = 0;
 while(1) {
  $122 = $i;
  $123 = $mod;
  $124 = ((($123)) + 156|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($122|0)<($125|0);
  $127 = $2;
  if (!($126)) {
   break;
  }
  $128 = (_hio_read8($127)|0);
  $129 = $i;
  $130 = $mod;
  $131 = ((($130)) + 952|0);
  $132 = (($131) + ($129)|0);
  HEAP8[$132>>0] = $128;
  $133 = $i;
  $134 = (($133) + 1)|0;
  $i = $134;
 }
 $135 = $3;
 $136 = $ins_ofs;
 $137 = (($135) + ($136))|0;
 (_hio_seek($127,$137,0)|0);
 $138 = $mod;
 $139 = (_instrument_init($138)|0);
 $140 = ($139|0)<(0);
 if ($140) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = $mod;
  $143 = ((($142)) + 140|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($141|0)<($144|0);
  if (!($145)) {
   label = 31;
   break;
  }
  $146 = $mod;
  $147 = $i;
  $148 = (_subinstrument_alloc($146,$147,1)|0);
  $149 = ($148|0)<(0);
  if ($149) {
   label = 19;
   break;
  }
  $150 = $2;
  $151 = (_hio_read($buffer,1,32,$150)|0);
  $152 = ($151|0)!=(32);
  if ($152) {
   label = 21;
   break;
  }
  $153 = $mod;
  $154 = $i;
  (_instrument_name($153,$154,$buffer,32)|0);
  $155 = $2;
  (_hio_seek($155,12,1)|0);
  $156 = $2;
  (_hio_read8($156)|0);
  $157 = $2;
  $158 = (_hio_read32l($157)|0);
  $159 = $i;
  $160 = $mod;
  $161 = ((($160)) + 180|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + (($159*52)|0)|0);
  $164 = ((($163)) + 32|0);
  HEAP32[$164>>2] = $158;
  $165 = $2;
  $166 = (_hio_read32l($165)|0);
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 180|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*52)|0)|0);
  $172 = ((($171)) + 36|0);
  HEAP32[$172>>2] = $166;
  $173 = $2;
  $174 = (_hio_read32l($173)|0);
  $175 = $i;
  $176 = $mod;
  $177 = ((($176)) + 180|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($178) + (($175*52)|0)|0);
  $180 = ((($179)) + 40|0);
  HEAP32[$180>>2] = $174;
  $181 = $2;
  $182 = (_hio_read8($181)|0);
  $183 = $182&255;
  $flg = $183;
  $184 = $2;
  $185 = (_hio_read16l($184)|0);
  $186 = $185&65535;
  $c4spd = $186;
  $187 = $2;
  $188 = (_hio_read8($187)|0);
  $189 = $188&255;
  $vol = $189;
  $190 = $2;
  $191 = (_hio_read8($190)|0);
  $192 = $191&255;
  $pan = $192;
  $193 = $vol;
  $194 = ($193|0)>(64);
  $195 = $vol;
  $196 = $194 ? 64 : $195;
  $197 = $i;
  $198 = $mod;
  $199 = ((($198)) + 176|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = (($200) + (($197*764)|0)|0);
  $202 = ((($201)) + 756|0);
  $203 = HEAP32[$202>>2]|0;
  HEAP32[$203>>2] = $196;
  $204 = $pan;
  $205 = ($204|0)>(15);
  if ($205) {
   $218 = 128;
  } else {
   $206 = $pan;
   $207 = (($206) - 8)|0;
   $208 = $207<<4;
   $209 = (128 + ($208))|0;
   $218 = $209;
  }
  $210 = $i;
  $211 = $mod;
  $212 = ((($211)) + 176|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + (($210*764)|0)|0);
  $215 = ((($214)) + 756|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($216)) + 8|0);
  HEAP32[$217>>2] = $218;
  $219 = $c4spd;
  $220 = $i;
  $221 = $mod;
  $222 = ((($221)) + 176|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (($223) + (($220*764)|0)|0);
  $225 = ((($224)) + 756|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ((($226)) + 12|0);
  $228 = $i;
  $229 = $mod;
  $230 = ((($229)) + 176|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + (($228*764)|0)|0);
  $233 = ((($232)) + 756|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ((($234)) + 16|0);
  _c2spd_to_note($219,$227,$235);
  $236 = $i;
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 176|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*764)|0)|0);
  $242 = ((($241)) + 756|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ((($243)) + 40|0);
  HEAP32[$244>>2] = $236;
  $245 = $i;
  $246 = $mod;
  $247 = ((($246)) + 180|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = (($248) + (($245*52)|0)|0);
  $250 = ((($249)) + 44|0);
  HEAP32[$250>>2] = 0;
  $251 = $i;
  $252 = $mod;
  $253 = ((($252)) + 180|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($254) + (($251*52)|0)|0);
  $256 = ((($255)) + 32|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($257|0)>(0);
  if ($258) {
   $259 = $i;
   $260 = $mod;
   $261 = ((($260)) + 176|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($262) + (($259*764)|0)|0);
   $264 = ((($263)) + 36|0);
   HEAP32[$264>>2] = 1;
  }
  $265 = $flg;
  $266 = $265 & 1;
  $267 = ($266|0)!=(0);
  if ($267) {
   $268 = $i;
   $269 = $mod;
   $270 = ((($269)) + 180|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($271) + (($268*52)|0)|0);
   $273 = ((($272)) + 44|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = $274 | 2;
   HEAP32[$273>>2] = $275;
  }
  $276 = $flg;
  $277 = $276 & 2;
  $278 = ($277|0)!=(0);
  if ($278) {
   $279 = $i;
   $280 = $mod;
   $281 = ((($280)) + 180|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + (($279*52)|0)|0);
   $284 = ((($283)) + 44|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $285 | 1;
   HEAP32[$284>>2] = $286;
   $287 = $i;
   $288 = $mod;
   $289 = ((($288)) + 180|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (($290) + (($287*52)|0)|0);
   $292 = ((($291)) + 32|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $293 >> 1;
   HEAP32[$292>>2] = $294;
   $295 = $i;
   $296 = $mod;
   $297 = ((($296)) + 180|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = (($298) + (($295*52)|0)|0);
   $300 = ((($299)) + 36|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = $301 >> 1;
   HEAP32[$300>>2] = $302;
   $303 = $i;
   $304 = $mod;
   $305 = ((($304)) + 180|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (($306) + (($303*52)|0)|0);
   $308 = ((($307)) + 40|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = $309 >> 1;
   HEAP32[$308>>2] = $310;
  }
  $311 = $i;
  $312 = (($311) + 1)|0;
  $i = $312;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 else if ((label|0) == 21) {
  $0 = -1;
  $542 = $0;
  STACKTOP = sp;return ($542|0);
 }
 else if ((label|0) == 31) {
  $313 = $2;
  $314 = $3;
  $315 = $pat_ofs;
  $316 = (($314) + ($315))|0;
  (_hio_seek($313,$316,0)|0);
  $317 = $mod;
  $318 = ((($317)) + 136|0);
  HEAP32[$318>>2] = 0;
  $i = 0;
  L43: while(1) {
   $319 = $i;
   $320 = $mod;
   $321 = ((($320)) + 128|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = ($319|0)<($322|0);
   if (!($323)) {
    label = 50;
    break;
   }
   $324 = $2;
   $325 = (_hio_read16l($324)|0);
   $326 = $325&65535;
   $len = $326;
   $327 = $len;
   $328 = (($327) - 2)|0;
   $len = $328;
   $r = 0;
   L46: while(1) {
    $329 = $len;
    $330 = ($329|0)>(0);
    if (!($330)) {
     break;
    }
    $331 = $2;
    $332 = (_hio_read8($331)|0);
    $333 = $332&255;
    $c = $333;
    $334 = $len;
    $335 = (($334) + -1)|0;
    $len = $335;
    $336 = $c;
    $337 = ($336|0)==(0);
    if ($337) {
     $338 = $r;
     $339 = (($338) + 1)|0;
     $r = $339;
     $340 = $len;
     $341 = ($340|0)==(0);
     $342 = $r;
     if ($341) {
      $343 = ($342|0)>(64);
      if ($343) {
       label = 38;
       break L43;
      } else {
       continue;
      }
     } else {
      $344 = ($342|0)>=(64);
      if ($344) {
       label = 40;
       break L43;
      } else {
       continue;
      }
     }
    }
    $345 = $mod;
    $346 = ((($345)) + 136|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = $c;
    $349 = $348 & 31;
    $350 = ($347|0)<=($349|0);
    if ($350) {
     $351 = $c;
     $352 = $351 & 31;
     $353 = (($352) + 1)|0;
     $354 = $mod;
     $355 = ((($354)) + 136|0);
     HEAP32[$355>>2] = $353;
    }
    $356 = $c;
    $357 = $356 & 32;
    $358 = ($357|0)!=(0);
    if ($358) {
     $359 = $2;
     (_hio_read8($359)|0);
     $360 = $2;
     (_hio_read8($360)|0);
     $361 = $len;
     $362 = (($361) - 2)|0;
     $len = $362;
    }
    $363 = $c;
    $364 = $363 & 64;
    $365 = ($364|0)!=(0);
    if (!($365)) {
     continue;
    }
    while(1) {
     $366 = $2;
     $367 = (_hio_read8($366)|0);
     $368 = $367&255;
     $k = $368;
     $369 = $len;
     $370 = (($369) + -1)|0;
     $len = $370;
     $371 = $k;
     $372 = $371 & 192;
     $373 = ($372|0)!=(192);
     if ($373) {
      $374 = $2;
      (_hio_read8($374)|0);
      $375 = $len;
      $376 = (($375) + -1)|0;
      $len = $376;
     }
     $377 = $k;
     $378 = $377 & 32;
     $379 = ($378|0)!=(0);
     if (!($379)) {
      continue L46;
     }
    }
   }
   $380 = $i;
   $381 = (($380) + 1)|0;
   $i = $381;
  }
  if ((label|0) == 38) {
   $0 = -1;
   $542 = $0;
   STACKTOP = sp;return ($542|0);
  }
  else if ((label|0) == 40) {
   $0 = -1;
   $542 = $0;
   STACKTOP = sp;return ($542|0);
  }
  else if ((label|0) == 50) {
   $382 = $mod;
   $383 = ((($382)) + 128|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = $mod;
   $386 = ((($385)) + 136|0);
   $387 = HEAP32[$386>>2]|0;
   $388 = Math_imul($384, $387)|0;
   $389 = $mod;
   $390 = ((($389)) + 132|0);
   HEAP32[$390>>2] = $388;
   $391 = $mod;
   $392 = (_pattern_init($391)|0);
   $393 = ($392|0)<(0);
   if ($393) {
    $0 = -1;
    $542 = $0;
    STACKTOP = sp;return ($542|0);
   }
   $394 = $2;
   $395 = $3;
   $396 = $pat_ofs;
   $397 = (($395) + ($396))|0;
   (_hio_seek($394,$397,0)|0);
   $i = 0;
   L75: while(1) {
    $398 = $i;
    $399 = $mod;
    $400 = ((($399)) + 128|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = ($398|0)<($401|0);
    if (!($402)) {
     label = 71;
     break;
    }
    $403 = $mod;
    $404 = $i;
    $405 = (_pattern_tracks_alloc($403,$404,64)|0);
    $406 = ($405|0)<(0);
    if ($406) {
     label = 55;
     break;
    }
    $407 = $2;
    $408 = (_hio_read16l($407)|0);
    $409 = $408&65535;
    $len1 = $409;
    $410 = $len1;
    $411 = (($410) - 2)|0;
    $len1 = $411;
    $r3 = 0;
    L79: while(1) {
     $412 = $len1;
     $413 = ($412|0)>(0);
     if (!($413)) {
      break;
     }
     $414 = $2;
     $415 = (_hio_read8($414)|0);
     $416 = $415&255;
     $c2 = $416;
     $417 = $len1;
     $418 = (($417) + -1)|0;
     $len1 = $418;
     $419 = $c2;
     $420 = ($419|0)==(0);
     if ($420) {
      $421 = $r3;
      $422 = (($421) + 1)|0;
      $r3 = $422;
      continue;
     }
     $423 = $c2;
     $424 = $423 & 31;
     $425 = $mod;
     $426 = ((($425)) + 136|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = ($424|0)>=($427|0);
     $429 = $r3;
     $430 = ($429|0)>=(64);
     $or$cond = $428 | $430;
     if ($or$cond) {
      label = 61;
      break L75;
     }
     $431 = $r3;
     $432 = $c2;
     $433 = $432 & 31;
     $434 = $i;
     $435 = $1;
     $436 = ((($435)) + 168|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = (($437) + ($434<<2)|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ((($439)) + 4|0);
     $441 = (($440) + ($433<<2)|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = $1;
     $444 = ((($443)) + 172|0);
     $445 = HEAP32[$444>>2]|0;
     $446 = (($445) + ($442<<2)|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = ((($447)) + 4|0);
     $449 = (($448) + ($431<<3)|0);
     $event = $449;
     $450 = $c2;
     $451 = $450 & 32;
     $452 = ($451|0)!=(0);
     if ($452) {
      $453 = $2;
      $454 = (_hio_read8($453)|0);
      $455 = $454&255;
      $k4 = $455;
      $456 = $k4;
      $457 = $456 & 127;
      $458 = $457 & 240;
      $459 = $458 >> 4;
      $460 = ($459*12)|0;
      $461 = (12 + ($460))|0;
      $462 = $k4;
      $463 = $462 & 15;
      $464 = (($461) + ($463))|0;
      $465 = $464&255;
      $466 = $event;
      HEAP8[$466>>0] = $465;
      $467 = $2;
      $468 = (_hio_read8($467)|0);
      $469 = $event;
      $470 = ((($469)) + 1|0);
      HEAP8[$470>>0] = $468;
      $471 = $len1;
      $472 = (($471) - 2)|0;
      $len1 = $472;
     }
     $473 = $c2;
     $474 = $473 & 64;
     $475 = ($474|0)!=(0);
     if (!($475)) {
      continue;
     }
     while(1) {
      $476 = $2;
      $477 = (_hio_read8($476)|0);
      $478 = $477&255;
      $k4 = $478;
      $479 = $len1;
      $480 = (($479) + -1)|0;
      $len1 = $480;
      $481 = $k4;
      $482 = $481 & 192;
      $483 = $482 >> 6;
      if ((($483|0) == 1)) {
       $499 = $k4;
       $500 = $499 & 31;
       $501 = $500&255;
       $502 = $event;
       $503 = ((($502)) + 5|0);
       HEAP8[$503>>0] = $501;
       $504 = $2;
       $505 = (_hio_read8($504)|0);
       $506 = $event;
       $507 = ((($506)) + 6|0);
       HEAP8[$507>>0] = $505;
       $508 = $len1;
       $509 = (($508) + -1)|0;
       $len1 = $509;
       $510 = $event;
       $511 = ((($510)) + 5|0);
       $512 = $event;
       $513 = ((($512)) + 6|0);
       _fix_effect($511,$513);
      } else if ((($483|0) == 0)) {
       $484 = $k4;
       $485 = $484 & 31;
       $486 = $485&255;
       $487 = $event;
       $488 = ((($487)) + 3|0);
       HEAP8[$488>>0] = $486;
       $489 = $2;
       $490 = (_hio_read8($489)|0);
       $491 = $event;
       $492 = ((($491)) + 4|0);
       HEAP8[$492>>0] = $490;
       $493 = $len1;
       $494 = (($493) + -1)|0;
       $len1 = $494;
       $495 = $event;
       $496 = ((($495)) + 3|0);
       $497 = $event;
       $498 = ((($497)) + 4|0);
       _fix_effect($496,$498);
      } else if ((($483|0) == 2)) {
       $514 = $2;
       (_hio_read8($514)|0);
       $515 = $len1;
       $516 = (($515) + -1)|0;
       $len1 = $516;
      }
      $517 = $k4;
      $518 = $517 & 32;
      $519 = ($518|0)!=(0);
      if (!($519)) {
       continue L79;
      }
     }
    }
    $520 = $i;
    $521 = (($520) + 1)|0;
    $i = $521;
   }
   if ((label|0) == 55) {
    $0 = -1;
    $542 = $0;
    STACKTOP = sp;return ($542|0);
   }
   else if ((label|0) == 61) {
    $0 = -1;
    $542 = $0;
    STACKTOP = sp;return ($542|0);
   }
   else if ((label|0) == 71) {
    $522 = $2;
    $523 = $3;
    $524 = $smp_ofs;
    $525 = (($523) + ($524))|0;
    (_hio_seek($522,$525,0)|0);
    $i = 0;
    while(1) {
     $526 = $i;
     $527 = $mod;
     $528 = ((($527)) + 140|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = ($526|0)<($529|0);
     if (!($530)) {
      label = 76;
      break;
     }
     $531 = $1;
     $532 = $2;
     $533 = $i;
     $534 = $mod;
     $535 = ((($534)) + 180|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = (($536) + (($533*52)|0)|0);
     $538 = (_load_sample($531,$532,2,$537,0)|0);
     $539 = ($538|0)<(0);
     if ($539) {
      label = 74;
      break;
     }
     $540 = $i;
     $541 = (($540) + 1)|0;
     $i = $541;
    }
    if ((label|0) == 74) {
     $0 = -1;
     $542 = $0;
     STACKTOP = sp;return ($542|0);
    }
    else if ((label|0) == 76) {
     $0 = 0;
     $542 = $0;
     STACKTOP = sp;return ($542|0);
    }
   }
  }
 }
 return (0)|0;
}
function _pw_test_format($f,$t,$start,$info) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $b = 0, $buf = 0, $extra = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $info;
 $s = 65536;
 $5 = (_calloc(1,65536)|0);
 $b = $5;
 $6 = $b;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 $8 = $b;
 $9 = $s;
 $10 = $1;
 $11 = (_hio_read($8,1,$9,$10)|0);
 $s = $11;
 while(1) {
  $12 = $b;
  $13 = $s;
  $14 = $4;
  $15 = (_pw_check($12,$13,$14)|0);
  $extra = $15;
  $16 = ($15|0)>(0);
  $17 = $b;
  if (!($16)) {
   label = 10;
   break;
  }
  $18 = $s;
  $19 = $extra;
  $20 = (($18) + ($19))|0;
  $21 = (_realloc($17,$20)|0);
  $buf = $21;
  $22 = $buf;
  $23 = ($22|0)==(0|0);
  if ($23) {
   label = 6;
   break;
  }
  $25 = $buf;
  $b = $25;
  $26 = $b;
  $27 = $s;
  $28 = (($26) + ($27)|0);
  $29 = $extra;
  $30 = $1;
  $31 = (_hio_read($28,$29,1,$30)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   label = 8;
   break;
  }
  $34 = $extra;
  $35 = $s;
  $36 = (($35) + ($34))|0;
  $s = $36;
 }
 if ((label|0) == 6) {
  $24 = $b;
  _free($24);
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 8) {
  $33 = $b;
  _free($33);
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 10) {
  _free($17);
  $37 = $extra;
  $38 = ($37|0)==(0);
  $39 = $38 ? 0 : -1;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _pw_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $t;
 $2 = $start;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_pw_test_format($3,$4,$5,0)|0);
 STACKTOP = sp;return ($6|0);
}
function _pw_load($m,$h,$start) {
 $m = $m|0;
 $h = $h|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $event = 0, $f = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $mod_event = 0, $name = 0, $temp = 0, $temp_name = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 60|0;
 $mod_event = sp + 1144|0;
 $name = sp + 24|0;
 $temp_name = sp + 20|0;
 $1 = $m;
 $2 = $h;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = (_make_temp_file($temp_name)|0);
 $temp = $5;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $2;
  $8 = $temp;
  $9 = (_pw_wizardry($7,$8,$name)|0);
  $10 = ($9|0)<(0);
  $11 = $temp;
  do {
   if ($10) {
    (_fclose(($11|0))|0);
   } else {
    $12 = (_hio_open_file($11)|0);
    $f = $12;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $14 = $temp;
     (_fclose(($14|0))|0);
     break;
    }
    $15 = $f;
    $16 = $3;
    (_hio_seek($15,$16,0)|0);
    $17 = $f;
    (_hio_read($mh,20,1,$17)|0);
    $i = 0;
    while(1) {
     $18 = $i;
     $19 = ($18|0)<(31);
     if (!($19)) {
      break;
     }
     $20 = $i;
     $21 = ((($mh)) + 20|0);
     $22 = (($21) + (($20*30)|0)|0);
     $23 = $f;
     (_hio_read($22,22,1,$23)|0);
     $24 = $f;
     $25 = (_hio_read16b($24)|0);
     $26 = $i;
     $27 = ((($mh)) + 20|0);
     $28 = (($27) + (($26*30)|0)|0);
     $29 = ((($28)) + 22|0);
     HEAP16[$29>>1] = $25;
     $30 = $f;
     $31 = (_hio_read8($30)|0);
     $32 = $i;
     $33 = ((($mh)) + 20|0);
     $34 = (($33) + (($32*30)|0)|0);
     $35 = ((($34)) + 24|0);
     HEAP8[$35>>0] = $31;
     $36 = $f;
     $37 = (_hio_read8($36)|0);
     $38 = $i;
     $39 = ((($mh)) + 20|0);
     $40 = (($39) + (($38*30)|0)|0);
     $41 = ((($40)) + 25|0);
     HEAP8[$41>>0] = $37;
     $42 = $f;
     $43 = (_hio_read16b($42)|0);
     $44 = $i;
     $45 = ((($mh)) + 20|0);
     $46 = (($45) + (($44*30)|0)|0);
     $47 = ((($46)) + 26|0);
     HEAP16[$47>>1] = $43;
     $48 = $f;
     $49 = (_hio_read16b($48)|0);
     $50 = $i;
     $51 = ((($mh)) + 20|0);
     $52 = (($51) + (($50*30)|0)|0);
     $53 = ((($52)) + 28|0);
     HEAP16[$53>>1] = $49;
     $54 = $i;
     $55 = (($54) + 1)|0;
     $i = $55;
    }
    $56 = $f;
    $57 = (_hio_read8($56)|0);
    $58 = ((($mh)) + 950|0);
    HEAP8[$58>>0] = $57;
    $59 = $f;
    $60 = (_hio_read8($59)|0);
    $61 = ((($mh)) + 951|0);
    HEAP8[$61>>0] = $60;
    $62 = ((($mh)) + 952|0);
    $63 = $f;
    (_hio_read($62,128,1,$63)|0);
    $64 = ((($mh)) + 1080|0);
    $65 = $f;
    (_hio_read($64,4,1,$65)|0);
    $66 = ((($mh)) + 1080|0);
    $67 = (_memcmp($66,7040,4)|0);
    $68 = ($67|0)!=(0);
    L12: do {
     if (!($68)) {
      $69 = $mod;
      $70 = ((($69)) + 140|0);
      HEAP32[$70>>2] = 31;
      $71 = $mod;
      $72 = ((($71)) + 140|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $mod;
      $75 = ((($74)) + 144|0);
      HEAP32[$75>>2] = $73;
      $76 = $mod;
      $77 = ((($76)) + 136|0);
      HEAP32[$77>>2] = 4;
      $78 = ((($mh)) + 950|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = $mod;
      $82 = ((($81)) + 156|0);
      HEAP32[$82>>2] = $80;
      $83 = ((($mh)) + 951|0);
      $84 = HEAP8[$83>>0]|0;
      $85 = $84&255;
      $86 = $mod;
      $87 = ((($86)) + 160|0);
      HEAP32[$87>>2] = $85;
      $88 = $mod;
      $89 = ((($88)) + 952|0);
      $90 = ((($mh)) + 952|0);
      dest=$89; src=$90; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $i = 0;
      while(1) {
       $91 = $i;
       $92 = ($91|0)<(128);
       if (!($92)) {
        break;
       }
       $93 = $i;
       $94 = $mod;
       $95 = ((($94)) + 952|0);
       $96 = (($95) + ($93)|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97&255;
       $99 = $mod;
       $100 = ((($99)) + 128|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($98|0)>($101|0);
       if ($102) {
        $103 = $i;
        $104 = $mod;
        $105 = ((($104)) + 952|0);
        $106 = (($105) + ($103)|0);
        $107 = HEAP8[$106>>0]|0;
        $108 = $107&255;
        $109 = $mod;
        $110 = ((($109)) + 128|0);
        HEAP32[$110>>2] = $108;
       }
       $111 = $i;
       $112 = (($111) + 1)|0;
       $i = $112;
      }
      $113 = $mod;
      $114 = ((($113)) + 128|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + 1)|0;
      HEAP32[$114>>2] = $116;
      $117 = $mod;
      $118 = ((($117)) + 136|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = $mod;
      $121 = ((($120)) + 128|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = Math_imul($119, $122)|0;
      $124 = $mod;
      $125 = ((($124)) + 132|0);
      HEAP32[$125>>2] = $123;
      $126 = $mod;
      HEAP32[$vararg_buffer>>2] = $mh;
      (_snprintf($126,64,7048,$vararg_buffer)|0);
      $127 = $mod;
      $128 = ((($127)) + 64|0);
      $129 = HEAP32[$name>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $129;
      (_snprintf($128,64,7048,$vararg_buffer1)|0);
      $130 = $mod;
      $131 = (_instrument_init($130)|0);
      $132 = ($131|0)<(0);
      if (!($132)) {
       $i = 0;
       while(1) {
        $133 = $i;
        $134 = $mod;
        $135 = ((($134)) + 140|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($133|0)<($136|0);
        $138 = $mod;
        if (!($137)) {
         break;
        }
        $139 = $i;
        $140 = (_subinstrument_alloc($138,$139,1)|0);
        $141 = ($140|0)<(0);
        if ($141) {
         break L12;
        }
        $142 = $i;
        $143 = ((($mh)) + 20|0);
        $144 = (($143) + (($142*30)|0)|0);
        $145 = ((($144)) + 22|0);
        $146 = HEAP16[$145>>1]|0;
        $147 = $146&65535;
        $148 = $147<<1;
        $149 = $i;
        $150 = $mod;
        $151 = ((($150)) + 180|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (($152) + (($149*52)|0)|0);
        $154 = ((($153)) + 32|0);
        HEAP32[$154>>2] = $148;
        $155 = $i;
        $156 = ((($mh)) + 20|0);
        $157 = (($156) + (($155*30)|0)|0);
        $158 = ((($157)) + 26|0);
        $159 = HEAP16[$158>>1]|0;
        $160 = $159&65535;
        $161 = $160<<1;
        $162 = $i;
        $163 = $mod;
        $164 = ((($163)) + 180|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = (($165) + (($162*52)|0)|0);
        $167 = ((($166)) + 36|0);
        HEAP32[$167>>2] = $161;
        $168 = $i;
        $169 = $mod;
        $170 = ((($169)) + 180|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (($171) + (($168*52)|0)|0);
        $173 = ((($172)) + 36|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = $i;
        $176 = ((($mh)) + 20|0);
        $177 = (($176) + (($175*30)|0)|0);
        $178 = ((($177)) + 28|0);
        $179 = HEAP16[$178>>1]|0;
        $180 = $179&65535;
        $181 = $180<<1;
        $182 = (($174) + ($181))|0;
        $183 = $i;
        $184 = $mod;
        $185 = ((($184)) + 180|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = (($186) + (($183*52)|0)|0);
        $188 = ((($187)) + 40|0);
        HEAP32[$188>>2] = $182;
        $189 = $i;
        $190 = ((($mh)) + 20|0);
        $191 = (($190) + (($189*30)|0)|0);
        $192 = ((($191)) + 28|0);
        $193 = HEAP16[$192>>1]|0;
        $194 = $193&65535;
        $195 = ($194|0)>(1);
        $196 = $195 ? 2 : 0;
        $197 = $i;
        $198 = $mod;
        $199 = ((($198)) + 180|0);
        $200 = HEAP32[$199>>2]|0;
        $201 = (($200) + (($197*52)|0)|0);
        $202 = ((($201)) + 44|0);
        HEAP32[$202>>2] = $196;
        $203 = $i;
        $204 = ((($mh)) + 20|0);
        $205 = (($204) + (($203*30)|0)|0);
        $206 = ((($205)) + 24|0);
        $207 = HEAP8[$206>>0]|0;
        $208 = $207 << 24 >> 24;
        $209 = $208 << 4;
        $210 = $209&255;
        $211 = $210 << 24 >> 24;
        $212 = $i;
        $213 = $mod;
        $214 = ((($213)) + 176|0);
        $215 = HEAP32[$214>>2]|0;
        $216 = (($215) + (($212*764)|0)|0);
        $217 = ((($216)) + 756|0);
        $218 = HEAP32[$217>>2]|0;
        $219 = ((($218)) + 16|0);
        HEAP32[$219>>2] = $211;
        $220 = $i;
        $221 = ((($mh)) + 20|0);
        $222 = (($221) + (($220*30)|0)|0);
        $223 = ((($222)) + 25|0);
        $224 = HEAP8[$223>>0]|0;
        $225 = $224 << 24 >> 24;
        $226 = $i;
        $227 = $mod;
        $228 = ((($227)) + 176|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = (($229) + (($226*764)|0)|0);
        $231 = ((($230)) + 756|0);
        $232 = HEAP32[$231>>2]|0;
        HEAP32[$232>>2] = $225;
        $233 = $i;
        $234 = $mod;
        $235 = ((($234)) + 176|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = (($236) + (($233*764)|0)|0);
        $238 = ((($237)) + 756|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = ((($239)) + 8|0);
        HEAP32[$240>>2] = 128;
        $241 = $i;
        $242 = $i;
        $243 = $mod;
        $244 = ((($243)) + 176|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = (($245) + (($242*764)|0)|0);
        $247 = ((($246)) + 756|0);
        $248 = HEAP32[$247>>2]|0;
        $249 = ((($248)) + 40|0);
        HEAP32[$249>>2] = $241;
        $250 = $i;
        $251 = $mod;
        $252 = ((($251)) + 176|0);
        $253 = HEAP32[$252>>2]|0;
        $254 = (($253) + (($250*764)|0)|0);
        $255 = ((($254)) + 40|0);
        HEAP32[$255>>2] = 4095;
        $256 = $i;
        $257 = $mod;
        $258 = ((($257)) + 180|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = (($259) + (($256*52)|0)|0);
        $261 = ((($260)) + 32|0);
        $262 = HEAP32[$261>>2]|0;
        $263 = ($262|0)>(0);
        if ($263) {
         $264 = $i;
         $265 = $mod;
         $266 = ((($265)) + 176|0);
         $267 = HEAP32[$266>>2]|0;
         $268 = (($267) + (($264*764)|0)|0);
         $269 = ((($268)) + 36|0);
         HEAP32[$269>>2] = 1;
        }
        $270 = $mod;
        $271 = $i;
        $272 = $i;
        $273 = ((($mh)) + 20|0);
        $274 = (($273) + (($272*30)|0)|0);
        (_instrument_name($270,$271,$274,22)|0);
        $275 = $i;
        $276 = (($275) + 1)|0;
        $i = $276;
       }
       $277 = (_pattern_init($138)|0);
       $278 = ($277|0)<(0);
       if (!($278)) {
        $i = 0;
        while(1) {
         $279 = $i;
         $280 = $mod;
         $281 = ((($280)) + 128|0);
         $282 = HEAP32[$281>>2]|0;
         $283 = ($279|0)<($282|0);
         if (!($283)) {
          break;
         }
         $284 = $mod;
         $285 = $i;
         $286 = (_pattern_tracks_alloc($284,$285,64)|0);
         $287 = ($286|0)<(0);
         if ($287) {
          break L12;
         }
         $j = 0;
         while(1) {
          $288 = $j;
          $289 = ($288|0)<(256);
          if (!($289)) {
           break;
          }
          $290 = $j;
          $291 = (($290|0) / 4)&-1;
          $292 = $j;
          $293 = (($292|0) % 4)&-1;
          $294 = $i;
          $295 = $1;
          $296 = ((($295)) + 168|0);
          $297 = HEAP32[$296>>2]|0;
          $298 = (($297) + ($294<<2)|0);
          $299 = HEAP32[$298>>2]|0;
          $300 = ((($299)) + 4|0);
          $301 = (($300) + ($293<<2)|0);
          $302 = HEAP32[$301>>2]|0;
          $303 = $1;
          $304 = ((($303)) + 172|0);
          $305 = HEAP32[$304>>2]|0;
          $306 = (($305) + ($302<<2)|0);
          $307 = HEAP32[$306>>2]|0;
          $308 = ((($307)) + 4|0);
          $309 = (($308) + ($291<<3)|0);
          $event = $309;
          $310 = $f;
          (_hio_read($mod_event,1,4,$310)|0);
          $311 = $event;
          _decode_protracker_event($311,$mod_event);
          $312 = $j;
          $313 = (($312) + 1)|0;
          $j = $313;
         }
         $314 = $i;
         $315 = (($314) + 1)|0;
         $i = $315;
        }
        $316 = $1;
        $317 = ((($316)) + 1284|0);
        $318 = HEAP32[$317>>2]|0;
        $319 = $318 | 8192;
        HEAP32[$317>>2] = $319;
        $i = 0;
        while(1) {
         $320 = $i;
         $321 = $mod;
         $322 = ((($321)) + 144|0);
         $323 = HEAP32[$322>>2]|0;
         $324 = ($320|0)<($323|0);
         if (!($324)) {
          break;
         }
         $325 = $1;
         $326 = $f;
         $327 = $i;
         $328 = $mod;
         $329 = ((($328)) + 180|0);
         $330 = HEAP32[$329>>2]|0;
         $331 = (($330) + (($327*52)|0)|0);
         $332 = (_load_sample($325,$326,0,$331,0)|0);
         $333 = ($332|0)<(0);
         if ($333) {
          break L12;
         }
         $334 = $i;
         $335 = (($334) + 1)|0;
         $i = $335;
        }
        $336 = $f;
        (_hio_close($336)|0);
        $337 = HEAP32[$temp_name>>2]|0;
        _unlink_temp_file($337);
        $0 = 0;
        $340 = $0;
        STACKTOP = sp;return ($340|0);
       }
      }
     }
    } while(0);
    $338 = $f;
    (_hio_close($338)|0);
   }
  } while(0);
  $339 = HEAP32[$temp_name>>2]|0;
  _unlink_temp_file($339);
 }
 $0 = -1;
 $340 = $0;
 STACKTOP = sp;return ($340|0);
}
function _gal5_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1380533830);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32b($7)|0);
   $8 = $1;
   $9 = (_hio_read32b($8)|0);
   $10 = ($9|0)!=(1095573536);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = (_hio_read32b($11)|0);
   $13 = ($12|0)!=(1229867348);
   if ($13) {
    $0 = -1;
    break;
   } else {
    $14 = $1;
    (_hio_read32b($14)|0);
    $15 = $1;
    $16 = $2;
    _read_title($15,$16,64);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _gal5_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $handle = 0, $i = 0, $mod = 0, $offset = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 40|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = $2;
 (_hio_read32b($9)|0);
 $10 = $2;
 $11 = (_hio_tell($10)|0);
 $offset = $11;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = 0;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = 0;
 $16 = (_iff_new()|0);
 $handle = $16;
 $17 = $handle;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $19 = $handle;
 $20 = (_iff_register($19,7104,272)|0);
 $ret = $20;
 $21 = $handle;
 $22 = (_iff_register($21,7184,273)|0);
 $23 = $ret;
 $24 = $23 | $22;
 $ret = $24;
 $25 = $handle;
 $26 = (_iff_register($25,7192,274)|0);
 $27 = $ret;
 $28 = $27 | $26;
 $ret = $28;
 $29 = $handle;
 $30 = (_iff_register($29,7200,275)|0);
 $31 = $ret;
 $32 = $31 | $30;
 $ret = $32;
 $33 = $ret;
 $34 = ($33|0)!=(0);
 if ($34) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $35 = $handle;
 _iff_set_quirk($35,1);
 $36 = $handle;
 _iff_set_quirk($36,16);
 $37 = $handle;
 _iff_set_quirk($37,4);
 $38 = $handle;
 $39 = $1;
 $40 = $2;
 $41 = (_iff_load($38,$39,$40,$data)|0);
 $42 = ($41|0)<(0);
 $43 = $handle;
 _iff_release($43);
 if ($42) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $44 = $mod;
 $45 = ((($44)) + 128|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $mod;
 $48 = ((($47)) + 136|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($46, $49)|0;
 $51 = $mod;
 $52 = ((($51)) + 132|0);
 HEAP32[$52>>2] = $50;
 $53 = $mod;
 $54 = ((($53)) + 140|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $mod;
 $57 = ((($56)) + 144|0);
 HEAP32[$57>>2] = $55;
 $58 = $mod;
 $59 = (_instrument_init($58)|0);
 $60 = ($59|0)<(0);
 if ($60) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $61 = $mod;
 $62 = (_pattern_init($61)|0);
 $63 = ($62|0)<(0);
 if ($63) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $64 = $2;
 $65 = $3;
 $66 = $offset;
 $67 = (($65) + ($66))|0;
 (_hio_seek($64,$67,0)|0);
 $68 = (_iff_new()|0);
 $handle = $68;
 $69 = $handle;
 $70 = ($69|0)==(0|0);
 if ($70) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $71 = $handle;
 $72 = (_iff_register($71,7192,276)|0);
 $ret = $72;
 $73 = $handle;
 $74 = (_iff_register($73,7200,277)|0);
 $75 = $ret;
 $76 = $75 | $74;
 $ret = $76;
 $77 = $ret;
 $78 = ($77|0)!=(0);
 if ($78) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $79 = $handle;
 _iff_set_quirk($79,1);
 $80 = $handle;
 _iff_set_quirk($80,16);
 $81 = $handle;
 _iff_set_quirk($81,4);
 $82 = $handle;
 $83 = $1;
 $84 = $2;
 $85 = (_iff_load($82,$83,$84,$data)|0);
 $86 = ($85|0)<(0);
 $87 = $handle;
 _iff_release($87);
 if ($86) {
  $0 = -1;
  $110 = $0;
  STACKTOP = sp;return ($110|0);
 }
 $i = 0;
 while(1) {
  $88 = $i;
  $89 = $mod;
  $90 = ((($89)) + 136|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($88|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $i;
  $94 = (($data) + ($93)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $96<<1;
  $98 = $i;
  $99 = $mod;
  $100 = ((($99)) + 184|0);
  $101 = (($100) + (($98*12)|0)|0);
  HEAP32[$101>>2] = $97;
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
 }
 $104 = $1;
 $105 = ((($104)) + 1284|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 | 33554464;
 HEAP32[$105>>2] = $107;
 $108 = $1;
 $109 = ((($108)) + 1288|0);
 HEAP32[$109>>2] = 1;
 $0 = 0;
 $110 = $0;
 STACKTOP = sp;return ($110|0);
}
function _get_init($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $data = 0, $flags = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $3;
 $data = $5;
 $6 = $2;
 (_hio_read($buf,1,64,$6)|0);
 $7 = $mod;
 (_strncpy(($7|0),($buf|0),64)|0);
 $8 = $0;
 _set_type($8,7112,$vararg_buffer);
 $9 = $2;
 $10 = (_hio_read8($9)|0);
 $11 = $10&255;
 $flags = $11;
 $12 = $flags;
 $13 = $12 ^ -1;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $0;
  $17 = ((($16)) + 1284|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 | 4096;
  HEAP32[$17>>2] = $19;
 }
 $20 = $2;
 $21 = (_hio_read8($20)|0);
 $22 = $21&255;
 $23 = $mod;
 $24 = ((($23)) + 136|0);
 HEAP32[$24>>2] = $22;
 $25 = $2;
 $26 = (_hio_read8($25)|0);
 $27 = $26&255;
 $28 = $mod;
 $29 = ((($28)) + 148|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = (_hio_read8($30)|0);
 $32 = $31&255;
 $33 = $mod;
 $34 = ((($33)) + 152|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 (_hio_read16l($35)|0);
 $36 = $2;
 (_hio_read16l($36)|0);
 $37 = $2;
 (_hio_read8($37)|0);
 $38 = $data;
 $39 = $2;
 (_hio_read($38,1,64,$39)|0);
 STACKTOP = sp;return 0;
}
function _get_ordr($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = (($7) + 1)|0;
 $9 = $mod;
 $10 = ((($9)) + 156|0);
 HEAP32[$10>>2] = $8;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $mod;
  $13 = ((($12)) + 156|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  $17 = (_hio_read8($16)|0);
  $18 = $i;
  $19 = $mod;
  $20 = ((($19)) + 952|0);
  $21 = (($20) + ($18)|0);
  HEAP8[$21>>0] = $17;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 STACKTOP = sp;return 0;
}
function _get_patt_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = (($7) + 1)|0;
 $i = $8;
 $9 = $i;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $i;
 $15 = $mod;
 $16 = ((($15)) + 128|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return 0;
}
function _get_inst_cnt($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read32b($5)|0);
 $6 = $2;
 (_hio_read8($6)|0);
 $7 = $2;
 $8 = (_hio_read8($7)|0);
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 $i = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)>($14|0);
 if (!($15)) {
  STACKTOP = sp;return 0;
 }
 $16 = $i;
 $17 = $mod;
 $18 = ((($17)) + 140|0);
 HEAP32[$18>>2] = $16;
 STACKTOP = sp;return 0;
}
function _get_patt341($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chan = 0, $cond = 0, $dummy = 0, $event = 0, $flag = 0, $fxp = 0, $fxt = 0, $i = 0, $len = 0, $mod = 0, $r = 0, $rows = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dummy = sp + 64|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $i = $8;
 $9 = $3;
 $10 = (_hio_read32l($9)|0);
 $len = $10;
 $11 = $3;
 $12 = (_hio_read8($11)|0);
 $13 = $12&255;
 $14 = (($13) + 1)|0;
 $rows = $14;
 $15 = $mod;
 $16 = $i;
 $17 = $rows;
 $18 = (_pattern_tracks_alloc($15,$16,$17)|0);
 $19 = ($18|0)<(0);
 if ($19) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $r = 0;
 while(1) {
  $20 = $r;
  $21 = $rows;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = (_hio_read8($23)|0);
  $flag = $24;
  $25 = $24&255;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $r;
   $28 = (($27) + 1)|0;
   $r = $28;
   continue;
  }
  $29 = $flag;
  $30 = $29&255;
  $31 = $30 & 31;
  $chan = $31;
  $32 = $chan;
  $33 = $mod;
  $34 = ((($33)) + 136|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32|0)<($35|0);
  if ($36) {
   $37 = $r;
   $38 = $chan;
   $39 = $i;
   $40 = $1;
   $41 = ((($40)) + 168|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 4|0);
   $46 = (($45) + ($38<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $1;
   $49 = ((($48)) + 172|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($47<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($52)) + 4|0);
   $54 = (($53) + ($37<<3)|0);
   $55 = $54;
  } else {
   $55 = $dummy;
  }
  $event = $55;
  $56 = $flag;
  $57 = $56&255;
  $58 = $57 & 128;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $3;
   $61 = (_hio_read8($60)|0);
   $fxp = $61;
   $62 = $3;
   $63 = (_hio_read8($62)|0);
   $fxt = $63;
   $64 = $fxt;
   $65 = $64&255;
   $cond = ($65|0)==(20);
   if ($cond) {
    $fxt = -93;
   } else {
    $66 = $fxt;
    $67 = $66&255;
    $68 = ($67|0)>(15);
    if ($68) {
     $69 = $fxt;
     $70 = $69&255;
     $71 = $fxp;
     $72 = $71&255;
     HEAP32[$vararg_buffer>>2] = $70;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $72;
     (_printf((7208|0),($vararg_buffer|0))|0);
     $fxp = 0;
     $fxt = 0;
    }
   }
   $73 = $fxt;
   $74 = $event;
   $75 = ((($74)) + 3|0);
   HEAP8[$75>>0] = $73;
   $76 = $fxp;
   $77 = $event;
   $78 = ((($77)) + 4|0);
   HEAP8[$78>>0] = $76;
  }
  $79 = $flag;
  $80 = $79&255;
  $81 = $80 & 64;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $3;
   $84 = (_hio_read8($83)|0);
   $85 = $event;
   $86 = ((($85)) + 1|0);
   HEAP8[$86>>0] = $84;
   $87 = $3;
   $88 = (_hio_read8($87)|0);
   $89 = $event;
   HEAP8[$89>>0] = $88;
   $90 = $event;
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = ($92|0)==(128);
   if ($93) {
    $94 = $event;
    HEAP8[$94>>0] = -127;
   }
  }
  $95 = $flag;
  $96 = $95&255;
  $97 = $96 & 32;
  $98 = ($97|0)!=(0);
  if (!($98)) {
   continue;
  }
  $99 = $3;
  $100 = (_hio_read8($99)|0);
  $101 = $100&255;
  $102 = (($101|0) / 2)&-1;
  $103 = (1 + ($102))|0;
  $104 = $103&255;
  $105 = $event;
  $106 = ((($105)) + 2|0);
  HEAP8[$106>>0] = $104;
 }
 $0 = 0;
 $107 = $0;
 STACKTOP = sp;return ($107|0);
}
function _get_inst342($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $finetune = 0, $flags = 0, $has_unsigned_sample = 0, $i = 0, $mod = 0, $srate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 (_hio_read32b($6)|0);
 $7 = $3;
 (_hio_read8($7)|0);
 $8 = $3;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $i = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($11*764)|0)|0);
 $16 = $3;
 (_hio_read($15,1,28,$16)|0);
 $17 = $i;
 $18 = $mod;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($17*764)|0)|0);
 (_adjust_string($21)|0);
 $22 = $3;
 (_hio_seek($22,290,1)|0);
 $23 = $3;
 $24 = (_hio_read16l($23)|0);
 $25 = $24&65535;
 $26 = $i;
 $27 = $mod;
 $28 = ((($27)) + 176|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + (($26*764)|0)|0);
 $31 = ((($30)) + 36|0);
 HEAP32[$31>>2] = $25;
 $32 = $i;
 $33 = $mod;
 $34 = ((($33)) + 176|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*764)|0)|0);
 $37 = ((($36)) + 36|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  $0 = 0;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 $40 = $mod;
 $41 = $i;
 $42 = $i;
 $43 = $mod;
 $44 = ((($43)) + 176|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + (($42*764)|0)|0);
 $47 = ((($46)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_subinstrument_alloc($40,$41,$48)|0);
 $50 = ($49|0)<(0);
 if ($50) {
  $0 = -1;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 $51 = $3;
 (_hio_read32b($51)|0);
 $52 = $3;
 (_hio_read32b($52)|0);
 $53 = $3;
 (_hio_read32b($53)|0);
 $54 = $3;
 (_hio_read32b($54)|0);
 $55 = $3;
 (_hio_read32b($55)|0);
 $56 = $3;
 (_hio_read32b($56)|0);
 $57 = $i;
 $58 = $mod;
 $59 = ((($58)) + 180|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + (($57*52)|0)|0);
 $62 = $3;
 (_hio_read($61,1,28,$62)|0);
 $63 = $i;
 $64 = $mod;
 $65 = ((($64)) + 180|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + (($63*52)|0)|0);
 (_adjust_string($67)|0);
 $68 = $3;
 (_hio_read32b($68)|0);
 $69 = $3;
 (_hio_read8($69)|0);
 $70 = $i;
 $71 = $i;
 $72 = $mod;
 $73 = ((($72)) + 176|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + (($71*764)|0)|0);
 $76 = ((($75)) + 756|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 40|0);
 HEAP32[$78>>2] = $70;
 $79 = $3;
 $80 = (_hio_read8($79)|0);
 $81 = $80&255;
 $82 = $i;
 $83 = $mod;
 $84 = ((($83)) + 176|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + (($82*764)|0)|0);
 $87 = ((($86)) + 32|0);
 HEAP32[$87>>2] = $81;
 $88 = $i;
 $89 = $mod;
 $90 = ((($89)) + 176|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + (($88*764)|0)|0);
 $93 = ((($92)) + 756|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($94)) + 8|0);
 HEAP32[$95>>2] = 128;
 $96 = $3;
 $97 = (_hio_read16l($96)|0);
 $98 = $97&65535;
 $99 = (($98) + 1)|0;
 $100 = (($99|0) / 512)&-1;
 $101 = $i;
 $102 = $mod;
 $103 = ((($102)) + 176|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + (($101*764)|0)|0);
 $106 = ((($105)) + 756|0);
 $107 = HEAP32[$106>>2]|0;
 HEAP32[$107>>2] = $100;
 $108 = $3;
 $109 = (_hio_read16l($108)|0);
 $110 = $109&65535;
 $flags = $110;
 $111 = $3;
 (_hio_read16l($111)|0);
 $112 = $3;
 $113 = (_hio_read32l($112)|0);
 $114 = $i;
 $115 = $mod;
 $116 = ((($115)) + 180|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($117) + (($114*52)|0)|0);
 $119 = ((($118)) + 32|0);
 HEAP32[$119>>2] = $113;
 $120 = $3;
 $121 = (_hio_read32l($120)|0);
 $122 = $i;
 $123 = $mod;
 $124 = ((($123)) + 180|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (($125) + (($122*52)|0)|0);
 $127 = ((($126)) + 36|0);
 HEAP32[$127>>2] = $121;
 $128 = $3;
 $129 = (_hio_read32l($128)|0);
 $130 = $i;
 $131 = $mod;
 $132 = ((($131)) + 180|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($133) + (($130*52)|0)|0);
 $135 = ((($134)) + 40|0);
 HEAP32[$135>>2] = $129;
 $136 = $i;
 $137 = $mod;
 $138 = ((($137)) + 180|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + (($136*52)|0)|0);
 $141 = ((($140)) + 44|0);
 HEAP32[$141>>2] = 0;
 $has_unsigned_sample = 0;
 $142 = $flags;
 $143 = $142 & 4;
 $144 = ($143|0)!=(0);
 if ($144) {
  $145 = $i;
  $146 = $mod;
  $147 = ((($146)) + 180|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + (($145*52)|0)|0);
  $150 = ((($149)) + 44|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $151 | 1;
  HEAP32[$150>>2] = $152;
 }
 $153 = $flags;
 $154 = $153 & 8;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $i;
  $157 = $mod;
  $158 = ((($157)) + 180|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + (($156*52)|0)|0);
  $161 = ((($160)) + 44|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $162 | 2;
  HEAP32[$161>>2] = $163;
 }
 $164 = $flags;
 $165 = $164 & 16;
 $166 = ($165|0)!=(0);
 if ($166) {
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 180|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*52)|0)|0);
  $172 = ((($171)) + 44|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 6;
  HEAP32[$172>>2] = $174;
 }
 $175 = $flags;
 $176 = $175 ^ -1;
 $177 = $176 & 128;
 $178 = ($177|0)!=(0);
 if ($178) {
  $has_unsigned_sample = 1;
 }
 $179 = $3;
 $180 = (_hio_read32l($179)|0);
 $srate = $180;
 $finetune = 0;
 $181 = $srate;
 $182 = $i;
 $183 = $mod;
 $184 = ((($183)) + 176|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = (($185) + (($182*764)|0)|0);
 $187 = ((($186)) + 756|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ((($188)) + 12|0);
 $190 = $i;
 $191 = $mod;
 $192 = ((($191)) + 176|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($193) + (($190*764)|0)|0);
 $195 = ((($194)) + 756|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ((($196)) + 16|0);
 _c2spd_to_note($181,$189,$197);
 $198 = $finetune;
 $199 = $i;
 $200 = $mod;
 $201 = ((($200)) + 176|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (($202) + (($199*764)|0)|0);
 $204 = ((($203)) + 756|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ((($205)) + 16|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = (($207) + ($198))|0;
 HEAP32[$206>>2] = $208;
 $209 = $3;
 (_hio_read32l($209)|0);
 $210 = $3;
 (_hio_read32l($210)|0);
 $211 = $i;
 $212 = $mod;
 $213 = ((($212)) + 180|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) + (($211*52)|0)|0);
 $216 = ((($215)) + 32|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = ($217|0)>(1);
 if ($218) {
  $219 = $1;
  $220 = $3;
  $221 = $has_unsigned_sample;
  $222 = ($221|0)!=(0);
  $223 = $222 ? 2 : 0;
  $224 = $i;
  $225 = $mod;
  $226 = ((($225)) + 180|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + (($224*52)|0)|0);
  $229 = (_load_sample($219,$220,$223,$228,0)|0);
  $230 = ($229|0)<(0);
  if ($230) {
   $0 = -1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  }
 }
 $0 = 0;
 $231 = $0;
 STACKTOP = sp;return ($231|0);
}
function _gal4_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read32b($4)|0);
 $6 = ($5|0)!=(1380533830);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   (_hio_read32b($7)|0);
   $8 = $1;
   $9 = (_hio_read32b($8)|0);
   $10 = ($9|0)!=(1095583302);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = (_hio_read32b($11)|0);
   $13 = ($12|0)!=(1296124238);
   if ($13) {
    $0 = -1;
    break;
   } else {
    $14 = $1;
    (_hio_read32b($14)|0);
    $15 = $1;
    $16 = $2;
    _read_title($15,$16,64);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _gal4_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $data = 0;
 var $handle = 0, $i = 0, $mod = 0, $offset = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read32b($7)|0);
 $8 = $2;
 (_hio_read32b($8)|0);
 $9 = $2;
 (_hio_read32b($9)|0);
 $10 = $2;
 $11 = (_hio_tell($10)|0);
 $offset = $11;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = 0;
 $14 = $mod;
 $15 = ((($14)) + 144|0);
 HEAP32[$15>>2] = 0;
 $16 = (_iff_new()|0);
 $handle = $16;
 $17 = $handle;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $19 = $handle;
 $20 = (_iff_register($19,7176,278)|0);
 $ret = $20;
 $21 = $handle;
 $22 = (_iff_register($21,7184,279)|0);
 $23 = $ret;
 $24 = $23 | $22;
 $ret = $24;
 $25 = $handle;
 $26 = (_iff_register($25,7192,280)|0);
 $27 = $ret;
 $28 = $27 | $26;
 $ret = $28;
 $29 = $handle;
 $30 = (_iff_register($29,7200,281)|0);
 $31 = $ret;
 $32 = $31 | $30;
 $ret = $32;
 $33 = $ret;
 $34 = ($33|0)!=(0);
 if ($34) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $35 = $handle;
 _iff_set_quirk($35,1);
 $36 = $handle;
 _iff_set_quirk($36,32);
 $37 = $handle;
 $38 = $1;
 $39 = $2;
 $40 = (_iff_load($37,$38,$39,$data)|0);
 $41 = ($40|0)<(0);
 $42 = $handle;
 _iff_release($42);
 if ($41) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $43 = $mod;
 $44 = ((($43)) + 128|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $mod;
 $47 = ((($46)) + 136|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($45, $48)|0;
 $50 = $mod;
 $51 = ((($50)) + 132|0);
 HEAP32[$51>>2] = $49;
 $52 = $mod;
 $53 = (_instrument_init($52)|0);
 $54 = ($53|0)<(0);
 if ($54) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $55 = $mod;
 $56 = (_pattern_init($55)|0);
 $57 = ($56|0)<(0);
 if ($57) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $58 = $2;
 $59 = $3;
 $60 = $offset;
 $61 = (($59) + ($60))|0;
 (_hio_seek($58,$61,0)|0);
 HEAP32[$data>>2] = 0;
 $62 = (_iff_new()|0);
 $handle = $62;
 $63 = $handle;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $65 = $handle;
 $66 = (_iff_register($65,7192,282)|0);
 $ret = $66;
 $67 = $handle;
 $68 = (_iff_register($67,7200,283)|0);
 $69 = $ret;
 $70 = $69 | $68;
 $ret = $70;
 $71 = $ret;
 $72 = ($71|0)!=(0);
 if ($72) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $73 = $handle;
 _iff_set_quirk($73,1);
 $74 = $handle;
 _iff_set_quirk($74,32);
 $75 = $handle;
 $76 = $1;
 $77 = $2;
 $78 = (_iff_load($75,$76,$77,$data)|0);
 $79 = ($78|0)<(0);
 $80 = $handle;
 _iff_release($80);
 if ($79) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $i = 0;
 while(1) {
  $81 = $i;
  $82 = $mod;
  $83 = ((($82)) + 136|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($81|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $i;
  $87 = $mod;
  $88 = ((($87)) + 184|0);
  $89 = (($88) + (($86*12)|0)|0);
  HEAP32[$89>>2] = 128;
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 $92 = $1;
 $93 = ((($92)) + 1284|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 | 33554464;
 HEAP32[$93>>2] = $95;
 $96 = $1;
 $97 = ((($96)) + 1288|0);
 HEAP32[$97>>2] = 1;
 $0 = 0;
 $98 = $0;
 STACKTOP = sp;return ($98|0);
}
function _get_main($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $flags = 0, $mod = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buf = sp + 32|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 (_hio_read($buf,1,64,$6)|0);
 $7 = $mod;
 (_strncpy(($7|0),($buf|0),64)|0);
 $8 = $1;
 _set_type($8,7152,$vararg_buffer);
 $9 = $3;
 $10 = (_hio_read8($9)|0);
 $11 = $10&255;
 $flags = $11;
 $12 = $flags;
 $13 = $12 ^ -1;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $1;
  $17 = ((($16)) + 1284|0);
  HEAP32[$17>>2] = 4096;
 }
 $18 = $3;
 $19 = (_hio_read8($18)|0);
 $20 = $19&255;
 $21 = $mod;
 $22 = ((($21)) + 136|0);
 HEAP32[$22>>2] = $20;
 $23 = $3;
 $24 = (_hio_read8($23)|0);
 $25 = $24&255;
 $26 = $mod;
 $27 = ((($26)) + 148|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = (_hio_read8($28)|0);
 $30 = $29&255;
 $31 = $mod;
 $32 = ((($31)) + 152|0);
 HEAP32[$32>>2] = $30;
 $33 = $3;
 (_hio_read16l($33)|0);
 $34 = $3;
 (_hio_read16l($34)|0);
 $35 = $3;
 (_hio_read8($35)|0);
 $36 = $mod;
 $37 = ((($36)) + 136|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)>(32);
 if ($39) {
  $0 = -1;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _get_ordr348($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 HEAP32[$9>>2] = $7;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $mod;
  $12 = ((($11)) + 156|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = (_hio_read8($15)|0);
  $17 = $i;
  $18 = $mod;
  $19 = ((($18)) + 952|0);
  $20 = (($19) + ($17)|0);
  HEAP8[$20>>0] = $16;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return 0;
}
function _get_patt_cnt350($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 $6 = (_hio_read8($5)|0);
 $7 = $6&255;
 $8 = (($7) + 1)|0;
 $i = $8;
 $9 = $i;
 $10 = $mod;
 $11 = ((($10)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)>($12|0);
 if (!($13)) {
  STACKTOP = sp;return 0;
 }
 $14 = $i;
 $15 = $mod;
 $16 = ((($15)) + 128|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return 0;
}
function _get_inst_cnt352($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $size;
 $2 = $f;
 $3 = $parm;
 $4 = $0;
 $mod = $4;
 $5 = $2;
 (_hio_read8($5)|0);
 $6 = $2;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $9 = (($8) + 1)|0;
 $i = $9;
 $10 = $i;
 $11 = $mod;
 $12 = ((($11)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)>($13|0);
 if ($14) {
  $15 = $i;
  $16 = $mod;
  $17 = ((($16)) + 140|0);
  HEAP32[$17>>2] = $15;
 }
 $18 = $2;
 (_hio_seek($18,28,1)|0);
 $19 = $2;
 $20 = (_hio_read8($19)|0);
 $21 = $20&255;
 $22 = $mod;
 $23 = ((($22)) + 144|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($21))|0;
 HEAP32[$23>>2] = $25;
 STACKTOP = sp;return 0;
}
function _get_patt353($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chan = 0, $cond = 0, $dummy = 0, $event = 0, $flag = 0;
 var $fxp = 0, $fxt = 0, $i = 0, $len = 0, $mod = 0, $or$cond = 0, $r = 0, $rows = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dummy = sp + 64|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $3;
 $7 = (_hio_read8($6)|0);
 $8 = $7&255;
 $i = $8;
 $9 = $3;
 $10 = (_hio_read32l($9)|0);
 $len = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 128|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11|0)>=($14|0);
 $16 = $len;
 $17 = ($16|0)<=(0);
 $or$cond = $15 | $17;
 if ($or$cond) {
  $0 = -1;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $18 = $3;
 $19 = (_hio_read8($18)|0);
 $20 = $19&255;
 $21 = (($20) + 1)|0;
 $rows = $21;
 $22 = $mod;
 $23 = $i;
 $24 = $rows;
 $25 = (_pattern_tracks_alloc($22,$23,$24)|0);
 $26 = ($25|0)<(0);
 if ($26) {
  $0 = -1;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $r = 0;
 while(1) {
  $27 = $r;
  $28 = $rows;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $3;
  $31 = (_hio_read8($30)|0);
  $flag = $31;
  $32 = $31&255;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = $r;
   $35 = (($34) + 1)|0;
   $r = $35;
   continue;
  }
  $36 = $flag;
  $37 = $36&255;
  $38 = $37 & 31;
  $chan = $38;
  $39 = $chan;
  $40 = $mod;
  $41 = ((($40)) + 136|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)<($42|0);
  if ($43) {
   $44 = $r;
   $45 = $chan;
   $46 = $i;
   $47 = $1;
   $48 = ((($47)) + 168|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($46<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 4|0);
   $53 = (($52) + ($45<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $1;
   $56 = ((($55)) + 172|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($54<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($59)) + 4|0);
   $61 = (($60) + ($44<<3)|0);
   $62 = $61;
  } else {
   $62 = $dummy;
  }
  $event = $62;
  $63 = $flag;
  $64 = $63&255;
  $65 = $64 & 128;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $3;
   $68 = (_hio_read8($67)|0);
   $fxp = $68;
   $69 = $3;
   $70 = (_hio_read8($69)|0);
   $fxt = $70;
   $71 = $fxt;
   $72 = $71&255;
   $cond = ($72|0)==(20);
   if ($cond) {
    $fxt = -93;
   } else {
    $73 = $fxt;
    $74 = $73&255;
    $75 = ($74|0)>(15);
    if ($75) {
     $76 = $fxt;
     $77 = $76&255;
     $78 = $fxp;
     $79 = $78&255;
     HEAP32[$vararg_buffer>>2] = $77;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $79;
     (_printf((7208|0),($vararg_buffer|0))|0);
     $fxp = 0;
     $fxt = 0;
    }
   }
   $80 = $fxt;
   $81 = $event;
   $82 = ((($81)) + 3|0);
   HEAP8[$82>>0] = $80;
   $83 = $fxp;
   $84 = $event;
   $85 = ((($84)) + 4|0);
   HEAP8[$85>>0] = $83;
  }
  $86 = $flag;
  $87 = $86&255;
  $88 = $87 & 64;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $3;
   $91 = (_hio_read8($90)|0);
   $92 = $event;
   $93 = ((($92)) + 1|0);
   HEAP8[$93>>0] = $91;
   $94 = $3;
   $95 = (_hio_read8($94)|0);
   $96 = $event;
   HEAP8[$96>>0] = $95;
   $97 = $event;
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = ($99|0)==(128);
   if ($100) {
    $101 = $event;
    HEAP8[$101>>0] = -127;
   }
  }
  $102 = $flag;
  $103 = $102&255;
  $104 = $103 & 32;
  $105 = ($104|0)!=(0);
  if (!($105)) {
   continue;
  }
  $106 = $3;
  $107 = (_hio_read8($106)|0);
  $108 = $107&255;
  $109 = (($108|0) / 2)&-1;
  $110 = (1 + ($109))|0;
  $111 = $110&255;
  $112 = $event;
  $113 = ((($112)) + 2|0);
  HEAP8[$113>>0] = $111;
 }
 $0 = 9;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _get_inst354($m,$size,$f,$parm) {
 $m = $m|0;
 $size = $size|0;
 $f = $f|0;
 $parm = $parm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buf = 0, $data = 0, $fade = 0, $finetune = 0, $flags = 0, $i = 0, $j = 0, $mod = 0, $snum = 0, $srate = 0, $val = 0, $vde = 0, $vra = 0, $vsw = 0, $vwf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 76|0;
 $1 = $m;
 $2 = $size;
 $3 = $f;
 $4 = $parm;
 $5 = $1;
 $mod = $5;
 $6 = $4;
 $data = $6;
 $7 = $3;
 (_hio_read8($7)|0);
 $8 = $3;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $i = $10;
 $11 = $i;
 $12 = $mod;
 $13 = ((($12)) + 176|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($11*764)|0)|0);
 $16 = $3;
 (_hio_read($15,1,28,$16)|0);
 $17 = $i;
 $18 = $mod;
 $19 = ((($18)) + 176|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + (($17*764)|0)|0);
 (_adjust_string($21)|0);
 $22 = $3;
 $23 = (_hio_read8($22)|0);
 $24 = $23&255;
 $25 = $i;
 $26 = $mod;
 $27 = ((($26)) + 176|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + (($25*764)|0)|0);
 $30 = ((($29)) + 36|0);
 HEAP32[$30>>2] = $24;
 $j = 0;
 while(1) {
  $31 = $j;
  $32 = ($31|0)<(108);
  $33 = $3;
  if (!($32)) {
   break;
  }
  $34 = (_hio_read8($33)|0);
  $35 = $j;
  $36 = $i;
  $37 = $mod;
  $38 = ((($37)) + 176|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + (($36*764)|0)|0);
  $41 = ((($40)) + 512|0);
  $42 = (($41) + ($35<<1)|0);
  HEAP8[$42>>0] = $34;
  $43 = $j;
  $44 = (($43) + 1)|0;
  $j = $44;
 }
 (_hio_seek($33,11,1)|0);
 $45 = $3;
 $46 = (_hio_read8($45)|0);
 $47 = $46&255;
 $vwf = $47;
 $48 = $3;
 $49 = (_hio_read8($48)|0);
 $50 = $49&255;
 $vsw = $50;
 $51 = $3;
 (_hio_read8($51)|0);
 $52 = $3;
 (_hio_read8($52)|0);
 $53 = $3;
 $54 = (_hio_read8($53)|0);
 $55 = $54&255;
 $56 = (($55|0) / 4)&-1;
 $vde = $56;
 $57 = $3;
 $58 = (_hio_read16l($57)|0);
 $59 = $58&65535;
 $60 = (($59|0) / 16)&-1;
 $vra = $60;
 $61 = $3;
 (_hio_read8($61)|0);
 $62 = $3;
 $63 = (_hio_read8($62)|0);
 $64 = $63&255;
 $val = $64;
 $65 = $val;
 $66 = $65 & 15;
 $67 = $66 & 1;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $i;
  $70 = $mod;
  $71 = ((($70)) + 176|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + (($69*764)|0)|0);
  $74 = ((($73)) + 44|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 | 1;
  HEAP32[$74>>2] = $76;
 }
 $77 = $val;
 $78 = $77 & 15;
 $79 = $78 & 2;
 $80 = ($79|0)!=(0);
 if ($80) {
  $81 = $i;
  $82 = $mod;
  $83 = ((($82)) + 176|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + (($81*764)|0)|0);
  $86 = ((($85)) + 44|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 | 2;
  HEAP32[$86>>2] = $88;
 }
 $89 = $val;
 $90 = $89 & 15;
 $91 = $90 & 4;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 44|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $99 | 4;
  HEAP32[$98>>2] = $100;
 }
 $101 = $val;
 $102 = $101 & 240;
 $103 = $102 >> 4;
 $104 = $103 & 1;
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $i;
  $107 = $mod;
  $108 = ((($107)) + 176|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + (($106*764)|0)|0);
  $111 = ((($110)) + 200|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $112 | 1;
  HEAP32[$111>>2] = $113;
 }
 $114 = $val;
 $115 = $114 & 240;
 $116 = $115 >> 4;
 $117 = $116 & 2;
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = $i;
  $120 = $mod;
  $121 = ((($120)) + 176|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + (($119*764)|0)|0);
  $124 = ((($123)) + 200|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $125 | 2;
  HEAP32[$124>>2] = $126;
 }
 $127 = $val;
 $128 = $127 & 240;
 $129 = $128 >> 4;
 $130 = $129 & 4;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $i;
  $133 = $mod;
  $134 = ((($133)) + 176|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + (($132*764)|0)|0);
  $137 = ((($136)) + 200|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 | 4;
  HEAP32[$137>>2] = $139;
 }
 $140 = $3;
 $141 = (_hio_read8($140)|0);
 $142 = $141&255;
 $val = $142;
 $143 = $val;
 $144 = $143 & 15;
 $145 = (($144) + 1)|0;
 $146 = $i;
 $147 = $mod;
 $148 = ((($147)) + 176|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($149) + (($146*764)|0)|0);
 $151 = ((($150)) + 44|0);
 $152 = ((($151)) + 4|0);
 HEAP32[$152>>2] = $145;
 $153 = $val;
 $154 = $153 & 240;
 $155 = $154 >> 4;
 $156 = (($155) + 1)|0;
 $157 = $i;
 $158 = $mod;
 $159 = ((($158)) + 176|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + (($157*764)|0)|0);
 $162 = ((($161)) + 200|0);
 $163 = ((($162)) + 4|0);
 HEAP32[$163>>2] = $156;
 $164 = $3;
 $165 = (_hio_read8($164)|0);
 $166 = $165&255;
 $val = $166;
 $167 = $val;
 $168 = $167 & 15;
 $169 = $i;
 $170 = $mod;
 $171 = ((($170)) + 176|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = (($172) + (($169*764)|0)|0);
 $174 = ((($173)) + 44|0);
 $175 = ((($174)) + 12|0);
 HEAP32[$175>>2] = $168;
 $176 = $val;
 $177 = $176 & 240;
 $178 = $177 >> 4;
 $179 = $i;
 $180 = $mod;
 $181 = ((($180)) + 176|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + (($179*764)|0)|0);
 $184 = ((($183)) + 200|0);
 $185 = ((($184)) + 12|0);
 HEAP32[$185>>2] = $178;
 $186 = $3;
 $187 = (_hio_read8($186)|0);
 $188 = $187&255;
 $val = $188;
 $189 = $val;
 $190 = $189 & 15;
 $191 = $i;
 $192 = $mod;
 $193 = ((($192)) + 176|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = (($194) + (($191*764)|0)|0);
 $196 = ((($195)) + 44|0);
 $197 = ((($196)) + 20|0);
 HEAP32[$197>>2] = $190;
 $198 = $val;
 $199 = $198 & 240;
 $200 = $199 >> 4;
 $201 = $i;
 $202 = $mod;
 $203 = ((($202)) + 176|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (($204) + (($201*764)|0)|0);
 $206 = ((($205)) + 200|0);
 $207 = ((($206)) + 20|0);
 HEAP32[$207>>2] = $200;
 $208 = $3;
 (_hio_read8($208)|0);
 $209 = $val;
 $210 = $209 & 15;
 $211 = $i;
 $212 = $mod;
 $213 = ((($212)) + 176|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($214) + (($211*764)|0)|0);
 $216 = ((($215)) + 44|0);
 $217 = ((($216)) + 24|0);
 HEAP32[$217>>2] = $210;
 $218 = $val;
 $219 = $218 & 240;
 $220 = $219 >> 4;
 $221 = $i;
 $222 = $mod;
 $223 = ((($222)) + 176|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = (($224) + (($221*764)|0)|0);
 $226 = ((($225)) + 200|0);
 $227 = ((($226)) + 24|0);
 HEAP32[$227>>2] = $220;
 $228 = $i;
 $229 = $mod;
 $230 = ((($229)) + 176|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (($231) + (($228*764)|0)|0);
 $233 = ((($232)) + 44|0);
 $234 = ((($233)) + 4|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<=(0);
 if ($236) {
  label = 18;
 } else {
  $237 = $i;
  $238 = $mod;
  $239 = ((($238)) + 176|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + (($237*764)|0)|0);
  $242 = ((($241)) + 44|0);
  $243 = ((($242)) + 4|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ($244|0)>=(32);
  if ($245) {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $246 = $i;
  $247 = $mod;
  $248 = ((($247)) + 176|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + (($246*764)|0)|0);
  $251 = ((($250)) + 44|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = $252 & -2;
  HEAP32[$251>>2] = $253;
 }
 $254 = $i;
 $255 = $mod;
 $256 = ((($255)) + 176|0);
 $257 = HEAP32[$256>>2]|0;
 $258 = (($257) + (($254*764)|0)|0);
 $259 = ((($258)) + 200|0);
 $260 = ((($259)) + 4|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ($261|0)<=(0);
 if ($262) {
  label = 21;
 } else {
  $263 = $i;
  $264 = $mod;
  $265 = ((($264)) + 176|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($266) + (($263*764)|0)|0);
  $268 = ((($267)) + 200|0);
  $269 = ((($268)) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)>=(32);
  if ($271) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $272 = $i;
  $273 = $mod;
  $274 = ((($273)) + 176|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($275) + (($272*764)|0)|0);
  $277 = ((($276)) + 200|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = $278 & -2;
  HEAP32[$277>>2] = $279;
 }
 $280 = $3;
 (_hio_read($buf,1,30,$280)|0);
 $j = 0;
 while(1) {
  $281 = $j;
  $282 = $i;
  $283 = $mod;
  $284 = ((($283)) + 176|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($285) + (($282*764)|0)|0);
  $287 = ((($286)) + 44|0);
  $288 = ((($287)) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($281|0)<($289|0);
  if (!($290)) {
   break;
  }
  $291 = $j;
  $292 = ($291*3)|0;
  $293 = (($buf) + ($292)|0);
  $294 = (_readmem16l($293)|0);
  $295 = $294&65535;
  $296 = (($295|0) / 16)&-1;
  $297 = $296&65535;
  $298 = $j;
  $299 = $298<<1;
  $300 = $i;
  $301 = $mod;
  $302 = ((($301)) + 176|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (($303) + (($300*764)|0)|0);
  $305 = ((($304)) + 44|0);
  $306 = ((($305)) + 28|0);
  $307 = (($306) + ($299<<1)|0);
  HEAP16[$307>>1] = $297;
  $308 = $j;
  $309 = ($308*3)|0;
  $310 = (($309) + 2)|0;
  $311 = (($buf) + ($310)|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&255;
  $314 = $j;
  $315 = $314<<1;
  $316 = (($315) + 1)|0;
  $317 = $i;
  $318 = $mod;
  $319 = ((($318)) + 176|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($320) + (($317*764)|0)|0);
  $322 = ((($321)) + 44|0);
  $323 = ((($322)) + 28|0);
  $324 = (($323) + ($316<<1)|0);
  HEAP16[$324>>1] = $313;
  $325 = $j;
  $326 = (($325) + 1)|0;
  $j = $326;
 }
 $327 = $3;
 (_hio_read($buf,1,30,$327)|0);
 $j = 0;
 while(1) {
  $328 = $j;
  $329 = $i;
  $330 = $mod;
  $331 = ((($330)) + 176|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = (($332) + (($329*764)|0)|0);
  $334 = ((($333)) + 200|0);
  $335 = ((($334)) + 4|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = ($328|0)<($336|0);
  if (!($337)) {
   break;
  }
  $338 = $j;
  $339 = ($338*3)|0;
  $340 = (($buf) + ($339)|0);
  $341 = (_readmem16l($340)|0);
  $342 = $341&65535;
  $343 = (($342|0) / 16)&-1;
  $344 = $343&65535;
  $345 = $j;
  $346 = $345<<1;
  $347 = $i;
  $348 = $mod;
  $349 = ((($348)) + 176|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = (($350) + (($347*764)|0)|0);
  $352 = ((($351)) + 200|0);
  $353 = ((($352)) + 28|0);
  $354 = (($353) + ($346<<1)|0);
  HEAP16[$354>>1] = $344;
  $355 = $j;
  $356 = ($355*3)|0;
  $357 = (($356) + 2)|0;
  $358 = (($buf) + ($357)|0);
  $359 = HEAP8[$358>>0]|0;
  $360 = $359&255;
  $361 = $j;
  $362 = $361<<1;
  $363 = (($362) + 1)|0;
  $364 = $i;
  $365 = $mod;
  $366 = ((($365)) + 176|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = (($367) + (($364*764)|0)|0);
  $369 = ((($368)) + 200|0);
  $370 = ((($369)) + 28|0);
  $371 = (($370) + ($363<<1)|0);
  HEAP16[$371>>1] = $360;
  $372 = $j;
  $373 = (($372) + 1)|0;
  $j = $373;
 }
 $374 = $3;
 $375 = (_hio_read8($374)|0);
 $376 = $375&255;
 $fade = $376;
 $377 = $3;
 (_hio_read8($377)|0);
 $378 = $i;
 $379 = $mod;
 $380 = ((($379)) + 176|0);
 $381 = HEAP32[$380>>2]|0;
 $382 = (($381) + (($378*764)|0)|0);
 $383 = ((($382)) + 36|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = ($384|0)==(0);
 if ($385) {
  $0 = 0;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 $386 = $mod;
 $387 = $i;
 $388 = $i;
 $389 = $mod;
 $390 = ((($389)) + 176|0);
 $391 = HEAP32[$390>>2]|0;
 $392 = (($391) + (($388*764)|0)|0);
 $393 = ((($392)) + 36|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = (_subinstrument_alloc($386,$387,$394)|0);
 $396 = ($395|0)<(0);
 if ($396) {
  $0 = -1;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 $j = 0;
 while(1) {
  $397 = $j;
  $398 = $i;
  $399 = $mod;
  $400 = ((($399)) + 176|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = (($401) + (($398*764)|0)|0);
  $403 = ((($402)) + 36|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = ($397|0)<($404|0);
  if (!($405)) {
   label = 46;
   break;
  }
  $406 = $3;
  (_hio_read32b($406)|0);
  $407 = $3;
  (_hio_read32b($407)|0);
  $408 = $data;
  $409 = HEAP32[$408>>2]|0;
  $410 = $mod;
  $411 = ((($410)) + 180|0);
  $412 = HEAP32[$411>>2]|0;
  $413 = (($412) + (($409*52)|0)|0);
  $414 = $3;
  (_hio_read($413,1,28,$414)|0);
  $415 = $data;
  $416 = HEAP32[$415>>2]|0;
  $417 = $mod;
  $418 = ((($417)) + 180|0);
  $419 = HEAP32[$418>>2]|0;
  $420 = (($419) + (($416*52)|0)|0);
  (_adjust_string($420)|0);
  $421 = $3;
  $422 = (_hio_read8($421)|0);
  $423 = $422&255;
  $424 = $423<<2;
  $425 = $j;
  $426 = $i;
  $427 = $mod;
  $428 = ((($427)) + 176|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = (($429) + (($426*764)|0)|0);
  $431 = ((($430)) + 756|0);
  $432 = HEAP32[$431>>2]|0;
  $433 = (($432) + ($425<<6)|0);
  $434 = ((($433)) + 8|0);
  HEAP32[$434>>2] = $424;
  $435 = $j;
  $436 = $i;
  $437 = $mod;
  $438 = ((($437)) + 176|0);
  $439 = HEAP32[$438>>2]|0;
  $440 = (($439) + (($436*764)|0)|0);
  $441 = ((($440)) + 756|0);
  $442 = HEAP32[$441>>2]|0;
  $443 = (($442) + ($435<<6)|0);
  $444 = ((($443)) + 8|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = ($445|0)==(0);
  if ($446) {
   $447 = $j;
   $448 = $i;
   $449 = $mod;
   $450 = ((($449)) + 176|0);
   $451 = HEAP32[$450>>2]|0;
   $452 = (($451) + (($448*764)|0)|0);
   $453 = ((($452)) + 756|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = (($454) + ($447<<6)|0);
   $456 = ((($455)) + 8|0);
   HEAP32[$456>>2] = 128;
  }
  $457 = $3;
  $458 = (_hio_read8($457)|0);
  $459 = $458&255;
  $460 = $j;
  $461 = $i;
  $462 = $mod;
  $463 = ((($462)) + 176|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = (($464) + (($461*764)|0)|0);
  $466 = ((($465)) + 756|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = (($467) + ($460<<6)|0);
  HEAP32[$468>>2] = $459;
  $469 = $3;
  $470 = (_hio_read8($469)|0);
  $471 = $470&255;
  $flags = $471;
  $472 = $3;
  (_hio_read8($472)|0);
  $473 = $vwf;
  $474 = $j;
  $475 = $i;
  $476 = $mod;
  $477 = ((($476)) + 176|0);
  $478 = HEAP32[$477>>2]|0;
  $479 = (($478) + (($475*764)|0)|0);
  $480 = ((($479)) + 756|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = (($481) + ($474<<6)|0);
  $483 = ((($482)) + 20|0);
  HEAP32[$483>>2] = $473;
  $484 = $vde;
  $485 = $j;
  $486 = $i;
  $487 = $mod;
  $488 = ((($487)) + 176|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = (($489) + (($486*764)|0)|0);
  $491 = ((($490)) + 756|0);
  $492 = HEAP32[$491>>2]|0;
  $493 = (($492) + ($485<<6)|0);
  $494 = ((($493)) + 24|0);
  HEAP32[$494>>2] = $484;
  $495 = $vra;
  $496 = $j;
  $497 = $i;
  $498 = $mod;
  $499 = ((($498)) + 176|0);
  $500 = HEAP32[$499>>2]|0;
  $501 = (($500) + (($497*764)|0)|0);
  $502 = ((($501)) + 756|0);
  $503 = HEAP32[$502>>2]|0;
  $504 = (($503) + ($496<<6)|0);
  $505 = ((($504)) + 28|0);
  HEAP32[$505>>2] = $495;
  $506 = $vsw;
  $507 = $j;
  $508 = $i;
  $509 = $mod;
  $510 = ((($509)) + 176|0);
  $511 = HEAP32[$510>>2]|0;
  $512 = (($511) + (($508*764)|0)|0);
  $513 = ((($512)) + 756|0);
  $514 = HEAP32[$513>>2]|0;
  $515 = (($514) + ($507<<6)|0);
  $516 = ((($515)) + 32|0);
  HEAP32[$516>>2] = $506;
  $517 = $data;
  $518 = HEAP32[$517>>2]|0;
  $519 = $j;
  $520 = $i;
  $521 = $mod;
  $522 = ((($521)) + 176|0);
  $523 = HEAP32[$522>>2]|0;
  $524 = (($523) + (($520*764)|0)|0);
  $525 = ((($524)) + 756|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = (($526) + ($519<<6)|0);
  $528 = ((($527)) + 40|0);
  HEAP32[$528>>2] = $518;
  $529 = $3;
  $530 = (_hio_read32l($529)|0);
  $531 = $data;
  $532 = HEAP32[$531>>2]|0;
  $533 = $mod;
  $534 = ((($533)) + 180|0);
  $535 = HEAP32[$534>>2]|0;
  $536 = (($535) + (($532*52)|0)|0);
  $537 = ((($536)) + 32|0);
  HEAP32[$537>>2] = $530;
  $538 = $3;
  $539 = (_hio_read32l($538)|0);
  $540 = $data;
  $541 = HEAP32[$540>>2]|0;
  $542 = $mod;
  $543 = ((($542)) + 180|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = (($544) + (($541*52)|0)|0);
  $546 = ((($545)) + 36|0);
  HEAP32[$546>>2] = $539;
  $547 = $3;
  $548 = (_hio_read32l($547)|0);
  $549 = $data;
  $550 = HEAP32[$549>>2]|0;
  $551 = $mod;
  $552 = ((($551)) + 180|0);
  $553 = HEAP32[$552>>2]|0;
  $554 = (($553) + (($550*52)|0)|0);
  $555 = ((($554)) + 40|0);
  HEAP32[$555>>2] = $548;
  $556 = $data;
  $557 = HEAP32[$556>>2]|0;
  $558 = $mod;
  $559 = ((($558)) + 180|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = (($560) + (($557*52)|0)|0);
  $562 = ((($561)) + 44|0);
  HEAP32[$562>>2] = 0;
  $563 = $flags;
  $564 = $563 & 4;
  $565 = ($564|0)!=(0);
  if ($565) {
   $566 = $data;
   $567 = HEAP32[$566>>2]|0;
   $568 = $mod;
   $569 = ((($568)) + 180|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = (($570) + (($567*52)|0)|0);
   $572 = ((($571)) + 44|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = $573 | 1;
   HEAP32[$572>>2] = $574;
  }
  $575 = $flags;
  $576 = $575 & 8;
  $577 = ($576|0)!=(0);
  if ($577) {
   $578 = $data;
   $579 = HEAP32[$578>>2]|0;
   $580 = $mod;
   $581 = ((($580)) + 180|0);
   $582 = HEAP32[$581>>2]|0;
   $583 = (($582) + (($579*52)|0)|0);
   $584 = ((($583)) + 44|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = $585 | 2;
   HEAP32[$584>>2] = $586;
  }
  $587 = $flags;
  $588 = $587 & 16;
  $589 = ($588|0)!=(0);
  if ($589) {
   $590 = $data;
   $591 = HEAP32[$590>>2]|0;
   $592 = $mod;
   $593 = ((($592)) + 180|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = (($594) + (($591*52)|0)|0);
   $596 = ((($595)) + 44|0);
   $597 = HEAP32[$596>>2]|0;
   $598 = $597 | 4;
   HEAP32[$596>>2] = $598;
  }
  $599 = $3;
  $600 = (_hio_read32l($599)|0);
  $srate = $600;
  $finetune = 0;
  $601 = $srate;
  $602 = $j;
  $603 = $i;
  $604 = $mod;
  $605 = ((($604)) + 176|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = (($606) + (($603*764)|0)|0);
  $608 = ((($607)) + 756|0);
  $609 = HEAP32[$608>>2]|0;
  $610 = (($609) + ($602<<6)|0);
  $611 = ((($610)) + 12|0);
  $612 = $j;
  $613 = $i;
  $614 = $mod;
  $615 = ((($614)) + 176|0);
  $616 = HEAP32[$615>>2]|0;
  $617 = (($616) + (($613*764)|0)|0);
  $618 = ((($617)) + 756|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = (($619) + ($612<<6)|0);
  $621 = ((($620)) + 16|0);
  _c2spd_to_note($601,$611,$621);
  $622 = $finetune;
  $623 = $j;
  $624 = $i;
  $625 = $mod;
  $626 = ((($625)) + 176|0);
  $627 = HEAP32[$626>>2]|0;
  $628 = (($627) + (($624*764)|0)|0);
  $629 = ((($628)) + 756|0);
  $630 = HEAP32[$629>>2]|0;
  $631 = (($630) + ($623<<6)|0);
  $632 = ((($631)) + 16|0);
  $633 = HEAP32[$632>>2]|0;
  $634 = (($633) + ($622))|0;
  HEAP32[$632>>2] = $634;
  $635 = $3;
  (_hio_read32l($635)|0);
  $636 = $3;
  (_hio_read32l($636)|0);
  $637 = $data;
  $638 = HEAP32[$637>>2]|0;
  $639 = $mod;
  $640 = ((($639)) + 180|0);
  $641 = HEAP32[$640>>2]|0;
  $642 = (($641) + (($638*52)|0)|0);
  $643 = ((($642)) + 32|0);
  $644 = HEAP32[$643>>2]|0;
  $645 = ($644|0)>(1);
  if ($645) {
   $646 = $data;
   $647 = HEAP32[$646>>2]|0;
   $snum = $647;
   $648 = $1;
   $649 = $3;
   $650 = $snum;
   $651 = $mod;
   $652 = ((($651)) + 180|0);
   $653 = HEAP32[$652>>2]|0;
   $654 = (($653) + (($650*52)|0)|0);
   $655 = (_load_sample($648,$649,0,$654,0)|0);
   $656 = ($655|0)<(0);
   if ($656) {
    label = 44;
    break;
   }
  }
  $657 = $j;
  $658 = (($657) + 1)|0;
  $j = $658;
  $659 = $data;
  $660 = HEAP32[$659>>2]|0;
  $661 = (($660) + 1)|0;
  HEAP32[$659>>2] = $661;
 }
 if ((label|0) == 44) {
  $0 = -1;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 else if ((label|0) == 46) {
  $0 = 0;
  $662 = $0;
  STACKTOP = sp;return ($662|0);
 }
 return (0)|0;
}
function _mfp_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $buf = 0, $i = 0, $len = 0, $lps = 0, $lsz = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = $1;
   $8 = (_hio_read($buf,1,384,$7)|0);
   $9 = ($8>>>0)<(384);
   if ($9) {
    $0 = -1;
    break;
   }
   $10 = ((($buf)) + 249|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($12|0)!=(127);
   if ($13) {
    $0 = -1;
    break;
   }
   $i = 0;
   while(1) {
    $14 = $i;
    $15 = ($14|0)<(31);
    if (!($15)) {
     label = 22;
     break;
    }
    $16 = $i;
    $17 = $16<<3;
    $18 = (($buf) + ($17)|0);
    $19 = (_readmem16b($18)|0);
    $20 = $19&65535;
    $len = $20;
    $21 = $len;
    $22 = ($21|0)>(32767);
    if ($22) {
     label = 10;
     break;
    }
    $23 = $i;
    $24 = $23<<3;
    $25 = (($24) + 2)|0;
    $26 = (($buf) + ($25)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = $28 & 240;
    $30 = ($29|0)!=(0);
    if ($30) {
     label = 12;
     break;
    }
    $31 = $i;
    $32 = $31<<3;
    $33 = (($32) + 3)|0;
    $34 = (($buf) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36|0)>(64);
    if ($37) {
     label = 14;
     break;
    }
    $38 = $i;
    $39 = $38<<3;
    $40 = (($buf) + ($39)|0);
    $41 = ((($40)) + 4|0);
    $42 = (_readmem16b($41)|0);
    $43 = $42&65535;
    $lps = $43;
    $44 = $lps;
    $45 = $len;
    $46 = ($44|0)>($45|0);
    if ($46) {
     label = 16;
     break;
    }
    $47 = $i;
    $48 = $47<<3;
    $49 = (($buf) + ($48)|0);
    $50 = ((($49)) + 6|0);
    $51 = (_readmem16b($50)|0);
    $52 = $51&65535;
    $lsz = $52;
    $53 = $lps;
    $54 = $lsz;
    $55 = (($53) + ($54))|0;
    $56 = (($55) - 1)|0;
    $57 = $len;
    $58 = ($56|0)>($57|0);
    if ($58) {
     label = 18;
     break;
    }
    $59 = $len;
    $60 = ($59|0)>(0);
    $61 = $lsz;
    $62 = ($61|0)==(0);
    $or$cond = $60 & $62;
    if ($or$cond) {
     label = 20;
     break;
    }
    $63 = $i;
    $64 = (($63) + 1)|0;
    $i = $64;
   }
   if ((label|0) == 10) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 12) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 14) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 16) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 18) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 20) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 22) {
    $65 = ((($buf)) + 248|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = ((($buf)) + 378|0);
    $69 = (_readmem16b($68)|0);
    $70 = $69&65535;
    $71 = ($67|0)!=($70|0);
    if ($71) {
     $0 = -1;
     break;
    }
    $72 = ((($buf)) + 378|0);
    $73 = (_readmem16b($72)|0);
    $74 = $73&65535;
    $75 = ((($buf)) + 380|0);
    $76 = (_readmem16b($75)|0);
    $77 = $76&65535;
    $78 = ($74|0)!=($77|0);
    if ($78) {
     $0 = -1;
     break;
    } else {
     $79 = $1;
     $80 = $2;
     _read_title($79,$80,0);
     $0 = 0;
     break;
    }
   }
  }
 } while(0);
 $81 = $0;
 STACKTOP = sp;return ($81|0);
}
function _mfp_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $event = 0, $i = 0, $j = 0;
 var $k = 0, $loop_size = 0, $mod = 0, $mod_event = 0, $pat_addr = 0, $pat_table = 0, $row = 0, $s = 0, $size1 = 0, $smp_filename = 0, $st = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr6 = 0, $x = 0, $x1 = 0, $y = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $st = sp + 2108|0;
 $smp_filename = sp + 3256|0;
 $pat_table = sp + 48|0;
 $buf = sp + 2232|0;
 $mod_event = sp + 2228|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $1;
 _set_type($7,7256,$vararg_buffer);
 $8 = $mod;
 $9 = ((($8)) + 136|0);
 HEAP32[$9>>2] = 4;
 $10 = $mod;
 $11 = ((($10)) + 144|0);
 HEAP32[$11>>2] = 31;
 $12 = $mod;
 $13 = ((($12)) + 140|0);
 HEAP32[$13>>2] = 31;
 $14 = $mod;
 $15 = (_instrument_init($14)|0);
 $16 = ($15|0)<(0);
 if ($16) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $i = 0;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<(31);
  if (!($18)) {
   break;
  }
  $19 = $mod;
  $20 = $i;
  $21 = (_subinstrument_alloc($19,$20,1)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   label = 6;
   break;
  }
  $23 = $2;
  $24 = (_hio_read16b($23)|0);
  $25 = $24&65535;
  $26 = $25<<1;
  $27 = $i;
  $28 = $mod;
  $29 = ((($28)) + 180|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + (($27*52)|0)|0);
  $32 = ((($31)) + 32|0);
  HEAP32[$32>>2] = $26;
  $33 = $2;
  $34 = (_hio_read8($33)|0);
  $35 = $34&255;
  $36 = $35 << 4;
  $37 = $36&255;
  $38 = $37 << 24 >> 24;
  $39 = $i;
  $40 = $mod;
  $41 = ((($40)) + 176|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + (($39*764)|0)|0);
  $44 = ((($43)) + 756|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 16|0);
  HEAP32[$46>>2] = $38;
  $47 = $2;
  $48 = (_hio_read8($47)|0);
  $49 = $48&255;
  $50 = $i;
  $51 = $mod;
  $52 = ((($51)) + 176|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + (($50*764)|0)|0);
  $55 = ((($54)) + 756|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$56>>2] = $49;
  $57 = $2;
  $58 = (_hio_read16b($57)|0);
  $59 = $58&65535;
  $60 = $59<<1;
  $61 = $i;
  $62 = $mod;
  $63 = ((($62)) + 180|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + (($61*52)|0)|0);
  $66 = ((($65)) + 36|0);
  HEAP32[$66>>2] = $60;
  $67 = $2;
  $68 = (_hio_read16b($67)|0);
  $69 = $68&65535;
  $loop_size = $69;
  $70 = $i;
  $71 = $mod;
  $72 = ((($71)) + 180|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + (($70*52)|0)|0);
  $75 = ((($74)) + 36|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $loop_size;
  $78 = $77<<1;
  $79 = (($76) + ($78))|0;
  $80 = $i;
  $81 = $mod;
  $82 = ((($81)) + 180|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + (($80*52)|0)|0);
  $85 = ((($84)) + 40|0);
  HEAP32[$85>>2] = $79;
  $86 = $loop_size;
  $87 = ($86|0)>(1);
  $88 = $87 ? 2 : 0;
  $89 = $i;
  $90 = $mod;
  $91 = ((($90)) + 180|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + (($89*52)|0)|0);
  $94 = ((($93)) + 44|0);
  HEAP32[$94>>2] = $88;
  $95 = $i;
  $96 = $mod;
  $97 = ((($96)) + 176|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + (($95*764)|0)|0);
  $100 = ((($99)) + 756|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ((($101)) + 8|0);
  HEAP32[$102>>2] = 128;
  $103 = $i;
  $104 = $i;
  $105 = $mod;
  $106 = ((($105)) + 176|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + (($104*764)|0)|0);
  $109 = ((($108)) + 756|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 40|0);
  HEAP32[$111>>2] = $103;
  $112 = $i;
  $113 = $mod;
  $114 = ((($113)) + 176|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + (($112*764)|0)|0);
  $117 = ((($116)) + 40|0);
  HEAP32[$117>>2] = 4095;
  $118 = $i;
  $119 = $mod;
  $120 = ((($119)) + 180|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + (($118*52)|0)|0);
  $123 = ((($122)) + 32|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)>(0);
  if ($125) {
   $126 = $i;
   $127 = $mod;
   $128 = ((($127)) + 176|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + (($126*764)|0)|0);
   $131 = ((($130)) + 36|0);
   HEAP32[$131>>2] = 1;
  }
  $132 = $i;
  $133 = (($132) + 1)|0;
  $i = $133;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $134 = $2;
 $135 = (_hio_read8($134)|0);
 $136 = $135&255;
 $137 = $mod;
 $138 = ((($137)) + 128|0);
 HEAP32[$138>>2] = $136;
 $139 = $mod;
 $140 = ((($139)) + 156|0);
 HEAP32[$140>>2] = $136;
 $141 = $2;
 (_hio_read8($141)|0);
 $i = 0;
 while(1) {
  $142 = $i;
  $143 = ($142|0)<(128);
  if (!($143)) {
   break;
  }
  $144 = $2;
  $145 = (_hio_read8($144)|0);
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 952|0);
  $149 = (($148) + ($146)|0);
  HEAP8[$149>>0] = $145;
  $150 = $i;
  $151 = (($150) + 1)|0;
  $i = $151;
 }
 $152 = $mod;
 $153 = ((($152)) + 128|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $mod;
 $156 = ((($155)) + 136|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = Math_imul($154, $157)|0;
 $159 = $mod;
 $160 = ((($159)) + 132|0);
 HEAP32[$160>>2] = $158;
 $161 = $mod;
 $162 = (_pattern_init($161)|0);
 $163 = ($162|0)<(0);
 if ($163) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $164 = $2;
 $165 = (_hio_read16b($164)|0);
 $166 = $165&65535;
 $size1 = $166;
 $167 = $2;
 (_hio_read16b($167)|0);
 $i = 0;
 while(1) {
  $168 = $i;
  $169 = $size1;
  $170 = ($168|0)<($169|0);
  if (!($170)) {
   break;
  }
  $j = 0;
  while(1) {
   $171 = $j;
   $172 = ($171|0)<(4);
   if (!($172)) {
    break;
   }
   $173 = $2;
   $174 = (_hio_read16b($173)|0);
   $175 = $174&65535;
   $176 = $j;
   $177 = $i;
   $178 = (($pat_table) + ($177<<4)|0);
   $179 = (($178) + ($176<<2)|0);
   HEAP32[$179>>2] = $175;
   $180 = $j;
   $181 = (($180) + 1)|0;
   $j = $181;
  }
  $182 = $i;
  $183 = (($182) + 1)|0;
  $i = $183;
 }
 $184 = $2;
 $185 = (_hio_tell($184)|0);
 $pat_addr = $185;
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 128|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($186|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $mod;
  $192 = $i;
  $193 = (_pattern_tracks_alloc($191,$192,64)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   label = 24;
   break;
  }
  $j = 0;
  while(1) {
   $195 = $j;
   $196 = ($195|0)<(4);
   if (!($196)) {
    break;
   }
   $197 = $2;
   $198 = $pat_addr;
   $199 = $j;
   $200 = $i;
   $201 = (($pat_table) + ($200<<4)|0);
   $202 = (($201) + ($199<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($198) + ($203))|0;
   (_hio_seek($197,$204,0)|0);
   $205 = $2;
   (_hio_read($buf,1,1024,$205)|0);
   $k = 0;
   $row = 0;
   while(1) {
    $206 = $k;
    $207 = ($206|0)<(4);
    if (!($207)) {
     break;
    }
    $x = 0;
    while(1) {
     $208 = $x;
     $209 = ($208|0)<(4);
     if (!($209)) {
      break;
     }
     $y = 0;
     while(1) {
      $210 = $y;
      $211 = ($210|0)<(4);
      if (!($211)) {
       break;
      }
      $212 = $row;
      $213 = $j;
      $214 = $i;
      $215 = $1;
      $216 = ((($215)) + 168|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (($217) + ($214<<2)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($219)) + 4|0);
      $221 = (($220) + ($213<<2)|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = $1;
      $224 = ((($223)) + 172|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (($225) + ($222<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ((($227)) + 4|0);
      $229 = (($228) + ($212<<3)|0);
      $event = $229;
      $230 = $k;
      $231 = (($buf) + ($230)|0);
      $232 = HEAP8[$231>>0]|0;
      $233 = $232&255;
      $234 = $x;
      $235 = (($233) + ($234))|0;
      $236 = (($buf) + ($235)|0);
      $237 = HEAP8[$236>>0]|0;
      $238 = $237&255;
      $239 = $y;
      $240 = (($238) + ($239))|0;
      $241 = (($buf) + ($240)|0);
      $242 = HEAP8[$241>>0]|0;
      $243 = $242&255;
      $244 = $243<<1;
      $245 = (($buf) + ($244)|0);
      ;HEAP8[$mod_event>>0]=HEAP8[$245>>0]|0;HEAP8[$mod_event+1>>0]=HEAP8[$245+1>>0]|0;HEAP8[$mod_event+2>>0]=HEAP8[$245+2>>0]|0;HEAP8[$mod_event+3>>0]=HEAP8[$245+3>>0]|0;
      $246 = $event;
      _decode_protracker_event($246,$mod_event);
      $247 = $y;
      $248 = (($247) + 1)|0;
      $y = $248;
      $249 = $row;
      $250 = (($249) + 1)|0;
      $row = $250;
     }
     $251 = $x;
     $252 = (($251) + 1)|0;
     $x = $252;
    }
    $253 = $k;
    $254 = (($253) + 1)|0;
    $k = $254;
   }
   $255 = $j;
   $256 = (($255) + 1)|0;
   $j = $256;
  }
  $257 = $i;
  $258 = (($257) + 1)|0;
  $i = $258;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $355 = $0;
  STACKTOP = sp;return ($355|0);
 }
 $259 = $1;
 $260 = ((($259)) + 1212|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = (_strlen(($261|0))|0);
 $263 = ($262>>>0)<(5);
 do {
  if ($263) {
   label = 40;
  } else {
   $264 = $1;
   $265 = ((($264)) + 1212|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = ((($266)) + 3|0);
   $268 = HEAP8[$267>>0]|0;
   $269 = $268 << 24 >> 24;
   $270 = ($269|0)!=(46);
   if ($270) {
    label = 40;
   } else {
    $275 = $1;
    $276 = ((($275)) + 1212|0);
    $277 = HEAP32[$276>>2]|0;
    HEAP8[$277>>0] = 115;
    $278 = $1;
    $279 = ((($278)) + 1212|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = ((($280)) + 1|0);
    HEAP8[$281>>0] = 109;
    $282 = $1;
    $283 = ((($282)) + 1212|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = ((($284)) + 2|0);
    HEAP8[$285>>0] = 112;
    $286 = $1;
    $287 = ((($286)) + 1208|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $1;
    $290 = ((($289)) + 1212|0);
    $291 = HEAP32[$290>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $288;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $291;
    (_snprintf($smp_filename,4096,7312,$vararg_buffer3)|0);
    $292 = (_stat(($smp_filename|0),($st|0))|0);
    $293 = ($292|0)<(0);
    if ($293) {
     $294 = $1;
     $295 = ((($294)) + 1212|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = (_strchr($296,45)|0);
     $298 = ($297|0)!=(0|0);
     if ($298) {
      $299 = (_strrchr($smp_filename,45)|0);
      $x1 = $299;
      $300 = ($299|0)!=(0|0);
      if ($300) {
       $301 = $x1;
       (_strcpy(($301|0),(7320|0))|0);
      }
     }
     $302 = (_stat(($smp_filename|0),($st|0))|0);
     $303 = ($302|0)<(0);
     if ($303) {
      $304 = HEAP32[_stderr>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $smp_filename;
      (_fprintf(($304|0),(7328|0),($vararg_buffer7|0))|0);
      break;
     }
    }
    $305 = (_hio_open($smp_filename,7360)|0);
    $s = $305;
    $306 = ($305|0)==(0|0);
    if ($306) {
     $307 = HEAP32[_stderr>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $smp_filename;
     (_fprintf(($307|0),(7368|0),($vararg_buffer10|0))|0);
     break;
    }
    $i = 0;
    while(1) {
     $308 = $i;
     $309 = $mod;
     $310 = ((($309)) + 140|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = ($308|0)<($311|0);
     if (!($312)) {
      label = 54;
      break;
     }
     $313 = $1;
     $314 = $s;
     $315 = $i;
     $316 = $mod;
     $317 = ((($316)) + 176|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = (($318) + (($315*764)|0)|0);
     $320 = ((($319)) + 756|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = ((($321)) + 40|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $mod;
     $325 = ((($324)) + 180|0);
     $326 = HEAP32[$325>>2]|0;
     $327 = (($326) + (($323*52)|0)|0);
     $328 = (_load_sample($313,$314,512,$327,0)|0);
     $329 = ($328|0)<(0);
     if ($329) {
      label = 52;
      break;
     }
     $330 = $i;
     $331 = (($330) + 1)|0;
     $i = $331;
    }
    if ((label|0) == 52) {
     $0 = -1;
     $355 = $0;
     STACKTOP = sp;return ($355|0);
    }
    else if ((label|0) == 54) {
     $332 = $s;
     (_hio_close($332)|0);
     $333 = $1;
     $334 = ((($333)) + 1284|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = $335 | 8192;
     HEAP32[$334>>2] = $336;
     $0 = 0;
     $355 = $0;
     STACKTOP = sp;return ($355|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 40) {
  $271 = HEAP32[_stderr>>2]|0;
  $272 = $1;
  $273 = ((($272)) + 1212|0);
  $274 = HEAP32[$273>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $274;
  (_fprintf(($271|0),(7280|0),($vararg_buffer1|0))|0);
 }
 $i = 0;
 while(1) {
  $337 = $i;
  $338 = $mod;
  $339 = ((($338)) + 140|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($337|0)<($340|0);
  if (!($341)) {
   break;
  }
  $342 = $i;
  $343 = $mod;
  $344 = ((($343)) + 176|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + (($342*764)|0)|0);
  $347 = ((($346)) + 36|0);
  HEAP32[$347>>2] = 0;
  $348 = $i;
  $349 = $mod;
  $350 = ((($349)) + 180|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = (($351) + (($348*52)|0)|0);
  dest=$352; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $353 = $i;
  $354 = (($353) + 1)|0;
  $i = $354;
 }
 $0 = 0;
 $355 = $0;
 STACKTOP = sp;return ($355|0);
}
function _asylum_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read($buf,1,32,$4)|0);
 $6 = ($5>>>0)<(32);
 do {
  if ($6) {
   $0 = -1;
  } else {
   $7 = (_memcmp($buf,7456,32)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    $0 = -1;
    break;
   } else {
    $9 = $1;
    $10 = $2;
    _read_title($9,$10,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _asylum_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $i = 0, $insbuf = 0, $j = 0, $mod = 0, $note = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $insbuf = sp + 37|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_seek($7,32,1)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $11 = $mod;
 $12 = ((($11)) + 148|0);
 HEAP32[$12>>2] = $10;
 $13 = $2;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $16 = $mod;
 $17 = ((($16)) + 152|0);
 HEAP32[$17>>2] = $15;
 $18 = $2;
 $19 = (_hio_read8($18)|0);
 $20 = $19&255;
 $21 = $mod;
 $22 = ((($21)) + 140|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = (_hio_read8($23)|0);
 $25 = $24&255;
 $26 = $mod;
 $27 = ((($26)) + 128|0);
 HEAP32[$27>>2] = $25;
 $28 = $2;
 $29 = (_hio_read8($28)|0);
 $30 = $29&255;
 $31 = $mod;
 $32 = ((($31)) + 156|0);
 HEAP32[$32>>2] = $30;
 $33 = $2;
 (_hio_read8($33)|0);
 $34 = $mod;
 $35 = ((($34)) + 952|0);
 $36 = $mod;
 $37 = ((($36)) + 156|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $2;
 (_hio_read($35,1,$38,$39)|0);
 $40 = $2;
 $41 = $3;
 $42 = (($41) + 294)|0;
 (_hio_seek($40,$42,0)|0);
 $43 = $mod;
 $44 = ((($43)) + 136|0);
 HEAP32[$44>>2] = 8;
 $45 = $mod;
 $46 = ((($45)) + 140|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $mod;
 $49 = ((($48)) + 144|0);
 HEAP32[$49>>2] = $47;
 $50 = $mod;
 $51 = ((($50)) + 128|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $mod;
 $54 = ((($53)) + 136|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = Math_imul($52, $55)|0;
 $57 = $mod;
 $58 = ((($57)) + 132|0);
 HEAP32[$58>>2] = $56;
 $59 = $mod;
 $60 = ((($59)) + 64|0);
 (_snprintf($60,64,7424,$vararg_buffer)|0);
 $61 = $mod;
 $62 = (_instrument_init($61)|0);
 $63 = ($62|0)<(0);
 if ($63) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $i = 0;
 while(1) {
  $64 = $i;
  $65 = $mod;
  $66 = ((($65)) + 140|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($64|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $mod;
  $70 = $i;
  $71 = (_subinstrument_alloc($69,$70,1)|0);
  $72 = ($71|0)<(0);
  if ($72) {
   label = 6;
   break;
  }
  $73 = $2;
  (_hio_read($insbuf,1,37,$73)|0);
  $74 = $mod;
  $75 = $i;
  (_instrument_name($74,$75,$insbuf,22)|0);
  $76 = ((($insbuf)) + 22|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $78 << 4;
  $80 = $79&255;
  $81 = $80 << 24 >> 24;
  $82 = $i;
  $83 = $mod;
  $84 = ((($83)) + 176|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + (($82*764)|0)|0);
  $87 = ((($86)) + 756|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($88)) + 16|0);
  HEAP32[$89>>2] = $81;
  $90 = ((($insbuf)) + 23|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $i;
  $94 = $mod;
  $95 = ((($94)) + 176|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + (($93*764)|0)|0);
  $98 = ((($97)) + 756|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$99>>2] = $92;
  $100 = ((($insbuf)) + 24|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101 << 24 >> 24;
  $103 = $i;
  $104 = $mod;
  $105 = ((($104)) + 176|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + (($103*764)|0)|0);
  $108 = ((($107)) + 756|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 12|0);
  HEAP32[$110>>2] = $102;
  $111 = $i;
  $112 = $mod;
  $113 = ((($112)) + 176|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + (($111*764)|0)|0);
  $116 = ((($115)) + 756|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($117)) + 8|0);
  HEAP32[$118>>2] = 128;
  $119 = $i;
  $120 = $i;
  $121 = $mod;
  $122 = ((($121)) + 176|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + (($120*764)|0)|0);
  $125 = ((($124)) + 756|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 40|0);
  HEAP32[$127>>2] = $119;
  $128 = ((($insbuf)) + 25|0);
  $129 = (_readmem32l($128)|0);
  $130 = $i;
  $131 = $mod;
  $132 = ((($131)) + 180|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + (($130*52)|0)|0);
  $135 = ((($134)) + 32|0);
  HEAP32[$135>>2] = $129;
  $136 = ((($insbuf)) + 29|0);
  $137 = (_readmem32l($136)|0);
  $138 = $i;
  $139 = $mod;
  $140 = ((($139)) + 180|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + (($138*52)|0)|0);
  $143 = ((($142)) + 36|0);
  HEAP32[$143>>2] = $137;
  $144 = $i;
  $145 = $mod;
  $146 = ((($145)) + 180|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + (($144*52)|0)|0);
  $149 = ((($148)) + 36|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($insbuf)) + 33|0);
  $152 = (_readmem32l($151)|0);
  $153 = (($150) + ($152))|0;
  $154 = $i;
  $155 = $mod;
  $156 = ((($155)) + 180|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + (($154*52)|0)|0);
  $159 = ((($158)) + 40|0);
  HEAP32[$159>>2] = $153;
  $160 = $i;
  $161 = $mod;
  $162 = ((($161)) + 180|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + (($160*52)|0)|0);
  $165 = ((($164)) + 40|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)>(2);
  $168 = $167 ? 2 : 0;
  $169 = $i;
  $170 = $mod;
  $171 = ((($170)) + 180|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (($172) + (($169*52)|0)|0);
  $174 = ((($173)) + 44|0);
  HEAP32[$174>>2] = $168;
  $175 = $i;
  $176 = (($175) + 1)|0;
  $i = $176;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $177 = $2;
 $178 = $mod;
 $179 = ((($178)) + 140|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = (64 - ($180))|0;
 $182 = ($181*37)|0;
 (_hio_seek($177,$182,1)|0);
 $183 = $mod;
 $184 = (_pattern_init($183)|0);
 $185 = ($184|0)<(0);
 if ($185) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = $mod;
  $188 = ((($187)) + 128|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($186|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $mod;
  $192 = $i;
  $193 = (_pattern_tracks_alloc($191,$192,64)|0);
  $194 = ($193|0)<(0);
  if ($194) {
   label = 13;
   break;
  }
  $j = 0;
  while(1) {
   $195 = $j;
   $196 = $mod;
   $197 = ((($196)) + 136|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198<<6;
   $200 = ($195|0)<($199|0);
   if (!($200)) {
    break;
   }
   $201 = $j;
   $202 = $mod;
   $203 = ((($202)) + 136|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($201|0) / ($204|0))&-1;
   $206 = $j;
   $207 = $mod;
   $208 = ((($207)) + 136|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = (($206|0) % ($209|0))&-1;
   $211 = $i;
   $212 = $1;
   $213 = ((($212)) + 168|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (($214) + ($211<<2)|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($216)) + 4|0);
   $218 = (($217) + ($210<<2)|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $1;
   $221 = ((($220)) + 172|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($219<<2)|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($224)) + 4|0);
   $226 = (($225) + ($205<<3)|0);
   $event = $226;
   $227 = $event;
   ;HEAP8[$227>>0]=0|0;HEAP8[$227+1>>0]=0|0;HEAP8[$227+2>>0]=0|0;HEAP8[$227+3>>0]=0|0;HEAP8[$227+4>>0]=0|0;HEAP8[$227+5>>0]=0|0;HEAP8[$227+6>>0]=0|0;HEAP8[$227+7>>0]=0|0;
   $228 = $2;
   $229 = (_hio_read8($228)|0);
   $note = $229;
   $230 = $note;
   $231 = $230&255;
   $232 = ($231|0)!=(0);
   if ($232) {
    $233 = $note;
    $234 = $233&255;
    $235 = (($234) + 13)|0;
    $236 = $235&255;
    $237 = $event;
    HEAP8[$237>>0] = $236;
   }
   $238 = $2;
   $239 = (_hio_read8($238)|0);
   $240 = $event;
   $241 = ((($240)) + 1|0);
   HEAP8[$241>>0] = $239;
   $242 = $2;
   $243 = (_hio_read8($242)|0);
   $244 = $event;
   $245 = ((($244)) + 3|0);
   HEAP8[$245>>0] = $243;
   $246 = $2;
   $247 = (_hio_read8($246)|0);
   $248 = $event;
   $249 = ((($248)) + 4|0);
   HEAP8[$249>>0] = $247;
   $250 = $j;
   $251 = (($250) + 1)|0;
   $j = $251;
  }
  $252 = $i;
  $253 = (($252) + 1)|0;
  $i = $253;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 $i = 0;
 while(1) {
  $254 = $i;
  $255 = $mod;
  $256 = ((($255)) + 140|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = ($254|0)<($257|0);
  if (!($258)) {
   label = 27;
   break;
  }
  $259 = $i;
  $260 = $mod;
  $261 = ((($260)) + 180|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = (($262) + (($259*52)|0)|0);
  $264 = ((($263)) + 32|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($265|0)>(1);
  if ($266) {
   $267 = $1;
   $268 = $2;
   $269 = $i;
   $270 = $mod;
   $271 = ((($270)) + 180|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + (($269*52)|0)|0);
   $274 = (_load_sample($267,$268,0,$273,0)|0);
   $275 = ($274|0)<(0);
   if ($275) {
    label = 24;
    break;
   }
   $276 = $i;
   $277 = $mod;
   $278 = ((($277)) + 176|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = (($279) + (($276*764)|0)|0);
   $281 = ((($280)) + 36|0);
   HEAP32[$281>>2] = 1;
  }
  $282 = $i;
  $283 = (($282) + 1)|0;
  $i = $283;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 else if ((label|0) == 27) {
  $0 = 0;
  $284 = $0;
  STACKTOP = sp;return ($284|0);
 }
 return (0)|0;
}
function _hmn_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 1080)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read32b($7)|0);
 $magic = $8;
 $9 = $magic;
 $10 = ($9|0)!=(1178948436);
 $11 = $magic;
 $12 = ($11|0)!=(1294355233);
 $or$cond = $10 & $12;
 if ($or$cond) {
  $0 = -1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $13 = $1;
  $14 = $3;
  $15 = (($14) + 0)|0;
  (_hio_seek($13,$15,0)|0);
  $16 = $1;
  $17 = $2;
  _read_title($16,$17,20);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _hmn_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $event = 0, $extra = 0, $i = 0, $j = 0, $k = 0, $mh = 0, $mod = 0;
 var $mod_event = 0, $mupp = 0, $mupp_index = 0, $num_mupp = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $mh = sp + 68|0;
 $mupp = sp + 1156|0;
 $mod_event = sp + 1152|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 dest=$mupp; stop=dest+124|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $7 = $2;
 (_hio_read($mh,20,1,$7)|0);
 $num_mupp = 0;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = ((($mh)) + 20|0);
  $12 = (($11) + (($10*30)|0)|0);
  $13 = $2;
  (_hio_read($12,22,1,$13)|0);
  $14 = $i;
  $15 = ((($mh)) + 20|0);
  $16 = (($15) + (($14*30)|0)|0);
  $17 = (_memcmp($16,7536,4)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $i;
   $20 = (($mupp) + ($19<<2)|0);
   HEAP8[$20>>0] = 1;
   $21 = $i;
   $22 = ((($mh)) + 20|0);
   $23 = (($22) + (($21*30)|0)|0);
   $24 = ((($23)) + 4|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $i;
   $27 = (($mupp) + ($26<<2)|0);
   $28 = ((($27)) + 1|0);
   HEAP8[$28>>0] = $25;
   $29 = $i;
   $30 = ((($mh)) + 20|0);
   $31 = (($30) + (($29*30)|0)|0);
   $32 = ((($31)) + 5|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $i;
   $35 = (($mupp) + ($34<<2)|0);
   $36 = ((($35)) + 2|0);
   HEAP8[$36>>0] = $33;
   $37 = $i;
   $38 = ((($mh)) + 20|0);
   $39 = (($38) + (($37*30)|0)|0);
   $40 = ((($39)) + 6|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $i;
   $43 = (($mupp) + ($42<<2)|0);
   $44 = ((($43)) + 3|0);
   HEAP8[$44>>0] = $41;
   $45 = $num_mupp;
   $46 = (($45) + 1)|0;
   $num_mupp = $46;
  }
  $47 = $2;
  $48 = (_hio_read16b($47)|0);
  $49 = $i;
  $50 = ((($mh)) + 20|0);
  $51 = (($50) + (($49*30)|0)|0);
  $52 = ((($51)) + 22|0);
  HEAP16[$52>>1] = $48;
  $53 = $2;
  $54 = (_hio_read8($53)|0);
  $55 = $i;
  $56 = ((($mh)) + 20|0);
  $57 = (($56) + (($55*30)|0)|0);
  $58 = ((($57)) + 24|0);
  HEAP8[$58>>0] = $54;
  $59 = $2;
  $60 = (_hio_read8($59)|0);
  $61 = $i;
  $62 = ((($mh)) + 20|0);
  $63 = (($62) + (($61*30)|0)|0);
  $64 = ((($63)) + 25|0);
  HEAP8[$64>>0] = $60;
  $65 = $2;
  $66 = (_hio_read16b($65)|0);
  $67 = $i;
  $68 = ((($mh)) + 20|0);
  $69 = (($68) + (($67*30)|0)|0);
  $70 = ((($69)) + 26|0);
  HEAP16[$70>>1] = $66;
  $71 = $2;
  $72 = (_hio_read16b($71)|0);
  $73 = $i;
  $74 = ((($mh)) + 20|0);
  $75 = (($74) + (($73*30)|0)|0);
  $76 = ((($75)) + 28|0);
  HEAP16[$76>>1] = $72;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 $79 = $2;
 $80 = (_hio_read8($79)|0);
 $81 = ((($mh)) + 950|0);
 HEAP8[$81>>0] = $80;
 $82 = $2;
 $83 = (_hio_read8($82)|0);
 $84 = ((($mh)) + 951|0);
 HEAP8[$84>>0] = $83;
 $85 = ((($mh)) + 952|0);
 $86 = $2;
 (_hio_read($85,128,1,$86)|0);
 $87 = ((($mh)) + 1080|0);
 $88 = $2;
 (_hio_read($87,4,1,$88)|0);
 $89 = $mod;
 $90 = ((($89)) + 136|0);
 HEAP32[$90>>2] = 4;
 $91 = $mod;
 $92 = ((($91)) + 140|0);
 HEAP32[$92>>2] = 31;
 $93 = $mod;
 $94 = ((($93)) + 140|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $num_mupp;
 $97 = ($96*28)|0;
 $98 = (($95) + ($97))|0;
 $99 = $mod;
 $100 = ((($99)) + 144|0);
 HEAP32[$100>>2] = $98;
 $101 = ((($mh)) + 950|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $mod;
 $105 = ((($104)) + 156|0);
 HEAP32[$105>>2] = $103;
 $106 = ((($mh)) + 951|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $mod;
 $110 = ((($109)) + 160|0);
 HEAP32[$110>>2] = $108;
 $111 = $mod;
 $112 = ((($111)) + 952|0);
 $113 = ((($mh)) + 952|0);
 dest=$112; src=$113; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $114 = $i;
  $115 = ($114|0)<(128);
  if (!($115)) {
   break;
  }
  $116 = $i;
  $117 = $mod;
  $118 = ((($117)) + 952|0);
  $119 = (($118) + ($116)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = $mod;
  $123 = ((($122)) + 128|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($121|0)>($124|0);
  if ($125) {
   $126 = $i;
   $127 = $mod;
   $128 = ((($127)) + 952|0);
   $129 = (($128) + ($126)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $mod;
   $133 = ((($132)) + 128|0);
   HEAP32[$133>>2] = $131;
  }
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 $136 = $mod;
 $137 = ((($136)) + 128|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) + 1)|0;
 HEAP32[$137>>2] = $139;
 $140 = $mod;
 $141 = ((($140)) + 136|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $mod;
 $144 = ((($143)) + 128|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = Math_imul($142, $145)|0;
 $147 = $mod;
 $148 = ((($147)) + 132|0);
 HEAP32[$148>>2] = $146;
 $149 = $1;
 $150 = (_hmn_new_module_extras($149)|0);
 $151 = ($150|0)!=(0);
 if ($151) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $152 = $mod;
 (_strncpy(($152|0),($mh|0),20)|0);
 $153 = $1;
 $154 = ((($mh)) + 1080|0);
 HEAP32[$vararg_buffer>>2] = 7512;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $154;
 _set_type($153,7544,$vararg_buffer);
 $155 = $mod;
 $156 = (_instrument_init($155)|0);
 $157 = ($156|0)<(0);
 if ($157) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 $i = 0;
 while(1) {
  $158 = $i;
  $159 = $mod;
  $160 = ((($159)) + 140|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($158|0)<($161|0);
  if (!($162)) {
   label = 27;
   break;
  }
  $163 = $i;
  $164 = (($mupp) + ($163<<2)|0);
  $165 = HEAP8[$164>>0]|0;
  $166 = ($165<<24>>24)!=(0);
  $167 = $i;
  $168 = $mod;
  $169 = ((($168)) + 176|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($170) + (($167*764)|0)|0);
  $172 = ((($171)) + 36|0);
  if ($166) {
   HEAP32[$172>>2] = 28;
   $173 = $i;
   $174 = $mod;
   $175 = ((($174)) + 176|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + (($173*764)|0)|0);
   $178 = $i;
   $179 = (($mupp) + ($178<<2)|0);
   $180 = ((($179)) + 1|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181&255;
   $183 = $i;
   $184 = (($mupp) + ($183<<2)|0);
   $185 = ((($184)) + 2|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $186&255;
   $188 = $i;
   $189 = (($mupp) + ($188<<2)|0);
   $190 = ((($189)) + 3|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   HEAP32[$vararg_buffer2>>2] = $182;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $187;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $192;
   (_snprintf($177,32,7560,$vararg_buffer2)|0);
   $193 = $i;
   $194 = $mod;
   $195 = ((($194)) + 176|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($196) + (($193*764)|0)|0);
   $198 = (_hmn_new_instrument_extras($197)|0);
   $199 = ($198|0)!=(0);
   if ($199) {
    label = 19;
    break;
   }
  } else {
   HEAP32[$172>>2] = 1;
   $200 = $mod;
   $201 = $i;
   $202 = $i;
   $203 = ((($mh)) + 20|0);
   $204 = (($203) + (($202*30)|0)|0);
   (_instrument_name($200,$201,$204,22)|0);
   $205 = $i;
   $206 = ((($mh)) + 20|0);
   $207 = (($206) + (($205*30)|0)|0);
   $208 = ((($207)) + 22|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209&65535;
   $211 = $210<<1;
   $212 = $i;
   $213 = $mod;
   $214 = ((($213)) + 180|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + (($212*52)|0)|0);
   $217 = ((($216)) + 32|0);
   HEAP32[$217>>2] = $211;
   $218 = $i;
   $219 = ((($mh)) + 20|0);
   $220 = (($219) + (($218*30)|0)|0);
   $221 = ((($220)) + 26|0);
   $222 = HEAP16[$221>>1]|0;
   $223 = $222&65535;
   $224 = $223<<1;
   $225 = $i;
   $226 = $mod;
   $227 = ((($226)) + 180|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = (($228) + (($225*52)|0)|0);
   $230 = ((($229)) + 36|0);
   HEAP32[$230>>2] = $224;
   $231 = $i;
   $232 = $mod;
   $233 = ((($232)) + 180|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = (($234) + (($231*52)|0)|0);
   $236 = ((($235)) + 36|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = $i;
   $239 = ((($mh)) + 20|0);
   $240 = (($239) + (($238*30)|0)|0);
   $241 = ((($240)) + 28|0);
   $242 = HEAP16[$241>>1]|0;
   $243 = $242&65535;
   $244 = $243<<1;
   $245 = (($237) + ($244))|0;
   $246 = $i;
   $247 = $mod;
   $248 = ((($247)) + 180|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = (($249) + (($246*52)|0)|0);
   $251 = ((($250)) + 40|0);
   HEAP32[$251>>2] = $245;
   $252 = $i;
   $253 = ((($mh)) + 20|0);
   $254 = (($253) + (($252*30)|0)|0);
   $255 = ((($254)) + 28|0);
   $256 = HEAP16[$255>>1]|0;
   $257 = $256&65535;
   $258 = ($257|0)>(1);
   $259 = $258 ? 2 : 0;
   $260 = $i;
   $261 = $mod;
   $262 = ((($261)) + 180|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = (($263) + (($260*52)|0)|0);
   $265 = ((($264)) + 44|0);
   HEAP32[$265>>2] = $259;
  }
  $266 = $mod;
  $267 = $i;
  $268 = $i;
  $269 = $mod;
  $270 = ((($269)) + 176|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($271) + (($268*764)|0)|0);
  $273 = ((($272)) + 36|0);
  $274 = HEAP32[$273>>2]|0;
  $275 = (_subinstrument_alloc($266,$267,$274)|0);
  $276 = ($275|0)<(0);
  if ($276) {
   label = 22;
   break;
  }
  $j = 0;
  while(1) {
   $277 = $j;
   $278 = $i;
   $279 = $mod;
   $280 = ((($279)) + 176|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + (($278*764)|0)|0);
   $283 = ((($282)) + 36|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ($277|0)<($284|0);
   $286 = $i;
   if (!($285)) {
    break;
   }
   $287 = ((($mh)) + 20|0);
   $288 = (($287) + (($286*30)|0)|0);
   $289 = ((($288)) + 24|0);
   $290 = HEAP8[$289>>0]|0;
   $291 = $290 << 24 >> 24;
   $292 = $291 << 3;
   $293 = $292&255;
   $294 = $293 << 24 >> 24;
   $295 = (0 - ($294))|0;
   $296 = $j;
   $297 = $i;
   $298 = $mod;
   $299 = ((($298)) + 176|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (($300) + (($297*764)|0)|0);
   $302 = ((($301)) + 756|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($296<<6)|0);
   $305 = ((($304)) + 16|0);
   HEAP32[$305>>2] = $295;
   $306 = $i;
   $307 = ((($mh)) + 20|0);
   $308 = (($307) + (($306*30)|0)|0);
   $309 = ((($308)) + 25|0);
   $310 = HEAP8[$309>>0]|0;
   $311 = $310 << 24 >> 24;
   $312 = $j;
   $313 = $i;
   $314 = $mod;
   $315 = ((($314)) + 176|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (($316) + (($313*764)|0)|0);
   $318 = ((($317)) + 756|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + ($312<<6)|0);
   HEAP32[$320>>2] = $311;
   $321 = $j;
   $322 = $i;
   $323 = $mod;
   $324 = ((($323)) + 176|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($325) + (($322*764)|0)|0);
   $327 = ((($326)) + 756|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = (($328) + ($321<<6)|0);
   $330 = ((($329)) + 8|0);
   HEAP32[$330>>2] = 128;
   $331 = $i;
   $332 = $j;
   $333 = $i;
   $334 = $mod;
   $335 = ((($334)) + 176|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = (($336) + (($333*764)|0)|0);
   $338 = ((($337)) + 756|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = (($339) + ($332<<6)|0);
   $341 = ((($340)) + 40|0);
   HEAP32[$341>>2] = $331;
   $342 = $j;
   $343 = (($342) + 1)|0;
   $j = $343;
  }
  $344 = (($286) + 1)|0;
  $i = $344;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 else if ((label|0) == 22) {
  $0 = -1;
  $512 = $0;
  STACKTOP = sp;return ($512|0);
 }
 else if ((label|0) == 27) {
  $345 = $mod;
  $346 = (_pattern_init($345)|0);
  $347 = ($346|0)<(0);
  if ($347) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  $i = 0;
  while(1) {
   $348 = $i;
   $349 = $mod;
   $350 = ((($349)) + 128|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ($348|0)<($351|0);
   if (!($352)) {
    break;
   }
   $353 = $mod;
   $354 = $i;
   $355 = (_pattern_tracks_alloc($353,$354,64)|0);
   $356 = ($355|0)<(0);
   if ($356) {
    label = 32;
    break;
   }
   $j = 0;
   while(1) {
    $357 = $j;
    $358 = ($357|0)<(256);
    if (!($358)) {
     break;
    }
    $359 = $j;
    $360 = (($359|0) / 4)&-1;
    $361 = $j;
    $362 = (($361|0) % 4)&-1;
    $363 = $i;
    $364 = $1;
    $365 = ((($364)) + 168|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + ($363<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ((($368)) + 4|0);
    $370 = (($369) + ($362<<2)|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = $1;
    $373 = ((($372)) + 172|0);
    $374 = HEAP32[$373>>2]|0;
    $375 = (($374) + ($371<<2)|0);
    $376 = HEAP32[$375>>2]|0;
    $377 = ((($376)) + 4|0);
    $378 = (($377) + ($360<<3)|0);
    $event = $378;
    $379 = $2;
    (_hio_read($mod_event,1,4,$379)|0);
    $380 = $event;
    _decode_protracker_event($380,$mod_event);
    $381 = $event;
    $382 = ((($381)) + 3|0);
    $383 = HEAP8[$382>>0]|0;
    $384 = $383&255;
    if ((($384|0) == 14) | (($384|0) == 9) | (($384|0) == 8)) {
     $387 = $event;
     $388 = ((($387)) + 4|0);
     HEAP8[$388>>0] = 0;
     $389 = $event;
     $390 = ((($389)) + 3|0);
     HEAP8[$390>>0] = 0;
    } else if ((($384|0) == 7)) {
     $385 = $event;
     $386 = ((($385)) + 3|0);
     HEAP8[$386>>0] = -78;
    }
    $391 = $j;
    $392 = (($391) + 1)|0;
    $j = $392;
   }
   $393 = $i;
   $394 = (($393) + 1)|0;
   $i = $394;
  }
  if ((label|0) == 32) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  $395 = $1;
  $396 = ((($395)) + 1284|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = $397 | 8192;
  HEAP32[$396>>2] = $398;
  $i = 0;
  while(1) {
   $399 = $i;
   $400 = ($399|0)<(31);
   if (!($400)) {
    break;
   }
   $401 = $1;
   $402 = $2;
   $403 = $i;
   $404 = $mod;
   $405 = ((($404)) + 180|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = (($406) + (($403*52)|0)|0);
   $408 = (_load_sample($401,$402,512,$407,0)|0);
   $409 = ($408|0)<(0);
   if ($409) {
    label = 43;
    break;
   }
   $410 = $i;
   $411 = (($410) + 1)|0;
   $i = $411;
  }
  if ((label|0) == 43) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  $mupp_index = 0;
  $i = 0;
  L67: while(1) {
   $412 = $i;
   $413 = ($412|0)<(31);
   if (!($413)) {
    label = 55;
    break;
   }
   $414 = $i;
   $415 = $mod;
   $416 = ((($415)) + 176|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (($417) + (($414*764)|0)|0);
   $419 = ((($418)) + 760|0);
   $420 = HEAP32[$419>>2]|0;
   $extra = $420;
   $421 = $i;
   $422 = (($mupp) + ($421<<2)|0);
   $423 = HEAP8[$422>>0]|0;
   $424 = ($423<<24>>24)!=(0);
   if ($424) {
    $425 = $2;
    $426 = $3;
    $427 = (($426) + 1084)|0;
    $428 = $i;
    $429 = (($mupp) + ($428<<2)|0);
    $430 = ((($429)) + 1|0);
    $431 = HEAP8[$430>>0]|0;
    $432 = $431&255;
    $433 = $432<<10;
    $434 = (($427) + ($433))|0;
    (_hio_seek($425,$434,0)|0);
    $j = 0;
    while(1) {
     $435 = $j;
     $436 = ($435|0)<(28);
     if (!($436)) {
      break;
     }
     $437 = $mupp_index;
     $438 = ($437*28)|0;
     $439 = (31 + ($438))|0;
     $440 = $j;
     $441 = (($439) + ($440))|0;
     $k = $441;
     $442 = $k;
     $443 = $j;
     $444 = $i;
     $445 = $mod;
     $446 = ((($445)) + 176|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = (($447) + (($444*764)|0)|0);
     $449 = ((($448)) + 756|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = (($450) + ($443<<6)|0);
     $452 = ((($451)) + 40|0);
     HEAP32[$452>>2] = $442;
     $453 = $k;
     $454 = $mod;
     $455 = ((($454)) + 180|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = (($456) + (($453*52)|0)|0);
     $458 = ((($457)) + 32|0);
     HEAP32[$458>>2] = 32;
     $459 = $k;
     $460 = $mod;
     $461 = ((($460)) + 180|0);
     $462 = HEAP32[$461>>2]|0;
     $463 = (($462) + (($459*52)|0)|0);
     $464 = ((($463)) + 36|0);
     HEAP32[$464>>2] = 0;
     $465 = $k;
     $466 = $mod;
     $467 = ((($466)) + 180|0);
     $468 = HEAP32[$467>>2]|0;
     $469 = (($468) + (($465*52)|0)|0);
     $470 = ((($469)) + 40|0);
     HEAP32[$470>>2] = 32;
     $471 = $k;
     $472 = $mod;
     $473 = ((($472)) + 180|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = (($474) + (($471*52)|0)|0);
     $476 = ((($475)) + 44|0);
     HEAP32[$476>>2] = 2;
     $477 = $1;
     $478 = $2;
     $479 = $k;
     $480 = $mod;
     $481 = ((($480)) + 180|0);
     $482 = HEAP32[$481>>2]|0;
     $483 = (($482) + (($479*52)|0)|0);
     $484 = (_load_sample($477,$478,0,$483,0)|0);
     $485 = ($484|0)<(0);
     if ($485) {
      label = 51;
      break L67;
     }
     $486 = $j;
     $487 = (($486) + 1)|0;
     $j = $487;
    }
    $488 = $i;
    $489 = (($mupp) + ($488<<2)|0);
    $490 = ((($489)) + 2|0);
    $491 = HEAP8[$490>>0]|0;
    $492 = $491&255;
    $493 = $extra;
    $494 = ((($493)) + 4|0);
    HEAP32[$494>>2] = $492;
    $495 = $i;
    $496 = (($mupp) + ($495<<2)|0);
    $497 = ((($496)) + 3|0);
    $498 = HEAP8[$497>>0]|0;
    $499 = $498&255;
    $500 = $extra;
    $501 = ((($500)) + 8|0);
    HEAP32[$501>>2] = $499;
    $502 = $extra;
    $503 = ((($502)) + 12|0);
    $504 = $2;
    (_hio_read($503,1,64,$504)|0);
    $505 = $extra;
    $506 = ((($505)) + 76|0);
    $507 = $2;
    (_hio_read($506,1,64,$507)|0);
    $508 = $mupp_index;
    $509 = (($508) + 1)|0;
    $mupp_index = $509;
   }
   $510 = $i;
   $511 = (($510) + 1)|0;
   $i = $511;
  }
  if ((label|0) == 51) {
   $0 = -1;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
  else if ((label|0) == 55) {
   $0 = 0;
   $512 = $0;
   STACKTOP = sp;return ($512|0);
  }
 }
 return (0)|0;
}
function _mgt_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $sng_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = (_hio_read24b($4)|0);
 $6 = ($5|0)!=(5064532);
 if ($6) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 $7 = $1;
 (_hio_read8($7)|0);
 $8 = $1;
 $9 = (_hio_read32b($8)|0);
 $10 = ($9|0)!=(-1119009965);
 if ($10) {
  $0 = -1;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $11 = $1;
  (_hio_seek($11,18,1)|0);
  $12 = $1;
  $13 = (_hio_read32b($12)|0);
  $sng_ptr = $13;
  $14 = $1;
  $15 = $3;
  $16 = $sng_ptr;
  $17 = (($15) + ($16))|0;
  (_hio_seek($14,$17,0)|0);
  $18 = $1;
  $19 = $2;
  _read_title($18,$19,32);
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _mgt_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $c2spd = 0, $event = 0, $f2p = 0, $flags = 0, $i = 0, $ins_ptr = 0, $j = 0, $mod = 0;
 var $note = 0, $offset = 0, $pat_ptr = 0, $rows = 0, $rows1 = 0, $sdata = 0, $seq_ptr = 0, $smp_ptr = 0, $sng_ptr = 0, $track = 0, $trk_ptr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sdata = sp + 32|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = $2;
 (_hio_read24b($7)|0);
 $8 = $2;
 $9 = (_hio_read8($8)|0);
 $10 = $9&255;
 $ver = $10;
 $11 = $2;
 (_hio_read32b($11)|0);
 $12 = $1;
 $13 = $ver;
 $14 = $13 & 240;
 $15 = $14 >> 4;
 $16 = $ver;
 $17 = $16 & 15;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 _set_type($12,7616,$vararg_buffer);
 $18 = $2;
 $19 = (_hio_read16b($18)|0);
 $20 = $19&65535;
 $21 = $mod;
 $22 = ((($21)) + 136|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 (_hio_read16b($23)|0);
 $24 = $2;
 $25 = (_hio_read16b($24)|0);
 $26 = $25&65535;
 $27 = $mod;
 $28 = ((($27)) + 156|0);
 HEAP32[$28>>2] = $26;
 $29 = $2;
 $30 = (_hio_read16b($29)|0);
 $31 = $30&65535;
 $32 = $mod;
 $33 = ((($32)) + 128|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 $35 = (_hio_read16b($34)|0);
 $36 = $35&65535;
 $37 = $mod;
 $38 = ((($37)) + 132|0);
 HEAP32[$38>>2] = $36;
 $39 = $2;
 $40 = (_hio_read16b($39)|0);
 $41 = $40&65535;
 $42 = $mod;
 $43 = ((($42)) + 144|0);
 HEAP32[$43>>2] = $41;
 $44 = $mod;
 $45 = ((($44)) + 140|0);
 HEAP32[$45>>2] = $41;
 $46 = $2;
 (_hio_read16b($46)|0);
 $47 = $2;
 (_hio_read32b($47)|0);
 $48 = $mod;
 $49 = ((($48)) + 140|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)>(64);
 if ($51) {
  $0 = -1;
  $690 = $0;
  STACKTOP = sp;return ($690|0);
 }
 $52 = $2;
 $53 = (_hio_read32b($52)|0);
 $sng_ptr = $53;
 $54 = $2;
 $55 = (_hio_read32b($54)|0);
 $seq_ptr = $55;
 $56 = $2;
 $57 = (_hio_read32b($56)|0);
 $ins_ptr = $57;
 $58 = $2;
 $59 = (_hio_read32b($58)|0);
 $pat_ptr = $59;
 $60 = $2;
 $61 = (_hio_read32b($60)|0);
 $trk_ptr = $61;
 $62 = $2;
 $63 = (_hio_read32b($62)|0);
 $smp_ptr = $63;
 $64 = $2;
 (_hio_read32b($64)|0);
 $65 = $2;
 (_hio_read32b($65)|0);
 $66 = $2;
 $67 = $3;
 $68 = $sng_ptr;
 $69 = (($67) + ($68))|0;
 (_hio_seek($66,$69,0)|0);
 $70 = $mod;
 $71 = $2;
 (_hio_read($70,1,32,$71)|0);
 $72 = $2;
 $73 = (_hio_read32b($72)|0);
 $seq_ptr = $73;
 $74 = $2;
 $75 = (_hio_read16b($74)|0);
 $76 = $75&65535;
 $77 = $mod;
 $78 = ((($77)) + 156|0);
 HEAP32[$78>>2] = $76;
 $79 = $2;
 $80 = (_hio_read16b($79)|0);
 $81 = $80&65535;
 $82 = $mod;
 $83 = ((($82)) + 160|0);
 HEAP32[$83>>2] = $81;
 $84 = $2;
 $85 = (_hio_read8($84)|0);
 $86 = $85&255;
 $87 = $mod;
 $88 = ((($87)) + 152|0);
 HEAP32[$88>>2] = $86;
 $89 = $2;
 $90 = (_hio_read8($89)|0);
 $91 = $90&255;
 $92 = $mod;
 $93 = ((($92)) + 148|0);
 HEAP32[$93>>2] = $91;
 $94 = $2;
 (_hio_read16b($94)|0);
 $95 = $2;
 (_hio_read8($95)|0);
 $96 = $2;
 (_hio_read8($96)|0);
 $97 = $mod;
 $98 = ((($97)) + 156|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)>(256);
 if (!($100)) {
  $101 = $mod;
  $102 = ((($101)) + 160|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)>(255);
  if (!($104)) {
   $i = 0;
   while(1) {
    $105 = $i;
    $106 = $mod;
    $107 = ((($106)) + 136|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($105|0)<($108|0);
    $110 = $2;
    if (!($109)) {
     break;
    }
    (_hio_read16b($110)|0);
    $111 = $i;
    $112 = (($111) + 1)|0;
    $i = $112;
   }
   $113 = $3;
   $114 = $seq_ptr;
   $115 = (($113) + ($114))|0;
   (_hio_seek($110,$115,0)|0);
   $i = 0;
   while(1) {
    $116 = $i;
    $117 = $mod;
    $118 = ((($117)) + 156|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($116|0)<($119|0);
    if (!($120)) {
     break;
    }
    $121 = $2;
    $122 = (_hio_read16b($121)|0);
    $123 = $122&255;
    $124 = $i;
    $125 = $mod;
    $126 = ((($125)) + 952|0);
    $127 = (($126) + ($124)|0);
    HEAP8[$127>>0] = $123;
    $128 = $i;
    $129 = $mod;
    $130 = ((($129)) + 952|0);
    $131 = (($130) + ($128)|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = $mod;
    $135 = ((($134)) + 128|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($133|0)>=($136|0);
    if ($137) {
     label = 12;
     break;
    }
    $138 = $i;
    $139 = (($138) + 1)|0;
    $i = $139;
   }
   if ((label|0) == 12) {
    $0 = -1;
    $690 = $0;
    STACKTOP = sp;return ($690|0);
   }
   $140 = $mod;
   $141 = (_instrument_init($140)|0);
   $142 = ($141|0)<(0);
   if ($142) {
    $0 = -1;
    $690 = $0;
    STACKTOP = sp;return ($690|0);
   }
   $143 = $2;
   $144 = $3;
   $145 = $ins_ptr;
   $146 = (($144) + ($145))|0;
   (_hio_seek($143,$146,0)|0);
   $i = 0;
   while(1) {
    $147 = $i;
    $148 = $mod;
    $149 = ((($148)) + 140|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ($147|0)<($150|0);
    $152 = $mod;
    if (!($151)) {
     label = 23;
     break;
    }
    $153 = $i;
    $154 = (_subinstrument_alloc($152,$153,1)|0);
    $155 = ($154|0)<(0);
    if ($155) {
     label = 19;
     break;
    }
    $156 = $i;
    $157 = $mod;
    $158 = ((($157)) + 176|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = (($159) + (($156*764)|0)|0);
    $161 = $2;
    (_hio_read($160,1,32,$161)|0);
    $162 = $2;
    $163 = (_hio_read32b($162)|0);
    $164 = $i;
    $165 = (($sdata) + ($164<<2)|0);
    HEAP32[$165>>2] = $163;
    $166 = $2;
    $167 = (_hio_read32b($166)|0);
    $168 = $i;
    $169 = $mod;
    $170 = ((($169)) + 180|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + (($168*52)|0)|0);
    $173 = ((($172)) + 32|0);
    HEAP32[$173>>2] = $167;
    $174 = $i;
    $175 = $mod;
    $176 = ((($175)) + 180|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = (($177) + (($174*52)|0)|0);
    $179 = ((($178)) + 32|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)>(268435456);
    if ($181) {
     label = 21;
     break;
    }
    $182 = $2;
    $183 = (_hio_read32b($182)|0);
    $184 = $i;
    $185 = $mod;
    $186 = ((($185)) + 180|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($187) + (($184*52)|0)|0);
    $189 = ((($188)) + 36|0);
    HEAP32[$189>>2] = $183;
    $190 = $i;
    $191 = $mod;
    $192 = ((($191)) + 180|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + (($190*52)|0)|0);
    $195 = ((($194)) + 36|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = $2;
    $198 = (_hio_read32b($197)|0);
    $199 = (($196) + ($198))|0;
    $200 = $i;
    $201 = $mod;
    $202 = ((($201)) + 180|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + (($200*52)|0)|0);
    $205 = ((($204)) + 40|0);
    HEAP32[$205>>2] = $199;
    $206 = $2;
    (_hio_read32b($206)|0);
    $207 = $2;
    (_hio_read32b($207)|0);
    $208 = $2;
    $209 = (_hio_read32b($208)|0);
    $c2spd = $209;
    $210 = $c2spd;
    $211 = $i;
    $212 = $mod;
    $213 = ((($212)) + 176|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + (($211*764)|0)|0);
    $216 = ((($215)) + 756|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = ((($217)) + 12|0);
    $219 = $i;
    $220 = $mod;
    $221 = ((($220)) + 176|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = (($222) + (($219*764)|0)|0);
    $224 = ((($223)) + 756|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = ((($225)) + 16|0);
    _c2spd_to_note($210,$218,$226);
    $227 = $2;
    $228 = (_hio_read16b($227)|0);
    $229 = $228&65535;
    $230 = $229 >> 4;
    $231 = $i;
    $232 = $mod;
    $233 = ((($232)) + 176|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + (($231*764)|0)|0);
    $236 = ((($235)) + 756|0);
    $237 = HEAP32[$236>>2]|0;
    HEAP32[$237>>2] = $230;
    $238 = $2;
    (_hio_read8($238)|0);
    $239 = $2;
    (_hio_read8($239)|0);
    $240 = $i;
    $241 = $mod;
    $242 = ((($241)) + 176|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($243) + (($240*764)|0)|0);
    $245 = ((($244)) + 756|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = ((($246)) + 8|0);
    HEAP32[$247>>2] = 128;
    $248 = $2;
    $249 = (_hio_read8($248)|0);
    $250 = $249&255;
    $flags = $250;
    $251 = $flags;
    $252 = $251 & 3;
    $253 = ($252|0)!=(0);
    $254 = $253 ? 2 : 0;
    $255 = $i;
    $256 = $mod;
    $257 = ((($256)) + 180|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = (($258) + (($255*52)|0)|0);
    $260 = ((($259)) + 44|0);
    HEAP32[$260>>2] = $254;
    $261 = $flags;
    $262 = $261 & 2;
    $263 = ($262|0)!=(0);
    $264 = $263 ? 4 : 0;
    $265 = $i;
    $266 = $mod;
    $267 = ((($266)) + 180|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = (($268) + (($265*52)|0)|0);
    $270 = ((($269)) + 44|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = $271 | $264;
    HEAP32[$270>>2] = $272;
    $273 = $2;
    $274 = (_hio_read8($273)|0);
    $275 = $274&255;
    $276 = 0;
    $277 = $i;
    $278 = $mod;
    $279 = ((($278)) + 176|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($280) + (($277*764)|0)|0);
    $282 = ((($281)) + 756|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ((($283)) + 16|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($285) + ($276))|0;
    HEAP32[$284>>2] = $286;
    $287 = $2;
    (_hio_read8($287)|0);
    $288 = $2;
    (_hio_read8($288)|0);
    $289 = $2;
    (_hio_read8($289)|0);
    $290 = $2;
    (_hio_read8($290)|0);
    $291 = $2;
    (_hio_read16b($291)|0);
    $292 = $2;
    (_hio_read32b($292)|0);
    $293 = $2;
    (_hio_read32b($293)|0);
    $294 = $i;
    $295 = $mod;
    $296 = ((($295)) + 180|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + (($294*52)|0)|0);
    $299 = ((($298)) + 32|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = ($300|0)!=(0);
    $302 = $301 ^ 1;
    $303 = $302 ^ 1;
    $304 = $303&1;
    $305 = $i;
    $306 = $mod;
    $307 = ((($306)) + 176|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + (($305*764)|0)|0);
    $310 = ((($309)) + 36|0);
    HEAP32[$310>>2] = $304;
    $311 = $i;
    $312 = $i;
    $313 = $mod;
    $314 = ((($313)) + 176|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (($315) + (($312*764)|0)|0);
    $317 = ((($316)) + 756|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ((($318)) + 40|0);
    HEAP32[$319>>2] = $311;
    $320 = $i;
    $321 = (($320) + 1)|0;
    $i = $321;
   }
   if ((label|0) == 19) {
    $0 = -1;
    $690 = $0;
    STACKTOP = sp;return ($690|0);
   }
   else if ((label|0) == 21) {
    $0 = -1;
    $690 = $0;
    STACKTOP = sp;return ($690|0);
   }
   else if ((label|0) == 23) {
    $322 = (_pattern_init($152)|0);
    $323 = ($322|0)<(0);
    if ($323) {
     $0 = -1;
     $690 = $0;
     STACKTOP = sp;return ($690|0);
    }
    $i = 1;
    L37: while(1) {
     $324 = $i;
     $325 = $mod;
     $326 = ((($325)) + 132|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = ($324|0)<($327|0);
     if (!($328)) {
      label = 72;
      break;
     }
     $329 = $2;
     $330 = $3;
     $331 = $trk_ptr;
     $332 = (($330) + ($331))|0;
     $333 = $i;
     $334 = $333<<2;
     $335 = (($332) + ($334))|0;
     (_hio_seek($329,$335,0)|0);
     $336 = $2;
     $337 = (_hio_read32b($336)|0);
     $offset = $337;
     $338 = $2;
     $339 = $3;
     $340 = $offset;
     $341 = (($339) + ($340))|0;
     (_hio_seek($338,$341,0)|0);
     $342 = $2;
     $343 = (_hio_read16b($342)|0);
     $344 = $343&65535;
     $rows = $344;
     $345 = $rows;
     $346 = ($345|0)>(255);
     if ($346) {
      label = 28;
      break;
     }
     $347 = $mod;
     $348 = $i;
     $349 = $rows;
     $350 = (_track_alloc($347,$348,$349)|0);
     $351 = ($350|0)<(0);
     if ($351) {
      label = 30;
      break;
     }
     $j = 0;
     while(1) {
      $352 = $j;
      $353 = $rows;
      $354 = ($352|0)<($353|0);
      if (!($354)) {
       break;
      }
      $355 = $2;
      $356 = (_hio_read8($355)|0);
      $b = $356;
      $357 = $b;
      $358 = $357&255;
      $359 = $358 & 3;
      $360 = $j;
      $361 = (($360) + ($359))|0;
      $j = $361;
      $362 = $j;
      $363 = $rows;
      $364 = ($362|0)>=($363|0);
      if ($364) {
       label = 34;
       break L37;
      }
      $note = 0;
      $365 = $j;
      $366 = $i;
      $367 = $mod;
      $368 = ((($367)) + 172|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = (($369) + ($366<<2)|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = ((($371)) + 4|0);
      $373 = (($372) + ($365<<3)|0);
      $event = $373;
      $374 = $b;
      $375 = $374&255;
      $376 = $375 & 4;
      $377 = ($376|0)!=(0);
      if ($377) {
       $378 = $2;
       $379 = (_hio_read8($378)|0);
       $note = $379;
      }
      $380 = $b;
      $381 = $380&255;
      $382 = $381 & 8;
      $383 = ($382|0)!=(0);
      if ($383) {
       $384 = $2;
       $385 = (_hio_read8($384)|0);
       $386 = $event;
       $387 = ((($386)) + 1|0);
       HEAP8[$387>>0] = $385;
      }
      $388 = $b;
      $389 = $388&255;
      $390 = $389 & 16;
      $391 = ($390|0)!=(0);
      if ($391) {
       $392 = $2;
       $393 = (_hio_read8($392)|0);
       $394 = $event;
       $395 = ((($394)) + 2|0);
       HEAP8[$395>>0] = $393;
      }
      $396 = $b;
      $397 = $396&255;
      $398 = $397 & 32;
      $399 = ($398|0)!=(0);
      if ($399) {
       $400 = $2;
       $401 = (_hio_read8($400)|0);
       $402 = $event;
       $403 = ((($402)) + 3|0);
       HEAP8[$403>>0] = $401;
      }
      $404 = $b;
      $405 = $404&255;
      $406 = $405 & 64;
      $407 = ($406|0)!=(0);
      if ($407) {
       $408 = $2;
       $409 = (_hio_read8($408)|0);
       $410 = $event;
       $411 = ((($410)) + 4|0);
       HEAP8[$411>>0] = $409;
      }
      $412 = $b;
      $413 = $412&255;
      $414 = $413 & 128;
      $415 = ($414|0)!=(0);
      if ($415) {
       $416 = $2;
       $417 = (_hio_read8($416)|0);
       $f2p = $417;
      }
      $418 = $note;
      $419 = $418&255;
      $420 = ($419|0)==(1);
      do {
       if ($420) {
        $421 = $event;
        HEAP8[$421>>0] = -127;
       } else {
        $422 = $note;
        $423 = $422&255;
        $424 = ($423|0)>(11);
        if (!($424)) {
         break;
        }
        $425 = $note;
        $426 = $425&255;
        $427 = (($426) + 1)|0;
        $428 = $427&255;
        $429 = $event;
        HEAP8[$429>>0] = $428;
       }
      } while(0);
      $430 = $event;
      $431 = ((($430)) + 3|0);
      $432 = HEAP8[$431>>0]|0;
      $433 = $432&255;
      $434 = ($433|0)<(16);
      L69: do {
       if (!($434)) {
        $435 = $event;
        $436 = ((($435)) + 3|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        switch ($438|0) {
        case 30: case 29: case 28: case 23: case 21: case 20: case 19:  {
         $439 = $event;
         $440 = ((($439)) + 3|0);
         HEAP8[$440>>0] = 14;
         $441 = $event;
         $442 = ((($441)) + 3|0);
         $443 = HEAP8[$442>>0]|0;
         $444 = $443&255;
         $445 = $444 & 15;
         $446 = $445 << 4;
         $447 = $event;
         $448 = ((($447)) + 4|0);
         $449 = HEAP8[$448>>0]|0;
         $450 = $449&255;
         $451 = $450 & 15;
         $452 = $446 | $451;
         $453 = $452&255;
         $454 = $event;
         $455 = ((($454)) + 4|0);
         HEAP8[$455>>0] = $453;
         break L69;
         break;
        }
        default: {
         $456 = $event;
         $457 = ((($456)) + 4|0);
         HEAP8[$457>>0] = 0;
         $458 = $event;
         $459 = ((($458)) + 3|0);
         HEAP8[$459>>0] = 0;
         break L69;
        }
        }
       }
      } while(0);
      $460 = $event;
      $461 = ((($460)) + 2|0);
      $462 = HEAP8[$461>>0]|0;
      $463 = $462&255;
      $464 = ($463|0)>=(16);
      do {
       if ($464) {
        $465 = $event;
        $466 = ((($465)) + 2|0);
        $467 = HEAP8[$466>>0]|0;
        $468 = $467&255;
        $469 = ($468|0)<=(80);
        if (!($469)) {
         label = 58;
         break;
        }
        $470 = $event;
        $471 = ((($470)) + 2|0);
        $472 = HEAP8[$471>>0]|0;
        $473 = $472&255;
        $474 = (($473) - 15)|0;
        $475 = $474&255;
        HEAP8[$471>>0] = $475;
       } else {
        label = 58;
       }
      } while(0);
      if ((label|0) == 58) {
       label = 0;
       $476 = $event;
       $477 = ((($476)) + 2|0);
       $478 = HEAP8[$477>>0]|0;
       $479 = $478&255;
       $480 = $479 >> 4;
       do {
        switch ($480|0) {
        case 11:  {
         $535 = $event;
         $536 = ((($535)) + 5|0);
         HEAP8[$536>>0] = 4;
         $537 = $event;
         $538 = ((($537)) + 2|0);
         $539 = HEAP8[$538>>0]|0;
         $540 = $539&255;
         $541 = (($540) - 176)|0;
         $542 = $541&255;
         $543 = $event;
         $544 = ((($543)) + 6|0);
         HEAP8[$544>>0] = $542;
         break;
        }
        case 8:  {
         $502 = $event;
         $503 = ((($502)) + 5|0);
         HEAP8[$503>>0] = 14;
         $504 = $event;
         $505 = ((($504)) + 2|0);
         $506 = HEAP8[$505>>0]|0;
         $507 = $506&255;
         $508 = (($507) - 128)|0;
         $509 = 176 | $508;
         $510 = $509&255;
         $511 = $event;
         $512 = ((($511)) + 6|0);
         HEAP8[$512>>0] = $510;
         break;
        }
        case 12:  {
         $545 = $event;
         $546 = ((($545)) + 5|0);
         HEAP8[$546>>0] = 8;
         $547 = $event;
         $548 = ((($547)) + 2|0);
         $549 = HEAP8[$548>>0]|0;
         $550 = $549&255;
         $551 = (($550) - 192)|0;
         $552 = $551 << 4;
         $553 = (($552) + 8)|0;
         $554 = $553&255;
         $555 = $event;
         $556 = ((($555)) + 6|0);
         HEAP8[$556>>0] = $554;
         break;
        }
        case 7:  {
         $491 = $event;
         $492 = ((($491)) + 5|0);
         HEAP8[$492>>0] = -92;
         $493 = $event;
         $494 = ((($493)) + 2|0);
         $495 = HEAP8[$494>>0]|0;
         $496 = $495&255;
         $497 = (($496) - 112)|0;
         $498 = $497 << 4;
         $499 = $498&255;
         $500 = $event;
         $501 = ((($500)) + 6|0);
         HEAP8[$501>>0] = $499;
         break;
        }
        case 13:  {
         $557 = $event;
         $558 = ((($557)) + 5|0);
         HEAP8[$558>>0] = 25;
         $559 = $event;
         $560 = ((($559)) + 2|0);
         $561 = HEAP8[$560>>0]|0;
         $562 = $561&255;
         $563 = (($562) - 208)|0;
         $564 = $563 << 4;
         $565 = $564&255;
         $566 = $event;
         $567 = ((($566)) + 6|0);
         HEAP8[$567>>0] = $565;
         break;
        }
        case 14:  {
         $568 = $event;
         $569 = ((($568)) + 5|0);
         HEAP8[$569>>0] = 25;
         $570 = $event;
         $571 = ((($570)) + 2|0);
         $572 = HEAP8[$571>>0]|0;
         $573 = $572&255;
         $574 = (($573) - 224)|0;
         $575 = $574&255;
         $576 = $event;
         $577 = ((($576)) + 6|0);
         HEAP8[$577>>0] = $575;
         break;
        }
        case 15:  {
         $578 = $event;
         $579 = ((($578)) + 5|0);
         HEAP8[$579>>0] = 3;
         $580 = $event;
         $581 = ((($580)) + 2|0);
         $582 = HEAP8[$581>>0]|0;
         $583 = $582&255;
         $584 = (($583) - 240)|0;
         $585 = $584 << 4;
         $586 = $585&255;
         $587 = $event;
         $588 = ((($587)) + 6|0);
         HEAP8[$588>>0] = $586;
         break;
        }
        case 9:  {
         $513 = $event;
         $514 = ((($513)) + 5|0);
         HEAP8[$514>>0] = 14;
         $515 = $event;
         $516 = ((($515)) + 2|0);
         $517 = HEAP8[$516>>0]|0;
         $518 = $517&255;
         $519 = (($518) - 144)|0;
         $520 = 160 | $519;
         $521 = $520&255;
         $522 = $event;
         $523 = ((($522)) + 6|0);
         HEAP8[$523>>0] = $521;
         break;
        }
        case 6:  {
         $481 = $event;
         $482 = ((($481)) + 5|0);
         HEAP8[$482>>0] = -92;
         $483 = $event;
         $484 = ((($483)) + 2|0);
         $485 = HEAP8[$484>>0]|0;
         $486 = $485&255;
         $487 = (($486) - 96)|0;
         $488 = $487&255;
         $489 = $event;
         $490 = ((($489)) + 6|0);
         HEAP8[$490>>0] = $488;
         break;
        }
        case 10:  {
         $524 = $event;
         $525 = ((($524)) + 5|0);
         HEAP8[$525>>0] = 4;
         $526 = $event;
         $527 = ((($526)) + 2|0);
         $528 = HEAP8[$527>>0]|0;
         $529 = $528&255;
         $530 = (($529) - 160)|0;
         $531 = $530 << 4;
         $532 = $531&255;
         $533 = $event;
         $534 = ((($533)) + 6|0);
         HEAP8[$534>>0] = $532;
         break;
        }
        default: {
        }
        }
       } while(0);
       $589 = $event;
       $590 = ((($589)) + 2|0);
       HEAP8[$590>>0] = 0;
      }
      $591 = $j;
      $592 = (($591) + 1)|0;
      $j = $592;
     }
     $593 = $i;
     $594 = (($593) + 1)|0;
     $i = $594;
    }
    if ((label|0) == 28) {
     $0 = -1;
     $690 = $0;
     STACKTOP = sp;return ($690|0);
    }
    else if ((label|0) == 30) {
     $0 = -1;
     $690 = $0;
     STACKTOP = sp;return ($690|0);
    }
    else if ((label|0) == 34) {
     $0 = -1;
     $690 = $0;
     STACKTOP = sp;return ($690|0);
    }
    else if ((label|0) == 72) {
     $595 = $mod;
     $596 = ((($595)) + 132|0);
     $597 = HEAP32[$596>>2]|0;
     $598 = ($597|0)>(0);
     if ($598) {
      $599 = (_calloc(523,1)|0);
      $600 = $mod;
      $601 = ((($600)) + 172|0);
      $602 = HEAP32[$601>>2]|0;
      HEAP32[$602>>2] = $599;
      $603 = $mod;
      $604 = ((($603)) + 172|0);
      $605 = HEAP32[$604>>2]|0;
      $606 = HEAP32[$605>>2]|0;
      HEAP32[$606>>2] = 64;
     }
     $607 = $2;
     $608 = $3;
     $609 = $pat_ptr;
     $610 = (($608) + ($609))|0;
     (_hio_seek($607,$610,0)|0);
     $i = 0;
     L99: while(1) {
      $611 = $i;
      $612 = $mod;
      $613 = ((($612)) + 128|0);
      $614 = HEAP32[$613>>2]|0;
      $615 = ($611|0)<($614|0);
      if (!($615)) {
       label = 86;
       break;
      }
      $616 = $mod;
      $617 = $i;
      $618 = (_pattern_alloc($616,$617)|0);
      $619 = ($618|0)<(0);
      if ($619) {
       label = 77;
       break;
      }
      $620 = $2;
      $621 = (_hio_read16b($620)|0);
      $622 = $621&65535;
      $rows1 = $622;
      $623 = $rows1;
      $624 = ($623|0)>(256);
      if ($624) {
       label = 79;
       break;
      }
      $625 = $rows1;
      $626 = $i;
      $627 = $mod;
      $628 = ((($627)) + 168|0);
      $629 = HEAP32[$628>>2]|0;
      $630 = (($629) + ($626<<2)|0);
      $631 = HEAP32[$630>>2]|0;
      HEAP32[$631>>2] = $625;
      $j = 0;
      while(1) {
       $632 = $j;
       $633 = $mod;
       $634 = ((($633)) + 136|0);
       $635 = HEAP32[$634>>2]|0;
       $636 = ($632|0)<($635|0);
       if (!($636)) {
        break;
       }
       $637 = $2;
       $638 = (_hio_read16b($637)|0);
       $639 = $638&65535;
       $640 = (($639) - 1)|0;
       $track = $640;
       $641 = $track;
       $642 = $mod;
       $643 = ((($642)) + 132|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = ($641|0)>=($644|0);
       if ($645) {
        label = 83;
        break L99;
       }
       $646 = $track;
       $647 = $j;
       $648 = $i;
       $649 = $mod;
       $650 = ((($649)) + 168|0);
       $651 = HEAP32[$650>>2]|0;
       $652 = (($651) + ($648<<2)|0);
       $653 = HEAP32[$652>>2]|0;
       $654 = ((($653)) + 4|0);
       $655 = (($654) + ($647<<2)|0);
       HEAP32[$655>>2] = $646;
       $656 = $j;
       $657 = (($656) + 1)|0;
       $j = $657;
      }
      $658 = $i;
      $659 = (($658) + 1)|0;
      $i = $659;
     }
     if ((label|0) == 77) {
      $0 = -1;
      $690 = $0;
      STACKTOP = sp;return ($690|0);
     }
     else if ((label|0) == 79) {
      $0 = -1;
      $690 = $0;
      STACKTOP = sp;return ($690|0);
     }
     else if ((label|0) == 83) {
      $0 = -1;
      $690 = $0;
      STACKTOP = sp;return ($690|0);
     }
     else if ((label|0) == 86) {
      $i = 0;
      while(1) {
       $660 = $i;
       $661 = $mod;
       $662 = ((($661)) + 140|0);
       $663 = HEAP32[$662>>2]|0;
       $664 = ($660|0)<($663|0);
       if (!($664)) {
        label = 92;
        break;
       }
       $665 = $i;
       $666 = $mod;
       $667 = ((($666)) + 176|0);
       $668 = HEAP32[$667>>2]|0;
       $669 = (($668) + (($665*764)|0)|0);
       $670 = ((($669)) + 36|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = ($671|0)==(0);
       if (!($672)) {
        $673 = $2;
        $674 = $3;
        $675 = $i;
        $676 = (($sdata) + ($675<<2)|0);
        $677 = HEAP32[$676>>2]|0;
        $678 = (($674) + ($677))|0;
        (_hio_seek($673,$678,0)|0);
        $679 = $1;
        $680 = $2;
        $681 = $i;
        $682 = $mod;
        $683 = ((($682)) + 180|0);
        $684 = HEAP32[$683>>2]|0;
        $685 = (($684) + (($681*52)|0)|0);
        $686 = (_load_sample($679,$680,0,$685,0)|0);
        $687 = ($686|0)<(0);
        if ($687) {
         label = 90;
         break;
        }
       }
       $688 = $i;
       $689 = (($688) + 1)|0;
       $i = $689;
      }
      if ((label|0) == 90) {
       $0 = -1;
       $690 = $0;
       STACKTOP = sp;return ($690|0);
      }
      else if ((label|0) == 92) {
       $0 = 0;
       $690 = $0;
       STACKTOP = sp;return ($690|0);
      }
     }
    }
   }
  }
 }
 $0 = -1;
 $690 = $0;
 STACKTOP = sp;return ($690|0);
}
function _chip_test($f,$t,$start) {
 $f = $f|0;
 $t = $t|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $1 = $f;
 $2 = $t;
 $3 = $start;
 $4 = $1;
 $5 = $3;
 $6 = (($5) + 952)|0;
 (_hio_seek($4,$6,0)|0);
 $7 = $1;
 $8 = (_hio_read($buf,1,4,$7)|0);
 $9 = ($8>>>0)<(4);
 if ($9) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 $10 = (_memcmp($buf,7672,4)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = -1;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $12 = $1;
  $13 = $3;
  $14 = (($13) + 0)|0;
  (_hio_seek($12,$14,0)|0);
  $15 = $1;
  $16 = $2;
  _read_title($15,$16,20);
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _chip_load($m,$f,$start) {
 $m = $m|0;
 $f = $f|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e = 0, $event = 0, $i = 0, $j = 0, $mh = 0, $mod = 0, $sub = 0, $t = 0, $t1 = 0, $tidx = 0, $tnum = 0, $vararg_buffer = 0, $xxi = 0, $xxs = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mh = sp + 64|0;
 $e = sp + 1148|0;
 $1 = $m;
 $2 = $f;
 $3 = $start;
 $4 = $1;
 $mod = $4;
 $5 = $2;
 $6 = $3;
 (_hio_seek($5,$6,0)|0);
 $7 = (_calloc(1,1024)|0);
 $tidx = $7;
 $8 = ($7|0)==(0|0);
 L1: do {
  if (!($8)) {
   $9 = $2;
   (_hio_read($mh,20,1,$9)|0);
   $10 = $2;
   (_hio_read16b($10)|0);
   $i = 0;
   while(1) {
    $11 = $i;
    $12 = ($11|0)<(31);
    if (!($12)) {
     break;
    }
    $13 = $i;
    $14 = ((($mh)) + 20|0);
    $15 = (($14) + (($13*30)|0)|0);
    $16 = $2;
    (_hio_read($15,22,1,$16)|0);
    $17 = $2;
    $18 = (_hio_read16b($17)|0);
    $19 = $i;
    $20 = ((($mh)) + 20|0);
    $21 = (($20) + (($19*30)|0)|0);
    $22 = ((($21)) + 22|0);
    HEAP16[$22>>1] = $18;
    $23 = $2;
    $24 = (_hio_read8($23)|0);
    $25 = $i;
    $26 = ((($mh)) + 20|0);
    $27 = (($26) + (($25*30)|0)|0);
    $28 = ((($27)) + 24|0);
    HEAP8[$28>>0] = $24;
    $29 = $2;
    $30 = (_hio_read8($29)|0);
    $31 = $i;
    $32 = ((($mh)) + 20|0);
    $33 = (($32) + (($31*30)|0)|0);
    $34 = ((($33)) + 25|0);
    HEAP8[$34>>0] = $30;
    $35 = $2;
    $36 = (_hio_read16b($35)|0);
    $37 = $i;
    $38 = ((($mh)) + 20|0);
    $39 = (($38) + (($37*30)|0)|0);
    $40 = ((($39)) + 26|0);
    HEAP16[$40>>1] = $36;
    $41 = $2;
    $42 = (_hio_read16b($41)|0);
    $43 = $i;
    $44 = ((($mh)) + 20|0);
    $45 = (($44) + (($43*30)|0)|0);
    $46 = ((($45)) + 28|0);
    HEAP16[$46>>1] = $42;
    $47 = $i;
    $48 = (($47) + 1)|0;
    $i = $48;
   }
   $49 = ((($mh)) + 1080|0);
   $50 = $2;
   (_hio_read($49,4,1,$50)|0);
   $51 = $2;
   $52 = (_hio_read8($51)|0);
   $53 = ((($mh)) + 950|0);
   HEAP8[$53>>0] = $52;
   $54 = $2;
   $55 = (_hio_read8($54)|0);
   $56 = ((($mh)) + 951|0);
   HEAP8[$56>>0] = $55;
   $57 = $tidx;
   $58 = $2;
   (_hio_read($57,1024,1,$58)|0);
   $59 = $2;
   (_hio_read16b($59)|0);
   $60 = $mod;
   $61 = ((($60)) + 136|0);
   HEAP32[$61>>2] = 4;
   $62 = $mod;
   $63 = ((($62)) + 140|0);
   HEAP32[$63>>2] = 31;
   $64 = $mod;
   $65 = ((($64)) + 140|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $mod;
   $68 = ((($67)) + 144|0);
   HEAP32[$68>>2] = $66;
   $69 = ((($mh)) + 950|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $mod;
   $73 = ((($72)) + 156|0);
   HEAP32[$73>>2] = $71;
   $74 = ((($mh)) + 950|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $mod;
   $78 = ((($77)) + 128|0);
   HEAP32[$78>>2] = $76;
   $79 = ((($mh)) + 951|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $mod;
   $83 = ((($82)) + 160|0);
   HEAP32[$83>>2] = $81;
   $tnum = 0;
   $i = 0;
   while(1) {
    $84 = $i;
    $85 = $mod;
    $86 = ((($85)) + 156|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($84|0)<($87|0);
    if (!($88)) {
     break;
    }
    $89 = $i;
    $90 = $89&255;
    $91 = $i;
    $92 = $mod;
    $93 = ((($92)) + 952|0);
    $94 = (($93) + ($91)|0);
    HEAP8[$94>>0] = $90;
    $j = 0;
    while(1) {
     $95 = $j;
     $96 = ($95|0)<(4);
     $97 = $i;
     if (!($96)) {
      break;
     }
     $98 = $97<<2;
     $99 = $j;
     $100 = (($98) + ($99))|0;
     $101 = $100<<1;
     $102 = $tidx;
     $103 = (($102) + ($101)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104&255;
     $t = $105;
     $106 = $t;
     $107 = $tnum;
     $108 = ($106|0)>($107|0);
     if ($108) {
      $109 = $t;
      $tnum = $109;
     }
     $110 = $j;
     $111 = (($110) + 1)|0;
     $j = $111;
    }
    $112 = (($97) + 1)|0;
    $i = $112;
   }
   $113 = $tnum;
   $114 = (($113) + 1)|0;
   $115 = $mod;
   $116 = ((($115)) + 132|0);
   HEAP32[$116>>2] = $114;
   $117 = $mod;
   (_strncpy(($117|0),($mh|0),20)|0);
   $118 = $1;
   _set_type($118,7656,$vararg_buffer);
   $119 = $mod;
   $120 = (_instrument_init($119)|0);
   $121 = ($120|0)<(0);
   L18: do {
    if (!($121)) {
     $i = 0;
     while(1) {
      $122 = $i;
      $123 = $mod;
      $124 = ((($123)) + 140|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($122|0)<($125|0);
      if (!($126)) {
       break;
      }
      $127 = $i;
      $128 = $mod;
      $129 = ((($128)) + 176|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = (($130) + (($127*764)|0)|0);
      $xxi = $131;
      $132 = $i;
      $133 = $mod;
      $134 = ((($133)) + 180|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = (($135) + (($132*52)|0)|0);
      $xxs = $136;
      $137 = $mod;
      $138 = $i;
      $139 = (_subinstrument_alloc($137,$138,1)|0);
      $140 = ($139|0)<(0);
      if ($140) {
       break L1;
      }
      $141 = $xxi;
      $142 = ((($141)) + 756|0);
      $143 = HEAP32[$142>>2]|0;
      $sub = $143;
      $144 = $i;
      $145 = ((($mh)) + 20|0);
      $146 = (($145) + (($144*30)|0)|0);
      $147 = ((($146)) + 22|0);
      $148 = HEAP16[$147>>1]|0;
      $149 = $148&65535;
      $150 = $149<<1;
      $151 = $xxs;
      $152 = ((($151)) + 32|0);
      HEAP32[$152>>2] = $150;
      $153 = $i;
      $154 = ((($mh)) + 20|0);
      $155 = (($154) + (($153*30)|0)|0);
      $156 = ((($155)) + 26|0);
      $157 = HEAP16[$156>>1]|0;
      $158 = $157&65535;
      $159 = $xxs;
      $160 = ((($159)) + 36|0);
      HEAP32[$160>>2] = $158;
      $161 = $xxs;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $i;
      $165 = ((($mh)) + 20|0);
      $166 = (($165) + (($164*30)|0)|0);
      $167 = ((($166)) + 28|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168&65535;
      $170 = $169<<1;
      $171 = (($163) + ($170))|0;
      $172 = $xxs;
      $173 = ((($172)) + 40|0);
      HEAP32[$173>>2] = $171;
      $174 = $i;
      $175 = ((($mh)) + 20|0);
      $176 = (($175) + (($174*30)|0)|0);
      $177 = ((($176)) + 28|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178&65535;
      $180 = ($179|0)>(1);
      $181 = $180 ? 2 : 0;
      $182 = $xxs;
      $183 = ((($182)) + 44|0);
      HEAP32[$183>>2] = $181;
      $184 = $i;
      $185 = ((($mh)) + 20|0);
      $186 = (($185) + (($184*30)|0)|0);
      $187 = ((($186)) + 24|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = $188 << 24 >> 24;
      $190 = $189 << 4;
      $191 = $190&255;
      $192 = $191 << 24 >> 24;
      $193 = $sub;
      $194 = ((($193)) + 16|0);
      HEAP32[$194>>2] = $192;
      $195 = $i;
      $196 = ((($mh)) + 20|0);
      $197 = (($196) + (($195*30)|0)|0);
      $198 = ((($197)) + 25|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199 << 24 >> 24;
      $201 = $sub;
      HEAP32[$201>>2] = $200;
      $202 = $sub;
      $203 = ((($202)) + 8|0);
      HEAP32[$203>>2] = 128;
      $204 = $i;
      $205 = $sub;
      $206 = ((($205)) + 40|0);
      HEAP32[$206>>2] = $204;
      $207 = $xxs;
      $208 = ((($207)) + 32|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($209|0)>(0);
      if ($210) {
       $211 = $xxi;
       $212 = ((($211)) + 36|0);
       HEAP32[$212>>2] = 1;
      }
      $213 = $mod;
      $214 = $i;
      $215 = $i;
      $216 = ((($mh)) + 20|0);
      $217 = (($216) + (($215*30)|0)|0);
      (_instrument_name($213,$214,$217,22)|0);
      $218 = $i;
      $219 = (($218) + 1)|0;
      $i = $219;
     }
     $220 = $mod;
     $221 = (_pattern_init($220)|0);
     $222 = ($221|0)<(0);
     if (!($222)) {
      $i = 0;
      while(1) {
       $223 = $i;
       $224 = $mod;
       $225 = ((($224)) + 156|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($223|0)<($226|0);
       if (!($227)) {
        break;
       }
       $228 = $mod;
       $229 = $i;
       $230 = (_pattern_alloc($228,$229)|0);
       $231 = ($230|0)<(0);
       if ($231) {
        break L18;
       }
       $232 = $i;
       $233 = $mod;
       $234 = ((($233)) + 168|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = (($235) + ($232<<2)|0);
       $237 = HEAP32[$236>>2]|0;
       HEAP32[$237>>2] = 64;
       $j = 0;
       while(1) {
        $238 = $j;
        $239 = ($238|0)<(4);
        $240 = $i;
        if (!($239)) {
         break;
        }
        $241 = $240<<2;
        $242 = $j;
        $243 = (($241) + ($242))|0;
        $244 = $243<<1;
        $245 = $tidx;
        $246 = (($245) + ($244)|0);
        $247 = HEAP8[$246>>0]|0;
        $248 = $247&255;
        $t1 = $248;
        $249 = $t1;
        $250 = $j;
        $251 = $i;
        $252 = $mod;
        $253 = ((($252)) + 168|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = (($254) + ($251<<2)|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ((($256)) + 4|0);
        $258 = (($257) + ($250<<2)|0);
        HEAP32[$258>>2] = $249;
        $259 = $j;
        $260 = (($259) + 1)|0;
        $j = $260;
       }
       $261 = (($240) + 1)|0;
       $i = $261;
      }
      $i = 0;
      while(1) {
       $262 = $i;
       $263 = $mod;
       $264 = ((($263)) + 132|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($262|0)<($265|0);
       if (!($266)) {
        break;
       }
       $267 = $mod;
       $268 = $i;
       $269 = (_track_alloc($267,$268,64)|0);
       $270 = ($269|0)<(0);
       if ($270) {
        break L18;
       }
       $j = 0;
       while(1) {
        $271 = $j;
        $272 = ($271|0)<(64);
        if (!($272)) {
         break;
        }
        $273 = $j;
        $274 = $i;
        $275 = $mod;
        $276 = ((($275)) + 172|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = (($277) + ($274<<2)|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = ((($279)) + 4|0);
        $281 = (($280) + ($273<<3)|0);
        $event = $281;
        $282 = $2;
        (_hio_read($e,1,4,$282)|0);
        $283 = HEAP8[$e>>0]|0;
        $284 = $283&255;
        $285 = ($284|0)!=(0);
        if ($285) {
         $286 = HEAP8[$e>>0]|0;
         $287 = $286&255;
         $288 = ($287|0)!=(168);
         if ($288) {
          $289 = HEAP8[$e>>0]|0;
          $290 = $289&255;
          $291 = (($290|0) / 2)&-1;
          $292 = (13 + ($291))|0;
          $293 = $292&255;
          $294 = $event;
          HEAP8[$294>>0] = $293;
         }
        }
        $295 = ((($e)) + 1|0);
        $296 = HEAP8[$295>>0]|0;
        $297 = $event;
        $298 = ((($297)) + 1|0);
        HEAP8[$298>>0] = $296;
        $299 = ((($e)) + 2|0);
        $300 = HEAP8[$299>>0]|0;
        $301 = $300&255;
        $302 = $301 & 15;
        $303 = $302&255;
        $304 = $event;
        $305 = ((($304)) + 3|0);
        HEAP8[$305>>0] = $303;
        $306 = ((($e)) + 3|0);
        $307 = HEAP8[$306>>0]|0;
        $308 = $event;
        $309 = ((($308)) + 4|0);
        HEAP8[$309>>0] = $307;
        $310 = $j;
        $311 = (($310) + 1)|0;
        $j = $311;
       }
       $312 = $i;
       $313 = (($312) + 1)|0;
       $i = $313;
      }
      $314 = $1;
      $315 = ((($314)) + 1284|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = $316 | 8192;
      HEAP32[$315>>2] = $317;
      $i = 0;
      while(1) {
       $318 = $i;
       $319 = $mod;
       $320 = ((($319)) + 144|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = ($318|0)<($321|0);
       if (!($322)) {
        break;
       }
       $323 = $i;
       $324 = $mod;
       $325 = ((($324)) + 180|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = (($326) + (($323*52)|0)|0);
       $328 = ((($327)) + 32|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = ($329|0)==(0);
       if (!($330)) {
        $331 = $1;
        $332 = $2;
        $333 = $i;
        $334 = $mod;
        $335 = ((($334)) + 180|0);
        $336 = HEAP32[$335>>2]|0;
        $337 = (($336) + (($333*52)|0)|0);
        $338 = (_load_sample($331,$332,512,$337,0)|0);
        $339 = ($338|0)<(0);
        if ($339) {
         break L18;
        }
       }
       $340 = $i;
       $341 = (($340) + 1)|0;
       $i = $341;
      }
      $342 = $tidx;
      _free($342);
      $0 = 0;
      $344 = $0;
      STACKTOP = sp;return ($344|0);
     }
    }
   } while(0);
   $343 = $tidx;
   _free($343);
  }
 } while(0);
 $0 = -1;
 $344 = $0;
 STACKTOP = sp;return ($344|0);
}
function _pw_move_data($out,$in,$len) {
 $out = $out|0;
 $in = $in|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0;
 var $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $out;
 $1 = $in;
 $2 = $len;
 while(1) {
  $3 = $2;
  $4 = ($3|0)>(1024);
  $5 = $2;
  $6 = $4 ? 1024 : $5;
  $7 = $1;
  $8 = (_hio_read($buf,1,$6,$7)|0);
  $l = $8;
  $9 = $l;
  $10 = $0;
  (_fwrite(($buf|0),1,($9|0),($10|0))|0);
  $11 = $l;
  $12 = $2;
  $13 = (($12) - ($11))|0;
  $2 = $13;
  $14 = $l;
  $15 = ($14|0)>(0);
  $16 = $2;
  $17 = ($16|0)>(0);
  $18 = $15 ? $17 : 0;
  if (!($18)) {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _pw_write_zero($out,$len) {
 $out = $out|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $l = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $out;
 $1 = $len;
 while(1) {
  $2 = $1;
  $3 = ($2|0)>(1024);
  $4 = $1;
  $5 = $3 ? 1024 : $4;
  $l = $5;
  $6 = $l;
  _memset(($buf|0),0,($6|0))|0;
  $7 = $l;
  $8 = $0;
  (_fwrite(($buf|0),1,($7|0),($8|0))|0);
  $9 = $l;
  $10 = $1;
  $11 = (($10) - ($9))|0;
  $1 = $11;
  $12 = $l;
  $13 = ($12|0)>(0);
  $14 = $1;
  $15 = ($14|0)>(0);
  $16 = $13 ? $15 : 0;
  if (!($16)) {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _pw_wizardry($file_in,$file_out,$name) {
 $file_in = $file_in|0;
 $file_out = $file_out|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $i = 0, $in_size = 0;
 var $title = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $title = sp + 28|0;
 $1 = $file_in;
 $2 = $file_out;
 $3 = $name;
 $4 = $1;
 $5 = (_hio_size($4)|0);
 $in_size = $5;
 $6 = $in_size;
 $7 = ($6|0)<(2048);
 if ($7) {
  $0 = -2;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $8 = $in_size;
 $9 = (($8) + 4096)|0;
 $10 = (_malloc($9)|0);
 $data = $10;
 $11 = $data;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $0 = -1;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $13 = $data;
 $14 = $in_size;
 $15 = $1;
 (_hio_read($13,$14,1,$15)|0);
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = (7680 + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (7680 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $data;
  $26 = $in_size;
  $27 = (FUNCTION_TABLE_iiii[$24 & 255]($25,$title,$26)|0);
  $28 = ($27|0)>=(0);
  if ($28) {
   break;
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $i;
 $32 = (7680 + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $35 = $data;
  _free($35);
  $0 = -1;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $36 = $1;
 (_hio_seek($36,0,0)|0);
 $37 = $i;
 $38 = (7680 + ($37<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = $2;
 $44 = (FUNCTION_TABLE_iii[$41 & 511]($42,$43)|0);
 $45 = ($44|0)<(0);
 if ($45) {
  $46 = $data;
  _free($46);
  $0 = -1;
  $56 = $0;
  STACKTOP = sp;return ($56|0);
 }
 $47 = $2;
 (_fflush(($47|0))|0);
 $48 = $data;
 _free($48);
 $49 = $3;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $i;
  $52 = (7680 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  HEAP32[$55>>2] = $54;
 }
 $0 = 0;
 $56 = $0;
 STACKTOP = sp;return ($56|0);
}
function _pw_check($b,$s,$info) {
 $b = $b|0;
 $s = $s|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $res = 0, $title = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $title = sp + 24|0;
 $1 = $b;
 $2 = $s;
 $3 = $info;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = (7680 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 10;
   break;
  }
  $8 = $i;
  $9 = (7680 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = $2;
  $15 = (FUNCTION_TABLE_iiii[$12 & 255]($13,$title,$14)|0);
  $res = $15;
  $16 = $res;
  $17 = ($16|0)>(0);
  $18 = $res;
  if ($17) {
   label = 4;
   break;
  }
  $19 = ($18|0)==(0);
  if ($19) {
   label = 6;
   break;
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 if ((label|0) == 4) {
  $0 = $18;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 6) {
  $20 = $3;
  $21 = ($20|0)!=(0|0);
  if ($21) {
   $22 = $3;
   dest=$22; src=$title; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $23 = $3;
   $24 = ((($23)) + 64|0);
   $25 = $i;
   $26 = (7680 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   (_strncpy(($24|0),($28|0),64)|0);
  }
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _pw_read_title($b,$t,$s) {
 $b = $b|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b;
 $1 = $t;
 $2 = $s;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $1;
  HEAP8[$7>>0] = 0;
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = ($8|0)>(20);
 if ($9) {
  $2 = 20;
 }
 $10 = $1;
 $11 = $0;
 $12 = $2;
 _memcpy(($10|0),($11|0),($12|0))|0;
 $13 = $2;
 $14 = $1;
 $15 = (($14) + ($13)|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function _test_ac1d($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(896);
 do {
  if ($5) {
   $6 = $3;
   $7 = (896 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 2|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)!=(172);
   if (!($12)) {
    $13 = $1;
    $14 = ((($13)) + 3|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ($16|0)!=(29);
    if (!($17)) {
     $18 = $1;
     $19 = HEAP8[$18>>0]|0;
     $20 = $19&255;
     $21 = ($20|0)>(127);
     if ($21) {
      $0 = -1;
      break;
     }
     $i = 0;
     while(1) {
      $22 = $i;
      $23 = ($22|0)<(31);
      if (!($23)) {
       break;
      }
      $24 = $i;
      $25 = $24<<3;
      $26 = (10 + ($25))|0;
      $27 = $1;
      $28 = (($27) + ($26)|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = ($30|0)>(15);
      if ($31) {
       label = 11;
       break;
      }
      $32 = $i;
      $33 = (($32) + 1)|0;
      $i = $33;
     }
     if ((label|0) == 11) {
      $0 = -1;
      break;
     }
     $i = 0;
     while(1) {
      $34 = $i;
      $35 = ($34|0)<(128);
      if (!($35)) {
       label = 18;
       break;
      }
      $36 = $i;
      $37 = (768 + ($36))|0;
      $38 = $1;
      $39 = (($38) + ($37)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40&255;
      $42 = ($41|0)>(127);
      if ($42) {
       label = 16;
       break;
      }
      $43 = $i;
      $44 = (($43) + 1)|0;
      $i = $44;
     }
     if ((label|0) == 16) {
      $0 = -1;
      break;
     }
     else if ((label|0) == 18) {
      $45 = $2;
      _pw_read_title(0,$45,0);
      $0 = 0;
      break;
     }
    }
   }
   $0 = -1;
  }
 } while(0);
 $46 = $0;
 STACKTOP = sp;return ($46|0);
}
function _depack_ac1d($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0;
 var $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $note = 0, $npat = 0, $npos = 0, $ntk_byte = 0, $paddr = 0, $psize = 0, $saddr = 0, $size = 0, $ssize = 0, $tmp = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 1072|0;
 $paddr = sp + 528|0;
 $psize = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($paddr|0),0,512)|0;
 _memset(($psize|0),0,512)|0;
 $2 = $0;
 $3 = (_hio_read8($2)|0);
 $npos = $3;
 $4 = $0;
 $5 = (_hio_read8($4)|0);
 $ntk_byte = $5;
 $6 = $0;
 (_hio_read16b($6)|0);
 $7 = $0;
 $8 = (_hio_read32b($7)|0);
 $saddr = $8;
 $9 = $1;
 (_pw_write_zero($9,20)|0);
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(31);
  if (!($11)) {
   break;
  }
  $12 = $1;
  (_pw_write_zero($12,22)|0);
  $13 = $1;
  $14 = $0;
  $15 = (_hio_read16b($14)|0);
  $16 = $15&65535;
  $size = $16;
  $17 = $16&65535;
  _write16b($13,$17);
  $18 = $size;
  $19 = $18<<1;
  $20 = $ssize;
  $21 = (($20) + ($19))|0;
  $ssize = $21;
  $22 = $1;
  $23 = $0;
  $24 = (_hio_read8($23)|0);
  _write8($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_hio_read8($26)|0);
  _write8($25,$27);
  $28 = $1;
  $29 = $0;
  $30 = (_hio_read16b($29)|0);
  _write16b($28,$30);
  $31 = $1;
  $32 = $0;
  $33 = (_hio_read16b($32)|0);
  _write16b($31,$33);
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $npat = 0;
 while(1) {
  $36 = $npat;
  $37 = $36&255;
  $38 = ($37|0)<(128);
  if (!($38)) {
   break;
  }
  $39 = $0;
  $40 = (_hio_read32b($39)|0);
  $41 = $npat;
  $42 = $41&255;
  $43 = (($paddr) + ($42<<2)|0);
  HEAP32[$43>>2] = $40;
  $44 = $npat;
  $45 = $44&255;
  $46 = (($paddr) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   break;
  }
  $49 = $npat;
  $50 = (($49) + 1)<<24>>24;
  $npat = $50;
 }
 $51 = $npat;
 $52 = (($51) + -1)<<24>>24;
 $npat = $52;
 $i = 0;
 while(1) {
  $53 = $i;
  $54 = $npat;
  $55 = $54&255;
  $56 = (($55) - 1)|0;
  $57 = ($53|0)<($56|0);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = (($58) + 1)|0;
  $60 = (($paddr) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $i;
  $63 = (($paddr) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($61) - ($64))|0;
  $66 = $i;
  $67 = (($psize) + ($66<<2)|0);
  HEAP32[$67>>2] = $65;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = $1;
 $71 = $npos;
 _write8($70,$71);
 $72 = $1;
 $73 = $ntk_byte;
 _write8($72,$73);
 $74 = $0;
 (_hio_seek($74,768,0)|0);
 $75 = $1;
 $76 = $0;
 (_pw_move_data($75,$76,128)|0);
 $77 = $1;
 _write32b($77,1294879534);
 $i = 0;
 while(1) {
  $78 = $i;
  $79 = $npat;
  $80 = $79&255;
  $81 = ($78|0)<($80|0);
  $82 = $0;
  if (!($81)) {
   break;
  }
  $83 = $i;
  $84 = (($paddr) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  (_hio_seek($82,$85,0)|0);
  $86 = $0;
  (_hio_read32b($86)|0);
  $87 = $0;
  (_hio_read32b($87)|0);
  $88 = $0;
  (_hio_read32b($88)|0);
  _memset(($tmp|0),0,1024)|0;
  $k = 0;
  while(1) {
   $89 = $k;
   $90 = ($89|0)<(4);
   if (!($90)) {
    break;
   }
   $j = 0;
   while(1) {
    $91 = $j;
    $92 = ($91|0)<(64);
    if (!($92)) {
     break;
    }
    $93 = $j;
    $94 = $93<<4;
    $95 = $k;
    $96 = $95<<2;
    $97 = (($94) + ($96))|0;
    $x = $97;
    $98 = $0;
    $99 = (_hio_read8($98)|0);
    $c1 = $99;
    $100 = $c1;
    $101 = $100&255;
    $102 = $101 & 128;
    $103 = ($102|0)!=(0);
    do {
     if ($103) {
      $104 = $c1;
      $105 = $104&255;
      $106 = $105 & 127;
      $107 = $106&255;
      $c4 = $107;
      $108 = $c4;
      $109 = $108&255;
      $110 = (($109) - 1)|0;
      $111 = $j;
      $112 = (($111) + ($110))|0;
      $j = $112;
     } else {
      $113 = $0;
      $114 = (_hio_read8($113)|0);
      $c2 = $114;
      $115 = $c1;
      $116 = $115&255;
      $117 = $116 & 192;
      $118 = $117 >> 2;
      $119 = $c2;
      $120 = $119&255;
      $121 = $120 >> 4;
      $122 = $121 & 15;
      $123 = $118 | $122;
      $124 = $123&255;
      $ins = $124;
      $125 = $c1;
      $126 = $125&255;
      $127 = $126 & 63;
      $128 = $127&255;
      $note = $128;
      $129 = $note;
      $130 = $129&255;
      $131 = ($130|0)==(63);
      if ($131) {
       $note = -1;
      } else {
       $132 = $note;
       $133 = ($132<<24>>24)!=(0);
       if ($133) {
        $134 = $note;
        $135 = $134&255;
        $136 = (($135) - 11)|0;
        $137 = $136&255;
        $note = $137;
       }
      }
      $138 = $note;
      $139 = $138&255;
      $140 = ($139|0)==(0);
      if ($140) {
       $141 = $note;
       $142 = (($141) + 1)<<24>>24;
       $note = $142;
      }
      $143 = $ins;
      $144 = $143&255;
      $145 = $144 & 240;
      $146 = $145&255;
      $147 = $x;
      $148 = (($tmp) + ($147)|0);
      HEAP8[$148>>0] = $146;
      $149 = $note;
      $150 = $149&255;
      $151 = ($150|0)!=(255);
      if ($151) {
       $152 = $note;
       $153 = $152&255;
       $154 = (7848 + ($153<<1)|0);
       $155 = HEAP8[$154>>0]|0;
       $156 = $155&255;
       $157 = $x;
       $158 = (($tmp) + ($157)|0);
       $159 = HEAP8[$158>>0]|0;
       $160 = $159&255;
       $161 = $160 | $156;
       $162 = $161&255;
       HEAP8[$158>>0] = $162;
       $163 = $note;
       $164 = $163&255;
       $165 = (7848 + ($164<<1)|0);
       $166 = ((($165)) + 1|0);
       $167 = HEAP8[$166>>0]|0;
       $168 = $x;
       $169 = (($168) + 1)|0;
       $170 = (($tmp) + ($169)|0);
       HEAP8[$170>>0] = $167;
      }
      $171 = $c2;
      $172 = $171&255;
      $173 = $172 & 15;
      $174 = ($173|0)==(7);
      if ($174) {
       $175 = $ins;
       $176 = $175&255;
       $177 = $176 << 4;
       $178 = $177 & 240;
       $179 = $178&255;
       $180 = $x;
       $181 = (($180) + 2)|0;
       $182 = (($tmp) + ($181)|0);
       HEAP8[$182>>0] = $179;
       break;
      } else {
       $183 = $0;
       $184 = (_hio_read8($183)|0);
       $c3 = $184;
       $185 = $c2;
       $186 = $185&255;
       $187 = $186 & 15;
       $188 = $187&255;
       $fxt = $188;
       $189 = $c3;
       $fxp = $189;
       $190 = $ins;
       $191 = $190&255;
       $192 = $191 << 4;
       $193 = $192 & 240;
       $194 = $fxt;
       $195 = $194&255;
       $196 = $193 | $195;
       $197 = $196&255;
       $198 = $x;
       $199 = (($198) + 2)|0;
       $200 = (($tmp) + ($199)|0);
       HEAP8[$200>>0] = $197;
       $201 = $fxp;
       $202 = $x;
       $203 = (($202) + 3)|0;
       $204 = (($tmp) + ($203)|0);
       HEAP8[$204>>0] = $201;
       break;
      }
     }
    } while(0);
    $205 = $j;
    $206 = (($205) + 1)|0;
    $j = $206;
   }
   $207 = $k;
   $208 = (($207) + 1)|0;
   $k = $208;
  }
  $209 = $1;
  (_fwrite(($tmp|0),1024,1,($209|0))|0);
  $210 = $i;
  $211 = (($210) + 1)|0;
  $i = $211;
 }
 $212 = $saddr;
 (_hio_seek($82,$212,0)|0);
 $213 = $1;
 $214 = $0;
 $215 = $ssize;
 (_pw_move_data($213,$214,$215)|0);
 STACKTOP = sp;return 0;
}
function _test_di($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $d = 0, $i = 0, $len = 0, $lsize = 0, $numsmp = 0, $or$cond = 0, $or$cond3 = 0, $pat_offs = 0, $psize = 0, $ptab_offs = 0, $smp_offs = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(21);
 do {
  if ($5) {
   $6 = $3;
   $7 = (21 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = (_readmem16b($8)|0);
   $10 = $9&65535;
   $numsmp = $10;
   $11 = $numsmp;
   $12 = ($11|0)>(31);
   if ($12) {
    $0 = -1;
    break;
   }
   $ssize = 0;
   $i = 0;
   while(1) {
    $13 = $i;
    $14 = $numsmp;
    $15 = ($13|0)<($14|0);
    if (!($15)) {
     label = 16;
     break;
    }
    $16 = $1;
    $17 = ((($16)) + 14|0);
    $18 = (_readmem16b($17)|0);
    $19 = $18&65535;
    $20 = $19 << 1;
    $len = $20;
    $21 = $1;
    $22 = ((($21)) + 18|0);
    $23 = (_readmem16b($22)|0);
    $24 = $23&65535;
    $25 = $24 << 1;
    $start = $25;
    $26 = $1;
    $27 = ((($26)) + 20|0);
    $28 = (_readmem16b($27)|0);
    $29 = $28&65535;
    $30 = $29 << 1;
    $lsize = $30;
    $31 = $1;
    $32 = $i;
    $33 = $32<<3;
    $34 = (($31) + ($33)|0);
    $d = $34;
    $35 = $len;
    $36 = ($35|0)>(65535);
    $37 = $start;
    $38 = ($37|0)>(65535);
    $or$cond = $36 | $38;
    $39 = $lsize;
    $40 = ($39|0)>(65535);
    $or$cond3 = $or$cond | $40;
    if ($or$cond3) {
     label = 8;
     break;
    }
    $41 = $start;
    $42 = $lsize;
    $43 = (($41) + ($42))|0;
    $44 = $len;
    $45 = ($43|0)>($44|0);
    if ($45) {
     label = 10;
     break;
    }
    $46 = $d;
    $47 = ((($46)) + 16|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = ($49|0)>(15);
    if ($50) {
     label = 12;
     break;
    }
    $51 = $d;
    $52 = ((($51)) + 17|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)>(64);
    if ($55) {
     label = 14;
     break;
    }
    $56 = $len;
    $57 = $ssize;
    $58 = (($57) + ($56))|0;
    $ssize = $58;
    $59 = $i;
    $60 = (($59) + 1)|0;
    $i = $60;
   }
   if ((label|0) == 8) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 10) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 12) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 14) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 16) {
    $61 = $ssize;
    $62 = ($61|0)<=(2);
    if ($62) {
     $0 = -1;
     break;
    }
    $63 = $numsmp;
    $64 = $63<<3;
    $65 = (($64) + 2)|0;
    $psize = $65;
    $66 = $1;
    $67 = ((($66)) + 2|0);
    $68 = (_readmem32b($67)|0);
    $ptab_offs = $68;
    $69 = $1;
    $70 = ((($69)) + 6|0);
    $71 = (_readmem32b($70)|0);
    $pat_offs = $71;
    $72 = $1;
    $73 = ((($72)) + 10|0);
    $74 = (_readmem32b($73)|0);
    $smp_offs = $74;
    $75 = $pat_offs;
    $76 = $ptab_offs;
    $77 = ($75|0)<=($76|0);
    if (!($77)) {
     $78 = $smp_offs;
     $79 = $ptab_offs;
     $80 = ($78|0)<=($79|0);
     if (!($80)) {
      $81 = $smp_offs;
      $82 = $pat_offs;
      $83 = ($81|0)<=($82|0);
      if (!($83)) {
       $84 = $pat_offs;
       $85 = $ptab_offs;
       $86 = (($84) - ($85))|0;
       $87 = ($86|0)>(128);
       if ($87) {
        $0 = -1;
        break;
       }
       $88 = $ptab_offs;
       $89 = $psize;
       $90 = ($88|0)<($89|0);
       if ($90) {
        $0 = -1;
        break;
       }
       $91 = $3;
       $92 = $pat_offs;
       $93 = (($92) - 1)|0;
       $94 = ($91|0)<($93|0);
       if ($94) {
        $95 = $pat_offs;
        $96 = (($95) - 1)|0;
        $97 = $3;
        $98 = (($96) - ($97))|0;
        $0 = $98;
        break;
       }
       $99 = $ptab_offs;
       $i = $99;
       while(1) {
        $100 = $i;
        $101 = $pat_offs;
        $102 = (($101) - 1)|0;
        $103 = ($100|0)<($102|0);
        if (!($103)) {
         break;
        }
        $104 = $i;
        $105 = $1;
        $106 = (($105) + ($104)|0);
        $107 = HEAP8[$106>>0]|0;
        $108 = $107&255;
        $109 = ($108|0)>(128);
        if ($109) {
         label = 31;
         break;
        }
        $110 = $i;
        $111 = (($110) + 1)|0;
        $i = $111;
       }
       if ((label|0) == 31) {
        $0 = -1;
        break;
       }
       $112 = $pat_offs;
       $113 = (($112) - 1)|0;
       $114 = $1;
       $115 = (($114) + ($113)|0);
       $116 = HEAP8[$115>>0]|0;
       $117 = $116&255;
       $118 = ($117|0)!=(255);
       if ($118) {
        $0 = -1;
        break;
       }
       $119 = $smp_offs;
       $120 = ($119|0)>(65535);
       if ($120) {
        $0 = -1;
        break;
       } else {
        $121 = $2;
        _pw_read_title(0,$121,0);
        $0 = 0;
        break;
       }
      }
     }
    }
    $0 = -1;
    break;
   }
  }
 } while(0);
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function _depack_di($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0;
 var $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $k = 0, $max = 0, $nins = 0, $note = 0, $npat = 0, $paddr = 0, $pos = 0, $ptable = 0, $ptk_tab = 0, $seq_offs = 0, $size = 0, $smp_offs = 0, $ssize = 0, $tmp = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptk_tab = sp + 483|0;
 $ptable = sp + 352|0;
 $paddr = sp + 40|0;
 $tmp = sp + 296|0;
 $0 = $in;
 $1 = $out;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$ptk_tab>>0]=0|0;HEAP8[$ptk_tab+1>>0]=0|0;HEAP8[$ptk_tab+2>>0]=0|0;HEAP8[$ptk_tab+3>>0]=0|0;HEAP8[$ptk_tab+4>>0]=0|0;
 dest=$paddr; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 $4 = (_hio_read16b($3)|0);
 $5 = $4&255;
 $nins = $5;
 $6 = $0;
 $7 = (_hio_read32b($6)|0);
 $seq_offs = $7;
 $8 = $0;
 (_hio_read32b($8)|0);
 $9 = $0;
 $10 = (_hio_read32b($9)|0);
 $smp_offs = $10;
 $ssize = 0;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $nins;
  $13 = $12&255;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  (_pw_write_zero($15,22)|0);
  $16 = $1;
  $17 = $0;
  $18 = (_hio_read16b($17)|0);
  $19 = $18&65535;
  $size = $19;
  $20 = $19&65535;
  _write16b($16,$20);
  $21 = $size;
  $22 = $21<<1;
  $23 = $ssize;
  $24 = (($23) + ($22))|0;
  $ssize = $24;
  $25 = $1;
  $26 = $0;
  $27 = (_hio_read8($26)|0);
  _write8($25,$27);
  $28 = $1;
  $29 = $0;
  $30 = (_hio_read8($29)|0);
  _write8($28,$30);
  $31 = $1;
  $32 = $0;
  $33 = (_hio_read16b($32)|0);
  _write16b($31,$33);
  $34 = $1;
  $35 = $0;
  $36 = (_hio_read16b($35)|0);
  _write16b($34,$36);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 dest=$tmp; stop=dest+50|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $39 = $nins;
 $40 = $39&255;
 $i = $40;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(31);
  if (!($42)) {
   break;
  }
  $43 = $1;
  (_fwrite(($tmp|0),30,1,($43|0))|0);
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $0;
 $47 = (_hio_tell($46)|0);
 $pos = $47;
 $48 = $0;
 $49 = $seq_offs;
 (_hio_seek($48,$49,0)|0);
 $i = 0;
 while(1) {
  $50 = $0;
  $51 = (_hio_read8($50)|0);
  $c1 = $51;
  $52 = $c1;
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
  $55 = (($ptable) + ($53)|0);
  HEAP8[$55>>0] = $52;
  $56 = $c1;
  $57 = $56&255;
  $58 = ($57|0)!=(255);
  if (!($58)) {
   break;
  }
 }
 $59 = $i;
 $60 = (($59) - 1)|0;
 $61 = (($ptable) + ($60)|0);
 HEAP8[$61>>0] = 0;
 $62 = $1;
 $63 = $i;
 $64 = (($63) - 1)|0;
 $65 = $64&255;
 $npat = $65;
 _write8($62,$65);
 $66 = $1;
 _write8($66,127);
 $i = 0;
 $max = 0;
 while(1) {
  $67 = $i;
  $68 = ($67|0)<(128);
  $69 = $1;
  if (!($68)) {
   break;
  }
  $70 = $i;
  $71 = (($ptable) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  _write8($69,$72);
  $73 = $i;
  $74 = (($ptable) + ($73)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $max;
  $78 = $77&255;
  $79 = ($76|0)>($78|0);
  if ($79) {
   $80 = $i;
   $81 = (($ptable) + ($80)|0);
   $82 = HEAP8[$81>>0]|0;
   $max = $82;
  }
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 _write32b($69,1294879534);
 $85 = $0;
 $86 = $pos;
 (_hio_seek($85,$86,0)|0);
 $i = 0;
 while(1) {
  $87 = $i;
  $88 = $max;
  $89 = $88&255;
  $90 = ($87|0)<=($89|0);
  if (!($90)) {
   break;
  }
  $91 = $0;
  $92 = (_hio_read16b($91)|0);
  $93 = $i;
  $94 = (($paddr) + ($93<<1)|0);
  HEAP16[$94>>1] = $92;
  $95 = $i;
  $96 = (($95) + 1)|0;
  $i = $96;
 }
 $i = 0;
 while(1) {
  $97 = $i;
  $98 = $max;
  $99 = $98&255;
  $100 = ($97|0)<=($99|0);
  $101 = $0;
  if (!($100)) {
   break;
  }
  $102 = $i;
  $103 = (($paddr) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  (_hio_seek($101,$105,0)|0);
  $k = 0;
  while(1) {
   $106 = $k;
   $107 = ($106|0)<(256);
   if (!($107)) {
    break;
   }
   ;HEAP8[$ptk_tab>>0]=0|0;HEAP8[$ptk_tab+1>>0]=0|0;HEAP8[$ptk_tab+2>>0]=0|0;HEAP8[$ptk_tab+3>>0]=0|0;HEAP8[$ptk_tab+4>>0]=0|0;
   $108 = $0;
   $109 = (_hio_read8($108)|0);
   $c1 = $109;
   $110 = $c1;
   $111 = $110&255;
   $112 = $111 & 128;
   $113 = ($112|0)==(0);
   do {
    if ($113) {
     $114 = $0;
     $115 = (_hio_read8($114)|0);
     $c2 = $115;
     $116 = $c1;
     $117 = $116&255;
     $118 = $117 << 4;
     $119 = $118 & 48;
     $120 = $c2;
     $121 = $120&255;
     $122 = $121 >> 4;
     $123 = $122 & 15;
     $124 = $119 | $123;
     $125 = $124&255;
     $note = $125;
     $126 = $note;
     $127 = $126&255;
     $128 = (7848 + ($127<<1)|0);
     $129 = HEAP8[$128>>0]|0;
     HEAP8[$ptk_tab>>0] = $129;
     $130 = $note;
     $131 = $130&255;
     $132 = (7848 + ($131<<1)|0);
     $133 = ((($132)) + 1|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = ((($ptk_tab)) + 1|0);
     HEAP8[$135>>0] = $134;
     $136 = $c1;
     $137 = $136&255;
     $138 = $137 >> 2;
     $139 = $138 & 31;
     $140 = $139&255;
     $ins = $140;
     $141 = $ins;
     $142 = $141&255;
     $143 = $142 & 240;
     $144 = HEAP8[$ptk_tab>>0]|0;
     $145 = $144&255;
     $146 = $145 | $143;
     $147 = $146&255;
     HEAP8[$ptk_tab>>0] = $147;
     $148 = $ins;
     $149 = $148&255;
     $150 = $149 << 4;
     $151 = $150 & 240;
     $152 = $151&255;
     $153 = ((($ptk_tab)) + 2|0);
     HEAP8[$153>>0] = $152;
     $154 = $c2;
     $155 = $154&255;
     $156 = $155 & 15;
     $157 = $156&255;
     $fxt = $157;
     $158 = $fxt;
     $159 = $158&255;
     $160 = ((($ptk_tab)) + 2|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = $162 | $159;
     $164 = $163&255;
     HEAP8[$160>>0] = $164;
     $fxp = 0;
     $165 = $fxp;
     $166 = ((($ptk_tab)) + 3|0);
     HEAP8[$166>>0] = $165;
     $167 = $1;
     (_fwrite(($ptk_tab|0),4,1,($167|0))|0);
    } else {
     $168 = $c1;
     $169 = $168&255;
     $170 = ($169|0)==(255);
     if ($170) {
      ;HEAP8[$ptk_tab>>0]=0|0;HEAP8[$ptk_tab+1>>0]=0|0;HEAP8[$ptk_tab+2>>0]=0|0;HEAP8[$ptk_tab+3>>0]=0|0;HEAP8[$ptk_tab+4>>0]=0|0;
      $171 = $1;
      (_fwrite(($ptk_tab|0),4,1,($171|0))|0);
      break;
     } else {
      $172 = $0;
      $173 = (_hio_read8($172)|0);
      $c2 = $173;
      $174 = $0;
      $175 = (_hio_read8($174)|0);
      $c3 = $175;
      $176 = $c1;
      $177 = $176&255;
      $178 = $177 << 4;
      $179 = $178 & 48;
      $180 = $c2;
      $181 = $180&255;
      $182 = $181 >> 4;
      $183 = $182 & 15;
      $184 = $179 | $183;
      $185 = $184&255;
      $note = $185;
      $186 = $note;
      $187 = $186&255;
      $188 = (7848 + ($187<<1)|0);
      $189 = HEAP8[$188>>0]|0;
      HEAP8[$ptk_tab>>0] = $189;
      $190 = $note;
      $191 = $190&255;
      $192 = (7848 + ($191<<1)|0);
      $193 = ((($192)) + 1|0);
      $194 = HEAP8[$193>>0]|0;
      $195 = ((($ptk_tab)) + 1|0);
      HEAP8[$195>>0] = $194;
      $196 = $c1;
      $197 = $196&255;
      $198 = $197 >> 2;
      $199 = $198 & 31;
      $200 = $199&255;
      $ins = $200;
      $201 = $ins;
      $202 = $201&255;
      $203 = $202 & 240;
      $204 = HEAP8[$ptk_tab>>0]|0;
      $205 = $204&255;
      $206 = $205 | $203;
      $207 = $206&255;
      HEAP8[$ptk_tab>>0] = $207;
      $208 = $ins;
      $209 = $208&255;
      $210 = $209 << 4;
      $211 = $210 & 240;
      $212 = $211&255;
      $213 = ((($ptk_tab)) + 2|0);
      HEAP8[$213>>0] = $212;
      $214 = $c2;
      $215 = $214&255;
      $216 = $215 & 15;
      $217 = $216&255;
      $fxt = $217;
      $218 = $fxt;
      $219 = $218&255;
      $220 = ((($ptk_tab)) + 2|0);
      $221 = HEAP8[$220>>0]|0;
      $222 = $221&255;
      $223 = $222 | $219;
      $224 = $223&255;
      HEAP8[$220>>0] = $224;
      $225 = $c3;
      $fxp = $225;
      $226 = $fxp;
      $227 = ((($ptk_tab)) + 3|0);
      HEAP8[$227>>0] = $226;
      $228 = $1;
      (_fwrite(($ptk_tab|0),4,1,($228|0))|0);
      break;
     }
    }
   } while(0);
   $229 = $k;
   $230 = (($229) + 1)|0;
   $k = $230;
  }
  $231 = $i;
  $232 = (($231) + 1)|0;
  $i = $232;
 }
 $233 = $smp_offs;
 (_hio_seek($101,$233,0)|0);
 $234 = $1;
 $235 = $0;
 $236 = $ssize;
 (_pw_move_data($234,$235,$236)|0);
 STACKTOP = sp;return 0;
}
function _test_eu($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $i = 0, $len = 0, $lsize = 0, $max_pat = 0, $max_trk = 0, $min_trk = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $pat = 0, $size = 0, $smp_offs = 0, $start = 0, $trk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 $8 = $1;
 $9 = ((($8)) + 950|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $len = $11;
 $12 = $len;
 $13 = ($12|0)==(0);
 $14 = $len;
 $15 = ($14|0)>(127);
 $or$cond = $13 | $15;
 if ($or$cond) {
  $0 = -1;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = ($16|0)<(31);
  $18 = $1;
  if (!($17)) {
   label = 15;
   break;
  }
  $19 = $i;
  $20 = ($19*30)|0;
  $21 = (($18) + ($20)|0);
  $d = $21;
  $22 = $d;
  $23 = ((($22)) + 42|0);
  $24 = (_readmem16b($23)|0);
  $25 = $24&65535;
  $26 = $25 << 1;
  $size = $26;
  $27 = $d;
  $28 = ((($27)) + 46|0);
  $29 = (_readmem16b($28)|0);
  $30 = $29&65535;
  $31 = $30 << 1;
  $start = $31;
  $32 = $d;
  $33 = ((($32)) + 48|0);
  $34 = (_readmem16b($33)|0);
  $35 = $34&65535;
  $36 = $35 << 1;
  $lsize = $36;
  $37 = $size;
  $38 = ($37|0)>(65535);
  $39 = $start;
  $40 = ($39|0)>(65535);
  $or$cond3 = $38 | $40;
  $41 = $lsize;
  $42 = ($41|0)>(65535);
  $or$cond5 = $or$cond3 | $42;
  if ($or$cond5) {
   label = 8;
   break;
  }
  $43 = $start;
  $44 = $lsize;
  $45 = (($43) + ($44))|0;
  $46 = $size;
  $47 = (($46) + 2)|0;
  $48 = ($45|0)>($47|0);
  if ($48) {
   label = 10;
   break;
  }
  $49 = $d;
  $50 = ((($49)) + 44|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)>(15);
  if ($53) {
   label = 13;
   break;
  }
  $54 = $d;
  $55 = ((($54)) + 45|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = ($57|0)>(64);
  if ($58) {
   label = 13;
   break;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 else if ((label|0) == 15) {
  $61 = ((($18)) + 1080|0);
  $62 = (_readmem32b($61)|0);
  $smp_offs = $62;
  $63 = $smp_offs;
  $64 = ($63|0)<(1084);
  if ($64) {
   $0 = -1;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  $max_pat = 0;
  $i = 0;
  while(1) {
   $65 = $i;
   $66 = $len;
   $67 = ($65|0)<($66|0);
   if (!($67)) {
    break;
   }
   $68 = $i;
   $69 = (952 + ($68))|0;
   $70 = $1;
   $71 = (($70) + ($69)|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $pat = $73;
   $74 = $pat;
   $75 = ($74|0)>(127);
   if ($75) {
    label = 20;
    break;
   }
   $76 = $pat;
   $77 = $max_pat;
   $78 = ($76|0)>($77|0);
   if ($78) {
    $79 = $pat;
    $max_pat = $79;
   }
   $80 = $i;
   $81 = (($80) + 1)|0;
   $i = $81;
  }
  if ((label|0) == 20) {
   $0 = -1;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  while(1) {
   $82 = $i;
   $83 = ($82|0)<(128);
   if (!($83)) {
    break;
   }
   $84 = $i;
   $85 = (952 + ($84))|0;
   $86 = $1;
   $87 = (($86) + ($85)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = ($89|0)!=(0);
   if ($90) {
    label = 26;
    break;
   }
   $91 = $i;
   $92 = (($91) + 1)|0;
   $i = $92;
  }
  if ((label|0) == 26) {
   $0 = -1;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  $93 = $max_pat;
  $94 = (($93) + 1)|0;
  $max_pat = $94;
  $max_trk = 0;
  $min_trk = 999999;
  $95 = $3;
  $96 = $max_pat;
  $97 = $96<<2;
  $98 = $97<<1;
  $99 = (($98) + 1085)|0;
  $100 = ($95|0)<($99|0);
  if ($100) {
   $101 = $max_pat;
   $102 = $101<<2;
   $103 = $102<<1;
   $104 = (($103) + 1085)|0;
   $105 = $3;
   $106 = (($104) - ($105))|0;
   $0 = $106;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  $i = 0;
  while(1) {
   $107 = $i;
   $108 = $max_pat;
   $109 = $108<<2;
   $110 = ($107|0)<($109|0);
   if (!($110)) {
    break;
   }
   $111 = $1;
   $112 = $i;
   $113 = $112<<1;
   $114 = (($111) + ($113)|0);
   $115 = ((($114)) + 1084|0);
   $116 = (_readmem16b($115)|0);
   $117 = $116&65535;
   $trk = $117;
   $118 = $trk;
   $119 = $smp_offs;
   $120 = ($118|0)>($119|0);
   $121 = $trk;
   $122 = ($121|0)<(1084);
   $or$cond7 = $120 | $122;
   if ($or$cond7) {
    label = 33;
    break;
   }
   $123 = $trk;
   $124 = $max_trk;
   $125 = ($123|0)>($124|0);
   if ($125) {
    $126 = $trk;
    $max_trk = $126;
   }
   $127 = $trk;
   $128 = $min_trk;
   $129 = ($127|0)<($128|0);
   if ($129) {
    $130 = $trk;
    $min_trk = $130;
   }
   $131 = $i;
   $132 = (($131) + 1)|0;
   $i = $132;
  }
  if ((label|0) == 33) {
   $0 = -1;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  $133 = $min_trk;
  $i = $133;
  L62: while(1) {
   $134 = $i;
   $135 = $max_trk;
   $136 = ($134|0)<($135|0);
   if (!($136)) {
    label = 54;
    break;
   }
   $137 = $i;
   $138 = $1;
   $139 = (($138) + ($137)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = $141 & 192;
   $143 = ($142|0)==(192);
   do {
    if (!($143)) {
     $144 = $i;
     $145 = $1;
     $146 = (($145) + ($144)|0);
     $147 = HEAP8[$146>>0]|0;
     $148 = $147&255;
     $149 = $148 & 192;
     $150 = ($149|0)==(128);
     $151 = $i;
     if ($150) {
      $152 = (($151) + 2)|0;
      $i = $152;
      break;
     }
     $153 = $1;
     $154 = (($153) + ($151)|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = $156 & 192;
     $158 = ($157|0)==(64);
     $159 = $i;
     $160 = $1;
     $161 = (($160) + ($159)|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = $162&255;
     if ($158) {
      $164 = $163 & 63;
      $165 = ($164|0)==(0);
      if ($165) {
       $166 = $i;
       $167 = (($166) + 1)|0;
       $168 = $1;
       $169 = (($168) + ($167)|0);
       $170 = HEAP8[$169>>0]|0;
       $171 = $170&255;
       $172 = ($171|0)==(0);
       if ($172) {
        label = 47;
        break L62;
       }
      }
      $173 = $i;
      $174 = (($173) + 1)|0;
      $i = $174;
      break;
     } else {
      $175 = $163 & 192;
      $176 = ($175|0)==(0);
      if (!($176)) {
       break;
      }
      $177 = $i;
      $178 = $1;
      $179 = (($178) + ($177)|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180&255;
      $182 = ($181|0)>(19);
      if ($182) {
       label = 51;
       break L62;
      }
      $183 = $i;
      $184 = (($183) + 3)|0;
      $i = $184;
      break;
     }
    }
   } while(0);
   $185 = $i;
   $186 = (($185) + 1)|0;
   $i = $186;
  }
  if ((label|0) == 47) {
   $0 = -1;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  else if ((label|0) == 51) {
   $0 = -1;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
  else if ((label|0) == 54) {
   $187 = $1;
   $188 = $2;
   _pw_read_title($187,$188,20);
   $0 = 0;
   $189 = $0;
   STACKTOP = sp;return ($189|0);
  }
 }
 return (0)|0;
}
function _depack_eu($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $i = 0, $j = 0, $k = 0, $npat = 0, $smp_addr = 0, $ssize = 0, $tmp = 0, $trk_addr = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2088|0;
 $trk_addr = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $0;
 (_hio_read($tmp,1080,1,$2)|0);
 $3 = $1;
 (_fwrite(($tmp|0),1080,1,($3|0))|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ($6*30)|0;
  $8 = (($tmp) + ($7)|0);
  $9 = ((($8)) + 42|0);
  $10 = (_readmem16b($9)|0);
  $11 = $10&65535;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $i = 0;
 $npat = 0;
 while(1) {
  $17 = $i;
  $18 = ($17|0)<(128);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = (952 + ($19))|0;
  $21 = (($tmp) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $npat;
  $25 = ($23|0)>($24|0);
  if ($25) {
   $26 = $i;
   $27 = (952 + ($26))|0;
   $28 = (($tmp) + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $npat = $30;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $npat;
 $34 = (($33) + 1)|0;
 $npat = $34;
 $35 = $1;
 _write32b($35,1294879534);
 $36 = $0;
 $37 = (_hio_read32b($36)|0);
 $smp_addr = $37;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $npat;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $j = 0;
  while(1) {
   $41 = $j;
   $42 = ($41|0)<(4);
   if (!($42)) {
    break;
   }
   $43 = $0;
   $44 = (_hio_read16b($43)|0);
   $45 = $44&65535;
   $46 = $j;
   $47 = $i;
   $48 = (($trk_addr) + ($47<<4)|0);
   $49 = (($48) + ($46<<2)|0);
   HEAP32[$49>>2] = $45;
   $50 = $j;
   $51 = (($50) + 1)|0;
   $j = $51;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $i = 0;
 while(1) {
  $54 = $i;
  $55 = $npat;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $57 = $j;
   $58 = ($57|0)<(4);
   if (!($58)) {
    break;
   }
   $59 = $0;
   $60 = $j;
   $61 = $i;
   $62 = (($trk_addr) + ($61<<4)|0);
   $63 = (($62) + ($60<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   (_hio_seek($59,$64,0)|0);
   $k = 0;
   while(1) {
    $65 = $k;
    $66 = ($65|0)<(64);
    if (!($66)) {
     break;
    }
    $67 = $k;
    $68 = $67<<4;
    $69 = $j;
    $70 = $69<<2;
    $71 = (($68) + ($70))|0;
    $72 = (($tmp) + ($71)|0);
    $x = $72;
    $73 = $0;
    $74 = (_hio_read8($73)|0);
    $c1 = $74;
    $75 = $c1;
    $76 = $75&255;
    $77 = $76 & 192;
    $78 = ($77|0)==(0);
    $79 = $c1;
    do {
     if ($78) {
      $80 = $x;
      $81 = ((($80)) + 1|0);
      $x = $81;
      HEAP8[$80>>0] = $79;
      $82 = $0;
      $83 = (_hio_read8($82)|0);
      $84 = $x;
      $85 = ((($84)) + 1|0);
      $x = $85;
      HEAP8[$84>>0] = $83;
      $86 = $0;
      $87 = (_hio_read8($86)|0);
      $88 = $x;
      $89 = ((($88)) + 1|0);
      $x = $89;
      HEAP8[$88>>0] = $87;
      $90 = $0;
      $91 = (_hio_read8($90)|0);
      $92 = $x;
      $93 = ((($92)) + 1|0);
      $x = $93;
      HEAP8[$92>>0] = $91;
     } else {
      $94 = $79&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(192);
      $97 = $c1;
      $98 = $97&255;
      if ($96) {
       $99 = $98 & 63;
       $100 = $k;
       $101 = (($100) + ($99))|0;
       $k = $101;
       break;
      }
      $102 = $98 & 192;
      $103 = ($102|0)==(64);
      if ($103) {
       $104 = $x;
       $105 = ((($104)) + 2|0);
       $x = $105;
       $106 = $c1;
       $107 = $106&255;
       $108 = $107 & 15;
       $109 = $108&255;
       $110 = $x;
       $111 = ((($110)) + 1|0);
       $x = $111;
       HEAP8[$110>>0] = $109;
       $112 = $0;
       $113 = (_hio_read8($112)|0);
       $114 = $x;
       $115 = ((($114)) + 1|0);
       $x = $115;
       HEAP8[$114>>0] = $113;
       break;
      }
      $116 = $c1;
      $117 = $116&255;
      $118 = $117 & 192;
      $119 = ($118|0)==(128);
      if ($119) {
       $120 = $0;
       $121 = (_hio_read8($120)|0);
       $122 = $x;
       $123 = ((($122)) + 1|0);
       $x = $123;
       HEAP8[$122>>0] = $121;
       $124 = $0;
       $125 = (_hio_read8($124)|0);
       $126 = $x;
       $127 = ((($126)) + 1|0);
       $x = $127;
       HEAP8[$126>>0] = $125;
       $128 = $c1;
       $129 = $128&255;
       $130 = $129 << 4;
       $131 = $130 & 240;
       $132 = $131&255;
       $133 = $x;
       $134 = ((($133)) + 1|0);
       $x = $134;
       HEAP8[$133>>0] = $132;
      }
     }
    } while(0);
    $135 = $k;
    $136 = (($135) + 1)|0;
    $k = $136;
   }
   $137 = $j;
   $138 = (($137) + 1)|0;
   $j = $138;
  }
  $139 = $1;
  (_fwrite(($tmp|0),1024,1,($139|0))|0);
  $140 = $i;
  $141 = (($140) + 1)|0;
  $i = $141;
 }
 $142 = $0;
 $143 = $smp_addr;
 (_hio_seek($142,$143,0)|0);
 $144 = $1;
 $145 = $0;
 $146 = $ssize;
 (_pw_move_data($144,$145,$146)|0);
 STACKTOP = sp;return 0;
}
function _test_fcm($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(285);
 do {
  if ($5) {
   $6 = $3;
   $7 = (285 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($10|0)!=(70);
   if (!($11)) {
    $12 = $1;
    $13 = ((($12)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = ($15|0)!=(67);
    if (!($16)) {
     $17 = $1;
     $18 = ((($17)) + 2|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19&255;
     $21 = ($20|0)!=(45);
     if (!($21)) {
      $22 = $1;
      $23 = ((($22)) + 3|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = $24&255;
      $26 = ($25|0)!=(77);
      if (!($26)) {
       $27 = $1;
       $28 = ((($27)) + 4|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = ($30|0)!=(1);
       if ($31) {
        $0 = -1;
        break;
       }
       $32 = $1;
       $33 = ((($32)) + 5|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = ($35|0)!=(0);
       if ($36) {
        $0 = -1;
        break;
       }
       $j = 0;
       while(1) {
        $37 = $j;
        $38 = ($37|0)<(31);
        if (!($38)) {
         label = 17;
         break;
        }
        $39 = $j;
        $40 = $39<<3;
        $41 = (37 + ($40))|0;
        $42 = $1;
        $43 = (($42) + ($41)|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = $44&255;
        $46 = ($45|0)>(64);
        if ($46) {
         label = 15;
         break;
        }
        $47 = $j;
        $48 = (($47) + 1)|0;
        $j = $48;
       }
       if ((label|0) == 15) {
        $0 = -1;
        break;
       }
       else if ((label|0) == 17) {
        $49 = $1;
        $50 = ((($49)) + 10|0);
        $51 = $2;
        _pw_read_title($50,$51,20);
        $0 = 0;
        break;
       }
      }
     }
    }
   }
   $0 = -1;
  }
 } while(0);
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _depack_fcm($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $c1 = 0, $i = 0, $pat_max = 0, $pat_pos = 0, $ptable = 0, $size = 0, $ssize = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_hio_read32b($2)|0);
 $3 = $0;
 (_hio_read16b($3)|0);
 $4 = $0;
 (_hio_read32b($4)|0);
 $5 = $1;
 $6 = $0;
 (_pw_move_data($5,$6,20)|0);
 $7 = $0;
 (_hio_read32b($7)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   break;
  }
  $10 = $1;
  (_pw_write_zero($10,22)|0);
  $11 = $1;
  $12 = $0;
  $13 = (_hio_read16b($12)|0);
  $14 = $13&65535;
  $size = $14;
  $15 = $14&65535;
  _write16b($11,$15);
  $16 = $size;
  $17 = $16<<1;
  $18 = $ssize;
  $19 = (($18) + ($17))|0;
  $ssize = $19;
  $20 = $1;
  $21 = $0;
  $22 = (_hio_read8($21)|0);
  _write8($20,$22);
  $23 = $1;
  $24 = $0;
  $25 = (_hio_read8($24)|0);
  _write8($23,$25);
  $26 = $1;
  $27 = $0;
  $28 = (_hio_read16b($27)|0);
  _write16b($26,$28);
  $29 = $0;
  $30 = (_hio_read16b($29)|0);
  $31 = $30&65535;
  $size = $31;
  $32 = $size;
  $33 = ($32|0)==(0);
  $$ = $33 ? 1 : $31;
  $size = $$;
  $34 = $1;
  $35 = $size;
  $36 = $35&65535;
  _write16b($34,$36);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $39 = $0;
 (_hio_read32b($39)|0);
 $40 = $1;
 $41 = $0;
 $42 = (_hio_read8($41)|0);
 $pat_pos = $42;
 _write8($40,$42);
 $43 = $1;
 $44 = $0;
 $45 = (_hio_read8($44)|0);
 _write8($43,$45);
 $46 = $0;
 (_hio_read32b($46)|0);
 $i = 0;
 $pat_max = 0;
 while(1) {
  $47 = $i;
  $48 = $pat_pos;
  $49 = $48&255;
  $50 = ($47|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $1;
  $52 = $0;
  $53 = (_hio_read8($52)|0);
  $c1 = $53;
  _write8($51,$53);
  $54 = $c1;
  $55 = $54&255;
  $56 = $pat_max;
  $57 = $56&255;
  $58 = ($55|0)>($57|0);
  if ($58) {
   $59 = $c1;
   $pat_max = $59;
  }
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 while(1) {
  $62 = $i;
  $63 = ($62|0)<(128);
  $64 = $1;
  if (!($63)) {
   break;
  }
  _write8($64,0);
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 _write32b($64,1294879534);
 $67 = $0;
 (_hio_read32b($67)|0);
 $i = 0;
 while(1) {
  $68 = $i;
  $69 = $pat_max;
  $70 = $69&255;
  $71 = ($68|0)<=($70|0);
  if (!($71)) {
   break;
  }
  $72 = $1;
  $73 = $0;
  (_pw_move_data($72,$73,1024)|0);
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 $76 = $0;
 (_hio_read32b($76)|0);
 $77 = $1;
 $78 = $0;
 $79 = $ssize;
 (_pw_move_data($77,$78,$79)|0);
 STACKTOP = sp;return 0;
}
function _test_fuchs($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $d = 0, $hdr_ssize = 0, $i = 0, $len = 0, $or$cond = 0, $pat = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $1;
 $5 = ((($4)) + 192|0);
 $6 = (_readmem32b($5)|0);
 $7 = ($6|0)!=(1397706311);
 if ($7) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $8 = $1;
 $9 = ((($8)) + 10|0);
 $10 = (_readmem32b($9)|0);
 $hdr_ssize = $10;
 $11 = $hdr_ssize;
 $12 = ($11|0)<=(2);
 $13 = $hdr_ssize;
 $14 = ($13|0)>=(1048560);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $ssize = 0;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(16);
  if (!($16)) {
   label = 12;
   break;
  }
  $17 = $1;
  $18 = $i;
  $19 = $18<<1;
  $20 = (($17) + ($19)|0);
  $d = $20;
  $21 = $d;
  $22 = ((($21)) + 14|0);
  $23 = (_readmem16b($22)|0);
  $24 = $23&65535;
  $len = $24;
  $25 = $d;
  $26 = ((($25)) + 78|0);
  $27 = (_readmem16b($26)|0);
  $28 = $27&65535;
  $start = $28;
  $29 = $d;
  $30 = ((($29)) + 46|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)>(64);
  if ($33) {
   label = 8;
   break;
  }
  $34 = $len;
  $35 = $start;
  $36 = ($34|0)<($35|0);
  if ($36) {
   label = 10;
   break;
  }
  $37 = $len;
  $38 = $ssize;
  $39 = (($38) + ($37))|0;
  $ssize = $39;
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 else if ((label|0) == 12) {
  $42 = $ssize;
  $43 = ($42|0)<=(2);
  if (!($43)) {
   $44 = $ssize;
   $45 = $hdr_ssize;
   $46 = ($44|0)>($45|0);
   if (!($46)) {
    $i = 0;
    while(1) {
     $47 = $i;
     $48 = ($47|0)<(40);
     if (!($48)) {
      label = 20;
      break;
     }
     $49 = $i;
     $50 = $49<<1;
     $51 = (($50) + 113)|0;
     $52 = $1;
     $53 = (($52) + ($51)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $pat = $55;
     $56 = $pat;
     $57 = ($56|0)>(40);
     if ($57) {
      label = 18;
      break;
     }
     $58 = $i;
     $59 = (($58) + 1)|0;
     $i = $59;
    }
    if ((label|0) == 18) {
     $0 = -1;
     $61 = $0;
     STACKTOP = sp;return ($61|0);
    }
    else if ((label|0) == 20) {
     $60 = $2;
     _pw_read_title(0,$60,0);
     $0 = 0;
     $61 = $0;
     STACKTOP = sp;return ($61|0);
    }
   }
  }
  $0 = -1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _depack_fuchs($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $loop_size = 0, $loop_start = 0, $max_pat = 0;
 var $or$cond = 0, $pat = 0, $pat_size = 0, $smp_len = 0, $tmp = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $smp_len = sp + 80|0;
 $loop_start = sp + 16|0;
 $1 = $in;
 $2 = $out;
 dest=$smp_len; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$loop_start; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = $2;
 (_pw_write_zero($3,1080)|0);
 $4 = $2;
 (_fseek(($4|0),0,0)|0);
 $5 = $2;
 $6 = $1;
 (_pw_move_data($5,$6,10)|0);
 $7 = $1;
 (_hio_read32b($7)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(16);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $i;
  $12 = ($11*30)|0;
  $13 = (42 + ($12))|0;
  (_fseek(($10|0),($13|0),0)|0);
  $14 = $1;
  $15 = (_hio_read16b($14)|0);
  $16 = $15&65535;
  $17 = $i;
  $18 = (($smp_len) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $2;
  $20 = $i;
  $21 = (($smp_len) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22|0) / 2)&-1;
  $24 = $23&65535;
  _write16b($19,$24);
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = ($27|0)<(16);
  if (!($28)) {
   break;
  }
  $29 = $2;
  $30 = $i;
  $31 = ($30*30)|0;
  $32 = (45 + ($31))|0;
  (_fseek(($29|0),($32|0),0)|0);
  $33 = $1;
  (_hio_seek($33,1,1)|0);
  $34 = $2;
  $35 = $1;
  $36 = (_hio_read8($35)|0);
  _write8($34,$36);
  $37 = $i;
  $38 = (($37) + 1)|0;
  $i = $38;
 }
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = ($39|0)<(16);
  if (!($40)) {
   break;
  }
  $41 = $2;
  $42 = $i;
  $43 = ($42*30)|0;
  $44 = (46 + ($43))|0;
  (_fseek(($41|0),($44|0),0)|0);
  $45 = $1;
  $46 = (_hio_read16b($45)|0);
  $47 = $46&65535;
  $48 = $i;
  $49 = (($loop_start) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $2;
  $51 = $i;
  $52 = (($loop_start) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53|0) / 2)&-1;
  $55 = $54&255;
  _write8($50,$55);
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(16);
  if (!($59)) {
   break;
  }
  $60 = $2;
  $61 = $i;
  $62 = ($61*30)|0;
  $63 = (48 + ($62))|0;
  (_fseek(($60|0),($63|0),0)|0);
  $64 = $i;
  $65 = (($smp_len) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $i;
  $68 = (($loop_start) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($66) - ($69))|0;
  $loop_size = $70;
  $71 = $loop_size;
  $72 = ($71|0)==(0);
  if ($72) {
   label = 14;
  } else {
   $73 = $i;
   $74 = (($loop_start) + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(0);
   if ($76) {
    label = 14;
   } else {
    $78 = $2;
    $79 = $loop_size;
    $80 = (($79|0) / 2)&-1;
    $81 = $80&65535;
    _write16b($78,$81);
   }
  }
  if ((label|0) == 14) {
   label = 0;
   $77 = $2;
   _write16b($77,1);
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $i = 16;
 while(1) {
  $84 = $i;
  $85 = ($84|0)<(31);
  $86 = $2;
  if (!($85)) {
   break;
  }
  $87 = $i;
  $88 = ($87*30)|0;
  $89 = (48 + ($88))|0;
  (_fseek(($86|0),($89|0),0)|0);
  $90 = $2;
  _write16b($90,1);
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 (_fseek(($86|0),950,0)|0);
 $93 = $1;
 (_hio_seek($93,1,1)|0);
 $94 = $2;
 $95 = $1;
 $96 = (_hio_read8($95)|0);
 _write8($94,$96);
 $97 = $2;
 _write8($97,127);
 $i = 0;
 $max_pat = 0;
 while(1) {
  $98 = $i;
  $99 = ($98|0)<(40);
  if (!($99)) {
   break;
  }
  $100 = $1;
  (_hio_seek($100,1,1)|0);
  $101 = $1;
  $102 = (_hio_read8($101)|0);
  $pat = $102;
  $103 = $2;
  $104 = $pat;
  _write8($103,$104);
  $105 = $pat;
  $106 = $105&255;
  $107 = $max_pat;
  $108 = $107&255;
  $109 = ($106|0)>($108|0);
  if ($109) {
   $110 = $pat;
   $max_pat = $110;
  }
  $111 = $i;
  $112 = (($111) + 1)|0;
  $i = $112;
 }
 $113 = $2;
 (_fseek(($113|0),0,2)|0);
 $114 = $2;
 _write32b($114,1294879534);
 $115 = $1;
 (_hio_seek($115,4,1)|0);
 $116 = $1;
 $117 = (_hio_read32b($116)|0);
 $pat_size = $117;
 $118 = $pat_size;
 $119 = ($118|0)<=(0);
 $120 = $pat_size;
 $121 = ($120|0)>(131072);
 $or$cond = $119 | $121;
 if ($or$cond) {
  $0 = -1;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $122 = $pat_size;
 $123 = (_malloc($122)|0);
 $tmp = $123;
 $124 = $tmp;
 $125 = $pat_size;
 $126 = $1;
 (_hio_read($124,$125,1,$126)|0);
 $i = 0;
 while(1) {
  $127 = $i;
  $128 = $pat_size;
  $129 = ($127|0)<($128|0);
  if (!($129)) {
   break;
  }
  $130 = $i;
  $131 = (($130) + 2)|0;
  $132 = $tmp;
  $133 = (($132) + ($131)|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $136 = $135 & 15;
  $137 = ($136|0)==(12);
  if ($137) {
   $138 = $i;
   $139 = (($138) + 3)|0;
   $140 = $tmp;
   $141 = (($140) + ($139)|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142&255;
   $x = $143;
   $144 = $x;
   $145 = $144 >> 4;
   $146 = ($145*10)|0;
   $147 = $x;
   $148 = $147 & 15;
   $149 = (($146) + ($148))|0;
   $150 = $149&255;
   $151 = $i;
   $152 = (($151) + 3)|0;
   $153 = $tmp;
   $154 = (($153) + ($152)|0);
   HEAP8[$154>>0] = $150;
  }
  $155 = $i;
  $156 = (($155) + 4)|0;
  $i = $156;
 }
 $157 = $tmp;
 $158 = $pat_size;
 $159 = $2;
 (_fwrite(($157|0),($158|0),1,($159|0))|0);
 $160 = $tmp;
 _free($160);
 $161 = $1;
 (_hio_seek($161,4,1)|0);
 $i = 0;
 while(1) {
  $162 = $i;
  $163 = ($162|0)<(16);
  if (!($163)) {
   break;
  }
  $164 = $i;
  $165 = (($smp_len) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)!=(0);
  if ($167) {
   $168 = $2;
   $169 = $1;
   $170 = $i;
   $171 = (($smp_len) + ($170<<2)|0);
   $172 = HEAP32[$171>>2]|0;
   (_pw_move_data($168,$169,$172)|0);
  }
  $173 = $i;
  $174 = (($173) + 1)|0;
  $i = $174;
 }
 $0 = 0;
 $175 = $0;
 STACKTOP = sp;return ($175|0);
}
function _test_fuzz($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $1;
 $5 = (_readmem32b($4)|0);
 $6 = ($5|0)!=(1295068720);
 if ($6) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(31);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = ($9*68)|0;
  $11 = (72 + ($10))|0;
  $12 = $1;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)>(15);
  if ($16) {
   label = 6;
   break;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = ($19|0)<(31);
  if (!($20)) {
   break;
  }
  $21 = $i;
  $22 = ($21*68)|0;
  $23 = (73 + ($22))|0;
  $24 = $1;
  $25 = (($24) + ($23)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)>(64);
  if ($28) {
   label = 11;
   break;
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 if ((label|0) == 11) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = ($31|0)<(31);
  $33 = $1;
  if (!($32)) {
   break;
  }
  $34 = $i;
  $35 = ($34*68)|0;
  $36 = (($33) + ($35)|0);
  $37 = ((($36)) + 66|0);
  $38 = (_readmem16b($37)|0);
  $39 = $38&65535;
  $len = $39;
  $40 = $len;
  $41 = ($40|0)>(32768);
  if ($41) {
   label = 16;
   break;
  }
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $44 = ((($33)) + 2114|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ($46|0)==(0);
 if ($47) {
  $0 = -1;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $48 = $2;
  _pw_read_title(0,$48,0);
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _depack_fuzz($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $data = 0, $i = 0, $j = 0, $k = 0, $l = 0;
 var $len = 0, $lps = 0, $lsz = 0, $npat = 0, $ntrk = 0, $ord = 0, $size = 0, $ssize = 0, $status = 0, $tidx = 0, $tidx_real = 0, $track = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 3776|0;
 $ord = sp + 3648|0;
 $tidx = sp + 1600|0;
 $tidx_real = sp + 1088|0;
 $track = sp + 64|0;
 $1 = $in;
 $2 = $out;
 $status = 1;
 $ssize = 0;
 _memset(($tidx|0),0,2048)|0;
 _memset(($tidx_real|0),0,512)|0;
 dest=$ord; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $3 = $1;
 (_hio_read32b($3)|0);
 $4 = $1;
 (_hio_read16b($4)|0);
 $5 = $2;
 (_pw_write_zero($5,20)|0);
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(31);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $1;
  (_pw_move_data($8,$9,22)|0);
  $10 = $1;
  (_hio_seek($10,38,1)|0);
  $11 = $2;
  $12 = $1;
  $13 = (_hio_read16b($12)|0);
  $14 = $13&65535;
  $size = $14;
  $15 = $14&65535;
  _write16b($11,$15);
  $16 = $size;
  $17 = $16<<1;
  $18 = $ssize;
  $19 = (($18) + ($17))|0;
  $ssize = $19;
  $20 = $1;
  $21 = (_hio_read16b($20)|0);
  $22 = $21&65535;
  $lps = $22;
  $23 = $1;
  $24 = (_hio_read16b($23)|0);
  $25 = $24&65535;
  $lsz = $25;
  $26 = $2;
  $27 = $1;
  $28 = (_hio_read8($27)|0);
  _write8($26,$28);
  $29 = $2;
  $30 = $1;
  $31 = (_hio_read8($30)|0);
  _write8($29,$31);
  $32 = $2;
  $33 = $lps;
  $34 = $33&65535;
  _write16b($32,$34);
  $35 = $2;
  $36 = $lsz;
  $37 = ($36|0)>(0);
  $38 = $lsz;
  $39 = $37 ? $38 : 1;
  $40 = $39&65535;
  _write16b($35,$40);
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $1;
 $44 = (_hio_read8($43)|0);
 $45 = $44&255;
 $len = $45;
 $46 = $len;
 $47 = ($46|0)>(128);
 if ($47) {
  $0 = -1;
  $313 = $0;
  STACKTOP = sp;return ($313|0);
 }
 $48 = $2;
 $49 = $len;
 $50 = $49&255;
 _write8($48,$50);
 $51 = $1;
 $52 = (_hio_read8($51)|0);
 $53 = $52&255;
 $ntrk = $53;
 $54 = $2;
 _write8($54,127);
 $55 = $1;
 (_hio_seek($55,2118,0)|0);
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(4);
  if (!($57)) {
   break;
  }
  $j = 0;
  while(1) {
   $58 = $j;
   $59 = $len;
   $60 = ($58|0)<($59|0);
   $61 = $i;
   if (!($60)) {
    break;
   }
   $62 = $61<<2;
   $63 = $j;
   $64 = (($tidx) + ($63<<4)|0);
   $65 = (($64) + ($62)|0);
   $66 = $1;
   (_hio_read($65,1,4,$66)|0);
   $67 = $j;
   $68 = (($67) + 1)|0;
   $j = $68;
  }
  $69 = (($61) + 1)|0;
  $i = $69;
 }
 $npat = 0;
 $i = 0;
 while(1) {
  $70 = $i;
  $71 = $len;
  $72 = ($70|0)<($71|0);
  if (!($72)) {
   break;
  }
  $73 = $i;
  $74 = ($73|0)==(0);
  if ($74) {
   $75 = $npat;
   $76 = (($75) + 1)|0;
   $npat = $76;
   $77 = $75&255;
   HEAP8[$ord>>0] = $77;
  } else {
   $j = 0;
   while(1) {
    $78 = $j;
    $79 = $i;
    $80 = ($78|0)<($79|0);
    if (!($80)) {
     break;
    }
    $status = 1;
    $k = 0;
    while(1) {
     $81 = $k;
     $82 = ($81|0)<(4);
     if (!($82)) {
      break;
     }
     $83 = $k;
     $84 = $83<<2;
     $85 = $j;
     $86 = (($tidx) + ($85<<4)|0);
     $87 = (($86) + ($84)|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = $88&255;
     $90 = $k;
     $91 = $90<<2;
     $92 = $i;
     $93 = (($tidx) + ($92<<4)|0);
     $94 = (($93) + ($91)|0);
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = ($89|0)!=($96|0);
     if ($97) {
      label = 21;
      break;
     }
     $98 = $k;
     $99 = (($98) + 1)|0;
     $k = $99;
    }
    if ((label|0) == 21) {
     label = 0;
     $status = 0;
    }
    $100 = $status;
    $101 = $100&255;
    $102 = ($101|0)==(1);
    $103 = $j;
    if ($102) {
     label = 24;
     break;
    }
    $108 = (($103) + 1)|0;
    $j = $108;
   }
   if ((label|0) == 24) {
    label = 0;
    $104 = (($ord) + ($103)|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $i;
    $107 = (($ord) + ($106)|0);
    HEAP8[$107>>0] = $105;
   }
   $109 = $status;
   $110 = $109&255;
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = $npat;
    $113 = (($112) + 1)|0;
    $npat = $113;
    $114 = $112&255;
    $115 = $i;
    $116 = (($ord) + ($115)|0);
    HEAP8[$116>>0] = $114;
   }
   $status = 1;
  }
  $117 = $i;
  $118 = (($117) + 1)|0;
  $i = $118;
 }
 $c1 = 0;
 $i = 0;
 while(1) {
  $119 = $i;
  $120 = $len;
  $121 = ($119|0)<($120|0);
  if (!($121)) {
   break;
  }
  $122 = $i;
  $123 = ($122|0)==(0);
  if ($123) {
   $124 = $i;
   $125 = (($tidx) + ($124<<4)|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $c1;
   $128 = $127&255;
   $129 = (($tidx_real) + ($128<<2)|0);
   HEAP8[$129>>0] = $126;
   $130 = $i;
   $131 = (($tidx) + ($130<<4)|0);
   $132 = ((($131)) + 4|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $c1;
   $135 = $134&255;
   $136 = (($tidx_real) + ($135<<2)|0);
   $137 = ((($136)) + 1|0);
   HEAP8[$137>>0] = $133;
   $138 = $i;
   $139 = (($tidx) + ($138<<4)|0);
   $140 = ((($139)) + 8|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $c1;
   $143 = $142&255;
   $144 = (($tidx_real) + ($143<<2)|0);
   $145 = ((($144)) + 2|0);
   HEAP8[$145>>0] = $141;
   $146 = $i;
   $147 = (($tidx) + ($146<<4)|0);
   $148 = ((($147)) + 12|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $c1;
   $151 = $150&255;
   $152 = (($tidx_real) + ($151<<2)|0);
   $153 = ((($152)) + 3|0);
   HEAP8[$153>>0] = $149;
   $154 = $c1;
   $155 = (($154) + 1)<<24>>24;
   $c1 = $155;
  } else {
   $j = 0;
   while(1) {
    $156 = $j;
    $157 = $i;
    $158 = ($156|0)<($157|0);
    if (!($158)) {
     break;
    }
    $status = 1;
    $159 = $i;
    $160 = (($ord) + ($159)|0);
    $161 = HEAP8[$160>>0]|0;
    $162 = $161&255;
    $163 = $j;
    $164 = (($ord) + ($163)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = ($162|0)==($166|0);
    if ($167) {
     label = 37;
     break;
    }
    $168 = $j;
    $169 = (($168) + 1)|0;
    $j = $169;
   }
   if ((label|0) == 37) {
    label = 0;
    $status = 0;
   }
   $170 = $status;
   $171 = $170&255;
   $172 = ($171|0)==(0);
   if (!($172)) {
    $173 = $i;
    $174 = (($tidx) + ($173<<4)|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $c1;
    $177 = $176&255;
    $178 = (($tidx_real) + ($177<<2)|0);
    HEAP8[$178>>0] = $175;
    $179 = $i;
    $180 = (($tidx) + ($179<<4)|0);
    $181 = ((($180)) + 4|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $c1;
    $184 = $183&255;
    $185 = (($tidx_real) + ($184<<2)|0);
    $186 = ((($185)) + 1|0);
    HEAP8[$186>>0] = $182;
    $187 = $i;
    $188 = (($tidx) + ($187<<4)|0);
    $189 = ((($188)) + 8|0);
    $190 = HEAP8[$189>>0]|0;
    $191 = $c1;
    $192 = $191&255;
    $193 = (($tidx_real) + ($192<<2)|0);
    $194 = ((($193)) + 2|0);
    HEAP8[$194>>0] = $190;
    $195 = $i;
    $196 = (($tidx) + ($195<<4)|0);
    $197 = ((($196)) + 12|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $c1;
    $200 = $199&255;
    $201 = (($tidx_real) + ($200<<2)|0);
    $202 = ((($201)) + 3|0);
    HEAP8[$202>>0] = $198;
    $203 = $c1;
    $204 = (($203) + 1)<<24>>24;
    $c1 = $204;
    $status = 1;
   }
  }
  $205 = $i;
  $206 = (($205) + 1)|0;
  $i = $206;
 }
 $207 = $2;
 (_fwrite(($ord|0),128,1,($207|0))|0);
 $208 = $2;
 _write32b($208,1294879534);
 $209 = $len;
 $210 = $209<<4;
 $211 = (2118 + ($210))|0;
 $l = $211;
 $i = 0;
 while(1) {
  $212 = $i;
  $213 = $npat;
  $214 = ($212|0)<($213|0);
  if (!($214)) {
   break;
  }
  _memset(($data|0),0,1024)|0;
  _memset(($track|0),0,1024)|0;
  $215 = $1;
  $216 = $l;
  $217 = $i;
  $218 = (($tidx_real) + ($217<<2)|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $219&255;
  $221 = $220 << 8;
  $222 = (($216) + ($221))|0;
  (_hio_seek($215,$222,0)|0);
  $223 = $1;
  (_hio_read($track,256,1,$223)|0);
  $224 = $1;
  $225 = $l;
  $226 = $i;
  $227 = (($tidx_real) + ($226<<2)|0);
  $228 = ((($227)) + 1|0);
  $229 = HEAP8[$228>>0]|0;
  $230 = $229&255;
  $231 = $230 << 8;
  $232 = (($225) + ($231))|0;
  (_hio_seek($224,$232,0)|0);
  $233 = ((($track)) + 256|0);
  $234 = $1;
  (_hio_read($233,256,1,$234)|0);
  $235 = $1;
  $236 = $l;
  $237 = $i;
  $238 = (($tidx_real) + ($237<<2)|0);
  $239 = ((($238)) + 2|0);
  $240 = HEAP8[$239>>0]|0;
  $241 = $240&255;
  $242 = $241 << 8;
  $243 = (($236) + ($242))|0;
  (_hio_seek($235,$243,0)|0);
  $244 = ((($track)) + 512|0);
  $245 = $1;
  (_hio_read($244,256,1,$245)|0);
  $246 = $1;
  $247 = $l;
  $248 = $i;
  $249 = (($tidx_real) + ($248<<2)|0);
  $250 = ((($249)) + 3|0);
  $251 = HEAP8[$250>>0]|0;
  $252 = $251&255;
  $253 = $252 << 8;
  $254 = (($247) + ($253))|0;
  (_hio_seek($246,$254,0)|0);
  $255 = ((($track)) + 768|0);
  $256 = $1;
  (_hio_read($255,256,1,$256)|0);
  $j = 0;
  while(1) {
   $257 = $j;
   $258 = ($257|0)<(64);
   if (!($258)) {
    break;
   }
   $259 = $j;
   $260 = $259<<4;
   $261 = (($data) + ($260)|0);
   $262 = $j;
   $263 = $262<<2;
   $264 = (($track) + ($263)|0);
   ;HEAP8[$261>>0]=HEAP8[$264>>0]|0;HEAP8[$261+1>>0]=HEAP8[$264+1>>0]|0;HEAP8[$261+2>>0]=HEAP8[$264+2>>0]|0;HEAP8[$261+3>>0]=HEAP8[$264+3>>0]|0;
   $265 = $j;
   $266 = $265<<4;
   $267 = (($266) + 4)|0;
   $268 = (($data) + ($267)|0);
   $269 = $j;
   $270 = $269<<2;
   $271 = ((($track)) + 256|0);
   $272 = (($271) + ($270)|0);
   ;HEAP8[$268>>0]=HEAP8[$272>>0]|0;HEAP8[$268+1>>0]=HEAP8[$272+1>>0]|0;HEAP8[$268+2>>0]=HEAP8[$272+2>>0]|0;HEAP8[$268+3>>0]=HEAP8[$272+3>>0]|0;
   $273 = $j;
   $274 = $273<<4;
   $275 = (($274) + 8)|0;
   $276 = (($data) + ($275)|0);
   $277 = $j;
   $278 = $277<<2;
   $279 = ((($track)) + 512|0);
   $280 = (($279) + ($278)|0);
   ;HEAP8[$276>>0]=HEAP8[$280>>0]|0;HEAP8[$276+1>>0]=HEAP8[$280+1>>0]|0;HEAP8[$276+2>>0]=HEAP8[$280+2>>0]|0;HEAP8[$276+3>>0]=HEAP8[$280+3>>0]|0;
   $281 = $j;
   $282 = $281<<4;
   $283 = (($282) + 12)|0;
   $284 = (($data) + ($283)|0);
   $285 = $j;
   $286 = $285<<2;
   $287 = ((($track)) + 768|0);
   $288 = (($287) + ($286)|0);
   ;HEAP8[$284>>0]=HEAP8[$288>>0]|0;HEAP8[$284+1>>0]=HEAP8[$288+1>>0]|0;HEAP8[$284+2>>0]=HEAP8[$288+2>>0]|0;HEAP8[$284+3>>0]=HEAP8[$288+3>>0]|0;
   $289 = $j;
   $290 = $289<<2;
   $291 = (($290) + 3)|0;
   $292 = ((($track)) + 768|0);
   $293 = (($292) + ($291)|0);
   $294 = HEAP8[$293>>0]|0;
   $295 = $j;
   $296 = $295<<4;
   $297 = (($296) + 15)|0;
   $298 = (($data) + ($297)|0);
   HEAP8[$298>>0] = $294;
   $299 = $j;
   $300 = (($299) + 1)|0;
   $j = $300;
  }
  $301 = $2;
  (_fwrite(($data|0),1024,1,($301|0))|0);
  $302 = $i;
  $303 = (($302) + 1)|0;
  $i = $303;
 }
 $304 = $1;
 $305 = $l;
 $306 = $ntrk;
 $307 = $306 << 8;
 $308 = (($305) + ($307))|0;
 $309 = (($308) + 4)|0;
 (_hio_seek($304,$309,0)|0);
 $310 = $2;
 $311 = $1;
 $312 = $ssize;
 (_pw_move_data($310,$311,$312)|0);
 $0 = 0;
 $313 = $0;
 STACKTOP = sp;return ($313|0);
}
function _test_GMC($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $d = 0, $d1 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $lsize = 0, $numpat = 0, $offset = 0, $or$cond = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1024);
 if ($5) {
  $6 = $3;
  $7 = (1024 - ($6))|0;
  $0 = $7;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 $ssize = 0;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(15);
  if (!($9)) {
   label = 12;
   break;
  }
  $10 = $1;
  $11 = $i;
  $12 = $11<<4;
  $13 = (($10) + ($12)|0);
  $d = $13;
  $14 = $d;
  $15 = ((($14)) + 7|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = ($17|0)>(64);
  if ($18) {
   label = 6;
   break;
  }
  $19 = $d;
  $20 = ((($19)) + 4|0);
  $21 = (_readmem16b($20)|0);
  $22 = $21&65535;
  $23 = $22 << 1;
  $len = $23;
  $24 = $d;
  $25 = ((($24)) + 12|0);
  $26 = (_readmem16b($25)|0);
  $27 = $26&65535;
  $lsize = $27;
  $28 = $len;
  $29 = ($28|0)>(65535);
  if ($29) {
   label = 8;
   break;
  }
  $30 = $lsize;
  $31 = $len;
  $32 = ($30|0)>($31|0);
  if ($32) {
   label = 10;
   break;
  }
  $33 = $len;
  $34 = $ssize;
  $35 = (($34) + ($33))|0;
  $ssize = $35;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 else if ((label|0) == 12) {
  $38 = $ssize;
  $39 = ($38|0)<=(4);
  if ($39) {
   $0 = -1;
   $180 = $0;
   STACKTOP = sp;return ($180|0);
  }
  $40 = $1;
  $41 = ((($40)) + 243|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)>(100);
  if (!($44)) {
   $45 = $1;
   $46 = ((($45)) + 243|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ($48|0)==(0);
   if (!($49)) {
    $numpat = 0;
    $i = 0;
    while(1) {
     $50 = $i;
     $51 = ($50|0)<(100);
     if (!($51)) {
      break;
     }
     $52 = $1;
     $53 = ((($52)) + 244|0);
     $54 = $i;
     $55 = $54<<1;
     $56 = (($53) + ($55)|0);
     $57 = (_readmem16b($56)|0);
     $58 = $57&65535;
     $k = $58;
     $59 = $k;
     $60 = $59 & 1023;
     $61 = ($60|0)!=(0);
     if ($61) {
      label = 20;
      break;
     }
     $62 = $k;
     $63 = $62 >> 10;
     $64 = $numpat;
     $65 = ($63|0)>($64|0);
     if ($65) {
      $66 = $k;
      $67 = $66 >> 10;
      $numpat = $67;
     }
     $68 = $i;
     $69 = (($68) + 1)|0;
     $i = $69;
    }
    if ((label|0) == 20) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    $70 = $numpat;
    $71 = (($70) + 1)|0;
    $numpat = $71;
    $72 = $numpat;
    $73 = ($72|0)==(1);
    $74 = $numpat;
    $75 = ($74|0)>(100);
    $or$cond = $73 | $75;
    if ($or$cond) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    $76 = $3;
    $77 = $k;
    $78 = $77<<10;
    $79 = (444 + ($78))|0;
    $80 = $i;
    $81 = $80<<2;
    $82 = (($79) + ($81))|0;
    $83 = (($82) + 3)|0;
    $84 = ($76|0)<($83|0);
    if ($84) {
     $85 = $k;
     $86 = $85<<10;
     $87 = (444 + ($86))|0;
     $88 = $i;
     $89 = $88<<2;
     $90 = (($87) + ($89))|0;
     $91 = (($90) + 3)|0;
     $92 = $3;
     $93 = (($91) - ($92))|0;
     $0 = $93;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    $i = 0;
    L41: while(1) {
     $94 = $i;
     $95 = $numpat;
     $96 = ($94|0)<($95|0);
     if (!($96)) {
      label = 53;
      break;
     }
     $j = 0;
     while(1) {
      $97 = $j;
      $98 = ($97|0)<(256);
      $99 = $i;
      if (!($98)) {
       break;
      }
      $100 = $99<<10;
      $101 = (444 + ($100))|0;
      $102 = $j;
      $103 = $102<<2;
      $104 = (($101) + ($103))|0;
      $offset = $104;
      $105 = $offset;
      $106 = $1;
      $107 = (($106) + ($105)|0);
      $d1 = $107;
      $108 = $offset;
      $109 = ($108|0)>(65532);
      if ($109) {
       label = 33;
       break L41;
      }
      $110 = $d1;
      $111 = ((($110)) + 2|0);
      $112 = HEAP8[$111>>0]|0;
      $113 = $112&255;
      $114 = $113 & 15;
      $115 = ($114|0)>=(144);
      if ($115) {
       label = 35;
       break L41;
      }
      $116 = $d1;
      $117 = ((($116)) + 2|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = $119 & 15;
      $121 = ($120|0)==(3);
      if ($121) {
       $122 = $d1;
       $123 = ((($122)) + 3|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = ($125|0)>(64);
       if ($126) {
        label = 38;
        break L41;
       }
      }
      $127 = $d1;
      $128 = ((($127)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129&255;
      $131 = $130 & 15;
      $132 = ($131|0)==(4);
      if ($132) {
       $133 = $d1;
       $134 = ((($133)) + 3|0);
       $135 = HEAP8[$134>>0]|0;
       $136 = $135&255;
       $137 = ($136|0)>(99);
       if ($137) {
        label = 41;
        break L41;
       }
      }
      $138 = $d1;
      $139 = ((($138)) + 2|0);
      $140 = HEAP8[$139>>0]|0;
      $141 = $140&255;
      $142 = $141 & 15;
      $143 = ($142|0)==(5);
      if ($143) {
       $144 = $d1;
       $145 = ((($144)) + 3|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $146&255;
       $148 = $1;
       $149 = ((($148)) + 243|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $150&255;
       $152 = (($151) + 1)|0;
       $153 = ($147|0)>($152|0);
       if ($153) {
        label = 44;
        break L41;
       }
      }
      $154 = $d1;
      $155 = ((($154)) + 2|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $156&255;
      $158 = $157 & 15;
      $159 = ($158|0)==(6);
      if ($159) {
       $160 = $d1;
       $161 = ((($160)) + 3|0);
       $162 = HEAP8[$161>>0]|0;
       $163 = $162&255;
       $164 = ($163|0)>=(2);
       if ($164) {
        label = 47;
        break L41;
       }
      }
      $165 = $d1;
      $166 = ((($165)) + 2|0);
      $167 = HEAP8[$166>>0]|0;
      $168 = $167&255;
      $169 = $168 & 15;
      $170 = ($169|0)==(7);
      if ($170) {
       $171 = $d1;
       $172 = ((($171)) + 3|0);
       $173 = HEAP8[$172>>0]|0;
       $174 = $173&255;
       $175 = ($174|0)>=(2);
       if ($175) {
        label = 50;
        break L41;
       }
      }
      $176 = $j;
      $177 = (($176) + 1)|0;
      $j = $177;
     }
     $178 = (($99) + 1)|0;
     $i = $178;
    }
    if ((label|0) == 33) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 35) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 38) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 41) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 44) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 47) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 50) {
     $0 = -1;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
    else if ((label|0) == 53) {
     $179 = $2;
     _pw_read_title(0,$179,0);
     $0 = 0;
     $180 = $0;
     STACKTOP = sp;return ($180|0);
    }
   }
  }
  $0 = -1;
  $180 = $0;
  STACKTOP = sp;return ($180|0);
 }
 return (0)|0;
}
function _depack_GMC($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $len = 0, $looplen = 0, $max = 0;
 var $pat_pos = 0, $ptable = 0, $ssize = 0, $tmp = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 160|0;
 $ptable = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $i = 0;
 $j = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(15);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $0;
  (_hio_read32b($6)|0);
  $7 = $0;
  $8 = (_hio_read16b($7)|0);
  $len = $8;
  $9 = $1;
  $10 = $len;
  _write16b($9,$10);
  $11 = $len;
  $12 = $11&65535;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $0;
  (_hio_read8($16)|0);
  $17 = $1;
  _write8($17,0);
  $18 = $1;
  $19 = $0;
  $20 = (_hio_read8($19)|0);
  _write8($18,$20);
  $21 = $0;
  (_hio_read32b($21)|0);
  $22 = $0;
  $23 = (_hio_read16b($22)|0);
  $looplen = $23;
  $24 = $1;
  $25 = $looplen;
  $26 = $25&65535;
  $27 = ($26|0)>(2);
  if ($27) {
   $28 = $len;
   $29 = $28&65535;
   $30 = $looplen;
   $31 = $30&65535;
   $32 = (($29) - ($31))|0;
   $34 = $32;
  } else {
   $34 = 0;
  }
  $33 = $34&65535;
  _write16b($24,$33);
  $35 = $1;
  $36 = $looplen;
  $37 = $36&65535;
  $38 = ($37|0)<=(2);
  $39 = $looplen;
  $40 = $39&65535;
  $41 = $38 ? 1 : $40;
  $42 = $41&65535;
  _write16b($35,$42);
  $43 = $0;
  (_hio_read16b($43)|0);
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $46 = ((($tmp)) + 29|0);
 HEAP8[$46>>0] = 1;
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = ($47|0)<(16);
  if (!($48)) {
   break;
  }
  $49 = $1;
  (_fwrite(($tmp|0),30,1,($49|0))|0);
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $0;
 (_hio_seek($52,243,0)|0);
 $53 = $1;
 $54 = $0;
 $55 = (_hio_read8($54)|0);
 $pat_pos = $55;
 _write8($53,$55);
 $56 = $1;
 _write8($56,127);
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = ($57|0)<(100);
  if (!($58)) {
   break;
  }
  $59 = $0;
  $60 = (_hio_read16b($59)|0);
  $61 = $60&65535;
  $62 = (($61|0) / 1024)&-1;
  $63 = $62&255;
  $64 = $i;
  $65 = (($ptable) + ($64)|0);
  HEAP8[$65>>0] = $63;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = $1;
 (_fwrite(($ptable|0),128,1,($68|0))|0);
 $i = 0;
 $max = 0;
 while(1) {
  $69 = $i;
  $70 = ($69|0)<(128);
  if (!($70)) {
   break;
  }
  $71 = $i;
  $72 = (($ptable) + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $max;
  $76 = $75&255;
  $77 = ($74|0)>($76|0);
  if ($77) {
   $78 = $i;
   $79 = (($ptable) + ($78)|0);
   $80 = HEAP8[$79>>0]|0;
   $max = $80;
  }
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $83 = $1;
 _write32b($83,1294879534);
 $84 = $0;
 (_hio_seek($84,444,0)|0);
 $i = 0;
 while(1) {
  $85 = $i;
  $86 = $max;
  $87 = $86&255;
  $88 = ($85|0)<=($87|0);
  if (!($88)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $89 = $0;
  (_hio_read($tmp,1024,1,$89)|0);
  $j = 0;
  while(1) {
   $90 = $j;
   $91 = ($90|0)<(256);
   if (!($91)) {
    break;
   }
   $92 = $j;
   $93 = $92<<2;
   $94 = (($93) + 2)|0;
   $95 = (($tmp) + ($94)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 & 15;
   switch ($98|0) {
   case 8:  {
    $139 = $j;
    $140 = $139<<2;
    $141 = (($140) + 2)|0;
    $142 = (($tmp) + ($141)|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = (($144) + 7)|0;
    $146 = $145&255;
    HEAP8[$142>>0] = $146;
    break;
   }
   case 3:  {
    $99 = $j;
    $100 = $99<<2;
    $101 = (($100) + 2)|0;
    $102 = (($tmp) + ($101)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($104) + 9)|0;
    $106 = $105&255;
    HEAP8[$102>>0] = $106;
    break;
   }
   case 5:  {
    $115 = $j;
    $116 = $115<<2;
    $117 = (($116) + 2)|0;
    $118 = (($tmp) + ($117)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119&255;
    $121 = (($120) + 6)|0;
    $122 = $121&255;
    HEAP8[$118>>0] = $122;
    break;
   }
   case 6:  {
    $123 = $j;
    $124 = $123<<2;
    $125 = (($124) + 2)|0;
    $126 = (($tmp) + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127&255;
    $129 = (($128) + 8)|0;
    $130 = $129&255;
    HEAP8[$126>>0] = $130;
    break;
   }
   case 7:  {
    $131 = $j;
    $132 = $131<<2;
    $133 = (($132) + 2)|0;
    $134 = (($tmp) + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = (($136) + 7)|0;
    $138 = $137&255;
    HEAP8[$134>>0] = $138;
    break;
   }
   case 4:  {
    $107 = $j;
    $108 = $107<<2;
    $109 = (($108) + 2)|0;
    $110 = (($tmp) + ($109)|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = (($112) + 9)|0;
    $114 = $113&255;
    HEAP8[$110>>0] = $114;
    break;
   }
   default: {
   }
   }
   $147 = $j;
   $148 = (($147) + 1)|0;
   $j = $148;
  }
  $149 = $1;
  (_fwrite(($tmp|0),1024,1,($149|0))|0);
  $150 = $i;
  $151 = (($150) + 1)|0;
  $i = $151;
 }
 $152 = $1;
 $153 = $0;
 $154 = $ssize;
 (_pw_move_data($152,$153,$154)|0);
 STACKTOP = sp;return 0;
}
function _test_crb($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $d1 = 0, $d2 = 0, $i = 0, $idx = 0, $j = 0, $k = 0, $len = 0, $lsize = 0, $max = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(378);
 if ($5) {
  $6 = $3;
  $7 = (378 - ($6))|0;
  $0 = $7;
  $167 = $0;
  STACKTOP = sp;return ($167|0);
 }
 $8 = $1;
 $9 = ((($8)) + 248|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)>(127);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 248|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = $1;
   $19 = ((($18)) + 249|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)!=(127);
   if ($22) {
    $0 = -1;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   $ssize = 0;
   $i = 0;
   while(1) {
    $23 = $i;
    $24 = ($23|0)<(31);
    if (!($24)) {
     label = 22;
     break;
    }
    $25 = $1;
    $26 = $i;
    $27 = $26<<3;
    $28 = (($25) + ($27)|0);
    $d = $28;
    $29 = $d;
    $30 = ((($29)) + 2|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)>(15);
    if ($33) {
     label = 11;
     break;
    }
    $34 = $d;
    $35 = ((($34)) + 3|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = ($37|0)>(64);
    if ($38) {
     label = 13;
     break;
    }
    $39 = $d;
    $40 = (_readmem16b($39)|0);
    $41 = $40&65535;
    $42 = $41 << 1;
    $len = $42;
    $43 = $d;
    $44 = ((($43)) + 4|0);
    $45 = (_readmem16b($44)|0);
    $46 = $45&65535;
    $47 = $46 << 1;
    $start = $47;
    $48 = $d;
    $49 = ((($48)) + 6|0);
    $50 = (_readmem16b($49)|0);
    $51 = $50&65535;
    $52 = $51 << 1;
    $lsize = $52;
    $53 = $len;
    $54 = ($53|0)>(65535);
    $55 = $start;
    $56 = ($55|0)>(65535);
    $or$cond = $54 | $56;
    $57 = $lsize;
    $58 = ($57|0)>(65535);
    $or$cond3 = $or$cond | $58;
    if ($or$cond3) {
     label = 15;
     break;
    }
    $59 = $lsize;
    $60 = ($59|0)!=(0);
    $61 = $lsize;
    $62 = ($61|0)!=(2);
    $or$cond5 = $60 & $62;
    if ($or$cond5) {
     $63 = $start;
     $64 = $lsize;
     $65 = (($63) + ($64))|0;
     $66 = $len;
     $67 = ($65|0)>($66|0);
     if ($67) {
      label = 18;
      break;
     }
    }
    $68 = $start;
    $69 = ($68|0)!=(0);
    $70 = $lsize;
    $71 = ($70|0)<=(2);
    $or$cond7 = $69 & $71;
    if ($or$cond7) {
     label = 20;
     break;
    }
    $72 = $len;
    $73 = $ssize;
    $74 = (($73) + ($72))|0;
    $ssize = $74;
    $75 = $i;
    $76 = (($75) + 1)|0;
    $i = $76;
   }
   if ((label|0) == 11) {
    $0 = -1;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   else if ((label|0) == 13) {
    $0 = -1;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   else if ((label|0) == 15) {
    $0 = -1;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   else if ((label|0) == 18) {
    $0 = -1;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   else if ((label|0) == 20) {
    $0 = -1;
    $167 = $0;
    STACKTOP = sp;return ($167|0);
   }
   else if ((label|0) == 22) {
    $77 = $ssize;
    $78 = ($77|0)<=(4);
    if ($78) {
     $0 = -1;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
    $79 = $1;
    $80 = ((($79)) + 250|0);
    $d1 = $80;
    $max = 0;
    $i = 0;
    while(1) {
     $81 = $i;
     $82 = ($81|0)<(128);
     if (!($82)) {
      break;
     }
     $83 = $i;
     $84 = $d1;
     $85 = (($84) + ($83)|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = ($87|0)>(127);
     if ($88) {
      label = 27;
      break;
     }
     $89 = $i;
     $90 = $d1;
     $91 = (($90) + ($89)|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $max;
     $95 = ($93|0)>($94|0);
     if ($95) {
      $96 = $i;
      $97 = (250 + ($96))|0;
      $98 = $1;
      $99 = (($98) + ($97)|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100&255;
      $max = $101;
     }
     $102 = $i;
     $103 = (($102) + 1)|0;
     $i = $103;
    }
    if ((label|0) == 27) {
     $0 = -1;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
    $104 = $3;
    $105 = $max;
    $106 = $105<<2;
    $107 = $106<<2;
    $108 = $107<<6;
    $109 = (379 + ($108))|0;
    $110 = ($104|0)<($109|0);
    if ($110) {
     $111 = $max;
     $112 = $111<<2;
     $113 = $112<<2;
     $114 = $113<<6;
     $115 = (379 + ($114))|0;
     $116 = $3;
     $117 = (($115) - ($116))|0;
     $0 = $117;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
    $idx = 0;
    $i = 0;
    L47: while(1) {
     $118 = $i;
     $119 = $max;
     $120 = ($118|0)<=($119|0);
     if (!($120)) {
      label = 52;
      break;
     }
     $j = 0;
     while(1) {
      $121 = $j;
      $122 = ($121|0)<(4);
      if (!($122)) {
       break;
      }
      $k = 0;
      while(1) {
       $123 = $k;
       $124 = ($123|0)<(64);
       if (!($124)) {
        break;
       }
       $125 = $1;
       $126 = ((($125)) + 378|0);
       $127 = $idx;
       $128 = (($126) + ($127)|0);
       $d2 = $128;
       $129 = $d2;
       $130 = HEAP8[$129>>0]|0;
       $131 = $130&255;
       $132 = $131 & 192;
       if ((($132|0) == 0)) {
        $133 = $d2;
        $134 = HEAP8[$133>>0]|0;
        $135 = $134&255;
        $136 = $135 & 15;
        $137 = ($136|0)>(3);
        if ($137) {
         label = 41;
         break L47;
        }
        $138 = $idx;
        $139 = (($138) + 4)|0;
        $idx = $139;
       } else if ((($132|0) == 192)) {
        $153 = $d2;
        $154 = ((($153)) + 1|0);
        $155 = HEAP8[$154>>0]|0;
        $156 = $155&255;
        $157 = ($156|0)!=(0);
        if ($157) {
         label = 47;
         break L47;
        }
        $k = 100;
        $158 = $idx;
        $159 = (($158) + 4)|0;
        $idx = $159;
       } else if ((($132|0) == 128)) {
        $140 = $d2;
        $141 = ((($140)) + 1|0);
        $142 = HEAP8[$141>>0]|0;
        $143 = $142&255;
        $144 = ($143|0)!=(0);
        if ($144) {
         label = 44;
         break L47;
        }
        $145 = $d2;
        $146 = ((($145)) + 3|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = $k;
        $150 = (($149) + ($148))|0;
        $k = $150;
        $151 = $idx;
        $152 = (($151) + 4)|0;
        $idx = $152;
       }
       $160 = $k;
       $161 = (($160) + 1)|0;
       $k = $161;
      }
      $162 = $j;
      $163 = (($162) + 1)|0;
      $j = $163;
     }
     $164 = $i;
     $165 = (($164) + 1)|0;
     $i = $165;
    }
    if ((label|0) == 41) {
     $0 = -1;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
    else if ((label|0) == 44) {
     $0 = -1;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
    else if ((label|0) == 47) {
     $0 = -1;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
    else if ((label|0) == 52) {
     $166 = $2;
     _pw_read_title(0,$166,0);
     $0 = 0;
     $167 = $0;
     STACKTOP = sp;return ($167|0);
    }
   }
  }
 }
 $0 = -1;
 $167 = $0;
 STACKTOP = sp;return ($167|0);
}
function _depack_crb($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $i = 0, $j = 0, $k = 0, $l = 0, $m = 0, $pat = 0, $pat_max = 0, $pat_pos = 0, $ptable = 0, $size = 0;
 var $ssize = 0, $taddr = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 3136|0;
 $pat = sp + 2104|0;
 $taddr = sp + 40|0;
 $1 = $in;
 $2 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($taddr|0),0,2048)|0;
 $3 = $2;
 (_pw_write_zero($3,20)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $2;
  if (!($5)) {
   break;
  }
  (_pw_write_zero($6,22)|0);
  $7 = $2;
  $8 = $1;
  $9 = (_hio_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $2;
  $17 = $1;
  $18 = (_hio_read8($17)|0);
  _write8($16,$18);
  $19 = $2;
  $20 = $1;
  $21 = (_hio_read8($20)|0);
  _write8($19,$21);
  $22 = $2;
  $23 = $1;
  $24 = (_hio_read16b($23)|0);
  _write16b($22,$24);
  $25 = $1;
  $26 = (_hio_read16b($25)|0);
  $27 = $26&65535;
  $size = $27;
  $28 = $2;
  $29 = $size;
  $30 = ($29|0)!=(0);
  $31 = $size;
  $32 = $30 ? $31 : 1;
  $33 = $32&65535;
  _write16b($28,$33);
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = $1;
 $37 = (_hio_read8($36)|0);
 $pat_pos = $37;
 _write8($6,$37);
 $38 = $2;
 $39 = $1;
 $40 = (_hio_read8($39)|0);
 _write8($38,$40);
 $i = 0;
 $pat_max = 0;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(128);
  if (!($42)) {
   break;
  }
  $43 = $2;
  $44 = $1;
  $45 = (_hio_read8($44)|0);
  $c1 = $45;
  _write8($43,$45);
  $46 = $c1;
  $47 = $46&255;
  $48 = $pat_max;
  $49 = $48&255;
  $50 = ($47|0)>($49|0);
  if ($50) {
   $51 = $c1;
   $pat_max = $51;
  }
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $54 = $pat_max;
 $55 = (($54) + 1)<<24>>24;
 $pat_max = $55;
 $56 = $2;
 _write32b($56,1294879534);
 $i = 0;
 L12: while(1) {
  $57 = $i;
  $58 = $pat_max;
  $59 = $58&255;
  $60 = ($57|0)<($59|0);
  if (!($60)) {
   label = 31;
   break;
  }
  _memset(($pat|0),0,1024)|0;
  $j = 0;
  while(1) {
   $61 = $j;
   $62 = ($61|0)<(4);
   if (!($62)) {
    break;
   }
   $63 = $1;
   $64 = (_hio_tell($63)|0);
   $65 = $i;
   $66 = $65<<2;
   $67 = $j;
   $68 = (($66) + ($67))|0;
   $69 = (($taddr) + ($68<<2)|0);
   HEAP32[$69>>2] = $64;
   $k = 0;
   while(1) {
    $70 = $k;
    $71 = ($70|0)<(64);
    if (!($71)) {
     break;
    }
    $72 = $k;
    $73 = $72<<4;
    $74 = $j;
    $75 = $74<<2;
    $76 = (($73) + ($75))|0;
    $y = $76;
    $77 = $1;
    $78 = (_hio_read8($77)|0);
    $c1 = $78;
    $79 = $c1;
    $80 = $79&255;
    $81 = ($80|0)==(128);
    do {
     if ($81) {
      $82 = $1;
      $83 = (_hio_read24b($82)|0);
      $84 = $k;
      $85 = (($84) + ($83))|0;
      $k = $85;
     } else {
      $86 = $c1;
      $87 = $86&255;
      $88 = ($87|0)==(192);
      if (!($88)) {
       $140 = $c1;
       $141 = $y;
       $142 = (($pat) + ($141)|0);
       HEAP8[$142>>0] = $140;
       $143 = $1;
       $144 = (_hio_read8($143)|0);
       $145 = $y;
       $146 = (($145) + 1)|0;
       $147 = (($pat) + ($146)|0);
       HEAP8[$147>>0] = $144;
       $148 = $1;
       $149 = (_hio_read8($148)|0);
       $150 = $y;
       $151 = (($150) + 2)|0;
       $152 = (($pat) + ($151)|0);
       HEAP8[$152>>0] = $149;
       $153 = $1;
       $154 = (_hio_read8($153)|0);
       $155 = $y;
       $156 = (($155) + 3)|0;
       $157 = (($pat) + ($156)|0);
       HEAP8[$157>>0] = $154;
       break;
      }
      $89 = $1;
      $90 = (_hio_read24b($89)|0);
      $m = $90;
      $91 = $1;
      $92 = (_hio_tell($91)|0);
      $l = $92;
      $93 = $m;
      $94 = ($93|0)>=(2048);
      if ($94) {
       label = 19;
       break L12;
      }
      $95 = $1;
      $96 = $m;
      $97 = $96 >> 2;
      $98 = (($taddr) + ($97<<2)|0);
      $99 = HEAP32[$98>>2]|0;
      (_hio_seek($95,$99,0)|0);
      $m = 0;
      while(1) {
       $100 = $m;
       $101 = ($100|0)<(64);
       if (!($101)) {
        break;
       }
       $102 = $m;
       $103 = $102<<4;
       $104 = $j;
       $105 = $104<<2;
       $106 = (($103) + ($105))|0;
       $x = $106;
       $107 = $1;
       $108 = (_hio_read8($107)|0);
       $c1 = $108;
       $109 = $c1;
       $110 = $109&255;
       $111 = ($110|0)==(128);
       if ($111) {
        $112 = $1;
        $113 = (_hio_read24b($112)|0);
        $114 = $m;
        $115 = (($114) + ($113))|0;
        $m = $115;
       } else {
        $116 = $c1;
        $117 = $x;
        $118 = (($pat) + ($117)|0);
        HEAP8[$118>>0] = $116;
        $119 = $1;
        $120 = (_hio_read8($119)|0);
        $121 = $x;
        $122 = (($121) + 1)|0;
        $123 = (($pat) + ($122)|0);
        HEAP8[$123>>0] = $120;
        $124 = $1;
        $125 = (_hio_read8($124)|0);
        $126 = $x;
        $127 = (($126) + 2)|0;
        $128 = (($pat) + ($127)|0);
        HEAP8[$128>>0] = $125;
        $129 = $1;
        $130 = (_hio_read8($129)|0);
        $131 = $x;
        $132 = (($131) + 3)|0;
        $133 = (($pat) + ($132)|0);
        HEAP8[$133>>0] = $130;
       }
       $134 = $m;
       $135 = (($134) + 1)|0;
       $m = $135;
      }
      $136 = $1;
      $137 = $l;
      (_hio_seek($136,$137,0)|0);
      $138 = $k;
      $139 = (($138) + 100)|0;
      $k = $139;
     }
    } while(0);
    $158 = $k;
    $159 = (($158) + 1)|0;
    $k = $159;
   }
   $160 = $j;
   $161 = (($160) + 1)|0;
   $j = $161;
  }
  $162 = $2;
  (_fwrite(($pat|0),1024,1,($162|0))|0);
  $163 = $i;
  $164 = (($163) + 1)|0;
  $i = $164;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 else if ((label|0) == 31) {
  $165 = $2;
  $166 = $1;
  $167 = $ssize;
  (_pw_move_data($165,$166,$167)|0);
  $0 = 0;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 return (0)|0;
}
function _test_ksm($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $d = 0, $i = 0, $j = 0, $max_trk = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1536);
 if ($5) {
  $6 = $3;
  $7 = (1536 - ($6))|0;
  $0 = $7;
  $89 = $0;
  STACKTOP = sp;return ($89|0);
 }
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(77);
 if (!($11)) {
  $12 = $1;
  $13 = ((($12)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)!=(46);
  if (!($16)) {
   $17 = $1;
   $18 = ((($17)) + 15|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)!=(97);
   if ($21) {
    $0 = -1;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $i = 0;
   while(1) {
    $22 = $i;
    $23 = ($22|0)<(15);
    if (!($23)) {
     break;
    }
    $24 = $i;
    $25 = $24<<5;
    $26 = (54 + ($25))|0;
    $27 = $1;
    $28 = (($27) + ($26)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = ($30|0)>(64);
    if ($31) {
     label = 11;
     break;
    }
    $32 = $i;
    $33 = (($32) + 1)|0;
    $i = $33;
   }
   if ((label|0) == 11) {
    $0 = -1;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $max_trk = 0;
   $i = 0;
   while(1) {
    $34 = $i;
    $35 = ($34|0)<(1024);
    if (!($35)) {
     break;
    }
    $36 = $i;
    $37 = (($36) + 512)|0;
    $38 = $1;
    $39 = (($38) + ($37)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $x = $41;
    $42 = $x;
    $43 = ($42|0)==(255);
    if ($43) {
     break;
    }
    $44 = $x;
    $45 = $max_trk;
    $46 = ($44|0)>($45|0);
    if ($46) {
     $47 = $x;
     $max_trk = $47;
    }
    $48 = $i;
    $49 = (($48) + 1)|0;
    $i = $49;
   }
   $50 = $i;
   $51 = ($50|0)==(1024);
   if ($51) {
    $0 = -1;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $52 = $max_trk;
   $53 = ($52|0)==(0);
   if ($53) {
    $0 = -1;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $54 = $3;
   $55 = $max_trk;
   $56 = ($55*192)|0;
   $57 = (1536 + ($56))|0;
   $58 = (($57) + 189)|0;
   $59 = ($54|0)<($58|0);
   if ($59) {
    $60 = $max_trk;
    $61 = ($60*192)|0;
    $62 = (1536 + ($61))|0;
    $63 = (($62) + 189)|0;
    $64 = $3;
    $65 = (($63) - ($64))|0;
    $0 = $65;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $i = 0;
   L40: while(1) {
    $66 = $i;
    $67 = $max_trk;
    $68 = ($66|0)<=($67|0);
    $69 = $1;
    if (!($68)) {
     label = 33;
     break;
    }
    $70 = ((($69)) + 1536|0);
    $71 = $i;
    $72 = ($71*192)|0;
    $73 = (($70) + ($72)|0);
    $d = $73;
    $j = 0;
    while(1) {
     $74 = $j;
     $75 = ($74|0)<(64);
     if (!($75)) {
      break;
     }
     $76 = $j;
     $77 = ($76*3)|0;
     $78 = $d;
     $79 = (($78) + ($77)|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = $80&255;
     $82 = ($81|0)>(36);
     if ($82) {
      label = 30;
      break L40;
     }
     $83 = $j;
     $84 = (($83) + 1)|0;
     $j = $84;
    }
    $85 = $i;
    $86 = (($85) + 1)|0;
    $i = $86;
   }
   if ((label|0) == 30) {
    $0 = -1;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   else if ((label|0) == 33) {
    $87 = ((($69)) + 2|0);
    $88 = $2;
    _pw_read_title($87,$88,13);
    $0 = 0;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
  }
 }
 $0 = -1;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function _depack_ksm($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c5 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $max_trknum = 0;
 var $plist = 0, $real_tnum = 0, $ssize = 0, $status = 0, $t = 0, $tdata = 0, $tmp = 0, $trknum = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 1968|0;
 $plist = sp + 1832|0;
 $trknum = sp + 1320|0;
 $real_tnum = sp + 808|0;
 $tdata = sp + 40|0;
 $0 = $in;
 $1 = $out;
 $status = 1;
 $ssize = 0;
 dest=$plist; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trknum|0),0,512)|0;
 _memset(($real_tnum|0),0,512)|0;
 $2 = $0;
 (_hio_seek($2,2,0)|0);
 $3 = $1;
 $4 = $0;
 (_pw_move_data($3,$4,13)|0);
 $5 = $1;
 (_pw_write_zero($5,7)|0);
 $6 = $0;
 (_hio_seek($6,32,0)|0);
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(15);
  if (!($8)) {
   break;
  }
  $9 = $1;
  (_pw_write_zero($9,22)|0);
  $10 = $0;
  (_hio_seek($10,20,1)|0);
  $11 = $1;
  $12 = $0;
  $13 = (_hio_read16b($12)|0);
  $14 = $13&65535;
  $k = $14;
  $15 = (($14|0) / 2)&-1;
  $16 = $15&65535;
  _write16b($11,$16);
  $17 = $k;
  $18 = $ssize;
  $19 = (($18) + ($17))|0;
  $ssize = $19;
  $20 = $1;
  _write8($20,0);
  $21 = $1;
  $22 = $0;
  $23 = (_hio_read8($22)|0);
  _write8($21,$23);
  $24 = $0;
  (_hio_read8($24)|0);
  $25 = $1;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  $28 = $27&65535;
  $j = $28;
  $29 = (($28|0) / 2)&-1;
  $30 = $29&65535;
  _write16b($25,$30);
  $31 = $k;
  $32 = $j;
  $33 = (($31) - ($32))|0;
  $j = $33;
  $34 = $1;
  $35 = $j;
  $36 = $k;
  $37 = ($35|0)!=($36|0);
  $38 = $j;
  $39 = (($38|0) / 2)&-1;
  $40 = $37 ? $39 : 1;
  $41 = $40&65535;
  _write16b($34,$41);
  $42 = $0;
  (_hio_seek($42,6,1)|0);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $45 = ((($tmp)) + 29|0);
 HEAP8[$45>>0] = 1;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = ($46|0)<(16);
  if (!($47)) {
   break;
  }
  $48 = $1;
  (_fwrite(($tmp|0),30,1,($48|0))|0);
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $0;
 (_hio_seek($51,512,0)|0);
 $len = 0;
 $max_trknum = 0;
 while(1) {
  $52 = $len;
  $53 = $52&255;
  $54 = ($53|0)<(128);
  if (!($54)) {
   break;
  }
  $55 = $len;
  $56 = $55&255;
  $57 = (($trknum) + ($56<<2)|0);
  $58 = $0;
  (_hio_read($57,1,1,$58)|0);
  $59 = $len;
  $60 = $59&255;
  $61 = (($trknum) + ($60<<2)|0);
  $62 = ((($61)) + 1|0);
  $63 = $0;
  (_hio_read($62,1,1,$63)|0);
  $64 = $len;
  $65 = $64&255;
  $66 = (($trknum) + ($65<<2)|0);
  $67 = ((($66)) + 2|0);
  $68 = $0;
  (_hio_read($67,1,1,$68)|0);
  $69 = $len;
  $70 = $69&255;
  $71 = (($trknum) + ($70<<2)|0);
  $72 = ((($71)) + 3|0);
  $73 = $0;
  (_hio_read($72,1,1,$73)|0);
  $74 = $len;
  $75 = $74&255;
  $76 = (($trknum) + ($75<<2)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)==(255);
  if ($79) {
   break;
  }
  $80 = $len;
  $81 = $80&255;
  $82 = (($trknum) + ($81<<2)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $max_trknum;
  $86 = $85&255;
  $87 = ($84|0)>($86|0);
  if ($87) {
   $88 = $len;
   $89 = $88&255;
   $90 = (($trknum) + ($89<<2)|0);
   $91 = HEAP8[$90>>0]|0;
   $max_trknum = $91;
  }
  $92 = $len;
  $93 = $92&255;
  $94 = (($trknum) + ($93<<2)|0);
  $95 = ((($94)) + 1|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $max_trknum;
  $99 = $98&255;
  $100 = ($97|0)>($99|0);
  if ($100) {
   $101 = $len;
   $102 = $101&255;
   $103 = (($trknum) + ($102<<2)|0);
   $104 = ((($103)) + 1|0);
   $105 = HEAP8[$104>>0]|0;
   $max_trknum = $105;
  }
  $106 = $len;
  $107 = $106&255;
  $108 = (($trknum) + ($107<<2)|0);
  $109 = ((($108)) + 2|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = $max_trknum;
  $113 = $112&255;
  $114 = ($111|0)>($113|0);
  if ($114) {
   $115 = $len;
   $116 = $115&255;
   $117 = (($trknum) + ($116<<2)|0);
   $118 = ((($117)) + 2|0);
   $119 = HEAP8[$118>>0]|0;
   $max_trknum = $119;
  }
  $120 = $len;
  $121 = $120&255;
  $122 = (($trknum) + ($121<<2)|0);
  $123 = ((($122)) + 3|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = $max_trknum;
  $127 = $126&255;
  $128 = ($125|0)>($127|0);
  if ($128) {
   $129 = $len;
   $130 = $129&255;
   $131 = (($trknum) + ($130<<2)|0);
   $132 = ((($131)) + 3|0);
   $133 = HEAP8[$132>>0]|0;
   $max_trknum = $133;
  }
  $134 = $len;
  $135 = (($134) + 1)<<24>>24;
  $len = $135;
 }
 $136 = $1;
 $137 = $len;
 _write8($136,$137);
 $138 = $1;
 _write8($138,127);
 $c5 = 0;
 $i = 0;
 while(1) {
  $139 = $i;
  $140 = $len;
  $141 = $140&255;
  $142 = ($139|0)<($141|0);
  if (!($142)) {
   break;
  }
  $143 = $i;
  $144 = ($143|0)==(0);
  if ($144) {
   $145 = $c5;
   HEAP8[$plist>>0] = $145;
   $146 = $c5;
   $147 = (($146) + 1)<<24>>24;
   $c5 = $147;
  } else {
   $j = 0;
   while(1) {
    $148 = $j;
    $149 = $i;
    $150 = ($148|0)<($149|0);
    if (!($150)) {
     break;
    }
    $status = 1;
    $k = 0;
    while(1) {
     $151 = $k;
     $152 = ($151|0)<(4);
     if (!($152)) {
      break;
     }
     $153 = $k;
     $154 = $j;
     $155 = (($trknum) + ($154<<2)|0);
     $156 = (($155) + ($153)|0);
     $157 = HEAP8[$156>>0]|0;
     $158 = $157&255;
     $159 = $k;
     $160 = $i;
     $161 = (($trknum) + ($160<<2)|0);
     $162 = (($161) + ($159)|0);
     $163 = HEAP8[$162>>0]|0;
     $164 = $163&255;
     $165 = ($158|0)!=($164|0);
     if ($165) {
      label = 28;
      break;
     }
     $166 = $k;
     $167 = (($166) + 1)|0;
     $k = $167;
    }
    if ((label|0) == 28) {
     label = 0;
     $status = 0;
    }
    $168 = $status;
    $169 = $168&255;
    $170 = ($169|0)==(1);
    $171 = $j;
    if ($170) {
     label = 31;
     break;
    }
    $176 = (($171) + 1)|0;
    $j = $176;
   }
   if ((label|0) == 31) {
    label = 0;
    $172 = (($plist) + ($171)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $i;
    $175 = (($plist) + ($174)|0);
    HEAP8[$175>>0] = $173;
   }
   $177 = $status;
   $178 = $177&255;
   $179 = ($178|0)==(0);
   if ($179) {
    $180 = $c5;
    $181 = $i;
    $182 = (($plist) + ($181)|0);
    HEAP8[$182>>0] = $180;
    $183 = $c5;
    $184 = (($183) + 1)<<24>>24;
    $c5 = $184;
   }
   $status = 1;
  }
  $185 = $i;
  $186 = (($185) + 1)|0;
  $i = $186;
 }
 $c1 = 0;
 $i = 0;
 while(1) {
  $187 = $i;
  $188 = $len;
  $189 = $188&255;
  $190 = ($187|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $i;
  $192 = ($191|0)==(0);
  if ($192) {
   $193 = $i;
   $194 = (($trknum) + ($193<<2)|0);
   $195 = HEAP8[$194>>0]|0;
   $196 = $c1;
   $197 = $196&255;
   $198 = (($real_tnum) + ($197<<2)|0);
   HEAP8[$198>>0] = $195;
   $199 = $i;
   $200 = (($trknum) + ($199<<2)|0);
   $201 = ((($200)) + 1|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $c1;
   $204 = $203&255;
   $205 = (($real_tnum) + ($204<<2)|0);
   $206 = ((($205)) + 1|0);
   HEAP8[$206>>0] = $202;
   $207 = $i;
   $208 = (($trknum) + ($207<<2)|0);
   $209 = ((($208)) + 2|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $c1;
   $212 = $211&255;
   $213 = (($real_tnum) + ($212<<2)|0);
   $214 = ((($213)) + 2|0);
   HEAP8[$214>>0] = $210;
   $215 = $i;
   $216 = (($trknum) + ($215<<2)|0);
   $217 = ((($216)) + 3|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $c1;
   $220 = $219&255;
   $221 = (($real_tnum) + ($220<<2)|0);
   $222 = ((($221)) + 3|0);
   HEAP8[$222>>0] = $218;
   $223 = $c1;
   $224 = (($223) + 1)<<24>>24;
   $c1 = $224;
  } else {
   $j = 0;
   while(1) {
    $225 = $j;
    $226 = $i;
    $227 = ($225|0)<($226|0);
    if (!($227)) {
     break;
    }
    $status = 1;
    $228 = $i;
    $229 = (($plist) + ($228)|0);
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = $j;
    $233 = (($plist) + ($232)|0);
    $234 = HEAP8[$233>>0]|0;
    $235 = $234&255;
    $236 = ($231|0)==($235|0);
    if ($236) {
     label = 44;
     break;
    }
    $237 = $j;
    $238 = (($237) + 1)|0;
    $j = $238;
   }
   if ((label|0) == 44) {
    label = 0;
    $status = 0;
   }
   $239 = $status;
   $240 = $239&255;
   $241 = ($240|0)==(0);
   if (!($241)) {
    $242 = $i;
    $243 = (($trknum) + ($242<<2)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $c1;
    $246 = $245&255;
    $247 = (($real_tnum) + ($246<<2)|0);
    HEAP8[$247>>0] = $244;
    $248 = $i;
    $249 = (($trknum) + ($248<<2)|0);
    $250 = ((($249)) + 1|0);
    $251 = HEAP8[$250>>0]|0;
    $252 = $c1;
    $253 = $252&255;
    $254 = (($real_tnum) + ($253<<2)|0);
    $255 = ((($254)) + 1|0);
    HEAP8[$255>>0] = $251;
    $256 = $i;
    $257 = (($trknum) + ($256<<2)|0);
    $258 = ((($257)) + 2|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = $c1;
    $261 = $260&255;
    $262 = (($real_tnum) + ($261<<2)|0);
    $263 = ((($262)) + 2|0);
    HEAP8[$263>>0] = $259;
    $264 = $i;
    $265 = (($trknum) + ($264<<2)|0);
    $266 = ((($265)) + 3|0);
    $267 = HEAP8[$266>>0]|0;
    $268 = $c1;
    $269 = $268&255;
    $270 = (($real_tnum) + ($269<<2)|0);
    $271 = ((($270)) + 3|0);
    HEAP8[$271>>0] = $267;
    $272 = $c1;
    $273 = (($272) + 1)<<24>>24;
    $c1 = $273;
    $status = 1;
   }
  }
  $274 = $i;
  $275 = (($274) + 1)|0;
  $i = $275;
 }
 $276 = $1;
 (_fwrite(($plist|0),128,1,($276|0))|0);
 $277 = $1;
 _write32b($277,1294879534);
 $i = 0;
 while(1) {
  $278 = $i;
  $279 = $c5;
  $280 = $279&255;
  $281 = ($278|0)<($280|0);
  if (!($281)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  _memset(($tdata|0),0,768)|0;
  $k = 0;
  while(1) {
   $282 = $k;
   $283 = ($282|0)<(4);
   if (!($283)) {
    break;
   }
   $284 = $0;
   $285 = $k;
   $286 = $i;
   $287 = (($real_tnum) + ($286<<2)|0);
   $288 = (($287) + ($285)|0);
   $289 = HEAP8[$288>>0]|0;
   $290 = $289&255;
   $291 = ($290*192)|0;
   $292 = (1536 + ($291))|0;
   (_hio_seek($284,$292,0)|0);
   $293 = $k;
   $294 = (($tdata) + (($293*192)|0)|0);
   $295 = $0;
   (_hio_read($294,192,1,$295)|0);
   $296 = $k;
   $297 = (($296) + 1)|0;
   $k = $297;
  }
  $j = 0;
  while(1) {
   $298 = $j;
   $299 = ($298|0)<(64);
   if (!($299)) {
    break;
   }
   $300 = $j;
   $301 = $300<<4;
   $x = $301;
   $k = 0;
   while(1) {
    $302 = $k;
    $303 = ($302|0)<(4);
    $304 = $j;
    if (!($303)) {
     break;
    }
    $305 = ($304*3)|0;
    $306 = $k;
    $307 = (($tdata) + (($306*192)|0)|0);
    $308 = (($307) + ($305)|0);
    $t = $308;
    $309 = $x;
    $310 = (($tmp) + ($309)|0);
    $311 = $k;
    $312 = $311<<2;
    $313 = (($310) + ($312)|0);
    $314 = $t;
    $315 = HEAP8[$314>>0]|0;
    $316 = $315&255;
    $317 = (7848 + ($316<<1)|0);
    ;HEAP8[$313>>0]=HEAP8[$317>>0]|0;HEAP8[$313+1>>0]=HEAP8[$317+1>>0]|0;
    $318 = $t;
    $319 = ((($318)) + 1|0);
    $320 = HEAP8[$319>>0]|0;
    $321 = $320&255;
    $322 = $321 & 15;
    $323 = ($322|0)==(13);
    if ($323) {
     $324 = $t;
     $325 = ((($324)) + 1|0);
     $326 = HEAP8[$325>>0]|0;
     $327 = $326&255;
     $328 = (($327) - 3)|0;
     $329 = $328&255;
     HEAP8[$325>>0] = $329;
    }
    $330 = $x;
    $331 = (($tmp) + ($330)|0);
    $332 = $k;
    $333 = $332<<2;
    $334 = (($331) + ($333)|0);
    $335 = ((($334)) + 2|0);
    $336 = $t;
    $337 = ((($336)) + 1|0);
    ;HEAP8[$335>>0]=HEAP8[$337>>0]|0;HEAP8[$335+1>>0]=HEAP8[$337+1>>0]|0;
    $338 = $k;
    $339 = (($338) + 1)|0;
    $k = $339;
   }
   $340 = (($304) + 1)|0;
   $j = $340;
  }
  $341 = $1;
  (_fwrite(($tmp|0),1024,1,($341|0))|0);
  $342 = $i;
  $343 = (($342) + 1)|0;
  $i = $343;
 }
 $344 = $0;
 $345 = $max_trknum;
 $346 = $345&255;
 $347 = (($346) + 1)|0;
 $348 = ($347*192)|0;
 $349 = (1536 + ($348))|0;
 (_hio_seek($344,$349,0)|0);
 $350 = $1;
 $351 = $0;
 $352 = $ssize;
 (_pw_move_data($350,$351,$352)|0);
 STACKTOP = sp;return 0;
}
function _test_mp_id($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $or$cond = 0, $pat = 0, $psize = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $1;
 $5 = (_readmem32b($4)|0);
 $6 = ($5|0)!=(1414679345);
 if ($6) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(31);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $9<<3;
  $11 = (6 + ($10))|0;
  $12 = $1;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)>(15);
  if ($16) {
   label = 6;
   break;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $19 = $1;
 $20 = ((($19)) + 252|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $len = $22;
 $23 = $len;
 $24 = ($23|0)==(0);
 $25 = $len;
 $26 = ($25|0)>(127);
 $or$cond = $24 | $26;
 if ($or$cond) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $psize = 0;
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = ($27|0)<(128);
  if (!($28)) {
   break;
  }
  $29 = $i;
  $30 = (254 + ($29))|0;
  $31 = $1;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $pat = $34;
  $35 = $pat;
  $36 = ($35|0)>(127);
  if ($36) {
   label = 13;
   break;
  }
  $37 = $pat;
  $38 = $psize;
  $39 = ($37|0)>($38|0);
  if ($39) {
   $40 = $pat;
   $psize = $40;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $43 = $psize;
 $44 = (($43) + 1)|0;
 $psize = $44;
 $45 = $psize;
 $46 = $45 << 8;
 $psize = $46;
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = $psize;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   label = 22;
   break;
  }
  $50 = $i;
  $51 = $50<<2;
  $52 = (382 + ($51))|0;
  $53 = $1;
  $54 = (($53) + ($52)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $x = $56;
  $57 = $x;
  $58 = ($57|0)>(19);
  if ($58) {
   label = 20;
   break;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 if ((label|0) == 20) {
  $0 = -1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 22) {
  $61 = $2;
  _pw_read_title(0,$61,0);
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _depack_mp($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $c1 = 0, $i = 0, $max = 0, $ptable = 0, $size = 0, $ssize = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 $4 = (_hio_read32b($3)|0);
 $5 = ($4|0)!=(1414679345);
 if ($5) {
  $6 = $0;
  (_hio_seek($6,-4,1)|0);
 }
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = ($7|0)<(31);
  $9 = $1;
  if (!($8)) {
   break;
  }
  (_pw_write_zero($9,22)|0);
  $10 = $1;
  $11 = $0;
  $12 = (_hio_read16b($11)|0);
  $13 = $12&65535;
  $size = $13;
  $14 = $13&65535;
  _write16b($10,$14);
  $15 = $size;
  $16 = $15<<1;
  $17 = $ssize;
  $18 = (($17) + ($16))|0;
  $ssize = $18;
  $19 = $1;
  $20 = $0;
  $21 = (_hio_read8($20)|0);
  _write8($19,$21);
  $22 = $1;
  $23 = $0;
  $24 = (_hio_read8($23)|0);
  _write8($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  _write16b($25,$27);
  $28 = $1;
  $29 = $0;
  $30 = (_hio_read16b($29)|0);
  _write16b($28,$30);
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $0;
 $34 = (_hio_read8($33)|0);
 _write8($9,$34);
 $35 = $1;
 $36 = $0;
 $37 = (_hio_read8($36)|0);
 _write8($35,$37);
 $i = 0;
 $max = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(128);
  if (!($39)) {
   break;
  }
  $40 = $1;
  $41 = $0;
  $42 = (_hio_read8($41)|0);
  $c1 = $42;
  _write8($40,$42);
  $43 = $c1;
  $44 = $43&255;
  $45 = $max;
  $46 = $45&255;
  $47 = ($44|0)>($46|0);
  if ($47) {
   $48 = $c1;
   $max = $48;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $max;
 $52 = (($51) + 1)<<24>>24;
 $max = $52;
 $53 = $1;
 _write32b($53,1294879534);
 $54 = $0;
 $55 = (_hio_read32b($54)|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  $58 = $1;
  $59 = $0;
  $60 = $max;
  $61 = $60&255;
  $62 = $61<<10;
  (_pw_move_data($58,$59,$62)|0);
  $63 = $1;
  $64 = $0;
  $65 = $ssize;
  (_pw_move_data($63,$64,$65)|0);
  STACKTOP = sp;return 0;
 }
 $57 = $0;
 (_hio_seek($57,-4,1)|0);
 $58 = $1;
 $59 = $0;
 $60 = $max;
 $61 = $60&255;
 $62 = $61<<10;
 (_pw_move_data($58,$59,$62)|0);
 $63 = $1;
 $64 = $0;
 $65 = $ssize;
 (_pw_move_data($63,$64,$65)|0);
 STACKTOP = sp;return 0;
}
function _test_mp_noid($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $d1 = 0, $d3 = 0, $data2 = 0;
 var $hdr_ssize = 0, $i = 0, $len = 0, $lend = 0, $lsize = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pat = 0, $psize = 0, $size = 0, $size4 = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $hdr_ssize = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   label = 15;
   break;
  }
  $6 = $1;
  $7 = $i;
  $8 = $7<<3;
  $9 = (($6) + ($8)|0);
  $d = $9;
  $10 = $d;
  $11 = (_readmem16b($10)|0);
  $12 = $11&65535;
  $13 = $12 << 1;
  $size = $13;
  $14 = $d;
  $15 = ((($14)) + 4|0);
  $16 = (_readmem16b($15)|0);
  $17 = $16&65535;
  $18 = $17 << 1;
  $start = $18;
  $19 = $d;
  $20 = ((($19)) + 6|0);
  $21 = (_readmem16b($20)|0);
  $22 = $21&65535;
  $23 = $22 << 1;
  $lsize = $23;
  $24 = $size;
  $25 = $hdr_ssize;
  $26 = (($25) + ($24))|0;
  $hdr_ssize = $26;
  $27 = $d;
  $28 = ((($27)) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)>(15);
  if ($31) {
   label = 4;
   break;
  }
  $32 = $lsize;
  $33 = ($32|0)!=(2);
  if ($33) {
   $34 = $start;
   $35 = $lsize;
   $36 = (($34) + ($35))|0;
   $37 = $size;
   $38 = ($36|0)>($37|0);
   if ($38) {
    label = 7;
    break;
   }
  }
  $39 = $lsize;
  $40 = $size;
  $41 = (($40) + 2)|0;
  $42 = ($39|0)>($41|0);
  if ($42) {
   label = 9;
   break;
  }
  $43 = $start;
  $44 = ($43|0)!=(0);
  $45 = $lsize;
  $46 = ($45|0)<=(2);
  $or$cond = $44 & $46;
  if ($or$cond) {
   label = 11;
   break;
  }
  $47 = $size;
  $48 = ($47|0)!=(0);
  $49 = $lsize;
  $50 = ($49|0)==(0);
  $or$cond3 = $48 & $50;
  if ($or$cond3) {
   label = 13;
   break;
  }
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 9) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 13) {
  $0 = -1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 else if ((label|0) == 15) {
  $53 = $hdr_ssize;
  $54 = ($53|0)<=(2);
  if ($54) {
   $0 = -1;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  }
  $55 = $1;
  $56 = ((($55)) + 248|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $len = $58;
  $59 = $len;
  $60 = ($59|0)==(0);
  $61 = $len;
  $62 = ($61|0)>(127);
  $or$cond5 = $60 | $62;
  if ($or$cond5) {
   $0 = -1;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  }
  $psize = 0;
  $i = 0;
  while(1) {
   $63 = $i;
   $64 = ($63|0)<(128);
   if (!($64)) {
    label = 28;
    break;
   }
   $65 = $i;
   $66 = (250 + ($65))|0;
   $67 = $1;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $pat = $70;
   $71 = $pat;
   $72 = ($71|0)>(127);
   if ($72) {
    label = 22;
    break;
   }
   $73 = $pat;
   $74 = $psize;
   $75 = ($73|0)>($74|0);
   if ($75) {
    $76 = $pat;
    $psize = $76;
   }
   $77 = $i;
   $78 = $len;
   $79 = (($78) + 3)|0;
   $80 = ($77|0)>($79|0);
   $81 = $pat;
   $82 = ($81|0)!=(0);
   $or$cond7 = $80 & $82;
   if ($or$cond7) {
    label = 26;
    break;
   }
   $83 = $i;
   $84 = (($83) + 1)|0;
   $i = $84;
  }
  if ((label|0) == 22) {
   $0 = -1;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  }
  else if ((label|0) == 26) {
   $0 = -1;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  }
  else if ((label|0) == 28) {
   $85 = $psize;
   $86 = (($85) + 1)|0;
   $psize = $86;
   $87 = $psize;
   $88 = $87 << 8;
   $psize = $88;
   $89 = $3;
   $90 = $psize;
   $91 = $90<<2;
   $92 = (378 + ($91))|0;
   $93 = ($89|0)<($92|0);
   if ($93) {
    $94 = $psize;
    $95 = $94<<2;
    $96 = (378 + ($95))|0;
    $97 = $3;
    $98 = (($96) - ($97))|0;
    $0 = $98;
    $155 = $0;
    STACKTOP = sp;return ($155|0);
   }
   $i = 0;
   while(1) {
    $99 = $i;
    $100 = $psize;
    $101 = ($99|0)<($100|0);
    if (!($101)) {
     label = 39;
     break;
    }
    $102 = $1;
    $103 = ((($102)) + 378|0);
    $104 = $i;
    $105 = $104<<2;
    $106 = (($103) + ($105)|0);
    $d1 = $106;
    $107 = $d1;
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = ($109|0)>(19);
    if ($110) {
     $111 = $d1;
     $112 = HEAP8[$111>>0]|0;
     $113 = $112&255;
     $114 = ($113|0)!=(74);
     if ($114) {
      label = 34;
      break;
     }
    }
    $115 = $d1;
    $116 = (_readmem16b($115)|0);
    $117 = $116&65535;
    $118 = $117 & 4095;
    $119 = $118&65535;
    $data2 = $119;
    $120 = $data2;
    $121 = $120&65535;
    $122 = ($121|0)>(0);
    if ($122) {
     $123 = $data2;
     $124 = $123&65535;
     $125 = ($124|0)<(113);
     if ($125) {
      label = 37;
      break;
     }
    }
    $126 = $i;
    $127 = (($126) + 1)|0;
    $i = $127;
   }
   if ((label|0) == 34) {
    $0 = -1;
    $155 = $0;
    STACKTOP = sp;return ($155|0);
   }
   else if ((label|0) == 37) {
    $0 = -1;
    $155 = $0;
    STACKTOP = sp;return ($155|0);
   }
   else if ((label|0) == 39) {
    $i = 0;
    while(1) {
     $128 = $i;
     $129 = ($128|0)<(31);
     if (!($129)) {
      label = 44;
      break;
     }
     $130 = $1;
     $131 = $i;
     $132 = $131<<3;
     $133 = (($130) + ($132)|0);
     $d3 = $133;
     $134 = $d3;
     $135 = (_readmem16b($134)|0);
     $136 = $135&65535;
     $137 = $136 << 1;
     $size4 = $137;
     $138 = $d3;
     $139 = ((($138)) + 4|0);
     $140 = (_readmem16b($139)|0);
     $141 = $140&65535;
     $142 = $d3;
     $143 = ((($142)) + 6|0);
     $144 = (_readmem16b($143)|0);
     $145 = $144&65535;
     $146 = (($141) + ($145))|0;
     $147 = $146 << 1;
     $lend = $147;
     $148 = $lend;
     $149 = $size4;
     $150 = (($149) + 2)|0;
     $151 = ($148|0)>($150|0);
     if ($151) {
      label = 42;
      break;
     }
     $152 = $i;
     $153 = (($152) + 1)|0;
     $i = $153;
    }
    if ((label|0) == 42) {
     $0 = -1;
     $155 = $0;
     STACKTOP = sp;return ($155|0);
    }
    else if ((label|0) == 44) {
     $154 = $2;
     _pw_read_title(0,$154,0);
     $0 = 0;
     $155 = $0;
     STACKTOP = sp;return ($155|0);
    }
   }
  }
 }
 return (0)|0;
}
function _test_np1($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $hdr_size = 0, $i = 0, $len = 0, $lsize = 0, $max_pptr = 0, $num_ins = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pptr = 0, $ptab_size = 0;
 var $ssize = 0, $start = 0, $trk_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = $3;
  $7 = (10 - ($6))|0;
  $0 = $7;
  $184 = $0;
  STACKTOP = sp;return ($184|0);
 }
 $8 = $1;
 $9 = ((($8)) + 2|0);
 $10 = (_readmem16b($9)|0);
 $11 = $10&65535;
 $ptab_size = $11;
 $12 = $ptab_size;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = $ptab_size;
  $15 = $14 & 1;
  $16 = ($15|0)!=(0);
  $17 = $ptab_size;
  $18 = ($17|0)>(255);
  $or$cond = $16 | $18;
  if (!($or$cond)) {
   $19 = $1;
   $20 = ((($19)) + 1|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 & 15;
   $24 = ($23|0)!=(12);
   if ($24) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $25 = $1;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $27 << 4;
   $29 = $28 & 240;
   $30 = $1;
   $31 = ((($30)) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 >> 4;
   $35 = $34 & 15;
   $36 = $29 | $35;
   $num_ins = $36;
   $37 = $num_ins;
   $38 = ($37|0)==(0);
   $39 = $num_ins;
   $40 = ($39|0)>(31);
   $or$cond3 = $38 | $40;
   if ($or$cond3) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $41 = $3;
   $42 = $num_ins;
   $43 = $42<<4;
   $44 = (15 + ($43))|0;
   $45 = ($41|0)<($44|0);
   if ($45) {
    $46 = $num_ins;
    $47 = $46<<4;
    $48 = (15 + ($47))|0;
    $49 = $3;
    $50 = (($48) - ($49))|0;
    $0 = $50;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = $num_ins;
    $53 = ($51|0)<($52|0);
    if (!($53)) {
     break;
    }
    $54 = $i;
    $55 = $54<<4;
    $56 = (15 + ($55))|0;
    $57 = $1;
    $58 = (($57) + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = ($60|0)>(64);
    if ($61) {
     label = 15;
     break;
    }
    $62 = $i;
    $63 = (($62) + 1)|0;
    $i = $63;
   }
   if ((label|0) == 15) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   $ssize = 0;
   $i = 0;
   while(1) {
    $64 = $i;
    $65 = $num_ins;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     label = 26;
     break;
    }
    $67 = $1;
    $68 = $i;
    $69 = $68<<4;
    $70 = (($67) + ($69)|0);
    $d = $70;
    $71 = $d;
    $72 = ((($71)) + 12|0);
    $73 = (_readmem16b($72)|0);
    $74 = $73&65535;
    $75 = $74 << 1;
    $len = $75;
    $76 = $d;
    $77 = ((($76)) + 20|0);
    $78 = (_readmem16b($77)|0);
    $79 = $78&65535;
    $80 = $79 << 1;
    $start = $80;
    $81 = $d;
    $82 = ((($81)) + 22|0);
    $83 = (_readmem16b($82)|0);
    $84 = $83&65535;
    $lsize = $84;
    $85 = $len;
    $86 = ($85|0)>(65535);
    $87 = $start;
    $88 = ($87|0)>(65535);
    $or$cond5 = $86 | $88;
    $89 = $lsize;
    $90 = ($89|0)>(65535);
    $or$cond7 = $or$cond5 | $90;
    if ($or$cond7) {
     label = 20;
     break;
    }
    $91 = $start;
    $92 = $lsize;
    $93 = (($91) + ($92))|0;
    $94 = $len;
    $95 = (($94) + 2)|0;
    $96 = ($93|0)>($95|0);
    if ($96) {
     label = 22;
     break;
    }
    $97 = $start;
    $98 = ($97|0)==(0);
    $99 = $lsize;
    $100 = ($99|0)!=(0);
    $or$cond9 = $98 & $100;
    if ($or$cond9) {
     label = 24;
     break;
    }
    $101 = $len;
    $102 = $ssize;
    $103 = (($102) + ($101))|0;
    $ssize = $103;
    $104 = $i;
    $105 = (($104) + 1)|0;
    $i = $105;
   }
   if ((label|0) == 20) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   else if ((label|0) == 22) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   else if ((label|0) == 24) {
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
   else if ((label|0) == 26) {
    $106 = $ssize;
    $107 = ($106|0)<=(4);
    if ($107) {
     $0 = -1;
     $184 = $0;
     STACKTOP = sp;return ($184|0);
    }
    $108 = $num_ins;
    $109 = $108<<4;
    $110 = (($109) + 8)|0;
    $111 = (($110) + 4)|0;
    $hdr_size = $111;
    $112 = $3;
    $113 = $hdr_size;
    $114 = $ptab_size;
    $115 = (($113) + ($114))|0;
    $116 = (($115) + 2)|0;
    $117 = ($112|0)<($116|0);
    if ($117) {
     $118 = $hdr_size;
     $119 = $ptab_size;
     $120 = (($118) + ($119))|0;
     $121 = (($120) + 2)|0;
     $122 = $3;
     $123 = (($121) - ($122))|0;
     $0 = $123;
     $184 = $0;
     STACKTOP = sp;return ($184|0);
    }
    $max_pptr = 0;
    $i = 0;
    while(1) {
     $124 = $i;
     $125 = $ptab_size;
     $126 = ($124|0)<($125|0);
     if (!($126)) {
      break;
     }
     $127 = $1;
     $128 = $hdr_size;
     $129 = (($127) + ($128)|0);
     $130 = $i;
     $131 = (($129) + ($130)|0);
     $132 = (_readmem16b($131)|0);
     $133 = $132&65535;
     $pptr = $133;
     $134 = $pptr;
     $135 = $134 & 7;
     $136 = ($135|0)!=(0);
     $137 = $pptr;
     $138 = ($137|0)>=(1024);
     $or$cond11 = $136 | $138;
     if ($or$cond11) {
      label = 33;
      break;
     }
     $139 = $pptr;
     $140 = $max_pptr;
     $141 = ($139|0)>($140|0);
     if ($141) {
      $142 = $pptr;
      $max_pptr = $142;
     }
     $143 = $i;
     $144 = (($143) + 2)|0;
     $i = $144;
    }
    if ((label|0) == 33) {
     $0 = -1;
     $184 = $0;
     STACKTOP = sp;return ($184|0);
    }
    $145 = $ptab_size;
    $146 = $max_pptr;
    $147 = (($145) + ($146))|0;
    $148 = (($147) + 8)|0;
    $149 = $hdr_size;
    $150 = (($149) + ($148))|0;
    $hdr_size = $150;
    $151 = $1;
    $152 = ((($151)) + 6|0);
    $153 = (_readmem16b($152)|0);
    $154 = $153&65535;
    $trk_size = $154;
    $155 = $trk_size;
    $156 = ($155|0)<(192);
    if (!($156)) {
     $157 = $trk_size;
     $158 = $157 & 63;
     $159 = ($158|0)!=(0);
     if (!($159)) {
      $160 = $3;
      $161 = $hdr_size;
      $162 = $trk_size;
      $163 = (($161) + ($162))|0;
      $164 = ($160|0)<($163|0);
      if ($164) {
       $165 = $hdr_size;
       $166 = $trk_size;
       $167 = (($165) + ($166))|0;
       $168 = $3;
       $169 = (($167) - ($168))|0;
       $0 = $169;
       $184 = $0;
       STACKTOP = sp;return ($184|0);
      }
      $i = 0;
      while(1) {
       $170 = $i;
       $171 = $trk_size;
       $172 = ($170|0)<($171|0);
       if (!($172)) {
        label = 47;
        break;
       }
       $173 = $hdr_size;
       $174 = $i;
       $175 = (($173) + ($174))|0;
       $176 = $1;
       $177 = (($176) + ($175)|0);
       $178 = HEAP8[$177>>0]|0;
       $179 = $178&255;
       $180 = ($179|0)>(73);
       if ($180) {
        label = 45;
        break;
       }
       $181 = $i;
       $182 = (($181) + 3)|0;
       $i = $182;
      }
      if ((label|0) == 45) {
       $0 = -1;
       $184 = $0;
       STACKTOP = sp;return ($184|0);
      }
      else if ((label|0) == 47) {
       $183 = $2;
       _pw_read_title(0,$183,0);
       $0 = 0;
       $184 = $0;
       STACKTOP = sp;return ($184|0);
      }
     }
    }
    $0 = -1;
    $184 = $0;
    STACKTOP = sp;return ($184|0);
   }
  }
 }
 $0 = -1;
 $184 = $0;
 STACKTOP = sp;return ($184|0);
}
function _depack_np1($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $max_addr = 0, $nins = 0;
 var $npat = 0, $ptable = 0, $size = 0, $ssize = 0, $tmp = 0, $trk_addr = 0, $trk_start = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2240|0;
 $ptable = sp + 2104|0;
 $trk_addr = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk_addr|0),0,2048)|0;
 $2 = $0;
 $3 = (_hio_read8($2)|0);
 $c1 = $3;
 $4 = $0;
 $5 = (_hio_read8($4)|0);
 $c2 = $5;
 $6 = $c1;
 $7 = $6&255;
 $8 = $7 << 4;
 $9 = $8 & 240;
 $10 = $c2;
 $11 = $10&255;
 $12 = $11 >> 4;
 $13 = $12 & 15;
 $14 = $9 | $13;
 $nins = $14;
 $15 = $1;
 (_pw_write_zero($15,20)|0);
 $16 = $0;
 $17 = (_hio_read16b($16)|0);
 $18 = $17&65535;
 $19 = $18 >> 1;
 $len = $19;
 $20 = $0;
 (_hio_read16b($20)|0);
 $21 = $0;
 (_hio_read16b($21)|0);
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $nins;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $0;
  (_hio_read32b($25)|0);
  $26 = $1;
  (_pw_write_zero($26,22)|0);
  $27 = $1;
  $28 = $0;
  $29 = (_hio_read16b($28)|0);
  $30 = $29&65535;
  $size = $30;
  $31 = $30&65535;
  _write16b($27,$31);
  $32 = $size;
  $33 = $32<<1;
  $34 = $ssize;
  $35 = (($34) + ($33))|0;
  $ssize = $35;
  $36 = $1;
  $37 = $0;
  $38 = (_hio_read8($37)|0);
  _write8($36,$38);
  $39 = $1;
  $40 = $0;
  $41 = (_hio_read8($40)|0);
  _write8($39,$41);
  $42 = $0;
  (_hio_read32b($42)|0);
  $43 = $0;
  $44 = (_hio_read16b($43)|0);
  $45 = $44&65535;
  $size = $45;
  $46 = $1;
  $47 = $0;
  $48 = (_hio_read16b($47)|0);
  $49 = $48&65535;
  $50 = (($49|0) / 2)&-1;
  $51 = $50&65535;
  _write16b($46,$51);
  $52 = $1;
  $53 = $size;
  $54 = $53&65535;
  _write16b($52,$54);
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $57 = ((($tmp)) + 29|0);
 HEAP8[$57>>0] = 1;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(31);
  if (!($59)) {
   break;
  }
  $60 = $1;
  (_fwrite(($tmp|0),30,1,($60|0))|0);
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = $1;
 $64 = $len;
 $65 = $64&255;
 _write8($63,$65);
 $66 = $1;
 _write8($66,127);
 $67 = $0;
 (_hio_seek($67,2,1)|0);
 $68 = $0;
 (_hio_seek($68,2,1)|0);
 $npat = 0;
 $i = 0;
 while(1) {
  $69 = $i;
  $70 = $len;
  $71 = ($69|0)<($70|0);
  if (!($71)) {
   break;
  }
  $72 = $0;
  $73 = (_hio_read16b($72)|0);
  $74 = $73&65535;
  $75 = $74 >> 3;
  $76 = $75&255;
  $77 = $i;
  $78 = (($ptable) + ($77)|0);
  HEAP8[$78>>0] = $76;
  $79 = $i;
  $80 = (($ptable) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $npat;
  $84 = ($82|0)>($83|0);
  if ($84) {
   $85 = $i;
   $86 = (($ptable) + ($85)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $npat = $88;
  }
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 $91 = $npat;
 $92 = (($91) + 1)|0;
 $npat = $92;
 $93 = $1;
 (_fwrite(($ptable|0),128,1,($93|0))|0);
 $94 = $1;
 _write32b($94,1294879534);
 $max_addr = 0;
 $i = 0;
 while(1) {
  $95 = $i;
  $96 = $npat;
  $97 = ($95|0)<($96|0);
  $98 = $0;
  if (!($97)) {
   break;
  }
  $99 = (_hio_read16b($98)|0);
  $100 = $99&65535;
  $101 = $i;
  $102 = (($trk_addr) + ($101<<4)|0);
  HEAP32[$102>>2] = $100;
  $103 = $max_addr;
  $104 = ($100|0)>($103|0);
  if ($104) {
   $105 = $i;
   $106 = (($trk_addr) + ($105<<4)|0);
   $107 = HEAP32[$106>>2]|0;
   $max_addr = $107;
  }
  $108 = $0;
  $109 = (_hio_read16b($108)|0);
  $110 = $109&65535;
  $111 = $i;
  $112 = (($trk_addr) + ($111<<4)|0);
  $113 = ((($112)) + 4|0);
  HEAP32[$113>>2] = $110;
  $114 = $max_addr;
  $115 = ($110|0)>($114|0);
  if ($115) {
   $116 = $i;
   $117 = (($trk_addr) + ($116<<4)|0);
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $max_addr = $119;
  }
  $120 = $0;
  $121 = (_hio_read16b($120)|0);
  $122 = $121&65535;
  $123 = $i;
  $124 = (($trk_addr) + ($123<<4)|0);
  $125 = ((($124)) + 8|0);
  HEAP32[$125>>2] = $122;
  $126 = $max_addr;
  $127 = ($122|0)>($126|0);
  if ($127) {
   $128 = $i;
   $129 = (($trk_addr) + ($128<<4)|0);
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $max_addr = $131;
  }
  $132 = $0;
  $133 = (_hio_read16b($132)|0);
  $134 = $133&65535;
  $135 = $i;
  $136 = (($trk_addr) + ($135<<4)|0);
  $137 = ((($136)) + 12|0);
  HEAP32[$137>>2] = $134;
  $138 = $max_addr;
  $139 = ($134|0)>($138|0);
  if ($139) {
   $140 = $i;
   $141 = (($trk_addr) + ($140<<4)|0);
   $142 = ((($141)) + 12|0);
   $143 = HEAP32[$142>>2]|0;
   $max_addr = $143;
  }
  $144 = $i;
  $145 = (($144) + 1)|0;
  $i = $145;
 }
 $146 = (_hio_tell($98)|0);
 $trk_start = $146;
 $i = 0;
 while(1) {
  $147 = $i;
  $148 = $npat;
  $149 = ($147|0)<($148|0);
  if (!($149)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $150 = $j;
   $151 = ($150|0)<(4);
   if (!($151)) {
    break;
   }
   $152 = $0;
   $153 = $trk_start;
   $154 = $j;
   $155 = (3 - ($154))|0;
   $156 = $i;
   $157 = (($trk_addr) + ($156<<4)|0);
   $158 = (($157) + ($155<<2)|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($153) + ($159))|0;
   (_hio_seek($152,$160,0)|0);
   $k = 0;
   while(1) {
    $161 = $k;
    $162 = ($161|0)<(64);
    if (!($162)) {
     break;
    }
    $163 = $k;
    $164 = $163<<4;
    $165 = $j;
    $166 = $165<<2;
    $167 = (($164) + ($166))|0;
    $x = $167;
    $168 = $0;
    $169 = (_hio_read8($168)|0);
    $c1 = $169;
    $170 = $0;
    $171 = (_hio_read8($170)|0);
    $c2 = $171;
    $172 = $0;
    $173 = (_hio_read8($172)|0);
    $c3 = $173;
    $174 = $c1;
    $175 = $174&255;
    $176 = $175 & 254;
    $177 = (($176|0) / 2)&-1;
    $178 = $177&255;
    $c4 = $178;
    $179 = $c1;
    $180 = $179&255;
    $181 = $180 << 4;
    $182 = $181 & 16;
    $183 = $c4;
    $184 = $183&255;
    $185 = (7848 + ($184<<1)|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = $182 | $187;
    $189 = $188&255;
    $190 = $x;
    $191 = (($tmp) + ($190)|0);
    HEAP8[$191>>0] = $189;
    $192 = $c4;
    $193 = $192&255;
    $194 = (7848 + ($193<<1)|0);
    $195 = ((($194)) + 1|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = $x;
    $198 = (($197) + 1)|0;
    $199 = (($tmp) + ($198)|0);
    HEAP8[$199>>0] = $196;
    $200 = $c2;
    $201 = $200&255;
    $202 = $201 & 15;
    switch ($202|0) {
    case 7:  {
     $207 = $c2;
     $208 = $207&255;
     $209 = $208 & 240;
     $210 = (($209) + 10)|0;
     $211 = $210&255;
     $c2 = $211;
     label = 32;
     break;
    }
    case 8:  {
     $203 = $c2;
     $204 = $203&255;
     $205 = $204 & 240;
     $206 = $205&255;
     $c2 = $206;
     break;
    }
    case 5: case 6:  {
     label = 32;
     break;
    }
    case 11:  {
     $222 = $c3;
     $223 = $222&255;
     $224 = (($223) + 4)|0;
     $225 = (($224|0) / 2)&-1;
     $226 = $225&255;
     $c3 = $226;
     break;
    }
    default: {
    }
    }
    if ((label|0) == 32) {
     label = 0;
     $212 = $c3;
     $213 = $212&255;
     $214 = ($213|0)>(128);
     $215 = $c3;
     $216 = $215&255;
     $217 = (256 - ($216))|0;
     $218 = $216 << 4;
     $219 = $218 & 240;
     $220 = $214 ? $217 : $219;
     $221 = $220&255;
     $c3 = $221;
    }
    $227 = $c2;
    $228 = $x;
    $229 = (($228) + 2)|0;
    $230 = (($tmp) + ($229)|0);
    HEAP8[$230>>0] = $227;
    $231 = $c3;
    $232 = $x;
    $233 = (($232) + 3)|0;
    $234 = (($tmp) + ($233)|0);
    HEAP8[$234>>0] = $231;
    $235 = $k;
    $236 = (($235) + 1)|0;
    $k = $236;
   }
   $237 = $j;
   $238 = (($237) + 1)|0;
   $j = $238;
  }
  $239 = $1;
  (_fwrite(($tmp|0),1024,1,($239|0))|0);
  $240 = $i;
  $241 = (($240) + 1)|0;
  $i = $241;
 }
 $242 = $0;
 $243 = $max_addr;
 $244 = (($243) + 192)|0;
 $245 = $trk_start;
 $246 = (($244) + ($245))|0;
 (_hio_seek($242,$246,0)|0);
 $247 = $1;
 $248 = $0;
 $249 = $ssize;
 (_pw_move_data($247,$248,$249)|0);
 STACKTOP = sp;return 0;
}
function _test_np2($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $d1 = 0, $hdr_size = 0, $i = 0, $len = 0, $lsize = 0;
 var $max_pptr = 0, $num_ins = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pptr = 0, $ptab_size = 0, $ssize = 0, $start = 0, $trk_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = $3;
  $7 = (10 - ($6))|0;
  $0 = $7;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 $8 = $1;
 $9 = ((($8)) + 2|0);
 $10 = (_readmem16b($9)|0);
 $11 = $10&65535;
 $ptab_size = $11;
 $12 = $ptab_size;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = $ptab_size;
  $15 = $14 & 1;
  $16 = ($15|0)!=(0);
  $17 = $ptab_size;
  $18 = ($17|0)>(255);
  $or$cond = $16 | $18;
  if (!($or$cond)) {
   $19 = $1;
   $20 = ((($19)) + 1|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 & 15;
   $24 = ($23|0)!=(12);
   if ($24) {
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   $25 = $1;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $27 << 4;
   $29 = $28 & 240;
   $30 = $1;
   $31 = ((($30)) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 >> 4;
   $35 = $34 & 15;
   $36 = $29 | $35;
   $num_ins = $36;
   $37 = $num_ins;
   $38 = ($37|0)==(0);
   $39 = $num_ins;
   $40 = ($39|0)>(31);
   $or$cond3 = $38 | $40;
   if ($or$cond3) {
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   $41 = $3;
   $42 = $num_ins;
   $43 = $42<<4;
   $44 = (15 + ($43))|0;
   $45 = ($41|0)<($44|0);
   if ($45) {
    $46 = $num_ins;
    $47 = $46<<4;
    $48 = (15 + ($47))|0;
    $49 = $3;
    $50 = (($48) - ($49))|0;
    $0 = $50;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = $num_ins;
    $53 = ($51|0)<($52|0);
    if (!($53)) {
     break;
    }
    $54 = $i;
    $55 = $54<<4;
    $56 = (15 + ($55))|0;
    $57 = $1;
    $58 = (($57) + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = ($60|0)>(64);
    if ($61) {
     label = 15;
     break;
    }
    $62 = $i;
    $63 = (($62) + 1)|0;
    $i = $63;
   }
   if ((label|0) == 15) {
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   $ssize = 0;
   $i = 0;
   while(1) {
    $64 = $i;
    $65 = $num_ins;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     label = 26;
     break;
    }
    $67 = $1;
    $68 = $i;
    $69 = $68<<4;
    $70 = (($67) + ($69)|0);
    $d = $70;
    $71 = $d;
    $72 = ((($71)) + 12|0);
    $73 = (_readmem16b($72)|0);
    $74 = $73&65535;
    $75 = $74 << 1;
    $len = $75;
    $76 = $d;
    $77 = ((($76)) + 20|0);
    $78 = (_readmem16b($77)|0);
    $79 = $78&65535;
    $80 = $79 << 1;
    $start = $80;
    $81 = $d;
    $82 = ((($81)) + 22|0);
    $83 = (_readmem16b($82)|0);
    $84 = $83&65535;
    $85 = $84 << 1;
    $lsize = $85;
    $86 = $len;
    $87 = ($86|0)>(65535);
    $88 = $start;
    $89 = ($88|0)>(65535);
    $or$cond5 = $87 | $89;
    $90 = $lsize;
    $91 = ($90|0)>(65535);
    $or$cond7 = $or$cond5 | $91;
    if ($or$cond7) {
     label = 20;
     break;
    }
    $92 = $start;
    $93 = $lsize;
    $94 = (($92) + ($93))|0;
    $95 = $len;
    $96 = (($95) + 2)|0;
    $97 = ($94|0)>($96|0);
    if ($97) {
     label = 22;
     break;
    }
    $98 = $start;
    $99 = ($98|0)==(0);
    $100 = $lsize;
    $101 = ($100|0)!=(0);
    $or$cond9 = $99 & $101;
    if ($or$cond9) {
     label = 24;
     break;
    }
    $102 = $len;
    $103 = $ssize;
    $104 = (($103) + ($102))|0;
    $ssize = $104;
    $105 = $i;
    $106 = (($105) + 1)|0;
    $i = $106;
   }
   if ((label|0) == 20) {
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   else if ((label|0) == 22) {
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   else if ((label|0) == 24) {
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
   else if ((label|0) == 26) {
    $107 = $ssize;
    $108 = ($107|0)<=(4);
    if ($108) {
     $0 = -1;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
    $109 = $num_ins;
    $110 = $109<<4;
    $111 = (($110) + 8)|0;
    $112 = (($111) + 4)|0;
    $hdr_size = $112;
    $113 = $3;
    $114 = $hdr_size;
    $115 = $ptab_size;
    $116 = (($114) + ($115))|0;
    $117 = (($116) + 2)|0;
    $118 = ($113|0)<($117|0);
    if ($118) {
     $119 = $hdr_size;
     $120 = $ptab_size;
     $121 = (($119) + ($120))|0;
     $122 = (($121) + 2)|0;
     $123 = $3;
     $124 = (($122) - ($123))|0;
     $0 = $124;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
    $max_pptr = 0;
    $i = 0;
    while(1) {
     $125 = $i;
     $126 = $ptab_size;
     $127 = ($125|0)<($126|0);
     if (!($127)) {
      break;
     }
     $128 = $1;
     $129 = $hdr_size;
     $130 = (($128) + ($129)|0);
     $131 = $i;
     $132 = (($130) + ($131)|0);
     $133 = (_readmem16b($132)|0);
     $134 = $133&65535;
     $pptr = $134;
     $135 = $pptr;
     $136 = $135 & 7;
     $137 = ($136|0)!=(0);
     $138 = $pptr;
     $139 = ($138|0)>(1024);
     $or$cond11 = $137 | $139;
     if ($or$cond11) {
      label = 33;
      break;
     }
     $140 = $pptr;
     $141 = $max_pptr;
     $142 = ($140|0)>($141|0);
     if ($142) {
      $143 = $pptr;
      $max_pptr = $143;
     }
     $144 = $i;
     $145 = (($144) + 2)|0;
     $i = $145;
    }
    if ((label|0) == 33) {
     $0 = -1;
     $213 = $0;
     STACKTOP = sp;return ($213|0);
    }
    $146 = $ptab_size;
    $147 = $max_pptr;
    $148 = (($146) + ($147))|0;
    $149 = (($148) + 8)|0;
    $150 = $hdr_size;
    $151 = (($150) + ($149))|0;
    $hdr_size = $151;
    $152 = $1;
    $153 = ((($152)) + 6|0);
    $154 = (_readmem16b($153)|0);
    $155 = $154&65535;
    $trk_size = $155;
    $156 = $trk_size;
    $157 = ($156|0)<(192);
    if (!($157)) {
     $158 = $trk_size;
     $159 = $158 & 63;
     $160 = ($159|0)!=(0);
     if (!($160)) {
      $161 = $3;
      $162 = $hdr_size;
      $163 = $trk_size;
      $164 = (($162) + ($163))|0;
      $165 = (($164) + 16)|0;
      $166 = ($161|0)<($165|0);
      if ($166) {
       $167 = $hdr_size;
       $168 = $trk_size;
       $169 = (($167) + ($168))|0;
       $170 = (($169) + 16)|0;
       $171 = $3;
       $172 = (($170) - ($171))|0;
       $0 = $172;
       $213 = $0;
       STACKTOP = sp;return ($213|0);
      }
      $i = 0;
      while(1) {
       $173 = $i;
       $174 = $trk_size;
       $175 = ($173|0)<($174|0);
       if (!($175)) {
        label = 52;
        break;
       }
       $176 = $1;
       $177 = $hdr_size;
       $178 = (($176) + ($177)|0);
       $179 = $i;
       $180 = (($178) + ($179)|0);
       $d1 = $180;
       $181 = $d1;
       $182 = HEAP8[$181>>0]|0;
       $183 = $182&255;
       $184 = ($183|0)>(73);
       if ($184) {
        label = 45;
        break;
       }
       $185 = $d1;
       $186 = HEAP8[$185>>0]|0;
       $187 = $186&255;
       $188 = $187 << 4;
       $189 = $188 & 16;
       $190 = $d1;
       $191 = ((($190)) + 1|0);
       $192 = HEAP8[$191>>0]|0;
       $193 = $192&255;
       $194 = $193 >> 4;
       $195 = $194 & 15;
       $196 = $189 | $195;
       $197 = $num_ins;
       $198 = ($196|0)>($197|0);
       if ($198) {
        label = 47;
        break;
       }
       $199 = $d1;
       $200 = ((($199)) + 1|0);
       $201 = HEAP8[$200>>0]|0;
       $202 = $201&255;
       $203 = $202 & 15;
       $204 = ($203|0)==(0);
       if ($204) {
        $205 = $d1;
        $206 = ((($205)) + 2|0);
        $207 = HEAP8[$206>>0]|0;
        $208 = $207&255;
        $209 = ($208|0)!=(0);
        if ($209) {
         label = 50;
         break;
        }
       }
       $210 = $i;
       $211 = (($210) + 3)|0;
       $i = $211;
      }
      if ((label|0) == 45) {
       $0 = -1;
       $213 = $0;
       STACKTOP = sp;return ($213|0);
      }
      else if ((label|0) == 47) {
       $0 = -1;
       $213 = $0;
       STACKTOP = sp;return ($213|0);
      }
      else if ((label|0) == 50) {
       $0 = -1;
       $213 = $0;
       STACKTOP = sp;return ($213|0);
      }
      else if ((label|0) == 52) {
       $212 = $2;
       _pw_read_title(0,$212,0);
       $0 = 0;
       $213 = $0;
       STACKTOP = sp;return ($213|0);
      }
     }
    }
    $0 = -1;
    $213 = $0;
    STACKTOP = sp;return ($213|0);
   }
  }
 }
 $0 = -1;
 $213 = $0;
 STACKTOP = sp;return ($213|0);
}
function _depack_np2($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $max_addr = 0, $nins = 0, $npat = 0;
 var $ptable = 0, $size = 0, $ssize = 0, $tmp = 0, $trk_addr = 0, $trk_start = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2240|0;
 $ptable = sp + 2104|0;
 $trk_addr = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk_addr|0),0,2048)|0;
 $2 = $0;
 $3 = (_hio_read8($2)|0);
 $c1 = $3;
 $4 = $0;
 $5 = (_hio_read8($4)|0);
 $c2 = $5;
 $6 = $c1;
 $7 = $6&255;
 $8 = $7 << 4;
 $9 = $8 & 240;
 $10 = $c2;
 $11 = $10&255;
 $12 = $11 >> 4;
 $13 = $12 & 15;
 $14 = $9 | $13;
 $nins = $14;
 $15 = $1;
 (_pw_write_zero($15,20)|0);
 $16 = $0;
 $17 = (_hio_read16b($16)|0);
 $18 = $17&65535;
 $19 = $18 >> 1;
 $len = $19;
 $20 = $0;
 (_hio_read16b($20)|0);
 $21 = $0;
 (_hio_read16b($21)|0);
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $nins;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $0;
  (_hio_read32b($25)|0);
  $26 = $1;
  (_pw_write_zero($26,22)|0);
  $27 = $1;
  $28 = $0;
  $29 = (_hio_read16b($28)|0);
  $30 = $29&65535;
  $size = $30;
  $31 = $30&65535;
  _write16b($27,$31);
  $32 = $size;
  $33 = $32<<1;
  $34 = $ssize;
  $35 = (($34) + ($33))|0;
  $ssize = $35;
  $36 = $1;
  $37 = $0;
  $38 = (_hio_read8($37)|0);
  _write8($36,$38);
  $39 = $1;
  $40 = $0;
  $41 = (_hio_read8($40)|0);
  _write8($39,$41);
  $42 = $0;
  (_hio_read32b($42)|0);
  $43 = $0;
  $44 = (_hio_read16b($43)|0);
  $45 = $44&65535;
  $size = $45;
  $46 = $1;
  $47 = $0;
  $48 = (_hio_read16b($47)|0);
  _write16b($46,$48);
  $49 = $1;
  $50 = $size;
  $51 = $50&65535;
  _write16b($49,$51);
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $54 = ((($tmp)) + 29|0);
 HEAP8[$54>>0] = 1;
 while(1) {
  $55 = $i;
  $56 = ($55|0)<(31);
  if (!($56)) {
   break;
  }
  $57 = $1;
  (_fwrite(($tmp|0),30,1,($57|0))|0);
  $58 = $i;
  $59 = (($58) + 1)|0;
  $i = $59;
 }
 $60 = $1;
 $61 = $len;
 $62 = $61&255;
 _write8($60,$62);
 $63 = $1;
 _write8($63,127);
 $64 = $0;
 (_hio_seek($64,2,1)|0);
 $65 = $0;
 (_hio_seek($65,2,1)|0);
 $npat = 0;
 $i = 0;
 while(1) {
  $66 = $i;
  $67 = $len;
  $68 = ($66|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $0;
  $70 = (_hio_read16b($69)|0);
  $71 = $70&65535;
  $72 = $71 >> 3;
  $73 = $72&255;
  $74 = $i;
  $75 = (($ptable) + ($74)|0);
  HEAP8[$75>>0] = $73;
  $76 = $i;
  $77 = (($ptable) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $npat;
  $81 = ($79|0)>($80|0);
  if ($81) {
   $82 = $i;
   $83 = (($ptable) + ($82)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $npat = $85;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $88 = $npat;
 $89 = (($88) + 1)|0;
 $npat = $89;
 $90 = $1;
 (_fwrite(($ptable|0),128,1,($90|0))|0);
 $91 = $1;
 _write32b($91,1294879534);
 $max_addr = 0;
 $i = 0;
 while(1) {
  $92 = $i;
  $93 = $npat;
  $94 = ($92|0)<($93|0);
  $95 = $0;
  if (!($94)) {
   break;
  }
  $96 = (_hio_read16b($95)|0);
  $97 = $96&65535;
  $98 = $i;
  $99 = (($trk_addr) + ($98<<4)|0);
  HEAP32[$99>>2] = $97;
  $100 = $max_addr;
  $101 = ($97|0)>($100|0);
  if ($101) {
   $102 = $i;
   $103 = (($trk_addr) + ($102<<4)|0);
   $104 = HEAP32[$103>>2]|0;
   $max_addr = $104;
  }
  $105 = $0;
  $106 = (_hio_read16b($105)|0);
  $107 = $106&65535;
  $108 = $i;
  $109 = (($trk_addr) + ($108<<4)|0);
  $110 = ((($109)) + 4|0);
  HEAP32[$110>>2] = $107;
  $111 = $max_addr;
  $112 = ($107|0)>($111|0);
  if ($112) {
   $113 = $i;
   $114 = (($trk_addr) + ($113<<4)|0);
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $max_addr = $116;
  }
  $117 = $0;
  $118 = (_hio_read16b($117)|0);
  $119 = $118&65535;
  $120 = $i;
  $121 = (($trk_addr) + ($120<<4)|0);
  $122 = ((($121)) + 8|0);
  HEAP32[$122>>2] = $119;
  $123 = $max_addr;
  $124 = ($119|0)>($123|0);
  if ($124) {
   $125 = $i;
   $126 = (($trk_addr) + ($125<<4)|0);
   $127 = ((($126)) + 8|0);
   $128 = HEAP32[$127>>2]|0;
   $max_addr = $128;
  }
  $129 = $0;
  $130 = (_hio_read16b($129)|0);
  $131 = $130&65535;
  $132 = $i;
  $133 = (($trk_addr) + ($132<<4)|0);
  $134 = ((($133)) + 12|0);
  HEAP32[$134>>2] = $131;
  $135 = $max_addr;
  $136 = ($131|0)>($135|0);
  if ($136) {
   $137 = $i;
   $138 = (($trk_addr) + ($137<<4)|0);
   $139 = ((($138)) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $max_addr = $140;
  }
  $141 = $i;
  $142 = (($141) + 1)|0;
  $i = $142;
 }
 $143 = (_hio_tell($95)|0);
 $trk_start = $143;
 $i = 0;
 while(1) {
  $144 = $i;
  $145 = $npat;
  $146 = ($144|0)<($145|0);
  if (!($146)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $147 = $j;
   $148 = ($147|0)<(4);
   if (!($148)) {
    break;
   }
   $149 = $0;
   $150 = $trk_start;
   $151 = $j;
   $152 = (3 - ($151))|0;
   $153 = $i;
   $154 = (($trk_addr) + ($153<<4)|0);
   $155 = (($154) + ($152<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($150) + ($156))|0;
   (_hio_seek($149,$157,0)|0);
   $k = 0;
   while(1) {
    $158 = $k;
    $159 = ($158|0)<(64);
    if (!($159)) {
     break;
    }
    $160 = $k;
    $161 = $160<<4;
    $162 = $j;
    $163 = $162<<2;
    $164 = (($161) + ($163))|0;
    $x = $164;
    $165 = $0;
    $166 = (_hio_read8($165)|0);
    $c1 = $166;
    $167 = $0;
    $168 = (_hio_read8($167)|0);
    $c2 = $168;
    $169 = $0;
    $170 = (_hio_read8($169)|0);
    $c3 = $170;
    $171 = $c1;
    $172 = $171&255;
    $173 = $172 & 254;
    $174 = (($173|0) / 2)&-1;
    $175 = $174&255;
    $c4 = $175;
    $176 = $c1;
    $177 = $176&255;
    $178 = $177 << 4;
    $179 = $178 & 16;
    $180 = $c4;
    $181 = $180&255;
    $182 = (7848 + ($181<<1)|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = $179 | $184;
    $186 = $185&255;
    $187 = $x;
    $188 = (($tmp) + ($187)|0);
    HEAP8[$188>>0] = $186;
    $189 = $c4;
    $190 = $189&255;
    $191 = (7848 + ($190<<1)|0);
    $192 = ((($191)) + 1|0);
    $193 = HEAP8[$192>>0]|0;
    $194 = $x;
    $195 = (($194) + 1)|0;
    $196 = (($tmp) + ($195)|0);
    HEAP8[$196>>0] = $193;
    $197 = $c2;
    $198 = $197&255;
    $199 = $198 & 15;
    switch ($199|0) {
    case 5: case 6:  {
     label = 32;
     break;
    }
    case 14:  {
     $219 = $c3;
     $220 = (($219) + -1)<<24>>24;
     $c3 = $220;
     break;
    }
    case 11:  {
     $221 = $c3;
     $222 = $221&255;
     $223 = (($222) + 4)|0;
     $224 = (($223|0) / 2)&-1;
     $225 = $224&255;
     $c3 = $225;
     break;
    }
    case 7:  {
     $204 = $c2;
     $205 = $204&255;
     $206 = $205 & 240;
     $207 = (($206) + 10)|0;
     $208 = $207&255;
     $c2 = $208;
     label = 32;
     break;
    }
    case 8:  {
     $200 = $c2;
     $201 = $200&255;
     $202 = $201 & 240;
     $203 = $202&255;
     $c2 = $203;
     break;
    }
    default: {
    }
    }
    if ((label|0) == 32) {
     label = 0;
     $209 = $c3;
     $210 = $209&255;
     $211 = ($210|0)>(128);
     $212 = $c3;
     $213 = $212&255;
     $214 = (256 - ($213))|0;
     $215 = $213 << 4;
     $216 = $215 & 240;
     $217 = $211 ? $214 : $216;
     $218 = $217&255;
     $c3 = $218;
    }
    $226 = $c2;
    $227 = $x;
    $228 = (($227) + 2)|0;
    $229 = (($tmp) + ($228)|0);
    HEAP8[$229>>0] = $226;
    $230 = $c3;
    $231 = $x;
    $232 = (($231) + 3)|0;
    $233 = (($tmp) + ($232)|0);
    HEAP8[$233>>0] = $230;
    $234 = $k;
    $235 = (($234) + 1)|0;
    $k = $235;
   }
   $236 = $j;
   $237 = (($236) + 1)|0;
   $j = $237;
  }
  $238 = $1;
  (_fwrite(($tmp|0),1024,1,($238|0))|0);
  $239 = $i;
  $240 = (($239) + 1)|0;
  $i = $240;
 }
 $241 = $0;
 $242 = $max_addr;
 $243 = (($242) + 192)|0;
 $244 = $trk_start;
 $245 = (($243) + ($244))|0;
 (_hio_seek($241,$245,0)|0);
 $246 = $1;
 $247 = $0;
 $248 = $ssize;
 (_pw_move_data($246,$247,$248)|0);
 STACKTOP = sp;return 0;
}
function _test_np3($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $d = 0, $d1 = 0, $hdr_size = 0, $i = 0, $len = 0, $lsize = 0, $max_pptr = 0, $num_ins = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pptr = 0, $ptab_size = 0, $ssize = 0, $start = 0;
 var $trk_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(10);
 if ($5) {
  $6 = $3;
  $7 = (10 - ($6))|0;
  $0 = $7;
  $241 = $0;
  STACKTOP = sp;return ($241|0);
 }
 $8 = $1;
 $9 = ((($8)) + 2|0);
 $10 = (_readmem16b($9)|0);
 $11 = $10&65535;
 $ptab_size = $11;
 $12 = $ptab_size;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = $ptab_size;
  $15 = $14 & 1;
  $16 = ($15|0)!=(0);
  $17 = $ptab_size;
  $18 = ($17|0)>(255);
  $or$cond = $16 | $18;
  if (!($or$cond)) {
   $19 = $1;
   $20 = ((($19)) + 1|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 & 15;
   $24 = ($23|0)!=(12);
   if ($24) {
    $0 = -1;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $25 = $1;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $27 << 4;
   $29 = $28 & 240;
   $30 = $1;
   $31 = ((($30)) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 >> 4;
   $35 = $34 & 15;
   $36 = $29 | $35;
   $num_ins = $36;
   $37 = $num_ins;
   $38 = ($37|0)==(0);
   $39 = $num_ins;
   $40 = ($39|0)>(31);
   $or$cond3 = $38 | $40;
   if ($or$cond3) {
    $0 = -1;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $41 = $3;
   $42 = $num_ins;
   $43 = $42<<4;
   $44 = (15 + ($43))|0;
   $45 = ($41|0)<($44|0);
   if ($45) {
    $46 = $num_ins;
    $47 = $46<<4;
    $48 = (15 + ($47))|0;
    $49 = $3;
    $50 = (($48) - ($49))|0;
    $0 = $50;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = $num_ins;
    $53 = ($51|0)<($52|0);
    if (!($53)) {
     break;
    }
    $54 = $i;
    $55 = $54<<4;
    $56 = (9 + ($55))|0;
    $57 = $1;
    $58 = (($57) + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = ($60|0)>(64);
    if ($61) {
     label = 15;
     break;
    }
    $62 = $i;
    $63 = (($62) + 1)|0;
    $i = $63;
   }
   if ((label|0) == 15) {
    $0 = -1;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $ssize = 0;
   $i = 0;
   while(1) {
    $64 = $i;
    $65 = $num_ins;
    $66 = ($64|0)<($65|0);
    if (!($66)) {
     label = 26;
     break;
    }
    $67 = $1;
    $68 = $i;
    $69 = $68<<4;
    $70 = (($67) + ($69)|0);
    $d = $70;
    $71 = $d;
    $72 = ((($71)) + 14|0);
    $73 = (_readmem16b($72)|0);
    $74 = $73&65535;
    $75 = $74 << 1;
    $len = $75;
    $76 = $d;
    $77 = ((($76)) + 20|0);
    $78 = (_readmem16b($77)|0);
    $79 = $78&65535;
    $80 = $79 << 1;
    $start = $80;
    $81 = $d;
    $82 = ((($81)) + 22|0);
    $83 = (_readmem16b($82)|0);
    $84 = $83&65535;
    $85 = $84 << 1;
    $lsize = $85;
    $86 = $len;
    $87 = ($86|0)>(65535);
    $88 = $start;
    $89 = ($88|0)>(65535);
    $or$cond5 = $87 | $89;
    $90 = $lsize;
    $91 = ($90|0)>(65535);
    $or$cond7 = $or$cond5 | $91;
    if ($or$cond7) {
     label = 20;
     break;
    }
    $92 = $start;
    $93 = $lsize;
    $94 = (($92) + ($93))|0;
    $95 = $len;
    $96 = (($95) + 2)|0;
    $97 = ($94|0)>($96|0);
    if ($97) {
     label = 22;
     break;
    }
    $98 = $start;
    $99 = ($98|0)==(0);
    $100 = $lsize;
    $101 = ($100|0)!=(0);
    $or$cond9 = $99 & $101;
    if ($or$cond9) {
     label = 24;
     break;
    }
    $102 = $len;
    $103 = $ssize;
    $104 = (($103) + ($102))|0;
    $ssize = $104;
    $105 = $i;
    $106 = (($105) + 1)|0;
    $i = $106;
   }
   if ((label|0) == 20) {
    $0 = -1;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 22) {
    $0 = -1;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 24) {
    $0 = -1;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 26) {
    $107 = $ssize;
    $108 = ($107|0)<=(4);
    if ($108) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    $109 = $num_ins;
    $110 = $109<<4;
    $111 = (($110) + 8)|0;
    $112 = (($111) + 4)|0;
    $hdr_size = $112;
    $113 = $3;
    $114 = $hdr_size;
    $115 = $ptab_size;
    $116 = (($114) + ($115))|0;
    $117 = (($116) + 2)|0;
    $118 = ($113|0)<($117|0);
    if ($118) {
     $119 = $hdr_size;
     $120 = $ptab_size;
     $121 = (($119) + ($120))|0;
     $122 = (($121) + 2)|0;
     $123 = $3;
     $124 = (($122) - ($123))|0;
     $0 = $124;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    $max_pptr = 0;
    $i = 0;
    while(1) {
     $125 = $i;
     $126 = $ptab_size;
     $127 = ($125|0)<($126|0);
     if (!($127)) {
      break;
     }
     $128 = $1;
     $129 = $hdr_size;
     $130 = (($128) + ($129)|0);
     $131 = $i;
     $132 = (($130) + ($131)|0);
     $133 = (_readmem16b($132)|0);
     $134 = $133&65535;
     $pptr = $134;
     $135 = $pptr;
     $136 = $135 & 7;
     $137 = ($136|0)!=(0);
     $138 = $pptr;
     $139 = ($138|0)>(1024);
     $or$cond11 = $137 | $139;
     if ($or$cond11) {
      label = 33;
      break;
     }
     $140 = $pptr;
     $141 = $max_pptr;
     $142 = ($140|0)>($141|0);
     if ($142) {
      $143 = $pptr;
      $max_pptr = $143;
     }
     $144 = $i;
     $145 = (($144) + 2)|0;
     $i = $145;
    }
    if ((label|0) == 33) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    $146 = $ptab_size;
    $147 = $max_pptr;
    $148 = (($146) + ($147))|0;
    $149 = (($148) + 8)|0;
    $150 = $hdr_size;
    $151 = (($150) + ($149))|0;
    $hdr_size = $151;
    $152 = $1;
    $153 = ((($152)) + 6|0);
    $154 = (_readmem16b($153)|0);
    $155 = $154&65535;
    $trk_size = $155;
    $156 = $trk_size;
    $157 = ($156|0)<=(63);
    if ($157) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    $158 = $3;
    $159 = $hdr_size;
    $160 = $trk_size;
    $161 = (($159) + ($160))|0;
    $162 = (($161) + 2)|0;
    $163 = ($158|0)<($162|0);
    if ($163) {
     $164 = $hdr_size;
     $165 = $trk_size;
     $166 = (($164) + ($165))|0;
     $167 = (($166) + 2)|0;
     $168 = $3;
     $169 = (($167) - ($168))|0;
     $0 = $169;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    $i = 0;
    L65: while(1) {
     $170 = $i;
     $171 = $trk_size;
     $172 = ($170|0)<($171|0);
     if (!($172)) {
      label = 59;
      break;
     }
     $173 = $1;
     $174 = $hdr_size;
     $175 = (($173) + ($174)|0);
     $176 = $i;
     $177 = (($175) + ($176)|0);
     $d1 = $177;
     $178 = $d1;
     $179 = HEAP8[$178>>0]|0;
     $180 = $179&255;
     $181 = $180 & 128;
     $182 = ($181|0)!=(0);
     if (!($182)) {
      $183 = $d1;
      $184 = HEAP8[$183>>0]|0;
      $185 = $184&255;
      $186 = ($185|0)>(73);
      if ($186) {
       label = 46;
       break;
      }
      $187 = $d1;
      $188 = ((($187)) + 1|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = $189&255;
      $191 = $190 & 15;
      $192 = ($191|0)==(10);
      if ($192) {
       label = 46;
       break;
      }
      $193 = $d1;
      $194 = ((($193)) + 1|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = $195&255;
      $197 = $196 & 15;
      $198 = ($197|0)==(13);
      if ($198) {
       $199 = $d1;
       $200 = ((($199)) + 2|0);
       $201 = HEAP8[$200>>0]|0;
       $202 = $201&255;
       $203 = ($202|0)>(64);
       if ($203) {
        label = 49;
        break;
       }
      }
      $204 = $d1;
      $205 = HEAP8[$204>>0]|0;
      $206 = $205&255;
      $207 = $206 << 4;
      $208 = $207 & 16;
      $209 = $d1;
      $210 = ((($209)) + 1|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = $211&255;
      $213 = $212 >> 4;
      $214 = $213 & 15;
      $215 = $208 | $214;
      $216 = $num_ins;
      $217 = ($215|0)>($216|0);
      if ($217) {
       label = 51;
       break;
      }
      $218 = $d1;
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = ($220|0)==(0);
      do {
       if ($221) {
        $222 = $d1;
        $223 = ((($222)) + 1|0);
        $224 = HEAP8[$223>>0]|0;
        $225 = $224&255;
        $226 = ($225|0)==(0);
        if (!($226)) {
         break;
        }
        $227 = $d1;
        $228 = ((($227)) + 2|0);
        $229 = HEAP8[$228>>0]|0;
        $230 = $229&255;
        $231 = ($230|0)==(0);
        if (!($231)) {
         break;
        }
        $232 = $i;
        $233 = $trk_size;
        $234 = (($233) - 3)|0;
        $235 = ($232|0)<($234|0);
        if ($235) {
         label = 56;
         break L65;
        }
       }
      } while(0);
      $236 = $i;
      $237 = (($236) + 2)|0;
      $i = $237;
     }
     $238 = $i;
     $239 = (($238) + 1)|0;
     $i = $239;
    }
    if ((label|0) == 46) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    else if ((label|0) == 49) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    else if ((label|0) == 51) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    else if ((label|0) == 56) {
     $0 = -1;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
    else if ((label|0) == 59) {
     $240 = $2;
     _pw_read_title(0,$240,0);
     $0 = 0;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
   }
  }
 }
 $0 = -1;
 $241 = $0;
 STACKTOP = sp;return ($241|0);
}
function _depack_np3($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $len = 0, $max_addr = 0, $nins = 0, $npat = 0, $ptable = 0, $size = 0, $smp_addr = 0, $ssize = 0, $tmp = 0, $trk_addr = 0, $trk_start = 0, $x = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 2248|0;
 $ptable = sp + 2112|0;
 $trk_addr = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk_addr|0),0,2048)|0;
 $2 = $0;
 $3 = (_hio_read8($2)|0);
 $c1 = $3;
 $4 = $0;
 $5 = (_hio_read8($4)|0);
 $c2 = $5;
 $6 = $c1;
 $7 = $6&255;
 $8 = $7 << 4;
 $9 = $8 & 240;
 $10 = $c2;
 $11 = $10&255;
 $12 = $11 >> 4;
 $13 = $12 & 15;
 $14 = $9 | $13;
 $nins = $14;
 $15 = $1;
 (_pw_write_zero($15,20)|0);
 $16 = $0;
 $17 = (_hio_read16b($16)|0);
 $18 = $17&65535;
 $19 = $18 >> 1;
 $len = $19;
 $20 = $0;
 (_hio_read16b($20)|0);
 $21 = $0;
 (_hio_read16b($21)|0);
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $nins;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $0;
  (_hio_read($tmp,1,16,$25)|0);
  $26 = $1;
  (_pw_write_zero($26,22)|0);
  $27 = $1;
  $28 = ((($tmp)) + 6|0);
  $29 = (_readmem16b($28)|0);
  $30 = $29&65535;
  $size = $30;
  $31 = $30&65535;
  _write16b($27,$31);
  $32 = $size;
  $33 = $32<<1;
  $34 = $ssize;
  $35 = (($34) + ($33))|0;
  $ssize = $35;
  $36 = $1;
  $37 = HEAP8[$tmp>>0]|0;
  _write8($36,$37);
  $38 = $1;
  $39 = ((($tmp)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  _write8($38,$40);
  $41 = ((($tmp)) + 14|0);
  $42 = $1;
  (_fwrite(($41|0),2,1,($42|0))|0);
  $43 = ((($tmp)) + 12|0);
  $44 = $1;
  (_fwrite(($43|0),2,1,($44|0))|0);
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $47 = ((($tmp)) + 29|0);
 HEAP8[$47>>0] = 1;
 while(1) {
  $48 = $i;
  $49 = ($48|0)<(31);
  if (!($49)) {
   break;
  }
  $50 = $1;
  (_fwrite(($tmp|0),30,1,($50|0))|0);
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $1;
 $54 = $len;
 $55 = $54&255;
 _write8($53,$55);
 $56 = $1;
 _write8($56,127);
 $57 = $0;
 (_hio_seek($57,2,1)|0);
 $58 = $0;
 (_hio_seek($58,2,1)|0);
 $npat = 0;
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = $len;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $0;
  $63 = (_hio_read16b($62)|0);
  $64 = $63&65535;
  $65 = (($64|0) / 8)&-1;
  $66 = $65&255;
  $67 = $i;
  $68 = (($ptable) + ($67)|0);
  HEAP8[$68>>0] = $66;
  $69 = $i;
  $70 = (($ptable) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $npat;
  $74 = ($72|0)>($73|0);
  if ($74) {
   $75 = $i;
   $76 = (($ptable) + ($75)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $npat = $78;
  }
  $79 = $i;
  $80 = (($79) + 1)|0;
  $i = $80;
 }
 $81 = $npat;
 $82 = (($81) + 1)|0;
 $npat = $82;
 $83 = $1;
 (_fwrite(($ptable|0),128,1,($83|0))|0);
 $84 = $1;
 _write32b($84,1294879534);
 $i = 0;
 $max_addr = 0;
 while(1) {
  $85 = $i;
  $86 = $npat;
  $87 = ($85|0)<($86|0);
  $88 = $0;
  if (!($87)) {
   break;
  }
  $89 = (_hio_read16b($88)|0);
  $90 = $89&65535;
  $91 = $i;
  $92 = (($trk_addr) + ($91<<4)|0);
  HEAP32[$92>>2] = $90;
  $93 = $max_addr;
  $94 = ($90|0)>($93|0);
  if ($94) {
   $95 = $i;
   $96 = (($trk_addr) + ($95<<4)|0);
   $97 = HEAP32[$96>>2]|0;
   $max_addr = $97;
  }
  $98 = $0;
  $99 = (_hio_read16b($98)|0);
  $100 = $99&65535;
  $101 = $i;
  $102 = (($trk_addr) + ($101<<4)|0);
  $103 = ((($102)) + 4|0);
  HEAP32[$103>>2] = $100;
  $104 = $max_addr;
  $105 = ($100|0)>($104|0);
  if ($105) {
   $106 = $i;
   $107 = (($trk_addr) + ($106<<4)|0);
   $108 = ((($107)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $max_addr = $109;
  }
  $110 = $0;
  $111 = (_hio_read16b($110)|0);
  $112 = $111&65535;
  $113 = $i;
  $114 = (($trk_addr) + ($113<<4)|0);
  $115 = ((($114)) + 8|0);
  HEAP32[$115>>2] = $112;
  $116 = $max_addr;
  $117 = ($112|0)>($116|0);
  if ($117) {
   $118 = $i;
   $119 = (($trk_addr) + ($118<<4)|0);
   $120 = ((($119)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $max_addr = $121;
  }
  $122 = $0;
  $123 = (_hio_read16b($122)|0);
  $124 = $123&65535;
  $125 = $i;
  $126 = (($trk_addr) + ($125<<4)|0);
  $127 = ((($126)) + 12|0);
  HEAP32[$127>>2] = $124;
  $128 = $max_addr;
  $129 = ($124|0)>($128|0);
  if ($129) {
   $130 = $i;
   $131 = (($trk_addr) + ($130<<4)|0);
   $132 = ((($131)) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $max_addr = $133;
  }
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 $136 = (_hio_tell($88)|0);
 $trk_start = $136;
 $smp_addr = 0;
 $i = 0;
 while(1) {
  $137 = $i;
  $138 = $npat;
  $139 = ($137|0)<($138|0);
  if (!($139)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $140 = $j;
   $141 = ($140|0)<(4);
   if (!($141)) {
    break;
   }
   $142 = $0;
   $143 = $trk_start;
   $144 = $j;
   $145 = (3 - ($144))|0;
   $146 = $i;
   $147 = (($trk_addr) + ($146<<4)|0);
   $148 = (($147) + ($145<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($143) + ($149))|0;
   (_hio_seek($142,$150,0)|0);
   $k = 0;
   while(1) {
    $151 = $k;
    $152 = ($151|0)<(64);
    if (!($152)) {
     break;
    }
    $153 = $k;
    $154 = $153<<4;
    $155 = $j;
    $156 = $155<<2;
    $157 = (($154) + ($156))|0;
    $x = $157;
    $158 = $0;
    $159 = (_hio_read8($158)|0);
    $c1 = $159;
    $160 = $159&255;
    $161 = ($160|0)>=(128);
    if ($161) {
     $162 = $c1;
     $163 = $162&255;
     $164 = (256 - ($163))|0;
     $165 = (($164) - 1)|0;
     $166 = $k;
     $167 = (($166) + ($165))|0;
     $k = $167;
    } else {
     $168 = $0;
     $169 = (_hio_read8($168)|0);
     $c2 = $169;
     $170 = $0;
     $171 = (_hio_read8($170)|0);
     $c3 = $171;
     $172 = $c1;
     $173 = $172&255;
     $174 = $173 & 254;
     $175 = (($174|0) / 2)&-1;
     $176 = $175&255;
     $c4 = $176;
     $177 = $c1;
     $178 = $177&255;
     $179 = $178 << 4;
     $180 = $179 & 16;
     $181 = $c4;
     $182 = $181&255;
     $183 = (7848 + ($182<<1)|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = $180 | $185;
     $187 = $186&255;
     $188 = $x;
     $189 = (($tmp) + ($188)|0);
     HEAP8[$189>>0] = $187;
     $190 = $c4;
     $191 = $190&255;
     $192 = (7848 + ($191<<1)|0);
     $193 = ((($192)) + 1|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = $x;
     $196 = (($195) + 1)|0;
     $197 = (($tmp) + ($196)|0);
     HEAP8[$197>>0] = $194;
     $198 = $c2;
     $199 = $198&255;
     $200 = $199 & 15;
     switch ($200|0) {
     case 11:  {
      $220 = $c3;
      $221 = $220&255;
      $222 = (($221) + 4)|0;
      $223 = (($222|0) / 2)&-1;
      $224 = $223&255;
      $c3 = $224;
      break;
     }
     case 5: case 6:  {
      label = 34;
      break;
     }
     case 7:  {
      $205 = $c2;
      $206 = $205&255;
      $207 = $206 & 240;
      $208 = (($207) + 10)|0;
      $209 = $208&255;
      $c2 = $209;
      label = 34;
      break;
     }
     case 8:  {
      $201 = $c2;
      $202 = $201&255;
      $203 = $202 & 240;
      $204 = $203&255;
      $c2 = $204;
      break;
     }
     case 14:  {
      $c3 = 1;
      break;
     }
     default: {
     }
     }
     if ((label|0) == 34) {
      label = 0;
      $210 = $c3;
      $211 = $210&255;
      $212 = ($211|0)>(128);
      $213 = $c3;
      $214 = $213&255;
      $215 = (256 - ($214))|0;
      $216 = $214 << 4;
      $217 = $216 & 240;
      $218 = $212 ? $215 : $217;
      $219 = $218&255;
      $c3 = $219;
     }
     $225 = $c2;
     $226 = $x;
     $227 = (($226) + 2)|0;
     $228 = (($tmp) + ($227)|0);
     HEAP8[$228>>0] = $225;
     $229 = $c3;
     $230 = $x;
     $231 = (($230) + 3)|0;
     $232 = (($tmp) + ($231)|0);
     HEAP8[$232>>0] = $229;
     $233 = $c2;
     $234 = $233&255;
     $235 = $234 & 15;
     $236 = ($235|0)==(13);
     if ($236) {
      break;
     }
    }
    $237 = $k;
    $238 = (($237) + 1)|0;
    $k = $238;
   }
   $239 = $0;
   $240 = (_hio_tell($239)|0);
   $241 = $smp_addr;
   $242 = ($240|0)>($241|0);
   if ($242) {
    $243 = $0;
    $244 = (_hio_tell($243)|0);
    $smp_addr = $244;
   }
   $245 = $j;
   $246 = (($245) + 1)|0;
   $j = $246;
  }
  $247 = $1;
  (_fwrite(($tmp|0),1024,1,($247|0))|0);
  $248 = $i;
  $249 = (($248) + 1)|0;
  $i = $249;
 }
 $250 = $smp_addr;
 $251 = $250 & 1;
 $252 = ($251|0)!=(0);
 if (!($252)) {
  $255 = $0;
  $256 = $smp_addr;
  (_hio_seek($255,$256,0)|0);
  $257 = $1;
  $258 = $0;
  $259 = $ssize;
  (_pw_move_data($257,$258,$259)|0);
  STACKTOP = sp;return 0;
 }
 $253 = $smp_addr;
 $254 = (($253) + 1)|0;
 $smp_addr = $254;
 $255 = $0;
 $256 = $smp_addr;
 (_hio_seek($255,$256,0)|0);
 $257 = $1;
 $258 = $0;
 $259 = $ssize;
 (_pw_move_data($257,$258,$259)|0);
 STACKTOP = sp;return 0;
}
function _test_p61a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $d = 0, $e = 0, $j = 0, $k = 0, $l = 0, $m = 0, $n = 0, $o = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, $x = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $start = 0;
 $4 = $start;
 $5 = (($4) + 2)|0;
 $6 = $1;
 $7 = (($6) + ($5)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $m = $9;
 $10 = $m;
 $11 = ($10|0)>(127);
 $12 = $m;
 $13 = ($12|0)==(0);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 $14 = $start;
 $15 = (($14) + 3)|0;
 $16 = $1;
 $17 = (($16) + ($15)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 63;
 $k = $20;
 $21 = $k;
 $22 = ($21|0)>(31);
 $23 = $k;
 $24 = ($23|0)==(0);
 $or$cond3 = $22 | $24;
 if ($or$cond3) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 $l = 0;
 while(1) {
  $25 = $l;
  $26 = $k;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   label = 12;
   break;
  }
  $28 = $start;
  $29 = (($28) + 7)|0;
  $30 = $l;
  $31 = ($30*6)|0;
  $32 = (($29) + ($31))|0;
  $33 = $1;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)>(64);
  if ($37) {
   label = 8;
   break;
  }
  $38 = $start;
  $39 = (($38) + 6)|0;
  $40 = $l;
  $41 = ($40*6)|0;
  $42 = (($39) + ($41))|0;
  $43 = $1;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)>(15);
  if ($47) {
   label = 10;
   break;
  }
  $48 = $l;
  $49 = (($48) + 1)|0;
  $l = $49;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $322 = $0;
  STACKTOP = sp;return ($322|0);
 }
 else if ((label|0) == 12) {
  $ssize = 0;
  $n = 0;
  while(1) {
   $50 = $n;
   $51 = $k;
   $52 = ($50|0)<($51|0);
   $53 = $1;
   $54 = $start;
   $55 = (($53) + ($54)|0);
   if (!($52)) {
    label = 25;
    break;
   }
   $56 = $n;
   $57 = ($56*6)|0;
   $58 = (($55) + ($57)|0);
   $59 = ((($58)) + 4|0);
   $60 = (_readmem16b($59)|0);
   $61 = $60&65535;
   $o = $61;
   $62 = $o;
   $63 = ($62|0)<(65503);
   $64 = $o;
   $65 = ($64|0)>(32768);
   $or$cond5 = $63 & $65;
   $66 = $o;
   $67 = ($66|0)==(0);
   $or$cond7 = $or$cond5 | $67;
   if ($or$cond7) {
    label = 15;
    break;
   }
   $68 = $o;
   $69 = ($68|0)<(65280);
   if ($69) {
    $70 = $o;
    $71 = $70<<1;
    $72 = $ssize;
    $73 = (($72) + ($71))|0;
    $ssize = $73;
   }
   $74 = $1;
   $75 = $start;
   $76 = (($74) + ($75)|0);
   $77 = $n;
   $78 = ($77*6)|0;
   $79 = (($76) + ($78)|0);
   $80 = ((($79)) + 8|0);
   $81 = (_readmem16b($80)|0);
   $82 = $81&65535;
   $j = $82;
   $83 = $j;
   $84 = ($83|0)!=(65535);
   if ($84) {
    $85 = $j;
    $86 = $o;
    $87 = ($85|0)>=($86|0);
    if ($87) {
     label = 20;
     break;
    }
   }
   $88 = $o;
   $89 = ($88|0)>(65503);
   if ($89) {
    $90 = $o;
    $91 = (65535 - ($90))|0;
    $92 = $k;
    $93 = ($91|0)>($92|0);
    if ($93) {
     label = 23;
     break;
    }
   }
   $94 = $n;
   $95 = (($94) + 1)|0;
   $n = $95;
  }
  if ((label|0) == 15) {
   $0 = -1;
   $322 = $0;
   STACKTOP = sp;return ($322|0);
  }
  else if ((label|0) == 20) {
   $0 = -1;
   $322 = $0;
   STACKTOP = sp;return ($322|0);
  }
  else if ((label|0) == 23) {
   $0 = -1;
   $322 = $0;
   STACKTOP = sp;return ($322|0);
  }
  else if ((label|0) == 25) {
   $96 = (_readmem16b($55)|0);
   $97 = $96&65535;
   $j = $97;
   $98 = $j;
   $99 = $k;
   $100 = ($99*6)|0;
   $101 = (($100) + 4)|0;
   $102 = $m;
   $103 = $102<<3;
   $104 = (($101) + ($103))|0;
   $105 = ($98|0)<($104|0);
   if ($105) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $l = 0;
   while(1) {
    $106 = $l;
    $107 = $m;
    $108 = $107<<2;
    $109 = ($106|0)<($108|0);
    if (!($109)) {
     break;
    }
    $110 = $1;
    $111 = $start;
    $112 = (($110) + ($111)|0);
    $113 = ((($112)) + 4|0);
    $114 = $k;
    $115 = ($114*6)|0;
    $116 = (($113) + ($115)|0);
    $117 = $l;
    $118 = $117<<1;
    $119 = (($116) + ($118)|0);
    $120 = (_readmem16b($119)|0);
    $121 = $120&65535;
    $o = $121;
    $122 = $o;
    $123 = $k;
    $124 = ($123*6)|0;
    $125 = (($122) + ($124))|0;
    $126 = (($125) + 4)|0;
    $127 = $m;
    $128 = $127<<3;
    $129 = (($126) + ($128))|0;
    $130 = $j;
    $131 = ($129|0)>($130|0);
    if ($131) {
     label = 30;
     break;
    }
    $132 = $l;
    $133 = (($132) + 1)|0;
    $l = $133;
   }
   if ((label|0) == 30) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $l = 0;
   $o = 0;
   $134 = $k;
   $135 = ($134*6)|0;
   $136 = (($135) + 4)|0;
   $137 = $m;
   $138 = $137<<3;
   $139 = (($136) + ($138))|0;
   $x = $139;
   $140 = $3;
   $141 = $start;
   $142 = $x;
   $143 = (($141) + ($142))|0;
   $144 = ($140|0)<($143|0);
   if ($144) {
    $145 = $start;
    $146 = $x;
    $147 = (($145) + ($146))|0;
    $148 = $3;
    $149 = (($147) - ($148))|0;
    $0 = $149;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   while(1) {
    $150 = $start;
    $151 = $x;
    $152 = (($150) + ($151))|0;
    $153 = $l;
    $154 = (($152) + ($153))|0;
    $155 = $1;
    $156 = (($155) + ($154)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = ($158|0)!=(255);
    $160 = $l;
    $161 = ($160|0)<(128);
    $162 = $159 ? $161 : 0;
    if (!($162)) {
     break;
    }
    $163 = $start;
    $164 = $x;
    $165 = (($163) + ($164))|0;
    $166 = $l;
    $167 = (($165) + ($166))|0;
    $168 = $1;
    $169 = (($168) + ($167)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = $m;
    $173 = (($172) - 1)|0;
    $174 = ($171|0)>($173|0);
    if ($174) {
     label = 36;
     break;
    }
    $175 = $start;
    $176 = $x;
    $177 = (($175) + ($176))|0;
    $178 = $l;
    $179 = (($177) + ($178))|0;
    $180 = $1;
    $181 = (($180) + ($179)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $182&255;
    $184 = $o;
    $185 = ($183|0)>($184|0);
    if ($185) {
     $186 = $start;
     $187 = $x;
     $188 = (($186) + ($187))|0;
     $189 = $l;
     $190 = (($188) + ($189))|0;
     $191 = $1;
     $192 = (($191) + ($190)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $o = $194;
    }
    $195 = $l;
    $196 = (($195) + 1)|0;
    $l = $196;
   }
   if ((label|0) == 36) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $197 = $x;
   $198 = $l;
   $199 = (($197) + ($198))|0;
   $200 = $j;
   $201 = ($199|0)>($200|0);
   if ($201) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $202 = $l;
   $203 = ($202|0)==(0);
   $204 = $l;
   $205 = ($204|0)==(128);
   $or$cond9 = $203 | $205;
   if ($or$cond9) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $206 = $o;
   $207 = (($206) + 1)|0;
   $o = $207;
   $208 = $3;
   $209 = $start;
   $210 = $j;
   $211 = (($209) + ($210))|0;
   $212 = (($211) + 1)|0;
   $213 = ($208|0)<($212|0);
   if ($213) {
    $214 = $start;
    $215 = $j;
    $216 = (($214) + ($215))|0;
    $217 = (($216) + 1)|0;
    $218 = $3;
    $219 = (($217) - ($218))|0;
    $0 = $219;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   $220 = $l;
   $221 = (($220) + 1)|0;
   $l = $221;
   $222 = $x;
   $223 = $l;
   $224 = (($222) + ($223))|0;
   $n = $224;
   L69: while(1) {
    $225 = $n;
    $226 = $j;
    $227 = ($225|0)<($226|0);
    if (!($227)) {
     label = 76;
     break;
    }
    $228 = $start;
    $229 = $n;
    $230 = (($228) + ($229))|0;
    $231 = $1;
    $232 = (($231) + ($230)|0);
    $233 = HEAP8[$232>>0]|0;
    $d = $233;
    $234 = $start;
    $235 = $n;
    $236 = (($234) + ($235))|0;
    $237 = (($236) + 1)|0;
    $238 = $1;
    $239 = (($238) + ($237)|0);
    $240 = HEAP8[$239>>0]|0;
    $e = $240;
    $241 = $d;
    $242 = $241&255;
    $243 = $242 & 255;
    $244 = ($243|0)==(255);
    do {
     if ($244) {
      $245 = $e;
      $246 = $245&255;
      $247 = $246 & 192;
      $248 = ($247|0)==(0);
      if ($248) {
       $249 = $n;
       $250 = (($249) + 1)|0;
       $n = $250;
       break;
      }
      $251 = $e;
      $252 = $251&255;
      $253 = $252 & 192;
      $254 = ($253|0)==(64);
      if ($254) {
       $255 = $n;
       $256 = (($255) + 2)|0;
       $n = $256;
       break;
      }
      $257 = $e;
      $258 = $257&255;
      $259 = $258 & 192;
      $260 = ($259|0)==(192);
      if ($260) {
       $261 = $n;
       $262 = (($261) + 3)|0;
       $n = $262;
      } else {
       label = 55;
      }
     } else {
      label = 55;
     }
    } while(0);
    do {
     if ((label|0) == 55) {
      label = 0;
      $263 = $d;
      $264 = $263&255;
      $265 = $264 & 255;
      $266 = ($265|0)==(127);
      if (!($266)) {
       $267 = $d;
       $268 = $267&255;
       $269 = $268 & 240;
       $270 = ($269|0)==(240);
       if ($270) {
        $271 = $e;
        $272 = $271&255;
        $273 = $272 & 31;
        $274 = $k;
        $275 = ($273|0)>($274|0);
        if ($275) {
         label = 58;
         break L69;
        }
        $276 = $n;
        $277 = (($276) + 2)|0;
        $n = $277;
        break;
       }
       $278 = $d;
       $279 = $278&255;
       $280 = $279 & 240;
       $281 = ($280|0)==(112);
       if ($281) {
        $282 = $e;
        $283 = $282&255;
        $284 = $283 & 31;
        $285 = $k;
        $286 = ($284|0)>($285|0);
        if ($286) {
         label = 62;
         break L69;
        }
        $287 = $n;
        $288 = (($287) + 1)|0;
        $n = $288;
        break;
       }
       $289 = $d;
       $290 = $289&255;
       $291 = $290 & 240;
       $292 = ($291|0)==(224);
       if ($292) {
        $293 = $n;
        $294 = (($293) + 2)|0;
        $n = $294;
        break;
       }
       $295 = $d;
       $296 = $295&255;
       $297 = $296 & 240;
       $298 = ($297|0)==(96);
       if ($298) {
        $299 = $n;
        $300 = (($299) + 1)|0;
        $n = $300;
        break;
       }
       $301 = $d;
       $302 = $301&255;
       $303 = $302 & 128;
       $304 = ($303|0)==(128);
       $305 = $d;
       $306 = $305&255;
       $307 = $306 << 4;
       $308 = $307 & 16;
       $309 = $e;
       $310 = $309&255;
       $311 = $310 >> 4;
       $312 = $311 & 15;
       $313 = $308 | $312;
       $314 = $k;
       $315 = ($313|0)>($314|0);
       if ($304) {
        if ($315) {
         label = 70;
         break L69;
        }
        $316 = $n;
        $317 = (($316) + 3)|0;
        $n = $317;
        break;
       } else {
        if ($315) {
         label = 73;
         break L69;
        }
        $318 = $n;
        $319 = (($318) + 2)|0;
        $n = $319;
        break;
       }
      }
     }
    } while(0);
    $320 = $n;
    $321 = (($320) + 1)|0;
    $n = $321;
   }
   if ((label|0) == 58) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 62) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 70) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 73) {
    $0 = -1;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
   else if ((label|0) == 76) {
    $0 = 0;
    $322 = $0;
    STACKTOP = sp;return ($322|0);
   }
  }
 }
 return (0)|0;
}
function _depack_p61a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $PACK = 0, $Unpacked_Sample_Data_Size = 0, $a = 0, $b = 0, $c1 = 0, $c2 = 0, $c3 = 0;
 var $c4 = 0, $c5 = 0, $c6 = 0, $i = 0, $isize = 0, $j = 0, $k = 0, $l = 0, $len = 0, $max_row = 0, $nins = 0, $npat = 0, $ptable = 0, $saddr = 0, $sdata_addr = 0, $smp_buffer = 0, $smp_size = 0, $ssize = 0, $taddr = 0, $tdata = 0;
 var $tdata_addr = 0, $tmp = 0, $use_delta = 0, $use_packed = 0, $x = 0, $x1 = 0, $z = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 134784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 133744|0;
 $tdata = sp + 2672|0;
 $ptable = sp + 2544|0;
 $isize = sp + 2352|0;
 $PACK = sp + 2510|0;
 $taddr = sp + 304|0;
 $smp_size = sp + 136|0;
 $saddr = sp + 12|0;
 $1 = $in;
 $2 = $out;
 $len = 0;
 $npat = 0;
 $nins = 0;
 $use_delta = 0;
 $use_packed = 0;
 $tdata_addr = 0;
 $sdata_addr = 0;
 $ssize = 0;
 $i = 0;
 _memset(($taddr|0),0,2048)|0;
 _memset(($tdata|0),0,131072)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$smp_size; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$isize; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$isize+60>>1]=0|0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (($PACK) + ($5)|0);
  HEAP8[$6>>0] = 0;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $i = $8;
 }
 HEAP32[$saddr>>2] = 0;
 $9 = $1;
 $10 = (_hio_read16b($9)|0);
 $11 = $10&65535;
 $sdata_addr = $11;
 $12 = $1;
 $13 = (_hio_read8($12)|0);
 $14 = $13&255;
 $npat = $14;
 $15 = $1;
 $16 = (_hio_read8($15)|0);
 $17 = $16&255;
 $nins = $17;
 $18 = $nins;
 $19 = $18 & 128;
 $20 = ($19|0)!=(0);
 if ($20) {
  $use_delta = 1;
 }
 $21 = $nins;
 $22 = $21 & 64;
 $23 = ($22|0)!=(0);
 if ($23) {
  $use_packed = 1;
  $0 = -1;
  $1251 = $0;
  STACKTOP = sp;return ($1251|0);
 }
 $24 = $nins;
 $25 = $24 & 63;
 $nins = $25;
 $26 = $use_packed;
 $27 = $26&255;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = $1;
  $30 = (_hio_read32b($29)|0);
  $Unpacked_Sample_Data_Size = $30;
 }
 $31 = $2;
 (_pw_write_zero($31,20)|0);
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = $nins;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $2;
  (_pw_write_zero($35,22)|0);
  $36 = $1;
  $37 = (_hio_read16b($36)|0);
  $38 = $37&65535;
  $39 = $i;
  $40 = (($isize) + ($39<<2)|0);
  HEAP32[$40>>2] = $38;
  $j = $38;
  $41 = $j;
  $42 = ($41|0)>(65280);
  if ($42) {
   $43 = $j;
   $44 = (65535 - ($43))|0;
   $45 = (($smp_size) + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $i;
   $48 = (($smp_size) + ($47<<2)|0);
   HEAP32[$48>>2] = $46;
   $49 = $j;
   $50 = (65535 - ($49))|0;
   $51 = (($isize) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $i;
   $54 = (($isize) + ($53<<2)|0);
   HEAP32[$54>>2] = $52;
   $55 = $j;
   $56 = (65535 - ($55))|0;
   $57 = (($saddr) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $i;
   $60 = (($saddr) + ($59<<2)|0);
   HEAP32[$60>>2] = $58;
  } else {
   $61 = $i;
   $62 = ($61|0)>(0);
   if ($62) {
    $63 = $i;
    $64 = (($63) - 1)|0;
    $65 = (($saddr) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $i;
    $68 = (($67) - 1)|0;
    $69 = (($smp_size) + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($66) + ($70))|0;
    $72 = $i;
    $73 = (($saddr) + ($72<<2)|0);
    HEAP32[$73>>2] = $71;
   }
   $74 = $j;
   $75 = $74<<1;
   $76 = $i;
   $77 = (($smp_size) + ($76<<2)|0);
   HEAP32[$77>>2] = $75;
   $78 = $i;
   $79 = (($smp_size) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $ssize;
   $82 = (($81) + ($80))|0;
   $ssize = $82;
  }
  $83 = $i;
  $84 = (($smp_size) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85|0) / 2)&-1;
  $j = $86;
  $87 = $2;
  $88 = $i;
  $89 = (($isize) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90&65535;
  _write16b($87,$91);
  $92 = $1;
  $93 = (_hio_read8($92)|0);
  $c1 = $93;
  $94 = $c1;
  $95 = $94&255;
  $96 = $95 & 64;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = $i;
   $99 = (($PACK) + ($98)|0);
   HEAP8[$99>>0] = 1;
  }
  $100 = $c1;
  $101 = $100&255;
  $102 = $101 & 63;
  $103 = $102&255;
  $c1 = $103;
  $104 = $2;
  $105 = $c1;
  _write8($104,$105);
  $106 = $2;
  $107 = $1;
  $108 = (_hio_read8($107)|0);
  _write8($106,$108);
  $109 = $1;
  $110 = (_hio_read16b($109)|0);
  $111 = $110&65535;
  $x = $111;
  $112 = $x;
  $113 = ($112|0)==(65535);
  $114 = $2;
  if ($113) {
   _write16b($114,0);
   $115 = $2;
   _write16b($115,1);
  } else {
   $116 = $x;
   $117 = $116&65535;
   _write16b($114,$117);
   $118 = $2;
   $119 = $j;
   $120 = $x;
   $121 = (($119) - ($120))|0;
   $122 = $121&65535;
   _write16b($118,$122);
  }
  $123 = $i;
  $124 = (($123) + 1)|0;
  $i = $124;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $125 = ((($tmp)) + 29|0);
 HEAP8[$125>>0] = 1;
 while(1) {
  $126 = $i;
  $127 = ($126|0)<(31);
  if (!($127)) {
   break;
  }
  $128 = $2;
  (_fwrite(($tmp|0),30,1,($128|0))|0);
  $129 = $i;
  $130 = (($129) + 1)|0;
  $i = $130;
 }
 $i = 0;
 while(1) {
  $131 = $i;
  $132 = $npat;
  $133 = ($131|0)<($132|0);
  if (!($133)) {
   break;
  }
  $j = 0;
  while(1) {
   $134 = $j;
   $135 = ($134|0)<(4);
   if (!($135)) {
    break;
   }
   $136 = $1;
   $137 = (_hio_read16b($136)|0);
   $138 = $137&65535;
   $139 = $j;
   $140 = $i;
   $141 = (($taddr) + ($140<<4)|0);
   $142 = (($141) + ($139<<2)|0);
   HEAP32[$142>>2] = $138;
   $143 = $j;
   $144 = (($143) + 1)|0;
   $j = $144;
  }
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 $len = 0;
 while(1) {
  $147 = $len;
  $148 = ($147|0)<(128);
  if (!($148)) {
   break;
  }
  $149 = $1;
  $150 = (_hio_read8($149)|0);
  $c1 = $150;
  $151 = $c1;
  $152 = $151&255;
  $153 = ($152|0)==(255);
  if ($153) {
   break;
  }
  $154 = $c1;
  $155 = $len;
  $156 = (($ptable) + ($155)|0);
  HEAP8[$156>>0] = $154;
  $157 = $len;
  $158 = (($157) + 1)|0;
  $len = $158;
 }
 $159 = $2;
 $160 = $len;
 $161 = $160&255;
 _write8($159,$161);
 $162 = $2;
 _write8($162,127);
 $163 = $2;
 (_fwrite(($ptable|0),128,1,($163|0))|0);
 $164 = $2;
 _write32b($164,1294879534);
 $165 = $1;
 $166 = (_hio_tell($165)|0);
 $tdata_addr = $166;
 $i = 0;
 while(1) {
  $167 = $i;
  $168 = $npat;
  $169 = ($167|0)<($168|0);
  if (!($169)) {
   break;
  }
  $max_row = 63;
  $j = 0;
  while(1) {
   $170 = $j;
   $171 = ($170|0)<(4);
   if (!($171)) {
    break;
   }
   $172 = $1;
   $173 = $j;
   $174 = $i;
   $175 = (($taddr) + ($174<<4)|0);
   $176 = (($175) + ($173<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $tdata_addr;
   $179 = (($177) + ($178))|0;
   (_hio_seek($172,$179,0)|0);
   $k = 0;
   L56: while(1) {
    $180 = $k;
    $181 = $max_row;
    $182 = ($180|0)<=($181|0);
    if (!($182)) {
     break;
    }
    $183 = $k;
    $184 = $183<<2;
    $185 = $i;
    $186 = $185<<2;
    $187 = $j;
    $188 = (($186) + ($187))|0;
    $189 = (($tdata) + ($188<<8)|0);
    $190 = (($189) + ($184)|0);
    $x1 = $190;
    $191 = $1;
    $192 = (_hio_read8($191)|0);
    $c1 = $192;
    $193 = $c1;
    $194 = $193&255;
    $195 = $194 & 112;
    $196 = ($195|0)==(112);
    L59: do {
     if ($196) {
      $197 = $c1;
      $198 = $197&255;
      $199 = ($198|0)!=(255);
      if ($199) {
       $200 = $c1;
       $201 = $200&255;
       $202 = ($201|0)!=(127);
       if ($202) {
        $203 = $1;
        $204 = (_hio_read8($203)|0);
        $c2 = $204;
        $205 = $c1;
        $206 = $205&255;
        $207 = $206 << 4;
        $208 = $207 & 240;
        $209 = $c2;
        $210 = $209&255;
        $211 = $210 >> 4;
        $212 = $211 & 14;
        $213 = $208 | $212;
        $214 = $213&255;
        $c6 = $214;
        $215 = $c2;
        $216 = $215&255;
        $217 = $216 & 16;
        $218 = $c6;
        $219 = $218&255;
        $220 = (($219|0) / 2)&-1;
        $221 = (7848 + ($220<<1)|0);
        $222 = HEAP8[$221>>0]|0;
        $223 = $222&255;
        $224 = $217 | $223;
        $225 = $224&255;
        $226 = $x1;
        $227 = ((($226)) + 1|0);
        $x1 = $227;
        HEAP8[$226>>0] = $225;
        $228 = $c6;
        $229 = $228&255;
        $230 = (($229|0) / 2)&-1;
        $231 = (7848 + ($230<<1)|0);
        $232 = ((($231)) + 1|0);
        $233 = HEAP8[$232>>0]|0;
        $234 = $x1;
        $235 = ((($234)) + 1|0);
        $x1 = $235;
        HEAP8[$234>>0] = $233;
        $236 = $c2;
        $237 = $236&255;
        $238 = $237 << 4;
        $239 = $238 & 240;
        $240 = $239&255;
        $241 = $x1;
        $242 = ((($241)) + 1|0);
        $x1 = $242;
        HEAP8[$241>>0] = $240;
        $243 = $c1;
        $244 = $243&255;
        $245 = $244 & 128;
        $246 = ($245|0)!=(0);
        if ($246) {
         $247 = $1;
         $248 = (_hio_read8($247)|0);
         $c3 = $248;
         $249 = $c3;
         $250 = $249&255;
         $251 = ($250|0)<(128);
         $252 = $c3;
         $253 = $252&255;
         if ($251) {
          $254 = $k;
          $255 = (($254) + ($253))|0;
          $k = $255;
          break;
         }
         $256 = (($253) - 128)|0;
         $257 = $256&255;
         $c4 = $257;
         $l = 0;
         while(1) {
          $258 = $l;
          $259 = $c4;
          $260 = $259&255;
          $261 = ($258|0)<($260|0);
          if (!($261)) {
           break L59;
          }
          $262 = $k;
          $263 = (($262) + 1)|0;
          $k = $263;
          $264 = $k;
          $265 = $264<<2;
          $266 = $i;
          $267 = $266<<2;
          $268 = $j;
          $269 = (($267) + ($268))|0;
          $270 = (($tdata) + ($269<<8)|0);
          $271 = (($270) + ($265)|0);
          $x1 = $271;
          $272 = $c2;
          $273 = $272&255;
          $274 = $273 & 16;
          $275 = $c6;
          $276 = $275&255;
          $277 = (($276|0) / 2)&-1;
          $278 = (7848 + ($277<<1)|0);
          $279 = HEAP8[$278>>0]|0;
          $280 = $279&255;
          $281 = $274 | $280;
          $282 = $281&255;
          $283 = $x1;
          $284 = ((($283)) + 1|0);
          $x1 = $284;
          HEAP8[$283>>0] = $282;
          $285 = $c6;
          $286 = $285&255;
          $287 = (($286|0) / 2)&-1;
          $288 = (7848 + ($287<<1)|0);
          $289 = ((($288)) + 1|0);
          $290 = HEAP8[$289>>0]|0;
          $291 = $x1;
          $292 = ((($291)) + 1|0);
          $x1 = $292;
          HEAP8[$291>>0] = $290;
          $293 = $c2;
          $294 = $293&255;
          $295 = $294 << 4;
          $296 = $295 & 240;
          $297 = $296&255;
          $298 = $x1;
          $299 = ((($298)) + 1|0);
          $x1 = $299;
          HEAP8[$298>>0] = $297;
          $300 = $l;
          $301 = (($300) + 1)|0;
          $l = $301;
         }
        }
       } else {
        label = 51;
       }
      } else {
       label = 51;
      }
     } else {
      label = 51;
     }
    } while(0);
    L70: do {
     if ((label|0) == 51) {
      label = 0;
      $302 = $c1;
      $303 = $302&255;
      $304 = $303 & 112;
      $305 = ($304|0)==(96);
      if ($305) {
       $306 = $c1;
       $307 = $306&255;
       $308 = ($307|0)!=(255);
       if ($308) {
        $309 = $1;
        $310 = (_hio_read8($309)|0);
        $c2 = $310;
        $311 = $c1;
        $312 = $311&255;
        $313 = $312 & 15;
        $314 = $313&255;
        $c6 = $314;
        $315 = $c6;
        $316 = $315&255;
        $317 = ($316|0)==(8);
        if ($317) {
         $318 = $c1;
         $319 = $318&255;
         $320 = (($319) - 8)|0;
         $321 = $320&255;
         $c1 = $321;
        }
        $322 = $x1;
        $323 = ((($322)) + 2|0);
        $x1 = $323;
        $324 = $c1;
        $325 = $324&255;
        $326 = $325 & 15;
        $327 = $326&255;
        $328 = $x1;
        $329 = ((($328)) + 1|0);
        $x1 = $329;
        HEAP8[$328>>0] = $327;
        $330 = $c6;
        $331 = $330&255;
        $332 = ($331|0)==(5);
        if ($332) {
         label = 58;
        } else {
         $333 = $c6;
         $334 = $333&255;
         $335 = ($334|0)==(6);
         if ($335) {
          label = 58;
         } else {
          $336 = $c6;
          $337 = $336&255;
          $338 = ($337|0)==(10);
          if ($338) {
           label = 58;
          }
         }
        }
        if ((label|0) == 58) {
         label = 0;
         $339 = $c2;
         $340 = $339&255;
         $341 = ($340|0)>(127);
         $342 = $c2;
         $343 = $342&255;
         $344 = (256 - ($343))|0;
         $345 = $344 << 4;
         $346 = $341 ? $345 : $343;
         $347 = $346&255;
         $c2 = $347;
        }
        $348 = $c2;
        $349 = $x1;
        $350 = ((($349)) + 1|0);
        $x1 = $350;
        HEAP8[$349>>0] = $348;
        $351 = $c6;
        $352 = $351&255;
        $353 = ($352|0)==(13);
        if ($353) {
         label = 60;
         break L56;
        }
        $355 = $c6;
        $356 = $355&255;
        $357 = ($356|0)==(11);
        if ($357) {
         label = 62;
         break L56;
        }
        $359 = $c1;
        $360 = $359&255;
        $361 = $360 & 128;
        $362 = ($361|0)!=(0);
        if (!($362)) {
         break;
        }
        $363 = $1;
        $364 = (_hio_read8($363)|0);
        $c3 = $364;
        $365 = $c3;
        $366 = $365&255;
        $367 = ($366|0)<(128);
        $368 = $c3;
        $369 = $368&255;
        if ($367) {
         $370 = $k;
         $371 = (($370) + ($369))|0;
         $k = $371;
         break;
        }
        $372 = (($369) - 128)|0;
        $373 = $372&255;
        $c4 = $373;
        $l = 0;
        while(1) {
         $374 = $l;
         $375 = $c4;
         $376 = $375&255;
         $377 = ($374|0)<($376|0);
         if (!($377)) {
          break L70;
         }
         $378 = $k;
         $379 = (($378) + 1)|0;
         $k = $379;
         $380 = $k;
         $381 = $380<<2;
         $382 = $i;
         $383 = $382<<2;
         $384 = $j;
         $385 = (($383) + ($384))|0;
         $386 = (($tdata) + ($385<<8)|0);
         $387 = (($386) + ($381)|0);
         $388 = ((($387)) + 2|0);
         $x1 = $388;
         $389 = $c1;
         $390 = $389&255;
         $391 = $390 & 15;
         $392 = $391&255;
         $393 = $x1;
         $394 = ((($393)) + 1|0);
         $x1 = $394;
         HEAP8[$393>>0] = $392;
         $395 = $c2;
         $396 = $x1;
         $397 = ((($396)) + 1|0);
         $x1 = $397;
         HEAP8[$396>>0] = $395;
         $398 = $l;
         $399 = (($398) + 1)|0;
         $l = $399;
        }
       }
      }
      $400 = $c1;
      $401 = $400&255;
      $402 = $401 & 128;
      $403 = ($402|0)==(128);
      if ($403) {
       $404 = $c1;
       $405 = $404&255;
       $406 = ($405|0)!=(255);
       if ($406) {
        $407 = $1;
        $408 = (_hio_read8($407)|0);
        $c2 = $408;
        $409 = $1;
        $410 = (_hio_read8($409)|0);
        $c3 = $410;
        $411 = $1;
        $412 = (_hio_read8($411)|0);
        $c4 = $412;
        $413 = $c1;
        $414 = $413&255;
        $415 = $414 & 127;
        $416 = $415&255;
        $c1 = $416;
        $417 = $c1;
        $418 = $417&255;
        $419 = $418 << 4;
        $420 = $419 & 16;
        $421 = $c1;
        $422 = $421&255;
        $423 = (($422|0) / 2)&-1;
        $424 = (7848 + ($423<<1)|0);
        $425 = HEAP8[$424>>0]|0;
        $426 = $425&255;
        $427 = $420 | $426;
        $428 = $427&255;
        $429 = $x1;
        $430 = ((($429)) + 1|0);
        $x1 = $430;
        HEAP8[$429>>0] = $428;
        $431 = $c1;
        $432 = $431&255;
        $433 = (($432|0) / 2)&-1;
        $434 = (7848 + ($433<<1)|0);
        $435 = ((($434)) + 1|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $x1;
        $438 = ((($437)) + 1|0);
        $x1 = $438;
        HEAP8[$437>>0] = $436;
        $439 = $c2;
        $440 = $439&255;
        $441 = $440 & 15;
        $442 = $441&255;
        $c6 = $442;
        $443 = $c6;
        $444 = $443&255;
        $445 = ($444|0)==(8);
        if ($445) {
         $446 = $c2;
         $447 = $446&255;
         $448 = (($447) - 8)|0;
         $449 = $448&255;
         $c2 = $449;
        }
        $450 = $c2;
        $451 = $x1;
        $452 = ((($451)) + 1|0);
        $x1 = $452;
        HEAP8[$451>>0] = $450;
        $453 = $c6;
        $454 = $453&255;
        $455 = ($454|0)==(5);
        if ($455) {
         label = 76;
        } else {
         $456 = $c6;
         $457 = $456&255;
         $458 = ($457|0)==(6);
         if ($458) {
          label = 76;
         } else {
          $459 = $c6;
          $460 = $459&255;
          $461 = ($460|0)==(10);
          if ($461) {
           label = 76;
          }
         }
        }
        if ((label|0) == 76) {
         label = 0;
         $462 = $c3;
         $463 = $462&255;
         $464 = ($463|0)>(127);
         $465 = $c3;
         $466 = $465&255;
         $467 = (256 - ($466))|0;
         $468 = $467 << 4;
         $469 = $464 ? $468 : $466;
         $470 = $469&255;
         $c3 = $470;
        }
        $471 = $c3;
        $472 = $x1;
        $473 = ((($472)) + 1|0);
        $x1 = $473;
        HEAP8[$472>>0] = $471;
        $474 = $c6;
        $475 = $474&255;
        $476 = ($475|0)==(13);
        if ($476) {
         label = 78;
         break L56;
        }
        $478 = $c6;
        $479 = $478&255;
        $480 = ($479|0)==(11);
        if ($480) {
         label = 80;
         break L56;
        }
        $482 = $c4;
        $483 = $482&255;
        $484 = ($483|0)<(128);
        $485 = $c4;
        $486 = $485&255;
        if ($484) {
         $487 = $k;
         $488 = (($487) + ($486))|0;
         $k = $488;
         break;
        }
        $489 = (($486) - 128)|0;
        $490 = $489&255;
        $c4 = $490;
        $l = 0;
        while(1) {
         $491 = $l;
         $492 = $c4;
         $493 = $492&255;
         $494 = ($491|0)<($493|0);
         if (!($494)) {
          break L70;
         }
         $495 = $k;
         $496 = (($495) + 1)|0;
         $k = $496;
         $497 = $k;
         $498 = $497<<2;
         $499 = $i;
         $500 = $499<<2;
         $501 = $j;
         $502 = (($500) + ($501))|0;
         $503 = (($tdata) + ($502<<8)|0);
         $504 = (($503) + ($498)|0);
         $x1 = $504;
         $505 = $c1;
         $506 = $505&255;
         $507 = $506 << 4;
         $508 = $507 & 16;
         $509 = $c1;
         $510 = $509&255;
         $511 = (($510|0) / 2)&-1;
         $512 = (7848 + ($511<<1)|0);
         $513 = HEAP8[$512>>0]|0;
         $514 = $513&255;
         $515 = $508 | $514;
         $516 = $515&255;
         $517 = $x1;
         $518 = ((($517)) + 1|0);
         $x1 = $518;
         HEAP8[$517>>0] = $516;
         $519 = $c1;
         $520 = $519&255;
         $521 = (($520|0) / 2)&-1;
         $522 = (7848 + ($521<<1)|0);
         $523 = ((($522)) + 1|0);
         $524 = HEAP8[$523>>0]|0;
         $525 = $x1;
         $526 = ((($525)) + 1|0);
         $x1 = $526;
         HEAP8[$525>>0] = $524;
         $527 = $c2;
         $528 = $527&255;
         $529 = $528 & 15;
         $530 = $529&255;
         $c6 = $530;
         $531 = $c6;
         $532 = $531&255;
         $533 = ($532|0)==(8);
         if ($533) {
          $534 = $c2;
          $535 = $534&255;
          $536 = (($535) - 8)|0;
          $537 = $536&255;
          $c2 = $537;
         }
         $538 = $c2;
         $539 = $x1;
         $540 = ((($539)) + 1|0);
         $x1 = $540;
         HEAP8[$539>>0] = $538;
         $541 = $c6;
         $542 = $541&255;
         $543 = ($542|0)==(5);
         do {
          if ($543) {
           label = 90;
          } else {
           $544 = $c6;
           $545 = $544&255;
           $546 = ($545|0)==(6);
           if ($546) {
            label = 90;
            break;
           }
           $547 = $c6;
           $548 = $547&255;
           $549 = ($548|0)==(10);
           if ($549) {
            label = 90;
           }
          }
         } while(0);
         if ((label|0) == 90) {
          label = 0;
          $550 = $c3;
          $551 = $550&255;
          $552 = ($551|0)>(127);
          $553 = $c3;
          $554 = $553&255;
          $555 = (256 - ($554))|0;
          $556 = $555 << 4;
          $557 = $552 ? $556 : $554;
          $558 = $557&255;
          $c3 = $558;
         }
         $559 = $c3;
         $560 = $x1;
         $561 = ((($560)) + 1|0);
         $x1 = $561;
         HEAP8[$560>>0] = $559;
         $562 = $l;
         $563 = (($562) + 1)|0;
         $l = $563;
        }
       }
      }
      $564 = $c1;
      $565 = $564&255;
      $566 = $565 & 127;
      $567 = ($566|0)==(127);
      if (!($567)) {
       $1088 = $1;
       $1089 = (_hio_read8($1088)|0);
       $c2 = $1089;
       $1090 = $1;
       $1091 = (_hio_read8($1090)|0);
       $c3 = $1091;
       $1092 = $c1;
       $1093 = $1092&255;
       $1094 = $1093 << 4;
       $1095 = $1094 & 16;
       $1096 = $c1;
       $1097 = $1096&255;
       $1098 = (($1097|0) / 2)&-1;
       $1099 = (7848 + ($1098<<1)|0);
       $1100 = HEAP8[$1099>>0]|0;
       $1101 = $1100&255;
       $1102 = $1095 | $1101;
       $1103 = $1102&255;
       $1104 = $x1;
       $1105 = ((($1104)) + 1|0);
       $x1 = $1105;
       HEAP8[$1104>>0] = $1103;
       $1106 = $c1;
       $1107 = $1106&255;
       $1108 = (($1107|0) / 2)&-1;
       $1109 = (7848 + ($1108<<1)|0);
       $1110 = ((($1109)) + 1|0);
       $1111 = HEAP8[$1110>>0]|0;
       $1112 = $x1;
       $1113 = ((($1112)) + 1|0);
       $x1 = $1113;
       HEAP8[$1112>>0] = $1111;
       $1114 = $c2;
       $1115 = $1114&255;
       $1116 = $1115 & 15;
       $1117 = $1116&255;
       $c6 = $1117;
       $1118 = $c6;
       $1119 = $1118&255;
       $1120 = ($1119|0)==(8);
       if ($1120) {
        $1121 = $c2;
        $1122 = $1121&255;
        $1123 = (($1122) - 8)|0;
        $1124 = $1123&255;
        $c2 = $1124;
       }
       $1125 = $c2;
       $1126 = $x1;
       $1127 = ((($1126)) + 1|0);
       $x1 = $1127;
       HEAP8[$1126>>0] = $1125;
       $1128 = $c6;
       $1129 = $1128&255;
       $1130 = ($1129|0)==(5);
       if ($1130) {
        label = 172;
       } else {
        $1131 = $c6;
        $1132 = $1131&255;
        $1133 = ($1132|0)==(6);
        if ($1133) {
         label = 172;
        } else {
         $1134 = $c6;
         $1135 = $1134&255;
         $1136 = ($1135|0)==(10);
         if ($1136) {
          label = 172;
         }
        }
       }
       if ((label|0) == 172) {
        label = 0;
        $1137 = $c3;
        $1138 = $1137&255;
        $1139 = ($1138|0)>(127);
        $1140 = $c3;
        $1141 = $1140&255;
        $1142 = (256 - ($1141))|0;
        $1143 = $1142 << 4;
        $1144 = $1139 ? $1143 : $1141;
        $1145 = $1144&255;
        $c3 = $1145;
       }
       $1146 = $c3;
       $1147 = $x1;
       $1148 = ((($1147)) + 1|0);
       $x1 = $1148;
       HEAP8[$1147>>0] = $1146;
       $1149 = $c6;
       $1150 = $1149&255;
       $1151 = ($1150|0)==(13);
       if ($1151) {
        label = 174;
        break L56;
       }
       $1153 = $c6;
       $1154 = $1153&255;
       $1155 = ($1154|0)==(11);
       if ($1155) {
        label = 176;
        break L56;
       } else {
        break;
       }
      }
      $568 = $c1;
      $569 = $568&255;
      $570 = $569 ^ -1;
      $571 = $570 & 128;
      $572 = ($571|0)!=(0);
      if (!($572)) {
       $573 = $1;
       $574 = (_hio_read8($573)|0);
       $c2 = $574;
       $575 = $c2;
       $576 = $575&255;
       $577 = ($576|0)<(64);
       $578 = $c2;
       $579 = $578&255;
       if ($577) {
        $580 = $k;
        $581 = (($580) + ($579))|0;
        $k = $581;
        break;
       }
       $582 = (($579) - 64)|0;
       $583 = $582&255;
       $c2 = $583;
       $584 = $1;
       $585 = (_hio_read8($584)|0);
       $c3 = $585;
       $586 = $c3;
       $587 = $586&255;
       $z = $587;
       $588 = $c2;
       $589 = $588&255;
       $590 = ($589|0)>=(128);
       if ($590) {
        $591 = $c2;
        $592 = $591&255;
        $593 = (($592) - 128)|0;
        $594 = $593&255;
        $c2 = $594;
        $595 = $1;
        $596 = (_hio_read8($595)|0);
        $c4 = $596;
        $597 = $c3;
        $598 = $597&255;
        $599 = $598 << 8;
        $600 = $c4;
        $601 = $600&255;
        $602 = (($599) + ($601))|0;
        $z = $602;
       }
       $603 = $1;
       $604 = (_hio_tell($603)|0);
       $a = $604;
       $605 = $c2;
       $c5 = $605;
       $606 = $1;
       $607 = $z;
       $608 = (0 - ($607))|0;
       (_hio_seek($606,$608,1)|0);
       $l = 0;
       while(1) {
        $609 = $l;
        $610 = $c5;
        $611 = $610&255;
        $612 = ($609|0)<=($611|0);
        if ($612) {
         $613 = $k;
         $614 = $max_row;
         $615 = ($613|0)<=($614|0);
         $1252 = $615;
        } else {
         $1252 = 0;
        }
        $616 = $1;
        if (!($1252)) {
         break;
        }
        $617 = (_hio_read8($616)|0);
        $c1 = $617;
        $618 = $k;
        $619 = $618<<2;
        $620 = $i;
        $621 = $620<<2;
        $622 = $j;
        $623 = (($621) + ($622))|0;
        $624 = (($tdata) + ($623<<8)|0);
        $625 = (($624) + ($619)|0);
        $x1 = $625;
        $626 = $c1;
        $627 = $626&255;
        $628 = $627 & 112;
        $629 = ($628|0)==(112);
        L150: do {
         if ($629) {
          $630 = $c1;
          $631 = $630&255;
          $632 = ($631|0)!=(255);
          if (!($632)) {
           label = 111;
           break;
          }
          $633 = $c1;
          $634 = $633&255;
          $635 = ($634|0)!=(127);
          if (!($635)) {
           label = 111;
           break;
          }
          $636 = $1;
          $637 = (_hio_read8($636)|0);
          $c2 = $637;
          $638 = $c1;
          $639 = $638&255;
          $640 = $639 << 4;
          $641 = $640 & 240;
          $642 = $c2;
          $643 = $642&255;
          $644 = $643 >> 4;
          $645 = $644 & 14;
          $646 = $641 | $645;
          $647 = $646&255;
          $c6 = $647;
          $648 = $c2;
          $649 = $648&255;
          $650 = $649 & 16;
          $651 = $c6;
          $652 = $651&255;
          $653 = (($652|0) / 2)&-1;
          $654 = (7848 + ($653<<1)|0);
          $655 = HEAP8[$654>>0]|0;
          $656 = $655&255;
          $657 = $650 | $656;
          $658 = $657&255;
          $659 = $x1;
          $660 = ((($659)) + 1|0);
          $x1 = $660;
          HEAP8[$659>>0] = $658;
          $661 = $c6;
          $662 = $661&255;
          $663 = (($662|0) / 2)&-1;
          $664 = (7848 + ($663<<1)|0);
          $665 = ((($664)) + 1|0);
          $666 = HEAP8[$665>>0]|0;
          $667 = $x1;
          $668 = ((($667)) + 1|0);
          $x1 = $668;
          HEAP8[$667>>0] = $666;
          $669 = $c2;
          $670 = $669&255;
          $671 = $670 << 4;
          $672 = $671 & 240;
          $673 = $672&255;
          $674 = $x1;
          $675 = ((($674)) + 1|0);
          $x1 = $675;
          HEAP8[$674>>0] = $673;
          $676 = $c1;
          $677 = $676&255;
          $678 = $677 & 128;
          $679 = ($678|0)!=(0);
          if (!($679)) {
           break;
          }
          $680 = $1;
          $681 = (_hio_read8($680)|0);
          $c3 = $681;
          $682 = $c3;
          $683 = $682&255;
          $684 = ($683|0)<(128);
          $685 = $c3;
          $686 = $685&255;
          if ($684) {
           $687 = $k;
           $688 = (($687) + ($686))|0;
           $k = $688;
           break;
          }
          $689 = (($686) - 128)|0;
          $690 = $689&255;
          $c4 = $690;
          $b = 0;
          while(1) {
           $691 = $b;
           $692 = $c4;
           $693 = $692&255;
           $694 = ($691|0)<($693|0);
           if (!($694)) {
            break L150;
           }
           $695 = $k;
           $696 = (($695) + 1)|0;
           $k = $696;
           $697 = $k;
           $698 = $697<<2;
           $699 = $i;
           $700 = $699<<2;
           $701 = $j;
           $702 = (($700) + ($701))|0;
           $703 = (($tdata) + ($702<<8)|0);
           $704 = (($703) + ($698)|0);
           $x1 = $704;
           $705 = $c2;
           $706 = $705&255;
           $707 = $706 & 16;
           $708 = $c6;
           $709 = $708&255;
           $710 = (($709|0) / 2)&-1;
           $711 = (7848 + ($710<<1)|0);
           $712 = HEAP8[$711>>0]|0;
           $713 = $712&255;
           $714 = $707 | $713;
           $715 = $714&255;
           $716 = $x1;
           $717 = ((($716)) + 1|0);
           $x1 = $717;
           HEAP8[$716>>0] = $715;
           $718 = $c6;
           $719 = $718&255;
           $720 = (($719|0) / 2)&-1;
           $721 = (7848 + ($720<<1)|0);
           $722 = ((($721)) + 1|0);
           $723 = HEAP8[$722>>0]|0;
           $724 = $x1;
           $725 = ((($724)) + 1|0);
           $x1 = $725;
           HEAP8[$724>>0] = $723;
           $726 = $c2;
           $727 = $726&255;
           $728 = $727 << 4;
           $729 = $728 & 240;
           $730 = $729&255;
           $731 = $x1;
           $732 = ((($731)) + 1|0);
           $x1 = $732;
           HEAP8[$731>>0] = $730;
           $733 = $b;
           $734 = (($733) + 1)|0;
           $b = $734;
          }
         } else {
          label = 111;
         }
        } while(0);
        L161: do {
         if ((label|0) == 111) {
          label = 0;
          $735 = $c1;
          $736 = $735&255;
          $737 = $736 & 96;
          $738 = ($737|0)==(96);
          do {
           if ($738) {
            $739 = $c1;
            $740 = $739&255;
            $741 = ($740|0)!=(255);
            if (!($741)) {
             break;
            }
            $742 = $c1;
            $743 = $742&255;
            $744 = ($743|0)!=(127);
            if (!($744)) {
             break;
            }
            $745 = $1;
            $746 = (_hio_read8($745)|0);
            $c2 = $746;
            $747 = $c1;
            $748 = $747&255;
            $749 = $748 & 15;
            $750 = $749&255;
            $c6 = $750;
            $751 = $c6;
            $752 = $751&255;
            $753 = ($752|0)==(8);
            if ($753) {
             $754 = $c1;
             $755 = $754&255;
             $756 = (($755) - 8)|0;
             $757 = $756&255;
             $c1 = $757;
            }
            $758 = $x1;
            $759 = ((($758)) + 2|0);
            $x1 = $759;
            $760 = $c1;
            $761 = $760&255;
            $762 = $761 & 15;
            $763 = $762&255;
            $764 = $x1;
            $765 = ((($764)) + 1|0);
            $x1 = $765;
            HEAP8[$764>>0] = $763;
            $766 = $c6;
            $767 = $766&255;
            $768 = ($767|0)==(5);
            do {
             if ($768) {
              label = 119;
             } else {
              $769 = $c6;
              $770 = $769&255;
              $771 = ($770|0)==(6);
              if ($771) {
               label = 119;
               break;
              }
              $772 = $c6;
              $773 = $772&255;
              $774 = ($773|0)==(10);
              if ($774) {
               label = 119;
              }
             }
            } while(0);
            if ((label|0) == 119) {
             label = 0;
             $775 = $c2;
             $776 = $775&255;
             $777 = ($776|0)>(127);
             $778 = $c2;
             $779 = $778&255;
             $780 = (256 - ($779))|0;
             $781 = $780 << 4;
             $782 = $777 ? $781 : $779;
             $783 = $782&255;
             $c2 = $783;
            }
            $784 = $c2;
            $785 = $x1;
            $786 = ((($785)) + 1|0);
            $x1 = $786;
            HEAP8[$785>>0] = $784;
            $787 = $c6;
            $788 = $787&255;
            $789 = ($788|0)==(13);
            if ($789) {
             label = 121;
             break L56;
            }
            $791 = $c6;
            $792 = $791&255;
            $793 = ($792|0)==(11);
            if ($793) {
             label = 123;
             break L56;
            }
            $795 = $c1;
            $796 = $795&255;
            $797 = $796 & 128;
            $798 = ($797|0)!=(0);
            if (!($798)) {
             break L161;
            }
            $799 = $1;
            $800 = (_hio_read8($799)|0);
            $c3 = $800;
            $801 = $c3;
            $802 = $801&255;
            $803 = ($802|0)<(128);
            $804 = $c3;
            $805 = $804&255;
            if ($803) {
             $806 = $k;
             $807 = (($806) + ($805))|0;
             $k = $807;
             break L161;
            }
            $808 = (($805) - 128)|0;
            $809 = $808&255;
            $c4 = $809;
            $b = 0;
            while(1) {
             $810 = $b;
             $811 = $c4;
             $812 = $811&255;
             $813 = ($810|0)<($812|0);
             if (!($813)) {
              break L161;
             }
             $814 = $k;
             $815 = (($814) + 1)|0;
             $k = $815;
             $816 = $k;
             $817 = $816<<2;
             $818 = $i;
             $819 = $818<<2;
             $820 = $j;
             $821 = (($819) + ($820))|0;
             $822 = (($tdata) + ($821<<8)|0);
             $823 = (($822) + ($817)|0);
             $824 = ((($823)) + 2|0);
             $x1 = $824;
             $825 = $c1;
             $826 = $825&255;
             $827 = $826 & 15;
             $828 = $827&255;
             $829 = $x1;
             $830 = ((($829)) + 1|0);
             $x1 = $830;
             HEAP8[$829>>0] = $828;
             $831 = $c2;
             $832 = $x1;
             $833 = ((($832)) + 1|0);
             $x1 = $833;
             HEAP8[$832>>0] = $831;
             $834 = $b;
             $835 = (($834) + 1)|0;
             $b = $835;
            }
           }
          } while(0);
          $836 = $c1;
          $837 = $836&255;
          $838 = $837 & 128;
          $839 = ($838|0)!=(0);
          do {
           if ($839) {
            $840 = $c1;
            $841 = $840&255;
            $842 = ($841|0)!=(255);
            if (!($842)) {
             break;
            }
            $843 = $c1;
            $844 = $843&255;
            $845 = ($844|0)!=(127);
            if (!($845)) {
             break;
            }
            $846 = $1;
            $847 = (_hio_read8($846)|0);
            $c2 = $847;
            $848 = $1;
            $849 = (_hio_read8($848)|0);
            $c3 = $849;
            $850 = $1;
            $851 = (_hio_read8($850)|0);
            $c4 = $851;
            $852 = $c1;
            $853 = $852&255;
            $854 = $853 & 127;
            $855 = $854&255;
            $c1 = $855;
            $856 = $c1;
            $857 = $856&255;
            $858 = $857 << 4;
            $859 = $858 & 16;
            $860 = $c1;
            $861 = $860&255;
            $862 = (($861|0) / 2)&-1;
            $863 = (7848 + ($862<<1)|0);
            $864 = HEAP8[$863>>0]|0;
            $865 = $864&255;
            $866 = $859 | $865;
            $867 = $866&255;
            $868 = $x1;
            $869 = ((($868)) + 1|0);
            $x1 = $869;
            HEAP8[$868>>0] = $867;
            $870 = $c1;
            $871 = $870&255;
            $872 = (($871|0) / 2)&-1;
            $873 = (7848 + ($872<<1)|0);
            $874 = ((($873)) + 1|0);
            $875 = HEAP8[$874>>0]|0;
            $876 = $x1;
            $877 = ((($876)) + 1|0);
            $x1 = $877;
            HEAP8[$876>>0] = $875;
            $878 = $c2;
            $879 = $878&255;
            $880 = $879 & 15;
            $881 = $880&255;
            $c6 = $881;
            $882 = $c6;
            $883 = $882&255;
            $884 = ($883|0)==(8);
            if ($884) {
             $885 = $c2;
             $886 = $885&255;
             $887 = (($886) - 8)|0;
             $888 = $887&255;
             $c2 = $888;
            }
            $889 = $c2;
            $890 = $x1;
            $891 = ((($890)) + 1|0);
            $x1 = $891;
            HEAP8[$890>>0] = $889;
            $892 = $c6;
            $893 = $892&255;
            $894 = ($893|0)==(5);
            do {
             if ($894) {
              label = 138;
             } else {
              $895 = $c6;
              $896 = $895&255;
              $897 = ($896|0)==(6);
              if ($897) {
               label = 138;
               break;
              }
              $898 = $c6;
              $899 = $898&255;
              $900 = ($899|0)==(10);
              if ($900) {
               label = 138;
              }
             }
            } while(0);
            if ((label|0) == 138) {
             label = 0;
             $901 = $c3;
             $902 = $901&255;
             $903 = ($902|0)>(127);
             $904 = $c3;
             $905 = $904&255;
             $906 = (256 - ($905))|0;
             $907 = $906 << 4;
             $908 = $903 ? $907 : $905;
             $909 = $908&255;
             $c3 = $909;
            }
            $910 = $c3;
            $911 = $x1;
            $912 = ((($911)) + 1|0);
            $x1 = $912;
            HEAP8[$911>>0] = $910;
            $913 = $c6;
            $914 = $913&255;
            $915 = ($914|0)==(13);
            if ($915) {
             label = 140;
             break L56;
            }
            $917 = $c6;
            $918 = $917&255;
            $919 = ($918|0)==(11);
            if ($919) {
             label = 142;
             break L56;
            }
            $921 = $c4;
            $922 = $921&255;
            $923 = ($922|0)<(128);
            $924 = $c4;
            $925 = $924&255;
            if ($923) {
             $926 = $k;
             $927 = (($926) + ($925))|0;
             $k = $927;
             break L161;
            }
            $928 = (($925) - 128)|0;
            $929 = $928&255;
            $c4 = $929;
            $b = 0;
            while(1) {
             $930 = $b;
             $931 = $c4;
             $932 = $931&255;
             $933 = ($930|0)<($932|0);
             if (!($933)) {
              break L161;
             }
             $934 = $k;
             $935 = (($934) + 1)|0;
             $k = $935;
             $936 = $k;
             $937 = $936<<2;
             $938 = $i;
             $939 = $938<<2;
             $940 = $j;
             $941 = (($939) + ($940))|0;
             $942 = (($tdata) + ($941<<8)|0);
             $943 = (($942) + ($937)|0);
             $x1 = $943;
             $944 = $c1;
             $945 = $944&255;
             $946 = $945 << 4;
             $947 = $946 & 16;
             $948 = $c1;
             $949 = $948&255;
             $950 = (($949|0) / 2)&-1;
             $951 = (7848 + ($950<<1)|0);
             $952 = HEAP8[$951>>0]|0;
             $953 = $952&255;
             $954 = $947 | $953;
             $955 = $954&255;
             $956 = $x1;
             $957 = ((($956)) + 1|0);
             $x1 = $957;
             HEAP8[$956>>0] = $955;
             $958 = $c1;
             $959 = $958&255;
             $960 = (($959|0) / 2)&-1;
             $961 = (7848 + ($960<<1)|0);
             $962 = ((($961)) + 1|0);
             $963 = HEAP8[$962>>0]|0;
             $964 = $x1;
             $965 = ((($964)) + 1|0);
             $x1 = $965;
             HEAP8[$964>>0] = $963;
             $966 = $c2;
             $967 = $966&255;
             $968 = $967 & 15;
             $969 = $968&255;
             $c6 = $969;
             $970 = $c6;
             $971 = $970&255;
             $972 = ($971|0)==(8);
             if ($972) {
              $973 = $c2;
              $974 = $973&255;
              $975 = (($974) - 8)|0;
              $976 = $975&255;
              $c2 = $976;
             }
             $977 = $c2;
             $978 = $x1;
             $979 = ((($978)) + 1|0);
             $x1 = $979;
             HEAP8[$978>>0] = $977;
             $980 = $c6;
             $981 = $980&255;
             $982 = ($981|0)==(5);
             do {
              if ($982) {
               label = 152;
              } else {
               $983 = $c6;
               $984 = $983&255;
               $985 = ($984|0)==(6);
               if ($985) {
                label = 152;
                break;
               }
               $986 = $c6;
               $987 = $986&255;
               $988 = ($987|0)==(10);
               if ($988) {
                label = 152;
               }
              }
             } while(0);
             if ((label|0) == 152) {
              label = 0;
              $989 = $c3;
              $990 = $989&255;
              $991 = ($990|0)>(127);
              $992 = $c3;
              $993 = $992&255;
              $994 = (256 - ($993))|0;
              $995 = $994 << 4;
              $996 = $991 ? $995 : $993;
              $997 = $996&255;
              $c3 = $997;
             }
             $998 = $c3;
             $999 = $x1;
             $1000 = ((($999)) + 1|0);
             $x1 = $1000;
             HEAP8[$999>>0] = $998;
             $1001 = $b;
             $1002 = (($1001) + 1)|0;
             $b = $1002;
            }
           }
          } while(0);
          $1003 = $c1;
          $1004 = $1003&255;
          $1005 = $1004 & 127;
          $1006 = ($1005|0)==(127);
          if ($1006) {
           $1007 = $c1;
           $1008 = $1007&255;
           $1009 = $1008 & 128;
           $1010 = ($1009|0)==(0);
           if ($1010) {
            break;
           }
           $1011 = $1;
           $1012 = (_hio_read8($1011)|0);
           $c2 = $1012;
           $1013 = $c2;
           $1014 = $1013&255;
           $1015 = ($1014|0)<(64);
           if (!($1015)) {
            break;
           }
           $1016 = $c2;
           $1017 = $1016&255;
           $1018 = $k;
           $1019 = (($1018) + ($1017))|0;
           $k = $1019;
           break;
          }
          $1020 = $1;
          $1021 = (_hio_read8($1020)|0);
          $c2 = $1021;
          $1022 = $1;
          $1023 = (_hio_read8($1022)|0);
          $c3 = $1023;
          $1024 = $c1;
          $1025 = $1024&255;
          $1026 = $1025 << 4;
          $1027 = $1026 & 16;
          $1028 = $c1;
          $1029 = $1028&255;
          $1030 = (($1029|0) / 2)&-1;
          $1031 = (7848 + ($1030<<1)|0);
          $1032 = HEAP8[$1031>>0]|0;
          $1033 = $1032&255;
          $1034 = $1027 | $1033;
          $1035 = $1034&255;
          $1036 = $x1;
          $1037 = ((($1036)) + 1|0);
          $x1 = $1037;
          HEAP8[$1036>>0] = $1035;
          $1038 = $c1;
          $1039 = $1038&255;
          $1040 = (($1039|0) / 2)&-1;
          $1041 = (7848 + ($1040<<1)|0);
          $1042 = ((($1041)) + 1|0);
          $1043 = HEAP8[$1042>>0]|0;
          $1044 = $x1;
          $1045 = ((($1044)) + 1|0);
          $x1 = $1045;
          HEAP8[$1044>>0] = $1043;
          $1046 = $c2;
          $1047 = $1046&255;
          $1048 = $1047 & 15;
          $1049 = $1048&255;
          $c6 = $1049;
          $1050 = $c6;
          $1051 = $1050&255;
          $1052 = ($1051|0)==(8);
          if ($1052) {
           $1053 = $c2;
           $1054 = $1053&255;
           $1055 = (($1054) - 8)|0;
           $1056 = $1055&255;
           $c2 = $1056;
          }
          $1057 = $c2;
          $1058 = $x1;
          $1059 = ((($1058)) + 1|0);
          $x1 = $1059;
          HEAP8[$1058>>0] = $1057;
          $1060 = $c6;
          $1061 = $1060&255;
          $1062 = ($1061|0)==(5);
          do {
           if ($1062) {
            label = 163;
           } else {
            $1063 = $c6;
            $1064 = $1063&255;
            $1065 = ($1064|0)==(6);
            if ($1065) {
             label = 163;
             break;
            }
            $1066 = $c6;
            $1067 = $1066&255;
            $1068 = ($1067|0)==(10);
            if ($1068) {
             label = 163;
            }
           }
          } while(0);
          if ((label|0) == 163) {
           label = 0;
           $1069 = $c3;
           $1070 = $1069&255;
           $1071 = ($1070|0)>(127);
           $1072 = $c3;
           $1073 = $1072&255;
           $1074 = (256 - ($1073))|0;
           $1075 = $1074 << 4;
           $1076 = $1071 ? $1075 : $1073;
           $1077 = $1076&255;
           $c3 = $1077;
          }
          $1078 = $c3;
          $1079 = $x1;
          $1080 = ((($1079)) + 1|0);
          $x1 = $1080;
          HEAP8[$1079>>0] = $1078;
         }
        } while(0);
        $1081 = $l;
        $1082 = (($1081) + 1)|0;
        $l = $1082;
        $1083 = $k;
        $1084 = (($1083) + 1)|0;
        $k = $1084;
       }
       $1085 = $a;
       (_hio_seek($616,$1085,0)|0);
       $1086 = $k;
       $1087 = (($1086) - 1)|0;
       $k = $1087;
      }
     }
    } while(0);
    $1157 = $k;
    $1158 = (($1157) + 1)|0;
    $k = $1158;
   }
   switch (label|0) {
    case 60: {
     label = 0;
     $354 = $k;
     $max_row = $354;
     break;
    }
    case 62: {
     label = 0;
     $358 = $k;
     $max_row = $358;
     break;
    }
    case 78: {
     label = 0;
     $477 = $k;
     $max_row = $477;
     break;
    }
    case 80: {
     label = 0;
     $481 = $k;
     $max_row = $481;
     break;
    }
    case 121: {
     label = 0;
     $790 = $k;
     $max_row = $790;
     break;
    }
    case 123: {
     label = 0;
     $794 = $k;
     $max_row = $794;
     break;
    }
    case 140: {
     label = 0;
     $916 = $k;
     $max_row = $916;
     break;
    }
    case 142: {
     label = 0;
     $920 = $k;
     $max_row = $920;
     break;
    }
    case 174: {
     label = 0;
     $1152 = $k;
     $max_row = $1152;
     break;
    }
    case 176: {
     label = 0;
     $1156 = $k;
     $max_row = $1156;
     break;
    }
   }
   $1159 = $j;
   $1160 = (($1159) + 1)|0;
   $j = $1160;
  }
  $1161 = $i;
  $1162 = (($1161) + 1)|0;
  $i = $1162;
 }
 $i = 0;
 while(1) {
  $1163 = $i;
  $1164 = $npat;
  $1165 = ($1163|0)<($1164|0);
  if (!($1165)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $1166 = $j;
   $1167 = ($1166|0)<(64);
   if (!($1167)) {
    break;
   }
   $k = 0;
   while(1) {
    $1168 = $k;
    $1169 = ($1168|0)<(4);
    $1170 = $j;
    if (!($1169)) {
     break;
    }
    $1171 = $1170<<4;
    $1172 = $k;
    $1173 = $1172<<2;
    $1174 = (($1171) + ($1173))|0;
    $1175 = (($tmp) + ($1174)|0);
    $1176 = $j;
    $1177 = $1176<<2;
    $1178 = $k;
    $1179 = $i;
    $1180 = $1179<<2;
    $1181 = (($1178) + ($1180))|0;
    $1182 = (($tdata) + ($1181<<8)|0);
    $1183 = (($1182) + ($1177)|0);
    ;HEAP8[$1175>>0]=HEAP8[$1183>>0]|0;HEAP8[$1175+1>>0]=HEAP8[$1183+1>>0]|0;HEAP8[$1175+2>>0]=HEAP8[$1183+2>>0]|0;HEAP8[$1175+3>>0]=HEAP8[$1183+3>>0]|0;
    $1184 = $k;
    $1185 = (($1184) + 1)|0;
    $k = $1185;
   }
   $1186 = (($1170) + 1)|0;
   $j = $1186;
  }
  $1187 = $2;
  (_fwrite(($tmp|0),1024,1,($1187|0))|0);
  $1188 = $i;
  $1189 = (($1188) + 1)|0;
  $i = $1189;
 }
 $1190 = $1;
 $1191 = $sdata_addr;
 (_hio_seek($1190,$1191,0)|0);
 $i = 0;
 while(1) {
  $1192 = $i;
  $1193 = $nins;
  $1194 = ($1192|0)<($1193|0);
  if (!($1194)) {
   break;
  }
  $1195 = $1;
  $1196 = $sdata_addr;
  $1197 = $i;
  $1198 = (($saddr) + ($1197<<2)|0);
  $1199 = HEAP32[$1198>>2]|0;
  $1200 = (($1196) + ($1199))|0;
  (_hio_seek($1195,$1200,0)|0);
  $1201 = $i;
  $1202 = (($smp_size) + ($1201<<2)|0);
  $1203 = HEAP32[$1202>>2]|0;
  $1204 = (_malloc($1203)|0);
  $smp_buffer = $1204;
  $1205 = $smp_buffer;
  $1206 = $i;
  $1207 = (($smp_size) + ($1206<<2)|0);
  $1208 = HEAP32[$1207>>2]|0;
  _memset(($1205|0),0,($1208|0))|0;
  $1209 = $smp_buffer;
  $1210 = $i;
  $1211 = (($smp_size) + ($1210<<2)|0);
  $1212 = HEAP32[$1211>>2]|0;
  $1213 = $1;
  (_hio_read($1209,$1212,1,$1213)|0);
  $1214 = $use_delta;
  $1215 = $1214&255;
  $1216 = ($1215|0)==(1);
  L263: do {
   if ($1216) {
    $c1 = 0;
    $j = 1;
    while(1) {
     $1217 = $j;
     $1218 = $i;
     $1219 = (($smp_size) + ($1218<<2)|0);
     $1220 = HEAP32[$1219>>2]|0;
     $1221 = ($1217|0)<($1220|0);
     if (!($1221)) {
      break L263;
     }
     $1222 = $j;
     $1223 = $smp_buffer;
     $1224 = (($1223) + ($1222)|0);
     $1225 = HEAP8[$1224>>0]|0;
     $c2 = $1225;
     $1226 = $c2;
     $1227 = $1226&255;
     $1228 = (256 - ($1227))|0;
     $1229 = $1228&255;
     $c2 = $1229;
     $1230 = $c2;
     $1231 = $1230&255;
     $1232 = $c1;
     $1233 = $1232&255;
     $1234 = (($1231) + ($1233))|0;
     $1235 = $1234&255;
     $c3 = $1235;
     $1236 = $c3;
     $1237 = $j;
     $1238 = $smp_buffer;
     $1239 = (($1238) + ($1237)|0);
     HEAP8[$1239>>0] = $1236;
     $1240 = $c3;
     $c1 = $1240;
     $1241 = $j;
     $1242 = (($1241) + 1)|0;
     $j = $1242;
    }
   }
  } while(0);
  $1243 = $smp_buffer;
  $1244 = $i;
  $1245 = (($smp_size) + ($1244<<2)|0);
  $1246 = HEAP32[$1245>>2]|0;
  $1247 = $2;
  (_fwrite(($1243|0),($1246|0),1,($1247|0))|0);
  $1248 = $smp_buffer;
  _free($1248);
  $1249 = $i;
  $1250 = (($1249) + 1)|0;
  $i = $1250;
 }
 $0 = 0;
 $1251 = $0;
 STACKTOP = sp;return ($1251|0);
}
function _test_p10c($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic = sp + 16|0;
 $1 = $data;
 $2 = $t;
 $3 = $s;
 dest=$magic; src=9800; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = $3;
 $5 = ($4|0)<(22);
 do {
  if ($5) {
   $6 = $3;
   $7 = (22 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = (_memcmp($8,$magic,16)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = ((($11)) + 21|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ($14|0)!=(206);
   if ($15) {
    $0 = -1;
    break;
   }
   $16 = $3;
   $17 = ($16|0)<(4714);
   if ($17) {
    $18 = $3;
    $19 = (4714 - ($18))|0;
    $0 = $19;
    break;
   }
   $20 = $1;
   $21 = ((($20)) + 4712|0);
   $22 = (_readmem16b($21)|0);
   $23 = $22&65535;
   $24 = $23 & 3;
   $25 = ($24|0)!=(0);
   if ($25) {
    $0 = -1;
    break;
   }
   $26 = $1;
   $27 = ((($26)) + 36|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ($29|0)!=(16);
   if ($30) {
    $0 = -1;
    break;
   }
   $31 = $1;
   $32 = ((($31)) + 37|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)!=(252);
   if ($35) {
    $0 = -1;
    break;
   } else {
    $36 = $2;
    _pw_read_title(0,$36,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _depack_p10c($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $fin = 0, $fine = 0, $flag = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $l = 0;
 var $num_pat = 0, $oldins = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $paddr = 0, $paddr1 = 0, $paddr2 = 0, $pat = 0, $pat_max = 0, $per = 0, $pnum = 0, $pnum1 = 0, $pptr = 0, $psize = 0, $refmax = 0, $reftab = 0, $size = 0, $smp_ofs = 0, $ssize = 0;
 var $tmp1 = 0, $tmp2 = 0, $tmp_ptr = 0, $x = 0, $x1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 165792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 165648|0;
 $pnum1 = sp + 165520|0;
 $paddr = sp + 1096|0;
 $paddr1 = sp + 584|0;
 $paddr2 = sp + 72|0;
 $pptr = sp + 1640|0;
 $pat = sp + 34448|0;
 $fin = sp + 34412|0;
 $oldins = sp + 34408|0;
 $0 = $in;
 $1 = $out;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$pnum1; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($pptr|0),0,16384)|0;
 _memset(($pat|0),0,131072)|0;
 dest=$fin; stop=dest+31|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$oldins>>0]=0|0;HEAP8[$oldins+1>>0]=0|0;HEAP8[$oldins+2>>0]=0|0;HEAP8[$oldins+3>>0]=0|0;
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr1|0),0,512)|0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(128);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($paddr2) + ($4<<2)|0);
  HEAP32[$5>>2] = 9999;
  $6 = $i;
  $7 = (($6) + 1)|0;
  $i = $7;
 }
 $8 = $1;
 (_pw_write_zero($8,20)|0);
 $9 = $0;
 (_hio_seek($9,4460,0)|0);
 $ssize = 0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(31);
  $12 = $1;
  if (!($11)) {
   break;
  }
  (_pw_write_zero($12,22)|0);
  $13 = $1;
  $14 = $0;
  $15 = (_hio_read16b($14)|0);
  $16 = $15&65535;
  $size = $16;
  $17 = $16&65535;
  _write16b($13,$17);
  $18 = $size;
  $19 = $18<<1;
  $20 = $ssize;
  $21 = (($20) + ($19))|0;
  $ssize = $21;
  $22 = $1;
  $23 = $0;
  $24 = (_hio_read8($23)|0);
  $25 = $i;
  $26 = (($fin) + ($25)|0);
  HEAP8[$26>>0] = $24;
  _write8($22,$24);
  $27 = $1;
  $28 = $0;
  $29 = (_hio_read8($28)|0);
  _write8($27,$29);
  $30 = $1;
  $31 = $0;
  $32 = (_hio_read16b($31)|0);
  _write16b($30,$32);
  $33 = $1;
  $34 = $0;
  $35 = (_hio_read16b($34)|0);
  _write16b($33,$35);
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $0;
 $39 = (_hio_read16b($38)|0);
 $40 = $39&65535;
 $41 = (($40|0) / 4)&-1;
 $num_pat = $41;
 $42 = $41&255;
 _write8($12,$42);
 $43 = $1;
 _write8($43,127);
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(128);
  if (!($45)) {
   break;
  }
  $46 = $0;
  $47 = (_hio_read32b($46)|0);
  $48 = $i;
  $49 = (($paddr) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $num_pat;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = $i;
  $56 = ($55|0)==(0);
  if ($56) {
   HEAP8[$pnum>>0] = 0;
   $57 = $tmp_ptr;
   $58 = (($57) + 1)|0;
   $tmp_ptr = $58;
  } else {
   $j = 0;
   while(1) {
    $59 = $j;
    $60 = $i;
    $61 = ($59|0)<($60|0);
    if (!($61)) {
     break;
    }
    $62 = $i;
    $63 = (($paddr) + ($62<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $j;
    $66 = (($paddr) + ($65<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($64|0)==($67|0);
    $69 = $j;
    if ($68) {
     label = 17;
     break;
    }
    $74 = (($69) + 1)|0;
    $j = $74;
   }
   if ((label|0) == 17) {
    label = 0;
    $70 = (($pnum) + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $i;
    $73 = (($pnum) + ($72)|0);
    HEAP8[$73>>0] = $71;
   }
   $75 = $j;
   $76 = $i;
   $77 = ($75|0)==($76|0);
   if ($77) {
    $78 = $tmp_ptr;
    $79 = (($78) + 1)|0;
    $tmp_ptr = $79;
    $80 = $78&255;
    $81 = $i;
    $82 = (($pnum) + ($81)|0);
    HEAP8[$82>>0] = $80;
   }
  }
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 $85 = $tmp_ptr;
 $86 = (($85) - 1)|0;
 $pat_max = $86;
 $i = 0;
 while(1) {
  $87 = $i;
  $88 = $num_pat;
  $89 = ($87|0)<($88|0);
  if (!($89)) {
   break;
  }
  $90 = $i;
  $91 = (($paddr) + ($90<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $i;
  $94 = (($paddr1) + ($93<<2)|0);
  HEAP32[$94>>2] = $92;
  $95 = $i;
  $96 = (($95) + 1)|0;
  $i = $96;
 }
 L32: while(1) {
  $i = 0;
  L34: while(1) {
   $97 = $i;
   $98 = $num_pat;
   $99 = ($97|0)<($98|0);
   if (!($99)) {
    break L32;
   }
   $j = 0;
   while(1) {
    $100 = $j;
    $101 = $i;
    $102 = ($100|0)<($101|0);
    $103 = $i;
    if (!($102)) {
     break;
    }
    $104 = (($paddr1) + ($103<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $j;
    $107 = (($paddr1) + ($106<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($105|0)<($108|0);
    $110 = $j;
    if ($109) {
     break L34;
    }
    $134 = (($110) + 1)|0;
    $j = $134;
   }
   $135 = (($103) + 1)|0;
   $i = $135;
  }
  $111 = (($pnum) + ($110)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $tmp2 = $113;
  $114 = $i;
  $115 = (($pnum) + ($114)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $j;
  $118 = (($pnum) + ($117)|0);
  HEAP8[$118>>0] = $116;
  $119 = $tmp2;
  $120 = $119&255;
  $121 = $i;
  $122 = (($pnum) + ($121)|0);
  HEAP8[$122>>0] = $120;
  $123 = $j;
  $124 = (($paddr1) + ($123<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $tmp1 = $125;
  $126 = $i;
  $127 = (($paddr1) + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $j;
  $130 = (($paddr1) + ($129<<2)|0);
  HEAP32[$130>>2] = $128;
  $131 = $tmp1;
  $132 = $i;
  $133 = (($paddr1) + ($132<<2)|0);
  HEAP32[$133>>2] = $131;
 }
 $i = 0;
 $j = 0;
 while(1) {
  $136 = $i;
  $137 = $num_pat;
  $138 = ($136|0)<($137|0);
  if (!($138)) {
   break;
  }
  $139 = $i;
  $140 = ($139|0)==(0);
  $141 = $i;
  $142 = (($paddr1) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $j;
  $145 = (($paddr2) + ($144<<2)|0);
  if ($140) {
   HEAP32[$145>>2] = $143;
  } else {
   $146 = HEAP32[$145>>2]|0;
   $147 = ($143|0)==($146|0);
   if (!($147)) {
    $148 = $i;
    $149 = (($paddr1) + ($148<<2)|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $j;
    $152 = (($151) + 1)|0;
    $j = $152;
    $153 = (($paddr2) + ($152<<2)|0);
    HEAP32[$153>>2] = $150;
   }
  }
  $154 = $i;
  $155 = (($154) + 1)|0;
  $i = $155;
 }
 $c1 = 0;
 while(1) {
  $156 = $c1;
  $157 = $156&255;
  $158 = $num_pat;
  $159 = ($157|0)<($158|0);
  if (!($159)) {
   break;
  }
  $c2 = 0;
  while(1) {
   $160 = $c2;
   $161 = $160&255;
   $162 = $num_pat;
   $163 = ($161|0)<($162|0);
   $164 = $c1;
   if (!($163)) {
    break;
   }
   $165 = $164&255;
   $166 = (($paddr) + ($165<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $c2;
   $169 = $168&255;
   $170 = (($paddr2) + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($167|0)==($171|0);
   if ($172) {
    $173 = $c2;
    $174 = $c1;
    $175 = $174&255;
    $176 = (($pnum1) + ($175)|0);
    HEAP8[$176>>0] = $173;
   }
   $177 = $c2;
   $178 = (($177) + 1)<<24>>24;
   $c2 = $178;
  }
  $179 = (($164) + 1)<<24>>24;
  $c1 = $179;
 }
 $i = 0;
 while(1) {
  $180 = $i;
  $181 = $num_pat;
  $182 = ($180|0)<($181|0);
  if (!($182)) {
   break;
  }
  $183 = $i;
  $184 = (($pnum1) + ($183)|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $i;
  $187 = (($pnum) + ($186)|0);
  HEAP8[$187>>0] = $185;
  $188 = $i;
  $189 = (($188) + 1)|0;
  $i = $189;
 }
 $190 = $1;
 (_fwrite(($pnum|0),128,1,($190|0))|0);
 $191 = $1;
 _write32b($191,1294879534);
 $192 = $0;
 (_hio_seek($192,4456,0)|0);
 $193 = $0;
 $194 = (_hio_read32b($193)|0);
 $psize = $194;
 $195 = $0;
 (_hio_seek($195,5222,0)|0);
 $refmax = 0;
 $j = 0;
 while(1) {
  $196 = $j;
  $197 = $psize;
  $198 = ($196|0)<($197|0);
  if (!($198)) {
   break;
  }
  $199 = $0;
  $200 = (_hio_read16b($199)|0);
  $201 = $200&65535;
  $x = $201;
  $202 = $x;
  $203 = $refmax;
  $204 = ($202|0)>($203|0);
  if ($204) {
   $205 = $x;
   $refmax = $205;
  }
  $206 = $j;
  $207 = (($206) + 2)|0;
  $j = $207;
 }
 $208 = $refmax;
 $209 = (($208) + 1)|0;
 $refmax = $209;
 $210 = $refmax;
 $211 = $210<<2;
 $i = $211;
 $212 = $i;
 $213 = (_malloc($212)|0);
 $reftab = $213;
 $214 = $reftab;
 $215 = $i;
 $216 = $0;
 (_hio_read($214,$215,1,$216)|0);
 $217 = $0;
 (_hio_seek($217,5222,0)|0);
 $j = 0;
 while(1) {
  $218 = $j;
  $219 = $pat_max;
  $220 = ($218|0)<=($219|0);
  if (!($220)) {
   break;
  }
  $flag = 0;
  $i = 0;
  while(1) {
   $221 = $i;
   $222 = ($221|0)<(64);
   if (!($222)) {
    break;
   }
   $k = 0;
   while(1) {
    $223 = $k;
    $224 = ($223|0)<(4);
    if (!($224)) {
     break;
    }
    $225 = $i;
    $226 = $225<<4;
    $227 = $k;
    $228 = $227<<2;
    $229 = (($226) + ($228))|0;
    $230 = $j;
    $231 = (($pat) + ($230<<10)|0);
    $232 = (($231) + ($229)|0);
    $p = $232;
    $233 = $0;
    $234 = (_hio_read16b($233)|0);
    $235 = $234&65535;
    $236 = $235 << 2;
    $x1 = $236;
    $237 = $p;
    $238 = $x1;
    $239 = $reftab;
    $240 = (($239) + ($238)|0);
    ;HEAP8[$237>>0]=HEAP8[$240>>0]|0;HEAP8[$237+1>>0]=HEAP8[$240+1>>0]|0;HEAP8[$237+2>>0]=HEAP8[$240+2>>0]|0;HEAP8[$237+3>>0]=HEAP8[$240+3>>0]|0;
    $241 = $p;
    $242 = ((($241)) + 2|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = $244 >> 4;
    $246 = $245 & 15;
    $247 = $p;
    $248 = HEAP8[$247>>0]|0;
    $249 = $248&255;
    $250 = $249 & 240;
    $251 = $246 | $250;
    $ins = $251;
    $252 = $ins;
    $253 = ($252|0)!=(0);
    if ($253) {
     $254 = $ins;
     $255 = $254&255;
     $256 = $k;
     $257 = (($oldins) + ($256)|0);
     HEAP8[$257>>0] = $255;
    }
    $258 = $p;
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $260 & 15;
    $262 = $261 << 8;
    $263 = $p;
    $264 = ((($263)) + 1|0);
    $265 = HEAP8[$264>>0]|0;
    $266 = $265&255;
    $267 = $262 | $266;
    $per = $267;
    $268 = $p;
    $269 = ((($268)) + 2|0);
    $270 = HEAP8[$269>>0]|0;
    $271 = $270&255;
    $272 = $271 & 15;
    $fxt = $272;
    $273 = $k;
    $274 = (($oldins) + ($273)|0);
    $275 = HEAP8[$274>>0]|0;
    $276 = $275&255;
    $277 = (($276) - 1)|0;
    $278 = (($fin) + ($277)|0);
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $fine = $280;
    $281 = $per;
    $282 = ($281|0)!=(0);
    L87: do {
     if ($282) {
      $283 = $k;
      $284 = (($oldins) + ($283)|0);
      $285 = HEAP8[$284>>0]|0;
      $286 = $285&255;
      $287 = ($286|0)>(0);
      $288 = $fine;
      $289 = ($288|0)!=(0);
      $or$cond = $287 & $289;
      if ($or$cond) {
       $l = 0;
       while(1) {
        $290 = $l;
        $291 = ($290|0)<(36);
        if (!($291)) {
         break L87;
        }
        $292 = $l;
        $293 = $fine;
        $294 = (7928 + (($293*72)|0)|0);
        $295 = (($294) + ($292<<1)|0);
        $296 = HEAP16[$295>>1]|0;
        $297 = $296 << 16 >> 16;
        $298 = $per;
        $299 = ($297|0)==($298|0);
        if ($299) {
         break;
        }
        $322 = $l;
        $323 = (($322) + 1)|0;
        $l = $323;
       }
       $300 = $p;
       $301 = HEAP8[$300>>0]|0;
       $302 = $301&255;
       $303 = $302 & 240;
       $304 = $303&255;
       HEAP8[$300>>0] = $304;
       $305 = $l;
       $306 = (($305) + 1)|0;
       $307 = (7848 + ($306<<1)|0);
       $308 = HEAP8[$307>>0]|0;
       $309 = $308&255;
       $310 = $p;
       $311 = HEAP8[$310>>0]|0;
       $312 = $311&255;
       $313 = $312 | $309;
       $314 = $313&255;
       HEAP8[$310>>0] = $314;
       $315 = $l;
       $316 = (($315) + 1)|0;
       $317 = (7848 + ($316<<1)|0);
       $318 = ((($317)) + 1|0);
       $319 = HEAP8[$318>>0]|0;
       $320 = $p;
       $321 = ((($320)) + 1|0);
       HEAP8[$321>>0] = $319;
      }
     }
    } while(0);
    $324 = $fxt;
    $325 = ($324|0)==(13);
    $326 = $fxt;
    $327 = ($326|0)==(11);
    $or$cond3 = $325 | $327;
    if ($or$cond3) {
     $flag = 1;
    }
    $328 = $k;
    $329 = (($328) + 1)|0;
    $k = $329;
   }
   $330 = $flag;
   $331 = ($330|0)==(1);
   if ($331) {
    break;
   }
   $332 = $i;
   $333 = (($332) + 1)|0;
   $i = $333;
  }
  $334 = $j;
  $335 = (($pat) + ($334<<10)|0);
  $336 = $1;
  (_fwrite(($335|0),1024,1,($336|0))|0);
  $337 = $j;
  $338 = (($337) + 1)|0;
  $j = $338;
 }
 $339 = $reftab;
 _free($339);
 $340 = $0;
 (_hio_seek($340,4452,0)|0);
 $341 = $0;
 $342 = (_hio_read32b($341)|0);
 $smp_ofs = $342;
 $343 = $0;
 $344 = $smp_ofs;
 $345 = (4456 + ($344))|0;
 (_hio_seek($343,$345,0)|0);
 $346 = $1;
 $347 = $0;
 $348 = $ssize;
 (_pw_move_data($346,$347,$348)|0);
 STACKTOP = sp;return 0;
}
function _test_p18a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $magic = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic = sp + 16|0;
 $1 = $data;
 $2 = $t;
 $3 = $s;
 dest=$magic; src=9800; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = $3;
 $5 = ($4|0)<(22);
 do {
  if ($5) {
   $6 = $3;
   $7 = (22 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = (_memcmp($8,$magic,16)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = ((($11)) + 21|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ($14|0)!=(210);
   if ($15) {
    $0 = -1;
    break;
   }
   $16 = $3;
   $17 = ($16|0)<(4460);
   if ($17) {
    $18 = $3;
    $19 = (4460 - ($18))|0;
    $0 = $19;
    break;
   }
   $20 = $1;
   $21 = ((($20)) + 4456|0);
   (_readmem32b($21)|0);
   $22 = $3;
   $23 = ($22|0)<(4714);
   if ($23) {
    $24 = $3;
    $25 = (4714 - ($24))|0;
    $0 = $25;
    break;
   }
   $26 = $1;
   $27 = ((($26)) + 4712|0);
   $28 = (_readmem16b($27)|0);
   $29 = $28&65535;
   $30 = $29 & 3;
   $31 = ($30|0)!=(0);
   if ($31) {
    $0 = -1;
    break;
   }
   $32 = $1;
   $33 = ((($32)) + 36|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)!=(17);
   if ($36) {
    $0 = -1;
    break;
   }
   $37 = $1;
   $38 = ((($37)) + 37|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   if ($41) {
    $0 = -1;
    break;
   } else {
    $42 = $2;
    _pw_read_title(0,$42,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _depack_p18a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fin = 0, $fine = 0, $flag = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $l = 0, $num_pat = 0, $oldins = 0, $or$cond = 0, $or$cond3 = 0;
 var $p = 0, $paddr = 0, $pat = 0, $pat_max = 0, $per = 0, $pnum = 0, $pptr = 0, $psize = 0, $refmax = 0, $reftab = 0, $size = 0, $smp_ofs = 0, $ssize = 0, $tmp_ptr = 0, $x = 0, $x1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 164608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 164480|0;
 $paddr = sp + 72|0;
 $pptr = sp + 600|0;
 $pat = sp + 33408|0;
 $fin = sp + 33376|0;
 $oldins = sp + 33372|0;
 $0 = $in;
 $1 = $out;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($pptr|0),0,16384)|0;
 _memset(($pat|0),0,131072)|0;
 dest=$fin; stop=dest+31|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$oldins>>0]=0|0;HEAP8[$oldins+1>>0]=0|0;HEAP8[$oldins+2>>0]=0|0;HEAP8[$oldins+3>>0]=0|0;
 _memset(($paddr|0),0,512)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 (_hio_seek($3,4464,0)|0);
 $ssize = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $1;
  if (!($5)) {
   break;
  }
  (_pw_write_zero($6,22)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_hio_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $1;
  $17 = $0;
  $18 = (_hio_read8($17)|0);
  $19 = $i;
  $20 = (($fin) + ($19)|0);
  HEAP8[$20>>0] = $18;
  _write8($16,$18);
  $21 = $1;
  $22 = $0;
  $23 = (_hio_read8($22)|0);
  _write8($21,$23);
  $24 = $1;
  $25 = $0;
  $26 = (_hio_read16b($25)|0);
  _write16b($24,$26);
  $27 = $1;
  $28 = $0;
  $29 = (_hio_read16b($28)|0);
  _write16b($27,$29);
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 $32 = $0;
 $33 = (_hio_read16b($32)|0);
 $34 = $33&65535;
 $35 = (($34|0) / 4)&-1;
 $num_pat = $35;
 $36 = $35&255;
 _write8($6,$36);
 $37 = $1;
 _write8($37,127);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(128);
  if (!($39)) {
   break;
  }
  $40 = $0;
  $41 = (_hio_read32b($40)|0);
  $42 = $i;
  $43 = (($paddr) + ($42<<2)|0);
  HEAP32[$43>>2] = $41;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = $num_pat;
  $48 = ($46|0)<($47|0);
  if (!($48)) {
   break;
  }
  $49 = $i;
  $50 = ($49|0)==(0);
  if ($50) {
   HEAP8[$pnum>>0] = 0;
   $51 = $tmp_ptr;
   $52 = (($51) + 1)|0;
   $tmp_ptr = $52;
  } else {
   $j = 0;
   while(1) {
    $53 = $j;
    $54 = $i;
    $55 = ($53|0)<($54|0);
    if (!($55)) {
     break;
    }
    $56 = $i;
    $57 = (($paddr) + ($56<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $j;
    $60 = (($paddr) + ($59<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($58|0)==($61|0);
    $63 = $j;
    if ($62) {
     label = 14;
     break;
    }
    $68 = (($63) + 1)|0;
    $j = $68;
   }
   if ((label|0) == 14) {
    label = 0;
    $64 = (($pnum) + ($63)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $i;
    $67 = (($pnum) + ($66)|0);
    HEAP8[$67>>0] = $65;
   }
   $69 = $j;
   $70 = $i;
   $71 = ($69|0)==($70|0);
   if ($71) {
    $72 = $tmp_ptr;
    $73 = (($72) + 1)|0;
    $tmp_ptr = $73;
    $74 = $72&255;
    $75 = $i;
    $76 = (($pnum) + ($75)|0);
    HEAP8[$76>>0] = $74;
   }
  }
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 $79 = $tmp_ptr;
 $80 = (($79) - 1)|0;
 $81 = $80&65535;
 $pat_max = $81;
 $82 = $1;
 (_fwrite(($pnum|0),128,1,($82|0))|0);
 $83 = $1;
 _write32b($83,1294879534);
 $84 = $0;
 (_hio_seek($84,4460,0)|0);
 $85 = $0;
 $86 = (_hio_read32b($85)|0);
 $psize = $86;
 $87 = $0;
 (_hio_seek($87,5226,0)|0);
 $refmax = 0;
 $j = 0;
 while(1) {
  $88 = $j;
  $89 = $psize;
  $90 = ($88|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $0;
  $92 = (_hio_read16b($91)|0);
  $93 = $92&65535;
  $x = $93;
  $94 = $x;
  $95 = $refmax;
  $96 = ($94|0)>($95|0);
  if ($96) {
   $97 = $x;
   $refmax = $97;
  }
  $98 = $j;
  $99 = (($98) + 2)|0;
  $j = $99;
 }
 $100 = $refmax;
 $101 = (($100) + 1)|0;
 $refmax = $101;
 $102 = $refmax;
 $103 = $102<<2;
 $i = $103;
 $104 = $i;
 $105 = (_malloc($104)|0);
 $reftab = $105;
 $106 = $reftab;
 $107 = $i;
 $108 = $0;
 (_hio_read($106,$107,1,$108)|0);
 $109 = $0;
 (_hio_seek($109,5226,0)|0);
 $j = 0;
 while(1) {
  $110 = $j;
  $111 = $pat_max;
  $112 = $111 << 16 >> 16;
  $113 = ($110|0)<=($112|0);
  if (!($113)) {
   break;
  }
  $flag = 0;
  $114 = $0;
  $115 = $j;
  $116 = (($paddr) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + 5226)|0;
  (_hio_seek($114,$118,0)|0);
  $i = 0;
  while(1) {
   $119 = $i;
   $120 = ($119|0)<(64);
   if (!($120)) {
    break;
   }
   $k = 0;
   while(1) {
    $121 = $k;
    $122 = ($121|0)<(4);
    if (!($122)) {
     break;
    }
    $123 = $i;
    $124 = $123<<4;
    $125 = $k;
    $126 = $125<<2;
    $127 = (($124) + ($126))|0;
    $128 = $j;
    $129 = (($pat) + ($128<<10)|0);
    $130 = (($129) + ($127)|0);
    $p = $130;
    $131 = $0;
    $132 = (_hio_read16b($131)|0);
    $133 = $132&65535;
    $134 = $133 << 2;
    $x1 = $134;
    $135 = $p;
    $136 = $x1;
    $137 = $reftab;
    $138 = (($137) + ($136)|0);
    ;HEAP8[$135>>0]=HEAP8[$138>>0]|0;HEAP8[$135+1>>0]=HEAP8[$138+1>>0]|0;HEAP8[$135+2>>0]=HEAP8[$138+2>>0]|0;HEAP8[$135+3>>0]=HEAP8[$138+3>>0]|0;
    $139 = $p;
    $140 = ((($139)) + 2|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $142 >> 4;
    $144 = $143 & 15;
    $145 = $p;
    $146 = HEAP8[$145>>0]|0;
    $147 = $146&255;
    $148 = $147 & 240;
    $149 = $144 | $148;
    $ins = $149;
    $150 = $ins;
    $151 = ($150|0)!=(0);
    if ($151) {
     $152 = $ins;
     $153 = $152&255;
     $154 = $k;
     $155 = (($oldins) + ($154)|0);
     HEAP8[$155>>0] = $153;
    }
    $156 = $p;
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = $158 & 15;
    $160 = $159 << 8;
    $161 = $p;
    $162 = ((($161)) + 1|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = $160 | $164;
    $per = $165;
    $166 = $p;
    $167 = ((($166)) + 2|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = $169 & 15;
    $fxt = $170;
    $171 = $k;
    $172 = (($oldins) + ($171)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = (($174) - 1)|0;
    $176 = (($fin) + ($175)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $fine = $178;
    $179 = $per;
    $180 = ($179|0)!=(0);
    L44: do {
     if ($180) {
      $181 = $k;
      $182 = (($oldins) + ($181)|0);
      $183 = HEAP8[$182>>0]|0;
      $184 = $183&255;
      $185 = ($184|0)>(0);
      $186 = $fine;
      $187 = ($186|0)!=(0);
      $or$cond = $185 & $187;
      if ($or$cond) {
       $l = 0;
       while(1) {
        $188 = $l;
        $189 = ($188|0)<(36);
        if (!($189)) {
         break L44;
        }
        $190 = $l;
        $191 = $fine;
        $192 = (7928 + (($191*72)|0)|0);
        $193 = (($192) + ($190<<1)|0);
        $194 = HEAP16[$193>>1]|0;
        $195 = $194 << 16 >> 16;
        $196 = $per;
        $197 = ($195|0)==($196|0);
        if ($197) {
         break;
        }
        $220 = $l;
        $221 = (($220) + 1)|0;
        $l = $221;
       }
       $198 = $p;
       $199 = HEAP8[$198>>0]|0;
       $200 = $199&255;
       $201 = $200 & 240;
       $202 = $201&255;
       HEAP8[$198>>0] = $202;
       $203 = $l;
       $204 = (($203) + 1)|0;
       $205 = (7848 + ($204<<1)|0);
       $206 = HEAP8[$205>>0]|0;
       $207 = $206&255;
       $208 = $p;
       $209 = HEAP8[$208>>0]|0;
       $210 = $209&255;
       $211 = $210 | $207;
       $212 = $211&255;
       HEAP8[$208>>0] = $212;
       $213 = $l;
       $214 = (($213) + 1)|0;
       $215 = (7848 + ($214<<1)|0);
       $216 = ((($215)) + 1|0);
       $217 = HEAP8[$216>>0]|0;
       $218 = $p;
       $219 = ((($218)) + 1|0);
       HEAP8[$219>>0] = $217;
      }
     }
    } while(0);
    $222 = $fxt;
    $223 = ($222|0)==(13);
    $224 = $fxt;
    $225 = ($224|0)==(11);
    $or$cond3 = $223 | $225;
    if ($or$cond3) {
     $flag = 1;
    }
    $226 = $k;
    $227 = (($226) + 1)|0;
    $k = $227;
   }
   $228 = $flag;
   $229 = ($228|0)==(1);
   if ($229) {
    break;
   }
   $230 = $i;
   $231 = (($230) + 1)|0;
   $i = $231;
  }
  $232 = $j;
  $233 = (($pat) + ($232<<10)|0);
  $234 = $1;
  (_fwrite(($233|0),1024,1,($234|0))|0);
  $235 = $j;
  $236 = (($235) + 1)|0;
  $j = $236;
 }
 $237 = $reftab;
 _free($237);
 $238 = $0;
 (_hio_seek($238,4456,0)|0);
 $239 = $0;
 $240 = (_hio_read32b($239)|0);
 $smp_ofs = $240;
 $241 = $0;
 $242 = $smp_ofs;
 $243 = (4460 + ($242))|0;
 (_hio_seek($241,$243,0)|0);
 $244 = $1;
 $245 = $0;
 $246 = $ssize;
 (_pw_move_data($244,$245,$246)|0);
 STACKTOP = sp;return 0;
}
function _test_pha($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, $or$cond = 0, $ptr = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(963);
 if ($5) {
  $6 = $3;
  $7 = (963 - ($6))|0;
  $0 = $7;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $8 = $1;
 $9 = ((($8)) + 10|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(3);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)!=(192);
  if (!($17)) {
   $ssize = 0;
   $i = 0;
   while(1) {
    $18 = $i;
    $19 = ($18|0)<(31);
    if (!($19)) {
     label = 15;
     break;
    }
    $20 = $1;
    $21 = $i;
    $22 = ($21*14)|0;
    $23 = (($20) + ($22)|0);
    $d = $23;
    $24 = $d;
    $25 = (_readmem16b($24)|0);
    $26 = $25&65535;
    $27 = $26 << 1;
    $28 = $ssize;
    $29 = (($28) + ($27))|0;
    $ssize = $29;
    $30 = $d;
    $31 = ((($30)) + 3|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($33|0)>(64);
    if ($34) {
     label = 9;
     break;
    }
    $35 = $d;
    $36 = ((($35)) + 4|0);
    $37 = (_readmem16b($36)|0);
    $38 = $37&65535;
    $39 = $38 << 1;
    $40 = $ssize;
    $41 = ($39|0)>($40|0);
    if ($41) {
     label = 11;
     break;
    }
    $42 = $d;
    $43 = ((($42)) + 8|0);
    $44 = (_readmem32b($43)|0);
    $45 = ($44>>>0)<(960);
    if ($45) {
     label = 13;
     break;
    }
    $46 = $i;
    $47 = (($46) + 1)|0;
    $i = $47;
   }
   if ((label|0) == 9) {
    $0 = -1;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   }
   else if ((label|0) == 11) {
    $0 = -1;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   }
   else if ((label|0) == 13) {
    $0 = -1;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   }
   else if ((label|0) == 15) {
    $48 = $ssize;
    $49 = ($48|0)<=(2);
    $50 = $ssize;
    $51 = ($50|0)>(2031585);
    $or$cond = $49 | $51;
    if ($or$cond) {
     $0 = -1;
     $68 = $0;
     STACKTOP = sp;return ($68|0);
    }
    $i = 0;
    while(1) {
     $52 = $i;
     $53 = ($52|0)<(128);
     if (!($53)) {
      label = 22;
      break;
     }
     $54 = $1;
     $55 = ((($54)) + 448|0);
     $56 = $i;
     $57 = $56<<2;
     $58 = (($55) + ($57)|0);
     $59 = (_readmem32b($58)|0);
     $ptr = $59;
     $60 = $ptr;
     $61 = (($60) + 2)|0;
     $62 = (($61) - 960)|0;
     $63 = $ssize;
     $64 = ($62|0)<($63|0);
     if ($64) {
      label = 20;
      break;
     }
     $65 = $i;
     $66 = (($65) + 1)|0;
     $i = $66;
    }
    if ((label|0) == 20) {
     $0 = -1;
     $68 = $0;
     STACKTOP = sp;return ($68|0);
    }
    else if ((label|0) == 22) {
     $67 = $2;
     _pw_read_title(0,$67,0);
     $0 = 0;
     $68 = $0;
     STACKTOP = sp;return ($68|0);
    }
   }
  }
 }
 $0 = -1;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _depack_pha($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $nop = 0, $note = 0, $npat = 0, $ocpt = 0;
 var $onote = 0, $paddr = 0, $paddr1 = 0, $paddr2 = 0, $pat = 0, $pat_addr = 0, $pdata = 0, $pnum = 0, $pnum1 = 0, $psize = 0, $size = 0, $smp_addr = 0, $ssize = 0, $tmp = 0, $tmp_ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1904|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 1768|0;
 $pnum1 = sp + 1640|0;
 $onote = sp + 1616|0;
 $paddr = sp + 1072|0;
 $paddr1 = sp + 544|0;
 $paddr2 = sp + 32|0;
 $ocpt = sp + 1600|0;
 $0 = $in;
 $1 = $out;
 $npat = 0;
 $ssize = 0;
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr1|0),0,512)|0;
 _memset(($paddr2|0),0,512)|0;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$pnum1; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$onote; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP16[$ocpt>>1]=0|0;HEAP16[$ocpt+2>>1]=0|0;HEAP16[$ocpt+4>>1]=0|0;HEAP16[$ocpt+6>>1]=0|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $1;
  $7 = $0;
  $8 = (_hio_read16b($7)|0);
  $9 = $8&65535;
  $size = $9;
  $10 = $9&65535;
  _write16b($6,$10);
  $11 = $size;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $0;
  (_hio_read8($15)|0);
  $16 = $1;
  _write8($16,0);
  $17 = $1;
  $18 = $0;
  $19 = (_hio_read8($18)|0);
  _write8($17,$19);
  $20 = $1;
  $21 = $0;
  $22 = (_hio_read16b($21)|0);
  _write16b($20,$22);
  $23 = $1;
  $24 = $0;
  $25 = (_hio_read16b($24)|0);
  _write16b($23,$25);
  $26 = $0;
  (_hio_read32b($26)|0);
  $27 = $0;
  $28 = (_hio_read8($27)|0);
  $c1 = $28;
  $29 = $c1;
  $30 = $29&255;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $c1;
   $33 = $32&255;
   $34 = (($33) + 11)|0;
   $35 = $34&255;
   $c1 = $35;
  }
  $36 = $1;
  (_fseek(($36|0),-6,2)|0);
  $37 = $1;
  $38 = $c1;
  _write8($37,$38);
  $39 = $1;
  (_fseek(($39|0),0,2)|0);
  $40 = $0;
  (_hio_seek($40,1,1)|0);
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $0;
 (_hio_seek($43,14,1)|0);
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(128);
  if (!($45)) {
   break;
  }
  $46 = $0;
  $47 = (_hio_read32b($46)|0);
  $48 = $i;
  $49 = (($paddr) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = ($52|0)<(128);
  if (!($53)) {
   break;
  }
  $54 = $i;
  $55 = ($54|0)==(0);
  if ($55) {
   HEAP8[$pnum>>0] = 0;
   $56 = $tmp_ptr;
   $57 = (($56) + 1)|0;
   $tmp_ptr = $57;
  } else {
   $j = 0;
   while(1) {
    $58 = $j;
    $59 = $i;
    $60 = ($58|0)<($59|0);
    if (!($60)) {
     break;
    }
    $61 = $i;
    $62 = (($paddr) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $j;
    $65 = (($paddr) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)==($66|0);
    $68 = $j;
    if ($67) {
     label = 16;
     break;
    }
    $73 = (($68) + 1)|0;
    $j = $73;
   }
   if ((label|0) == 16) {
    label = 0;
    $69 = (($pnum) + ($68)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $i;
    $72 = (($pnum) + ($71)|0);
    HEAP8[$72>>0] = $70;
   }
   $74 = $j;
   $75 = $i;
   $76 = ($74|0)==($75|0);
   if ($76) {
    $77 = $tmp_ptr;
    $78 = (($77) + 1)|0;
    $tmp_ptr = $78;
    $79 = $77&255;
    $80 = $i;
    $81 = (($pnum) + ($80)|0);
    HEAP8[$81>>0] = $79;
   }
  }
  $82 = $i;
  $83 = (($82) + 1)|0;
  $i = $83;
 }
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = ($84|0)<(128);
  if (!($85)) {
   break;
  }
  $86 = $i;
  $87 = (($paddr) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $i;
  $90 = (($paddr1) + ($89<<2)|0);
  HEAP32[$90>>2] = $88;
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 L31: while(1) {
  $i = 0;
  L33: while(1) {
   $93 = $i;
   $94 = ($93|0)<(128);
   $j = 0;
   if (!($94)) {
    break L31;
   }
   while(1) {
    $95 = $j;
    $96 = $i;
    $97 = ($95|0)<($96|0);
    $98 = $i;
    if (!($97)) {
     break;
    }
    $99 = (($paddr1) + ($98<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $j;
    $102 = (($paddr1) + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($100|0)<($103|0);
    $105 = $j;
    if ($104) {
     break L33;
    }
    $129 = (($105) + 1)|0;
    $j = $129;
   }
   $130 = (($98) + 1)|0;
   $i = $130;
  }
  $106 = (($pnum) + ($105)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $tmp = $108;
  $109 = $i;
  $110 = (($pnum) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $j;
  $113 = (($pnum) + ($112)|0);
  HEAP8[$113>>0] = $111;
  $114 = $tmp;
  $115 = $114&255;
  $116 = $i;
  $117 = (($pnum) + ($116)|0);
  HEAP8[$117>>0] = $115;
  $118 = $j;
  $119 = (($paddr1) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $tmp = $120;
  $121 = $i;
  $122 = (($paddr1) + ($121<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $j;
  $125 = (($paddr1) + ($124<<2)|0);
  HEAP32[$125>>2] = $123;
  $126 = $tmp;
  $127 = $i;
  $128 = (($paddr1) + ($127<<2)|0);
  HEAP32[$128>>2] = $126;
 }
 $i = 0;
 while(1) {
  $131 = $i;
  $132 = ($131|0)<(128);
  if (!($132)) {
   break;
  }
  $133 = $i;
  $134 = ($133|0)==(0);
  $135 = $i;
  $136 = (($paddr1) + ($135<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $j;
  $139 = (($paddr2) + ($138<<2)|0);
  if ($134) {
   HEAP32[$139>>2] = $137;
  } else {
   $140 = HEAP32[$139>>2]|0;
   $141 = ($137|0)==($140|0);
   if (!($141)) {
    $142 = $i;
    $143 = (($paddr1) + ($142<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $j;
    $146 = (($145) + 1)|0;
    $j = $146;
    $147 = (($paddr2) + ($146<<2)|0);
    HEAP32[$147>>2] = $144;
   }
  }
  $148 = $i;
  $149 = (($148) + 1)|0;
  $i = $149;
 }
 _memset(($paddr1|0),0,512)|0;
 $j = 0;
 $150 = HEAP32[$paddr>>2]|0;
 $k = $150;
 $i = 0;
 while(1) {
  $151 = $i;
  $152 = ($151|0)<(120);
  if (!($152)) {
   break;
  }
  $153 = $i;
  $154 = (($paddr2) + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $j;
  $157 = (($paddr1) + ($156<<2)|0);
  HEAP32[$157>>2] = $155;
  $158 = $j;
  $159 = (($158) + 1)|0;
  $j = $159;
  $160 = $i;
  $161 = (($160) + 1)|0;
  $162 = (($paddr2) + ($161<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $i;
  $165 = (($paddr2) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($163) - ($166))|0;
  $168 = ($167|0)>(1024);
  if ($168) {
   $169 = $i;
   $170 = (($paddr2) + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 1024)|0;
   $173 = $j;
   $174 = (($paddr1) + ($173<<2)|0);
   HEAP32[$174>>2] = $172;
   $175 = $j;
   $176 = (($175) + 1)|0;
   $j = $176;
  }
  $177 = $i;
  $178 = (($177) + 1)|0;
  $i = $178;
 }
 $c1 = 0;
 while(1) {
  $179 = $c1;
  $180 = $179&255;
  $181 = ($180|0)<(128);
  if (!($181)) {
   break;
  }
  $c2 = 0;
  while(1) {
   $182 = $c2;
   $183 = $182&255;
   $184 = ($183|0)<(128);
   $185 = $c1;
   if (!($184)) {
    break;
   }
   $186 = $185&255;
   $187 = (($paddr) + ($186<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $c2;
   $190 = $189&255;
   $191 = (($paddr1) + ($190<<2)|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($188|0)==($192|0);
   if ($193) {
    $194 = $c2;
    $195 = $c1;
    $196 = $195&255;
    $197 = (($pnum1) + ($196)|0);
    HEAP8[$197>>0] = $194;
   }
   $198 = $c2;
   $199 = (($198) + 1)<<24>>24;
   $c2 = $199;
  }
  $200 = (($185) + 1)<<24>>24;
  $c1 = $200;
 }
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $pat_addr = 999999;
 $i = 0;
 while(1) {
  $201 = $i;
  $202 = ($201|0)<(128);
  if (!($202)) {
   break;
  }
  $203 = $i;
  $204 = (($pnum1) + ($203)|0);
  $205 = HEAP8[$204>>0]|0;
  $206 = $i;
  $207 = (($pnum) + ($206)|0);
  HEAP8[$207>>0] = $205;
  $208 = $i;
  $209 = (($paddr) + ($208<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $pat_addr;
  $212 = ($210|0)<($211|0);
  if ($212) {
   $213 = $i;
   $214 = (($paddr) + ($213<<2)|0);
   $215 = HEAP32[$214>>2]|0;
   $pat_addr = $215;
  }
  $216 = $i;
  $217 = (($216) + 1)|0;
  $i = $217;
 }
 $nop = -128;
 while(1) {
  $218 = $nop;
  $219 = $218&255;
  $220 = ($219|0)>(0);
  if (!($220)) {
   break;
  }
  $221 = $nop;
  $222 = $221&255;
  $223 = (($222) - 1)|0;
  $224 = (($pnum) + ($223)|0);
  $225 = HEAP8[$224>>0]|0;
  $226 = $225&255;
  $227 = ($226|0)!=(0);
  if ($227) {
   break;
  }
  $228 = $nop;
  $229 = (($228) + -1)<<24>>24;
  $nop = $229;
 }
 $230 = $1;
 $231 = $nop;
 _write8($230,$231);
 $i = 0;
 while(1) {
  $232 = $i;
  $233 = $nop;
  $234 = $233&255;
  $235 = ($232|0)<($234|0);
  if (!($235)) {
   break;
  }
  $236 = $i;
  $237 = (($pnum) + ($236)|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = $238&255;
  $240 = $npat;
  $241 = $240&255;
  $242 = ($239|0)>($241|0);
  if ($242) {
   $243 = $i;
   $244 = (($pnum) + ($243)|0);
   $245 = HEAP8[$244>>0]|0;
   $npat = $245;
  }
  $246 = $i;
  $247 = (($246) + 1)|0;
  $i = $247;
 }
 $248 = $1;
 _write8($248,127);
 $i = 0;
 while(1) {
  $249 = $i;
  $250 = ($249|0)<(128);
  $251 = $1;
  if (!($250)) {
   break;
  }
  $252 = $i;
  $253 = (($pnum) + ($252)|0);
  $254 = HEAP8[$253>>0]|0;
  _write8($251,$254);
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 _write32b($251,1294879534);
 $257 = $0;
 $258 = (_hio_tell($257)|0);
 $smp_addr = $258;
 $259 = $0;
 $260 = $pat_addr;
 (_hio_seek($259,$260,0)|0);
 $261 = $npat;
 $262 = $261&255;
 $263 = $262<<10;
 $psize = $263;
 $264 = $psize;
 $265 = (_malloc($264)|0);
 $pdata = $265;
 $266 = $pdata;
 $267 = $psize;
 $268 = $0;
 $269 = (_hio_read($266,1,$267,$268)|0);
 $psize = $269;
 $270 = $npat;
 $271 = $270&255;
 $272 = (($271) + 1)|0;
 $273 = $272&255;
 $npat = $273;
 $274 = $npat;
 $275 = $274&255;
 $276 = $275<<10;
 $277 = (_malloc($276)|0);
 $pat = $277;
 $278 = $pat;
 $279 = $npat;
 $280 = $279&255;
 $281 = $280<<10;
 _memset(($278|0),0,($281|0))|0;
 $j = 0;
 $i = 0;
 while(1) {
  $282 = $j;
  $283 = $psize;
  $284 = ($282|0)<($283|0);
  if (!($284)) {
   break;
  }
  $285 = $i;
  $286 = $pdata;
  $287 = (($286) + ($285)|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = $288&255;
  $290 = ($289|0)==(255);
  do {
   if ($290) {
    $291 = $i;
    $292 = (($291) + 1)|0;
    $i = $292;
    $293 = $i;
    $294 = $pdata;
    $295 = (($294) + ($293)|0);
    $296 = HEAP8[$295>>0]|0;
    $297 = $296&255;
    $298 = (255 - ($297))|0;
    $299 = $298&65535;
    $300 = $k;
    $301 = (($300) + 3)|0;
    $302 = (($301|0) % 4)&-1;
    $303 = (($ocpt) + ($302<<1)|0);
    HEAP16[$303>>1] = $299;
   } else {
    $304 = $k;
    $305 = (($304|0) % 4)&-1;
    $306 = (($ocpt) + ($305<<1)|0);
    $307 = HEAP16[$306>>1]|0;
    $308 = $307 << 16 >> 16;
    $309 = ($308|0)!=(0);
    if ($309) {
     $310 = $k;
     $311 = (($310|0) % 4)&-1;
     $312 = (($onote) + ($311<<2)|0);
     $313 = HEAP8[$312>>0]|0;
     $ins = $313;
     $314 = $k;
     $315 = (($314|0) % 4)&-1;
     $316 = (($onote) + ($315<<2)|0);
     $317 = ((($316)) + 1|0);
     $318 = HEAP8[$317>>0]|0;
     $note = $318;
     $319 = $k;
     $320 = (($319|0) % 4)&-1;
     $321 = (($onote) + ($320<<2)|0);
     $322 = ((($321)) + 2|0);
     $323 = HEAP8[$322>>0]|0;
     $fxt = $323;
     $324 = $k;
     $325 = (($324|0) % 4)&-1;
     $326 = (($onote) + ($325<<2)|0);
     $327 = ((($326)) + 3|0);
     $328 = HEAP8[$327>>0]|0;
     $fxp = $328;
     $329 = $k;
     $330 = (($329|0) % 4)&-1;
     $331 = (($ocpt) + ($330<<1)|0);
     $332 = HEAP16[$331>>1]|0;
     $333 = $332 << 16 >> 16;
     $334 = (($333) - 1)|0;
     $335 = $334&65535;
     HEAP16[$331>>1] = $335;
     $336 = $ins;
     $337 = $336&255;
     $338 = $337 & 240;
     $339 = $338&255;
     $340 = $j;
     $341 = $pat;
     $342 = (($341) + ($340)|0);
     HEAP8[$342>>0] = $339;
     $343 = $note;
     $344 = $343&255;
     $345 = (($344|0) / 2)&-1;
     $346 = (7848 + ($345<<1)|0);
     $347 = HEAP8[$346>>0]|0;
     $348 = $347&255;
     $349 = $j;
     $350 = $pat;
     $351 = (($350) + ($349)|0);
     $352 = HEAP8[$351>>0]|0;
     $353 = $352&255;
     $354 = $353 | $348;
     $355 = $354&255;
     HEAP8[$351>>0] = $355;
     $356 = $note;
     $357 = $356&255;
     $358 = (($357|0) / 2)&-1;
     $359 = (7848 + ($358<<1)|0);
     $360 = ((($359)) + 1|0);
     $361 = HEAP8[$360>>0]|0;
     $362 = $j;
     $363 = (($362) + 1)|0;
     $364 = $pat;
     $365 = (($364) + ($363)|0);
     HEAP8[$365>>0] = $361;
     $366 = $ins;
     $367 = $366&255;
     $368 = $367 << 4;
     $369 = $368 & 240;
     $370 = $369&255;
     $371 = $j;
     $372 = (($371) + 2)|0;
     $373 = $pat;
     $374 = (($373) + ($372)|0);
     HEAP8[$374>>0] = $370;
     $375 = $fxt;
     $376 = $375&255;
     $377 = $j;
     $378 = (($377) + 2)|0;
     $379 = $pat;
     $380 = (($379) + ($378)|0);
     $381 = HEAP8[$380>>0]|0;
     $382 = $381&255;
     $383 = $382 | $376;
     $384 = $383&255;
     HEAP8[$380>>0] = $384;
     $385 = $fxp;
     $386 = $j;
     $387 = (($386) + 3)|0;
     $388 = $pat;
     $389 = (($388) + ($387)|0);
     HEAP8[$389>>0] = $385;
     $390 = $k;
     $391 = (($390) + 1)|0;
     $k = $391;
     $392 = $j;
     $393 = (($392) + 4)|0;
     $j = $393;
     $394 = $i;
     $395 = (($394) - 1)|0;
     $i = $395;
     break;
    } else {
     $396 = $i;
     $397 = $pdata;
     $398 = (($397) + ($396)|0);
     $399 = HEAP8[$398>>0]|0;
     $ins = $399;
     $400 = $i;
     $401 = (($400) + 1)|0;
     $402 = $pdata;
     $403 = (($402) + ($401)|0);
     $404 = HEAP8[$403>>0]|0;
     $note = $404;
     $405 = $i;
     $406 = (($405) + 2)|0;
     $407 = $pdata;
     $408 = (($407) + ($406)|0);
     $409 = HEAP8[$408>>0]|0;
     $fxt = $409;
     $410 = $i;
     $411 = (($410) + 3)|0;
     $412 = $pdata;
     $413 = (($412) + ($411)|0);
     $414 = HEAP8[$413>>0]|0;
     $fxp = $414;
     $415 = $ins;
     $416 = $k;
     $417 = (($416|0) % 4)&-1;
     $418 = (($onote) + ($417<<2)|0);
     HEAP8[$418>>0] = $415;
     $419 = $note;
     $420 = $k;
     $421 = (($420|0) % 4)&-1;
     $422 = (($onote) + ($421<<2)|0);
     $423 = ((($422)) + 1|0);
     HEAP8[$423>>0] = $419;
     $424 = $fxt;
     $425 = $k;
     $426 = (($425|0) % 4)&-1;
     $427 = (($onote) + ($426<<2)|0);
     $428 = ((($427)) + 2|0);
     HEAP8[$428>>0] = $424;
     $429 = $fxp;
     $430 = $k;
     $431 = (($430|0) % 4)&-1;
     $432 = (($onote) + ($431<<2)|0);
     $433 = ((($432)) + 3|0);
     HEAP8[$433>>0] = $429;
     $434 = $i;
     $435 = (($434) + 3)|0;
     $i = $435;
     $436 = $ins;
     $437 = $436&255;
     $438 = $437 & 240;
     $439 = $438&255;
     $440 = $j;
     $441 = $pat;
     $442 = (($441) + ($440)|0);
     HEAP8[$442>>0] = $439;
     $443 = $note;
     $444 = $443&255;
     $445 = (($444|0) / 2)&-1;
     $446 = (7848 + ($445<<1)|0);
     $447 = HEAP8[$446>>0]|0;
     $448 = $447&255;
     $449 = $j;
     $450 = $pat;
     $451 = (($450) + ($449)|0);
     $452 = HEAP8[$451>>0]|0;
     $453 = $452&255;
     $454 = $453 | $448;
     $455 = $454&255;
     HEAP8[$451>>0] = $455;
     $456 = $note;
     $457 = $456&255;
     $458 = (($457|0) / 2)&-1;
     $459 = (7848 + ($458<<1)|0);
     $460 = ((($459)) + 1|0);
     $461 = HEAP8[$460>>0]|0;
     $462 = $j;
     $463 = (($462) + 1)|0;
     $464 = $pat;
     $465 = (($464) + ($463)|0);
     HEAP8[$465>>0] = $461;
     $466 = $ins;
     $467 = $466&255;
     $468 = $467 << 4;
     $469 = $468 & 240;
     $470 = $469&255;
     $471 = $j;
     $472 = (($471) + 2)|0;
     $473 = $pat;
     $474 = (($473) + ($472)|0);
     HEAP8[$474>>0] = $470;
     $475 = $fxt;
     $476 = $475&255;
     $477 = $j;
     $478 = (($477) + 2)|0;
     $479 = $pat;
     $480 = (($479) + ($478)|0);
     $481 = HEAP8[$480>>0]|0;
     $482 = $481&255;
     $483 = $482 | $476;
     $484 = $483&255;
     HEAP8[$480>>0] = $484;
     $485 = $fxp;
     $486 = $j;
     $487 = (($486) + 3)|0;
     $488 = $pat;
     $489 = (($488) + ($487)|0);
     HEAP8[$489>>0] = $485;
     $490 = $k;
     $491 = (($490) + 1)|0;
     $k = $491;
     $492 = $j;
     $493 = (($492) + 4)|0;
     $j = $493;
     break;
    }
   }
  } while(0);
  $494 = $i;
  $495 = (($494) + 1)|0;
  $i = $495;
 }
 $496 = $pat;
 $497 = $npat;
 $498 = $497&255;
 $499 = $498<<10;
 $500 = $1;
 (_fwrite(($496|0),($499|0),1,($500|0))|0);
 $501 = $pdata;
 _free($501);
 $502 = $pat;
 _free($502);
 $503 = $0;
 $504 = $smp_addr;
 (_hio_seek($503,$504,0)|0);
 $505 = $1;
 $506 = $0;
 $507 = $ssize;
 (_pw_move_data($505,$506,$507)|0);
 STACKTOP = sp;return 0;
}
function _test_pru1($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 do {
  if ($5) {
   $6 = $3;
   $7 = (1084 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 1080|0);
   $10 = (_readmem32b($9)|0);
   $11 = ($10|0)!=(1397642286);
   if ($11) {
    $0 = -1;
    break;
   }
   $12 = $1;
   $13 = ((($12)) + 951|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = ($15|0)!=(127);
   if ($16) {
    $0 = -1;
    break;
   }
   $17 = $1;
   $18 = ((($17)) + 950|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)>(127);
   if ($21) {
    $0 = -1;
    break;
   } else {
    $22 = $1;
    $23 = $2;
    _pw_read_title($22,$23,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _depack_pru1($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $header = 0, $i = 0, $j = 0, $max = 0, $npat = 0, $ptable = 0, $ssize = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 160|0;
 $ptable = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($header|0),0,2048)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_hio_read($header,950,1,$2)|0);
 $3 = $1;
 (_fwrite(($header|0),950,1,($3|0))|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = ($6*30)|0;
  $8 = (($header) + ($7)|0);
  $9 = ((($8)) + 42|0);
  $10 = (_readmem16b($9)|0);
  $11 = $10&65535;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $1;
 $18 = $0;
 $19 = (_hio_read8($18)|0);
 $npat = $19;
 _write8($17,$19);
 _memset(($header|0),0,2048)|0;
 $20 = $0;
 (_hio_read($header,129,1,$20)|0);
 $21 = $1;
 (_fwrite(($header|0),129,1,($21|0))|0);
 $22 = $1;
 _write32b($22,1294879534);
 $max = 0;
 $i = 1;
 while(1) {
  $23 = $i;
  $24 = ($23|0)<(129);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (($header) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $max;
  $30 = $29&255;
  $31 = ($28|0)>($30|0);
  if ($31) {
   $32 = $i;
   $33 = (($header) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $max = $34;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $37 = $0;
 (_hio_seek($37,1084,0)|0);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $max;
  $40 = $39&255;
  $41 = ($38|0)<=($40|0);
  if (!($41)) {
   break;
  }
  $j = 0;
  while(1) {
   $42 = $j;
   $43 = ($42|0)<(256);
   if (!($43)) {
    break;
   }
   $44 = $0;
   $45 = (_hio_read8($44)|0);
   HEAP8[$header>>0] = $45;
   $46 = $0;
   $47 = (_hio_read8($46)|0);
   $48 = ((($header)) + 1|0);
   HEAP8[$48>>0] = $47;
   $49 = $0;
   $50 = (_hio_read8($49)|0);
   $51 = ((($header)) + 2|0);
   HEAP8[$51>>0] = $50;
   $52 = $0;
   $53 = (_hio_read8($52)|0);
   $54 = ((($header)) + 3|0);
   HEAP8[$54>>0] = $53;
   $55 = HEAP8[$header>>0]|0;
   $56 = $55&255;
   $57 = $56 & 240;
   $58 = $57&255;
   $c1 = $58;
   $59 = HEAP8[$header>>0]|0;
   $60 = $59&255;
   $61 = $60 & 15;
   $62 = $61 << 4;
   $63 = $62&255;
   $c3 = $63;
   $64 = ((($header)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $c3;
   $68 = $67&255;
   $69 = $68 | $66;
   $70 = $69&255;
   $c3 = $70;
   $71 = ((($header)) + 3|0);
   $72 = HEAP8[$71>>0]|0;
   $c4 = $72;
   $73 = ((($header)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = (7848 + ($75<<1)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = $c1;
   $80 = $79&255;
   $81 = $80 | $78;
   $82 = $81&255;
   $c1 = $82;
   $83 = ((($header)) + 1|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (7848 + ($85<<1)|0);
   $87 = ((($86)) + 1|0);
   $88 = HEAP8[$87>>0]|0;
   $c2 = $88;
   $89 = $1;
   $90 = $c1;
   _write8($89,$90);
   $91 = $1;
   $92 = $c2;
   _write8($91,$92);
   $93 = $1;
   $94 = $c3;
   _write8($93,$94);
   $95 = $1;
   $96 = $c4;
   _write8($95,$96);
   $97 = $j;
   $98 = (($97) + 1)|0;
   $j = $98;
  }
  $99 = $i;
  $100 = (($99) + 1)|0;
  $i = $100;
 }
 $101 = $1;
 $102 = $0;
 $103 = $ssize;
 (_pw_move_data($101,$102,$103)|0);
 STACKTOP = sp;return 0;
}
function _test_pru2($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(260);
 do {
  if ($5) {
   $6 = $3;
   $7 = (260 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = (_readmem32b($8)|0);
   $10 = ($9|0)!=(1397642273);
   if ($10) {
    $0 = -1;
    break;
   }
   $k = 0;
   while(1) {
    $11 = $k;
    $12 = ($11|0)<(31);
    if (!($12)) {
     break;
    }
    $13 = $k;
    $14 = $13<<3;
    $15 = (11 + ($14))|0;
    $16 = $1;
    $17 = (($16) + ($15)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ($19|0)>(64);
    if ($20) {
     label = 8;
     break;
    }
    $21 = $k;
    $22 = (($21) + 1)|0;
    $k = $22;
   }
   if ((label|0) == 8) {
    $0 = -1;
    break;
   }
   $k = 0;
   while(1) {
    $23 = $k;
    $24 = ($23|0)<(31);
    if (!($24)) {
     label = 15;
     break;
    }
    $25 = $k;
    $26 = $25<<3;
    $27 = (10 + ($26))|0;
    $28 = $1;
    $29 = (($28) + ($27)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = ($31|0)>(15);
    if ($32) {
     label = 13;
     break;
    }
    $33 = $k;
    $34 = (($33) + 1)|0;
    $k = $34;
   }
   if ((label|0) == 13) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 15) {
    $35 = $2;
    _pw_read_title(0,$35,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _depack_pru2($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $header = 0, $i = 0, $j = 0, $max = 0, $npat = 0, $ptable = 0, $size = 0, $ssize = 0, $v = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 184|0;
 $ptable = sp + 48|0;
 $v = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $ssize = 0;
 _memset(($header|0),0,2048)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 (_hio_seek($3,8,0)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $1;
  if (!($5)) {
   break;
  }
  (_pw_write_zero($6,22)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_hio_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $1;
  $17 = $0;
  $18 = (_hio_read8($17)|0);
  _write8($16,$18);
  $19 = $1;
  $20 = $0;
  $21 = (_hio_read8($20)|0);
  _write8($19,$21);
  $22 = $1;
  $23 = $0;
  $24 = (_hio_read16b($23)|0);
  _write16b($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  _write16b($25,$27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = (_hio_read8($30)|0);
 $npat = $31;
 _write8($6,$31);
 $32 = $1;
 $33 = $0;
 $34 = (_hio_read8($33)|0);
 _write8($32,$34);
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = ($35|0)<(128);
  $37 = $1;
  if (!($36)) {
   break;
  }
  $38 = $0;
  $39 = (_hio_read8($38)|0);
  $c1 = $39;
  _write8($37,$39);
  $40 = $c1;
  $41 = $40&255;
  $42 = $max;
  $43 = $42&255;
  $44 = ($41|0)>($43|0);
  $45 = $c1;
  $46 = $max;
  $$sink = $44 ? $45 : $46;
  $47 = $$sink&255;
  $48 = $47&255;
  $max = $48;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 _write32b($37,1294879534);
 $51 = $0;
 (_hio_seek($51,770,0)|0);
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $max;
  $54 = $53&255;
  $55 = ($52|0)<=($54|0);
  if (!($55)) {
   break;
  }
  $j = 0;
  while(1) {
   $56 = $j;
   $57 = ($56|0)<(256);
   if (!($57)) {
    break;
   }
   $c4 = 0;
   $c3 = 0;
   $c2 = 0;
   $c1 = 0;
   $58 = $0;
   $59 = (_hio_read8($58)|0);
   HEAP8[$header>>0] = $59;
   $60 = HEAP8[$header>>0]|0;
   $61 = $60&255;
   $62 = ($61|0)==(128);
   do {
    if ($62) {
     $63 = $1;
     _write32b($63,0);
    } else {
     $64 = HEAP8[$header>>0]|0;
     $65 = $64&255;
     $66 = ($65|0)==(192);
     if ($66) {
      $67 = $1;
      (_fwrite(($v|0),4,1,($67|0))|0);
      $68 = HEAP8[$v>>0]|0;
      $c1 = $68;
      $69 = ((($v)) + 1|0);
      $70 = HEAP8[$69>>0]|0;
      $c2 = $70;
      $71 = ((($v)) + 2|0);
      $72 = HEAP8[$71>>0]|0;
      $c3 = $72;
      $73 = ((($v)) + 3|0);
      $74 = HEAP8[$73>>0]|0;
      $c4 = $74;
      break;
     }
     $75 = HEAP8[$header>>0]|0;
     $76 = $75&255;
     $77 = ($76|0)!=(192);
     if ($77) {
      $78 = HEAP8[$header>>0]|0;
      $79 = $78&255;
      $80 = ($79|0)!=(192);
      if ($80) {
       $81 = $0;
       $82 = (_hio_read8($81)|0);
       $83 = ((($header)) + 1|0);
       HEAP8[$83>>0] = $82;
       $84 = $0;
       $85 = (_hio_read8($84)|0);
       $86 = ((($header)) + 2|0);
       HEAP8[$86>>0] = $85;
       $87 = ((($header)) + 1|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = $88&255;
       $90 = $89 & 128;
       $91 = $90 >> 3;
       $92 = $91&255;
       $c1 = $92;
       $93 = HEAP8[$header>>0]|0;
       $94 = $93&255;
       $95 = $94 >> 1;
       $96 = (7848 + ($95<<1)|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97&255;
       $99 = $c1;
       $100 = $99&255;
       $101 = $100 | $98;
       $102 = $101&255;
       $c1 = $102;
       $103 = HEAP8[$header>>0]|0;
       $104 = $103&255;
       $105 = $104 >> 1;
       $106 = (7848 + ($105<<1)|0);
       $107 = ((($106)) + 1|0);
       $108 = HEAP8[$107>>0]|0;
       $c2 = $108;
       $109 = ((($header)) + 1|0);
       $110 = HEAP8[$109>>0]|0;
       $111 = $110&255;
       $112 = $111 & 112;
       $113 = $112 << 1;
       $114 = $113&255;
       $c3 = $114;
       $115 = HEAP8[$header>>0]|0;
       $116 = $115&255;
       $117 = $116 & 1;
       $118 = $117 << 4;
       $119 = $c3;
       $120 = $119&255;
       $121 = $120 | $118;
       $122 = $121&255;
       $c3 = $122;
       $123 = ((($header)) + 1|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = $125 & 15;
       $127 = $c3;
       $128 = $127&255;
       $129 = $128 | $126;
       $130 = $129&255;
       $c3 = $130;
       $131 = ((($header)) + 2|0);
       $132 = HEAP8[$131>>0]|0;
       $c4 = $132;
       $133 = $1;
       $134 = $c1;
       _write8($133,$134);
       $135 = $1;
       $136 = $c2;
       _write8($135,$136);
       $137 = $1;
       $138 = $c3;
       _write8($137,$138);
       $139 = $1;
       $140 = $c4;
       _write8($139,$140);
      }
     }
    }
   } while(0);
   $141 = ((($v)) + 4|0);
   ;HEAP8[$v>>0]=HEAP8[$141>>0]|0;HEAP8[$v+1>>0]=HEAP8[$141+1>>0]|0;HEAP8[$v+2>>0]=HEAP8[$141+2>>0]|0;HEAP8[$v+3>>0]=HEAP8[$141+3>>0]|0;
   $142 = ((($v)) + 4|0);
   $143 = ((($v)) + 8|0);
   ;HEAP8[$142>>0]=HEAP8[$143>>0]|0;HEAP8[$142+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$142+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$142+3>>0]=HEAP8[$143+3>>0]|0;
   $144 = ((($v)) + 8|0);
   $145 = ((($v)) + 12|0);
   ;HEAP8[$144>>0]=HEAP8[$145>>0]|0;HEAP8[$144+1>>0]=HEAP8[$145+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$145+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$145+3>>0]|0;
   $146 = $c1;
   $147 = ((($v)) + 12|0);
   HEAP8[$147>>0] = $146;
   $148 = $c2;
   $149 = ((($v)) + 12|0);
   $150 = ((($149)) + 1|0);
   HEAP8[$150>>0] = $148;
   $151 = $c3;
   $152 = ((($v)) + 12|0);
   $153 = ((($152)) + 2|0);
   HEAP8[$153>>0] = $151;
   $154 = $c4;
   $155 = ((($v)) + 12|0);
   $156 = ((($155)) + 3|0);
   HEAP8[$156>>0] = $154;
   $157 = $j;
   $158 = (($157) + 1)|0;
   $j = $158;
  }
  $159 = $i;
  $160 = (($159) + 1)|0;
  $i = $160;
 }
 $161 = $1;
 $162 = $0;
 $163 = $ssize;
 (_pw_move_data($161,$162,$163)|0);
 STACKTOP = sp;return 0;
}
function _test_tdd($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr = 0, $d = 0, $d1 = 0, $i = 0, $lsiz = 0, $or$cond = 0;
 var $or$cond3 = 0, $pat = 0, $pdata_ofs = 0, $psize = 0, $sadr = 0, $size = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(564);
 if ($5) {
  $6 = $3;
  $7 = (564 - ($6))|0;
  $0 = $7;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 $ssize = 0;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = ($8|0)<(31);
  if (!($9)) {
   label = 16;
   break;
  }
  $10 = $1;
  $11 = $i;
  $12 = ($11*14)|0;
  $13 = (($10) + ($12)|0);
  $d = $13;
  $14 = $d;
  $15 = ((($14)) + 130|0);
  $16 = (_readmem32b($15)|0);
  $addr = $16;
  $17 = $d;
  $18 = ((($17)) + 134|0);
  $19 = (_readmem16b($18)|0);
  $20 = $19&65535;
  $size = $20;
  $21 = $d;
  $22 = ((($21)) + 138|0);
  $23 = (_readmem32b($22)|0);
  $sadr = $23;
  $24 = $d;
  $25 = ((($24)) + 142|0);
  $26 = (_readmem16b($25)|0);
  $27 = $26&65535;
  $lsiz = $27;
  $28 = $d;
  $29 = ((($28)) + 137|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)>(64);
  if ($32) {
   label = 6;
   break;
  }
  $33 = $sadr;
  $34 = $addr;
  $35 = ($33|0)<($34|0);
  if ($35) {
   label = 8;
   break;
  }
  $36 = $addr;
  $37 = ($36|0)<(564);
  $38 = $sadr;
  $39 = ($38|0)<(564);
  $or$cond = $37 | $39;
  if ($or$cond) {
   label = 10;
   break;
  }
  $40 = $sadr;
  $41 = $addr;
  $42 = (($40) - ($41))|0;
  $43 = $size;
  $44 = ($42|0)>($43|0);
  if ($44) {
   label = 12;
   break;
  }
  $45 = $sadr;
  $46 = $addr;
  $47 = (($45) - ($46))|0;
  $48 = $lsiz;
  $49 = (($47) + ($48))|0;
  $50 = $size;
  $51 = (($50) + 2)|0;
  $52 = ($49|0)>($51|0);
  if ($52) {
   label = 14;
   break;
  }
  $53 = $size;
  $54 = $ssize;
  $55 = (($54) + ($53))|0;
  $ssize = $55;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 else if ((label|0) == 16) {
  $58 = $ssize;
  $59 = ($58|0)<=(2);
  $60 = $ssize;
  $61 = ($60|0)>(2031585);
  $or$cond3 = $59 | $61;
  if ($or$cond3) {
   $0 = -1;
   $173 = $0;
   STACKTOP = sp;return ($173|0);
  }
  $62 = $1;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($64|0)==(0);
  if (!($65)) {
   $66 = $1;
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = ($68|0)>(127);
   if (!($69)) {
    $psize = 0;
    $i = 0;
    while(1) {
     $70 = $i;
     $71 = ($70|0)<(128);
     if (!($71)) {
      break;
     }
     $72 = $i;
     $73 = (($72) + 2)|0;
     $74 = $1;
     $75 = (($74) + ($73)|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $pat = $77;
     $78 = $pat;
     $79 = ($78|0)>(127);
     if ($79) {
      label = 24;
      break;
     }
     $80 = $pat;
     $81 = $psize;
     $82 = ($80|0)>($81|0);
     if ($82) {
      $83 = $pat;
      $psize = $83;
     }
     $84 = $i;
     $85 = (($84) + 1)|0;
     $i = $85;
    }
    if ((label|0) == 24) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    $86 = $psize;
    $87 = (($86) + 1)|0;
    $psize = $87;
    $88 = $psize;
    $89 = $88 << 10;
    $psize = $89;
    $90 = $1;
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = (($92) + 2)|0;
    $i = $93;
    while(1) {
     $94 = $i;
     $95 = ($94|0)<(128);
     if (!($95)) {
      break;
     }
     $96 = $i;
     $97 = (($96) + 2)|0;
     $98 = $1;
     $99 = (($98) + ($97)|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = $100&255;
     $102 = ($101|0)!=(0);
     if ($102) {
      label = 31;
      break;
     }
     $103 = $i;
     $104 = (($103) + 1)|0;
     $i = $104;
    }
    if ((label|0) == 31) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    $105 = $ssize;
    $106 = (564 + ($105))|0;
    $pdata_ofs = $106;
    $107 = $3;
    $108 = $ssize;
    $109 = (564 + ($108))|0;
    $110 = $psize;
    $111 = (($109) + ($110))|0;
    $112 = ($107|0)<($111|0);
    if ($112) {
     $113 = $ssize;
     $114 = (564 + ($113))|0;
     $115 = $psize;
     $116 = (($114) + ($115))|0;
     $117 = $3;
     $118 = (($116) - ($117))|0;
     $0 = $118;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    $i = 0;
    while(1) {
     $119 = $i;
     $120 = $psize;
     $121 = ($119|0)<($120|0);
     if (!($121)) {
      label = 51;
      break;
     }
     $122 = $1;
     $123 = $pdata_ofs;
     $124 = (($122) + ($123)|0);
     $125 = $i;
     $126 = (($124) + ($125)|0);
     $d1 = $126;
     $127 = $d1;
     $128 = HEAP8[$127>>0]|0;
     $129 = $128&255;
     $130 = ($129|0)>(31);
     if ($130) {
      label = 38;
      break;
     }
     $131 = $d1;
     $132 = ((($131)) + 1|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = ($134|0)>(72);
     if ($135) {
      label = 41;
      break;
     }
     $136 = $d1;
     $137 = ((($136)) + 1|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = $139 & 1;
     $141 = ($140|0)==(1);
     if ($141) {
      label = 41;
      break;
     }
     $142 = $d1;
     $143 = ((($142)) + 2|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = $145 & 15;
     $147 = ($146|0)==(12);
     if ($147) {
      $148 = $d1;
      $149 = ((($148)) + 3|0);
      $150 = HEAP8[$149>>0]|0;
      $151 = $150&255;
      $152 = ($151|0)>(64);
      if ($152) {
       label = 44;
       break;
      }
     }
     $153 = $d1;
     $154 = ((($153)) + 2|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = $156 & 15;
     $158 = ($157|0)==(13);
     if ($158) {
      $159 = $d1;
      $160 = ((($159)) + 3|0);
      $161 = HEAP8[$160>>0]|0;
      $162 = $161&255;
      $163 = ($162|0)>(64);
      if ($163) {
       label = 47;
       break;
      }
     }
     $164 = $d1;
     $165 = ((($164)) + 2|0);
     $166 = HEAP8[$165>>0]|0;
     $167 = $166&255;
     $168 = $167 & 15;
     $169 = ($168|0)==(11);
     if ($169) {
      label = 49;
      break;
     }
     $170 = $i;
     $171 = (($170) + 4)|0;
     $i = $171;
    }
    if ((label|0) == 38) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    else if ((label|0) == 41) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    else if ((label|0) == 44) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    else if ((label|0) == 47) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    else if ((label|0) == 49) {
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
    else if ((label|0) == 51) {
     $172 = $2;
     _pw_read_title(0,$172,0);
     $0 = -1;
     $173 = $0;
     STACKTOP = sp;return ($173|0);
    }
   }
  }
  $0 = -1;
  $173 = $0;
  STACKTOP = sp;return ($173|0);
 }
 return (0)|0;
}
function _depack_tdd($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $pat = 0, $pmax = 0, $saddr = 0, $size = 0, $ssize = 0, $ssizes = 0, $tmp = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pat = sp + 288|0;
 $saddr = sp + 128|0;
 $ssizes = sp + 4|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 dest=$saddr; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$ssizes; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $1;
 (_pw_write_zero($2,1080)|0);
 $3 = (_malloc(130)|0);
 $tmp = $3;
 $4 = $tmp;
 _memset(($4|0),0,130)|0;
 $5 = $1;
 (_fseek(($5|0),950,0)|0);
 $6 = $tmp;
 $7 = $0;
 (_hio_read($6,130,1,$7)|0);
 $8 = $tmp;
 $9 = $1;
 (_fwrite(($8|0),130,1,($9|0))|0);
 $i = 0;
 $pmax = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(128);
  if (!($11)) {
   break;
  }
  $12 = $i;
  $13 = (($12) + 2)|0;
  $14 = $tmp;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $pmax;
  $19 = $18&255;
  $20 = ($17|0)>($19|0);
  if ($20) {
   $21 = $i;
   $22 = (($21) + 2)|0;
   $23 = $tmp;
   $24 = (($23) + ($22)|0);
   $25 = HEAP8[$24>>0]|0;
   $pmax = $25;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $tmp;
 _free($28);
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(31);
  if (!($30)) {
   break;
  }
  $31 = $1;
  $32 = $i;
  $33 = ($32*30)|0;
  $34 = (42 + ($33))|0;
  (_fseek(($31|0),($34|0),0)|0);
  $35 = $0;
  $36 = (_hio_read32b($35)|0);
  $37 = $i;
  $38 = (($saddr) + ($37<<2)|0);
  HEAP32[$38>>2] = $36;
  $39 = $1;
  $40 = $0;
  $41 = (_hio_read16b($40)|0);
  $42 = $41&65535;
  $size = $42;
  $43 = $42&65535;
  _write16b($39,$43);
  $44 = $size;
  $45 = $ssize;
  $46 = (($45) + ($44))|0;
  $ssize = $46;
  $47 = $size;
  $48 = $i;
  $49 = (($ssizes) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $1;
  $51 = $0;
  $52 = (_hio_read8($51)|0);
  _write8($50,$52);
  $53 = $1;
  $54 = $0;
  $55 = (_hio_read8($54)|0);
  _write8($53,$55);
  $56 = $1;
  $57 = $0;
  $58 = (_hio_read32b($57)|0);
  $59 = $i;
  $60 = (($saddr) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) - ($61))|0;
  $63 = (($62>>>0) / 2)&-1;
  $64 = $63&65535;
  _write16b($56,$64);
  $65 = $1;
  $66 = $0;
  $67 = (_hio_read16b($66)|0);
  _write16b($65,$67);
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = $0;
 $71 = $ssize;
 (_hio_seek($70,$71,1)|0);
 $72 = $1;
 (_fseek(($72|0),0,2)|0);
 $73 = $1;
 _write32b($73,1294879534);
 $74 = (_malloc(1024)|0);
 $tmp = $74;
 $i = 0;
 while(1) {
  $75 = $i;
  $76 = $pmax;
  $77 = $76&255;
  $78 = ($75|0)<=($77|0);
  $79 = $tmp;
  if (!($78)) {
   break;
  }
  _memset(($79|0),0,1024)|0;
  _memset(($pat|0),0,1024)|0;
  $80 = $tmp;
  $81 = $0;
  (_hio_read($80,1024,1,$81)|0);
  $j = 0;
  while(1) {
   $82 = $j;
   $83 = ($82|0)<(64);
   if (!($83)) {
    break;
   }
   $k = 0;
   while(1) {
    $84 = $k;
    $85 = ($84|0)<(4);
    $86 = $j;
    if (!($85)) {
     break;
    }
    $87 = $86<<4;
    $88 = $k;
    $89 = $88<<2;
    $90 = (($87) + ($89))|0;
    $x = $90;
    $91 = $x;
    $92 = (($91) + 3)|0;
    $93 = $tmp;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $x;
    $97 = (($96) + 3)|0;
    $98 = (($pat) + ($97)|0);
    HEAP8[$98>>0] = $95;
    $99 = $x;
    $100 = (($99) + 2)|0;
    $101 = $tmp;
    $102 = (($101) + ($100)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = $104 & 15;
    $106 = $105&255;
    $107 = $x;
    $108 = (($107) + 2)|0;
    $109 = (($pat) + ($108)|0);
    HEAP8[$109>>0] = $106;
    $110 = $x;
    $111 = $tmp;
    $112 = (($111) + ($110)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $114 & 240;
    $116 = $115&255;
    $117 = $x;
    $118 = (($pat) + ($117)|0);
    HEAP8[$118>>0] = $116;
    $119 = $x;
    $120 = $tmp;
    $121 = (($120) + ($119)|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $124 = $123 << 4;
    $125 = $124 & 240;
    $126 = $x;
    $127 = (($126) + 2)|0;
    $128 = (($pat) + ($127)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $130 | $125;
    $132 = $131&255;
    HEAP8[$128>>0] = $132;
    $133 = $x;
    $134 = (($133) + 1)|0;
    $135 = $tmp;
    $136 = (($135) + ($134)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = (($138|0) / 2)&-1;
    $140 = (7848 + ($139<<1)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = $x;
    $144 = (($pat) + ($143)|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $146 | $142;
    $148 = $147&255;
    HEAP8[$144>>0] = $148;
    $149 = $x;
    $150 = (($149) + 1)|0;
    $151 = $tmp;
    $152 = (($151) + ($150)|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = (($154|0) / 2)&-1;
    $156 = (7848 + ($155<<1)|0);
    $157 = ((($156)) + 1|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $x;
    $160 = (($159) + 1)|0;
    $161 = (($pat) + ($160)|0);
    HEAP8[$161>>0] = $158;
    $162 = $k;
    $163 = (($162) + 1)|0;
    $k = $163;
   }
   $164 = (($86) + 1)|0;
   $j = $164;
  }
  $165 = $1;
  (_fwrite(($pat|0),1024,1,($165|0))|0);
  $166 = $i;
  $167 = (($166) + 1)|0;
  $i = $167;
 }
 _free($79);
 $i = 0;
 while(1) {
  $168 = $i;
  $169 = ($168|0)<(31);
  if (!($169)) {
   break;
  }
  $170 = $i;
  $171 = (($ssizes) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ($172|0)==(0);
  if (!($173)) {
   $174 = $0;
   $175 = $i;
   $176 = (($saddr) + ($175<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   (_hio_seek($174,$177,0)|0);
   $178 = $1;
   $179 = $0;
   $180 = $i;
   $181 = (($ssizes) + ($180<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   (_pw_move_data($178,$179,$182)|0);
  }
  $183 = $i;
  $184 = (($183) + 1)|0;
  $i = $184;
 }
 STACKTOP = sp;return 0;
}
function _test_unic_id($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $d = 0, $d1 = 0, $end = 0, $i = 0, $psize = 0, $size = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1080|0);
 $10 = (_readmem32b($9)|0);
 $11 = ($10|0)!=(1294879534);
 if ($11) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $ssize = 0;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(31);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $15 = $i;
  $16 = ($15*30)|0;
  $17 = (($14) + ($16)|0);
  $d = $17;
  $18 = $d;
  $19 = ((($18)) + 42|0);
  $20 = (_readmem16b($19)|0);
  $21 = $20&65535;
  $22 = $21 << 1;
  $size = $22;
  $23 = $size;
  $24 = $ssize;
  $25 = (($24) + ($23))|0;
  $ssize = $25;
  $26 = $d;
  $27 = ((($26)) + 46|0);
  $28 = (_readmem16b($27)|0);
  $29 = $28&65535;
  $30 = $d;
  $31 = ((($30)) + 48|0);
  $32 = (_readmem16b($31)|0);
  $33 = $32&65535;
  $34 = (($29) + ($33))|0;
  $35 = $34 << 1;
  $end = $35;
  $36 = $size;
  $37 = (($36) + 2)|0;
  $38 = $end;
  $39 = ($37|0)<($38|0);
  if ($39) {
   label = 8;
   break;
  }
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $42 = $ssize;
 $43 = ($42|0)<=(2);
 if ($43) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 $i = 0;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<(31);
  $46 = $1;
  if (!($45)) {
   label = 21;
   break;
  }
  $47 = $i;
  $48 = ($47*30)|0;
  $49 = (($46) + ($48)|0);
  $d1 = $49;
  $50 = $d1;
  $51 = ((($50)) + 40|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = ($53|0)<(-8);
  if ($54) {
   label = 16;
   break;
  }
  $55 = $d1;
  $56 = ((($55)) + 40|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = ($58|0)>(7);
  if ($59) {
   label = 16;
   break;
  }
  $60 = $d1;
  $61 = ((($60)) + 44|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)!=(0);
  if ($64) {
   label = 19;
   break;
  }
  $65 = $d1;
  $66 = ((($65)) + 45|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(64);
  if ($69) {
   label = 19;
   break;
  }
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $90 = $0;
  STACKTOP = sp;return ($90|0);
 }
 else if ((label|0) == 21) {
  $72 = (_check_pattern_list_size($46)|0);
  $psize = $72;
  $73 = $psize;
  $74 = ($73|0)<(0);
  if ($74) {
   $0 = -1;
   $90 = $0;
   STACKTOP = sp;return ($90|0);
  }
  $i = 0;
  while(1) {
   $75 = $i;
   $76 = $psize;
   $77 = ($75|0)<($76|0);
   if (!($77)) {
    label = 28;
    break;
   }
   $78 = $i;
   $79 = ($78*3)|0;
   $80 = (1084 + ($79))|0;
   $81 = $1;
   $82 = (($81) + ($80)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = ($84|0)>(116);
   if ($85) {
    label = 26;
    break;
   }
   $86 = $i;
   $87 = (($86) + 1)|0;
   $i = $87;
  }
  if ((label|0) == 26) {
   $0 = -1;
   $90 = $0;
   STACKTOP = sp;return ($90|0);
  }
  else if ((label|0) == 28) {
   $88 = $1;
   $89 = $2;
   _pw_read_title($88,$89,20);
   $0 = 0;
   $90 = $0;
   STACKTOP = sp;return ($90|0);
  }
 }
 return (0)|0;
}
function _depack_unic($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $fine = 0, $fxp = 0, $fxt = 0, $i = 0, $id = 0, $ins = 0, $j = 0, $len = 0, $lsize = 0, $max = 0, $note = 0, $npat = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $ssize = 0, $start = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 36|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $2 = $1;
 $3 = $0;
 (_pw_move_data($2,$3,20)|0);
 $ssize = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $0;
  (_pw_move_data($6,$7,20)|0);
  $8 = $1;
  _write8($8,0);
  $9 = $1;
  _write8($9,0);
  $10 = $0;
  $11 = (_hio_read8($10)|0);
  $c1 = $11;
  $12 = $0;
  $13 = (_hio_read8($12)|0);
  $c2 = $13;
  $14 = $c1;
  $15 = $14&255;
  $16 = $15 << 8;
  $17 = $c2;
  $18 = $17&255;
  $19 = (($16) + ($18))|0;
  $j = $19;
  $20 = $j;
  $21 = ($20|0)!=(0);
  do {
   if ($21) {
    $22 = $j;
    $23 = ($22|0)<(256);
    $24 = $c2;
    $25 = $24&255;
    if ($23) {
     $26 = (16 - ($25))|0;
     $27 = $26&255;
     $fine = $27;
     break;
    } else {
     $28 = (256 - ($25))|0;
     $29 = $28&255;
     $fine = $29;
     break;
    }
   } else {
    $fine = 0;
   }
  } while(0);
  $30 = $0;
  $31 = (_hio_read16b($30)|0);
  $32 = $31&65535;
  $len = $32;
  $33 = $1;
  $34 = $len;
  $35 = $34&65535;
  _write16b($33,$35);
  $36 = $len;
  $37 = $36<<1;
  $38 = $ssize;
  $39 = (($38) + ($37))|0;
  $ssize = $39;
  $40 = $0;
  (_hio_read8($40)|0);
  $41 = $1;
  $42 = $fine;
  _write8($41,$42);
  $43 = $1;
  $44 = $0;
  $45 = (_hio_read8($44)|0);
  _write8($43,$45);
  $46 = $0;
  $47 = (_hio_read16b($46)|0);
  $48 = $47&65535;
  $start = $48;
  $49 = $0;
  $50 = (_hio_read16b($49)|0);
  $51 = $50&65535;
  $lsize = $51;
  $52 = $start;
  $53 = $52<<1;
  $54 = $lsize;
  $55 = (($53) + ($54))|0;
  $56 = $len;
  $57 = ($55|0)<=($56|0);
  $58 = $start;
  $59 = ($58|0)!=(0);
  $or$cond = $57 & $59;
  if ($or$cond) {
   $60 = $start;
   $61 = $60 << 1;
   $start = $61;
  }
  $62 = $1;
  $63 = $start;
  $64 = $63&65535;
  _write16b($62,$64);
  $65 = $1;
  $66 = $lsize;
  $67 = $66&65535;
  _write16b($65,$67);
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 $70 = $0;
 $71 = (_hio_read8($70)|0);
 $npat = $71;
 $72 = $1;
 $73 = $npat;
 _write8($72,$73);
 $74 = $1;
 _write8($74,127);
 $75 = $0;
 (_hio_read8($75)|0);
 $76 = $0;
 (_hio_read($tmp,128,1,$76)|0);
 $77 = $1;
 (_fwrite(($tmp|0),128,1,($77|0))|0);
 $i = 0;
 while(1) {
  $78 = $i;
  $79 = ($78|0)<(128);
  if (!($79)) {
   break;
  }
  $80 = $i;
  $81 = (($tmp) + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $max;
  $85 = $84&255;
  $86 = ($83|0)>($85|0);
  if ($86) {
   $87 = $i;
   $88 = (($tmp) + ($87)|0);
   $89 = HEAP8[$88>>0]|0;
   $max = $89;
  }
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 $92 = $max;
 $93 = (($92) + 1)<<24>>24;
 $max = $93;
 $94 = $1;
 _write32b($94,1294879534);
 $95 = $0;
 (_hio_seek($95,1080,0)|0);
 $96 = $0;
 $97 = (_hio_read32b($96)|0);
 $id = $97;
 $98 = $id;
 $99 = ($98|0)!=(0);
 $100 = $id;
 $101 = ($100|0)!=(1294879534);
 $or$cond3 = $99 & $101;
 $102 = $id;
 $103 = ($102|0)!=(1431193923);
 $or$cond5 = $or$cond3 & $103;
 if ($or$cond5) {
  $104 = $0;
  (_hio_seek($104,-4,1)|0);
 }
 $i = 0;
 while(1) {
  $105 = $i;
  $106 = $max;
  $107 = $106&255;
  $108 = ($105|0)<($107|0);
  if (!($108)) {
   break;
  }
  $j = 0;
  while(1) {
   $109 = $j;
   $110 = ($109|0)<(256);
   if (!($110)) {
    break;
   }
   $111 = $0;
   $112 = (_hio_read8($111)|0);
   $c1 = $112;
   $113 = $0;
   $114 = (_hio_read8($113)|0);
   $c2 = $114;
   $115 = $0;
   $116 = (_hio_read8($115)|0);
   $c3 = $116;
   $117 = $c1;
   $118 = $117&255;
   $119 = $118 >> 2;
   $120 = $119 & 16;
   $121 = $c2;
   $122 = $121&255;
   $123 = $122 >> 4;
   $124 = $123 & 15;
   $125 = $120 | $124;
   $126 = $125&255;
   $ins = $126;
   $127 = $c1;
   $128 = $127&255;
   $129 = $128 & 63;
   $130 = $129&255;
   $note = $130;
   $131 = $c2;
   $132 = $131&255;
   $133 = $132 & 15;
   $134 = $133&255;
   $fxt = $134;
   $135 = $c3;
   $fxp = $135;
   $136 = $fxt;
   $137 = $136&255;
   $138 = ($137|0)==(13);
   if ($138) {
    $139 = $fxp;
    $140 = $139&255;
    $141 = (($140|0) / 10)&-1;
    $142 = $141&255;
    $c3 = $142;
    $143 = $fxp;
    $144 = $143&255;
    $145 = (($144|0) % 10)&-1;
    $146 = $145&255;
    $c4 = $146;
    $147 = $c3;
    $148 = $147&255;
    $149 = $148<<4;
    $150 = $c4;
    $151 = $150&255;
    $152 = (($149) + ($151))|0;
    $153 = $152&255;
    $fxp = $153;
   }
   $154 = $ins;
   $155 = $154&255;
   $156 = $155 & 240;
   $157 = $note;
   $158 = $157&255;
   $159 = (7848 + ($158<<1)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = $156 | $161;
   $163 = $162&255;
   $164 = $j;
   $165 = $164<<2;
   $166 = (($tmp) + ($165)|0);
   HEAP8[$166>>0] = $163;
   $167 = $note;
   $168 = $167&255;
   $169 = (7848 + ($168<<1)|0);
   $170 = ((($169)) + 1|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $j;
   $173 = $172<<2;
   $174 = (($173) + 1)|0;
   $175 = (($tmp) + ($174)|0);
   HEAP8[$175>>0] = $171;
   $176 = $ins;
   $177 = $176&255;
   $178 = $177 << 4;
   $179 = $178 & 240;
   $180 = $fxt;
   $181 = $180&255;
   $182 = $179 | $181;
   $183 = $182&255;
   $184 = $j;
   $185 = $184<<2;
   $186 = (($185) + 2)|0;
   $187 = (($tmp) + ($186)|0);
   HEAP8[$187>>0] = $183;
   $188 = $fxp;
   $189 = $j;
   $190 = $189<<2;
   $191 = (($190) + 3)|0;
   $192 = (($tmp) + ($191)|0);
   HEAP8[$192>>0] = $188;
   $193 = $j;
   $194 = (($193) + 1)|0;
   $j = $194;
  }
  $195 = $1;
  (_fwrite(($tmp|0),1024,1,($195|0))|0);
  $196 = $i;
  $197 = (($196) + 1)|0;
  $i = $197;
 }
 $198 = $1;
 $199 = $0;
 $200 = $ssize;
 (_pw_move_data($198,$199,$200)|0);
 STACKTOP = sp;return 0;
}
function _test_unic_noid($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $max_ins = 0, $psize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 do {
  if ($5) {
   $6 = $3;
   $7 = (1084 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 1080|0);
   $10 = (_readmem32b($9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $0 = -1;
    break;
   }
   $12 = $1;
   $13 = (_check_instruments($12)|0);
   $max_ins = $13;
   $14 = $max_ins;
   $15 = ($14|0)<(0);
   if ($15) {
    $0 = -1;
    break;
   }
   $16 = $1;
   $17 = (_check_pattern_list_size($16)|0);
   $psize = $17;
   $18 = $psize;
   $19 = ($18|0)<(0);
   if ($19) {
    $0 = -1;
    break;
   }
   $20 = $1;
   $21 = $3;
   $22 = $psize;
   $23 = $max_ins;
   $24 = (_check_pattern($20,$21,$22,$23,1080)|0);
   $25 = ($24|0)<(0);
   if ($25) {
    $0 = -1;
    break;
   }
   $i = 0;
   while(1) {
    $26 = $i;
    $27 = ($26|0)<(20);
    if (!($27)) {
     label = 18;
     break;
    }
    $28 = $i;
    $29 = $1;
    $30 = (($29) + ($28)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)!=(0);
    if ($33) {
     $34 = $i;
     $35 = $1;
     $36 = (($35) + ($34)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = ($38|0)<(32);
     if ($39) {
      label = 16;
      break;
     }
    }
    $40 = $i;
    $41 = $1;
    $42 = (($41) + ($40)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = ($44|0)>(180);
    if ($45) {
     label = 16;
     break;
    }
    $46 = $i;
    $47 = (($46) + 1)|0;
    $i = $47;
   }
   if ((label|0) == 16) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 18) {
    $48 = $1;
    $49 = $2;
    _pw_read_title($48,$49,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _test_unic_emptyid($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max_ins = 0, $psize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 do {
  if ($5) {
   $6 = $3;
   $7 = (1084 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 1080|0);
   $10 = (_readmem32b($9)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $0 = -1;
    break;
   }
   $12 = $1;
   $13 = (_check_instruments($12)|0);
   $max_ins = $13;
   $14 = $max_ins;
   $15 = ($14|0)<(0);
   if ($15) {
    $0 = -1;
    break;
   }
   $16 = $1;
   $17 = (_check_pattern_list_size($16)|0);
   $psize = $17;
   $18 = $psize;
   $19 = ($18|0)<(0);
   if ($19) {
    $0 = -1;
    break;
   }
   $20 = $1;
   $21 = $3;
   $22 = $psize;
   $23 = $max_ins;
   $24 = (_check_pattern($20,$21,$22,$23,1084)|0);
   $25 = ($24|0)<(0);
   if ($25) {
    $0 = -1;
    break;
   } else {
    $26 = $1;
    $27 = $2;
    _pw_read_title($26,$27,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _check_instruments($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $d = 0, $fine = 0;
 var $i = 0, $len = 0, $lsize = 0, $max_ins = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $ssize = 0;
 $max_ins = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(31);
  if (!($3)) {
   label = 20;
   break;
  }
  $4 = $1;
  $5 = $i;
  $6 = ($5*30)|0;
  $7 = (($4) + ($6)|0);
  $d = $7;
  $8 = $d;
  $9 = ((($8)) + 42|0);
  $10 = (_readmem16b($9)|0);
  $11 = $10&65535;
  $12 = $11 << 1;
  $len = $12;
  $13 = $d;
  $14 = ((($13)) + 46|0);
  $15 = (_readmem16b($14)|0);
  $16 = $15&65535;
  $17 = $16 << 1;
  $start = $17;
  $18 = $d;
  $19 = ((($18)) + 48|0);
  $20 = (_readmem16b($19)|0);
  $21 = $20&65535;
  $22 = $21 << 1;
  $lsize = $22;
  $23 = $len;
  $24 = $ssize;
  $25 = (($24) + ($23))|0;
  $ssize = $25;
  $26 = $lsize;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $len;
   $29 = (($28) + 2)|0;
   $30 = $start;
   $31 = $lsize;
   $32 = (($30) + ($31))|0;
   $33 = ($29|0)<($32|0);
   if ($33) {
    label = 5;
    break;
   }
  }
  $34 = $len;
  $35 = ($34|0)>(65535);
  $36 = $start;
  $37 = ($36|0)>(65535);
  $or$cond = $35 | $37;
  $38 = $lsize;
  $39 = ($38|0)>(65535);
  $or$cond3 = $or$cond | $39;
  if ($or$cond3) {
   label = 7;
   break;
  }
  $40 = $d;
  $41 = ((($40)) + 45|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($43|0)>(64);
  if ($44) {
   label = 9;
   break;
  }
  $45 = $d;
  $46 = ((($45)) + 40|0);
  $47 = (_readmem16b($46)|0);
  $48 = $47&65535;
  $fine = $48;
  $49 = $fine;
  $50 = ($49|0)!=(0);
  $51 = $len;
  $52 = ($51|0)==(0);
  $or$cond5 = $50 & $52;
  if ($or$cond5) {
   label = 12;
   break;
  }
  $53 = $fine;
  $54 = ($53|0)>(8);
  $55 = $fine;
  $56 = ($55|0)<(247);
  $or$cond7 = $54 & $56;
  if ($or$cond7) {
   label = 12;
   break;
  }
  $57 = $start;
  $58 = ($57|0)!=(0);
  $59 = $lsize;
  $60 = ($59|0)<=(2);
  $or$cond9 = $58 & $60;
  if ($or$cond9) {
   label = 14;
   break;
  }
  $61 = $d;
  $62 = ((($61)) + 45|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($64|0)!=(0);
  $66 = $len;
  $67 = ($66|0)==(0);
  $or$cond11 = $65 & $67;
  if ($or$cond11) {
   label = 16;
   break;
  }
  $68 = $len;
  $69 = ($68|0)!=(0);
  if ($69) {
   $70 = $i;
   $71 = (($70) + 1)|0;
   $max_ins = $71;
  }
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 if ((label|0) == 5) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 7) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 9) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 16) {
  $0 = -1;
  $77 = $0;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 20) {
  $74 = $ssize;
  $75 = ($74|0)<=(2);
  if ($75) {
   $0 = -1;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  } else {
   $76 = $max_ins;
   $0 = $76;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 }
 return (0)|0;
}
function _check_pattern_list_size($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $or$cond = 0, $psize = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $1;
 $3 = ((($2)) + 950|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $len = $5;
 $6 = $len;
 $7 = ($6|0)==(0);
 $8 = $len;
 $9 = ($8|0)>(127);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $0 = -1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 $psize = 0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $len;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = (952 + ($13))|0;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $x = $18;
  $19 = $x;
  $20 = ($19|0)>(127);
  if ($20) {
   label = 6;
   break;
  }
  $21 = $x;
  $22 = $psize;
  $23 = ($21|0)>($22|0);
  if ($23) {
   $24 = $x;
   $psize = $24;
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 while(1) {
  $27 = $i;
  $28 = ($27|0)!=(128);
  if (!($28)) {
   label = 14;
   break;
  }
  $29 = $i;
  $30 = (952 + ($29))|0;
  $31 = $1;
  $32 = (($31) + ($30)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = ($34|0)!=(0);
  if ($35) {
   label = 12;
   break;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 if ((label|0) == 12) {
  $0 = -1;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 14) {
  $38 = $psize;
  $39 = (($38) + 1)|0;
  $psize = $39;
  $40 = $psize;
  $41 = $40 << 8;
  $psize = $41;
  $42 = $psize;
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _check_pattern($data,$s,$psize,$max_ins,$offset) {
 $data = $data|0;
 $s = $s|0;
 $psize = $psize|0;
 $max_ins = $max_ins|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $d = 0, $i = 0, $ins = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $s;
 $3 = $psize;
 $4 = $max_ins;
 $5 = $offset;
 $6 = $2;
 $7 = $5;
 $8 = $3;
 $9 = ($8*3)|0;
 $10 = (($7) + ($9))|0;
 $11 = (($10) + 2)|0;
 $12 = ($6|0)<($11|0);
 if ($12) {
  $13 = $5;
  $14 = $3;
  $15 = ($14*3)|0;
  $16 = (($13) + ($15))|0;
  $17 = (($16) + 2)|0;
  $18 = $2;
  $19 = (($17) - ($18))|0;
  $0 = $19;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 $i = 0;
 while(1) {
  $20 = $i;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   label = 21;
   break;
  }
  $23 = $1;
  $24 = $5;
  $25 = (($23) + ($24)|0);
  $26 = $i;
  $27 = ($26*3)|0;
  $28 = (($25) + ($27)|0);
  $d = $28;
  $29 = $d;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)>(116);
  if ($32) {
   label = 6;
   break;
  }
  $33 = $d;
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 & 63;
  $37 = ($36|0)>(36);
  if ($37) {
   label = 8;
   break;
  }
  $38 = $d;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 & 15;
  $43 = ($42|0)==(12);
  if ($43) {
   $44 = $d;
   $45 = ((($44)) + 2|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ($47|0)>(64);
   if ($48) {
    label = 11;
    break;
   }
  }
  $49 = $d;
  $50 = ((($49)) + 1|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $52 & 15;
  $54 = ($53|0)==(11);
  if ($54) {
   $55 = $d;
   $56 = ((($55)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = ($58|0)>(127);
   if ($59) {
    label = 14;
    break;
   }
  }
  $60 = $d;
  $61 = ((($60)) + 1|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $63 & 15;
  $65 = ($64|0)==(13);
  if ($65) {
   $66 = $d;
   $67 = ((($66)) + 2|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = ($69|0)>(64);
   if ($70) {
    label = 17;
    break;
   }
  }
  $71 = $d;
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 >> 2;
  $75 = $74 & 48;
  $76 = $d;
  $77 = ((($76)) + 2|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79 >> 4;
  $81 = $80 & 15;
  $82 = $75 | $81;
  $ins = $82;
  $83 = $ins;
  $84 = $4;
  $85 = ($83|0)>($84|0);
  if ($85) {
   label = 19;
   break;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 if ((label|0) == 6) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 11) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 17) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 19) {
  $0 = -1;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 else if ((label|0) == 21) {
  $0 = 0;
  $88 = $0;
  STACKTOP = sp;return ($88|0);
 }
 return (0)|0;
}
function _test_unic2($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $d1 = 0, $i = 0;
 var $ins = 0, $len = 0, $lsize = 0, $max_ins = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $psize = 0, $size = 0, $ssize = 0, $start = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 if ($5) {
  $6 = $3;
  $7 = (1084 - ($6))|0;
  $0 = $7;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1080|0);
 $10 = (_readmem32b($9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 $ssize = 0;
 $max_ins = 0;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(31);
  if (!($13)) {
   label = 20;
   break;
  }
  $14 = $1;
  $15 = $i;
  $16 = ($15*30)|0;
  $17 = (($14) + ($16)|0);
  $d = $17;
  $18 = $d;
  $19 = ((($18)) + 22|0);
  $20 = (_readmem16b($19)|0);
  $21 = $20&65535;
  $22 = $21 << 1;
  $size = $22;
  $23 = $d;
  $24 = ((($23)) + 26|0);
  $25 = (_readmem16b($24)|0);
  $26 = $25&65535;
  $27 = $26 << 1;
  $start = $27;
  $28 = $d;
  $29 = ((($28)) + 28|0);
  $30 = (_readmem16b($29)|0);
  $31 = $30&65535;
  $32 = $31 << 1;
  $lsize = $32;
  $33 = $size;
  $34 = $ssize;
  $35 = (($34) + ($33))|0;
  $ssize = $35;
  $36 = $size;
  $37 = (($36) + 2)|0;
  $38 = $start;
  $39 = $lsize;
  $40 = (($38) + ($39))|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   label = 8;
   break;
  }
  $42 = $size;
  $43 = ($42|0)>(65535);
  $44 = $start;
  $45 = ($44|0)>(65535);
  $or$cond = $43 | $45;
  $46 = $lsize;
  $47 = ($46|0)>(65535);
  $or$cond3 = $or$cond | $47;
  if ($or$cond3) {
   label = 10;
   break;
  }
  $48 = $d;
  $49 = ((($48)) + 25|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = ($51|0)>(64);
  if ($52) {
   label = 12;
   break;
  }
  $53 = $d;
  $54 = ((($53)) + 20|0);
  $55 = (_readmem16b($54)|0);
  $56 = $55&65535;
  $57 = ($56|0)!=(0);
  $58 = $size;
  $59 = ($58|0)==(0);
  $or$cond5 = $57 & $59;
  if ($or$cond5) {
   label = 14;
   break;
  }
  $60 = $d;
  $61 = ((($60)) + 25|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)!=(0);
  $65 = $size;
  $66 = ($65|0)==(0);
  $or$cond7 = $64 & $66;
  if ($or$cond7) {
   label = 16;
   break;
  }
  $67 = $size;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $i;
   $70 = (($69) + 1)|0;
   $max_ins = $70;
  }
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 14) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 16) {
  $0 = -1;
  $196 = $0;
  STACKTOP = sp;return ($196|0);
 }
 else if ((label|0) == 20) {
  $73 = $ssize;
  $74 = ($73|0)<=(2);
  if ($74) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  $75 = $1;
  $76 = ((($75)) + 930|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $len = $78;
  $79 = $len;
  $80 = ($79|0)==(0);
  $81 = $len;
  $82 = ($81|0)>(127);
  $or$cond9 = $80 | $82;
  if ($or$cond9) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  $psize = 0;
  $i = 0;
  while(1) {
   $83 = $i;
   $84 = $len;
   $85 = ($83|0)<($84|0);
   $86 = $i;
   if (!($85)) {
    break;
   }
   $87 = (932 + ($86))|0;
   $88 = $1;
   $89 = (($88) + ($87)|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $x = $91;
   $92 = $x;
   $93 = ($92|0)>(127);
   if ($93) {
    label = 27;
    break;
   }
   $94 = $x;
   $95 = $psize;
   $96 = ($94|0)>($95|0);
   if ($96) {
    $97 = $x;
    $psize = $97;
   }
   $98 = $i;
   $99 = (($98) + 1)|0;
   $i = $99;
  }
  if ((label|0) == 27) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  $100 = (($86) + 2)|0;
  $i = $100;
  while(1) {
   $101 = $i;
   $102 = ($101|0)!=(128);
   if (!($102)) {
    break;
   }
   $103 = $i;
   $104 = (932 + ($103))|0;
   $105 = $1;
   $106 = (($105) + ($104)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = ($108|0)!=(0);
   if ($109) {
    label = 34;
    break;
   }
   $110 = $i;
   $111 = (($110) + 1)|0;
   $i = $111;
  }
  if ((label|0) == 34) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  $112 = $psize;
  $113 = (($112) + 1)|0;
  $psize = $113;
  $114 = $psize;
  $115 = $114 << 8;
  $psize = $115;
  $116 = $3;
  $117 = $psize;
  $118 = ($117*3)|0;
  $119 = (1060 + ($118))|0;
  $120 = (($119) + 2)|0;
  $121 = ($116|0)<($120|0);
  if ($121) {
   $122 = $psize;
   $123 = ($122*3)|0;
   $124 = (1060 + ($123))|0;
   $125 = (($124) + 2)|0;
   $126 = $3;
   $127 = (($125) - ($126))|0;
   $0 = $127;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  $i = 0;
  while(1) {
   $128 = $i;
   $129 = $psize;
   $130 = ($128|0)<($129|0);
   if (!($130)) {
    label = 56;
    break;
   }
   $131 = $1;
   $132 = ((($131)) + 1060|0);
   $133 = $i;
   $134 = ($133*3)|0;
   $135 = (($132) + ($134)|0);
   $d1 = $135;
   $136 = $d1;
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = ($138|0)>(116);
   if ($139) {
    label = 41;
    break;
   }
   $140 = $d1;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = $142 & 63;
   $144 = ($143|0)>(36);
   if ($144) {
    label = 43;
    break;
   }
   $145 = $d1;
   $146 = ((($145)) + 1|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = $148 & 15;
   $150 = ($149|0)==(12);
   if ($150) {
    $151 = $d1;
    $152 = ((($151)) + 2|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = ($154|0)>(64);
    if ($155) {
     label = 46;
     break;
    }
   }
   $156 = $d1;
   $157 = ((($156)) + 1|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = $159 & 15;
   $161 = ($160|0)==(11);
   if ($161) {
    $162 = $d1;
    $163 = ((($162)) + 2|0);
    $164 = HEAP8[$163>>0]|0;
    $165 = $164&255;
    $166 = ($165|0)>(127);
    if ($166) {
     label = 49;
     break;
    }
   }
   $167 = $d1;
   $168 = ((($167)) + 1|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = $170 & 15;
   $172 = ($171|0)==(13);
   if ($172) {
    $173 = $d1;
    $174 = ((($173)) + 2|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175&255;
    $177 = ($176|0)>(64);
    if ($177) {
     label = 52;
     break;
    }
   }
   $178 = $d1;
   $179 = HEAP8[$178>>0]|0;
   $180 = $179&255;
   $181 = $180 >> 2;
   $182 = $181 & 48;
   $183 = $d1;
   $184 = ((($183)) + 2|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185&255;
   $187 = $186 >> 4;
   $188 = $187 & 15;
   $189 = $182 | $188;
   $ins = $189;
   $190 = $ins;
   $191 = $max_ins;
   $192 = ($190|0)>($191|0);
   if ($192) {
    label = 54;
    break;
   }
   $193 = $i;
   $194 = (($193) + 1)|0;
   $i = $194;
  }
  if ((label|0) == 41) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  else if ((label|0) == 43) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  else if ((label|0) == 46) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  else if ((label|0) == 49) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  else if ((label|0) == 52) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  else if ((label|0) == 54) {
   $0 = -1;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
  else if ((label|0) == 56) {
   $195 = $2;
   _pw_read_title(0,$195,0);
   $0 = 0;
   $196 = $0;
   STACKTOP = sp;return ($196|0);
  }
 }
 return (0)|0;
}
function _depack_unic2($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $fine = 0, $fxp = 0, $fxt = 0;
 var $i = 0, $ins = 0, $j = 0, $len = 0, $lsize = 0, $maxpat = 0, $note = 0, $npat = 0, $or$cond = 0, $ssize = 0, $start = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $ssize = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  $5 = $1;
  $6 = $0;
  if (!($4)) {
   break;
  }
  (_pw_move_data($5,$6,20)|0);
  $7 = $1;
  _write8($7,0);
  $8 = $1;
  _write8($8,0);
  $9 = $0;
  $10 = (_hio_read8($9)|0);
  $c1 = $10;
  $11 = $0;
  $12 = (_hio_read8($11)|0);
  $c2 = $12;
  $13 = $c1;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = $c2;
  $17 = $16&255;
  $18 = (($15) + ($17))|0;
  $j = $18;
  $19 = $j;
  $20 = ($19|0)!=(0);
  do {
   if ($20) {
    $21 = $j;
    $22 = ($21|0)<(256);
    $23 = $c2;
    $24 = $23&255;
    if ($22) {
     $25 = (16 - ($24))|0;
     $26 = $25&255;
     $fine = $26;
     break;
    } else {
     $27 = (256 - ($24))|0;
     $28 = $27&255;
     $fine = $28;
     break;
    }
   } else {
    $fine = 0;
   }
  } while(0);
  $29 = $0;
  $30 = (_hio_read16b($29)|0);
  $31 = $30&65535;
  $len = $31;
  $32 = $1;
  $33 = $len;
  $34 = $33&65535;
  _write16b($32,$34);
  $35 = $len;
  $36 = $35 << 1;
  $37 = $ssize;
  $38 = (($37) + ($36))|0;
  $ssize = $38;
  $39 = $0;
  (_hio_read8($39)|0);
  $40 = $1;
  $41 = $fine;
  _write8($40,$41);
  $42 = $1;
  $43 = $0;
  $44 = (_hio_read8($43)|0);
  _write8($42,$44);
  $45 = $0;
  $46 = (_hio_read16b($45)|0);
  $47 = $46&65535;
  $start = $47;
  $48 = $0;
  $49 = (_hio_read16b($48)|0);
  $50 = $49&65535;
  $lsize = $50;
  $51 = $start;
  $52 = $51<<1;
  $53 = $lsize;
  $54 = (($52) + ($53))|0;
  $55 = $len;
  $56 = ($54|0)<=($55|0);
  $57 = $start;
  $58 = ($57|0)!=(0);
  $or$cond = $56 & $58;
  if ($or$cond) {
   $59 = $start;
   $60 = $59 << 1;
   $start = $60;
  }
  $61 = $1;
  $62 = $start;
  $63 = $62&65535;
  _write16b($61,$63);
  $64 = $1;
  $65 = $lsize;
  $66 = $65&65535;
  _write16b($64,$66);
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $69 = (_hio_read8($6)|0);
 $npat = $69;
 _write8($5,$69);
 $70 = $1;
 _write8($70,127);
 $71 = $0;
 (_hio_read8($71)|0);
 $72 = $0;
 (_hio_read($tmp,128,1,$72)|0);
 $73 = $1;
 (_fwrite(($tmp|0),128,1,($73|0))|0);
 $i = 0;
 $maxpat = 0;
 while(1) {
  $74 = $i;
  $75 = ($74|0)<(128);
  if (!($75)) {
   break;
  }
  $76 = $i;
  $77 = (($tmp) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $maxpat;
  $81 = $80&255;
  $82 = ($79|0)>($81|0);
  if ($82) {
   $83 = $i;
   $84 = (($tmp) + ($83)|0);
   $85 = HEAP8[$84>>0]|0;
   $maxpat = $85;
  }
  $86 = $i;
  $87 = (($86) + 1)|0;
  $i = $87;
 }
 $88 = $maxpat;
 $89 = (($88) + 1)<<24>>24;
 $maxpat = $89;
 $90 = $1;
 _write32b($90,1294879534);
 $i = 0;
 while(1) {
  $91 = $i;
  $92 = $maxpat;
  $93 = $92&255;
  $94 = ($91|0)<($93|0);
  if (!($94)) {
   break;
  }
  $j = 0;
  while(1) {
   $95 = $j;
   $96 = ($95|0)<(256);
   if (!($96)) {
    break;
   }
   $97 = $0;
   $98 = (_hio_read8($97)|0);
   $c1 = $98;
   $99 = $0;
   $100 = (_hio_read8($99)|0);
   $c2 = $100;
   $101 = $0;
   $102 = (_hio_read8($101)|0);
   $c3 = $102;
   $103 = $c1;
   $104 = $103&255;
   $105 = $104 >> 2;
   $106 = $105 & 16;
   $107 = $c2;
   $108 = $107&255;
   $109 = $108 >> 4;
   $110 = $109 & 15;
   $111 = $106 | $110;
   $112 = $111&255;
   $ins = $112;
   $113 = $c1;
   $114 = $113&255;
   $115 = $114 & 63;
   $116 = $115&255;
   $note = $116;
   $117 = $c2;
   $118 = $117&255;
   $119 = $118 & 15;
   $120 = $119&255;
   $fxt = $120;
   $121 = $c3;
   $fxp = $121;
   $122 = $fxt;
   $123 = $122&255;
   $124 = ($123|0)==(13);
   if ($124) {
    $125 = $fxp;
    $126 = $125&255;
    $127 = (($126|0) % 10)&-1;
    $128 = $127&255;
    $c4 = $128;
    $129 = $fxp;
    $130 = $129&255;
    $131 = (($130|0) / 10)&-1;
    $132 = $131&255;
    $c3 = $132;
    $133 = $c3;
    $134 = $133&255;
    $135 = $134<<4;
    $136 = $c4;
    $137 = $136&255;
    $138 = (($135) + ($137))|0;
    $139 = $138&255;
    $fxp = $139;
   }
   $140 = $ins;
   $141 = $140&255;
   $142 = $141 & 240;
   $143 = $142&255;
   $144 = $j;
   $145 = $144<<2;
   $146 = (($tmp) + ($145)|0);
   HEAP8[$146>>0] = $143;
   $147 = $note;
   $148 = $147&255;
   $149 = (7848 + ($148<<1)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = $j;
   $153 = $152<<2;
   $154 = (($tmp) + ($153)|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = $156 | $151;
   $158 = $157&255;
   HEAP8[$154>>0] = $158;
   $159 = $note;
   $160 = $159&255;
   $161 = (7848 + ($160<<1)|0);
   $162 = ((($161)) + 1|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $j;
   $165 = $164<<2;
   $166 = (($165) + 1)|0;
   $167 = (($tmp) + ($166)|0);
   HEAP8[$167>>0] = $163;
   $168 = $ins;
   $169 = $168&255;
   $170 = $169 << 4;
   $171 = $170 & 240;
   $172 = $fxt;
   $173 = $172&255;
   $174 = $171 | $173;
   $175 = $174&255;
   $176 = $j;
   $177 = $176<<2;
   $178 = (($177) + 2)|0;
   $179 = (($tmp) + ($178)|0);
   HEAP8[$179>>0] = $175;
   $180 = $fxp;
   $181 = $j;
   $182 = $181<<2;
   $183 = (($182) + 3)|0;
   $184 = (($tmp) + ($183)|0);
   HEAP8[$184>>0] = $180;
   $185 = $j;
   $186 = (($185) + 1)|0;
   $j = $186;
  }
  $187 = $1;
  (_fwrite(($tmp|0),1024,1,($187|0))|0);
  $188 = $i;
  $189 = (($188) + 1)|0;
  $i = $189;
 }
 $190 = $1;
 $191 = $0;
 $192 = $ssize;
 (_pw_move_data($190,$191,$192)|0);
 STACKTOP = sp;return 0;
}
function _test_wn($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1082);
 do {
  if ($5) {
   $6 = $3;
   $7 = (1082 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 1080|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)!=(87);
   if (!($12)) {
    $13 = $1;
    $14 = ((($13)) + 1081|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ($16|0)!=(78);
    if (!($17)) {
     $18 = $1;
     $19 = ((($18)) + 951|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&255;
     $22 = ($21|0)!=(127);
     if ($22) {
      $0 = -1;
      break;
     }
     $23 = $1;
     $24 = ((($23)) + 950|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = ($26|0)>(127);
     if ($27) {
      $0 = -1;
      break;
     } else {
      $28 = $1;
      $29 = $2;
      _pw_read_title($28,$29,20);
      $0 = 0;
      break;
     }
    }
   }
   $0 = -1;
  }
 } while(0);
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _depack_wn($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0;
 var $max = 0, $npat = 0, $ssize = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $1;
 $3 = $0;
 (_pw_move_data($2,$3,950)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $0;
  if (!($5)) {
   break;
  }
  $7 = $i;
  $8 = ($7*30)|0;
  $9 = (42 + ($8))|0;
  (_hio_seek($6,$9,0)|0);
  $10 = $0;
  $11 = (_hio_read16b($10)|0);
  $12 = $11&65535;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 (_hio_seek($6,950,0)|0);
 $18 = $1;
 $19 = $0;
 $20 = (_hio_read8($19)|0);
 $npat = $20;
 _write8($18,$20);
 $21 = $0;
 (_hio_read($tmp,129,1,$21)|0);
 $22 = $1;
 (_fwrite(($tmp|0),129,1,($22|0))|0);
 $23 = $1;
 _write32b($23,1294879534);
 $i = 0;
 $max = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(128);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = (($26) + 1)|0;
  $28 = (($tmp) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $max;
  $32 = $31&255;
  $33 = ($30|0)>($32|0);
  if ($33) {
   $34 = $i;
   $35 = (($34) + 1)|0;
   $36 = (($tmp) + ($35)|0);
   $37 = HEAP8[$36>>0]|0;
   $max = $37;
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 $40 = $max;
 $41 = (($40) + 1)<<24>>24;
 $max = $41;
 $42 = $0;
 (_hio_seek($42,1084,0)|0);
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = $max;
  $45 = $44&255;
  $46 = ($43|0)<($45|0);
  if (!($46)) {
   break;
  }
  $j = 0;
  while(1) {
   $47 = $j;
   $48 = ($47|0)<(256);
   if (!($48)) {
    break;
   }
   $49 = $0;
   $50 = (_hio_read8($49)|0);
   $c1 = $50;
   $51 = $0;
   $52 = (_hio_read8($51)|0);
   $c2 = $52;
   $53 = $0;
   $54 = (_hio_read8($53)|0);
   $c3 = $54;
   $55 = $0;
   $56 = (_hio_read8($55)|0);
   $c4 = $56;
   $57 = $1;
   $58 = $c1;
   $59 = $58&255;
   $60 = ($59*240)|0;
   $61 = $c1;
   $62 = $61&255;
   $63 = (($62|0) / 2)&-1;
   $64 = (7848 + ($63<<1)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $60 | $66;
   $68 = $67&255;
   _write8($57,$68);
   $69 = $1;
   $70 = $c1;
   $71 = $70&255;
   $72 = (($71|0) / 2)&-1;
   $73 = (7848 + ($72<<1)|0);
   $74 = ((($73)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   _write8($69,$75);
   $76 = $1;
   $77 = $c2;
   $78 = $77&255;
   $79 = $78 << 4;
   $80 = $79 & 240;
   $81 = $c3;
   $82 = $81&255;
   $83 = $80 | $82;
   $84 = $83&255;
   _write8($76,$84);
   $85 = $1;
   $86 = $c4;
   _write8($85,$86);
   $87 = $j;
   $88 = (($87) + 1)|0;
   $j = $88;
  }
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 $91 = $1;
 $92 = $0;
 $93 = $ssize;
 (_pw_move_data($91,$92,$93)|0);
 STACKTOP = sp;return 0;
}
function _test_zen($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $d = 0, $i = 0, $len = 0;
 var $lsize = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $pat_ofs = 0, $sdata = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(505);
 if ($5) {
  $6 = $3;
  $7 = (505 - ($6))|0;
  $0 = $7;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 $8 = $1;
 $9 = (_readmem32b($8)|0);
 $pat_ofs = $9;
 $10 = $pat_ofs;
 $11 = ($10|0)<(502);
 $12 = $pat_ofs;
 $13 = ($12|0)>(2163190);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $0 = -1;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ($14|0)<(31);
  if (!($15)) {
   label = 12;
   break;
  }
  $16 = $1;
  $17 = $i;
  $18 = $17<<4;
  $19 = (($16) + ($18)|0);
  $d = $19;
  $20 = $d;
  $21 = ((($20)) + 9|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)>(64);
  if ($24) {
   label = 8;
   break;
  }
  $25 = $d;
  $26 = ((($25)) + 6|0);
  $27 = (_readmem16b($26)|0);
  $28 = $27&65535;
  $29 = (($28|0) % 72)&-1;
  $30 = ($29|0)!=(0);
  if ($30) {
   label = 10;
   break;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 else if ((label|0) == 12) {
  $i = 0;
  while(1) {
   $33 = $i;
   $34 = ($33|0)<(31);
   $35 = $1;
   if (!($34)) {
    label = 19;
    break;
   }
   $36 = ((($35)) + 10|0);
   $37 = $i;
   $38 = $37<<4;
   $39 = (($36) + ($38)|0);
   $40 = (_readmem16b($39)|0);
   $41 = $40&65535;
   $42 = $41 << 1;
   $size = $42;
   $43 = $1;
   $44 = ((($43)) + 12|0);
   $45 = $i;
   $46 = $45<<4;
   $47 = (($44) + ($46)|0);
   $48 = (_readmem16b($47)|0);
   $49 = $48&65535;
   $50 = $49 << 1;
   $lsize = $50;
   $51 = $1;
   $52 = ((($51)) + 14|0);
   $53 = $i;
   $54 = $53<<4;
   $55 = (($52) + ($54)|0);
   $56 = (_readmem32b($55)|0);
   $sdata = $56;
   $57 = $size;
   $58 = ($57|0)>(65535);
   $59 = $lsize;
   $60 = ($59|0)>(65535);
   $or$cond3 = $58 | $60;
   if ($or$cond3) {
    label = 15;
    break;
   }
   $61 = $sdata;
   $62 = $pat_ofs;
   $63 = ($61|0)<($62|0);
   if ($63) {
    label = 17;
    break;
   }
   $64 = $i;
   $65 = (($64) + 1)|0;
   $i = $65;
  }
  if ((label|0) == 15) {
   $0 = -1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  }
  else if ((label|0) == 17) {
   $0 = -1;
   $96 = $0;
   STACKTOP = sp;return ($96|0);
  }
  else if ((label|0) == 19) {
   $66 = ((($35)) + 5|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $len = $68;
   $69 = $len;
   $70 = ($69|0)==(0);
   $71 = $len;
   $72 = ($71|0)>(127);
   $or$cond5 = $70 | $72;
   if ($or$cond5) {
    $0 = -1;
    $96 = $0;
    STACKTOP = sp;return ($96|0);
   }
   $73 = $3;
   $74 = $pat_ofs;
   $75 = $len;
   $76 = $75<<2;
   $77 = (($74) + ($76))|0;
   $78 = (($77) + 4)|0;
   $79 = ($73|0)<($78|0);
   if ($79) {
    $80 = $pat_ofs;
    $81 = $len;
    $82 = $81<<2;
    $83 = (($80) + ($82))|0;
    $84 = (($83) + 4)|0;
    $85 = $3;
    $86 = (($84) - ($85))|0;
    $0 = $86;
    $96 = $0;
    STACKTOP = sp;return ($96|0);
   }
   $87 = $1;
   $88 = $pat_ofs;
   $89 = (($87) + ($88)|0);
   $90 = $len;
   $91 = $90<<2;
   $92 = (($89) + ($91)|0);
   $93 = (_readmem32b($92)|0);
   $94 = ($93|0)!=(-1);
   if ($94) {
    $0 = -1;
    $96 = $0;
    STACKTOP = sp;return ($96|0);
   } else {
    $95 = $2;
    _pw_read_title(0,$95,0);
    $0 = 0;
    $96 = $0;
    STACKTOP = sp;return ($96|0);
   }
  }
 }
 return (0)|0;
}
function _depack_zen($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $finetune = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0;
 var $note = 0, $paddr = 0, $paddr_Real = 0, $pat = 0, $pat_max = 0, $pat_pos = 0, $ptable = 0, $ptable_addr = 0, $sdata_addr = 0, $size = 0, $ssize = 0, $vol = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pat = sp + 1192|0;
 $ptable = sp + 1064|0;
 $paddr = sp + 536|0;
 $paddr_Real = sp + 24|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $sdata_addr = 999999;
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr_Real|0),0,512)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = (_hio_read32b($2)|0);
 $ptable_addr = $3;
 $4 = $0;
 $5 = (_hio_read8($4)|0);
 $pat_max = $5;
 $6 = $0;
 $7 = (_hio_read8($6)|0);
 $pat_pos = $7;
 $8 = $1;
 (_pw_write_zero($8,20)|0);
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(31);
  $11 = $1;
  if (!($10)) {
   break;
  }
  (_pw_write_zero($11,22)|0);
  $12 = $0;
  $13 = (_hio_read16b($12)|0);
  $14 = $13&65535;
  $15 = (($14|0) / 72)&-1;
  $16 = $15&255;
  $finetune = $16;
  $17 = $0;
  (_hio_read8($17)|0);
  $18 = $0;
  $19 = (_hio_read8($18)|0);
  $vol = $19;
  $20 = $1;
  $21 = $0;
  $22 = (_hio_read16b($21)|0);
  $23 = $22&65535;
  $size = $23;
  $24 = $23&65535;
  _write16b($20,$24);
  $25 = $size;
  $26 = $25<<1;
  $27 = $ssize;
  $28 = (($27) + ($26))|0;
  $ssize = $28;
  $29 = $1;
  $30 = $finetune;
  _write8($29,$30);
  $31 = $1;
  $32 = $vol;
  _write8($31,$32);
  $33 = $0;
  $34 = (_hio_read16b($33)|0);
  $35 = $34&65535;
  $size = $35;
  $36 = $0;
  $37 = (_hio_read32b($36)|0);
  $k = $37;
  $38 = $k;
  $39 = $sdata_addr;
  $40 = ($38|0)<($39|0);
  if ($40) {
   $41 = $k;
   $sdata_addr = $41;
  }
  $42 = $0;
  $43 = (_hio_read32b($42)|0);
  $44 = $k;
  $45 = (($43) - ($44))|0;
  $46 = (($45>>>0) / 2)&-1;
  $j = $46;
  $47 = $1;
  $48 = $j;
  $49 = $48&65535;
  _write16b($47,$49);
  $50 = $1;
  $51 = $size;
  $52 = $51&65535;
  _write16b($50,$52);
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $55 = $pat_pos;
 _write8($11,$55);
 $56 = $1;
 _write8($56,127);
 $57 = $0;
 $58 = $ptable_addr;
 (_hio_seek($57,$58,0)|0);
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = $pat_pos;
  $61 = $60&255;
  $62 = ($59|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $0;
  $64 = (_hio_read32b($63)|0);
  $65 = $i;
  $66 = (($paddr) + ($65<<2)|0);
  HEAP32[$66>>2] = $64;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $c4 = 0;
 $i = 0;
 while(1) {
  $69 = $i;
  $70 = $pat_pos;
  $71 = $70&255;
  $72 = ($69|0)<($71|0);
  if (!($72)) {
   break;
  }
  $73 = $i;
  $74 = ($73|0)==(0);
  if ($74) {
   HEAP8[$ptable>>0] = 0;
   $75 = HEAP32[$paddr>>2]|0;
   HEAP32[$paddr_Real>>2] = $75;
   $76 = $c4;
   $77 = (($76) + 1)<<24>>24;
   $c4 = $77;
  } else {
   $j = 0;
   while(1) {
    $78 = $j;
    $79 = $i;
    $80 = ($78|0)<($79|0);
    if (!($80)) {
     break;
    }
    $81 = $i;
    $82 = (($paddr) + ($81<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $j;
    $85 = (($paddr) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($83|0)==($86|0);
    $88 = $j;
    if ($87) {
     label = 16;
     break;
    }
    $93 = (($88) + 1)|0;
    $j = $93;
   }
   if ((label|0) == 16) {
    label = 0;
    $89 = (($ptable) + ($88)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $i;
    $92 = (($ptable) + ($91)|0);
    HEAP8[$92>>0] = $90;
   }
   $94 = $j;
   $95 = $i;
   $96 = ($94|0)==($95|0);
   if ($96) {
    $97 = $i;
    $98 = (($paddr) + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $c4;
    $101 = $100&255;
    $102 = (($paddr_Real) + ($101<<2)|0);
    HEAP32[$102>>2] = $99;
    $103 = $c4;
    $104 = $i;
    $105 = (($ptable) + ($104)|0);
    HEAP8[$105>>0] = $103;
    $106 = $c4;
    $107 = (($106) + 1)<<24>>24;
    $c4 = $107;
   }
  }
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 $110 = $1;
 (_fwrite(($ptable|0),128,1,($110|0))|0);
 $111 = $1;
 _write32b($111,1294879534);
 $i = 0;
 while(1) {
  $112 = $i;
  $113 = $pat_max;
  $114 = $113&255;
  $115 = ($112|0)<=($114|0);
  if (!($115)) {
   break;
  }
  _memset(($pat|0),0,1024)|0;
  $116 = $0;
  $117 = $i;
  $118 = (($paddr_Real) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  (_hio_seek($116,$119,0)|0);
  $j = 0;
  while(1) {
   $120 = $j;
   $121 = ($120|0)<(256);
   if (!($121)) {
    break;
   }
   $122 = $0;
   $123 = (_hio_read8($122)|0);
   $c1 = $123;
   $124 = $0;
   $125 = (_hio_read8($124)|0);
   $c2 = $125;
   $126 = $0;
   $127 = (_hio_read8($126)|0);
   $c3 = $127;
   $128 = $0;
   $129 = (_hio_read8($128)|0);
   $c4 = $129;
   $130 = $c2;
   $131 = $130&255;
   $132 = $131 & 127;
   $133 = (($132|0) / 2)&-1;
   $134 = $133&255;
   $note = $134;
   $135 = $c4;
   $fxp = $135;
   $136 = $c2;
   $137 = $136&255;
   $138 = $137 << 4;
   $139 = $138 & 16;
   $140 = $c3;
   $141 = $140&255;
   $142 = $141 >> 4;
   $143 = $142 & 15;
   $144 = $139 | $143;
   $145 = $144&255;
   $ins = $145;
   $146 = $c3;
   $147 = $146&255;
   $148 = $147 & 15;
   $149 = $148&255;
   $fxt = $149;
   $150 = $c1;
   $151 = $150&255;
   $k = $151;
   $152 = $ins;
   $153 = $152&255;
   $154 = $153 & 240;
   $155 = $154&255;
   $156 = $k;
   $157 = $156<<2;
   $158 = (($pat) + ($157)|0);
   HEAP8[$158>>0] = $155;
   $159 = $note;
   $160 = $159&255;
   $161 = (7848 + ($160<<1)|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = $k;
   $165 = $164<<2;
   $166 = (($pat) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = $168 | $163;
   $170 = $169&255;
   HEAP8[$166>>0] = $170;
   $171 = $note;
   $172 = $171&255;
   $173 = (7848 + ($172<<1)|0);
   $174 = ((($173)) + 1|0);
   $175 = HEAP8[$174>>0]|0;
   $176 = $k;
   $177 = $176<<2;
   $178 = (($177) + 1)|0;
   $179 = (($pat) + ($178)|0);
   HEAP8[$179>>0] = $175;
   $180 = $fxt;
   $181 = $180&255;
   $182 = $ins;
   $183 = $182&255;
   $184 = $183 << 4;
   $185 = $184 & 240;
   $186 = $181 | $185;
   $187 = $186&255;
   $188 = $k;
   $189 = $188<<2;
   $190 = (($189) + 2)|0;
   $191 = (($pat) + ($190)|0);
   HEAP8[$191>>0] = $187;
   $192 = $fxp;
   $193 = $k;
   $194 = $193<<2;
   $195 = (($194) + 3)|0;
   $196 = (($pat) + ($195)|0);
   HEAP8[$196>>0] = $192;
   $197 = $c1;
   $198 = $197&255;
   $j = $198;
   $199 = $j;
   $200 = (($199) + 1)|0;
   $j = $200;
  }
  $201 = $1;
  (_fwrite(($pat|0),1024,1,($201|0))|0);
  $202 = $i;
  $203 = (($202) + 1)|0;
  $i = $203;
 }
 $204 = $0;
 $205 = $sdata_addr;
 (_hio_seek($204,$205,0)|0);
 $206 = $1;
 $207 = $0;
 $208 = $ssize;
 (_pw_move_data($206,$207,$208)|0);
 STACKTOP = sp;return 0;
}
function _test_tp3($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $d = 0, $d1 = 0, $i = 0, $len = 0, $lsize = 0, $nins = 0, $npat = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1024);
 if ($5) {
  $6 = $3;
  $7 = (1024 - ($6))|0;
  $0 = $7;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $8 = $1;
 $9 = (_memcmp($8,10280,8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = -1;
  $100 = $0;
  STACKTOP = sp;return ($100|0);
 }
 $11 = $1;
 $12 = ((($11)) + 28|0);
 $13 = (_readmem16b($12)|0);
 $14 = $13&65535;
 $nins = $14;
 $15 = $nins;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = $nins;
  $18 = $17 & 7;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   $20 = $nins;
   $21 = $20 >> 3;
   $nins = $21;
   $i = 0;
   while(1) {
    $22 = $i;
    $23 = $nins;
    $24 = ($22|0)<($23|0);
    if (!($24)) {
     label = 15;
     break;
    }
    $25 = $1;
    $26 = $i;
    $27 = $26<<3;
    $28 = (($25) + ($27)|0);
    $d = $28;
    $29 = $d;
    $30 = ((($29)) + 30|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)>(15);
    if ($33) {
     label = 11;
     break;
    }
    $34 = $d;
    $35 = ((($34)) + 31|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = ($37|0)>(64);
    if ($38) {
     label = 13;
     break;
    }
    $39 = $i;
    $40 = (($39) + 1)|0;
    $i = $40;
   }
   if ((label|0) == 11) {
    $0 = -1;
    $100 = $0;
    STACKTOP = sp;return ($100|0);
   }
   else if ((label|0) == 13) {
    $0 = -1;
    $100 = $0;
    STACKTOP = sp;return ($100|0);
   }
   else if ((label|0) == 15) {
    $ssize = 0;
    $i = 0;
    while(1) {
     $41 = $i;
     $42 = $nins;
     $43 = ($41|0)<($42|0);
     if (!($43)) {
      label = 24;
      break;
     }
     $44 = $1;
     $45 = $i;
     $46 = $45<<3;
     $47 = (($44) + ($46)|0);
     $d1 = $47;
     $48 = $d1;
     $49 = ((($48)) + 32|0);
     $50 = (_readmem16b($49)|0);
     $51 = $50&65535;
     $52 = $51 << 1;
     $len = $52;
     $53 = $d1;
     $54 = ((($53)) + 34|0);
     $55 = (_readmem16b($54)|0);
     $56 = $55&65535;
     $57 = $56 << 1;
     $start = $57;
     $58 = $d1;
     $59 = ((($58)) + 36|0);
     $60 = (_readmem16b($59)|0);
     $61 = $60&65535;
     $62 = $61 << 1;
     $lsize = $62;
     $63 = $len;
     $64 = ($63|0)>(65535);
     $65 = $start;
     $66 = ($65|0)>(65535);
     $or$cond = $64 | $66;
     $67 = $lsize;
     $68 = ($67|0)>(65535);
     $or$cond3 = $or$cond | $68;
     if ($or$cond3) {
      label = 18;
      break;
     }
     $69 = $start;
     $70 = $lsize;
     $71 = (($69) + ($70))|0;
     $72 = $len;
     $73 = (($72) + 2)|0;
     $74 = ($71|0)>($73|0);
     if ($74) {
      label = 20;
      break;
     }
     $75 = $start;
     $76 = ($75|0)!=(0);
     $77 = $lsize;
     $78 = ($77|0)==(0);
     $or$cond5 = $76 & $78;
     if ($or$cond5) {
      label = 22;
      break;
     }
     $79 = $len;
     $80 = $ssize;
     $81 = (($80) + ($79))|0;
     $ssize = $81;
     $82 = $i;
     $83 = (($82) + 1)|0;
     $i = $83;
    }
    if ((label|0) == 18) {
     $0 = -1;
     $100 = $0;
     STACKTOP = sp;return ($100|0);
    }
    else if ((label|0) == 20) {
     $0 = -1;
     $100 = $0;
     STACKTOP = sp;return ($100|0);
    }
    else if ((label|0) == 22) {
     $0 = -1;
     $100 = $0;
     STACKTOP = sp;return ($100|0);
    }
    else if ((label|0) == 24) {
     $84 = $ssize;
     $85 = ($84|0)<=(4);
     if ($85) {
      $0 = -1;
      $100 = $0;
      STACKTOP = sp;return ($100|0);
     }
     $86 = $nins;
     $87 = $86<<3;
     $88 = (($87) + 31)|0;
     $89 = $1;
     $90 = (($89) + ($88)|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $npat = $92;
     $93 = $npat;
     $94 = ($93|0)==(0);
     $95 = $npat;
     $96 = ($95|0)>(128);
     $or$cond7 = $94 | $96;
     if ($or$cond7) {
      $0 = -1;
      $100 = $0;
      STACKTOP = sp;return ($100|0);
     } else {
      $97 = $1;
      $98 = ((($97)) + 8|0);
      $99 = $2;
      _pw_read_title($98,$99,20);
      $0 = 0;
      $100 = $0;
      STACKTOP = sp;return ($100|0);
     }
    }
   }
  }
 }
 $0 = -1;
 $100 = $0;
 STACKTOP = sp;return ($100|0);
}
function _depack_tp3($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $len = 0, $max_trk_ofs = 0, $nins = 0, $note = 0, $npat = 0, $p = 0, $pat_ofs = 0, $pdata = 0;
 var $pnum = 0, $size = 0, $ssize = 0, $tmp = 0, $trk_ofs = 0, $where = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 3184|0;
 $pdata = sp + 2160|0;
 $tmp = sp + 2104|0;
 $trk_ofs = sp + 40|0;
 $0 = $in;
 $1 = $out;
 $i = 0;
 $j = 0;
 $pat_ofs = 999999;
 $ssize = 0;
 $max_trk_ofs = 0;
 _memset(($trk_ofs|0),0,2048)|0;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 (_hio_seek($2,8,1)|0);
 $3 = $1;
 $4 = $0;
 (_pw_move_data($3,$4,20)|0);
 $5 = $0;
 $6 = (_hio_read16b($5)|0);
 $7 = $6&65535;
 $8 = (($7|0) / 8)&-1;
 $9 = $8&255;
 $nins = $9;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = $nins;
  $12 = $11&255;
  $13 = ($10|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $1;
  (_pw_write_zero($14,22)|0);
  $15 = $0;
  $16 = (_hio_read8($15)|0);
  $c3 = $16;
  $17 = $0;
  $18 = (_hio_read8($17)|0);
  $c4 = $18;
  $19 = $1;
  $20 = $0;
  $21 = (_hio_read16b($20)|0);
  $22 = $21&65535;
  $size = $22;
  $23 = $22&65535;
  _write16b($19,$23);
  $24 = $size;
  $25 = $24<<1;
  $26 = $ssize;
  $27 = (($26) + ($25))|0;
  $ssize = $27;
  $28 = $1;
  $29 = $c3;
  _write8($28,$29);
  $30 = $1;
  $31 = $c4;
  _write8($30,$31);
  $32 = $1;
  $33 = $0;
  $34 = (_hio_read16b($33)|0);
  _write16b($32,$34);
  $35 = $1;
  $36 = $0;
  $37 = (_hio_read16b($36)|0);
  _write16b($35,$37);
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $40 = ((($tmp)) + 29|0);
 HEAP8[$40>>0] = 1;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(31);
  if (!($42)) {
   break;
  }
  $43 = $1;
  (_fwrite(($tmp|0),30,1,($43|0))|0);
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $0;
 (_hio_read8($46)|0);
 $47 = $1;
 $48 = $0;
 $49 = (_hio_read8($48)|0);
 $len = $49;
 _write8($47,$49);
 $50 = $1;
 _write8($50,127);
 $i = 0;
 $npat = 0;
 while(1) {
  $51 = $i;
  $52 = $len;
  $53 = $52&255;
  $54 = ($51|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = $0;
  $56 = (_hio_read16b($55)|0);
  $57 = $56&65535;
  $58 = (($57|0) / 8)&-1;
  $59 = $58&255;
  $60 = $i;
  $61 = (($pnum) + ($60)|0);
  HEAP8[$61>>0] = $59;
  $62 = $i;
  $63 = (($pnum) + ($62)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $npat;
  $67 = $66&255;
  $68 = ($65|0)>($67|0);
  if ($68) {
   $69 = $i;
   $70 = (($pnum) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $npat = $71;
  }
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 $i = 0;
 while(1) {
  $74 = $i;
  $75 = $npat;
  $76 = $75&255;
  $77 = ($74|0)<=($76|0);
  if (!($77)) {
   break;
  }
  $j = 0;
  while(1) {
   $78 = $j;
   $79 = ($78|0)<(4);
   if (!($79)) {
    break;
   }
   $80 = $0;
   $81 = (_hio_read16b($80)|0);
   $82 = $81&65535;
   $83 = $j;
   $84 = $i;
   $85 = (($trk_ofs) + ($84<<4)|0);
   $86 = (($85) + ($83<<2)|0);
   HEAP32[$86>>2] = $82;
   $87 = $j;
   $88 = $i;
   $89 = (($trk_ofs) + ($88<<4)|0);
   $90 = (($89) + ($87<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $max_trk_ofs;
   $93 = ($91|0)>($92|0);
   if ($93) {
    $94 = $j;
    $95 = $i;
    $96 = (($trk_ofs) + ($95<<4)|0);
    $97 = (($96) + ($94<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $max_trk_ofs = $98;
   }
   $99 = $j;
   $100 = (($99) + 1)|0;
   $j = $100;
  }
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 $103 = $1;
 (_fwrite(($pnum|0),128,1,($103|0))|0);
 $104 = $1;
 _write32b($104,1294879534);
 $105 = $0;
 $106 = (_hio_tell($105)|0);
 $107 = (($106) + 2)|0;
 $pat_ofs = $107;
 $i = 0;
 while(1) {
  $108 = $i;
  $109 = $npat;
  $110 = $109&255;
  $111 = ($108|0)<=($110|0);
  if (!($111)) {
   break;
  }
  _memset(($pdata|0),0,1024)|0;
  $j = 0;
  while(1) {
   $112 = $j;
   $113 = ($112|0)<(4);
   if (!($113)) {
    break;
   }
   $114 = $0;
   $115 = $pat_ofs;
   $116 = $j;
   $117 = $i;
   $118 = (($trk_ofs) + ($117<<4)|0);
   $119 = (($118) + ($116<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($115) + ($120))|0;
   (_hio_seek($114,$121,0)|0);
   $k = 0;
   while(1) {
    $122 = $k;
    $123 = ($122|0)<(64);
    if (!($123)) {
     break;
    }
    $124 = $k;
    $125 = $124<<4;
    $126 = (($pdata) + ($125)|0);
    $127 = $j;
    $128 = $127<<2;
    $129 = (($126) + ($128)|0);
    $p = $129;
    $130 = $0;
    $131 = (_hio_read8($130)|0);
    $c1 = $131;
    $132 = $c1;
    $133 = $132&255;
    $134 = $133 & 192;
    $135 = ($134|0)==(192);
    $136 = $c1;
    $137 = $136&255;
    do {
     if ($135) {
      $138 = (256 - ($137))|0;
      $139 = $k;
      $140 = (($139) + ($138))|0;
      $k = $140;
      $141 = $k;
      $142 = (($141) - 1)|0;
      $k = $142;
     } else {
      $143 = $137 & 192;
      $144 = ($143|0)==(128);
      $145 = $0;
      $146 = (_hio_read8($145)|0);
      $c2 = $146;
      if ($144) {
       $147 = $c1;
       $148 = $147&255;
       $149 = $148 >> 1;
       $150 = $149 & 15;
       $151 = $150&255;
       $fxt = $151;
       $152 = $c2;
       $fxp = $152;
       $153 = $fxt;
       $154 = $153&255;
       $155 = ($154|0)==(5);
       if ($155) {
        label = 32;
       } else {
        $156 = $fxt;
        $157 = $156&255;
        $158 = ($157|0)==(6);
        if ($158) {
         label = 32;
        } else {
         $159 = $fxt;
         $160 = $159&255;
         $161 = ($160|0)==(10);
         if ($161) {
          label = 32;
         }
        }
       }
       do {
        if ((label|0) == 32) {
         label = 0;
         $162 = $fxp;
         $163 = $162&255;
         $164 = ($163|0)>(128);
         $165 = $fxp;
         $166 = $165&255;
         if ($164) {
          $167 = (256 - ($166))|0;
          $168 = $167&255;
          $fxp = $168;
          break;
         }
         $169 = ($166|0)<=(128);
         if ($169) {
          $170 = $fxp;
          $171 = $170&255;
          $172 = $171 << 4;
          $173 = $172 & 240;
          $174 = $173&255;
          $fxp = $174;
         }
        }
       } while(0);
       $175 = $fxt;
       $176 = $175&255;
       $177 = ($176|0)==(8);
       if ($177) {
        $fxt = 0;
       }
       $178 = $fxt;
       $179 = $p;
       $180 = ((($179)) + 2|0);
       HEAP8[$180>>0] = $178;
       $181 = $fxp;
       $182 = $p;
       $183 = ((($182)) + 3|0);
       HEAP8[$183>>0] = $181;
       break;
      }
      $184 = $c2;
      $185 = $184&255;
      $186 = $185 >> 4;
      $187 = $186 & 15;
      $188 = $c1;
      $189 = $188&255;
      $190 = $189 >> 2;
      $191 = $190 & 16;
      $192 = $187 | $191;
      $193 = $192&255;
      $ins = $193;
      $194 = $c1;
      $195 = $194&255;
      $196 = $195 & 64;
      $197 = ($196|0)==(64);
      $198 = $c1;
      $199 = $198&255;
      if ($197) {
       $200 = (127 - ($199))|0;
       $201 = $200&255;
       $note = $201;
      } else {
       $202 = $199 & 63;
       $203 = $202&255;
       $note = $203;
      }
      $204 = $c2;
      $205 = $204&255;
      $206 = $205 & 15;
      $207 = $206&255;
      $fxt = $207;
      $208 = $fxt;
      $209 = $208&255;
      $210 = ($209|0)==(0);
      if ($210) {
       $211 = $ins;
       $212 = $211&255;
       $213 = $212 & 240;
       $214 = $213&255;
       $215 = $p;
       HEAP8[$215>>0] = $214;
       $216 = $note;
       $217 = $216&255;
       $218 = (7848 + ($217<<1)|0);
       $219 = HEAP8[$218>>0]|0;
       $220 = $219&255;
       $221 = $p;
       $222 = HEAP8[$221>>0]|0;
       $223 = $222&255;
       $224 = $223 | $220;
       $225 = $224&255;
       HEAP8[$221>>0] = $225;
       $226 = $note;
       $227 = $226&255;
       $228 = (7848 + ($227<<1)|0);
       $229 = ((($228)) + 1|0);
       $230 = HEAP8[$229>>0]|0;
       $231 = $p;
       $232 = ((($231)) + 1|0);
       HEAP8[$232>>0] = $230;
       $233 = $ins;
       $234 = $233&255;
       $235 = $234 << 4;
       $236 = $235 & 240;
       $237 = $236&255;
       $238 = $p;
       $239 = ((($238)) + 2|0);
       HEAP8[$239>>0] = $237;
       break;
      }
      $240 = $0;
      $241 = (_hio_read8($240)|0);
      $c3 = $241;
      $242 = $fxt;
      $243 = $242&255;
      $244 = ($243|0)==(8);
      if ($244) {
       $fxt = 0;
      }
      $245 = $c3;
      $fxp = $245;
      $246 = $fxt;
      $247 = $246&255;
      $248 = ($247|0)==(5);
      if ($248) {
       label = 49;
      } else {
       $249 = $fxt;
       $250 = $249&255;
       $251 = ($250|0)==(6);
       if ($251) {
        label = 49;
       } else {
        $252 = $fxt;
        $253 = $252&255;
        $254 = ($253|0)==(10);
        if ($254) {
         label = 49;
        }
       }
      }
      do {
       if ((label|0) == 49) {
        label = 0;
        $255 = $fxp;
        $256 = $255&255;
        $257 = ($256|0)>(128);
        $258 = $fxp;
        $259 = $258&255;
        if ($257) {
         $260 = (256 - ($259))|0;
         $261 = $260&255;
         $fxp = $261;
         break;
        }
        $262 = ($259|0)<=(128);
        if ($262) {
         $263 = $fxp;
         $264 = $263&255;
         $265 = $264 << 4;
         $266 = $265 & 240;
         $267 = $266&255;
         $fxp = $267;
        }
       }
      } while(0);
      $268 = $ins;
      $269 = $268&255;
      $270 = $269 & 240;
      $271 = $note;
      $272 = $271&255;
      $273 = (7848 + ($272<<1)|0);
      $274 = HEAP8[$273>>0]|0;
      $275 = $274&255;
      $276 = $270 | $275;
      $277 = $276&255;
      $278 = $p;
      HEAP8[$278>>0] = $277;
      $279 = $note;
      $280 = $279&255;
      $281 = (7848 + ($280<<1)|0);
      $282 = ((($281)) + 1|0);
      $283 = HEAP8[$282>>0]|0;
      $284 = $p;
      $285 = ((($284)) + 1|0);
      HEAP8[$285>>0] = $283;
      $286 = $ins;
      $287 = $286&255;
      $288 = $287 << 4;
      $289 = $288 & 240;
      $290 = $fxt;
      $291 = $290&255;
      $292 = $289 | $291;
      $293 = $292&255;
      $294 = $p;
      $295 = ((($294)) + 2|0);
      HEAP8[$295>>0] = $293;
      $296 = $fxp;
      $297 = $p;
      $298 = ((($297)) + 3|0);
      HEAP8[$298>>0] = $296;
     }
    } while(0);
    $299 = $k;
    $300 = (($299) + 1)|0;
    $k = $300;
   }
   $301 = $0;
   $302 = (_hio_tell($301)|0);
   $where = $302;
   $303 = $where;
   $304 = $max_trk_ofs;
   $305 = ($303|0)>($304|0);
   if ($305) {
    $306 = $where;
    $max_trk_ofs = $306;
   }
   $307 = $j;
   $308 = (($307) + 1)|0;
   $j = $308;
  }
  $309 = $1;
  (_fwrite(($pdata|0),1024,1,($309|0))|0);
  $310 = $i;
  $311 = (($310) + 1)|0;
  $i = $311;
 }
 $312 = $max_trk_ofs;
 $313 = $312 & 1;
 $314 = ($313|0)!=(0);
 if (!($314)) {
  $317 = $0;
  $318 = $max_trk_ofs;
  (_hio_seek($317,$318,0)|0);
  $319 = $1;
  $320 = $0;
  $321 = $ssize;
  (_pw_move_data($319,$320,$321)|0);
  STACKTOP = sp;return 0;
 }
 $315 = $max_trk_ofs;
 $316 = (($315) + 1)|0;
 $max_trk_ofs = $316;
 $317 = $0;
 $318 = $max_trk_ofs;
 (_hio_seek($317,$318,0)|0);
 $319 = $1;
 $320 = $0;
 $321 = $ssize;
 (_pw_move_data($319,$320,$321)|0);
 STACKTOP = sp;return 0;
}
function _test_p4x($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $1;
 $5 = (_readmem32b($4)|0);
 $id = $5;
 $6 = $id;
 $7 = ($6|0)!=(1345597505);
 $8 = $id;
 $9 = ($8|0)!=(1345597506);
 $or$cond = $7 & $9;
 $10 = $id;
 $11 = ($10|0)!=(1345597761);
 $or$cond3 = $or$cond & $11;
 if ($or$cond3) {
  $0 = -1;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = $2;
  _pw_read_title(0,$12,0);
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _depack_p4x($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SampleAddress = 0, $SampleSize = 0, $a = 0, $b = 0, $c = 0;
 var $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $i = 0, $id = 0, $ins = 0, $j = 0, $k = 0, $l = 0, $len = 0, $mynote = 0, $note = 0, $npat = 0, $nsmp = 0, $or$cond = 0, $sample = 0, $smp_ofs = 0, $ssize = 0;
 var $tmp = 0, $tr = 0, $track_addr = 0, $trkdat_ofs = 0, $trktab_ofs = 0, $x = 0, $x1 = 0, $y = 0, $y2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 133504|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 132472|0;
 $note = sp + 132464|0;
 $tr = sp + 1392|0;
 $track_addr = sp + 368|0;
 $SampleAddress = sp + 216|0;
 $SampleSize = sp + 92|0;
 $ins = sp + 20|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($track_addr|0),0,1024)|0;
 _memset(($tr|0),0,131072)|0;
 dest=$SampleAddress; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$SampleSize; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = $0;
 $3 = (_hio_read32b($2)|0);
 $id = $3;
 $4 = $0;
 $5 = (_hio_read8($4)|0);
 $npat = $5;
 $6 = $0;
 $7 = (_hio_read8($6)|0);
 $len = $7;
 $8 = $0;
 $9 = (_hio_read8($8)|0);
 $nsmp = $9;
 $10 = $0;
 (_hio_read8($10)|0);
 $11 = $0;
 $12 = (_hio_read32b($11)|0);
 $trkdat_ofs = $12;
 $13 = $0;
 $14 = (_hio_read32b($13)|0);
 $trktab_ofs = $14;
 $15 = $0;
 $16 = (_hio_read32b($15)|0);
 $smp_ofs = $16;
 $17 = $1;
 (_pw_write_zero($17,20)|0);
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = $nsmp;
  $20 = $19&255;
  $21 = ($18|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $0;
  $23 = (_hio_read32b($22)|0);
  $24 = ((($ins)) + 24|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($ins)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $i;
  $28 = (($SampleAddress) + ($27<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = $0;
  $30 = (_hio_read16b($29)|0);
  $31 = ((($ins)) + 28|0);
  HEAP16[$31>>1] = $30;
  $32 = ((($ins)) + 28|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = $34<<1;
  $36 = $i;
  $37 = (($SampleSize) + ($36<<2)|0);
  HEAP32[$37>>2] = $35;
  $38 = $i;
  $39 = (($SampleSize) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $ssize;
  $42 = (($41) + ($40))|0;
  $ssize = $42;
  $43 = $0;
  $44 = (_hio_read32b($43)|0);
  $45 = ((($ins)) + 32|0);
  HEAP32[$45>>2] = $44;
  $46 = $0;
  $47 = (_hio_read16b($46)|0);
  $48 = ((($ins)) + 36|0);
  HEAP16[$48>>1] = $47;
  $49 = ((($ins)) + 38|0);
  HEAP16[$49>>1] = 0;
  $50 = $id;
  $51 = ($50|0)==(1345597505);
  $52 = $id;
  $53 = ($52|0)==(1345597506);
  $or$cond = $51 | $53;
  if ($or$cond) {
   $54 = $0;
   $55 = (_hio_read16b($54)|0);
   $56 = ((($ins)) + 38|0);
   HEAP16[$56>>1] = $55;
  }
  $57 = $0;
  (_hio_read8($57)|0);
  $58 = $0;
  $59 = (_hio_read8($58)|0);
  $60 = ((($ins)) + 40|0);
  HEAP8[$60>>0] = $59;
  $61 = $id;
  $62 = ($61|0)==(1345597761);
  if ($62) {
   $63 = $0;
   $64 = (_hio_read16b($63)|0);
   $65 = ((($ins)) + 38|0);
   HEAP16[$65>>1] = $64;
  }
  $66 = $1;
  (_pw_write_zero($66,22)|0);
  $67 = $1;
  $68 = ((($ins)) + 28|0);
  $69 = HEAP16[$68>>1]|0;
  _write16b($67,$69);
  $70 = $1;
  $71 = ((($ins)) + 38|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = (($73|0) / 74)&-1;
  $75 = $74&255;
  _write8($70,$75);
  $76 = $1;
  $77 = ((($ins)) + 40|0);
  $78 = HEAP8[$77>>0]|0;
  _write8($76,$78);
  $79 = $1;
  $80 = ((($ins)) + 32|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($ins)) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) - ($83))|0;
  $85 = (($84|0) / 2)&-1;
  $86 = $85&65535;
  _write16b($79,$86);
  $87 = $1;
  $88 = ((($ins)) + 36|0);
  $89 = HEAP16[$88>>1]|0;
  _write16b($87,$89);
  $90 = $i;
  $91 = (($90) + 1)|0;
  $i = $91;
 }
 dest=$tmp; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $92 = ((($tmp)) + 29|0);
 HEAP8[$92>>0] = 1;
 while(1) {
  $93 = $i;
  $94 = ($93|0)<(31);
  if (!($94)) {
   break;
  }
  $95 = $1;
  (_fwrite(($tmp|0),30,1,($95|0))|0);
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $98 = $1;
 $99 = $len;
 _write8($98,$99);
 $100 = $1;
 _write8($100,127);
 $101 = $0;
 $102 = $trktab_ofs;
 $103 = (($102) + 4)|0;
 (_hio_seek($101,$103,0)|0);
 $c1 = 0;
 while(1) {
  $104 = $c1;
  $105 = $104&255;
  $106 = $len;
  $107 = $106&255;
  $108 = ($105|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $1;
  $110 = $c1;
  _write8($109,$110);
  $111 = $c1;
  $112 = (($111) + 1)<<24>>24;
  $c1 = $112;
 }
 while(1) {
  $113 = $c1;
  $114 = $113&255;
  $115 = ($114|0)<(128);
  $116 = $1;
  if (!($115)) {
   break;
  }
  _write8($116,0);
  $117 = $c1;
  $118 = (($117) + 1)<<24>>24;
  $c1 = $118;
 }
 _write32b($116,1294879534);
 $i = 0;
 while(1) {
  $119 = $i;
  $120 = $len;
  $121 = $120&255;
  $122 = ($119|0)<($121|0);
  if (!($122)) {
   break;
  }
  $j = 0;
  while(1) {
   $123 = $j;
   $124 = ($123|0)<(4);
   if (!($124)) {
    break;
   }
   $125 = $0;
   $126 = (_hio_read16b($125)|0);
   $127 = $126&65535;
   $128 = $trkdat_ofs;
   $129 = (($127) + ($128))|0;
   $130 = (($129) + 4)|0;
   $131 = $130&65535;
   $132 = $j;
   $133 = $i;
   $134 = (($track_addr) + ($133<<3)|0);
   $135 = (($134) + ($132<<1)|0);
   HEAP16[$135>>1] = $131;
   $136 = $j;
   $137 = (($136) + 1)|0;
   $j = $137;
  }
  $138 = $i;
  $139 = (($138) + 1)|0;
  $i = $139;
 }
 $140 = $0;
 $141 = $trkdat_ofs;
 $142 = (($141) + 4)|0;
 (_hio_seek($140,$142,0)|0);
 $i = 0;
 while(1) {
  $143 = $i;
  $144 = $len;
  $145 = $144&255;
  $146 = ($143|0)<($145|0);
  if (!($146)) {
   break;
  }
  $j = 0;
  while(1) {
   $147 = $j;
   $148 = ($147|0)<(4);
   $149 = $i;
   if (!($148)) {
    break;
   }
   $150 = $149<<2;
   $151 = $j;
   $152 = (($150) + ($151))|0;
   $x = $152;
   $153 = $0;
   $154 = $j;
   $155 = $i;
   $156 = (($track_addr) + ($155<<3)|0);
   $157 = (($156) + ($154<<1)|0);
   $158 = HEAP16[$157>>1]|0;
   $159 = $158 << 16 >> 16;
   (_hio_seek($153,$159,0)|0);
   $k = 0;
   while(1) {
    $160 = $k;
    $161 = ($160|0)<(64);
    if (!($161)) {
     break;
    }
    $162 = $0;
    $163 = (_hio_read8($162)|0);
    $c1 = $163;
    $164 = $0;
    $165 = (_hio_read8($164)|0);
    $c2 = $165;
    $166 = $0;
    $167 = (_hio_read8($166)|0);
    $c3 = $167;
    $168 = $0;
    $169 = (_hio_read8($168)|0);
    $c4 = $169;
    $170 = $c1;
    $171 = $170&255;
    $172 = ($171|0)!=(128);
    if ($172) {
     $173 = $c1;
     $174 = $173&255;
     $175 = $174 << 4;
     $176 = $175 & 16;
     $177 = $c2;
     $178 = $177&255;
     $179 = $178 >> 4;
     $180 = $179 & 15;
     $181 = $176 | $180;
     $182 = $181&255;
     $sample = $182;
     ;HEAP8[$note>>0]=0|0;HEAP8[$note+1>>0]=0|0;
     $183 = $c1;
     $184 = $183&255;
     $185 = $184 & 127;
     $186 = $185&255;
     $mynote = $186;
     $187 = $mynote;
     $188 = $187&255;
     $189 = (($188|0) / 2)&-1;
     $190 = (7848 + ($189<<1)|0);
     $191 = HEAP8[$190>>0]|0;
     HEAP8[$note>>0] = $191;
     $192 = $mynote;
     $193 = $192&255;
     $194 = (($193|0) / 2)&-1;
     $195 = (7848 + ($194<<1)|0);
     $196 = ((($195)) + 1|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = ((($note)) + 1|0);
     HEAP8[$198>>0] = $197;
     $199 = $c2;
     $200 = $199&255;
     $201 = $200 & 15;
     if ((($201|0) == 10) | (($201|0) == 6) | (($201|0) == 5)) {
      $206 = $c3;
      $207 = $206&255;
      $208 = ($207|0)>=(128);
      if ($208) {
       $209 = $c3;
       $210 = $209&255;
       $211 = $210 << 4;
       $212 = $211 & 240;
       $213 = $212&255;
       $c3 = $213;
      }
     } else if ((($201|0) == 8)) {
      $202 = $c2;
      $203 = $202&255;
      $204 = (($203) - 8)|0;
      $205 = $204&255;
      $c2 = $205;
     }
     $214 = $k;
     $215 = $214<<2;
     $y = $215;
     $216 = $sample;
     $217 = $216&255;
     $218 = $217 & 240;
     $219 = HEAP8[$note>>0]|0;
     $220 = $219&255;
     $221 = $220 & 15;
     $222 = $218 | $221;
     $223 = $222&255;
     $224 = $y;
     $225 = $x;
     $226 = (($tr) + ($225<<8)|0);
     $227 = (($226) + ($224)|0);
     HEAP8[$227>>0] = $223;
     $228 = ((($note)) + 1|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $y;
     $231 = (($230) + 1)|0;
     $232 = $x;
     $233 = (($tr) + ($232<<8)|0);
     $234 = (($233) + ($231)|0);
     HEAP8[$234>>0] = $229;
     $235 = $c2;
     $236 = $y;
     $237 = (($236) + 2)|0;
     $238 = $x;
     $239 = (($tr) + ($238<<8)|0);
     $240 = (($239) + ($237)|0);
     HEAP8[$240>>0] = $235;
     $241 = $c3;
     $242 = $y;
     $243 = (($242) + 3)|0;
     $244 = $x;
     $245 = (($tr) + ($244<<8)|0);
     $246 = (($245) + ($243)|0);
     HEAP8[$246>>0] = $241;
     $247 = $c4;
     $248 = $247&255;
     $249 = ($248|0)>(0);
     if ($249) {
      $250 = $c4;
      $251 = $250&255;
      $252 = ($251|0)<(128);
      if ($252) {
       $253 = $c4;
       $254 = $253&255;
       $255 = $k;
       $256 = (($255) + ($254))|0;
       $k = $256;
      }
     }
     $257 = $c4;
     $258 = $257&255;
     $259 = ($258|0)>(127);
     if ($259) {
      $260 = $k;
      $261 = (($260) + 1)|0;
      $k = $261;
      $l = 256;
      while(1) {
       $262 = $l;
       $263 = $c4;
       $264 = $263&255;
       $265 = ($262|0)>($264|0);
       $266 = $k;
       if (!($265)) {
        break;
       }
       $267 = $266<<2;
       $y = $267;
       $268 = $sample;
       $269 = $268&255;
       $270 = $269 & 240;
       $271 = HEAP8[$note>>0]|0;
       $272 = $271&255;
       $273 = $272 & 15;
       $274 = $270 | $273;
       $275 = $274&255;
       $276 = $y;
       $277 = $x;
       $278 = (($tr) + ($277<<8)|0);
       $279 = (($278) + ($276)|0);
       HEAP8[$279>>0] = $275;
       $280 = ((($note)) + 1|0);
       $281 = HEAP8[$280>>0]|0;
       $282 = $y;
       $283 = (($282) + 1)|0;
       $284 = $x;
       $285 = (($tr) + ($284<<8)|0);
       $286 = (($285) + ($283)|0);
       HEAP8[$286>>0] = $281;
       $287 = $c2;
       $288 = $y;
       $289 = (($288) + 2)|0;
       $290 = $x;
       $291 = (($tr) + ($290<<8)|0);
       $292 = (($291) + ($289)|0);
       HEAP8[$292>>0] = $287;
       $293 = $c3;
       $294 = $y;
       $295 = (($294) + 3)|0;
       $296 = $x;
       $297 = (($tr) + ($296<<8)|0);
       $298 = (($297) + ($295)|0);
       HEAP8[$298>>0] = $293;
       $299 = $k;
       $300 = (($299) + 1)|0;
       $k = $300;
       $301 = $l;
       $302 = (($301) + -1)|0;
       $l = $302;
      }
      $303 = (($266) + -1)|0;
      $k = $303;
     }
    } else {
     $304 = $0;
     $305 = (_hio_tell($304)|0);
     $a = $305;
     $306 = $c2;
     $c5 = $306;
     $307 = $c3;
     $308 = $307&255;
     $309 = $308 << 8;
     $310 = $c4;
     $311 = $310&255;
     $312 = (($309) + ($311))|0;
     $313 = $trkdat_ofs;
     $314 = (($312) + ($313))|0;
     $315 = (($314) + 4)|0;
     $b = $315;
     $316 = $0;
     $317 = $b;
     (_hio_seek($316,$317,0)|0);
     $c = 0;
     while(1) {
      $318 = $c;
      $319 = $c5;
      $320 = $319&255;
      $321 = ($318|0)<=($320|0);
      if (!($321)) {
       break;
      }
      $322 = $0;
      $323 = (_hio_read8($322)|0);
      $c1 = $323;
      $324 = $0;
      $325 = (_hio_read8($324)|0);
      $c2 = $325;
      $326 = $0;
      $327 = (_hio_read8($326)|0);
      $c3 = $327;
      $328 = $0;
      $329 = (_hio_read8($328)|0);
      $c4 = $329;
      $330 = $c1;
      $331 = $330&255;
      $332 = $331 << 4;
      $333 = $332 & 16;
      $334 = $c2;
      $335 = $334&255;
      $336 = $335 >> 4;
      $337 = $336 & 15;
      $338 = $333 | $337;
      $339 = $338&255;
      $sample = $339;
      ;HEAP8[$note>>0]=0|0;HEAP8[$note+1>>0]=0|0;
      $340 = $c1;
      $341 = $340&255;
      $342 = $341 & 127;
      $343 = $342&255;
      $mynote = $343;
      $344 = $mynote;
      $345 = $344&255;
      $346 = (($345|0) / 2)&-1;
      $347 = (7848 + ($346<<1)|0);
      $348 = HEAP8[$347>>0]|0;
      HEAP8[$note>>0] = $348;
      $349 = $mynote;
      $350 = $349&255;
      $351 = (($350|0) / 2)&-1;
      $352 = (7848 + ($351<<1)|0);
      $353 = ((($352)) + 1|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = ((($note)) + 1|0);
      HEAP8[$355>>0] = $354;
      $356 = $c2;
      $357 = $356&255;
      $358 = $357 & 15;
      if ((($358|0) == 8)) {
       $359 = $c2;
       $360 = $359&255;
       $361 = (($360) - 8)|0;
       $362 = $361&255;
       $c2 = $362;
      } else if ((($358|0) == 10) | (($358|0) == 6) | (($358|0) == 5)) {
       $363 = $c3;
       $364 = $363&255;
       $365 = ($364|0)>=(128);
       if ($365) {
        $366 = $c3;
        $367 = $366&255;
        $368 = $367 << 4;
        $369 = $368 & 240;
        $370 = $369&255;
        $c3 = $370;
       }
      }
      $371 = $sample;
      $372 = $371&255;
      $373 = $372 & 240;
      $374 = HEAP8[$note>>0]|0;
      $375 = $374&255;
      $376 = $375 & 15;
      $377 = $373 | $376;
      $378 = $377&255;
      $379 = $k;
      $380 = $379<<2;
      $381 = $x;
      $382 = (($tr) + ($381<<8)|0);
      $383 = (($382) + ($380)|0);
      HEAP8[$383>>0] = $378;
      $384 = ((($note)) + 1|0);
      $385 = HEAP8[$384>>0]|0;
      $386 = $k;
      $387 = $386<<2;
      $388 = (($387) + 1)|0;
      $389 = $x;
      $390 = (($tr) + ($389<<8)|0);
      $391 = (($390) + ($388)|0);
      HEAP8[$391>>0] = $385;
      $392 = $c2;
      $393 = $k;
      $394 = $393<<2;
      $395 = (($394) + 2)|0;
      $396 = $x;
      $397 = (($tr) + ($396<<8)|0);
      $398 = (($397) + ($395)|0);
      HEAP8[$398>>0] = $392;
      $399 = $c3;
      $400 = $k;
      $401 = $400<<2;
      $402 = (($401) + 3)|0;
      $403 = $x;
      $404 = (($tr) + ($403<<8)|0);
      $405 = (($404) + ($402)|0);
      HEAP8[$405>>0] = $399;
      $406 = $c4;
      $407 = $406&255;
      $408 = ($407|0)>(0);
      if ($408) {
       $409 = $c4;
       $410 = $409&255;
       $411 = ($410|0)<(128);
       if ($411) {
        $412 = $c4;
        $413 = $412&255;
        $414 = $k;
        $415 = (($414) + ($413))|0;
        $k = $415;
       }
      }
      $416 = $c4;
      $417 = $416&255;
      $418 = ($417|0)>(127);
      if ($418) {
       $419 = $k;
       $420 = (($419) + 1)|0;
       $k = $420;
       $l = 256;
       while(1) {
        $421 = $l;
        $422 = $c4;
        $423 = $422&255;
        $424 = ($421|0)>($423|0);
        $425 = $k;
        if (!($424)) {
         break;
        }
        $426 = $425<<2;
        $y = $426;
        $427 = $sample;
        $428 = $427&255;
        $429 = $428 & 240;
        $430 = HEAP8[$note>>0]|0;
        $431 = $430&255;
        $432 = $431 & 15;
        $433 = $429 | $432;
        $434 = $433&255;
        $435 = $y;
        $436 = $x;
        $437 = (($tr) + ($436<<8)|0);
        $438 = (($437) + ($435)|0);
        HEAP8[$438>>0] = $434;
        $439 = ((($note)) + 1|0);
        $440 = HEAP8[$439>>0]|0;
        $441 = $y;
        $442 = (($441) + 1)|0;
        $443 = $x;
        $444 = (($tr) + ($443<<8)|0);
        $445 = (($444) + ($442)|0);
        HEAP8[$445>>0] = $440;
        $446 = $c2;
        $447 = $y;
        $448 = (($447) + 2)|0;
        $449 = $x;
        $450 = (($tr) + ($449<<8)|0);
        $451 = (($450) + ($448)|0);
        HEAP8[$451>>0] = $446;
        $452 = $c3;
        $453 = $y;
        $454 = (($453) + 3)|0;
        $455 = $x;
        $456 = (($tr) + ($455<<8)|0);
        $457 = (($456) + ($454)|0);
        HEAP8[$457>>0] = $452;
        $458 = $k;
        $459 = (($458) + 1)|0;
        $k = $459;
        $460 = $l;
        $461 = (($460) + -1)|0;
        $l = $461;
       }
       $462 = (($425) + -1)|0;
       $k = $462;
      }
      $463 = $k;
      $464 = (($463) + 1)|0;
      $k = $464;
      $465 = $c;
      $466 = (($465) + 1)|0;
      $c = $466;
     }
     $467 = $k;
     $468 = (($467) + -1)|0;
     $k = $468;
     $469 = $0;
     $470 = $a;
     (_hio_seek($469,$470,0)|0);
    }
    $471 = $k;
    $472 = (($471) + 1)|0;
    $k = $472;
   }
   $473 = $j;
   $474 = (($473) + 1)|0;
   $j = $474;
  }
  $475 = (($149) + 1)|0;
  $i = $475;
 }
 $i = 0;
 while(1) {
  $476 = $i;
  $477 = $len;
  $478 = $477&255;
  $479 = ($476|0)<($478|0);
  if (!($479)) {
   break;
  }
  _memset(($tmp|0),0,1024)|0;
  $j = 0;
  while(1) {
   $480 = $j;
   $481 = ($480|0)<(64);
   if (!($481)) {
    break;
   }
   $k = 0;
   while(1) {
    $482 = $k;
    $483 = ($482|0)<(4);
    $484 = $j;
    if (!($483)) {
     break;
    }
    $485 = $484<<4;
    $486 = $k;
    $487 = $486<<2;
    $488 = (($485) + ($487))|0;
    $x1 = $488;
    $489 = $k;
    $490 = $i;
    $491 = $490<<2;
    $492 = (($489) + ($491))|0;
    $y2 = $492;
    $493 = $j;
    $494 = $493<<2;
    $495 = $y2;
    $496 = (($tr) + ($495<<8)|0);
    $497 = (($496) + ($494)|0);
    $498 = HEAP8[$497>>0]|0;
    $499 = $x1;
    $500 = (($499) + 0)|0;
    $501 = (($tmp) + ($500)|0);
    HEAP8[$501>>0] = $498;
    $502 = $j;
    $503 = $502<<2;
    $504 = (($503) + 1)|0;
    $505 = $y2;
    $506 = (($tr) + ($505<<8)|0);
    $507 = (($506) + ($504)|0);
    $508 = HEAP8[$507>>0]|0;
    $509 = $x1;
    $510 = (($509) + 1)|0;
    $511 = (($tmp) + ($510)|0);
    HEAP8[$511>>0] = $508;
    $512 = $j;
    $513 = $512<<2;
    $514 = (($513) + 2)|0;
    $515 = $y2;
    $516 = (($tr) + ($515<<8)|0);
    $517 = (($516) + ($514)|0);
    $518 = HEAP8[$517>>0]|0;
    $519 = $x1;
    $520 = (($519) + 2)|0;
    $521 = (($tmp) + ($520)|0);
    HEAP8[$521>>0] = $518;
    $522 = $j;
    $523 = $522<<2;
    $524 = (($523) + 3)|0;
    $525 = $y2;
    $526 = (($tr) + ($525<<8)|0);
    $527 = (($526) + ($524)|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $x1;
    $530 = (($529) + 3)|0;
    $531 = (($tmp) + ($530)|0);
    HEAP8[$531>>0] = $528;
    $532 = $k;
    $533 = (($532) + 1)|0;
    $k = $533;
   }
   $534 = (($484) + 1)|0;
   $j = $534;
  }
  $535 = $1;
  (_fwrite(($tmp|0),1024,1,($535|0))|0);
  $536 = $i;
  $537 = (($536) + 1)|0;
  $i = $537;
 }
 $i = 0;
 while(1) {
  $538 = $i;
  $539 = $nsmp;
  $540 = $539&255;
  $541 = ($538|0)<($540|0);
  if (!($541)) {
   break;
  }
  $542 = $0;
  $543 = $i;
  $544 = (($SampleAddress) + ($543<<2)|0);
  $545 = HEAP32[$544>>2]|0;
  $546 = $smp_ofs;
  $547 = (($545) + ($546))|0;
  (_hio_seek($542,$547,0)|0);
  $548 = $1;
  $549 = $0;
  $550 = $i;
  $551 = (($SampleSize) + ($550<<2)|0);
  $552 = HEAP32[$551>>2]|0;
  (_pw_move_data($548,$549,$552)|0);
  $553 = $i;
  $554 = (($553) + 1)|0;
  $i = $554;
 }
 STACKTOP = sp;return 0;
}
function _test_xann($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $i = 0, $j = 0, $j1 = 0, $k = 0, $k2 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(2048);
 if ($5) {
  $6 = $3;
  $7 = (2048 - ($6))|0;
  $0 = $7;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $8 = $1;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(60);
 if ($12) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(128);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = $i;
  $17 = $16<<2;
  $18 = (($15) + ($17)|0);
  $19 = (_readmem32b($18)|0);
  $j = $19;
  $20 = $j;
  $21 = $20 & -4;
  $k = $21;
  $22 = $k;
  $23 = $j;
  $24 = ($22|0)!=($23|0);
  $25 = $j;
  $26 = ($25>>>0)>(132156);
  $or$cond = $24 | $26;
  if ($or$cond) {
   label = 8;
   break;
  }
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(64);
  if (!($30)) {
   break;
  }
  $31 = $i;
  $32 = $31<<2;
  $33 = (3 + ($32))|0;
  $34 = $1;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($37|0)!=(60);
  if ($38) {
   $39 = $i;
   $40 = $39<<2;
   $41 = (3 + ($40))|0;
   $42 = $1;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)!=(0);
   if ($46) {
    label = 14;
    break;
   }
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 if ((label|0) == 14) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(31);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $51<<4;
  $53 = (519 + ($52))|0;
  $54 = $1;
  $55 = (($54) + ($53)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = ($57|0)>(64);
  if ($58) {
   label = 19;
   break;
  }
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 if ((label|0) == 19) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $i = 0;
 while(1) {
  $61 = $i;
  $62 = ($61|0)<(30);
  if (!($62)) {
   label = 28;
   break;
  }
  $63 = $1;
  $64 = ((($63)) + 526|0);
  $65 = $i;
  $66 = $65<<4;
  $67 = (($64) + ($66)|0);
  $68 = (_readmem32b($67)|0);
  $j1 = $68;
  $69 = $1;
  $70 = ((($69)) + 520|0);
  $71 = $i;
  $72 = (($71) + 1)|0;
  $73 = $72<<4;
  $74 = (($70) + ($73)|0);
  $75 = (_readmem32b($74)|0);
  $k2 = $75;
  $76 = $j1;
  $77 = ($76>>>0)<(2108);
  $78 = $k2;
  $79 = ($78>>>0)<(2108);
  $or$cond3 = $77 | $79;
  if ($or$cond3) {
   label = 24;
   break;
  }
  $80 = $j1;
  $81 = $k2;
  $82 = ($80>>>0)>($81>>>0);
  if ($82) {
   label = 26;
   break;
  }
  $83 = $i;
  $84 = (($83) + 1)|0;
  $i = $84;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 26) {
  $0 = -1;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 else if ((label|0) == 28) {
  $85 = $2;
  _pw_read_title(0,$85,0);
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 return (0)|0;
}
function _depack_xann($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c5 = 0, $fine = 0, $fxp = 0;
 var $fxt = 0, $i = 0, $ins = 0, $j = 0, $k = 0, $lsize = 0, $note = 0, $p = 0, $pat = 0, $pdata = 0, $ptable = 0, $size = 0, $ssize = 0, $vol = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 1072|0;
 $pdata = sp + 36|0;
 $0 = $in;
 $1 = $out;
 $pat = 0;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($pdata|0),0,1025)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $3 = $0;
 (_hio_seek($3,518,0)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   break;
  }
  $6 = $1;
  (_pw_write_zero($6,22)|0);
  $7 = $0;
  $8 = (_hio_read8($7)|0);
  $fine = $8;
  $9 = $0;
  $10 = (_hio_read8($9)|0);
  $vol = $10;
  $11 = $0;
  $12 = (_hio_read32b($11)|0);
  $j = $12;
  $13 = $0;
  $14 = (_hio_read16b($13)|0);
  $15 = $14&65535;
  $lsize = $15;
  $16 = $0;
  $17 = (_hio_read32b($16)|0);
  $k = $17;
  $18 = $1;
  $19 = $0;
  $20 = (_hio_read16b($19)|0);
  $21 = $20&65535;
  $size = $21;
  $22 = $21&65535;
  _write16b($18,$22);
  $23 = $size;
  $24 = $23<<1;
  $25 = $ssize;
  $26 = (($25) + ($24))|0;
  $ssize = $26;
  $27 = $j;
  $28 = $k;
  $29 = (($27) - ($28))|0;
  $j = $29;
  $30 = $1;
  $31 = $fine;
  _write8($30,$31);
  $32 = $1;
  $33 = $vol;
  _write8($32,$33);
  $34 = $1;
  $35 = $j;
  $36 = (($35|0) / 2)&-1;
  $37 = $36&65535;
  _write16b($34,$37);
  $38 = $1;
  $39 = $lsize;
  $40 = $39&65535;
  _write16b($38,$40);
  $41 = $0;
  (_hio_read16b($41)|0);
  $42 = $i;
  $43 = (($42) + 1)|0;
  $i = $43;
 }
 $44 = $0;
 (_hio_seek($44,0,0)|0);
 $c5 = 0;
 $pat = 0;
 while(1) {
  $45 = $c5;
  $46 = $45&255;
  $47 = ($46|0)<(128);
  if (!($47)) {
   break;
  }
  $48 = $0;
  $49 = (_hio_read32b($48)|0);
  $k = $49;
  $50 = $k;
  $51 = ($50|0)==(0);
  if ($51) {
   break;
  }
  $52 = $k;
  $53 = (($52) - 60)|0;
  $54 = (($53|0) / 1024)&-1;
  $55 = (($54) - 1)|0;
  $56 = $55&255;
  $57 = $c5;
  $58 = $57&255;
  $59 = (($ptable) + ($58)|0);
  HEAP8[$59>>0] = $56;
  $60 = $c5;
  $61 = $60&255;
  $62 = (($ptable) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $pat;
  $66 = $65&255;
  $67 = ($64|0)>($66|0);
  if ($67) {
   $68 = $c5;
   $69 = $68&255;
   $70 = (($ptable) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $pat = $71;
  }
  $72 = $c5;
  $73 = (($72) + 1)<<24>>24;
  $c5 = $73;
 }
 $74 = $pat;
 $75 = (($74) + 1)<<24>>24;
 $pat = $75;
 $76 = $1;
 $77 = $c5;
 _write8($76,$77);
 $78 = $1;
 _write8($78,127);
 $79 = $1;
 (_fwrite(($ptable|0),128,1,($79|0))|0);
 $80 = $1;
 _write32b($80,1294879534);
 $81 = $0;
 (_hio_seek($81,1084,0)|0);
 $i = 0;
 while(1) {
  $82 = $i;
  $83 = $pat;
  $84 = $83&255;
  $85 = ($82|0)<($84|0);
  if (!($85)) {
   break;
  }
  $j = 0;
  while(1) {
   $86 = $j;
   $87 = ($86|0)<(256);
   if (!($87)) {
    break;
   }
   $88 = $j;
   $89 = $88<<2;
   $90 = (($pdata) + ($89)|0);
   $p = $90;
   $91 = $0;
   $92 = (_hio_read8($91)|0);
   $93 = $92&255;
   $94 = $93 >> 3;
   $95 = $94 & 31;
   $96 = $95&255;
   $ins = $96;
   $97 = $0;
   $98 = (_hio_read8($97)|0);
   $note = $98;
   $99 = $0;
   $100 = (_hio_read8($99)|0);
   $fxt = $100;
   $101 = $0;
   $102 = (_hio_read8($101)|0);
   $fxp = $102;
   $103 = $fxt;
   $104 = $103&255;
   do {
    switch ($104|0) {
    case 0:  {
     $fxt = 0;
     break;
    }
    case 36:  {
     $fxt = 5;
     break;
    }
    case 40:  {
     $fxt = 6;
     $105 = $fxp;
     $106 = $105&255;
     $107 = $106 << 4;
     $108 = $107 & 240;
     $109 = $108&255;
     $c1 = $109;
     $110 = $fxp;
     $111 = $110&255;
     $112 = $111 >> 4;
     $113 = $112 & 15;
     $114 = $113&255;
     $c2 = $114;
     $115 = $c1;
     $116 = $115&255;
     $117 = $c2;
     $118 = $117&255;
     $119 = $116 | $118;
     $120 = $119&255;
     $fxp = $120;
     break;
    }
    case 92:  {
     $fxt = 14;
     $137 = $fxp;
     $138 = $137&255;
     $139 = $138 | 16;
     $140 = $139&255;
     $fxp = $140;
     break;
    }
    case 4:  {
     $fxt = 0;
     break;
    }
    case 140:  {
     $fxt = 14;
     $153 = $fxp;
     $154 = $153&255;
     $155 = $154 | 176;
     $156 = $155&255;
     $fxp = $156;
     break;
    }
    case 72:  {
     $fxt = 12;
     break;
    }
    case 60:  {
     $fxt = 10;
     $121 = $fxp;
     $122 = $121&255;
     $123 = $122 << 4;
     $124 = $123 & 240;
     $125 = $124&255;
     $c1 = $125;
     $126 = $fxp;
     $127 = $126&255;
     $128 = $127 >> 4;
     $129 = $128 & 15;
     $130 = $129&255;
     $c2 = $130;
     $131 = $c1;
     $132 = $131&255;
     $133 = $c2;
     $134 = $133&255;
     $135 = $132 | $134;
     $136 = $135&255;
     $fxp = $136;
     break;
    }
    case 20:  {
     $fxt = 3;
     break;
    }
    case 132:  {
     $fxt = 14;
     $145 = $fxp;
     $146 = $145&255;
     $147 = $146 | 144;
     $148 = $147&255;
     $fxp = $148;
     break;
    }
    case 96:  {
     $fxt = 14;
     $141 = $fxp;
     $142 = $141&255;
     $143 = $142 | 32;
     $144 = $143&255;
     $fxp = $144;
     break;
    }
    case 28:  {
     $fxt = 4;
     break;
    }
    case 44:  {
     $fxt = 6;
     break;
    }
    case 80:  {
     $fxt = 15;
     break;
    }
    case 24:  {
     $fxt = 4;
     break;
    }
    case 88:  {
     $fxt = 14;
     $fxp = 1;
     break;
    }
    case 8:  {
     $fxt = 1;
     break;
    }
    case 136:  {
     $fxt = 14;
     $149 = $fxp;
     $150 = $149&255;
     $151 = $150 | 160;
     $152 = $151&255;
     $fxp = $152;
     break;
    }
    case 76:  {
     $fxt = 13;
     break;
    }
    case 148:  {
     $fxt = 14;
     $157 = $fxp;
     $158 = $157&255;
     $159 = $158 | 208;
     $160 = $159&255;
     $fxp = $160;
     break;
    }
    case 12:  {
     $fxt = 2;
     break;
    }
    case 152:  {
     $fxt = 14;
     $161 = $fxp;
     $162 = $161&255;
     $163 = $162 | 224;
     $164 = $163&255;
     $fxp = $164;
     break;
    }
    case 68:  {
     $fxt = 11;
     break;
    }
    case 16:  {
     $fxt = 3;
     break;
    }
    case 64:  {
     $fxt = 10;
     break;
    }
    case 56:  {
     $fxt = 9;
     break;
    }
    default: {
     $fxp = 0;
     $fxt = 0;
    }
    }
   } while(0);
   $165 = $ins;
   $166 = $165&255;
   $167 = $166 & 240;
   $168 = $167&255;
   $169 = $p;
   HEAP8[$169>>0] = $168;
   $170 = $note;
   $171 = $170&255;
   $172 = $171 >> 1;
   $173 = (7848 + ($172<<1)|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&255;
   $176 = $p;
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $178 | $175;
   $180 = $179&255;
   HEAP8[$176>>0] = $180;
   $181 = $note;
   $182 = $181&255;
   $183 = $182 >> 1;
   $184 = (7848 + ($183<<1)|0);
   $185 = ((($184)) + 1|0);
   $186 = HEAP8[$185>>0]|0;
   $187 = $p;
   $188 = ((($187)) + 1|0);
   HEAP8[$188>>0] = $186;
   $189 = $ins;
   $190 = $189&255;
   $191 = $190 << 4;
   $192 = $191 & 240;
   $193 = $192&255;
   $194 = $p;
   $195 = ((($194)) + 2|0);
   HEAP8[$195>>0] = $193;
   $196 = $fxt;
   $197 = $196&255;
   $198 = $p;
   $199 = ((($198)) + 2|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = $201 | $197;
   $203 = $202&255;
   HEAP8[$199>>0] = $203;
   $204 = $fxp;
   $205 = $p;
   $206 = ((($205)) + 3|0);
   HEAP8[$206>>0] = $204;
   $207 = $j;
   $208 = (($207) + 1)|0;
   $j = $208;
  }
  $209 = $1;
  (_fwrite(($pdata|0),1024,1,($209|0))|0);
  $210 = $i;
  $211 = (($210) + 1)|0;
  $i = $211;
 }
 $212 = $1;
 $213 = $0;
 $214 = $ssize;
 (_pw_move_data($212,$213,$214)|0);
 STACKTOP = sp;return 0;
}
function _test_p50a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $t;
 $2 = $s;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_theplayer_test($3,$4,$5,80)|0);
 STACKTOP = sp;return ($6|0);
}
function _depack_p50a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 $4 = (_theplayer_depack($2,$3,80)|0);
 STACKTOP = sp;return ($4|0);
}
function _test_p60a($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $t;
 $2 = $s;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_theplayer_test($3,$4,$5,96)|0);
 STACKTOP = sp;return ($6|0);
}
function _depack_p60a($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 $4 = (_theplayer_depack($2,$3,96)|0);
 STACKTOP = sp;return ($4|0);
}
function _theplayer_depack($in,$out,$version) {
 $in = $in|0;
 $out = $out|0;
 $version = $version|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c1 = 0, $c3 = 0, $delta = 0;
 var $i = 0, $isize = 0, $j = 0, $k = 0, $nins = 0, $npat = 0, $pack = 0, $pat_pos = 0, $ptable = 0, $saddr = 0, $sdata_addr = 0, $smp_buffer = 0, $smp_size = 0, $ssize = 0, $taddr = 0, $tdata = 0, $val = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 3512|0;
 $isize = sp + 2320|0;
 $taddr = sp + 272|0;
 $smp_size = sp + 128|0;
 $saddr = sp + 4|0;
 $buf = sp + 2480|0;
 $1 = $in;
 $2 = $out;
 $3 = $version;
 $pat_pos = 0;
 $npat = 0;
 $nins = 0;
 $delta = 0;
 $pack = 0;
 $sdata_addr = 0;
 $ssize = 0;
 $4 = (_calloc(512,256)|0);
 $tdata = $4;
 $5 = $tdata;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = -1;
  $255 = $0;
  STACKTOP = sp;return ($255|0);
 }
 _memset(($taddr|0),0,2048)|0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$smp_size; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$isize; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$saddr>>2] = 0;
 $7 = $1;
 $8 = (_hio_read16b($7)|0);
 $9 = $8&65535;
 $sdata_addr = $9;
 $10 = $1;
 $11 = (_hio_read8($10)|0);
 $12 = $11&255;
 $npat = $12;
 $13 = $1;
 $14 = (_hio_read8($13)|0);
 $15 = $14&255;
 $nins = $15;
 $16 = $nins;
 $17 = $16 & 128;
 $18 = ($17|0)!=(0);
 if ($18) {
  $delta = 1;
 }
 $19 = $3;
 $20 = ($19|0)>=(96);
 if ($20) {
  $21 = $nins;
  $22 = $21 & 64;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $tdata;
   _free($24);
   $0 = -1;
   $255 = $0;
   STACKTOP = sp;return ($255|0);
  }
 }
 $25 = $nins;
 $26 = $25 & 63;
 $nins = $26;
 $27 = $pack;
 $28 = $27&255;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $1;
  (_hio_read32b($30)|0);
 }
 $31 = $2;
 (_pw_write_zero($31,20)|0);
 $i = 0;
 while(1) {
  $32 = $i;
  $33 = $nins;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $2;
  (_pw_write_zero($35,22)|0);
  $36 = $1;
  $37 = (_hio_read16b($36)|0);
  $38 = $37&65535;
  $39 = $i;
  $40 = (($isize) + ($39<<2)|0);
  HEAP32[$40>>2] = $38;
  $j = $38;
  $41 = $j;
  $42 = ($41|0)>(65280);
  if ($42) {
   $43 = $j;
   $44 = (65535 - ($43))|0;
   $45 = (($smp_size) + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $i;
   $48 = (($smp_size) + ($47<<2)|0);
   HEAP32[$48>>2] = $46;
   $49 = $j;
   $50 = (65535 - ($49))|0;
   $51 = (($isize) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $i;
   $54 = (($isize) + ($53<<2)|0);
   HEAP32[$54>>2] = $52;
   $55 = $j;
   $56 = (65535 - ($55))|0;
   $57 = (($saddr) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $i;
   $60 = (($saddr) + ($59<<2)|0);
   HEAP32[$60>>2] = $58;
  } else {
   $61 = $i;
   $62 = ($61|0)>(0);
   if ($62) {
    $63 = $i;
    $64 = (($63) - 1)|0;
    $65 = (($saddr) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $i;
    $68 = (($67) - 1)|0;
    $69 = (($smp_size) + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($66) + ($70))|0;
    $72 = $i;
    $73 = (($saddr) + ($72<<2)|0);
    HEAP32[$73>>2] = $71;
   }
   $74 = $j;
   $75 = $74<<1;
   $76 = $i;
   $77 = (($smp_size) + ($76<<2)|0);
   HEAP32[$77>>2] = $75;
   $78 = $i;
   $79 = (($smp_size) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $ssize;
   $82 = (($81) + ($80))|0;
   $ssize = $82;
  }
  $83 = $i;
  $84 = (($smp_size) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85|0) / 2)&-1;
  $j = $86;
  $87 = $2;
  $88 = $i;
  $89 = (($isize) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $90&65535;
  _write16b($87,$91);
  $92 = $1;
  $93 = (_hio_read8($92)|0);
  $c1 = $93;
  $94 = $2;
  $95 = $c1;
  $96 = $95&255;
  $97 = $96 & 63;
  $98 = $97&255;
  _write8($94,$98);
  $99 = $2;
  $100 = $1;
  $101 = (_hio_read8($100)|0);
  _write8($99,$101);
  $102 = $1;
  $103 = (_hio_read16b($102)|0);
  $104 = $103&65535;
  $val = $104;
  $105 = $val;
  $106 = ($105|0)==(65535);
  $107 = $2;
  if ($106) {
   _write16b($107,0);
   $108 = $2;
   _write16b($108,1);
  } else {
   $109 = $val;
   $110 = $109&65535;
   _write16b($107,$110);
   $111 = $2;
   $112 = $j;
   $113 = $val;
   $114 = (($112) - ($113))|0;
   $115 = $114&65535;
   _write16b($111,$115);
  }
  $116 = $i;
  $117 = (($116) + 1)|0;
  $i = $117;
 }
 dest=$buf; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $118 = ((($buf)) + 29|0);
 HEAP8[$118>>0] = 1;
 while(1) {
  $119 = $i;
  $120 = ($119|0)<(31);
  if (!($120)) {
   break;
  }
  $121 = $2;
  (_fwrite(($buf|0),30,1,($121|0))|0);
  $122 = $i;
  $123 = (($122) + 1)|0;
  $i = $123;
 }
 $i = 0;
 while(1) {
  $124 = $i;
  $125 = $npat;
  $126 = ($124|0)<($125|0);
  if (!($126)) {
   break;
  }
  $j = 0;
  while(1) {
   $127 = $j;
   $128 = ($127|0)<(4);
   if (!($128)) {
    break;
   }
   $129 = $1;
   $130 = (_hio_read16b($129)|0);
   $131 = $130&65535;
   $132 = $j;
   $133 = $i;
   $134 = (($taddr) + ($133<<4)|0);
   $135 = (($134) + ($132<<2)|0);
   HEAP32[$135>>2] = $131;
   $136 = $j;
   $137 = (($136) + 1)|0;
   $j = $137;
  }
  $138 = $i;
  $139 = (($138) + 1)|0;
  $i = $139;
 }
 $pat_pos = 0;
 while(1) {
  $140 = $pat_pos;
  $141 = ($140|0)<(128);
  if (!($141)) {
   break;
  }
  $142 = $1;
  $143 = (_hio_read8($142)|0);
  $c1 = $143;
  $144 = $c1;
  $145 = $144&255;
  $146 = ($145|0)==(255);
  if ($146) {
   break;
  }
  $147 = $3;
  $148 = ($147|0)>=(96);
  $149 = $c1;
  $150 = $149&255;
  $151 = (($150|0) / 2)&-1;
  $152 = $148 ? $150 : $151;
  $153 = $152&255;
  $154 = $pat_pos;
  $155 = (($ptable) + ($154)|0);
  HEAP8[$155>>0] = $153;
  $156 = $pat_pos;
  $157 = (($156) + 1)|0;
  $pat_pos = $157;
 }
 $158 = $2;
 $159 = $pat_pos;
 $160 = $159&255;
 _write8($158,$160);
 $161 = $2;
 _write8($161,127);
 $162 = $2;
 (_fwrite(($ptable|0),128,1,($162|0))|0);
 $163 = $2;
 _write32b($163,1294879534);
 $164 = $1;
 $165 = $npat;
 $166 = $tdata;
 _decode_pattern($164,$165,$166,$taddr);
 $i = 0;
 while(1) {
  $167 = $i;
  $168 = $npat;
  $169 = ($167|0)<($168|0);
  if (!($169)) {
   break;
  }
  _memset(($buf|0),0,1024)|0;
  $j = 0;
  while(1) {
   $170 = $j;
   $171 = ($170|0)<(64);
   if (!($171)) {
    break;
   }
   $k = 0;
   while(1) {
    $172 = $k;
    $173 = ($172|0)<(4);
    $174 = $j;
    if (!($173)) {
     break;
    }
    $175 = $174<<4;
    $176 = $k;
    $177 = $176<<2;
    $178 = (($175) + ($177))|0;
    $179 = (($buf) + ($178)|0);
    $180 = $i;
    $181 = $180<<2;
    $182 = $k;
    $183 = (($181) + ($182))|0;
    $184 = $183<<9;
    $185 = $j;
    $186 = $185<<2;
    $187 = (($184) + ($186))|0;
    $188 = $tdata;
    $189 = (($188) + ($187)|0);
    ;HEAP8[$179>>0]=HEAP8[$189>>0]|0;HEAP8[$179+1>>0]=HEAP8[$189+1>>0]|0;HEAP8[$179+2>>0]=HEAP8[$189+2>>0]|0;HEAP8[$179+3>>0]=HEAP8[$189+3>>0]|0;
    $190 = $k;
    $191 = (($190) + 1)|0;
    $k = $191;
   }
   $192 = (($174) + 1)|0;
   $j = $192;
  }
  $193 = $2;
  (_fwrite(($buf|0),1024,1,($193|0))|0);
  $194 = $i;
  $195 = (($194) + 1)|0;
  $i = $195;
 }
 $196 = $tdata;
 _free($196);
 $i = 0;
 while(1) {
  $197 = $i;
  $198 = $nins;
  $199 = ($197|0)<($198|0);
  if (!($199)) {
   break;
  }
  $200 = $1;
  $201 = $sdata_addr;
  $202 = $i;
  $203 = (($saddr) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = (($201) + ($204))|0;
  (_hio_seek($200,$205,0)|0);
  $206 = $i;
  $207 = (($smp_size) + ($206<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (_malloc($208)|0);
  $smp_buffer = $209;
  $210 = $smp_buffer;
  $211 = $i;
  $212 = (($smp_size) + ($211<<2)|0);
  $213 = HEAP32[$212>>2]|0;
  _memset(($210|0),0,($213|0))|0;
  $214 = $smp_buffer;
  $215 = $i;
  $216 = (($smp_size) + ($215<<2)|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = $1;
  (_hio_read($214,$217,1,$218)|0);
  $219 = $delta;
  $220 = $219&255;
  $221 = ($220|0)==(1);
  L63: do {
   if ($221) {
    $j = 1;
    while(1) {
     $222 = $j;
     $223 = $i;
     $224 = (($smp_size) + ($223<<2)|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($222|0)<($225|0);
     if (!($226)) {
      break L63;
     }
     $227 = $j;
     $228 = $smp_buffer;
     $229 = (($228) + ($227)|0);
     $230 = HEAP8[$229>>0]|0;
     $231 = $230 << 24 >> 24;
     $232 = (256 - ($231))|0;
     $233 = $j;
     $234 = (($233) - 1)|0;
     $235 = $smp_buffer;
     $236 = (($235) + ($234)|0);
     $237 = HEAP8[$236>>0]|0;
     $238 = $237 << 24 >> 24;
     $239 = (($232) + ($238))|0;
     $240 = $239&255;
     $c3 = $240;
     $241 = $c3;
     $242 = $j;
     $243 = $smp_buffer;
     $244 = (($243) + ($242)|0);
     HEAP8[$244>>0] = $241;
     $245 = $j;
     $246 = (($245) + 1)|0;
     $j = $246;
    }
   }
  } while(0);
  $247 = $smp_buffer;
  $248 = $i;
  $249 = (($smp_size) + ($248<<2)|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = $2;
  (_fwrite(($247|0),($250|0),1,($251|0))|0);
  $252 = $smp_buffer;
  _free($252);
  $253 = $i;
  $254 = (($253) + 1)|0;
  $i = $254;
 }
 $0 = 0;
 $255 = $0;
 STACKTOP = sp;return ($255|0);
}
function _decode_pattern($in,$npat,$tdata,$taddr) {
 $in = $in|0;
 $npat = $npat|0;
 $tdata = $tdata|0;
 $taddr = $taddr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0;
 var $c3 = 0, $c4 = 0, $effect = 0, $i = 0, $j = 0, $k = 0, $l = 0, $lines = 0, $max_row = 0, $pos = 0, $tdata_addr = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $npat;
 $2 = $tdata;
 $3 = $taddr;
 $4 = $0;
 $5 = (_hio_tell($4)|0);
 $tdata_addr = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $1;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $max_row = 63;
  $j = 0;
  while(1) {
   $9 = $j;
   $10 = ($9|0)<(4);
   if (!($10)) {
    break;
   }
   $11 = $0;
   $12 = $j;
   $13 = $i;
   $14 = $3;
   $15 = (($14) + ($13<<4)|0);
   $16 = (($15) + ($12<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $tdata_addr;
   $19 = (($17) + ($18))|0;
   (_hio_seek($11,$19,0)|0);
   $k = 0;
   L7: while(1) {
    $20 = $k;
    $21 = $max_row;
    $22 = ($20|0)<=($21|0);
    if (!($22)) {
     break;
    }
    $23 = $i;
    $24 = $23<<2;
    $25 = $j;
    $26 = (($24) + ($25))|0;
    $27 = $26<<9;
    $28 = $k;
    $29 = $28<<2;
    $30 = (($27) + ($29))|0;
    $31 = $2;
    $32 = (($31) + ($30)|0);
    $x = $32;
    $33 = $0;
    $34 = (_hio_read8($33)|0);
    $c1 = $34;
    $35 = $0;
    $36 = (_hio_read8($35)|0);
    $c2 = $36;
    $37 = $0;
    $38 = (_hio_read8($37)|0);
    $c3 = $38;
    $39 = $c1;
    $40 = $39&255;
    $41 = $40 & 128;
    $42 = ($41|0)!=(0);
    L10: do {
     if ($42) {
      $43 = $c1;
      $44 = $43&255;
      $45 = ($44|0)!=(128);
      if ($45) {
       $46 = $0;
       $47 = (_hio_read8($46)|0);
       $c4 = $47;
       $48 = $c1;
       $49 = $48&255;
       $50 = (255 - ($49))|0;
       $51 = $50&255;
       $c1 = $51;
       $52 = $x;
       $53 = $c1;
       $54 = $c2;
       $55 = $c3;
       $56 = (_set_event($52,$53,$54,$55)|0);
       $57 = $56&255;
       $effect = $57;
       $58 = $effect;
       $59 = ($58|0)==(13);
       if ($59) {
        label = 10;
        break L7;
       }
       $61 = $effect;
       $62 = ($61|0)==(11);
       if ($62) {
        label = 12;
        break L7;
       }
       $64 = $c4;
       $65 = $64&255;
       $66 = ($65|0)<(128);
       $67 = $c4;
       $68 = $67&255;
       if ($66) {
        $69 = $k;
        $70 = (($69) + ($68))|0;
        $k = $70;
        break;
       }
       $71 = (256 - ($68))|0;
       $72 = $71&255;
       $c4 = $72;
       $l = 0;
       while(1) {
        $73 = $l;
        $74 = $c4;
        $75 = $74&255;
        $76 = ($73|0)<($75|0);
        if (!($76)) {
         break L10;
        }
        $77 = $k;
        $78 = (($77) + 1)|0;
        $k = $78;
        $79 = ($78|0)>=(64);
        if ($79) {
         break L10;
        }
        $80 = $i;
        $81 = $80<<2;
        $82 = $j;
        $83 = (($81) + ($82))|0;
        $84 = $83<<9;
        $85 = $k;
        $86 = $85<<2;
        $87 = (($84) + ($86))|0;
        $88 = $2;
        $89 = (($88) + ($87)|0);
        $x = $89;
        $90 = $x;
        $91 = $c1;
        $92 = $c2;
        $93 = $c3;
        (_set_event($90,$91,$92,$93)|0);
        $94 = $l;
        $95 = (($94) + 1)|0;
        $l = $95;
       }
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
    } while(0);
    do {
     if ((label|0) == 19) {
      label = 0;
      $96 = $c1;
      $97 = $96&255;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $210 = $i;
       $211 = $210<<2;
       $212 = $j;
       $213 = (($211) + ($212))|0;
       $214 = $213<<9;
       $215 = $k;
       $216 = $215<<2;
       $217 = (($214) + ($216))|0;
       $218 = $2;
       $219 = (($218) + ($217)|0);
       $x = $219;
       $220 = $x;
       $221 = $c1;
       $222 = $c2;
       $223 = $c3;
       $224 = (_set_event($220,$221,$222,$223)|0);
       $225 = $224&255;
       $effect = $225;
       $226 = $effect;
       $227 = ($226|0)==(13);
       if ($227) {
        label = 39;
        break L7;
       }
       $229 = $effect;
       $230 = ($229|0)==(11);
       if ($230) {
        label = 41;
        break L7;
       } else {
        break;
       }
      }
      $99 = $0;
      $100 = (_hio_read8($99)|0);
      $c4 = $100;
      $101 = $0;
      $102 = (_hio_tell($101)|0);
      $pos = $102;
      $103 = $c2;
      $104 = $103&255;
      $lines = $104;
      $105 = $0;
      $106 = $c3;
      $107 = $106&255;
      $108 = $107 << 8;
      $109 = $c4;
      $110 = $109&255;
      $111 = (($108) + ($110))|0;
      $112 = (0 - ($111))|0;
      (_hio_seek($105,$112,1)|0);
      $l = 0;
      while(1) {
       $113 = $l;
       $114 = $lines;
       $115 = ($113|0)<=($114|0);
       if (!($115)) {
        break;
       }
       $116 = $i;
       $117 = $116<<2;
       $118 = $j;
       $119 = (($117) + ($118))|0;
       $120 = $119<<9;
       $121 = $k;
       $122 = $121<<2;
       $123 = (($120) + ($122))|0;
       $124 = $2;
       $125 = (($124) + ($123)|0);
       $x = $125;
       $126 = $0;
       $127 = (_hio_read8($126)|0);
       $c1 = $127;
       $128 = $0;
       $129 = (_hio_read8($128)|0);
       $c2 = $129;
       $130 = $0;
       $131 = (_hio_read8($130)|0);
       $c3 = $131;
       $132 = $c1;
       $133 = $132&255;
       $134 = $133 & 128;
       $135 = ($134|0)!=(0);
       L31: do {
        if ($135) {
         $136 = $c1;
         $137 = $136&255;
         $138 = ($137|0)!=(128);
         if ($138) {
          $139 = $0;
          $140 = (_hio_read8($139)|0);
          $c4 = $140;
          $141 = $c1;
          $142 = $141&255;
          $143 = (255 - ($142))|0;
          $144 = $143&255;
          $c1 = $144;
          $145 = $k;
          $146 = ($145|0)>=(64);
          if (!($146)) {
           $147 = $x;
           $148 = $c1;
           $149 = $c2;
           $150 = $c3;
           $151 = (_set_event($147,$148,$149,$150)|0);
           $152 = $151&255;
           $effect = $152;
           $153 = $effect;
           $154 = ($153|0)==(13);
           if ($154) {
            $155 = $k;
            $max_row = $155;
            $l = 9999;
            $k = 9999;
            break;
           }
           $156 = $effect;
           $157 = ($156|0)==(11);
           if ($157) {
            $158 = $k;
            $max_row = $158;
            $l = 9999;
            $k = 9999;
            break;
           }
           $159 = $c4;
           $160 = $159&255;
           $161 = ($160|0)<(128);
           $162 = $c4;
           $163 = $162&255;
           if ($161) {
            $164 = $k;
            $165 = (($164) + ($163))|0;
            $k = $165;
            break;
           }
           $166 = (256 - ($163))|0;
           $167 = $166&255;
           $c4 = $167;
           while(1) {
            $168 = $c4;
            $169 = (($168) + -1)<<24>>24;
            $c4 = $169;
            $170 = ($168<<24>>24)!=(0);
            if (!($170)) {
             label = 35;
             break L31;
            }
            $171 = $k;
            $172 = (($171) + 1)|0;
            $k = $172;
            $173 = ($172|0)>=(64);
            if ($173) {
             label = 35;
             break L31;
            }
            $174 = $i;
            $175 = $174<<2;
            $176 = $j;
            $177 = (($175) + ($176))|0;
            $178 = $177<<9;
            $179 = $k;
            $180 = $179<<2;
            $181 = (($178) + ($180))|0;
            $182 = $2;
            $183 = (($182) + ($181)|0);
            $x = $183;
            $184 = $x;
            $185 = $c1;
            $186 = $c2;
            $187 = $c3;
            (_set_event($184,$185,$186,$187)|0);
           }
          }
         } else {
          label = 35;
         }
        } else {
         label = 35;
        }
       } while(0);
       if ((label|0) == 35) {
        label = 0;
        $188 = $i;
        $189 = $188<<2;
        $190 = $j;
        $191 = (($189) + ($190))|0;
        $192 = $191<<9;
        $193 = $k;
        $194 = $193<<2;
        $195 = (($192) + ($194))|0;
        $196 = $2;
        $197 = (($196) + ($195)|0);
        $x = $197;
        $198 = $x;
        $199 = $c1;
        $200 = $c2;
        $201 = $c3;
        (_set_event($198,$199,$200,$201)|0);
       }
       $202 = $l;
       $203 = (($202) + 1)|0;
       $l = $203;
       $204 = $k;
       $205 = (($204) + 1)|0;
       $k = $205;
      }
      $206 = $0;
      $207 = $pos;
      (_hio_seek($206,$207,0)|0);
      $208 = $k;
      $209 = (($208) + -1)|0;
      $k = $209;
     }
    } while(0);
    $232 = $k;
    $233 = (($232) + 1)|0;
    $k = $233;
   }
   if ((label|0) == 10) {
    label = 0;
    $60 = $k;
    $max_row = $60;
   }
   else if ((label|0) == 12) {
    label = 0;
    $63 = $k;
    $max_row = $63;
   }
   else if ((label|0) == 39) {
    label = 0;
    $228 = $k;
    $max_row = $228;
   }
   else if ((label|0) == 41) {
    label = 0;
    $231 = $k;
    $max_row = $231;
   }
   $234 = $j;
   $235 = (($234) + 1)|0;
   $j = $235;
  }
  $236 = $i;
  $237 = (($236) + 1)|0;
  $i = $237;
 }
 STACKTOP = sp;return;
}
function _set_event($x,$c1,$c2,$c3) {
 $x = $x|0;
 $c1 = $c1|0;
 $c2 = $c2|0;
 $c3 = $c3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $c1;
 $2 = $c2;
 $3 = $c3;
 $4 = $1;
 $5 = $4&255;
 $6 = $5 << 4;
 $7 = $6 & 16;
 $8 = $1;
 $9 = $8&255;
 $10 = (($9|0) / 2)&-1;
 $11 = (7848 + ($10<<1)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $7 | $13;
 $15 = $14&255;
 $16 = $0;
 $17 = ((($16)) + 1|0);
 $0 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $1;
 $19 = $18&255;
 $20 = (($19|0) / 2)&-1;
 $21 = (7848 + ($20<<1)|0);
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $0;
 $25 = ((($24)) + 1|0);
 $0 = $25;
 HEAP8[$24>>0] = $23;
 $26 = $2;
 $27 = $26&255;
 $28 = $27 & 15;
 $29 = $28&255;
 $b = $29;
 $30 = $b;
 $31 = $30&255;
 $32 = ($31|0)==(8);
 if ($32) {
  $33 = $2;
  $34 = $33&255;
  $35 = (($34) - 8)|0;
  $36 = $35&255;
  $2 = $36;
 }
 $37 = $2;
 $38 = $0;
 $39 = ((($38)) + 1|0);
 $0 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $b;
 $41 = $40&255;
 $42 = ($41|0)==(5);
 if (!($42)) {
  $43 = $b;
  $44 = $43&255;
  $45 = ($44|0)==(6);
  if (!($45)) {
   $46 = $b;
   $47 = $46&255;
   $48 = ($47|0)==(10);
   if (!($48)) {
    $58 = $3;
    $59 = $0;
    $60 = ((($59)) + 1|0);
    $0 = $60;
    HEAP8[$59>>0] = $58;
    $61 = $b;
    STACKTOP = sp;return ($61|0);
   }
  }
 }
 $49 = $3;
 $50 = $49&255;
 $51 = ($50|0)>(127);
 $52 = $3;
 $53 = $52&255;
 $54 = (256 - ($53))|0;
 $55 = $54 << 4;
 $56 = $51 ? $55 : $53;
 $57 = $56&255;
 $3 = $57;
 $58 = $3;
 $59 = $0;
 $60 = ((($59)) + 1|0);
 $0 = $60;
 HEAP8[$59>>0] = $58;
 $61 = $b;
 STACKTOP = sp;return ($61|0);
}
function _theplayer_test($data,$t,$s,$version) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 $version = $version|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $i = 0, $ins = 0, $len = 0, $num_ins = 0, $num_pat = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pat = 0, $sdata = 0, $size = 0, $start = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $version;
 $5 = $1;
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $num_pat = $8;
 $9 = $num_pat;
 $10 = ($9|0)==(0);
 $11 = $num_pat;
 $12 = ($11|0)>(127);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $0 = -1;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 $13 = $1;
 $14 = ((($13)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 & 63;
 $num_ins = $17;
 $18 = $num_ins;
 $19 = ($18|0)==(0);
 $20 = $num_ins;
 $21 = ($20|0)>(31);
 $or$cond3 = $19 | $21;
 if ($or$cond3) {
  $0 = -1;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $num_ins;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   label = 12;
   break;
  }
  $25 = $i;
  $26 = ($25*6)|0;
  $27 = (($26) + 7)|0;
  $28 = $1;
  $29 = (($28) + ($27)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)>(64);
  if ($32) {
   label = 8;
   break;
  }
  $33 = $i;
  $34 = ($33*6)|0;
  $35 = (($34) + 6)|0;
  $36 = $1;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)>(15);
  if ($40) {
   label = 10;
   break;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 if ((label|0) == 8) {
  $0 = -1;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 else if ((label|0) == 10) {
  $0 = -1;
  $231 = $0;
  STACKTOP = sp;return ($231|0);
 }
 else if ((label|0) == 12) {
  $i = 0;
  while(1) {
   $43 = $i;
   $44 = $num_ins;
   $45 = ($43|0)<($44|0);
   $46 = $1;
   if (!($45)) {
    label = 23;
    break;
   }
   $47 = $i;
   $48 = ($47*6)|0;
   $49 = (($46) + ($48)|0);
   $50 = ((($49)) + 4|0);
   $51 = (_readmem16b($50)|0);
   $52 = $51&65535;
   $size = $52;
   $53 = $size;
   $54 = ($53|0)<(65503);
   $55 = $size;
   $56 = ($55|0)>(32768);
   $or$cond5 = $54 & $56;
   $57 = $size;
   $58 = ($57|0)==(0);
   $or$cond7 = $or$cond5 | $58;
   if ($or$cond7) {
    label = 15;
    break;
   }
   $59 = $1;
   $60 = $i;
   $61 = ($60*6)|0;
   $62 = (($59) + ($61)|0);
   $63 = ((($62)) + 8|0);
   $64 = (_readmem16b($63)|0);
   $65 = $64&65535;
   $start = $65;
   $66 = $start;
   $67 = ($66|0)!=(65535);
   if ($67) {
    $68 = $start;
    $69 = $size;
    $70 = ($68|0)>=($69|0);
    if ($70) {
     label = 18;
     break;
    }
   }
   $71 = $size;
   $72 = ($71|0)>(65503);
   if ($72) {
    $73 = $size;
    $74 = (65535 - ($73))|0;
    $75 = $num_ins;
    $76 = ($74|0)>($75|0);
    if ($76) {
     label = 21;
     break;
    }
   }
   $77 = $i;
   $78 = (($77) + 1)|0;
   $i = $78;
  }
  if ((label|0) == 15) {
   $0 = -1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  }
  else if ((label|0) == 18) {
   $0 = -1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  }
  else if ((label|0) == 21) {
   $0 = -1;
   $231 = $0;
   STACKTOP = sp;return ($231|0);
  }
  else if ((label|0) == 23) {
   $79 = (_readmem16b($46)|0);
   $80 = $79&65535;
   $sdata = $80;
   $81 = $sdata;
   $82 = $num_ins;
   $83 = ($82*6)|0;
   $84 = (($83) + 4)|0;
   $85 = $num_pat;
   $86 = $85<<3;
   $87 = (($84) + ($86))|0;
   $88 = ($81|0)<($87|0);
   if ($88) {
    $0 = -1;
    $231 = $0;
    STACKTOP = sp;return ($231|0);
   }
   $i = 0;
   while(1) {
    $89 = $i;
    $90 = $num_pat;
    $91 = $90<<2;
    $92 = ($89|0)<($91|0);
    if (!($92)) {
     break;
    }
    $93 = $1;
    $94 = ((($93)) + 4|0);
    $95 = $num_ins;
    $96 = ($95*6)|0;
    $97 = (($94) + ($96)|0);
    $98 = $i;
    $99 = $98<<1;
    $100 = (($97) + ($99)|0);
    $101 = (_readmem16b($100)|0);
    $102 = $101&65535;
    $x = $102;
    $103 = $x;
    $104 = $num_ins;
    $105 = ($104*6)|0;
    $106 = (($103) + ($105))|0;
    $107 = (($106) + 4)|0;
    $108 = $num_pat;
    $109 = $108<<3;
    $110 = (($107) + ($109))|0;
    $111 = $sdata;
    $112 = ($110|0)>($111|0);
    if ($112) {
     label = 28;
     break;
    }
    $113 = $i;
    $114 = (($113) + 1)|0;
    $i = $114;
   }
   if ((label|0) == 28) {
    $0 = -1;
    $231 = $0;
    STACKTOP = sp;return ($231|0);
   }
   $115 = $3;
   $116 = $num_ins;
   $117 = ($116*6)|0;
   $118 = (($117) + 4)|0;
   $119 = $num_pat;
   $120 = $119<<3;
   $121 = (($118) + ($120))|0;
   $122 = ($115|0)<($121|0);
   if ($122) {
    $123 = $num_ins;
    $124 = ($123*6)|0;
    $125 = (($124) + 4)|0;
    $126 = $num_pat;
    $127 = $126<<3;
    $128 = (($125) + ($127))|0;
    $129 = $3;
    $130 = (($128) - ($129))|0;
    $0 = $130;
    $231 = $0;
    STACKTOP = sp;return ($231|0);
   }
   $len = 0;
   while(1) {
    $131 = $num_ins;
    $132 = ($131*6)|0;
    $133 = (($132) + 4)|0;
    $134 = $num_pat;
    $135 = $134<<3;
    $136 = (($133) + ($135))|0;
    $137 = $len;
    $138 = (($136) + ($137))|0;
    $139 = $1;
    $140 = (($139) + ($138)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $pat = $142;
    $143 = $pat;
    $144 = ($143|0)==(255);
    $145 = $len;
    $146 = ($145|0)>=(128);
    $or$cond9 = $144 | $146;
    if ($or$cond9) {
     label = 42;
     break;
    }
    $147 = $4;
    $148 = ($147|0)>=(96);
    $149 = $pat;
    if ($148) {
     $150 = $num_pat;
     $151 = (($150) - 1)|0;
     $152 = ($149|0)>($151|0);
     if ($152) {
      label = 36;
      break;
     }
    } else {
     $153 = $149 & 1;
     $154 = ($153|0)!=(0);
     if ($154) {
      label = 38;
      break;
     }
     $155 = $pat;
     $156 = $num_pat;
     $157 = $156<<1;
     $158 = ($155|0)>($157|0);
     if ($158) {
      label = 40;
      break;
     }
    }
    $159 = $len;
    $160 = (($159) + 1)|0;
    $len = $160;
   }
   if ((label|0) == 36) {
    $0 = -1;
    $231 = $0;
    STACKTOP = sp;return ($231|0);
   }
   else if ((label|0) == 38) {
    $0 = -1;
    $231 = $0;
    STACKTOP = sp;return ($231|0);
   }
   else if ((label|0) == 40) {
    $0 = -1;
    $231 = $0;
    STACKTOP = sp;return ($231|0);
   }
   else if ((label|0) == 42) {
    $161 = $num_ins;
    $162 = ($161*6)|0;
    $163 = (($162) + 4)|0;
    $164 = $num_pat;
    $165 = $164<<3;
    $166 = (($163) + ($165))|0;
    $167 = $len;
    $168 = (($166) + ($167))|0;
    $169 = $sdata;
    $170 = ($168|0)>($169|0);
    if ($170) {
     $0 = -1;
     $231 = $0;
     STACKTOP = sp;return ($231|0);
    }
    $171 = $len;
    $172 = ($171|0)==(0);
    $173 = $len;
    $174 = ($173|0)==(128);
    $or$cond11 = $172 | $174;
    if ($or$cond11) {
     $0 = -1;
     $231 = $0;
     STACKTOP = sp;return ($231|0);
    }
    $175 = $3;
    $176 = $sdata;
    $177 = (($176) + 1)|0;
    $178 = ($175|0)<($177|0);
    if ($178) {
     $179 = $sdata;
     $180 = (($179) + 1)|0;
     $181 = $3;
     $182 = (($180) - ($181))|0;
     $0 = $182;
     $231 = $0;
     STACKTOP = sp;return ($231|0);
    }
    $183 = $len;
    $184 = (($183) + 1)|0;
    $len = $184;
    $185 = $num_ins;
    $186 = ($185*6)|0;
    $187 = (($186) + 4)|0;
    $188 = $num_pat;
    $189 = $188<<3;
    $190 = (($187) + ($189))|0;
    $191 = $len;
    $192 = (($190) + ($191))|0;
    $i = $192;
    while(1) {
     $193 = $i;
     $194 = $sdata;
     $195 = ($193|0)<($194|0);
     if (!($195)) {
      label = 58;
      break;
     }
     $196 = $1;
     $197 = $i;
     $198 = (($196) + ($197)|0);
     $d = $198;
     $199 = $d;
     $200 = HEAP8[$199>>0]|0;
     $201 = $200&255;
     $202 = $201 ^ -1;
     $203 = $202 & 128;
     $204 = ($203|0)!=(0);
     if ($204) {
      $205 = $d;
      $206 = HEAP8[$205>>0]|0;
      $207 = $206&255;
      $208 = ($207|0)>(73);
      if ($208) {
       label = 52;
       break;
      }
      $209 = $d;
      $210 = HEAP8[$209>>0]|0;
      $211 = $210&255;
      $212 = $211 << 4;
      $213 = $212 & 16;
      $214 = $d;
      $215 = ((($214)) + 1|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = $217 >> 4;
      $219 = $218 & 15;
      $220 = $213 | $219;
      $ins = $220;
      $221 = $ins;
      $222 = $num_ins;
      $223 = ($221|0)>($222|0);
      if ($223) {
       label = 54;
       break;
      }
      $224 = $i;
      $225 = (($224) + 2)|0;
      $i = $225;
     } else {
      $226 = $i;
      $227 = (($226) + 3)|0;
      $i = $227;
     }
     $228 = $i;
     $229 = (($228) + 1)|0;
     $i = $229;
    }
    if ((label|0) == 52) {
     $0 = -1;
     $231 = $0;
     STACKTOP = sp;return ($231|0);
    }
    else if ((label|0) == 54) {
     $0 = -1;
     $231 = $0;
     STACKTOP = sp;return ($231|0);
    }
    else if ((label|0) == 58) {
     $230 = $2;
     _pw_read_title(0,$230,0);
     $0 = 0;
     $231 = $0;
     STACKTOP = sp;return ($231|0);
    }
   }
  }
 }
 return (0)|0;
}
function _test_pp21($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $d = 0, $i = 0, $len = 0, $max_ref = 0, $npat = 0, $or$cond = 0;
 var $ref = 0, $ssize = 0, $start = 0, $trk = 0, $tsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $ssize = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = $1;
  $7 = $i;
  $8 = $7<<3;
  $9 = (($6) + ($8)|0);
  $d = $9;
  $10 = $d;
  $11 = (_readmem16b($10)|0);
  $12 = $11&65535;
  $13 = $12 << 1;
  $len = $13;
  $14 = $d;
  $15 = ((($14)) + 4|0);
  $16 = (_readmem16b($15)|0);
  $17 = $16&65535;
  $18 = $17 << 1;
  $start = $18;
  $19 = $len;
  $20 = $ssize;
  $21 = (($20) + ($19))|0;
  $ssize = $21;
  $22 = $d;
  $23 = ((($22)) + 2|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)>(15);
  if ($26) {
   label = 4;
   break;
  }
  $27 = $d;
  $28 = ((($27)) + 3|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)>(64);
  if ($31) {
   label = 6;
   break;
  }
  $32 = $start;
  $33 = $len;
  $34 = ($32|0)>($33|0);
  if ($34) {
   label = 8;
   break;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $93 = $0;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 10) {
  $37 = $ssize;
  $38 = ($37|0)<=(2);
  if ($38) {
   $0 = -1;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  }
  $39 = $1;
  $40 = ((($39)) + 248|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $npat = $42;
  $43 = $npat;
  $44 = ($43|0)==(0);
  $45 = $npat;
  $46 = ($45|0)>(127);
  $or$cond = $44 | $46;
  if ($or$cond) {
   $0 = -1;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  }
  $tsize = 0;
  $i = 0;
  while(1) {
   $47 = $i;
   $48 = ($47|0)<(512);
   if (!($48)) {
    break;
   }
   $49 = $i;
   $50 = (250 + ($49))|0;
   $51 = $1;
   $52 = (($51) + ($50)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $trk = $54;
   $55 = $trk;
   $56 = $tsize;
   $57 = ($55|0)>($56|0);
   if ($57) {
    $58 = $trk;
    $tsize = $58;
   }
   $59 = $i;
   $60 = (($59) + 1)|0;
   $i = $60;
  }
  $61 = $tsize;
  $62 = (($61) + 1)|0;
  $tsize = $62;
  $63 = $tsize;
  $64 = $63 << 6;
  $tsize = $64;
  $max_ref = 0;
  $i = 0;
  while(1) {
   $65 = $i;
   $66 = $tsize;
   $67 = ($65|0)<($66|0);
   $68 = $1;
   if (!($67)) {
    break;
   }
   $69 = $i;
   $70 = $69<<1;
   $71 = (($68) + ($70)|0);
   $72 = ((($71)) + 762|0);
   $73 = (_readmem16b($72)|0);
   $74 = $73&65535;
   $ref = $74;
   $75 = $ref;
   $76 = ($75|0)>(16384);
   if ($76) {
    label = 22;
    break;
   }
   $77 = $ref;
   $78 = $max_ref;
   $79 = ($77|0)>($78|0);
   if ($79) {
    $80 = $ref;
    $max_ref = $80;
   }
   $81 = $i;
   $82 = (($81) + 1)|0;
   $i = $82;
  }
  if ((label|0) == 22) {
   $0 = -1;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  }
  $83 = $tsize;
  $84 = $83 << 1;
  $85 = (($68) + ($84)|0);
  $86 = ((($85)) + 762|0);
  $87 = (_readmem32b($86)|0);
  $88 = $max_ref;
  $89 = (($88) + 1)|0;
  $90 = $89<<2;
  $91 = ($87|0)!=($90|0);
  if ($91) {
   $0 = -1;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  } else {
   $92 = $2;
   _pw_read_title(0,$92,0);
   $0 = 0;
   $93 = $0;
   STACKTOP = sp;return ($93|0);
  }
 }
 return (0)|0;
}
function _depack_pp21($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 $4 = (_depack_pp21_pp30($2,$3,0)|0);
 STACKTOP = sp;return ($4|0);
}
function _test_pp30($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $d1 = 0, $fxp = 0, $fxt = 0, $i = 0, $len = 0, $max_ref = 0, $npat = 0, $or$cond = 0, $ref = 0, $ref_size = 0, $ssize = 0, $start = 0;
 var $trk = 0, $tsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $ssize = 0;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = $1;
  $7 = $i;
  $8 = $7<<3;
  $9 = (($6) + ($8)|0);
  $d = $9;
  $10 = $d;
  $11 = (_readmem16b($10)|0);
  $12 = $11&65535;
  $13 = $12 << 1;
  $len = $13;
  $14 = $d;
  $15 = ((($14)) + 4|0);
  $16 = (_readmem16b($15)|0);
  $17 = $16&65535;
  $18 = $17 << 1;
  $start = $18;
  $19 = $len;
  $20 = $ssize;
  $21 = (($20) + ($19))|0;
  $ssize = $21;
  $22 = $d;
  $23 = ((($22)) + 2|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)>(15);
  if ($26) {
   label = 4;
   break;
  }
  $27 = $d;
  $28 = ((($27)) + 3|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)>(64);
  if ($31) {
   label = 6;
   break;
  }
  $32 = $start;
  $33 = $len;
  $34 = ($32|0)>($33|0);
  if ($34) {
   label = 8;
   break;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $146 = $0;
  STACKTOP = sp;return ($146|0);
 }
 else if ((label|0) == 6) {
  $0 = -1;
  $146 = $0;
  STACKTOP = sp;return ($146|0);
 }
 else if ((label|0) == 8) {
  $0 = -1;
  $146 = $0;
  STACKTOP = sp;return ($146|0);
 }
 else if ((label|0) == 10) {
  $37 = $ssize;
  $38 = ($37|0)<=(2);
  if ($38) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  $39 = $1;
  $40 = ((($39)) + 248|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $npat = $42;
  $43 = $npat;
  $44 = ($43|0)==(0);
  $45 = $npat;
  $46 = ($45|0)>(127);
  $or$cond = $44 | $46;
  if ($or$cond) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  $tsize = 0;
  $i = 0;
  while(1) {
   $47 = $i;
   $48 = ($47|0)<(512);
   if (!($48)) {
    break;
   }
   $49 = $i;
   $50 = (250 + ($49))|0;
   $51 = $1;
   $52 = (($51) + ($50)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $trk = $54;
   $55 = $trk;
   $56 = $tsize;
   $57 = ($55|0)>($56|0);
   if ($57) {
    $58 = $trk;
    $tsize = $58;
   }
   $59 = $i;
   $60 = (($59) + 1)|0;
   $i = $60;
  }
  $61 = $tsize;
  $62 = (($61) + 1)|0;
  $tsize = $62;
  $63 = $tsize;
  $64 = $63 << 6;
  $tsize = $64;
  $max_ref = 0;
  $i = 0;
  while(1) {
   $65 = $i;
   $66 = $tsize;
   $67 = ($65|0)<($66|0);
   if (!($67)) {
    break;
   }
   $68 = $1;
   $69 = $i;
   $70 = $69<<1;
   $71 = (($68) + ($70)|0);
   $72 = ((($71)) + 762|0);
   $73 = (_readmem16b($72)|0);
   $74 = $73&65535;
   $ref = $74;
   $75 = $ref;
   $76 = $max_ref;
   $77 = ($75|0)>($76|0);
   if ($77) {
    $78 = $ref;
    $max_ref = $78;
   }
   $79 = $ref;
   $80 = $79 & 3;
   $81 = ($80|0)!=(0);
   if ($81) {
    label = 24;
    break;
   }
   $82 = $i;
   $83 = (($82) + 1)|0;
   $i = $83;
  }
  if ((label|0) == 24) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  $84 = $max_ref;
  $85 = $84 >> 2;
  $max_ref = $85;
  $86 = $1;
  $87 = $tsize;
  $88 = $87 << 1;
  $89 = (($86) + ($88)|0);
  $90 = ((($89)) + 762|0);
  $91 = (_readmem32b($90)|0);
  $ref_size = $91;
  $92 = $ref_size;
  $93 = ($92|0)>(65535);
  if ($93) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  $94 = $ref_size;
  $95 = $max_ref;
  $96 = (($95) + 1)|0;
  $97 = $96 << 2;
  $98 = ($94|0)!=($97|0);
  if ($98) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  $99 = $ref_size;
  $100 = $99 >> 2;
  $ref_size = $100;
  $i = 0;
  while(1) {
   $101 = $i;
   $102 = $ref_size;
   $103 = ($101|0)<($102|0);
   if (!($103)) {
    label = 44;
    break;
   }
   $104 = $1;
   $105 = $tsize;
   $106 = (($104) + ($105)|0);
   $107 = ((($106)) + 766|0);
   $108 = $i;
   $109 = $108<<2;
   $110 = (($107) + ($109)|0);
   $d1 = $110;
   $111 = $d1;
   $112 = ((($111)) + 2|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = $114 & 15;
   $116 = $115&255;
   $fxt = $116;
   $117 = $d1;
   $118 = ((($117)) + 3|0);
   $119 = HEAP8[$118>>0]|0;
   $fxp = $119;
   $120 = $fxt;
   $121 = $120&255;
   $122 = ($121|0)==(12);
   if ($122) {
    $123 = $fxp;
    $124 = $123&255;
    $125 = ($124|0)>(65);
    if ($125) {
     label = 34;
     break;
    }
   }
   $126 = $fxt;
   $127 = $126&255;
   $128 = ($127|0)==(13);
   if ($128) {
    $129 = $fxp;
    $130 = $129&255;
    $131 = ($130|0)>(64);
    if ($131) {
     label = 37;
     break;
    }
   }
   $132 = $fxt;
   $133 = $132&255;
   $134 = ($133|0)==(11);
   if ($134) {
    $135 = $fxp;
    $136 = $135&255;
    $137 = ($136|0)>(127);
    if ($137) {
     label = 40;
     break;
    }
   }
   $138 = $d1;
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = $140 & 240;
   $142 = ($141|0)>(16);
   if ($142) {
    label = 42;
    break;
   }
   $143 = $i;
   $144 = (($143) + 1)|0;
   $i = $144;
  }
  if ((label|0) == 34) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  else if ((label|0) == 37) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  else if ((label|0) == 40) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  else if ((label|0) == 42) {
   $0 = -1;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
  else if ((label|0) == 44) {
   $145 = $2;
   _pw_read_title(0,$145,0);
   $0 = 0;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
 }
 return (0)|0;
}
function _depack_pp30($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $in;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 $4 = (_depack_pp21_pp30($2,$3,1)|0);
 STACKTOP = sp;return ($4|0);
}
function _depack_pp21_pp30($in,$out,$is_30) {
 $in = $in|0;
 $out = $out|0;
 $is_30 = $is_30|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $buf = 0, $i = 0;
 var $j = 0, $max = 0, $numpat = 0, $ptable = 0, $size = 0, $ssize = 0, $tab = 0, $tabsize = 0, $tptr = 0, $trk = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 132800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 132664|0;
 $trk = sp + 132152|0;
 $tptr = sp + 32|0;
 $buf = sp + 131120|0;
 $0 = $in;
 $1 = $out;
 $2 = $is_30;
 $max = 0;
 $ssize = 0;
 $tabsize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trk|0),0,512)|0;
 _memset(($tptr|0),0,131072)|0;
 $3 = $1;
 (_pw_write_zero($3,20)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(31);
  $6 = $1;
  if (!($5)) {
   break;
  }
  (_pw_write_zero($6,22)|0);
  $7 = $1;
  $8 = $0;
  $9 = (_hio_read16b($8)|0);
  $10 = $9&65535;
  $size = $10;
  $11 = $10&65535;
  _write16b($7,$11);
  $12 = $size;
  $13 = $12<<1;
  $14 = $ssize;
  $15 = (($14) + ($13))|0;
  $ssize = $15;
  $16 = $1;
  $17 = $0;
  $18 = (_hio_read8($17)|0);
  _write8($16,$18);
  $19 = $1;
  $20 = $0;
  $21 = (_hio_read8($20)|0);
  _write8($19,$21);
  $22 = $1;
  $23 = $0;
  $24 = (_hio_read16b($23)|0);
  _write16b($22,$24);
  $25 = $1;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  _write16b($25,$27);
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $30 = $0;
 $31 = (_hio_read8($30)|0);
 $numpat = $31;
 _write8($6,$31);
 $32 = $1;
 $33 = $0;
 $34 = (_hio_read8($33)|0);
 _write8($32,$34);
 $max = 0;
 $j = 0;
 while(1) {
  $35 = $j;
  $36 = ($35|0)<(4);
  $i = 0;
  if (!($36)) {
   break;
  }
  while(1) {
   $37 = $i;
   $38 = ($37|0)<(128);
   if (!($38)) {
    break;
   }
   $39 = $0;
   $40 = (_hio_read8($39)|0);
   $41 = $i;
   $42 = $j;
   $43 = (($trk) + ($42<<7)|0);
   $44 = (($43) + ($41)|0);
   HEAP8[$44>>0] = $40;
   $45 = $i;
   $46 = $j;
   $47 = (($trk) + ($46<<7)|0);
   $48 = (($47) + ($45)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $max;
   $52 = ($50|0)>($51|0);
   if ($52) {
    $53 = $i;
    $54 = $j;
    $55 = (($trk) + ($54<<7)|0);
    $56 = (($55) + ($53)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $max = $58;
   }
   $59 = $i;
   $60 = (($59) + 1)|0;
   $i = $60;
  }
  $61 = $j;
  $62 = (($61) + 1)|0;
  $j = $62;
 }
 while(1) {
  $63 = $i;
  $64 = $numpat;
  $65 = $64&255;
  $66 = ($63|0)<($65|0);
  $67 = $1;
  $68 = $i;
  if (!($66)) {
   break;
  }
  $69 = $68&255;
  _write8($67,$69);
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = (128 - ($68))|0;
 (_pw_write_zero($67,$72)|0);
 $73 = $1;
 _write32b($73,1294879534);
 $j = 0;
 while(1) {
  $74 = $j;
  $75 = $max;
  $76 = ($74|0)<=($75|0);
  if (!($76)) {
   break;
  }
  $i = 0;
  while(1) {
   $77 = $i;
   $78 = ($77|0)<(64);
   if (!($78)) {
    break;
   }
   $79 = $0;
   $80 = (_hio_read16b($79)|0);
   $81 = $80&65535;
   $82 = $i;
   $83 = $j;
   $84 = (($tptr) + ($83<<8)|0);
   $85 = (($84) + ($82<<2)|0);
   HEAP32[$85>>2] = $81;
   $86 = $2;
   $87 = ($86|0)!=(0);
   if ($87) {
    $88 = $i;
    $89 = $j;
    $90 = (($tptr) + ($89<<8)|0);
    $91 = (($90) + ($88<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $92 >> 2;
    HEAP32[$91>>2] = $93;
   }
   $94 = $i;
   $95 = (($94) + 1)|0;
   $i = $95;
  }
  $96 = $j;
  $97 = (($96) + 1)|0;
  $j = $97;
 }
 $98 = $0;
 $99 = (_hio_read32b($98)|0);
 $tabsize = $99;
 $100 = $tabsize;
 $101 = (_malloc($100)|0);
 $tab = $101;
 $102 = $tab;
 $103 = $tabsize;
 $104 = $0;
 (_hio_read($102,$103,1,$104)|0);
 $i = 0;
 while(1) {
  $105 = $i;
  $106 = $numpat;
  $107 = $106&255;
  $108 = ($105|0)<($107|0);
  if (!($108)) {
   break;
  }
  _memset(($buf|0),0,1024)|0;
  $j = 0;
  while(1) {
   $109 = $j;
   $110 = ($109|0)<(64);
   if (!($110)) {
    break;
   }
   $111 = $j;
   $112 = $111<<4;
   $113 = (($buf) + ($112)|0);
   $b = $113;
   $114 = $b;
   $115 = $tab;
   $116 = $j;
   $117 = $i;
   $118 = (($trk) + ($117)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = (($tptr) + ($120<<8)|0);
   $122 = (($121) + ($116<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123<<2;
   $125 = (($115) + ($124)|0);
   ;HEAP8[$114>>0]=HEAP8[$125>>0]|0;HEAP8[$114+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$114+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$114+3>>0]=HEAP8[$125+3>>0]|0;
   $126 = $b;
   $127 = ((($126)) + 4|0);
   $128 = $tab;
   $129 = $j;
   $130 = $i;
   $131 = ((($trk)) + 128|0);
   $132 = (($131) + ($130)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($tptr) + ($134<<8)|0);
   $136 = (($135) + ($129<<2)|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $137<<2;
   $139 = (($128) + ($138)|0);
   ;HEAP8[$127>>0]=HEAP8[$139>>0]|0;HEAP8[$127+1>>0]=HEAP8[$139+1>>0]|0;HEAP8[$127+2>>0]=HEAP8[$139+2>>0]|0;HEAP8[$127+3>>0]=HEAP8[$139+3>>0]|0;
   $140 = $b;
   $141 = ((($140)) + 8|0);
   $142 = $tab;
   $143 = $j;
   $144 = $i;
   $145 = ((($trk)) + 256|0);
   $146 = (($145) + ($144)|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = (($tptr) + ($148<<8)|0);
   $150 = (($149) + ($143<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $151<<2;
   $153 = (($142) + ($152)|0);
   ;HEAP8[$141>>0]=HEAP8[$153>>0]|0;HEAP8[$141+1>>0]=HEAP8[$153+1>>0]|0;HEAP8[$141+2>>0]=HEAP8[$153+2>>0]|0;HEAP8[$141+3>>0]=HEAP8[$153+3>>0]|0;
   $154 = $b;
   $155 = ((($154)) + 12|0);
   $156 = $tab;
   $157 = $j;
   $158 = $i;
   $159 = ((($trk)) + 384|0);
   $160 = (($159) + ($158)|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($tptr) + ($162<<8)|0);
   $164 = (($163) + ($157<<2)|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165<<2;
   $167 = (($156) + ($166)|0);
   ;HEAP8[$155>>0]=HEAP8[$167>>0]|0;HEAP8[$155+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$155+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$155+3>>0]=HEAP8[$167+3>>0]|0;
   $168 = $j;
   $169 = (($168) + 1)|0;
   $j = $169;
  }
  $170 = $1;
  (_fwrite(($buf|0),1024,1,($170|0))|0);
  $171 = $i;
  $172 = (($171) + 1)|0;
  $i = $172;
 }
 $173 = $tab;
 _free($173);
 $174 = $1;
 $175 = $0;
 $176 = $ssize;
 (_pw_move_data($174,$175,$176)|0);
 STACKTOP = sp;return 0;
}
function _test_starpack($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $d = 0, $d1 = 0, $d2 = 0, $i = 0, $len = 0, $lend = 0, $or$cond = 0, $pdata_ofs = 0, $plist_size = 0, $sdata_ofs = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $1;
 $5 = ((($4)) + 268|0);
 $6 = (_readmem16b($5)|0);
 $7 = $6&65535;
 $plist_size = $7;
 $8 = $plist_size;
 $9 = $8 & 3;
 $10 = ($9|0)!=(0);
 if ($10) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $11 = $plist_size;
 $12 = $11 >> 2;
 $len = $12;
 $13 = $len;
 $14 = ($13|0)==(0);
 $15 = $len;
 $16 = ($15|0)>(127);
 $or$cond = $14 | $16;
 if ($or$cond) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $17 = $1;
 $18 = ((($17)) + 784|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)!=(0);
 if ($21) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22|0)<(31);
  if (!($23)) {
   break;
  }
  $24 = $1;
  $25 = $i;
  $26 = $25<<3;
  $27 = (($24) + ($26)|0);
  $d = $27;
  $28 = $d;
  $29 = ((($28)) + 20|0);
  $30 = (_readmem16b($29)|0);
  $31 = $30&65535;
  $32 = $31 << 1;
  $size = $32;
  $33 = $d;
  $34 = ((($33)) + 24|0);
  $35 = (_readmem16b($34)|0);
  $36 = $35&65535;
  $37 = $d;
  $38 = ((($37)) + 26|0);
  $39 = (_readmem16b($38)|0);
  $40 = $39&65535;
  $41 = (($36) + ($40))|0;
  $42 = $41 << 1;
  $lend = $42;
  $43 = $lend;
  $44 = $size;
  $45 = (($44) + 2)|0;
  $46 = ($43|0)>($45|0);
  if ($46) {
   label = 10;
   break;
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 if ((label|0) == 10) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(31);
  $51 = $1;
  if (!($50)) {
   break;
  }
  $52 = $i;
  $53 = $52<<3;
  $54 = (($51) + ($53)|0);
  $d1 = $54;
  $55 = $d1;
  $56 = ((($55)) + 22|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)>(15);
  if ($59) {
   label = 16;
   break;
  }
  $60 = $d1;
  $61 = ((($60)) + 23|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)>(64);
  if ($64) {
   label = 16;
   break;
  }
  $65 = $i;
  $66 = (($65) + 1)|0;
  $i = $66;
 }
 if ((label|0) == 16) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $67 = ((($51)) + 784|0);
 $68 = (_readmem32b($67)|0);
 $sdata_ofs = $68;
 $69 = $sdata_ofs;
 $70 = ($69|0)<(788);
 if ($70) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $i = 0;
 while(1) {
  $71 = $i;
  $72 = $len;
  $73 = ($71|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $1;
  $75 = $i;
  $76 = (($74) + ($75)|0);
  $77 = ((($76)) + 272|0);
  $78 = (_readmem32b($77)|0);
  $79 = $sdata_ofs;
  $80 = ($78>>>0)>($79>>>0);
  if ($80) {
   label = 23;
   break;
  }
  $81 = $i;
  $82 = (($81) + 4)|0;
  $i = $82;
 }
 if ((label|0) == 23) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $83 = $i;
 $84 = (($83) + 2)|0;
 $i = $84;
 while(1) {
  $85 = $i;
  $86 = ($85|0)<(128);
  if (!($86)) {
   break;
  }
  $87 = $1;
  $88 = $i;
  $89 = $88<<2;
  $90 = (($87) + ($89)|0);
  $91 = ((($90)) + 272|0);
  $92 = (_readmem32b($91)|0);
  $93 = ($92|0)!=(0);
  if ($93) {
   label = 28;
   break;
  }
  $94 = $i;
  $95 = (($94) + 1)|0;
  $i = $95;
 }
 if ((label|0) == 28) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 $pdata_ofs = 788;
 while(1) {
  $96 = $pdata_ofs;
  $97 = $sdata_ofs;
  $98 = (($97) + 4)|0;
  $99 = ($96|0)<($98|0);
  $100 = $1;
  if (!($99)) {
   label = 45;
   break;
  }
  $101 = $pdata_ofs;
  $102 = (($100) + ($101)|0);
  $d2 = $102;
  $103 = $d2;
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = ($105|0)==(128);
  if ($106) {
   $107 = $pdata_ofs;
   $108 = (($107) + 1)|0;
   $pdata_ofs = $108;
   continue;
  }
  $109 = $d2;
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = ($111|0)>(128);
  if ($112) {
   label = 35;
   break;
  }
  $113 = $d2;
  $114 = (_readmem32b($113)|0);
  $115 = ($114|0)==(0);
  if ($115) {
   label = 37;
   break;
  }
  $116 = $d2;
  $117 = ((($116)) + 2|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = ($119*15)|0;
  $121 = ($120|0)==(12);
  if ($121) {
   $122 = $d2;
   $123 = ((($122)) + 3|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = ($125|0)>(64);
   if ($126) {
    label = 40;
    break;
   }
  }
  $127 = $d2;
  $128 = ((($127)) + 2|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = ($130*15)|0;
  $132 = ($131|0)==(13);
  if ($132) {
   $133 = $d2;
   $134 = ((($133)) + 3|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = ($136|0)>(64);
   if ($137) {
    label = 43;
    break;
   }
  }
  $138 = $pdata_ofs;
  $139 = (($138) + 4)|0;
  $pdata_ofs = $139;
 }
 if ((label|0) == 35) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 37) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 40) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 43) {
  $0 = -1;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 45) {
  $140 = $2;
  _pw_read_title($100,$140,20);
  $0 = 0;
  $141 = $0;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function _depack_starpack($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $c5 = 0, $i = 0, $j = 0, $k = 0, $num_pat = 0, $ofs = 0, $paddr = 0, $paddr_tmp = 0, $paddr_tmp2 = 0, $pat_pos = 0, $pnum = 0;
 var $pnum_tmp = 0, $size = 0, $smp_addr = 0, $ssize = 0, $tmp1 = 0, $tmp2 = 0, $tmp_ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pnum = sp + 2760|0;
 $pnum_tmp = sp + 2632|0;
 $buffer = sp + 1600|0;
 $paddr = sp + 1048|0;
 $paddr_tmp = sp + 536|0;
 $paddr_tmp2 = sp + 24|0;
 $1 = $in;
 $2 = $out;
 $num_pat = 0;
 $i = 0;
 $j = 0;
 $k = 0;
 $ssize = 0;
 $smp_addr = 0;
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$pnum_tmp; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($paddr|0),0,512)|0;
 _memset(($paddr_tmp|0),0,512)|0;
 _memset(($paddr_tmp2|0),0,512)|0;
 $3 = $2;
 $4 = $1;
 (_pw_move_data($3,$4,20)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(31);
  if (!($6)) {
   break;
  }
  $7 = $2;
  (_pw_write_zero($7,22)|0);
  $8 = $2;
  $9 = $1;
  $10 = (_hio_read16b($9)|0);
  $11 = $10&65535;
  $size = $11;
  $12 = $11&65535;
  _write16b($8,$12);
  $13 = $size;
  $14 = $13<<1;
  $15 = $ssize;
  $16 = (($15) + ($14))|0;
  $ssize = $16;
  $17 = $2;
  $18 = $1;
  $19 = (_hio_read8($18)|0);
  _write8($17,$19);
  $20 = $2;
  $21 = $1;
  $22 = (_hio_read8($21)|0);
  _write8($20,$22);
  $23 = $2;
  $24 = $1;
  $25 = (_hio_read16b($24)|0);
  _write16b($23,$25);
  $26 = $2;
  $27 = $1;
  $28 = (_hio_read16b($27)|0);
  _write16b($26,$28);
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $1;
 $32 = (_hio_read16b($31)|0);
 $33 = $32&255;
 $pat_pos = $33;
 $34 = $pat_pos;
 $35 = $34&255;
 $36 = ($35|0)>=(128);
 if ($36) {
  $0 = -1;
  $323 = $0;
  STACKTOP = sp;return ($323|0);
 }
 $37 = $1;
 (_hio_seek($37,2,1)|0);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(128);
  if (!($39)) {
   break;
  }
  $40 = $1;
  $41 = (_hio_read32b($40)|0);
  $42 = $i;
  $43 = (($paddr) + ($42<<2)|0);
  HEAP32[$43>>2] = $41;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $tmp_ptr = 0;
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = $pat_pos;
  $48 = $47&255;
  $49 = ($46|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = ($50|0)==(0);
  if ($51) {
   HEAP8[$pnum>>0] = 0;
   $52 = $tmp_ptr;
   $53 = (($52) + 1)|0;
   $tmp_ptr = $53;
  } else {
   $j = 0;
   while(1) {
    $54 = $j;
    $55 = $i;
    $56 = ($54|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $i;
    $58 = (($paddr) + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $j;
    $61 = (($paddr) + ($60<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($59|0)==($62|0);
    $64 = $j;
    if ($63) {
     label = 16;
     break;
    }
    $69 = (($64) + 1)|0;
    $j = $69;
   }
   if ((label|0) == 16) {
    label = 0;
    $65 = (($pnum) + ($64)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $i;
    $68 = (($pnum) + ($67)|0);
    HEAP8[$68>>0] = $66;
   }
   $70 = $j;
   $71 = $i;
   $72 = ($70|0)==($71|0);
   if ($72) {
    $73 = $tmp_ptr;
    $74 = (($73) + 1)|0;
    $tmp_ptr = $74;
    $75 = $73&255;
    $76 = $i;
    $77 = (($pnum) + ($76)|0);
    HEAP8[$77>>0] = $75;
   }
  }
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = ($80|0)<(128);
  if (!($81)) {
   break;
  }
  $82 = $i;
  $83 = (($paddr) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $i;
  $86 = (($paddr_tmp) + ($85<<2)|0);
  HEAP32[$86>>2] = $84;
  $87 = $i;
  $88 = (($87) + 1)|0;
  $i = $88;
 }
 L32: while(1) {
  $i = 0;
  L34: while(1) {
   $89 = $i;
   $90 = $pat_pos;
   $91 = $90&255;
   $92 = ($89|0)<($91|0);
   $j = 0;
   if (!($92)) {
    break L32;
   }
   while(1) {
    $93 = $j;
    $94 = $i;
    $95 = ($93|0)<($94|0);
    $96 = $i;
    if (!($95)) {
     break;
    }
    $97 = (($paddr_tmp) + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $j;
    $100 = (($paddr_tmp) + ($99<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($98|0)<($101|0);
    $103 = $j;
    if ($102) {
     break L34;
    }
    $127 = (($103) + 1)|0;
    $j = $127;
   }
   $128 = (($96) + 1)|0;
   $i = $128;
  }
  $104 = (($pnum) + ($103)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $tmp2 = $106;
  $107 = $i;
  $108 = (($pnum) + ($107)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $j;
  $111 = (($pnum) + ($110)|0);
  HEAP8[$111>>0] = $109;
  $112 = $tmp2;
  $113 = $112&255;
  $114 = $i;
  $115 = (($pnum) + ($114)|0);
  HEAP8[$115>>0] = $113;
  $116 = $j;
  $117 = (($paddr_tmp) + ($116<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $tmp1 = $118;
  $119 = $i;
  $120 = (($paddr_tmp) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $j;
  $123 = (($paddr_tmp) + ($122<<2)|0);
  HEAP32[$123>>2] = $121;
  $124 = $tmp1;
  $125 = $i;
  $126 = (($paddr_tmp) + ($125<<2)|0);
  HEAP32[$126>>2] = $124;
 }
 $i = 0;
 while(1) {
  $129 = $i;
  $130 = ($129|0)<(128);
  if (!($130)) {
   break;
  }
  $131 = $i;
  $132 = ($131|0)==(0);
  $133 = $i;
  $134 = (($paddr_tmp) + ($133<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $j;
  $137 = (($paddr_tmp2) + ($136<<2)|0);
  if ($132) {
   HEAP32[$137>>2] = $135;
  } else {
   $138 = HEAP32[$137>>2]|0;
   $139 = ($135|0)==($138|0);
   if (!($139)) {
    $140 = $i;
    $141 = (($paddr_tmp) + ($140<<2)|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $j;
    $144 = (($143) + 1)|0;
    $j = $144;
    $145 = (($paddr_tmp2) + ($144<<2)|0);
    HEAP32[$145>>2] = $142;
   }
  }
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
 }
 $j = 0;
 $i = 0;
 while(1) {
  $148 = $i;
  $149 = $pat_pos;
  $150 = $149&255;
  $151 = (($150) - 1)|0;
  $152 = ($148|0)<($151|0);
  if (!($152)) {
   break;
  }
  $153 = $i;
  $154 = (($paddr_tmp2) + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $j;
  $157 = (($paddr_tmp) + ($156<<2)|0);
  HEAP32[$157>>2] = $155;
  $158 = $j;
  $159 = (($158) + 1)|0;
  $j = $159;
  $160 = $i;
  $161 = (($160) + 1)|0;
  $162 = (($paddr_tmp2) + ($161<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $i;
  $165 = (($paddr_tmp2) + ($164<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($163) - ($166))|0;
  $168 = ($167|0)>(1024);
  if ($168) {
   $169 = $i;
   $170 = (($paddr_tmp2) + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + 1024)|0;
   $173 = $j;
   $174 = (($paddr_tmp) + ($173<<2)|0);
   HEAP32[$174>>2] = $172;
   $175 = $j;
   $176 = (($175) + 1)|0;
   $j = $176;
  }
  $177 = $i;
  $178 = (($177) + 1)|0;
  $i = $178;
 }
 $i = 0;
 while(1) {
  $179 = $i;
  $180 = ($179|0)<(128);
  if (!($180)) {
   break;
  }
  $j = 0;
  while(1) {
   $181 = $j;
   $182 = ($181|0)<(128);
   if (!($182)) {
    break;
   }
   $183 = $i;
   $184 = (($paddr) + ($183<<2)|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $j;
   $187 = (($paddr_tmp) + ($186<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($185|0)==($188|0);
   $190 = $j;
   if ($189) {
    label = 48;
    break;
   }
   $194 = (($190) + 1)|0;
   $j = $194;
  }
  if ((label|0) == 48) {
   label = 0;
   $191 = $190&255;
   $192 = $i;
   $193 = (($pnum_tmp) + ($192)|0);
   HEAP8[$193>>0] = $191;
  }
  $195 = $i;
  $196 = (($195) + 1)|0;
  $i = $196;
 }
 dest=$pnum; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $197 = $i;
  $198 = $pat_pos;
  $199 = $198&255;
  $200 = ($197|0)<($199|0);
  if (!($200)) {
   break;
  }
  $201 = $i;
  $202 = (($pnum_tmp) + ($201)|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $i;
  $205 = (($pnum) + ($204)|0);
  HEAP8[$205>>0] = $203;
  $206 = $i;
  $207 = (($206) + 1)|0;
  $i = $207;
 }
 $208 = $2;
 $209 = $pat_pos;
 _write8($208,$209);
 $i = 0;
 while(1) {
  $210 = $i;
  $211 = $pat_pos;
  $212 = $211&255;
  $213 = ($210|0)<($212|0);
  if (!($213)) {
   break;
  }
  $214 = $i;
  $215 = (($pnum) + ($214)|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $216&255;
  $218 = $num_pat;
  $219 = $218&255;
  $220 = ($217|0)>($219|0);
  if ($220) {
   $221 = $i;
   $222 = (($pnum) + ($221)|0);
   $223 = HEAP8[$222>>0]|0;
   $num_pat = $223;
  }
  $224 = $i;
  $225 = (($224) + 1)|0;
  $i = $225;
 }
 $226 = $2;
 _write8($226,127);
 $227 = $2;
 (_fwrite(($pnum|0),128,1,($227|0))|0);
 $228 = $2;
 _write32b($228,1294879534);
 $229 = $1;
 (_hio_seek($229,784,0)|0);
 $230 = $1;
 $231 = (_hio_read32b($230)|0);
 $232 = (($231) + 788)|0;
 $smp_addr = $232;
 $233 = $num_pat;
 $234 = $233&255;
 $235 = (($234) + 1)|0;
 $236 = $235&255;
 $num_pat = $236;
 $i = 0;
 while(1) {
  $237 = $i;
  $238 = $num_pat;
  $239 = $238&255;
  $240 = ($237|0)<($239|0);
  if (!($240)) {
   break;
  }
  _memset(($buffer|0),0,1024)|0;
  $j = 0;
  while(1) {
   $241 = $j;
   $242 = ($241|0)<(64);
   if (!($242)) {
    break;
   }
   $k = 0;
   while(1) {
    $243 = $k;
    $244 = ($243|0)<(4);
    $245 = $j;
    if (!($244)) {
     break;
    }
    $246 = $245<<4;
    $247 = $k;
    $248 = $247<<2;
    $249 = (($246) + ($248))|0;
    $ofs = $249;
    $250 = $1;
    $251 = (_hio_read8($250)|0);
    $c1 = $251;
    $252 = $c1;
    $253 = $252&255;
    $254 = ($253|0)==(128);
    if (!($254)) {
     $255 = $1;
     $256 = (_hio_read8($255)|0);
     $c2 = $256;
     $257 = $1;
     $258 = (_hio_read8($257)|0);
     $c3 = $258;
     $259 = $1;
     $260 = (_hio_read8($259)|0);
     $c4 = $260;
     $261 = $c1;
     $262 = $261&255;
     $263 = $262 & 15;
     $264 = $263&255;
     $265 = $ofs;
     $266 = (($buffer) + ($265)|0);
     HEAP8[$266>>0] = $264;
     $267 = $c2;
     $268 = $ofs;
     $269 = (($268) + 1)|0;
     $270 = (($buffer) + ($269)|0);
     HEAP8[$270>>0] = $267;
     $271 = $c3;
     $272 = $271&255;
     $273 = $272 & 15;
     $274 = $273&255;
     $275 = $ofs;
     $276 = (($275) + 2)|0;
     $277 = (($buffer) + ($276)|0);
     HEAP8[$277>>0] = $274;
     $278 = $c4;
     $279 = $ofs;
     $280 = (($279) + 3)|0;
     $281 = (($buffer) + ($280)|0);
     HEAP8[$281>>0] = $278;
     $282 = $c1;
     $283 = $282&255;
     $284 = $283 & 240;
     $285 = $c3;
     $286 = $285&255;
     $287 = $286 >> 4;
     $288 = $287 & 15;
     $289 = $284 | $288;
     $290 = $289 >> 2;
     $291 = $290&255;
     $c5 = $291;
     $292 = $c5;
     $293 = $292&255;
     $294 = $293 & 240;
     $295 = $ofs;
     $296 = (($buffer) + ($295)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = $298 | $294;
     $300 = $299&255;
     HEAP8[$296>>0] = $300;
     $301 = $c5;
     $302 = $301&255;
     $303 = $302 << 4;
     $304 = $303 & 240;
     $305 = $ofs;
     $306 = (($305) + 2)|0;
     $307 = (($buffer) + ($306)|0);
     $308 = HEAP8[$307>>0]|0;
     $309 = $308&255;
     $310 = $309 | $304;
     $311 = $310&255;
     HEAP8[$307>>0] = $311;
    }
    $312 = $k;
    $313 = (($312) + 1)|0;
    $k = $313;
   }
   $314 = (($245) + 1)|0;
   $j = $314;
  }
  $315 = $2;
  (_fwrite(($buffer|0),1024,1,($315|0))|0);
  $316 = $i;
  $317 = (($316) + 1)|0;
  $i = $317;
 }
 $318 = $1;
 $319 = $smp_addr;
 (_hio_seek($318,$319,0)|0);
 $320 = $2;
 $321 = $1;
 $322 = $ssize;
 (_pw_move_data($320,$321,$322)|0);
 $0 = 0;
 $323 = $0;
 STACKTOP = sp;return ($323|0);
}
function _test_titanics($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $addr = 0, $addr1 = 0, $d = 0, $i = 0, $len = 0, $lsize = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $ssize = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(182);
 do {
  if ($5) {
   $6 = $3;
   $7 = (182 - ($6))|0;
   $0 = $7;
  } else {
   $ssize = 0;
   $i = 0;
   while(1) {
    $8 = $i;
    $9 = ($8|0)<(15);
    if (!($9)) {
     label = 20;
     break;
    }
    $10 = $1;
    $11 = $i;
    $12 = ($11*12)|0;
    $13 = (($10) + ($12)|0);
    $d = $13;
    $14 = $d;
    $15 = ((($14)) + 7|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = ($17|0)>(64);
    if ($18) {
     label = 6;
     break;
    }
    $19 = $d;
    $20 = ((($19)) + 6|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ($22|0)!=(0);
    if ($23) {
     label = 8;
     break;
    }
    $24 = $d;
    $25 = (_readmem32b($24)|0);
    $addr = $25;
    $26 = $addr;
    $27 = ($26|0)!=(0);
    $28 = $addr;
    $29 = ($28|0)<(180);
    $or$cond = $27 & $29;
    if ($or$cond) {
     label = 10;
     break;
    }
    $30 = $d;
    $31 = ((($30)) + 4|0);
    $32 = (_readmem16b($31)|0);
    $33 = $32&65535;
    $len = $33;
    $34 = $d;
    $35 = ((($34)) + 8|0);
    $36 = (_readmem16b($35)|0);
    $37 = $36&65535;
    $start = $37;
    $38 = $d;
    $39 = ((($38)) + 10|0);
    $40 = (_readmem16b($39)|0);
    $41 = $40&65535;
    $lsize = $41;
    $42 = $start;
    $43 = $len;
    $44 = ($42|0)>($43|0);
    if ($44) {
     label = 13;
     break;
    }
    $45 = $lsize;
    $46 = $len;
    $47 = (($46) + 1)|0;
    $48 = ($45|0)>($47|0);
    $49 = $len;
    $50 = ($49|0)>(32768);
    $or$cond3 = $48 | $50;
    if ($or$cond3) {
     label = 13;
     break;
    }
    $51 = $lsize;
    $52 = ($51|0)==(0);
    if ($52) {
     label = 15;
     break;
    }
    $53 = $len;
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = $start;
     $56 = ($55|0)!=(0);
     $57 = $lsize;
     $58 = ($57|0)!=(1);
     $or$cond5 = $56 | $58;
     if ($or$cond5) {
      label = 18;
      break;
     }
    }
    $59 = $len;
    $60 = $ssize;
    $61 = (($60) + ($59))|0;
    $ssize = $61;
    $62 = $i;
    $63 = (($62) + 1)|0;
    $i = $63;
   }
   if ((label|0) == 6) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 8) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 10) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 13) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 15) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 18) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 20) {
    $64 = $ssize;
    $65 = ($64|0)<(2);
    if ($65) {
     $0 = -1;
     break;
    }
    $addr1 = 0;
    $i = 0;
    while(1) {
     $66 = $i;
     $67 = ($66|0)<(256);
     if (!($67)) {
      break;
     }
     $68 = $1;
     $69 = $i;
     $70 = (($68) + ($69)|0);
     $71 = ((($70)) + 180|0);
     $72 = (_readmem16b($71)|0);
     $73 = $72&65535;
     $addr1 = $73;
     $74 = $addr1;
     $75 = ($74|0)==(65535);
     if ($75) {
      break;
     }
     $76 = $addr1;
     $77 = ($76|0)<(180);
     if ($77) {
      label = 26;
      break;
     }
     $78 = $i;
     $79 = (($78) + 2)|0;
     $i = $79;
    }
    if ((label|0) == 26) {
     $0 = -1;
     break;
    }
    $80 = $addr1;
    $81 = ($80|0)!=(65535);
    if ($81) {
     $0 = -1;
     break;
    } else {
     $82 = $2;
     _pw_read_title(0,$82,0);
     $0 = 0;
     break;
    }
   }
  }
 } while(0);
 $83 = $0;
 STACKTOP = sp;return ($83|0);
}
function _depack_titanics($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c = 0, $i = 0, $j = 0, $k = 0, $max = 0, $note = 0, $pat = 0, $pat_addr = 0, $pat_addr_final = 0, $pat_addr_ord = 0, $smp_addr = 0;
 var $smp_size = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 1664|0;
 $pat_addr = sp + 1104|0;
 $pat_addr_ord = sp + 592|0;
 $pat_addr_final = sp + 80|0;
 $smp_addr = sp + 16|0;
 $smp_size = sp + 1624|0;
 $0 = $in;
 $1 = $out;
 $max = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(128);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($pat_addr_final) + ($4<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = $i;
  $7 = (($pat_addr_ord) + ($6<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = $i;
  $9 = (($pat_addr) + ($8<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $1;
 (_pw_write_zero($12,20)|0);
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(15);
  if (!($14)) {
   break;
  }
  $15 = $0;
  $16 = (_hio_read32b($15)|0);
  $17 = $i;
  $18 = (($smp_addr) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $1;
  (_pw_write_zero($19,22)|0);
  $20 = $1;
  $21 = $0;
  $22 = (_hio_read16b($21)|0);
  $23 = $i;
  $24 = (($smp_size) + ($23<<1)|0);
  HEAP16[$24>>1] = $22;
  _write16b($20,$22);
  $25 = $i;
  $26 = (($smp_size) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $28<<1;
  $30 = $29&65535;
  HEAP16[$26>>1] = $30;
  $31 = $1;
  $32 = $0;
  $33 = (_hio_read8($32)|0);
  _write8($31,$33);
  $34 = $1;
  $35 = $0;
  $36 = (_hio_read8($35)|0);
  _write8($34,$36);
  $37 = $1;
  $38 = $0;
  $39 = (_hio_read16b($38)|0);
  _write16b($37,$39);
  $40 = $1;
  $41 = $0;
  $42 = (_hio_read16b($41)|0);
  _write16b($40,$42);
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $i = 15;
 while(1) {
  $45 = $i;
  $46 = ($45|0)<(31);
  if (!($46)) {
   break;
  }
  $47 = $1;
  (_pw_write_zero($47,22)|0);
  $48 = $1;
  _write16b($48,0);
  $49 = $1;
  _write8($49,0);
  $50 = $1;
  _write8($50,64);
  $51 = $1;
  _write16b($51,0);
  $52 = $1;
  _write16b($52,1);
  $53 = $i;
  $54 = (($53) + 1)|0;
  $i = $54;
 }
 $55 = $0;
 (_hio_read($buf,2,128,$55)|0);
 $pat = 0;
 while(1) {
  $56 = $pat;
  $57 = $56&255;
  $58 = ($57|0)<(128);
  if (!($58)) {
   break;
  }
  $59 = $pat;
  $60 = $59&255;
  $61 = $60<<1;
  $62 = (($buf) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = ($64|0)==(255);
  if ($65) {
   break;
  }
  $66 = $pat;
  $67 = $66&255;
  $68 = $67<<1;
  $69 = (($buf) + ($68)|0);
  $70 = (_readmem16b($69)|0);
  $71 = $70&65535;
  $72 = $pat;
  $73 = $72&255;
  $74 = (($pat_addr) + ($73<<2)|0);
  HEAP32[$74>>2] = $71;
  $75 = $pat;
  $76 = $75&255;
  $77 = (($pat_addr_ord) + ($76<<2)|0);
  HEAP32[$77>>2] = $71;
  $78 = $pat;
  $79 = (($78) + 1)<<24>>24;
  $pat = $79;
 }
 $80 = $1;
 $81 = $pat;
 _write8($80,$81);
 $82 = $1;
 _write8($82,127);
 $83 = $pat;
 $84 = $83&255;
 _qsort($pat_addr_ord,$84,4,284);
 $i = 0;
 $j = 0;
 while(1) {
  $85 = $i;
  $86 = $pat;
  $87 = $86&255;
  $88 = ($85|0)<($87|0);
  if (!($88)) {
   break;
  }
  $89 = $i;
  $90 = (($pat_addr_ord) + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $j;
  $93 = (($92) + 1)|0;
  $j = $93;
  $94 = (($pat_addr_final) + ($92<<2)|0);
  HEAP32[$94>>2] = $91;
  while(1) {
   $95 = $i;
   $96 = (($95) + 1)|0;
   $97 = (($pat_addr_ord) + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $i;
   $100 = (($pat_addr_ord) + ($99<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($98|0)==($101|0);
   if (!($102)) {
    break;
   }
   $103 = $i;
   $104 = $pat;
   $105 = $104&255;
   $106 = ($103|0)<($105|0);
   if (!($106)) {
    break;
   }
   $107 = $i;
   $108 = (($107) + 1)|0;
   $i = $108;
  }
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $111 = $i;
  $112 = $pat;
  $113 = $112&255;
  $114 = ($111|0)<($113|0);
  if (!($114)) {
   break;
  }
  $j = 0;
  while(1) {
   $115 = $i;
   $116 = (($pat_addr) + ($115<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $j;
   $119 = (($pat_addr_final) + ($118<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = ($117|0)!=($120|0);
   $122 = $j;
   if (!($121)) {
    break;
   }
   $123 = (($122) + 1)|0;
   $j = $123;
  }
  $124 = $122&255;
  $125 = $i;
  $126 = (($buf) + ($125)|0);
  HEAP8[$126>>0] = $124;
  $127 = $j;
  $128 = $max;
  $129 = ($127|0)>($128|0);
  if ($129) {
   $130 = $j;
   $max = $130;
  }
  $131 = $i;
  $132 = (($131) + 1)|0;
  $i = $132;
 }
 $133 = $1;
 (_fwrite(($buf|0),128,1,($133|0))|0);
 $134 = $1;
 _write32b($134,1294879534);
 $i = 0;
 while(1) {
  $135 = $i;
  $136 = $max;
  $137 = ($135|0)<=($136|0);
  if (!($137)) {
   break;
  }
  $138 = $0;
  $139 = $i;
  $140 = (($pat_addr_final) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  (_hio_seek($138,$141,0)|0);
  _memset(($buf|0),0,1024)|0;
  $142 = $0;
  $143 = (_hio_read8($142)|0);
  $x = $143;
  $k = 0;
  while(1) {
   $144 = $k;
   $145 = ($144|0)<(64);
   if (!($145)) {
    break;
   }
   $146 = $0;
   $147 = (_hio_read8($146)|0);
   $y = $147;
   $148 = $y;
   $149 = $148&255;
   $150 = $149 >> 6;
   $151 = $150<<2;
   $152 = $151&255;
   $c = $152;
   $153 = $y;
   $154 = $153&255;
   $155 = $154 & 63;
   $note = $155;
   $156 = $note;
   $157 = ($156|0)<=(36);
   if ($157) {
    $158 = $note;
    $159 = (7848 + ($158<<1)|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $k;
    $162 = $161<<4;
    $163 = $c;
    $164 = $163&255;
    $165 = (($162) + ($164))|0;
    $166 = (($buf) + ($165)|0);
    HEAP8[$166>>0] = $160;
    $167 = $note;
    $168 = (7848 + ($167<<1)|0);
    $169 = ((($168)) + 1|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $k;
    $172 = $171<<4;
    $173 = $c;
    $174 = $173&255;
    $175 = (($172) + ($174))|0;
    $176 = (($175) + 1)|0;
    $177 = (($buf) + ($176)|0);
    HEAP8[$177>>0] = $170;
   }
   $178 = $0;
   $179 = (_hio_read8($178)|0);
   $180 = $k;
   $181 = $180<<4;
   $182 = $c;
   $183 = $182&255;
   $184 = (($181) + ($183))|0;
   $185 = (($184) + 2)|0;
   $186 = (($buf) + ($185)|0);
   HEAP8[$186>>0] = $179;
   $187 = $0;
   $188 = (_hio_read8($187)|0);
   $189 = $k;
   $190 = $189<<4;
   $191 = $c;
   $192 = $191&255;
   $193 = (($190) + ($192))|0;
   $194 = (($193) + 3)|0;
   $195 = (($buf) + ($194)|0);
   HEAP8[$195>>0] = $188;
   $196 = $x;
   $197 = $196&255;
   $198 = $197 & 128;
   $199 = ($198|0)!=(0);
   if ($199) {
    break;
   }
   $200 = $0;
   $201 = (_hio_read8($200)|0);
   $x = $201;
   $202 = $x;
   $203 = $202&255;
   $204 = $203 & 127;
   $205 = $k;
   $206 = (($205) + ($204))|0;
   $k = $206;
  }
  $207 = $1;
  (_fwrite(($buf|0),1024,1,($207|0))|0);
  $208 = $i;
  $209 = (($208) + 1)|0;
  $i = $209;
 }
 $i = 0;
 while(1) {
  $210 = $i;
  $211 = ($210|0)<(15);
  if (!($211)) {
   break;
  }
  $212 = $i;
  $213 = (($smp_addr) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)!=(0);
  if ($215) {
   $216 = $0;
   $217 = $i;
   $218 = (($smp_addr) + ($217<<2)|0);
   $219 = HEAP32[$218>>2]|0;
   (_hio_seek($216,$219,0)|0);
   $220 = $1;
   $221 = $0;
   $222 = $i;
   $223 = (($smp_size) + ($222<<1)|0);
   $224 = HEAP16[$223>>1]|0;
   $225 = $224&65535;
   (_pw_move_data($220,$221,$225)|0);
  }
  $226 = $i;
  $227 = (($226) + 1)|0;
  $i = $227;
 }
 STACKTOP = sp;return 0;
}
function _cmplong($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)>($10|0);
 $12 = $11 ? 1 : -1;
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function _test_skyt($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(260);
 do {
  if ($5) {
   $6 = $3;
   $7 = (260 - ($6))|0;
   $0 = $7;
  } else {
   $i = 0;
   while(1) {
    $8 = $i;
    $9 = ($8|0)<(31);
    if (!($9)) {
     break;
    }
    $10 = $i;
    $11 = $10<<3;
    $12 = (($11) + 4)|0;
    $13 = $1;
    $14 = (($13) + ($12)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = ($16|0)>(64);
    if ($17) {
     label = 6;
     break;
    }
    $18 = $i;
    $19 = (($18) + 1)|0;
    $i = $19;
   }
   if ((label|0) == 6) {
    $0 = -1;
    break;
   }
   $20 = $1;
   $21 = ((($20)) + 256|0);
   $22 = (_readmem32b($21)|0);
   $23 = ($22|0)!=(1397446996);
   if ($23) {
    $0 = -1;
    break;
   } else {
    $24 = $2;
    _pw_read_title(0,$24,0);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _depack_skyt($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $k = 0, $pat = 0, $pat_pos = 0, $ptable = 0, $size = 0, $ssize = 0, $trk_addr = 0;
 var $trkval = 0, $x = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ptable = sp + 3120|0;
 $pat = sp + 2088|0;
 $trkval = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $i = 0;
 $j = 0;
 $k = 0;
 $ssize = 0;
 dest=$ptable; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($trkval|0),0,512)|0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $1;
  $7 = $0;
  $8 = (_hio_read16b($7)|0);
  $9 = $8&65535;
  $size = $9;
  $10 = $9&65535;
  _write16b($6,$10);
  $11 = $size;
  $12 = $11<<1;
  $13 = $ssize;
  $14 = (($13) + ($12))|0;
  $ssize = $14;
  $15 = $1;
  $16 = $0;
  $17 = (_hio_read8($16)|0);
  _write8($15,$17);
  $18 = $1;
  $19 = $0;
  $20 = (_hio_read8($19)|0);
  _write8($18,$20);
  $21 = $1;
  $22 = $0;
  $23 = (_hio_read16b($22)|0);
  _write16b($21,$23);
  $24 = $1;
  $25 = $0;
  $26 = (_hio_read16b($25)|0);
  _write16b($24,$26);
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 $29 = $0;
 (_hio_read32b($29)|0);
 $30 = $0;
 (_hio_read32b($30)|0);
 $31 = $0;
 (_hio_read32b($31)|0);
 $32 = $1;
 $33 = $0;
 $34 = (_hio_read8($33)|0);
 $35 = $34&255;
 $36 = (($35) + 1)|0;
 $37 = $36&255;
 $pat_pos = $37;
 _write8($32,$37);
 $38 = $1;
 _write8($38,127);
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $pat_pos;
  $41 = $40&255;
  $42 = ($39|0)<($41|0);
  if (!($42)) {
   break;
  }
  $j = 0;
  while(1) {
   $43 = $j;
   $44 = ($43|0)<(4);
   if (!($44)) {
    break;
   }
   $45 = $0;
   $46 = (_hio_read16b($45)|0);
   $47 = $46&65535;
   $48 = $j;
   $49 = $i;
   $50 = (($trkval) + ($49<<4)|0);
   $51 = (($50) + ($48<<2)|0);
   HEAP32[$51>>2] = $47;
   $52 = $j;
   $53 = (($52) + 1)|0;
   $j = $53;
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $i = 0;
 while(1) {
  $56 = $i;
  $57 = ($56|0)<(128);
  $58 = $1;
  if (!($57)) {
   break;
  }
  $59 = $i;
  $60 = $pat_pos;
  $61 = $60&255;
  $62 = ($59|0)<($61|0);
  $63 = $i;
  $64 = $62 ? $63 : 0;
  $65 = $64&255;
  _write8($58,$65);
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 _write32b($58,1294879534);
 $68 = $0;
 (_hio_read8($68)|0);
 $69 = $0;
 $70 = (_hio_tell($69)|0);
 $trk_addr = $70;
 $i = 0;
 while(1) {
  $71 = $i;
  $72 = $pat_pos;
  $73 = $72&255;
  $74 = ($71|0)<($73|0);
  if (!($74)) {
   break;
  }
  _memset(($pat|0),0,1024)|0;
  $j = 0;
  while(1) {
   $75 = $j;
   $76 = ($75|0)<(4);
   if (!($76)) {
    break;
   }
   $77 = $0;
   $78 = $trk_addr;
   $79 = $j;
   $80 = $i;
   $81 = (($trkval) + ($80<<4)|0);
   $82 = (($81) + ($79<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) - 1)|0;
   $85 = $84 << 8;
   $86 = (($78) + ($85))|0;
   (_hio_seek($77,$86,0)|0);
   $k = 0;
   while(1) {
    $87 = $k;
    $88 = ($87|0)<(64);
    if (!($88)) {
     break;
    }
    $89 = $k;
    $90 = $89<<4;
    $91 = $j;
    $92 = $91<<2;
    $93 = (($90) + ($92))|0;
    $x = $93;
    $94 = $0;
    $95 = (_hio_read8($94)|0);
    $c1 = $95;
    $96 = $0;
    $97 = (_hio_read8($96)|0);
    $c2 = $97;
    $98 = $0;
    $99 = (_hio_read8($98)|0);
    $c3 = $99;
    $100 = $0;
    $101 = (_hio_read8($100)|0);
    $c4 = $101;
    $102 = $c2;
    $103 = $102&255;
    $104 = $103 & 240;
    $105 = $c1;
    $106 = $105&255;
    $107 = (7848 + ($106<<1)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = $104 | $109;
    $111 = $110&255;
    $112 = $x;
    $113 = (($pat) + ($112)|0);
    HEAP8[$113>>0] = $111;
    $114 = $c1;
    $115 = $114&255;
    $116 = (7848 + ($115<<1)|0);
    $117 = ((($116)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $x;
    $120 = (($119) + 1)|0;
    $121 = (($pat) + ($120)|0);
    HEAP8[$121>>0] = $118;
    $122 = $c2;
    $123 = $122&255;
    $124 = $123 << 4;
    $125 = $124 & 240;
    $126 = $c3;
    $127 = $126&255;
    $128 = $125 | $127;
    $129 = $128&255;
    $130 = $x;
    $131 = (($130) + 2)|0;
    $132 = (($pat) + ($131)|0);
    HEAP8[$132>>0] = $129;
    $133 = $c4;
    $134 = $x;
    $135 = (($134) + 3)|0;
    $136 = (($pat) + ($135)|0);
    HEAP8[$136>>0] = $133;
    $137 = $k;
    $138 = (($137) + 1)|0;
    $k = $138;
   }
   $139 = $j;
   $140 = (($139) + 1)|0;
   $j = $140;
  }
  $141 = $1;
  (_fwrite(($pat|0),1024,1,($141|0))|0);
  $142 = $i;
  $143 = (($142) + 1)|0;
  $i = $143;
 }
 $144 = $1;
 $145 = $0;
 $146 = $ssize;
 (_pw_move_data($144,$145,$146)|0);
 STACKTOP = sp;return 0;
}
function _test_ntp($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(64);
 do {
  if ($5) {
   $6 = $3;
   $7 = (64 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = (_readmem32b($8)|0);
   $10 = ($9|0)!=(1297040469);
   if ($10) {
    $0 = -1;
    break;
   }
   $11 = $1;
   $12 = ((($11)) + 20|0);
   $13 = (_readmem16b($12)|0);
   $14 = $13&65535;
   $15 = (($14) + 4)|0;
   $j = $15;
   $16 = $1;
   $17 = ((($16)) + 28|0);
   $18 = (_readmem16b($17)|0);
   $19 = $18&65535;
   $20 = $j;
   $21 = (($19) + ($20))|0;
   $22 = (($21) + 4)|0;
   $k = $22;
   $23 = $3;
   $24 = $j;
   $25 = (($24) + 4)|0;
   $26 = ($23|0)<($25|0);
   if ($26) {
    $27 = $j;
    $28 = (($27) + 4)|0;
    $29 = $3;
    $30 = (($28) - ($29))|0;
    $0 = $30;
    break;
   }
   $31 = $1;
   $32 = $j;
   $33 = (($31) + ($32)|0);
   $34 = (_readmem32b($33)|0);
   $35 = ($34|0)!=(1112491097);
   if ($35) {
    $0 = -1;
    break;
   }
   $36 = $3;
   $37 = $k;
   $38 = (($37) + 4)|0;
   $39 = ($36|0)<($38|0);
   if ($39) {
    $40 = $k;
    $41 = (($40) + 4)|0;
    $42 = $3;
    $43 = (($41) - ($42))|0;
    $0 = $43;
    break;
   }
   $44 = $1;
   $45 = $k;
   $46 = (($44) + ($45)|0);
   $47 = (_readmem32b($46)|0);
   $48 = ($47|0)!=(1396788560);
   if ($48) {
    $0 = -1;
    break;
   } else {
    $49 = $1;
    $50 = ((($49)) + 4|0);
    $51 = $2;
    _pw_read_title($50,$51,16);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $52 = $0;
 STACKTOP = sp;return ($52|0);
}
function _depack_ntp($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $body_addr = 0, $buf = 0, $i = 0, $j = 0, $len = 0, $nins = 0, $npat = 0, $pat_addr = 0, $size = 0, $smp_addr = 0;
 var $ssize = 0, $x = 0, $x1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 560|0;
 $pat_addr = sp + 16|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $0;
 (_hio_read32b($2)|0);
 $3 = $1;
 $4 = $0;
 (_pw_move_data($3,$4,16)|0);
 $5 = $1;
 _write32b($5,0);
 $6 = $0;
 $7 = (_hio_read16b($6)|0);
 $8 = $7&65535;
 $9 = (($8) + 4)|0;
 $10 = $9&65535;
 $body_addr = $10;
 $11 = $0;
 $12 = (_hio_read16b($11)|0);
 $nins = $12;
 $13 = $0;
 $14 = (_hio_read16b($13)|0);
 $len = $14;
 $15 = $0;
 $16 = (_hio_read16b($15)|0);
 $npat = $16;
 $17 = $0;
 $18 = (_hio_read16b($17)|0);
 $19 = $18&65535;
 $20 = $body_addr;
 $21 = $20 << 16 >> 16;
 $22 = (($19) + ($21))|0;
 $23 = (($22) + 4)|0;
 $24 = $23&65535;
 $smp_addr = $24;
 _memset(($buf|0),0,930)|0;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $nins;
  $27 = $26 << 16 >> 16;
  $28 = ($25|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $0;
  $30 = (_hio_read8($29)|0);
  $31 = $30&255;
  $x = $31;
  $32 = $x;
  $33 = ($32|0)>(30);
  if ($33) {
   $34 = $0;
   (_hio_seek($34,7,1)|0);
  } else {
   $35 = $x;
   $36 = ($35*30)|0;
   $x = $36;
   $37 = $0;
   $38 = (_hio_read8($37)|0);
   $39 = $x;
   $40 = (($39) + 25)|0;
   $41 = (($buf) + ($40)|0);
   HEAP8[$41>>0] = $38;
   $42 = $0;
   $43 = (_hio_read16b($42)|0);
   $44 = $43&65535;
   $size = $44;
   $45 = $size;
   $46 = $45 >> 8;
   $47 = $46&255;
   $48 = $x;
   $49 = (($48) + 22)|0;
   $50 = (($buf) + ($49)|0);
   HEAP8[$50>>0] = $47;
   $51 = $size;
   $52 = $51 & 255;
   $53 = $52&255;
   $54 = $x;
   $55 = (($54) + 23)|0;
   $56 = (($buf) + ($55)|0);
   HEAP8[$56>>0] = $53;
   $57 = $size;
   $58 = $57<<1;
   $59 = $ssize;
   $60 = (($59) + ($58))|0;
   $ssize = $60;
   $61 = $0;
   $62 = (_hio_read8($61)|0);
   $63 = $x;
   $64 = (($63) + 26)|0;
   $65 = (($buf) + ($64)|0);
   HEAP8[$65>>0] = $62;
   $66 = $0;
   $67 = (_hio_read8($66)|0);
   $68 = $x;
   $69 = (($68) + 27)|0;
   $70 = (($buf) + ($69)|0);
   HEAP8[$70>>0] = $67;
   $71 = $0;
   $72 = (_hio_read8($71)|0);
   $73 = $x;
   $74 = (($73) + 28)|0;
   $75 = (($buf) + ($74)|0);
   HEAP8[$75>>0] = $72;
   $76 = $0;
   $77 = (_hio_read8($76)|0);
   $78 = $x;
   $79 = (($78) + 29)|0;
   $80 = (($buf) + ($79)|0);
   HEAP8[$80>>0] = $77;
  }
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $83 = $1;
 (_fwrite(($buf|0),930,1,($83|0))|0);
 $84 = $1;
 $85 = $len;
 $86 = $85&255;
 _write8($84,$86);
 $87 = $1;
 _write8($87,127);
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $88 = $i;
  $89 = $len;
  $90 = $89 << 16 >> 16;
  $91 = ($88|0)<($90|0);
  if (!($91)) {
   break;
  }
  $92 = $0;
  $93 = (_hio_read16b($92)|0);
  $94 = $93&255;
  $95 = $i;
  $96 = (($buf) + ($95)|0);
  HEAP8[$96>>0] = $94;
  $97 = $i;
  $98 = (($97) + 1)|0;
  $i = $98;
 }
 $99 = $1;
 (_fwrite(($buf|0),128,1,($99|0))|0);
 _memset(($pat_addr|0),0,256)|0;
 $i = 0;
 while(1) {
  $100 = $i;
  $101 = $npat;
  $102 = $101 << 16 >> 16;
  $103 = ($100|0)<($102|0);
  if (!($103)) {
   break;
  }
  $104 = $0;
  $105 = (_hio_read16b($104)|0);
  $106 = $105&65535;
  $107 = $i;
  $108 = (($pat_addr) + ($107<<2)|0);
  HEAP32[$108>>2] = $106;
  $109 = $i;
  $110 = (($109) + 1)|0;
  $i = $110;
 }
 $111 = $1;
 _write32b($111,1294879534);
 $i = 0;
 while(1) {
  $112 = $i;
  $113 = $npat;
  $114 = $113 << 16 >> 16;
  $115 = ($112|0)<($114|0);
  $116 = $0;
  if (!($115)) {
   break;
  }
  $117 = $body_addr;
  $118 = $117 << 16 >> 16;
  $119 = (($118) + 4)|0;
  $120 = $i;
  $121 = (($pat_addr) + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) + ($122))|0;
  (_hio_seek($116,$123,0)|0);
  _memset(($buf|0),0,1024)|0;
  $j = 0;
  while(1) {
   $124 = $j;
   $125 = ($124|0)<(64);
   if (!($125)) {
    break;
   }
   $126 = $0;
   $127 = (_hio_read16b($126)|0);
   $128 = $127&65535;
   $x1 = $128;
   $129 = $x1;
   $130 = $129 & 1;
   $131 = ($130|0)!=(0);
   if ($131) {
    $132 = $j;
    $133 = $132<<4;
    $134 = (($buf) + ($133)|0);
    $135 = $0;
    (_hio_read($134,1,4,$135)|0);
   }
   $136 = $x1;
   $137 = $136 & 2;
   $138 = ($137|0)!=(0);
   if ($138) {
    $139 = $j;
    $140 = $139<<4;
    $141 = (($buf) + ($140)|0);
    $142 = ((($141)) + 4|0);
    $143 = $0;
    (_hio_read($142,1,4,$143)|0);
   }
   $144 = $x1;
   $145 = $144 & 4;
   $146 = ($145|0)!=(0);
   if ($146) {
    $147 = $j;
    $148 = $147<<4;
    $149 = (($buf) + ($148)|0);
    $150 = ((($149)) + 8|0);
    $151 = $0;
    (_hio_read($150,1,4,$151)|0);
   }
   $152 = $x1;
   $153 = $152 & 8;
   $154 = ($153|0)!=(0);
   if ($154) {
    $155 = $j;
    $156 = $155<<4;
    $157 = (($buf) + ($156)|0);
    $158 = ((($157)) + 12|0);
    $159 = $0;
    (_hio_read($158,1,4,$159)|0);
   }
   $160 = $j;
   $161 = (($160) + 1)|0;
   $j = $161;
  }
  $162 = $1;
  (_fwrite(($buf|0),1024,1,($162|0))|0);
  $163 = $i;
  $164 = (($163) + 1)|0;
  $i = $164;
 }
 $165 = $smp_addr;
 $166 = $165 << 16 >> 16;
 (_hio_seek($116,$166,0)|0);
 $167 = $1;
 $168 = $0;
 $169 = $ssize;
 (_pw_move_data($167,$168,$169)|0);
 STACKTOP = sp;return 0;
}
function _test_hrt($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1084);
 do {
  if ($5) {
   $6 = $3;
   $7 = (1084 - ($6))|0;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = ((($8)) + 1080|0);
   $10 = (_readmem32b($9)|0);
   $11 = ($10|0)!=(1213355041);
   if ($11) {
    $0 = -1;
    break;
   }
   $i = 0;
   while(1) {
    $12 = $i;
    $13 = ($12|0)<(31);
    $14 = $1;
    if (!($13)) {
     label = 12;
     break;
    }
    $15 = ((($14)) + 20|0);
    $16 = $i;
    $17 = ($16*30)|0;
    $18 = (($15) + ($17)|0);
    $d = $18;
    $19 = $d;
    $20 = ((($19)) + 24|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ($22|0)>(15);
    if ($23) {
     label = 8;
     break;
    }
    $24 = $d;
    $25 = ((($24)) + 25|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = ($27|0)>(64);
    if ($28) {
     label = 10;
     break;
    }
    $29 = $i;
    $30 = (($29) + 1)|0;
    $i = $30;
   }
   if ((label|0) == 8) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 10) {
    $0 = -1;
    break;
   }
   else if ((label|0) == 12) {
    $31 = $2;
    _pw_read_title($14,$31,20);
    $0 = 0;
    break;
   }
  }
 } while(0);
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _depack_hrt($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $i = 0, $j = 0, $len = 0, $npat = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 _memset(($buf|0),0,950)|0;
 $2 = $0;
 (_hio_read($buf,950,1,$2)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = ((($buf)) + 38|0);
  $6 = $i;
  $7 = ($6*30)|0;
  $8 = (($5) + ($7)|0);
  HEAP32[$8>>2] = 0;
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $11 = $1;
 (_fwrite(($buf|0),950,1,($11|0))|0);
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(31);
  if (!($13)) {
   break;
  }
  $14 = ((($buf)) + 42|0);
  $15 = $i;
  $16 = ($15*30)|0;
  $17 = (($14) + ($16)|0);
  $18 = (_readmem16b($17)|0);
  $19 = $18&65535;
  $20 = $19<<1;
  $21 = $ssize;
  $22 = (($21) + ($20))|0;
  $ssize = $22;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $1;
 $26 = $0;
 $27 = (_hio_read8($26)|0);
 $28 = $27&255;
 $len = $28;
 $29 = $28&255;
 _write8($25,$29);
 $30 = $1;
 $31 = $0;
 $32 = (_hio_read8($31)|0);
 _write8($30,$32);
 $33 = $0;
 (_hio_read($buf,1,128,$33)|0);
 $npat = 0;
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = ($34|0)<(128);
  if (!($35)) {
   break;
  }
  $36 = $i;
  $37 = (($buf) + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $npat;
  $41 = ($39|0)>($40|0);
  if ($41) {
   $42 = $i;
   $43 = (($buf) + ($42)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $npat = $45;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $npat;
 $49 = (($48) + 1)|0;
 $npat = $49;
 $50 = $1;
 _write32b($50,1294879534);
 $51 = $0;
 (_hio_seek($51,1084,0)|0);
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $npat;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   break;
  }
  $j = 0;
  while(1) {
   $55 = $j;
   $56 = ($55|0)<(256);
   if (!($56)) {
    break;
   }
   $57 = $0;
   $58 = (_hio_read8($57)|0);
   HEAP8[$buf>>0] = $58;
   $59 = $0;
   $60 = (_hio_read8($59)|0);
   $61 = ((($buf)) + 1|0);
   HEAP8[$61>>0] = $60;
   $62 = $0;
   $63 = (_hio_read8($62)|0);
   $64 = ((($buf)) + 2|0);
   HEAP8[$64>>0] = $63;
   $65 = $0;
   $66 = (_hio_read8($65)|0);
   $67 = ((($buf)) + 3|0);
   HEAP8[$67>>0] = $66;
   $68 = HEAP8[$buf>>0]|0;
   $69 = $68&255;
   $70 = (($69|0) / 2)&-1;
   $71 = $70&255;
   HEAP8[$buf>>0] = $71;
   $72 = HEAP8[$buf>>0]|0;
   $73 = $72&255;
   $74 = $73 & 240;
   $75 = $74&255;
   $c1 = $75;
   $76 = ((($buf)) + 1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = ($78|0)==(0);
   if ($79) {
    $c2 = 0;
   } else {
    $80 = ((($buf)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81&255;
    $83 = (($82|0) / 2)&-1;
    $84 = (7848 + ($83<<1)|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $c1;
    $88 = $87&255;
    $89 = $88 | $86;
    $90 = $89&255;
    $c1 = $90;
    $91 = ((($buf)) + 1|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = (($93|0) / 2)&-1;
    $95 = (7848 + ($94<<1)|0);
    $96 = ((($95)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $c2 = $97;
   }
   $98 = HEAP8[$buf>>0]|0;
   $99 = $98&255;
   $100 = $99 << 4;
   $101 = $100 & 240;
   $102 = ((($buf)) + 2|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $101 | $104;
   $106 = $105&255;
   $c3 = $106;
   $107 = ((($buf)) + 3|0);
   $108 = HEAP8[$107>>0]|0;
   $c4 = $108;
   $109 = $1;
   $110 = $c1;
   _write8($109,$110);
   $111 = $1;
   $112 = $c2;
   _write8($111,$112);
   $113 = $1;
   $114 = $c3;
   _write8($113,$114);
   $115 = $1;
   $116 = $c4;
   _write8($115,$116);
   $117 = $j;
   $118 = (($117) + 1)|0;
   $j = $118;
  }
  $119 = $i;
  $120 = (($119) + 1)|0;
  $i = $120;
 }
 $121 = $1;
 $122 = $0;
 $123 = $ssize;
 (_pw_move_data($121,$122,$123)|0);
 STACKTOP = sp;return 0;
}
function _test_nru($data,$t,$s) {
 $data = $data|0;
 $t = $t|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $i = 0, $len = 0, $or$cond = 0, $psize = 0, $ssize = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $t;
 $3 = $s;
 $4 = $3;
 $5 = ($4|0)<(1500);
 if ($5) {
  $6 = $3;
  $7 = (1500 - ($6))|0;
  $0 = $7;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $8 = $1;
 $9 = ((($8)) + 1080|0);
 $10 = (_readmem32b($9)|0);
 $11 = ($10|0)!=(1294879534);
 if ($11) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $ssize = 0;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<(31);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $15 = ((($14)) + 6|0);
  $16 = $i;
  $17 = $16<<4;
  $18 = (($15) + ($17)|0);
  $19 = (_readmem16b($18)|0);
  $20 = $19&65535;
  $21 = $20<<1;
  $22 = $ssize;
  $23 = (($22) + ($21))|0;
  $ssize = $23;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = $ssize;
 $27 = ($26|0)==(0);
 if ($27) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = ($28|0)<(31);
  if (!($29)) {
   break;
  }
  $30 = $i;
  $31 = $30<<4;
  $32 = (1 + ($31))|0;
  $33 = $1;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)>(64);
  if ($37) {
   label = 13;
   break;
  }
  $38 = $i;
  $39 = (($38) + 1)|0;
  $i = $39;
 }
 if ((label|0) == 13) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $40 = $1;
 $41 = ((($40)) + 950|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $len = $43;
 $44 = $len;
 $45 = ($44|0)==(0);
 $46 = $len;
 $47 = ($46|0)>(127);
 $or$cond = $45 | $47;
 if ($or$cond) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $psize = 0;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = $len;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = (952 + ($51))|0;
  $53 = $1;
  $54 = (($53) + ($52)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $x = $56;
  $57 = $x;
  $58 = $psize;
  $59 = ($57|0)>($58|0);
  if ($59) {
   $60 = $x;
   $psize = $60;
  }
  $61 = $x;
  $62 = ($61|0)>(127);
  if ($62) {
   label = 22;
   break;
  }
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 if ((label|0) == 22) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 while(1) {
  $65 = $i;
  $66 = ($65|0)!=(128);
  if (!($66)) {
   break;
  }
  $67 = $i;
  $68 = (952 + ($67))|0;
  $69 = $1;
  $70 = (($69) + ($68)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = ($72|0)!=(0);
  if ($73) {
   label = 26;
   break;
  }
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 if ((label|0) == 26) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 $76 = $psize;
 $77 = (($76) + 1)|0;
 $psize = $77;
 $78 = $psize;
 $79 = $78 << 8;
 $psize = $79;
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = $psize;
  $82 = ($80|0)<($81|0);
  if (!($82)) {
   label = 37;
   break;
  }
  $83 = $1;
  $84 = ((($83)) + 1084|0);
  $85 = $i;
  $86 = $85<<2;
  $87 = (($84) + ($86)|0);
  $d = $87;
  $88 = $d;
  $89 = ((($88)) + 2|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = ($91|0)>(72);
  if ($92) {
   label = 31;
   break;
  }
  $93 = $d;
  $94 = ((($93)) + 3|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $96 & 7;
  $98 = ($97|0)!=(0);
  if ($98) {
   label = 33;
   break;
  }
  $99 = $d;
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $101 & 3;
  $103 = ($102|0)!=(0);
  if ($103) {
   label = 35;
   break;
  }
  $104 = $i;
  $105 = (($104) + 1)|0;
  $i = $105;
 }
 if ((label|0) == 31) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 else if ((label|0) == 33) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 else if ((label|0) == 35) {
  $0 = -1;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 else if ((label|0) == 37) {
  $106 = $2;
  _pw_read_title(0,$106,0);
  $0 = 0;
  $107 = $0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _depack_nru($in,$out) {
 $in = $in|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $addr = 0, $fine = 0, $fxp = 0, $fxt = 0, $i = 0, $ins = 0, $j = 0, $lsize = 0, $max_pat = 0, $note = 0, $pat_data = 0, $ptable = 0, $size = 0, $ssize = 0, $start = 0, $tmp = 0, $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 1208|0;
 $ptable = sp + 1080|0;
 $pat_data = sp + 48|0;
 $0 = $in;
 $1 = $out;
 $ssize = 0;
 $2 = $1;
 (_pw_write_zero($2,20)|0);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(31);
  if (!($4)) {
   break;
  }
  $5 = $1;
  (_pw_write_zero($5,22)|0);
  $6 = $0;
  (_hio_read8($6)|0);
  $7 = $0;
  $8 = (_hio_read8($7)|0);
  $9 = $8&255;
  $vol = $9;
  $10 = $0;
  $11 = (_hio_read32b($10)|0);
  $addr = $11;
  $12 = $1;
  $13 = $0;
  $14 = (_hio_read16b($13)|0);
  $15 = $14&65535;
  $size = $15;
  $16 = $15&65535;
  _write16b($12,$16);
  $17 = $size;
  $18 = $17<<1;
  $19 = $ssize;
  $20 = (($19) + ($18))|0;
  $ssize = $20;
  $21 = $0;
  $22 = (_hio_read32b($21)|0);
  $start = $22;
  $23 = $0;
  $24 = (_hio_read16b($23)|0);
  $25 = $24&65535;
  $lsize = $25;
  $26 = $0;
  $27 = (_hio_read16b($26)|0);
  $28 = $27&65535;
  $fine = $28;
  $j = 0;
  while(1) {
   $29 = $j;
   $30 = ($29|0)<(16);
   if (!($30)) {
    break;
   }
   $31 = $fine;
   $32 = $j;
   $33 = (10792 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($31|0)==($34|0);
   $36 = $j;
   if ($35) {
    label = 6;
    break;
   }
   $37 = (($36) + 1)|0;
   $j = $37;
  }
  if ((label|0) == 6) {
   label = 0;
   $fine = $36;
  }
  $38 = $j;
  $39 = ($38|0)==(16);
  if ($39) {
   $fine = 0;
  }
  $40 = $1;
  $41 = $fine;
  $42 = $41&255;
  _write8($40,$42);
  $43 = $1;
  $44 = $vol;
  $45 = $44&255;
  _write8($43,$45);
  $46 = $1;
  $47 = $start;
  $48 = $addr;
  $49 = (($47) - ($48))|0;
  $50 = (($49|0) / 2)&-1;
  $51 = $50&65535;
  _write16b($46,$51);
  $52 = $1;
  $53 = $lsize;
  $54 = $53&65535;
  _write16b($52,$54);
  $55 = $i;
  $56 = (($55) + 1)|0;
  $i = $56;
 }
 $57 = $0;
 (_hio_seek($57,950,0)|0);
 $58 = $1;
 $59 = $0;
 $60 = (_hio_read8($59)|0);
 _write8($58,$60);
 $61 = $1;
 $62 = $0;
 $63 = (_hio_read8($62)|0);
 _write8($61,$63);
 $max_pat = 0;
 $64 = $0;
 (_hio_read($ptable,128,1,$64)|0);
 $65 = $1;
 (_fwrite(($ptable|0),128,1,($65|0))|0);
 $i = 0;
 while(1) {
  $66 = $i;
  $67 = ($66|0)<(128);
  if (!($67)) {
   break;
  }
  $68 = $i;
  $69 = (($ptable) + ($68)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $max_pat;
  $73 = ($71|0)>($72|0);
  if ($73) {
   $74 = $i;
   $75 = (($ptable) + ($74)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $max_pat = $77;
  }
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $80 = $max_pat;
 $81 = (($80) + 1)|0;
 $max_pat = $81;
 $82 = $1;
 _write32b($82,1294879534);
 $83 = $0;
 (_hio_seek($83,1084,0)|0);
 $i = 0;
 while(1) {
  $84 = $i;
  $85 = $max_pat;
  $86 = ($84|0)<($85|0);
  if (!($86)) {
   break;
  }
  _memset(($pat_data|0),0,1025)|0;
  $87 = $0;
  (_hio_read($tmp,1024,1,$87)|0);
  $j = 0;
  while(1) {
   $88 = $j;
   $89 = ($88|0)<(256);
   if (!($89)) {
    break;
   }
   $90 = $j;
   $91 = $90<<2;
   $92 = (($91) + 3)|0;
   $93 = (($tmp) + ($92)|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = $95 >> 3;
   $97 = $96 & 31;
   $98 = $97&255;
   $ins = $98;
   $99 = $j;
   $100 = $99<<2;
   $101 = (($100) + 2)|0;
   $102 = (($tmp) + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $note = $103;
   $104 = $j;
   $105 = $104<<2;
   $106 = (($tmp) + ($105)|0);
   $107 = HEAP8[$106>>0]|0;
   $fxt = $107;
   $108 = $j;
   $109 = $108<<2;
   $110 = (($109) + 1)|0;
   $111 = (($tmp) + ($110)|0);
   $112 = HEAP8[$111>>0]|0;
   $fxp = $112;
   $113 = $fxt;
   $114 = $113&255;
   if ((($114|0) == 12)) {
    $fxt = 0;
   } else if ((($114|0) == 0)) {
    $fxt = 3;
   } else {
    $115 = $fxt;
    $116 = $115&255;
    $117 = $116 >> 2;
    $118 = $117&255;
    $fxt = $118;
   }
   $119 = $ins;
   $120 = $119&255;
   $121 = $120 & 240;
   $122 = $121&255;
   $123 = $j;
   $124 = $123<<2;
   $125 = (($pat_data) + ($124)|0);
   HEAP8[$125>>0] = $122;
   $126 = $note;
   $127 = $126&255;
   $128 = (($127|0) / 2)&-1;
   $129 = (7848 + ($128<<1)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $j;
   $133 = $132<<2;
   $134 = (($pat_data) + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = $136 | $131;
   $138 = $137&255;
   HEAP8[$134>>0] = $138;
   $139 = $note;
   $140 = $139&255;
   $141 = (($140|0) / 2)&-1;
   $142 = (7848 + ($141<<1)|0);
   $143 = ((($142)) + 1|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $j;
   $146 = $145<<2;
   $147 = (($146) + 1)|0;
   $148 = (($pat_data) + ($147)|0);
   HEAP8[$148>>0] = $144;
   $149 = $ins;
   $150 = $149&255;
   $151 = $150 << 4;
   $152 = $151 & 240;
   $153 = $152&255;
   $154 = $j;
   $155 = $154<<2;
   $156 = (($155) + 2)|0;
   $157 = (($pat_data) + ($156)|0);
   HEAP8[$157>>0] = $153;
   $158 = $fxt;
   $159 = $158&255;
   $160 = $j;
   $161 = $160<<2;
   $162 = (($161) + 2)|0;
   $163 = (($pat_data) + ($162)|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = $165 | $159;
   $167 = $166&255;
   HEAP8[$163>>0] = $167;
   $168 = $fxp;
   $169 = $j;
   $170 = $169<<2;
   $171 = (($170) + 3)|0;
   $172 = (($pat_data) + ($171)|0);
   HEAP8[$172>>0] = $168;
   $173 = $j;
   $174 = (($173) + 1)|0;
   $j = $174;
  }
  $175 = $1;
  (_fwrite(($pat_data|0),1024,1,($175|0))|0);
  $176 = $i;
  $177 = (($176) + 1)|0;
  $i = $177;
 }
 $178 = $1;
 $179 = $0;
 $180 = $ssize;
 (_pw_move_data($178,$179,$180)|0);
 STACKTOP = sp;return 0;
}
function _virt_getroot($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($4<<3)|0);
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $voc = $11;
 $12 = $voc;
 $13 = ($12|0)<(0);
 if ($13) {
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $14 = $voc;
  $15 = $p;
  $16 = ((($15)) + 944|0);
  $17 = ((($16)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + (($14*116)|0)|0);
  $vi = $19;
  $20 = $vi;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _virt_resetvoice($ctx,$voc,$mute) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $mute = $mute|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $mute;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $1;
 $11 = $p;
 $12 = ((($11)) + 944|0);
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $0;
  $19 = $1;
  _mixer_setvol($18,$19,0);
 }
 $20 = $p;
 $21 = ((($20)) + 944|0);
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[$22>>2] = $24;
 $25 = $vi;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $p;
 $29 = ((($28)) + 944|0);
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($27<<3)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + -1)|0;
 HEAP32[$32>>2] = $34;
 $35 = $vi;
 $36 = HEAP32[$35>>2]|0;
 $37 = $p;
 $38 = ((($37)) + 944|0);
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($36<<3)|0);
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = -1;
 $43 = $vi;
 dest=$43; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $44 = $vi;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = -1;
 $46 = $vi;
 HEAP32[$46>>2] = -1;
 STACKTOP = sp;return;
}
function _virt_on($ctx,$num) {
 $ctx = $ctx|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $m = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $num;
 $3 = $1;
 $p = $3;
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $2;
 $7 = $p;
 $8 = ((($7)) + 944|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = (_mixer_numvoices($9,-1)|0);
 $2 = $10;
 $11 = $p;
 $12 = ((($11)) + 944|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $p;
 $15 = ((($14)) + 944|0);
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $13;
 $17 = $m;
 $18 = ((($17)) + 1284|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 32768;
 $21 = ($20|0)!=(0);
 $22 = $2;
 $23 = $p;
 $24 = ((($23)) + 944|0);
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 if ($21) {
  $27 = (($26) + ($22))|0;
  HEAP32[$25>>2] = $27;
 } else {
  $28 = ($22|0)>($26|0);
  if ($28) {
   $29 = $p;
   $30 = ((($29)) + 944|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $2 = $32;
  }
 }
 $33 = $1;
 $34 = $2;
 $35 = (_mixer_numvoices($33,$34)|0);
 $36 = $p;
 $37 = ((($36)) + 944|0);
 $38 = ((($37)) + 12|0);
 HEAP32[$38>>2] = $35;
 $39 = $p;
 $40 = ((($39)) + 944|0);
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (_calloc($42,116)|0);
 $44 = $p;
 $45 = ((($44)) + 944|0);
 $46 = ((($45)) + 20|0);
 HEAP32[$46>>2] = $43;
 $47 = $p;
 $48 = ((($47)) + 944|0);
 $49 = ((($48)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 do {
  if (!($51)) {
   $i = 0;
   while(1) {
    $52 = $i;
    $53 = $p;
    $54 = ((($53)) + 944|0);
    $55 = ((($54)) + 12|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($52|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $i;
    $59 = $p;
    $60 = ((($59)) + 944|0);
    $61 = ((($60)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + (($58*116)|0)|0);
    HEAP32[$63>>2] = -1;
    $64 = $i;
    $65 = $p;
    $66 = ((($65)) + 944|0);
    $67 = ((($66)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + (($64*116)|0)|0);
    $70 = ((($69)) + 4|0);
    HEAP32[$70>>2] = -1;
    $71 = $i;
    $72 = (($71) + 1)|0;
    $i = $72;
   }
   $73 = $p;
   $74 = ((($73)) + 944|0);
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76<<3;
   $78 = (_malloc($77)|0);
   $79 = $p;
   $80 = ((($79)) + 944|0);
   $81 = ((($80)) + 16|0);
   HEAP32[$81>>2] = $78;
   $82 = $p;
   $83 = ((($82)) + 944|0);
   $84 = ((($83)) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0|0);
   if ($86) {
    $111 = $p;
    $112 = ((($111)) + 944|0);
    $113 = ((($112)) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    _free($114);
    break;
   }
   $i = 0;
   while(1) {
    $87 = $i;
    $88 = $p;
    $89 = ((($88)) + 944|0);
    $90 = ((($89)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($87|0)<($91|0);
    if (!($92)) {
     break;
    }
    $93 = $i;
    $94 = $p;
    $95 = ((($94)) + 944|0);
    $96 = ((($95)) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + ($93<<3)|0);
    $99 = ((($98)) + 4|0);
    HEAP32[$99>>2] = -1;
    $100 = $i;
    $101 = $p;
    $102 = ((($101)) + 944|0);
    $103 = ((($102)) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($100<<3)|0);
    HEAP32[$105>>2] = 0;
    $106 = $i;
    $107 = (($106) + 1)|0;
    $i = $107;
   }
   $108 = $p;
   $109 = ((($108)) + 944|0);
   $110 = ((($109)) + 8|0);
   HEAP32[$110>>2] = 0;
   $0 = 0;
   $115 = $0;
   STACKTOP = sp;return ($115|0);
  }
 } while(0);
 $0 = -1;
 $115 = $0;
 STACKTOP = sp;return ($115|0);
}
function _virt_off($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 944|0);
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $p;
 $9 = ((($8)) + 944|0);
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = $p;
 $12 = ((($11)) + 944|0);
 HEAP32[$12>>2] = 0;
 $13 = $p;
 $14 = ((($13)) + 944|0);
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = $p;
 $18 = ((($17)) + 944|0);
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 _free($20);
 STACKTOP = sp;return;
}
function _virt_reset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 944|0);
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $p;
 $9 = ((($8)) + 944|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 (_mixer_numvoices($7,$11)|0);
 $12 = $p;
 $13 = ((($12)) + 944|0);
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $p;
 $17 = ((($16)) + 944|0);
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19*116)|0;
 _memset(($15|0),0,($20|0))|0;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $p;
  $23 = ((($22)) + 944|0);
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = $p;
  $29 = ((($28)) + 944|0);
  $30 = ((($29)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($27*116)|0)|0);
  HEAP32[$32>>2] = -1;
  $33 = $i;
  $34 = $p;
  $35 = ((($34)) + 944|0);
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + (($33*116)|0)|0);
  $39 = ((($38)) + 4|0);
  HEAP32[$39>>2] = -1;
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $i = 0;
 while(1) {
  $42 = $i;
  $43 = $p;
  $44 = ((($43)) + 944|0);
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($42|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $i;
  $49 = $p;
  $50 = ((($49)) + 944|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($48<<3)|0);
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = -1;
  $55 = $i;
  $56 = $p;
  $57 = ((($56)) + 944|0);
  $58 = ((($57)) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($55<<3)|0);
  HEAP32[$60>>2] = 0;
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $63 = $p;
 $64 = ((($63)) + 944|0);
 $65 = ((($64)) + 8|0);
 HEAP32[$65>>2] = 0;
 STACKTOP = sp;return;
}
function _virt_mapchannel($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $3 = $1;
 $4 = (_map_virt_channel($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _virt_resetchannel($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $p;
 $4 = $1;
 $5 = (_map_virt_channel($3,$4)|0);
 $voc = $5;
 $6 = ($5|0)<(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $voc;
 _mixer_setvol($7,$8,0);
 $9 = $p;
 $10 = ((($9)) + 944|0);
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -1)|0;
 HEAP32[$11>>2] = $13;
 $14 = $voc;
 $15 = $p;
 $16 = ((($15)) + 944|0);
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($14*116)|0)|0);
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $p;
 $23 = ((($22)) + 944|0);
 $24 = ((($23)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($21<<3)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + -1)|0;
 HEAP32[$26>>2] = $28;
 $29 = $1;
 $30 = $p;
 $31 = ((($30)) + 944|0);
 $32 = ((($31)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($29<<3)|0);
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = -1;
 $36 = $voc;
 $37 = $p;
 $38 = ((($37)) + 944|0);
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + (($36*116)|0)|0);
 dest=$41; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $42 = $voc;
 $43 = $p;
 $44 = ((($43)) + 944|0);
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + (($42*116)|0)|0);
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = -1;
 $49 = $voc;
 $50 = $p;
 $51 = ((($50)) + 944|0);
 $52 = ((($51)) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + (($49*116)|0)|0);
 HEAP32[$54>>2] = -1;
 STACKTOP = sp;return;
}
function _virt_setvol($ctx,$chn,$vol) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $root = 0, $voc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $vol;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $voc;
 $9 = $p;
 $10 = ((($9)) + 944|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($8*116)|0)|0);
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $root = $15;
 $16 = $root;
 $17 = ($16|0)<(64);
 if ($17) {
  $18 = $root;
  $19 = $p;
  $20 = ((($19)) + 880|0);
  $21 = (($20) + ($18)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if ($24) {
   $2 = 0;
  }
 }
 $25 = $0;
 $26 = $voc;
 $27 = $2;
 _mixer_setvol($25,$26,$27);
 $28 = $2;
 $29 = ($28|0)==(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = $1;
 $31 = $p;
 $32 = ((($31)) + 944|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($30|0)>=($33|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = $voc;
 _virt_resetvoice($35,$36,1);
 STACKTOP = sp;return;
}
function _virt_setpan($ctx,$chn,$pan) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $pan = $pan|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $pan;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_setpan($8,$9,$10);
 STACKTOP = sp;return;
}
function _virt_seteffect($ctx,$chn,$type,$val) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $type = $type|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $type;
 $3 = $val;
 $4 = $0;
 $p = $4;
 $5 = $p;
 $6 = $1;
 $7 = (_map_virt_channel($5,$6)|0);
 $voc = $7;
 $8 = ($7|0)<(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $voc;
 $11 = $2;
 $12 = $3;
 _mixer_seteffect($9,$10,$11,$12);
 STACKTOP = sp;return;
}
function _virt_getvoicepos($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $p;
 $5 = $2;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $0 = -1;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = $1;
  $9 = $voc;
  $10 = (_mixer_getvoicepos($8,$9)|0);
  $0 = $10;
  $11 = $0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _virt_setsmp($ctx,$chn,$smp) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $smp = $smp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0, $p = 0, $pos = 0, $vi = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $smp;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $voc;
 $9 = $p;
 $10 = ((($9)) + 944|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($8*116)|0)|0);
 $vi = $13;
 $14 = $vi;
 $15 = ((($14)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ($16|0)==($17|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = $vi;
 $20 = ((($19)) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $pos = $21;
 $22 = $vi;
 $23 = ((($22)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $frac = $24;
 $25 = $0;
 $26 = $voc;
 $27 = $2;
 _mixer_setpatch($25,$26,$27);
 $28 = $0;
 $29 = $voc;
 $30 = $pos;
 $31 = $frac;
 _mixer_voicepos($28,$29,$30,$31);
 STACKTOP = sp;return;
}
function _virt_setnna($ctx,$chn,$nna) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $nna = $nna|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $nna;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = $voc;
 $10 = $p;
 $11 = ((($10)) + 944|0);
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($9*116)|0)|0);
 $15 = ((($14)) + 56|0);
 HEAP32[$15>>2] = $8;
 STACKTOP = sp;return;
}
function _virt_setnote($ctx,$chn,$note) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $note = $note|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $note;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_setnote($8,$9,$10);
 STACKTOP = sp;return;
}
function _virt_setpatch($ctx,$chn,$ins,$smp,$note,$nna,$dct,$dca) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $ins = $ins|0;
 $smp = $smp|0;
 $note = $note|0;
 $nna = $nna|0;
 $dct = $dct|0;
 $dca = $dca|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $p = 0;
 var $vfree = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $ins;
 $4 = $smp;
 $5 = $note;
 $6 = $nna;
 $7 = $dct;
 $8 = $dca;
 $9 = $1;
 $p = $9;
 $10 = $2;
 $11 = $p;
 $12 = ((($11)) + 944|0);
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10>>>0)>=($14>>>0);
 if ($15) {
  $0 = -1;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $16 = $3;
 $17 = ($16|0)<(0);
 if ($17) {
  $4 = -1;
 }
 $18 = $7;
 $19 = ($18|0)!=(0);
 L8: do {
  if ($19) {
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $p;
    $22 = ((($21)) + 944|0);
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($20|0)<($24|0);
    if (!($25)) {
     break L8;
    }
    $26 = $1;
    $27 = $i;
    $28 = $2;
    $29 = $3;
    $30 = $4;
    $31 = $5;
    $32 = $7;
    $33 = $8;
    _check_dct($26,$27,$28,$29,$30,$31,$32,$33);
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
  }
 } while(0);
 $36 = $2;
 $37 = $p;
 $38 = ((($37)) + 944|0);
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + ($36<<3)|0);
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $voc = $43;
 $44 = $voc;
 $45 = ($44|0)>(-1);
 if ($45) {
  $46 = $voc;
  $47 = $p;
  $48 = ((($47)) + 944|0);
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + (($46*116)|0)|0);
  $52 = ((($51)) + 56|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $1;
   $56 = $2;
   $57 = (_alloc_voice($55,$56)|0);
   $vfree = $57;
   $58 = $p;
   $59 = ((($58)) + 944|0);
   $60 = HEAP32[$59>>2]|0;
   $2 = $60;
   while(1) {
    $61 = $2;
    $62 = (($61) + 1)|0;
    $2 = $62;
    $63 = $p;
    $64 = ((($63)) + 944|0);
    $65 = ((($64)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + ($61<<3)|0);
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)>(-1);
    if (!($70)) {
     break;
    }
   }
   $71 = $2;
   $72 = (($71) + -1)|0;
   $2 = $72;
   $73 = $voc;
   $74 = $p;
   $75 = ((($74)) + 944|0);
   $76 = ((($75)) + 20|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + (($73*116)|0)|0);
   HEAP32[$78>>2] = $72;
   $79 = $voc;
   $80 = $2;
   $81 = $p;
   $82 = ((($81)) + 944|0);
   $83 = ((($82)) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($80<<3)|0);
   $86 = ((($85)) + 4|0);
   HEAP32[$86>>2] = $79;
   $87 = $vfree;
   $voc = $87;
  }
 } else {
  $88 = $1;
  $89 = $2;
  $90 = (_alloc_voice($88,$89)|0);
  $voc = $90;
 }
 $91 = $4;
 $92 = ($91|0)<(0);
 $93 = $1;
 $94 = $voc;
 if ($92) {
  _virt_resetvoice($93,$94,1);
  $95 = $2;
  $0 = $95;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 } else {
  $96 = $4;
  _mixer_setpatch($93,$94,$96);
  $97 = $1;
  $98 = $voc;
  $99 = $5;
  _mixer_setnote($97,$98,$99);
  $100 = $3;
  $101 = $voc;
  $102 = $p;
  $103 = ((($102)) + 944|0);
  $104 = ((($103)) + 20|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + (($101*116)|0)|0);
  $107 = ((($106)) + 44|0);
  HEAP32[$107>>2] = $100;
  $108 = $6;
  $109 = $voc;
  $110 = $p;
  $111 = ((($110)) + 944|0);
  $112 = ((($111)) + 20|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + (($109*116)|0)|0);
  $115 = ((($114)) + 56|0);
  HEAP32[$115>>2] = $108;
  $116 = $2;
  $0 = $116;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function _virt_setbend($ctx,$chn,$bend) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $bend = $bend|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $bend;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_setbend($8,$9,$10);
 STACKTOP = sp;return;
}
function _virt_voicepos($ctx,$chn,$pos) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $pos;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = $1;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $voc;
 $10 = $2;
 _mixer_voicepos($8,$9,$10,0);
 STACKTOP = sp;return;
}
function _virt_pastnote($ctx,$chn,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $p = 0, $voc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $act;
 $3 = $0;
 $p = $3;
 $4 = $p;
 $5 = ((($4)) + 944|0);
 $6 = HEAP32[$5>>2]|0;
 $c = $6;
 while(1) {
  $7 = $c;
  $8 = $p;
  $9 = ((($8)) + 944|0);
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($7|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $p;
  $14 = $c;
  $15 = (_map_virt_channel($13,$14)|0);
  $voc = $15;
  $16 = ($15|0)<(0);
  do {
   if (!($16)) {
    $17 = $voc;
    $18 = $p;
    $19 = ((($18)) + 944|0);
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + (($17*116)|0)|0);
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $1;
    $26 = ($24|0)==($25|0);
    if ($26) {
     $27 = $2;
     if ((($27|0) == 0)) {
      $28 = $0;
      $29 = $voc;
      _virt_resetvoice($28,$29,1);
      break;
     } else if ((($27|0) == 2)) {
      $30 = $0;
      $31 = $c;
      _player_set_release($30,$31);
      break;
     } else if ((($27|0) == 3)) {
      $32 = $0;
      $33 = $c;
      _player_set_fadeout($32,$33);
      break;
     } else {
      break;
     }
    }
   }
  } while(0);
  $34 = $c;
  $35 = (($34) + 1)|0;
  $c = $35;
 }
 STACKTOP = sp;return;
}
function _virt_cstat($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $p;
 $5 = $2;
 $6 = (_map_virt_channel($4,$5)|0);
 $voc = $6;
 $7 = ($6|0)<(0);
 if ($7) {
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $8 = $2;
 $9 = $p;
 $10 = ((($9)) + 944|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)<($11|0);
 if ($12) {
  $0 = 256;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $13 = $voc;
  $14 = $p;
  $15 = ((($14)) + 944|0);
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + (($13*116)|0)|0);
  $19 = ((($18)) + 56|0);
  $20 = HEAP32[$19>>2]|0;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _map_virt_channel($p,$chn) {
 $p = $p|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $chn;
 $3 = $2;
 $4 = $1;
 $5 = ((($4)) + 944|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($3>>>0)>=($7>>>0);
 if ($8) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 944|0);
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($9<<3)|0);
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $voc = $16;
 $17 = $voc;
 $18 = $1;
 $19 = ((($18)) + 944|0);
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($17>>>0)>=($21>>>0);
 if ($22) {
  $0 = -1;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  $23 = $voc;
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _check_dct($ctx,$i,$chn,$ins,$smp,$note,$dct,$dca) {
 $ctx = $ctx|0;
 $i = $i|0;
 $chn = $chn|0;
 $ins = $ins|0;
 $smp = $smp|0;
 $note = $note|0;
 $dct = $dct|0;
 $dca = $dca|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, $voc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $i;
 $2 = $chn;
 $3 = $ins;
 $4 = $smp;
 $5 = $note;
 $6 = $dct;
 $7 = $dca;
 $8 = $0;
 $p = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 944|0);
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($9*116)|0)|0);
 $vi = $14;
 $15 = $2;
 $16 = $p;
 $17 = ((($16)) + 944|0);
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($15<<3)|0);
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $voc = $22;
 $23 = $vi;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $2;
 $27 = ($25|0)==($26|0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = $vi;
 $29 = ((($28)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = ($30|0)==($31|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $6;
 $34 = ($33|0)==(3);
 do {
  if (!($34)) {
   $35 = $6;
   $36 = ($35|0)==(2);
   if ($36) {
    $37 = $vi;
    $38 = ((($37)) + 48|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $4;
    $41 = ($39|0)==($40|0);
    if ($41) {
     break;
    }
   }
   $42 = $6;
   $43 = ($42|0)==(1);
   if (!($43)) {
    STACKTOP = sp;return;
   }
   $44 = $vi;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $5;
   $48 = ($46|0)==($47|0);
   if (!($48)) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $49 = $7;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  $61 = $0;
  $62 = $1;
  _virt_resetvoice($61,$62,1);
  STACKTOP = sp;return;
 }
 $51 = $1;
 $52 = $voc;
 $53 = ($51|0)!=($52|0);
 if (!($53)) {
  $54 = $vi;
  $55 = ((($54)) + 56|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   STACKTOP = sp;return;
  }
 }
 $58 = $7;
 $59 = $vi;
 $60 = ((($59)) + 56|0);
 HEAP32[$60>>2] = $58;
 STACKTOP = sp;return;
}
function _alloc_voice($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $p;
  $5 = ((($4)) + 944|0);
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($3|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $p;
  $11 = ((($10)) + 944|0);
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + (($9*116)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(-1);
  if ($16) {
   break;
  }
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 $19 = $i;
 $20 = $p;
 $21 = ((($20)) + 944|0);
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($19|0)==($23|0);
 if ($24) {
  $25 = $0;
  $26 = (_free_voice($25)|0);
  $i = $26;
 }
 $27 = $1;
 $28 = $p;
 $29 = ((($28)) + 944|0);
 $30 = ((($29)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($27<<3)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$32>>2] = $34;
 $35 = $p;
 $36 = ((($35)) + 944|0);
 $37 = ((($36)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 $40 = $1;
 $41 = $i;
 $42 = $p;
 $43 = ((($42)) + 944|0);
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + (($41*116)|0)|0);
 HEAP32[$46>>2] = $40;
 $47 = $1;
 $48 = $i;
 $49 = $p;
 $50 = ((($49)) + 944|0);
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + (($48*116)|0)|0);
 $54 = ((($53)) + 4|0);
 HEAP32[$54>>2] = $47;
 $55 = $i;
 $56 = $1;
 $57 = $p;
 $58 = ((($57)) + 944|0);
 $59 = ((($58)) + 16|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($56<<3)|0);
 $62 = ((($61)) + 4|0);
 HEAP32[$62>>2] = $55;
 $63 = $i;
 STACKTOP = sp;return ($63|0);
}
function _free_voice($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $num = 0, $p = 0, $vi = 0, $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $num = -1;
 $vol = 2147483647;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $p;
  $4 = ((($3)) + 944|0);
  $5 = ((($4)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($2|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $p;
  $10 = ((($9)) + 944|0);
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + (($8*116)|0)|0);
  $vi = $13;
  $14 = $vi;
  $15 = HEAP32[$14>>2]|0;
  $16 = $p;
  $17 = ((($16)) + 944|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)>=($18|0);
  if ($19) {
   $20 = $vi;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $vol;
   $24 = ($22|0)<($23|0);
   if ($24) {
    $25 = $i;
    $num = $25;
    $26 = $vi;
    $27 = ((($26)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    $vol = $28;
   }
  }
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $num;
 $32 = $p;
 $33 = ((($32)) + 944|0);
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($31*116)|0)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $p;
 $39 = ((($38)) + 944|0);
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($37<<3)|0);
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = -1;
 $44 = $num;
 $45 = $p;
 $46 = ((($45)) + 944|0);
 $47 = ((($46)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + (($44*116)|0)|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $p;
 $53 = ((($52)) + 944|0);
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($51<<3)|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + -1)|0;
 HEAP32[$56>>2] = $58;
 $59 = $p;
 $60 = ((($59)) + 944|0);
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + -1)|0;
 HEAP32[$61>>2] = $63;
 $64 = $num;
 STACKTOP = sp;return ($64|0);
}
function _note_to_period($n,$f,$type,$adj) {
 $n = $n|0;
 $f = $f|0;
 $type = $type|0;
 $adj = +$adj;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, $per = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $f;
 $2 = $type;
 $3 = $adj;
 $4 = $0;
 $5 = (+($4|0));
 $6 = $1;
 $7 = (+($6|0));
 $8 = $7 / 128.0;
 $9 = $5 + $8;
 $d = $9;
 $10 = $2;
 $11 = ($10|0)!=(0);
 $12 = $d;
 if ($11) {
  $13 = 240.0 - $12;
  $14 = $13 * 16.0;
  $18 = $14;
 } else {
  $15 = $12 / 12.0;
  $16 = (+Math_pow(2.0,(+$15)));
  $17 = 13694.0 / $16;
  $18 = $17;
 }
 $per = $18;
 $19 = $3;
 $20 = $19 > 0.10000000000000001;
 if (!($20)) {
  $24 = $per;
  STACKTOP = sp;return (+$24);
 }
 $21 = $3;
 $22 = $per;
 $23 = $22 * $21;
 $per = $23;
 $24 = $per;
 STACKTOP = sp;return (+$24);
}
function _note_to_period_mix($n,$b) {
 $n = $n|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $d = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $b;
 $2 = $0;
 $3 = (+($2|0));
 $4 = $1;
 $5 = (+($4|0));
 $6 = $5 / 12800.0;
 $7 = $3 + $6;
 $d = $7;
 $8 = $d;
 $9 = $8 / 12.0;
 $10 = (+Math_pow(2.0,(+$9)));
 $11 = 56090624.0 / $10;
 $12 = (~~(($11)));
 STACKTOP = sp;return ($12|0);
}
function _period_to_note($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $n = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $t = (11424);
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $n = 24;
 while(1) {
  $4 = $1;
  $5 = ($4|0)<=(3627);
  if (!($5)) {
   break;
  }
  $6 = $n;
  $7 = (($6) + 12)|0;
  $n = $7;
  $8 = $1;
  $9 = $8 << 1;
  $1 = $9;
 }
 while(1) {
  $10 = $1;
  $11 = $t;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)>($12|0);
  if (!($13)) {
   break;
  }
  $14 = $t;
  $15 = ((($14)) + -32|0);
  $t = $15;
  $16 = $n;
  $17 = (($16) + -1)|0;
  $n = $17;
 }
 $f = 7;
 while(1) {
  $18 = $f;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $t;
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = ($21|0)>($22|0);
  if (!($23)) {
   break;
  }
  $24 = $t;
  $25 = ((($24)) + 4|0);
  $t = $25;
  $26 = $f;
  $27 = (($26) + -1)|0;
  $f = $27;
 }
 $28 = $n;
 $29 = $f;
 $30 = $29 >> 2;
 $31 = (($28) - ($30))|0;
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _period_to_bend($p,$n,$gliss,$type,$adj) {
 $p = +$p;
 $n = $n|0;
 $gliss = $gliss|0;
 $type = $type|0;
 $adj = +$adj;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, $d = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $n;
 $3 = $gliss;
 $4 = $type;
 $5 = $adj;
 $6 = $2;
 $7 = ($6|0)==(0);
 if ($7) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $8 = $4;
 $9 = ($8|0)!=(0);
 $10 = $2;
 if ($9) {
  $11 = (240 - ($10))|0;
  $12 = $11 << 4;
  $13 = (+($12|0));
  $14 = $1;
  $15 = $13 - $14;
  $16 = 8.0 * $15;
  $17 = 100.0 * $16;
  $18 = (~~(($17)));
  $b = $18;
  $19 = $3;
  $20 = ($19|0)!=(0);
  $21 = $b;
  $22 = (($21|0) / 12800)&-1;
  $23 = ($22*12800)|0;
  $24 = $20 ? $23 : $21;
  $0 = $24;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $25 = $5;
  $26 = (+_note_to_period($10,0,0,$25));
  $d = $26;
  $27 = $d;
  $28 = $1;
  $29 = $27 / $28;
  $30 = (+Math_log((+$29)));
  $31 = 1536.0 * $30;
  $32 = $31 / 0.69314718055994529;
  $33 = 100.0 * $32;
  $34 = (+_round($33));
  $35 = (~~(($34)));
  $b = $35;
  $36 = $3;
  $37 = ($36|0)!=(0);
  $38 = $b;
  $39 = (($38|0) / 12800)&-1;
  $40 = ($39*12800)|0;
  $41 = $37 ? $40 : $38;
  $0 = $41;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _c2spd_to_note($c2spd,$n,$f) {
 $c2spd = $c2spd|0;
 $n = $n|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0;
 var $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c2spd;
 $1 = $n;
 $2 = $f;
 $3 = $0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $2;
  HEAP32[$5>>2] = 0;
  $6 = $1;
  HEAP32[$6>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = $0;
  $8 = (+($7|0));
  $9 = $8 / 8363.0;
  $10 = (+Math_log((+$9)));
  $11 = 1536.0 * $10;
  $12 = $11 / 0.69314718055994529;
  $13 = (~~(($12)));
  $c = $13;
  $14 = $c;
  $15 = (($14|0) / 128)&-1;
  $16 = $1;
  HEAP32[$16>>2] = $15;
  $17 = $c;
  $18 = (($17|0) % 128)&-1;
  $19 = $2;
  HEAP32[$19>>2] = $18;
  STACKTOP = sp;return;
 }
}
function _player_set_release($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 620|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + (($3*472)|0)|0);
 $xc = $7;
 $8 = $xc;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 | 2;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _player_set_fadeout($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 620|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + (($3*472)|0)|0);
 $xc = $7;
 $8 = $xc;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 | 1;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _xmp_start_player($opaque,$rate,$format) {
 $opaque = $opaque|0;
 $rate = $rate|0;
 $format = $format|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ctx = 0, $f = 0, $i = 0, $m = 0, $mod = 0, $or$cond = 0, $p = 0, $ret = 0, $s = 0, $smix = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $rate;
 $3 = $format;
 $4 = $1;
 $ctx = $4;
 $5 = $ctx;
 $p = $5;
 $6 = $ctx;
 $7 = ((($6)) + 1496|0);
 $s = $7;
 $8 = $ctx;
 $9 = ((($8)) + 9152|0);
 $smix = $9;
 $10 = $ctx;
 $11 = ((($10)) + 1552|0);
 $m = $11;
 $12 = $m;
 $mod = $12;
 $13 = $p;
 $14 = ((($13)) + 324|0);
 $f = $14;
 $ret = 0;
 $15 = $2;
 $16 = ($15|0)<(4000);
 $17 = $2;
 $18 = ($17|0)>(49170);
 $or$cond = $16 | $18;
 if ($or$cond) {
  $0 = -7;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $19 = $ctx;
 $20 = ((($19)) + 9172|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<(1);
 if ($22) {
  $0 = -8;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $23 = $ctx;
 $24 = ((($23)) + 9172|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)>(1);
 if ($26) {
  $27 = $1;
  _xmp_end_player($27);
 }
 $28 = $ctx;
 $29 = $2;
 $30 = $3;
 $31 = $m;
 $32 = ((($31)) + 1264|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_mixer_on($28,$29,$30,$33)|0);
 $35 = ($34|0)<(0);
 if ($35) {
  $0 = -2;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $36 = $p;
 $37 = ((($36)) + 316|0);
 HEAP32[$37>>2] = 100;
 $38 = $p;
 $39 = ((($38)) + 312|0);
 HEAP32[$39>>2] = 100;
 $40 = $m;
 $41 = ((($40)) + 1268|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $p;
 $44 = ((($43)) + 320|0);
 HEAP32[$44>>2] = $42;
 $45 = $p;
 HEAP32[$45>>2] = 0;
 $46 = $p;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = 0;
 $48 = $p;
 $49 = ((($48)) + 12|0);
 HEAP32[$49>>2] = -1;
 $50 = $p;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = 0;
 $52 = $p;
 $53 = ((($52)) + 32|0);
 HEAPF64[$53>>3] = 0.0;
 $54 = $p;
 $55 = ((($54)) + 48|0);
 HEAP32[$55>>2] = 0;
 $56 = $p;
 $57 = ((($56)) + 52|0);
 HEAP32[$57>>2] = 0;
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(64);
  if (!($59)) {
   break;
  }
  $60 = $i;
  $61 = $p;
  $62 = ((($61)) + 880|0);
  $63 = (($62) + ($60)|0);
  HEAP8[$63>>0] = 0;
  $64 = $i;
  $65 = $p;
  $66 = ((($65)) + 624|0);
  $67 = (($66) + ($64<<2)|0);
  HEAP32[$67>>2] = 100;
  $68 = $i;
  $69 = (($68) + 1)|0;
  $i = $69;
 }
 while(1) {
  $70 = $p;
  $71 = HEAP32[$70>>2]|0;
  $72 = $mod;
  $73 = ((($72)) + 156|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($71|0)<($74|0);
  if ($75) {
   $76 = $p;
   $77 = HEAP32[$76>>2]|0;
   $78 = $mod;
   $79 = ((($78)) + 952|0);
   $80 = (($79) + ($77)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $mod;
   $84 = ((($83)) + 128|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($82|0)>=($85|0);
   $222 = $86;
  } else {
   $222 = 0;
  }
  $87 = $p;
  $88 = HEAP32[$87>>2]|0;
  if (!($222)) {
   break;
  }
  $89 = (($88) + 1)|0;
  HEAP32[$87>>2] = $89;
 }
 $90 = $mod;
 $91 = ((($90)) + 156|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($88|0)>=($92|0);
 if ($93) {
  $94 = $mod;
  $95 = ((($94)) + 156|0);
  HEAP32[$95>>2] = 0;
 }
 $96 = $mod;
 $97 = ((($96)) + 156|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(0);
 if ($99) {
  label = 20;
 } else {
  $100 = $mod;
  $101 = ((($100)) + 136|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if ($103) {
   label = 20;
  } else {
   $117 = $p;
   $118 = HEAP32[$117>>2]|0;
   $119 = $mod;
   $120 = ((($119)) + 952|0);
   $121 = (($120) + ($118)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = $mod;
   $125 = ((($124)) + 168|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + ($123<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = HEAP32[$128>>2]|0;
   $130 = $f;
   $131 = ((($130)) + 24|0);
   HEAP32[$131>>2] = $129;
   $132 = $p;
   $133 = ((($132)) + 364|0);
   $134 = ((($133)) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $f;
   $137 = ((($136)) + 28|0);
   HEAP32[$137>>2] = $135;
  }
 }
 if ((label|0) == 20) {
  $104 = $p;
  $105 = ((($104)) + 364|0);
  $106 = ((($105)) + 4|0);
  HEAP32[$106>>2] = 0;
  $107 = $p;
  HEAP32[$107>>2] = 0;
  $108 = $p;
  $109 = ((($108)) + 364|0);
  $110 = ((($109)) + 8|0);
  HEAP32[$110>>2] = 0;
  $111 = $p;
  $112 = ((($111)) + 8|0);
  HEAP32[$112>>2] = 0;
  $113 = $f;
  $114 = ((($113)) + 28|0);
  HEAP32[$114>>2] = 0;
  $115 = $f;
  $116 = ((($115)) + 24|0);
  HEAP32[$116>>2] = 0;
 }
 $138 = $ctx;
 _update_from_ord_info($138);
 $139 = $ctx;
 $140 = $mod;
 $141 = ((($140)) + 136|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $smix;
 $144 = HEAP32[$143>>2]|0;
 $145 = (($142) + ($144))|0;
 $146 = (_virt_on($139,$145)|0);
 $147 = ($146|0)!=(0);
 do {
  if ($147) {
   $ret = -2;
  } else {
   $148 = $f;
   $149 = ((($148)) + 8|0);
   HEAP32[$149>>2] = 0;
   $150 = $f;
   $151 = ((($150)) + 12|0);
   HEAP32[$151>>2] = 0;
   $152 = $f;
   $153 = ((($152)) + 4|0);
   HEAP32[$153>>2] = -1;
   $154 = $f;
   HEAP32[$154>>2] = 0;
   $155 = $f;
   $156 = ((($155)) + 36|0);
   HEAP32[$156>>2] = 0;
   $157 = $p;
   $158 = ((($157)) + 944|0);
   $159 = ((($158)) + 4|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (_calloc($160,8)|0);
   $162 = $f;
   $163 = ((($162)) + 20|0);
   HEAP32[$163>>2] = $161;
   $164 = $f;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ($166|0)==(0|0);
   if ($167) {
    $ret = -6;
    break;
   }
   $168 = $p;
   $169 = ((($168)) + 944|0);
   $170 = ((($169)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (_calloc($171,472)|0);
   $173 = $p;
   $174 = ((($173)) + 620|0);
   HEAP32[$174>>2] = $172;
   $175 = $p;
   $176 = ((($175)) + 620|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)==(0|0);
   if ($178) {
    $ret = -6;
   } else {
    $i = 0;
    while(1) {
     $179 = $i;
     $180 = $p;
     $181 = ((($180)) + 944|0);
     $182 = ((($181)) + 4|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($179|0)<($183|0);
     if (!($184)) {
      label = 32;
      break;
     }
     $185 = $i;
     $186 = $p;
     $187 = ((($186)) + 620|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + (($185*472)|0)|0);
     $xc = $189;
     $190 = $ctx;
     $191 = $xc;
     $192 = (_new_channel_extras($190,$191)|0);
     $193 = ($192|0)<(0);
     if ($193) {
      break;
     }
     $194 = $i;
     $195 = (($194) + 1)|0;
     $i = $195;
    }
    do {
     if ((label|0) == 32) {
      $196 = $m;
      $197 = ((($196)) + 7584|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = HEAP32[$198>>2]|0;
      $200 = $ctx;
      $201 = $s;
      $202 = HEAP32[$201>>2]|0;
      $203 = (FUNCTION_TABLE_iii[$199 & 511]($200,$202)|0);
      $204 = ($203|0)<(0);
      if ($204) {
       $ret = -2;
       break;
      }
      $205 = $m;
      $206 = ((($205)) + 7584|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = ((($207)) + 8|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $ctx;
      (FUNCTION_TABLE_ii[$209 & 255]($210)|0);
      $211 = $ctx;
      _reset_channels($211);
      $212 = $ctx;
      $213 = ((($212)) + 9172|0);
      HEAP32[$213>>2] = 2;
      $0 = 0;
      $221 = $0;
      STACKTOP = sp;return ($221|0);
     }
    } while(0);
    $214 = $p;
    $215 = ((($214)) + 620|0);
    $216 = HEAP32[$215>>2]|0;
    _free($216);
   }
   $217 = $f;
   $218 = ((($217)) + 20|0);
   $219 = HEAP32[$218>>2]|0;
   _free($219);
  }
 } while(0);
 $220 = $ret;
 $0 = $220;
 $221 = $0;
 STACKTOP = sp;return ($221|0);
}
function _xmp_end_player($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $f = 0, $i = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $ctx = $1;
 $2 = $ctx;
 $p = $2;
 $3 = $p;
 $4 = ((($3)) + 324|0);
 $f = $4;
 $5 = $ctx;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $ctx;
 $8 = ((($7)) + 9172|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<(2);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $ctx;
 $12 = ((($11)) + 9172|0);
 HEAP32[$12>>2] = 1;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $p;
  $15 = ((($14)) + 944|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $p;
  $21 = ((($20)) + 620|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($19*472)|0)|0);
  $xc = $23;
  $24 = $ctx;
  $25 = $xc;
  _release_channel_extras($24,$25);
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $ctx;
 _virt_off($28);
 $29 = $m;
 $30 = ((($29)) + 7584|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $ctx;
 (FUNCTION_TABLE_ii[$33 & 255]($34)|0);
 $35 = $p;
 $36 = ((($35)) + 620|0);
 $37 = HEAP32[$36>>2]|0;
 _free($37);
 $38 = $f;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 _free($40);
 $41 = $p;
 $42 = ((($41)) + 620|0);
 HEAP32[$42>>2] = 0;
 $43 = $f;
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = 0;
 $45 = $ctx;
 _mixer_off($45);
 STACKTOP = sp;return;
}
function _xmp_play_frame($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctx = 0, $f = 0, $i = 0, $m = 0;
 var $mod = 0, $p = 0, $start = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $1;
 $ctx = $2;
 $3 = $ctx;
 $p = $3;
 $4 = $ctx;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $p;
 $8 = ((($7)) + 324|0);
 $f = $8;
 $9 = $ctx;
 $10 = ((($9)) + 9172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(2);
 if ($12) {
  $0 = -8;
  $215 = $0;
  STACKTOP = sp;return ($215|0);
 }
 $13 = $mod;
 $14 = ((($13)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<=(0);
 if (!($16)) {
  $17 = $p;
  $18 = HEAP32[$17>>2]|0;
  $19 = $mod;
  $20 = ((($19)) + 952|0);
  $21 = (($20) + ($18)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(255);
  if (!($24)) {
   $25 = $p;
   $26 = HEAP32[$25>>2]|0;
   $27 = $p;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26|0)!=($29|0);
   $31 = $p;
   if ($30) {
    $32 = ((($31)) + 52|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $m;
    $35 = ((($34)) + 7448|0);
    $36 = (($35) + ($33<<3)|0);
    $37 = HEAP32[$36>>2]|0;
    $start = $37;
    $38 = $p;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(-2);
    if ($41) {
     $0 = -1;
     $215 = $0;
     STACKTOP = sp;return ($215|0);
    }
    $42 = $p;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(-1);
    if ($45) {
     $46 = $start;
     $47 = $p;
     $48 = ((($47)) + 4|0);
     HEAP32[$48>>2] = $46;
    }
    $49 = $p;
    $50 = ((($49)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $start;
    $53 = ($51|0)==($52|0);
    if ($53) {
     $54 = $p;
     $55 = ((($54)) + 52|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $p;
     $58 = ((($57)) + 364|0);
     $59 = (($58) + ($56<<4)|0);
     $60 = ((($59)) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $f;
     $63 = ((($62)) + 28|0);
     HEAP32[$63>>2] = $61;
    }
    $64 = $p;
    $65 = ((($64)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $p;
    $68 = ((($67)) + 52|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $p;
    $71 = ((($70)) + 364|0);
    $72 = (($71) + ($69<<4)|0);
    $73 = ((($72)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($66|0)>($74|0);
    if ($75) {
     $76 = $f;
     $77 = ((($76)) + 28|0);
     HEAP32[$77>>2] = 0;
    }
    $78 = $f;
    $79 = ((($78)) + 12|0);
    HEAP32[$79>>2] = 0;
    $80 = $f;
    $81 = ((($80)) + 4|0);
    HEAP32[$81>>2] = -1;
    $82 = $p;
    $83 = ((($82)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) - 1)|0;
    $86 = $p;
    HEAP32[$86>>2] = $85;
    $87 = $p;
    $88 = HEAP32[$87>>2]|0;
    $89 = $start;
    $90 = ($88|0)<($89|0);
    if ($90) {
     $91 = $start;
     $92 = (($91) - 1)|0;
     $93 = $p;
     HEAP32[$93>>2] = $92;
    }
    $94 = $ctx;
    _next_order($94);
    $95 = $ctx;
    _update_from_ord_info($95);
    $96 = $ctx;
    _virt_reset($96);
    $97 = $ctx;
    _reset_channels($97);
   } else {
    $98 = ((($31)) + 12|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + 1)|0;
    HEAP32[$98>>2] = $100;
    $101 = $p;
    $102 = ((($101)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $p;
    $105 = ((($104)) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $f;
    $108 = ((($107)) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (1 + ($109))|0;
    $111 = Math_imul($106, $110)|0;
    $112 = ($103|0)>=($111|0);
    if ($112) {
     $113 = $m;
     $114 = ((($113)) + 1284|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $115 & 4;
     $117 = ($116|0)!=(0);
     if ($117) {
      $118 = $f;
      $119 = ((($118)) + 8|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)!=(0);
      if ($121) {
       $122 = $f;
       $123 = HEAP32[$122>>2]|0;
       $124 = ($123|0)!=(0);
       if ($124) {
        $125 = $ctx;
        _next_row($125);
        $126 = $ctx;
        _check_end_of_module($126);
       }
      }
     }
     $127 = $ctx;
     _next_row($127);
    }
   }
   $i = 0;
   while(1) {
    $128 = $i;
    $129 = $mod;
    $130 = ((($129)) + 136|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($128|0)<($131|0);
    if (!($132)) {
     break;
    }
    $133 = $i;
    $134 = $p;
    $135 = ((($134)) + 620|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + (($133*472)|0)|0);
    $xc = $137;
    $138 = $xc;
    $139 = HEAP32[$138>>2]|0;
    $140 = $139 & -134217729;
    HEAP32[$138>>2] = $140;
    $141 = $i;
    $142 = (($141) + 1)|0;
    $i = $142;
   }
   $143 = $p;
   $144 = ((($143)) + 12|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($145|0)==(0);
   if ($146) {
    $147 = $ctx;
    _check_end_of_module($147);
    $148 = $ctx;
    $149 = $p;
    $150 = HEAP32[$149>>2]|0;
    $151 = $mod;
    $152 = ((($151)) + 952|0);
    $153 = (($152) + ($150)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = $154&255;
    $156 = $p;
    $157 = ((($156)) + 8|0);
    $158 = HEAP32[$157>>2]|0;
    _read_row($148,$155,$158);
    $159 = $p;
    $160 = ((($159)) + 1492|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ($161|0)!=(0);
    if ($162) {
     $163 = $p;
     $164 = ((($163)) + 1492|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $165 & 65536;
     $167 = ($166|0)!=(0);
     $168 = $p;
     $169 = ((($168)) + 1492|0);
     $170 = HEAP32[$169>>2]|0;
     if ($167) {
      $171 = $170 & 65280;
      $172 = $171 >> 8;
      $173 = $p;
      $174 = ((($173)) + 16|0);
      HEAP32[$174>>2] = $172;
     } else {
      $175 = $170 & 255;
      $176 = $p;
      $177 = ((($176)) + 16|0);
      HEAP32[$177>>2] = $175;
     }
     $178 = $p;
     $179 = ((($178)) + 1492|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $180 ^ 65536;
     HEAP32[$179>>2] = $181;
    }
   }
   $182 = $ctx;
   _inject_event($182);
   $i = 0;
   while(1) {
    $183 = $i;
    $184 = $p;
    $185 = ((($184)) + 944|0);
    $186 = ((($185)) + 4|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = ($183|0)<($187|0);
    if (!($188)) {
     break;
    }
    $189 = $ctx;
    $190 = $i;
    _play_channel($189,$190);
    $191 = $i;
    $192 = (($191) + 1)|0;
    $i = $192;
   }
   $193 = $m;
   $194 = ((($193)) + 1256|0);
   $195 = +HEAPF64[$194>>3];
   $196 = $m;
   $197 = ((($196)) + 1248|0);
   $198 = +HEAPF64[$197>>3];
   $199 = $195 * $198;
   $200 = $p;
   $201 = ((($200)) + 20|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (+($202|0));
   $204 = $199 / $203;
   $205 = $p;
   $206 = ((($205)) + 40|0);
   HEAPF64[$206>>3] = $204;
   $207 = $p;
   $208 = ((($207)) + 40|0);
   $209 = +HEAPF64[$208>>3];
   $210 = $p;
   $211 = ((($210)) + 32|0);
   $212 = +HEAPF64[$211>>3];
   $213 = $212 + $209;
   HEAPF64[$211>>3] = $213;
   $214 = $ctx;
   _mixer_softmixer($214);
   $0 = 0;
   $215 = $0;
   STACKTOP = sp;return ($215|0);
  }
 }
 $0 = -1;
 $215 = $0;
 STACKTOP = sp;return ($215|0);
}
function _xmp_get_frame_info($opaque,$info) {
 $opaque = $opaque|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $c = 0, $chn = 0, $ci = 0, $ctx = 0;
 var $event = 0, $i = 0, $m = 0, $mod = 0, $p = 0, $s = 0, $track = 0, $trk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $info;
 $2 = $0;
 $ctx = $2;
 $3 = $ctx;
 $p = $3;
 $4 = $ctx;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $ctx;
 $7 = ((($6)) + 1552|0);
 $m = $7;
 $8 = $m;
 $mod = $8;
 $9 = $ctx;
 $10 = ((($9)) + 9172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(1);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $mod;
 $14 = ((($13)) + 136|0);
 $15 = HEAP32[$14>>2]|0;
 $chn = $15;
 $16 = $p;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>=(0);
 if ($19) {
  $20 = $p;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $mod;
  $24 = ((($23)) + 156|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)<($25|0);
  if ($26) {
   $27 = $p;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   HEAP32[$30>>2] = $29;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $31 = $1;
  HEAP32[$31>>2] = 0;
 }
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $mod;
 $35 = ((($34)) + 952|0);
 $36 = (($35) + ($33)|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $1;
 $40 = ((($39)) + 4|0);
 HEAP32[$40>>2] = $38;
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $mod;
 $45 = ((($44)) + 128|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43|0)<($46|0);
 $48 = $1;
 if ($47) {
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $mod;
  $52 = ((($51)) + 168|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $1;
  $58 = ((($57)) + 12|0);
  HEAP32[$58>>2] = $56;
 } else {
  $59 = ((($48)) + 12|0);
  HEAP32[$59>>2] = 0;
 }
 $60 = $p;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = ((($63)) + 8|0);
 HEAP32[$64>>2] = $62;
 $65 = $p;
 $66 = ((($65)) + 12|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $1;
 $69 = ((($68)) + 16|0);
 HEAP32[$69>>2] = $67;
 $70 = $p;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $1;
 $74 = ((($73)) + 20|0);
 HEAP32[$74>>2] = $72;
 $75 = $p;
 $76 = ((($75)) + 20|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $1;
 $79 = ((($78)) + 24|0);
 HEAP32[$79>>2] = $77;
 $80 = $p;
 $81 = ((($80)) + 52|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $p;
 $84 = ((($83)) + 364|0);
 $85 = (($84) + ($82<<4)|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $1;
 $88 = ((($87)) + 32|0);
 HEAP32[$88>>2] = $86;
 $89 = $p;
 $90 = ((($89)) + 40|0);
 $91 = +HEAPF64[$90>>3];
 $92 = $91 * 1000.0;
 $93 = (~~(($92)));
 $94 = $1;
 $95 = ((($94)) + 36|0);
 HEAP32[$95>>2] = $93;
 $96 = $p;
 $97 = ((($96)) + 32|0);
 $98 = +HEAPF64[$97>>3];
 $99 = (~~(($98)));
 $100 = $1;
 $101 = ((($100)) + 28|0);
 HEAP32[$101>>2] = $99;
 $102 = $s;
 $103 = ((($102)) + 24|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $1;
 $106 = ((($105)) + 40|0);
 HEAP32[$106>>2] = $104;
 $107 = $1;
 $108 = ((($107)) + 48|0);
 HEAP32[$108>>2] = 24585;
 $109 = $s;
 $110 = ((($109)) + 36|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $1;
 $113 = ((($112)) + 44|0);
 HEAP32[$113>>2] = $111;
 $114 = $s;
 $115 = ((($114)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 ^ -1;
 $118 = $117 & 4;
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $1;
  $121 = ((($120)) + 44|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122<<1;
  HEAP32[$121>>2] = $123;
 }
 $124 = $s;
 $125 = ((($124)) + 4|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 ^ -1;
 $128 = $127 & 1;
 $129 = ($128|0)!=(0);
 if ($129) {
  $130 = $1;
  $131 = ((($130)) + 44|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132<<1;
  HEAP32[$131>>2] = $133;
 }
 $134 = $p;
 $135 = ((($134)) + 320|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = ((($137)) + 52|0);
 HEAP32[$138>>2] = $136;
 $139 = $p;
 $140 = ((($139)) + 48|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $1;
 $143 = ((($142)) + 56|0);
 HEAP32[$143>>2] = $141;
 $144 = $p;
 $145 = ((($144)) + 944|0);
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $1;
 $149 = ((($148)) + 60|0);
 HEAP32[$149>>2] = $147;
 $150 = $p;
 $151 = ((($150)) + 944|0);
 $152 = ((($151)) + 8|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $1;
 $155 = ((($154)) + 64|0);
 HEAP32[$155>>2] = $153;
 $156 = $p;
 $157 = ((($156)) + 52|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = $1;
 $160 = ((($159)) + 68|0);
 HEAP32[$160>>2] = $158;
 $161 = $p;
 $162 = ((($161)) + 620|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if (!($164)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $165 = $i;
  $166 = $chn;
  $167 = ($165|0)<($166|0);
  if (!($167)) {
   break;
  }
  $168 = $i;
  $169 = $p;
  $170 = ((($169)) + 620|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + (($168*472)|0)|0);
  $c = $172;
  $173 = $i;
  $174 = $1;
  $175 = ((($174)) + 72|0);
  $176 = (($175) + (($173*24)|0)|0);
  $ci = $176;
  $177 = $c;
  $178 = ((($177)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $179&255;
  $181 = $ci;
  $182 = ((($181)) + 10|0);
  HEAP8[$182>>0] = $180;
  $183 = $c;
  $184 = ((($183)) + 452|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $185&65535;
  $187 = $ci;
  $188 = ((($187)) + 8|0);
  HEAP16[$188>>1] = $186;
  $189 = $c;
  $190 = ((($189)) + 448|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $ci;
  HEAP32[$192>>2] = $191;
  $193 = $c;
  $194 = ((($193)) + 456|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $ci;
  $197 = ((($196)) + 4|0);
  HEAP32[$197>>2] = $195;
  $198 = $c;
  $199 = ((($198)) + 44|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $200&255;
  $202 = $ci;
  $203 = ((($202)) + 11|0);
  HEAP8[$203>>0] = $201;
  $204 = $c;
  $205 = ((($204)) + 52|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $206&255;
  $208 = $ci;
  $209 = ((($208)) + 12|0);
  HEAP8[$209>>0] = $207;
  $210 = $c;
  $211 = ((($210)) + 460|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $212 >> 4;
  $214 = $213&255;
  $215 = $ci;
  $216 = ((($215)) + 13|0);
  HEAP8[$216>>0] = $214;
  $217 = $c;
  $218 = ((($217)) + 464|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $219&255;
  $221 = $ci;
  $222 = ((($221)) + 14|0);
  HEAP8[$222>>0] = $220;
  $223 = $ci;
  $224 = ((($223)) + 15|0);
  HEAP8[$224>>0] = 0;
  $225 = $ci;
  $226 = ((($225)) + 16|0);
  ;HEAP8[$226>>0]=0|0;HEAP8[$226+1>>0]=0|0;HEAP8[$226+2>>0]=0|0;HEAP8[$226+3>>0]=0|0;HEAP8[$226+4>>0]=0|0;HEAP8[$226+5>>0]=0|0;HEAP8[$226+6>>0]=0|0;HEAP8[$226+7>>0]=0|0;
  $227 = $1;
  $228 = ((($227)) + 4|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $mod;
  $231 = ((($230)) + 128|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($229|0)<($232|0);
  if ($233) {
   $234 = $1;
   $235 = ((($234)) + 8|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $1;
   $238 = ((($237)) + 12|0);
   $239 = HEAP32[$238>>2]|0;
   $240 = ($236|0)<($239|0);
   if ($240) {
    $241 = $i;
    $242 = $1;
    $243 = ((($242)) + 4|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = $mod;
    $246 = ((($245)) + 168|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + ($244<<2)|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ((($249)) + 4|0);
    $251 = (($250) + ($241<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $trk = $252;
    $253 = $trk;
    $254 = $mod;
    $255 = ((($254)) + 172|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = (($256) + ($253<<2)|0);
    $258 = HEAP32[$257>>2]|0;
    $track = $258;
    $259 = $1;
    $260 = ((($259)) + 8|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = $track;
    $263 = HEAP32[$262>>2]|0;
    $264 = ($261|0)<($263|0);
    if ($264) {
     $265 = $1;
     $266 = ((($265)) + 8|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $track;
     $269 = ((($268)) + 4|0);
     $270 = (($269) + ($267<<3)|0);
     $event = $270;
     $271 = $ci;
     $272 = ((($271)) + 16|0);
     $273 = $event;
     ;HEAP8[$272>>0]=HEAP8[$273>>0]|0;HEAP8[$272+1>>0]=HEAP8[$273+1>>0]|0;HEAP8[$272+2>>0]=HEAP8[$273+2>>0]|0;HEAP8[$272+3>>0]=HEAP8[$273+3>>0]|0;HEAP8[$272+4>>0]=HEAP8[$273+4>>0]|0;HEAP8[$272+5>>0]=HEAP8[$273+5>>0]|0;HEAP8[$272+6>>0]=HEAP8[$273+6>>0]|0;HEAP8[$272+7>>0]=HEAP8[$273+7>>0]|0;
    }
   }
  }
  $274 = $i;
  $275 = (($274) + 1)|0;
  $i = $275;
 }
 STACKTOP = sp;return;
}
function _xmp_get_module_info($opaque,$info) {
 $opaque = $opaque|0;
 $info = $info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $m = 0, $mod = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $info;
 $2 = $0;
 $ctx = $2;
 $3 = $ctx;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $mod = $5;
 $6 = $ctx;
 $7 = ((($6)) + 9172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(1);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = $m;
 $12 = ((($11)) + 1224|0);
 dest=$10; src=$12; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $13 = $mod;
 $14 = $1;
 $15 = ((($14)) + 20|0);
 HEAP32[$15>>2] = $13;
 $16 = $m;
 $17 = ((($16)) + 1220|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = $18;
 $21 = $m;
 $22 = ((($21)) + 7444|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 28|0);
 HEAP32[$25>>2] = $23;
 $26 = $m;
 $27 = ((($26)) + 7448|0);
 $28 = $1;
 $29 = ((($28)) + 32|0);
 HEAP32[$29>>2] = $27;
 $30 = $m;
 $31 = ((($30)) + 1268|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $1;
 $34 = ((($33)) + 16|0);
 HEAP32[$34>>2] = $32;
 STACKTOP = sp;return;
}
function _update_from_ord_info($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $oinfo = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $p;
 $5 = HEAP32[$4>>2]|0;
 $6 = $m;
 $7 = ((($6)) + 1300|0);
 $8 = (($7) + (($5*24)|0)|0);
 $oinfo = $8;
 $9 = $oinfo;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $oinfo;
  $13 = HEAP32[$12>>2]|0;
  $14 = $p;
  $15 = ((($14)) + 16|0);
  HEAP32[$15>>2] = $13;
 }
 $16 = $oinfo;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $p;
 $20 = ((($19)) + 20|0);
 HEAP32[$20>>2] = $18;
 $21 = $oinfo;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $p;
 $25 = ((($24)) + 320|0);
 HEAP32[$25>>2] = $23;
 $26 = $oinfo;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 $30 = $p;
 $31 = ((($30)) + 32|0);
 HEAPF64[$31>>3] = $29;
 $32 = $m;
 $33 = ((($32)) + 1256|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $m;
 $36 = ((($35)) + 1248|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $34 * $37;
 $39 = $p;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (+($41|0));
 $43 = $38 / $42;
 $44 = $p;
 $45 = ((($44)) + 40|0);
 HEAPF64[$45>>3] = $43;
 $46 = $oinfo;
 $47 = ((($46)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $p;
 $50 = ((($49)) + 1492|0);
 HEAP32[$50>>2] = $48;
 STACKTOP = sp;return;
}
function _reset_channels($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extra = 0, $i = 0;
 var $j = 0, $m = 0, $mod = 0, $p = 0, $smix = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $0;
 $6 = ((($5)) + 9152|0);
 $smix = $6;
 $7 = $m;
 $8 = ((($7)) + 7584|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 (FUNCTION_TABLE_ii[$11 & 255]($12)|0);
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $p;
  $15 = ((($14)) + 944|0);
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $p;
  $21 = ((($20)) + 620|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($19*472)|0)|0);
  $xc = $23;
  $24 = $xc;
  $25 = ((($24)) + 432|0);
  $26 = HEAP32[$25>>2]|0;
  $extra = $26;
  $27 = $xc;
  _memset(($27|0),0,472)|0;
  $28 = $extra;
  $29 = $xc;
  $30 = ((($29)) + 432|0);
  HEAP32[$30>>2] = $28;
  $31 = $0;
  $32 = $xc;
  _reset_channel_extras($31,$32);
  $33 = $xc;
  $34 = ((($33)) + 44|0);
  HEAP32[$34>>2] = -1;
  $35 = $xc;
  $36 = ((($35)) + 48|0);
  HEAP32[$36>>2] = 1;
  $37 = $xc;
  $38 = ((($37)) + 16|0);
  HEAP32[$38>>2] = -1;
  $39 = $m;
  $40 = ((($39)) + 1268|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $xc;
  $43 = ((($42)) + 84|0);
  HEAP32[$43>>2] = $41;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = $p;
  $48 = ((($47)) + 944|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $p;
  $53 = ((($52)) + 620|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + (($51*472)|0)|0);
  $xc = $55;
  $56 = $xc;
  $57 = ((($56)) + 404|0);
  HEAP32[$57>>2] = 255;
  $58 = $i;
  $59 = $mod;
  $60 = ((($59)) + 136|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($58|0)>=($61|0);
  if ($62) {
   $63 = $i;
   $64 = $mod;
   $65 = ((($64)) + 136|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $smix;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($66) + ($68))|0;
   $70 = ($63|0)<($69|0);
   if ($70) {
    $71 = $xc;
    $72 = ((($71)) + 56|0);
    HEAP32[$72>>2] = 64;
    $73 = $xc;
    $74 = ((($73)) + 368|0);
    HEAP32[$74>>2] = 128;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $75 = $i;
   $76 = $mod;
   $77 = ((($76)) + 184|0);
   $78 = (($77) + (($75*12)|0)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $xc;
   $82 = ((($81)) + 56|0);
   HEAP32[$82>>2] = $80;
   $83 = $i;
   $84 = $mod;
   $85 = ((($84)) + 184|0);
   $86 = (($85) + (($83*12)|0)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $xc;
   $89 = ((($88)) + 368|0);
   HEAP32[$89>>2] = $87;
  }
  $90 = $i;
  $91 = $mod;
  $92 = ((($91)) + 184|0);
  $93 = (($92) + (($90*12)|0)|0);
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 & 4;
  $97 = ($96|0)!=(0);
  L14: do {
   if ($97) {
    $98 = $i;
    $99 = $mod;
    $100 = ((($99)) + 184|0);
    $101 = (($100) + (($98*12)|0)|0);
    $102 = ((($101)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $103 & 48;
    $105 = $104 >> 4;
    $106 = (($105) + 1)|0;
    $107 = $xc;
    $108 = ((($107)) + 76|0);
    HEAP32[$108>>2] = $106;
    $j = 0;
    while(1) {
     $109 = $j;
     $110 = $i;
     $111 = ($109|0)<($110|0);
     if (!($111)) {
      break L14;
     }
     $112 = $j;
     $113 = $mod;
     $114 = ((($113)) + 184|0);
     $115 = (($114) + (($112*12)|0)|0);
     $116 = ((($115)) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117 & 4;
     $119 = ($118|0)!=(0);
     if ($119) {
      $120 = $j;
      $121 = $p;
      $122 = ((($121)) + 620|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (($123) + (($120*472)|0)|0);
      $125 = ((($124)) + 76|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = $xc;
      $128 = ((($127)) + 76|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($126|0)==($129|0);
      if ($130) {
       $131 = $i;
       $132 = $j;
       $133 = $p;
       $134 = ((($133)) + 620|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (($135) + (($132*472)|0)|0);
       $137 = ((($136)) + 80|0);
       HEAP32[$137>>2] = $131;
       $138 = $j;
       $139 = $xc;
       $140 = ((($139)) + 80|0);
       HEAP32[$140>>2] = $138;
      }
     }
     $141 = $j;
     $142 = (($141) + 1)|0;
     $j = $142;
    }
   } else {
    $143 = $xc;
    $144 = ((($143)) + 76|0);
    HEAP32[$144>>2] = 0;
   }
  } while(0);
  $145 = $i;
  $146 = $mod;
  $147 = ((($146)) + 184|0);
  $148 = (($147) + (($145*12)|0)|0);
  $149 = ((($148)) + 8|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $150 & 16;
  $152 = ($151|0)!=(0);
  if ($152) {
   $153 = $xc;
   $154 = ((($153)) + 368|0);
   $155 = ((($154)) + 16|0);
   HEAP32[$155>>2] = 1;
  }
  $156 = $i;
  $157 = (($156) + 1)|0;
  $i = $157;
 }
 STACKTOP = sp;return;
}
function _next_order($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chn = 0, $f = 0, $m = 0, $mod = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 324|0);
 $f = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 while(1) {
  $7 = $p;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$7>>2] = $9;
  $10 = $p;
  $11 = HEAP32[$10>>2]|0;
  $12 = $mod;
  $13 = ((($12)) + 156|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)>=($14|0);
  if ($15) {
   label = 4;
  } else {
   $16 = $p;
   $17 = HEAP32[$16>>2]|0;
   $18 = $mod;
   $19 = ((($18)) + 952|0);
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)==(255);
   if ($23) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   label = 0;
   $24 = $mod;
   $25 = ((($24)) + 160|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $mod;
   $28 = ((($27)) + 156|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26|0)>($29|0);
   do {
    if ($30) {
     label = 7;
    } else {
     $31 = $mod;
     $32 = ((($31)) + 160|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $mod;
     $35 = ((($34)) + 952|0);
     $36 = (($35) + ($33)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = $mod;
     $40 = ((($39)) + 128|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($38|0)>=($41|0);
     if ($42) {
      label = 7;
     } else {
      $43 = $p;
      $44 = HEAP32[$43>>2]|0;
      $45 = $p;
      $46 = ((($45)) + 52|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = $m;
      $49 = ((($48)) + 7448|0);
      $50 = (($49) + ($47<<3)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($44|0)<($51|0);
      if ($52) {
       label = 7;
      } else {
       $61 = $0;
       $62 = $mod;
       $63 = ((($62)) + 160|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (_get_sequence($61,$64)|0);
       $66 = $p;
       $67 = ((($66)) + 52|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($65|0)==($68|0);
       if ($69) {
        $70 = $mod;
        $71 = ((($70)) + 160|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = $p;
        HEAP32[$73>>2] = $72;
        break;
       } else {
        $74 = $p;
        $75 = ((($74)) + 52|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = $m;
        $78 = ((($77)) + 7448|0);
        $79 = (($78) + ($76<<3)|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = $p;
        HEAP32[$81>>2] = $80;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 7) {
    label = 0;
    $53 = $p;
    $54 = ((($53)) + 52|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $m;
    $57 = ((($56)) + 7448|0);
    $58 = (($57) + ($55<<3)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $p;
    HEAP32[$60>>2] = $59;
   }
   $82 = $p;
   $83 = HEAP32[$82>>2]|0;
   $84 = $m;
   $85 = ((($84)) + 1300|0);
   $86 = (($85) + (($83*24)|0)|0);
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $p;
   $90 = ((($89)) + 320|0);
   HEAP32[$90>>2] = $88;
  }
  $91 = $p;
  $92 = HEAP32[$91>>2]|0;
  $93 = $mod;
  $94 = ((($93)) + 952|0);
  $95 = (($94) + ($92)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $mod;
  $99 = ((($98)) + 128|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($97|0)>=($100|0);
  if (!($101)) {
   break;
  }
 }
 $102 = $p;
 $103 = HEAP32[$102>>2]|0;
 $104 = $m;
 $105 = ((($104)) + 1300|0);
 $106 = (($105) + (($103*24)|0)|0);
 $107 = ((($106)) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (+($108|0));
 $110 = $p;
 $111 = ((($110)) + 32|0);
 HEAPF64[$111>>3] = $109;
 $112 = $p;
 $113 = HEAP32[$112>>2]|0;
 $114 = $mod;
 $115 = ((($114)) + 952|0);
 $116 = (($115) + ($113)|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = $mod;
 $120 = ((($119)) + 168|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + ($118<<2)|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = HEAP32[$123>>2]|0;
 $125 = $f;
 $126 = ((($125)) + 24|0);
 HEAP32[$126>>2] = $124;
 $127 = $f;
 $128 = ((($127)) + 12|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $f;
 $131 = ((($130)) + 24|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($129|0)>=($132|0);
 if ($133) {
  $134 = $f;
  $135 = ((($134)) + 12|0);
  HEAP32[$135>>2] = 0;
 }
 $136 = $f;
 $137 = ((($136)) + 12|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $p;
 $140 = ((($139)) + 8|0);
 HEAP32[$140>>2] = $138;
 $141 = $f;
 $142 = ((($141)) + 12|0);
 HEAP32[$142>>2] = 0;
 $143 = $p;
 $144 = HEAP32[$143>>2]|0;
 $145 = $p;
 $146 = ((($145)) + 4|0);
 HEAP32[$146>>2] = $144;
 $147 = $p;
 $148 = ((($147)) + 12|0);
 HEAP32[$148>>2] = 0;
 $149 = $m;
 $150 = ((($149)) + 1284|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151 & 256;
 $153 = ($152|0)!=(0);
 if (!($153)) {
  STACKTOP = sp;return;
 }
 $chn = 0;
 while(1) {
  $154 = $chn;
  $155 = $mod;
  $156 = ((($155)) + 136|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($154|0)<($157|0);
  if (!($158)) {
   break;
  }
  $159 = $chn;
  $160 = $p;
  $161 = ((($160)) + 620|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + (($159*472)|0)|0);
  $164 = ((($163)) + 4|0);
  HEAP32[$164>>2] = 0;
  $165 = $chn;
  $166 = (($165) + 1)|0;
  $chn = $166;
 }
 STACKTOP = sp;return;
}
function _next_row($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $f = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 324|0);
 $f = $3;
 $4 = $p;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = $f;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $f;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $f;
 if ($10) {
  HEAP32[$11>>2] = 0;
  $12 = $f;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(-1);
  if ($15) {
   $16 = $f;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) - 1)|0;
   $20 = $p;
   HEAP32[$20>>2] = $19;
   $21 = $f;
   $22 = ((($21)) + 4|0);
   HEAP32[$22>>2] = -1;
  }
  $23 = $0;
  _next_order($23);
  STACKTOP = sp;return;
 }
 $24 = ((($11)) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $f;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) - 1)|0;
  $31 = $f;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<3)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) - 1)|0;
  $37 = $p;
  $38 = ((($37)) + 8|0);
  HEAP32[$38>>2] = $36;
  $39 = $f;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = 0;
 }
 $41 = $f;
 $42 = ((($41)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $p;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $49 = $f;
  $50 = ((($49)) + 36|0);
  HEAP32[$50>>2] = 0;
 } else {
  $51 = $f;
  $52 = ((($51)) + 32|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -1)|0;
  HEAP32[$52>>2] = $54;
 }
 $55 = $p;
 $56 = ((($55)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $f;
 $59 = ((($58)) + 24|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($57|0)>=($60|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $0;
 _next_order($62);
 STACKTOP = sp;return;
}
function _check_end_of_module($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $p;
 $3 = ((($2)) + 324|0);
 $f = $3;
 $4 = $p;
 $5 = HEAP32[$4>>2]|0;
 $6 = $p;
 $7 = ((($6)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $p;
 $10 = ((($9)) + 364|0);
 $11 = (($10) + ($8<<4)|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($5|0)==($13|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $p;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $p;
 $19 = ((($18)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $p;
 $22 = ((($21)) + 364|0);
 $23 = (($22) + ($20<<4)|0);
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($17|0)==($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $f;
 $28 = ((($27)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $p;
  $32 = ((($31)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $p;
  $36 = ((($35)) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $p;
  $39 = ((($38)) + 364|0);
  $40 = (($39) + ($37<<4)|0);
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $f;
  $44 = ((($43)) + 28|0);
  HEAP32[$44>>2] = $42;
 }
 $45 = $f;
 $46 = ((($45)) + 28|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + -1)|0;
 HEAP32[$46>>2] = $48;
 STACKTOP = sp;return;
}
function _read_row($ctx,$pat,$row) {
 $ctx = $ctx|0;
 $pat = $pat|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chn = 0, $env_on = 0, $ev = 0, $f = 0, $ins = 0, $m = 0, $mod = 0;
 var $num_rows = 0, $or$cond = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ev = sp + 48|0;
 $0 = $ctx;
 $1 = $pat;
 $2 = $row;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $mod = $5;
 $6 = $0;
 $p = $6;
 $7 = $p;
 $8 = ((($7)) + 324|0);
 $f = $8;
 $chn = 0;
 while(1) {
  $9 = $chn;
  $10 = $mod;
  $11 = ((($10)) + 136|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $chn;
  $15 = $1;
  $16 = $m;
  $17 = ((($16)) + 168|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($15<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 4|0);
  $22 = (($21) + ($14<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $mod;
  $25 = ((($24)) + 172|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $num_rows = $29;
  $30 = $2;
  $31 = $num_rows;
  $32 = ($30|0)<($31|0);
  if ($32) {
   $33 = $2;
   $34 = $chn;
   $35 = $1;
   $36 = $m;
   $37 = ((($36)) + 168|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + ($35<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 4|0);
   $42 = (($41) + ($34<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $m;
   $45 = ((($44)) + 172|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + ($43<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 4|0);
   $50 = (($49) + ($33<<3)|0);
   ;HEAP8[$ev>>0]=HEAP8[$50>>0]|0;HEAP8[$ev+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$ev+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$ev+3>>0]=HEAP8[$50+3>>0]|0;HEAP8[$ev+4>>0]=HEAP8[$50+4>>0]|0;HEAP8[$ev+5>>0]=HEAP8[$50+5>>0]|0;HEAP8[$ev+6>>0]=HEAP8[$50+6>>0]|0;HEAP8[$ev+7>>0]=HEAP8[$50+7>>0]|0;
  } else {
   ;HEAP8[$ev>>0]=0|0;HEAP8[$ev+1>>0]=0|0;HEAP8[$ev+2>>0]=0|0;HEAP8[$ev+3>>0]=0|0;HEAP8[$ev+4>>0]=0|0;HEAP8[$ev+5>>0]=0|0;HEAP8[$ev+6>>0]=0|0;HEAP8[$ev+7>>0]=0|0;
  }
  $51 = HEAP8[$ev>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)==(129);
  if ($53) {
   $env_on = 0;
   $54 = ((($ev)) + 1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = (($56) - 1)|0;
   $ins = $57;
   $58 = $ins;
   $59 = $mod;
   $60 = ((($59)) + 140|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58>>>0)<($61>>>0);
   if ($62) {
    $63 = $ins;
    $64 = $mod;
    $65 = ((($64)) + 176|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + (($63*764)|0)|0);
    $68 = ((($67)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)>(0);
    if ($70) {
     $71 = $ins;
     $72 = $mod;
     $73 = ((($72)) + 176|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + (($71*764)|0)|0);
     $76 = ((($75)) + 44|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77 & 1;
     $79 = ($78|0)!=(0);
     if ($79) {
      $env_on = 1;
     }
    }
   }
   $80 = ((($ev)) + 3|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = ($82|0)==(14);
   if ($83) {
    $84 = ((($ev)) + 4|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $86 & 240;
    $88 = $87 >> 4;
    $89 = ($88|0)==(13);
    if ($89) {
     $90 = ((($ev)) + 1|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = ($92|0)!=(0);
     if ($93) {
      $94 = ((($ev)) + 4|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = $95&255;
      $97 = $96 & 15;
      $98 = ($97|0)!=(0);
      $99 = $env_on;
      $100 = ($99|0)!=(0);
      $or$cond = $98 | $100;
      if ($or$cond) {
       $101 = ((($ev)) + 4|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = $102&255;
       $104 = $103 & 15;
       $105 = ($104|0)!=(0);
       if ($105) {
        HEAP8[$ev>>0] = 0;
       }
       $106 = ((($ev)) + 3|0);
       HEAP8[$106>>0] = 0;
       $107 = ((($ev)) + 4|0);
       HEAP8[$107>>0] = 0;
      }
     }
    }
   }
  }
  $108 = $0;
  $109 = $chn;
  $110 = (_check_delay($108,$ev,$109)|0);
  $111 = ($110|0)==(0);
  do {
   if ($111) {
    $112 = $f;
    $113 = ((($112)) + 36|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $f;
     $117 = ((($116)) + 32|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = ($118|0)>(0);
     if (!($119)) {
      break;
     }
    }
    $120 = $0;
    $121 = $chn;
    (_read_event($120,$ev,$121)|0);
    $122 = $0;
    $123 = $1;
    $124 = $chn;
    $125 = $2;
    _med_hold_hack($122,$123,$124,$125);
   } else {
    $126 = $chn;
    $127 = $p;
    $128 = ((($127)) + 620|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + (($126*472)|0)|0);
    HEAP32[$130>>2] = 0;
   }
  } while(0);
  $131 = $chn;
  $132 = (($131) + 1)|0;
  $chn = $132;
 }
 STACKTOP = sp;return;
}
function _inject_event($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chn = 0, $e = 0, $m = 0, $mod = 0, $p = 0, $smix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $0;
 $6 = ((($5)) + 9152|0);
 $smix = $6;
 $chn = 0;
 while(1) {
  $7 = $chn;
  $8 = $mod;
  $9 = ((($8)) + 136|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $smix;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + ($12))|0;
  $14 = ($7|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $chn;
  $16 = $p;
  $17 = ((($16)) + 968|0);
  $18 = (($17) + ($15<<3)|0);
  $e = $18;
  $19 = $e;
  $20 = ((($19)) + 7|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = $0;
   $25 = $e;
   $26 = $chn;
   (_read_event($24,$25,$26)|0);
   $27 = $e;
   $28 = ((($27)) + 7|0);
   HEAP8[$28>>0] = 0;
  }
  $29 = $chn;
  $30 = (($29) + 1)|0;
  $chn = $30;
 }
 STACKTOP = sp;return;
}
function _play_channel($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $$old = 0, $$old2 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $act = 0, $cond = 0, $m = 0, $mod = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $smix = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $0;
 $4 = ((($3)) + 9152|0);
 $smix = $4;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $1;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $13 = $xc;
 $14 = ((($13)) + 460|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = (_is_first_frame($15)|0);
 $17 = ($16|0)!=(0);
 do {
  if (!($17)) {
   $18 = $xc;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 2097152;
   $21 = ($20|0)!=(0);
   if ($21) {
    $22 = $xc;
    $23 = ((($22)) + 400|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $p;
    $26 = ((($25)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + ($24))|0;
    HEAP32[$26>>2] = $28;
    $29 = $p;
    $30 = ((($29)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)<(32);
    $33 = $p;
    $34 = ((($33)) + 20|0);
    if ($32) {
     HEAP32[$34>>2] = 32;
     break;
    }
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)>(255);
    if ($36) {
     $37 = $p;
     $38 = ((($37)) + 20|0);
     HEAP32[$38>>2] = 255;
    }
   }
  }
 } while(0);
 $39 = $xc;
 $40 = ((($39)) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)>(0);
 if ($42) {
  $43 = $xc;
  $44 = ((($43)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -1)|0;
  HEAP32[$44>>2] = $46;
  $47 = ($46|0)==(0);
  if ($47) {
   $48 = $0;
   $49 = $xc;
   $50 = ((($49)) + 436|0);
   $51 = $1;
   (_read_event($48,$50,$51)|0);
  }
 }
 $52 = $0;
 $53 = $1;
 $54 = (_virt_cstat($52,$53)|0);
 $act = $54;
 $55 = $act;
 $56 = ($55|0)==(-1);
 if ($56) {
  $57 = $0;
  $58 = $1;
  _update_volume($57,$58);
  STACKTOP = sp;return;
 }
 $59 = $p;
 $60 = ((($59)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0);
 $63 = $act;
 $64 = ($63|0)!=(256);
 $or$cond = $62 & $64;
 do {
  if ($or$cond) {
   $65 = $xc;
   $66 = ((($65)) + 44|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $mod;
   $69 = ((($68)) + 140|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($67>>>0)<($70>>>0);
   if ($71) {
    $72 = $xc;
    $73 = ((($72)) + 44|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $mod;
    $76 = ((($75)) + 176|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + (($74*764)|0)|0);
    $79 = ((($78)) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)>(0);
    if ($81) {
     $$old = $act;
     $$old2 = ($$old|0)==(0);
     if (!($$old2)) {
      break;
     }
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
   if ((label|0) == 15) {
    $82 = $smix;
    $83 = ((($82)) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)>(0);
    if ($85) {
     $86 = $xc;
     $87 = ((($86)) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $mod;
     $90 = ((($89)) + 140|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $smix;
     $93 = ((($92)) + 4|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (($91) + ($94))|0;
     $96 = ($88>>>0)>=($95>>>0);
     $97 = $act;
     $98 = ($97|0)==(0);
     $or$cond3 = $96 | $98;
     if (!($or$cond3)) {
      break;
     }
    }
   }
   $99 = $0;
   $100 = $1;
   _virt_resetchannel($99,$100);
   STACKTOP = sp;return;
  }
 } while(0);
 $101 = $xc;
 $102 = ((($101)) + 44|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $mod;
 $105 = ((($104)) + 140|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($103>>>0)<($106>>>0);
 if ($107) {
  $108 = $xc;
  $109 = ((($108)) + 44|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $mod;
  $112 = ((($111)) + 176|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + (($110*764)|0)|0);
  $115 = ((($114)) + 36|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($116|0)>(0);
  if (!($117)) {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $118 = $smix;
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)>(0);
  if (!($121)) {
   STACKTOP = sp;return;
  }
  $122 = $xc;
  $123 = ((($122)) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $mod;
  $126 = ((($125)) + 140|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $smix;
  $129 = ((($128)) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($127) + ($130))|0;
  $132 = ($124>>>0)<($131>>>0);
  if (!($132)) {
   STACKTOP = sp;return;
  }
 }
 $133 = $0;
 $134 = $xc;
 $135 = $1;
 _play_extras($133,$134,$135);
 $136 = $xc;
 $137 = HEAP32[$136>>2]|0;
 $138 = $137 & 262144;
 $139 = ($138|0)!=(0);
 if ($139) {
  $140 = $m;
  $141 = ((($140)) + 1284|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $142 & 16777216;
  $144 = ($143|0)!=(0);
  $145 = $xc;
  $146 = ((($145)) + 228|0);
  $147 = ((($146)) + 4|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + -1)|0;
  HEAP32[$147>>2] = $149;
  $150 = ($149|0)<=(0);
  $151 = ($149|0)==(0);
  $$sink = $144 ? $150 : $151;
  $152 = $$sink&1;
  $cond = $152;
  $153 = $cond;
  $154 = ($153|0)!=(0);
  if ($154) {
   $155 = $xc;
   $156 = ((($155)) + 228|0);
   $157 = ((($156)) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)<(16);
   if ($159) {
    $160 = $0;
    $161 = $1;
    _virt_voicepos($160,$161,0);
   } else {
    $162 = $xc;
    $163 = ((($162)) + 8|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $164 | 4;
    HEAP32[$163>>2] = $165;
   }
   $166 = $xc;
   $167 = ((($166)) + 228|0);
   $168 = ((($167)) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (11488 + (($169*12)|0)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $xc;
   $173 = ((($172)) + 84|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171))|0;
   HEAP32[$173>>2] = $175;
   $176 = $xc;
   $177 = ((($176)) + 228|0);
   $178 = ((($177)) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (11488 + (($179*12)|0)|0);
   $181 = ((($180)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $xc;
   $184 = ((($183)) + 84|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = Math_imul($185, $182)|0;
   HEAP32[$184>>2] = $186;
   $187 = $xc;
   $188 = ((($187)) + 228|0);
   $189 = ((($188)) + 8|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (11488 + (($190*12)|0)|0);
   $192 = ((($191)) + 8|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $xc;
   $195 = ((($194)) + 84|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($196|0) / ($193|0))&-1;
   HEAP32[$195>>2] = $197;
   $198 = $xc;
   $199 = ((($198)) + 228|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 & 15;
   $202 = $xc;
   $203 = ((($202)) + 228|0);
   $204 = ((($203)) + 4|0);
   HEAP32[$204>>2] = $201;
  }
 }
 $205 = $xc;
 $206 = ((($205)) + 64|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207|0)!=(0);
 if ($208) {
  $209 = $xc;
  $210 = ((($209)) + 64|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + -1)|0;
  HEAP32[$210>>2] = $212;
  $213 = ($212|0)==(0);
  if ($213) {
   $214 = $xc;
   $215 = ((($214)) + 8|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = $216 | 2;
   HEAP32[$215>>2] = $217;
  }
 }
 $218 = $0;
 $219 = $1;
 $220 = $act;
 _process_volume($218,$219,$220);
 $221 = $0;
 $222 = $1;
 $223 = $act;
 _process_frequency($221,$222,$223);
 $224 = $0;
 $225 = $1;
 $226 = $act;
 _process_pan($224,$225,$226);
 $227 = $0;
 $228 = $1;
 _update_volume($227,$228);
 $229 = $0;
 $230 = $1;
 _update_frequency($229,$230);
 $231 = $0;
 $232 = $1;
 _update_pan($231,$232);
 $233 = $m;
 $234 = ((($233)) + 1284|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = $235 & 4;
 $237 = ($236|0)!=(0);
 if ($237) {
  $238 = $xc;
  $239 = ((($238)) + 44|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $mod;
  $242 = ((($241)) + 140|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = ($240|0)<($243|0);
  if ($244) {
   $245 = $m;
   $246 = $xc;
   _update_invloop($245,$246);
  }
 }
 $247 = $xc;
 $248 = ((($247)) + 8|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = $249 & 128;
 $251 = ($250|0)!=(0);
 if ($251) {
  $252 = $xc;
  $253 = ((($252)) + 8|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $254 | 2;
  HEAP32[$253>>2] = $255;
 }
 $256 = $0;
 $257 = $1;
 $258 = (_virt_getvoicepos($256,$257)|0);
 $259 = $xc;
 $260 = ((($259)) + 456|0);
 HEAP32[$260>>2] = $258;
 STACKTOP = sp;return;
}
function _is_first_frame($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $m = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $1;
 $p = $2;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $6 = ((($5)) + 1288|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(3);
 $9 = $p;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 if ($8) {
  $12 = $p;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11|0) % ($14|0))&-1;
  $16 = ($15|0)==(0);
  $17 = $16&1;
  $0 = $17;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $18 = ($11|0)==(0);
  $19 = $18&1;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _update_volume($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $1;
 $6 = $p;
 $7 = ((($6)) + 620|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*472)|0)|0);
 $xc = $9;
 $10 = $p;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $p;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12|0) % ($15|0))&-1;
 $17 = ($16|0)!=(0);
 if ($17) {
  label = 3;
 } else {
  $18 = $m;
  $19 = ((($18)) + 1284|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 64;
  $22 = ($21|0)!=(0);
  if ($22) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $23 = $xc;
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 1048576;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $xc;
   $28 = ((($27)) + 284|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $p;
   $31 = ((($30)) + 320|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29))|0;
   HEAP32[$31>>2] = $33;
  }
  $34 = $xc;
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 & 1;
  $37 = ($36|0)!=(0);
  if ($37) {
   label = 7;
  } else {
   $38 = $xc;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 1;
   $42 = ($41|0)!=(0);
   if ($42) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   $43 = $xc;
   $44 = ((($43)) + 252|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $xc;
   $47 = ((($46)) + 84|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($45))|0;
   HEAP32[$47>>2] = $49;
  }
  $50 = $xc;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 & 1;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $xc;
   $56 = ((($55)) + 252|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)>(0);
   if ($58) {
    $59 = $xc;
    $60 = ((($59)) + 84|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $m;
    $63 = ((($62)) + 1268|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($61|0)>($64|0);
    if ($65) {
     $66 = $m;
     $67 = ((($66)) + 1268|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $xc;
     $70 = ((($69)) + 84|0);
     HEAP32[$70>>2] = $68;
     $71 = $xc;
     $72 = ((($71)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 & -2;
     HEAP32[$72>>2] = $74;
    }
   }
   $75 = $xc;
   $76 = ((($75)) + 252|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($77|0)<(0);
   if ($78) {
    $79 = $xc;
    $80 = ((($79)) + 84|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<(0);
    if ($82) {
     $83 = $xc;
     $84 = ((($83)) + 84|0);
     HEAP32[$84>>2] = 0;
     $85 = $xc;
     $86 = ((($85)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $87 & -2;
     HEAP32[$86>>2] = $88;
    }
   }
  }
  $89 = $xc;
  $90 = HEAP32[$89>>2]|0;
  $91 = $90 & 8192;
  $92 = ($91|0)!=(0);
  if ($92) {
   $93 = $xc;
   $94 = ((($93)) + 252|0);
   $95 = ((($94)) + 8|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $xc;
   $98 = ((($97)) + 84|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($96))|0;
   HEAP32[$98>>2] = $100;
  }
  $101 = $xc;
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 512;
  $104 = ($103|0)!=(0);
  if ($104) {
   $105 = $xc;
   $106 = ((($105)) + 296|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $xc;
   $109 = ((($108)) + 56|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + ($107))|0;
   HEAP32[$109>>2] = $111;
  }
 }
 $112 = $p;
 $113 = ((($112)) + 12|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $p;
 $116 = ((($115)) + 16|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (($114|0) % ($117|0))&-1;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = $xc;
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 & 64;
  $123 = ($122|0)!=(0);
  if ($123) {
   $124 = $xc;
   $125 = ((($124)) + 252|0);
   $126 = ((($125)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $xc;
   $129 = ((($128)) + 84|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (($130) + ($127))|0;
   HEAP32[$129>>2] = $131;
  }
  $132 = $xc;
  $133 = HEAP32[$132>>2]|0;
  $134 = $133 & 33554432;
  $135 = ($134|0)!=(0);
  if ($135) {
   $136 = $xc;
   $137 = ((($136)) + 252|0);
   $138 = ((($137)) + 16|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $xc;
   $141 = ((($140)) + 84|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($139))|0;
   HEAP32[$141>>2] = $143;
  }
  $144 = $xc;
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 & 1024;
  $147 = ($146|0)!=(0);
  if ($147) {
   $148 = $xc;
   $149 = ((($148)) + 296|0);
   $150 = ((($149)) + 4|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $xc;
   $153 = ((($152)) + 56|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + ($151))|0;
   HEAP32[$153>>2] = $155;
  }
  $156 = $xc;
  $157 = HEAP32[$156>>2]|0;
  $158 = $157 & 1048576;
  $159 = ($158|0)!=(0);
  if ($159) {
   $160 = $xc;
   $161 = ((($160)) + 284|0);
   $162 = ((($161)) + 4|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $p;
   $165 = ((($164)) + 320|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($166) + ($163))|0;
   HEAP32[$165>>2] = $167;
  }
 }
 $168 = $xc;
 $169 = ((($168)) + 84|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)<(0);
 $172 = $xc;
 $173 = ((($172)) + 84|0);
 if ($171) {
  HEAP32[$173>>2] = 0;
 } else {
  $174 = HEAP32[$173>>2]|0;
  $175 = $m;
  $176 = ((($175)) + 1268|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($174|0)>($177|0);
  if ($178) {
   $179 = $m;
   $180 = ((($179)) + 1268|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = $xc;
   $183 = ((($182)) + 84|0);
   HEAP32[$183>>2] = $181;
  }
 }
 $184 = $p;
 $185 = ((($184)) + 320|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)<(0);
 $188 = $p;
 $189 = ((($188)) + 320|0);
 if ($187) {
  HEAP32[$189>>2] = 0;
 } else {
  $190 = HEAP32[$189>>2]|0;
  $191 = $m;
  $192 = ((($191)) + 1272|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($190|0)>($193|0);
  if ($194) {
   $195 = $m;
   $196 = ((($195)) + 1272|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $p;
   $199 = ((($198)) + 320|0);
   HEAP32[$199>>2] = $197;
  }
 }
 $200 = $xc;
 $201 = ((($200)) + 56|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ($202|0)<(0);
 $204 = $xc;
 $205 = ((($204)) + 56|0);
 if ($203) {
  HEAP32[$205>>2] = 0;
 } else {
  $206 = HEAP32[$205>>2]|0;
  $207 = $m;
  $208 = ((($207)) + 1268|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($206|0)>($209|0);
  if ($210) {
   $211 = $m;
   $212 = ((($211)) + 1268|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = $xc;
   $215 = ((($214)) + 56|0);
   HEAP32[$215>>2] = $213;
  }
 }
 $216 = $xc;
 $217 = ((($216)) + 76|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)!=(0);
 if (!($219)) {
  STACKTOP = sp;return;
 }
 $220 = $xc;
 $221 = ((($220)) + 84|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = $xc;
 $224 = ((($223)) + 80|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $p;
 $227 = ((($226)) + 620|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = (($228) + (($225*472)|0)|0);
 $230 = ((($229)) + 84|0);
 HEAP32[$230>>2] = $222;
 STACKTOP = sp;return;
}
function _process_volume($ctx,$chn,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $finalvol = 0;
 var $gvol = 0, $instrument = 0, $m = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $vol_envelope = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $act;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = $p;
 $8 = ((($7)) + 620|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($6*472)|0)|0);
 $xc = $10;
 $11 = $0;
 $12 = $xc;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_get_instrument($11,$14)|0);
 $instrument = $15;
 $16 = $m;
 $17 = ((($16)) + 1284|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 262144;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $xc;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2;
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $instrument;
   $27 = ((($26)) + 44|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 1;
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $31 = $xc;
    $32 = ((($31)) + 68|0);
    HEAP32[$32>>2] = 0;
   }
  }
 }
 $33 = $xc;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 3;
 $37 = ($36|0)!=(0);
 $38 = $2;
 $39 = ($38|0)==(3);
 $or$cond = $37 | $39;
 $40 = $2;
 $41 = ($40|0)==(2);
 $or$cond3 = $or$cond | $41;
 do {
  if ($or$cond3) {
   $42 = $xc;
   $43 = ((($42)) + 68|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $xc;
   $46 = ((($45)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($44|0)>($47|0);
   $49 = $xc;
   if ($48) {
    $50 = ((($49)) + 72|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $xc;
    $53 = ((($52)) + 68|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) - ($51))|0;
    HEAP32[$53>>2] = $55;
    break;
   } else {
    $56 = ((($49)) + 68|0);
    HEAP32[$56>>2] = 0;
    $57 = $xc;
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $59 | 4;
    HEAP32[$58>>2] = $60;
    break;
   }
  }
 } while(0);
 $61 = $instrument;
 $62 = ((($61)) + 44|0);
 $63 = $xc;
 $64 = ((($63)) + 92|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (_check_envelope_fade($62,$65)|0);
 if ((($66|0) == -1)) {
  $67 = $xc;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 | 4;
  HEAP32[$68>>2] = $70;
 } else if (!((($66|0) == 0))) {
  $71 = $m;
  $72 = ((($71)) + 1284|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & 2;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $xc;
   $77 = ((($76)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 | 1;
   HEAP32[$77>>2] = $79;
  }
 }
 $80 = $xc;
 $81 = ((($80)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 & 4194304;
 $84 = ($83|0)!=(0);
 if (!($84)) {
  $85 = $instrument;
  $86 = ((($85)) + 44|0);
  $87 = $xc;
  $88 = ((($87)) + 92|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $xc;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 & 2;
  $94 = ($93|0)!=(0);
  $95 = $2;
  $96 = ($95|0)==(2);
  $97 = $94 ? 1 : $96;
  $98 = $97&1;
  $99 = $xc;
  $100 = HEAP32[$99>>2]|0;
  $101 = $100 & 134217728;
  $102 = ($101|0)!=(0);
  $103 = $102 ^ 1;
  $104 = $103 ^ 1;
  $105 = $104&1;
  $106 = $m;
  $107 = ((($106)) + 1288|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(3);
  $110 = $109&1;
  $111 = (_update_envelope($86,$89,$98,$105,$110)|0);
  $112 = $xc;
  $113 = ((($112)) + 92|0);
  HEAP32[$113>>2] = $111;
 }
 $114 = $instrument;
 $115 = ((($114)) + 44|0);
 $116 = $xc;
 $117 = ((($116)) + 92|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (_get_envelope($115,$118,64)|0);
 $120 = $119&65535;
 $vol_envelope = $120;
 $121 = $instrument;
 $122 = ((($121)) + 44|0);
 $123 = $xc;
 $124 = ((($123)) + 92|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (_check_envelope_end($122,$125)|0);
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = $vol_envelope;
  $129 = $128&65535;
  $130 = ($129|0)==(0);
  if ($130) {
   $131 = $xc;
   $132 = ((($131)) + 8|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $133 | 4;
   HEAP32[$132>>2] = $134;
  }
  $135 = $xc;
  $136 = ((($135)) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 16;
  HEAP32[$136>>2] = $138;
 }
 $139 = $xc;
 $140 = ((($139)) + 8|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141 & 4;
 $143 = ($142|0)!=(0);
 if ($143) {
  $144 = $1;
  $145 = $p;
  $146 = ((($145)) + 944|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($144|0)>=($147|0);
  if ($148) {
   $149 = $0;
   $150 = $1;
   _virt_resetchannel($149,$150);
   STACKTOP = sp;return;
  }
 }
 $151 = $0;
 $152 = $xc;
 $153 = (_extras_get_volume($151,$152)|0);
 $finalvol = $153;
 $154 = $xc;
 $155 = HEAP32[$154>>2]|0;
 $156 = $155 & 32;
 $157 = ($156|0)!=(0);
 do {
  if ($157) {
   $158 = $0;
   $159 = $xc;
   $160 = ((($159)) + 128|0);
   $161 = (_get_lfo($158,$160,64,0)|0);
   $162 = $finalvol;
   $163 = (($162) + ($161))|0;
   $finalvol = $163;
   $164 = $0;
   $165 = (_is_first_frame($164)|0);
   $166 = ($165|0)!=(0);
   if ($166) {
    $167 = $m;
    $168 = ((($167)) + 1284|0);
    $169 = HEAP32[$168>>2]|0;
    $170 = $169 & 1048576;
    $171 = ($170|0)!=(0);
    if (!($171)) {
     break;
    }
   }
   $172 = $xc;
   $173 = ((($172)) + 128|0);
   _update_lfo($173);
  }
 } while(0);
 $174 = $finalvol;
 $175 = ($174|0)<(0);
 if ($175) {
  $finalvol = 0;
 } else {
  $176 = $finalvol;
  $177 = $m;
  $178 = ((($177)) + 1268|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($176|0)>($179|0);
  if ($180) {
   $181 = $m;
   $182 = ((($181)) + 1268|0);
   $183 = HEAP32[$182>>2]|0;
   $finalvol = $183;
  }
 }
 $184 = $finalvol;
 $185 = $xc;
 $186 = ((($185)) + 68|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = Math_imul($184, $187)|0;
 $189 = $188 >> 6;
 $finalvol = $189;
 $190 = $m;
 $191 = ((($190)) + 1284|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = $192 & 16;
 $194 = ($193|0)!=(0);
 if ($194) {
  $gvol = 64;
 } else {
  $195 = $p;
  $196 = ((($195)) + 320|0);
  $197 = HEAP32[$196>>2]|0;
  $gvol = $197;
 }
 $198 = $vol_envelope;
 $199 = $198&65535;
 $200 = $gvol;
 $201 = Math_imul($199, $200)|0;
 $202 = $xc;
 $203 = ((($202)) + 56|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = Math_imul($201, $204)|0;
 $206 = $m;
 $207 = ((($206)) + 1272|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = (($205|0) / ($208|0))&-1;
 $210 = $finalvol;
 $211 = $210<<6;
 $212 = $m;
 $213 = ((($212)) + 1268|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = (($211|0) / ($214|0))&-1;
 $216 = Math_imul($209, $215)|0;
 $217 = $216 >>> 18;
 $finalvol = $217;
 $218 = $finalvol;
 $219 = $0;
 $220 = $1;
 $221 = (_get_channel_vol($219,$220)|0);
 $222 = Math_imul($218, $221)|0;
 $223 = (($222|0) / 100)&-1;
 $finalvol = $223;
 $224 = $m;
 $225 = ((($224)) + 1280|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)!=(0|0);
 if ($227) {
  $228 = $m;
  $229 = ((($228)) + 1268|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ($230|0)==(255);
  $232 = $finalvol;
  if ($231) {
   $233 = $232 >> 2;
   $234 = $m;
   $235 = ((($234)) + 1280|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = (($236) + ($233<<2)|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $238 << 2;
   $247 = $239;
  } else {
   $240 = $232 >> 4;
   $241 = $m;
   $242 = ((($241)) + 1280|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($243) + ($240<<2)|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = $245 << 4;
   $247 = $246;
  }
  $finalvol = $247;
 }
 $248 = $m;
 $249 = ((($248)) + 1284|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = $250 & 16384;
 $252 = ($251|0)!=(0);
 if ($252) {
  $253 = $finalvol;
  $254 = $instrument;
  $255 = ((($254)) + 32|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = Math_imul($253, $256)|0;
  $258 = $xc;
  $259 = ((($258)) + 88|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = Math_imul($257, $260)|0;
  $262 = $261 >> 12;
  $finalvol = $262;
 }
 $263 = $xc;
 $264 = ((($263)) + 240|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = ($265|0)!=(0);
 if ($266) {
  $267 = $xc;
  $268 = ((($267)) + 240|0);
  $269 = ((($268)) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = ($270|0)==(0);
  $272 = $xc;
  $273 = ((($272)) + 240|0);
  if ($271) {
   $274 = HEAP32[$273>>2]|0;
   $275 = $274 & 240;
   $276 = $275 >> 4;
   $277 = $276 | 128;
   $278 = $xc;
   $279 = ((($278)) + 240|0);
   $280 = ((($279)) + 4|0);
   HEAP32[$280>>2] = $277;
  } else {
   $281 = ((($273)) + 4|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ($282|0)==(128);
   if ($283) {
    $284 = $xc;
    $285 = ((($284)) + 240|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $286 & 15;
    $288 = $xc;
    $289 = ((($288)) + 240|0);
    $290 = ((($289)) + 4|0);
    HEAP32[$290>>2] = $287;
   }
  }
  $291 = $xc;
  $292 = ((($291)) + 240|0);
  $293 = ((($292)) + 4|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($294) + -1)|0;
  HEAP32[$293>>2] = $295;
  $296 = $xc;
  $297 = ((($296)) + 240|0);
  $298 = ((($297)) + 4|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = $299 ^ -1;
  $301 = $300 & 128;
  $302 = ($301|0)!=(0);
  if ($302) {
   $finalvol = 0;
  }
 }
 $303 = $1;
 $304 = $m;
 $305 = ((($304)) + 136|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = ($303|0)<($306|0);
 $308 = $finalvol;
 $309 = $p;
 if ($307) {
  $310 = ((($309)) + 316|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = Math_imul($308, $311)|0;
  $313 = (($312|0) / 100)&-1;
  $finalvol = $313;
 } else {
  $314 = ((($309)) + 312|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = Math_imul($308, $315)|0;
  $317 = (($316|0) / 100)&-1;
  $finalvol = $317;
 }
 $318 = $xc;
 $319 = ((($318)) + 8|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = $320 & 32;
 $322 = ($321|0)!=(0);
 $323 = $finalvol;
 $324 = $322 ? 0 : $323;
 $325 = $xc;
 $326 = ((($325)) + 460|0);
 HEAP32[$326>>2] = $324;
 $327 = $0;
 $328 = $1;
 $329 = $finalvol;
 _virt_setvol($327,$328,$329);
 $330 = $xc;
 $331 = ((($330)) + 76|0);
 $332 = HEAP32[$331>>2]|0;
 $333 = ($332|0)!=(0);
 if (!($333)) {
  STACKTOP = sp;return;
 }
 $334 = $0;
 $335 = $xc;
 $336 = ((($335)) + 80|0);
 $337 = HEAP32[$336>>2]|0;
 $338 = $finalvol;
 _virt_setvol($334,$337,$338);
 STACKTOP = sp;return;
}
function _process_frequency($ctx,$chn,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $arp = 0, $b0 = 0, $b1 = 0, $cutoff = 0, $frq_envelope = 0, $instrument = 0, $linear_bend = 0, $m = 0, $p = 0;
 var $period = 0.0, $resonance = 0, $s = 0, $shift = 0, $vib = 0, $vibrato = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 12|0;
 $b1 = sp + 8|0;
 $0 = $ctx;
 $1 = $chn;
 $2 = $act;
 $3 = $0;
 $4 = ((($3)) + 1496|0);
 $s = $4;
 $5 = $0;
 $p = $5;
 $6 = $0;
 $7 = ((($6)) + 1552|0);
 $m = $7;
 $8 = $1;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $13 = $0;
 $14 = $xc;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_get_instrument($13,$16)|0);
 $instrument = $17;
 $18 = $xc;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 16777216;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = $instrument;
  $24 = ((($23)) + 356|0);
  $25 = $xc;
  $26 = ((($25)) + 100|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $xc;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & 2;
  $32 = ($31|0)!=(0);
  $33 = $2;
  $34 = ($33|0)==(2);
  $35 = $32 ? 1 : $34;
  $36 = $35&1;
  $37 = $xc;
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & 134217728;
  $40 = ($39|0)!=(0);
  $41 = $40 ^ 1;
  $42 = $41 ^ 1;
  $43 = $42&1;
  $44 = $m;
  $45 = ((($44)) + 1288|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(3);
  $48 = $47&1;
  $49 = (_update_envelope($24,$27,$36,$43,$48)|0);
  $50 = $xc;
  $51 = ((($50)) + 100|0);
  HEAP32[$51>>2] = $49;
 }
 $52 = $instrument;
 $53 = ((($52)) + 356|0);
 $54 = $xc;
 $55 = ((($54)) + 100|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_get_envelope($53,$56,0)|0);
 $frq_envelope = $57;
 $58 = $xc;
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & 16384;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $xc;
  $63 = ((($62)) + 416|0);
  $64 = ((($63)) + 12|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0);
  if ($66) {
   $67 = $xc;
   $68 = ((($67)) + 416|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $xc;
   $71 = ((($70)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($69))|0;
   HEAP32[$71>>2] = $73;
   $74 = $xc;
   $75 = ((($74)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $xc;
   $78 = ((($77)) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $m;
   $81 = ((($80)) + 1284|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & 4096;
   $84 = $xc;
   $85 = ((($84)) + 32|0);
   $86 = +HEAPF64[$85>>3];
   $87 = (+_note_to_period($76,$79,$83,$86));
   $88 = $xc;
   $89 = ((($88)) + 24|0);
   HEAPF64[$89>>3] = $87;
   $90 = $xc;
   $91 = ((($90)) + 416|0);
   $92 = ((($91)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $xc;
   $95 = ((($94)) + 416|0);
   $96 = ((($95)) + 12|0);
   HEAP32[$96>>2] = $93;
  }
  $97 = $xc;
  $98 = ((($97)) + 416|0);
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + -1)|0;
  HEAP32[$99>>2] = $101;
  $102 = $0;
  $103 = $1;
  $104 = $xc;
  $105 = ((($104)) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  _virt_setnote($102,$103,$106);
 }
 $107 = $0;
 $108 = $xc;
 $109 = ((($108)) + 196|0);
 $110 = $xc;
 $111 = ((($110)) + 196|0);
 $112 = ((($111)) + 16|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (1 + ($113))|0;
 $115 = $114<<10;
 $116 = (_get_lfo($107,$109,$115,1)|0);
 $vibrato = $116;
 $117 = $xc;
 $118 = ((($117)) + 196|0);
 _update_lfo($118);
 $119 = $xc;
 $120 = ((($119)) + 196|0);
 $121 = ((($120)) + 16|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)>(1);
 $124 = $xc;
 $125 = ((($124)) + 196|0);
 $126 = ((($125)) + 16|0);
 if ($123) {
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) - 2)|0;
  HEAP32[$126>>2] = $128;
 } else {
  HEAP32[$126>>2] = 0;
 }
 $129 = $xc;
 $130 = HEAP32[$129>>2]|0;
 $131 = $130 & 16;
 $132 = ($131|0)!=(0);
 if ($132) {
  label = 12;
 } else {
  $133 = $xc;
  $134 = ((($133)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $135 & 16;
  $137 = ($136|0)!=(0);
  if ($137) {
   label = 12;
  }
 }
 do {
  if ((label|0) == 12) {
   $138 = $m;
   $139 = ((($138)) + 1284|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $140 & 524288;
   $142 = ($141|0)!=(0);
   $143 = $142 ? 10 : 9;
   $shift = $143;
   $144 = $0;
   $145 = $xc;
   $146 = ((($145)) + 108|0);
   $147 = $shift;
   $148 = 1 << $147;
   $149 = (_get_lfo($144,$146,$148,1)|0);
   $vib = $149;
   $150 = $m;
   $151 = ((($150)) + 1284|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $152 & 2097152;
   $154 = ($153|0)!=(0);
   $155 = $vib;
   $156 = $vibrato;
   if ($154) {
    $157 = (($156) - ($155))|0;
    $vibrato = $157;
   } else {
    $158 = (($156) + ($155))|0;
    $vibrato = $158;
   }
   $159 = $0;
   $160 = (_is_first_frame($159)|0);
   $161 = ($160|0)!=(0);
   if ($161) {
    $162 = $m;
    $163 = ((($162)) + 1284|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $164 & 1048576;
    $166 = ($165|0)!=(0);
    if (!($166)) {
     break;
    }
   }
   $167 = $xc;
   $168 = ((($167)) + 108|0);
   _update_lfo($168);
  }
 } while(0);
 $169 = $xc;
 $170 = ((($169)) + 24|0);
 $171 = +HEAPF64[$170>>3];
 $period = $171;
 $172 = $0;
 $173 = $xc;
 $174 = (_extras_get_period($172,$173)|0);
 $175 = (+($174|0));
 $176 = $period;
 $177 = $176 + $175;
 $period = $177;
 $178 = $period;
 $179 = $vibrato;
 $180 = (+($179|0));
 $181 = $178 + $180;
 $182 = $xc;
 $183 = ((($182)) + 12|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = $xc;
 $186 = HEAP32[$185>>2]|0;
 $187 = $186 & 67108864;
 $188 = ($187|0)!=(0);
 $189 = $188 ^ 1;
 $190 = $189 ^ 1;
 $191 = $190&1;
 $192 = $m;
 $193 = ((($192)) + 1284|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $194 & 4096;
 $196 = $xc;
 $197 = ((($196)) + 32|0);
 $198 = +HEAPF64[$197>>3];
 $199 = (_period_to_bend($181,$184,$191,$195,$198)|0);
 $linear_bend = $199;
 $200 = $xc;
 $201 = ((($200)) + 100|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ($202|0)>=(0);
 if ($203) {
  $204 = $instrument;
  $205 = ((($204)) + 356|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $206 ^ -1;
  $208 = $207 & 8;
  $209 = ($208|0)!=(0);
  if ($209) {
   $210 = $frq_envelope;
   $211 = $210 << 7;
   $212 = $linear_bend;
   $213 = (($212) + ($211))|0;
   $linear_bend = $213;
  }
 }
 $214 = $xc;
 $215 = ((($214)) + 168|0);
 $216 = ((($215)) + 20|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = $xc;
 $219 = ((($218)) + 168|0);
 $220 = (($219) + ($217)|0);
 $221 = HEAP8[$220>>0]|0;
 $222 = $221 << 24 >> 24;
 $arp = $222;
 $223 = $arp;
 $224 = ($223|0)!=(0);
 if ($224) {
  $225 = $arp;
  $226 = ($225*12800)|0;
  $227 = $linear_bend;
  $228 = (($227) + ($226))|0;
  $linear_bend = $228;
 }
 $229 = $0;
 $230 = $xc;
 $231 = (_extras_get_linear_bend($229,$230)|0);
 $232 = $linear_bend;
 $233 = (($232) + ($231))|0;
 $linear_bend = $233;
 $234 = $linear_bend;
 $235 = $234 >> 7;
 $236 = $xc;
 $237 = ((($236)) + 452|0);
 HEAP32[$237>>2] = $235;
 $238 = $xc;
 $239 = ((($238)) + 12|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = $linear_bend;
 $242 = (_note_to_period_mix($240,$241)|0);
 $243 = $xc;
 $244 = ((($243)) + 448|0);
 HEAP32[$244>>2] = $242;
 $245 = $m;
 $246 = ((($245)) + 1284|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = $247 & 8192;
 $249 = ($248|0)!=(0);
 $250 = $xc;
 $251 = ((($250)) + 448|0);
 $252 = HEAP32[$251>>2]|0;
 do {
  if ($249) {
   $253 = (+($252|0));
   $254 = $xc;
   $255 = ((($254)) + 40|0);
   $256 = HEAP32[$255>>2]|0;
   $257 = (+_note_to_period(83,$256,0,0.0));
   $258 = $257 * 4096.0;
   $259 = $253 < $258;
   $260 = $xc;
   if ($259) {
    $261 = ((($260)) + 40|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (+_note_to_period(83,$262,0,0.0));
    $264 = $263 * 4096.0;
    $265 = (~~(($264)));
    $266 = $xc;
    $267 = ((($266)) + 448|0);
    HEAP32[$267>>2] = $265;
    break;
   }
   $268 = ((($260)) + 448|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = (+($269|0));
   $271 = $xc;
   $272 = ((($271)) + 40|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = (+_note_to_period(48,$273,0,0.0));
   $275 = $274 * 4096.0;
   $276 = $270 > $275;
   if ($276) {
    $277 = $xc;
    $278 = ((($277)) + 40|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (+_note_to_period(48,$279,0,0.0));
    $281 = $280 * 4096.0;
    $282 = (~~(($281)));
    $283 = $xc;
    $284 = ((($283)) + 448|0);
    HEAP32[$284>>2] = $282;
   }
  } else {
   $285 = ($252|0)<(4096);
   if ($285) {
    $286 = $xc;
    $287 = ((($286)) + 448|0);
    HEAP32[$287>>2] = 4096;
   }
  }
 } while(0);
 $288 = $0;
 $289 = $1;
 $290 = $linear_bend;
 _virt_setbend($288,$289,$290);
 $291 = $m;
 $292 = ((($291)) + 1284|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = $293 & 65536;
 $295 = ($294|0)!=(0);
 if (!($295)) {
  STACKTOP = sp;return;
 }
 $296 = $xc;
 $297 = ((($296)) + 100|0);
 $298 = HEAP32[$297>>2]|0;
 $299 = ($298|0)>=(0);
 if ($299) {
  $300 = $instrument;
  $301 = ((($300)) + 356|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = $302 & 8;
  $304 = ($303|0)!=(0);
  if ($304) {
   $305 = $frq_envelope;
   $306 = ($305|0)<(254);
   if ($306) {
    $307 = $frq_envelope;
    $308 = $xc;
    $309 = ((($308)) + 404|0);
    $310 = ((($309)) + 8|0);
    HEAP32[$310>>2] = $307;
   }
   $311 = $xc;
   $312 = ((($311)) + 404|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $xc;
   $315 = ((($314)) + 404|0);
   $316 = ((($315)) + 8|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = Math_imul($313, $317)|0;
   $319 = $318 >> 8;
   $cutoff = $319;
  } else {
   label = 36;
  }
 } else {
  label = 36;
 }
 if ((label|0) == 36) {
  $320 = $xc;
  $321 = ((($320)) + 404|0);
  $322 = HEAP32[$321>>2]|0;
  $cutoff = $322;
 }
 $323 = $xc;
 $324 = ((($323)) + 404|0);
 $325 = ((($324)) + 4|0);
 $326 = HEAP32[$325>>2]|0;
 $resonance = $326;
 $327 = $cutoff;
 $328 = ($327|0)>(255);
 if ($328) {
  $cutoff = 255;
 } else {
  $329 = $cutoff;
  $330 = ($329|0)<(255);
  if ($330) {
   $331 = $s;
   $332 = HEAP32[$331>>2]|0;
   $333 = $cutoff;
   $334 = $resonance;
   _filter_setup($332,$333,$334,$a0,$b0,$b1);
   $335 = $0;
   $336 = $1;
   $337 = HEAP32[$a0>>2]|0;
   _virt_seteffect($335,$336,176,$337);
   $338 = $0;
   $339 = $1;
   $340 = HEAP32[$b0>>2]|0;
   _virt_seteffect($338,$339,177,$340);
   $341 = $0;
   $342 = $1;
   $343 = HEAP32[$b1>>2]|0;
   _virt_seteffect($341,$342,178,$343);
   $344 = $0;
   $345 = $1;
   $346 = $resonance;
   _virt_seteffect($344,$345,3,$346);
  }
 }
 $347 = $0;
 $348 = $1;
 $349 = $cutoff;
 _virt_seteffect($347,$348,2,$349);
 STACKTOP = sp;return;
}
function _process_pan($ctx,$chn,$act) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $act = $act|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $finalpan = 0, $instrument = 0, $m = 0;
 var $p = 0, $pan_envelope = 0, $panbrello = 0, $s = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $act;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $0;
 $7 = ((($6)) + 1496|0);
 $s = $7;
 $8 = $1;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $panbrello = 0;
 $13 = $0;
 $14 = $xc;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_get_instrument($13,$16)|0);
 $instrument = $17;
 $18 = $xc;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 8388608;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = $instrument;
  $24 = ((($23)) + 200|0);
  $25 = $xc;
  $26 = ((($25)) + 96|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $xc;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & 2;
  $32 = ($31|0)!=(0);
  $33 = $2;
  $34 = ($33|0)==(2);
  $35 = $32 ? 1 : $34;
  $36 = $35&1;
  $37 = $xc;
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & 134217728;
  $40 = ($39|0)!=(0);
  $41 = $40 ^ 1;
  $42 = $41 ^ 1;
  $43 = $42&1;
  $44 = $m;
  $45 = ((($44)) + 1288|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(3);
  $48 = $47&1;
  $49 = (_update_envelope($24,$27,$36,$43,$48)|0);
  $50 = $xc;
  $51 = ((($50)) + 96|0);
  HEAP32[$51>>2] = $49;
 }
 $52 = $instrument;
 $53 = ((($52)) + 200|0);
 $54 = $xc;
 $55 = ((($54)) + 96|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_get_envelope($53,$56,32)|0);
 $pan_envelope = $57;
 $58 = $xc;
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & 524288;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $0;
  $63 = $xc;
  $64 = ((($63)) + 148|0);
  $65 = (_get_lfo($62,$64,512,0)|0);
  $panbrello = $65;
  $66 = $xc;
  $67 = ((($66)) + 148|0);
  _update_lfo($67);
 }
 $68 = $xc;
 $69 = ((($68)) + 368|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $panbrello;
 $72 = (($70) + ($71))|0;
 $73 = $pan_envelope;
 $74 = (($73) - 32)|0;
 $75 = $xc;
 $76 = ((($75)) + 368|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) - 128)|0;
 $79 = (Math_abs(($78|0))|0);
 $80 = (128 - ($79))|0;
 $81 = Math_imul($74, $80)|0;
 $82 = (($81|0) / 32)&-1;
 $83 = (($72) + ($82))|0;
 $finalpan = $83;
 $84 = $s;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 & 4;
 $88 = ($87|0)!=(0);
 if ($88) {
  label = 7;
 } else {
  $89 = $xc;
  $90 = ((($89)) + 368|0);
  $91 = ((($90)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)!=(0);
  if ($93) {
   label = 7;
  } else {
   $94 = $finalpan;
   $95 = (($94) - 128)|0;
   $96 = $s;
   $97 = ((($96)) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = Math_imul($95, $98)|0;
   $100 = (($99|0) / 100)&-1;
   $finalpan = $100;
  }
 }
 if ((label|0) == 7) {
  $finalpan = 0;
 }
 $101 = $finalpan;
 $102 = ($101|0)<(-128);
 if ($102) {
  $finalpan = -128;
 } else {
  $103 = $finalpan;
  $104 = ($103|0)>(127);
  if ($104) {
   $finalpan = 127;
  }
 }
 $105 = $finalpan;
 $106 = (($105) + 128)|0;
 $107 = $xc;
 $108 = ((($107)) + 464|0);
 HEAP32[$108>>2] = $106;
 $109 = $xc;
 $110 = ((($109)) + 368|0);
 $111 = ((($110)) + 16|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0);
 $114 = $0;
 $115 = $1;
 if ($113) {
  _virt_setpan($114,$115,32768);
  STACKTOP = sp;return;
 } else {
  $116 = $finalpan;
  _virt_setpan($114,$115,$116);
  STACKTOP = sp;return;
 }
}
function _update_frequency($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $end = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $1;
 $6 = $p;
 $7 = ((($6)) + 620|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*472)|0)|0);
 $xc = $9;
 $10 = $0;
 $11 = (_is_first_frame($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $m;
  $14 = ((($13)) + 1284|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 128;
  $17 = ($16|0)!=(0);
  if ($17) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $18 = $xc;
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 8;
   $21 = ($20|0)!=(0);
   if ($21) {
    label = 5;
   } else {
    $22 = $xc;
    $23 = ((($22)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 & 8;
    $26 = ($25|0)!=(0);
    if ($26) {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    $27 = $xc;
    $28 = ((($27)) + 312|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (+($29|0));
    $31 = $xc;
    $32 = ((($31)) + 24|0);
    $33 = +HEAPF64[$32>>3];
    $34 = $33 + $30;
    HEAPF64[$32>>3] = $34;
   }
   $35 = $xc;
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & 4;
   $38 = ($37|0)!=(0);
   if (!($38)) {
    $39 = $xc;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 & 4;
    $43 = ($42|0)!=(0);
    if (!($43)) {
     break;
    }
   }
   $end = 0;
   $44 = $xc;
   $45 = ((($44)) + 336|0);
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)>(0);
   $49 = $xc;
   $50 = ((($49)) + 336|0);
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (+($52|0));
   $54 = $xc;
   $55 = ((($54)) + 24|0);
   $56 = +HEAPF64[$55>>3];
   if ($48) {
    $57 = $56 + $53;
    HEAPF64[$55>>3] = $57;
    $58 = $xc;
    $59 = ((($58)) + 24|0);
    $60 = +HEAPF64[$59>>3];
    $61 = $xc;
    $62 = ((($61)) + 336|0);
    $63 = +HEAPF64[$62>>3];
    $64 = $60 >= $63;
    if ($64) {
     $end = 1;
    }
   } else {
    $65 = $56 - $53;
    HEAPF64[$55>>3] = $65;
    $66 = $xc;
    $67 = ((($66)) + 24|0);
    $68 = +HEAPF64[$67>>3];
    $69 = $xc;
    $70 = ((($69)) + 336|0);
    $71 = +HEAPF64[$70>>3];
    $72 = $68 <= $71;
    if ($72) {
     $end = 1;
    }
   }
   $73 = $end;
   $74 = ($73|0)!=(0);
   if ($74) {
    $75 = $xc;
    $76 = ((($75)) + 336|0);
    $77 = +HEAPF64[$76>>3];
    $78 = $xc;
    $79 = ((($78)) + 24|0);
    HEAPF64[$79>>3] = $77;
    $80 = $xc;
    $81 = ((($80)) + 336|0);
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = 0;
    $83 = $xc;
    $84 = HEAP32[$83>>2]|0;
    $85 = $84 & -5;
    HEAP32[$83>>2] = $85;
    $86 = $xc;
    $87 = ((($86)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88 & -5;
    HEAP32[$87>>2] = $89;
   }
  }
 } while(0);
 $90 = $0;
 $91 = (_is_first_frame($90)|0);
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $xc;
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 & 128;
  $96 = ($95|0)!=(0);
  if ($96) {
   $97 = $xc;
   $98 = ((($97)) + 312|0);
   $99 = ((($98)) + 8|0);
   $100 = +HEAPF64[$99>>3];
   $101 = $xc;
   $102 = ((($101)) + 24|0);
   $103 = +HEAPF64[$102>>3];
   $104 = $103 + $100;
   HEAPF64[$102>>3] = $104;
  }
  $105 = $xc;
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & 32768;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $xc;
   $110 = ((($109)) + 416|0);
   $111 = ((($110)) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $xc;
   $114 = ((($113)) + 12|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) + ($112))|0;
   HEAP32[$114>>2] = $116;
   $117 = $xc;
   $118 = ((($117)) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $xc;
   $121 = ((($120)) + 40|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $m;
   $124 = ((($123)) + 1284|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $125 & 4096;
   $127 = $xc;
   $128 = ((($127)) + 32|0);
   $129 = +HEAPF64[$128>>3];
   $130 = (+_note_to_period($119,$122,$126,$129));
   $131 = $xc;
   $132 = ((($131)) + 24|0);
   HEAPF64[$132>>3] = $130;
  }
 }
 $133 = $m;
 $134 = ((($133)) + 1284|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $135 & 4096;
 $137 = ($136|0)!=(0);
 do {
  if ($137) {
   $138 = $xc;
   $139 = ((($138)) + 24|0);
   $140 = +HEAPF64[$139>>3];
   $141 = $140 < 0.0;
   $142 = $xc;
   $143 = ((($142)) + 24|0);
   if ($141) {
    HEAPF64[$143>>3] = 0.0;
    break;
   }
   $144 = +HEAPF64[$143>>3];
   $145 = $144 > 7680.0;
   if ($145) {
    $146 = $xc;
    $147 = ((($146)) + 24|0);
    HEAPF64[$147>>3] = 7680.0;
   }
  } else {
   $148 = $m;
   $149 = ((($148)) + 1284|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 & 8192;
   $152 = ($151|0)!=(0);
   if ($152) {
    $153 = $xc;
    $154 = ((($153)) + 24|0);
    $155 = +HEAPF64[$154>>3];
    $156 = $xc;
    $157 = ((($156)) + 40|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (+_note_to_period(83,$158,0,0.0));
    $160 = $155 < $159;
    $161 = $xc;
    if ($160) {
     $162 = ((($161)) + 40|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (+_note_to_period(83,$163,0,0.0));
     $165 = $xc;
     $166 = ((($165)) + 24|0);
     HEAPF64[$166>>3] = $164;
     break;
    }
    $167 = ((($161)) + 24|0);
    $168 = +HEAPF64[$167>>3];
    $169 = $xc;
    $170 = ((($169)) + 40|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (+_note_to_period(48,$171,0,0.0));
    $173 = $168 > $172;
    if ($173) {
     $174 = $xc;
     $175 = ((($174)) + 40|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (+_note_to_period(48,$176,0,0.0));
     $178 = $xc;
     $179 = ((($178)) + 24|0);
     HEAPF64[$179>>3] = $177;
    }
   }
  }
 } while(0);
 $180 = $xc;
 $181 = ((($180)) + 24|0);
 $182 = +HEAPF64[$181>>3];
 $183 = $182 < 1.0;
 if (!($183)) {
  $186 = $xc;
  $187 = ((($186)) + 168|0);
  $188 = ((($187)) + 20|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + 1)|0;
  HEAP32[$188>>2] = $190;
  $191 = $xc;
  $192 = ((($191)) + 168|0);
  $193 = ((($192)) + 16|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $xc;
  $196 = ((($195)) + 168|0);
  $197 = ((($196)) + 20|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (($198|0) % ($194|0))&-1;
  HEAP32[$197>>2] = $199;
  STACKTOP = sp;return;
 }
 $184 = $xc;
 $185 = ((($184)) + 84|0);
 HEAP32[$185>>2] = 0;
 $186 = $xc;
 $187 = ((($186)) + 168|0);
 $188 = ((($187)) + 20|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = (($189) + 1)|0;
 HEAP32[$188>>2] = $190;
 $191 = $xc;
 $192 = ((($191)) + 168|0);
 $193 = ((($192)) + 16|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $xc;
 $196 = ((($195)) + 168|0);
 $197 = ((($196)) + 20|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($198|0) % ($194|0))&-1;
 HEAP32[$197>>2] = $199;
 STACKTOP = sp;return;
}
function _update_pan($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0;
 var $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 620|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + (($3*472)|0)|0);
 $xc = $7;
 $8 = $xc;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (_is_first_frame($12)|0);
 $14 = ($13|0)!=(0);
 $15 = $xc;
 $16 = ((($15)) + 368|0);
 if ($14) {
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $xc;
  $20 = ((($19)) + 368|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
 } else {
  $23 = ((($16)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $xc;
  $26 = ((($25)) + 368|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24))|0;
  HEAP32[$26>>2] = $28;
 }
 $29 = $xc;
 $30 = ((($29)) + 368|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)<(0);
 $33 = $xc;
 $34 = ((($33)) + 368|0);
 if ($32) {
  HEAP32[$34>>2] = 0;
  STACKTOP = sp;return;
 }
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)>(255);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = $xc;
 $38 = ((($37)) + 368|0);
 HEAP32[$38>>2] = 255;
 STACKTOP = sp;return;
}
function _update_invloop($m,$xc) {
 $m = $m|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $len = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 180|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*52)|0)|0);
 $xxs = $8;
 $9 = $1;
 $10 = ((($9)) + 388|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (11696 + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 388|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($13))|0;
 HEAP32[$16>>2] = $18;
 $19 = $xxs;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 2;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $1;
 $25 = ((($24)) + 388|0);
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)>=(128);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = $1;
 $30 = ((($29)) + 388|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = $xxs;
 $33 = ((($32)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $xxs;
 $36 = ((($35)) + 36|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($34) - ($37))|0;
 $len = $38;
 $39 = $1;
 $40 = ((($39)) + 388|0);
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$41>>2] = $43;
 $44 = $len;
 $45 = ($43|0)>($44|0);
 if ($45) {
  $46 = $1;
  $47 = ((($46)) + 388|0);
  $48 = ((($47)) + 8|0);
  HEAP32[$48>>2] = 0;
 }
 $49 = $xxs;
 $50 = ((($49)) + 44|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 ^ -1;
 $53 = $52 & 1;
 $54 = ($53|0)!=(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $xxs;
 $56 = ((($55)) + 36|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $1;
 $59 = ((($58)) + 388|0);
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($57) + ($61))|0;
 $63 = $xxs;
 $64 = ((($63)) + 48|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($62)|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $68 ^ 255;
 $70 = $69&255;
 HEAP8[$66>>0] = $70;
 STACKTOP = sp;return;
}
function _get_channel_vol($ctx,$chn) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $root = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $chn;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)<($7|0);
 $9 = $2;
 $10 = $p;
 do {
  if ($8) {
   $11 = ((($10)) + 624|0);
   $12 = (($11) + ($9<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $0 = $13;
  } else {
   $14 = ((($10)) + 944|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($9|0)>=($16|0);
   if ($17) {
    $0 = 0;
    break;
   }
   $18 = $1;
   $19 = $2;
   $20 = (_virt_getroot($18,$19)|0);
   $root = $20;
   $21 = $root;
   $22 = ($21|0)<(0);
   if ($22) {
    $0 = 0;
    break;
   } else {
    $23 = $root;
    $24 = $p;
    $25 = ((($24)) + 624|0);
    $26 = (($25) + ($23<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $0 = $27;
    break;
   }
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _check_delay($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $3;
 $6 = $p;
 $7 = ((($6)) + 620|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*472)|0)|0);
 $xc = $9;
 $10 = $1;
 $11 = ((($10)) + 1552|0);
 $m = $11;
 $12 = $2;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(15);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 4|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)<(32);
  if ($21) {
   label = 4;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $22 = $2;
  $23 = ((($22)) + 3|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = ($25|0)==(163);
  if ($26) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $27 = $2;
  $28 = ((($27)) + 4|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)!=(0);
  if ($30) {
   $31 = $2;
   $32 = ((($31)) + 4|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $p;
   $36 = ((($35)) + 16|0);
   HEAP32[$36>>2] = $34;
  }
 }
 $37 = $2;
 $38 = ((($37)) + 5|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = ($40|0)==(15);
 if ($41) {
  $42 = $2;
  $43 = ((($42)) + 6|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45|0)<(32);
  if ($46) {
   label = 9;
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $47 = $2;
  $48 = ((($47)) + 5|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)==(163);
  if ($51) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $52 = $2;
  $53 = ((($52)) + 6|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = ($54<<24>>24)!=(0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 6|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $p;
   $61 = ((($60)) + 16|0);
   HEAP32[$61>>2] = $59;
  }
 }
 $62 = $2;
 $63 = ((($62)) + 3|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ($65|0)==(14);
 if ($66) {
  $67 = $2;
  $68 = ((($67)) + 4|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 & 240;
  $72 = $71 >> 4;
  $73 = ($72|0)==(13);
  if ($73) {
   $74 = $2;
   $75 = ((($74)) + 4|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $77 & 15;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $2;
    $81 = ((($80)) + 4|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 & 15;
    $85 = (($84) + 1)|0;
    $86 = $xc;
    $87 = ((($86)) + 60|0);
    HEAP32[$87>>2] = $85;
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 do {
  if ((label|0) == 15) {
   $88 = $2;
   $89 = ((($88)) + 5|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = ($91|0)==(14);
   if ($92) {
    $93 = $2;
    $94 = ((($93)) + 6|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $96 & 240;
    $98 = $97 >> 4;
    $99 = ($98|0)==(13);
    if ($99) {
     $100 = $2;
     $101 = ((($100)) + 6|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = $102&255;
     $104 = $103 & 15;
     $105 = ($104|0)!=(0);
     if ($105) {
      $106 = $2;
      $107 = ((($106)) + 6|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108&255;
      $110 = $109 & 15;
      $111 = (($110) + 1)|0;
      $112 = $xc;
      $113 = ((($112)) + 60|0);
      HEAP32[$113>>2] = $111;
      break;
     }
    }
   }
   $0 = 0;
   $182 = $0;
   STACKTOP = sp;return ($182|0);
  }
 } while(0);
 $114 = $xc;
 $115 = ((($114)) + 436|0);
 $116 = $2;
 ;HEAP8[$115>>0]=HEAP8[$116>>0]|0;HEAP8[$115+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$115+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$115+3>>0]=HEAP8[$116+3>>0]|0;HEAP8[$115+4>>0]=HEAP8[$116+4>>0]|0;HEAP8[$115+5>>0]=HEAP8[$116+5>>0]|0;HEAP8[$115+6>>0]=HEAP8[$116+6>>0]|0;HEAP8[$115+7>>0]=HEAP8[$116+7>>0]|0;
 $117 = $2;
 $118 = ((($117)) + 1|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = ($119<<24>>24)!=(0);
 if ($120) {
  $121 = $2;
  $122 = ((($121)) + 1|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $125 = $xc;
  $126 = ((($125)) + 444|0);
  HEAP32[$126>>2] = $124;
 }
 $127 = $m;
 $128 = ((($127)) + 1284|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $129 & 33554432;
 $131 = ($130|0)!=(0);
 if ($131) {
  $132 = $2;
  $133 = ((($132)) + 2|0);
  $134 = HEAP8[$133>>0]|0;
  $135 = $134&255;
  $136 = ($135|0)==(0);
  if ($136) {
   $137 = $2;
   $138 = ((($137)) + 5|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = ($140|0)==(0);
   if ($141) {
    $142 = $2;
    $143 = ((($142)) + 1|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = ($145|0)==(0);
    if ($146) {
     $147 = $2;
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = ($149|0)==(0);
     if ($150) {
      $151 = $xc;
      $152 = ((($151)) + 84|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($153) + 1)|0;
      $155 = $154&255;
      $156 = $xc;
      $157 = ((($156)) + 436|0);
      $158 = ((($157)) + 2|0);
      HEAP8[$158>>0] = $155;
     }
    }
   }
  }
  $159 = $2;
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = ($161|0)==(0);
  if ($162) {
   $163 = $xc;
   $164 = ((($163)) + 16|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($165) + 1)|0;
   $167 = $166&255;
   $168 = $xc;
   $169 = ((($168)) + 436|0);
   HEAP8[$169>>0] = $167;
  }
  $170 = $2;
  $171 = ((($170)) + 1|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&255;
  $174 = ($173|0)==(0);
  if ($174) {
   $175 = $xc;
   $176 = ((($175)) + 48|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $177&255;
   $179 = $xc;
   $180 = ((($179)) + 436|0);
   $181 = ((($180)) + 1|0);
   HEAP8[$181>>0] = $178;
  }
 }
 $0 = 1;
 $182 = $0;
 STACKTOP = sp;return ($182|0);
}
function _read_event($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $3;
 $8 = $p;
 $9 = ((($8)) + 620|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($7*472)|0)|0);
 $xc = $11;
 $12 = $2;
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $xc;
  $22 = ((($21)) + 48|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $xc;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & 32;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $xc;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 4;
  HEAP32[$29>>2] = $31;
 }
 $32 = $3;
 $33 = $m;
 $34 = ((($33)) + 136|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32|0)>=($35|0);
 if ($36) {
  $37 = $1;
  $38 = $2;
  $39 = $3;
  $40 = (_read_event_smix($37,$38,$39)|0);
  $0 = $40;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $41 = $m;
 $42 = ((($41)) + 1288|0);
 $43 = HEAP32[$42>>2]|0;
 switch ($43|0) {
 case 0:  {
  $44 = $1;
  $45 = $2;
  $46 = $3;
  $47 = (_read_event_mod($44,$45,$46)|0);
  $0 = $47;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
  break;
 }
 case 4:  {
  $60 = $1;
  $61 = $2;
  $62 = $3;
  $63 = (_read_event_med($60,$61,$62)|0);
  $0 = $63;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
  break;
 }
 case 1:  {
  $48 = $1;
  $49 = $2;
  $50 = $3;
  $51 = (_read_event_ft2($48,$49,$50)|0);
  $0 = $51;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
  break;
 }
 case 3:  {
  $56 = $1;
  $57 = $2;
  $58 = $3;
  $59 = (_read_event_it($56,$57,$58)|0);
  $0 = $59;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
  break;
 }
 case 2:  {
  $52 = $1;
  $53 = $2;
  $54 = $3;
  $55 = (_read_event_st3($52,$53,$54)|0);
  $0 = $55;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
  break;
 }
 default: {
  $64 = $1;
  $65 = $2;
  $66 = $3;
  $67 = (_read_event_mod($64,$65,$66)|0);
  $0 = $67;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 }
 return (0)|0;
}
function _read_event_smix($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ins = 0, $is_smix_ins = 0, $m = 0, $mod = 0, $note = 0, $or$cond = 0, $p = 0, $smix = 0, $smp = 0, $sub = 0, $transp = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 9152|0);
 $smix = $6;
 $7 = $1;
 $8 = ((($7)) + 1552|0);
 $m = $8;
 $9 = $m;
 $mod = $9;
 $10 = $3;
 $11 = $p;
 $12 = ((($11)) + 620|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*472)|0)|0);
 $xc = $14;
 $15 = $xc;
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = ((($16)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($18<<24>>24)!=(0);
 if (!($19)) {
  $0 = 0;
  $239 = $0;
  STACKTOP = sp;return ($239|0);
 }
 $is_smix_ins = 0;
 $20 = $2;
 $21 = ((($20)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) - 1)|0;
 $ins = $24;
 $25 = $xc;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 2048;
 HEAP32[$25>>2] = $27;
 $28 = $xc;
 $29 = ((($28)) + 68|0);
 HEAP32[$29>>2] = 65536;
 $30 = $xc;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = $xc;
 $33 = ((($32)) + 216|0);
 HEAP32[$33>>2] = 0;
 $34 = $xc;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & -3;
 HEAP32[$35>>2] = $37;
 $38 = $ins;
 $39 = $xc;
 $40 = ((($39)) + 44|0);
 HEAP32[$40>>2] = $38;
 $41 = $ins;
 $42 = $mod;
 $43 = ((($42)) + 140|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)>=($44|0);
 if ($45) {
  $46 = $ins;
  $47 = $mod;
  $48 = ((($47)) + 140|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $smix;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($49) + ($52))|0;
  $54 = ($46|0)<($53|0);
  if ($54) {
   $is_smix_ins = 1;
   $55 = $xc;
   $56 = ((($55)) + 44|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $mod;
   $59 = ((($58)) + 140|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($57) - ($60))|0;
   $62 = $smix;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + (($61*764)|0)|0);
   $66 = ((($65)) + 40|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $xc;
   $69 = ((($68)) + 72|0);
   HEAP32[$69>>2] = $67;
  }
 }
 $70 = $xc;
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 | 65536;
 HEAP32[$70>>2] = $72;
 $73 = $2;
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = ($75|0)==(129);
 if ($76) {
  $77 = $xc;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 | 2;
  HEAP32[$78>>2] = $80;
  $0 = 0;
  $239 = $0;
  STACKTOP = sp;return ($239|0);
 }
 $81 = $2;
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = (($83) - 1)|0;
 $85 = $xc;
 $86 = ((($85)) + 16|0);
 HEAP32[$86>>2] = $84;
 $87 = $xc;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & -5;
 HEAP32[$88>>2] = $90;
 $91 = $is_smix_ins;
 $92 = ($91|0)!=(0);
 $93 = $xc;
 if ($92) {
  $94 = ((($93)) + 44|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $mod;
  $97 = ((($96)) + 140|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) - ($98))|0;
  $100 = $smix;
  $101 = ((($100)) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + (($99*764)|0)|0);
  $104 = ((($103)) + 756|0);
  $105 = HEAP32[$104>>2]|0;
  $sub = $105;
  $106 = $sub;
  $107 = ($106|0)==(0|0);
  if ($107) {
   $0 = 0;
   $239 = $0;
   STACKTOP = sp;return ($239|0);
  }
  $108 = $xc;
  $109 = ((($108)) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $sub;
  $112 = ((($111)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($110) + ($113))|0;
  $note = $114;
  $115 = $sub;
  $116 = ((($115)) + 40|0);
  $117 = HEAP32[$116>>2]|0;
  $smp = $117;
  $118 = $smp;
  $119 = $smix;
  $120 = ((($119)) + 16|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + (($118*52)|0)|0);
  $123 = ((($122)) + 32|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)==(0);
  if ($125) {
   $smp = -1;
  }
  $126 = $smp;
  $127 = ($126|0)>=(0);
  if ($127) {
   $128 = $smp;
   $129 = $smix;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($128|0)<($131|0);
   if ($132) {
    $133 = $mod;
    $134 = ((($133)) + 144|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $smp;
    $137 = (($136) + ($135))|0;
    $smp = $137;
    $138 = $1;
    $139 = $3;
    $140 = $xc;
    $141 = ((($140)) + 44|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $smp;
    $144 = $note;
    (_virt_setpatch($138,$139,$142,$143,$144,0,0,0)|0);
    $145 = $smp;
    $146 = $xc;
    $147 = ((($146)) + 52|0);
    HEAP32[$147>>2] = $145;
   }
  }
 } else {
  $148 = ((($93)) + 16|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $xc;
  $151 = ((($150)) + 44|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $mod;
  $154 = ((($153)) + 176|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($152*764)|0)|0);
  $157 = ((($156)) + 512|0);
  $158 = (($157) + ($149<<1)|0);
  $159 = ((($158)) + 1|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160 << 24 >> 24;
  $transp = $161;
  $162 = $1;
  $163 = $xc;
  $164 = ((($163)) + 44|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $xc;
  $167 = ((($166)) + 16|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (_get_subinstrument($162,$165,$168)|0);
  $sub = $169;
  $170 = $xc;
  $171 = ((($170)) + 16|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $sub;
  $174 = ((($173)) + 12|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($172) + ($175))|0;
  $177 = $transp;
  $178 = (($176) + ($177))|0;
  $note = $178;
  $179 = $sub;
  $180 = ((($179)) + 40|0);
  $181 = HEAP32[$180>>2]|0;
  $smp = $181;
  $182 = $smp;
  $183 = $mod;
  $184 = ((($183)) + 180|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (($185) + (($182*52)|0)|0);
  $187 = ((($186)) + 32|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)==(0);
  if ($189) {
   $smp = -1;
  }
  $190 = $smp;
  $191 = ($190|0)>=(0);
  if ($191) {
   $192 = $smp;
   $193 = $mod;
   $194 = ((($193)) + 144|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($192|0)<($195|0);
   if ($196) {
    $197 = $1;
    $198 = $3;
    $199 = $xc;
    $200 = ((($199)) + 44|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $smp;
    $203 = $note;
    (_virt_setpatch($197,$198,$201,$202,$203,0,0,0)|0);
    $204 = $smp;
    $205 = $xc;
    $206 = ((($205)) + 52|0);
    HEAP32[$206>>2] = $204;
   }
  }
 }
 $207 = $1;
 $208 = $note;
 $209 = $sub;
 $210 = $xc;
 _set_effect_defaults($207,$208,$209,$210,0);
 $211 = $1;
 $212 = $note;
 $213 = $sub;
 $214 = $xc;
 _set_period($211,$212,$213,$214,0);
 $215 = $2;
 $216 = ((($215)) + 1|0);
 $217 = HEAP8[$216>>0]|0;
 $218 = $217&255;
 $219 = ($218|0)!=(0);
 $220 = $sub;
 $221 = ($220|0)!=(0|0);
 $or$cond = $219 & $221;
 if ($or$cond) {
  $222 = $1;
  $223 = $xc;
  _reset_envelopes($222,$223);
 }
 $224 = $2;
 $225 = ((($224)) + 2|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = $226&255;
 $228 = (($227) - 1)|0;
 $229 = $xc;
 $230 = ((($229)) + 84|0);
 HEAP32[$230>>2] = $228;
 $231 = $note;
 $232 = $xc;
 $233 = ((($232)) + 12|0);
 HEAP32[$233>>2] = $231;
 $234 = $1;
 $235 = $3;
 $236 = $xc;
 $237 = ((($236)) + 216|0);
 $238 = HEAP32[$237>>2]|0;
 _virt_voicepos($234,$235,$238);
 $0 = 0;
 $239 = $0;
 STACKTOP = sp;return ($239|0);
}
function _read_event_mod($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ins = 0, $is_toneporta = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $note = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $smp = 0, $sub = 0, $transp = 0, $use_ins_vol = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $new_invalid_ins = 0;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(3);
 if ($18) {
  label = 7;
 } else {
  $19 = $2;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   label = 7;
  } else {
   $24 = $2;
   $25 = ((($24)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)==(122);
   if ($28) {
    label = 7;
   } else {
    $29 = $2;
    $30 = ((($29)) + 5|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)==(3);
    if ($33) {
     label = 7;
    } else {
     $34 = $2;
     $35 = ((($34)) + 5|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)==(5);
     if ($38) {
      label = 7;
     } else {
      $39 = $2;
      $40 = ((($39)) + 5|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      $43 = ($42|0)==(122);
      if ($43) {
       label = 7;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 7) {
  $is_toneporta = 1;
 }
 $44 = $2;
 $45 = ((($44)) + 1|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)!=(0);
 do {
  if ($47) {
   $48 = $2;
   $49 = ((($48)) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = (($51) - 1)|0;
   $ins = $52;
   $use_ins_vol = 1;
   $53 = $xc;
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 | 2048;
   HEAP32[$53>>2] = $55;
   $56 = $xc;
   $57 = ((($56)) + 68|0);
   HEAP32[$57>>2] = 65536;
   $58 = $xc;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = 0;
   $60 = $xc;
   $61 = ((($60)) + 216|0);
   HEAP32[$61>>2] = 0;
   $62 = $xc;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 & -4;
   HEAP32[$63>>2] = $65;
   $66 = $ins;
   $67 = $mod;
   $68 = ((($67)) + 140|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($66>>>0)<($69>>>0);
   if ($70) {
    $71 = $ins;
    $72 = $mod;
    $73 = ((($72)) + 176|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + (($71*764)|0)|0);
    $76 = ((($75)) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)>(0);
    if ($78) {
     $79 = $is_toneporta;
     $80 = ($79|0)!=(0);
     if (!($80)) {
      $98 = $ins;
      $99 = $xc;
      $100 = ((($99)) + 44|0);
      HEAP32[$100>>2] = $98;
      $101 = $ins;
      $102 = $mod;
      $103 = ((($102)) + 176|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = (($104) + (($101*764)|0)|0);
      $106 = ((($105)) + 40|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = $xc;
      $109 = ((($108)) + 72|0);
      HEAP32[$109>>2] = $107;
      break;
     }
     $81 = $1;
     $82 = $ins;
     $83 = $2;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = (($85) - 1)|0;
     $87 = (_get_subinstrument($81,$82,$86)|0);
     $sub = $87;
     $88 = $sub;
     $89 = ($88|0)!=(0|0);
     if (!($89)) {
      break;
     }
     $90 = $xc;
     $91 = ((($90)) + 76|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)!=(0);
     if (!($93)) {
      $94 = $sub;
      $95 = HEAP32[$94>>2]|0;
      $96 = $xc;
      $97 = ((($96)) + 84|0);
      HEAP32[$97>>2] = $95;
     }
     $use_ins_vol = 0;
     break;
    }
   }
   $new_invalid_ins = 1;
   $110 = $1;
   $111 = $3;
   _virt_resetchannel($110,$111);
  }
 } while(0);
 $112 = $2;
 $113 = HEAP8[$112>>0]|0;
 $114 = ($113<<24>>24)!=(0);
 do {
  if ($114) {
   $115 = $xc;
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 | 65536;
   HEAP32[$115>>2] = $117;
   $118 = $2;
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120|0)==(129);
   if ($121) {
    $122 = $xc;
    $123 = ((($122)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 | 2;
    HEAP32[$123>>2] = $125;
    $use_ins_vol = 0;
    break;
   }
   $126 = $is_toneporta;
   $127 = ($126|0)!=(0);
   if (!($127)) {
    $128 = $2;
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = (($130) - 1)|0;
    $132 = $xc;
    $133 = ((($132)) + 16|0);
    HEAP32[$133>>2] = $131;
    $134 = $xc;
    $135 = ((($134)) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $136 & -5;
    HEAP32[$135>>2] = $137;
    $138 = $1;
    $139 = $xc;
    $140 = ((($139)) + 44|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $xc;
    $143 = ((($142)) + 16|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (_get_subinstrument($138,$141,$144)|0);
    $sub = $145;
    $146 = $new_invalid_ins;
    $147 = ($146|0)==(0);
    $148 = $sub;
    $149 = ($148|0)!=(0|0);
    $or$cond = $147 & $149;
    $150 = $xc;
    if (!($or$cond)) {
     HEAP32[$150>>2] = 0;
     $use_ins_vol = 0;
     break;
    }
    $151 = ((($150)) + 16|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $xc;
    $154 = ((($153)) + 44|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $mod;
    $157 = ((($156)) + 176|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (($158) + (($155*764)|0)|0);
    $160 = ((($159)) + 512|0);
    $161 = (($160) + ($152<<1)|0);
    $162 = ((($161)) + 1|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163 << 24 >> 24;
    $transp = $164;
    $165 = $xc;
    $166 = ((($165)) + 16|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = $sub;
    $169 = ((($168)) + 12|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($167) + ($170))|0;
    $172 = $transp;
    $173 = (($171) + ($172))|0;
    $note = $173;
    $174 = $sub;
    $175 = ((($174)) + 40|0);
    $176 = HEAP32[$175>>2]|0;
    $smp = $176;
    $177 = $smp;
    $178 = $mod;
    $179 = ((($178)) + 180|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + (($177*52)|0)|0);
    $182 = ((($181)) + 32|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = ($183|0)==(0);
    if ($184) {
     $smp = -1;
    }
    $185 = $smp;
    $186 = ($185|0)>=(0);
    if ($186) {
     $187 = $smp;
     $188 = $mod;
     $189 = ((($188)) + 144|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = ($187|0)<($190|0);
     if ($191) {
      $192 = $1;
      $193 = $3;
      $194 = $xc;
      $195 = ((($194)) + 44|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $smp;
      $198 = $note;
      (_virt_setpatch($192,$193,$196,$197,$198,0,0,0)|0);
      $199 = $smp;
      $200 = $xc;
      $201 = ((($200)) + 52|0);
      HEAP32[$201>>2] = $199;
     }
    }
   }
  }
 } while(0);
 $202 = $1;
 $203 = $xc;
 $204 = ((($203)) + 44|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = $xc;
 $207 = ((($206)) + 16|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = (_get_subinstrument($202,$205,$208)|0);
 $sub = $209;
 $210 = $1;
 $211 = $note;
 $212 = $sub;
 $213 = $xc;
 $214 = $is_toneporta;
 _set_effect_defaults($210,$211,$212,$213,$214);
 $215 = $2;
 $216 = ((($215)) + 1|0);
 $217 = HEAP8[$216>>0]|0;
 $218 = $217&255;
 $219 = ($218|0)!=(0);
 $220 = $sub;
 $221 = ($220|0)!=(0|0);
 $or$cond3 = $219 & $221;
 if ($or$cond3) {
  $222 = $1;
  $223 = $xc;
  _reset_envelopes($222,$223);
 }
 $224 = $2;
 $225 = ((($224)) + 2|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = ($226<<24>>24)!=(0);
 if ($227) {
  $228 = $2;
  $229 = ((($228)) + 2|0);
  $230 = HEAP8[$229>>0]|0;
  $231 = $230&255;
  $232 = (($231) - 1)|0;
  $233 = $xc;
  $234 = ((($233)) + 84|0);
  HEAP32[$234>>2] = $232;
  $235 = $xc;
  $236 = HEAP32[$235>>2]|0;
  $237 = $236 | 4096;
  HEAP32[$235>>2] = $237;
 }
 $238 = $1;
 $239 = $xc;
 $240 = $3;
 $241 = $2;
 _process_fx($238,$239,$240,$241,1);
 $242 = $1;
 $243 = $xc;
 $244 = $3;
 $245 = $2;
 _process_fx($242,$243,$244,$245,0);
 $246 = $1;
 $247 = $note;
 $248 = $sub;
 $249 = $xc;
 $250 = $is_toneporta;
 _set_period($246,$247,$248,$249,$250);
 $251 = $sub;
 $252 = ($251|0)==(0|0);
 if ($252) {
  $0 = 0;
  $302 = $0;
  STACKTOP = sp;return ($302|0);
 }
 $253 = $note;
 $254 = ($253|0)>=(0);
 if ($254) {
  $255 = $note;
  $256 = $xc;
  $257 = ((($256)) + 12|0);
  HEAP32[$257>>2] = $255;
  $258 = $1;
  $259 = $3;
  $260 = $xc;
  $261 = ((($260)) + 216|0);
  $262 = HEAP32[$261>>2]|0;
  _virt_voicepos($258,$259,$262);
 }
 $263 = $xc;
 $264 = HEAP32[$263>>2]|0;
 $265 = $264 & 256;
 $266 = ($265|0)!=(0);
 if ($266) {
  $267 = $m;
  $268 = ((($267)) + 1284|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $269 & 4;
  $271 = ($270|0)!=(0);
  if ($271) {
   label = 40;
  } else {
   $272 = $p;
   $273 = ((($272)) + 28|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = $274 & 2;
   $276 = ($275|0)!=(0);
   if ($276) {
    label = 40;
   }
  }
  if ((label|0) == 40) {
   $277 = $xc;
   $278 = ((($277)) + 216|0);
   $279 = ((($278)) + 4|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $xc;
   $282 = ((($281)) + 216|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = (($283) + ($280))|0;
   HEAP32[$282>>2] = $284;
  }
  $285 = $xc;
  $286 = HEAP32[$285>>2]|0;
  $287 = $286 & -257;
  HEAP32[$285>>2] = $287;
 }
 $288 = $use_ins_vol;
 $289 = ($288|0)!=(0);
 if ($289) {
  $290 = $xc;
  $291 = HEAP32[$290>>2]|0;
  $292 = $291 & 4096;
  $293 = ($292|0)!=(0);
  if (!($293)) {
   $294 = $xc;
   $295 = ((($294)) + 76|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = ($296|0)!=(0);
   if (!($297)) {
    $298 = $sub;
    $299 = HEAP32[$298>>2]|0;
    $300 = $xc;
    $301 = ((($300)) + 84|0);
    HEAP32[$301>>2] = $299;
   }
  }
 }
 $0 = 0;
 $302 = $0;
 STACKTOP = sp;return ($302|0);
}
function _read_event_ft2($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delay_fx = 0;
 var $env = 0, $env_on = 0, $ev = 0, $ins = 0, $is_toneporta = 0, $k = 0, $k00 = 0, $k2 = 0, $key = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $note = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond13$not = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, $p = 0, $smp = 0, $sub = 0, $sub1 = 0, $sub2 = 0, $transp = 0, $transp3 = 0, $use_ins_vol = 0, $vol_set = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ev = sp + 112|0;
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $k00 = 0;
 $13 = $p;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $p;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)>=($18|0);
 if ($19) {
  $0 = 0;
  $598 = $0;
  STACKTOP = sp;return ($598|0);
 }
 $20 = $2;
 ;HEAP8[$ev>>0]=HEAP8[$20>>0]|0;HEAP8[$ev+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$ev+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$ev+3>>0]=HEAP8[$20+3>>0]|0;HEAP8[$ev+4>>0]=HEAP8[$20+4>>0]|0;HEAP8[$ev+5>>0]=HEAP8[$20+5>>0]|0;HEAP8[$ev+6>>0]=HEAP8[$20+6>>0]|0;HEAP8[$ev+7>>0]=HEAP8[$20+7>>0]|0;
 $21 = $xc;
 HEAP32[$21>>2] = 0;
 $note = -1;
 $22 = HEAP8[$ev>>0]|0;
 $23 = $22&255;
 $key = $23;
 $24 = ((($ev)) + 1|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $ins = $26;
 $new_invalid_ins = 0;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $27 = ((($ev)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($29|0)==(20);
 do {
  if ($30) {
   $31 = ((($ev)) + 4|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = ($33|0)==(0);
   if ($34) {
    $k00 = 1;
    $key = 0;
    $35 = $ins;
    $36 = ($35|0)!=(0);
    if (!($36)) {
     $37 = ((($ev)) + 2|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = ($39|0)!=(0);
     if (!($40)) {
      $41 = ((($ev)) + 5|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = ($43|0)!=(0);
      if (!($44)) {
       break;
      }
     }
    }
    $45 = $xc;
    $46 = ((($45)) + 44|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $mod;
    $49 = ((($48)) + 140|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($47>>>0)<($50>>>0);
    if ($51) {
     $52 = $xc;
     $53 = ((($52)) + 44|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $mod;
     $56 = ((($55)) + 176|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + (($54*764)|0)|0);
     $59 = ((($58)) + 36|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)>(0);
     if ($61) {
      $62 = $xc;
      $63 = ((($62)) + 44|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $mod;
      $66 = ((($65)) + 176|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (($67) + (($64*764)|0)|0);
      $69 = ((($68)) + 44|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $70 ^ -1;
      $72 = $71 & 1;
      $73 = ($72|0)!=(0);
      if ($73) {
       $74 = $xc;
       $75 = ((($74)) + 8|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $76 | 1;
       HEAP32[$75>>2] = $77;
       $78 = ((($ev)) + 3|0);
       HEAP8[$78>>0] = 0;
      }
     }
    }
   }
  }
 } while(0);
 $79 = ((($ev)) + 3|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = ($81|0)==(3);
 if ($82) {
  label = 18;
 } else {
  $83 = ((($ev)) + 3|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = ($85|0)==(5);
  if ($86) {
   label = 18;
  } else {
   $87 = ((($ev)) + 3|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = ($89|0)==(122);
   if ($90) {
    label = 18;
   } else {
    $91 = ((($ev)) + 5|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = ($93|0)==(3);
    if ($94) {
     label = 18;
    } else {
     $95 = ((($ev)) + 5|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = ($97|0)==(5);
     if ($98) {
      label = 18;
     } else {
      $99 = ((($ev)) + 5|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = $100&255;
      $102 = ($101|0)==(122);
      if ($102) {
       label = 18;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 18) {
  $is_toneporta = 1;
 }
 $103 = $ins;
 $104 = ($103|0)>(0);
 do {
  if ($104) {
   $105 = $ins;
   $106 = (($105) - 1)|0;
   $107 = $mod;
   $108 = ((($107)) + 140|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($106>>>0)<($109>>>0);
   if ($110) {
    $111 = $ins;
    $112 = (($111) - 1)|0;
    $113 = $mod;
    $114 = ((($113)) + 176|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + (($112*764)|0)|0);
    $117 = ((($116)) + 36|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)>(0);
    if ($119) {
     break;
    }
   }
   $ins = 0;
  }
 } while(0);
 $120 = $ins;
 $121 = ($120|0)!=(0);
 if ($121) {
  $122 = $key;
  $123 = ($122|0)==(0);
  $124 = $key;
  $125 = ($124|0)>=(129);
  $or$cond = $123 | $125;
  if ($or$cond) {
   $126 = $1;
   $127 = $xc;
   $128 = ((($127)) + 44|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $xc;
   $131 = ((($130)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (_get_subinstrument($126,$129,$132)|0);
   $sub1 = $133;
   $134 = $sub1;
   $135 = ($134|0)!=(0|0);
   if ($135) {
    $136 = $sub1;
    $137 = HEAP32[$136>>2]|0;
    $138 = $xc;
    $139 = ((($138)) + 84|0);
    HEAP32[$139>>2] = $137;
    $140 = $sub1;
    $141 = ((($140)) + 8|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $xc;
    $144 = ((($143)) + 368|0);
    HEAP32[$144>>2] = $142;
    $145 = $xc;
    $146 = ((($145)) + 44|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = $mod;
    $149 = ((($148)) + 176|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + (($147*764)|0)|0);
    $152 = ((($151)) + 40|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $xc;
    $155 = ((($154)) + 72|0);
    HEAP32[$155>>2] = $153;
    $156 = $xc;
    $157 = HEAP32[$156>>2]|0;
    $158 = $157 | 4096;
    HEAP32[$156>>2] = $158;
   }
  }
 }
 $159 = ((($ev)) + 1|0);
 $160 = HEAP8[$159>>0]|0;
 $161 = ($160<<24>>24)!=(0);
 do {
  if ($161) {
   $162 = $xc;
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 | 2048;
   HEAP32[$162>>2] = $164;
   $use_ins_vol = 1;
   $165 = $xc;
   $166 = ((($165)) + 68|0);
   HEAP32[$166>>2] = 65536;
   $167 = $xc;
   $168 = ((($167)) + 4|0);
   HEAP32[$168>>2] = 0;
   $169 = $xc;
   $170 = ((($169)) + 8|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $171 & -131;
   HEAP32[$170>>2] = $172;
   $173 = $k00;
   $174 = ($173|0)!=(0);
   if (!($174)) {
    $175 = $xc;
    $176 = ((($175)) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $177 & -2;
    HEAP32[$176>>2] = $178;
   }
   $179 = $ins;
   $180 = (($179) - 1)|0;
   $181 = $mod;
   $182 = ((($181)) + 140|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = ($180>>>0)<($183>>>0);
   if ($184) {
    $185 = $ins;
    $186 = (($185) - 1)|0;
    $187 = $mod;
    $188 = ((($187)) + 176|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + (($186*764)|0)|0);
    $191 = ((($190)) + 36|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($192|0)>(0);
    if ($193) {
     $194 = $is_toneporta;
     $195 = ($194|0)!=(0);
     if ($195) {
      break;
     }
     $196 = $ins;
     $197 = (($196) - 1)|0;
     $198 = $xc;
     $199 = ((($198)) + 44|0);
     HEAP32[$199>>2] = $197;
     break;
    }
   }
   $new_invalid_ins = 1;
   $200 = $xc;
   HEAP32[$200>>2] = 0;
   $201 = $is_toneporta;
   $202 = ($201|0)!=(0);
   if ($202) {
    $key = 0;
   }
  }
 } while(0);
 $203 = $ins;
 $204 = ($203|0)!=(0);
 if ($204) {
  $205 = $key;
  $206 = ($205|0)>(0);
  $207 = $key;
  $208 = ($207|0)<(129);
  $or$cond3 = $206 & $208;
  if ($or$cond3) {
   $209 = $1;
   $210 = $xc;
   $211 = ((($210)) + 44|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $key;
   $214 = (($213) - 1)|0;
   $215 = (_get_subinstrument($209,$212,$214)|0);
   $sub2 = $215;
   $216 = $sub2;
   $217 = ($216|0)!=(0|0);
   if ($217) {
    $218 = $sub2;
    $219 = HEAP32[$218>>2]|0;
    $220 = $xc;
    $221 = ((($220)) + 84|0);
    HEAP32[$221>>2] = $219;
    $222 = $sub2;
    $223 = ((($222)) + 8|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $xc;
    $226 = ((($225)) + 368|0);
    HEAP32[$226>>2] = $224;
    $227 = $xc;
    $228 = ((($227)) + 44|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = $mod;
    $231 = ((($230)) + 176|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($232) + (($229*764)|0)|0);
    $234 = ((($233)) + 40|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $xc;
    $237 = ((($236)) + 72|0);
    HEAP32[$237>>2] = $235;
   } else {
    $238 = $xc;
    $239 = ((($238)) + 84|0);
    HEAP32[$239>>2] = 0;
   }
   $240 = $xc;
   $241 = HEAP32[$240>>2]|0;
   $242 = $241 | 4096;
   HEAP32[$240>>2] = $242;
  }
 }
 $243 = $key;
 $244 = ($243|0)!=(0);
 if ($244) {
  $245 = $xc;
  $246 = HEAP32[$245>>2]|0;
  $247 = $246 | 65536;
  HEAP32[$245>>2] = $247;
  $248 = $key;
  $249 = ($248|0)==(129);
  do {
   if ($249) {
    $env_on = 0;
    $250 = ((($ev)) + 2|0);
    $251 = HEAP8[$250>>0]|0;
    $252 = $251&255;
    $253 = ($252|0)!=(0);
    if ($253) {
     $259 = 1;
    } else {
     $254 = ((($ev)) + 3|0);
     $255 = HEAP8[$254>>0]|0;
     $256 = $255&255;
     $257 = ($256|0)==(12);
     $259 = $257;
    }
    $258 = $259&1;
    $vol_set = $258;
    $260 = ((($ev)) + 3|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = $261&255;
    $263 = ($262|0)==(14);
    if ($263) {
     $264 = ((($ev)) + 4|0);
     $265 = HEAP8[$264>>0]|0;
     $266 = $265&255;
     $267 = ($266|0)==(208);
     $269 = $267;
    } else {
     $269 = 0;
    }
    $268 = $269&1;
    $delay_fx = $268;
    $env = 0;
    $270 = $xc;
    $271 = ((($270)) + 44|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = $mod;
    $274 = ((($273)) + 140|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = ($272>>>0)<($275>>>0);
    if ($276) {
     $277 = $xc;
     $278 = ((($277)) + 44|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $mod;
     $281 = ((($280)) + 176|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = (($282) + (($279*764)|0)|0);
     $284 = ((($283)) + 36|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285|0)>(0);
     if ($286) {
      $287 = $xc;
      $288 = ((($287)) + 44|0);
      $289 = HEAP32[$288>>2]|0;
      $290 = $mod;
      $291 = ((($290)) + 176|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = (($292) + (($289*764)|0)|0);
      $294 = ((($293)) + 44|0);
      $env = $294;
      $295 = $env;
      $296 = HEAP32[$295>>2]|0;
      $297 = $296 & 1;
      $298 = ($297|0)!=(0);
      if ($298) {
       $env_on = 1;
      }
     }
    }
    $299 = $env_on;
    $300 = ($299|0)!=(0);
    do {
     if ($300) {
      label = 55;
     } else {
      $301 = $vol_set;
      $302 = ($301|0)!=(0);
      if (!($302)) {
       $303 = ((($ev)) + 1|0);
       $304 = HEAP8[$303>>0]|0;
       $305 = ($304<<24>>24)!=(0);
       $306 = $delay_fx;
       $307 = ($306|0)!=(0);
       $or$cond5 = $305 & $307;
       if (!($or$cond5)) {
        label = 55;
        break;
       }
      }
      $319 = $xc;
      $320 = ((($319)) + 8|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = $321 | 1;
      HEAP32[$320>>2] = $322;
     }
    } while(0);
    if ((label|0) == 55) {
     $308 = $env;
     $309 = $xc;
     $310 = ((($309)) + 92|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (_sustain_check($308,$311)|0);
     $313 = ($312|0)!=(0);
     $314 = $xc;
     $315 = ((($314)) + 8|0);
     $316 = HEAP32[$315>>2]|0;
     if ($313) {
      $317 = $316 | 128;
      HEAP32[$315>>2] = $317;
     } else {
      $318 = $316 | 2;
      HEAP32[$315>>2] = $318;
     }
     $use_ins_vol = 0;
    }
    $323 = $env_on;
    $324 = ($323|0)!=(0);
    if ($324) {
     $325 = ((($ev)) + 3|0);
     $326 = HEAP8[$325>>0]|0;
     $327 = $326&255;
     $328 = ($327|0)==(14);
     if ($328) {
      $329 = ((($ev)) + 4|0);
      $330 = HEAP8[$329>>0]|0;
      $331 = $330&255;
      $332 = $331 >> 4;
      $333 = ($332|0)==(13);
      if ($333) {
       $334 = ((($ev)) + 4|0);
       $335 = HEAP8[$334>>0]|0;
       $336 = $335&255;
       $337 = $336 & 15;
       $338 = ($337|0)!=(0);
       if ($338) {
        $339 = $xc;
        $340 = ((($339)) + 8|0);
        $341 = HEAP32[$340>>2]|0;
        $342 = $341 & -131;
        HEAP32[$340>>2] = $342;
       }
      }
     }
    }
   } else {
    $343 = $key;
    $344 = ($343|0)==(131);
    if ($344) {
     $345 = $xc;
     $346 = ((($345)) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = $347 | 1;
     HEAP32[$346>>2] = $348;
     break;
    }
    $349 = $is_toneporta;
    $350 = ($349|0)!=(0);
    if ($350) {
     $key = 0;
    }
   }
  } while(0);
  $351 = ((($ev)) + 1|0);
  $352 = HEAP8[$351>>0]|0;
  $353 = $352&255;
  $354 = ($353|0)==(0);
  do {
   if ($354) {
    $355 = $xc;
    $356 = ((($355)) + 48|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) - 1)|0;
    $359 = $mod;
    $360 = ((($359)) + 140|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = ($358>>>0)<($361>>>0);
    if ($362) {
     $363 = $xc;
     $364 = ((($363)) + 48|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = (($365) - 1)|0;
     $367 = $mod;
     $368 = ((($367)) + 176|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = (($369) + (($366*764)|0)|0);
     $371 = ((($370)) + 36|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = ($372|0)>(0);
     if ($373) {
      break;
     }
    }
    $new_invalid_ins = 1;
   }
  } while(0);
  $374 = $new_invalid_ins;
  $375 = ($374|0)!=(0);
  if ($375) {
   $376 = $1;
   $377 = $3;
   _virt_resetchannel($376,$377);
  }
 }
 $378 = $key;
 $379 = (($378) - 1)|0;
 $380 = (_is_valid_note($379)|0);
 $381 = ($380|0)!=(0);
 if ($381) {
  $382 = $key;
  $383 = (($382) - 1)|0;
  $k = $383;
  $384 = $1;
  $385 = $xc;
  $386 = ((($385)) + 44|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = $k;
  $389 = (_get_subinstrument($384,$387,$388)|0);
  $sub = $389;
  $390 = $new_invalid_ins;
  $391 = ($390|0)==(0);
  $392 = $sub;
  $393 = ($392|0)!=(0|0);
  $or$cond7 = $391 & $393;
  if ($or$cond7) {
   $394 = $k;
   $395 = $xc;
   $396 = ((($395)) + 44|0);
   $397 = HEAP32[$396>>2]|0;
   $398 = $mod;
   $399 = ((($398)) + 176|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = (($400) + (($397*764)|0)|0);
   $402 = ((($401)) + 512|0);
   $403 = (($402) + ($394<<1)|0);
   $404 = ((($403)) + 1|0);
   $405 = HEAP8[$404>>0]|0;
   $406 = $405 << 24 >> 24;
   $transp = $406;
   $407 = $k;
   $408 = $sub;
   $409 = ((($408)) + 12|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = (($407) + ($410))|0;
   $412 = $transp;
   $413 = (($411) + ($412))|0;
   $k2 = $413;
   $414 = $k2;
   $415 = ($414|0)<(12);
   $416 = $k2;
   $417 = ($416|0)>(130);
   $or$cond9 = $415 | $417;
   if ($or$cond9) {
    $key = 0;
    $418 = $xc;
    $419 = HEAP32[$418>>2]|0;
    $420 = $419 & -65537;
    HEAP32[$418>>2] = $420;
   }
  }
 }
 $421 = $key;
 $422 = (($421) - 1)|0;
 $423 = (_is_valid_note($422)|0);
 $424 = ($423|0)!=(0);
 do {
  if ($424) {
   $425 = $key;
   $426 = (($425) + -1)|0;
   $key = $426;
   $427 = $xc;
   $428 = ((($427)) + 16|0);
   HEAP32[$428>>2] = $426;
   $429 = $xc;
   $430 = ((($429)) + 68|0);
   HEAP32[$430>>2] = 65536;
   $431 = $xc;
   $432 = ((($431)) + 8|0);
   $433 = HEAP32[$432>>2]|0;
   $434 = $433 & -5;
   HEAP32[$432>>2] = $434;
   $435 = $sub;
   $436 = ($435|0)!=(0|0);
   if ($436) {
    $437 = $xc;
    $438 = ((($437)) + 44|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = $mod;
    $441 = ((($440)) + 176|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = (($442) + (($439*764)|0)|0);
    $444 = ((($443)) + 44|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = $445 ^ -1;
    $447 = $446 & 1;
    $448 = ($447|0)!=(0);
    if ($448) {
     $449 = $xc;
     $450 = ((($449)) + 8|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = $451 & -4;
     HEAP32[$450>>2] = $452;
    }
   }
   $453 = $new_invalid_ins;
   $454 = ($453|0)==(0);
   $455 = $sub;
   $456 = ($455|0)!=(0|0);
   $or$cond11 = $454 & $456;
   if (!($or$cond11)) {
    $505 = $xc;
    HEAP32[$505>>2] = 0;
    $use_ins_vol = 0;
    break;
   }
   $457 = $key;
   $458 = $xc;
   $459 = ((($458)) + 44|0);
   $460 = HEAP32[$459>>2]|0;
   $461 = $mod;
   $462 = ((($461)) + 176|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = (($463) + (($460*764)|0)|0);
   $465 = ((($464)) + 512|0);
   $466 = (($465) + ($457<<1)|0);
   $467 = ((($466)) + 1|0);
   $468 = HEAP8[$467>>0]|0;
   $469 = $468 << 24 >> 24;
   $transp3 = $469;
   $470 = $key;
   $471 = $sub;
   $472 = ((($471)) + 12|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = (($470) + ($473))|0;
   $475 = $transp3;
   $476 = (($474) + ($475))|0;
   $note = $476;
   $477 = $sub;
   $478 = ((($477)) + 40|0);
   $479 = HEAP32[$478>>2]|0;
   $smp = $479;
   $480 = $smp;
   $481 = $mod;
   $482 = ((($481)) + 180|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = (($483) + (($480*52)|0)|0);
   $485 = ((($484)) + 32|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = ($486|0)==(0);
   if ($487) {
    $smp = -1;
   }
   $488 = $smp;
   $489 = ($488|0)>=(0);
   if ($489) {
    $490 = $smp;
    $491 = $mod;
    $492 = ((($491)) + 144|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = ($490|0)<($493|0);
    if ($494) {
     $495 = $1;
     $496 = $3;
     $497 = $xc;
     $498 = ((($497)) + 44|0);
     $499 = HEAP32[$498>>2]|0;
     $500 = $smp;
     $501 = $note;
     (_virt_setpatch($495,$496,$499,$500,$501,0,0,0)|0);
     $502 = $smp;
     $503 = $xc;
     $504 = ((($503)) + 52|0);
     HEAP32[$504>>2] = $502;
    }
   }
  }
 } while(0);
 $506 = $1;
 $507 = $xc;
 $508 = ((($507)) + 44|0);
 $509 = HEAP32[$508>>2]|0;
 $510 = $xc;
 $511 = ((($510)) + 16|0);
 $512 = HEAP32[$511>>2]|0;
 $513 = (_get_subinstrument($506,$509,$512)|0);
 $sub = $513;
 $514 = $1;
 $515 = $note;
 $516 = $sub;
 $517 = $xc;
 $518 = $is_toneporta;
 _set_effect_defaults($514,$515,$516,$517,$518);
 $519 = $ins;
 $520 = ($519|0)!=(0);
 $521 = $sub;
 $522 = ($521|0)!=(0|0);
 $or$cond13 = $520 & $522;
 $or$cond13$not = $or$cond13 ^ 1;
 $523 = $k00;
 $524 = ($523|0)!=(0);
 $or$cond15 = $or$cond13$not | $524;
 if (!($or$cond15)) {
  $525 = $1;
  $526 = $xc;
  _reset_envelopes($525,$526);
 }
 $527 = ((($ev)) + 2|0);
 $528 = HEAP8[$527>>0]|0;
 $529 = ($528<<24>>24)!=(0);
 if ($529) {
  $530 = ((($ev)) + 2|0);
  $531 = HEAP8[$530>>0]|0;
  $532 = $531&255;
  $533 = (($532) - 1)|0;
  $534 = $xc;
  $535 = ((($534)) + 84|0);
  HEAP32[$535>>2] = $533;
  $536 = $xc;
  $537 = HEAP32[$536>>2]|0;
  $538 = $537 | 4096;
  HEAP32[$536>>2] = $538;
  $539 = $xc;
  $540 = ((($539)) + 8|0);
  $541 = HEAP32[$540>>2]|0;
  $542 = $541 & 4;
  $543 = ($542|0)!=(0);
  if ($543) {
   $544 = $xc;
   $545 = ((($544)) + 68|0);
   HEAP32[$545>>2] = 65536;
   $546 = $xc;
   $547 = ((($546)) + 8|0);
   $548 = HEAP32[$547>>2]|0;
   $549 = $548 & -4;
   HEAP32[$547>>2] = $549;
  }
 }
 $550 = $xc;
 $551 = ((($550)) + 216|0);
 HEAP32[$551>>2] = 0;
 $552 = $1;
 $553 = $xc;
 $554 = $3;
 _process_fx($552,$553,$554,$ev,1);
 $555 = $1;
 $556 = $xc;
 $557 = $3;
 _process_fx($555,$556,$557,$ev,0);
 $558 = $1;
 $559 = $note;
 $560 = $sub;
 $561 = $xc;
 $562 = $is_toneporta;
 _set_period_ft2($558,$559,$560,$561,$562);
 $563 = $sub;
 $564 = ($563|0)==(0|0);
 if ($564) {
  $0 = 0;
  $598 = $0;
  STACKTOP = sp;return ($598|0);
 }
 $565 = $note;
 $566 = ($565|0)>=(0);
 do {
  if ($566) {
   $567 = $note;
   $568 = $xc;
   $569 = ((($568)) + 12|0);
   HEAP32[$569>>2] = $567;
   $570 = $xc;
   $571 = ((($570)) + 216|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = $sub;
   $574 = ((($573)) + 40|0);
   $575 = HEAP32[$574>>2]|0;
   $576 = $mod;
   $577 = ((($576)) + 180|0);
   $578 = HEAP32[$577>>2]|0;
   $579 = (($578) + (($575*52)|0)|0);
   $580 = ((($579)) + 32|0);
   $581 = HEAP32[$580>>2]|0;
   $582 = ($572|0)>=($581|0);
   $583 = $1;
   $584 = $3;
   if ($582) {
    _virt_resetchannel($583,$584);
    break;
   } else {
    $585 = $xc;
    $586 = ((($585)) + 216|0);
    $587 = HEAP32[$586>>2]|0;
    _virt_voicepos($583,$584,$587);
    break;
   }
  }
 } while(0);
 $588 = $use_ins_vol;
 $589 = ($588|0)!=(0);
 if ($589) {
  $590 = $xc;
  $591 = HEAP32[$590>>2]|0;
  $592 = $591 & 4096;
  $593 = ($592|0)!=(0);
  if (!($593)) {
   $594 = $sub;
   $595 = HEAP32[$594>>2]|0;
   $596 = $xc;
   $597 = ((($596)) + 84|0);
   HEAP32[$597>>2] = $595;
  }
 }
 $0 = 0;
 $598 = $0;
 STACKTOP = sp;return ($598|0);
}
function _read_event_st3($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ins = 0, $is_toneporta = 0, $m = 0, $mod = 0, $not_same_ins = 0, $note = 0, $or$cond = 0, $p = 0, $smp = 0;
 var $sub = 0, $transp = 0, $use_ins_vol = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $not_same_ins = 0;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(3);
 if ($18) {
  label = 7;
 } else {
  $19 = $2;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   label = 7;
  } else {
   $24 = $2;
   $25 = ((($24)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)==(122);
   if ($28) {
    label = 7;
   } else {
    $29 = $2;
    $30 = ((($29)) + 5|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)==(3);
    if ($33) {
     label = 7;
    } else {
     $34 = $2;
     $35 = ((($34)) + 5|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)==(5);
     if ($38) {
      label = 7;
     } else {
      $39 = $2;
      $40 = ((($39)) + 5|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      $43 = ($42|0)==(122);
      if ($43) {
       label = 7;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 7) {
  $is_toneporta = 1;
 }
 $44 = $1;
 $45 = $3;
 $46 = (_virt_mapchannel($44,$45)|0);
 $47 = ($46|0)<(0);
 if ($47) {
  $48 = $xc;
  $49 = ((($48)) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $2;
  $52 = ((($51)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($54) - 1)|0;
  $56 = ($50|0)!=($55|0);
  if ($56) {
   $is_toneporta = 0;
  }
 }
 $57 = $2;
 $58 = ((($57)) + 1|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = ($59<<24>>24)!=(0);
 do {
  if ($60) {
   $61 = $2;
   $62 = ((($61)) + 1|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = (($64) - 1)|0;
   $ins = $65;
   $66 = $xc;
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 2048;
   HEAP32[$66>>2] = $68;
   $use_ins_vol = 1;
   $69 = $xc;
   $70 = ((($69)) + 68|0);
   HEAP32[$70>>2] = 65536;
   $71 = $xc;
   $72 = ((($71)) + 4|0);
   HEAP32[$72>>2] = 0;
   $73 = $xc;
   $74 = ((($73)) + 216|0);
   HEAP32[$74>>2] = 0;
   $75 = $xc;
   $76 = ((($75)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $77 & -4;
   HEAP32[$76>>2] = $78;
   $79 = $ins;
   $80 = $mod;
   $81 = ((($80)) + 140|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($79>>>0)<($82>>>0);
   if ($83) {
    $84 = $ins;
    $85 = $mod;
    $86 = ((($85)) + 176|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + (($84*764)|0)|0);
    $89 = ((($88)) + 36|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)>(0);
    if ($91) {
     $92 = $xc;
     $93 = ((($92)) + 44|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $ins;
     $96 = ($94|0)!=($95|0);
     if (!($96)) {
      break;
     }
     $not_same_ins = 1;
     $97 = $is_toneporta;
     $98 = ($97|0)!=(0);
     if (!($98)) {
      $99 = $ins;
      $100 = $xc;
      $101 = ((($100)) + 44|0);
      HEAP32[$101>>2] = $99;
      $102 = $ins;
      $103 = $mod;
      $104 = ((($103)) + 176|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + (($102*764)|0)|0);
      $107 = ((($106)) + 40|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $xc;
      $110 = ((($109)) + 72|0);
      HEAP32[$110>>2] = $108;
      break;
     }
     $111 = $1;
     $112 = $ins;
     $113 = $2;
     $114 = HEAP8[$113>>0]|0;
     $115 = $114&255;
     $116 = (($115) - 1)|0;
     $117 = (_get_subinstrument($111,$112,$116)|0);
     $sub = $117;
     $118 = $sub;
     $119 = ($118|0)!=(0|0);
     if (!($119)) {
      break;
     }
     $120 = $sub;
     $121 = HEAP32[$120>>2]|0;
     $122 = $xc;
     $123 = ((($122)) + 84|0);
     HEAP32[$123>>2] = $121;
     $use_ins_vol = 0;
     break;
    }
   }
   $124 = $xc;
   HEAP32[$124>>2] = 0;
   $use_ins_vol = 0;
  }
 } while(0);
 $125 = $2;
 $126 = HEAP8[$125>>0]|0;
 $127 = ($126<<24>>24)!=(0);
 do {
  if ($127) {
   $128 = $xc;
   $129 = HEAP32[$128>>2]|0;
   $130 = $129 | 65536;
   HEAP32[$128>>2] = $130;
   $131 = $2;
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = ($133|0)==(129);
   if ($134) {
    $135 = $xc;
    $136 = ((($135)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 | 2;
    HEAP32[$136>>2] = $138;
    $use_ins_vol = 0;
    break;
   }
   $139 = $is_toneporta;
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $not_same_ins;
    $142 = ($141|0)!=(0);
    if (!($142)) {
     break;
    }
    $143 = $xc;
    $144 = ((($143)) + 216|0);
    HEAP32[$144>>2] = 0;
    break;
   }
   $145 = $2;
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($147) - 1)|0;
   $149 = $xc;
   $150 = ((($149)) + 16|0);
   HEAP32[$150>>2] = $148;
   $151 = $xc;
   $152 = ((($151)) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $153 & -5;
   HEAP32[$152>>2] = $154;
   $155 = $1;
   $156 = $xc;
   $157 = ((($156)) + 44|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $xc;
   $160 = ((($159)) + 16|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (_get_subinstrument($155,$158,$161)|0);
   $sub = $162;
   $163 = $sub;
   $164 = ($163|0)!=(0|0);
   $165 = $xc;
   if (!($164)) {
    HEAP32[$165>>2] = 0;
    $use_ins_vol = 0;
    break;
   }
   $166 = ((($165)) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $xc;
   $169 = ((($168)) + 44|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $mod;
   $172 = ((($171)) + 176|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($173) + (($170*764)|0)|0);
   $175 = ((($174)) + 512|0);
   $176 = (($175) + ($167<<1)|0);
   $177 = ((($176)) + 1|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178 << 24 >> 24;
   $transp = $179;
   $180 = $xc;
   $181 = ((($180)) + 16|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $sub;
   $184 = ((($183)) + 12|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (($182) + ($185))|0;
   $187 = $transp;
   $188 = (($186) + ($187))|0;
   $note = $188;
   $189 = $sub;
   $190 = ((($189)) + 40|0);
   $191 = HEAP32[$190>>2]|0;
   $smp = $191;
   $192 = $smp;
   $193 = $mod;
   $194 = ((($193)) + 180|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + (($192*52)|0)|0);
   $197 = ((($196)) + 32|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = ($198|0)==(0);
   if ($199) {
    $smp = -1;
   }
   $200 = $smp;
   $201 = ($200|0)>=(0);
   if ($201) {
    $202 = $smp;
    $203 = $mod;
    $204 = ((($203)) + 144|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($202|0)<($205|0);
    if ($206) {
     $207 = $1;
     $208 = $3;
     $209 = $xc;
     $210 = ((($209)) + 44|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $smp;
     $213 = $note;
     (_virt_setpatch($207,$208,$211,$212,$213,0,0,0)|0);
     $214 = $smp;
     $215 = $xc;
     $216 = ((($215)) + 52|0);
     HEAP32[$216>>2] = $214;
    }
   }
  }
 } while(0);
 $217 = $1;
 $218 = $xc;
 $219 = ((($218)) + 44|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = $xc;
 $222 = ((($221)) + 16|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = (_get_subinstrument($217,$220,$223)|0);
 $sub = $224;
 $225 = $1;
 $226 = $note;
 $227 = $sub;
 $228 = $xc;
 $229 = $is_toneporta;
 _set_effect_defaults($225,$226,$227,$228,$229);
 $230 = $2;
 $231 = ((($230)) + 1|0);
 $232 = HEAP8[$231>>0]|0;
 $233 = $232&255;
 $234 = ($233|0)!=(0);
 $235 = $sub;
 $236 = ($235|0)!=(0|0);
 $or$cond = $234 & $236;
 if ($or$cond) {
  $237 = $1;
  $238 = $xc;
  _reset_envelopes($237,$238);
 }
 $239 = $2;
 $240 = ((($239)) + 2|0);
 $241 = HEAP8[$240>>0]|0;
 $242 = ($241<<24>>24)!=(0);
 if ($242) {
  $243 = $2;
  $244 = ((($243)) + 2|0);
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = (($246) - 1)|0;
  $248 = $xc;
  $249 = ((($248)) + 84|0);
  HEAP32[$249>>2] = $247;
  $250 = $xc;
  $251 = HEAP32[$250>>2]|0;
  $252 = $251 | 4096;
  HEAP32[$250>>2] = $252;
 }
 $253 = $1;
 $254 = $xc;
 $255 = $3;
 $256 = $2;
 _process_fx($253,$254,$255,$256,1);
 $257 = $1;
 $258 = $xc;
 $259 = $3;
 $260 = $2;
 _process_fx($257,$258,$259,$260,0);
 $261 = $1;
 $262 = $note;
 $263 = $sub;
 $264 = $xc;
 $265 = $is_toneporta;
 _set_period($261,$262,$263,$264,$265);
 $266 = $sub;
 $267 = ($266|0)==(0|0);
 if ($267) {
  $0 = 0;
  $310 = $0;
  STACKTOP = sp;return ($310|0);
 }
 $268 = $note;
 $269 = ($268|0)>=(0);
 if ($269) {
  $270 = $note;
  $271 = $xc;
  $272 = ((($271)) + 12|0);
  HEAP32[$272>>2] = $270;
  $273 = $1;
  $274 = $3;
  $275 = $xc;
  $276 = ((($275)) + 216|0);
  $277 = HEAP32[$276>>2]|0;
  _virt_voicepos($273,$274,$277);
 }
 $278 = $use_ins_vol;
 $279 = ($278|0)!=(0);
 if ($279) {
  $280 = $xc;
  $281 = HEAP32[$280>>2]|0;
  $282 = $281 & 4096;
  $283 = ($282|0)!=(0);
  if (!($283)) {
   $284 = $sub;
   $285 = HEAP32[$284>>2]|0;
   $286 = $xc;
   $287 = ((($286)) + 84|0);
   HEAP32[$287>>2] = $285;
  }
 }
 $288 = $m;
 $289 = ((($288)) + 1284|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = $290 & 16;
 $292 = ($291|0)!=(0);
 if ($292) {
  $293 = $xc;
  $294 = HEAP32[$293>>2]|0;
  $295 = $294 & 4096;
  $296 = ($295|0)!=(0);
  if ($296) {
   $297 = $xc;
   $298 = ((($297)) + 84|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $p;
   $301 = ((($300)) + 320|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = Math_imul($299, $302)|0;
   $304 = $m;
   $305 = ((($304)) + 1268|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = (($303|0) / ($306|0))&-1;
   $308 = $xc;
   $309 = ((($308)) + 84|0);
   HEAP32[$309>>2] = $307;
  }
 }
 $0 = 0;
 $310 = $0;
 STACKTOP = sp;return ($310|0);
}
function _read_event_it($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $candidate_ins = 0, $env = 0, $ev = 0, $ins = 0, $ins1 = 0, $ins2 = 0, $is_release = 0, $is_toneporta = 0, $key = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $not_same_ins = 0, $not_same_smp = 0, $note = 0;
 var $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $p = 0, $pan_swing = 0, $reset_env = 0, $sample_mode = 0, $set_new_ins = 0, $smp = 0, $sub = 0, $to = 0, $toneporta_offset = 0, $transp = 0, $use_ins_vol = 0, $vol_swing = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ev = sp + 128|0;
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $13 = $2;
 ;HEAP8[$ev>>0]=HEAP8[$13>>0]|0;HEAP8[$ev+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$ev+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$ev+3>>0]=HEAP8[$13+3>>0]|0;HEAP8[$ev+4>>0]=HEAP8[$13+4>>0]|0;HEAP8[$ev+5>>0]=HEAP8[$13+5>>0]|0;HEAP8[$ev+6>>0]=HEAP8[$13+6>>0]|0;HEAP8[$ev+7>>0]=HEAP8[$13+7>>0]|0;
 $14 = ((($ev)) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)!=(0);
 if ($16) {
  $17 = $xc;
  $18 = ((($17)) + 444|0);
  HEAP32[$18>>2] = 0;
 } else {
  $19 = HEAP8[$ev>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $xc;
   $23 = ((($22)) + 444|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $xc;
    $27 = ((($26)) + 444|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $28&255;
    $30 = ((($ev)) + 1|0);
    HEAP8[$30>>0] = $29;
    $31 = $xc;
    $32 = ((($31)) + 444|0);
    HEAP32[$32>>2] = 0;
   }
  }
 }
 $33 = $m;
 $34 = ((($33)) + 1284|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 8388608;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP8[$ev>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)==(129);
  if ($40) {
   $41 = ((($ev)) + 1|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = (($43) - 1)|0;
   $45 = $mod;
   $46 = ((($45)) + 140|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($44>>>0)<($47>>>0);
   if ($48) {
    $49 = ((($ev)) + 1|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = (($51) - 1)|0;
    $53 = $mod;
    $54 = ((($53)) + 176|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + (($52*764)|0)|0);
    $57 = ((($56)) + 36|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)>(0);
    if ($59) {
     $60 = $xc;
     $61 = ((($60)) + 16|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + 1)|0;
     $64 = $63&255;
     HEAP8[$ev>>0] = $64;
     $65 = $xc;
     $66 = ((($65)) + 44|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + 1)|0;
     $69 = $68&255;
     $70 = ((($ev)) + 1|0);
     HEAP8[$70>>0] = $69;
    }
   }
  }
 }
 $71 = $xc;
 HEAP32[$71>>2] = 0;
 $note = -1;
 $72 = HEAP8[$ev>>0]|0;
 $73 = $72&255;
 $key = $73;
 $not_same_ins = 0;
 $not_same_smp = 0;
 $new_invalid_ins = 0;
 $is_toneporta = 0;
 $is_release = 0;
 $reset_env = 0;
 $use_ins_vol = 0;
 $74 = $xc;
 $75 = ((($74)) + 44|0);
 $76 = HEAP32[$75>>2]|0;
 $candidate_ins = $76;
 $77 = $m;
 $78 = ((($77)) + 1284|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 & 32768;
 $81 = ($80|0)!=(0);
 $82 = $81 ^ 1;
 $83 = $82&1;
 $sample_mode = $83;
 $toneporta_offset = 0;
 $84 = ((($ev)) + 1|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($85<<24>>24)!=(0);
 do {
  if ($86) {
   $87 = ((($ev)) + 1|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $mod;
   $91 = ((($90)) + 140|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($89|0)<=($92|0);
   if ($93) {
    $94 = (_has_note_event($ev)|0);
    $95 = ($94|0)!=(0);
    if ($95) {
     $96 = ((($ev)) + 1|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = (($98) - 1)|0;
     $ins = $99;
     $100 = $1;
     $101 = $ins;
     $102 = HEAP8[$ev>>0]|0;
     $103 = $102&255;
     $104 = (($103) - 1)|0;
     $105 = (_check_invalid_sample($100,$101,$104)|0);
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = $ins;
      $candidate_ins = $107;
      ;HEAP8[$ev>>0]=0|0;HEAP8[$ev+1>>0]=0|0;HEAP8[$ev+2>>0]=0|0;HEAP8[$ev+3>>0]=0|0;HEAP8[$ev+4>>0]=0|0;HEAP8[$ev+5>>0]=0|0;HEAP8[$ev+6>>0]=0|0;HEAP8[$ev+7>>0]=0|0;
     }
    }
   }
  } else {
   $108 = (_has_note_event($ev)|0);
   $109 = ($108|0)!=(0);
   if ($109) {
    $110 = $xc;
    $111 = ((($110)) + 48|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) - 1)|0;
    $ins1 = $113;
    $114 = $ins1;
    $115 = $mod;
    $116 = ((($115)) + 140|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($114>>>0)<($117>>>0);
    if ($118) {
     $119 = $ins1;
     $120 = $mod;
     $121 = ((($120)) + 176|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (($122) + (($119*764)|0)|0);
     $124 = ((($123)) + 36|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($125|0)>(0);
     if ($126) {
      $127 = $1;
      $128 = $ins1;
      $129 = HEAP8[$ev>>0]|0;
      $130 = $129&255;
      $131 = (($130) - 1)|0;
      $132 = (_check_invalid_sample($127,$128,$131)|0);
      $133 = ($132|0)!=(0);
      if (!($133)) {
       break;
      }
      ;HEAP8[$ev>>0]=0|0;HEAP8[$ev+1>>0]=0|0;HEAP8[$ev+2>>0]=0|0;HEAP8[$ev+3>>0]=0|0;HEAP8[$ev+4>>0]=0|0;HEAP8[$ev+5>>0]=0|0;HEAP8[$ev+6>>0]=0|0;HEAP8[$ev+7>>0]=0|0;
      break;
     }
    }
    $new_invalid_ins = 1;
   }
  }
 } while(0);
 $134 = ((($ev)) + 3|0);
 $135 = HEAP8[$134>>0]|0;
 $136 = $135&255;
 $137 = ($136|0)==(3);
 if ($137) {
  label = 28;
 } else {
  $138 = ((($ev)) + 3|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = ($140|0)==(5);
  if ($141) {
   label = 28;
  } else {
   $142 = ((($ev)) + 3|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = ($144|0)==(122);
   if ($145) {
    label = 28;
   } else {
    $146 = ((($ev)) + 5|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147&255;
    $149 = ($148|0)==(3);
    if ($149) {
     label = 28;
    } else {
     $150 = ((($ev)) + 5|0);
     $151 = HEAP8[$150>>0]|0;
     $152 = $151&255;
     $153 = ($152|0)==(5);
     if ($153) {
      label = 28;
     } else {
      $154 = ((($ev)) + 5|0);
      $155 = HEAP8[$154>>0]|0;
      $156 = $155&255;
      $157 = ($156|0)==(122);
      if ($157) {
       label = 28;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 28) {
  $is_toneporta = 1;
 }
 $158 = $xc;
 $159 = ((($158)) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $160 & 3;
 $162 = ($161|0)!=(0);
 if ($162) {
  $is_release = 1;
 }
 $163 = $xc;
 $164 = ((($163)) + 24|0);
 $165 = +HEAPF64[$164>>3];
 $166 = $165 <= 0.0;
 if ($166) {
  label = 33;
 } else {
  $167 = $xc;
  $168 = ((($167)) + 8|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 & 4;
  $171 = ($170|0)!=(0);
  if ($171) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $is_toneporta = 0;
 }
 $172 = $is_toneporta;
 $173 = ($172|0)!=(0);
 if ($173) {
  $174 = ((($ev)) + 3|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = ($176|0)==(9);
  if ($177) {
   $is_toneporta = 0;
   $178 = $m;
   $179 = ((($178)) + 1284|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 & 4194304;
   $182 = ($181|0)!=(0);
   if (!($182)) {
    $toneporta_offset = 1;
    $183 = $xc;
    $184 = ((($183)) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $185 & -17;
    HEAP32[$184>>2] = $186;
   }
  }
 }
 $187 = ((($ev)) + 1|0);
 $188 = HEAP8[$187>>0]|0;
 $189 = ($188<<24>>24)!=(0);
 do {
  if ($189) {
   $190 = ((($ev)) + 1|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = (($192) - 1)|0;
   $ins2 = $193;
   $set_new_ins = 1;
   $194 = $is_release;
   $195 = ($194|0)!=(0);
   $196 = $is_toneporta;
   $197 = ($196|0)!=(0);
   $or$cond = $195 & $197;
   $or$cond$not = $or$cond ^ 1;
   $198 = $key;
   $199 = ($198|0)!=(0);
   $or$cond3 = $or$cond$not | $199;
   do {
    if (!($or$cond3)) {
     $200 = $m;
     $201 = ((($200)) + 1284|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = $202 & 4194304;
     $204 = ($203|0)!=(0);
     if (!($204)) {
      $205 = $xc;
      $206 = ((($205)) + 8|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = $207 & 64;
      $209 = ($208|0)!=(0);
      if (!($209)) {
       break;
      }
     }
     $is_toneporta = 0;
     $210 = $1;
     $211 = $xc;
     _reset_envelopes_carry($210,$211);
    }
   } while(0);
   $212 = $is_toneporta;
   $213 = ($212|0)!=(0);
   do {
    if ($213) {
     $214 = $xc;
     $215 = ((($214)) + 44|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = $ins2;
     $218 = ($216|0)==($217|0);
     if ($218) {
      $219 = $m;
      $220 = ((($219)) + 1284|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = $221 & 4194304;
      $223 = ($222|0)!=(0);
      if (!($223)) {
       $224 = $1;
       $225 = $3;
       $226 = $ins2;
       $227 = $key;
       $228 = (($227) - 1)|0;
       $229 = (_is_same_sid($224,$225,$226,$228)|0);
       $230 = ($229|0)!=(0);
       if ($230) {
        $231 = $is_release;
        $232 = ($231|0)!=(0);
        $233 = $232 ^ 1;
        $234 = $233&1;
        $set_new_ins = $234;
        break;
       } else {
        $not_same_ins = 1;
        $not_same_smp = 1;
        break;
       }
      }
     }
    }
   } while(0);
   $235 = $set_new_ins;
   $236 = ($235|0)!=(0);
   if ($236) {
    $237 = $xc;
    $238 = HEAP32[$237>>2]|0;
    $239 = $238 | 2048;
    HEAP32[$237>>2] = $239;
    $use_ins_vol = 1;
    $reset_env = 1;
   }
   $240 = $xc;
   $241 = ((($240)) + 4|0);
   HEAP32[$241>>2] = 0;
   $242 = $ins2;
   $243 = $mod;
   $244 = ((($243)) + 140|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ($242>>>0)<($245>>>0);
   if ($246) {
    $247 = $ins2;
    $248 = $mod;
    $249 = ((($248)) + 176|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = (($250) + (($247*764)|0)|0);
    $252 = ((($251)) + 36|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = ($253|0)>(0);
    if ($254) {
     $255 = $key;
     $256 = ($255|0)!=(0);
     if (!($256)) {
      $257 = $sample_mode;
      $258 = ($257|0)!=(0);
      if ($258) {
       $259 = $xc;
       $260 = ((($259)) + 8|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $261 & 4;
       $263 = ($262|0)!=(0);
       if ($263) {
        $264 = $1;
        $265 = $3;
        _virt_voicepos($264,$265,0);
       }
      }
      $266 = $xc;
      $267 = ((($266)) + 44|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = $ins2;
      $270 = ($268|0)==($269|0);
      $271 = $xc;
      if ($270) {
       $272 = HEAP32[$271>>2]|0;
       $273 = $272 | 2048;
       HEAP32[$271>>2] = $273;
       $use_ins_vol = 1;
      } else {
       $274 = ((($271)) + 16|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = (($275) + 1)|0;
       $key = $276;
      }
      $277 = $xc;
      $278 = ((($277)) + 8|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = $279 & -65;
      HEAP32[$278>>2] = $280;
     }
     $281 = $xc;
     $282 = ((($281)) + 44|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = $ins2;
     $285 = ($283|0)!=($284|0);
     if (!($285)) {
      break;
     }
     $286 = $is_toneporta;
     $287 = ($286|0)!=(0);
     if ($287) {
      $288 = $m;
      $289 = ((($288)) + 1284|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = $290 & 4194304;
      $292 = ($291|0)!=(0);
      if ($292) {
       break;
      }
     }
     $293 = $ins2;
     $candidate_ins = $293;
     $294 = $1;
     $295 = $3;
     $296 = $ins2;
     $297 = $key;
     $298 = (($297) - 1)|0;
     $299 = (_is_same_sid($294,$295,$296,$298)|0);
     $300 = ($299|0)!=(0);
     if ($300) {
      break;
     }
     $not_same_ins = 1;
     $301 = $is_toneporta;
     $302 = ($301|0)!=(0);
     if (!($302)) {
      break;
     }
     $303 = $1;
     $304 = $ins2;
     $305 = $key;
     $306 = (_get_subinstrument($303,$304,$305)|0);
     $sub = $306;
     $307 = $sub;
     $308 = ($307|0)!=(0|0);
     if (!($308)) {
      break;
     }
     $309 = $sub;
     $310 = HEAP32[$309>>2]|0;
     $311 = $xc;
     $312 = ((($311)) + 84|0);
     HEAP32[$312>>2] = $310;
     $use_ins_vol = 0;
     break;
    }
   }
   $313 = $sample_mode;
   $314 = ($313|0)!=(0);
   if ($314) {
    $315 = $xc;
    $316 = ((($315)) + 84|0);
    HEAP32[$316>>2] = 0;
   }
   $new_invalid_ins = 1;
   $317 = $xc;
   HEAP32[$317>>2] = 0;
   $use_ins_vol = 0;
  }
 } while(0);
 $318 = $key;
 $319 = ($318|0)==(0);
 $320 = $new_invalid_ins;
 $321 = ($320|0)!=(0);
 $or$cond5 = $319 | $321;
 do {
  if (!($or$cond5)) {
   $322 = $xc;
   $323 = HEAP32[$322>>2]|0;
   $324 = $323 | 65536;
   HEAP32[$322>>2] = $324;
   $325 = $xc;
   $326 = ((($325)) + 8|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = $327 | 64;
   HEAP32[$326>>2] = $328;
   $329 = $key;
   $330 = ($329|0)==(131);
   if ($330) {
    $331 = $xc;
    $332 = ((($331)) + 8|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = $333 | 1;
    HEAP32[$332>>2] = $334;
    $reset_env = 0;
    $use_ins_vol = 0;
    break;
   }
   $335 = $key;
   $336 = ($335|0)==(130);
   if ($336) {
    $337 = $xc;
    $338 = ((($337)) + 8|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = $339 | 12;
    HEAP32[$338>>2] = $340;
    $341 = $xc;
    $342 = ((($341)) + 24|0);
    HEAPF64[$342>>3] = 0.0;
    $343 = $1;
    $344 = $3;
    _virt_resetchannel($343,$344);
    break;
   }
   $345 = $key;
   $346 = ($345|0)==(129);
   if ($346) {
    $env = 0;
    $347 = $xc;
    $348 = ((($347)) + 44|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = $mod;
    $351 = ((($350)) + 140|0);
    $352 = HEAP32[$351>>2]|0;
    $353 = ($349>>>0)<($352>>>0);
    if ($353) {
     $354 = $xc;
     $355 = ((($354)) + 44|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = $mod;
     $358 = ((($357)) + 176|0);
     $359 = HEAP32[$358>>2]|0;
     $360 = (($359) + (($356*764)|0)|0);
     $361 = ((($360)) + 36|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = ($362|0)>(0);
     if ($363) {
      $364 = $xc;
      $365 = ((($364)) + 44|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = $mod;
      $368 = ((($367)) + 176|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = (($369) + (($366*764)|0)|0);
      $371 = ((($370)) + 44|0);
      $env = $371;
     }
    }
    $372 = $env;
    $373 = $xc;
    $374 = ((($373)) + 92|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (_sustain_check($372,$375)|0);
    $377 = ($376|0)!=(0);
    $378 = $xc;
    $379 = ((($378)) + 8|0);
    $380 = HEAP32[$379>>2]|0;
    if ($377) {
     $381 = $380 | 128;
     HEAP32[$379>>2] = $381;
    } else {
     $382 = $380 | 2;
     HEAP32[$379>>2] = $382;
    }
    $383 = $xc;
    $384 = HEAP32[$383>>2]|0;
    $385 = $384 | 134217728;
    HEAP32[$383>>2] = $385;
    $reset_env = 0;
    $use_ins_vol = 0;
    break;
   } else {
    $reset_env = 1;
    $386 = $is_toneporta;
    $387 = ($386|0)!=(0);
    if (!($387)) {
     break;
    }
    $388 = $not_same_ins;
    $389 = ($388|0)!=(0);
    if (!($389)) {
     $390 = $xc;
     $391 = ((($390)) + 8|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = $392 & 4;
     $394 = ($393|0)!=(0);
     if (!($394)) {
      $402 = $key;
      $403 = (($402) - 1)|0;
      $404 = (_is_valid_note($403)|0);
      $405 = ($404|0)!=(0);
      if ($405) {
       $406 = $key;
       $407 = (($406) - 1)|0;
       $408 = $xc;
       $409 = ((($408)) + 104|0);
       HEAP32[$409>>2] = $407;
      }
      $key = 0;
      break;
     }
    }
    $395 = $xc;
    $396 = HEAP32[$395>>2]|0;
    $397 = $396 | 2048;
    HEAP32[$395>>2] = $397;
    $398 = $xc;
    $399 = ((($398)) + 8|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = $400 & -132;
    HEAP32[$399>>2] = $401;
    break;
   }
  }
 } while(0);
 $410 = $key;
 $411 = (($410) - 1)|0;
 $412 = (_is_valid_note($411)|0);
 $413 = ($412|0)==(0);
 $414 = $new_invalid_ins;
 $415 = ($414|0)!=(0);
 $or$cond7 = $413 | $415;
 do {
  if (!($or$cond7)) {
   $416 = $key;
   $417 = (($416) + -1)|0;
   $key = $417;
   $418 = $xc;
   $419 = ((($418)) + 16|0);
   HEAP32[$419>>2] = $417;
   $420 = $xc;
   $421 = ((($420)) + 8|0);
   $422 = HEAP32[$421>>2]|0;
   $423 = $422 & -5;
   HEAP32[$421>>2] = $423;
   $424 = $1;
   $425 = $candidate_ins;
   $426 = $key;
   $427 = (_get_subinstrument($424,$425,$426)|0);
   $sub = $427;
   $428 = $sub;
   $429 = ($428|0)!=(0|0);
   if (!($429)) {
    $504 = $xc;
    HEAP32[$504>>2] = 0;
    $use_ins_vol = 0;
    break;
   }
   $430 = $key;
   $431 = $candidate_ins;
   $432 = $mod;
   $433 = ((($432)) + 176|0);
   $434 = HEAP32[$433>>2]|0;
   $435 = (($434) + (($431*764)|0)|0);
   $436 = ((($435)) + 512|0);
   $437 = (($436) + ($430<<1)|0);
   $438 = ((($437)) + 1|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $439 << 24 >> 24;
   $transp = $440;
   $441 = $key;
   $442 = $sub;
   $443 = ((($442)) + 12|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = (($441) + ($444))|0;
   $446 = $transp;
   $447 = (($445) + ($446))|0;
   $note = $447;
   $448 = $sub;
   $449 = ((($448)) + 40|0);
   $450 = HEAP32[$449>>2]|0;
   $smp = $450;
   $451 = $smp;
   $452 = $mod;
   $453 = ((($452)) + 144|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = ($451|0)>=($454|0);
   if ($455) {
    label = 95;
   } else {
    $456 = $smp;
    $457 = $mod;
    $458 = ((($457)) + 180|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = (($459) + (($456*52)|0)|0);
    $461 = ((($460)) + 32|0);
    $462 = HEAP32[$461>>2]|0;
    $463 = ($462|0)==(0);
    if ($463) {
     label = 95;
    }
   }
   if ((label|0) == 95) {
    $smp = -1;
   }
   $464 = $not_same_smp;
   $465 = ($464|0)!=(0);
   if ($465) {
    $466 = $1;
    $467 = $3;
    $468 = $sub;
    _fix_period($466,$467,$468);
    $469 = $1;
    $470 = $3;
    _virt_resetchannel($469,$470);
   }
   $471 = $1;
   $472 = $3;
   $473 = $candidate_ins;
   $474 = $smp;
   $475 = $note;
   $476 = $sub;
   $477 = ((($476)) + 44|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = $sub;
   $480 = ((($479)) + 48|0);
   $481 = HEAP32[$480>>2]|0;
   $482 = $sub;
   $483 = ((($482)) + 52|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = (_virt_setpatch($471,$472,$473,$474,$475,$478,$481,$484)|0);
   $to = $485;
   $486 = $to;
   $487 = ($486|0)<(0);
   if ($487) {
    $0 = -1;
    $744 = $0;
    STACKTOP = sp;return ($744|0);
   }
   $488 = $to;
   $489 = $3;
   $490 = ($488|0)!=($489|0);
   if ($490) {
    $491 = $p;
    $492 = $to;
    $493 = $3;
    _copy_channel($491,$492,$493);
    $494 = $to;
    $495 = $p;
    $496 = ((($495)) + 620|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = (($497) + (($494*472)|0)|0);
    HEAP32[$498>>2] = 0;
   }
   $499 = $smp;
   $500 = ($499|0)>=(0);
   if ($500) {
    $501 = $smp;
    $502 = $xc;
    $503 = ((($502)) + 52|0);
    HEAP32[$503>>2] = $501;
   }
  }
 } while(0);
 $505 = $is_toneporta;
 $506 = ($505|0)!=(0);
 if ($506) {
  $507 = $m;
  $508 = ((($507)) + 1284|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = $509 & 4194304;
  $511 = ($510|0)!=(0);
  if ($511) {
   $512 = ((($ev)) + 1|0);
   $513 = HEAP8[$512>>0]|0;
   $514 = $513&255;
   $515 = ($514|0)!=(0);
   if ($515) {
    $516 = $1;
    $517 = $xc;
    _reset_envelopes_carry($516,$517);
   }
  }
 }
 $518 = $candidate_ins;
 $519 = $mod;
 $520 = ((($519)) + 140|0);
 $521 = HEAP32[$520>>2]|0;
 $522 = ($518>>>0)<($521>>>0);
 if ($522) {
  $523 = $candidate_ins;
  $524 = $mod;
  $525 = ((($524)) + 176|0);
  $526 = HEAP32[$525>>2]|0;
  $527 = (($526) + (($523*764)|0)|0);
  $528 = ((($527)) + 36|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = ($529|0)>(0);
  if ($530) {
   $531 = $xc;
   $532 = ((($531)) + 44|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = $candidate_ins;
   $535 = ($533|0)!=($534|0);
   if ($535) {
    $536 = $1;
    $537 = $xc;
    _reset_envelopes($536,$537);
   }
   $538 = $candidate_ins;
   $539 = $xc;
   $540 = ((($539)) + 44|0);
   HEAP32[$540>>2] = $538;
   $541 = $candidate_ins;
   $542 = $mod;
   $543 = ((($542)) + 176|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = (($544) + (($541*764)|0)|0);
   $546 = ((($545)) + 40|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = $xc;
   $549 = ((($548)) + 72|0);
   HEAP32[$549>>2] = $547;
  }
 }
 $550 = ((($ev)) + 1|0);
 $551 = HEAP8[$550>>0]|0;
 $552 = $551&255;
 $553 = ($552|0)!=(0);
 do {
  if ($553) {
   $554 = $xc;
   $555 = ((($554)) + 8|0);
   $556 = HEAP32[$555>>2]|0;
   $557 = $556 & 16;
   $558 = ($557|0)!=(0);
   if ($558) {
    $559 = $1;
    $560 = $xc;
    $561 = $candidate_ins;
    $562 = (_check_fadeout($559,$560,$561)|0);
    $563 = ($562|0)!=(0);
    if ($563) {
     $564 = $1;
     $565 = $xc;
     _reset_envelopes($564,$565);
     break;
    } else {
     $reset_env = 0;
     break;
    }
   }
  }
 } while(0);
 $566 = $reset_env;
 $567 = ($566|0)!=(0);
 if ($567) {
  $568 = HEAP8[$ev>>0]|0;
  $569 = ($568<<24>>24)!=(0);
  if ($569) {
   $570 = $xc;
   $571 = ((($570)) + 8|0);
   $572 = HEAP32[$571>>2]|0;
   $573 = $572 & -132;
   HEAP32[$571>>2] = $573;
  }
  $574 = $xc;
  $575 = ((($574)) + 68|0);
  HEAP32[$575>>2] = 65536;
 }
 $576 = $1;
 $577 = $xc;
 $578 = ((($577)) + 44|0);
 $579 = HEAP32[$578>>2]|0;
 $580 = $xc;
 $581 = ((($580)) + 16|0);
 $582 = HEAP32[$581>>2]|0;
 $583 = (_get_subinstrument($576,$579,$582)|0);
 $sub = $583;
 $584 = $1;
 $585 = $note;
 $586 = $sub;
 $587 = $xc;
 $588 = $is_toneporta;
 _set_effect_defaults($584,$585,$586,$587,$588);
 $589 = $sub;
 $590 = ($589|0)!=(0|0);
 do {
  if ($590) {
   $591 = $note;
   $592 = ($591|0)>=(0);
   if (!($592)) {
    $645 = ((($ev)) + 1|0);
    $646 = HEAP8[$645>>0]|0;
    $647 = ($646<<24>>24)!=(0);
    if (!($647)) {
     break;
    }
    $648 = $sub;
    $649 = ((($648)) + 8|0);
    $650 = HEAP32[$649>>2]|0;
    $651 = ($650|0)>=(0);
    if (!($651)) {
     break;
    }
    $652 = $sub;
    $653 = ((($652)) + 8|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = $xc;
    $656 = ((($655)) + 368|0);
    HEAP32[$656>>2] = $654;
    break;
   }
   $593 = $sub;
   $594 = ((($593)) + 36|0);
   $595 = HEAP32[$594>>2]|0;
   $596 = $595 & 65280;
   $597 = $596 >> 8;
   $pan_swing = $597;
   $598 = $pan_swing;
   $599 = ($598|0)<(0);
   if ($599) {
    $pan_swing = 0;
   } else {
    $600 = $pan_swing;
    $601 = ($600|0)>(64);
    if ($601) {
     $pan_swing = 64;
    }
   }
   $602 = $sub;
   $603 = ((($602)) + 8|0);
   $604 = HEAP32[$603>>2]|0;
   $605 = ($604|0)>=(0);
   if ($605) {
    $606 = $sub;
    $607 = ((($606)) + 8|0);
    $608 = HEAP32[$607>>2]|0;
    $609 = $xc;
    $610 = ((($609)) + 368|0);
    HEAP32[$610>>2] = $608;
    $611 = $xc;
    $612 = ((($611)) + 368|0);
    $613 = ((($612)) + 16|0);
    HEAP32[$613>>2] = 0;
   }
   $614 = $xc;
   $615 = ((($614)) + 8|0);
   $616 = HEAP32[$615>>2]|0;
   $617 = $616 & 8;
   $618 = ($617|0)!=(0);
   do {
    if ($618) {
     $619 = $1;
     $620 = $xc;
     _reset_envelopes($619,$620);
    } else {
     $621 = $toneporta_offset;
     $622 = ($621|0)!=(0);
     if ($622) {
      break;
     }
     $623 = $1;
     $624 = $xc;
     _reset_envelopes_carry($623,$624);
    }
   } while(0);
   $625 = $xc;
   $626 = ((($625)) + 8|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = $627 & -9;
   HEAP32[$626>>2] = $628;
   $629 = $pan_swing;
   $630 = ($629|0)!=(0);
   if (!($630)) {
    break;
   }
   $631 = $xc;
   $632 = ((($631)) + 368|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = $pan_swing;
   $635 = (64 - ($634))|0;
   $636 = Math_imul($633, $635)|0;
   $637 = (_rand()|0);
   $638 = (($637|0) % 256)&-1;
   $639 = $pan_swing;
   $640 = Math_imul($638, $639)|0;
   $641 = (($636) + ($640))|0;
   $642 = $641 >> 6;
   $643 = $xc;
   $644 = ((($643)) + 368|0);
   HEAP32[$644>>2] = $642;
  }
 } while(0);
 $657 = ((($ev)) + 2|0);
 $658 = HEAP8[$657>>0]|0;
 $659 = $658&255;
 $660 = ($659|0)!=(0);
 do {
  if ($660) {
   $661 = $xc;
   $662 = ((($661)) + 8|0);
   $663 = HEAP32[$662>>2]|0;
   $664 = $663 & 8;
   $665 = ($664|0)!=(0);
   if ($665) {
    $666 = ((($ev)) + 1|0);
    $667 = HEAP8[$666>>0]|0;
    $668 = $667&255;
    $669 = ($668|0)!=(0);
    if (!($669)) {
     break;
    }
   }
   $670 = ((($ev)) + 2|0);
   $671 = HEAP8[$670>>0]|0;
   $672 = $671&255;
   $673 = (($672) - 1)|0;
   $674 = $xc;
   $675 = ((($674)) + 84|0);
   HEAP32[$675>>2] = $673;
   $676 = $xc;
   $677 = HEAP32[$676>>2]|0;
   $678 = $677 | 4096;
   HEAP32[$676>>2] = $678;
  }
 } while(0);
 $679 = $xc;
 $680 = ((($679)) + 216|0);
 $681 = HEAP32[$680>>2]|0;
 $682 = $681 & -65536;
 HEAP32[$680>>2] = $682;
 $683 = $1;
 $684 = $xc;
 $685 = $3;
 _process_fx($683,$684,$685,$ev,0);
 $686 = $1;
 $687 = $xc;
 $688 = $3;
 _process_fx($686,$687,$688,$ev,1);
 $689 = $1;
 $690 = $note;
 $691 = $sub;
 $692 = $xc;
 $693 = $is_toneporta;
 _set_period($689,$690,$691,$692,$693);
 $694 = $sub;
 $695 = ($694|0)==(0|0);
 if ($695) {
  $0 = 0;
  $744 = $0;
  STACKTOP = sp;return ($744|0);
 }
 $696 = $note;
 $697 = ($696|0)>=(0);
 if ($697) {
  $698 = $note;
  $699 = $xc;
  $700 = ((($699)) + 12|0);
  HEAP32[$700>>2] = $698;
  $701 = $1;
  $702 = $3;
  $703 = $xc;
  $704 = ((($703)) + 216|0);
  $705 = HEAP32[$704>>2]|0;
  _virt_voicepos($701,$702,$705);
 }
 $706 = $use_ins_vol;
 $707 = ($706|0)!=(0);
 do {
  if ($707) {
   $708 = $xc;
   $709 = HEAP32[$708>>2]|0;
   $710 = $709 & 4096;
   $711 = ($710|0)!=(0);
   if ($711) {
    break;
   }
   $712 = $sub;
   $713 = ((($712)) + 36|0);
   $714 = HEAP32[$713>>2]|0;
   $715 = $714 & 255;
   $vol_swing = $715;
   $716 = $vol_swing;
   $717 = ($716|0)<(0);
   do {
    if ($717) {
     $vol_swing = 0;
    } else {
     $718 = $vol_swing;
     $719 = ($718|0)>(100);
     if (!($719)) {
      break;
     }
     $vol_swing = 100;
    }
   } while(0);
   $720 = $sub;
   $721 = HEAP32[$720>>2]|0;
   $722 = $xc;
   $723 = ((($722)) + 84|0);
   HEAP32[$723>>2] = $721;
   $724 = $vol_swing;
   $725 = ($724|0)!=(0);
   if (!($725)) {
    break;
   }
   $726 = $xc;
   $727 = ((($726)) + 84|0);
   $728 = HEAP32[$727>>2]|0;
   $729 = $vol_swing;
   $730 = (100 - ($729))|0;
   $731 = Math_imul($728, $730)|0;
   $732 = (_rand()|0);
   $733 = $xc;
   $734 = ((($733)) + 84|0);
   $735 = HEAP32[$734>>2]|0;
   $736 = (($735) + 1)|0;
   $737 = (($732|0) % ($736|0))&-1;
   $738 = $vol_swing;
   $739 = Math_imul($737, $738)|0;
   $740 = (($731) + ($739))|0;
   $741 = (($740|0) / 100)&-1;
   $742 = $xc;
   $743 = ((($742)) + 84|0);
   HEAP32[$743>>2] = $741;
  }
 } while(0);
 $0 = 0;
 $744 = $0;
 STACKTOP = sp;return ($744|0);
}
function _read_event_med($ctx,$e,$chn) {
 $ctx = $ctx|0;
 $e = $e|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $finetune = 0, $ins = 0;
 var $is_toneporta = 0, $m = 0, $mod = 0, $new_invalid_ins = 0, $note = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $smp = 0, $sub = 0, $transp = 0, $use_ins_vol = 0, $xc = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $e;
 $3 = $chn;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $3;
 $9 = $p;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $xc = $12;
 $new_invalid_ins = 0;
 $13 = $xc;
 HEAP32[$13>>2] = 0;
 $note = -1;
 $is_toneporta = 0;
 $use_ins_vol = 0;
 $14 = $2;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(3);
 if ($18) {
  label = 3;
 } else {
  $19 = $2;
  $20 = ((($19)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)==(5);
  if ($23) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $is_toneporta = 1;
 }
 $24 = $2;
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $2;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $2;
   $34 = ((($33)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (($36) - 1)|0;
   $ins = $37;
   $use_ins_vol = 1;
   $38 = $xc;
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 | 2048;
   HEAP32[$38>>2] = $40;
   $41 = $xc;
   $42 = ((($41)) + 68|0);
   HEAP32[$42>>2] = 65536;
   $43 = $xc;
   $44 = ((($43)) + 216|0);
   HEAP32[$44>>2] = 0;
   $45 = $xc;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & -4;
   HEAP32[$46>>2] = $48;
   $49 = $ins;
   $50 = $mod;
   $51 = ((($50)) + 140|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49>>>0)<($52>>>0);
   do {
    if ($53) {
     $54 = $ins;
     $55 = $mod;
     $56 = ((($55)) + 176|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + (($54*764)|0)|0);
     $59 = ((($58)) + 36|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)>(0);
     if ($61) {
      $62 = $is_toneporta;
      $63 = ($62|0)!=(0);
      if (!($63)) {
       $77 = $ins;
       $78 = $xc;
       $79 = ((($78)) + 44|0);
       HEAP32[$79>>2] = $77;
       $80 = $ins;
       $81 = $mod;
       $82 = ((($81)) + 176|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($83) + (($80*764)|0)|0);
       $85 = ((($84)) + 40|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $xc;
       $88 = ((($87)) + 72|0);
       HEAP32[$88>>2] = $86;
       break;
      }
      $64 = $1;
      $65 = $ins;
      $66 = $2;
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $69 = (($68) - 1)|0;
      $70 = (_get_subinstrument($64,$65,$69)|0);
      $sub = $70;
      $71 = $sub;
      $72 = ($71|0)!=(0|0);
      if ($72) {
       $73 = $sub;
       $74 = HEAP32[$73>>2]|0;
       $75 = $xc;
       $76 = ((($75)) + 84|0);
       HEAP32[$76>>2] = $74;
       $use_ins_vol = 0;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
   } while(0);
   if ((label|0) == 12) {
    $new_invalid_ins = 1;
    $89 = $1;
    $90 = $3;
    _virt_resetchannel($89,$90);
   }
   $91 = $xc;
   $92 = ((($91)) + 432|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 48|0);
   HEAP32[$94>>2] = 0;
   $95 = $xc;
   $96 = ((($95)) + 432|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ((($97)) + 52|0);
   HEAP32[$98>>2] = 0;
  } else {
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $99 = $2;
  $100 = ((($99)) + 1|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = $2;
   $105 = HEAP8[$104>>0]|0;
   $106 = ($105<<24>>24)!=(0);
   if (!($106)) {
    $use_ins_vol = 1;
   }
  }
 }
 $107 = $2;
 $108 = HEAP8[$107>>0]|0;
 $109 = ($108<<24>>24)!=(0);
 do {
  if ($109) {
   $110 = $xc;
   $111 = HEAP32[$110>>2]|0;
   $112 = $111 | 65536;
   HEAP32[$110>>2] = $112;
   $113 = $2;
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = ($115|0)==(129);
   if ($116) {
    $117 = $xc;
    $118 = ((($117)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $119 | 2;
    HEAP32[$118>>2] = $120;
    $use_ins_vol = 0;
    break;
   }
   $121 = $2;
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = ($123|0)==(130);
   if ($124) {
    $125 = $xc;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $127 | 4;
    HEAP32[$126>>2] = $128;
    $129 = $xc;
    $130 = ((($129)) + 24|0);
    HEAPF64[$130>>3] = 0.0;
    $131 = $1;
    $132 = $3;
    _virt_resetchannel($131,$132);
    break;
   }
   $133 = $is_toneporta;
   $134 = ($133|0)!=(0);
   if (!($134)) {
    $135 = $xc;
    $136 = ((($135)) + 44|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $mod;
    $139 = ((($138)) + 140|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($137>>>0)<($140>>>0);
    if ($141) {
     $142 = $xc;
     $143 = ((($142)) + 44|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $mod;
     $146 = ((($145)) + 176|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($147) + (($144*764)|0)|0);
     $149 = ((($148)) + 36|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)>(0);
     if ($151) {
      $152 = $xc;
      $153 = ((($152)) + 44|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $mod;
      $156 = ((($155)) + 176|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (($157) + (($154*764)|0)|0);
      $xxi = $158;
      $159 = $2;
      $160 = HEAP8[$159>>0]|0;
      $161 = $160&255;
      $162 = (($161) - 1)|0;
      $163 = $xc;
      $164 = ((($163)) + 16|0);
      HEAP32[$164>>2] = $162;
      $165 = $xc;
      $166 = ((($165)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $167 & -5;
      HEAP32[$166>>2] = $168;
      $169 = $xc;
      $170 = ((($169)) + 32|0);
      HEAPF64[$170>>3] = 0.0;
      $171 = $xxi;
      $172 = ((($171)) + 36|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)>(1);
      if ($174) {
       $175 = $xxi;
       $176 = ((($175)) + 760|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)!=(0|0);
       if ($178) {
        $179 = $xxi;
        $180 = ((($179)) + 760|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = HEAP32[$181>>2]|0;
        $183 = ($182|0)==(133303461);
        if ($183) {
         $184 = $xxi;
         $185 = ((($184)) + 760|0);
         $186 = HEAP32[$185>>2]|0;
         $187 = ((($186)) + 4|0);
         $188 = HEAP32[$187>>2]|0;
         $189 = ($188|0)==(0);
         if ($189) {
          $190 = $xxi;
          $191 = ((($190)) + 760|0);
          $192 = HEAP32[$191>>2]|0;
          $193 = ((($192)) + 8|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($194|0)==(0);
          if ($195) {
           $196 = $xc;
           $197 = ((($196)) + 32|0);
           HEAPF64[$197>>3] = 2.0;
          }
         }
        }
       }
      }
      $198 = $1;
      $199 = $xc;
      $200 = ((($199)) + 44|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = $xc;
      $203 = ((($202)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = (_get_subinstrument($198,$201,$204)|0);
      $sub = $205;
      $206 = $new_invalid_ins;
      $207 = ($206|0)==(0);
      $208 = $sub;
      $209 = ($208|0)!=(0|0);
      $or$cond = $207 & $209;
      $210 = $xc;
      if (!($or$cond)) {
       HEAP32[$210>>2] = 0;
       $use_ins_vol = 0;
       break;
      }
      $211 = ((($210)) + 16|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $xxi;
      $214 = ((($213)) + 512|0);
      $215 = (($214) + ($212<<1)|0);
      $216 = ((($215)) + 1|0);
      $217 = HEAP8[$216>>0]|0;
      $218 = $217 << 24 >> 24;
      $transp = $218;
      $219 = $xc;
      $220 = ((($219)) + 16|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = $sub;
      $223 = ((($222)) + 12|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = (($221) + ($224))|0;
      $226 = $transp;
      $227 = (($225) + ($226))|0;
      $note = $227;
      $228 = $sub;
      $229 = ((($228)) + 40|0);
      $230 = HEAP32[$229>>2]|0;
      $smp = $230;
      $231 = $smp;
      $232 = $mod;
      $233 = ((($232)) + 180|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = (($234) + (($231*52)|0)|0);
      $236 = ((($235)) + 32|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = ($237|0)==(0);
      if ($238) {
       $smp = -1;
      }
      $239 = $smp;
      $240 = ($239|0)>=(0);
      if ($240) {
       $241 = $smp;
       $242 = $mod;
       $243 = ((($242)) + 144|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = ($241|0)<($244|0);
       if ($245) {
        $246 = $1;
        $247 = $3;
        $248 = $xc;
        $249 = ((($248)) + 44|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = $smp;
        $252 = $note;
        (_virt_setpatch($246,$247,$250,$251,$252,0,0,0)|0);
        $253 = $smp;
        $254 = $xc;
        $255 = ((($254)) + 52|0);
        HEAP32[$255>>2] = $253;
       }
      }
     }
    }
   }
  }
 } while(0);
 $256 = $1;
 $257 = $xc;
 $258 = ((($257)) + 44|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = $xc;
 $261 = ((($260)) + 16|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = (_get_subinstrument($256,$259,$262)|0);
 $sub = $263;
 $264 = $xc;
 $265 = ((($264)) + 40|0);
 $266 = HEAP32[$265>>2]|0;
 $finetune = $266;
 $267 = $1;
 $268 = $note;
 $269 = $sub;
 $270 = $xc;
 $271 = $is_toneporta;
 _set_effect_defaults($267,$268,$269,$270,$271);
 $272 = $2;
 $273 = ((($272)) + 1|0);
 $274 = HEAP8[$273>>0]|0;
 $275 = ($274<<24>>24)!=(0);
 if (!($275)) {
  $276 = $finetune;
  $277 = $xc;
  $278 = ((($277)) + 40|0);
  HEAP32[$278>>2] = $276;
 }
 $279 = $2;
 $280 = ((($279)) + 1|0);
 $281 = HEAP8[$280>>0]|0;
 $282 = $281&255;
 $283 = ($282|0)!=(0);
 $284 = $sub;
 $285 = ($284|0)!=(0|0);
 $or$cond3 = $283 & $285;
 if ($or$cond3) {
  $286 = $1;
  $287 = $xc;
  _reset_envelopes($286,$287);
 }
 $288 = $2;
 $289 = ((($288)) + 2|0);
 $290 = HEAP8[$289>>0]|0;
 $291 = ($290<<24>>24)!=(0);
 if ($291) {
  $292 = $2;
  $293 = ((($292)) + 2|0);
  $294 = HEAP8[$293>>0]|0;
  $295 = $294&255;
  $296 = (($295) - 1)|0;
  $297 = $xc;
  $298 = ((($297)) + 84|0);
  HEAP32[$298>>2] = $296;
  $299 = $xc;
  $300 = HEAP32[$299>>2]|0;
  $301 = $300 | 4096;
  HEAP32[$299>>2] = $301;
 }
 $302 = $1;
 $303 = $xc;
 $304 = $3;
 $305 = $2;
 _process_fx($302,$303,$304,$305,1);
 $306 = $1;
 $307 = $xc;
 $308 = $3;
 $309 = $2;
 _process_fx($306,$307,$308,$309,0);
 $310 = $1;
 $311 = $note;
 $312 = $sub;
 $313 = $xc;
 $314 = $is_toneporta;
 _set_period($310,$311,$312,$313,$314);
 $315 = $sub;
 $316 = ($315|0)==(0|0);
 if ($316) {
  $0 = 0;
  $337 = $0;
  STACKTOP = sp;return ($337|0);
 }
 $317 = $note;
 $318 = ($317|0)>=(0);
 if ($318) {
  $319 = $note;
  $320 = $xc;
  $321 = ((($320)) + 12|0);
  HEAP32[$321>>2] = $319;
  $322 = $1;
  $323 = $3;
  $324 = $xc;
  $325 = ((($324)) + 216|0);
  $326 = HEAP32[$325>>2]|0;
  _virt_voicepos($322,$323,$326);
 }
 $327 = $use_ins_vol;
 $328 = ($327|0)!=(0);
 if ($328) {
  $329 = $xc;
  $330 = HEAP32[$329>>2]|0;
  $331 = $330 & 4096;
  $332 = ($331|0)!=(0);
  if (!($332)) {
   $333 = $sub;
   $334 = HEAP32[$333>>2]|0;
   $335 = $xc;
   $336 = ((($335)) + 84|0);
   HEAP32[$336>>2] = $334;
  }
 }
 $0 = 0;
 $337 = $0;
 STACKTOP = sp;return ($337|0);
}
function _get_subinstrument($ctx,$ins,$key) {
 $ctx = $ctx|0;
 $ins = $ins|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $instrument = 0, $m = 0, $mapped = 0, $mod = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $ins;
 $3 = $key;
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $2;
 $8 = $mod;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 if ($11) {
  $12 = $2;
  $13 = $mod;
  $14 = ((($13)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*764)|0)|0);
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)>(0);
  if ($19) {
   $20 = $2;
   $21 = $mod;
   $22 = ((($21)) + 176|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + (($20*764)|0)|0);
   $instrument = $24;
   $25 = $3;
   $26 = (_is_valid_note($25)|0);
   $27 = ($26|0)!=(0);
   if ($27) {
    $28 = $3;
    $29 = $instrument;
    $30 = ((($29)) + 512|0);
    $31 = (($30) + ($28<<1)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $mapped = $33;
    $34 = $mapped;
    $35 = ($34|0)!=(255);
    $36 = $mapped;
    $37 = ($36|0)>=(0);
    $or$cond = $35 & $37;
    if ($or$cond) {
     $38 = $mapped;
     $39 = $instrument;
     $40 = ((($39)) + 36|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($38|0)<($41|0);
     if ($42) {
      $43 = $mapped;
      $44 = $instrument;
      $45 = ((($44)) + 756|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + ($43<<6)|0);
      $0 = $47;
      $48 = $0;
      STACKTOP = sp;return ($48|0);
     }
    }
   }
  }
 }
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _set_effect_defaults($ctx,$note,$sub,$xc,$is_toneporta) {
 $ctx = $ctx|0;
 $note = $note|0;
 $sub = $sub|0;
 $xc = $xc|0;
 $is_toneporta = $is_toneporta|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m = 0;
 var $mod = 0, $or$cond = 0, $smix = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $note;
 $2 = $sub;
 $3 = $xc;
 $4 = $is_toneporta;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $8 = $0;
 $9 = ((($8)) + 9152|0);
 $smix = $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 $12 = $1;
 $13 = ($12|0)>=(0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  $107 = $3;
  $108 = ((($107)) + 60|0);
  HEAP32[$108>>2] = 0;
  $109 = $3;
  $110 = ((($109)) + 240|0);
  HEAP32[$110>>2] = 0;
  $111 = $3;
  $112 = ((($111)) + 168|0);
  HEAP8[$112>>0] = 0;
  $113 = $3;
  $114 = ((($113)) + 168|0);
  $115 = ((($114)) + 20|0);
  HEAP32[$115>>2] = 0;
  $116 = $3;
  $117 = ((($116)) + 168|0);
  $118 = ((($117)) + 16|0);
  HEAP32[$118>>2] = 1;
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $mod;
 $18 = ((($17)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)>=($19|0);
 $21 = $3;
 $22 = ((($21)) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $mod;
 if ($20) {
  $25 = ((($24)) + 140|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) - ($26))|0;
  $28 = $smix;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + (($27*764)|0)|0);
  $xxi = $31;
 } else {
  $32 = ((($24)) + 176|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($23*764)|0)|0);
  $xxi = $34;
 }
 $35 = $2;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = ((($38)) + 40|0);
 HEAP32[$39>>2] = $37;
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $3;
 $44 = ((($43)) + 88|0);
 HEAP32[$44>>2] = $42;
 $45 = $2;
 $46 = ((($45)) + 56|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 128;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $2;
  $51 = ((($50)) + 56|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) - 128)|0;
  $54 = $53<<1;
  $55 = $3;
  $56 = ((($55)) + 404|0);
  HEAP32[$56>>2] = $54;
 } else {
  $57 = $xxi;
  $58 = ((($57)) + 356|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 ^ -1;
  $61 = $60 & 8;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = $3;
   $64 = ((($63)) + 404|0);
   HEAP32[$64>>2] = 255;
  }
 }
 $65 = $3;
 $66 = ((($65)) + 404|0);
 $67 = ((($66)) + 8|0);
 HEAP32[$67>>2] = 256;
 $68 = $2;
 $69 = ((($68)) + 60|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 & 128;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $2;
  $74 = ((($73)) + 60|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) - 128)|0;
  $77 = $76<<1;
  $78 = $3;
  $79 = ((($78)) + 404|0);
  $80 = ((($79)) + 4|0);
  HEAP32[$80>>2] = $77;
 }
 $81 = $3;
 $82 = ((($81)) + 196|0);
 $83 = $2;
 $84 = ((($83)) + 24|0);
 $85 = HEAP32[$84>>2]|0;
 _set_lfo_depth($82,$85);
 $86 = $3;
 $87 = ((($86)) + 196|0);
 $88 = $2;
 $89 = ((($88)) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 >> 2;
 _set_lfo_rate($87,$91);
 $92 = $3;
 $93 = ((($92)) + 196|0);
 $94 = $2;
 $95 = ((($94)) + 20|0);
 $96 = HEAP32[$95>>2]|0;
 _set_lfo_waveform($93,$96);
 $97 = $2;
 $98 = ((($97)) + 32|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $3;
 $101 = ((($100)) + 196|0);
 $102 = ((($101)) + 16|0);
 HEAP32[$102>>2] = $99;
 $103 = $3;
 $104 = ((($103)) + 108|0);
 _set_lfo_phase($104,0);
 $105 = $3;
 $106 = ((($105)) + 128|0);
 _set_lfo_phase($106,0);
 $107 = $3;
 $108 = ((($107)) + 60|0);
 HEAP32[$108>>2] = 0;
 $109 = $3;
 $110 = ((($109)) + 240|0);
 HEAP32[$110>>2] = 0;
 $111 = $3;
 $112 = ((($111)) + 168|0);
 HEAP8[$112>>0] = 0;
 $113 = $3;
 $114 = ((($113)) + 168|0);
 $115 = ((($114)) + 20|0);
 HEAP32[$115>>2] = 0;
 $116 = $3;
 $117 = ((($116)) + 168|0);
 $118 = ((($117)) + 16|0);
 HEAP32[$118>>2] = 1;
 STACKTOP = sp;return;
}
function _reset_envelopes($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $1;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $mod;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $mod;
 $16 = ((($15)) + 176|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($14*764)|0)|0);
 $19 = ((($18)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & -17;
 HEAP32[$23>>2] = $25;
 $26 = $1;
 $27 = ((($26)) + 92|0);
 HEAP32[$27>>2] = -1;
 $28 = $1;
 $29 = ((($28)) + 96|0);
 HEAP32[$29>>2] = -1;
 $30 = $1;
 $31 = ((($30)) + 100|0);
 HEAP32[$31>>2] = -1;
 STACKTOP = sp;return;
}
function _set_period($ctx,$note,$sub,$xc,$is_toneporta) {
 $ctx = $ctx|0;
 $note = $note|0;
 $sub = $sub|0;
 $xc = $xc|0;
 $is_toneporta = $is_toneporta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $note;
 $2 = $sub;
 $3 = $xc;
 $4 = $is_toneporta;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 $9 = $1;
 $10 = ($9|0)>=(0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $11 = $1;
 $12 = $3;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $m;
 $16 = ((($15)) + 1284|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4096;
 $19 = $3;
 $20 = ((($19)) + 32|0);
 $21 = +HEAPF64[$20>>3];
 $22 = (+_note_to_period($11,$14,$18,$21));
 $23 = $3;
 $24 = ((($23)) + 336|0);
 HEAPF64[$24>>3] = $22;
 $25 = $3;
 $26 = ((($25)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = !($27 < 1.0);
 $29 = $4;
 $30 = ($29|0)!=(0);
 $or$cond3 = $28 & $30;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $31 = $3;
 $32 = ((($31)) + 336|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $3;
 $35 = ((($34)) + 24|0);
 HEAPF64[$35>>3] = $33;
 STACKTOP = sp;return;
}
function _is_valid_note($note) {
 $note = $note|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $note;
 $1 = $0;
 $2 = ($1|0)>=(0);
 $3 = $0;
 $4 = ($3|0)<(121);
 $5 = $2 ? $4 : 0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _has_note_event($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)<=(121);
  $10 = $8;
 } else {
  $10 = 0;
 }
 $9 = $10&1;
 STACKTOP = sp;return ($9|0);
}
function _check_invalid_sample($ctx,$ins,$key) {
 $ctx = $ctx|0;
 $ins = $ins|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, $smp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $ins;
 $3 = $key;
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $2;
 $8 = $mod;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)<($10|0);
 do {
  if ($11) {
   $12 = $3;
   $13 = $2;
   $14 = $mod;
   $15 = ((($14)) + 176|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + (($13*764)|0)|0);
   $18 = ((($17)) + 512|0);
   $19 = (($18) + ($12<<1)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $smp = $21;
   $22 = $smp;
   $23 = ($22|0)==(255);
   if (!($23)) {
    $24 = $smp;
    $25 = $mod;
    $26 = ((($25)) + 144|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($24|0)>=($27|0);
    if (!($28)) {
     break;
    }
   }
   $0 = 1;
   $29 = $0;
   STACKTOP = sp;return ($29|0);
  }
 } while(0);
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _reset_envelopes_carry($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $1;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $mod;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $mod;
 $16 = ((($15)) + 176|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($14*764)|0)|0);
 $19 = ((($18)) + 36|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & -17;
 HEAP32[$23>>2] = $25;
 $26 = $0;
 $27 = $1;
 $28 = ((($27)) + 44|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (_get_instrument($26,$29)|0);
 $xxi = $30;
 $31 = $xxi;
 $32 = ((($31)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 ^ -1;
 $35 = $34 & 32;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $1;
  $38 = ((($37)) + 92|0);
  HEAP32[$38>>2] = -1;
 }
 $39 = $xxi;
 $40 = ((($39)) + 200|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 ^ -1;
 $43 = $42 & 32;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $1;
  $46 = ((($45)) + 96|0);
  HEAP32[$46>>2] = -1;
 }
 $47 = $xxi;
 $48 = ((($47)) + 356|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 ^ -1;
 $51 = $50 & 32;
 $52 = ($51|0)!=(0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $1;
 $54 = ((($53)) + 100|0);
 HEAP32[$54>>2] = -1;
 STACKTOP = sp;return;
}
function _is_same_sid($ctx,$chn,$ins,$key) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $ins = $ins|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p = 0, $s1 = 0, $s2 = 0, $xc = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $ins;
 $3 = $key;
 $4 = $0;
 $p = $4;
 $5 = $1;
 $6 = $p;
 $7 = ((($6)) + 620|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*472)|0)|0);
 $xc = $9;
 $10 = $0;
 $11 = $2;
 $12 = $3;
 $13 = (_get_subinstrument($10,$11,$12)|0);
 $s1 = $13;
 $14 = $0;
 $15 = $xc;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $xc;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_get_subinstrument($14,$17,$20)|0);
 $s2 = $21;
 $22 = $s1;
 $23 = ($22|0)!=(0|0);
 $24 = $s2;
 $25 = ($24|0)!=(0|0);
 $or$cond = $23 & $25;
 if (!($or$cond)) {
  $34 = 0;
  $33 = $34&1;
  STACKTOP = sp;return ($33|0);
 }
 $26 = $s1;
 $27 = ((($26)) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $s2;
 $30 = ((($29)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)==($31|0);
 $34 = $32;
 $33 = $34&1;
 STACKTOP = sp;return ($33|0);
}
function _sustain_check($env,$idx) {
 $env = $env|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $env;
 $1 = $idx;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1;
  $7 = ($6|0)!=(0);
  if ($7) {
   $8 = $0;
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 ^ -1;
   $11 = $10 & 4;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = $1;
    $14 = $0;
    $15 = ((($14)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 << 1;
    $18 = $0;
    $19 = ((($18)) + 28|0);
    $20 = (($19) + ($17<<1)|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 << 16 >> 16;
    $23 = ($13|0)==($22|0);
    $25 = $23;
   } else {
    $25 = 0;
   }
  } else {
   $25 = 0;
  }
 } else {
  $25 = 0;
 }
 $24 = $25&1;
 STACKTOP = sp;return ($24|0);
}
function _fix_period($ctx,$chn,$sub) {
 $ctx = $ctx|0;
 $chn = $chn|0;
 $sub = $sub|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $p = 0, $xc = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $chn;
 $2 = $sub;
 $3 = $2;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $p = $7;
 $8 = $0;
 $9 = ((($8)) + 1552|0);
 $m = $9;
 $10 = $1;
 $11 = $p;
 $12 = ((($11)) + 620|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*472)|0)|0);
 $xc = $14;
 $15 = $0;
 $16 = $xc;
 $17 = ((($16)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_get_instrument($15,$18)|0);
 $xxi = $19;
 $20 = $xc;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + ($25))|0;
 $27 = $xc;
 $28 = ((($27)) + 104|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $xxi;
 $31 = ((($30)) + 512|0);
 $32 = (($31) + ($29<<1)|0);
 $33 = ((($32)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = (($26) + ($35))|0;
 $37 = $xc;
 $38 = ((($37)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $m;
 $41 = ((($40)) + 1284|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 4096;
 $44 = $xc;
 $45 = ((($44)) + 32|0);
 $46 = +HEAPF64[$45>>3];
 $47 = (+_note_to_period($36,$39,$43,$46));
 $48 = $xc;
 $49 = ((($48)) + 24|0);
 HEAPF64[$49>>3] = $47;
 STACKTOP = sp;return;
}
function _copy_channel($p,$to,$from) {
 $p = $p|0;
 $to = $to|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $to;
 $2 = $from;
 $3 = $1;
 $4 = ($3|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $2;
 $7 = ($5|0)!=($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 620|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($8*472)|0)|0);
 $13 = $2;
 $14 = $0;
 $15 = ((($14)) + 620|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + (($13*472)|0)|0);
 _memcpy(($12|0),($17|0),472)|0;
 STACKTOP = sp;return;
}
function _check_fadeout($ctx,$xc,$ins) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $ins = $ins|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $xc;
 $3 = $ins;
 $4 = $1;
 $5 = $3;
 $6 = (_get_instrument($4,$5)|0);
 $xxi = $6;
 $7 = $xxi;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = 1;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $9 = $xxi;
 $10 = ((($9)) + 44|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 ^ -1;
 $13 = $12 & 1;
 $14 = ($13|0)!=(0);
 if ($14) {
  $33 = 1;
 } else {
  $15 = $xxi;
  $16 = ((($15)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 ^ -1;
  $19 = $18 & 32;
  $20 = ($19|0)!=(0);
  if ($20) {
   $33 = 1;
  } else {
   $21 = $2;
   $22 = ((($21)) + 72|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $33 = 1;
   } else {
    $25 = $2;
    $26 = ((($25)) + 68|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $2;
    $29 = ((($28)) + 72|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($27|0)<=($30|0);
    $33 = $31;
   }
  }
 }
 $32 = $33&1;
 $0 = $32;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _set_period_ft2($ctx,$note,$sub,$xc,$is_toneporta) {
 $ctx = $ctx|0;
 $note = $note|0;
 $sub = $sub|0;
 $xc = $xc|0;
 $is_toneporta = $is_toneporta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $note;
 $2 = $sub;
 $3 = $xc;
 $4 = $is_toneporta;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $1;
 $8 = ($7|0)>(0);
 $9 = $4;
 $10 = ($9|0)!=(0);
 $or$cond = $8 & $10;
 if ($or$cond) {
  label = 3;
 } else {
  $11 = $3;
  $12 = ((($11)) + 336|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13 == 0.0;
  if ($14) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $15 = $1;
  $16 = $3;
  $17 = ((($16)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $m;
  $20 = ((($19)) + 1284|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 4096;
  $23 = $3;
  $24 = ((($23)) + 32|0);
  $25 = +HEAPF64[$24>>3];
  $26 = (+_note_to_period($15,$18,$22,$25));
  $27 = $3;
  $28 = ((($27)) + 336|0);
  HEAPF64[$28>>3] = $26;
 }
 $29 = $2;
 $30 = ($29|0)!=(0|0);
 $31 = $1;
 $32 = ($31|0)>=(0);
 $or$cond3 = $30 & $32;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $33 = $3;
 $34 = ((($33)) + 24|0);
 $35 = +HEAPF64[$34>>3];
 $36 = !($35 < 1.0);
 $37 = $4;
 $38 = ($37|0)!=(0);
 $or$cond5 = $36 & $38;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $39 = $1;
 $40 = $3;
 $41 = ((($40)) + 40|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $m;
 $44 = ((($43)) + 1284|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 & 4096;
 $47 = $3;
 $48 = ((($47)) + 32|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (+_note_to_period($39,$42,$46,$49));
 $51 = $3;
 $52 = ((($51)) + 24|0);
 HEAPF64[$52>>3] = $50;
 STACKTOP = sp;return;
}
function _read8($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_fgetc(($1|0))|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _read8s($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_fgetc(($1|0))|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _read16l($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $b;
 $8 = $7 << 8;
 $9 = $a;
 $10 = $8 | $9;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _read16b($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $a;
 $8 = $7 << 8;
 $9 = $b;
 $10 = $8 | $9;
 $11 = $10&65535;
 STACKTOP = sp;return ($11|0);
}
function _read24l($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $c;
 $11 = $10 << 16;
 $12 = $b;
 $13 = $12 << 8;
 $14 = $11 | $13;
 $15 = $a;
 $16 = $14 | $15;
 STACKTOP = sp;return ($16|0);
}
function _read24b($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $a;
 $11 = $10 << 16;
 $12 = $b;
 $13 = $12 << 8;
 $14 = $11 | $13;
 $15 = $c;
 $16 = $14 | $15;
 STACKTOP = sp;return ($16|0);
}
function _read32l($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $0;
 $11 = (_read8($10)|0);
 $12 = $11&255;
 $d = $12;
 $13 = $d;
 $14 = $13 << 24;
 $15 = $c;
 $16 = $15 << 16;
 $17 = $14 | $16;
 $18 = $b;
 $19 = $18 << 8;
 $20 = $17 | $19;
 $21 = $a;
 $22 = $20 | $21;
 STACKTOP = sp;return ($22|0);
}
function _read32b($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $0;
 $2 = (_read8($1)|0);
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = (_read8($4)|0);
 $6 = $5&255;
 $b = $6;
 $7 = $0;
 $8 = (_read8($7)|0);
 $9 = $8&255;
 $c = $9;
 $10 = $0;
 $11 = (_read8($10)|0);
 $12 = $11&255;
 $d = $12;
 $13 = $a;
 $14 = $13 << 24;
 $15 = $b;
 $16 = $15 << 16;
 $17 = $14 | $16;
 $18 = $c;
 $19 = $18 << 8;
 $20 = $17 | $19;
 $21 = $d;
 $22 = $20 | $21;
 STACKTOP = sp;return ($22|0);
}
function _readmem16l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $b;
 $9 = $8 << 8;
 $10 = $a;
 $11 = $9 | $10;
 $12 = $11&65535;
 STACKTOP = sp;return ($12|0);
}
function _readmem16b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $a;
 $9 = $8 << 8;
 $10 = $b;
 $11 = $9 | $10;
 $12 = $11&65535;
 STACKTOP = sp;return ($12|0);
}
function _readmem24l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $c;
 $13 = $12 << 16;
 $14 = $b;
 $15 = $14 << 8;
 $16 = $13 | $15;
 $17 = $a;
 $18 = $16 | $17;
 STACKTOP = sp;return ($18|0);
}
function _readmem24b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $a;
 $13 = $12 << 16;
 $14 = $b;
 $15 = $14 << 8;
 $16 = $13 | $15;
 $17 = $c;
 $18 = $16 | $17;
 STACKTOP = sp;return ($18|0);
}
function _readmem32l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $0;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $d = $15;
 $16 = $d;
 $17 = $16 << 24;
 $18 = $c;
 $19 = $18 << 16;
 $20 = $17 | $19;
 $21 = $b;
 $22 = $21 << 8;
 $23 = $20 | $22;
 $24 = $a;
 $25 = $23 | $24;
 STACKTOP = sp;return ($25|0);
}
function _readmem32b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $a = $3;
 $4 = $0;
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $0;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $d = $15;
 $16 = $a;
 $17 = $16 << 24;
 $18 = $b;
 $19 = $18 << 16;
 $20 = $17 | $19;
 $21 = $c;
 $22 = $21 << 8;
 $23 = $20 | $22;
 $24 = $d;
 $25 = $23 | $24;
 STACKTOP = sp;return ($25|0);
}
function _write8($f,$b) {
 $f = $f|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $b;
 $2 = $1;
 $3 = $2&255;
 $4 = $0;
 (_fputc(($3|0),($4|0))|0);
 STACKTOP = sp;return;
}
function _write16b($f,$w) {
 $f = $f|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $w;
 $2 = $0;
 $3 = $1;
 $4 = $3&65535;
 $5 = $4 & 65280;
 $6 = $5 >> 8;
 $7 = $6&255;
 _write8($2,$7);
 $8 = $0;
 $9 = $1;
 $10 = $9&65535;
 $11 = $10 & 255;
 $12 = $11&255;
 _write8($8,$12);
 STACKTOP = sp;return;
}
function _write32b($f,$w) {
 $f = $f|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $w;
 $2 = $0;
 $3 = $1;
 $4 = $3 & -16777216;
 $5 = $4 >>> 24;
 $6 = $5&255;
 _write8($2,$6);
 $7 = $0;
 $8 = $1;
 $9 = $8 & 16711680;
 $10 = $9 >>> 16;
 $11 = $10&255;
 _write8($7,$11);
 $12 = $0;
 $13 = $1;
 $14 = $13 & 65280;
 $15 = $14 >>> 8;
 $16 = $15&255;
 _write8($12,$16);
 $17 = $0;
 $18 = $1;
 $19 = $18 & 255;
 $20 = $19&255;
 _write8($17,$20);
 STACKTOP = sp;return;
}
function _mkstemp($template) {
 $template = $template|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0, $i = 0, $start = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $template;
 $2 = (_getpid()|0);
 $val = $2;
 $3 = $1;
 $4 = (_strlen(($3|0))|0);
 $5 = (($4) - 1)|0;
 $start = $5;
 while(1) {
  $6 = $start;
  $7 = $1;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(88);
  if (!($11)) {
   break;
  }
  $12 = $val;
  $13 = (($12|0) % 10)&-1;
  $14 = (48 + ($13))|0;
  $15 = $14&255;
  $16 = $start;
  $17 = $1;
  $18 = (($17) + ($16)|0);
  HEAP8[$18>>0] = $15;
  $19 = $val;
  $20 = (($19|0) / 10)&-1;
  $val = $20;
  $21 = $start;
  $22 = (($21) + -1)|0;
  $start = $22;
 }
 L4: while(1) {
  $23 = $1;
  HEAP32[$vararg_buffer>>2] = 384;
  $24 = (_open(($23|0),194,($vararg_buffer|0))|0);
  $fd = $24;
  $25 = $fd;
  $26 = ($25|0)>=(0);
  if ($26) {
   label = 6;
   break;
  }
  $27 = (___errno_location()|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(17);
  if ($29) {
   label = 6;
   break;
  }
  $31 = $start;
  $32 = (($31) + 1)|0;
  $i = $32;
  while(1) {
   $33 = $i;
   $34 = $1;
   $35 = (($34) + ($33)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 << 24 >> 24;
   $38 = ($37|0)==(0);
   if ($38) {
    label = 9;
    break L4;
   }
   $39 = $i;
   $40 = $1;
   $41 = (($40) + ($39)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = (($42) + 1)<<24>>24;
   HEAP8[$41>>0] = $43;
   $44 = $i;
   $45 = $1;
   $46 = (($45) + ($44)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47 << 24 >> 24;
   $49 = ($48|0)==(58);
   if ($49) {
    $50 = $i;
    $51 = $1;
    $52 = (($51) + ($50)|0);
    HEAP8[$52>>0] = 97;
   }
   $53 = $i;
   $54 = $1;
   $55 = (($54) + ($53)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = ($57|0)<=(122);
   if ($58) {
    continue L4;
   }
   $59 = $i;
   $60 = $1;
   $61 = (($60) + ($59)|0);
   HEAP8[$61>>0] = 97;
   $62 = $i;
   $63 = (($62) + 1)|0;
   $i = $63;
  }
 }
 if ((label|0) == 6) {
  $30 = $fd;
  $0 = $30;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 9) {
  $0 = -1;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _MD5Init($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $0;
 HEAP32[$7>>2] = 1732584193;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = -271733879;
 $10 = $0;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = -1732584194;
 $12 = $0;
 $13 = ((($12)) + 12|0);
 HEAP32[$13>>2] = 271733878;
 STACKTOP = sp;return;
}
function _MD5Update($ctx,$input,$len) {
 $ctx = $ctx|0;
 $input = $input|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $have = 0, $need = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $input;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_bitshift64Lshr(($7|0),($10|0),3)|0);
 $12 = tempRet0;
 $13 = $11 & 63;
 $have = $13;
 $14 = $have;
 $15 = (64 - ($14))|0;
 $need = $15;
 $16 = $2;
 $17 = (_bitshift64Shl(($16|0),0,3)|0);
 $18 = tempRet0;
 $19 = $0;
 $20 = ((($19)) + 16|0);
 $21 = $20;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (_i64Add(($23|0),($26|0),($17|0),($18|0))|0);
 $28 = tempRet0;
 $29 = $20;
 $30 = $29;
 HEAP32[$30>>2] = $27;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $2;
 $34 = $need;
 $35 = ($33>>>0)>=($34>>>0);
 L1: do {
  if ($35) {
   $36 = $have;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $0;
    $39 = ((($38)) + 24|0);
    $40 = $have;
    $41 = (($39) + ($40)|0);
    $42 = $1;
    $43 = $need;
    _memcpy(($41|0),($42|0),($43|0))|0;
    $44 = $0;
    $45 = $0;
    $46 = ((($45)) + 24|0);
    _MD5Transform($44,$46);
    $47 = $need;
    $48 = $1;
    $49 = (($48) + ($47)|0);
    $1 = $49;
    $50 = $need;
    $51 = $2;
    $52 = (($51) - ($50))|0;
    $2 = $52;
    $have = 0;
   }
   while(1) {
    $53 = $2;
    $54 = ($53>>>0)>=(64);
    if (!($54)) {
     break L1;
    }
    $55 = $0;
    $56 = $1;
    _MD5Transform($55,$56);
    $57 = $1;
    $58 = ((($57)) + 64|0);
    $1 = $58;
    $59 = $2;
    $60 = (($59) - 64)|0;
    $2 = $60;
   }
  }
 } while(0);
 $61 = $2;
 $62 = ($61|0)!=(0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = $0;
 $64 = ((($63)) + 24|0);
 $65 = $have;
 $66 = (($64) + ($65)|0);
 $67 = $1;
 $68 = $2;
 _memcpy(($66|0),($67|0),($68|0))|0;
 STACKTOP = sp;return;
}
function _MD5Final($digest,$ctx) {
 $digest = $digest|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $digest;
 $1 = $ctx;
 $2 = $1;
 _MD5Pad($2);
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 >>> 24;
  $12 = $11&255;
  $13 = $0;
  $14 = $i;
  $15 = $14<<2;
  $16 = (($13) + ($15)|0);
  $17 = ((($16)) + 3|0);
  HEAP8[$17>>0] = $12;
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 16;
  $23 = $22&255;
  $24 = $0;
  $25 = $i;
  $26 = $25<<2;
  $27 = (($24) + ($26)|0);
  $28 = ((($27)) + 2|0);
  HEAP8[$28>>0] = $23;
  $29 = $i;
  $30 = $1;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 >>> 8;
  $34 = $33&255;
  $35 = $0;
  $36 = $i;
  $37 = $36<<2;
  $38 = (($35) + ($37)|0);
  $39 = ((($38)) + 1|0);
  HEAP8[$39>>0] = $34;
  $40 = $i;
  $41 = $1;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43&255;
  $45 = $0;
  $46 = $i;
  $47 = $46<<2;
  $48 = (($45) + ($47)|0);
  HEAP8[$48>>0] = $44;
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 $51 = $1;
 dest=$51; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MD5Transform($state,$block) {
 $state = $state|0;
 $block = $block|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a = 0, $b = 0, $c = 0, $d = 0, $in = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $in = sp;
 $0 = $state;
 $1 = $block;
 $2 = $1;
 dest=$in; src=$2; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $b = $7;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $c = $10;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $d = $13;
 $14 = $d;
 $15 = $b;
 $16 = $c;
 $17 = $d;
 $18 = $16 ^ $17;
 $19 = $15 & $18;
 $20 = $14 ^ $19;
 $21 = HEAP32[$in>>2]|0;
 $22 = (($20) + ($21))|0;
 $23 = (($22) + -680876936)|0;
 $24 = $a;
 $25 = (($24) + ($23))|0;
 $a = $25;
 $26 = $a;
 $27 = $26 << 7;
 $28 = $a;
 $29 = $28 >>> 25;
 $30 = $27 | $29;
 $a = $30;
 $31 = $b;
 $32 = $a;
 $33 = (($32) + ($31))|0;
 $a = $33;
 $34 = $c;
 $35 = $a;
 $36 = $b;
 $37 = $c;
 $38 = $36 ^ $37;
 $39 = $35 & $38;
 $40 = $34 ^ $39;
 $41 = ((($in)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + ($42))|0;
 $44 = (($43) + -389564586)|0;
 $45 = $d;
 $46 = (($45) + ($44))|0;
 $d = $46;
 $47 = $d;
 $48 = $47 << 12;
 $49 = $d;
 $50 = $49 >>> 20;
 $51 = $48 | $50;
 $d = $51;
 $52 = $a;
 $53 = $d;
 $54 = (($53) + ($52))|0;
 $d = $54;
 $55 = $b;
 $56 = $d;
 $57 = $a;
 $58 = $b;
 $59 = $57 ^ $58;
 $60 = $56 & $59;
 $61 = $55 ^ $60;
 $62 = ((($in)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + ($63))|0;
 $65 = (($64) + 606105819)|0;
 $66 = $c;
 $67 = (($66) + ($65))|0;
 $c = $67;
 $68 = $c;
 $69 = $68 << 17;
 $70 = $c;
 $71 = $70 >>> 15;
 $72 = $69 | $71;
 $c = $72;
 $73 = $d;
 $74 = $c;
 $75 = (($74) + ($73))|0;
 $c = $75;
 $76 = $a;
 $77 = $c;
 $78 = $d;
 $79 = $a;
 $80 = $78 ^ $79;
 $81 = $77 & $80;
 $82 = $76 ^ $81;
 $83 = ((($in)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + ($84))|0;
 $86 = (($85) + -1044525330)|0;
 $87 = $b;
 $88 = (($87) + ($86))|0;
 $b = $88;
 $89 = $b;
 $90 = $89 << 22;
 $91 = $b;
 $92 = $91 >>> 10;
 $93 = $90 | $92;
 $b = $93;
 $94 = $c;
 $95 = $b;
 $96 = (($95) + ($94))|0;
 $b = $96;
 $97 = $d;
 $98 = $b;
 $99 = $c;
 $100 = $d;
 $101 = $99 ^ $100;
 $102 = $98 & $101;
 $103 = $97 ^ $102;
 $104 = ((($in)) + 16|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + ($105))|0;
 $107 = (($106) + -176418897)|0;
 $108 = $a;
 $109 = (($108) + ($107))|0;
 $a = $109;
 $110 = $a;
 $111 = $110 << 7;
 $112 = $a;
 $113 = $112 >>> 25;
 $114 = $111 | $113;
 $a = $114;
 $115 = $b;
 $116 = $a;
 $117 = (($116) + ($115))|0;
 $a = $117;
 $118 = $c;
 $119 = $a;
 $120 = $b;
 $121 = $c;
 $122 = $120 ^ $121;
 $123 = $119 & $122;
 $124 = $118 ^ $123;
 $125 = ((($in)) + 20|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (($124) + ($126))|0;
 $128 = (($127) + 1200080426)|0;
 $129 = $d;
 $130 = (($129) + ($128))|0;
 $d = $130;
 $131 = $d;
 $132 = $131 << 12;
 $133 = $d;
 $134 = $133 >>> 20;
 $135 = $132 | $134;
 $d = $135;
 $136 = $a;
 $137 = $d;
 $138 = (($137) + ($136))|0;
 $d = $138;
 $139 = $b;
 $140 = $d;
 $141 = $a;
 $142 = $b;
 $143 = $141 ^ $142;
 $144 = $140 & $143;
 $145 = $139 ^ $144;
 $146 = ((($in)) + 24|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($145) + ($147))|0;
 $149 = (($148) + -1473231341)|0;
 $150 = $c;
 $151 = (($150) + ($149))|0;
 $c = $151;
 $152 = $c;
 $153 = $152 << 17;
 $154 = $c;
 $155 = $154 >>> 15;
 $156 = $153 | $155;
 $c = $156;
 $157 = $d;
 $158 = $c;
 $159 = (($158) + ($157))|0;
 $c = $159;
 $160 = $a;
 $161 = $c;
 $162 = $d;
 $163 = $a;
 $164 = $162 ^ $163;
 $165 = $161 & $164;
 $166 = $160 ^ $165;
 $167 = ((($in)) + 28|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = (($166) + ($168))|0;
 $170 = (($169) + -45705983)|0;
 $171 = $b;
 $172 = (($171) + ($170))|0;
 $b = $172;
 $173 = $b;
 $174 = $173 << 22;
 $175 = $b;
 $176 = $175 >>> 10;
 $177 = $174 | $176;
 $b = $177;
 $178 = $c;
 $179 = $b;
 $180 = (($179) + ($178))|0;
 $b = $180;
 $181 = $d;
 $182 = $b;
 $183 = $c;
 $184 = $d;
 $185 = $183 ^ $184;
 $186 = $182 & $185;
 $187 = $181 ^ $186;
 $188 = ((($in)) + 32|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = (($187) + ($189))|0;
 $191 = (($190) + 1770035416)|0;
 $192 = $a;
 $193 = (($192) + ($191))|0;
 $a = $193;
 $194 = $a;
 $195 = $194 << 7;
 $196 = $a;
 $197 = $196 >>> 25;
 $198 = $195 | $197;
 $a = $198;
 $199 = $b;
 $200 = $a;
 $201 = (($200) + ($199))|0;
 $a = $201;
 $202 = $c;
 $203 = $a;
 $204 = $b;
 $205 = $c;
 $206 = $204 ^ $205;
 $207 = $203 & $206;
 $208 = $202 ^ $207;
 $209 = ((($in)) + 36|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = (($208) + ($210))|0;
 $212 = (($211) + -1958414417)|0;
 $213 = $d;
 $214 = (($213) + ($212))|0;
 $d = $214;
 $215 = $d;
 $216 = $215 << 12;
 $217 = $d;
 $218 = $217 >>> 20;
 $219 = $216 | $218;
 $d = $219;
 $220 = $a;
 $221 = $d;
 $222 = (($221) + ($220))|0;
 $d = $222;
 $223 = $b;
 $224 = $d;
 $225 = $a;
 $226 = $b;
 $227 = $225 ^ $226;
 $228 = $224 & $227;
 $229 = $223 ^ $228;
 $230 = ((($in)) + 40|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = (($229) + ($231))|0;
 $233 = (($232) + -42063)|0;
 $234 = $c;
 $235 = (($234) + ($233))|0;
 $c = $235;
 $236 = $c;
 $237 = $236 << 17;
 $238 = $c;
 $239 = $238 >>> 15;
 $240 = $237 | $239;
 $c = $240;
 $241 = $d;
 $242 = $c;
 $243 = (($242) + ($241))|0;
 $c = $243;
 $244 = $a;
 $245 = $c;
 $246 = $d;
 $247 = $a;
 $248 = $246 ^ $247;
 $249 = $245 & $248;
 $250 = $244 ^ $249;
 $251 = ((($in)) + 44|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (($250) + ($252))|0;
 $254 = (($253) + -1990404162)|0;
 $255 = $b;
 $256 = (($255) + ($254))|0;
 $b = $256;
 $257 = $b;
 $258 = $257 << 22;
 $259 = $b;
 $260 = $259 >>> 10;
 $261 = $258 | $260;
 $b = $261;
 $262 = $c;
 $263 = $b;
 $264 = (($263) + ($262))|0;
 $b = $264;
 $265 = $d;
 $266 = $b;
 $267 = $c;
 $268 = $d;
 $269 = $267 ^ $268;
 $270 = $266 & $269;
 $271 = $265 ^ $270;
 $272 = ((($in)) + 48|0);
 $273 = HEAP32[$272>>2]|0;
 $274 = (($271) + ($273))|0;
 $275 = (($274) + 1804603682)|0;
 $276 = $a;
 $277 = (($276) + ($275))|0;
 $a = $277;
 $278 = $a;
 $279 = $278 << 7;
 $280 = $a;
 $281 = $280 >>> 25;
 $282 = $279 | $281;
 $a = $282;
 $283 = $b;
 $284 = $a;
 $285 = (($284) + ($283))|0;
 $a = $285;
 $286 = $c;
 $287 = $a;
 $288 = $b;
 $289 = $c;
 $290 = $288 ^ $289;
 $291 = $287 & $290;
 $292 = $286 ^ $291;
 $293 = ((($in)) + 52|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($292) + ($294))|0;
 $296 = (($295) + -40341101)|0;
 $297 = $d;
 $298 = (($297) + ($296))|0;
 $d = $298;
 $299 = $d;
 $300 = $299 << 12;
 $301 = $d;
 $302 = $301 >>> 20;
 $303 = $300 | $302;
 $d = $303;
 $304 = $a;
 $305 = $d;
 $306 = (($305) + ($304))|0;
 $d = $306;
 $307 = $b;
 $308 = $d;
 $309 = $a;
 $310 = $b;
 $311 = $309 ^ $310;
 $312 = $308 & $311;
 $313 = $307 ^ $312;
 $314 = ((($in)) + 56|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = (($313) + ($315))|0;
 $317 = (($316) + -1502002290)|0;
 $318 = $c;
 $319 = (($318) + ($317))|0;
 $c = $319;
 $320 = $c;
 $321 = $320 << 17;
 $322 = $c;
 $323 = $322 >>> 15;
 $324 = $321 | $323;
 $c = $324;
 $325 = $d;
 $326 = $c;
 $327 = (($326) + ($325))|0;
 $c = $327;
 $328 = $a;
 $329 = $c;
 $330 = $d;
 $331 = $a;
 $332 = $330 ^ $331;
 $333 = $329 & $332;
 $334 = $328 ^ $333;
 $335 = ((($in)) + 60|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = (($334) + ($336))|0;
 $338 = (($337) + 1236535329)|0;
 $339 = $b;
 $340 = (($339) + ($338))|0;
 $b = $340;
 $341 = $b;
 $342 = $341 << 22;
 $343 = $b;
 $344 = $343 >>> 10;
 $345 = $342 | $344;
 $b = $345;
 $346 = $c;
 $347 = $b;
 $348 = (($347) + ($346))|0;
 $b = $348;
 $349 = $c;
 $350 = $d;
 $351 = $b;
 $352 = $c;
 $353 = $351 ^ $352;
 $354 = $350 & $353;
 $355 = $349 ^ $354;
 $356 = ((($in)) + 4|0);
 $357 = HEAP32[$356>>2]|0;
 $358 = (($355) + ($357))|0;
 $359 = (($358) + -165796510)|0;
 $360 = $a;
 $361 = (($360) + ($359))|0;
 $a = $361;
 $362 = $a;
 $363 = $362 << 5;
 $364 = $a;
 $365 = $364 >>> 27;
 $366 = $363 | $365;
 $a = $366;
 $367 = $b;
 $368 = $a;
 $369 = (($368) + ($367))|0;
 $a = $369;
 $370 = $b;
 $371 = $c;
 $372 = $a;
 $373 = $b;
 $374 = $372 ^ $373;
 $375 = $371 & $374;
 $376 = $370 ^ $375;
 $377 = ((($in)) + 24|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = (($376) + ($378))|0;
 $380 = (($379) + -1069501632)|0;
 $381 = $d;
 $382 = (($381) + ($380))|0;
 $d = $382;
 $383 = $d;
 $384 = $383 << 9;
 $385 = $d;
 $386 = $385 >>> 23;
 $387 = $384 | $386;
 $d = $387;
 $388 = $a;
 $389 = $d;
 $390 = (($389) + ($388))|0;
 $d = $390;
 $391 = $a;
 $392 = $b;
 $393 = $d;
 $394 = $a;
 $395 = $393 ^ $394;
 $396 = $392 & $395;
 $397 = $391 ^ $396;
 $398 = ((($in)) + 44|0);
 $399 = HEAP32[$398>>2]|0;
 $400 = (($397) + ($399))|0;
 $401 = (($400) + 643717713)|0;
 $402 = $c;
 $403 = (($402) + ($401))|0;
 $c = $403;
 $404 = $c;
 $405 = $404 << 14;
 $406 = $c;
 $407 = $406 >>> 18;
 $408 = $405 | $407;
 $c = $408;
 $409 = $d;
 $410 = $c;
 $411 = (($410) + ($409))|0;
 $c = $411;
 $412 = $d;
 $413 = $a;
 $414 = $c;
 $415 = $d;
 $416 = $414 ^ $415;
 $417 = $413 & $416;
 $418 = $412 ^ $417;
 $419 = HEAP32[$in>>2]|0;
 $420 = (($418) + ($419))|0;
 $421 = (($420) + -373897302)|0;
 $422 = $b;
 $423 = (($422) + ($421))|0;
 $b = $423;
 $424 = $b;
 $425 = $424 << 20;
 $426 = $b;
 $427 = $426 >>> 12;
 $428 = $425 | $427;
 $b = $428;
 $429 = $c;
 $430 = $b;
 $431 = (($430) + ($429))|0;
 $b = $431;
 $432 = $c;
 $433 = $d;
 $434 = $b;
 $435 = $c;
 $436 = $434 ^ $435;
 $437 = $433 & $436;
 $438 = $432 ^ $437;
 $439 = ((($in)) + 20|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = (($438) + ($440))|0;
 $442 = (($441) + -701558691)|0;
 $443 = $a;
 $444 = (($443) + ($442))|0;
 $a = $444;
 $445 = $a;
 $446 = $445 << 5;
 $447 = $a;
 $448 = $447 >>> 27;
 $449 = $446 | $448;
 $a = $449;
 $450 = $b;
 $451 = $a;
 $452 = (($451) + ($450))|0;
 $a = $452;
 $453 = $b;
 $454 = $c;
 $455 = $a;
 $456 = $b;
 $457 = $455 ^ $456;
 $458 = $454 & $457;
 $459 = $453 ^ $458;
 $460 = ((($in)) + 40|0);
 $461 = HEAP32[$460>>2]|0;
 $462 = (($459) + ($461))|0;
 $463 = (($462) + 38016083)|0;
 $464 = $d;
 $465 = (($464) + ($463))|0;
 $d = $465;
 $466 = $d;
 $467 = $466 << 9;
 $468 = $d;
 $469 = $468 >>> 23;
 $470 = $467 | $469;
 $d = $470;
 $471 = $a;
 $472 = $d;
 $473 = (($472) + ($471))|0;
 $d = $473;
 $474 = $a;
 $475 = $b;
 $476 = $d;
 $477 = $a;
 $478 = $476 ^ $477;
 $479 = $475 & $478;
 $480 = $474 ^ $479;
 $481 = ((($in)) + 60|0);
 $482 = HEAP32[$481>>2]|0;
 $483 = (($480) + ($482))|0;
 $484 = (($483) + -660478335)|0;
 $485 = $c;
 $486 = (($485) + ($484))|0;
 $c = $486;
 $487 = $c;
 $488 = $487 << 14;
 $489 = $c;
 $490 = $489 >>> 18;
 $491 = $488 | $490;
 $c = $491;
 $492 = $d;
 $493 = $c;
 $494 = (($493) + ($492))|0;
 $c = $494;
 $495 = $d;
 $496 = $a;
 $497 = $c;
 $498 = $d;
 $499 = $497 ^ $498;
 $500 = $496 & $499;
 $501 = $495 ^ $500;
 $502 = ((($in)) + 16|0);
 $503 = HEAP32[$502>>2]|0;
 $504 = (($501) + ($503))|0;
 $505 = (($504) + -405537848)|0;
 $506 = $b;
 $507 = (($506) + ($505))|0;
 $b = $507;
 $508 = $b;
 $509 = $508 << 20;
 $510 = $b;
 $511 = $510 >>> 12;
 $512 = $509 | $511;
 $b = $512;
 $513 = $c;
 $514 = $b;
 $515 = (($514) + ($513))|0;
 $b = $515;
 $516 = $c;
 $517 = $d;
 $518 = $b;
 $519 = $c;
 $520 = $518 ^ $519;
 $521 = $517 & $520;
 $522 = $516 ^ $521;
 $523 = ((($in)) + 36|0);
 $524 = HEAP32[$523>>2]|0;
 $525 = (($522) + ($524))|0;
 $526 = (($525) + 568446438)|0;
 $527 = $a;
 $528 = (($527) + ($526))|0;
 $a = $528;
 $529 = $a;
 $530 = $529 << 5;
 $531 = $a;
 $532 = $531 >>> 27;
 $533 = $530 | $532;
 $a = $533;
 $534 = $b;
 $535 = $a;
 $536 = (($535) + ($534))|0;
 $a = $536;
 $537 = $b;
 $538 = $c;
 $539 = $a;
 $540 = $b;
 $541 = $539 ^ $540;
 $542 = $538 & $541;
 $543 = $537 ^ $542;
 $544 = ((($in)) + 56|0);
 $545 = HEAP32[$544>>2]|0;
 $546 = (($543) + ($545))|0;
 $547 = (($546) + -1019803690)|0;
 $548 = $d;
 $549 = (($548) + ($547))|0;
 $d = $549;
 $550 = $d;
 $551 = $550 << 9;
 $552 = $d;
 $553 = $552 >>> 23;
 $554 = $551 | $553;
 $d = $554;
 $555 = $a;
 $556 = $d;
 $557 = (($556) + ($555))|0;
 $d = $557;
 $558 = $a;
 $559 = $b;
 $560 = $d;
 $561 = $a;
 $562 = $560 ^ $561;
 $563 = $559 & $562;
 $564 = $558 ^ $563;
 $565 = ((($in)) + 12|0);
 $566 = HEAP32[$565>>2]|0;
 $567 = (($564) + ($566))|0;
 $568 = (($567) + -187363961)|0;
 $569 = $c;
 $570 = (($569) + ($568))|0;
 $c = $570;
 $571 = $c;
 $572 = $571 << 14;
 $573 = $c;
 $574 = $573 >>> 18;
 $575 = $572 | $574;
 $c = $575;
 $576 = $d;
 $577 = $c;
 $578 = (($577) + ($576))|0;
 $c = $578;
 $579 = $d;
 $580 = $a;
 $581 = $c;
 $582 = $d;
 $583 = $581 ^ $582;
 $584 = $580 & $583;
 $585 = $579 ^ $584;
 $586 = ((($in)) + 32|0);
 $587 = HEAP32[$586>>2]|0;
 $588 = (($585) + ($587))|0;
 $589 = (($588) + 1163531501)|0;
 $590 = $b;
 $591 = (($590) + ($589))|0;
 $b = $591;
 $592 = $b;
 $593 = $592 << 20;
 $594 = $b;
 $595 = $594 >>> 12;
 $596 = $593 | $595;
 $b = $596;
 $597 = $c;
 $598 = $b;
 $599 = (($598) + ($597))|0;
 $b = $599;
 $600 = $c;
 $601 = $d;
 $602 = $b;
 $603 = $c;
 $604 = $602 ^ $603;
 $605 = $601 & $604;
 $606 = $600 ^ $605;
 $607 = ((($in)) + 52|0);
 $608 = HEAP32[$607>>2]|0;
 $609 = (($606) + ($608))|0;
 $610 = (($609) + -1444681467)|0;
 $611 = $a;
 $612 = (($611) + ($610))|0;
 $a = $612;
 $613 = $a;
 $614 = $613 << 5;
 $615 = $a;
 $616 = $615 >>> 27;
 $617 = $614 | $616;
 $a = $617;
 $618 = $b;
 $619 = $a;
 $620 = (($619) + ($618))|0;
 $a = $620;
 $621 = $b;
 $622 = $c;
 $623 = $a;
 $624 = $b;
 $625 = $623 ^ $624;
 $626 = $622 & $625;
 $627 = $621 ^ $626;
 $628 = ((($in)) + 8|0);
 $629 = HEAP32[$628>>2]|0;
 $630 = (($627) + ($629))|0;
 $631 = (($630) + -51403784)|0;
 $632 = $d;
 $633 = (($632) + ($631))|0;
 $d = $633;
 $634 = $d;
 $635 = $634 << 9;
 $636 = $d;
 $637 = $636 >>> 23;
 $638 = $635 | $637;
 $d = $638;
 $639 = $a;
 $640 = $d;
 $641 = (($640) + ($639))|0;
 $d = $641;
 $642 = $a;
 $643 = $b;
 $644 = $d;
 $645 = $a;
 $646 = $644 ^ $645;
 $647 = $643 & $646;
 $648 = $642 ^ $647;
 $649 = ((($in)) + 28|0);
 $650 = HEAP32[$649>>2]|0;
 $651 = (($648) + ($650))|0;
 $652 = (($651) + 1735328473)|0;
 $653 = $c;
 $654 = (($653) + ($652))|0;
 $c = $654;
 $655 = $c;
 $656 = $655 << 14;
 $657 = $c;
 $658 = $657 >>> 18;
 $659 = $656 | $658;
 $c = $659;
 $660 = $d;
 $661 = $c;
 $662 = (($661) + ($660))|0;
 $c = $662;
 $663 = $d;
 $664 = $a;
 $665 = $c;
 $666 = $d;
 $667 = $665 ^ $666;
 $668 = $664 & $667;
 $669 = $663 ^ $668;
 $670 = ((($in)) + 48|0);
 $671 = HEAP32[$670>>2]|0;
 $672 = (($669) + ($671))|0;
 $673 = (($672) + -1926607734)|0;
 $674 = $b;
 $675 = (($674) + ($673))|0;
 $b = $675;
 $676 = $b;
 $677 = $676 << 20;
 $678 = $b;
 $679 = $678 >>> 12;
 $680 = $677 | $679;
 $b = $680;
 $681 = $c;
 $682 = $b;
 $683 = (($682) + ($681))|0;
 $b = $683;
 $684 = $b;
 $685 = $c;
 $686 = $684 ^ $685;
 $687 = $d;
 $688 = $686 ^ $687;
 $689 = ((($in)) + 20|0);
 $690 = HEAP32[$689>>2]|0;
 $691 = (($688) + ($690))|0;
 $692 = (($691) + -378558)|0;
 $693 = $a;
 $694 = (($693) + ($692))|0;
 $a = $694;
 $695 = $a;
 $696 = $695 << 4;
 $697 = $a;
 $698 = $697 >>> 28;
 $699 = $696 | $698;
 $a = $699;
 $700 = $b;
 $701 = $a;
 $702 = (($701) + ($700))|0;
 $a = $702;
 $703 = $a;
 $704 = $b;
 $705 = $703 ^ $704;
 $706 = $c;
 $707 = $705 ^ $706;
 $708 = ((($in)) + 32|0);
 $709 = HEAP32[$708>>2]|0;
 $710 = (($707) + ($709))|0;
 $711 = (($710) + -2022574463)|0;
 $712 = $d;
 $713 = (($712) + ($711))|0;
 $d = $713;
 $714 = $d;
 $715 = $714 << 11;
 $716 = $d;
 $717 = $716 >>> 21;
 $718 = $715 | $717;
 $d = $718;
 $719 = $a;
 $720 = $d;
 $721 = (($720) + ($719))|0;
 $d = $721;
 $722 = $d;
 $723 = $a;
 $724 = $722 ^ $723;
 $725 = $b;
 $726 = $724 ^ $725;
 $727 = ((($in)) + 44|0);
 $728 = HEAP32[$727>>2]|0;
 $729 = (($726) + ($728))|0;
 $730 = (($729) + 1839030562)|0;
 $731 = $c;
 $732 = (($731) + ($730))|0;
 $c = $732;
 $733 = $c;
 $734 = $733 << 16;
 $735 = $c;
 $736 = $735 >>> 16;
 $737 = $734 | $736;
 $c = $737;
 $738 = $d;
 $739 = $c;
 $740 = (($739) + ($738))|0;
 $c = $740;
 $741 = $c;
 $742 = $d;
 $743 = $741 ^ $742;
 $744 = $a;
 $745 = $743 ^ $744;
 $746 = ((($in)) + 56|0);
 $747 = HEAP32[$746>>2]|0;
 $748 = (($745) + ($747))|0;
 $749 = (($748) + -35309556)|0;
 $750 = $b;
 $751 = (($750) + ($749))|0;
 $b = $751;
 $752 = $b;
 $753 = $752 << 23;
 $754 = $b;
 $755 = $754 >>> 9;
 $756 = $753 | $755;
 $b = $756;
 $757 = $c;
 $758 = $b;
 $759 = (($758) + ($757))|0;
 $b = $759;
 $760 = $b;
 $761 = $c;
 $762 = $760 ^ $761;
 $763 = $d;
 $764 = $762 ^ $763;
 $765 = ((($in)) + 4|0);
 $766 = HEAP32[$765>>2]|0;
 $767 = (($764) + ($766))|0;
 $768 = (($767) + -1530992060)|0;
 $769 = $a;
 $770 = (($769) + ($768))|0;
 $a = $770;
 $771 = $a;
 $772 = $771 << 4;
 $773 = $a;
 $774 = $773 >>> 28;
 $775 = $772 | $774;
 $a = $775;
 $776 = $b;
 $777 = $a;
 $778 = (($777) + ($776))|0;
 $a = $778;
 $779 = $a;
 $780 = $b;
 $781 = $779 ^ $780;
 $782 = $c;
 $783 = $781 ^ $782;
 $784 = ((($in)) + 16|0);
 $785 = HEAP32[$784>>2]|0;
 $786 = (($783) + ($785))|0;
 $787 = (($786) + 1272893353)|0;
 $788 = $d;
 $789 = (($788) + ($787))|0;
 $d = $789;
 $790 = $d;
 $791 = $790 << 11;
 $792 = $d;
 $793 = $792 >>> 21;
 $794 = $791 | $793;
 $d = $794;
 $795 = $a;
 $796 = $d;
 $797 = (($796) + ($795))|0;
 $d = $797;
 $798 = $d;
 $799 = $a;
 $800 = $798 ^ $799;
 $801 = $b;
 $802 = $800 ^ $801;
 $803 = ((($in)) + 28|0);
 $804 = HEAP32[$803>>2]|0;
 $805 = (($802) + ($804))|0;
 $806 = (($805) + -155497632)|0;
 $807 = $c;
 $808 = (($807) + ($806))|0;
 $c = $808;
 $809 = $c;
 $810 = $809 << 16;
 $811 = $c;
 $812 = $811 >>> 16;
 $813 = $810 | $812;
 $c = $813;
 $814 = $d;
 $815 = $c;
 $816 = (($815) + ($814))|0;
 $c = $816;
 $817 = $c;
 $818 = $d;
 $819 = $817 ^ $818;
 $820 = $a;
 $821 = $819 ^ $820;
 $822 = ((($in)) + 40|0);
 $823 = HEAP32[$822>>2]|0;
 $824 = (($821) + ($823))|0;
 $825 = (($824) + -1094730640)|0;
 $826 = $b;
 $827 = (($826) + ($825))|0;
 $b = $827;
 $828 = $b;
 $829 = $828 << 23;
 $830 = $b;
 $831 = $830 >>> 9;
 $832 = $829 | $831;
 $b = $832;
 $833 = $c;
 $834 = $b;
 $835 = (($834) + ($833))|0;
 $b = $835;
 $836 = $b;
 $837 = $c;
 $838 = $836 ^ $837;
 $839 = $d;
 $840 = $838 ^ $839;
 $841 = ((($in)) + 52|0);
 $842 = HEAP32[$841>>2]|0;
 $843 = (($840) + ($842))|0;
 $844 = (($843) + 681279174)|0;
 $845 = $a;
 $846 = (($845) + ($844))|0;
 $a = $846;
 $847 = $a;
 $848 = $847 << 4;
 $849 = $a;
 $850 = $849 >>> 28;
 $851 = $848 | $850;
 $a = $851;
 $852 = $b;
 $853 = $a;
 $854 = (($853) + ($852))|0;
 $a = $854;
 $855 = $a;
 $856 = $b;
 $857 = $855 ^ $856;
 $858 = $c;
 $859 = $857 ^ $858;
 $860 = HEAP32[$in>>2]|0;
 $861 = (($859) + ($860))|0;
 $862 = (($861) + -358537222)|0;
 $863 = $d;
 $864 = (($863) + ($862))|0;
 $d = $864;
 $865 = $d;
 $866 = $865 << 11;
 $867 = $d;
 $868 = $867 >>> 21;
 $869 = $866 | $868;
 $d = $869;
 $870 = $a;
 $871 = $d;
 $872 = (($871) + ($870))|0;
 $d = $872;
 $873 = $d;
 $874 = $a;
 $875 = $873 ^ $874;
 $876 = $b;
 $877 = $875 ^ $876;
 $878 = ((($in)) + 12|0);
 $879 = HEAP32[$878>>2]|0;
 $880 = (($877) + ($879))|0;
 $881 = (($880) + -722521979)|0;
 $882 = $c;
 $883 = (($882) + ($881))|0;
 $c = $883;
 $884 = $c;
 $885 = $884 << 16;
 $886 = $c;
 $887 = $886 >>> 16;
 $888 = $885 | $887;
 $c = $888;
 $889 = $d;
 $890 = $c;
 $891 = (($890) + ($889))|0;
 $c = $891;
 $892 = $c;
 $893 = $d;
 $894 = $892 ^ $893;
 $895 = $a;
 $896 = $894 ^ $895;
 $897 = ((($in)) + 24|0);
 $898 = HEAP32[$897>>2]|0;
 $899 = (($896) + ($898))|0;
 $900 = (($899) + 76029189)|0;
 $901 = $b;
 $902 = (($901) + ($900))|0;
 $b = $902;
 $903 = $b;
 $904 = $903 << 23;
 $905 = $b;
 $906 = $905 >>> 9;
 $907 = $904 | $906;
 $b = $907;
 $908 = $c;
 $909 = $b;
 $910 = (($909) + ($908))|0;
 $b = $910;
 $911 = $b;
 $912 = $c;
 $913 = $911 ^ $912;
 $914 = $d;
 $915 = $913 ^ $914;
 $916 = ((($in)) + 36|0);
 $917 = HEAP32[$916>>2]|0;
 $918 = (($915) + ($917))|0;
 $919 = (($918) + -640364487)|0;
 $920 = $a;
 $921 = (($920) + ($919))|0;
 $a = $921;
 $922 = $a;
 $923 = $922 << 4;
 $924 = $a;
 $925 = $924 >>> 28;
 $926 = $923 | $925;
 $a = $926;
 $927 = $b;
 $928 = $a;
 $929 = (($928) + ($927))|0;
 $a = $929;
 $930 = $a;
 $931 = $b;
 $932 = $930 ^ $931;
 $933 = $c;
 $934 = $932 ^ $933;
 $935 = ((($in)) + 48|0);
 $936 = HEAP32[$935>>2]|0;
 $937 = (($934) + ($936))|0;
 $938 = (($937) + -421815835)|0;
 $939 = $d;
 $940 = (($939) + ($938))|0;
 $d = $940;
 $941 = $d;
 $942 = $941 << 11;
 $943 = $d;
 $944 = $943 >>> 21;
 $945 = $942 | $944;
 $d = $945;
 $946 = $a;
 $947 = $d;
 $948 = (($947) + ($946))|0;
 $d = $948;
 $949 = $d;
 $950 = $a;
 $951 = $949 ^ $950;
 $952 = $b;
 $953 = $951 ^ $952;
 $954 = ((($in)) + 60|0);
 $955 = HEAP32[$954>>2]|0;
 $956 = (($953) + ($955))|0;
 $957 = (($956) + 530742520)|0;
 $958 = $c;
 $959 = (($958) + ($957))|0;
 $c = $959;
 $960 = $c;
 $961 = $960 << 16;
 $962 = $c;
 $963 = $962 >>> 16;
 $964 = $961 | $963;
 $c = $964;
 $965 = $d;
 $966 = $c;
 $967 = (($966) + ($965))|0;
 $c = $967;
 $968 = $c;
 $969 = $d;
 $970 = $968 ^ $969;
 $971 = $a;
 $972 = $970 ^ $971;
 $973 = ((($in)) + 8|0);
 $974 = HEAP32[$973>>2]|0;
 $975 = (($972) + ($974))|0;
 $976 = (($975) + -995338651)|0;
 $977 = $b;
 $978 = (($977) + ($976))|0;
 $b = $978;
 $979 = $b;
 $980 = $979 << 23;
 $981 = $b;
 $982 = $981 >>> 9;
 $983 = $980 | $982;
 $b = $983;
 $984 = $c;
 $985 = $b;
 $986 = (($985) + ($984))|0;
 $b = $986;
 $987 = $c;
 $988 = $b;
 $989 = $d;
 $990 = $989 ^ -1;
 $991 = $988 | $990;
 $992 = $987 ^ $991;
 $993 = HEAP32[$in>>2]|0;
 $994 = (($992) + ($993))|0;
 $995 = (($994) + -198630844)|0;
 $996 = $a;
 $997 = (($996) + ($995))|0;
 $a = $997;
 $998 = $a;
 $999 = $998 << 6;
 $1000 = $a;
 $1001 = $1000 >>> 26;
 $1002 = $999 | $1001;
 $a = $1002;
 $1003 = $b;
 $1004 = $a;
 $1005 = (($1004) + ($1003))|0;
 $a = $1005;
 $1006 = $b;
 $1007 = $a;
 $1008 = $c;
 $1009 = $1008 ^ -1;
 $1010 = $1007 | $1009;
 $1011 = $1006 ^ $1010;
 $1012 = ((($in)) + 28|0);
 $1013 = HEAP32[$1012>>2]|0;
 $1014 = (($1011) + ($1013))|0;
 $1015 = (($1014) + 1126891415)|0;
 $1016 = $d;
 $1017 = (($1016) + ($1015))|0;
 $d = $1017;
 $1018 = $d;
 $1019 = $1018 << 10;
 $1020 = $d;
 $1021 = $1020 >>> 22;
 $1022 = $1019 | $1021;
 $d = $1022;
 $1023 = $a;
 $1024 = $d;
 $1025 = (($1024) + ($1023))|0;
 $d = $1025;
 $1026 = $a;
 $1027 = $d;
 $1028 = $b;
 $1029 = $1028 ^ -1;
 $1030 = $1027 | $1029;
 $1031 = $1026 ^ $1030;
 $1032 = ((($in)) + 56|0);
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + ($1033))|0;
 $1035 = (($1034) + -1416354905)|0;
 $1036 = $c;
 $1037 = (($1036) + ($1035))|0;
 $c = $1037;
 $1038 = $c;
 $1039 = $1038 << 15;
 $1040 = $c;
 $1041 = $1040 >>> 17;
 $1042 = $1039 | $1041;
 $c = $1042;
 $1043 = $d;
 $1044 = $c;
 $1045 = (($1044) + ($1043))|0;
 $c = $1045;
 $1046 = $d;
 $1047 = $c;
 $1048 = $a;
 $1049 = $1048 ^ -1;
 $1050 = $1047 | $1049;
 $1051 = $1046 ^ $1050;
 $1052 = ((($in)) + 20|0);
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + ($1053))|0;
 $1055 = (($1054) + -57434055)|0;
 $1056 = $b;
 $1057 = (($1056) + ($1055))|0;
 $b = $1057;
 $1058 = $b;
 $1059 = $1058 << 21;
 $1060 = $b;
 $1061 = $1060 >>> 11;
 $1062 = $1059 | $1061;
 $b = $1062;
 $1063 = $c;
 $1064 = $b;
 $1065 = (($1064) + ($1063))|0;
 $b = $1065;
 $1066 = $c;
 $1067 = $b;
 $1068 = $d;
 $1069 = $1068 ^ -1;
 $1070 = $1067 | $1069;
 $1071 = $1066 ^ $1070;
 $1072 = ((($in)) + 48|0);
 $1073 = HEAP32[$1072>>2]|0;
 $1074 = (($1071) + ($1073))|0;
 $1075 = (($1074) + 1700485571)|0;
 $1076 = $a;
 $1077 = (($1076) + ($1075))|0;
 $a = $1077;
 $1078 = $a;
 $1079 = $1078 << 6;
 $1080 = $a;
 $1081 = $1080 >>> 26;
 $1082 = $1079 | $1081;
 $a = $1082;
 $1083 = $b;
 $1084 = $a;
 $1085 = (($1084) + ($1083))|0;
 $a = $1085;
 $1086 = $b;
 $1087 = $a;
 $1088 = $c;
 $1089 = $1088 ^ -1;
 $1090 = $1087 | $1089;
 $1091 = $1086 ^ $1090;
 $1092 = ((($in)) + 12|0);
 $1093 = HEAP32[$1092>>2]|0;
 $1094 = (($1091) + ($1093))|0;
 $1095 = (($1094) + -1894986606)|0;
 $1096 = $d;
 $1097 = (($1096) + ($1095))|0;
 $d = $1097;
 $1098 = $d;
 $1099 = $1098 << 10;
 $1100 = $d;
 $1101 = $1100 >>> 22;
 $1102 = $1099 | $1101;
 $d = $1102;
 $1103 = $a;
 $1104 = $d;
 $1105 = (($1104) + ($1103))|0;
 $d = $1105;
 $1106 = $a;
 $1107 = $d;
 $1108 = $b;
 $1109 = $1108 ^ -1;
 $1110 = $1107 | $1109;
 $1111 = $1106 ^ $1110;
 $1112 = ((($in)) + 40|0);
 $1113 = HEAP32[$1112>>2]|0;
 $1114 = (($1111) + ($1113))|0;
 $1115 = (($1114) + -1051523)|0;
 $1116 = $c;
 $1117 = (($1116) + ($1115))|0;
 $c = $1117;
 $1118 = $c;
 $1119 = $1118 << 15;
 $1120 = $c;
 $1121 = $1120 >>> 17;
 $1122 = $1119 | $1121;
 $c = $1122;
 $1123 = $d;
 $1124 = $c;
 $1125 = (($1124) + ($1123))|0;
 $c = $1125;
 $1126 = $d;
 $1127 = $c;
 $1128 = $a;
 $1129 = $1128 ^ -1;
 $1130 = $1127 | $1129;
 $1131 = $1126 ^ $1130;
 $1132 = ((($in)) + 4|0);
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + ($1133))|0;
 $1135 = (($1134) + -2054922799)|0;
 $1136 = $b;
 $1137 = (($1136) + ($1135))|0;
 $b = $1137;
 $1138 = $b;
 $1139 = $1138 << 21;
 $1140 = $b;
 $1141 = $1140 >>> 11;
 $1142 = $1139 | $1141;
 $b = $1142;
 $1143 = $c;
 $1144 = $b;
 $1145 = (($1144) + ($1143))|0;
 $b = $1145;
 $1146 = $c;
 $1147 = $b;
 $1148 = $d;
 $1149 = $1148 ^ -1;
 $1150 = $1147 | $1149;
 $1151 = $1146 ^ $1150;
 $1152 = ((($in)) + 32|0);
 $1153 = HEAP32[$1152>>2]|0;
 $1154 = (($1151) + ($1153))|0;
 $1155 = (($1154) + 1873313359)|0;
 $1156 = $a;
 $1157 = (($1156) + ($1155))|0;
 $a = $1157;
 $1158 = $a;
 $1159 = $1158 << 6;
 $1160 = $a;
 $1161 = $1160 >>> 26;
 $1162 = $1159 | $1161;
 $a = $1162;
 $1163 = $b;
 $1164 = $a;
 $1165 = (($1164) + ($1163))|0;
 $a = $1165;
 $1166 = $b;
 $1167 = $a;
 $1168 = $c;
 $1169 = $1168 ^ -1;
 $1170 = $1167 | $1169;
 $1171 = $1166 ^ $1170;
 $1172 = ((($in)) + 60|0);
 $1173 = HEAP32[$1172>>2]|0;
 $1174 = (($1171) + ($1173))|0;
 $1175 = (($1174) + -30611744)|0;
 $1176 = $d;
 $1177 = (($1176) + ($1175))|0;
 $d = $1177;
 $1178 = $d;
 $1179 = $1178 << 10;
 $1180 = $d;
 $1181 = $1180 >>> 22;
 $1182 = $1179 | $1181;
 $d = $1182;
 $1183 = $a;
 $1184 = $d;
 $1185 = (($1184) + ($1183))|0;
 $d = $1185;
 $1186 = $a;
 $1187 = $d;
 $1188 = $b;
 $1189 = $1188 ^ -1;
 $1190 = $1187 | $1189;
 $1191 = $1186 ^ $1190;
 $1192 = ((($in)) + 24|0);
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + ($1193))|0;
 $1195 = (($1194) + -1560198380)|0;
 $1196 = $c;
 $1197 = (($1196) + ($1195))|0;
 $c = $1197;
 $1198 = $c;
 $1199 = $1198 << 15;
 $1200 = $c;
 $1201 = $1200 >>> 17;
 $1202 = $1199 | $1201;
 $c = $1202;
 $1203 = $d;
 $1204 = $c;
 $1205 = (($1204) + ($1203))|0;
 $c = $1205;
 $1206 = $d;
 $1207 = $c;
 $1208 = $a;
 $1209 = $1208 ^ -1;
 $1210 = $1207 | $1209;
 $1211 = $1206 ^ $1210;
 $1212 = ((($in)) + 52|0);
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = (($1211) + ($1213))|0;
 $1215 = (($1214) + 1309151649)|0;
 $1216 = $b;
 $1217 = (($1216) + ($1215))|0;
 $b = $1217;
 $1218 = $b;
 $1219 = $1218 << 21;
 $1220 = $b;
 $1221 = $1220 >>> 11;
 $1222 = $1219 | $1221;
 $b = $1222;
 $1223 = $c;
 $1224 = $b;
 $1225 = (($1224) + ($1223))|0;
 $b = $1225;
 $1226 = $c;
 $1227 = $b;
 $1228 = $d;
 $1229 = $1228 ^ -1;
 $1230 = $1227 | $1229;
 $1231 = $1226 ^ $1230;
 $1232 = ((($in)) + 16|0);
 $1233 = HEAP32[$1232>>2]|0;
 $1234 = (($1231) + ($1233))|0;
 $1235 = (($1234) + -145523070)|0;
 $1236 = $a;
 $1237 = (($1236) + ($1235))|0;
 $a = $1237;
 $1238 = $a;
 $1239 = $1238 << 6;
 $1240 = $a;
 $1241 = $1240 >>> 26;
 $1242 = $1239 | $1241;
 $a = $1242;
 $1243 = $b;
 $1244 = $a;
 $1245 = (($1244) + ($1243))|0;
 $a = $1245;
 $1246 = $b;
 $1247 = $a;
 $1248 = $c;
 $1249 = $1248 ^ -1;
 $1250 = $1247 | $1249;
 $1251 = $1246 ^ $1250;
 $1252 = ((($in)) + 44|0);
 $1253 = HEAP32[$1252>>2]|0;
 $1254 = (($1251) + ($1253))|0;
 $1255 = (($1254) + -1120210379)|0;
 $1256 = $d;
 $1257 = (($1256) + ($1255))|0;
 $d = $1257;
 $1258 = $d;
 $1259 = $1258 << 10;
 $1260 = $d;
 $1261 = $1260 >>> 22;
 $1262 = $1259 | $1261;
 $d = $1262;
 $1263 = $a;
 $1264 = $d;
 $1265 = (($1264) + ($1263))|0;
 $d = $1265;
 $1266 = $a;
 $1267 = $d;
 $1268 = $b;
 $1269 = $1268 ^ -1;
 $1270 = $1267 | $1269;
 $1271 = $1266 ^ $1270;
 $1272 = ((($in)) + 8|0);
 $1273 = HEAP32[$1272>>2]|0;
 $1274 = (($1271) + ($1273))|0;
 $1275 = (($1274) + 718787259)|0;
 $1276 = $c;
 $1277 = (($1276) + ($1275))|0;
 $c = $1277;
 $1278 = $c;
 $1279 = $1278 << 15;
 $1280 = $c;
 $1281 = $1280 >>> 17;
 $1282 = $1279 | $1281;
 $c = $1282;
 $1283 = $d;
 $1284 = $c;
 $1285 = (($1284) + ($1283))|0;
 $c = $1285;
 $1286 = $d;
 $1287 = $c;
 $1288 = $a;
 $1289 = $1288 ^ -1;
 $1290 = $1287 | $1289;
 $1291 = $1286 ^ $1290;
 $1292 = ((($in)) + 36|0);
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + ($1293))|0;
 $1295 = (($1294) + -343485551)|0;
 $1296 = $b;
 $1297 = (($1296) + ($1295))|0;
 $b = $1297;
 $1298 = $b;
 $1299 = $1298 << 21;
 $1300 = $b;
 $1301 = $1300 >>> 11;
 $1302 = $1299 | $1301;
 $b = $1302;
 $1303 = $c;
 $1304 = $b;
 $1305 = (($1304) + ($1303))|0;
 $b = $1305;
 $1306 = $a;
 $1307 = $0;
 $1308 = HEAP32[$1307>>2]|0;
 $1309 = (($1308) + ($1306))|0;
 HEAP32[$1307>>2] = $1309;
 $1310 = $b;
 $1311 = $0;
 $1312 = ((($1311)) + 4|0);
 $1313 = HEAP32[$1312>>2]|0;
 $1314 = (($1313) + ($1310))|0;
 HEAP32[$1312>>2] = $1314;
 $1315 = $c;
 $1316 = $0;
 $1317 = ((($1316)) + 8|0);
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = (($1318) + ($1315))|0;
 HEAP32[$1317>>2] = $1319;
 $1320 = $d;
 $1321 = $0;
 $1322 = ((($1321)) + 12|0);
 $1323 = HEAP32[$1322>>2]|0;
 $1324 = (($1323) + ($1320))|0;
 HEAP32[$1322>>2] = $1324;
 STACKTOP = sp;return;
}
function _MD5Pad($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $padlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 8|0;
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_bitshift64Lshr(($5|0),($8|0),56)|0);
 $10 = tempRet0;
 $11 = $9&255;
 $12 = ((($count)) + 7|0);
 HEAP8[$12>>0] = $11;
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bitshift64Lshr(($17|0),($20|0),48)|0);
 $22 = tempRet0;
 $23 = $21&255;
 $24 = ((($count)) + 6|0);
 HEAP8[$24>>0] = $23;
 $25 = $0;
 $26 = ((($25)) + 16|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_bitshift64Lshr(($29|0),($32|0),40)|0);
 $34 = tempRet0;
 $35 = $33&255;
 $36 = ((($count)) + 5|0);
 HEAP8[$36>>0] = $35;
 $37 = $0;
 $38 = ((($37)) + 16|0);
 $39 = $38;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $44&255;
 $46 = ((($count)) + 4|0);
 HEAP8[$46>>0] = $45;
 $47 = $0;
 $48 = ((($47)) + 16|0);
 $49 = $48;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + 4)|0;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (_bitshift64Lshr(($51|0),($54|0),24)|0);
 $56 = tempRet0;
 $57 = $55&255;
 $58 = ((($count)) + 3|0);
 HEAP8[$58>>0] = $57;
 $59 = $0;
 $60 = ((($59)) + 16|0);
 $61 = $60;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),16)|0);
 $68 = tempRet0;
 $69 = $67&255;
 $70 = ((($count)) + 2|0);
 HEAP8[$70>>0] = $69;
 $71 = $0;
 $72 = ((($71)) + 16|0);
 $73 = $72;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (_bitshift64Lshr(($75|0),($78|0),8)|0);
 $80 = tempRet0;
 $81 = $79&255;
 $82 = ((($count)) + 1|0);
 HEAP8[$82>>0] = $81;
 $83 = $0;
 $84 = ((($83)) + 16|0);
 $85 = $84;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = $87&255;
 HEAP8[$count>>0] = $91;
 $92 = $0;
 $93 = ((($92)) + 16|0);
 $94 = $93;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($94) + 4)|0;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (_bitshift64Lshr(($96|0),($99|0),3)|0);
 $101 = tempRet0;
 $102 = $100 & 63;
 $103 = (_i64Subtract(64,0,($102|0),0)|0);
 $104 = tempRet0;
 $padlen = $103;
 $105 = $padlen;
 $106 = ($105>>>0)<(9);
 if (!($106)) {
  $109 = $0;
  $110 = $padlen;
  $111 = (($110) - 8)|0;
  _MD5Update($109,11760,$111);
  $112 = $0;
  _MD5Update($112,$count,8);
  STACKTOP = sp;return;
 }
 $107 = $padlen;
 $108 = (($107) + 64)|0;
 $padlen = $108;
 $109 = $0;
 $110 = $padlen;
 $111 = (($110) - 8)|0;
 _MD5Update($109,11760,$111);
 $112 = $0;
 _MD5Update($112,$count,8);
 STACKTOP = sp;return;
}
function _get_lfo($ctx,$lfo,$div,$is_vibrato) {
 $ctx = $ctx|0;
 $lfo = $lfo|0;
 $div = $div|0;
 $is_vibrato = $is_vibrato|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $lfo;
 $3 = $div;
 $4 = $is_vibrato;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $8 = ((($7)) + 1288|0);
 $9 = HEAP32[$8>>2]|0;
 do {
  if ((($9|0) == 3)) {
   $19 = $2;
   $20 = $3;
   $21 = (_get_lfo_it($19,$20)|0);
   $0 = $21;
  } else if ((($9|0) == 1)) {
   $13 = $4;
   $14 = ($13|0)!=(0);
   $15 = $2;
   $16 = $3;
   if ($14) {
    $17 = (_get_lfo_ft2($15,$16)|0);
    $0 = $17;
    break;
   } else {
    $18 = (_get_lfo_mod($15,$16)|0);
    $0 = $18;
    break;
   }
  } else if ((($9|0) == 2)) {
   $10 = $2;
   $11 = $3;
   $12 = (_get_lfo_st3($10,$11)|0);
   $0 = $12;
  } else {
   $22 = $2;
   $23 = $3;
   $24 = (_get_lfo_mod($22,$23)|0);
   $0 = $24;
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _update_lfo($lfo) {
 $lfo = $lfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3))|0;
 HEAP32[$5>>2] = $7;
 $8 = $0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10|0) % 64)&-1;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _set_lfo_phase($lfo,$phase) {
 $lfo = $lfo|0;
 $phase = $phase|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $phase;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 12|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _set_lfo_depth($lfo,$depth) {
 $lfo = $lfo|0;
 $depth = $depth|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $depth;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _set_lfo_rate($lfo,$rate) {
 $lfo = $lfo|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $rate;
 $2 = $1;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $2;
 STACKTOP = sp;return;
}
function _set_lfo_waveform($lfo,$type) {
 $lfo = $lfo|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $lfo;
 $1 = $type;
 $2 = $1;
 $3 = $0;
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function _get_lfo_st3($lfo,$div) {
 $lfo = $lfo|0;
 $div = $div|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lfo;
 $2 = $div;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ($7|0)==(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(2);
 $12 = $1;
 if ($11) {
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<(32);
  $16 = $15 ? 255 : 0;
  $val = $16;
  $17 = $val;
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = $2;
  $23 = (($21|0) / ($22|0))&-1;
  $0 = $23;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $24 = $2;
  $25 = (_get_lfo_mod($12,$24)|0);
  $0 = $25;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _get_lfo_ft2($lfo,$div) {
 $lfo = $lfo|0;
 $div = $div|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phase = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lfo;
 $2 = $div;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ($7|0)==(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(1);
 $12 = $1;
 if ($11) {
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 32)|0;
  $16 = (($15|0) % 64)&-1;
  $phase = $16;
  $17 = $phase;
  $18 = $17 << 3;
  $19 = (($18) - 255)|0;
  $val = $19;
  $20 = $val;
  $21 = $1;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = Math_imul($20, $23)|0;
  $25 = $2;
  $26 = (($24|0) / ($25|0))&-1;
  $0 = $26;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $27 = $2;
  $28 = (_get_lfo_mod($12,$27)|0);
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _get_lfo_mod($lfo,$div) {
 $lfo = $lfo|0;
 $div = $div|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lfo;
 $2 = $div;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ($7|0)==(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 if ((($10|0) == 3)) {
  $26 = (_rand()|0);
  $27 = $26 & 511;
  $28 = (($27) - 256)|0;
  $val = $28;
 } else if ((($10|0) == 0)) {
  $11 = $1;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (11824 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $val = $15;
 } else if ((($10|0) == 2)) {
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)<(32);
  $25 = $24 ? 255 : -255;
  $val = $25;
 } else if ((($10|0) == 1)) {
  $16 = $1;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 << 3;
  $20 = (255 - ($19))|0;
  $val = $20;
 } else {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $29 = $val;
 $30 = $1;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = Math_imul($29, $32)|0;
 $34 = $2;
 $35 = (($33|0) / ($34|0))&-1;
 $0 = $35;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _get_lfo_it($lfo,$div) {
 $lfo = $lfo|0;
 $div = $div|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $lfo;
 $2 = $div;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ($7|0)==(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = $2;
  $11 = (_get_lfo_st3($9,$10)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _check_envelope_end($env,$x) {
 $env = $env|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $index = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $data = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 ^ -1;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = $1;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)<=(0);
  if (!($13)) {
   $14 = $1;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) - 1)|0;
   $18 = $17<<1;
   $index = $18;
   $19 = $2;
   $20 = $index;
   $21 = $data;
   $22 = (($21) + ($20<<1)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = ($19|0)>=($24|0);
   $26 = $index;
   $27 = ($26|0)==(0);
   $or$cond = $25 | $27;
   if ($or$cond) {
    $28 = $1;
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 ^ -1;
    $31 = $30 & 4;
    $32 = ($31|0)!=(0);
    if ($32) {
     $0 = 1;
     $33 = $0;
     STACKTOP = sp;return ($33|0);
    }
   }
   $0 = 0;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $0 = 0;
 $33 = $0;
 STACKTOP = sp;return ($33|0);
}
function _get_envelope($env,$x,$def) {
 $env = $env|0;
 $x = $x|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $data = 0, $index = 0, $or$cond = 0, $x1 = 0, $x2 = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $def;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $data = $5;
 $6 = $2;
 $7 = ($6|0)<(0);
 if (!($7)) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 ^ -1;
  $11 = $10 & 1;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $1;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)<=(0);
   if (!($16)) {
    $18 = $1;
    $19 = ((($18)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) - 1)|0;
    $22 = $21<<1;
    $index = $22;
    $23 = $index;
    $24 = $data;
    $25 = (($24) + ($23<<1)|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 << 16 >> 16;
    $x1 = $27;
    $28 = $2;
    $29 = $x1;
    $30 = ($28|0)>=($29|0);
    $31 = $index;
    $32 = ($31|0)==(0);
    $or$cond = $30 | $32;
    if ($or$cond) {
     $33 = $index;
     $34 = (($33) + 1)|0;
     $35 = $data;
     $36 = (($35) + ($34<<1)|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37 << 16 >> 16;
     $0 = $38;
     $86 = $0;
     STACKTOP = sp;return ($86|0);
    }
    while(1) {
     $39 = $index;
     $40 = (($39) - 2)|0;
     $index = $40;
     $41 = $index;
     $42 = $data;
     $43 = (($42) + ($41<<1)|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = $44 << 16 >> 16;
     $x1 = $45;
     $46 = $index;
     $47 = ($46|0)>(0);
     if (!($47)) {
      break;
     }
     $48 = $x1;
     $49 = $2;
     $50 = ($48|0)>($49|0);
     if (!($50)) {
      break;
     }
    }
    $51 = $index;
    $52 = (($51) + 1)|0;
    $53 = $data;
    $54 = (($53) + ($52<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 << 16 >> 16;
    $y1 = $56;
    $57 = $index;
    $58 = (($57) + 2)|0;
    $59 = $data;
    $60 = (($59) + ($58<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61 << 16 >> 16;
    $x2 = $62;
    $63 = $index;
    $64 = (($63) + 3)|0;
    $65 = $data;
    $66 = (($65) + ($64<<1)|0);
    $67 = HEAP16[$66>>1]|0;
    $68 = $67 << 16 >> 16;
    $y2 = $68;
    $69 = $x2;
    $70 = $x1;
    $71 = ($69|0)==($70|0);
    $72 = $y2;
    if ($71) {
     $85 = $72;
    } else {
     $73 = $y1;
     $74 = (($72) - ($73))|0;
     $75 = $2;
     $76 = $x1;
     $77 = (($75) - ($76))|0;
     $78 = Math_imul($74, $77)|0;
     $79 = $x2;
     $80 = $x1;
     $81 = (($79) - ($80))|0;
     $82 = (($78|0) / ($81|0))&-1;
     $83 = $y1;
     $84 = (($82) + ($83))|0;
     $85 = $84;
    }
    $0 = $85;
    $86 = $0;
    STACKTOP = sp;return ($86|0);
   }
  }
 }
 $17 = $3;
 $0 = $17;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _update_envelope($env,$x,$release,$key_off,$it_env) {
 $env = $env|0;
 $x = $x|0;
 $release = $release|0;
 $key_off = $key_off|0;
 $it_env = $it_env|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $release;
 $4 = $key_off;
 $5 = $it_env;
 $6 = $2;
 $7 = ($6|0)<(65535);
 if ($7) {
  $8 = $2;
  $9 = (($8) + 1)|0;
  $2 = $9;
 }
 $10 = $2;
 $11 = ($10|0)<(0);
 if ($11) {
  $0 = -1;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $12 = $1;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 ^ -1;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $1;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)<=(0);
  if (!($20)) {
   $22 = $5;
   $23 = ($22|0)!=(0);
   $24 = $1;
   $25 = $2;
   $26 = $3;
   if ($23) {
    $27 = $4;
    $28 = (_update_envelope_it($24,$25,$26,$27)|0);
    $30 = $28;
   } else {
    $29 = (_update_envelope_xm($24,$25,$26)|0);
    $30 = $29;
   }
   $0 = $30;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 }
 $21 = $2;
 $0 = $21;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _check_envelope_fade($env,$x) {
 $env = $env|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $env;
 $2 = $x;
 $3 = $1;
 $4 = ((($3)) + 28|0);
 $data = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 ^ -1;
 $8 = $7 & 1;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $0 = 0;
  } else {
   $10 = $1;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) - 1)|0;
   $14 = $13<<1;
   $index = $14;
   $15 = $2;
   $16 = $index;
   $17 = $data;
   $18 = (($17) + ($16<<1)|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $21 = ($15|0)>($20|0);
   if (!($21)) {
    $0 = 0;
    break;
   }
   $22 = $index;
   $23 = (($22) + 1)|0;
   $24 = $data;
   $25 = (($24) + ($23<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = ($27|0)==(0);
   if ($28) {
    $0 = -1;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _update_envelope_it($env,$x,$release,$key_off) {
 $env = $env|0;
 $x = $x|0;
 $release = $release|0;
 $key_off = $key_off|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $data = 0, $has_loop = 0, $has_sus = 0;
 var $lpe = 0, $lps = 0, $or$cond = 0, $or$cond3 = 0, $sue = 0, $sus = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $env;
 $1 = $x;
 $2 = $release;
 $3 = $key_off;
 $4 = $0;
 $5 = ((($4)) + 28|0);
 $data = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 4;
 $has_loop = $8;
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2;
 $has_sus = $11;
 $12 = $0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 1;
 $lps = $15;
 $16 = $0;
 $17 = ((($16)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 1;
 $lpe = $19;
 $20 = $0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 << 1;
 $sus = $23;
 $24 = $0;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 << 1;
 $sue = $27;
 $28 = $has_sus;
 $29 = ($28|0)!=(0);
 $30 = $3;
 $31 = ($30|0)!=(0);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = $1;
  $33 = $sue;
  $34 = $data;
  $35 = (($34) + ($33<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = (($37) + 1)|0;
  $39 = ($32|0)==($38|0);
  if ($39) {
   $40 = $sus;
   $41 = $data;
   $42 = (($41) + ($40<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 << 16 >> 16;
   $1 = $44;
   $76 = $1;
   STACKTOP = sp;return ($76|0);
  }
 }
 $45 = $has_sus;
 $46 = ($45|0)==(0);
 $47 = $2;
 $48 = ($47|0)!=(0);
 $or$cond3 = $46 | $48;
 if (!($or$cond3)) {
  $49 = $1;
  $50 = $sue;
  $51 = $data;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = (($54) + 1)|0;
  $56 = ($49|0)==($55|0);
  if (!($56)) {
   $76 = $1;
   STACKTOP = sp;return ($76|0);
  }
  $57 = $sus;
  $58 = $data;
  $59 = (($58) + ($57<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $1 = $61;
  $76 = $1;
  STACKTOP = sp;return ($76|0);
 }
 $62 = $has_loop;
 $63 = ($62|0)!=(0);
 if (!($63)) {
  $76 = $1;
  STACKTOP = sp;return ($76|0);
 }
 $64 = $1;
 $65 = $lpe;
 $66 = $data;
 $67 = (($66) + ($65<<1)|0);
 $68 = HEAP16[$67>>1]|0;
 $69 = $68 << 16 >> 16;
 $70 = ($64|0)>($69|0);
 if (!($70)) {
  $76 = $1;
  STACKTOP = sp;return ($76|0);
 }
 $71 = $lps;
 $72 = $data;
 $73 = (($72) + ($71<<1)|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74 << 16 >> 16;
 $1 = $75;
 $76 = $1;
 STACKTOP = sp;return ($76|0);
}
function _update_envelope_xm($env,$x,$release) {
 $env = $env|0;
 $x = $x|0;
 $release = $release|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $has_loop = 0, $has_sus = 0, $lpe = 0, $lps = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $sus = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $env;
 $1 = $x;
 $2 = $release;
 $3 = $0;
 $4 = ((($3)) + 28|0);
 $data = $4;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $has_loop = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 2;
 $has_sus = $10;
 $11 = $0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 1;
 $lps = $14;
 $15 = $0;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 << 1;
 $lpe = $18;
 $19 = $0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 << 1;
 $sus = $22;
 $23 = $has_loop;
 $24 = ($23|0)!=(0);
 $25 = $has_sus;
 $26 = ($25|0)!=(0);
 $or$cond = $24 & $26;
 if ($or$cond) {
  $27 = $sus;
  $28 = $lpe;
  $29 = ($27|0)!=($28|0);
  $30 = $2;
  $31 = ($30|0)!=(0);
  $or$cond7 = $29 | $31;
  if (!($or$cond7)) {
   $has_sus = 0;
  }
 }
 $32 = $has_sus;
 $33 = ($32|0)==(0);
 $34 = $2;
 $35 = ($34|0)!=(0);
 $or$cond3 = $33 | $35;
 if (!($or$cond3)) {
  $36 = $1;
  $37 = $sus;
  $38 = $data;
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = ($36|0)>=($41|0);
  if ($42) {
   $43 = $sus;
   $44 = $data;
   $45 = (($44) + ($43<<1)|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46 << 16 >> 16;
   $1 = $47;
  }
 }
 $48 = $has_loop;
 $49 = ($48|0)!=(0);
 if (!($49)) {
  $69 = $1;
  STACKTOP = sp;return ($69|0);
 }
 $50 = $1;
 $51 = $lpe;
 $52 = $data;
 $53 = (($52) + ($51<<1)|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54 << 16 >> 16;
 $56 = ($50|0)>=($55|0);
 if (!($56)) {
  $69 = $1;
  STACKTOP = sp;return ($69|0);
 }
 $57 = $2;
 $58 = ($57|0)!=(0);
 $59 = $has_sus;
 $60 = ($59|0)!=(0);
 $or$cond5 = $58 & $60;
 if ($or$cond5) {
  $61 = $sus;
  $62 = $lpe;
  $63 = ($61|0)==($62|0);
  if ($63) {
   $69 = $1;
   STACKTOP = sp;return ($69|0);
  }
 }
 $64 = $lps;
 $65 = $data;
 $66 = (($65) + ($64<<1)|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67 << 16 >> 16;
 $1 = $68;
 $69 = $1;
 STACKTOP = sp;return ($69|0);
}
function _get_sequence($ctx,$ord) {
 $ctx = $ctx|0;
 $ord = $ord|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $ord;
 $2 = $0;
 $p = $2;
 $3 = $1;
 $4 = $p;
 $5 = ((($4)) + 56|0);
 $6 = (($5) + ($3)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 STACKTOP = sp;return ($8|0);
}
function _scan_sequences($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $ep = 0, $i = 0, $m = 0, $mod = 0, $or$cond = 0, $p = 0, $seq = 0, $temp_ep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp_ep = sp + 32|0;
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $ep = 0;
 $5 = $p;
 $6 = ((($5)) + 56|0);
 _memset(($6|0),-1,256)|0;
 HEAP8[$temp_ep>>0] = 0;
 $7 = $0;
 $8 = $ep;
 $9 = (_scan_module($7,$8,0)|0);
 $10 = $p;
 $11 = ((($10)) + 364|0);
 HEAP32[$11>>2] = $9;
 $seq = 1;
 while(1) {
  $i = 0;
  while(1) {
   $12 = $i;
   $13 = $mod;
   $14 = ((($13)) + 156|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($12|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $i;
   $18 = $p;
   $19 = ((($18)) + 56|0);
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)==(255);
   if ($23) {
    break;
   }
   $24 = $i;
   $25 = (($24) + 1)|0;
   $i = $25;
  }
  $26 = $i;
  $27 = $mod;
  $28 = ((($27)) + 156|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)!=($29|0);
  $31 = $seq;
  $32 = ($31|0)<(16);
  $or$cond = $30 & $32;
  if (!($or$cond)) {
   break;
  }
  $33 = $i;
  $ep = $33;
  $34 = $ep;
  $35 = $34&255;
  $36 = $seq;
  $37 = (($temp_ep) + ($36)|0);
  HEAP8[$37>>0] = $35;
  $38 = $0;
  $39 = $ep;
  $40 = $seq;
  $41 = (_scan_module($38,$39,$40)|0);
  $42 = $seq;
  $43 = $p;
  $44 = ((($43)) + 364|0);
  $45 = (($44) + ($42<<4)|0);
  HEAP32[$45>>2] = $41;
  $46 = $seq;
  $47 = $p;
  $48 = ((($47)) + 364|0);
  $49 = (($48) + ($46<<4)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)>(0);
  if (!($51)) {
   continue;
  }
  $52 = $seq;
  $53 = (($52) + 1)|0;
  $seq = $53;
 }
 $54 = $seq;
 $55 = $m;
 $56 = ((($55)) + 7444|0);
 HEAP32[$56>>2] = $54;
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = $m;
  $59 = ((($58)) + 7444|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($57|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $i;
  $63 = (($temp_ep) + ($62)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $i;
  $67 = $m;
  $68 = ((($67)) + 7448|0);
  $69 = (($68) + ($66<<3)|0);
  HEAP32[$69>>2] = $65;
  $70 = $i;
  $71 = $p;
  $72 = ((($71)) + 364|0);
  $73 = (($72) + ($70<<4)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $i;
  $76 = $m;
  $77 = ((($76)) + 7448|0);
  $78 = (($77) + ($75<<3)|0);
  $79 = ((($78)) + 4|0);
  HEAP32[$79>>2] = $74;
  $80 = $i;
  $81 = (($80) + 1)|0;
  $i = $81;
 }
 STACKTOP = sp;return 0;
}
function _scan_module($ctx,$ep,$chain) {
 $ctx = $ctx|0;
 $ep = $ep|0;
 $chain = $chain|0;
 var $$ = 0, $$32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0.0, $538 = 0.0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0.0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0, $588 = 0.0, $589 = 0.0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0.0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0.0, $62 = 0, $620 = 0, $621 = 0.0, $622 = 0.0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0.0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0.0, $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0.0;
 var $673 = 0.0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0.0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0.0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0.0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0.0, $873 = 0, $874 = 0.0, $875 = 0.0, $876 = 0, $877 = 0.0, $878 = 0.0, $879 = 0, $88 = 0, $880 = 0.0, $881 = 0.0, $882 = 0.0, $883 = 0, $884 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base_time = 0, $bpm = 0, $break_row = 0, $chn = 0, $event = 0, $f1 = 0, $f2 = 0, $frame_count = 0, $gvl = 0, $gvol_memory = 0, $h = 0, $i = 0, $info = 0;
 var $inside_loop = 0, $l = 0, $last_row = 0, $loop_chn = 0, $loop_count = 0, $loop_num = 0, $loop_row = 0, $m = 0, $mod = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0;
 var $or$cond3 = 0, $or$cond31 = 0, $or$cond34 = 0, $or$cond36 = 0, $or$cond38 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $ord = 0, $ord2 = 0, $p = 0, $p1 = 0, $p2 = 0, $parm = 0, $pat = 0, $pat1 = 0, $pdelay = 0, $row = 0, $row_count = 0;
 var $speed = 0, $st26_speed = 0, $start_time = 0.0, $time = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $loop_count = sp + 304|0;
 $loop_row = sp + 48|0;
 $1 = $ctx;
 $2 = $ep;
 $3 = $chain;
 $4 = $1;
 $p = $4;
 $5 = $1;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $m;
 $mod = $7;
 $pdelay = 0;
 $8 = $mod;
 $9 = ((($8)) + 156|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $0 = 0;
  $884 = $0;
  STACKTOP = sp;return ($884|0);
 }
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $mod;
  $14 = ((($13)) + 156|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $mod;
  $19 = ((($18)) + 952|0);
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $pat1 = $22;
  $23 = $i;
  $24 = $m;
  $25 = ((($24)) + 7592|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($23<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $pat1;
  $30 = $mod;
  $31 = ((($30)) + 128|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)>=($32|0);
  if ($33) {
   $49 = 1;
  } else {
   $34 = $pat1;
   $35 = $mod;
   $36 = ((($35)) + 168|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + ($34<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $pat1;
    $43 = $mod;
    $44 = ((($43)) + 168|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + ($42<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = $48;
   } else {
    $49 = 1;
   }
  }
  _memset(($28|0),0,($49|0))|0;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = $mod;
  $54 = ((($53)) + 136|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $i;
  $58 = (($loop_count) + ($57<<2)|0);
  HEAP32[$58>>2] = 0;
  $59 = $i;
  $60 = (($loop_row) + ($59<<2)|0);
  HEAP32[$60>>2] = -1;
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $loop_num = 0;
 $loop_chn = -1;
 $63 = $mod;
 $64 = ((($63)) + 164|0);
 $65 = HEAP32[$64>>2]|0;
 $gvl = $65;
 $66 = $mod;
 $67 = ((($66)) + 152|0);
 $68 = HEAP32[$67>>2]|0;
 $bpm = $68;
 $69 = $mod;
 $70 = ((($69)) + 148|0);
 $71 = HEAP32[$70>>2]|0;
 $speed = $71;
 $72 = $m;
 $73 = ((($72)) + 1248|0);
 $74 = +HEAPF64[$73>>3];
 $75 = (~~(($74)));
 $base_time = $75;
 $st26_speed = 0;
 $ord2 = -1;
 $76 = $2;
 $77 = (($76) - 1)|0;
 $ord = $77;
 $frame_count = 0;
 $row_count = 0;
 $break_row = 0;
 $gvol_memory = 0;
 $time = 0.0;
 $start_time = 0.0;
 $inside_loop = 0;
 L17: while(1) {
  $78 = $ord;
  $79 = (($78) + 1)|0;
  $ord = $79;
  $80 = $mod;
  $81 = ((($80)) + 156|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79>>>0)>=($82>>>0);
  if ($83) {
   $84 = $mod;
   $85 = ((($84)) + 160|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $mod;
   $88 = ((($87)) + 156|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($86|0)>($89|0);
   do {
    if ($90) {
     label = 16;
    } else {
     $91 = $mod;
     $92 = ((($91)) + 160|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = $mod;
     $95 = ((($94)) + 952|0);
     $96 = (($95) + ($93)|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = $mod;
     $100 = ((($99)) + 128|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($98|0)>=($101|0);
     if ($102) {
      label = 16;
     } else {
      $104 = $1;
      $105 = $mod;
      $106 = ((($105)) + 160|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (_get_sequence($104,$107)|0);
      $109 = $3;
      $110 = ($108|0)==($109|0);
      if ($110) {
       $111 = $mod;
       $112 = ((($111)) + 160|0);
       $113 = HEAP32[$112>>2]|0;
       $ord = $113;
       break;
      } else {
       $114 = $2;
       $ord = $114;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 16) {
    label = 0;
    $103 = $2;
    $ord = $103;
   }
   $115 = $ord;
   $116 = $mod;
   $117 = ((($116)) + 952|0);
   $118 = (($117) + ($115)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $pat = $120;
   $121 = $pat;
   $122 = ($121|0)==(255);
   if ($122) {
    label = 135;
    break;
   }
  }
  $123 = $ord;
  $124 = $mod;
  $125 = ((($124)) + 952|0);
  $126 = (($125) + ($123)|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $pat = $128;
  $129 = $ord;
  $130 = $m;
  $131 = ((($130)) + 1300|0);
  $132 = (($131) + (($129*24)|0)|0);
  $info = $132;
  $133 = $2;
  $134 = ($133|0)!=(0);
  if ($134) {
   $135 = $ord;
   $136 = $p;
   $137 = ((($136)) + 56|0);
   $138 = (($137) + ($135)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = ($140|0)!=(255);
   if ($141) {
    label = 135;
    break;
   }
  }
  $142 = $3;
  $143 = $142&255;
  $144 = $ord;
  $145 = $p;
  $146 = ((($145)) + 56|0);
  $147 = (($146) + ($144)|0);
  HEAP8[$147>>0] = $143;
  $148 = $pat;
  $149 = $mod;
  $150 = ((($149)) + 128|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($148|0)>=($151|0);
  if ($152) {
   $153 = $pat;
   $154 = ($153|0)==(255);
   if (!($154)) {
    continue;
   }
   $155 = $mod;
   $156 = ((($155)) + 156|0);
   $157 = HEAP32[$156>>2]|0;
   $ord = $157;
   continue;
  }
  $158 = $break_row;
  $159 = $pat;
  $160 = $mod;
  $161 = ((($160)) + 168|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + ($159<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = HEAP32[$164>>2]|0;
  $166 = ($158|0)>=($165|0);
  if ($166) {
   $break_row = 0;
  }
  $167 = $break_row;
  $168 = $ord;
  $169 = $m;
  $170 = ((($169)) + 7592|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + ($168<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + ($167)|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175 << 24 >> 24;
  $177 = ($176|0)==(0);
  $178 = $inside_loop;
  $179 = ($178|0)!=(0);
  $or$cond = $177 | $179;
  if (!($or$cond)) {
   label = 135;
   break;
  }
  $180 = $inside_loop;
  $181 = ($180|0)!=(0);
  if (!($181)) {
   $182 = $gvl;
   $183 = $info;
   $184 = ((($183)) + 8|0);
   HEAP32[$184>>2] = $182;
   $185 = $bpm;
   $186 = $info;
   $187 = ((($186)) + 4|0);
   HEAP32[$187>>2] = $185;
   $188 = $speed;
   $189 = $info;
   HEAP32[$189>>2] = $188;
   $190 = $time;
   $191 = $m;
   $192 = ((($191)) + 1256|0);
   $193 = +HEAPF64[$192>>3];
   $194 = $frame_count;
   $195 = (+($194|0));
   $196 = $193 * $195;
   $197 = $base_time;
   $198 = (+($197|0));
   $199 = $196 * $198;
   $200 = $bpm;
   $201 = (+($200|0));
   $202 = $199 / $201;
   $203 = $190 + $202;
   $204 = (~~(($203)));
   $205 = $info;
   $206 = ((($205)) + 12|0);
   HEAP32[$206>>2] = $204;
   $207 = $st26_speed;
   $208 = $info;
   $209 = ((($208)) + 20|0);
   HEAP32[$209>>2] = $207;
  }
  $210 = $info;
  $211 = ((($210)) + 16|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ($212|0)==(0);
  $214 = $ord;
  $215 = ($214|0)!=(0);
  $or$cond3 = $213 & $215;
  if ($or$cond3) {
   $216 = $ord;
   $217 = $2;
   $218 = ($216|0)==($217|0);
   if ($218) {
    $219 = $time;
    $220 = $m;
    $221 = ((($220)) + 1256|0);
    $222 = +HEAPF64[$221>>3];
    $223 = $frame_count;
    $224 = (+($223|0));
    $225 = $222 * $224;
    $226 = $base_time;
    $227 = (+($226|0));
    $228 = $225 * $227;
    $229 = $bpm;
    $230 = (+($229|0));
    $231 = $228 / $230;
    $232 = $219 + $231;
    $start_time = $232;
   }
   $233 = $break_row;
   $234 = $info;
   $235 = ((($234)) + 16|0);
   HEAP32[$235>>2] = $233;
  }
  $236 = $pat;
  $237 = $mod;
  $238 = ((($237)) + 168|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = (($239) + ($236<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = HEAP32[$241>>2]|0;
  $last_row = $242;
  $243 = $break_row;
  $row = $243;
  $break_row = 0;
  while(1) {
   $244 = $row;
   $245 = $last_row;
   $246 = ($244|0)<($245|0);
   if (!($246)) {
    break;
   }
   $247 = $bpm;
   $248 = ($247|0)<(20);
   if ($248) {
    $bpm = 20;
   }
   $249 = $row_count;
   $250 = ($249|0)>(512);
   if ($250) {
    break L17;
   }
   $251 = $loop_num;
   $252 = ($251|0)!=(0);
   if (!($252)) {
    $253 = $row;
    $254 = $ord;
    $255 = $m;
    $256 = ((($255)) + 7592|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = (($257) + ($254<<2)|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = (($259) + ($253)|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = $261 << 24 >> 24;
    $263 = ($262|0)!=(0);
    if ($263) {
     label = 42;
     break L17;
    }
   }
   $266 = $row;
   $267 = $ord;
   $268 = $m;
   $269 = ((($268)) + 7592|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = (($270) + ($267<<2)|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + ($266)|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = (($274) + 1)<<24>>24;
   HEAP8[$273>>0] = $275;
   $pdelay = 0;
   $chn = 0;
   while(1) {
    $276 = $chn;
    $277 = $mod;
    $278 = ((($277)) + 136|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ($276|0)<($279|0);
    if (!($280)) {
     break;
    }
    $281 = $row;
    $282 = $chn;
    $283 = $pat;
    $284 = $mod;
    $285 = ((($284)) + 168|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($286) + ($283<<2)|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = ((($288)) + 4|0);
    $290 = (($289) + ($282<<2)|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = $mod;
    $293 = ((($292)) + 172|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = (($294) + ($291<<2)|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = HEAP32[$296>>2]|0;
    $298 = ($281|0)>=($297|0);
    do {
     if (!($298)) {
      $299 = $row;
      $300 = $chn;
      $301 = $ord;
      $302 = $mod;
      $303 = ((($302)) + 952|0);
      $304 = (($303) + ($301)|0);
      $305 = HEAP8[$304>>0]|0;
      $306 = $305&255;
      $307 = $m;
      $308 = ((($307)) + 168|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (($309) + ($306<<2)|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = ((($311)) + 4|0);
      $313 = (($312) + ($300<<2)|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $m;
      $316 = ((($315)) + 172|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = (($317) + ($314<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ((($319)) + 4|0);
      $321 = (($320) + ($299<<3)|0);
      $event = $321;
      $322 = $event;
      $323 = ((($322)) + 3|0);
      $324 = HEAP8[$323>>0]|0;
      $325 = $324&255;
      $f1 = $325;
      $326 = $event;
      $327 = ((($326)) + 4|0);
      $328 = HEAP8[$327>>0]|0;
      $329 = $328&255;
      $p1 = $329;
      $330 = $event;
      $331 = ((($330)) + 5|0);
      $332 = HEAP8[$331>>0]|0;
      $333 = $332&255;
      $f2 = $333;
      $334 = $event;
      $335 = ((($334)) + 6|0);
      $336 = HEAP8[$335>>0]|0;
      $337 = $336&255;
      $p2 = $337;
      $338 = $f1;
      $339 = ($338|0)==(16);
      $340 = $f2;
      $341 = ($340|0)==(16);
      $or$cond5 = $339 | $341;
      if ($or$cond5) {
       $342 = $f1;
       $343 = ($342|0)==(16);
       $344 = $p1;
       $345 = $p2;
       $346 = $343 ? $344 : $345;
       $gvl = $346;
       $347 = $gvl;
       $348 = $m;
       $349 = ((($348)) + 1272|0);
       $350 = HEAP32[$349>>2]|0;
       $351 = ($347|0)>($350|0);
       if ($351) {
        $352 = $m;
        $353 = ((($352)) + 1272|0);
        $354 = HEAP32[$353>>2]|0;
        $359 = $354;
       } else {
        $355 = $gvl;
        $356 = ($355|0)<(0);
        $357 = $gvl;
        $358 = $356 ? 0 : $357;
        $359 = $358;
       }
       $gvl = $359;
      }
      $360 = $f1;
      $361 = ($360|0)==(17);
      $362 = $f2;
      $363 = ($362|0)==(17);
      $or$cond7 = $361 | $363;
      L73: do {
       if ($or$cond7) {
        $364 = $f1;
        $365 = ($364|0)==(17);
        $366 = $p1;
        $367 = $p2;
        $368 = $365 ? $366 : $367;
        $parm = $368;
        while(1) {
         $369 = $parm;
         $370 = ($369|0)!=(0);
         if ($370) {
          break;
         }
         $427 = $gvol_memory;
         $parm = $427;
         $428 = ($427|0)!=(0);
         if (!($428)) {
          break L73;
         }
        }
        $371 = $parm;
        $gvol_memory = $371;
        $372 = $parm;
        $373 = $372 & 240;
        $374 = $373 >> 4;
        $h = $374;
        $375 = $parm;
        $376 = $375 & 15;
        $l = $376;
        $377 = $m;
        $378 = ((($377)) + 1284|0);
        $379 = HEAP32[$378>>2]|0;
        $380 = $379 & 32;
        $381 = ($380|0)!=(0);
        if (!($381)) {
         $411 = $m;
         $412 = ((($411)) + 1284|0);
         $413 = HEAP32[$412>>2]|0;
         $414 = $413 & 64;
         $415 = ($414|0)!=(0);
         $416 = $h;
         $417 = $l;
         $418 = (($416) - ($417))|0;
         $419 = $speed;
         if ($415) {
          $420 = Math_imul($418, $419)|0;
          $421 = $gvl;
          $422 = (($421) + ($420))|0;
          $gvl = $422;
          break;
         } else {
          $423 = (($419) - 1)|0;
          $424 = Math_imul($418, $423)|0;
          $425 = $gvl;
          $426 = (($425) + ($424))|0;
          $gvl = $426;
          break;
         }
        }
        $382 = $l;
        $383 = ($382|0)==(15);
        $384 = $h;
        $385 = ($384|0)!=(0);
        $or$cond9 = $383 & $385;
        $386 = $h;
        if ($or$cond9) {
         $387 = $gvl;
         $388 = (($387) + ($386))|0;
         $gvl = $388;
         break;
        }
        $389 = ($386|0)==(15);
        $390 = $l;
        $391 = ($390|0)!=(0);
        $or$cond11 = $389 & $391;
        if ($or$cond11) {
         $392 = $l;
         $393 = $gvl;
         $394 = (($393) - ($392))|0;
         $gvl = $394;
         break;
        }
        $395 = $m;
        $396 = ((($395)) + 1284|0);
        $397 = HEAP32[$396>>2]|0;
        $398 = $397 & 64;
        $399 = ($398|0)!=(0);
        $400 = $h;
        $401 = $l;
        $402 = (($400) - ($401))|0;
        $403 = $speed;
        if ($399) {
         $404 = Math_imul($402, $403)|0;
         $405 = $gvl;
         $406 = (($405) + ($404))|0;
         $gvl = $406;
         break;
        } else {
         $407 = (($403) - 1)|0;
         $408 = Math_imul($402, $407)|0;
         $409 = $gvl;
         $410 = (($409) + ($408))|0;
         $gvl = $410;
         break;
        }
       }
      } while(0);
      $429 = $f1;
      $430 = ($429|0)==(15);
      $431 = $p1;
      $432 = ($431|0)!=(0);
      $or$cond13 = $430 & $432;
      if ($or$cond13) {
       label = 68;
      } else {
       $433 = $f2;
       $434 = ($433|0)==(15);
       $435 = $p2;
       $436 = ($435|0)!=(0);
       $or$cond15 = $434 & $436;
       if ($or$cond15) {
        label = 68;
       }
      }
      do {
       if ((label|0) == 68) {
        label = 0;
        $437 = $f1;
        $438 = ($437|0)==(15);
        $439 = $p1;
        $440 = $p2;
        $441 = $438 ? $439 : $440;
        $parm = $441;
        $442 = $row_count;
        $443 = $speed;
        $444 = Math_imul($442, $443)|0;
        $445 = $frame_count;
        $446 = (($445) + ($444))|0;
        $frame_count = $446;
        $row_count = 0;
        $447 = $parm;
        $448 = ($447|0)!=(0);
        if (!($448)) {
         break;
        }
        $449 = $p;
        $450 = ((($449)) + 28|0);
        $451 = HEAP32[$450>>2]|0;
        $452 = $451 & 1;
        $453 = ($452|0)!=(0);
        $454 = $parm;
        $455 = ($454|0)<(32);
        $or$cond17 = $453 | $455;
        if (!($or$cond17)) {
         $459 = $m;
         $460 = ((($459)) + 1256|0);
         $461 = +HEAPF64[$460>>3];
         $462 = $frame_count;
         $463 = (+($462|0));
         $464 = $461 * $463;
         $465 = $base_time;
         $466 = (+($465|0));
         $467 = $464 * $466;
         $468 = $bpm;
         $469 = (+($468|0));
         $470 = $467 / $469;
         $471 = $time;
         $472 = $471 + $470;
         $time = $472;
         $frame_count = 0;
         $473 = $parm;
         $bpm = $473;
         break;
        }
        $456 = $parm;
        $457 = ($456|0)>(0);
        if (!($457)) {
         break;
        }
        $458 = $parm;
        $speed = $458;
        $st26_speed = 0;
       }
      } while(0);
      $474 = $f1;
      $475 = ($474|0)==(126);
      if ($475) {
       $f1 = 163;
      }
      $476 = $f2;
      $477 = ($476|0)==(126);
      if ($477) {
       $f2 = 163;
      }
      $478 = $f1;
      $479 = ($478|0)==(162);
      $480 = $p1;
      $481 = ($480|0)!=(0);
      $or$cond19 = $479 & $481;
      do {
       if ($or$cond19) {
        $482 = $p1;
        $483 = $482 & 15;
        $484 = ($483|0)!=(0);
        $485 = $p1;
        $486 = $485 & 240;
        $487 = $486 >> 4;
        if ($484) {
         $488 = $487 << 8;
         $489 = $p1;
         $490 = $489 & 15;
         $491 = $488 | $490;
         $st26_speed = $491;
         break;
        } else {
         $st26_speed = $487;
         break;
        }
       }
      } while(0);
      $492 = $f1;
      $493 = ($492|0)==(163);
      $494 = $p1;
      $495 = ($494|0)!=(0);
      $or$cond21 = $493 & $495;
      if ($or$cond21) {
       label = 83;
      } else {
       $496 = $f2;
       $497 = ($496|0)==(163);
       $498 = $p2;
       $499 = ($498|0)!=(0);
       $or$cond23 = $497 & $499;
       if ($or$cond23) {
        label = 83;
       }
      }
      do {
       if ((label|0) == 83) {
        label = 0;
        $500 = $f1;
        $501 = ($500|0)==(163);
        $502 = $p1;
        $503 = $p2;
        $504 = $501 ? $502 : $503;
        $parm = $504;
        $505 = $parm;
        $506 = ($505|0)>(0);
        if (!($506)) {
         break;
        }
        $507 = $row_count;
        $508 = $speed;
        $509 = Math_imul($507, $508)|0;
        $510 = $frame_count;
        $511 = (($510) + ($509))|0;
        $frame_count = $511;
        $row_count = 0;
        $512 = $parm;
        $speed = $512;
        $st26_speed = 0;
       }
      } while(0);
      $513 = $f1;
      $514 = ($513|0)==(171);
      $515 = $p1;
      $516 = ($515|0)!=(0);
      $or$cond25 = $514 & $516;
      if ($or$cond25) {
       label = 87;
      } else {
       $517 = $f2;
       $518 = ($517|0)==(171);
       $519 = $p2;
       $520 = ($519|0)!=(0);
       $or$cond27 = $518 & $520;
       if ($or$cond27) {
        label = 87;
       }
      }
      do {
       if ((label|0) == 87) {
        label = 0;
        $521 = $f1;
        $522 = ($521|0)==(171);
        $523 = $p1;
        $524 = $p2;
        $525 = $522 ? $523 : $524;
        $parm = $525;
        $526 = $parm;
        $527 = ($526|0)>=(32);
        if (!($527)) {
         break;
        }
        $528 = $row_count;
        $529 = $speed;
        $530 = Math_imul($528, $529)|0;
        $531 = $frame_count;
        $532 = (($531) + ($530))|0;
        $frame_count = $532;
        $row_count = 0;
        $533 = $m;
        $534 = ((($533)) + 1256|0);
        $535 = +HEAPF64[$534>>3];
        $536 = $frame_count;
        $537 = (+($536|0));
        $538 = $535 * $537;
        $539 = $base_time;
        $540 = (+($539|0));
        $541 = $538 * $540;
        $542 = $bpm;
        $543 = (+($542|0));
        $544 = $541 / $543;
        $545 = $time;
        $546 = $545 + $544;
        $time = $546;
        $frame_count = 0;
        $547 = $parm;
        $bpm = $547;
       }
      } while(0);
      $548 = $f1;
      $549 = ($548|0)==(135);
      $550 = $p1;
      $551 = ($550|0)!=(0);
      $or$cond29 = $549 & $551;
      if ($or$cond29) {
       label = 91;
      } else {
       $552 = $f2;
       $553 = ($552|0)==(135);
       $554 = $p2;
       $555 = ($554|0)!=(0);
       $or$cond31 = $553 & $555;
       if ($or$cond31) {
        label = 91;
       }
      }
      do {
       if ((label|0) == 91) {
        label = 0;
        $556 = $f1;
        $557 = ($556|0)==(135);
        $558 = $p1;
        $559 = $p2;
        $560 = $557 ? $558 : $559;
        $parm = $560;
        $561 = $row_count;
        $562 = $speed;
        $563 = Math_imul($561, $562)|0;
        $564 = $frame_count;
        $565 = (($564) + ($563))|0;
        $frame_count = $565;
        $row_count = 0;
        $566 = $m;
        $567 = ((($566)) + 1256|0);
        $568 = +HEAPF64[$567>>3];
        $569 = $frame_count;
        $570 = (+($569|0));
        $571 = $568 * $570;
        $572 = $base_time;
        $573 = (+($572|0));
        $574 = $571 * $573;
        $575 = $bpm;
        $576 = (+($575|0));
        $577 = $574 / $576;
        $578 = $time;
        $579 = $578 + $577;
        $time = $579;
        $frame_count = 0;
        $580 = $parm;
        $581 = $580 & 240;
        $582 = $581 >> 4;
        $583 = ($582|0)==(0);
        if ($583) {
         $584 = $m;
         $585 = ((($584)) + 1256|0);
         $586 = +HEAPF64[$585>>3];
         $587 = $base_time;
         $588 = (+($587|0));
         $589 = $586 * $588;
         $590 = $bpm;
         $591 = (+($590|0));
         $592 = $589 / $591;
         $593 = $time;
         $594 = $593 + $592;
         $time = $594;
         $i = 1;
         while(1) {
          $595 = $i;
          $596 = $speed;
          $597 = ($595|0)<($596|0);
          if (!($597)) {
           break;
          }
          $598 = $parm;
          $599 = $598 & 15;
          $600 = $bpm;
          $601 = (($600) - ($599))|0;
          $bpm = $601;
          $602 = $bpm;
          $603 = ($602|0)<(32);
          $$ = $603 ? 32 : $601;
          $bpm = $$;
          $604 = $m;
          $605 = ((($604)) + 1256|0);
          $606 = +HEAPF64[$605>>3];
          $607 = $base_time;
          $608 = (+($607|0));
          $609 = $606 * $608;
          $610 = $bpm;
          $611 = (+($610|0));
          $612 = $609 / $611;
          $613 = $time;
          $614 = $613 + $612;
          $time = $614;
          $615 = $i;
          $616 = (($615) + 1)|0;
          $i = $616;
         }
         $617 = $m;
         $618 = ((($617)) + 1256|0);
         $619 = +HEAPF64[$618>>3];
         $620 = $speed;
         $621 = (+($620|0));
         $622 = $619 * $621;
         $623 = $base_time;
         $624 = (+($623|0));
         $625 = $622 * $624;
         $626 = $bpm;
         $627 = (+($626|0));
         $628 = $625 / $627;
         $629 = $time;
         $630 = $629 - $628;
         $time = $630;
         break;
        }
        $631 = $parm;
        $632 = $631 & 240;
        $633 = $632 >> 4;
        $634 = ($633|0)==(1);
        if (!($634)) {
         $682 = $parm;
         $bpm = $682;
         break;
        }
        $635 = $m;
        $636 = ((($635)) + 1256|0);
        $637 = +HEAPF64[$636>>3];
        $638 = $base_time;
        $639 = (+($638|0));
        $640 = $637 * $639;
        $641 = $bpm;
        $642 = (+($641|0));
        $643 = $640 / $642;
        $644 = $time;
        $645 = $644 + $643;
        $time = $645;
        $i = 1;
        while(1) {
         $646 = $i;
         $647 = $speed;
         $648 = ($646|0)<($647|0);
         if (!($648)) {
          break;
         }
         $649 = $parm;
         $650 = $649 & 15;
         $651 = $bpm;
         $652 = (($651) + ($650))|0;
         $bpm = $652;
         $653 = $bpm;
         $654 = ($653|0)>(255);
         $$32 = $654 ? 255 : $652;
         $bpm = $$32;
         $655 = $m;
         $656 = ((($655)) + 1256|0);
         $657 = +HEAPF64[$656>>3];
         $658 = $base_time;
         $659 = (+($658|0));
         $660 = $657 * $659;
         $661 = $bpm;
         $662 = (+($661|0));
         $663 = $660 / $662;
         $664 = $time;
         $665 = $664 + $663;
         $time = $665;
         $666 = $i;
         $667 = (($666) + 1)|0;
         $i = $667;
        }
        $668 = $m;
        $669 = ((($668)) + 1256|0);
        $670 = +HEAPF64[$669>>3];
        $671 = $speed;
        $672 = (+($671|0));
        $673 = $670 * $672;
        $674 = $base_time;
        $675 = (+($674|0));
        $676 = $673 * $675;
        $677 = $bpm;
        $678 = (+($677|0));
        $679 = $676 / $678;
        $680 = $time;
        $681 = $680 - $679;
        $time = $681;
       }
      } while(0);
      $683 = $f1;
      $684 = ($683|0)==(136);
      if ($684) {
       $685 = $p1;
       $686 = $685 & 15;
       $687 = $row;
       $688 = $ord;
       $689 = $m;
       $690 = ((($689)) + 7592|0);
       $691 = HEAP32[$690>>2]|0;
       $692 = (($691) + ($688<<2)|0);
       $693 = HEAP32[$692>>2]|0;
       $694 = (($693) + ($687)|0);
       $695 = HEAP8[$694>>0]|0;
       $696 = $695 << 24 >> 24;
       $697 = (($696) + ($686))|0;
       $698 = $697&255;
       HEAP8[$694>>0] = $698;
       $699 = $p1;
       $700 = $699 & 15;
       $701 = $speed;
       $702 = Math_imul($700, $701)|0;
       $703 = $frame_count;
       $704 = (($703) + ($702))|0;
       $frame_count = $704;
      }
      $705 = $f1;
      $706 = ($705|0)==(11);
      $707 = $f2;
      $708 = ($707|0)==(11);
      $or$cond34 = $706 | $708;
      if ($or$cond34) {
       $709 = $f1;
       $710 = ($709|0)==(11);
       $711 = $p1;
       $712 = $p2;
       $713 = $710 ? $711 : $712;
       $ord2 = $713;
       $break_row = 0;
       $last_row = 0;
       $inside_loop = 0;
      }
      $714 = $f1;
      $715 = ($714|0)==(13);
      $716 = $f2;
      $717 = ($716|0)==(13);
      $or$cond36 = $715 | $717;
      if ($or$cond36) {
       $718 = $f1;
       $719 = ($718|0)==(13);
       $720 = $p1;
       $721 = $p2;
       $722 = $719 ? $720 : $721;
       $parm = $722;
       $723 = $parm;
       $724 = $723 & 240;
       $725 = $724 >> 4;
       $726 = ($725*10)|0;
       $727 = $parm;
       $728 = $727 & 15;
       $729 = (($726) + ($728))|0;
       $break_row = $729;
       $last_row = 0;
      }
      $730 = $f1;
      $731 = ($730|0)==(14);
      $732 = $f2;
      $733 = ($732|0)==(14);
      $or$cond38 = $731 | $733;
      if (!($or$cond38)) {
       break;
      }
      $734 = $f1;
      $735 = ($734|0)==(14);
      $736 = $p1;
      $737 = $p2;
      $738 = $735 ? $736 : $737;
      $parm = $738;
      $739 = $parm;
      $740 = $739 >> 4;
      $741 = ($740|0)==(14);
      if ($741) {
       $742 = $parm;
       $743 = $742 & 15;
       $pdelay = $743;
       $744 = $pdelay;
       $745 = $speed;
       $746 = Math_imul($744, $745)|0;
       $747 = $frame_count;
       $748 = (($747) + ($746))|0;
       $frame_count = $748;
      }
      $749 = $parm;
      $750 = $749 >> 4;
      $751 = ($750|0)==(6);
      if (!($751)) {
       break;
      }
      $752 = $parm;
      $753 = $752 & 15;
      $parm = $753;
      $754 = ($753|0)!=(0);
      if (!($754)) {
       $781 = $row;
       $782 = (($781) - 1)|0;
       $783 = $chn;
       $784 = (($loop_row) + ($783<<2)|0);
       HEAP32[$784>>2] = $782;
       $inside_loop = 1;
       $785 = $m;
       $786 = ((($785)) + 1284|0);
       $787 = HEAP32[$786>>2]|0;
       $788 = $787 & 67108864;
       $789 = ($788|0)!=(0);
       if (!($789)) {
        break;
       }
       $790 = $row;
       $break_row = $790;
       break;
      }
      $755 = $chn;
      $756 = (($loop_count) + ($755<<2)|0);
      $757 = HEAP32[$756>>2]|0;
      $758 = ($757|0)!=(0);
      if (!($758)) {
       $775 = $parm;
       $776 = $chn;
       $777 = (($loop_count) + ($776<<2)|0);
       HEAP32[$777>>2] = $775;
       $778 = $chn;
       $loop_chn = $778;
       $779 = $loop_num;
       $780 = (($779) + 1)|0;
       $loop_num = $780;
       break;
      }
      $759 = $chn;
      $760 = (($loop_count) + ($759<<2)|0);
      $761 = HEAP32[$760>>2]|0;
      $762 = (($761) + -1)|0;
      HEAP32[$760>>2] = $762;
      $763 = ($762|0)!=(0);
      if ($763) {
       $764 = $chn;
       $loop_chn = $764;
       break;
      }
      $765 = $loop_num;
      $766 = (($765) + -1)|0;
      $loop_num = $766;
      $inside_loop = 0;
      $767 = $m;
      $768 = ((($767)) + 1284|0);
      $769 = HEAP32[$768>>2]|0;
      $770 = $769 & 1;
      $771 = ($770|0)!=(0);
      if (!($771)) {
       break;
      }
      $772 = $row;
      $773 = $chn;
      $774 = (($loop_row) + ($773<<2)|0);
      HEAP32[$774>>2] = $772;
     }
    } while(0);
    $791 = $chn;
    $792 = (($791) + 1)|0;
    $chn = $792;
   }
   $793 = $loop_chn;
   $794 = ($793|0)>=(0);
   if ($794) {
    $795 = $loop_chn;
    $796 = (($loop_row) + ($795<<2)|0);
    $797 = HEAP32[$796>>2]|0;
    $row = $797;
    $loop_chn = -1;
   }
   $798 = $st26_speed;
   $799 = ($798|0)!=(0);
   if ($799) {
    $800 = $row_count;
    $801 = $speed;
    $802 = Math_imul($800, $801)|0;
    $803 = $frame_count;
    $804 = (($803) + ($802))|0;
    $frame_count = $804;
    $row_count = 0;
    $805 = $st26_speed;
    $806 = $805 & 65536;
    $807 = ($806|0)!=(0);
    $808 = $st26_speed;
    if ($807) {
     $809 = $808 & 65280;
     $810 = $809 >> 8;
     $speed = $810;
    } else {
     $811 = $808 & 255;
     $speed = $811;
    }
    $812 = $st26_speed;
    $813 = $812 ^ 65536;
    $st26_speed = $813;
   }
   $814 = $row;
   $815 = (($814) + 1)|0;
   $row = $815;
   $816 = $row_count;
   $817 = (($816) + 1)|0;
   $row_count = $817;
  }
  $818 = $break_row;
  $819 = ($818|0)!=(0);
  $820 = $pdelay;
  $821 = ($820|0)!=(0);
  $or$cond40 = $819 & $821;
  if ($or$cond40) {
   $822 = $break_row;
   $823 = (($822) + 1)|0;
   $break_row = $823;
  }
  $824 = $ord2;
  $825 = ($824|0)>=(0);
  if ($825) {
   $826 = $ord2;
   $827 = (($826) - 1)|0;
   $ord = $827;
   $ord2 = -1;
  }
  $828 = $row_count;
  $829 = $speed;
  $830 = Math_imul($828, $829)|0;
  $831 = $frame_count;
  $832 = (($831) + ($830))|0;
  $frame_count = $832;
  $row_count = 0;
 }
 if ((label|0) == 42) {
  $264 = $row_count;
  $265 = (($264) + -1)|0;
  $row_count = $265;
 }
 else if ((label|0) == 135) {
  $833 = $break_row;
  $row = $833;
 }
 $834 = $row;
 $835 = $ord;
 $836 = $m;
 $837 = ((($836)) + 7592|0);
 $838 = HEAP32[$837>>2]|0;
 $839 = (($838) + ($835<<2)|0);
 $840 = HEAP32[$839>>2]|0;
 $841 = (($840) + ($834)|0);
 $842 = HEAP8[$841>>0]|0;
 $843 = $842 << 24 >> 24;
 $844 = $3;
 $845 = $p;
 $846 = ((($845)) + 364|0);
 $847 = (($846) + ($844<<4)|0);
 $848 = ((($847)) + 12|0);
 HEAP32[$848>>2] = $843;
 $849 = $row;
 $850 = $3;
 $851 = $p;
 $852 = ((($851)) + 364|0);
 $853 = (($852) + ($850<<4)|0);
 $854 = ((($853)) + 8|0);
 HEAP32[$854>>2] = $849;
 $855 = $ord;
 $856 = $3;
 $857 = $p;
 $858 = ((($857)) + 364|0);
 $859 = (($858) + ($856<<4)|0);
 $860 = ((($859)) + 4|0);
 HEAP32[$860>>2] = $855;
 $861 = $start_time;
 $862 = $time;
 $863 = $862 - $861;
 $time = $863;
 $864 = $row_count;
 $865 = $speed;
 $866 = Math_imul($864, $865)|0;
 $867 = $frame_count;
 $868 = (($867) + ($866))|0;
 $frame_count = $868;
 $869 = $time;
 $870 = $m;
 $871 = ((($870)) + 1256|0);
 $872 = +HEAPF64[$871>>3];
 $873 = $frame_count;
 $874 = (+($873|0));
 $875 = $872 * $874;
 $876 = $base_time;
 $877 = (+($876|0));
 $878 = $875 * $877;
 $879 = $bpm;
 $880 = (+($879|0));
 $881 = $878 / $880;
 $882 = $869 + $881;
 $883 = (~~(($882)));
 $0 = $883;
 $884 = $0;
 STACKTOP = sp;return ($884|0);
}
function _xmp_create_context() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_calloc(1,9176)|0);
 $ctx = $1;
 $2 = $ctx;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $4 = $ctx;
  $5 = ((($4)) + 9172|0);
  HEAP32[$5>>2] = 0;
  $6 = $ctx;
  $7 = ((($6)) + 1552|0);
  $8 = ((($7)) + 1296|0);
  HEAP32[$8>>2] = 100;
  $9 = $ctx;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _xmp_free_context($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $ctx = $1;
 $2 = $ctx;
 $3 = ((($2)) + 9172|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = $0;
  _xmp_release_module($6);
 }
 $7 = $0;
 _free($7);
 STACKTOP = sp;return;
}
function _med_change_period($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ce = 0, $vib = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 432|0);
 $4 = HEAP32[$3>>2]|0;
 $ce = $4;
 $5 = $ce;
 $6 = ((($5)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 5;
 $9 = (12080 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $ce;
 $12 = ((($11)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($10, $13)|0;
 $15 = $14 >> 10;
 $vib = $15;
 $16 = $ce;
 $17 = ((($16)) + 64|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $ce;
 $20 = ((($19)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($18))|0;
 HEAP32[$20>>2] = $22;
 $23 = $ce;
 $24 = ((($23)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25|0) % 1024)&-1;
 HEAP32[$24>>2] = $26;
 $27 = $vib;
 STACKTOP = sp;return ($27|0);
}
function _med_linear_bend($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $arp = 0, $ce = 0, $m = 0, $me = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $xc;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $6 = ((($5)) + 7580|0);
 $7 = HEAP32[$6>>2]|0;
 $me = $7;
 $8 = $2;
 $9 = ((($8)) + 432|0);
 $10 = HEAP32[$9>>2]|0;
 $ce = $10;
 $11 = $ce;
 $12 = ((($11)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $15 = $ce;
 $16 = ((($15)) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 44|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $me;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($17)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(253);
 if ($29) {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 $30 = $ce;
 $31 = ((($30)) + 52|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 $34 = $2;
 $35 = ((($34)) + 44|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $me;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($36<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($32)|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $arp = $44;
 $45 = $arp;
 $46 = ($45|0)==(253);
 if ($46) {
  $47 = $ce;
  $48 = ((($47)) + 48|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $ce;
  $51 = ((($50)) + 52|0);
  HEAP32[$51>>2] = $49;
  $52 = $ce;
  $53 = ((($52)) + 52|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$53>>2] = $55;
  $56 = $2;
  $57 = ((($56)) + 44|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $me;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($58<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($54)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $arp = $66;
 }
 $67 = $arp;
 $68 = ($67*12800)|0;
 $0 = $68;
 $69 = $0;
 STACKTOP = sp;return ($69|0);
}
function _med_play_extras($ctx,$xc,$chn) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $b = 0, $ce = 0, $ie = 0, $jvs = 0, $jws = 0, $loop = 0, $m = 0, $me = 0, $mod = 0, $or$cond = 0, $p = 0, $sid = 0, $temp = 0, $xxi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $0;
 $p = $5;
 $6 = $m;
 $mod = $6;
 $jws = 0;
 $jvs = 0;
 $7 = $m;
 $8 = ((($7)) + 7580|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $m;
 $12 = ((($11)) + 7580|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(133303461);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $m;
 $17 = ((($16)) + 7580|0);
 $18 = HEAP32[$17>>2]|0;
 $me = $18;
 $19 = $1;
 $20 = ((($19)) + 432|0);
 $21 = HEAP32[$20>>2]|0;
 $ce = $21;
 $22 = $1;
 $23 = ((($22)) + 44|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $m;
 $26 = ((($25)) + 176|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + (($24*764)|0)|0);
 $29 = ((($28)) + 760|0);
 $30 = HEAP32[$29>>2]|0;
 $ie = $30;
 $31 = $ce;
 $32 = ((($31)) + 84|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $ce;
  $36 = ((($35)) + 80|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   $39 = $p;
   $40 = ((($39)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $ie;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)>=($44|0);
   if ($45) {
    $46 = $1;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $48 | 1;
    HEAP32[$47>>2] = $49;
    $50 = $ce;
    $51 = ((($50)) + 84|0);
    HEAP32[$51>>2] = 0;
   }
  }
 } else {
  $52 = $ie;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = $p;
   $57 = ((($56)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $ie;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58|0)>=($61|0);
   if ($62) {
    $63 = $ce;
    $64 = ((($63)) + 80|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = $1;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $69 | 1;
     HEAP32[$68>>2] = $70;
    }
   }
  }
 }
 $71 = $p;
 $72 = ((($71)) + 12|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $p;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) - 1)|0;
 $78 = ($73|0)==($77|0);
 if ($78) {
  $79 = $ce;
  $80 = ((($79)) + 80|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)!=(2);
  if ($82) {
   $83 = $ce;
   $84 = ((($83)) + 80|0);
   HEAP32[$84>>2] = 0;
  }
 }
 $85 = $1;
 $86 = ((($85)) + 44|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $me;
 $89 = ((($88)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($87<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 if (!($93)) {
  $94 = $1;
  $95 = ((($94)) + 44|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $me;
  $98 = ((($97)) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)==(0|0);
  if (!($102)) {
   $105 = $p;
   $106 = ((($105)) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0);
   if ($108) {
    $109 = $1;
    $110 = HEAP32[$109>>2]|0;
    $111 = $110 & 65536;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = $1;
     $114 = ((($113)) + 24|0);
     $115 = +HEAPF64[$114>>3];
     $116 = (~~(($115)));
     $117 = $ce;
     $118 = ((($117)) + 44|0);
     HEAP32[$118>>2] = $116;
     $119 = $1;
     $120 = HEAP32[$119>>2]|0;
     $121 = $120 & 2048;
     $122 = ($121|0)!=(0);
     if ($122) {
      $123 = $ce;
      $124 = ((($123)) + 52|0);
      HEAP32[$124>>2] = 0;
      $125 = $ce;
      $126 = ((($125)) + 48|0);
      HEAP32[$126>>2] = 0;
      $127 = $ce;
      $128 = ((($127)) + 20|0);
      HEAP32[$128>>2] = 0;
      $129 = $ce;
      $130 = ((($129)) + 16|0);
      HEAP32[$130>>2] = 0;
      $131 = $ce;
      $132 = ((($131)) + 4|0);
      HEAP32[$132>>2] = 0;
      $133 = $ce;
      $134 = ((($133)) + 40|0);
      HEAP32[$134>>2] = 0;
      $135 = $ce;
      $136 = ((($135)) + 36|0);
      HEAP32[$136>>2] = 0;
      $137 = $ce;
      $138 = ((($137)) + 24|0);
      HEAP32[$138>>2] = 0;
      $139 = $ce;
      $140 = ((($139)) + 88|0);
      HEAP32[$140>>2] = -1;
      $141 = $ce;
      $142 = ((($141)) + 92|0);
      HEAP32[$142>>2] = 0;
      $143 = $ce;
      $144 = ((($143)) + 96|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $145 & -2;
      HEAP32[$144>>2] = $146;
      $147 = $ce;
      $148 = ((($147)) + 8|0);
      HEAP32[$148>>2] = 0;
      $149 = $ce;
      $150 = ((($149)) + 28|0);
      HEAP32[$150>>2] = 0;
      $151 = $ie;
      $152 = ((($151)) + 4|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $ce;
      $155 = ((($154)) + 12|0);
      HEAP32[$155>>2] = $153;
      $156 = $ie;
      $157 = ((($156)) + 8|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = $ce;
      $160 = ((($159)) + 32|0);
      HEAP32[$160>>2] = $158;
     }
    }
   }
   $161 = $ce;
   $162 = ((($161)) + 12|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($163|0)>(0);
   if ($164) {
    $165 = $ce;
    $166 = ((($165)) + 16|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) + -1)|0;
    HEAP32[$166>>2] = $168;
    $169 = ($167|0)==(0);
    if ($169) {
     $170 = $ce;
     $171 = ((($170)) + 12|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) - 1)|0;
     $174 = $ce;
     $175 = ((($174)) + 16|0);
     HEAP32[$175>>2] = $173;
     $176 = $ce;
     $177 = ((($176)) + 20|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($178|0)>(0);
     L31: do {
      if ($179) {
       $180 = $ce;
       $181 = ((($180)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (($182) + -1)|0;
       HEAP32[$181>>2] = $183;
      } else {
       $jws = 0;
       $loop = 0;
       L34: while(1) {
        $184 = $ce;
        $185 = ((($184)) + 4|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = (($186) + 1)|0;
        HEAP32[$185>>2] = $187;
        $188 = $1;
        $189 = ((($188)) + 44|0);
        $190 = HEAP32[$189>>2]|0;
        $191 = $me;
        $192 = ((($191)) + 4|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = (($193) + ($190<<2)|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = (($195) + ($186)|0);
        $197 = HEAP8[$196>>0]|0;
        $198 = $197&255;
        $b = $198;
        switch ($198|0) {
        case 243:  {
         label = 33;
         break L34;
         break;
        }
        case 251: case 255:  {
         label = 27;
         break L34;
         break;
        }
        case 240:  {
         label = 36;
         break L34;
         break;
        }
        case 241:  {
         label = 35;
         break L34;
         break;
        }
        case 242:  {
         label = 34;
         break L34;
         break;
        }
        case 254:  {
         break;
        }
        case 244:  {
         label = 32;
         break L34;
         break;
        }
        case 245:  {
         label = 31;
         break L34;
         break;
        }
        case 250:  {
         label = 30;
         break L34;
         break;
        }
        default: {
         label = 37;
         break L34;
        }
        }
        $203 = $loop;
        $204 = ($203|0)!=(0);
        if ($204) {
         break L31;
        }
        $205 = $ce;
        $206 = ((($205)) + 4|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = (($207) + 1)|0;
        HEAP32[$206>>2] = $208;
        $209 = $1;
        $210 = ((($209)) + 44|0);
        $211 = HEAP32[$210>>2]|0;
        $212 = $me;
        $213 = ((($212)) + 4|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = (($214) + ($211<<2)|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = (($216) + ($207)|0);
        $218 = HEAP8[$217>>0]|0;
        $219 = $218&255;
        $temp = $219;
        $220 = $temp;
        $221 = $ce;
        $222 = ((($221)) + 4|0);
        HEAP32[$222>>2] = $220;
        $loop = 1;
       }
       if ((label|0) == 27) {
        $199 = $ce;
        $200 = ((($199)) + 4|0);
        $201 = HEAP32[$200>>2]|0;
        $202 = (($201) + -1)|0;
        HEAP32[$200>>2] = $202;
        break;
       }
       else if ((label|0) == 30) {
        $223 = $ce;
        $224 = ((($223)) + 4|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = (($225) + 1)|0;
        HEAP32[$224>>2] = $226;
        $227 = $1;
        $228 = ((($227)) + 44|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = $me;
        $231 = ((($230)) + 4|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (($232) + ($229<<2)|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = (($234) + ($225)|0);
        $236 = HEAP8[$235>>0]|0;
        $237 = $236&255;
        $jws = $237;
        break;
       }
       else if ((label|0) == 31) {
        $238 = $ce;
        $239 = ((($238)) + 4|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = (($240) + 1)|0;
        HEAP32[$239>>2] = $241;
        $242 = $1;
        $243 = ((($242)) + 44|0);
        $244 = HEAP32[$243>>2]|0;
        $245 = $me;
        $246 = ((($245)) + 4|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = (($247) + ($244<<2)|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = (($249) + ($240)|0);
        $251 = HEAP8[$250>>0]|0;
        $252 = $251&255;
        $253 = $ce;
        $254 = ((($253)) + 88|0);
        HEAP32[$254>>2] = $252;
        $255 = $ce;
        $256 = ((($255)) + 96|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 | 1;
        HEAP32[$256>>2] = $258;
        break;
       }
       else if ((label|0) == 32) {
        $259 = $ce;
        $260 = ((($259)) + 4|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = (($261) + 1)|0;
        HEAP32[$260>>2] = $262;
        $263 = $1;
        $264 = ((($263)) + 44|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $me;
        $267 = ((($266)) + 4|0);
        $268 = HEAP32[$267>>2]|0;
        $269 = (($268) + ($265<<2)|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + ($261)|0);
        $272 = HEAP8[$271>>0]|0;
        $273 = $272&255;
        $274 = $ce;
        $275 = ((($274)) + 88|0);
        HEAP32[$275>>2] = $273;
        break;
       }
       else if ((label|0) == 33) {
        $276 = $ce;
        $277 = ((($276)) + 4|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = (($278) + 1)|0;
        HEAP32[$277>>2] = $279;
        $280 = $1;
        $281 = ((($280)) + 44|0);
        $282 = HEAP32[$281>>2]|0;
        $283 = $me;
        $284 = ((($283)) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = (($285) + ($282<<2)|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = (($287) + ($278)|0);
        $289 = HEAP8[$288>>0]|0;
        $290 = $289&255;
        $291 = $ce;
        $292 = ((($291)) + 8|0);
        HEAP32[$292>>2] = $290;
        break;
       }
       else if ((label|0) == 34) {
        $293 = $ce;
        $294 = ((($293)) + 4|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = (($295) + 1)|0;
        HEAP32[$294>>2] = $296;
        $297 = $1;
        $298 = ((($297)) + 44|0);
        $299 = HEAP32[$298>>2]|0;
        $300 = $me;
        $301 = ((($300)) + 4|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = (($302) + ($299<<2)|0);
        $304 = HEAP32[$303>>2]|0;
        $305 = (($304) + ($295)|0);
        $306 = HEAP8[$305>>0]|0;
        $307 = $306&255;
        $308 = (0 - ($307))|0;
        $309 = $ce;
        $310 = ((($309)) + 8|0);
        HEAP32[$310>>2] = $308;
        break;
       }
       else if ((label|0) == 35) {
        $311 = $ce;
        $312 = ((($311)) + 4|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = (($313) + 1)|0;
        HEAP32[$312>>2] = $314;
        $315 = $1;
        $316 = ((($315)) + 44|0);
        $317 = HEAP32[$316>>2]|0;
        $318 = $me;
        $319 = ((($318)) + 4|0);
        $320 = HEAP32[$319>>2]|0;
        $321 = (($320) + ($317<<2)|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = (($322) + ($313)|0);
        $324 = HEAP8[$323>>0]|0;
        $325 = $324&255;
        $326 = $ce;
        $327 = ((($326)) + 20|0);
        HEAP32[$327>>2] = $325;
        break;
       }
       else if ((label|0) == 36) {
        $328 = $ce;
        $329 = ((($328)) + 4|0);
        $330 = HEAP32[$329>>2]|0;
        $331 = (($330) + 1)|0;
        HEAP32[$329>>2] = $331;
        $332 = $1;
        $333 = ((($332)) + 44|0);
        $334 = HEAP32[$333>>2]|0;
        $335 = $me;
        $336 = ((($335)) + 4|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = (($337) + ($334<<2)|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = (($339) + ($330)|0);
        $341 = HEAP8[$340>>0]|0;
        $342 = $341&255;
        $343 = $ce;
        $344 = ((($343)) + 12|0);
        HEAP32[$344>>2] = $342;
        break;
       }
       else if ((label|0) == 37) {
        $345 = $b;
        $346 = ($345|0)>=(0);
        $347 = $b;
        $348 = ($347|0)<=(64);
        $or$cond = $346 & $348;
        if (!($or$cond)) {
         break;
        }
        $349 = $b;
        $350 = $ce;
        $351 = ((($350)) + 76|0);
        HEAP32[$351>>2] = $349;
        break;
       }
      }
     } while(0);
     $352 = $ce;
     $353 = ((($352)) + 88|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = ($354|0)>=(0);
     if ($355) {
      $356 = $ce;
      $357 = ((($356)) + 88|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = $1;
      $360 = ((($359)) + 44|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = $mod;
      $363 = ((($362)) + 176|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = (($364) + (($361*764)|0)|0);
      $366 = ((($365)) + 756|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = (($367) + ($358<<6)|0);
      $369 = ((($368)) + 40|0);
      $370 = HEAP32[$369>>2]|0;
      $sid = $370;
      $371 = $sid;
      $372 = $mod;
      $373 = ((($372)) + 180|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = (($374) + (($371*52)|0)|0);
      $xxs = $375;
      $376 = $xxs;
      $377 = ((($376)) + 32|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = ($378|0)==(128);
      if ($379) {
       $380 = $ce;
       $381 = ((($380)) + 92|0);
       $382 = HEAP32[$381>>2]|0;
       $383 = $xxs;
       $384 = ((($383)) + 48|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = (($385) + ($382)|0);
       $387 = HEAP8[$386>>0]|0;
       $388 = $387 << 24 >> 24;
       $389 = (($388) + 128)|0;
       $390 = $389 >> 2;
       $391 = $ce;
       $392 = ((($391)) + 76|0);
       HEAP32[$392>>2] = $390;
       $393 = $ce;
       $394 = ((($393)) + 92|0);
       $395 = HEAP32[$394>>2]|0;
       $396 = (($395) + 1)|0;
       HEAP32[$394>>2] = $396;
       $397 = $ce;
       $398 = ((($397)) + 92|0);
       $399 = HEAP32[$398>>2]|0;
       $400 = ($399|0)>=(128);
       if ($400) {
        $401 = $ce;
        $402 = ((($401)) + 96|0);
        $403 = HEAP32[$402>>2]|0;
        $404 = $403 ^ -1;
        $405 = $404 & 1;
        $406 = ($405|0)!=(0);
        if ($406) {
         $407 = $ce;
         $408 = ((($407)) + 88|0);
         HEAP32[$408>>2] = -1;
        }
        $409 = $ce;
        $410 = ((($409)) + 92|0);
        HEAP32[$410>>2] = 0;
       }
      }
     }
     $411 = $ce;
     $412 = ((($411)) + 8|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = $ce;
     $415 = ((($414)) + 76|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = (($416) + ($413))|0;
     HEAP32[$415>>2] = $417;
     $418 = $ce;
     $419 = ((($418)) + 76|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ($420|0)<(0);
     $422 = $ce;
     $423 = ((($422)) + 76|0);
     if ($421) {
      HEAP32[$423>>2] = 0;
     } else {
      $424 = HEAP32[$423>>2]|0;
      $425 = ($424|0)>(64);
      if ($425) {
       $426 = $ce;
       $427 = ((($426)) + 76|0);
       HEAP32[$427>>2] = 64;
      }
     }
     $428 = $ce;
     $429 = ((($428)) + 40|0);
     $430 = HEAP32[$429>>2]|0;
     $431 = ($430|0)>(0);
     L63: do {
      if ($431) {
       $432 = $ce;
       $433 = ((($432)) + 40|0);
       $434 = HEAP32[$433>>2]|0;
       $435 = (($434) + -1)|0;
       HEAP32[$433>>2] = $435;
      } else {
       $jvs = 0;
       $loop = 0;
       L66: while(1) {
        $436 = $ce;
        $437 = ((($436)) + 24|0);
        $438 = HEAP32[$437>>2]|0;
        $439 = (($438) + 1)|0;
        HEAP32[$437>>2] = $439;
        $440 = $1;
        $441 = ((($440)) + 44|0);
        $442 = HEAP32[$441>>2]|0;
        $443 = $me;
        $444 = ((($443)) + 8|0);
        $445 = HEAP32[$444>>2]|0;
        $446 = (($445) + ($442<<2)|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = (($447) + ($438)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $b = $450;
        switch ($450|0) {
        case 240:  {
         label = 68;
         break L66;
         break;
        }
        case 250:  {
         label = 60;
         break L66;
         break;
        }
        case 254:  {
         break;
        }
        case 251: case 255:  {
         label = 53;
         break L66;
         break;
        }
        case 242:  {
         label = 66;
         break L66;
         break;
        }
        case 253:  {
         break L63;
         break;
        }
        case 246:  {
         label = 62;
         break L66;
         break;
        }
        case 252:  {
         label = 58;
         break L66;
         break;
        }
        case 243:  {
         label = 65;
         break L66;
         break;
        }
        case 245:  {
         label = 63;
         break L66;
         break;
        }
        case 247:  {
         label = 61;
         break L66;
         break;
        }
        case 241:  {
         label = 67;
         break L66;
         break;
        }
        case 244:  {
         label = 64;
         break L66;
         break;
        }
        default: {
         label = 69;
         break L66;
        }
        }
        $455 = $loop;
        $456 = ($455|0)!=(0);
        if ($456) {
         break L63;
        }
        $457 = $ce;
        $458 = ((($457)) + 24|0);
        $459 = HEAP32[$458>>2]|0;
        $460 = (($459) + 1)|0;
        HEAP32[$458>>2] = $460;
        $461 = $1;
        $462 = ((($461)) + 44|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = $me;
        $465 = ((($464)) + 8|0);
        $466 = HEAP32[$465>>2]|0;
        $467 = (($466) + ($463<<2)|0);
        $468 = HEAP32[$467>>2]|0;
        $469 = (($468) + ($459)|0);
        $470 = HEAP8[$469>>0]|0;
        $471 = $470&255;
        $temp = $471;
        $472 = $temp;
        $473 = ($472|0)==(255);
        if ($473) {
         label = 56;
         break;
        }
        $478 = $temp;
        $479 = $ce;
        $480 = ((($479)) + 24|0);
        HEAP32[$480>>2] = $478;
        $loop = 1;
       }
       switch (label|0) {
        case 53: {
         $451 = $ce;
         $452 = ((($451)) + 24|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = (($453) + -1)|0;
         HEAP32[$452>>2] = $454;
         break L63;
         break;
        }
        case 56: {
         $474 = $ce;
         $475 = ((($474)) + 24|0);
         $476 = HEAP32[$475>>2]|0;
         $477 = (($476) + -1)|0;
         HEAP32[$475>>2] = $477;
         break L63;
         break;
        }
        case 58: {
         $481 = $ce;
         $482 = ((($481)) + 24|0);
         $483 = HEAP32[$482>>2]|0;
         $484 = (($483) + 1)|0;
         HEAP32[$482>>2] = $484;
         $485 = $ce;
         $486 = ((($485)) + 52|0);
         HEAP32[$486>>2] = $483;
         $487 = $ce;
         $488 = ((($487)) + 48|0);
         HEAP32[$488>>2] = $483;
         while(1) {
          $489 = $ce;
          $490 = ((($489)) + 24|0);
          $491 = HEAP32[$490>>2]|0;
          $492 = (($491) + 1)|0;
          HEAP32[$490>>2] = $492;
          $493 = $1;
          $494 = ((($493)) + 44|0);
          $495 = HEAP32[$494>>2]|0;
          $496 = $me;
          $497 = ((($496)) + 8|0);
          $498 = HEAP32[$497>>2]|0;
          $499 = (($498) + ($495<<2)|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = (($500) + ($491)|0);
          $502 = HEAP8[$501>>0]|0;
          $503 = $502&255;
          $504 = ($503|0)!=(253);
          if (!($504)) {
           break;
          }
         }
         break;
        }
        case 60: {
         $505 = $ce;
         $506 = ((($505)) + 24|0);
         $507 = HEAP32[$506>>2]|0;
         $508 = (($507) + 1)|0;
         HEAP32[$506>>2] = $508;
         $509 = $1;
         $510 = ((($509)) + 44|0);
         $511 = HEAP32[$510>>2]|0;
         $512 = $me;
         $513 = ((($512)) + 8|0);
         $514 = HEAP32[$513>>2]|0;
         $515 = (($514) + ($511<<2)|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = (($516) + ($507)|0);
         $518 = HEAP8[$517>>0]|0;
         $519 = $518&255;
         $jws = $519;
         break L63;
         break;
        }
        case 61: {
         $520 = $ce;
         $521 = ((($520)) + 24|0);
         $522 = HEAP32[$521>>2]|0;
         $523 = (($522) + 1)|0;
         HEAP32[$521>>2] = $523;
         $524 = $1;
         $525 = ((($524)) + 44|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = $me;
         $528 = ((($527)) + 8|0);
         $529 = HEAP32[$528>>2]|0;
         $530 = (($529) + ($526<<2)|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = (($531) + ($522)|0);
         $533 = HEAP8[$532>>0]|0;
         $534 = $533&255;
         $535 = $ce;
         $536 = ((($535)) + 56|0);
         HEAP32[$536>>2] = $534;
         break L63;
         break;
        }
        case 62: {
         $537 = $ce;
         $538 = ((($537)) + 44|0);
         $539 = HEAP32[$538>>2]|0;
         $540 = (+($539|0));
         $541 = $1;
         $542 = ((($541)) + 24|0);
         HEAPF64[$542>>3] = $540;
         break L63;
         break;
        }
        case 63: {
         $543 = $ce;
         $544 = ((($543)) + 24|0);
         $545 = HEAP32[$544>>2]|0;
         $546 = (($545) + 1)|0;
         HEAP32[$544>>2] = $546;
         $547 = $1;
         $548 = ((($547)) + 44|0);
         $549 = HEAP32[$548>>2]|0;
         $550 = $me;
         $551 = ((($550)) + 8|0);
         $552 = HEAP32[$551>>2]|0;
         $553 = (($552) + ($549<<2)|0);
         $554 = HEAP32[$553>>2]|0;
         $555 = (($554) + ($545)|0);
         $556 = HEAP8[$555>>0]|0;
         $557 = $556&255;
         $558 = $ce;
         $559 = ((($558)) + 64|0);
         HEAP32[$559>>2] = $557;
         break L63;
         break;
        }
        case 64: {
         $560 = $ce;
         $561 = ((($560)) + 24|0);
         $562 = HEAP32[$561>>2]|0;
         $563 = (($562) + 1)|0;
         HEAP32[$561>>2] = $563;
         $564 = $1;
         $565 = ((($564)) + 44|0);
         $566 = HEAP32[$565>>2]|0;
         $567 = $me;
         $568 = ((($567)) + 8|0);
         $569 = HEAP32[$568>>2]|0;
         $570 = (($569) + ($566<<2)|0);
         $571 = HEAP32[$570>>2]|0;
         $572 = (($571) + ($562)|0);
         $573 = HEAP8[$572>>0]|0;
         $574 = $573&255;
         $575 = $ce;
         $576 = ((($575)) + 60|0);
         HEAP32[$576>>2] = $574;
         break L63;
         break;
        }
        case 65: {
         $577 = $ce;
         $578 = ((($577)) + 24|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = (($579) + 1)|0;
         HEAP32[$578>>2] = $580;
         $581 = $1;
         $582 = ((($581)) + 44|0);
         $583 = HEAP32[$582>>2]|0;
         $584 = $me;
         $585 = ((($584)) + 8|0);
         $586 = HEAP32[$585>>2]|0;
         $587 = (($586) + ($583<<2)|0);
         $588 = HEAP32[$587>>2]|0;
         $589 = (($588) + ($579)|0);
         $590 = HEAP8[$589>>0]|0;
         $591 = $590&255;
         $592 = (0 - ($591))|0;
         $593 = $ce;
         $594 = ((($593)) + 28|0);
         HEAP32[$594>>2] = $592;
         break L63;
         break;
        }
        case 66: {
         $595 = $ce;
         $596 = ((($595)) + 24|0);
         $597 = HEAP32[$596>>2]|0;
         $598 = (($597) + 1)|0;
         HEAP32[$596>>2] = $598;
         $599 = $1;
         $600 = ((($599)) + 44|0);
         $601 = HEAP32[$600>>2]|0;
         $602 = $me;
         $603 = ((($602)) + 8|0);
         $604 = HEAP32[$603>>2]|0;
         $605 = (($604) + ($601<<2)|0);
         $606 = HEAP32[$605>>2]|0;
         $607 = (($606) + ($597)|0);
         $608 = HEAP8[$607>>0]|0;
         $609 = $608&255;
         $610 = $ce;
         $611 = ((($610)) + 28|0);
         HEAP32[$611>>2] = $609;
         break L63;
         break;
        }
        case 67: {
         $612 = $ce;
         $613 = ((($612)) + 24|0);
         $614 = HEAP32[$613>>2]|0;
         $615 = (($614) + 1)|0;
         HEAP32[$613>>2] = $615;
         $616 = $1;
         $617 = ((($616)) + 44|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = $me;
         $620 = ((($619)) + 8|0);
         $621 = HEAP32[$620>>2]|0;
         $622 = (($621) + ($618<<2)|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = (($623) + ($614)|0);
         $625 = HEAP8[$624>>0]|0;
         $626 = $625&255;
         $627 = $ce;
         $628 = ((($627)) + 40|0);
         HEAP32[$628>>2] = $626;
         break L63;
         break;
        }
        case 68: {
         $629 = $ce;
         $630 = ((($629)) + 24|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (($631) + 1)|0;
         HEAP32[$630>>2] = $632;
         $633 = $1;
         $634 = ((($633)) + 44|0);
         $635 = HEAP32[$634>>2]|0;
         $636 = $me;
         $637 = ((($636)) + 8|0);
         $638 = HEAP32[$637>>2]|0;
         $639 = (($638) + ($635<<2)|0);
         $640 = HEAP32[$639>>2]|0;
         $641 = (($640) + ($631)|0);
         $642 = HEAP8[$641>>0]|0;
         $643 = $642&255;
         $644 = $ce;
         $645 = ((($644)) + 32|0);
         HEAP32[$645>>2] = $643;
         break L63;
         break;
        }
        case 69: {
         $646 = $1;
         $647 = ((($646)) + 44|0);
         $648 = HEAP32[$647>>2]|0;
         $649 = $m;
         $650 = ((($649)) + 176|0);
         $651 = HEAP32[$650>>2]|0;
         $652 = (($651) + (($648*764)|0)|0);
         $xxi = $652;
         $653 = $b;
         $654 = $xxi;
         $655 = ((($654)) + 36|0);
         $656 = HEAP32[$655>>2]|0;
         $657 = ($653|0)<($656|0);
         if (!($657)) {
          break L63;
         }
         $658 = $b;
         $659 = $xxi;
         $660 = ((($659)) + 756|0);
         $661 = HEAP32[$660>>2]|0;
         $662 = (($661) + ($658<<6)|0);
         $663 = ((($662)) + 40|0);
         $664 = HEAP32[$663>>2]|0;
         $665 = $1;
         $666 = ((($665)) + 52|0);
         $667 = HEAP32[$666>>2]|0;
         $668 = ($664|0)!=($667|0);
         if (!($668)) {
          break L63;
         }
         $669 = $b;
         $670 = $xxi;
         $671 = ((($670)) + 756|0);
         $672 = HEAP32[$671>>2]|0;
         $673 = (($672) + ($669<<6)|0);
         $674 = ((($673)) + 40|0);
         $675 = HEAP32[$674>>2]|0;
         $676 = $1;
         $677 = ((($676)) + 52|0);
         HEAP32[$677>>2] = $675;
         $678 = $0;
         $679 = $2;
         $680 = $1;
         $681 = ((($680)) + 52|0);
         $682 = HEAP32[$681>>2]|0;
         _virt_setsmp($678,$679,$682);
         break L63;
         break;
        }
       }
      }
     } while(0);
     $683 = $ce;
     $684 = ((($683)) + 28|0);
     $685 = HEAP32[$684>>2]|0;
     $686 = (+($685|0));
     $687 = $1;
     $688 = ((($687)) + 24|0);
     $689 = +HEAPF64[$688>>3];
     $690 = $689 + $686;
     HEAPF64[$688>>3] = $690;
    }
   }
   $691 = $jws;
   $692 = ($691|0)!=(0);
   if ($692) {
    $693 = $jws;
    $694 = $ce;
    $695 = ((($694)) + 24|0);
    HEAP32[$695>>2] = $693;
   }
   $696 = $jvs;
   $697 = ($696|0)!=(0);
   if (!($697)) {
    STACKTOP = sp;return;
   }
   $698 = $jvs;
   $699 = $ce;
   $700 = ((($699)) + 4|0);
   HEAP32[$700>>2] = $698;
   STACKTOP = sp;return;
  }
 }
 $103 = $ce;
 $104 = ((($103)) + 76|0);
 HEAP32[$104>>2] = 64;
 STACKTOP = sp;return;
}
function _med_new_instrument_extras($xxi) {
 $xxi = $xxi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xxi;
 $2 = (_calloc(1,16)|0);
 $3 = $1;
 $4 = ((($3)) + 760|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 760|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 760|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 133303461;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _med_new_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xc;
 $2 = (_calloc(1,100)|0);
 $3 = $1;
 $4 = ((($3)) + 432|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 432|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 432|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 133303461;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _med_reset_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 432|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 dest=$4; stop=dest+96|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _med_release_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 432|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _med_new_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $me = 0, $mod = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $mod = $2;
 $3 = (_calloc(1,12)|0);
 $4 = $1;
 $5 = ((($4)) + 7580|0);
 HEAP32[$5>>2] = $3;
 $6 = $1;
 $7 = ((($6)) + 7580|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $10 = $1;
 $11 = ((($10)) + 7580|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = 133303461;
 $13 = $1;
 $14 = ((($13)) + 7580|0);
 $15 = HEAP32[$14>>2]|0;
 $me = $15;
 $16 = $mod;
 $17 = ((($16)) + 140|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_calloc(4,$18)|0);
 $20 = $me;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $me;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 $26 = $mod;
 $27 = ((($26)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_calloc(4,$28)|0);
 $30 = $me;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $me;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $0 = -1;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 } else {
  $0 = 0;
  $36 = $0;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _med_release_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $me = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $mod = $1;
 $2 = $0;
 $3 = ((($2)) + 7580|0);
 $4 = HEAP32[$3>>2]|0;
 $me = $4;
 $5 = $me;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = $mod;
   $11 = ((($10)) + 140|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $i;
   $15 = $me;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($14<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   $20 = $i;
   $21 = (($20) + 1)|0;
   $i = $21;
  }
  $22 = $me;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  _free($24);
 }
 $25 = $me;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if (!($28)) {
  $45 = $0;
  $46 = ((($45)) + 7580|0);
  $47 = HEAP32[$46>>2]|0;
  _free($47);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $mod;
  $31 = ((($30)) + 140|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $me;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  _free($39);
  $40 = $i;
  $41 = (($40) + 1)|0;
  $i = $41;
 }
 $42 = $me;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 $45 = $0;
 $46 = ((($45)) + 7580|0);
 $47 = HEAP32[$46>>2]|0;
 _free($47);
 STACKTOP = sp;return;
}
function _med_extras_process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $4;
 $8 = $7&255;
 $cond = ($8|0)==(177);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 432|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 84|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = $1;
 $16 = ((($15)) + 432|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 80|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function _med_hold_hack($ctx,$pat,$chn,$row) {
 $ctx = $ctx|0;
 $pat = $pat|0;
 $chn = $chn|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $event = 0, $m = 0, $mod = 0, $num_rows = 0, $p = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $pat;
 $2 = $chn;
 $3 = $row;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $2;
 $8 = $1;
 $9 = $m;
 $10 = ((($9)) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = (($14) + ($7<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $mod;
 $18 = ((($17)) + 172|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($16<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $num_rows = $22;
 $23 = $3;
 $24 = (($23) + 1)|0;
 $25 = $num_rows;
 $26 = ($24|0)<($25|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $0;
 $p = $27;
 $28 = $3;
 $29 = (($28) + 1)|0;
 $30 = $2;
 $31 = $1;
 $32 = $m;
 $33 = ((($32)) + 168|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($31<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 4|0);
 $38 = (($37) + ($30<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $m;
 $41 = ((($40)) + 172|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($39<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = (($45) + ($29<<3)|0);
 $event = $46;
 $47 = $2;
 $48 = $p;
 $49 = ((($48)) + 620|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + (($47*472)|0)|0);
 $xc = $51;
 $52 = $event;
 $53 = ((($52)) + 5|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = ($55|0)==(177);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $xc;
 $58 = ((($57)) + 432|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 80|0);
 HEAP32[$60>>2] = 2;
 STACKTOP = sp;return;
}
function _filter_setup($srate,$cutoff,$res,$a0,$b0,$b1) {
 $srate = $srate|0;
 $cutoff = $cutoff|0;
 $res = $res|0;
 $a0 = $a0|0;
 $b0 = $b0|0;
 $b1 = $b1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $d = 0.0, $d2 = 0.0, $e = 0.0, $fb0 = 0.0, $fb1 = 0.0, $fc = 0.0, $fg = 0.0, $fs = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $srate;
 $1 = $cutoff;
 $2 = $res;
 $3 = $a0;
 $4 = $b0;
 $5 = $b1;
 $6 = $0;
 $7 = (+($6|0));
 $fs = $7;
 $8 = $1;
 $9 = ($8|0)<(0);
 if ($9) {
  $1 = 0;
 } else {
  $10 = $1;
  $11 = ($10|0)>(255);
  if ($11) {
   $1 = 255;
  }
 }
 $12 = $2;
 $13 = ($12|0)<(0);
 if ($13) {
  $2 = 0;
 } else {
  $14 = $2;
  $15 = ($14|0)>(255);
  if ($15) {
   $2 = 255;
  }
 }
 $16 = $1;
 $17 = (12208 + ($16<<2)|0);
 $18 = +HEAPF32[$17>>2];
 $fc = $18;
 $19 = $fs;
 $20 = $19;
 $21 = 6.28318530717958 / $20;
 $22 = $fc;
 $23 = $22;
 $24 = $23 * $21;
 $25 = $24;
 $fc = $25;
 $26 = $2;
 $27 = $26 >> 1;
 $28 = (13232 + ($27<<2)|0);
 $29 = +HEAPF32[$28>>2];
 $d2 = $29;
 $30 = $d2;
 $31 = $30;
 $32 = 1.0 - $31;
 $33 = $fc;
 $34 = $33;
 $35 = $32 * $34;
 $36 = $35;
 $d = $36;
 $37 = $d;
 $38 = $37;
 $39 = $38 > 2.0;
 if ($39) {
  $d = 2.0;
 }
 $40 = $fc;
 $41 = $fc;
 $42 = $40 * $41;
 $43 = $42;
 $44 = 1.0 / $43;
 $45 = $44;
 $e = $45;
 $46 = $d2;
 $47 = $d;
 $48 = $46 - $47;
 $49 = $fc;
 $50 = $48 / $49;
 $51 = $e;
 $52 = $50 + $51;
 $d = $52;
 $53 = $d;
 $54 = 1.0 + $53;
 $55 = $54;
 $56 = 1.0 / $55;
 $57 = $56;
 $fg = $57;
 $58 = $d;
 $59 = $e;
 $60 = $58 + $59;
 $61 = $d;
 $62 = 1.0 + $61;
 $63 = $60 / $62;
 $fb0 = $63;
 $64 = $e;
 $65 = -$64;
 $66 = $d;
 $67 = 1.0 + $66;
 $68 = $65 / $67;
 $fb1 = $68;
 $69 = $fg;
 $70 = $69 * 65536.0;
 $71 = (~~(($70)));
 $72 = $3;
 HEAP32[$72>>2] = $71;
 $73 = $fb0;
 $74 = $73 * 65536.0;
 $75 = (~~(($74)));
 $76 = $4;
 HEAP32[$76>>2] = $75;
 $77 = $fb1;
 $78 = $77 * 65536.0;
 $79 = (~~(($78)));
 $80 = $5;
 HEAP32[$80>>2] = $79;
 STACKTOP = sp;return;
}
function _YM3812UpdateOne($OPL,$bk,$len,$vl,$vr,$st) {
 $OPL = $OPL|0;
 $bk = $bk|0;
 $len = $len|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $CH = 0, $R_CH = 0, $ST = 0, $amsCnt = 0, $data = 0, $rythm = 0, $vibCnt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $bk;
 $2 = $len;
 $3 = $vl;
 $4 = $vr;
 $5 = $st;
 $6 = $0;
 $7 = ((($6)) + 4792|0);
 $8 = HEAP32[$7>>2]|0;
 $amsCnt = $8;
 $9 = $0;
 $10 = ((($9)) + 4800|0);
 $11 = HEAP32[$10>>2]|0;
 $vibCnt = $11;
 $12 = $0;
 $13 = ((($12)) + 60|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & 32;
 $17 = $16&255;
 $rythm = $17;
 $18 = $0;
 $19 = ((($18)) + 4836|0);
 $ST = $19;
 $20 = $0;
 $21 = $ST;
 $22 = ((($21)) + 32792|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)!=($23|0);
 if ($24) {
  $25 = $0;
  $26 = $ST;
  $27 = ((($26)) + 32792|0);
  HEAP32[$27>>2] = $25;
  $28 = $0;
  $29 = ((($28)) + 52|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $ST;
  $32 = ((($31)) + 32796|0);
  HEAP32[$32>>2] = $30;
  $33 = $ST;
  $34 = ((($33)) + 32796|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 1800|0);
  $37 = $ST;
  $38 = ((($37)) + 32800|0);
  HEAP32[$38>>2] = $36;
  $39 = $ST;
  $40 = ((($39)) + 32796|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 1400|0);
  $43 = $ST;
  $44 = ((($43)) + 32804|0);
  HEAP32[$44>>2] = $42;
  $45 = $ST;
  $46 = ((($45)) + 32796|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 1400|0);
  $49 = ((($48)) + 80|0);
  $50 = $ST;
  $51 = ((($50)) + 32808|0);
  HEAP32[$51>>2] = $49;
  $52 = $ST;
  $53 = ((($52)) + 32796|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 1600|0);
  $56 = $ST;
  $57 = ((($56)) + 32812|0);
  HEAP32[$57>>2] = $55;
  $58 = $ST;
  $59 = ((($58)) + 32796|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + 1600|0);
  $62 = ((($61)) + 80|0);
  $63 = $ST;
  $64 = ((($63)) + 32816|0);
  HEAP32[$64>>2] = $62;
  $65 = $0;
  $66 = ((($65)) + 4796|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $ST;
  $69 = ((($68)) + 32840|0);
  HEAP32[$69>>2] = $67;
  $70 = $0;
  $71 = ((($70)) + 4804|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $ST;
  $74 = ((($73)) + 32844|0);
  HEAP32[$74>>2] = $72;
  $75 = $0;
  $76 = ((($75)) + 4784|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $ST;
  $79 = ((($78)) + 32832|0);
  HEAP32[$79>>2] = $77;
  $80 = $0;
  $81 = ((($80)) + 4788|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $ST;
  $84 = ((($83)) + 32836|0);
  HEAP32[$84>>2] = $82;
 }
 $85 = $rythm;
 $86 = $85&255;
 $87 = ($86|0)!=(0);
 $88 = $ST;
 if ($87) {
  $89 = ((($88)) + 32796|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 1200|0);
  $94 = $91;
 } else {
  $92 = ((($88)) + 32800|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93;
 }
 $R_CH = $94;
 while(1) {
  $95 = $2;
  $96 = (($95) + -1)|0;
  $2 = $96;
  $97 = ($95|0)!=(0);
  if (!($97)) {
   break;
  }
  $98 = $ST;
  $99 = ((($98)) + 32840|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $amsCnt;
  $102 = (($101) + ($100))|0;
  $amsCnt = $102;
  $103 = $102 >>> 23;
  $104 = $ST;
  $105 = ((($104)) + 32832|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($103<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $ST;
  $110 = ((($109)) + 32824|0);
  HEAP32[$110>>2] = $108;
  $111 = $ST;
  $112 = ((($111)) + 32844|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $vibCnt;
  $115 = (($114) + ($113))|0;
  $vibCnt = $115;
  $116 = $115 >>> 23;
  $117 = $ST;
  $118 = ((($117)) + 32836|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + ($116<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $ST;
  $123 = ((($122)) + 32828|0);
  HEAP32[$123>>2] = $121;
  $124 = $ST;
  $125 = ((($124)) + 32820|0);
  HEAP32[$125>>2] = 0;
  $126 = $ST;
  $127 = ((($126)) + 32796|0);
  $128 = HEAP32[$127>>2]|0;
  $CH = $128;
  while(1) {
   $129 = $CH;
   $130 = $R_CH;
   $131 = ($129>>>0)<($130>>>0);
   if (!($131)) {
    break;
   }
   $132 = $CH;
   $133 = $ST;
   _OPL_CALC_CH($132,$133);
   $134 = $CH;
   $135 = ((($134)) + 200|0);
   $CH = $135;
  }
  $136 = $ST;
  $137 = ((($136)) + 32820|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (_Limit($138,268427264,-268435456)|0);
  $140 = $139 >> 13;
  $data = $140;
  $141 = $5;
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $data;
   $144 = $4;
   $145 = Math_imul($143, $144)|0;
   $146 = $1;
   $147 = ((($146)) + 4|0);
   $1 = $147;
   $148 = HEAP32[$146>>2]|0;
   $149 = (($148) + ($145))|0;
   HEAP32[$146>>2] = $149;
  }
  $150 = $data;
  $151 = $3;
  $152 = Math_imul($150, $151)|0;
  $153 = $1;
  $154 = ((($153)) + 4|0);
  $1 = $154;
  $155 = HEAP32[$153>>2]|0;
  $156 = (($155) + ($152))|0;
  HEAP32[$153>>2] = $156;
 }
 $157 = $amsCnt;
 $158 = $0;
 $159 = ((($158)) + 4792|0);
 HEAP32[$159>>2] = $157;
 $160 = $vibCnt;
 $161 = $0;
 $162 = ((($161)) + 4800|0);
 HEAP32[$162>>2] = $160;
 STACKTOP = sp;return;
}
function _OPLResetChip($OPL) {
 $OPL = $OPL|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CH = 0, $ST = 0, $c = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $0;
 $2 = ((($1)) + 4836|0);
 $ST = $2;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 _OPLWriteReg($5,1,0);
 $6 = $0;
 _OPLWriteReg($6,2,0);
 $7 = $0;
 _OPLWriteReg($7,3,0);
 $8 = $0;
 _OPLWriteReg($8,4,0);
 $i = 255;
 while(1) {
  $9 = $i;
  $10 = ($9|0)>=(32);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = $i;
  _OPLWriteReg($11,$12,0);
  $13 = $i;
  $14 = (($13) + -1)|0;
  $i = $14;
 }
 $c = 0;
 while(1) {
  $15 = $c;
  $16 = $0;
  $17 = ((($16)) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $c;
  $21 = $0;
  $22 = ((($21)) + 52|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + (($20*200)|0)|0);
  $CH = $24;
  $s = 0;
  while(1) {
   $25 = $s;
   $26 = ($25|0)<(2);
   if (!($26)) {
    break;
   }
   $27 = $ST;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $s;
   $31 = $CH;
   $32 = (($31) + (($30*80)|0)|0);
   $33 = ((($32)) + 76|0);
   HEAP32[$33>>2] = $29;
   $34 = $s;
   $35 = $CH;
   $36 = (($35) + (($34*80)|0)|0);
   $37 = ((($36)) + 48|0);
   HEAP32[$37>>2] = 536870912;
   $38 = $s;
   $39 = $CH;
   $40 = (($39) + (($38*80)|0)|0);
   $41 = ((($40)) + 52|0);
   HEAP32[$41>>2] = 536870913;
   $42 = $s;
   $43 = $CH;
   $44 = (($43) + (($42*80)|0)|0);
   $45 = ((($44)) + 56|0);
   HEAP32[$45>>2] = 0;
   $46 = $s;
   $47 = (($46) + 1)|0;
   $s = $47;
  }
  $48 = $c;
  $49 = (($48) + 1)|0;
  $c = $49;
 }
 STACKTOP = sp;return;
}
function _OPLCreate($type,$clock,$rate) {
 $type = $type|0;
 $clock = $clock|0;
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $OPL = 0, $max_ch = 0, $ptr = 0, $state_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $clock;
 $3 = $rate;
 $max_ch = 9;
 $state_size = 37688;
 $4 = $max_ch;
 $5 = ($4*200)|0;
 $6 = $state_size;
 $7 = (($6) + ($5))|0;
 $state_size = $7;
 $8 = $state_size;
 $9 = (_malloc($8)|0);
 $ptr = $9;
 $10 = $ptr;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 $12 = $ptr;
 $13 = $state_size;
 _memset(($12|0),0,($13|0))|0;
 $14 = $ptr;
 $OPL = $14;
 $15 = $ptr;
 $16 = ((($15)) + 37688|0);
 $ptr = $16;
 $17 = $OPL;
 $18 = ((($17)) + 4836|0);
 $19 = ((($18)) + 32788|0);
 HEAP32[$19>>2] = 0;
 $20 = $OPL;
 $21 = ((($20)) + 4836|0);
 $22 = ((($21)) + 32792|0);
 HEAP32[$22>>2] = 0;
 $23 = $OPL;
 $24 = ((($23)) + 4836|0);
 $25 = (_OPL_LockTable($24)|0);
 $26 = ($25|0)==(-1);
 if ($26) {
  $27 = $OPL;
  _free($27);
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 } else {
  $28 = $ptr;
  $29 = $OPL;
  $30 = ((($29)) + 52|0);
  HEAP32[$30>>2] = $28;
  $31 = $1;
  $32 = $31&255;
  $33 = $OPL;
  HEAP8[$33>>0] = $32;
  $34 = $2;
  $35 = $OPL;
  $36 = ((($35)) + 4|0);
  HEAP32[$36>>2] = $34;
  $37 = $3;
  $38 = $OPL;
  $39 = ((($38)) + 8|0);
  HEAP32[$39>>2] = $37;
  $40 = $max_ch;
  $41 = $OPL;
  $42 = ((($41)) + 56|0);
  HEAP32[$42>>2] = $40;
  $43 = $OPL;
  _OPL_initalize($43);
  $44 = $OPL;
  _OPLResetChip($44);
  $45 = $OPL;
  $0 = $45;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _OPLDestroy($OPL) {
 $OPL = $OPL|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $0;
 $2 = ((($1)) + 4836|0);
 _OPL_UnLockTable($2);
 $3 = $0;
 _free($3);
 STACKTOP = sp;return;
}
function _OPLWrite($OPL,$a,$v) {
 $OPL = $OPL|0;
 $a = $a|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $a;
 $2 = $v;
 $3 = $1;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $2;
  $7 = $6 & 255;
  $8 = $7&255;
  $9 = $0;
  $10 = ((($9)) + 32|0);
  HEAP8[$10>>0] = $8;
  $27 = $0;
  $28 = ((($27)) + 33|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 >> 7;
  STACKTOP = sp;return ($31|0);
 }
 $11 = $0;
 $12 = ((($11)) + 4828|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $0;
  $16 = ((($15)) + 4828|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  $19 = ((($18)) + 4832|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$17 & 255]($20,0);
 }
 $21 = $0;
 $22 = $0;
 $23 = ((($22)) + 32|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $2;
 _OPLWriteReg($21,$25,$26);
 $27 = $0;
 $28 = ((($27)) + 33|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 >> 7;
 STACKTOP = sp;return ($31|0);
}
function _OPLRead($OPL,$a) {
 $OPL = $OPL|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $OPL;
 $2 = $a;
 $3 = $2;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if ($5) {
  $0 = 0;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 } else {
  $6 = $1;
  $7 = ((($6)) + 33|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $1;
  $11 = ((($10)) + 34|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 | 128;
  $15 = $9 & $14;
  $16 = $15&255;
  $0 = $16;
  $17 = $0;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _OPL_CALC_CH($CH,$ST) {
 $CH = $CH|0;
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $SLOT = 0, $env_out = 0, $feedback1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CH;
 $1 = $ST;
 $2 = $1;
 $3 = ((($2)) + 32848|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $SLOT = $4;
 $5 = $SLOT;
 $6 = $1;
 $7 = (_OPL_CALC_SLOT($5,$6)|0);
 $env_out = $7;
 $8 = $env_out;
 $9 = ($8>>>0)<(4095);
 do {
  if ($9) {
   $10 = $SLOT;
   $11 = ((($10)) + 73|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)!=(0);
   $14 = $SLOT;
   $15 = ((($14)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   if ($13) {
    $17 = $1;
    $18 = ((($17)) + 32828|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = Math_imul($16, $19)|0;
    $21 = (($20>>>0) / 256)&-1;
    $22 = $SLOT;
    $23 = ((($22)) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + ($21))|0;
    HEAP32[$23>>2] = $25;
   } else {
    $26 = $SLOT;
    $27 = ((($26)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($16))|0;
    HEAP32[$27>>2] = $29;
   }
   $30 = $0;
   $31 = ((($30)) + 161|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)!=(0);
   if ($33) {
    $34 = $0;
    $35 = ((($34)) + 172|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $0;
    $38 = ((($37)) + 172|0);
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($36) + ($40))|0;
    $42 = $0;
    $43 = ((($42)) + 161|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $41 >> $45;
    $feedback1 = $46;
    $47 = $0;
    $48 = ((($47)) + 172|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $0;
    $51 = ((($50)) + 172|0);
    $52 = ((($51)) + 4|0);
    HEAP32[$52>>2] = $49;
    $53 = $env_out;
    $54 = $SLOT;
    $55 = ((($54)) + 36|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $feedback1;
    $58 = (($56) + ($57))|0;
    $59 = (($58>>>0) / 8192)&-1;
    $60 = $59 & 2047;
    $61 = $SLOT;
    $62 = ((($61)) + 76|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + ($60<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + ($53<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $0;
    $69 = ((($68)) + 172|0);
    HEAP32[$69>>2] = $67;
    $70 = $0;
    $71 = ((($70)) + 164|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($67))|0;
    HEAP32[$72>>2] = $74;
    break;
   } else {
    $75 = $env_out;
    $76 = $SLOT;
    $77 = ((($76)) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + 0)|0;
    $80 = (($79>>>0) / 8192)&-1;
    $81 = $80 & 2047;
    $82 = $SLOT;
    $83 = ((($82)) + 76|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($81<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($75<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $0;
    $90 = ((($89)) + 164|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($88))|0;
    HEAP32[$91>>2] = $93;
    break;
   }
  } else {
   $94 = $0;
   $95 = ((($94)) + 172|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $0;
   $98 = ((($97)) + 172|0);
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $96;
   $100 = $0;
   $101 = ((($100)) + 172|0);
   HEAP32[$101>>2] = 0;
  }
 } while(0);
 $102 = $0;
 $103 = ((($102)) + 80|0);
 $SLOT = $103;
 $104 = $SLOT;
 $105 = $1;
 $106 = (_OPL_CALC_SLOT($104,$105)|0);
 $env_out = $106;
 $107 = $env_out;
 $108 = ($107>>>0)<(4095);
 if (!($108)) {
  STACKTOP = sp;return;
 }
 $109 = $SLOT;
 $110 = ((($109)) + 73|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = ($111<<24>>24)!=(0);
 $113 = $SLOT;
 $114 = ((($113)) + 40|0);
 $115 = HEAP32[$114>>2]|0;
 if ($112) {
  $116 = $1;
  $117 = ((($116)) + 32828|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = Math_imul($115, $118)|0;
  $120 = (($119>>>0) / 256)&-1;
  $121 = $SLOT;
  $122 = ((($121)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + ($120))|0;
  HEAP32[$122>>2] = $124;
 } else {
  $125 = $SLOT;
  $126 = ((($125)) + 36|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + ($115))|0;
  HEAP32[$126>>2] = $128;
 }
 $129 = $env_out;
 $130 = $SLOT;
 $131 = ((($130)) + 36|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $1;
 $134 = ((($133)) + 32848|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($132) + ($135))|0;
 $137 = (($136>>>0) / 8192)&-1;
 $138 = $137 & 2047;
 $139 = $SLOT;
 $140 = ((($139)) + 76|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (($141) + ($138<<2)|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) + ($129<<2)|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $1;
 $147 = ((($146)) + 32820|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) + ($145))|0;
 HEAP32[$147>>2] = $149;
 STACKTOP = sp;return;
}
function _Limit($val,$max,$min) {
 $val = $val|0;
 $max = $max|0;
 $min = $min|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $val;
 $1 = $max;
 $2 = $min;
 $3 = $0;
 $4 = $1;
 $5 = ($3|0)>($4|0);
 if ($5) {
  $6 = $1;
  $0 = $6;
 } else {
  $7 = $0;
  $8 = $2;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $10 = $2;
   $0 = $10;
  }
 }
 $11 = $0;
 STACKTOP = sp;return ($11|0);
}
function _OPLWriteReg($OPL,$r,$v) {
 $OPL = $OPL|0;
 $r = $r|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $CH = 0, $ST = 0, $blockRv = 0, $block_fnum = 0, $c = 0, $cond = 0, $feedback = 0, $fnum = 0, $keyon = 0, $slot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $r;
 $2 = $v;
 $3 = $0;
 $4 = ((($3)) + 4836|0);
 $ST = $4;
 $5 = $1;
 $6 = $5 & 224;
 switch ($6|0) {
 case 192:  {
  $228 = $1;
  $229 = $228 & 15;
  $230 = ($229|0)>(8);
  if ($230) {
   STACKTOP = sp;return;
  }
  $231 = $1;
  $232 = $231 & 15;
  $233 = $0;
  $234 = ((($233)) + 52|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + (($232*200)|0)|0);
  $CH = $236;
  $237 = $2;
  $238 = $237 >> 1;
  $239 = $238 & 7;
  $feedback = $239;
  $240 = $feedback;
  $241 = ($240|0)!=(0);
  $242 = $feedback;
  $243 = (9 - ($242))|0;
  $244 = $241 ? $243 : 0;
  $245 = $244&255;
  $246 = $CH;
  $247 = ((($246)) + 161|0);
  HEAP8[$247>>0] = $245;
  $248 = $2;
  $249 = $248 & 1;
  $250 = $249&255;
  $251 = $CH;
  $252 = ((($251)) + 160|0);
  HEAP8[$252>>0] = $250;
  $253 = $CH;
  $254 = $ST;
  _set_algorythm($253,$254);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $7 = $1;
  $8 = $7 & 31;
  if ((($8|0) == 3)) {
   $54 = $2;
   $55 = (256 - ($54))|0;
   $56 = $55<<4;
   $57 = $0;
   $58 = ((($57)) + 40|0);
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = $56;
   STACKTOP = sp;return;
  } else if ((($8|0) == 2)) {
   $49 = $2;
   $50 = (256 - ($49))|0;
   $51 = $50<<2;
   $52 = $0;
   $53 = ((($52)) + 40|0);
   HEAP32[$53>>2] = $51;
   STACKTOP = sp;return;
  } else if ((($8|0) == 1)) {
   $9 = $0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 & 1;
   $13 = ($12|0)!=(0);
   if (!($13)) {
    STACKTOP = sp;return;
   }
   $14 = $2;
   $15 = $14 & 32;
   $16 = $15&255;
   $17 = $0;
   $18 = ((($17)) + 4808|0);
   HEAP8[$18>>0] = $16;
   $19 = $0;
   $20 = ((($19)) + 4808|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)!=(0);
   if ($22) {
    STACKTOP = sp;return;
   }
   $c = 0;
   while(1) {
    $23 = $c;
    $24 = $0;
    $25 = ((($24)) + 56|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($23|0)<($26|0);
    if (!($27)) {
     break;
    }
    $28 = $ST;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $c;
    $32 = $0;
    $33 = ((($32)) + 52|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + (($31*200)|0)|0);
    $36 = ((($35)) + 76|0);
    HEAP32[$36>>2] = $30;
    $37 = $ST;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $c;
    $41 = $0;
    $42 = ((($41)) + 52|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + (($40*200)|0)|0);
    $45 = ((($44)) + 80|0);
    $46 = ((($45)) + 76|0);
    HEAP32[$46>>2] = $39;
    $47 = $c;
    $48 = (($47) + 1)|0;
    $c = $48;
   }
   STACKTOP = sp;return;
  } else {
   STACKTOP = sp;return;
  }
  break;
 }
 case 96:  {
  $78 = $1;
  $79 = $78 & 31;
  $80 = (13744 + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $slot = $81;
  $82 = $slot;
  $83 = ($82|0)==(-1);
  if ($83) {
   STACKTOP = sp;return;
  }
  $84 = $0;
  $85 = $slot;
  $86 = $2;
  _set_ar_dr($84,$85,$86);
  STACKTOP = sp;return;
  break;
 }
 case 224:  {
  $255 = $1;
  $256 = $255 & 31;
  $257 = (13744 + ($256<<2)|0);
  $258 = HEAP32[$257>>2]|0;
  $slot = $258;
  $259 = $slot;
  $260 = ($259|0)==(-1);
  if ($260) {
   STACKTOP = sp;return;
  }
  $261 = $slot;
  $262 = (($261|0) / 2)&-1;
  $263 = $0;
  $264 = ((($263)) + 52|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + (($262*200)|0)|0);
  $CH = $266;
  $267 = $0;
  $268 = ((($267)) + 4808|0);
  $269 = HEAP8[$268>>0]|0;
  $270 = ($269<<24>>24)!=(0);
  if (!($270)) {
   STACKTOP = sp;return;
  }
  $271 = $2;
  $272 = $271 & 3;
  $273 = $272<<11;
  $274 = $ST;
  $275 = ((($274)) + 4|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = (($276) + ($273<<2)|0);
  $278 = $slot;
  $279 = $278 & 1;
  $280 = $CH;
  $281 = (($280) + (($279*80)|0)|0);
  $282 = ((($281)) + 76|0);
  HEAP32[$282>>2] = $277;
  STACKTOP = sp;return;
  break;
 }
 case 32:  {
  $60 = $1;
  $61 = $60 & 31;
  $62 = (13744 + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $slot = $63;
  $64 = $slot;
  $65 = ($64|0)==(-1);
  if ($65) {
   STACKTOP = sp;return;
  }
  $66 = $0;
  $67 = $slot;
  $68 = $2;
  _set_mul($66,$67,$68);
  STACKTOP = sp;return;
  break;
 }
 case 64:  {
  $69 = $1;
  $70 = $69 & 31;
  $71 = (13744 + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $slot = $72;
  $73 = $slot;
  $74 = ($73|0)==(-1);
  if ($74) {
   STACKTOP = sp;return;
  }
  $75 = $0;
  $76 = $slot;
  $77 = $2;
  _set_ksl_tl($75,$76,$77);
  STACKTOP = sp;return;
  break;
 }
 case 128:  {
  $87 = $1;
  $88 = $87 & 31;
  $89 = (13744 + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $slot = $90;
  $91 = $slot;
  $92 = ($91|0)==(-1);
  if ($92) {
   STACKTOP = sp;return;
  }
  $93 = $0;
  $94 = $slot;
  $95 = $2;
  _set_sl_rr($93,$94,$95);
  STACKTOP = sp;return;
  break;
 }
 case 160:  {
  $96 = $1;
  $cond = ($96|0)==(189);
  if ($cond) {
   $97 = $2;
   $98 = $97 & 128;
   $99 = ($98|0)!=(0);
   $100 = $99 ? 512 : 0;
   $101 = $ST;
   $102 = ((($101)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + ($100<<2)|0);
   $105 = $0;
   $106 = ((($105)) + 4784|0);
   HEAP32[$106>>2] = $104;
   $107 = $2;
   $108 = $107 & 64;
   $109 = ($108|0)!=(0);
   $110 = $109 ? 512 : 0;
   $111 = $ST;
   $112 = ((($111)) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + ($110<<2)|0);
   $115 = $0;
   $116 = ((($115)) + 4788|0);
   HEAP32[$116>>2] = $114;
   $117 = $2;
   $118 = $117 & 63;
   $119 = $118&255;
   $120 = $0;
   $121 = ((($120)) + 60|0);
   HEAP8[$121>>0] = $119;
   STACKTOP = sp;return;
  }
  $122 = $1;
  $123 = $122 & 15;
  $124 = ($123|0)>(8);
  if ($124) {
   STACKTOP = sp;return;
  }
  $125 = $1;
  $126 = $125 & 15;
  $127 = $0;
  $128 = ((($127)) + 52|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + (($126*200)|0)|0);
  $CH = $130;
  $131 = $1;
  $132 = $131 & 16;
  $133 = ($132|0)!=(0);
  do {
   if ($133) {
    $140 = $2;
    $141 = $140 >> 5;
    $142 = $141 & 1;
    $keyon = $142;
    $143 = $2;
    $144 = $143 & 31;
    $145 = $144 << 8;
    $146 = $CH;
    $147 = ((($146)) + 180|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = $148 & 255;
    $150 = $145 | $149;
    $block_fnum = $150;
    $151 = $CH;
    $152 = ((($151)) + 196|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $keyon;
    $156 = ($154|0)!=($155|0);
    if ($156) {
     $157 = $keyon;
     $158 = $157&255;
     $159 = $CH;
     $160 = ((($159)) + 196|0);
     HEAP8[$160>>0] = $158;
     $161 = ($158<<24>>24)!=(0);
     $162 = $CH;
     if ($161) {
      $163 = ((($162)) + 172|0);
      $164 = ((($163)) + 4|0);
      HEAP32[$164>>2] = 0;
      $165 = $CH;
      $166 = ((($165)) + 172|0);
      HEAP32[$166>>2] = 0;
      $167 = $CH;
      _OPL_KEYON($167);
      $168 = $CH;
      $169 = ((($168)) + 80|0);
      _OPL_KEYON($169);
      break;
     } else {
      _OPL_KEYOFF($162);
      $170 = $CH;
      $171 = ((($170)) + 80|0);
      _OPL_KEYOFF($171);
      break;
     }
    }
   } else {
    $134 = $CH;
    $135 = ((($134)) + 180|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $136 & 7936;
    $138 = $2;
    $139 = $137 | $138;
    $block_fnum = $139;
   }
  } while(0);
  $172 = $CH;
  $173 = ((($172)) + 180|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $block_fnum;
  $176 = ($174|0)!=($175|0);
  if (!($176)) {
   STACKTOP = sp;return;
  }
  $177 = $block_fnum;
  $178 = $177 >> 10;
  $179 = (7 - ($178))|0;
  $blockRv = $179;
  $180 = $block_fnum;
  $181 = $180 & 1023;
  $fnum = $181;
  $182 = $block_fnum;
  $183 = $CH;
  $184 = ((($183)) + 180|0);
  HEAP32[$184>>2] = $182;
  $185 = $block_fnum;
  $186 = $185 >> 6;
  $187 = (13872 + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $CH;
  $190 = ((($189)) + 192|0);
  HEAP32[$190>>2] = $188;
  $191 = $fnum;
  $192 = $0;
  $193 = ((($192)) + 688|0);
  $194 = (($193) + ($191<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $blockRv;
  $197 = $195 >>> $196;
  $198 = $CH;
  $199 = ((($198)) + 188|0);
  HEAP32[$199>>2] = $197;
  $200 = $CH;
  $201 = ((($200)) + 180|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $202 >>> 9;
  $204 = $203&255;
  $205 = $CH;
  $206 = ((($205)) + 184|0);
  HEAP8[$206>>0] = $204;
  $207 = $0;
  $208 = ((($207)) + 36|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $209 & 64;
  $211 = ($210|0)!=(0);
  if ($211) {
   $212 = $CH;
   $213 = ((($212)) + 180|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $214 & 256;
   $216 = ($215|0)!=(0);
   if ($216) {
    $217 = $CH;
    $218 = ((($217)) + 184|0);
    $219 = HEAP8[$218>>0]|0;
    $220 = $219&255;
    $221 = $220 | 1;
    $222 = $221&255;
    HEAP8[$218>>0] = $222;
   }
  }
  $223 = $CH;
  $224 = $CH;
  _CALC_FCSLOT($223,$224);
  $225 = $CH;
  $226 = $CH;
  $227 = ((($226)) + 80|0);
  _CALC_FCSLOT($225,$227);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _OPL_LockTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ST;
 $2 = $1;
 $3 = ((($2)) + 32788|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = $1;
 $7 = ((($6)) + 32788|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(1);
 if ($9) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $10 = $1;
 $11 = ((($10)) + 32792|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = (_OPLOpenTable($12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $15 = $1;
  $16 = ((($15)) + 32788|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _OPL_initalize($OPL) {
 $OPL = $OPL|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $9 = 0, $fn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (+($7|0));
  $9 = $0;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (+($11|0));
  $13 = $8 / $12;
  $14 = $13 / 72.0;
  $17 = $14;
 } else {
  $17 = 0.0;
 }
 $15 = $0;
 $16 = ((($15)) + 16|0);
 HEAPF64[$16>>3] = $17;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 $22 = $21 / 72.0;
 $23 = 1.0 / $22;
 $24 = $0;
 $25 = ((($24)) + 24|0);
 HEAPF64[$25>>3] = $23;
 $26 = $0;
 _init_timetables($26,141280,1956000);
 $fn = 0;
 while(1) {
  $27 = $fn;
  $28 = ($27|0)<(1024);
  $29 = $0;
  if (!($28)) {
   break;
  }
  $30 = ((($29)) + 16|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $fn;
  $33 = (+($32|0));
  $34 = $31 * $33;
  $35 = $34 * 16.0;
  $36 = $35 * 128.0;
  $37 = $36 / 2.0;
  $38 = (~~(($37))>>>0);
  $39 = $fn;
  $40 = $0;
  $41 = ((($40)) + 688|0);
  $42 = (($41) + ($39<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = $fn;
  $44 = (($43) + 1)|0;
  $fn = $44;
 }
 $45 = ((($29)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $0;
  $49 = ((($48)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (+($50|0));
  $52 = 4294967296.0 / $51;
  $53 = $52 * 3.7000000000000002;
  $54 = $0;
  $55 = ((($54)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (+($56|0));
  $58 = $57 / 3.6E+6;
  $59 = $53 * $58;
  $61 = $59;
 } else {
  $61 = 0.0;
 }
 $60 = (~~(($61)));
 $62 = $0;
 $63 = ((($62)) + 4796|0);
 HEAP32[$63>>2] = $60;
 $64 = $0;
 $65 = ((($64)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 if (!($67)) {
  $81 = 0.0;
  $80 = (~~(($81)));
  $82 = $0;
  $83 = ((($82)) + 4804|0);
  HEAP32[$83>>2] = $80;
  STACKTOP = sp;return;
 }
 $68 = $0;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (+($70|0));
 $72 = 4294967296.0 / $71;
 $73 = $72 * 6.4000000000000004;
 $74 = $0;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (+($76|0));
 $78 = $77 / 3.6E+6;
 $79 = $73 * $78;
 $81 = $79;
 $80 = (~~(($81)));
 $82 = $0;
 $83 = ((($82)) + 4804|0);
 HEAP32[$83>>2] = $80;
 STACKTOP = sp;return;
}
function _OPL_UnLockTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ST;
 $1 = $0;
 $2 = ((($1)) + 32788|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = ((($5)) + 32788|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$6>>2] = $8;
 }
 $9 = $0;
 $10 = ((($9)) + 32788|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 32792|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 _OPLCloseTable($15);
 STACKTOP = sp;return;
}
function _OPLCloseTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ST;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 STACKTOP = sp;return;
}
function _init_timetables($OPL,$ARRATE,$DRRATE) {
 $OPL = $OPL|0;
 $ARRATE = $ARRATE|0;
 $DRRATE = $DRRATE|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i = 0, $rate = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $ARRATE;
 $2 = $DRRATE;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = ((($6)) + 388|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP32[$8>>2] = 0;
  $9 = $i;
  $10 = $0;
  $11 = ((($10)) + 88|0);
  $12 = (($11) + ($9<<2)|0);
  HEAP32[$12>>2] = 0;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $i = 4;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<=(60);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = ((($17)) + 16|0);
  $19 = +HEAPF64[$18>>3];
  $rate = $19;
  $20 = $i;
  $21 = ($20|0)<(60);
  if ($21) {
   $22 = $i;
   $23 = $22 & 3;
   $24 = (+($23|0));
   $25 = $24 * 0.25;
   $26 = 1.0 + $25;
   $27 = $rate;
   $28 = $27 * $26;
   $rate = $28;
  }
  $29 = $i;
  $30 = $29 >> 2;
  $31 = (($30) - 1)|0;
  $32 = 1 << $31;
  $33 = (+($32|0));
  $34 = $rate;
  $35 = $34 * $33;
  $rate = $35;
  $36 = $rate;
  $37 = $36 * 268435456.0;
  $rate = $37;
  $38 = $rate;
  $39 = $1;
  $40 = (+($39|0));
  $41 = $38 / $40;
  $42 = (~~(($41)));
  $43 = $i;
  $44 = $0;
  $45 = ((($44)) + 88|0);
  $46 = (($45) + ($43<<2)|0);
  HEAP32[$46>>2] = $42;
  $47 = $rate;
  $48 = $2;
  $49 = (+($48|0));
  $50 = $47 / $49;
  $51 = (~~(($50)));
  $52 = $i;
  $53 = $0;
  $54 = ((($53)) + 388|0);
  $55 = (($54) + ($52<<2)|0);
  HEAP32[$55>>2] = $51;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $i = 60;
 while(1) {
  $58 = $i;
  $59 = ($58|0)<(75);
  if (!($59)) {
   break;
  }
  $60 = $i;
  $61 = $0;
  $62 = ((($61)) + 88|0);
  $63 = (($62) + ($60<<2)|0);
  HEAP32[$63>>2] = 268435455;
  $64 = $0;
  $65 = ((($64)) + 388|0);
  $66 = ((($65)) + 240|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $i;
  $69 = $0;
  $70 = ((($69)) + 388|0);
  $71 = (($70) + ($68<<2)|0);
  HEAP32[$71>>2] = $67;
  $72 = $i;
  $73 = (($72) + 1)|0;
  $i = $73;
 }
 STACKTOP = sp;return;
}
function _OPLOpenTable($ST) {
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $pom = 0.0, $rate = 0.0, $s = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ST;
 $2 = (_malloc(65536)|0);
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = ($2|0)==(0|0);
 if ($4) {
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $5 = (_malloc(32768)|0);
 $6 = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = ($5|0)==(0|0);
 if ($8) {
  $9 = $1;
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $11 = (_malloc(4096)|0);
 $12 = $1;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = $11;
 $14 = ($11|0)==(0|0);
 if ($14) {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $1;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _free($19);
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $20 = (_malloc(4096)|0);
 $21 = $1;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = $20;
 $23 = ($20|0)==(0|0);
 if ($23) {
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  _free($25);
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  _free($28);
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
  $0 = 0;
  $268 = $0;
  STACKTOP = sp;return ($268|0);
 }
 $t = 0;
 while(1) {
  $32 = $t;
  $33 = ($32|0)<(4095);
  if (!($33)) {
   break;
  }
  $34 = $t;
  $35 = (+($34|0));
  $36 = 0.0234375 * $35;
  $37 = $36 / 20.0;
  $38 = (+Math_pow(10.0,(+$37)));
  $39 = 67108863.0 / $38;
  $rate = $39;
  $40 = $rate;
  $41 = (~~(($40)));
  $42 = $t;
  $43 = $1;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42<<2)|0);
  HEAP32[$45>>2] = $41;
  $46 = $t;
  $47 = $1;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($46<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (0 - ($50))|0;
  $52 = $t;
  $53 = (8192 + ($52))|0;
  $54 = $1;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($53<<2)|0);
  HEAP32[$56>>2] = $51;
  $57 = $t;
  $58 = (($57) + 1)|0;
  $t = $58;
 }
 $t = 4095;
 while(1) {
  $59 = $t;
  $60 = ($59|0)<(8192);
  if (!($60)) {
   break;
  }
  $61 = $t;
  $62 = (8192 + ($61))|0;
  $63 = $1;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + ($62<<2)|0);
  HEAP32[$65>>2] = 0;
  $66 = $t;
  $67 = $1;
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($66<<2)|0);
  HEAP32[$69>>2] = 0;
  $70 = $t;
  $71 = (($70) + 1)|0;
  $t = $71;
 }
 $72 = $1;
 $73 = HEAP32[$72>>2]|0;
 $74 = ((($73)) + 16380|0);
 $75 = $1;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 4096|0);
 HEAP32[$78>>2] = $74;
 $79 = $1;
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$81>>2] = $74;
 $s = 1;
 while(1) {
  $82 = $s;
  $83 = ($82|0)<=(512);
  if (!($83)) {
   break;
  }
  $84 = $s;
  $85 = (+($84|0));
  $86 = 6.2831853071795862 * $85;
  $87 = $86 / 2048.0;
  $88 = (+Math_sin((+$87)));
  $pom = $88;
  $89 = $pom;
  $90 = 1.0 / $89;
  $91 = (+_log10($90));
  $92 = 20.0 * $91;
  $pom = $92;
  $93 = $pom;
  $94 = $93 / 0.0234375;
  $95 = (~~(($94)));
  $j = $95;
  $96 = $j;
  $97 = $1;
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($96<<2)|0);
  $100 = $s;
  $101 = (1024 - ($100))|0;
  $102 = $1;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + ($101<<2)|0);
  HEAP32[$105>>2] = $99;
  $106 = $s;
  $107 = $1;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($106<<2)|0);
  HEAP32[$110>>2] = $99;
  $111 = $j;
  $112 = (8192 + ($111))|0;
  $113 = $1;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($112<<2)|0);
  $116 = $s;
  $117 = (2048 - ($116))|0;
  $118 = $1;
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + ($117<<2)|0);
  HEAP32[$121>>2] = $115;
  $122 = $s;
  $123 = (1024 + ($122))|0;
  $124 = $1;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($123<<2)|0);
  HEAP32[$127>>2] = $115;
  $128 = $s;
  $129 = (($128) + 1)|0;
  $s = $129;
 }
 $s = 0;
 while(1) {
  $130 = $s;
  $131 = ($130|0)<(2048);
  if (!($131)) {
   break;
  }
  $132 = $s;
  $133 = ($132|0)<(1024);
  if ($133) {
   $134 = $s;
   $135 = $1;
   $136 = ((($135)) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $149 = $139;
  } else {
   $140 = $1;
   $141 = HEAP32[$140>>2]|0;
   $142 = ((($141)) + 16384|0);
   $149 = $142;
  }
  $143 = $s;
  $144 = (2048 + ($143))|0;
  $145 = $1;
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($144<<2)|0);
  HEAP32[$148>>2] = $149;
  $150 = $s;
  $151 = (($150|0) % 1024)&-1;
  $152 = $1;
  $153 = ((($152)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + ($151<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $s;
  $158 = (4096 + ($157))|0;
  $159 = $1;
  $160 = ((($159)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + ($158<<2)|0);
  HEAP32[$162>>2] = $156;
  $163 = $s;
  $164 = (($163|0) / 512)&-1;
  $165 = $164 & 1;
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $1;
   $168 = HEAP32[$167>>2]|0;
   $169 = ((($168)) + 16384|0);
   $183 = $169;
  } else {
   $170 = $s;
   $171 = (4096 + ($170))|0;
   $172 = $1;
   $173 = ((($172)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + ($171<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $183 = $176;
  }
  $177 = $s;
  $178 = (6144 + ($177))|0;
  $179 = $1;
  $180 = ((($179)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + ($178<<2)|0);
  HEAP32[$182>>2] = $183;
  $184 = $s;
  $185 = (($184) + 1)|0;
  $s = $185;
 }
 $i = 0;
 while(1) {
  $186 = $i;
  $187 = ($186|0)<(4096);
  if (!($187)) {
   break;
  }
  $188 = $i;
  $189 = (4095 - ($188))|0;
  $190 = (+($189|0));
  $191 = $190 / 4096.0;
  $192 = (+Math_pow((+$191),8.0));
  $193 = $192 * 4096.0;
  $pom = $193;
  $194 = $pom;
  $195 = (~~(($194)));
  $196 = $i;
  $197 = $1;
  $198 = ((($197)) + 16|0);
  $199 = (($198) + ($196<<2)|0);
  HEAP32[$199>>2] = $195;
  $200 = $i;
  $201 = $i;
  $202 = (4096 + ($201))|0;
  $203 = $1;
  $204 = ((($203)) + 16|0);
  $205 = (($204) + ($202<<2)|0);
  HEAP32[$205>>2] = $200;
  $206 = $i;
  $207 = (($206) + 1)|0;
  $i = $207;
 }
 $208 = $1;
 $209 = ((($208)) + 16|0);
 $210 = ((($209)) + 32768|0);
 HEAP32[$210>>2] = 4095;
 $i = 0;
 while(1) {
  $211 = $i;
  $212 = ($211|0)<(512);
  if (!($212)) {
   break;
  }
  $213 = $i;
  $214 = (+($213|0));
  $215 = 6.2831853071795862 * $214;
  $216 = $215 / 512.0;
  $217 = (+Math_sin((+$216)));
  $218 = 1.0 + $217;
  $219 = $218 / 2.0;
  $pom = $219;
  $220 = $pom;
  $221 = 42.666666666666664 * $220;
  $222 = (~~(($221)));
  $223 = $i;
  $224 = $1;
  $225 = ((($224)) + 8|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + ($223<<2)|0);
  HEAP32[$227>>2] = $222;
  $228 = $pom;
  $229 = 204.79999999999998 * $228;
  $230 = (~~(($229)));
  $231 = $i;
  $232 = (512 + ($231))|0;
  $233 = $1;
  $234 = ((($233)) + 8|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + ($232<<2)|0);
  HEAP32[$236>>2] = $230;
  $237 = $i;
  $238 = (($237) + 1)|0;
  $i = $238;
 }
 $i = 0;
 while(1) {
  $239 = $i;
  $240 = ($239|0)<(512);
  if (!($240)) {
   break;
  }
  $241 = $i;
  $242 = (+($241|0));
  $243 = 6.2831853071795862 * $242;
  $244 = $243 / 512.0;
  $245 = (+Math_sin((+$244)));
  $246 = 15.359999999999999 * $245;
  $pom = $246;
  $247 = $pom;
  $248 = $247 * 0.070000000000000007;
  $249 = 256.0 + $248;
  $250 = (~~(($249)));
  $251 = $i;
  $252 = $1;
  $253 = ((($252)) + 12|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($254) + ($251<<2)|0);
  HEAP32[$255>>2] = $250;
  $256 = $pom;
  $257 = $256 * 0.14000000000000001;
  $258 = 256.0 + $257;
  $259 = (~~(($258)));
  $260 = $i;
  $261 = (512 + ($260))|0;
  $262 = $1;
  $263 = ((($262)) + 12|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + ($261<<2)|0);
  HEAP32[$265>>2] = $259;
  $266 = $i;
  $267 = (($266) + 1)|0;
  $i = $267;
 }
 $0 = 1;
 $268 = $0;
 STACKTOP = sp;return ($268|0);
}
function _set_mul($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CH = 0, $SLOT = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 & 15;
 $15 = (14512 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $SLOT;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = $19 & 16;
 $21 = ($20|0)!=(0);
 $22 = $21 ? 0 : 2;
 $23 = $22&255;
 $24 = $SLOT;
 $25 = ((($24)) + 8|0);
 HEAP8[$25>>0] = $23;
 $26 = $2;
 $27 = $26 & 32;
 $28 = $27 >> 5;
 $29 = $28&255;
 $30 = $SLOT;
 $31 = ((($30)) + 44|0);
 HEAP8[$31>>0] = $29;
 $32 = $2;
 $33 = $32 & 64;
 $34 = $33&255;
 $35 = $SLOT;
 $36 = ((($35)) + 73|0);
 HEAP8[$36>>0] = $34;
 $37 = $2;
 $38 = $37 & 128;
 $39 = $38&255;
 $40 = $SLOT;
 $41 = ((($40)) + 72|0);
 HEAP8[$41>>0] = $39;
 $42 = $CH;
 $43 = $SLOT;
 _CALC_FCSLOT($42,$43);
 STACKTOP = sp;return;
}
function _set_ksl_tl($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CH = 0, $SLOT = 0, $ksl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 >> 6;
 $ksl = $14;
 $15 = $ksl;
 $16 = ($15|0)!=(0);
 $17 = $ksl;
 $18 = (3 - ($17))|0;
 $19 = $16 ? $18 : 31;
 $20 = $19&255;
 $21 = $SLOT;
 $22 = ((($21)) + 28|0);
 HEAP8[$22>>0] = $20;
 $23 = $2;
 $24 = $23 & 63;
 $25 = (+($24|0));
 $26 = $25 * 32.0;
 $27 = (~~(($26)));
 $28 = $SLOT;
 HEAP32[$28>>2] = $27;
 $29 = $0;
 $30 = ((($29)) + 36|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 128;
 $33 = ($32|0)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = $SLOT;
 $35 = HEAP32[$34>>2]|0;
 $36 = $CH;
 $37 = ((($36)) + 192|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $SLOT;
 $40 = ((($39)) + 28|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $38 >>> $42;
 $44 = (($35) + ($43))|0;
 $45 = $SLOT;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = $44;
 STACKTOP = sp;return;
}
function _set_ar_dr($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $CH = 0;
 var $SLOT = 0, $ar = 0, $dr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 >> 4;
 $ar = $14;
 $15 = $2;
 $16 = $15 & 15;
 $dr = $16;
 $17 = $ar;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $ar;
  $20 = $19 << 2;
  $21 = $0;
  $22 = ((($21)) + 88|0);
  $23 = (($22) + ($20<<2)|0);
  $26 = $23;
 } else {
  $26 = 14448;
 }
 $24 = $SLOT;
 $25 = ((($24)) + 12|0);
 HEAP32[$25>>2] = $26;
 $27 = $SLOT;
 $28 = ((($27)) + 29|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $SLOT;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $SLOT;
 $37 = ((($36)) + 60|0);
 HEAP32[$37>>2] = $35;
 $38 = $SLOT;
 $39 = ((($38)) + 45|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)==(2);
 if ($42) {
  $43 = $SLOT;
  $44 = ((($43)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $SLOT;
  $47 = ((($46)) + 56|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = $dr;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $dr;
  $51 = $50 << 2;
  $52 = $0;
  $53 = ((($52)) + 388|0);
  $54 = (($53) + ($51<<2)|0);
  $57 = $54;
 } else {
  $57 = 14448;
 }
 $55 = $SLOT;
 $56 = ((($55)) + 16|0);
 HEAP32[$56>>2] = $57;
 $58 = $SLOT;
 $59 = ((($58)) + 29|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $SLOT;
 $63 = ((($62)) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($61<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $SLOT;
 $68 = ((($67)) + 64|0);
 HEAP32[$68>>2] = $66;
 $69 = $SLOT;
 $70 = ((($69)) + 45|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = ($72|0)==(1);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = $SLOT;
 $75 = ((($74)) + 64|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $SLOT;
 $78 = ((($77)) + 56|0);
 HEAP32[$78>>2] = $76;
 STACKTOP = sp;return;
}
function _set_sl_rr($OPL,$slot,$v) {
 $OPL = $OPL|0;
 $slot = $slot|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $CH = 0, $SLOT = 0, $rr = 0, $sl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $OPL;
 $1 = $slot;
 $2 = $v;
 $3 = $1;
 $4 = (($3|0) / 2)&-1;
 $5 = $0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + (($4*200)|0)|0);
 $CH = $8;
 $9 = $1;
 $10 = $9 & 1;
 $11 = $CH;
 $12 = (($11) + (($10*80)|0)|0);
 $SLOT = $12;
 $13 = $2;
 $14 = $13 >> 4;
 $sl = $14;
 $15 = $2;
 $16 = $15 & 15;
 $rr = $16;
 $17 = $sl;
 $18 = (14384 + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $SLOT;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $SLOT;
 $23 = ((($22)) + 45|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $SLOT;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $SLOT;
  $31 = ((($30)) + 52|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $rr;
 $33 = $32 << 2;
 $34 = $0;
 $35 = ((($34)) + 388|0);
 $36 = (($35) + ($33<<2)|0);
 $37 = $SLOT;
 $38 = ((($37)) + 24|0);
 HEAP32[$38>>2] = $36;
 $39 = $SLOT;
 $40 = ((($39)) + 29|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $SLOT;
 $44 = ((($43)) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $SLOT;
 $49 = ((($48)) + 68|0);
 HEAP32[$49>>2] = $47;
 $50 = $SLOT;
 $51 = ((($50)) + 45|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = ($53|0)==(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $SLOT;
 $56 = ((($55)) + 68|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $SLOT;
 $59 = ((($58)) + 56|0);
 HEAP32[$59>>2] = $57;
 STACKTOP = sp;return;
}
function _OPL_KEYON($SLOT) {
 $SLOT = $SLOT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SLOT;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 45|0);
 HEAP8[$4>>0] = 2;
 $5 = $0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 56|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = ((($10)) + 48|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = ((($12)) + 52|0);
 HEAP32[$13>>2] = 268435456;
 STACKTOP = sp;return;
}
function _OPL_KEYOFF($SLOT) {
 $SLOT = $SLOT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SLOT;
 $1 = $0;
 $2 = ((($1)) + 45|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 45|0);
 HEAP8[$7>>0] = 0;
 $8 = $0;
 $9 = ((($8)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 268435456;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $0;
  $14 = ((($13)) + 48|0);
  HEAP32[$14>>2] = 268435456;
 }
 $15 = $0;
 $16 = ((($15)) + 52|0);
 HEAP32[$16>>2] = 536870912;
 $17 = $0;
 $18 = ((($17)) + 68|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 56|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function _CALC_FCSLOT($CH,$SLOT) {
 $CH = $CH|0;
 $SLOT = $SLOT|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ksr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CH;
 $1 = $SLOT;
 $2 = $0;
 $3 = ((($2)) + 188|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($4, $7)|0;
 $9 = $1;
 $10 = ((($9)) + 40|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = ((($11)) + 184|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $1;
 $16 = ((($15)) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $14 >> $18;
 $ksr = $19;
 $20 = $1;
 $21 = ((($20)) + 29|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $ksr;
 $25 = ($23|0)!=($24|0);
 if ($25) {
  $26 = $ksr;
  $27 = $26&255;
  $28 = $1;
  $29 = ((($28)) + 29|0);
  HEAP8[$29>>0] = $27;
  $30 = $ksr;
  $31 = $1;
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($30<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = ((($36)) + 60|0);
  HEAP32[$37>>2] = $35;
  $38 = $ksr;
  $39 = $1;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $1;
  $45 = ((($44)) + 64|0);
  HEAP32[$45>>2] = $43;
  $46 = $ksr;
  $47 = $1;
  $48 = ((($47)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = ((($52)) + 68|0);
  HEAP32[$53>>2] = $51;
 }
 $54 = $1;
 $55 = HEAP32[$54>>2]|0;
 $56 = $0;
 $57 = ((($56)) + 192|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $1;
 $60 = ((($59)) + 28|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $58 >>> $62;
 $64 = (($55) + ($63))|0;
 $65 = $1;
 $66 = ((($65)) + 4|0);
 HEAP32[$66>>2] = $64;
 STACKTOP = sp;return;
}
function _set_algorythm($CH,$ST) {
 $CH = $CH|0;
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $carrier = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $CH;
 $1 = $ST;
 $2 = $1;
 $3 = ((($2)) + 32820|0);
 $carrier = $3;
 $4 = $0;
 $5 = ((($4)) + 160|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)!=(0);
 $9 = $carrier;
 $10 = $1;
 $11 = ((($10)) + 32848|0);
 $12 = $8 ? $9 : $11;
 $13 = $0;
 $14 = ((($13)) + 164|0);
 HEAP32[$14>>2] = $12;
 $15 = $carrier;
 $16 = $0;
 $17 = ((($16)) + 168|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _OPL_CALC_SLOT($SLOT,$ST) {
 $SLOT = $SLOT|0;
 $ST = $ST|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $SLOT;
 $1 = $ST;
 $2 = $0;
 $3 = ((($2)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = ((($5)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 $9 = $0;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>=($11|0);
 do {
  if ($12) {
   $13 = $0;
   $14 = ((($13)) + 45|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   if ((($16|0) == 1)) {
    $31 = $0;
    $32 = ((($31)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $0;
    $35 = ((($34)) + 48|0);
    HEAP32[$35>>2] = $33;
    $36 = $0;
    $37 = ((($36)) + 52|0);
    HEAP32[$37>>2] = 536870912;
    $38 = $0;
    $39 = ((($38)) + 44|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = ($40<<24>>24)!=(0);
    $42 = $0;
    if ($41) {
     $43 = ((($42)) + 56|0);
     HEAP32[$43>>2] = 0;
     break;
    } else {
     $44 = ((($42)) + 45|0);
     HEAP8[$44>>0] = 0;
     $45 = $0;
     $46 = ((($45)) + 68|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $0;
     $49 = ((($48)) + 56|0);
     HEAP32[$49>>2] = $47;
     break;
    }
   } else if ((($16|0) == 0)) {
    $50 = $0;
    $51 = ((($50)) + 48|0);
    HEAP32[$51>>2] = 536870912;
    $52 = $0;
    $53 = ((($52)) + 52|0);
    HEAP32[$53>>2] = 536870913;
    $54 = $0;
    $55 = ((($54)) + 56|0);
    HEAP32[$55>>2] = 0;
    break;
   } else if ((($16|0) == 2)) {
    $17 = $0;
    $18 = ((($17)) + 45|0);
    HEAP8[$18>>0] = 1;
    $19 = $0;
    $20 = ((($19)) + 48|0);
    HEAP32[$20>>2] = 268435456;
    $21 = $0;
    $22 = ((($21)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $0;
    $25 = ((($24)) + 52|0);
    HEAP32[$25>>2] = $23;
    $26 = $0;
    $27 = ((($26)) + 64|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $0;
    $30 = ((($29)) + 56|0);
    HEAP32[$30>>2] = $28;
    break;
   } else {
    break;
   }
  }
 } while(0);
 $56 = $0;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $0;
 $60 = ((($59)) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 >> 16;
 $63 = $1;
 $64 = ((($63)) + 16|0);
 $65 = (($64) + ($62<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($58) + ($66))|0;
 $68 = $0;
 $69 = ((($68)) + 72|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = ($71|0)!=(0);
 if (!($72)) {
  $77 = 0;
  $76 = (($67) + ($77))|0;
  STACKTOP = sp;return ($76|0);
 }
 $73 = $1;
 $74 = ((($73)) + 32824|0);
 $75 = HEAP32[$74>>2]|0;
 $77 = $75;
 $76 = (($67) + ($77))|0;
 STACKTOP = sp;return ($76|0);
}
function _process_fx($ctx,$xc,$chn,$e,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $e = $e|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0.0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0.0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0.0, $1282 = 0.0, $1283 = 0.0, $1284 = 0.0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0.0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0.0, $1302 = 0.0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0.0, $1307 = 0.0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0.0, $1347 = 0, $1348 = 0, $1349 = 0.0, $135 = 0, $1350 = 0.0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0.0, $1355 = 0.0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0.0, $1849 = 0.0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0.0, $1857 = 0.0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $f = 0, $fxp = 0, $fxt = 0, $h = 0, $instrument = 0, $l = 0, $m = 0, $min_bpm = 0, $mod = 0, $note = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $e;
 $4 = $fnum;
 $5 = $0;
 $p = $5;
 $6 = $0;
 $7 = ((($6)) + 1552|0);
 $m = $7;
 $8 = $m;
 $mod = $8;
 $9 = $p;
 $10 = ((($9)) + 324|0);
 $f = $10;
 $11 = $m;
 $12 = ((($11)) + 1288|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(3);
 if ($14) {
  $15 = $1;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 104|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $3;
 $21 = HEAP8[$20>>0]|0;
 $note = $21;
 $22 = $4;
 $23 = ($22|0)==(0);
 $24 = $3;
 if ($23) {
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $fxt = $26;
  $27 = $3;
  $28 = ((($27)) + 4|0);
  $29 = HEAP8[$28>>0]|0;
  $fxp = $29;
 } else {
  $30 = ((($24)) + 5|0);
  $31 = HEAP8[$30>>0]|0;
  $fxt = $31;
  $32 = $3;
  $33 = ((($32)) + 6|0);
  $34 = HEAP8[$33>>0]|0;
  $fxp = $34;
 }
 $35 = $fxt;
 $36 = $35&255;
 L8: do {
  switch ($36|0) {
  case 114:  {
   $139 = $fxp;
   $140 = $139&255;
   $141 = ($140|0)!=(0);
   if (!($141)) {
    STACKTOP = sp;return;
   }
   $142 = $fxp;
   $143 = $142&255;
   $144 = $143 & 15;
   $145 = $144&255;
   $146 = $1;
   $147 = ((($146)) + 168|0);
   HEAP8[$147>>0] = $145;
   $148 = $fxp;
   $149 = $148&255;
   $150 = $149 & 15;
   $151 = $150&255;
   $152 = $1;
   $153 = ((($152)) + 168|0);
   $154 = ((($153)) + 1|0);
   HEAP8[$154>>0] = $151;
   $155 = $1;
   $156 = ((($155)) + 168|0);
   $157 = ((($156)) + 2|0);
   HEAP8[$157>>0] = 0;
   $158 = $1;
   $159 = ((($158)) + 168|0);
   $160 = ((($159)) + 16|0);
   HEAP32[$160>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 15:  {
   $1142 = $p;
   $1143 = ((($1142)) + 28|0);
   $1144 = HEAP32[$1143>>2]|0;
   $1145 = $1144 & 1;
   $1146 = ($1145|0)!=(0);
   if ($1146) {
    label = 226;
   } else {
    $1147 = $fxp;
    $1148 = $1147&255;
    $1149 = ($1148|0)<(32);
    if ($1149) {
     label = 226;
    } else {
     label = 228;
    }
   }
   break;
  }
  case 176:  {
   label = 219;
   break;
  }
  case 166:  {
   label = 200;
   break;
  }
  case 4:  {
   $411 = $fxp;
   $412 = $411&255;
   $413 = ($412|0)==(0);
   if ($413) {
    $414 = $1;
    $415 = ((($414)) + 108|0);
    $416 = ((($415)) + 16|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = $417&255;
    $fxp = $418;
   } else {
    $419 = $fxp;
    $420 = $419&255;
    $421 = $1;
    $422 = ((($421)) + 108|0);
    $423 = ((($422)) + 16|0);
    HEAP32[$423>>2] = $420;
   }
   $424 = $m;
   $425 = ((($424)) + 1284|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = $426 & 268435456;
   $428 = ($427|0)!=(0);
   if ($428) {
    $429 = $fxp;
    $430 = $429&255;
    $431 = ($430|0)!=(0);
    if ($431) {
     $432 = $fxp;
     $433 = $432&255;
     $434 = $1;
     $435 = ((($434)) + 252|0);
     $436 = ((($435)) + 12|0);
     HEAP32[$436>>2] = $433;
    }
   }
   $437 = $1;
   $438 = HEAP32[$437>>2]|0;
   $439 = $438 | 16;
   HEAP32[$437>>2] = $439;
   $440 = $fxp;
   $441 = $440&255;
   $442 = $441 & 15;
   $443 = $442 << 2;
   $444 = ($443|0)!=(0);
   if ($444) {
    $445 = $1;
    $446 = ((($445)) + 108|0);
    $447 = $fxp;
    $448 = $447&255;
    $449 = $448 & 15;
    $450 = $449 << 2;
    _set_lfo_depth($446,$450);
   }
   $451 = $fxp;
   $452 = $451&255;
   $453 = $452 & 240;
   $454 = $453 >> 4;
   $455 = ($454|0)!=(0);
   if (!($455)) {
    STACKTOP = sp;return;
   }
   $456 = $1;
   $457 = ((($456)) + 108|0);
   $458 = $fxp;
   $459 = $458&255;
   $460 = $459 & 240;
   $461 = $460 >> 4;
   _set_lfo_rate($457,$461);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $246 = $m;
   $247 = ((($246)) + 1284|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = $248 & 268435456;
   $250 = ($249|0)!=(0);
   $251 = $fxp;
   $252 = $251&255;
   $253 = ($252|0)==(0);
   do {
    if ($250) {
     if ($253) {
      $254 = $1;
      $255 = ((($254)) + 252|0);
      $256 = ((($255)) + 12|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = $257&255;
      $fxp = $258;
      break;
     } else {
      $259 = $fxp;
      $260 = $259&255;
      $261 = $1;
      $262 = ((($261)) + 252|0);
      $263 = ((($262)) + 12|0);
      HEAP32[$263>>2] = $260;
      break;
     }
    } else {
     if ($253) {
      $264 = $1;
      $265 = ((($264)) + 312|0);
      $266 = ((($265)) + 16|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = $267&255;
      $fxp = $268;
      break;
     } else {
      $269 = $fxp;
      $270 = $269&255;
      $271 = $1;
      $272 = ((($271)) + 312|0);
      $273 = ((($272)) + 16|0);
      HEAP32[$273>>2] = $270;
      break;
     }
    }
   } while(0);
   $274 = $m;
   $275 = ((($274)) + 1284|0);
   $276 = HEAP32[$275>>2]|0;
   $277 = $276 & 32;
   $278 = ($277|0)!=(0);
   do {
    if ($278) {
     $279 = $4;
     $280 = ($279|0)==(0);
     if (!($280)) {
      $281 = $m;
      $282 = ((($281)) + 1284|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = $283 & 2048;
      $285 = ($284|0)!=(0);
      if ($285) {
       break;
      }
     }
     $286 = $fxp;
     $287 = $286&255;
     $288 = $287 & 240;
     $289 = $288 >> 4;
     if ((($289|0) == 15)) {
      $290 = $fxp;
      $291 = $290&255;
      $292 = $291 & 15;
      $293 = $292&255;
      $fxp = $293;
      label = 219;
      break L8;
     } else if ((($289|0) == 14)) {
      $294 = $fxp;
      $295 = $294&255;
      $296 = $295 & 15;
      $297 = $296&255;
      $fxp = $297;
      $298 = $fxp;
      $299 = $298&255;
      $300 = $299 | 32;
      $301 = $300&255;
      $fxp = $301;
      label = 328;
      break L8;
     } else {
      break;
     }
    }
   } while(0);
   $302 = $1;
   $303 = HEAP32[$302>>2]|0;
   $304 = $303 | 8;
   HEAP32[$302>>2] = $304;
   $305 = $fxp;
   $306 = $305&255;
   $307 = ($306|0)!=(0);
   if ($307) {
    $308 = $fxp;
    $309 = $308&255;
    $310 = $1;
    $311 = ((($310)) + 312|0);
    HEAP32[$311>>2] = $309;
    $312 = $m;
    $313 = ((($312)) + 1284|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = $314 & 1024;
    $316 = ($315|0)!=(0);
    if (!($316)) {
     STACKTOP = sp;return;
    }
    $317 = $fxp;
    $318 = $317&255;
    $319 = $1;
    $320 = ((($319)) + 336|0);
    $321 = ((($320)) + 16|0);
    HEAP32[$321>>2] = $318;
    STACKTOP = sp;return;
   } else {
    $322 = $1;
    $323 = ((($322)) + 312|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)<(0);
    if (!($325)) {
     STACKTOP = sp;return;
    }
    $326 = $1;
    $327 = ((($326)) + 312|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = Math_imul($328, -1)|0;
    HEAP32[$327>>2] = $329;
    STACKTOP = sp;return;
   }
   break;
  }
  case 175:  {
   label = 217;
   break;
  }
  case 173:  {
   $1157 = $m;
   $1158 = ((($1157)) + 1284|0);
   $1159 = HEAP32[$1158>>2]|0;
   $1160 = $1159 & 268435456;
   $1161 = ($1160|0)!=(0);
   $1162 = $fxp;
   $1163 = $1162&255;
   $1164 = ($1163|0)==(0);
   if ($1161) {
    if ($1164) {
     $1165 = $1;
     $1166 = ((($1165)) + 252|0);
     $1167 = ((($1166)) + 12|0);
     $1168 = HEAP32[$1167>>2]|0;
     $1169 = $1168&255;
     $fxp = $1169;
     label = 208;
     break L8;
    } else {
     $1170 = $fxp;
     $1171 = $1170&255;
     $1172 = $1;
     $1173 = ((($1172)) + 252|0);
     $1174 = ((($1173)) + 12|0);
     HEAP32[$1174>>2] = $1171;
     label = 208;
     break L8;
    }
   } else {
    if ($1164) {
     $1175 = $1;
     $1176 = ((($1175)) + 276|0);
     $1177 = HEAP32[$1176>>2]|0;
     $1178 = $1177&255;
     $fxp = $1178;
     label = 208;
     break L8;
    } else {
     $1179 = $fxp;
     $1180 = $1179&255;
     $1181 = $1;
     $1182 = ((($1181)) + 276|0);
     HEAP32[$1182>>2] = $1180;
     label = 208;
     break L8;
    }
   }
   break;
  }
  case 8:  {
   $587 = $m;
   $588 = ((($587)) + 1284|0);
   $589 = HEAP32[$588>>2]|0;
   $590 = $589 & 67108864;
   $591 = ($590|0)==(0);
   $592 = $4;
   $593 = ($592|0)==(0);
   $or$cond = $591 | $593;
   if (!($or$cond)) {
    $594 = $3;
    $595 = HEAP8[$594>>0]|0;
    $596 = $595&255;
    $597 = ($596|0)!=(129);
    if (!($597)) {
     $598 = $3;
     $599 = ((($598)) + 3|0);
     $600 = HEAP8[$599>>0]|0;
     $601 = $600&255;
     $602 = ($601|0)!=(14);
     if (!($602)) {
      $603 = $3;
      $604 = ((($603)) + 4|0);
      $605 = HEAP8[$604>>0]|0;
      $606 = $605&255;
      $607 = $606 & 240;
      $608 = $607 >> 4;
      $609 = ($608|0)!=(13);
      if (!($609)) {
       STACKTOP = sp;return;
      }
     }
    }
   }
   $610 = $fxp;
   $611 = $610&255;
   $612 = $1;
   $613 = ((($612)) + 368|0);
   HEAP32[$613>>2] = $611;
   $614 = $1;
   $615 = ((($614)) + 368|0);
   $616 = ((($615)) + 16|0);
   HEAP32[$616>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $535 = $1;
   $536 = HEAP32[$535>>2]|0;
   $537 = $536 | 16;
   HEAP32[$535>>2] = $537;
   label = 124;
   break;
  }
  case 10:  {
   label = 124;
   break;
  }
  case 7:  {
   $538 = $fxp;
   $539 = $538&255;
   $540 = ($539|0)==(0);
   if ($540) {
    $541 = $1;
    $542 = ((($541)) + 128|0);
    $543 = ((($542)) + 16|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = $544&255;
    $fxp = $545;
   } else {
    $546 = $fxp;
    $547 = $546&255;
    $548 = $1;
    $549 = ((($548)) + 128|0);
    $550 = ((($549)) + 16|0);
    HEAP32[$550>>2] = $547;
   }
   $551 = $m;
   $552 = ((($551)) + 1284|0);
   $553 = HEAP32[$552>>2]|0;
   $554 = $553 & 268435456;
   $555 = ($554|0)!=(0);
   if ($555) {
    $556 = $fxp;
    $557 = $556&255;
    $558 = ($557|0)!=(0);
    if ($558) {
     $559 = $fxp;
     $560 = $559&255;
     $561 = $1;
     $562 = ((($561)) + 252|0);
     $563 = ((($562)) + 12|0);
     HEAP32[$563>>2] = $560;
    }
   }
   $564 = $1;
   $565 = HEAP32[$564>>2]|0;
   $566 = $565 | 32;
   HEAP32[$564>>2] = $566;
   $567 = $fxp;
   $568 = $567&255;
   $569 = $568 & 15;
   $570 = ($569|0)!=(0);
   if ($570) {
    $571 = $1;
    $572 = ((($571)) + 128|0);
    $573 = $fxp;
    $574 = $573&255;
    $575 = $574 & 15;
    _set_lfo_depth($572,$575);
   }
   $576 = $fxp;
   $577 = $576&255;
   $578 = $577 & 240;
   $579 = $578 >> 4;
   $580 = ($579|0)!=(0);
   if (!($580)) {
    STACKTOP = sp;return;
   }
   $581 = $1;
   $582 = ((($581)) + 128|0);
   $583 = $fxp;
   $584 = $583&255;
   $585 = $584 & 240;
   $586 = $585 >> 4;
   _set_lfo_rate($582,$586);
   STACKTOP = sp;return;
   break;
  }
  case 172:  {
   $462 = $fxp;
   $463 = $462&255;
   $464 = ($463|0)==(0);
   if ($464) {
    $465 = $1;
    $466 = ((($465)) + 108|0);
    $467 = ((($466)) + 16|0);
    $468 = HEAP32[$467>>2]|0;
    $469 = $468&255;
    $fxp = $469;
   } else {
    $470 = $fxp;
    $471 = $470&255;
    $472 = $1;
    $473 = ((($472)) + 108|0);
    $474 = ((($473)) + 16|0);
    HEAP32[$474>>2] = $471;
   }
   $475 = $m;
   $476 = ((($475)) + 1284|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 & 268435456;
   $479 = ($478|0)!=(0);
   if ($479) {
    $480 = $fxp;
    $481 = $480&255;
    $482 = ($481|0)!=(0);
    if ($482) {
     $483 = $fxp;
     $484 = $483&255;
     $485 = $1;
     $486 = ((($485)) + 252|0);
     $487 = ((($486)) + 12|0);
     HEAP32[$487>>2] = $484;
    }
   }
   $488 = $1;
   $489 = HEAP32[$488>>2]|0;
   $490 = $489 | 16;
   HEAP32[$488>>2] = $490;
   $491 = $fxp;
   $492 = $491&255;
   $493 = $492 & 15;
   $494 = ($493|0)!=(0);
   if ($494) {
    $495 = $1;
    $496 = ((($495)) + 108|0);
    $497 = $fxp;
    $498 = $497&255;
    $499 = $498 & 15;
    _set_lfo_depth($496,$499);
   }
   $500 = $fxp;
   $501 = $500&255;
   $502 = $501 & 240;
   $503 = $502 >> 4;
   $504 = ($503|0)!=(0);
   if (!($504)) {
    STACKTOP = sp;return;
   }
   $505 = $1;
   $506 = ((($505)) + 108|0);
   $507 = $fxp;
   $508 = $507&255;
   $509 = $508 & 240;
   $510 = $509 >> 4;
   _set_lfo_rate($506,$510);
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $817 = $p;
   $818 = ((($817)) + 324|0);
   HEAP32[$818>>2] = 1;
   $819 = $fxp;
   $820 = $819&255;
   $821 = $p;
   $822 = ((($821)) + 324|0);
   $823 = ((($822)) + 4|0);
   HEAP32[$823>>2] = $820;
   $824 = $p;
   $825 = ((($824)) + 324|0);
   $826 = ((($825)) + 12|0);
   HEAP32[$826>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $849 = $p;
   $850 = ((($849)) + 324|0);
   HEAP32[$850>>2] = 1;
   $851 = $fxp;
   $852 = $851&255;
   $853 = $852 & 240;
   $854 = $853 >> 4;
   $855 = ($854*10)|0;
   $856 = $fxp;
   $857 = $856&255;
   $858 = $857 & 15;
   $859 = (($855) + ($858))|0;
   $860 = $p;
   $861 = ((($860)) + 324|0);
   $862 = ((($861)) + 12|0);
   HEAP32[$862>>2] = $859;
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $863 = $m;
   $864 = ((($863)) + 1284|0);
   $865 = HEAP32[$864>>2]|0;
   $866 = $865 & 268435456;
   $867 = ($866|0)!=(0);
   do {
    if ($867) {
     $868 = $fxp;
     $869 = $868&255;
     $870 = ($869|0)==(0);
     if ($870) {
      $871 = $1;
      $872 = ((($871)) + 252|0);
      $873 = ((($872)) + 12|0);
      $874 = HEAP32[$873>>2]|0;
      $875 = $874&255;
      $fxp = $875;
      break;
     } else {
      $876 = $fxp;
      $877 = $876&255;
      $878 = $1;
      $879 = ((($878)) + 252|0);
      $880 = ((($879)) + 12|0);
      HEAP32[$880>>2] = $877;
      break;
     }
    }
   } while(0);
   $881 = $fxp;
   $882 = $881&255;
   $883 = $882 >> 4;
   $884 = $883&255;
   $fxt = $884;
   $885 = $fxp;
   $886 = $885&255;
   $887 = $886 & 15;
   $888 = $887&255;
   $fxp = $888;
   $889 = $fxt;
   $890 = $889&255;
   do {
    switch ($890|0) {
    case 5:  {
     $959 = $fxp;
     $960 = $959&255;
     $961 = $960 << 4;
     $962 = $961&255;
     $fxp = $962;
     $963 = $m;
     $964 = ((($963)) + 1284|0);
     $965 = HEAP32[$964>>2]|0;
     $966 = $965 & 67108864;
     $967 = ($966|0)!=(0);
     if (!($967)) {
      label = 200;
      break L8;
     }
     $968 = $note;
     $969 = $968&255;
     $970 = ($969|0)>(0);
     if ($970) {
      label = 200;
      break L8;
     }
     STACKTOP = sp;return;
     break;
    }
    case 12:  {
     $1117 = $1;
     $1118 = HEAP32[$1117>>2]|0;
     $1119 = $1118 | 262144;
     HEAP32[$1117>>2] = $1119;
     $1120 = $1;
     $1121 = ((($1120)) + 8|0);
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = $1122 | 8;
     HEAP32[$1121>>2] = $1123;
     $1124 = $fxp;
     $1125 = $1124&255;
     $1126 = (($1125) + 1)|0;
     $1127 = $1;
     $1128 = ((($1127)) + 228|0);
     HEAP32[$1128>>2] = $1126;
     $1129 = $1;
     $1130 = ((($1129)) + 228|0);
     $1131 = HEAP32[$1130>>2]|0;
     $1132 = $1;
     $1133 = ((($1132)) + 228|0);
     $1134 = ((($1133)) + 4|0);
     HEAP32[$1134>>2] = $1131;
     $1135 = $1;
     $1136 = ((($1135)) + 228|0);
     $1137 = ((($1136)) + 8|0);
     HEAP32[$1137>>2] = 16;
     STACKTOP = sp;return;
     break;
    }
    case 15:  {
     $1138 = $fxp;
     $1139 = $1138&255;
     $1140 = $1;
     $1141 = ((($1140)) + 388|0);
     HEAP32[$1141>>2] = $1139;
     STACKTOP = sp;return;
     break;
    }
    case 9:  {
     $1045 = $1;
     $1046 = HEAP32[$1045>>2]|0;
     $1047 = $1046 | 262144;
     HEAP32[$1045>>2] = $1047;
     $1048 = $fxp;
     $1049 = $1048&255;
     $1050 = $1;
     $1051 = ((($1050)) + 228|0);
     HEAP32[$1051>>2] = $1049;
     $1052 = $1;
     $1053 = ((($1052)) + 228|0);
     $1054 = HEAP32[$1053>>2]|0;
     $1055 = $1054 & 15;
     $1056 = (($1055) + 1)|0;
     $1057 = $1;
     $1058 = ((($1057)) + 228|0);
     $1059 = ((($1058)) + 4|0);
     HEAP32[$1059>>2] = $1056;
     $1060 = $1;
     $1061 = ((($1060)) + 228|0);
     $1062 = ((($1061)) + 8|0);
     HEAP32[$1062>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $891 = $m;
     $892 = ((($891)) + 1284|0);
     $893 = HEAP32[$892>>2]|0;
     $894 = $893 & 268435456;
     $895 = ($894|0)!=(0);
     $896 = $fxp;
     $897 = $896&255;
     $898 = ($897|0)==(0);
     if ($895) {
      if ($898) {
       $899 = $1;
       $900 = ((($899)) + 252|0);
       $901 = ((($900)) + 12|0);
       $902 = HEAP32[$901>>2]|0;
       $903 = $902&255;
       $fxp = $903;
       label = 217;
       break L8;
      } else {
       $904 = $fxp;
       $905 = $904&255;
       $906 = $1;
       $907 = ((($906)) + 252|0);
       $908 = ((($907)) + 12|0);
       HEAP32[$908>>2] = $905;
       label = 217;
       break L8;
      }
     } else {
      if ($898) {
       $909 = $1;
       $910 = ((($909)) + 360|0);
       $911 = HEAP32[$910>>2]|0;
       $912 = $911&255;
       $fxp = $912;
       label = 217;
       break L8;
      } else {
       $913 = $fxp;
       $914 = $913&255;
       $915 = $1;
       $916 = ((($915)) + 360|0);
       HEAP32[$916>>2] = $914;
       label = 217;
       break L8;
      }
     }
     break;
    }
    case 3:  {
     $945 = $fxp;
     $946 = ($945<<24>>24)!=(0);
     $947 = $1;
     $948 = HEAP32[$947>>2]|0;
     if ($946) {
      $949 = $948 | 67108864;
      HEAP32[$947>>2] = $949;
      STACKTOP = sp;return;
     } else {
      $950 = $948 & -67108865;
      HEAP32[$947>>2] = $950;
      STACKTOP = sp;return;
     }
     break;
    }
    case 10:  {
     $1063 = $m;
     $1064 = ((($1063)) + 1284|0);
     $1065 = HEAP32[$1064>>2]|0;
     $1066 = $1065 & 268435456;
     $1067 = ($1066|0)!=(0);
     $1068 = $fxp;
     $1069 = $1068&255;
     $1070 = ($1069|0)==(0);
     if ($1067) {
      if ($1070) {
       $1071 = $1;
       $1072 = ((($1071)) + 252|0);
       $1073 = ((($1072)) + 12|0);
       $1074 = HEAP32[$1073>>2]|0;
       $1075 = $1074&255;
       $fxp = $1075;
       label = 208;
       break L8;
      } else {
       $1076 = $fxp;
       $1077 = $1076&255;
       $1078 = $1;
       $1079 = ((($1078)) + 252|0);
       $1080 = ((($1079)) + 12|0);
       HEAP32[$1080>>2] = $1077;
       label = 208;
       break L8;
      }
     } else {
      if ($1070) {
       $1081 = $1;
       $1082 = ((($1081)) + 276|0);
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = $1083&255;
       $fxp = $1084;
       label = 208;
       break L8;
      } else {
       $1085 = $fxp;
       $1086 = $1085&255;
       $1087 = $1;
       $1088 = ((($1087)) + 276|0);
       HEAP32[$1088>>2] = $1086;
       label = 208;
       break L8;
      }
     }
     break;
    }
    case 4:  {
     $951 = $fxp;
     $952 = $951&255;
     $953 = $952 & 3;
     $954 = $953&255;
     $fxp = $954;
     $955 = $1;
     $956 = ((($955)) + 108|0);
     $957 = $fxp;
     $958 = $957&255;
     _set_lfo_waveform($956,$958);
     STACKTOP = sp;return;
     break;
    }
    case 7:  {
     $1040 = $1;
     $1041 = ((($1040)) + 128|0);
     $1042 = $fxp;
     $1043 = $1042&255;
     $1044 = $1043 & 3;
     _set_lfo_waveform($1041,$1044);
     STACKTOP = sp;return;
     break;
    }
    case 11:  {
     $1089 = $m;
     $1090 = ((($1089)) + 1284|0);
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = $1091 & 268435456;
     $1093 = ($1092|0)!=(0);
     $1094 = $fxp;
     $1095 = $1094&255;
     $1096 = ($1095|0)==(0);
     if ($1093) {
      if ($1096) {
       $1097 = $1;
       $1098 = ((($1097)) + 252|0);
       $1099 = ((($1098)) + 12|0);
       $1100 = HEAP32[$1099>>2]|0;
       $1101 = $1100&255;
       $fxp = $1101;
       label = 216;
       break L8;
      } else {
       $1102 = $fxp;
       $1103 = $1102&255;
       $1104 = $1;
       $1105 = ((($1104)) + 252|0);
       $1106 = ((($1105)) + 12|0);
       HEAP32[$1106>>2] = $1103;
       label = 216;
       break L8;
      }
     } else {
      if ($1096) {
       $1107 = $1;
       $1108 = ((($1107)) + 276|0);
       $1109 = ((($1108)) + 4|0);
       $1110 = HEAP32[$1109>>2]|0;
       $1111 = $1110&255;
       $fxp = $1111;
       label = 216;
       break L8;
      } else {
       $1112 = $fxp;
       $1113 = $1112&255;
       $1114 = $1;
       $1115 = ((($1114)) + 276|0);
       $1116 = ((($1115)) + 4|0);
       HEAP32[$1116>>2] = $1113;
       label = 216;
       break L8;
      }
     }
     break;
    }
    case 6:  {
     $971 = $fxp;
     $972 = $971&255;
     $973 = ($972|0)==(0);
     if ($973) {
      $974 = $p;
      $975 = ((($974)) + 8|0);
      $976 = HEAP32[$975>>2]|0;
      $977 = $2;
      $978 = $f;
      $979 = ((($978)) + 20|0);
      $980 = HEAP32[$979>>2]|0;
      $981 = (($980) + ($977<<3)|0);
      HEAP32[$981>>2] = $976;
      $982 = $m;
      $983 = ((($982)) + 1284|0);
      $984 = HEAP32[$983>>2]|0;
      $985 = $984 & 67108864;
      $986 = ($985|0)!=(0);
      if (!($986)) {
       STACKTOP = sp;return;
      }
      $987 = $p;
      $988 = ((($987)) + 8|0);
      $989 = HEAP32[$988>>2]|0;
      $990 = $p;
      $991 = ((($990)) + 324|0);
      $992 = ((($991)) + 12|0);
      HEAP32[$992>>2] = $989;
      STACKTOP = sp;return;
     }
     $993 = $2;
     $994 = $f;
     $995 = ((($994)) + 20|0);
     $996 = HEAP32[$995>>2]|0;
     $997 = (($996) + ($993<<3)|0);
     $998 = ((($997)) + 4|0);
     $999 = HEAP32[$998>>2]|0;
     $1000 = ($999|0)!=(0);
     if (!($1000)) {
      $1028 = $fxp;
      $1029 = $1028&255;
      $1030 = $2;
      $1031 = $f;
      $1032 = ((($1031)) + 20|0);
      $1033 = HEAP32[$1032>>2]|0;
      $1034 = (($1033) + ($1030<<3)|0);
      $1035 = ((($1034)) + 4|0);
      HEAP32[$1035>>2] = $1029;
      $1036 = $2;
      $1037 = (($1036) + 1)|0;
      $2 = $1037;
      $1038 = $f;
      $1039 = ((($1038)) + 16|0);
      HEAP32[$1039>>2] = $1037;
      STACKTOP = sp;return;
     }
     $1001 = $2;
     $1002 = $f;
     $1003 = ((($1002)) + 20|0);
     $1004 = HEAP32[$1003>>2]|0;
     $1005 = (($1004) + ($1001<<3)|0);
     $1006 = ((($1005)) + 4|0);
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = (($1007) + -1)|0;
     HEAP32[$1006>>2] = $1008;
     $1009 = ($1008|0)!=(0);
     if ($1009) {
      $1010 = $2;
      $1011 = (($1010) + 1)|0;
      $2 = $1011;
      $1012 = $f;
      $1013 = ((($1012)) + 16|0);
      HEAP32[$1013>>2] = $1011;
      STACKTOP = sp;return;
     }
     $1014 = $m;
     $1015 = ((($1014)) + 1284|0);
     $1016 = HEAP32[$1015>>2]|0;
     $1017 = $1016 & 1;
     $1018 = ($1017|0)!=(0);
     if (!($1018)) {
      STACKTOP = sp;return;
     }
     $1019 = $p;
     $1020 = ((($1019)) + 8|0);
     $1021 = HEAP32[$1020>>2]|0;
     $1022 = (($1021) + 1)|0;
     $1023 = $2;
     $1024 = $f;
     $1025 = ((($1024)) + 20|0);
     $1026 = HEAP32[$1025>>2]|0;
     $1027 = (($1026) + ($1023<<3)|0);
     HEAP32[$1027>>2] = $1022;
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $917 = $m;
     $918 = ((($917)) + 1284|0);
     $919 = HEAP32[$918>>2]|0;
     $920 = $919 & 268435456;
     $921 = ($920|0)!=(0);
     $922 = $fxp;
     $923 = $922&255;
     $924 = ($923|0)==(0);
     if ($921) {
      if ($924) {
       $925 = $1;
       $926 = ((($925)) + 252|0);
       $927 = ((($926)) + 12|0);
       $928 = HEAP32[$927>>2]|0;
       $929 = $928&255;
       $fxp = $929;
       label = 219;
       break L8;
      } else {
       $930 = $fxp;
       $931 = $930&255;
       $932 = $1;
       $933 = ((($932)) + 252|0);
       $934 = ((($933)) + 12|0);
       HEAP32[$934>>2] = $931;
       label = 219;
       break L8;
      }
     } else {
      if ($924) {
       $935 = $1;
       $936 = ((($935)) + 360|0);
       $937 = ((($936)) + 4|0);
       $938 = HEAP32[$937>>2]|0;
       $939 = $938&255;
       $fxp = $939;
       label = 219;
       break L8;
      } else {
       $940 = $fxp;
       $941 = $940&255;
       $942 = $1;
       $943 = ((($942)) + 360|0);
       $944 = ((($943)) + 4|0);
       HEAP32[$944>>2] = $941;
       label = 219;
       break L8;
      }
     }
     break;
    }
    case 14:  {
     label = 221;
     break L8;
     break;
    }
    default: {
     STACKTOP = sp;return;
    }
    }
   } while(0);
   break;
  }
  case 113:  {
   $112 = $fxp;
   $113 = $112&255;
   $114 = ($113|0)!=(0);
   if (!($114)) {
    STACKTOP = sp;return;
   }
   $115 = $1;
   $116 = ((($115)) + 168|0);
   HEAP8[$116>>0] = 0;
   $117 = $fxp;
   $118 = $117&255;
   $119 = $118 & 15;
   $120 = $119&255;
   $121 = $1;
   $122 = ((($121)) + 168|0);
   $123 = ((($122)) + 1|0);
   HEAP8[$123>>0] = $120;
   $124 = $1;
   $125 = ((($124)) + 168|0);
   $126 = ((($125)) + 2|0);
   HEAP8[$126>>0] = 0;
   $127 = $fxp;
   $128 = $127&255;
   $129 = $128 & 240;
   $130 = $129 >> 4;
   $131 = (0 - ($130))|0;
   $132 = $131&255;
   $133 = $1;
   $134 = ((($133)) + 168|0);
   $135 = ((($134)) + 3|0);
   HEAP8[$135>>0] = $132;
   $136 = $1;
   $137 = ((($136)) + 168|0);
   $138 = ((($137)) + 16|0);
   HEAP32[$138>>2] = 4;
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $511 = $1;
   $512 = ((($511)) + 44|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = $mod;
   $515 = ((($514)) + 140|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = ($513>>>0)<($516>>>0);
   if (!($517)) {
    STACKTOP = sp;return;
   }
   $518 = $1;
   $519 = ((($518)) + 44|0);
   $520 = HEAP32[$519>>2]|0;
   $521 = $mod;
   $522 = ((($521)) + 176|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = (($523) + (($520*764)|0)|0);
   $525 = ((($524)) + 36|0);
   $526 = HEAP32[$525>>2]|0;
   $527 = ($526|0)>(0);
   if ($527) {
    $528 = $m;
    $529 = $1;
    $530 = $note;
    $531 = $530&255;
    _do_toneporta($528,$529,$531);
    $532 = $1;
    $533 = HEAP32[$532>>2]|0;
    $534 = $533 | 4;
    HEAP32[$532>>2] = $534;
    label = 124;
    break L8;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 9:  {
   $617 = $m;
   $618 = ((($617)) + 1284|0);
   $619 = HEAP32[$618>>2]|0;
   $620 = $619 & 268435456;
   $621 = ($620|0)!=(0);
   $622 = $fxp;
   $623 = $622&255;
   $624 = ($623|0)==(0);
   do {
    if ($621) {
     if ($624) {
      $625 = $1;
      $626 = ((($625)) + 252|0);
      $627 = ((($626)) + 12|0);
      $628 = HEAP32[$627>>2]|0;
      $629 = $628&255;
      $fxp = $629;
      break;
     } else {
      $630 = $fxp;
      $631 = $630&255;
      $632 = $1;
      $633 = ((($632)) + 252|0);
      $634 = ((($633)) + 12|0);
      HEAP32[$634>>2] = $631;
      break;
     }
    } else {
     if ($624) {
      $635 = $1;
      $636 = ((($635)) + 216|0);
      $637 = ((($636)) + 8|0);
      $638 = HEAP32[$637>>2]|0;
      $639 = $638&255;
      $fxp = $639;
      break;
     } else {
      $640 = $fxp;
      $641 = $640&255;
      $642 = $1;
      $643 = ((($642)) + 216|0);
      $644 = ((($643)) + 8|0);
      HEAP32[$644>>2] = $641;
      break;
     }
    }
   } while(0);
   $645 = $1;
   $646 = HEAP32[$645>>2]|0;
   $647 = $646 | 256;
   HEAP32[$645>>2] = $647;
   $648 = $note;
   $649 = ($648<<24>>24)!=(0);
   if ($649) {
    $650 = $1;
    $651 = ((($650)) + 216|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = $652 & -65536;
    $654 = $1;
    $655 = ((($654)) + 216|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = $656 & $653;
    HEAP32[$655>>2] = $657;
    $658 = $fxp;
    $659 = $658&255;
    $660 = $659 << 8;
    $661 = $1;
    $662 = ((($661)) + 216|0);
    $663 = HEAP32[$662>>2]|0;
    $664 = $663 | $660;
    HEAP32[$662>>2] = $664;
    $665 = $fxp;
    $666 = $665&255;
    $667 = $666 << 8;
    $668 = $1;
    $669 = ((($668)) + 216|0);
    $670 = ((($669)) + 4|0);
    HEAP32[$670>>2] = $667;
   }
   $671 = $3;
   $672 = ((($671)) + 1|0);
   $673 = HEAP8[$672>>0]|0;
   $674 = ($673<<24>>24)!=(0);
   if (!($674)) {
    STACKTOP = sp;return;
   }
   $675 = $fxp;
   $676 = $675&255;
   $677 = $676 << 8;
   $678 = $1;
   $679 = ((($678)) + 216|0);
   $680 = ((($679)) + 4|0);
   HEAP32[$680>>2] = $677;
   STACKTOP = sp;return;
   break;
  }
  case 112:  {
   $88 = $fxp;
   $89 = $88&255;
   $90 = ($89|0)!=(0);
   if (!($90)) {
    STACKTOP = sp;return;
   }
   $91 = $fxp;
   $92 = $91&255;
   $93 = $92 & 240;
   $94 = $93 >> 4;
   $95 = (0 - ($94))|0;
   $96 = $95&255;
   $97 = $1;
   $98 = ((($97)) + 168|0);
   HEAP8[$98>>0] = $96;
   $99 = $1;
   $100 = ((($99)) + 168|0);
   $101 = ((($100)) + 1|0);
   HEAP8[$101>>0] = 0;
   $102 = $fxp;
   $103 = $102&255;
   $104 = $103 & 15;
   $105 = $104&255;
   $106 = $1;
   $107 = ((($106)) + 168|0);
   $108 = ((($107)) + 2|0);
   HEAP8[$108>>0] = $105;
   $109 = $1;
   $110 = ((($109)) + 168|0);
   $111 = ((($110)) + 16|0);
   HEAP32[$111>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   $827 = $1;
   $828 = HEAP32[$827>>2]|0;
   $829 = $828 | 4096;
   HEAP32[$827>>2] = $829;
   $830 = $fxp;
   $831 = $830&255;
   $832 = $1;
   $833 = ((($832)) + 84|0);
   HEAP32[$833>>2] = $831;
   $834 = $1;
   $835 = ((($834)) + 76|0);
   $836 = HEAP32[$835>>2]|0;
   $837 = ($836|0)!=(0);
   if (!($837)) {
    STACKTOP = sp;return;
   }
   $838 = $1;
   $839 = ((($838)) + 84|0);
   $840 = HEAP32[$839>>2]|0;
   $841 = $1;
   $842 = ((($841)) + 80|0);
   $843 = HEAP32[$842>>2]|0;
   $844 = $p;
   $845 = ((($844)) + 620|0);
   $846 = HEAP32[$845>>2]|0;
   $847 = (($846) + (($843*472)|0)|0);
   $848 = ((($847)) + 84|0);
   HEAP32[$848>>2] = $840;
   STACKTOP = sp;return;
   break;
  }
  case 180:  {
   $60 = $m;
   $61 = ((($60)) + 1284|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 & 268435456;
   $64 = ($63|0)!=(0);
   $65 = $fxp;
   $66 = $65&255;
   $67 = ($66|0)==(0);
   if ($64) {
    if ($67) {
     $68 = $1;
     $69 = ((($68)) + 252|0);
     $70 = ((($69)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $71&255;
     $fxp = $72;
     label = 7;
     break L8;
    } else {
     $73 = $fxp;
     $74 = $73&255;
     $75 = $1;
     $76 = ((($75)) + 252|0);
     $77 = ((($76)) + 12|0);
     HEAP32[$77>>2] = $74;
     label = 7;
     break L8;
    }
   } else {
    if ($67) {
     $78 = $1;
     $79 = ((($78)) + 168|0);
     $80 = ((($79)) + 24|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $81&255;
     $fxp = $82;
     label = 7;
     break L8;
    } else {
     $83 = $fxp;
     $84 = $83&255;
     $85 = $1;
     $86 = ((($85)) + 168|0);
     $87 = ((($86)) + 24|0);
     HEAP32[$87>>2] = $84;
     label = 7;
     break L8;
    }
   }
   break;
  }
  case 3:  {
   $330 = $m;
   $331 = ((($330)) + 1284|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = $332 & 131072;
   $334 = ($333|0)!=(0);
   if ($334) {
    $335 = $note;
    $336 = $335&255;
    $337 = ($336|0)==(0);
    if ($337) {
     $338 = $1;
     $339 = ((($338)) + 336|0);
     $340 = ((($339)) + 8|0);
     $341 = HEAP32[$340>>2]|0;
     $342 = ($341|0)==(0);
     if ($342) {
      STACKTOP = sp;return;
     }
    }
   }
   $343 = $1;
   $344 = ((($343)) + 44|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = $mod;
   $347 = ((($346)) + 140|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = ($345>>>0)<($348>>>0);
   if (!($349)) {
    STACKTOP = sp;return;
   }
   $350 = $1;
   $351 = ((($350)) + 44|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = $mod;
   $354 = ((($353)) + 176|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = (($355) + (($352*764)|0)|0);
   $357 = ((($356)) + 36|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = ($358|0)>(0);
   if (!($359)) {
    STACKTOP = sp;return;
   }
   $360 = $m;
   $361 = $1;
   $362 = $note;
   $363 = $362&255;
   _do_toneporta($360,$361,$363);
   $364 = $fxp;
   $365 = $364&255;
   $366 = ($365|0)==(0);
   if ($366) {
    $367 = $1;
    $368 = ((($367)) + 336|0);
    $369 = ((($368)) + 16|0);
    $370 = HEAP32[$369>>2]|0;
    $371 = $370&255;
    $fxp = $371;
   } else {
    $372 = $fxp;
    $373 = $372&255;
    $374 = $1;
    $375 = ((($374)) + 336|0);
    $376 = ((($375)) + 16|0);
    HEAP32[$376>>2] = $373;
   }
   $377 = $m;
   $378 = ((($377)) + 1284|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = $379 & 268435456;
   $381 = ($380|0)!=(0);
   if ($381) {
    $382 = $fxp;
    $383 = $382&255;
    $384 = ($383|0)!=(0);
    if ($384) {
     $385 = $fxp;
     $386 = $385&255;
     $387 = $1;
     $388 = ((($387)) + 252|0);
     $389 = ((($388)) + 12|0);
     HEAP32[$389>>2] = $386;
    }
   }
   $390 = $fxp;
   $391 = $390&255;
   $392 = ($391|0)!=(0);
   if ($392) {
    $393 = $m;
    $394 = ((($393)) + 1284|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = $395 & 1024;
    $397 = ($396|0)!=(0);
    if ($397) {
     $398 = $fxp;
     $399 = $398&255;
     $400 = $1;
     $401 = ((($400)) + 312|0);
     $402 = ((($401)) + 16|0);
     HEAP32[$402>>2] = $399;
    }
    $403 = $fxp;
    $404 = $403&255;
    $405 = $1;
    $406 = ((($405)) + 336|0);
    $407 = ((($406)) + 12|0);
    HEAP32[$407>>2] = $404;
   }
   $408 = $1;
   $409 = HEAP32[$408>>2]|0;
   $410 = $409 | 4;
   HEAP32[$408>>2] = $410;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $161 = $m;
   $162 = ((($161)) + 1284|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 & 268435456;
   $165 = ($164|0)!=(0);
   $166 = $fxp;
   $167 = $166&255;
   $168 = ($167|0)==(0);
   do {
    if ($165) {
     if ($168) {
      $169 = $1;
      $170 = ((($169)) + 252|0);
      $171 = ((($170)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $172&255;
      $fxp = $173;
      break;
     } else {
      $174 = $fxp;
      $175 = $174&255;
      $176 = $1;
      $177 = ((($176)) + 252|0);
      $178 = ((($177)) + 12|0);
      HEAP32[$178>>2] = $175;
      break;
     }
    } else {
     if ($168) {
      $179 = $1;
      $180 = ((($179)) + 312|0);
      $181 = ((($180)) + 16|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $182&255;
      $fxp = $183;
      break;
     } else {
      $184 = $fxp;
      $185 = $184&255;
      $186 = $1;
      $187 = ((($186)) + 312|0);
      $188 = ((($187)) + 16|0);
      HEAP32[$188>>2] = $185;
      break;
     }
    }
   } while(0);
   $189 = $m;
   $190 = ((($189)) + 1284|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $191 & 32;
   $193 = ($192|0)!=(0);
   do {
    if ($193) {
     $194 = $4;
     $195 = ($194|0)==(0);
     if (!($195)) {
      $196 = $m;
      $197 = ((($196)) + 1284|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = $198 & 2048;
      $200 = ($199|0)!=(0);
      if ($200) {
       break;
      }
     }
     $201 = $fxp;
     $202 = $201&255;
     $203 = $202 & 240;
     $204 = $203 >> 4;
     if ((($204|0) == 15)) {
      $205 = $fxp;
      $206 = $205&255;
      $207 = $206 & 15;
      $208 = $207&255;
      $fxp = $208;
      label = 217;
      break L8;
     } else if ((($204|0) == 14)) {
      $209 = $fxp;
      $210 = $209&255;
      $211 = $210 & 15;
      $212 = $211&255;
      $fxp = $212;
      $213 = $fxp;
      $214 = $213&255;
      $215 = $214 | 16;
      $216 = $215&255;
      $fxp = $216;
      label = 328;
      break L8;
     } else {
      break;
     }
    }
   } while(0);
   $217 = $1;
   $218 = HEAP32[$217>>2]|0;
   $219 = $218 | 8;
   HEAP32[$217>>2] = $219;
   $220 = $fxp;
   $221 = $220&255;
   $222 = ($221|0)!=(0);
   if ($222) {
    $223 = $fxp;
    $224 = $223&255;
    $225 = (0 - ($224))|0;
    $226 = $1;
    $227 = ((($226)) + 312|0);
    HEAP32[$227>>2] = $225;
    $228 = $m;
    $229 = ((($228)) + 1284|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = $230 & 1024;
    $232 = ($231|0)!=(0);
    if (!($232)) {
     STACKTOP = sp;return;
    }
    $233 = $fxp;
    $234 = $233&255;
    $235 = $1;
    $236 = ((($235)) + 336|0);
    $237 = ((($236)) + 16|0);
    HEAP32[$237>>2] = $234;
    STACKTOP = sp;return;
   } else {
    $238 = $1;
    $239 = ((($238)) + 312|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ($240|0)>(0);
    if (!($241)) {
     STACKTOP = sp;return;
    }
    $242 = $1;
    $243 = ((($242)) + 312|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = Math_imul($244, -1)|0;
    HEAP32[$243>>2] = $245;
    STACKTOP = sp;return;
   }
   break;
  }
  case 0:  {
   label = 7;
   break;
  }
  case 174:  {
   $1191 = $m;
   $1192 = ((($1191)) + 1284|0);
   $1193 = HEAP32[$1192>>2]|0;
   $1194 = $1193 & 268435456;
   $1195 = ($1194|0)!=(0);
   $1196 = $fxp;
   $1197 = $1196&255;
   $1198 = ($1197|0)==(0);
   if ($1195) {
    if ($1198) {
     $1199 = $1;
     $1200 = ((($1199)) + 252|0);
     $1201 = ((($1200)) + 12|0);
     $1202 = HEAP32[$1201>>2]|0;
     $1203 = $1202&255;
     $fxp = $1203;
     label = 216;
     break L8;
    } else {
     $1204 = $fxp;
     $1205 = $1204&255;
     $1206 = $1;
     $1207 = ((($1206)) + 252|0);
     $1208 = ((($1207)) + 12|0);
     HEAP32[$1208>>2] = $1205;
     label = 216;
     break L8;
    }
   } else {
    if ($1198) {
     $1209 = $1;
     $1210 = ((($1209)) + 276|0);
     $1211 = HEAP32[$1210>>2]|0;
     $1212 = $1211&255;
     $fxp = $1212;
     label = 216;
     break L8;
    } else {
     $1213 = $fxp;
     $1214 = $1213&255;
     $1215 = $1;
     $1216 = ((($1215)) + 276|0);
     HEAP32[$1216>>2] = $1214;
     label = 216;
     break L8;
    }
   }
   break;
  }
  case 164:  {
   $796 = $1;
   $797 = HEAP32[$796>>2]|0;
   $798 = $797 | 8192;
   HEAP32[$796>>2] = $798;
   $799 = $fxp;
   $800 = ($799<<24>>24)!=(0);
   if (!($800)) {
    STACKTOP = sp;return;
   }
   $801 = $fxp;
   $802 = $801&255;
   $803 = $802 & 240;
   $804 = $803 >> 4;
   $h = $804;
   $805 = $fxp;
   $806 = $805&255;
   $807 = $806 & 15;
   $l = $807;
   $808 = $h;
   $809 = ($808|0)!=(0);
   $810 = $h;
   $811 = $l;
   $812 = (0 - ($811))|0;
   $813 = $809 ? $810 : $812;
   $814 = $1;
   $815 = ((($814)) + 252|0);
   $816 = ((($815)) + 8|0);
   HEAP32[$816>>2] = $813;
   STACKTOP = sp;return;
   break;
  }
  case 171:  {
   label = 228;
   break;
  }
  case 179:  {
   label = 221;
   break;
  }
  case 163:  {
   $1253 = $m;
   $1254 = ((($1253)) + 1284|0);
   $1255 = HEAP32[$1254>>2]|0;
   $1256 = $1255 & 268435456;
   $1257 = ($1256|0)!=(0);
   if ($1257) {
    $1258 = $fxp;
    $1259 = $1258&255;
    $1260 = ($1259|0)==(0);
    if ($1260) {
     $1261 = $1;
     $1262 = ((($1261)) + 252|0);
     $1263 = ((($1262)) + 12|0);
     $1264 = HEAP32[$1263>>2]|0;
     $1265 = $1264&255;
     $fxp = $1265;
     label = 226;
     break L8;
    } else {
     $1266 = $fxp;
     $1267 = $1266&255;
     $1268 = $1;
     $1269 = ((($1268)) + 252|0);
     $1270 = ((($1269)) + 12|0);
     HEAP32[$1270>>2] = $1267;
     label = 226;
     break L8;
    }
   } else {
    label = 226;
   }
   break;
  }
  case 135:  {
   $1310 = $fxp;
   $1311 = $1310&255;
   $1312 = $1311 & 240;
   $1313 = $1312 >> 4;
   $1314 = ($1313|0)==(0);
   do {
    if ($1314) {
     $1315 = $1;
     $1316 = HEAP32[$1315>>2]|0;
     $1317 = $1316 | 2097152;
     HEAP32[$1315>>2] = $1317;
     $1318 = $fxp;
     $1319 = $1318&255;
     $1320 = $1319 & 15;
     $1321 = (0 - ($1320))|0;
     $1322 = $1;
     $1323 = ((($1322)) + 400|0);
     HEAP32[$1323>>2] = $1321;
    } else {
     $1324 = $fxp;
     $1325 = $1324&255;
     $1326 = $1325 & 240;
     $1327 = $1326 >> 4;
     $1328 = ($1327|0)==(1);
     if ($1328) {
      $1329 = $1;
      $1330 = HEAP32[$1329>>2]|0;
      $1331 = $1330 | 2097152;
      HEAP32[$1329>>2] = $1331;
      $1332 = $fxp;
      $1333 = $1332&255;
      $1334 = $1333 & 15;
      $1335 = $1;
      $1336 = ((($1335)) + 400|0);
      HEAP32[$1336>>2] = $1334;
      break;
     }
     $1337 = $fxp;
     $1338 = $1337&255;
     $1339 = ($1338|0)<(20);
     if ($1339) {
      $fxp = 20;
     }
     $1340 = $fxp;
     $1341 = $1340&255;
     $1342 = $p;
     $1343 = ((($1342)) + 20|0);
     HEAP32[$1343>>2] = $1341;
    }
   } while(0);
   $1344 = $m;
   $1345 = ((($1344)) + 1256|0);
   $1346 = +HEAPF64[$1345>>3];
   $1347 = $m;
   $1348 = ((($1347)) + 1248|0);
   $1349 = +HEAPF64[$1348>>3];
   $1350 = $1346 * $1349;
   $1351 = $p;
   $1352 = ((($1351)) + 20|0);
   $1353 = HEAP32[$1352>>2]|0;
   $1354 = (+($1353|0));
   $1355 = $1350 / $1354;
   $1356 = $p;
   $1357 = ((($1356)) + 40|0);
   HEAPF64[$1357>>3] = $1355;
   STACKTOP = sp;return;
   break;
  }
  case 192:  {
   $1368 = $m;
   $1369 = ((($1368)) + 1284|0);
   $1370 = HEAP32[$1369>>2]|0;
   $1371 = $1370 & 268435456;
   $1372 = ($1371|0)!=(0);
   $1373 = $fxp;
   $1374 = $1373&255;
   $1375 = ($1374|0)==(0);
   do {
    if ($1372) {
     if ($1375) {
      $1376 = $1;
      $1377 = ((($1376)) + 252|0);
      $1378 = ((($1377)) + 12|0);
      $1379 = HEAP32[$1378>>2]|0;
      $1380 = $1379&255;
      $fxp = $1380;
      break;
     } else {
      $1381 = $fxp;
      $1382 = $1381&255;
      $1383 = $1;
      $1384 = ((($1383)) + 252|0);
      $1385 = ((($1384)) + 12|0);
      HEAP32[$1385>>2] = $1382;
      break;
     }
    } else {
     if ($1375) {
      $1386 = $1;
      $1387 = ((($1386)) + 252|0);
      $1388 = ((($1387)) + 20|0);
      $1389 = HEAP32[$1388>>2]|0;
      $1390 = $1389&255;
      $fxp = $1390;
      break;
     } else {
      $1391 = $fxp;
      $1392 = $1391&255;
      $1393 = $1;
      $1394 = ((($1393)) + 252|0);
      $1395 = ((($1394)) + 20|0);
      HEAP32[$1395>>2] = $1392;
      break;
     }
    }
   } while(0);
   $1396 = $1;
   $1397 = HEAP32[$1396>>2]|0;
   $1398 = $1397 | 8192;
   HEAP32[$1396>>2] = $1398;
   $1399 = $fxp;
   $1400 = $1399&255;
   $1401 = $1;
   $1402 = ((($1401)) + 252|0);
   $1403 = ((($1402)) + 8|0);
   HEAP32[$1403>>2] = $1400;
   STACKTOP = sp;return;
   break;
  }
  case 136:  {
   $1358 = $f;
   $1359 = ((($1358)) + 36|0);
   $1360 = HEAP32[$1359>>2]|0;
   $1361 = ($1360|0)!=(0);
   if ($1361) {
    STACKTOP = sp;return;
   }
   $1362 = $fxp;
   $1363 = $1362&255;
   $1364 = $f;
   $1365 = ((($1364)) + 32|0);
   HEAP32[$1365>>2] = $1363;
   $1366 = $f;
   $1367 = ((($1366)) + 36|0);
   HEAP32[$1367>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 193:  {
   $1404 = $m;
   $1405 = ((($1404)) + 1284|0);
   $1406 = HEAP32[$1405>>2]|0;
   $1407 = $1406 & 268435456;
   $1408 = ($1407|0)!=(0);
   $1409 = $fxp;
   $1410 = $1409&255;
   $1411 = ($1410|0)==(0);
   do {
    if ($1408) {
     if ($1411) {
      $1412 = $1;
      $1413 = ((($1412)) + 252|0);
      $1414 = ((($1413)) + 12|0);
      $1415 = HEAP32[$1414>>2]|0;
      $1416 = $1415&255;
      $fxp = $1416;
      break;
     } else {
      $1417 = $fxp;
      $1418 = $1417&255;
      $1419 = $1;
      $1420 = ((($1419)) + 252|0);
      $1421 = ((($1420)) + 12|0);
      HEAP32[$1421>>2] = $1418;
      break;
     }
    } else {
     if ($1411) {
      $1422 = $1;
      $1423 = ((($1422)) + 252|0);
      $1424 = ((($1423)) + 20|0);
      $1425 = HEAP32[$1424>>2]|0;
      $1426 = $1425&255;
      $fxp = $1426;
      break;
     } else {
      $1427 = $fxp;
      $1428 = $1427&255;
      $1429 = $1;
      $1430 = ((($1429)) + 252|0);
      $1431 = ((($1430)) + 20|0);
      HEAP32[$1431>>2] = $1428;
      break;
     }
    }
   } while(0);
   $1432 = $1;
   $1433 = HEAP32[$1432>>2]|0;
   $1434 = $1433 | 8192;
   HEAP32[$1432>>2] = $1434;
   $1435 = $fxp;
   $1436 = $1435&255;
   $1437 = (0 - ($1436))|0;
   $1438 = $1;
   $1439 = ((($1438)) + 252|0);
   $1440 = ((($1439)) + 8|0);
   HEAP32[$1440>>2] = $1437;
   STACKTOP = sp;return;
   break;
  }
  case 194:  {
   $1441 = $m;
   $1442 = ((($1441)) + 1284|0);
   $1443 = HEAP32[$1442>>2]|0;
   $1444 = $1443 & 268435456;
   $1445 = ($1444|0)!=(0);
   $1446 = $fxp;
   $1447 = $1446&255;
   $1448 = ($1447|0)==(0);
   do {
    if ($1445) {
     if ($1448) {
      $1449 = $1;
      $1450 = ((($1449)) + 252|0);
      $1451 = ((($1450)) + 12|0);
      $1452 = HEAP32[$1451>>2]|0;
      $1453 = $1452&255;
      $fxp = $1453;
      break;
     } else {
      $1454 = $fxp;
      $1455 = $1454&255;
      $1456 = $1;
      $1457 = ((($1456)) + 252|0);
      $1458 = ((($1457)) + 12|0);
      HEAP32[$1458>>2] = $1455;
      break;
     }
    } else {
     if ($1448) {
      $1459 = $1;
      $1460 = ((($1459)) + 252|0);
      $1461 = ((($1460)) + 20|0);
      $1462 = HEAP32[$1461>>2]|0;
      $1463 = $1462&255;
      $fxp = $1463;
      break;
     } else {
      $1464 = $fxp;
      $1465 = $1464&255;
      $1466 = $1;
      $1467 = ((($1466)) + 252|0);
      $1468 = ((($1467)) + 20|0);
      HEAP32[$1468>>2] = $1465;
      break;
     }
    }
   } while(0);
   $1469 = $1;
   $1470 = HEAP32[$1469>>2]|0;
   $1471 = $1470 | 33554432;
   HEAP32[$1469>>2] = $1471;
   $1472 = $fxp;
   $1473 = $1472&255;
   $1474 = $1;
   $1475 = ((($1474)) + 252|0);
   $1476 = ((($1475)) + 16|0);
   HEAP32[$1476>>2] = $1473;
   STACKTOP = sp;return;
   break;
  }
  case 195:  {
   $1477 = $m;
   $1478 = ((($1477)) + 1284|0);
   $1479 = HEAP32[$1478>>2]|0;
   $1480 = $1479 & 268435456;
   $1481 = ($1480|0)!=(0);
   $1482 = $fxp;
   $1483 = $1482&255;
   $1484 = ($1483|0)==(0);
   do {
    if ($1481) {
     if ($1484) {
      $1485 = $1;
      $1486 = ((($1485)) + 252|0);
      $1487 = ((($1486)) + 12|0);
      $1488 = HEAP32[$1487>>2]|0;
      $1489 = $1488&255;
      $fxp = $1489;
      break;
     } else {
      $1490 = $fxp;
      $1491 = $1490&255;
      $1492 = $1;
      $1493 = ((($1492)) + 252|0);
      $1494 = ((($1493)) + 12|0);
      HEAP32[$1494>>2] = $1491;
      break;
     }
    } else {
     if ($1484) {
      $1495 = $1;
      $1496 = ((($1495)) + 252|0);
      $1497 = ((($1496)) + 20|0);
      $1498 = HEAP32[$1497>>2]|0;
      $1499 = $1498&255;
      $fxp = $1499;
      break;
     } else {
      $1500 = $fxp;
      $1501 = $1500&255;
      $1502 = $1;
      $1503 = ((($1502)) + 252|0);
      $1504 = ((($1503)) + 20|0);
      HEAP32[$1504>>2] = $1501;
      break;
     }
    }
   } while(0);
   $1505 = $1;
   $1506 = HEAP32[$1505>>2]|0;
   $1507 = $1506 | 33554432;
   HEAP32[$1505>>2] = $1507;
   $1508 = $fxp;
   $1509 = $1508&255;
   $1510 = (0 - ($1509))|0;
   $1511 = $1;
   $1512 = ((($1511)) + 252|0);
   $1513 = ((($1512)) + 16|0);
   HEAP32[$1513>>2] = $1510;
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $1514 = $fxp;
   $1515 = $1514&255;
   $1516 = $m;
   $1517 = ((($1516)) + 1272|0);
   $1518 = HEAP32[$1517>>2]|0;
   $1519 = ($1515|0)>($1518|0);
   if ($1519) {
    $1520 = $m;
    $1521 = ((($1520)) + 1272|0);
    $1522 = HEAP32[$1521>>2]|0;
    $1523 = $p;
    $1524 = ((($1523)) + 320|0);
    HEAP32[$1524>>2] = $1522;
    STACKTOP = sp;return;
   } else {
    $1525 = $fxp;
    $1526 = $1525&255;
    $1527 = $p;
    $1528 = ((($1527)) + 320|0);
    HEAP32[$1528>>2] = $1526;
    STACKTOP = sp;return;
   }
   break;
  }
  case 17:  {
   while(1) {
    $1529 = $fxp;
    $1530 = ($1529<<24>>24)!=(0);
    $1531 = $1;
    if ($1530) {
     break;
    }
    $1594 = ((($1531)) + 284|0);
    $1595 = ((($1594)) + 8|0);
    $1596 = HEAP32[$1595>>2]|0;
    $1597 = $1596&255;
    $fxp = $1597;
    $1598 = $1597&255;
    $1599 = ($1598|0)!=(0);
    if (!($1599)) {
     label = 433;
     break;
    }
   }
   if ((label|0) == 433) {
    STACKTOP = sp;return;
   }
   $1532 = HEAP32[$1531>>2]|0;
   $1533 = $1532 | 1048576;
   HEAP32[$1531>>2] = $1533;
   $1534 = $fxp;
   $1535 = $1534&255;
   $1536 = $1;
   $1537 = ((($1536)) + 284|0);
   $1538 = ((($1537)) + 8|0);
   HEAP32[$1538>>2] = $1535;
   $1539 = $fxp;
   $1540 = $1539&255;
   $1541 = $1540 & 240;
   $1542 = $1541 >> 4;
   $h = $1542;
   $1543 = $fxp;
   $1544 = $1543&255;
   $1545 = $1544 & 15;
   $l = $1545;
   $1546 = $m;
   $1547 = ((($1546)) + 1284|0);
   $1548 = HEAP32[$1547>>2]|0;
   $1549 = $1548 & 32;
   $1550 = ($1549|0)!=(0);
   if (!($1550)) {
    $1583 = $h;
    $1584 = ($1583|0)!=(0);
    $1585 = $h;
    $1586 = $l;
    $1587 = (0 - ($1586))|0;
    $1588 = $1584 ? $1585 : $1587;
    $1589 = $1;
    $1590 = ((($1589)) + 284|0);
    HEAP32[$1590>>2] = $1588;
    $1591 = $1;
    $1592 = ((($1591)) + 284|0);
    $1593 = ((($1592)) + 4|0);
    HEAP32[$1593>>2] = 0;
    STACKTOP = sp;return;
   }
   $1551 = $l;
   $1552 = ($1551|0)==(15);
   $1553 = $h;
   $1554 = ($1553|0)!=(0);
   $or$cond7 = $1552 & $1554;
   if ($or$cond7) {
    $1555 = $1;
    $1556 = ((($1555)) + 284|0);
    HEAP32[$1556>>2] = 0;
    $1557 = $h;
    $1558 = $1;
    $1559 = ((($1558)) + 284|0);
    $1560 = ((($1559)) + 4|0);
    HEAP32[$1560>>2] = $1557;
    STACKTOP = sp;return;
   }
   $1561 = $h;
   $1562 = ($1561|0)==(15);
   $1563 = $l;
   $1564 = ($1563|0)!=(0);
   $or$cond9 = $1562 & $1564;
   if ($or$cond9) {
    $1565 = $1;
    $1566 = ((($1565)) + 284|0);
    HEAP32[$1566>>2] = 0;
    $1567 = $l;
    $1568 = (0 - ($1567))|0;
    $1569 = $1;
    $1570 = ((($1569)) + 284|0);
    $1571 = ((($1570)) + 4|0);
    HEAP32[$1571>>2] = $1568;
    STACKTOP = sp;return;
   } else {
    $1572 = $h;
    $1573 = ($1572|0)!=(0);
    $1574 = $h;
    $1575 = $l;
    $1576 = (0 - ($1575))|0;
    $1577 = $1573 ? $1574 : $1576;
    $1578 = $1;
    $1579 = ((($1578)) + 284|0);
    HEAP32[$1579>>2] = $1577;
    $1580 = $1;
    $1581 = ((($1580)) + 284|0);
    $1582 = ((($1581)) + 4|0);
    HEAP32[$1582>>2] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 20:  {
   $1600 = $fxp;
   $1601 = $1600&255;
   $1602 = (($1601) + 1)|0;
   $1603 = $1;
   $1604 = ((($1603)) + 64|0);
   HEAP32[$1604>>2] = $1602;
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $1605 = $m;
   $1606 = ((($1605)) + 1284|0);
   $1607 = HEAP32[$1606>>2]|0;
   $1608 = $1607 & 67108864;
   $1609 = ($1608|0)!=(0);
   if ($1609) {
    $1610 = $0;
    $1611 = $1;
    $1612 = ((($1611)) + 44|0);
    $1613 = HEAP32[$1612>>2]|0;
    $1614 = (_get_instrument($1610,$1613)|0);
    $instrument = $1614;
    $1615 = $instrument;
    $1616 = ($1615|0)!=(0|0);
    if ($1616) {
     $1617 = $instrument;
     $1618 = ((($1617)) + 44|0);
     $1619 = HEAP32[$1618>>2]|0;
     $1620 = $1619 & 2;
     $1621 = ($1620|0)!=(0);
     if ($1621) {
      $1622 = $fxp;
      $1623 = $1622&255;
      $1624 = $1;
      $1625 = ((($1624)) + 96|0);
      HEAP32[$1625>>2] = $1623;
     }
    }
   } else {
    $1626 = $fxp;
    $1627 = $1626&255;
    $1628 = $1;
    $1629 = ((($1628)) + 96|0);
    HEAP32[$1629>>2] = $1627;
   }
   $1630 = $fxp;
   $1631 = $1630&255;
   $1632 = $1;
   $1633 = ((($1632)) + 92|0);
   HEAP32[$1633>>2] = $1631;
   $1634 = $fxp;
   $1635 = $1634&255;
   $1636 = $1;
   $1637 = ((($1636)) + 100|0);
   HEAP32[$1637>>2] = $1635;
   STACKTOP = sp;return;
   break;
  }
  case 25:  {
   $1638 = $m;
   $1639 = ((($1638)) + 1284|0);
   $1640 = HEAP32[$1639>>2]|0;
   $1641 = $1640 & 268435456;
   $1642 = ($1641|0)!=(0);
   $1643 = $fxp;
   $1644 = $1643&255;
   $1645 = ($1644|0)==(0);
   do {
    if ($1642) {
     if ($1645) {
      $1646 = $1;
      $1647 = ((($1646)) + 252|0);
      $1648 = ((($1647)) + 12|0);
      $1649 = HEAP32[$1648>>2]|0;
      $1650 = $1649&255;
      $fxp = $1650;
      break;
     } else {
      $1651 = $fxp;
      $1652 = $1651&255;
      $1653 = $1;
      $1654 = ((($1653)) + 252|0);
      $1655 = ((($1654)) + 12|0);
      HEAP32[$1655>>2] = $1652;
      break;
     }
    } else {
     if ($1645) {
      $1656 = $1;
      $1657 = ((($1656)) + 368|0);
      $1658 = ((($1657)) + 12|0);
      $1659 = HEAP32[$1658>>2]|0;
      $1660 = $1659&255;
      $fxp = $1660;
      break;
     } else {
      $1661 = $fxp;
      $1662 = $1661&255;
      $1663 = $1;
      $1664 = ((($1663)) + 368|0);
      $1665 = ((($1664)) + 12|0);
      HEAP32[$1665>>2] = $1662;
      break;
     }
    }
   } while(0);
   $1666 = $1;
   $1667 = HEAP32[$1666>>2]|0;
   $1668 = $1667 | 2;
   HEAP32[$1666>>2] = $1668;
   $1669 = $fxp;
   $1670 = $1669&255;
   $1671 = $1670 & 15;
   $1672 = $fxp;
   $1673 = $1672&255;
   $1674 = $1673 & 240;
   $1675 = $1674 >> 4;
   $1676 = (($1671) - ($1675))|0;
   $1677 = $1;
   $1678 = ((($1677)) + 368|0);
   $1679 = ((($1678)) + 4|0);
   HEAP32[$1679>>2] = $1676;
   STACKTOP = sp;return;
   break;
  }
  case 181:  {
   $1680 = $1;
   $1681 = HEAP32[$1680>>2]|0;
   $1682 = $1681 | 2;
   HEAP32[$1680>>2] = $1682;
   $1683 = $fxp;
   $1684 = $1683&255;
   $1685 = $1684 & 15;
   $1686 = $fxp;
   $1687 = $1686&255;
   $1688 = $1687 & 240;
   $1689 = $1688 >> 4;
   $1690 = (($1685) - ($1689))|0;
   $1691 = $1;
   $1692 = ((($1691)) + 368|0);
   $1693 = ((($1692)) + 4|0);
   HEAP32[$1693>>2] = $1690;
   STACKTOP = sp;return;
   break;
  }
  case 137:  {
   $1694 = $1;
   $1695 = HEAP32[$1694>>2]|0;
   $1696 = $1695 | 2;
   HEAP32[$1694>>2] = $1696;
   $1697 = $fxp;
   $1698 = ($1697<<24>>24)!=(0);
   if (!($1698)) {
    STACKTOP = sp;return;
   }
   $1699 = $fxp;
   $1700 = $1699&255;
   $1701 = $1700 & 240;
   $1702 = $1701 >> 4;
   $1703 = ($1702|0)==(15);
   if ($1703) {
    $1704 = $1;
    $1705 = ((($1704)) + 368|0);
    $1706 = ((($1705)) + 4|0);
    HEAP32[$1706>>2] = 0;
    $1707 = $fxp;
    $1708 = $1707&255;
    $1709 = $1708 & 15;
    $1710 = $1;
    $1711 = ((($1710)) + 368|0);
    $1712 = ((($1711)) + 8|0);
    HEAP32[$1712>>2] = $1709;
    STACKTOP = sp;return;
   }
   $1713 = $fxp;
   $1714 = $1713&255;
   $1715 = $1714 & 15;
   $1716 = ($1715|0)==(15);
   $1717 = $1;
   if ($1716) {
    $1718 = ((($1717)) + 368|0);
    $1719 = ((($1718)) + 4|0);
    HEAP32[$1719>>2] = 0;
    $1720 = $fxp;
    $1721 = $1720&255;
    $1722 = $1721 & 240;
    $1723 = $1722 >> 4;
    $1724 = (0 - ($1723))|0;
    $1725 = $1;
    $1726 = ((($1725)) + 368|0);
    $1727 = ((($1726)) + 8|0);
    HEAP32[$1727>>2] = $1724;
    STACKTOP = sp;return;
   } else {
    $1728 = HEAP32[$1717>>2]|0;
    $1729 = $1728 | 2;
    HEAP32[$1717>>2] = $1729;
    $1730 = $fxp;
    $1731 = $1730&255;
    $1732 = $1731 & 15;
    $1733 = $fxp;
    $1734 = $1733&255;
    $1735 = $1734 & 240;
    $1736 = $1735 >> 4;
    $1737 = (($1732) - ($1736))|0;
    $1738 = $1;
    $1739 = ((($1738)) + 368|0);
    $1740 = ((($1739)) + 4|0);
    HEAP32[$1740>>2] = $1737;
    $1741 = $1;
    $1742 = ((($1741)) + 368|0);
    $1743 = ((($1742)) + 8|0);
    HEAP32[$1743>>2] = 0;
    STACKTOP = sp;return;
   }
   break;
  }
  case 27:  {
   $1744 = $m;
   $1745 = ((($1744)) + 1284|0);
   $1746 = HEAP32[$1745>>2]|0;
   $1747 = $1746 & 268435456;
   $1748 = ($1747|0)!=(0);
   do {
    if ($1748) {
     $1749 = $fxp;
     $1750 = $1749&255;
     $1751 = ($1750|0)==(0);
     if ($1751) {
      $1752 = $1;
      $1753 = ((($1752)) + 252|0);
      $1754 = ((($1753)) + 12|0);
      $1755 = HEAP32[$1754>>2]|0;
      $1756 = $1755&255;
      $fxp = $1756;
      break;
     } else {
      $1757 = $fxp;
      $1758 = $1757&255;
      $1759 = $1;
      $1760 = ((($1759)) + 252|0);
      $1761 = ((($1760)) + 12|0);
      HEAP32[$1761>>2] = $1758;
      break;
     }
    }
   } while(0);
   $1762 = $fxp;
   $1763 = ($1762<<24>>24)!=(0);
   if ($1763) {
    $1764 = $fxp;
    $1765 = $1764&255;
    $1766 = $1;
    $1767 = ((($1766)) + 228|0);
    HEAP32[$1767>>2] = $1765;
   }
   $1768 = $note;
   $1769 = ($1768<<24>>24)!=(0);
   if ($1769) {
    $1770 = $1;
    $1771 = ((($1770)) + 228|0);
    $1772 = HEAP32[$1771>>2]|0;
    $1773 = $1772 & 15;
    $1774 = (($1773) + 1)|0;
    $1775 = $1;
    $1776 = ((($1775)) + 228|0);
    $1777 = ((($1776)) + 4|0);
    HEAP32[$1777>>2] = $1774;
    $1778 = $1;
    $1779 = ((($1778)) + 228|0);
    $1780 = HEAP32[$1779>>2]|0;
    $1781 = $1780 & 240;
    $1782 = $1781 >> 4;
    $1783 = $1;
    $1784 = ((($1783)) + 228|0);
    $1785 = ((($1784)) + 8|0);
    HEAP32[$1785>>2] = $1782;
   }
   $1786 = $1;
   $1787 = HEAP32[$1786>>2]|0;
   $1788 = $1787 | 262144;
   HEAP32[$1786>>2] = $1788;
   STACKTOP = sp;return;
   break;
  }
  case 29:  {
   $1789 = $m;
   $1790 = ((($1789)) + 1284|0);
   $1791 = HEAP32[$1790>>2]|0;
   $1792 = $1791 & 268435456;
   $1793 = ($1792|0)!=(0);
   $1794 = $fxp;
   $1795 = $1794&255;
   $1796 = ($1795|0)==(0);
   do {
    if ($1793) {
     if ($1796) {
      $1797 = $1;
      $1798 = ((($1797)) + 252|0);
      $1799 = ((($1798)) + 12|0);
      $1800 = HEAP32[$1799>>2]|0;
      $1801 = $1800&255;
      $fxp = $1801;
      break;
     } else {
      $1802 = $fxp;
      $1803 = $1802&255;
      $1804 = $1;
      $1805 = ((($1804)) + 252|0);
      $1806 = ((($1805)) + 12|0);
      HEAP32[$1806>>2] = $1803;
      break;
     }
    } else {
     if ($1796) {
      $1807 = $1;
      $1808 = ((($1807)) + 240|0);
      $1809 = ((($1808)) + 8|0);
      $1810 = HEAP32[$1809>>2]|0;
      $1811 = $1810&255;
      $fxp = $1811;
      break;
     } else {
      $1812 = $fxp;
      $1813 = $1812&255;
      $1814 = $1;
      $1815 = ((($1814)) + 240|0);
      $1816 = ((($1815)) + 8|0);
      HEAP32[$1816>>2] = $1813;
      break;
     }
    }
   } while(0);
   $1817 = $fxp;
   $1818 = $1817&255;
   $1819 = $1818 & 240;
   $1820 = $1819 >> 4;
   $1821 = ($1820|0)==(0);
   if ($1821) {
    $1822 = $fxp;
    $1823 = $1822&255;
    $1824 = $1823 | 16;
    $1825 = $1824&255;
    $fxp = $1825;
   }
   $1826 = $fxp;
   $1827 = $1826&255;
   $1828 = $1827 & 15;
   $1829 = ($1828|0)==(0);
   if ($1829) {
    $1830 = $fxp;
    $1831 = $1830&255;
    $1832 = $1831 | 1;
    $1833 = $1832&255;
    $fxp = $1833;
   }
   $1834 = $fxp;
   $1835 = $1834&255;
   $1836 = $1;
   $1837 = ((($1836)) + 240|0);
   HEAP32[$1837>>2] = $1835;
   STACKTOP = sp;return;
   break;
  }
  case 128:  {
   $1861 = $fxp;
   $1862 = $1861&255;
   $1863 = $m;
   $1864 = ((($1863)) + 1268|0);
   $1865 = HEAP32[$1864>>2]|0;
   $1866 = ($1862|0)<=($1865|0);
   if (!($1866)) {
    STACKTOP = sp;return;
   }
   $1867 = $fxp;
   $1868 = $1867&255;
   $1869 = $1;
   $1870 = ((($1869)) + 56|0);
   HEAP32[$1870>>2] = $1868;
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   label = 328;
   break;
  }
  case 129:  {
   $1871 = $fxp;
   $1872 = $1871&255;
   $1873 = ($1872|0)==(0);
   if ($1873) {
    $1874 = $1;
    $1875 = ((($1874)) + 296|0);
    $1876 = ((($1875)) + 8|0);
    $1877 = HEAP32[$1876>>2]|0;
    $1878 = $1877&255;
    $fxp = $1878;
    $1879 = $1878&255;
    $1880 = ($1879|0)==(0);
    if ($1880) {
     STACKTOP = sp;return;
    }
   }
   $1881 = $m;
   $1882 = ((($1881)) + 1284|0);
   $1883 = HEAP32[$1882>>2]|0;
   $1884 = $1883 & 32;
   $1885 = ($1884|0)!=(0);
   if ($1885) {
    $1886 = $fxp;
    $1887 = $1886&255;
    $1888 = $1887 & 240;
    $1889 = $1888 >> 4;
    $h = $1889;
    $1890 = $fxp;
    $1891 = $1890&255;
    $1892 = $1891 & 15;
    $l = $1892;
    $1893 = $h;
    $1894 = ($1893|0)==(15);
    $1895 = $l;
    $1896 = ($1895|0)!=(0);
    $or$cond11 = $1894 & $1896;
    if ($or$cond11) {
     $1897 = $fxp;
     $1898 = $1897&255;
     $1899 = $1;
     $1900 = ((($1899)) + 296|0);
     $1901 = ((($1900)) + 8|0);
     HEAP32[$1901>>2] = $1898;
     $1902 = $fxp;
     $1903 = $1902&255;
     $1904 = $1903 & 15;
     $1905 = $1904&255;
     $fxp = $1905;
     label = 344;
     break L8;
    }
    $1906 = $l;
    $1907 = ($1906|0)==(15);
    $1908 = $h;
    $1909 = ($1908|0)!=(0);
    $or$cond13 = $1907 & $1909;
    if ($or$cond13) {
     $1910 = $fxp;
     $1911 = $1910&255;
     $1912 = $1;
     $1913 = ((($1912)) + 296|0);
     $1914 = ((($1913)) + 8|0);
     HEAP32[$1914>>2] = $1911;
     $1915 = $fxp;
     $1916 = $1915&255;
     $1917 = $1916 & 240;
     $1918 = $1917&255;
     $fxp = $1918;
     label = 344;
     break L8;
    }
   }
   $1919 = $1;
   $1920 = HEAP32[$1919>>2]|0;
   $1921 = $1920 | 512;
   HEAP32[$1919>>2] = $1921;
   $1922 = $fxp;
   $1923 = ($1922<<24>>24)!=(0);
   if (!($1923)) {
    STACKTOP = sp;return;
   }
   $1924 = $fxp;
   $1925 = $1924&255;
   $1926 = $1925 & 240;
   $1927 = $1926 >> 4;
   $h = $1927;
   $1928 = $fxp;
   $1929 = $1928&255;
   $1930 = $1929 & 15;
   $l = $1930;
   $1931 = $fxp;
   $1932 = $1931&255;
   $1933 = $1;
   $1934 = ((($1933)) + 296|0);
   $1935 = ((($1934)) + 8|0);
   HEAP32[$1935>>2] = $1932;
   $1936 = $m;
   $1937 = ((($1936)) + 1284|0);
   $1938 = HEAP32[$1937>>2]|0;
   $1939 = $1938 & 512;
   $1940 = ($1939|0)!=(0);
   if ($1940) {
    $1941 = $l;
    $1942 = ($1941|0)!=(0);
    $1943 = $l;
    $1944 = (0 - ($1943))|0;
    $1945 = $h;
    $1946 = $1942 ? $1944 : $1945;
    $1947 = $1;
    $1948 = ((($1947)) + 296|0);
    HEAP32[$1948>>2] = $1946;
    STACKTOP = sp;return;
   } else {
    $1949 = $h;
    $1950 = ($1949|0)!=(0);
    $1951 = $h;
    $1952 = $l;
    $1953 = (0 - ($1952))|0;
    $1954 = $1950 ? $1951 : $1953;
    $1955 = $1;
    $1956 = ((($1955)) + 296|0);
    HEAP32[$1956>>2] = $1954;
    STACKTOP = sp;return;
   }
   break;
  }
  case 130:  {
   label = 344;
   break;
  }
  case 131:  {
   $1973 = $fxp;
   $1974 = $1973&255;
   do {
    switch ($1974|0) {
    case 0:  {
     $1975 = $0;
     $1976 = $2;
     _virt_pastnote($1975,$1976,0);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $1977 = $0;
     $1978 = $2;
     _virt_pastnote($1977,$1978,2);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $1979 = $0;
     $1980 = $2;
     _virt_pastnote($1979,$1980,3);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $1981 = $0;
     $1982 = $2;
     _virt_setnna($1981,$1982,0);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $1983 = $0;
     $1984 = $2;
     _virt_setnna($1983,$1984,1);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $1985 = $0;
     $1986 = $2;
     _virt_setnna($1985,$1986,2);
     STACKTOP = sp;return;
     break;
    }
    case 6:  {
     $1987 = $0;
     $1988 = $2;
     _virt_setnna($1987,$1988,3);
     STACKTOP = sp;return;
     break;
    }
    case 7:  {
     $1989 = $1;
     $1990 = ((($1989)) + 4|0);
     $1991 = HEAP32[$1990>>2]|0;
     $1992 = $1991 | 4194304;
     HEAP32[$1990>>2] = $1992;
     STACKTOP = sp;return;
     break;
    }
    case 8:  {
     $1993 = $1;
     $1994 = ((($1993)) + 4|0);
     $1995 = HEAP32[$1994>>2]|0;
     $1996 = $1995 & -4194305;
     HEAP32[$1994>>2] = $1996;
     STACKTOP = sp;return;
     break;
    }
    case 9:  {
     $1997 = $1;
     $1998 = ((($1997)) + 4|0);
     $1999 = HEAP32[$1998>>2]|0;
     $2000 = $1999 | 8388608;
     HEAP32[$1998>>2] = $2000;
     STACKTOP = sp;return;
     break;
    }
    case 10:  {
     $2001 = $1;
     $2002 = ((($2001)) + 4|0);
     $2003 = HEAP32[$2002>>2]|0;
     $2004 = $2003 & -8388609;
     HEAP32[$2002>>2] = $2004;
     STACKTOP = sp;return;
     break;
    }
    case 11:  {
     $2005 = $1;
     $2006 = ((($2005)) + 4|0);
     $2007 = HEAP32[$2006>>2]|0;
     $2008 = $2007 | 16777216;
     HEAP32[$2006>>2] = $2008;
     STACKTOP = sp;return;
     break;
    }
    case 12:  {
     $2009 = $1;
     $2010 = ((($2009)) + 4|0);
     $2011 = HEAP32[$2010>>2]|0;
     $2012 = $2011 & -16777217;
     HEAP32[$2010>>2] = $2012;
     STACKTOP = sp;return;
     break;
    }
    default: {
     STACKTOP = sp;return;
    }
    }
   } while(0);
   break;
  }
  case 133:  {
   $2025 = $fxp;
   $2026 = $2025&255;
   $2027 = $1;
   $2028 = ((($2027)) + 404|0);
   $2029 = ((($2028)) + 4|0);
   HEAP32[$2029>>2] = $2026;
   STACKTOP = sp;return;
   break;
  }
  case 138:  {
   $2030 = $1;
   $2031 = HEAP32[$2030>>2]|0;
   $2032 = $2031 | 524288;
   HEAP32[$2030>>2] = $2032;
   $2033 = $fxp;
   $2034 = $2033&255;
   $2035 = $2034 & 15;
   $2036 = $2035 << 4;
   $2037 = ($2036|0)!=(0);
   if ($2037) {
    $2038 = $1;
    $2039 = ((($2038)) + 148|0);
    $2040 = $fxp;
    $2041 = $2040&255;
    $2042 = $2041 & 15;
    $2043 = $2042 << 4;
    _set_lfo_depth($2039,$2043);
   }
   $2044 = $fxp;
   $2045 = $2044&255;
   $2046 = $2045 & 240;
   $2047 = $2046 >> 4;
   $2048 = ($2047|0)!=(0);
   if (!($2048)) {
    STACKTOP = sp;return;
   }
   $2049 = $1;
   $2050 = ((($2049)) + 148|0);
   $2051 = $fxp;
   $2052 = $2051&255;
   $2053 = $2052 & 240;
   $2054 = $2053 >> 4;
   _set_lfo_rate($2050,$2054);
   STACKTOP = sp;return;
   break;
  }
  case 132:  {
   $2013 = $fxp;
   $2014 = $2013&255;
   $2015 = ($2014|0)<(254);
   if (!($2015)) {
    $2016 = $1;
    $2017 = ((($2016)) + 404|0);
    $2018 = ((($2017)) + 4|0);
    $2019 = HEAP32[$2018>>2]|0;
    $2020 = ($2019|0)>(0);
    if (!($2020)) {
     STACKTOP = sp;return;
    }
   }
   $2021 = $fxp;
   $2022 = $2021&255;
   $2023 = $1;
   $2024 = ((($2023)) + 404|0);
   HEAP32[$2024>>2] = $2022;
   STACKTOP = sp;return;
   break;
  }
  case 139:  {
   $2055 = $1;
   $2056 = ((($2055)) + 148|0);
   $2057 = $fxp;
   $2058 = $2057&255;
   $2059 = $2058 & 3;
   _set_lfo_waveform($2056,$2059);
   STACKTOP = sp;return;
   break;
  }
  case 140:  {
   $2060 = $1;
   $2061 = ((($2060)) + 216|0);
   $2062 = HEAP32[$2061>>2]|0;
   $2063 = $2062 & 65535;
   HEAP32[$2061>>2] = $2063;
   $2064 = $fxp;
   $2065 = $2064&255;
   $2066 = $2065 << 16;
   $2067 = $1;
   $2068 = ((($2067)) + 216|0);
   $2069 = HEAP32[$2068>>2]|0;
   $2070 = $2069 | $2066;
   HEAP32[$2068>>2] = $2070;
   STACKTOP = sp;return;
   break;
  }
  case 141:  {
   $2071 = $fxp;
   $2072 = $2071&255;
   $2073 = $1;
   $2074 = ((($2073)) + 368|0);
   $2075 = ((($2074)) + 16|0);
   HEAP32[$2075>>2] = $2072;
   STACKTOP = sp;return;
   break;
  }
  case 160:  {
   $2095 = $m;
   $2096 = ((($2095)) + 1284|0);
   $2097 = HEAP32[$2096>>2]|0;
   $2098 = $2097 & 32;
   $2099 = ($2098|0)!=(0);
   if ($2099) {
    $2100 = $fxp;
    $2101 = $2100&255;
    $2102 = $2101 & 240;
    $2103 = $2102 >> 4;
    $h = $2103;
    $2104 = $fxp;
    $2105 = $2104&255;
    $2106 = $2105 & 15;
    $l = $2106;
    $2107 = $h;
    $2108 = ($2107|0)==(15);
    $2109 = $l;
    $2110 = ($2109|0)!=(0);
    $or$cond15 = $2108 & $2110;
    if ($or$cond15) {
     $2111 = $fxp;
     $2112 = $2111&255;
     $2113 = $2112 & 15;
     $2114 = $2113&255;
     $fxp = $2114;
     label = 208;
     break L8;
    }
   }
   $2115 = $fxp;
   $2116 = ($2115<<24>>24)!=(0);
   if ($2116) {
    $2117 = $fxp;
    $2118 = $2117&255;
    $2119 = $1;
    $2120 = ((($2119)) + 252|0);
    HEAP32[$2120>>2] = $2118;
   }
   $2121 = $1;
   $2122 = HEAP32[$2121>>2]|0;
   $2123 = $2122 | 1;
   HEAP32[$2121>>2] = $2123;
   STACKTOP = sp;return;
   break;
  }
  case 162:  {
   $2076 = $fxp;
   $2077 = ($2076<<24>>24)!=(0);
   if (!($2077)) {
    STACKTOP = sp;return;
   }
   $2078 = $fxp;
   $2079 = $2078&255;
   $2080 = $2079 & 15;
   $2081 = ($2080|0)!=(0);
   $2082 = $fxp;
   $2083 = $2082&255;
   $2084 = $2083 & 240;
   $2085 = $2084 >> 4;
   if ($2081) {
    $2086 = $2085 << 8;
    $2087 = $fxp;
    $2088 = $2087&255;
    $2089 = $2088 & 15;
    $2090 = $2086 | $2089;
    $2091 = $p;
    $2092 = ((($2091)) + 1492|0);
    HEAP32[$2092>>2] = $2090;
    STACKTOP = sp;return;
   } else {
    $2093 = $p;
    $2094 = ((($2093)) + 1492|0);
    HEAP32[$2094>>2] = $2085;
    STACKTOP = sp;return;
   }
   break;
  }
  case 161:  {
   $2124 = $m;
   $2125 = ((($2124)) + 1284|0);
   $2126 = HEAP32[$2125>>2]|0;
   $2127 = $2126 & 32;
   $2128 = ($2127|0)!=(0);
   if ($2128) {
    $2129 = $fxp;
    $2130 = $2129&255;
    $2131 = $2130 & 240;
    $2132 = $2131 >> 4;
    $h = $2132;
    $2133 = $fxp;
    $2134 = $2133&255;
    $2135 = $2134 & 15;
    $l = $2135;
    $2136 = $h;
    $2137 = ($2136|0)==(15);
    $2138 = $l;
    $2139 = ($2138|0)!=(0);
    $or$cond17 = $2137 & $2139;
    if ($or$cond17) {
     $2140 = $fxp;
     $2141 = $2140&255;
     $2142 = $2141 & 15;
     $2143 = $2142&255;
     $fxp = $2143;
     label = 216;
     break L8;
    }
   }
   $2144 = $fxp;
   $2145 = ($2144<<24>>24)!=(0);
   if ($2145) {
    $2146 = $fxp;
    $2147 = $2146&255;
    $2148 = (0 - ($2147))|0;
    $2149 = $1;
    $2150 = ((($2149)) + 252|0);
    HEAP32[$2150>>2] = $2148;
   }
   $2151 = $1;
   $2152 = HEAP32[$2151>>2]|0;
   $2153 = $2152 | 1;
   HEAP32[$2151>>2] = $2153;
   STACKTOP = sp;return;
   break;
  }
  case 165:  {
   $2154 = $1;
   $2155 = HEAP32[$2154>>2]|0;
   $2156 = $2155 | 64;
   HEAP32[$2154>>2] = $2156;
   $2157 = $fxp;
   $2158 = ($2157<<24>>24)!=(0);
   if (!($2158)) {
    STACKTOP = sp;return;
   }
   $2159 = $fxp;
   $2160 = $2159&255;
   $2161 = $2160 & 240;
   $2162 = $2161 >> 4;
   $h = $2162;
   $2163 = $fxp;
   $2164 = $2163&255;
   $2165 = $2164 & 15;
   $l = $2165;
   $2166 = $h;
   $2167 = ($2166|0)!=(0);
   $2168 = $h;
   $2169 = $l;
   $2170 = (0 - ($2169))|0;
   $2171 = $2167 ? $2168 : $2170;
   $2172 = $1;
   $2173 = ((($2172)) + 252|0);
   $2174 = ((($2173)) + 4|0);
   HEAP32[$2174>>2] = $2171;
   STACKTOP = sp;return;
   break;
  }
  case 158: case 159: case 157: case 156:  {
   $2175 = $fxp;
   $2176 = $2175&255;
   $2177 = ($2176|0)!=(0);
   if ($2177) {
    $2178 = $fxt;
    $2179 = $2178&255;
    $2180 = ($2179|0)==(159);
    if ($2180) {
     label = 392;
    } else {
     $2181 = $fxt;
     $2182 = $2181&255;
     $2183 = ($2182|0)==(158);
     if ($2183) {
      label = 392;
     }
    }
    if ((label|0) == 392) {
     $2184 = $fxp;
     $2185 = $2184&255;
     $2186 = $2185 & 240;
     $2187 = $2186 >> 4;
     $2188 = $1;
     $2189 = ((($2188)) + 228|0);
     HEAP32[$2189>>2] = $2187;
     $2190 = $fxp;
     $2191 = $2190&255;
     $2192 = $2191 & 240;
     $2193 = $2192 >> 4;
     $2194 = (($2193) + 1)|0;
     $2195 = $1;
     $2196 = ((($2195)) + 228|0);
     $2197 = ((($2196)) + 4|0);
     HEAP32[$2197>>2] = $2194;
     $2198 = $1;
     $2199 = ((($2198)) + 228|0);
     $2200 = ((($2199)) + 8|0);
     HEAP32[$2200>>2] = 0;
    }
    $2201 = $fxt;
    $2202 = $2201&255;
    $2203 = ($2202|0)==(157);
    if ($2203) {
     label = 395;
    } else {
     $2204 = $fxt;
     $2205 = $2204&255;
     $2206 = ($2205|0)==(158);
     if ($2206) {
      label = 395;
     } else {
      $2212 = $fxp;
      $2213 = $2212&255;
      $2214 = $2213 & 15;
      $2215 = (0 - ($2214))|0;
      $2216 = $1;
      $2217 = ((($2216)) + 416|0);
      HEAP32[$2217>>2] = $2215;
     }
    }
    if ((label|0) == 395) {
     $2207 = $fxp;
     $2208 = $2207&255;
     $2209 = $2208 & 15;
     $2210 = $1;
     $2211 = ((($2210)) + 416|0);
     HEAP32[$2211>>2] = $2209;
    }
    $2218 = $fxp;
    $2219 = $2218&255;
    $2220 = $2219 & 240;
    $2221 = $2220 >> 4;
    $2222 = $1;
    $2223 = ((($2222)) + 416|0);
    $2224 = ((($2223)) + 8|0);
    HEAP32[$2224>>2] = $2221;
    $2225 = $1;
    $2226 = ((($2225)) + 416|0);
    $2227 = ((($2226)) + 12|0);
    HEAP32[$2227>>2] = $2221;
   }
   $2228 = $fxt;
   $2229 = $2228&255;
   $2230 = ($2229|0)==(159);
   if ($2230) {
    label = 400;
   } else {
    $2231 = $fxt;
    $2232 = $2231&255;
    $2233 = ($2232|0)==(158);
    if ($2233) {
     label = 400;
    }
   }
   if ((label|0) == 400) {
    $2234 = $1;
    $2235 = HEAP32[$2234>>2]|0;
    $2236 = $2235 | 262144;
    HEAP32[$2234>>2] = $2236;
   }
   $2237 = $1;
   $2238 = HEAP32[$2237>>2]|0;
   $2239 = $2238 | 16384;
   HEAP32[$2237>>2] = $2239;
   STACKTOP = sp;return;
   break;
  }
  case 115:  {
   $2240 = $1;
   $2241 = HEAP32[$2240>>2]|0;
   $2242 = $2241 | 16384;
   HEAP32[$2240>>2] = $2242;
   $2243 = $fxp;
   $2244 = $2243&255;
   $2245 = (0 - ($2244))|0;
   $2246 = $1;
   $2247 = ((($2246)) + 416|0);
   HEAP32[$2247>>2] = $2245;
   $2248 = $1;
   $2249 = ((($2248)) + 416|0);
   $2250 = ((($2249)) + 8|0);
   HEAP32[$2250>>2] = 1;
   $2251 = $1;
   $2252 = ((($2251)) + 416|0);
   $2253 = ((($2252)) + 12|0);
   HEAP32[$2253>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 116:  {
   $2254 = $1;
   $2255 = HEAP32[$2254>>2]|0;
   $2256 = $2255 | 16384;
   HEAP32[$2254>>2] = $2256;
   $2257 = $fxp;
   $2258 = $2257&255;
   $2259 = $1;
   $2260 = ((($2259)) + 416|0);
   HEAP32[$2260>>2] = $2258;
   $2261 = $1;
   $2262 = ((($2261)) + 416|0);
   $2263 = ((($2262)) + 8|0);
   HEAP32[$2263>>2] = 1;
   $2264 = $1;
   $2265 = ((($2264)) + 416|0);
   $2266 = ((($2265)) + 12|0);
   HEAP32[$2266>>2] = 1;
   STACKTOP = sp;return;
   break;
  }
  case 117:  {
   $2267 = $1;
   $2268 = HEAP32[$2267>>2]|0;
   $2269 = $2268 | 32768;
   HEAP32[$2267>>2] = $2269;
   $2270 = $fxp;
   $2271 = $2270&255;
   $2272 = (0 - ($2271))|0;
   $2273 = $1;
   $2274 = ((($2273)) + 416|0);
   $2275 = ((($2274)) + 4|0);
   HEAP32[$2275>>2] = $2272;
   STACKTOP = sp;return;
   break;
  }
  case 118:  {
   $2276 = $1;
   $2277 = HEAP32[$2276>>2]|0;
   $2278 = $2277 | 32768;
   HEAP32[$2276>>2] = $2278;
   $2279 = $fxp;
   $2280 = $2279&255;
   $2281 = $1;
   $2282 = ((($2281)) + 416|0);
   $2283 = ((($2282)) + 4|0);
   HEAP32[$2283>>2] = $2280;
   STACKTOP = sp;return;
   break;
  }
  case 123:  {
   $2284 = $fxp;
   $2285 = $2284&255;
   $2286 = $2285 & 15;
   $2287 = ($2286|0)!=(0);
   $2288 = $1;
   $2289 = ((($2288)) + 4|0);
   $2290 = HEAP32[$2289>>2]|0;
   if ($2287) {
    $2291 = $2290 | 16;
    HEAP32[$2289>>2] = $2291;
   } else {
    $2292 = $2290 & -17;
    HEAP32[$2289>>2] = $2292;
   }
   $2293 = $fxp;
   $2294 = $2293&255;
   $2295 = $2294 & 15;
   $2296 = $2295 << 2;
   $2297 = ($2296|0)!=(0);
   if ($2297) {
    $2298 = $1;
    $2299 = ((($2298)) + 108|0);
    $2300 = $fxp;
    $2301 = $2300&255;
    $2302 = $2301 & 15;
    $2303 = $2302 << 2;
    _set_lfo_depth($2299,$2303);
   }
   $2304 = $fxp;
   $2305 = $2304&255;
   $2306 = $2305 & 240;
   $2307 = $2306 >> 4;
   $2308 = ($2307|0)!=(0);
   if (!($2308)) {
    STACKTOP = sp;return;
   }
   $2309 = $1;
   $2310 = ((($2309)) + 108|0);
   $2311 = $fxp;
   $2312 = $2311&255;
   $2313 = $2312 & 240;
   $2314 = $2313 >> 4;
   _set_lfo_rate($2310,$2314);
   STACKTOP = sp;return;
   break;
  }
  case 126:  {
   $2445 = $fxp;
   $2446 = ($2445<<24>>24)!=(0);
   if ($2446) {
    $2447 = $fxp;
    $2448 = $2447&255;
    $2449 = $p;
    $2450 = ((($2449)) + 16|0);
    HEAP32[$2450>>2] = $2448;
    $2451 = $p;
    $2452 = ((($2451)) + 1492|0);
    HEAP32[$2452>>2] = 0;
    label = 431;
   } else {
    label = 431;
   }
   break;
  }
  case 127:  {
   label = 431;
   break;
  }
  case 121:  {
   $2315 = $1;
   $2316 = ((($2315)) + 4|0);
   $2317 = HEAP32[$2316>>2]|0;
   $2318 = $2317 | 8;
   HEAP32[$2316>>2] = $2318;
   $2319 = $fxp;
   $2320 = $2319&255;
   $2321 = (0 - ($2320))|0;
   $2322 = $1;
   $2323 = ((($2322)) + 312|0);
   HEAP32[$2323>>2] = $2321;
   $2324 = $fxp;
   $2325 = $2324&255;
   $2326 = $1;
   $2327 = ((($2326)) + 312|0);
   $2328 = ((($2327)) + 16|0);
   HEAP32[$2328>>2] = $2325;
   $2329 = ($2325|0)==(0);
   if (!($2329)) {
    STACKTOP = sp;return;
   }
   $2330 = $1;
   $2331 = ((($2330)) + 4|0);
   $2332 = HEAP32[$2331>>2]|0;
   $2333 = $2332 & -9;
   HEAP32[$2331>>2] = $2333;
   STACKTOP = sp;return;
   break;
  }
  case 120:  {
   $2334 = $1;
   $2335 = ((($2334)) + 4|0);
   $2336 = HEAP32[$2335>>2]|0;
   $2337 = $2336 | 8;
   HEAP32[$2335>>2] = $2337;
   $2338 = $fxp;
   $2339 = $2338&255;
   $2340 = $1;
   $2341 = ((($2340)) + 312|0);
   HEAP32[$2341>>2] = $2339;
   $2342 = $fxp;
   $2343 = $2342&255;
   $2344 = $1;
   $2345 = ((($2344)) + 312|0);
   $2346 = ((($2345)) + 16|0);
   HEAP32[$2346>>2] = $2343;
   $2347 = ($2343|0)==(0);
   if (!($2347)) {
    STACKTOP = sp;return;
   }
   $2348 = $1;
   $2349 = ((($2348)) + 4|0);
   $2350 = HEAP32[$2349>>2]|0;
   $2351 = $2350 & -9;
   HEAP32[$2349>>2] = $2351;
   STACKTOP = sp;return;
   break;
  }
  case 122:  {
   $2352 = $1;
   $2353 = ((($2352)) + 44|0);
   $2354 = HEAP32[$2353>>2]|0;
   $2355 = $mod;
   $2356 = ((($2355)) + 140|0);
   $2357 = HEAP32[$2356>>2]|0;
   $2358 = ($2354>>>0)<($2357>>>0);
   if (!($2358)) {
    STACKTOP = sp;return;
   }
   $2359 = $1;
   $2360 = ((($2359)) + 44|0);
   $2361 = HEAP32[$2360>>2]|0;
   $2362 = $mod;
   $2363 = ((($2362)) + 176|0);
   $2364 = HEAP32[$2363>>2]|0;
   $2365 = (($2364) + (($2361*764)|0)|0);
   $2366 = ((($2365)) + 36|0);
   $2367 = HEAP32[$2366>>2]|0;
   $2368 = ($2367|0)>(0);
   if (!($2368)) {
    STACKTOP = sp;return;
   }
   $2369 = $1;
   $2370 = ((($2369)) + 4|0);
   $2371 = HEAP32[$2370>>2]|0;
   $2372 = $2371 | 4;
   HEAP32[$2370>>2] = $2372;
   $2373 = $m;
   $2374 = $1;
   $2375 = $note;
   $2376 = $2375&255;
   _do_toneporta($2373,$2374,$2376);
   $2377 = $fxp;
   $2378 = $2377&255;
   $2379 = $1;
   $2380 = ((($2379)) + 336|0);
   $2381 = ((($2380)) + 12|0);
   HEAP32[$2381>>2] = $2378;
   $2382 = $fxp;
   $2383 = $2382&255;
   $2384 = ($2383|0)==(0);
   if (!($2384)) {
    STACKTOP = sp;return;
   }
   $2385 = $1;
   $2386 = ((($2385)) + 4|0);
   $2387 = HEAP32[$2386>>2]|0;
   $2388 = $2387 & -5;
   HEAP32[$2386>>2] = $2388;
   STACKTOP = sp;return;
   break;
  }
  case 124:  {
   $2389 = $1;
   $2390 = ((($2389)) + 4|0);
   $2391 = HEAP32[$2390>>2]|0;
   $2392 = $2391 | 1;
   HEAP32[$2390>>2] = $2392;
   $2393 = $fxp;
   $2394 = $2393&255;
   $2395 = $1;
   $2396 = ((($2395)) + 252|0);
   HEAP32[$2396>>2] = $2394;
   $2397 = $fxp;
   $2398 = $2397&255;
   $2399 = ($2398|0)==(0);
   if (!($2399)) {
    STACKTOP = sp;return;
   }
   $2400 = $1;
   $2401 = ((($2400)) + 4|0);
   $2402 = HEAP32[$2401>>2]|0;
   $2403 = $2402 & -2;
   HEAP32[$2401>>2] = $2403;
   STACKTOP = sp;return;
   break;
  }
  case 125:  {
   $2404 = $1;
   $2405 = ((($2404)) + 4|0);
   $2406 = HEAP32[$2405>>2]|0;
   $2407 = $2406 | 1;
   HEAP32[$2405>>2] = $2407;
   $2408 = $fxp;
   $2409 = $2408&255;
   $2410 = (0 - ($2409))|0;
   $2411 = $1;
   $2412 = ((($2411)) + 252|0);
   HEAP32[$2412>>2] = $2410;
   $2413 = $fxp;
   $2414 = $2413&255;
   $2415 = ($2414|0)==(0);
   if (!($2415)) {
    STACKTOP = sp;return;
   }
   $2416 = $1;
   $2417 = ((($2416)) + 4|0);
   $2418 = HEAP32[$2417>>2]|0;
   $2419 = $2418 & -2;
   HEAP32[$2417>>2] = $2419;
   STACKTOP = sp;return;
   break;
  }
  case 146:  {
   $2420 = $1;
   $2421 = HEAP32[$2420>>2]|0;
   $2422 = $2421 | 16;
   HEAP32[$2420>>2] = $2422;
   $2423 = $fxp;
   $2424 = $2423&255;
   $2425 = $2424 & 15;
   $2426 = $2425 << 3;
   $2427 = ($2426|0)!=(0);
   if ($2427) {
    $2428 = $1;
    $2429 = ((($2428)) + 108|0);
    $2430 = $fxp;
    $2431 = $2430&255;
    $2432 = $2431 & 15;
    $2433 = $2432 << 3;
    _set_lfo_depth($2429,$2433);
   }
   $2434 = $fxp;
   $2435 = $2434&255;
   $2436 = $2435 & 240;
   $2437 = $2436 >> 4;
   $2438 = ($2437|0)!=(0);
   if (!($2438)) {
    STACKTOP = sp;return;
   }
   $2439 = $1;
   $2440 = ((($2439)) + 108|0);
   $2441 = $fxp;
   $2442 = $2441&255;
   $2443 = $2442 & 240;
   $2444 = $2443 >> 4;
   _set_lfo_rate($2440,$2444);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $2455 = $0;
   $2456 = $1;
   $2457 = $2;
   $2458 = $note;
   $2459 = $fxt;
   $2460 = $fxp;
   $2461 = $4;
   _extras_process_fx($2455,$2456,$2457,$2458,$2459,$2460,$2461);
   STACKTOP = sp;return;
  }
  }
 } while(0);
 switch (label|0) {
  case 7: {
   $37 = $fxp;
   $38 = $37&255;
   $39 = ($38|0)!=(0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
   $40 = $1;
   $41 = ((($40)) + 168|0);
   HEAP8[$41>>0] = 0;
   $42 = $fxp;
   $43 = $42&255;
   $44 = $43 & 240;
   $45 = $44 >> 4;
   $46 = $45&255;
   $47 = $1;
   $48 = ((($47)) + 168|0);
   $49 = ((($48)) + 1|0);
   HEAP8[$49>>0] = $46;
   $50 = $fxp;
   $51 = $50&255;
   $52 = $51 & 15;
   $53 = $52&255;
   $54 = $1;
   $55 = ((($54)) + 168|0);
   $56 = ((($55)) + 2|0);
   HEAP8[$56>>0] = $53;
   $57 = $1;
   $58 = ((($57)) + 168|0);
   $59 = ((($58)) + 16|0);
   HEAP32[$59>>2] = 3;
   STACKTOP = sp;return;
   break;
  }
  case 124: {
   while(1) {
    label = 0;
    $681 = $m;
    $682 = ((($681)) + 1284|0);
    $683 = HEAP32[$682>>2]|0;
    $684 = $683 & 32;
    $685 = ($684|0)!=(0);
    if ($685) {
     $686 = $fxp;
     $687 = $686&255;
     $688 = $687 & 240;
     $689 = $688 >> 4;
     $h = $689;
     $690 = $fxp;
     $691 = $690&255;
     $692 = $691 & 15;
     $l = $692;
     $693 = $l;
     $694 = ($693|0)==(15);
     $695 = $h;
     $696 = ($695|0)!=(0);
     $or$cond3 = $694 & $696;
     if ($or$cond3) {
      label = 126;
      break;
     }
     $706 = $h;
     $707 = ($706|0)==(15);
     $708 = $l;
     $709 = ($708|0)!=(0);
     $or$cond5 = $707 & $709;
     if ($or$cond5) {
      label = 128;
      break;
     }
    }
    $719 = $fxp;
    $720 = $719&255;
    $721 = ($720|0)==(0);
    if (!($721)) {
     label = 131;
     break;
    }
    $722 = $1;
    $723 = ((($722)) + 252|0);
    $724 = ((($723)) + 12|0);
    $725 = HEAP32[$724>>2]|0;
    $726 = $725&255;
    $fxp = $726;
    $727 = $726&255;
    $728 = ($727|0)!=(0);
    if ($728) {
     label = 124;
    } else {
     label = 131;
     break;
    }
   }
   if ((label|0) == 126) {
    $697 = $fxp;
    $698 = $697&255;
    $699 = $1;
    $700 = ((($699)) + 252|0);
    $701 = ((($700)) + 12|0);
    HEAP32[$701>>2] = $698;
    $702 = $fxp;
    $703 = $702&255;
    $704 = $703 >> 4;
    $705 = $704&255;
    $fxp = $705;
    label = 208;
    break;
   }
   else if ((label|0) == 128) {
    $710 = $fxp;
    $711 = $710&255;
    $712 = $1;
    $713 = ((($712)) + 252|0);
    $714 = ((($713)) + 12|0);
    HEAP32[$714>>2] = $711;
    $715 = $fxp;
    $716 = $715&255;
    $717 = $716 & 15;
    $718 = $717&255;
    $fxp = $718;
    label = 216;
    break;
   }
   else if ((label|0) == 131) {
    $729 = $1;
    $730 = HEAP32[$729>>2]|0;
    $731 = $730 | 1;
    HEAP32[$729>>2] = $731;
    $732 = $fxp;
    $733 = ($732<<24>>24)!=(0);
    do {
     if ($733) {
      $734 = $fxp;
      $735 = $734&255;
      $736 = $1;
      $737 = ((($736)) + 252|0);
      $738 = ((($737)) + 12|0);
      HEAP32[$738>>2] = $735;
      $739 = $fxp;
      $740 = $739&255;
      $741 = $740 & 240;
      $742 = $741 >> 4;
      $h = $742;
      $743 = $fxp;
      $744 = $743&255;
      $745 = $744 & 15;
      $l = $745;
      $746 = $fxp;
      $747 = ($746<<24>>24)!=(0);
      if ($747) {
       $748 = $m;
       $749 = ((($748)) + 1284|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = $750 & 512;
       $752 = ($751|0)!=(0);
       if ($752) {
        $753 = $l;
        $754 = ($753|0)!=(0);
        $755 = $l;
        $756 = (0 - ($755))|0;
        $757 = $h;
        $758 = $754 ? $756 : $757;
        $759 = $1;
        $760 = ((($759)) + 252|0);
        HEAP32[$760>>2] = $758;
        break;
       } else {
        $761 = $h;
        $762 = ($761|0)!=(0);
        $763 = $h;
        $764 = $l;
        $765 = (0 - ($764))|0;
        $766 = $762 ? $763 : $765;
        $767 = $1;
        $768 = ((($767)) + 252|0);
        HEAP32[$768>>2] = $766;
        break;
       }
      }
     }
    } while(0);
    $769 = $m;
    $770 = ((($769)) + 1284|0);
    $771 = HEAP32[$770>>2]|0;
    $772 = $771 & 32;
    $773 = ($772|0)!=(0);
    if (!($773)) {
     STACKTOP = sp;return;
    }
    $774 = $1;
    $775 = ((($774)) + 252|0);
    $776 = ((($775)) + 12|0);
    $777 = HEAP32[$776>>2]|0;
    $778 = $777 & 240;
    $779 = $778 >> 4;
    $780 = ($779|0)==(15);
    if (!($780)) {
     $781 = $1;
     $782 = ((($781)) + 252|0);
     $783 = ((($782)) + 12|0);
     $784 = HEAP32[$783>>2]|0;
     $785 = $784 & 15;
     $786 = ($785|0)==(15);
     if (!($786)) {
      STACKTOP = sp;return;
     }
    }
    $787 = $1;
    $788 = HEAP32[$787>>2]|0;
    $789 = $788 | 64;
    HEAP32[$787>>2] = $789;
    $790 = $1;
    $791 = ((($790)) + 252|0);
    $792 = HEAP32[$791>>2]|0;
    $793 = $1;
    $794 = ((($793)) + 252|0);
    $795 = ((($794)) + 4|0);
    HEAP32[$795>>2] = $792;
    STACKTOP = sp;return;
   }
   break;
  }
  case 200: {
   $1150 = $fxp;
   $1151 = $1150&255;
   $1152 = (($1151) - 128)|0;
   $1153 = $1152&65535;
   $1154 = $1153 << 16 >> 16;
   $1155 = $1;
   $1156 = ((($1155)) + 40|0);
   HEAP32[$1156>>2] = $1154;
   STACKTOP = sp;return;
   break;
  }
  case 217: {
   $1226 = $fxp;
   $1227 = ($1226<<24>>24)!=(0);
   if (!($1227)) {
    STACKTOP = sp;return;
   }
   $1228 = $1;
   $1229 = HEAP32[$1228>>2]|0;
   $1230 = $1229 | 128;
   HEAP32[$1228>>2] = $1230;
   $1231 = $fxp;
   $1232 = $1231&255;
   $1233 = (0 - ($1232))|0;
   $1234 = (+($1233|0));
   $1235 = $1;
   $1236 = ((($1235)) + 312|0);
   $1237 = ((($1236)) + 8|0);
   HEAPF64[$1237>>3] = $1234;
   STACKTOP = sp;return;
   break;
  }
  case 219: {
   $1238 = $fxp;
   $1239 = ($1238<<24>>24)!=(0);
   if (!($1239)) {
    STACKTOP = sp;return;
   }
   $1240 = $1;
   $1241 = HEAP32[$1240>>2]|0;
   $1242 = $1241 | 128;
   HEAP32[$1240>>2] = $1242;
   $1243 = $fxp;
   $1244 = (+($1243&255));
   $1245 = $1;
   $1246 = ((($1245)) + 312|0);
   $1247 = ((($1246)) + 8|0);
   HEAPF64[$1247>>3] = $1244;
   STACKTOP = sp;return;
   break;
  }
  case 221: {
   $1248 = $fxp;
   $1249 = $1248&255;
   $1250 = $p;
   $1251 = ((($1250)) + 324|0);
   $1252 = ((($1251)) + 8|0);
   HEAP32[$1252>>2] = $1249;
   STACKTOP = sp;return;
   break;
  }
  case 226: {
   $1271 = $fxp;
   $1272 = ($1271<<24>>24)!=(0);
   if (!($1272)) {
    STACKTOP = sp;return;
   }
   $1273 = $fxp;
   $1274 = $1273&255;
   $1275 = $p;
   $1276 = ((($1275)) + 16|0);
   HEAP32[$1276>>2] = $1274;
   $1277 = $p;
   $1278 = ((($1277)) + 1492|0);
   HEAP32[$1278>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 228: {
   $1279 = $m;
   $1280 = ((($1279)) + 1256|0);
   $1281 = +HEAPF64[$1280>>3];
   $1282 = $1281 * 20.0;
   $1283 = $1282 / 10.0;
   $1284 = 0.5 + $1283;
   $1285 = (~~(($1284)));
   $min_bpm = $1285;
   $1286 = $fxp;
   $1287 = $1286&255;
   $1288 = $min_bpm;
   $1289 = ($1287|0)<($1288|0);
   if ($1289) {
    $1290 = $min_bpm;
    $1291 = $1290&255;
    $fxp = $1291;
   }
   $1292 = $fxp;
   $1293 = $1292&255;
   $1294 = $p;
   $1295 = ((($1294)) + 20|0);
   HEAP32[$1295>>2] = $1293;
   $1296 = $m;
   $1297 = ((($1296)) + 1256|0);
   $1298 = +HEAPF64[$1297>>3];
   $1299 = $m;
   $1300 = ((($1299)) + 1248|0);
   $1301 = +HEAPF64[$1300>>3];
   $1302 = $1298 * $1301;
   $1303 = $p;
   $1304 = ((($1303)) + 20|0);
   $1305 = HEAP32[$1304>>2]|0;
   $1306 = (+($1305|0));
   $1307 = $1302 / $1306;
   $1308 = $p;
   $1309 = ((($1308)) + 40|0);
   HEAPF64[$1309>>3] = $1307;
   STACKTOP = sp;return;
   break;
  }
  case 328: {
   $1838 = $1;
   $1839 = HEAP32[$1838>>2]|0;
   $1840 = $1839 | 128;
   HEAP32[$1838>>2] = $1840;
   $1841 = $fxp;
   $1842 = $1841&255;
   $1843 = $1842 & 240;
   $1844 = $1843 >> 4;
   if ((($1844|0) == 1)) {
    $1845 = $fxp;
    $1846 = $1845&255;
    $1847 = $1846 & 15;
    $1848 = (+($1847|0));
    $1849 = -0.25 * $1848;
    $1850 = $1;
    $1851 = ((($1850)) + 312|0);
    $1852 = ((($1851)) + 8|0);
    HEAPF64[$1852>>3] = $1849;
    STACKTOP = sp;return;
   } else if ((($1844|0) == 2)) {
    $1853 = $fxp;
    $1854 = $1853&255;
    $1855 = $1854 & 15;
    $1856 = (+($1855|0));
    $1857 = 0.25 * $1856;
    $1858 = $1;
    $1859 = ((($1858)) + 312|0);
    $1860 = ((($1859)) + 8|0);
    HEAPF64[$1860>>3] = $1857;
    STACKTOP = sp;return;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  case 344: {
   $1957 = $1;
   $1958 = HEAP32[$1957>>2]|0;
   $1959 = $1958 | 1024;
   HEAP32[$1957>>2] = $1959;
   $1960 = $fxp;
   $1961 = ($1960<<24>>24)!=(0);
   if (!($1961)) {
    STACKTOP = sp;return;
   }
   $1962 = $fxp;
   $1963 = $1962&255;
   $1964 = $1963 & 240;
   $1965 = $1964 >> 4;
   $1966 = $fxp;
   $1967 = $1966&255;
   $1968 = $1967 & 15;
   $1969 = (($1965) - ($1968))|0;
   $1970 = $1;
   $1971 = ((($1970)) + 296|0);
   $1972 = ((($1971)) + 4|0);
   HEAP32[$1972>>2] = $1969;
   STACKTOP = sp;return;
   break;
  }
  case 431: {
   $2453 = $1;
   $2454 = ((($2453)) + 4|0);
   HEAP32[$2454>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
 }
 if ((label|0) == 208) {
  $1183 = $1;
  $1184 = HEAP32[$1183>>2]|0;
  $1185 = $1184 | 64;
  HEAP32[$1183>>2] = $1185;
  $1186 = $fxp;
  $1187 = $1186&255;
  $1188 = $1;
  $1189 = ((($1188)) + 252|0);
  $1190 = ((($1189)) + 4|0);
  HEAP32[$1190>>2] = $1187;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 216) {
  $1217 = $1;
  $1218 = HEAP32[$1217>>2]|0;
  $1219 = $1218 | 64;
  HEAP32[$1217>>2] = $1219;
  $1220 = $fxp;
  $1221 = $1220&255;
  $1222 = (0 - ($1221))|0;
  $1223 = $1;
  $1224 = ((($1223)) + 252|0);
  $1225 = ((($1224)) + 4|0);
  HEAP32[$1225>>2] = $1222;
  STACKTOP = sp;return;
 }
}
function _do_toneporta($m,$xc,$note) {
 $m = $m|0;
 $xc = $xc|0;
 $note = $note|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $instrument = 0, $mapped = 0, $or$cond = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $xc;
 $2 = $note;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = ((($6)) + 176|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($5*764)|0)|0);
 $instrument = $9;
 $10 = $1;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $instrument;
 $14 = ((($13)) + 512|0);
 $15 = (($14) + ($12<<1)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $mapped = $17;
 $18 = $mapped;
 $19 = $instrument;
 $20 = ((($19)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)>=($21|0);
 $$ = $22 ? 0 : $17;
 $mapped = $$;
 $23 = $mapped;
 $24 = $instrument;
 $25 = ((($24)) + 756|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($23<<6)|0);
 $sub = $27;
 $28 = $2;
 $29 = ($28|0)>=(1);
 $30 = $2;
 $31 = ($30|0)<=(128);
 $or$cond = $29 & $31;
 if ($or$cond) {
  $32 = $1;
  $33 = ((($32)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = ((($35)) + 140|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34>>>0)<($37>>>0);
  if ($38) {
   $39 = $2;
   $40 = (($39) + -1)|0;
   $2 = $40;
   $41 = $2;
   $42 = $sub;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($41) + ($44))|0;
   $46 = $1;
   $47 = ((($46)) + 104|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $instrument;
   $50 = ((($49)) + 512|0);
   $51 = (($50) + ($48<<1)|0);
   $52 = ((($51)) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = (($45) + ($54))|0;
   $56 = $1;
   $57 = ((($56)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $0;
   $60 = ((($59)) + 1284|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 4096;
   $63 = $1;
   $64 = ((($63)) + 32|0);
   $65 = +HEAPF64[$64>>3];
   $66 = (+_note_to_period($55,$58,$62,$65));
   $67 = $1;
   $68 = ((($67)) + 336|0);
   HEAPF64[$68>>3] = $66;
  }
 }
 $69 = $1;
 $70 = ((($69)) + 24|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $1;
 $73 = ((($72)) + 336|0);
 $74 = +HEAPF64[$73>>3];
 $75 = $71 < $74;
 $76 = $75 ? 1 : -1;
 $77 = $1;
 $78 = ((($77)) + 336|0);
 $79 = ((($78)) + 8|0);
 HEAP32[$79>>2] = $76;
 STACKTOP = sp;return;
}
function _mixer_prepare($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $bytelen = 0, $m = 0, $p = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $0;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $s;
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = $m;
 $10 = ((($9)) + 1256|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $8 * $11;
 $13 = $m;
 $14 = ((($13)) + 1248|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $12 * $15;
 $17 = $p;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 $21 = $16 / $20;
 $22 = $21 / 1000.0;
 $23 = (~~(($22)));
 $24 = $s;
 $25 = ((($24)) + 36|0);
 HEAP32[$25>>2] = $23;
 $26 = $s;
 $27 = ((($26)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28<<2;
 $bytelen = $29;
 $30 = $s;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 ^ -1;
 $34 = $33 & 4;
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $38 = $s;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $bytelen;
  _memset(($40|0),0,($41|0))|0;
  STACKTOP = sp;return;
 }
 $36 = $bytelen;
 $37 = $36<<1;
 $bytelen = $37;
 $38 = $s;
 $39 = ((($38)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $bytelen;
 _memset(($40|0),0,($41|0))|0;
 STACKTOP = sp;return;
}
function _mixer_softmixer($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_pos = 0, $idx = 0;
 var $lpe = 0, $lps = 0, $m = 0, $mix_fn = 0, $mix_size = 0, $mixer = 0, $mixers = 0, $mod = 0, $or$cond = 0, $p = 0, $prev_l = 0, $prev_r = 0, $s = 0, $s1 = 0, $samples = 0, $size = 0, $split_noloop = 0, $step = 0, $synth = 0, $vi = 0;
 var $voc = 0, $vol_l = 0, $vol_r = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s1 = sp;
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1496|0);
 $s = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $synth = 1;
 $7 = $s;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 if ((($9|0) == 1)) {
  $mixers = 14608;
 } else if ((($9|0) == 2)) {
  $mixers = 14640;
 } else if ((($9|0) == 0)) {
  $mixers = 14576;
 } else {
  $mixers = 14608;
 }
 $10 = $0;
 _mixer_prepare($10);
 $11 = $0;
 _rampdown($11,-1,0,0);
 $voc = 0;
 while(1) {
  $12 = $voc;
  $13 = $p;
  $14 = ((($13)) + 944|0);
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($12|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $voc;
  $19 = $p;
  $20 = ((($19)) + 944|0);
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + (($18*116)|0)|0);
  $vi = $23;
  $24 = $vi;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)<(0);
  L10: do {
   if (!($26)) {
    $27 = $vi;
    $28 = ((($27)) + 24|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)<(1);
    if ($30) {
     $31 = $0;
     $32 = $voc;
     _virt_resetvoice($31,$32,1);
     break;
    }
    $33 = $vi;
    $34 = ((($33)) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $vi;
    $37 = ((($36)) + 32|0);
    HEAP32[$37>>2] = $35;
    $38 = $s;
    $39 = ((($38)) + 28|0);
    $40 = HEAP32[$39>>2]|0;
    $buf_pos = $40;
    $41 = $vi;
    $42 = ((($41)) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(32768);
    $45 = $vi;
    $46 = ((($45)) + 20|0);
    $47 = HEAP32[$46>>2]|0;
    if ($44) {
     $48 = $47<<7;
     $vol_r = $48;
     $49 = $vi;
     $50 = ((($49)) + 20|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (0 - ($51))|0;
     $53 = $52<<7;
     $vol_l = $53;
    } else {
     $54 = $vi;
     $55 = ((($54)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (128 - ($56))|0;
     $58 = Math_imul($47, $57)|0;
     $vol_r = $58;
     $59 = $vi;
     $60 = ((($59)) + 20|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $vi;
     $63 = ((($62)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (128 + ($64))|0;
     $66 = Math_imul($61, $65)|0;
     $vol_l = $66;
    }
    $67 = $vi;
    $68 = ((($67)) + 40|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 32;
    $71 = ($70|0)!=(0);
    if ($71) {
     $72 = $synth;
     $73 = ($72|0)!=(0);
     if (!($73)) {
      break;
     }
     $74 = $m;
     $75 = ((($74)) + 7584|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($76)) + 24|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $0;
     $80 = $buf_pos;
     $81 = $s;
     $82 = ((($81)) + 36|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $vol_l;
     $85 = $84 >> 7;
     $86 = $vol_r;
     $87 = $86 >> 7;
     $88 = $vi;
     $89 = ((($88)) + 40|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 & 2;
     FUNCTION_TABLE_viiiiii[$78 & 255]($79,$80,$83,$85,$87,$91);
     $synth = 0;
     break;
    }
    $92 = $s;
    $93 = ((($92)) + 48|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)<(0);
    $96 = $95 << 31 >> 31;
    $97 = (_bitshift64Shl(($94|0),($96|0),24)|0);
    $98 = tempRet0;
    $99 = $vi;
    $100 = ((($99)) + 24|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)<(0);
    $103 = $102 << 31 >> 31;
    $104 = (___divdi3(($97|0),($98|0),($101|0),($103|0))|0);
    $105 = tempRet0;
    $step = $104;
    $106 = $step;
    $107 = ($106|0)==(0);
    if (!($107)) {
     $108 = $vi;
     $109 = ((($108)) + 48|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $mod;
     $112 = ((($111)) + 144|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($110|0)<($113|0);
     $115 = $vi;
     $116 = ((($115)) + 48|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $mod;
     if ($114) {
      $119 = ((($118)) + 180|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = (($120) + (($117*52)|0)|0);
      $xxs = $121;
     } else {
      $122 = ((($118)) + 144|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (($117) - ($123))|0;
      $125 = $0;
      $126 = ((($125)) + 9152|0);
      $127 = ((($126)) + 16|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + (($124*52)|0)|0);
      $xxs = $129;
     }
     $130 = $xxs;
     $131 = ((($130)) + 36|0);
     $132 = HEAP32[$131>>2]|0;
     $lps = $132;
     $133 = $xxs;
     $134 = ((($133)) + 40|0);
     $135 = HEAP32[$134>>2]|0;
     $lpe = $135;
     $136 = $p;
     $137 = ((($136)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $138 & 4;
     $140 = ($139|0)!=(0);
     if ($140) {
      $141 = $lps;
      $142 = $141 >> 1;
      $lps = $142;
     }
     $143 = $s;
     $144 = ((($143)) + 36|0);
     $145 = HEAP32[$144>>2]|0;
     $size = $145;
     while(1) {
      $146 = $size;
      $147 = ($146|0)>(0);
      if (!($147)) {
       break L10;
      }
      $split_noloop = 0;
      $148 = $vi;
      $149 = HEAP32[$148>>2]|0;
      $150 = $p;
      $151 = ((($150)) + 620|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = (($152) + (($149*472)|0)|0);
      $154 = ((($153)) + 76|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($155|0)!=(0);
      if ($156) {
       $split_noloop = 1;
      }
      $157 = $vi;
      $158 = ((($157)) + 28|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $vi;
      $161 = ((($160)) + 52|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($159>>>0)>=($162>>>0);
      if ($163) {
       $samples = 0;
      } else {
       $164 = $vi;
       $165 = ((($164)) + 52|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = $vi;
       $168 = ((($167)) + 28|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = (($166) - ($169))|0;
       $171 = (_bitshift64Shl(($170|0),0,16)|0);
       $172 = tempRet0;
       $173 = $vi;
       $174 = ((($173)) + 36|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)<(0);
       $177 = $176 << 31 >> 31;
       $178 = (_i64Subtract(($171|0),($172|0),($175|0),($177|0))|0);
       $179 = tempRet0;
       $180 = $step;
       $181 = ($180|0)<(0);
       $182 = $181 << 31 >> 31;
       $183 = (___divdi3(($178|0),($179|0),($180|0),($182|0))|0);
       $184 = tempRet0;
       $185 = (_i64Add(1,0,($183|0),($184|0))|0);
       $186 = tempRet0;
       $187 = $s1;
       $188 = $187;
       HEAP32[$188>>2] = $185;
       $189 = (($187) + 4)|0;
       $190 = $189;
       HEAP32[$190>>2] = $186;
       $191 = $s1;
       $192 = $191;
       $193 = HEAP32[$192>>2]|0;
       $194 = (($191) + 4)|0;
       $195 = $194;
       $196 = HEAP32[$195>>2]|0;
       $197 = $size;
       $198 = ($197|0)<(0);
       $199 = $198 << 31 >> 31;
       $200 = ($196|0)>($199|0);
       $201 = ($193>>>0)>($197>>>0);
       $202 = ($196|0)==($199|0);
       $203 = $202 & $201;
       $204 = $200 | $203;
       if ($204) {
        $205 = $size;
        $206 = ($205|0)<(0);
        $207 = $206 << 31 >> 31;
        $208 = $s1;
        $209 = $208;
        HEAP32[$209>>2] = $205;
        $210 = (($208) + 4)|0;
        $211 = $210;
        HEAP32[$211>>2] = $207;
       }
       $212 = $s1;
       $213 = $212;
       $214 = HEAP32[$213>>2]|0;
       $215 = (($212) + 4)|0;
       $216 = $215;
       $217 = HEAP32[$216>>2]|0;
       $samples = $214;
      }
      $218 = $vi;
      $219 = ((($218)) + 20|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($220|0)!=(0);
      do {
       if ($221) {
        $222 = $samples;
        $mix_size = $222;
        $223 = $vi;
        $224 = ((($223)) + 40|0);
        $225 = HEAP32[$224>>2]|0;
        $226 = $225 & 7;
        $mixer = $226;
        $227 = $s;
        $228 = ((($227)) + 4|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = $229 ^ -1;
        $231 = $230 & 4;
        $232 = ($231|0)!=(0);
        if ($232) {
         $233 = $mix_size;
         $234 = $233<<1;
         $mix_size = $234;
        }
        $235 = $mix_size;
        $idx = $235;
        $236 = $mix_size;
        $237 = ($236|0)>=(2);
        if ($237) {
         $238 = $idx;
         $239 = (($238) - 2)|0;
         $240 = $buf_pos;
         $241 = (($240) + ($239<<2)|0);
         $242 = HEAP32[$241>>2]|0;
         $prev_r = $242;
         $243 = $idx;
         $244 = (($243) - 1)|0;
         $245 = $buf_pos;
         $246 = (($245) + ($244<<2)|0);
         $247 = HEAP32[$246>>2]|0;
         $prev_l = $247;
        } else {
         $prev_l = 0;
         $prev_r = 0;
        }
        $248 = $vi;
        $249 = ((($248)) + 72|0);
        $250 = ((($249)) + 28|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = ($251|0)>=(254);
        do {
         if ($252) {
          $253 = $vi;
          $254 = ((($253)) + 72|0);
          $255 = ((($254)) + 32|0);
          $256 = HEAP32[$255>>2]|0;
          $257 = ($256|0)==(0);
          if (!($257)) {
           break;
          }
          $258 = $mixer;
          $259 = $258 & -5;
          $mixer = $259;
         }
        } while(0);
        $260 = $mixer;
        $261 = $mixers;
        $262 = (($261) + ($260<<2)|0);
        $263 = HEAP32[$262>>2]|0;
        $mix_fn = $263;
        $264 = $samples;
        $265 = ($264|0)>=(0);
        if ($265) {
         $266 = $vi;
         $267 = ((($266)) + 68|0);
         $268 = HEAP32[$267>>2]|0;
         $269 = ($268|0)!=(0|0);
         if (!($269)) {
          break;
         }
         $270 = $mix_fn;
         $271 = $vi;
         $272 = $buf_pos;
         $273 = $samples;
         $274 = $vol_l;
         $275 = $vol_r;
         $276 = $step;
         FUNCTION_TABLE_viiiiii[$270 & 255]($271,$272,$273,$274,$275,$276);
         $277 = $mix_size;
         $278 = $buf_pos;
         $279 = (($278) + ($277<<2)|0);
         $buf_pos = $279;
         $280 = $mix_size;
         $281 = ($280|0)>=(2);
         if (!($281)) {
          break;
         }
         $282 = $buf_pos;
         $283 = ((($282)) + -8|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = $prev_r;
         $286 = (($284) - ($285))|0;
         $287 = $vi;
         $288 = ((($287)) + 64|0);
         HEAP32[$288>>2] = $286;
         $289 = $buf_pos;
         $290 = ((($289)) + -4|0);
         $291 = HEAP32[$290>>2]|0;
         $292 = $prev_l;
         $293 = (($291) - ($292))|0;
         $294 = $vi;
         $295 = ((($294)) + 60|0);
         HEAP32[$295>>2] = $293;
        }
       }
      } while(0);
      $296 = $step;
      $297 = $samples;
      $298 = Math_imul($296, $297)|0;
      $299 = $vi;
      $300 = ((($299)) + 36|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = (($301) + ($298))|0;
      HEAP32[$300>>2] = $302;
      $303 = $vi;
      $304 = ((($303)) + 36|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = $305 >> 16;
      $307 = $vi;
      $308 = ((($307)) + 28|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = (($309) + ($306))|0;
      HEAP32[$308>>2] = $310;
      $311 = $vi;
      $312 = ((($311)) + 36|0);
      $313 = HEAP32[$312>>2]|0;
      $314 = $313 & 65535;
      HEAP32[$312>>2] = $314;
      $315 = $samples;
      $316 = $size;
      $317 = (($316) - ($315))|0;
      $size = $317;
      $318 = $size;
      $319 = ($318|0)<=(0);
      if ($319) {
       continue;
      }
      $320 = $xxs;
      $321 = ((($320)) + 44|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = $322 ^ -1;
      $324 = $323 & 2;
      $325 = ($324|0)!=(0);
      $326 = $split_noloop;
      $327 = ($326|0)!=(0);
      $or$cond = $325 | $327;
      if ($or$cond) {
       $328 = $0;
       $329 = $voc;
       $330 = $buf_pos;
       $331 = $size;
       _anticlick($328,$329,0,0,$330,$331);
       $332 = $0;
       $333 = $voc;
       _set_sample_end($332,$333,1);
       $size = 0;
       continue;
      }
      $334 = $lpe;
      $335 = $lps;
      $336 = (($334) - ($335))|0;
      $337 = $vi;
      $338 = ((($337)) + 28|0);
      $339 = HEAP32[$338>>2]|0;
      $340 = (($339) - ($336))|0;
      HEAP32[$338>>2] = $340;
      $341 = $lpe;
      $342 = $vi;
      $343 = ((($342)) + 52|0);
      HEAP32[$343>>2] = $341;
      $344 = $vi;
      $345 = ((($344)) + 112|0);
      HEAP32[$345>>2] = 1;
      $346 = $xxs;
      $347 = ((($346)) + 44|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = $348 & 4;
      $350 = ($349|0)!=(0);
      if (!($350)) {
       continue;
      }
      $351 = $lpe;
      $352 = $lps;
      $353 = (($351) - ($352))|0;
      $354 = $vi;
      $355 = ((($354)) + 52|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = (($356) + ($353))|0;
      HEAP32[$355>>2] = $357;
      $358 = $lpe;
      $359 = $lps;
      $360 = (($358) - ($359))|0;
      $361 = $vi;
      $362 = ((($361)) + 28|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = (($363) - ($360))|0;
      HEAP32[$362>>2] = $364;
     }
    }
   }
  } while(0);
  $365 = $voc;
  $366 = (($365) + 1)|0;
  $voc = $366;
 }
 $367 = $s;
 $368 = ((($367)) + 36|0);
 $369 = HEAP32[$368>>2]|0;
 $size = $369;
 $370 = $s;
 $371 = ((($370)) + 4|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = $372 ^ -1;
 $374 = $373 & 4;
 $375 = ($374|0)!=(0);
 if ($375) {
  $376 = $size;
  $377 = $376<<1;
  $size = $377;
 }
 $378 = $size;
 $379 = ($378|0)>(24585);
 if ($379) {
  $size = 24585;
 }
 $380 = $s;
 $381 = ((($380)) + 4|0);
 $382 = HEAP32[$381>>2]|0;
 $383 = $382 & 1;
 $384 = ($383|0)!=(0);
 $385 = $s;
 $386 = ((($385)) + 24|0);
 $387 = HEAP32[$386>>2]|0;
 if ($384) {
  $388 = $s;
  $389 = ((($388)) + 28|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = $size;
  $392 = $s;
  $393 = ((($392)) + 8|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = $s;
  $396 = ((($395)) + 4|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = $397 & 2;
  $399 = ($398|0)!=(0);
  $400 = $399 ? 128 : 0;
  _downmix_int_8bit($387,$390,$391,$394,$400);
  $414 = $s;
  $415 = ((($414)) + 44|0);
  HEAP32[$415>>2] = 0;
  $416 = $s;
  $417 = ((($416)) + 40|0);
  HEAP32[$417>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $401 = $s;
  $402 = ((($401)) + 28|0);
  $403 = HEAP32[$402>>2]|0;
  $404 = $size;
  $405 = $s;
  $406 = ((($405)) + 8|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = $s;
  $409 = ((($408)) + 4|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = $410 & 2;
  $412 = ($411|0)!=(0);
  $413 = $412 ? 32768 : 0;
  _downmix_int_16bit($387,$403,$404,$407,$413);
  $414 = $s;
  $415 = ((($414)) + 44|0);
  HEAP32[$415>>2] = 0;
  $416 = $s;
  $417 = ((($416)) + 40|0);
  HEAP32[$417>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _mixer_voicepos($ctx,$voc,$pos,$frac) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $pos = $pos|0;
 $frac = $frac|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $lps = 0, $m = 0, $p = 0, $vi = 0, $xxs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $pos;
 $3 = $frac;
 $4 = $0;
 $p = $4;
 $5 = $0;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $1;
 $8 = $p;
 $9 = ((($8)) + 944|0);
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($7*116)|0)|0);
 $vi = $12;
 $13 = $vi;
 $14 = ((($13)) + 48|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $m;
 $17 = ((($16)) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)<($18|0);
 $20 = $vi;
 $21 = ((($20)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $m;
 if ($19) {
  $24 = ((($23)) + 180|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + (($22*52)|0)|0);
  $xxs = $26;
 } else {
  $27 = ((($23)) + 144|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($22) - ($28))|0;
  $30 = $0;
  $31 = ((($30)) + 9152|0);
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + (($29*52)|0)|0);
  $xxs = $34;
 }
 $35 = $xxs;
 $36 = ((($35)) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 32768;
 $39 = ($38|0)!=(0);
 if ($39) {
  STACKTOP = sp;return;
 }
 $40 = $xxs;
 $41 = ((($40)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 2;
 $44 = ($43|0)!=(0);
 $45 = $xxs;
 do {
  if ($44) {
   $46 = ((($45)) + 44|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $47 & 16;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $vi;
    $51 = ((($50)) + 112|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if ($53) {
     $54 = $xxs;
     $55 = ((($54)) + 32|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $vi;
     $58 = ((($57)) + 52|0);
     HEAP32[$58>>2] = $56;
     break;
    }
   }
   $59 = $xxs;
   $60 = ((($59)) + 40|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $vi;
   $63 = ((($62)) + 52|0);
   HEAP32[$63>>2] = $61;
  } else {
   $64 = ((($45)) + 32|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $vi;
   $67 = ((($66)) + 52|0);
   HEAP32[$67>>2] = $65;
  }
 } while(0);
 $68 = $2;
 $69 = $vi;
 $70 = ((($69)) + 52|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($68|0)>=($71|0);
 do {
  if ($72) {
   $73 = $xxs;
   $74 = ((($73)) + 44|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 & 2;
   $77 = ($76|0)!=(0);
   $78 = $xxs;
   if ($77) {
    $79 = ((($78)) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $2 = $80;
    break;
   } else {
    $81 = ((($78)) + 32|0);
    $82 = HEAP32[$81>>2]|0;
    $2 = $82;
    break;
   }
  }
 } while(0);
 $83 = $2;
 $84 = $vi;
 $85 = ((($84)) + 28|0);
 HEAP32[$85>>2] = $83;
 $86 = $3;
 $87 = $vi;
 $88 = ((($87)) + 36|0);
 HEAP32[$88>>2] = $86;
 $89 = $xxs;
 $90 = ((($89)) + 36|0);
 $91 = HEAP32[$90>>2]|0;
 $lps = $91;
 $92 = $p;
 $93 = ((($92)) + 28|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 4;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $lps;
  $98 = $97 >> 1;
  $lps = $98;
 }
 $99 = $xxs;
 $100 = ((($99)) + 44|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = $101 & 4;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = $xxs;
  $105 = ((($104)) + 40|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $lps;
  $108 = (($106) - ($107))|0;
  $109 = $vi;
  $110 = ((($109)) + 52|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108))|0;
  HEAP32[$110>>2] = $112;
 }
 $113 = $vi;
 $114 = ((($113)) + 108|0);
 HEAP32[$114>>2] = 16;
 STACKTOP = sp;return;
}
function _mixer_getvoicepos($ctx,$voc) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $voc;
 $3 = $1;
 $p = $3;
 $4 = $2;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $1;
 $11 = $vi;
 $12 = ((($11)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_get_sample($10,$13)|0);
 $xxs = $14;
 $15 = $xxs;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 32768;
 $19 = ($18|0)!=(0);
 if ($19) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $20 = $xxs;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 4;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $vi;
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $xxs;
  $29 = ((($28)) + 40|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27>>>0)>=($30>>>0);
  if ($31) {
   $32 = $xxs;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $vi;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $xxs;
   $39 = ((($38)) + 40|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($37) - ($40))|0;
   $42 = (($34) - ($41))|0;
   $43 = (($42) - 1)|0;
   $0 = $43;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  }
 }
 $44 = $vi;
 $45 = ((($44)) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _mixer_setpatch($ctx,$voc,$smp) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $smp = $smp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $m = 0, $p = 0, $s = 0, $vi = 0, $xxs = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $smp;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $0;
 $7 = ((($6)) + 1496|0);
 $s = $7;
 $8 = $1;
 $9 = $p;
 $10 = ((($9)) + 944|0);
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + (($8*116)|0)|0);
 $vi = $13;
 $14 = $0;
 $15 = $2;
 $16 = (_get_sample($14,$15)|0);
 $xxs = $16;
 $17 = $2;
 $18 = $vi;
 $19 = ((($18)) + 48|0);
 HEAP32[$19>>2] = $17;
 $20 = $vi;
 $21 = ((($20)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = $vi;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = 0;
 $24 = $vi;
 $25 = ((($24)) + 112|0);
 HEAP32[$25>>2] = 0;
 $26 = $vi;
 $27 = ((($26)) + 40|0);
 HEAP32[$27>>2] = 0;
 $28 = $s;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 ^ -1;
 $32 = $31 & 4;
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $vi;
  $35 = ((($34)) + 40|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 | 2;
  HEAP32[$35>>2] = $37;
 }
 $38 = $0;
 $39 = $1;
 _set_sample_end($38,$39,0);
 $40 = $xxs;
 $41 = ((($40)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 & 32768;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $vi;
  $46 = ((($45)) + 40|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 | 32;
  HEAP32[$46>>2] = $48;
  $49 = $m;
  $50 = ((($49)) + 7584|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $0;
  $55 = $1;
  $56 = $xxs;
  $57 = ((($56)) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_viii[$53 & 255]($54,$55,$58);
  STACKTOP = sp;return;
 }
 $59 = $0;
 $60 = $1;
 _mixer_setvol($59,$60,0);
 $61 = $xxs;
 $62 = ((($61)) + 48|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $vi;
 $65 = ((($64)) + 68|0);
 HEAP32[$65>>2] = $63;
 $66 = $vi;
 $67 = ((($66)) + 40|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 | 16;
 HEAP32[$67>>2] = $69;
 $70 = $m;
 $71 = ((($70)) + 1284|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 & 65536;
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $s;
  $76 = ((($75)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 & 1;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $vi;
   $81 = ((($80)) + 40|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 | 4;
   HEAP32[$81>>2] = $83;
  }
 }
 $84 = $xxs;
 $85 = ((($84)) + 44|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 & 1;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $vi;
  $90 = ((($89)) + 40|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $91 | 1;
  HEAP32[$90>>2] = $92;
 }
 $93 = $0;
 $94 = $1;
 _mixer_voicepos($93,$94,0,0);
 STACKTOP = sp;return;
}
function _mixer_setvol($ctx,$voc,$vol) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $m = 0, $p = 0, $s = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $vol;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1496|0);
 $s = $5;
 $6 = $1;
 $7 = $p;
 $8 = ((($7)) + 944|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($6*116)|0)|0);
 $vi = $11;
 $12 = $0;
 $13 = ((($12)) + 1552|0);
 $m = $13;
 $14 = $s;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $18 = $0;
  $19 = $1;
  $20 = $2;
  $21 = $vi;
  $22 = ((($21)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  _anticlick($18,$19,$20,$23,0,0);
 }
 $24 = $2;
 $25 = $vi;
 $26 = ((($25)) + 20|0);
 HEAP32[$26>>2] = $24;
 $27 = $vi;
 $28 = ((($27)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 32;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $m;
 $33 = ((($32)) + 7584|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $0;
 $38 = $1;
 $39 = $2;
 $40 = $39 >> 4;
 FUNCTION_TABLE_viii[$36 & 255]($37,$38,$40);
 STACKTOP = sp;return;
}
function _mixer_setnote($ctx,$voc,$note) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $note = $note|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $p = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $note;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $2;
 $11 = ($10|0)>(149);
 if ($11) {
  $2 = 149;
 }
 $12 = $2;
 $13 = $vi;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = (_note_to_period_mix($15,0)|0);
 $17 = $vi;
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = $16;
 $19 = $vi;
 $20 = ((($19)) + 108|0);
 HEAP32[$20>>2] = 16;
 STACKTOP = sp;return;
}
function _mixer_setbend($ctx,$voc,$bend) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $bend = $bend|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $p = 0, $vi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $bend;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $0;
 $11 = ((($10)) + 1552|0);
 $m = $11;
 $12 = $vi;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = (_note_to_period_mix($14,$15)|0);
 $17 = $vi;
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = $16;
 $19 = $vi;
 $20 = ((($19)) + 40|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 32;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $m;
 $25 = ((($24)) + 7584|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = $1;
 $31 = $vi;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = $34 >> 7;
 FUNCTION_TABLE_viiii[$28 & 255]($29,$30,$33,$35);
 STACKTOP = sp;return;
}
function _mixer_seteffect($ctx,$voc,$type,$val) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $type = $type|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $type;
 $3 = $val;
 $4 = $0;
 $p = $4;
 $5 = $1;
 $6 = $p;
 $7 = ((($6)) + 944|0);
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($5*116)|0)|0);
 $vi = $10;
 $11 = $2;
 switch ($11|0) {
 case 178:  {
  $28 = $3;
  $29 = $vi;
  $30 = ((($29)) + 72|0);
  $31 = ((($30)) + 24|0);
  HEAP32[$31>>2] = $28;
  STACKTOP = sp;return;
  break;
 }
 case 176:  {
  $20 = $3;
  $21 = $vi;
  $22 = ((($21)) + 72|0);
  $23 = ((($22)) + 16|0);
  HEAP32[$23>>2] = $20;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $16 = $3;
  $17 = $vi;
  $18 = ((($17)) + 72|0);
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = $16;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $12 = $3;
  $13 = $vi;
  $14 = ((($13)) + 72|0);
  $15 = ((($14)) + 28|0);
  HEAP32[$15>>2] = $12;
  STACKTOP = sp;return;
  break;
 }
 case 177:  {
  $24 = $3;
  $25 = $vi;
  $26 = ((($25)) + 72|0);
  $27 = ((($26)) + 20|0);
  HEAP32[$27>>2] = $24;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _mixer_setpan($ctx,$voc,$pan) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $pan = $pan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $pan;
 $3 = $0;
 $p = $3;
 $4 = $1;
 $5 = $p;
 $6 = ((($5)) + 944|0);
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($4*116)|0)|0);
 $vi = $9;
 $10 = $2;
 $11 = $vi;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _mixer_numvoices($ctx,$num) {
 $ctx = $ctx|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $num;
 $3 = $1;
 $4 = ((($3)) + 1496|0);
 $s = $4;
 $5 = $2;
 $6 = $s;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)>($8|0);
 $10 = $2;
 $11 = ($10|0)<(0);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $12 = $s;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $0 = $14;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $15 = $2;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _mixer_on($ctx,$rate,$format,$c4rate) {
 $ctx = $ctx|0;
 $rate = $rate|0;
 $format = $format|0;
 $c4rate = $c4rate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $rate;
 $3 = $format;
 $4 = $c4rate;
 $5 = $1;
 $6 = ((($5)) + 1496|0);
 $s = $6;
 $7 = (_calloc(2,24585)|0);
 $8 = $s;
 $9 = ((($8)) + 24|0);
 HEAP32[$9>>2] = $7;
 $10 = $s;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 do {
  if (!($13)) {
   $14 = (_calloc(4,24585)|0);
   $15 = $s;
   $16 = ((($15)) + 28|0);
   HEAP32[$16>>2] = $14;
   $17 = $s;
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $47 = $s;
    $48 = ((($47)) + 24|0);
    $49 = HEAP32[$48>>2]|0;
    _free($49);
    break;
   }
   $21 = $2;
   $22 = $s;
   HEAP32[$22>>2] = $21;
   $23 = $3;
   $24 = $s;
   $25 = ((($24)) + 4|0);
   HEAP32[$25>>2] = $23;
   $26 = $s;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = 1;
   $28 = $s;
   $29 = ((($28)) + 12|0);
   HEAP32[$29>>2] = 70;
   $30 = $4;
   $31 = ($30*6864)|0;
   $32 = $s;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31|0) / ($33|0))&-1;
   $35 = $s;
   $36 = ((($35)) + 48|0);
   HEAP32[$36>>2] = $34;
   $37 = $s;
   $38 = ((($37)) + 16|0);
   HEAP32[$38>>2] = 1;
   $39 = $s;
   $40 = ((($39)) + 20|0);
   HEAP32[$40>>2] = 1;
   $41 = $s;
   $42 = ((($41)) + 32|0);
   HEAP32[$42>>2] = 128;
   $43 = $s;
   $44 = ((($43)) + 44|0);
   HEAP32[$44>>2] = 0;
   $45 = $s;
   $46 = ((($45)) + 40|0);
   HEAP32[$46>>2] = 0;
   $0 = 0;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 } while(0);
 $0 = -1;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _mixer_off($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1496|0);
 $s = $2;
 $3 = $s;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $s;
 $7 = ((($6)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $s;
 $10 = ((($9)) + 28|0);
 HEAP32[$10>>2] = 0;
 $11 = $s;
 $12 = ((($11)) + 24|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _rampdown($ctx,$voc,$buf,$count) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $buf = $buf|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dec_l = 0, $dec_r = 0, $or$cond = 0, $or$cond3 = 0, $p = 0, $s = 0, $smp_l = 0, $smp_r = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $buf;
 $3 = $count;
 $4 = $0;
 $p = $4;
 $5 = $0;
 $6 = ((($5)) + 1496|0);
 $s = $6;
 $7 = $1;
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = $s;
  $10 = ((($9)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $smp_r = $11;
  $12 = $s;
  $13 = ((($12)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $smp_l = $14;
 } else {
  $15 = $1;
  $16 = $p;
  $17 = ((($16)) + 944|0);
  $18 = ((($17)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + (($15*116)|0)|0);
  $vi = $20;
  $21 = $vi;
  $22 = ((($21)) + 64|0);
  $23 = HEAP32[$22>>2]|0;
  $smp_r = $23;
  $24 = $vi;
  $25 = ((($24)) + 60|0);
  $26 = HEAP32[$25>>2]|0;
  $smp_l = $26;
  $27 = $vi;
  $28 = ((($27)) + 60|0);
  HEAP32[$28>>2] = 0;
  $29 = $vi;
  $30 = ((($29)) + 64|0);
  HEAP32[$30>>2] = 0;
 }
 $31 = $smp_l;
 $32 = ($31|0)==(0);
 $33 = $smp_r;
 $34 = ($33|0)==(0);
 $or$cond = $32 & $34;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $35 = $2;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $37 = $s;
  $38 = ((($37)) + 28|0);
  $39 = HEAP32[$38>>2]|0;
  $2 = $39;
  $3 = 16;
 }
 $40 = $3;
 $41 = ($40|0)<=(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = $smp_r;
 $43 = $3;
 $44 = (($42|0) / ($43|0))&-1;
 $dec_r = $44;
 $45 = $smp_l;
 $46 = $3;
 $47 = (($45|0) / ($46|0))&-1;
 $dec_l = $47;
 while(1) {
  $48 = $smp_r;
  $49 = ($48|0)!=(0);
  $50 = $smp_l;
  $51 = ($50|0)!=(0);
  $or$cond3 = $49 | $51;
  if (!($or$cond3)) {
   label = 28;
   break;
  }
  $52 = $3;
  $53 = (($52) + -1)|0;
  $3 = $53;
  $54 = ($52|0)!=(0);
  if (!($54)) {
   label = 28;
   break;
  }
  $55 = $s;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 ^ -1;
  $59 = $58 & 4;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $dec_r;
   $62 = ($61|0)>(0);
   $63 = $smp_r;
   $64 = $dec_r;
   do {
    if ($62) {
     $65 = ($63|0)>($64|0);
     if ($65) {
      $66 = $dec_r;
      $67 = $smp_r;
      $68 = (($67) - ($66))|0;
      $smp_r = $68;
      $69 = $smp_r;
      $70 = $2;
      $71 = HEAP32[$70>>2]|0;
      $72 = (($71) + ($69))|0;
      HEAP32[$70>>2] = $72;
      break;
     } else {
      $smp_r = 0;
      break;
     }
    } else {
     $73 = ($63|0)<($64|0);
     if ($73) {
      $74 = $dec_r;
      $75 = $smp_r;
      $76 = (($75) - ($74))|0;
      $smp_r = $76;
      $77 = $smp_r;
      $78 = $2;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + ($77))|0;
      HEAP32[$78>>2] = $80;
      break;
     } else {
      $smp_r = 0;
      break;
     }
    }
   } while(0);
   $81 = $2;
   $82 = ((($81)) + 4|0);
   $2 = $82;
  }
  $83 = $dec_l;
  $84 = ($83|0)>(0);
  $85 = $smp_l;
  $86 = $dec_l;
  do {
   if ($84) {
    $87 = ($85|0)>($86|0);
    if ($87) {
     $88 = $dec_l;
     $89 = $smp_l;
     $90 = (($89) - ($88))|0;
     $smp_l = $90;
     $91 = $smp_l;
     $92 = $2;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + ($91))|0;
     HEAP32[$92>>2] = $94;
     break;
    } else {
     $smp_l = 0;
     break;
    }
   } else {
    $95 = ($85|0)<($86|0);
    if ($95) {
     $96 = $dec_l;
     $97 = $smp_l;
     $98 = (($97) - ($96))|0;
     $smp_l = $98;
     $99 = $smp_l;
     $100 = $2;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + ($99))|0;
     HEAP32[$100>>2] = $102;
     break;
    } else {
     $smp_l = 0;
     break;
    }
   }
  } while(0);
  $103 = $2;
  $104 = ((($103)) + 4|0);
  $2 = $104;
 }
 if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
}
function _anticlick($ctx,$voc,$vol,$pan,$buf,$count) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $vol = $vol|0;
 $pan = $pan|0;
 $buf = $buf|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $newvol = 0, $oldvol = 0, $p = 0, $pan0 = 0, $s = 0, $vi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $vol;
 $3 = $pan;
 $4 = $buf;
 $5 = $count;
 $6 = $0;
 $p = $6;
 $7 = $0;
 $8 = ((($7)) + 1496|0);
 $s = $8;
 $9 = $1;
 $10 = $p;
 $11 = ((($10)) + 944|0);
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($9*116)|0)|0);
 $vi = $14;
 $15 = $vi;
 $16 = ((($15)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $pan0 = $17;
 $18 = $pan0;
 $19 = ($18|0)<(-127);
 $$ = $19 ? -127 : $17;
 $pan0 = $$;
 $20 = $vi;
 $21 = ((($20)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $vi;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $pan0;
  $28 = (128 - ($27))|0;
  $29 = Math_imul($26, $28)|0;
  $oldvol = $29;
  $30 = $2;
  $31 = $3;
  $32 = (128 - ($31))|0;
  $33 = Math_imul($30, $32)|0;
  $newvol = $33;
  $34 = $vi;
  $35 = ((($34)) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)<(0);
  $38 = $37 << 31 >> 31;
  $39 = $newvol;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = (___muldi3(($36|0),($38|0),($39|0),($41|0))|0);
  $43 = tempRet0;
  $44 = $oldvol;
  $45 = ($44|0)<(0);
  $46 = $45 << 31 >> 31;
  $47 = (___divdi3(($42|0),($43|0),($44|0),($46|0))|0);
  $48 = tempRet0;
  $49 = $vi;
  $50 = ((($49)) + 64|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)<(0);
  $53 = $52 << 31 >> 31;
  $54 = (_i64Subtract(($51|0),($53|0),($47|0),($48|0))|0);
  $55 = tempRet0;
  HEAP32[$50>>2] = $54;
  $56 = $vi;
  $57 = ((($56)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $pan0;
  $60 = (128 + ($59))|0;
  $61 = Math_imul($58, $60)|0;
  $oldvol = $61;
  $62 = $2;
  $63 = $3;
  $64 = (128 + ($63))|0;
  $65 = Math_imul($62, $64)|0;
  $newvol = $65;
  $66 = $vi;
  $67 = ((($66)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)<(0);
  $70 = $69 << 31 >> 31;
  $71 = $newvol;
  $72 = ($71|0)<(0);
  $73 = $72 << 31 >> 31;
  $74 = (___muldi3(($68|0),($70|0),($71|0),($73|0))|0);
  $75 = tempRet0;
  $76 = $oldvol;
  $77 = ($76|0)<(0);
  $78 = $77 << 31 >> 31;
  $79 = (___divdi3(($74|0),($75|0),($76|0),($78|0))|0);
  $80 = tempRet0;
  $81 = $vi;
  $82 = ((($81)) + 60|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)<(0);
  $85 = $84 << 31 >> 31;
  $86 = (_i64Subtract(($83|0),($85|0),($79|0),($80|0))|0);
  $87 = tempRet0;
  HEAP32[$82>>2] = $86;
 }
 $88 = $4;
 $89 = ($88|0)!=(0|0);
 if ($89) {
  $108 = $0;
  $109 = $1;
  $110 = $4;
  $111 = $5;
  _rampdown($108,$109,$110,$111);
  STACKTOP = sp;return;
 } else {
  $90 = $vi;
  $91 = ((($90)) + 64|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $s;
  $94 = ((($93)) + 40|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + ($92))|0;
  HEAP32[$94>>2] = $96;
  $97 = $vi;
  $98 = ((($97)) + 60|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $s;
  $101 = ((($100)) + 44|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + ($99))|0;
  HEAP32[$101>>2] = $103;
  $104 = $vi;
  $105 = ((($104)) + 60|0);
  HEAP32[$105>>2] = 0;
  $106 = $vi;
  $107 = ((($106)) + 64|0);
  HEAP32[$107>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _set_sample_end($ctx,$voc,$end) {
 $ctx = $ctx|0;
 $voc = $voc|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $p = 0;
 var $vi = 0, $xc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $voc;
 $2 = $end;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = $p;
 $8 = ((($7)) + 944|0);
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + (($6*116)|0)|0);
 $vi = $11;
 $12 = $1;
 $13 = $p;
 $14 = ((($13)) + 944|0);
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($12>>>0)>=($16>>>0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $vi;
 $19 = HEAP32[$18>>2]|0;
 $20 = $p;
 $21 = ((($20)) + 620|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + (($19*472)|0)|0);
 $xc = $23;
 $24 = $2;
 $25 = ($24|0)!=(0);
 $26 = $xc;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 if (!($25)) {
  $37 = $28 & -33;
  HEAP32[$27>>2] = $37;
  STACKTOP = sp;return;
 }
 $29 = $28 | 32;
 HEAP32[$27>>2] = $29;
 $30 = $m;
 $31 = ((($30)) + 1284|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 1073741824;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = $1;
 _virt_resetvoice($35,$36,0);
 STACKTOP = sp;return;
}
function _downmix_int_8bit($dest,$src,$num,$amp,$offs) {
 $dest = $dest|0;
 $src = $src|0;
 $num = $num|0;
 $amp = $amp|0;
 $offs = $offs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift = 0, $smp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $src;
 $2 = $num;
 $3 = $amp;
 $4 = $offs;
 $5 = $3;
 $6 = (20 - ($5))|0;
 $shift = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $shift;
  $13 = $11 >> $12;
  $smp = $13;
  $14 = $smp;
  $15 = ($14|0)>(127);
  do {
   if ($15) {
    $16 = $0;
    HEAP8[$16>>0] = 127;
   } else {
    $17 = $smp;
    $18 = ($17|0)<(-128);
    if ($18) {
     $19 = $0;
     HEAP8[$19>>0] = -128;
     break;
    } else {
     $20 = $smp;
     $21 = $20&255;
     $22 = $0;
     HEAP8[$22>>0] = $21;
     break;
    }
   }
  } while(0);
  $23 = $4;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $4;
   $26 = $0;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = (($28) + ($25))|0;
   $30 = $29&255;
   HEAP8[$26>>0] = $30;
  }
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $1 = $32;
  $33 = $0;
  $34 = ((($33)) + 1|0);
  $0 = $34;
 }
 STACKTOP = sp;return;
}
function _downmix_int_16bit($dest,$src,$num,$amp,$offs) {
 $dest = $dest|0;
 $src = $src|0;
 $num = $num|0;
 $amp = $amp|0;
 $offs = $offs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift = 0, $smp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dest;
 $1 = $src;
 $2 = $num;
 $3 = $amp;
 $4 = $offs;
 $5 = $3;
 $6 = (12 - ($5))|0;
 $shift = $6;
 while(1) {
  $7 = $2;
  $8 = (($7) + -1)|0;
  $2 = $8;
  $9 = ($7|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = $shift;
  $13 = $11 >> $12;
  $smp = $13;
  $14 = $smp;
  $15 = ($14|0)>(32767);
  do {
   if ($15) {
    $16 = $0;
    HEAP16[$16>>1] = 32767;
   } else {
    $17 = $smp;
    $18 = ($17|0)<(-32768);
    if ($18) {
     $19 = $0;
     HEAP16[$19>>1] = -32768;
     break;
    } else {
     $20 = $smp;
     $21 = $20&65535;
     $22 = $0;
     HEAP16[$22>>1] = $21;
     break;
    }
   }
  } while(0);
  $23 = $4;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $4;
   $26 = $0;
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (($28) + ($25))|0;
   $30 = $29&65535;
   HEAP16[$26>>1] = $30;
  }
  $31 = $1;
  $32 = ((($31)) + 4|0);
  $1 = $32;
  $33 = $0;
  $34 = ((($33)) + 2|0);
  $0 = $34;
 }
 STACKTOP = sp;return;
}
function _synth_init($ctx,$freq) {
 $ctx = $ctx|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $freq;
 STACKTOP = sp;return 0;
}
function _synth_deinit($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 STACKTOP = sp;return 0;
}
function _synth_reset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 STACKTOP = sp;return 0;
}
function _smix_stereo_8bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $a = 0, $frac = 0, $pos = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_l1 = $22;
  $23 = $pos;
  $24 = (($23) + 1)|0;
  $25 = $sptr;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = $smp_l1;
  $30 = (($28) - ($29))|0;
  $smp_dt = $30;
  $31 = $smp_l1;
  $32 = $frac;
  $33 = $32 >> 1;
  $34 = $smp_dt;
  $35 = Math_imul($33, $34)|0;
  $36 = $35 >> 15;
  $37 = (($31) + ($36))|0;
  $smp_in = $37;
  $38 = $0;
  $39 = ((($38)) + 108|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0);
  if ($41) {
   $42 = $0;
   $43 = ((($42)) + 108|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (16 - ($44))|0;
   $a = $45;
   $46 = $smp_in;
   $47 = $4;
   $48 = Math_imul($46, $47)|0;
   $49 = $a;
   $50 = Math_imul($48, $49)|0;
   $51 = $50 >> 4;
   $52 = $1;
   $53 = ((($52)) + 4|0);
   $1 = $53;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($51))|0;
   HEAP32[$52>>2] = $55;
   $56 = $smp_in;
   $57 = $3;
   $58 = Math_imul($56, $57)|0;
   $59 = $a;
   $60 = Math_imul($58, $59)|0;
   $61 = $60 >> 4;
   $62 = $1;
   $63 = ((($62)) + 4|0);
   $1 = $63;
   $64 = HEAP32[$62>>2]|0;
   $65 = (($64) + ($61))|0;
   HEAP32[$62>>2] = $65;
   $66 = $0;
   $67 = ((($66)) + 108|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + -1)|0;
   HEAP32[$67>>2] = $69;
  } else {
   $70 = $smp_in;
   $71 = $4;
   $72 = Math_imul($70, $71)|0;
   $73 = $1;
   $74 = ((($73)) + 4|0);
   $1 = $74;
   $75 = HEAP32[$73>>2]|0;
   $76 = (($75) + ($72))|0;
   HEAP32[$73>>2] = $76;
   $77 = $smp_in;
   $78 = $3;
   $79 = Math_imul($77, $78)|0;
   $80 = $1;
   $81 = ((($80)) + 4|0);
   $1 = $81;
   $82 = HEAP32[$80>>2]|0;
   $83 = (($82) + ($79))|0;
   HEAP32[$80>>2] = $83;
  }
  $84 = $5;
  $85 = $frac;
  $86 = (($85) + ($84))|0;
  $frac = $86;
  $87 = $frac;
  $88 = $87 >> 16;
  $89 = $pos;
  $90 = (($89) + ($88))|0;
  $pos = $90;
  $91 = $frac;
  $92 = $91 & 65535;
  $frac = $92;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $a = 0, $frac = 0, $pos = 0;
 var $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 $17 = $4;
 $18 = $17 >> 8;
 $4 = $18;
 while(1) {
  $19 = $2;
  $20 = (($19) + -1)|0;
  $2 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $pos;
  $23 = $sptr;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $smp_l1 = $26;
  $27 = $pos;
  $28 = (($27) + 1)|0;
  $29 = $sptr;
  $30 = (($29) + ($28<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 << 16 >> 16;
  $33 = $smp_l1;
  $34 = (($32) - ($33))|0;
  $smp_dt = $34;
  $35 = $smp_l1;
  $36 = $frac;
  $37 = $36 >> 1;
  $38 = $smp_dt;
  $39 = Math_imul($37, $38)|0;
  $40 = $39 >> 15;
  $41 = (($35) + ($40))|0;
  $smp_in = $41;
  $42 = $0;
  $43 = ((($42)) + 108|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $0;
   $47 = ((($46)) + 108|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (16 - ($48))|0;
   $a = $49;
   $50 = $smp_in;
   $51 = $4;
   $52 = Math_imul($50, $51)|0;
   $53 = $a;
   $54 = Math_imul($52, $53)|0;
   $55 = $54 >> 4;
   $56 = $1;
   $57 = ((($56)) + 4|0);
   $1 = $57;
   $58 = HEAP32[$56>>2]|0;
   $59 = (($58) + ($55))|0;
   HEAP32[$56>>2] = $59;
   $60 = $smp_in;
   $61 = $3;
   $62 = Math_imul($60, $61)|0;
   $63 = $a;
   $64 = Math_imul($62, $63)|0;
   $65 = $64 >> 4;
   $66 = $1;
   $67 = ((($66)) + 4|0);
   $1 = $67;
   $68 = HEAP32[$66>>2]|0;
   $69 = (($68) + ($65))|0;
   HEAP32[$66>>2] = $69;
   $70 = $0;
   $71 = ((($70)) + 108|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + -1)|0;
   HEAP32[$71>>2] = $73;
  } else {
   $74 = $smp_in;
   $75 = $4;
   $76 = Math_imul($74, $75)|0;
   $77 = $1;
   $78 = ((($77)) + 4|0);
   $1 = $78;
   $79 = HEAP32[$77>>2]|0;
   $80 = (($79) + ($76))|0;
   HEAP32[$77>>2] = $80;
   $81 = $smp_in;
   $82 = $3;
   $83 = Math_imul($81, $82)|0;
   $84 = $1;
   $85 = ((($84)) + 4|0);
   $1 = $85;
   $86 = HEAP32[$84>>2]|0;
   $87 = (($86) + ($83))|0;
   HEAP32[$84>>2] = $87;
  }
  $88 = $5;
  $89 = $frac;
  $90 = (($89) + ($88))|0;
  $frac = $90;
  $91 = $frac;
  $92 = $91 >> 16;
  $93 = $pos;
  $94 = (($93) + ($92))|0;
  $pos = $94;
  $95 = $frac;
  $96 = $95 & 65535;
  $frac = $96;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_in = $22;
  $23 = $smp_in;
  $24 = $4;
  $25 = Math_imul($23, $24)|0;
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $1 = $27;
  $28 = HEAP32[$26>>2]|0;
  $29 = (($28) + ($25))|0;
  HEAP32[$26>>2] = $29;
  $30 = $smp_in;
  $31 = $3;
  $32 = Math_imul($30, $31)|0;
  $33 = $1;
  $34 = ((($33)) + 4|0);
  $1 = $34;
  $35 = HEAP32[$33>>2]|0;
  $36 = (($35) + ($32))|0;
  HEAP32[$33>>2] = $36;
  $37 = $5;
  $38 = $frac;
  $39 = (($38) + ($37))|0;
  $frac = $39;
  $40 = $frac;
  $41 = $40 >> 16;
  $42 = $pos;
  $43 = (($42) + ($41))|0;
  $pos = $43;
  $44 = $frac;
  $45 = $44 & 65535;
  $frac = $45;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 $17 = $4;
 $18 = $17 >> 8;
 $4 = $18;
 while(1) {
  $19 = $2;
  $20 = (($19) + -1)|0;
  $2 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $pos;
  $23 = $sptr;
  $24 = (($23) + ($22<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $smp_in = $26;
  $27 = $smp_in;
  $28 = $4;
  $29 = Math_imul($27, $28)|0;
  $30 = $1;
  $31 = ((($30)) + 4|0);
  $1 = $31;
  $32 = HEAP32[$30>>2]|0;
  $33 = (($32) + ($29))|0;
  HEAP32[$30>>2] = $33;
  $34 = $smp_in;
  $35 = $3;
  $36 = Math_imul($34, $35)|0;
  $37 = $1;
  $38 = ((($37)) + 4|0);
  $1 = $38;
  $39 = HEAP32[$37>>2]|0;
  $40 = (($39) + ($36))|0;
  HEAP32[$37>>2] = $40;
  $41 = $5;
  $42 = $frac;
  $43 = (($42) + ($41))|0;
  $frac = $43;
  $44 = $frac;
  $45 = $44 >> 16;
  $46 = $pos;
  $47 = (($46) + ($45))|0;
  $pos = $47;
  $48 = $frac;
  $49 = $48 & 65535;
  $frac = $49;
 }
 STACKTOP = sp;return;
}
function _smix_mono_8bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_l1 = $22;
  $23 = $pos;
  $24 = (($23) + 1)|0;
  $25 = $sptr;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = $smp_l1;
  $30 = (($28) - ($29))|0;
  $smp_dt = $30;
  $31 = $smp_l1;
  $32 = $frac;
  $33 = $32 >> 1;
  $34 = $smp_dt;
  $35 = Math_imul($33, $34)|0;
  $36 = $35 >> 15;
  $37 = (($31) + ($36))|0;
  $smp_in = $37;
  $38 = $0;
  $39 = ((($38)) + 108|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0);
  $42 = $smp_in;
  $43 = $3;
  $44 = Math_imul($42, $43)|0;
  if ($41) {
   $45 = $0;
   $46 = ((($45)) + 108|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (16 - ($47))|0;
   $49 = Math_imul($44, $48)|0;
   $50 = $49 >> 4;
   $51 = $1;
   $52 = ((($51)) + 4|0);
   $1 = $52;
   $53 = HEAP32[$51>>2]|0;
   $54 = (($53) + ($50))|0;
   HEAP32[$51>>2] = $54;
   $55 = $0;
   $56 = ((($55)) + 108|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + -1)|0;
   HEAP32[$56>>2] = $58;
  } else {
   $59 = $1;
   $60 = ((($59)) + 4|0);
   $1 = $60;
   $61 = HEAP32[$59>>2]|0;
   $62 = (($61) + ($44))|0;
   HEAP32[$59>>2] = $62;
  }
  $63 = $5;
  $64 = $frac;
  $65 = (($64) + ($63))|0;
  $frac = $65;
  $66 = $frac;
  $67 = $66 >> 16;
  $68 = $pos;
  $69 = (($68) + ($67))|0;
  $pos = $69;
  $70 = $frac;
  $71 = $70 & 65535;
  $frac = $71;
 }
 STACKTOP = sp;return;
}
function _smix_mono_16bit_linear($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $frac = 0, $pos = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 while(1) {
  $17 = $2;
  $18 = (($17) + -1)|0;
  $2 = $18;
  $19 = ($17|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $pos;
  $21 = $sptr;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $smp_l1 = $24;
  $25 = $pos;
  $26 = (($25) + 1)|0;
  $27 = $sptr;
  $28 = (($27) + ($26<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = $smp_l1;
  $32 = (($30) - ($31))|0;
  $smp_dt = $32;
  $33 = $smp_l1;
  $34 = $frac;
  $35 = $34 >> 1;
  $36 = $smp_dt;
  $37 = Math_imul($35, $36)|0;
  $38 = $37 >> 15;
  $39 = (($33) + ($38))|0;
  $smp_in = $39;
  $40 = $0;
  $41 = ((($40)) + 108|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0);
  $44 = $smp_in;
  $45 = $3;
  $46 = Math_imul($44, $45)|0;
  if ($43) {
   $47 = $0;
   $48 = ((($47)) + 108|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (16 - ($49))|0;
   $51 = Math_imul($46, $50)|0;
   $52 = $51 >> 4;
   $53 = $1;
   $54 = ((($53)) + 4|0);
   $1 = $54;
   $55 = HEAP32[$53>>2]|0;
   $56 = (($55) + ($52))|0;
   HEAP32[$53>>2] = $56;
   $57 = $0;
   $58 = ((($57)) + 108|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + -1)|0;
   HEAP32[$58>>2] = $60;
  } else {
   $61 = $1;
   $62 = ((($61)) + 4|0);
   $1 = $62;
   $63 = HEAP32[$61>>2]|0;
   $64 = (($63) + ($46))|0;
   HEAP32[$61>>2] = $64;
  }
  $65 = $5;
  $66 = $frac;
  $67 = (($66) + ($65))|0;
  $frac = $67;
  $68 = $frac;
  $69 = $68 >> 16;
  $70 = $pos;
  $71 = (($70) + ($69))|0;
  $pos = $71;
  $72 = $frac;
  $73 = $72 & 65535;
  $frac = $73;
 }
 STACKTOP = sp;return;
}
function _smix_mono_8bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0;
 var $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $pos;
  $19 = $sptr;
  $20 = (($19) + ($18)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 << 24 >> 24;
  $smp_in = $22;
  $23 = $smp_in;
  $24 = $3;
  $25 = Math_imul($23, $24)|0;
  $26 = $1;
  $27 = ((($26)) + 4|0);
  $1 = $27;
  $28 = HEAP32[$26>>2]|0;
  $29 = (($28) + ($25))|0;
  HEAP32[$26>>2] = $29;
  $30 = $5;
  $31 = $frac;
  $32 = (($31) + ($30))|0;
  $frac = $32;
  $33 = $frac;
  $34 = $33 >> 16;
  $35 = $pos;
  $36 = (($35) + ($34))|0;
  $pos = $36;
  $37 = $frac;
  $38 = $37 & 65535;
  $frac = $38;
 }
 STACKTOP = sp;return;
}
function _smix_mono_16bit_nearest($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 while(1) {
  $17 = $2;
  $18 = (($17) + -1)|0;
  $2 = $18;
  $19 = ($17|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $pos;
  $21 = $sptr;
  $22 = (($21) + ($20<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $smp_in = $24;
  $25 = $smp_in;
  $26 = $3;
  $27 = Math_imul($25, $26)|0;
  $28 = $1;
  $29 = ((($28)) + 4|0);
  $1 = $29;
  $30 = HEAP32[$28>>2]|0;
  $31 = (($30) + ($27))|0;
  HEAP32[$28>>2] = $31;
  $32 = $5;
  $33 = $frac;
  $34 = (($33) + ($32))|0;
  $frac = $34;
  $35 = $frac;
  $36 = $35 >> 16;
  $37 = $pos;
  $38 = (($37) + ($36))|0;
  $pos = $38;
  $39 = $frac;
  $40 = $39 & 65535;
  $frac = $40;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a0 = 0, $b0 = 0;
 var $b1 = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 while(1) {
  $60 = $2;
  $61 = (($60) + -1)|0;
  $2 = $61;
  $62 = ($60|0)!=(0);
  if (!($62)) {
   break;
  }
  $63 = $pos;
  $64 = $sptr;
  $65 = (($64) + ($63)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $smp_l1 = $67;
  $68 = $pos;
  $69 = (($68) + 1)|0;
  $70 = $sptr;
  $71 = (($70) + ($69)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72 << 24 >> 24;
  $74 = $smp_l1;
  $75 = (($73) - ($74))|0;
  $smp_dt = $75;
  $76 = $smp_l1;
  $77 = $frac;
  $78 = $77 >> 1;
  $79 = $smp_dt;
  $80 = Math_imul($78, $79)|0;
  $81 = $80 >> 15;
  $82 = (($76) + ($81))|0;
  $smp_in = $82;
  $83 = $a0;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = $smp_in;
  $90 = ($89|0)<(0);
  $91 = $90 << 31 >> 31;
  $92 = (___muldi3(($85|0),($88|0),($89|0),($91|0))|0);
  $93 = tempRet0;
  $94 = $4;
  $95 = ($94|0)<(0);
  $96 = $95 << 31 >> 31;
  $97 = (___muldi3(($92|0),($93|0),($94|0),($96|0))|0);
  $98 = tempRet0;
  $99 = $b0;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($99) + 4)|0;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = $fr1;
  $106 = ($105|0)<(0);
  $107 = $106 << 31 >> 31;
  $108 = (___muldi3(($101|0),($104|0),($105|0),($107|0))|0);
  $109 = tempRet0;
  $110 = (_i64Add(($97|0),($98|0),($108|0),($109|0))|0);
  $111 = tempRet0;
  $112 = $b1;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  $118 = $fr2;
  $119 = ($118|0)<(0);
  $120 = $119 << 31 >> 31;
  $121 = (___muldi3(($114|0),($117|0),($118|0),($120|0))|0);
  $122 = tempRet0;
  $123 = (_i64Add(($110|0),($111|0),($121|0),($122|0))|0);
  $124 = tempRet0;
  $125 = (_bitshift64Ashr(($123|0),($124|0),16)|0);
  $126 = tempRet0;
  $sr = $125;
  $127 = $fr1;
  $fr2 = $127;
  $128 = $sr;
  $fr1 = $128;
  $129 = $a0;
  $130 = $129;
  $131 = HEAP32[$130>>2]|0;
  $132 = (($129) + 4)|0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = $smp_in;
  $136 = ($135|0)<(0);
  $137 = $136 << 31 >> 31;
  $138 = (___muldi3(($131|0),($134|0),($135|0),($137|0))|0);
  $139 = tempRet0;
  $140 = $3;
  $141 = ($140|0)<(0);
  $142 = $141 << 31 >> 31;
  $143 = (___muldi3(($138|0),($139|0),($140|0),($142|0))|0);
  $144 = tempRet0;
  $145 = $b0;
  $146 = $145;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + 4)|0;
  $149 = $148;
  $150 = HEAP32[$149>>2]|0;
  $151 = $fl1;
  $152 = ($151|0)<(0);
  $153 = $152 << 31 >> 31;
  $154 = (___muldi3(($147|0),($150|0),($151|0),($153|0))|0);
  $155 = tempRet0;
  $156 = (_i64Add(($143|0),($144|0),($154|0),($155|0))|0);
  $157 = tempRet0;
  $158 = $b1;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = $fl2;
  $165 = ($164|0)<(0);
  $166 = $165 << 31 >> 31;
  $167 = (___muldi3(($160|0),($163|0),($164|0),($166|0))|0);
  $168 = tempRet0;
  $169 = (_i64Add(($156|0),($157|0),($167|0),($168|0))|0);
  $170 = tempRet0;
  $171 = (_bitshift64Ashr(($169|0),($170|0),16)|0);
  $172 = tempRet0;
  $sl = $171;
  $173 = $fl1;
  $fl2 = $173;
  $174 = $sl;
  $fl1 = $174;
  $175 = $0;
  $176 = ((($175)) + 108|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ($177|0)!=(0);
  if ($178) {
   $179 = $0;
   $180 = ((($179)) + 108|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (16 - ($181))|0;
   $a = $182;
   $183 = $sr;
   $184 = $a;
   $185 = Math_imul($183, $184)|0;
   $186 = $185 >> 4;
   $187 = $1;
   $188 = ((($187)) + 4|0);
   $1 = $188;
   $189 = HEAP32[$187>>2]|0;
   $190 = (($189) + ($186))|0;
   HEAP32[$187>>2] = $190;
   $191 = $sl;
   $192 = $a;
   $193 = Math_imul($191, $192)|0;
   $194 = $193 >> 4;
   $195 = $1;
   $196 = ((($195)) + 4|0);
   $1 = $196;
   $197 = HEAP32[$195>>2]|0;
   $198 = (($197) + ($194))|0;
   HEAP32[$195>>2] = $198;
   $199 = $0;
   $200 = ((($199)) + 108|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = (($201) + -1)|0;
   HEAP32[$200>>2] = $202;
  } else {
   $203 = $sr;
   $204 = $1;
   $205 = ((($204)) + 4|0);
   $1 = $205;
   $206 = HEAP32[$204>>2]|0;
   $207 = (($206) + ($203))|0;
   HEAP32[$204>>2] = $207;
   $208 = $sl;
   $209 = $1;
   $210 = ((($209)) + 4|0);
   $1 = $210;
   $211 = HEAP32[$209>>2]|0;
   $212 = (($211) + ($208))|0;
   HEAP32[$209>>2] = $212;
  }
  $213 = $5;
  $214 = $frac;
  $215 = (($214) + ($213))|0;
  $frac = $215;
  $216 = $frac;
  $217 = $216 >> 16;
  $218 = $pos;
  $219 = (($218) + ($217))|0;
  $pos = $219;
  $220 = $frac;
  $221 = $220 & 65535;
  $frac = $221;
 }
 $222 = $fl1;
 $223 = $0;
 $224 = ((($223)) + 72|0);
 $225 = ((($224)) + 8|0);
 HEAP32[$225>>2] = $222;
 $226 = $fl2;
 $227 = $0;
 $228 = ((($227)) + 72|0);
 $229 = ((($228)) + 12|0);
 HEAP32[$229>>2] = $226;
 $230 = $fr1;
 $231 = $0;
 $232 = ((($231)) + 72|0);
 HEAP32[$232>>2] = $230;
 $233 = $fr2;
 $234 = $0;
 $235 = ((($234)) + 72|0);
 $236 = ((($235)) + 4|0);
 HEAP32[$236>>2] = $233;
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $a = 0, $a0 = 0, $b0 = 0, $b1 = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 $60 = $3;
 $61 = $60 >> 8;
 $3 = $61;
 $62 = $4;
 $63 = $62 >> 8;
 $4 = $63;
 while(1) {
  $64 = $2;
  $65 = (($64) + -1)|0;
  $2 = $65;
  $66 = ($64|0)!=(0);
  if (!($66)) {
   break;
  }
  $67 = $pos;
  $68 = $sptr;
  $69 = (($68) + ($67<<1)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $smp_l1 = $71;
  $72 = $pos;
  $73 = (($72) + 1)|0;
  $74 = $sptr;
  $75 = (($74) + ($73<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = $smp_l1;
  $79 = (($77) - ($78))|0;
  $smp_dt = $79;
  $80 = $smp_l1;
  $81 = $frac;
  $82 = $81 >> 1;
  $83 = $smp_dt;
  $84 = Math_imul($82, $83)|0;
  $85 = $84 >> 15;
  $86 = (($80) + ($85))|0;
  $smp_in = $86;
  $87 = $a0;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = $smp_in;
  $94 = ($93|0)<(0);
  $95 = $94 << 31 >> 31;
  $96 = (___muldi3(($89|0),($92|0),($93|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $4;
  $99 = ($98|0)<(0);
  $100 = $99 << 31 >> 31;
  $101 = (___muldi3(($96|0),($97|0),($98|0),($100|0))|0);
  $102 = tempRet0;
  $103 = $b0;
  $104 = $103;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 4)|0;
  $107 = $106;
  $108 = HEAP32[$107>>2]|0;
  $109 = $fr1;
  $110 = ($109|0)<(0);
  $111 = $110 << 31 >> 31;
  $112 = (___muldi3(($105|0),($108|0),($109|0),($111|0))|0);
  $113 = tempRet0;
  $114 = (_i64Add(($101|0),($102|0),($112|0),($113|0))|0);
  $115 = tempRet0;
  $116 = $b1;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($116) + 4)|0;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = $fr2;
  $123 = ($122|0)<(0);
  $124 = $123 << 31 >> 31;
  $125 = (___muldi3(($118|0),($121|0),($122|0),($124|0))|0);
  $126 = tempRet0;
  $127 = (_i64Add(($114|0),($115|0),($125|0),($126|0))|0);
  $128 = tempRet0;
  $129 = (_bitshift64Ashr(($127|0),($128|0),16)|0);
  $130 = tempRet0;
  $sr = $129;
  $131 = $fr1;
  $fr2 = $131;
  $132 = $sr;
  $fr1 = $132;
  $133 = $a0;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = $smp_in;
  $140 = ($139|0)<(0);
  $141 = $140 << 31 >> 31;
  $142 = (___muldi3(($135|0),($138|0),($139|0),($141|0))|0);
  $143 = tempRet0;
  $144 = $3;
  $145 = ($144|0)<(0);
  $146 = $145 << 31 >> 31;
  $147 = (___muldi3(($142|0),($143|0),($144|0),($146|0))|0);
  $148 = tempRet0;
  $149 = $b0;
  $150 = $149;
  $151 = HEAP32[$150>>2]|0;
  $152 = (($149) + 4)|0;
  $153 = $152;
  $154 = HEAP32[$153>>2]|0;
  $155 = $fl1;
  $156 = ($155|0)<(0);
  $157 = $156 << 31 >> 31;
  $158 = (___muldi3(($151|0),($154|0),($155|0),($157|0))|0);
  $159 = tempRet0;
  $160 = (_i64Add(($147|0),($148|0),($158|0),($159|0))|0);
  $161 = tempRet0;
  $162 = $b1;
  $163 = $162;
  $164 = HEAP32[$163>>2]|0;
  $165 = (($162) + 4)|0;
  $166 = $165;
  $167 = HEAP32[$166>>2]|0;
  $168 = $fl2;
  $169 = ($168|0)<(0);
  $170 = $169 << 31 >> 31;
  $171 = (___muldi3(($164|0),($167|0),($168|0),($170|0))|0);
  $172 = tempRet0;
  $173 = (_i64Add(($160|0),($161|0),($171|0),($172|0))|0);
  $174 = tempRet0;
  $175 = (_bitshift64Ashr(($173|0),($174|0),16)|0);
  $176 = tempRet0;
  $sl = $175;
  $177 = $fl1;
  $fl2 = $177;
  $178 = $sl;
  $fl1 = $178;
  $179 = $0;
  $180 = ((($179)) + 108|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)!=(0);
  if ($182) {
   $183 = $0;
   $184 = ((($183)) + 108|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = (16 - ($185))|0;
   $a = $186;
   $187 = $sr;
   $188 = $a;
   $189 = Math_imul($187, $188)|0;
   $190 = $189 >> 4;
   $191 = $1;
   $192 = ((($191)) + 4|0);
   $1 = $192;
   $193 = HEAP32[$191>>2]|0;
   $194 = (($193) + ($190))|0;
   HEAP32[$191>>2] = $194;
   $195 = $sl;
   $196 = $a;
   $197 = Math_imul($195, $196)|0;
   $198 = $197 >> 4;
   $199 = $1;
   $200 = ((($199)) + 4|0);
   $1 = $200;
   $201 = HEAP32[$199>>2]|0;
   $202 = (($201) + ($198))|0;
   HEAP32[$199>>2] = $202;
   $203 = $0;
   $204 = ((($203)) + 108|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = (($205) + -1)|0;
   HEAP32[$204>>2] = $206;
  } else {
   $207 = $sr;
   $208 = $1;
   $209 = ((($208)) + 4|0);
   $1 = $209;
   $210 = HEAP32[$208>>2]|0;
   $211 = (($210) + ($207))|0;
   HEAP32[$208>>2] = $211;
   $212 = $sl;
   $213 = $1;
   $214 = ((($213)) + 4|0);
   $1 = $214;
   $215 = HEAP32[$213>>2]|0;
   $216 = (($215) + ($212))|0;
   HEAP32[$213>>2] = $216;
  }
  $217 = $5;
  $218 = $frac;
  $219 = (($218) + ($217))|0;
  $frac = $219;
  $220 = $frac;
  $221 = $220 >> 16;
  $222 = $pos;
  $223 = (($222) + ($221))|0;
  $pos = $223;
  $224 = $frac;
  $225 = $224 & 65535;
  $frac = $225;
 }
 $226 = $fl1;
 $227 = $0;
 $228 = ((($227)) + 72|0);
 $229 = ((($228)) + 8|0);
 HEAP32[$229>>2] = $226;
 $230 = $fl2;
 $231 = $0;
 $232 = ((($231)) + 72|0);
 $233 = ((($232)) + 12|0);
 HEAP32[$233>>2] = $230;
 $234 = $fr1;
 $235 = $0;
 $236 = ((($235)) + 72|0);
 HEAP32[$236>>2] = $234;
 $237 = $fr2;
 $238 = $0;
 $239 = ((($238)) + 72|0);
 $240 = ((($239)) + 4|0);
 HEAP32[$240>>2] = $237;
 STACKTOP = sp;return;
}
function _smix_mono_8bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $fl1 = 0, $fl2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 while(1) {
  $53 = $2;
  $54 = (($53) + -1)|0;
  $2 = $54;
  $55 = ($53|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $pos;
  $57 = $sptr;
  $58 = (($57) + ($56)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59 << 24 >> 24;
  $smp_l1 = $60;
  $61 = $pos;
  $62 = (($61) + 1)|0;
  $63 = $sptr;
  $64 = (($63) + ($62)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = $smp_l1;
  $68 = (($66) - ($67))|0;
  $smp_dt = $68;
  $69 = $smp_l1;
  $70 = $frac;
  $71 = $70 >> 1;
  $72 = $smp_dt;
  $73 = Math_imul($71, $72)|0;
  $74 = $73 >> 15;
  $75 = (($69) + ($74))|0;
  $smp_in = $75;
  $76 = $a0;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = $smp_in;
  $83 = ($82|0)<(0);
  $84 = $83 << 31 >> 31;
  $85 = (___muldi3(($78|0),($81|0),($82|0),($84|0))|0);
  $86 = tempRet0;
  $87 = $3;
  $88 = ($87|0)<(0);
  $89 = $88 << 31 >> 31;
  $90 = (___muldi3(($85|0),($86|0),($87|0),($89|0))|0);
  $91 = tempRet0;
  $92 = $b0;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($92) + 4)|0;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = $fl1;
  $99 = ($98|0)<(0);
  $100 = $99 << 31 >> 31;
  $101 = (___muldi3(($94|0),($97|0),($98|0),($100|0))|0);
  $102 = tempRet0;
  $103 = (_i64Add(($90|0),($91|0),($101|0),($102|0))|0);
  $104 = tempRet0;
  $105 = $b1;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($105) + 4)|0;
  $109 = $108;
  $110 = HEAP32[$109>>2]|0;
  $111 = $fl2;
  $112 = ($111|0)<(0);
  $113 = $112 << 31 >> 31;
  $114 = (___muldi3(($107|0),($110|0),($111|0),($113|0))|0);
  $115 = tempRet0;
  $116 = (_i64Add(($103|0),($104|0),($114|0),($115|0))|0);
  $117 = tempRet0;
  $118 = (_bitshift64Ashr(($116|0),($117|0),16)|0);
  $119 = tempRet0;
  $sl = $118;
  $120 = $fl1;
  $fl2 = $120;
  $121 = $sl;
  $fl1 = $121;
  $122 = $0;
  $123 = ((($122)) + 108|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)!=(0);
  $126 = $sl;
  if ($125) {
   $127 = $0;
   $128 = ((($127)) + 108|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (16 - ($129))|0;
   $131 = Math_imul($126, $130)|0;
   $132 = $131 >> 4;
   $133 = $1;
   $134 = ((($133)) + 4|0);
   $1 = $134;
   $135 = HEAP32[$133>>2]|0;
   $136 = (($135) + ($132))|0;
   HEAP32[$133>>2] = $136;
   $137 = $0;
   $138 = ((($137)) + 108|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + -1)|0;
   HEAP32[$138>>2] = $140;
  } else {
   $141 = $1;
   $142 = ((($141)) + 4|0);
   $1 = $142;
   $143 = HEAP32[$141>>2]|0;
   $144 = (($143) + ($126))|0;
   HEAP32[$141>>2] = $144;
  }
  $145 = $5;
  $146 = $frac;
  $147 = (($146) + ($145))|0;
  $frac = $147;
  $148 = $frac;
  $149 = $148 >> 16;
  $150 = $pos;
  $151 = (($150) + ($149))|0;
  $pos = $151;
  $152 = $frac;
  $153 = $152 & 65535;
  $frac = $153;
 }
 $154 = $fl1;
 $155 = $0;
 $156 = ((($155)) + 72|0);
 $157 = ((($156)) + 8|0);
 HEAP32[$157>>2] = $154;
 $158 = $fl2;
 $159 = $0;
 $160 = ((($159)) + 72|0);
 $161 = ((($160)) + 12|0);
 HEAP32[$161>>2] = $158;
 STACKTOP = sp;return;
}
function _smix_mono_16bit_linear_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $fl1 = 0, $fl2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_dt = 0, $smp_in = 0, $smp_l1 = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $3;
 $54 = $53 >> 8;
 $3 = $54;
 while(1) {
  $55 = $2;
  $56 = (($55) + -1)|0;
  $2 = $56;
  $57 = ($55|0)!=(0);
  if (!($57)) {
   break;
  }
  $58 = $pos;
  $59 = $sptr;
  $60 = (($59) + ($58<<1)|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $smp_l1 = $62;
  $63 = $pos;
  $64 = (($63) + 1)|0;
  $65 = $sptr;
  $66 = (($65) + ($64<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = $smp_l1;
  $70 = (($68) - ($69))|0;
  $smp_dt = $70;
  $71 = $smp_l1;
  $72 = $frac;
  $73 = $72 >> 1;
  $74 = $smp_dt;
  $75 = Math_imul($73, $74)|0;
  $76 = $75 >> 15;
  $77 = (($71) + ($76))|0;
  $smp_in = $77;
  $78 = $a0;
  $79 = $78;
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 4)|0;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = $smp_in;
  $85 = ($84|0)<(0);
  $86 = $85 << 31 >> 31;
  $87 = (___muldi3(($80|0),($83|0),($84|0),($86|0))|0);
  $88 = tempRet0;
  $89 = $3;
  $90 = ($89|0)<(0);
  $91 = $90 << 31 >> 31;
  $92 = (___muldi3(($87|0),($88|0),($89|0),($91|0))|0);
  $93 = tempRet0;
  $94 = $b0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($94) + 4)|0;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = $fl1;
  $101 = ($100|0)<(0);
  $102 = $101 << 31 >> 31;
  $103 = (___muldi3(($96|0),($99|0),($100|0),($102|0))|0);
  $104 = tempRet0;
  $105 = (_i64Add(($92|0),($93|0),($103|0),($104|0))|0);
  $106 = tempRet0;
  $107 = $b1;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) + 4)|0;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = $fl2;
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  $116 = (___muldi3(($109|0),($112|0),($113|0),($115|0))|0);
  $117 = tempRet0;
  $118 = (_i64Add(($105|0),($106|0),($116|0),($117|0))|0);
  $119 = tempRet0;
  $120 = (_bitshift64Ashr(($118|0),($119|0),16)|0);
  $121 = tempRet0;
  $sl = $120;
  $122 = $fl1;
  $fl2 = $122;
  $123 = $sl;
  $fl1 = $123;
  $124 = $0;
  $125 = ((($124)) + 108|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126|0)!=(0);
  $128 = $sl;
  if ($127) {
   $129 = $0;
   $130 = ((($129)) + 108|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (16 - ($131))|0;
   $133 = Math_imul($128, $132)|0;
   $134 = $133 >> 4;
   $135 = $1;
   $136 = ((($135)) + 4|0);
   $1 = $136;
   $137 = HEAP32[$135>>2]|0;
   $138 = (($137) + ($134))|0;
   HEAP32[$135>>2] = $138;
   $139 = $0;
   $140 = ((($139)) + 108|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + -1)|0;
   HEAP32[$140>>2] = $142;
  } else {
   $143 = $1;
   $144 = ((($143)) + 4|0);
   $1 = $144;
   $145 = HEAP32[$143>>2]|0;
   $146 = (($145) + ($128))|0;
   HEAP32[$143>>2] = $146;
  }
  $147 = $5;
  $148 = $frac;
  $149 = (($148) + ($147))|0;
  $frac = $149;
  $150 = $frac;
  $151 = $150 >> 16;
  $152 = $pos;
  $153 = (($152) + ($151))|0;
  $pos = $153;
  $154 = $frac;
  $155 = $154 & 65535;
  $frac = $155;
 }
 $156 = $fl1;
 $157 = $0;
 $158 = ((($157)) + 72|0);
 $159 = ((($158)) + 8|0);
 HEAP32[$159>>2] = $156;
 $160 = $fl2;
 $161 = $0;
 $162 = ((($161)) + 72|0);
 $163 = ((($162)) + 12|0);
 HEAP32[$163>>2] = $160;
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $frac;
  $19 = $18 >> 6;
  $f = $19;
  $20 = $f;
  $21 = (14704 + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $pos;
  $25 = (($24) - 1)|0;
  $26 = $sptr;
  $27 = (($26) + ($25)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = Math_imul($23, $29)|0;
  $31 = $f;
  $32 = (16752 + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $pos;
  $36 = $sptr;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = Math_imul($34, $39)|0;
  $41 = (($30) + ($40))|0;
  $42 = $f;
  $43 = (18800 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = $pos;
  $47 = (($46) + 2)|0;
  $48 = $sptr;
  $49 = (($48) + ($47)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = Math_imul($45, $51)|0;
  $53 = (($41) + ($52))|0;
  $54 = $f;
  $55 = (20848 + ($54<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $pos;
  $59 = (($58) + 1)|0;
  $60 = $sptr;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = Math_imul($57, $63)|0;
  $65 = (($53) + ($64))|0;
  $66 = $65 >> 14;
  $smp_in = $66;
  $67 = $0;
  $68 = ((($67)) + 108|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $0;
   $72 = ((($71)) + 108|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (16 - ($73))|0;
   $a = $74;
   $75 = $smp_in;
   $76 = $4;
   $77 = Math_imul($75, $76)|0;
   $78 = $a;
   $79 = Math_imul($77, $78)|0;
   $80 = $79 >> 4;
   $81 = $1;
   $82 = ((($81)) + 4|0);
   $1 = $82;
   $83 = HEAP32[$81>>2]|0;
   $84 = (($83) + ($80))|0;
   HEAP32[$81>>2] = $84;
   $85 = $smp_in;
   $86 = $3;
   $87 = Math_imul($85, $86)|0;
   $88 = $a;
   $89 = Math_imul($87, $88)|0;
   $90 = $89 >> 4;
   $91 = $1;
   $92 = ((($91)) + 4|0);
   $1 = $92;
   $93 = HEAP32[$91>>2]|0;
   $94 = (($93) + ($90))|0;
   HEAP32[$91>>2] = $94;
   $95 = $0;
   $96 = ((($95)) + 108|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + -1)|0;
   HEAP32[$96>>2] = $98;
  } else {
   $99 = $smp_in;
   $100 = $4;
   $101 = Math_imul($99, $100)|0;
   $102 = $1;
   $103 = ((($102)) + 4|0);
   $1 = $103;
   $104 = HEAP32[$102>>2]|0;
   $105 = (($104) + ($101))|0;
   HEAP32[$102>>2] = $105;
   $106 = $smp_in;
   $107 = $3;
   $108 = Math_imul($106, $107)|0;
   $109 = $1;
   $110 = ((($109)) + 4|0);
   $1 = $110;
   $111 = HEAP32[$109>>2]|0;
   $112 = (($111) + ($108))|0;
   HEAP32[$109>>2] = $112;
  }
  $113 = $5;
  $114 = $frac;
  $115 = (($114) + ($113))|0;
  $frac = $115;
  $116 = $frac;
  $117 = $116 >> 16;
  $118 = $pos;
  $119 = (($118) + ($117))|0;
  $pos = $119;
  $120 = $frac;
  $121 = $120 & 65535;
  $frac = $121;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 $17 = $4;
 $18 = $17 >> 8;
 $4 = $18;
 while(1) {
  $19 = $2;
  $20 = (($19) + -1)|0;
  $2 = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $frac;
  $23 = $22 >> 6;
  $f = $23;
  $24 = $f;
  $25 = (14704 + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $pos;
  $29 = (($28) - 1)|0;
  $30 = $sptr;
  $31 = (($30) + ($29<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = Math_imul($27, $33)|0;
  $35 = $f;
  $36 = (16752 + ($35<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = $pos;
  $40 = $sptr;
  $41 = (($40) + ($39<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = Math_imul($38, $43)|0;
  $45 = (($34) + ($44))|0;
  $46 = $f;
  $47 = (18800 + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = $pos;
  $51 = (($50) + 2)|0;
  $52 = $sptr;
  $53 = (($52) + ($51<<1)|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = Math_imul($49, $55)|0;
  $57 = (($45) + ($56))|0;
  $58 = $f;
  $59 = (20848 + ($58<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $pos;
  $63 = (($62) + 1)|0;
  $64 = $sptr;
  $65 = (($64) + ($63<<1)|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = Math_imul($61, $67)|0;
  $69 = (($57) + ($68))|0;
  $70 = $69 >> 14;
  $smp_in = $70;
  $71 = $0;
  $72 = ((($71)) + 108|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $0;
   $76 = ((($75)) + 108|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (16 - ($77))|0;
   $a = $78;
   $79 = $smp_in;
   $80 = $4;
   $81 = Math_imul($79, $80)|0;
   $82 = $a;
   $83 = Math_imul($81, $82)|0;
   $84 = $83 >> 4;
   $85 = $1;
   $86 = ((($85)) + 4|0);
   $1 = $86;
   $87 = HEAP32[$85>>2]|0;
   $88 = (($87) + ($84))|0;
   HEAP32[$85>>2] = $88;
   $89 = $smp_in;
   $90 = $3;
   $91 = Math_imul($89, $90)|0;
   $92 = $a;
   $93 = Math_imul($91, $92)|0;
   $94 = $93 >> 4;
   $95 = $1;
   $96 = ((($95)) + 4|0);
   $1 = $96;
   $97 = HEAP32[$95>>2]|0;
   $98 = (($97) + ($94))|0;
   HEAP32[$95>>2] = $98;
   $99 = $0;
   $100 = ((($99)) + 108|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101) + -1)|0;
   HEAP32[$100>>2] = $102;
  } else {
   $103 = $smp_in;
   $104 = $4;
   $105 = Math_imul($103, $104)|0;
   $106 = $1;
   $107 = ((($106)) + 4|0);
   $1 = $107;
   $108 = HEAP32[$106>>2]|0;
   $109 = (($108) + ($105))|0;
   HEAP32[$106>>2] = $109;
   $110 = $smp_in;
   $111 = $3;
   $112 = Math_imul($110, $111)|0;
   $113 = $1;
   $114 = ((($113)) + 4|0);
   $1 = $114;
   $115 = HEAP32[$113>>2]|0;
   $116 = (($115) + ($112))|0;
   HEAP32[$113>>2] = $116;
  }
  $117 = $5;
  $118 = $frac;
  $119 = (($118) + ($117))|0;
  $frac = $119;
  $120 = $frac;
  $121 = $120 >> 16;
  $122 = $pos;
  $123 = (($122) + ($121))|0;
  $pos = $123;
  $124 = $frac;
  $125 = $124 & 65535;
  $frac = $125;
 }
 STACKTOP = sp;return;
}
function _smix_mono_8bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 while(1) {
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $frac;
  $19 = $18 >> 6;
  $f = $19;
  $20 = $f;
  $21 = (14704 + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $pos;
  $25 = (($24) - 1)|0;
  $26 = $sptr;
  $27 = (($26) + ($25)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 << 24 >> 24;
  $30 = Math_imul($23, $29)|0;
  $31 = $f;
  $32 = (16752 + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $pos;
  $36 = $sptr;
  $37 = (($36) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = Math_imul($34, $39)|0;
  $41 = (($30) + ($40))|0;
  $42 = $f;
  $43 = (18800 + ($42<<1)|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = $pos;
  $47 = (($46) + 2)|0;
  $48 = $sptr;
  $49 = (($48) + ($47)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = Math_imul($45, $51)|0;
  $53 = (($41) + ($52))|0;
  $54 = $f;
  $55 = (20848 + ($54<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $pos;
  $59 = (($58) + 1)|0;
  $60 = $sptr;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = Math_imul($57, $63)|0;
  $65 = (($53) + ($64))|0;
  $66 = $65 >> 14;
  $smp_in = $66;
  $67 = $0;
  $68 = ((($67)) + 108|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  $71 = $smp_in;
  $72 = $3;
  $73 = Math_imul($71, $72)|0;
  if ($70) {
   $74 = $0;
   $75 = ((($74)) + 108|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (16 - ($76))|0;
   $78 = Math_imul($73, $77)|0;
   $79 = $78 >> 4;
   $80 = $1;
   $81 = ((($80)) + 4|0);
   $1 = $81;
   $82 = HEAP32[$80>>2]|0;
   $83 = (($82) + ($79))|0;
   HEAP32[$80>>2] = $83;
   $84 = $0;
   $85 = ((($84)) + 108|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + -1)|0;
   HEAP32[$85>>2] = $87;
  } else {
   $88 = $1;
   $89 = ((($88)) + 4|0);
   $1 = $89;
   $90 = HEAP32[$88>>2]|0;
   $91 = (($90) + ($73))|0;
   HEAP32[$88>>2] = $91;
  }
  $92 = $5;
  $93 = $frac;
  $94 = (($93) + ($92))|0;
  $frac = $94;
  $95 = $frac;
  $96 = $95 >> 16;
  $97 = $pos;
  $98 = (($97) + ($96))|0;
  $pos = $98;
  $99 = $frac;
  $100 = $99 & 65535;
  $frac = $100;
 }
 STACKTOP = sp;return;
}
function _smix_mono_16bit_spline($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $f = 0, $frac = 0, $pos = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $3;
 $16 = $15 >> 8;
 $3 = $16;
 while(1) {
  $17 = $2;
  $18 = (($17) + -1)|0;
  $2 = $18;
  $19 = ($17|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $frac;
  $21 = $20 >> 6;
  $f = $21;
  $22 = $f;
  $23 = (14704 + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $pos;
  $27 = (($26) - 1)|0;
  $28 = $sptr;
  $29 = (($28) + ($27<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = Math_imul($25, $31)|0;
  $33 = $f;
  $34 = (16752 + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $pos;
  $38 = $sptr;
  $39 = (($38) + ($37<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = Math_imul($36, $41)|0;
  $43 = (($32) + ($42))|0;
  $44 = $f;
  $45 = (18800 + ($44<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = $pos;
  $49 = (($48) + 2)|0;
  $50 = $sptr;
  $51 = (($50) + ($49<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = Math_imul($47, $53)|0;
  $55 = (($43) + ($54))|0;
  $56 = $f;
  $57 = (20848 + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = $pos;
  $61 = (($60) + 1)|0;
  $62 = $sptr;
  $63 = (($62) + ($61<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = Math_imul($59, $65)|0;
  $67 = (($55) + ($66))|0;
  $68 = $67 >> 14;
  $smp_in = $68;
  $69 = $0;
  $70 = ((($69)) + 108|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)!=(0);
  $73 = $smp_in;
  $74 = $3;
  $75 = Math_imul($73, $74)|0;
  if ($72) {
   $76 = $0;
   $77 = ((($76)) + 108|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (16 - ($78))|0;
   $80 = Math_imul($75, $79)|0;
   $81 = $80 >> 4;
   $82 = $1;
   $83 = ((($82)) + 4|0);
   $1 = $83;
   $84 = HEAP32[$82>>2]|0;
   $85 = (($84) + ($81))|0;
   HEAP32[$82>>2] = $85;
   $86 = $0;
   $87 = ((($86)) + 108|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + -1)|0;
   HEAP32[$87>>2] = $89;
  } else {
   $90 = $1;
   $91 = ((($90)) + 4|0);
   $1 = $91;
   $92 = HEAP32[$90>>2]|0;
   $93 = (($92) + ($75))|0;
   HEAP32[$90>>2] = $93;
  }
  $94 = $5;
  $95 = $frac;
  $96 = (($95) + ($94))|0;
  $frac = $96;
  $97 = $frac;
  $98 = $97 >> 16;
  $99 = $pos;
  $100 = (($99) + ($98))|0;
  $pos = $100;
  $101 = $frac;
  $102 = $101 & 65535;
  $frac = $102;
 }
 STACKTOP = sp;return;
}
function _smix_stereo_8bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0, $pos = 0, $sl = 0, $smp_in = 0, $sptr = 0;
 var $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 while(1) {
  $60 = $2;
  $61 = (($60) + -1)|0;
  $2 = $61;
  $62 = ($60|0)!=(0);
  if (!($62)) {
   break;
  }
  $63 = $frac;
  $64 = $63 >> 6;
  $f = $64;
  $65 = $f;
  $66 = (14704 + ($65<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = $pos;
  $70 = (($69) - 1)|0;
  $71 = $sptr;
  $72 = (($71) + ($70)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = Math_imul($68, $74)|0;
  $76 = $f;
  $77 = (16752 + ($76<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $pos;
  $81 = $sptr;
  $82 = (($81) + ($80)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = Math_imul($79, $84)|0;
  $86 = (($75) + ($85))|0;
  $87 = $f;
  $88 = (18800 + ($87<<1)|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = $pos;
  $92 = (($91) + 2)|0;
  $93 = $sptr;
  $94 = (($93) + ($92)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95 << 24 >> 24;
  $97 = Math_imul($90, $96)|0;
  $98 = (($86) + ($97))|0;
  $99 = $f;
  $100 = (20848 + ($99<<1)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = $pos;
  $104 = (($103) + 1)|0;
  $105 = $sptr;
  $106 = (($105) + ($104)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107 << 24 >> 24;
  $109 = Math_imul($102, $108)|0;
  $110 = (($98) + ($109))|0;
  $111 = $110 >> 14;
  $smp_in = $111;
  $112 = $a0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  $118 = $smp_in;
  $119 = ($118|0)<(0);
  $120 = $119 << 31 >> 31;
  $121 = (___muldi3(($114|0),($117|0),($118|0),($120|0))|0);
  $122 = tempRet0;
  $123 = $4;
  $124 = ($123|0)<(0);
  $125 = $124 << 31 >> 31;
  $126 = (___muldi3(($121|0),($122|0),($123|0),($125|0))|0);
  $127 = tempRet0;
  $128 = $b0;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = $fr1;
  $135 = ($134|0)<(0);
  $136 = $135 << 31 >> 31;
  $137 = (___muldi3(($130|0),($133|0),($134|0),($136|0))|0);
  $138 = tempRet0;
  $139 = (_i64Add(($126|0),($127|0),($137|0),($138|0))|0);
  $140 = tempRet0;
  $141 = $b1;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = $fr2;
  $148 = ($147|0)<(0);
  $149 = $148 << 31 >> 31;
  $150 = (___muldi3(($143|0),($146|0),($147|0),($149|0))|0);
  $151 = tempRet0;
  $152 = (_i64Add(($139|0),($140|0),($150|0),($151|0))|0);
  $153 = tempRet0;
  $154 = (_bitshift64Ashr(($152|0),($153|0),16)|0);
  $155 = tempRet0;
  $sr = $154;
  $156 = $fr1;
  $fr2 = $156;
  $157 = $sr;
  $fr1 = $157;
  $158 = $a0;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = (($158) + 4)|0;
  $162 = $161;
  $163 = HEAP32[$162>>2]|0;
  $164 = $smp_in;
  $165 = ($164|0)<(0);
  $166 = $165 << 31 >> 31;
  $167 = (___muldi3(($160|0),($163|0),($164|0),($166|0))|0);
  $168 = tempRet0;
  $169 = $3;
  $170 = ($169|0)<(0);
  $171 = $170 << 31 >> 31;
  $172 = (___muldi3(($167|0),($168|0),($169|0),($171|0))|0);
  $173 = tempRet0;
  $174 = $b0;
  $175 = $174;
  $176 = HEAP32[$175>>2]|0;
  $177 = (($174) + 4)|0;
  $178 = $177;
  $179 = HEAP32[$178>>2]|0;
  $180 = $fl1;
  $181 = ($180|0)<(0);
  $182 = $181 << 31 >> 31;
  $183 = (___muldi3(($176|0),($179|0),($180|0),($182|0))|0);
  $184 = tempRet0;
  $185 = (_i64Add(($172|0),($173|0),($183|0),($184|0))|0);
  $186 = tempRet0;
  $187 = $b1;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = (($187) + 4)|0;
  $191 = $190;
  $192 = HEAP32[$191>>2]|0;
  $193 = $fl2;
  $194 = ($193|0)<(0);
  $195 = $194 << 31 >> 31;
  $196 = (___muldi3(($189|0),($192|0),($193|0),($195|0))|0);
  $197 = tempRet0;
  $198 = (_i64Add(($185|0),($186|0),($196|0),($197|0))|0);
  $199 = tempRet0;
  $200 = (_bitshift64Ashr(($198|0),($199|0),16)|0);
  $201 = tempRet0;
  $sl = $200;
  $202 = $fl1;
  $fl2 = $202;
  $203 = $sl;
  $fl1 = $203;
  $204 = $0;
  $205 = ((($204)) + 108|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($206|0)!=(0);
  if ($207) {
   $208 = $0;
   $209 = ((($208)) + 108|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (16 - ($210))|0;
   $a = $211;
   $212 = $sr;
   $213 = $a;
   $214 = Math_imul($212, $213)|0;
   $215 = $214 >> 4;
   $216 = $1;
   $217 = ((($216)) + 4|0);
   $1 = $217;
   $218 = HEAP32[$216>>2]|0;
   $219 = (($218) + ($215))|0;
   HEAP32[$216>>2] = $219;
   $220 = $sl;
   $221 = $a;
   $222 = Math_imul($220, $221)|0;
   $223 = $222 >> 4;
   $224 = $1;
   $225 = ((($224)) + 4|0);
   $1 = $225;
   $226 = HEAP32[$224>>2]|0;
   $227 = (($226) + ($223))|0;
   HEAP32[$224>>2] = $227;
   $228 = $0;
   $229 = ((($228)) + 108|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($230) + -1)|0;
   HEAP32[$229>>2] = $231;
  } else {
   $232 = $sr;
   $233 = $1;
   $234 = ((($233)) + 4|0);
   $1 = $234;
   $235 = HEAP32[$233>>2]|0;
   $236 = (($235) + ($232))|0;
   HEAP32[$233>>2] = $236;
   $237 = $sl;
   $238 = $1;
   $239 = ((($238)) + 4|0);
   $1 = $239;
   $240 = HEAP32[$238>>2]|0;
   $241 = (($240) + ($237))|0;
   HEAP32[$238>>2] = $241;
  }
  $242 = $5;
  $243 = $frac;
  $244 = (($243) + ($242))|0;
  $frac = $244;
  $245 = $frac;
  $246 = $245 >> 16;
  $247 = $pos;
  $248 = (($247) + ($246))|0;
  $pos = $248;
  $249 = $frac;
  $250 = $249 & 65535;
  $frac = $250;
 }
 $251 = $fl1;
 $252 = $0;
 $253 = ((($252)) + 72|0);
 $254 = ((($253)) + 8|0);
 HEAP32[$254>>2] = $251;
 $255 = $fl2;
 $256 = $0;
 $257 = ((($256)) + 72|0);
 $258 = ((($257)) + 12|0);
 HEAP32[$258>>2] = $255;
 $259 = $fr1;
 $260 = $0;
 $261 = ((($260)) + 72|0);
 HEAP32[$261>>2] = $259;
 $262 = $fr2;
 $263 = $0;
 $264 = ((($263)) + 72|0);
 $265 = ((($264)) + 4|0);
 HEAP32[$265>>2] = $262;
 STACKTOP = sp;return;
}
function _smix_stereo_16bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $fr1 = 0, $fr2 = 0, $frac = 0;
 var $pos = 0, $sl = 0, $smp_in = 0, $sptr = 0, $sr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $0;
 $54 = ((($53)) + 72|0);
 $55 = HEAP32[$54>>2]|0;
 $fr1 = $55;
 $56 = $0;
 $57 = ((($56)) + 72|0);
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $fr2 = $59;
 $60 = $3;
 $61 = $60 >> 8;
 $3 = $61;
 $62 = $4;
 $63 = $62 >> 8;
 $4 = $63;
 while(1) {
  $64 = $2;
  $65 = (($64) + -1)|0;
  $2 = $65;
  $66 = ($64|0)!=(0);
  if (!($66)) {
   break;
  }
  $67 = $frac;
  $68 = $67 >> 6;
  $f = $68;
  $69 = $f;
  $70 = (14704 + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $pos;
  $74 = (($73) - 1)|0;
  $75 = $sptr;
  $76 = (($75) + ($74<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77 << 16 >> 16;
  $79 = Math_imul($72, $78)|0;
  $80 = $f;
  $81 = (16752 + ($80<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = $pos;
  $85 = $sptr;
  $86 = (($85) + ($84<<1)|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = Math_imul($83, $88)|0;
  $90 = (($79) + ($89))|0;
  $91 = $f;
  $92 = (18800 + ($91<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93 << 16 >> 16;
  $95 = $pos;
  $96 = (($95) + 2)|0;
  $97 = $sptr;
  $98 = (($97) + ($96<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99 << 16 >> 16;
  $101 = Math_imul($94, $100)|0;
  $102 = (($90) + ($101))|0;
  $103 = $f;
  $104 = (20848 + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = $pos;
  $108 = (($107) + 1)|0;
  $109 = $sptr;
  $110 = (($109) + ($108<<1)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = Math_imul($106, $112)|0;
  $114 = (($102) + ($113))|0;
  $115 = $114 >> 14;
  $smp_in = $115;
  $116 = $a0;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($116) + 4)|0;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = $smp_in;
  $123 = ($122|0)<(0);
  $124 = $123 << 31 >> 31;
  $125 = (___muldi3(($118|0),($121|0),($122|0),($124|0))|0);
  $126 = tempRet0;
  $127 = $4;
  $128 = ($127|0)<(0);
  $129 = $128 << 31 >> 31;
  $130 = (___muldi3(($125|0),($126|0),($127|0),($129|0))|0);
  $131 = tempRet0;
  $132 = $b0;
  $133 = $132;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($132) + 4)|0;
  $136 = $135;
  $137 = HEAP32[$136>>2]|0;
  $138 = $fr1;
  $139 = ($138|0)<(0);
  $140 = $139 << 31 >> 31;
  $141 = (___muldi3(($134|0),($137|0),($138|0),($140|0))|0);
  $142 = tempRet0;
  $143 = (_i64Add(($130|0),($131|0),($141|0),($142|0))|0);
  $144 = tempRet0;
  $145 = $b1;
  $146 = $145;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + 4)|0;
  $149 = $148;
  $150 = HEAP32[$149>>2]|0;
  $151 = $fr2;
  $152 = ($151|0)<(0);
  $153 = $152 << 31 >> 31;
  $154 = (___muldi3(($147|0),($150|0),($151|0),($153|0))|0);
  $155 = tempRet0;
  $156 = (_i64Add(($143|0),($144|0),($154|0),($155|0))|0);
  $157 = tempRet0;
  $158 = (_bitshift64Ashr(($156|0),($157|0),16)|0);
  $159 = tempRet0;
  $sr = $158;
  $160 = $fr1;
  $fr2 = $160;
  $161 = $sr;
  $fr1 = $161;
  $162 = $a0;
  $163 = $162;
  $164 = HEAP32[$163>>2]|0;
  $165 = (($162) + 4)|0;
  $166 = $165;
  $167 = HEAP32[$166>>2]|0;
  $168 = $smp_in;
  $169 = ($168|0)<(0);
  $170 = $169 << 31 >> 31;
  $171 = (___muldi3(($164|0),($167|0),($168|0),($170|0))|0);
  $172 = tempRet0;
  $173 = $3;
  $174 = ($173|0)<(0);
  $175 = $174 << 31 >> 31;
  $176 = (___muldi3(($171|0),($172|0),($173|0),($175|0))|0);
  $177 = tempRet0;
  $178 = $b0;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = (($178) + 4)|0;
  $182 = $181;
  $183 = HEAP32[$182>>2]|0;
  $184 = $fl1;
  $185 = ($184|0)<(0);
  $186 = $185 << 31 >> 31;
  $187 = (___muldi3(($180|0),($183|0),($184|0),($186|0))|0);
  $188 = tempRet0;
  $189 = (_i64Add(($176|0),($177|0),($187|0),($188|0))|0);
  $190 = tempRet0;
  $191 = $b1;
  $192 = $191;
  $193 = HEAP32[$192>>2]|0;
  $194 = (($191) + 4)|0;
  $195 = $194;
  $196 = HEAP32[$195>>2]|0;
  $197 = $fl2;
  $198 = ($197|0)<(0);
  $199 = $198 << 31 >> 31;
  $200 = (___muldi3(($193|0),($196|0),($197|0),($199|0))|0);
  $201 = tempRet0;
  $202 = (_i64Add(($189|0),($190|0),($200|0),($201|0))|0);
  $203 = tempRet0;
  $204 = (_bitshift64Ashr(($202|0),($203|0),16)|0);
  $205 = tempRet0;
  $sl = $204;
  $206 = $fl1;
  $fl2 = $206;
  $207 = $sl;
  $fl1 = $207;
  $208 = $0;
  $209 = ((($208)) + 108|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ($210|0)!=(0);
  if ($211) {
   $212 = $0;
   $213 = ((($212)) + 108|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = (16 - ($214))|0;
   $a = $215;
   $216 = $sr;
   $217 = $a;
   $218 = Math_imul($216, $217)|0;
   $219 = $218 >> 4;
   $220 = $1;
   $221 = ((($220)) + 4|0);
   $1 = $221;
   $222 = HEAP32[$220>>2]|0;
   $223 = (($222) + ($219))|0;
   HEAP32[$220>>2] = $223;
   $224 = $sl;
   $225 = $a;
   $226 = Math_imul($224, $225)|0;
   $227 = $226 >> 4;
   $228 = $1;
   $229 = ((($228)) + 4|0);
   $1 = $229;
   $230 = HEAP32[$228>>2]|0;
   $231 = (($230) + ($227))|0;
   HEAP32[$228>>2] = $231;
   $232 = $0;
   $233 = ((($232)) + 108|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = (($234) + -1)|0;
   HEAP32[$233>>2] = $235;
  } else {
   $236 = $sr;
   $237 = $1;
   $238 = ((($237)) + 4|0);
   $1 = $238;
   $239 = HEAP32[$237>>2]|0;
   $240 = (($239) + ($236))|0;
   HEAP32[$237>>2] = $240;
   $241 = $sl;
   $242 = $1;
   $243 = ((($242)) + 4|0);
   $1 = $243;
   $244 = HEAP32[$242>>2]|0;
   $245 = (($244) + ($241))|0;
   HEAP32[$242>>2] = $245;
  }
  $246 = $5;
  $247 = $frac;
  $248 = (($247) + ($246))|0;
  $frac = $248;
  $249 = $frac;
  $250 = $249 >> 16;
  $251 = $pos;
  $252 = (($251) + ($250))|0;
  $pos = $252;
  $253 = $frac;
  $254 = $253 & 65535;
  $frac = $254;
 }
 $255 = $fl1;
 $256 = $0;
 $257 = ((($256)) + 72|0);
 $258 = ((($257)) + 8|0);
 HEAP32[$258>>2] = $255;
 $259 = $fl2;
 $260 = $0;
 $261 = ((($260)) + 72|0);
 $262 = ((($261)) + 12|0);
 HEAP32[$262>>2] = $259;
 $263 = $fr1;
 $264 = $0;
 $265 = ((($264)) + 72|0);
 HEAP32[$265>>2] = $263;
 $266 = $fr2;
 $267 = $0;
 $268 = ((($267)) + 72|0);
 $269 = ((($268)) + 4|0);
 HEAP32[$269>>2] = $266;
 STACKTOP = sp;return;
}
function _smix_mono_8bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $frac = 0, $pos = 0, $sl = 0;
 var $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 while(1) {
  $53 = $2;
  $54 = (($53) + -1)|0;
  $2 = $54;
  $55 = ($53|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $frac;
  $57 = $56 >> 6;
  $f = $57;
  $58 = $f;
  $59 = (14704 + ($58<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $pos;
  $63 = (($62) - 1)|0;
  $64 = $sptr;
  $65 = (($64) + ($63)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = Math_imul($61, $67)|0;
  $69 = $f;
  $70 = (16752 + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $pos;
  $74 = $sptr;
  $75 = (($74) + ($73)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76 << 24 >> 24;
  $78 = Math_imul($72, $77)|0;
  $79 = (($68) + ($78))|0;
  $80 = $f;
  $81 = (18800 + ($80<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = $pos;
  $85 = (($84) + 2)|0;
  $86 = $sptr;
  $87 = (($86) + ($85)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = Math_imul($83, $89)|0;
  $91 = (($79) + ($90))|0;
  $92 = $f;
  $93 = (20848 + ($92<<1)|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94 << 16 >> 16;
  $96 = $pos;
  $97 = (($96) + 1)|0;
  $98 = $sptr;
  $99 = (($98) + ($97)|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100 << 24 >> 24;
  $102 = Math_imul($95, $101)|0;
  $103 = (($91) + ($102))|0;
  $104 = $103 >> 14;
  $smp_in = $104;
  $105 = $a0;
  $106 = $105;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($105) + 4)|0;
  $109 = $108;
  $110 = HEAP32[$109>>2]|0;
  $111 = $smp_in;
  $112 = ($111|0)<(0);
  $113 = $112 << 31 >> 31;
  $114 = (___muldi3(($107|0),($110|0),($111|0),($113|0))|0);
  $115 = tempRet0;
  $116 = $3;
  $117 = ($116|0)<(0);
  $118 = $117 << 31 >> 31;
  $119 = (___muldi3(($114|0),($115|0),($116|0),($118|0))|0);
  $120 = tempRet0;
  $121 = $b0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($121) + 4)|0;
  $125 = $124;
  $126 = HEAP32[$125>>2]|0;
  $127 = $fl1;
  $128 = ($127|0)<(0);
  $129 = $128 << 31 >> 31;
  $130 = (___muldi3(($123|0),($126|0),($127|0),($129|0))|0);
  $131 = tempRet0;
  $132 = (_i64Add(($119|0),($120|0),($130|0),($131|0))|0);
  $133 = tempRet0;
  $134 = $b1;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) + 4)|0;
  $138 = $137;
  $139 = HEAP32[$138>>2]|0;
  $140 = $fl2;
  $141 = ($140|0)<(0);
  $142 = $141 << 31 >> 31;
  $143 = (___muldi3(($136|0),($139|0),($140|0),($142|0))|0);
  $144 = tempRet0;
  $145 = (_i64Add(($132|0),($133|0),($143|0),($144|0))|0);
  $146 = tempRet0;
  $147 = (_bitshift64Ashr(($145|0),($146|0),16)|0);
  $148 = tempRet0;
  $sl = $147;
  $149 = $fl1;
  $fl2 = $149;
  $150 = $sl;
  $fl1 = $150;
  $151 = $0;
  $152 = ((($151)) + 108|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)!=(0);
  $155 = $sl;
  if ($154) {
   $156 = $0;
   $157 = ((($156)) + 108|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (16 - ($158))|0;
   $160 = Math_imul($155, $159)|0;
   $161 = $160 >> 4;
   $162 = $1;
   $163 = ((($162)) + 4|0);
   $1 = $163;
   $164 = HEAP32[$162>>2]|0;
   $165 = (($164) + ($161))|0;
   HEAP32[$162>>2] = $165;
   $166 = $0;
   $167 = ((($166)) + 108|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + -1)|0;
   HEAP32[$167>>2] = $169;
  } else {
   $170 = $1;
   $171 = ((($170)) + 4|0);
   $1 = $171;
   $172 = HEAP32[$170>>2]|0;
   $173 = (($172) + ($155))|0;
   HEAP32[$170>>2] = $173;
  }
  $174 = $5;
  $175 = $frac;
  $176 = (($175) + ($174))|0;
  $frac = $176;
  $177 = $frac;
  $178 = $177 >> 16;
  $179 = $pos;
  $180 = (($179) + ($178))|0;
  $pos = $180;
  $181 = $frac;
  $182 = $181 & 65535;
  $frac = $182;
 }
 $183 = $fl1;
 $184 = $0;
 $185 = ((($184)) + 72|0);
 $186 = ((($185)) + 8|0);
 HEAP32[$186>>2] = $183;
 $187 = $fl2;
 $188 = $0;
 $189 = ((($188)) + 72|0);
 $190 = ((($189)) + 12|0);
 HEAP32[$190>>2] = $187;
 STACKTOP = sp;return;
}
function _smix_mono_16bit_spline_filter($vi,$buffer,$count,$vl,$vr,$step) {
 $vi = $vi|0;
 $buffer = $buffer|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $b0 = 0, $b1 = 0, $f = 0, $fl1 = 0, $fl2 = 0, $frac = 0;
 var $pos = 0, $sl = 0, $smp_in = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a0 = sp + 16|0;
 $b0 = sp + 8|0;
 $b1 = sp;
 $0 = $vi;
 $1 = $buffer;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $step;
 $6 = $0;
 $7 = ((($6)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $sptr = $8;
 $9 = $0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $pos = $11;
 $12 = $0;
 $13 = ((($12)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $frac = $14;
 $15 = $0;
 $16 = ((($15)) + 72|0);
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $fl1 = $18;
 $19 = $0;
 $20 = ((($19)) + 72|0);
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $fl2 = $22;
 $23 = $0;
 $24 = ((($23)) + 72|0);
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = $a0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $0;
 $34 = ((($33)) + 72|0);
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)<(0);
 $38 = $37 << 31 >> 31;
 $39 = $b0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = (($39) + 4)|0;
 $42 = $41;
 HEAP32[$42>>2] = $38;
 $43 = $0;
 $44 = ((($43)) + 72|0);
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = $b1;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $48;
 $53 = $3;
 $54 = $53 >> 8;
 $3 = $54;
 while(1) {
  $55 = $2;
  $56 = (($55) + -1)|0;
  $2 = $56;
  $57 = ($55|0)!=(0);
  if (!($57)) {
   break;
  }
  $58 = $frac;
  $59 = $58 >> 6;
  $f = $59;
  $60 = $f;
  $61 = (14704 + ($60<<1)|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $pos;
  $65 = (($64) - 1)|0;
  $66 = $sptr;
  $67 = (($66) + ($65<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = Math_imul($63, $69)|0;
  $71 = $f;
  $72 = (16752 + ($71<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = $pos;
  $76 = $sptr;
  $77 = (($76) + ($75<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = Math_imul($74, $79)|0;
  $81 = (($70) + ($80))|0;
  $82 = $f;
  $83 = (18800 + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84 << 16 >> 16;
  $86 = $pos;
  $87 = (($86) + 2)|0;
  $88 = $sptr;
  $89 = (($88) + ($87<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90 << 16 >> 16;
  $92 = Math_imul($85, $91)|0;
  $93 = (($81) + ($92))|0;
  $94 = $f;
  $95 = (20848 + ($94<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  $98 = $pos;
  $99 = (($98) + 1)|0;
  $100 = $sptr;
  $101 = (($100) + ($99<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = Math_imul($97, $103)|0;
  $105 = (($93) + ($104))|0;
  $106 = $105 >> 14;
  $smp_in = $106;
  $107 = $a0;
  $108 = $107;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) + 4)|0;
  $111 = $110;
  $112 = HEAP32[$111>>2]|0;
  $113 = $smp_in;
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  $116 = (___muldi3(($109|0),($112|0),($113|0),($115|0))|0);
  $117 = tempRet0;
  $118 = $3;
  $119 = ($118|0)<(0);
  $120 = $119 << 31 >> 31;
  $121 = (___muldi3(($116|0),($117|0),($118|0),($120|0))|0);
  $122 = tempRet0;
  $123 = $b0;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $fl1;
  $130 = ($129|0)<(0);
  $131 = $130 << 31 >> 31;
  $132 = (___muldi3(($125|0),($128|0),($129|0),($131|0))|0);
  $133 = tempRet0;
  $134 = (_i64Add(($121|0),($122|0),($132|0),($133|0))|0);
  $135 = tempRet0;
  $136 = $b1;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = (($136) + 4)|0;
  $140 = $139;
  $141 = HEAP32[$140>>2]|0;
  $142 = $fl2;
  $143 = ($142|0)<(0);
  $144 = $143 << 31 >> 31;
  $145 = (___muldi3(($138|0),($141|0),($142|0),($144|0))|0);
  $146 = tempRet0;
  $147 = (_i64Add(($134|0),($135|0),($145|0),($146|0))|0);
  $148 = tempRet0;
  $149 = (_bitshift64Ashr(($147|0),($148|0),16)|0);
  $150 = tempRet0;
  $sl = $149;
  $151 = $fl1;
  $fl2 = $151;
  $152 = $sl;
  $fl1 = $152;
  $153 = $0;
  $154 = ((($153)) + 108|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0);
  $157 = $sl;
  if ($156) {
   $158 = $0;
   $159 = ((($158)) + 108|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (16 - ($160))|0;
   $162 = Math_imul($157, $161)|0;
   $163 = $162 >> 4;
   $164 = $1;
   $165 = ((($164)) + 4|0);
   $1 = $165;
   $166 = HEAP32[$164>>2]|0;
   $167 = (($166) + ($163))|0;
   HEAP32[$164>>2] = $167;
   $168 = $0;
   $169 = ((($168)) + 108|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + -1)|0;
   HEAP32[$169>>2] = $171;
  } else {
   $172 = $1;
   $173 = ((($172)) + 4|0);
   $1 = $173;
   $174 = HEAP32[$172>>2]|0;
   $175 = (($174) + ($157))|0;
   HEAP32[$172>>2] = $175;
  }
  $176 = $5;
  $177 = $frac;
  $178 = (($177) + ($176))|0;
  $frac = $178;
  $179 = $frac;
  $180 = $179 >> 16;
  $181 = $pos;
  $182 = (($181) + ($180))|0;
  $pos = $182;
  $183 = $frac;
  $184 = $183 & 65535;
  $frac = $184;
 }
 $185 = $fl1;
 $186 = $0;
 $187 = ((($186)) + 72|0);
 $188 = ((($187)) + 8|0);
 HEAP32[$188>>2] = $185;
 $189 = $fl2;
 $190 = $0;
 $191 = ((($190)) + 72|0);
 $192 = ((($191)) + 12|0);
 HEAP32[$192>>2] = $189;
 STACKTOP = sp;return;
}
function _synth_init645($ctx,$freq) {
 $ctx = $ctx|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $freq;
 $3 = (_adlib_new()|0);
 $4 = $1;
 $5 = ((($4)) + 1552|0);
 $6 = ((($5)) + 7588|0);
 HEAP32[$6>>2] = $3;
 $7 = $1;
 $8 = ((($7)) + 1552|0);
 $9 = ((($8)) + 7588|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $0 = -1;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $12 = $1;
  _synth_chreset($12);
  $13 = $2;
  $14 = (_OPLCreate(8,3579545,$13)|0);
  $15 = $1;
  $16 = ((($15)) + 1552|0);
  $17 = ((($16)) + 7588|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$18>>2] = $14;
  $19 = ($14|0)!=(0|0);
  $20 = $19&1;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _synth_deinit646($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $3 = ((($2)) + 7588|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $0;
 (_synth_reset647($5)|0);
 $6 = $a;
 $7 = HEAP32[$6>>2]|0;
 _OPLDestroy($7);
 $8 = $a;
 _adlib_destroy($8);
 STACKTOP = sp;return 0;
}
function _synth_reset647($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $3 = ((($2)) + 7588|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $5 = $a;
 $6 = HEAP32[$5>>2]|0;
 _OPLResetChip($6);
 $7 = $0;
 _synth_chreset($7);
 STACKTOP = sp;return 0;
}
function _synth_setpatch($ctx,$c,$data) {
 $ctx = $ctx|0;
 $c = $c|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $c;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $5 = ((($4)) + 7588|0);
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $0;
 $8 = $1;
 $9 = (_synth_getchannel($7,$8)|0);
 $1 = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(10);
  $13 = $a;
  if (!($12)) {
   break;
  }
  $14 = $i;
  $15 = (23056 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = $i;
  $19 = (($18|0) % 2)&-1;
  $20 = (22928 + (($19*36)|0)|0);
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($16) + ($22))|0;
  $24 = $i;
  $25 = $2;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  (_opl_write($13,$23,$28)|0);
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = HEAP32[(23096)>>2]|0;
 $32 = $1;
 $33 = (($31) + ($32))|0;
 $34 = $2;
 $35 = ((($34)) + 10|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 (_opl_write($13,$33,$37)|0);
 $38 = $a;
 $39 = $1;
 $40 = (176 + ($39))|0;
 $41 = (_opl_read($38,$40)|0);
 $42 = $41&255;
 $x = $42;
 $43 = $a;
 $44 = $1;
 $45 = (176 + ($44))|0;
 $46 = $x;
 $47 = $46 & -33;
 (_opl_write($43,$45,$47)|0);
 STACKTOP = sp;return;
}
function _synth_setnote($ctx,$c,$note,$bend) {
 $ctx = $ctx|0;
 $c = $c|0;
 $note = $note|0;
 $bend = $bend|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $f = 0, $n = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $c;
 $2 = $note;
 $3 = $bend;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $6 = ((($5)) + 7588|0);
 $7 = HEAP32[$6>>2]|0;
 $a = $7;
 $8 = $0;
 $9 = $1;
 $10 = (_synth_getchannel($8,$9)|0);
 $1 = $10;
 $11 = ($10|0)<(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = (($12|0) % 12)&-1;
 $n = $13;
 $14 = $n;
 $15 = (23000 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $n;
 $18 = (($17) + 1)|0;
 $19 = (23000 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $n;
 $22 = (23000 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) - ($23))|0;
 $25 = $3;
 $26 = Math_imul($24, $25)|0;
 $27 = (($26|0) / 100)&-1;
 $28 = (($16) + ($27))|0;
 $f = $28;
 $29 = $2;
 $30 = (($29|0) / 12)&-1;
 $31 = (($30) - 2)|0;
 $o = $31;
 $32 = $o;
 $33 = ($32|0)<(0);
 $$ = $33 ? 0 : $31;
 $o = $$;
 $34 = $a;
 $35 = $1;
 $36 = (160 + ($35))|0;
 $37 = $f;
 $38 = $37 & 255;
 (_opl_write($34,$36,$38)|0);
 $39 = $a;
 $40 = $1;
 $41 = (176 + ($40))|0;
 $42 = $o;
 $43 = $42 << 2;
 $44 = $43 & 28;
 $45 = 32 | $44;
 $46 = $f;
 $47 = $46 >> 8;
 $48 = $47 & 3;
 $49 = $45 | $48;
 (_opl_write($39,$41,$49)|0);
 STACKTOP = sp;return;
}
function _synth_setvol($ctx,$c,$vol) {
 $ctx = $ctx|0;
 $c = $c|0;
 $vol = $vol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $ofs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $c;
 $2 = $vol;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $5 = ((($4)) + 7588|0);
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $7 = $0;
 $8 = $1;
 $9 = (_synth_getchannel($7,$8)|0);
 $1 = $9;
 $10 = ($9|0)<(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ($11|0)>(63);
 if ($12) {
  $2 = 63;
 }
 $13 = $a;
 $14 = $1;
 $15 = (200 + ($14))|0;
 $16 = (_opl_read($13,$15)|0);
 $17 = ($16<<24>>24)!=(0);
 if ($17) {
  $18 = $1;
  $19 = (22928 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $ofs = $20;
  $21 = $a;
  $22 = $ofs;
  $23 = (64 + ($22))|0;
  $24 = (_opl_read($21,$23)|0);
  $25 = $24&255;
  $b = $25;
  $26 = $a;
  $27 = $ofs;
  $28 = (64 + ($27))|0;
  $29 = $b;
  $30 = $29 & 192;
  $31 = $2;
  $32 = (63 - ($31))|0;
  $33 = $30 | $32;
  (_opl_write($26,$28,$33)|0);
 }
 $34 = $1;
 $35 = ((22964) + ($34<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $ofs = $36;
 $37 = $a;
 $38 = $ofs;
 $39 = (64 + ($38))|0;
 $40 = (_opl_read($37,$39)|0);
 $41 = $40&255;
 $b = $41;
 $42 = $a;
 $43 = $ofs;
 $44 = (64 + ($43))|0;
 $45 = $b;
 $46 = $45 & 192;
 $47 = $2;
 $48 = (63 - ($47))|0;
 $49 = $46 | $48;
 (_opl_write($42,$44,$49)|0);
 STACKTOP = sp;return;
}
function _synth_mixer($ctx,$tmp_bk,$count,$vl,$vr,$stereo) {
 $ctx = $ctx|0;
 $tmp_bk = $tmp_bk|0;
 $count = $count|0;
 $vl = $vl|0;
 $vr = $vr|0;
 $stereo = $stereo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $tmp_bk;
 $2 = $count;
 $3 = $vl;
 $4 = $vr;
 $5 = $stereo;
 $6 = $0;
 $7 = ((($6)) + 1552|0);
 $8 = ((($7)) + 7588|0);
 $9 = HEAP32[$8>>2]|0;
 $a = $9;
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $a;
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 _YM3812UpdateOne($13,$14,$15,$16,$17,$18);
 STACKTOP = sp;return;
}
function _synth_getchannel($ctx,$c) {
 $ctx = $ctx|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $freech = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $c;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $5 = ((($4)) + 7588|0);
 $6 = HEAP32[$5>>2]|0;
 $a = $6;
 $freech = -1;
 $7 = $2;
 $8 = (($7) + 1)|0;
 $2 = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = ($9|0)<(9);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $a;
  $13 = ((($12)) + 4|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ($15|0)==($16|0);
  $18 = $i;
  if ($17) {
   label = 4;
   break;
  }
  $19 = $a;
  $20 = ((($19)) + 4|0);
  $21 = (($20) + ($18<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)<(0);
  $24 = $i;
  if ($23) {
   label = 6;
   break;
  }
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 if ((label|0) == 4) {
  $0 = $18;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 6) {
  $freech = $24;
 }
 $26 = $freech;
 $27 = ($26|0)!=(-1);
 if ($27) {
  $28 = $2;
  $29 = $freech;
  $30 = $a;
  $31 = ((($30)) + 4|0);
  $32 = (($31) + ($29<<2)|0);
  HEAP32[$32>>2] = $28;
 }
 $33 = $freech;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _opl_read($a,$addr) {
 $a = $a|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $addr;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 (_OPLWrite($3,0,$4)|0);
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_OPLRead($6,1)|0);
 STACKTOP = sp;return ($7|0);
}
function _opl_write($a,$addr,$val) {
 $a = $a|0;
 $addr = $addr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $addr;
 $2 = $val;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 (_OPLWrite($4,0,$5)|0);
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (_OPLWrite($7,1,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _synth_chreset($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $3 = ((($2)) + 7588|0);
 $4 = HEAP32[$3>>2]|0;
 $a = $4;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(9);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $a;
  $9 = ((($8)) + 4|0);
  $10 = (($9) + ($7<<2)|0);
  HEAP32[$10>>2] = -1;
  $11 = $i;
  $12 = (($11) + 1)|0;
  $i = $12;
 }
 STACKTOP = sp;return;
}
function _adlib_destroy($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _adlib_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = (_malloc(40)|0);
 $a = $1;
 $2 = $a;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(9);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = $a;
  $8 = ((($7)) + 4|0);
  $9 = (($8) + ($6<<2)|0);
  HEAP32[$9>>2] = -1;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $a;
 $0 = $12;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _adjust_string($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = (_strlen(($2|0))|0);
  $4 = ($1>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = (_isprint($9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $i;
   $13 = $0;
   $14 = (($13) + ($12)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)>(127);
   if ($17) {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $18 = $i;
   $19 = $0;
   $20 = (($19) + ($18)|0);
   HEAP8[$20>>0] = 32;
  }
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 while(1) {
  $23 = $0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $0;
   $28 = (_strlen(($27|0))|0);
   $29 = (($28) - 1)|0;
   $30 = $0;
   $31 = (($30) + ($29)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32 << 24 >> 24;
   $34 = ($33|0)==(32);
   $40 = $34;
  } else {
   $40 = 0;
  }
  $35 = $0;
  if (!($40)) {
   break;
  }
  $36 = (_strlen(($35|0))|0);
  $37 = (($36) - 1)|0;
  $38 = $0;
  $39 = (($38) + ($37)|0);
  HEAP8[$39>>0] = 0;
 }
 STACKTOP = sp;return ($35|0);
}
function _load_prologue($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $i = 0;
 var $m = 0, $pan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $m = $2;
 $3 = $m;
 _memset(($3|0),0,1208)|0;
 $4 = $m;
 $5 = ((($4)) + 1248|0);
 HEAPF64[$5>>3] = 250.0;
 $6 = $m;
 $7 = ((($6)) + 1264|0);
 HEAP32[$7>>2] = 8287;
 $8 = $m;
 $9 = ((($8)) + 1268|0);
 HEAP32[$9>>2] = 64;
 $10 = $m;
 $11 = ((($10)) + 1272|0);
 HEAP32[$11>>2] = 64;
 $12 = $m;
 $13 = ((($12)) + 1276|0);
 HEAP32[$13>>2] = 64;
 $14 = $m;
 $15 = ((($14)) + 1280|0);
 HEAP32[$15>>2] = 0;
 $16 = $m;
 $17 = ((($16)) + 1284|0);
 HEAP32[$17>>2] = 0;
 $18 = $m;
 $19 = ((($18)) + 1288|0);
 HEAP32[$19>>2] = 0;
 $20 = $m;
 $21 = ((($20)) + 1220|0);
 HEAP32[$21>>2] = 0;
 $22 = $m;
 $23 = ((($22)) + 7592|0);
 HEAP32[$23>>2] = 0;
 $24 = $m;
 $25 = ((($24)) + 128|0);
 HEAP32[$25>>2] = 0;
 $26 = $m;
 $27 = ((($26)) + 132|0);
 HEAP32[$27>>2] = 0;
 $28 = $m;
 $29 = ((($28)) + 136|0);
 HEAP32[$29>>2] = 4;
 $30 = $m;
 $31 = ((($30)) + 140|0);
 HEAP32[$31>>2] = 0;
 $32 = $m;
 $33 = ((($32)) + 144|0);
 HEAP32[$33>>2] = 0;
 $34 = $m;
 $35 = ((($34)) + 148|0);
 HEAP32[$35>>2] = 6;
 $36 = $m;
 $37 = ((($36)) + 152|0);
 HEAP32[$37>>2] = 125;
 $38 = $m;
 $39 = ((($38)) + 156|0);
 HEAP32[$39>>2] = 0;
 $40 = $m;
 $41 = ((($40)) + 160|0);
 HEAP32[$41>>2] = 0;
 $42 = $m;
 $43 = ((($42)) + 7584|0);
 HEAP32[$43>>2] = 14672;
 $44 = $m;
 $45 = ((($44)) + 7580|0);
 HEAP32[$45>>2] = 0;
 $46 = $m;
 $47 = ((($46)) + 1256|0);
 HEAPF64[$47>>3] = 10.0;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = ($48|0)<(64);
  if (!($49)) {
   break;
  }
  $50 = $i;
  $51 = (($50) + 1)|0;
  $52 = (($51|0) / 2)&-1;
  $53 = (($52|0) % 2)&-1;
  $54 = ($53*255)|0;
  $pan = $54;
  $55 = $pan;
  $56 = (($55) - 128)|0;
  $57 = $m;
  $58 = ((($57)) + 1296|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = Math_imul($56, $59)|0;
  $61 = (($60|0) / 100)&-1;
  $62 = (128 + ($61))|0;
  $63 = $i;
  $64 = $m;
  $65 = ((($64)) + 184|0);
  $66 = (($65) + (($63*12)|0)|0);
  HEAP32[$66>>2] = $62;
  $67 = $i;
  $68 = $m;
  $69 = ((($68)) + 184|0);
  $70 = (($69) + (($67*12)|0)|0);
  $71 = ((($70)) + 4|0);
  HEAP32[$71>>2] = 64;
  $72 = $i;
  $73 = $m;
  $74 = ((($73)) + 184|0);
  $75 = (($74) + (($72*12)|0)|0);
  $76 = ((($75)) + 8|0);
  HEAP32[$76>>2] = 0;
  $77 = $i;
  $78 = (($77) + 1)|0;
  $i = $78;
 }
 STACKTOP = sp;return;
}
function _load_epilogue($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $m = 0, $mod = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $m;
 $6 = ((($5)) + 1276|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $mod;
 $9 = ((($8)) + 164|0);
 HEAP32[$9>>2] = $7;
 $10 = $mod;
 $11 = ((($10)) + 156|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(0);
 $14 = $mod;
 $15 = ((($14)) + 156|0);
 if ($13) {
  HEAP32[$15>>2] = 0;
 } else {
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)>(256);
  if ($17) {
   $18 = $mod;
   $19 = ((($18)) + 156|0);
   HEAP32[$19>>2] = 256;
  }
 }
 $20 = $mod;
 $21 = ((($20)) + 128|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)<(0);
 $24 = $mod;
 $25 = ((($24)) + 128|0);
 if ($23) {
  HEAP32[$25>>2] = 0;
 } else {
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(256);
  if ($27) {
   $28 = $mod;
   $29 = ((($28)) + 128|0);
   HEAP32[$29>>2] = 256;
  }
 }
 $30 = $mod;
 $31 = ((($30)) + 140|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)<(0);
 $34 = $mod;
 $35 = ((($34)) + 140|0);
 if ($33) {
  HEAP32[$35>>2] = 0;
 } else {
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(255);
  if ($37) {
   $38 = $mod;
   $39 = ((($38)) + 140|0);
   HEAP32[$39>>2] = 255;
  }
 }
 $40 = $mod;
 $41 = ((($40)) + 144|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)<(0);
 $44 = $mod;
 $45 = ((($44)) + 144|0);
 if ($43) {
  HEAP32[$45>>2] = 0;
 } else {
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)>(1024);
  if ($47) {
   $48 = $mod;
   $49 = ((($48)) + 144|0);
   HEAP32[$49>>2] = 1024;
  }
 }
 $50 = $mod;
 $51 = ((($50)) + 136|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)<(0);
 $54 = $mod;
 $55 = ((($54)) + 136|0);
 if ($53) {
  HEAP32[$55>>2] = 0;
 } else {
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)>(64);
  if ($57) {
   $58 = $mod;
   $59 = ((($58)) + 136|0);
   HEAP32[$59>>2] = 64;
  }
 }
 $60 = $mod;
 $61 = ((($60)) + 160|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $mod;
 $64 = ((($63)) + 156|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62|0)>=($65|0);
 if ($66) {
  $67 = $mod;
  $68 = ((($67)) + 160|0);
  HEAP32[$68>>2] = 0;
 }
 $69 = $mod;
 $70 = ((($69)) + 148|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)<=(0);
 if ($72) {
  label = 25;
 } else {
  $73 = $mod;
  $74 = ((($73)) + 148|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)>(255);
  if ($76) {
   label = 25;
  }
 }
 if ((label|0) == 25) {
  $77 = $mod;
  $78 = ((($77)) + 148|0);
  HEAP32[$78>>2] = 6;
 }
 $79 = $mod;
 $80 = ((($79)) + 152|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)<(20);
 $83 = $mod;
 $84 = ((($83)) + 152|0);
 if ($82) {
  HEAP32[$84>>2] = 20;
 } else {
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)>(255);
  if ($86) {
   $87 = $mod;
   $88 = ((($87)) + 152|0);
   HEAP32[$88>>2] = 255;
  }
 }
 $i = 0;
 while(1) {
  $89 = $i;
  $90 = $mod;
  $91 = ((($90)) + 140|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($89|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $m;
  $95 = ((($94)) + 1284|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96 ^ -1;
  $98 = $97 & 16384;
  $99 = ($98|0)!=(0);
  if ($99) {
   $100 = $m;
   $101 = ((($100)) + 1268|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $i;
   $104 = $mod;
   $105 = ((($104)) + 176|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + (($103*764)|0)|0);
   $108 = ((($107)) + 32|0);
   HEAP32[$108>>2] = $102;
  }
  $j = 0;
  while(1) {
   $109 = $j;
   $110 = $i;
   $111 = $mod;
   $112 = ((($111)) + 176|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + (($110*764)|0)|0);
   $115 = ((($114)) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($109|0)<($116|0);
   if (!($117)) {
    break;
   }
   $118 = $m;
   $119 = ((($118)) + 1284|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $120 ^ -1;
   $122 = $121 & 16384;
   $123 = ($122|0)!=(0);
   if ($123) {
    $124 = $m;
    $125 = ((($124)) + 1268|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $j;
    $128 = $i;
    $129 = $mod;
    $130 = ((($129)) + 176|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + (($128*764)|0)|0);
    $133 = ((($132)) + 756|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($134) + ($127<<6)|0);
    $136 = ((($135)) + 4|0);
    HEAP32[$136>>2] = $126;
   }
   $137 = $j;
   $138 = (($137) + 1)|0;
   $j = $138;
  }
  $139 = $i;
  $140 = (($139) + 1)|0;
  $i = $140;
 }
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = $mod;
  $143 = ((($142)) + 140|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($141|0)<($144|0);
  if (!($145)) {
   break;
  }
  $146 = $i;
  $147 = $mod;
  $148 = ((($147)) + 176|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + (($146*764)|0)|0);
  $151 = ((($150)) + 44|0);
  _check_envelope($151);
  $152 = $i;
  $153 = $mod;
  $154 = ((($153)) + 176|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + (($152*764)|0)|0);
  $157 = ((($156)) + 356|0);
  _check_envelope($157);
  $158 = $i;
  $159 = $mod;
  $160 = ((($159)) + 176|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + (($158*764)|0)|0);
  $163 = ((($162)) + 200|0);
  _check_envelope($163);
  $164 = $i;
  $165 = (($164) + 1)|0;
  $i = $165;
 }
 $166 = $p;
 $167 = ((($166)) + 24|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $p;
 $170 = ((($169)) + 28|0);
 HEAP32[$170>>2] = $168;
 $171 = $0;
 _module_quirks($171);
 STACKTOP = sp;return;
}
function _prepare_scan($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $m = 0, $mod = 0, $ord = 0, $pat = 0, $pat_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $1;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $mod;
 $6 = ((($5)) + 168|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $mod;
  $10 = ((($9)) + 172|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $ord = 0;
   while(1) {
    $13 = $ord;
    $14 = $mod;
    $15 = ((($14)) + 156|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($13|0)<($16|0);
    if ($17) {
     $18 = $ord;
     $19 = $mod;
     $20 = ((($19)) + 952|0);
     $21 = (($20) + ($18)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = $mod;
     $25 = ((($24)) + 128|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($23|0)>=($26|0);
     $107 = $27;
    } else {
     $107 = 0;
    }
    $28 = $ord;
    if (!($107)) {
     break;
    }
    $29 = (($28) + 1)|0;
    $ord = $29;
   }
   $30 = $mod;
   $31 = ((($30)) + 156|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($28|0)>=($32|0);
   $34 = $mod;
   $35 = ((($34)) + 156|0);
   if ($33) {
    HEAP32[$35>>2] = 0;
    $0 = 0;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   $36 = HEAP32[$35>>2]|0;
   $37 = (_calloc(4,$36)|0);
   $38 = $m;
   $39 = ((($38)) + 7592|0);
   HEAP32[$39>>2] = $37;
   $40 = $m;
   $41 = ((($40)) + 7592|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $0 = -6;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   $i = 0;
   while(1) {
    $44 = $i;
    $45 = $mod;
    $46 = ((($45)) + 156|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($44|0)<($47|0);
    if (!($48)) {
     label = 27;
     break;
    }
    $49 = $i;
    $50 = $mod;
    $51 = ((($50)) + 952|0);
    $52 = (($51) + ($49)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $pat_idx = $54;
    $55 = $pat_idx;
    $56 = $mod;
    $57 = ((($56)) + 128|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($55|0)<($58|0);
    if ($59) {
     $60 = $pat_idx;
     $61 = $mod;
     $62 = ((($61)) + 168|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($60<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)!=(0|0);
     if (!($66)) {
      $67 = $mod;
      $68 = $pat_idx;
      $69 = (_pattern_alloc($67,$68)|0);
      $70 = ($69|0)<(0);
      if ($70) {
       label = 18;
       break;
      }
     }
    }
    $71 = $pat_idx;
    $72 = $mod;
    $73 = ((($72)) + 128|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($71|0)>=($74|0);
    if ($75) {
     $82 = 0;
    } else {
     $76 = $pat_idx;
     $77 = $mod;
     $78 = ((($77)) + 168|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $81;
    }
    $pat = $82;
    $83 = $pat;
    $84 = ($83|0)!=(0|0);
    if ($84) {
     $85 = $pat;
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $pat;
      $89 = HEAP32[$88>>2]|0;
      $90 = $89;
     } else {
      $90 = 1;
     }
    } else {
     $90 = 1;
    }
    $91 = (_calloc(1,$90)|0);
    $92 = $i;
    $93 = $m;
    $94 = ((($93)) + 7592|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + ($92<<2)|0);
    HEAP32[$96>>2] = $91;
    $97 = $i;
    $98 = $m;
    $99 = ((($98)) + 7592|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + ($97<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(0|0);
    if ($103) {
     label = 25;
     break;
    }
    $104 = $i;
    $105 = (($104) + 1)|0;
    $i = $105;
   }
   if ((label|0) == 18) {
    $0 = -6;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   else if ((label|0) == 25) {
    $0 = -6;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
   else if ((label|0) == 27) {
    $0 = 0;
    $106 = $0;
    STACKTOP = sp;return ($106|0);
   }
  }
 }
 $0 = -4;
 $106 = $0;
 STACKTOP = sp;return ($106|0);
}
function _check_envelope($env) {
 $env = $env|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $env;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  label = 3;
 } else {
  $5 = $0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(32);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & -2;
  HEAP32[$9>>2] = $11;
 }
 $12 = $0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)>=($17|0);
 if ($18) {
  label = 6;
 } else {
  $19 = $0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($21|0)>=($24|0);
  if ($25) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & -5;
  HEAP32[$26>>2] = $28;
 }
 $29 = $0;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($31|0)>=($34|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $0;
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & -2;
 HEAP32[$36>>2] = $38;
 STACKTOP = sp;return;
}
function _module_quirks($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $m = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $p = $1;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = (23104 + (($4*20)|0)|0);
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = $m;
  $10 = ((($9)) + 1224|0);
  $11 = $i;
  $12 = (23104 + (($11*20)|0)|0);
  $13 = (_memcmp($10,$12,16)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $i;
   $16 = (23104 + (($15*20)|0)|0);
   $17 = ((($16)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $p;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 | $18;
   HEAP32[$20>>2] = $22;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 STACKTOP = sp;return;
}
function _xmp_release_module($opaque) {
 $opaque = $opaque|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ctx = 0, $i = 0, $m = 0, $mod = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $0;
 $ctx = $1;
 $2 = $ctx;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $mod = $4;
 $5 = $ctx;
 $6 = ((($5)) + 9172|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(1);
 if ($8) {
  $9 = $0;
  _xmp_end_player($9);
 }
 $10 = $ctx;
 $11 = ((($10)) + 9172|0);
 HEAP32[$11>>2] = 0;
 $12 = $ctx;
 _release_module_extras($12);
 $13 = $mod;
 $14 = ((($13)) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $i = 0;
  while(1) {
   $17 = $i;
   $18 = $mod;
   $19 = ((($18)) + 132|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $i;
   $23 = $mod;
   $24 = ((($23)) + 172|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($22<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   _free($27);
   $28 = $i;
   $29 = (($28) + 1)|0;
   $i = $29;
  }
  $30 = $mod;
  $31 = ((($30)) + 172|0);
  $32 = HEAP32[$31>>2]|0;
  _free($32);
 }
 $33 = $mod;
 $34 = ((($33)) + 168|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $i = 0;
  while(1) {
   $37 = $i;
   $38 = $mod;
   $39 = ((($38)) + 128|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($37|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $i;
   $43 = $mod;
   $44 = ((($43)) + 168|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($42<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   _free($47);
   $48 = $i;
   $49 = (($48) + 1)|0;
   $i = $49;
  }
  $50 = $mod;
  $51 = ((($50)) + 168|0);
  $52 = HEAP32[$51>>2]|0;
  _free($52);
 }
 $53 = $mod;
 $54 = ((($53)) + 176|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $i = 0;
  while(1) {
   $57 = $i;
   $58 = $mod;
   $59 = ((($58)) + 140|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($57|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = $i;
   $63 = $mod;
   $64 = ((($63)) + 176|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + (($62*764)|0)|0);
   $67 = ((($66)) + 756|0);
   $68 = HEAP32[$67>>2]|0;
   _free($68);
   $69 = $i;
   $70 = $mod;
   $71 = ((($70)) + 176|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + (($69*764)|0)|0);
   $74 = ((($73)) + 760|0);
   $75 = HEAP32[$74>>2]|0;
   _free($75);
   $76 = $i;
   $77 = (($76) + 1)|0;
   $i = $77;
  }
  $78 = $mod;
  $79 = ((($78)) + 176|0);
  $80 = HEAP32[$79>>2]|0;
  _free($80);
 }
 $81 = $mod;
 $82 = ((($81)) + 180|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)!=(0|0);
 if ($84) {
  $i = 0;
  while(1) {
   $85 = $i;
   $86 = $mod;
   $87 = ((($86)) + 144|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($85|0)<($88|0);
   if (!($89)) {
    break;
   }
   $90 = $i;
   $91 = $mod;
   $92 = ((($91)) + 180|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + (($90*52)|0)|0);
   $95 = ((($94)) + 48|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)!=(0|0);
   if ($97) {
    $98 = $i;
    $99 = $mod;
    $100 = ((($99)) + 180|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + (($98*52)|0)|0);
    $103 = ((($102)) + 48|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($104)) + -4|0);
    _free($105);
   }
   $106 = $i;
   $107 = (($106) + 1)|0;
   $i = $107;
  }
  $108 = $mod;
  $109 = ((($108)) + 180|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = $m;
 $112 = ((($111)) + 7592|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if (!($114)) {
  $131 = $m;
  $132 = ((($131)) + 1220|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
  $134 = $m;
  $135 = ((($134)) + 1208|0);
  $136 = HEAP32[$135>>2]|0;
  _free($136);
  $137 = $m;
  $138 = ((($137)) + 1212|0);
  $139 = HEAP32[$138>>2]|0;
  _free($139);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $115 = $i;
  $116 = $mod;
  $117 = ((($116)) + 156|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115|0)<($118|0);
  if (!($119)) {
   break;
  }
  $120 = $i;
  $121 = $m;
  $122 = ((($121)) + 7592|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + ($120<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
  $126 = $i;
  $127 = (($126) + 1)|0;
  $i = $127;
 }
 $128 = $m;
 $129 = ((($128)) + 7592|0);
 $130 = HEAP32[$129>>2]|0;
 _free($130);
 $131 = $m;
 $132 = ((($131)) + 1220|0);
 $133 = HEAP32[$132>>2]|0;
 _free($133);
 $134 = $m;
 $135 = ((($134)) + 1208|0);
 $136 = HEAP32[$135>>2]|0;
 _free($136);
 $137 = $m;
 $138 = ((($137)) + 1212|0);
 $139 = HEAP32[$138>>2]|0;
 _free($139);
 STACKTOP = sp;return;
}
function _xmp_load_module_from_memory($opaque,$mem,$size) {
 $opaque = $opaque|0;
 $mem = $mem|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $h = 0, $m = 0, $ret = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $mem;
 $3 = $size;
 $4 = $1;
 $ctx = $4;
 $5 = $ctx;
 $6 = ((($5)) + 1552|0);
 $m = $6;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $3;
  $10 = (($9) + -1)|0;
  $3 = $10;
 }
 $11 = $2;
 $12 = $3;
 $13 = (_hio_open_mem($11,$12)|0);
 $h = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $0 = -6;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $15 = $ctx;
 $16 = ((($15)) + 9172|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = $1;
  _xmp_release_module($19);
 }
 $20 = $m;
 $21 = ((($20)) + 1216|0);
 HEAP32[$21>>2] = 0;
 $22 = $m;
 $23 = ((($22)) + 1212|0);
 HEAP32[$23>>2] = 0;
 $24 = $m;
 $25 = ((($24)) + 1208|0);
 HEAP32[$25>>2] = 0;
 $26 = $3;
 $27 = $m;
 $28 = ((($27)) + 1240|0);
 HEAP32[$28>>2] = $26;
 $29 = $1;
 $30 = $h;
 $31 = (_load_module($29,$30)|0);
 $ret = $31;
 $32 = $h;
 (_hio_close($32)|0);
 $33 = $ret;
 $0 = $33;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _load_module($opaque,$h) {
 $opaque = $opaque|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ctx = 0, $i = 0, $j = 0, $load_result = 0, $m = 0, $mod = 0, $or$cond = 0, $ret = 0, $t = 0, $test_result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $opaque;
 $2 = $h;
 $3 = $1;
 $ctx = $3;
 $4 = $ctx;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $ctx;
 _load_prologue($7);
 $load_result = -1;
 $test_result = -1;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = (10856 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  (_hio_seek($12,0,0)|0);
  $13 = $i;
  $14 = (10856 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = (FUNCTION_TABLE_iiii[$17 & 255]($18,0,0)|0);
  $test_result = $19;
  $20 = $test_result;
  $21 = ($20|0)==(0);
  if ($21) {
   label = 4;
   break;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 if ((label|0) == 4) {
  $22 = $2;
  (_hio_seek($22,0,0)|0);
  $23 = $i;
  $24 = (10856 + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $m;
  $29 = $2;
  $30 = (FUNCTION_TABLE_iiii[$27 & 255]($28,$29,0)|0);
  $load_result = $30;
 }
 $33 = $test_result;
 $34 = ($33|0)==(0);
 $35 = $load_result;
 $36 = ($35|0)==(0);
 $or$cond = $34 & $36;
 if ($or$cond) {
  $37 = $2;
  $38 = $m;
  $39 = ((($38)) + 1224|0);
  _set_md5sum($37,$39);
 }
 $40 = $test_result;
 $41 = ($40|0)<(0);
 if ($41) {
  $42 = $m;
  $43 = ((($42)) + 1212|0);
  $44 = HEAP32[$43>>2]|0;
  _free($44);
  $45 = $m;
  $46 = ((($45)) + 1208|0);
  $47 = HEAP32[$46>>2]|0;
  _free($47);
  $0 = -3;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $48 = $load_result;
 $49 = ($48|0)<(0);
 L15: do {
  if (!($49)) {
   $50 = $mod;
   $51 = ((($50)) + 136|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)>(64);
   if (!($53)) {
    $54 = $mod;
    $55 = ((($54)) + 156|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)>(256);
    if (!($57)) {
     $58 = $mod;
     $59 = ((($58)) + 168|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if (!($61)) {
      $i = 0;
      while(1) {
       $62 = $i;
       $63 = $mod;
       $64 = ((($63)) + 128|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($62|0)<($65|0);
       if (!($66)) {
        break;
       }
       $67 = $i;
       $68 = $mod;
       $69 = ((($68)) + 168|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($70) + ($67<<2)|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ($72|0)==(0|0);
       if ($73) {
        break L15;
       }
       $j = 0;
       while(1) {
        $74 = $j;
        $75 = $mod;
        $76 = ((($75)) + 136|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($74|0)<($77|0);
        if (!($78)) {
         break;
        }
        $79 = $j;
        $80 = $i;
        $81 = $mod;
        $82 = ((($81)) + 168|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (($83) + ($80<<2)|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ((($85)) + 4|0);
        $87 = (($86) + ($79<<2)|0);
        $88 = HEAP32[$87>>2]|0;
        $t = $88;
        $89 = $t;
        $90 = ($89|0)<(0);
        if ($90) {
         break L15;
        }
        $91 = $t;
        $92 = $mod;
        $93 = ((($92)) + 132|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = ($91|0)>=($94|0);
        if ($95) {
         break L15;
        }
        $96 = $t;
        $97 = $mod;
        $98 = ((($97)) + 172|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = (($99) + ($96<<2)|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ($101|0)==(0|0);
        if ($102) {
         break L15;
        }
        $103 = $j;
        $104 = (($103) + 1)|0;
        $j = $104;
       }
       $105 = $i;
       $106 = (($105) + 1)|0;
       $i = $106;
      }
      $107 = $mod;
      (_adjust_string($107)|0);
      $108 = $ctx;
      _load_epilogue($108);
      $109 = $ctx;
      $110 = (_prepare_scan($109)|0);
      $ret = $110;
      $111 = $ret;
      $112 = ($111|0)<(0);
      if ($112) {
       $113 = $1;
       _xmp_release_module($113);
       $114 = $ret;
       $0 = $114;
       $119 = $0;
       STACKTOP = sp;return ($119|0);
      } else {
       $115 = $ctx;
       (_scan_sequences($115)|0);
       $116 = $ctx;
       $117 = ((($116)) + 9172|0);
       HEAP32[$117>>2] = 1;
       $0 = 0;
       $119 = $0;
       STACKTOP = sp;return ($119|0);
      }
     }
    }
   }
  }
 } while(0);
 $118 = $1;
 _xmp_release_module($118);
 $0 = -4;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _set_md5sum($f,$digest) {
 $f = $f|0;
 $digest = $digest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $bytes_read = 0, $ctx = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 104|0;
 $ctx = sp;
 $0 = $f;
 $1 = $digest;
 $2 = $0;
 $3 = (_hio_size($2)|0);
 $4 = ($3|0)<=(0);
 if ($4) {
  $5 = $1;
  dest=$5; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $6 = $0;
 (_hio_seek($6,0,0)|0);
 _MD5Init($ctx);
 while(1) {
  $7 = $0;
  $8 = (_hio_read($buf,1,16384,$7)|0);
  $bytes_read = $8;
  $9 = ($8|0)>(0);
  if (!($9)) {
   break;
  }
  $10 = $bytes_read;
  _MD5Update($ctx,$buf,$10);
 }
 $11 = $1;
 _MD5Final($11,$ctx);
 STACKTOP = sp;return;
}
function _mgetc($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ($2)|0);
 $4 = ($3|0)>=(1);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = $1;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $11 = (($6) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = -1;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mread($buf,$size,$num,$m) {
 $buf = $buf|0;
 $size = $size|0;
 $num = $num|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $should_read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $num;
 $4 = $m;
 $5 = $2;
 $6 = $3;
 $7 = Math_imul($5, $6)|0;
 $should_read = $7;
 $8 = $4;
 $9 = (_CAN_READ($8)|0);
 $can_read = $9;
 $10 = $can_read;
 $11 = ($10|0)<=(0);
 if ($11) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $12 = $should_read;
 $13 = $can_read;
 $14 = ($12>>>0)>($13>>>0);
 if ($14) {
  $15 = $can_read;
  $should_read = $15;
 }
 $16 = $1;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21)|0);
 $23 = $should_read;
 _memcpy(($16|0),($22|0),($23|0))|0;
 $24 = $should_read;
 $25 = $4;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($24))|0;
 HEAP32[$26>>2] = $28;
 $29 = $should_read;
 $30 = $2;
 $31 = (($29>>>0) / ($30>>>0))&-1;
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _mseek($m,$offset,$whence) {
 $m = $m|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $offset;
 $3 = $whence;
 $4 = $3;
 if ((($4|0) == 2)) {
  $38 = $1;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)<(0);
  if ($41) {
   $0 = -1;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  } else {
   $42 = $1;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $2;
   $46 = (($44) + ($45))|0;
   $47 = $1;
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = $46;
   $0 = 0;
   $49 = $0;
   STACKTOP = sp;return ($49|0);
  }
 } else if ((($4|0) == 1)) {
  $19 = $1;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>=(0);
  do {
   if ($22) {
    $23 = $2;
    $24 = $1;
    $25 = (_CAN_READ($24)|0);
    $26 = ($23|0)>($25|0);
    if (!($26)) {
     $27 = $2;
     $28 = $1;
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (0 - ($30))|0;
     $32 = ($27|0)<($31|0);
     if (!($32)) {
      break;
     }
    }
    $0 = -1;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  } while(0);
  $33 = $2;
  $34 = $1;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33))|0;
  HEAP32[$35>>2] = $37;
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 } else {
  $5 = $1;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>=(0);
  if ($8) {
   $9 = $2;
   $10 = $1;
   $11 = ((($10)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)>($12|0);
   $14 = $2;
   $15 = ($14|0)<(0);
   $or$cond = $13 | $15;
   if ($or$cond) {
    $0 = -1;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   }
  }
  $16 = $2;
  $17 = $1;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $0 = 0;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _mtell($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _meof($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(0);
 if ($5) {
  $0 = 0;
 } else {
  $6 = $1;
  $7 = (_CAN_READ($6)|0);
  $8 = ($7|0)<=(0);
  $9 = $8&1;
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _mopen($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ptr;
 $2 = $size;
 $3 = (_malloc(12)|0);
 $m = $3;
 $4 = $m;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $6 = $1;
  $7 = $m;
  HEAP32[$7>>2] = $6;
  $8 = $m;
  $9 = ((($8)) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = $2;
  $11 = $m;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = $10;
  $13 = $m;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _mclose($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return 0;
}
function _CAN_READ($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>=(0);
 if (!($5)) {
  $0 = 2147483647;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) - ($15))|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _hio_read8s($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread8s($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read8s($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read8($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread8($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read8($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read16l($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread16l($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read16l($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read16b($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread16b($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read16b($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read24l($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread24l($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read24l($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read24b($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread24b($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read24b($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read32l($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread32l($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read32l($6)|0);
  $0 = $7;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read32b($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_read32b($6)|0);
  $0 = $7;
 } else if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mread32b($10)|0);
  $0 = $11;
 } else {
  $0 = 0;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_read($buf,$size,$num,$h) {
 $buf = $buf|0;
 $size = $size|0;
 $num = $num|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $buf;
 $2 = $size;
 $3 = $num;
 $4 = $h;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 if ((($6|0) == 0)) {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = $4;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_fread(($7|0),($8|0),($9|0),($12|0))|0);
  $0 = $13;
 } else if ((($6|0) == 1)) {
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_mread($14,$15,$16,$19)|0);
  $0 = $20;
 } else {
  $0 = 0;
 }
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _hio_seek($h,$offset,$whence) {
 $h = $h|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $offset;
 $3 = $whence;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 if ((($5|0) == 0)) {
  $6 = $1;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = $3;
  $11 = (_fseek(($8|0),($9|0),($10|0))|0);
  $0 = $11;
 } else if ((($5|0) == 1)) {
  $12 = $1;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = $3;
  $17 = (_mseek($14,$15,$16)|0);
  $0 = $17;
 } else {
  $0 = -1;
 }
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _hio_tell($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_mtell($10)|0);
  $0 = $11;
 } else if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_ftell(($6|0))|0);
  $0 = $7;
 } else {
  $0 = -1;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_eof($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 0)) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_feof(($6|0))|0);
  $0 = $7;
 } else if ((($3|0) == 1)) {
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_meof($10)|0);
  $0 = $11;
 } else {
  $0 = -1;
 }
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _hio_open($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $path;
 $2 = $mode;
 $3 = (_malloc(12)|0);
 $h = $3;
 $4 = $h;
 $5 = ($4|0)==(0|0);
 do {
  if (!($5)) {
   $6 = $h;
   HEAP32[$6>>2] = 0;
   $7 = $1;
   $8 = $2;
   $9 = (_fopen(($7|0),($8|0))|0);
   $10 = $h;
   $11 = ((($10)) + 8|0);
   HEAP32[$11>>2] = $9;
   $12 = $h;
   $13 = ((($12)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   $16 = $h;
   if ($15) {
    _free($16);
    break;
   }
   $17 = ((($16)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_get_size($18)|0);
   $20 = $h;
   $21 = ((($20)) + 4|0);
   HEAP32[$21>>2] = $19;
   $22 = $h;
   $0 = $22;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 } while(0);
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _hio_open_mem($ptr,$size) {
 $ptr = $ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ptr;
 $2 = $size;
 $3 = (_malloc(12)|0);
 $h = $3;
 $4 = $h;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $6 = $h;
  HEAP32[$6>>2] = 1;
  $7 = $1;
  $8 = $2;
  $9 = (_mopen($7,$8)|0);
  $10 = $h;
  $11 = ((($10)) + 8|0);
  HEAP32[$11>>2] = $9;
  $12 = $2;
  $13 = $h;
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = $12;
  $15 = $h;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _hio_open_file($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = (_malloc(12)|0);
 $h = $2;
 $3 = $h;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $5 = $h;
  HEAP32[$5>>2] = 0;
  $6 = $1;
  $7 = $h;
  $8 = ((($7)) + 8|0);
  HEAP32[$8>>2] = $6;
  $9 = $1;
  $10 = (_get_size($9)|0);
  $11 = $h;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $h;
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _hio_close($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $h;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 1)) {
  $7 = $0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_mclose($9)|0);
  $ret = $10;
 } else if ((($2|0) == 0)) {
  $3 = $0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fclose(($5|0))|0);
  $ret = $6;
 } else {
  $ret = -1;
 }
 $11 = $0;
 _free($11);
 $12 = $ret;
 STACKTOP = sp;return ($12|0);
}
function _hio_size($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $h;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _mread8s($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (_mgetc($1)|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _mread8($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (_mgetc($1)|0);
 $3 = $2&255;
 STACKTOP = sp;return ($3|0);
}
function _mread16l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ718($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(2);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem16l($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 2)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread16b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ718($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(2);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem16b($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 2)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread24l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ718($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(3);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem24l($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 3)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread24b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ718($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(3);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem24b($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 3)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread32l($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ718($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(4);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem32l($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 4)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _mread32b($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $can_read = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = (_CAN_READ718($2)|0);
 $can_read = $3;
 $4 = $can_read;
 $5 = ($4|0)>=(4);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + ($10)|0);
  $12 = (_readmem32b($11)|0);
  $n = $12;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 4)|0;
  HEAP32[$14>>2] = $16;
  $17 = $n;
  $0 = $17;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $18 = $can_read;
  $19 = $1;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($18))|0;
  HEAP32[$20>>2] = $22;
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _get_size($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $1;
 $3 = (_ftell(($2|0))|0);
 $pos = $3;
 $4 = $pos;
 $5 = ($4|0)>=(0);
 if ($5) {
  $6 = $1;
  (_fseek(($6|0),0,2)|0);
  $7 = $1;
  $8 = (_ftell(($7|0))|0);
  $size = $8;
  $9 = $1;
  $10 = $pos;
  (_fseek(($9|0),($10|0),0)|0);
  $11 = $size;
  $0 = $11;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = $pos;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _CAN_READ718($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>=(0);
 if (!($5)) {
  $0 = 2147483647;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($12) - ($15))|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 $0 = $17;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _hmn_linear_bend($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 STACKTOP = sp;return 0;
}
function _hmn_play_extras($ctx,$xc,$chn) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ce = 0, $m = 0, $p = 0, $pos = 0, $volume = 0, $waveform = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $0;
 $p = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $1;
 $7 = ((($6)) + 432|0);
 $8 = HEAP32[$7>>2]|0;
 $ce = $8;
 $9 = $p;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 67584;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $ce;
   $18 = ((($17)) + 4|0);
   HEAP32[$18>>2] = 0;
  }
 }
 $19 = $1;
 $20 = ((($19)) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $m;
 $23 = ((($22)) + 176|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + (($21*764)|0)|0);
 $xxi = $25;
 $26 = $ce;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $pos = $28;
 $29 = $pos;
 $30 = $1;
 $31 = ((($30)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $m;
 $34 = ((($33)) + 176|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + (($32*764)|0)|0);
 $37 = ((($36)) + 760|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 12|0);
 $40 = (($39) + ($29)|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $waveform = $42;
 $43 = $pos;
 $44 = $1;
 $45 = ((($44)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $m;
 $48 = ((($47)) + 176|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + (($46*764)|0)|0);
 $51 = ((($50)) + 760|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 76|0);
 $54 = (($53) + ($43)|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 & 127;
 $volume = $57;
 $58 = $waveform;
 $59 = $xxi;
 $60 = ((($59)) + 36|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($58|0)<($61|0);
 if ($62) {
  $63 = $waveform;
  $64 = $xxi;
  $65 = ((($64)) + 756|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63<<6)|0);
  $68 = ((($67)) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $1;
  $71 = ((($70)) + 52|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69|0)!=($72|0);
  if ($73) {
   $74 = $waveform;
   $75 = $xxi;
   $76 = ((($75)) + 756|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($74<<6)|0);
   $79 = ((($78)) + 40|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $1;
   $82 = ((($81)) + 52|0);
   HEAP32[$82>>2] = $80;
   $83 = $0;
   $84 = $2;
   $85 = $1;
   $86 = ((($85)) + 52|0);
   $87 = HEAP32[$86>>2]|0;
   _virt_setsmp($83,$84,$87);
  }
 }
 $88 = $pos;
 $89 = (($88) + 1)|0;
 $pos = $89;
 $90 = $pos;
 $91 = $1;
 $92 = ((($91)) + 44|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $m;
 $95 = ((($94)) + 176|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + (($93*764)|0)|0);
 $98 = ((($97)) + 760|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($99)) + 8|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($90|0)>($101|0);
 if (!($102)) {
  $114 = $pos;
  $115 = $ce;
  $116 = ((($115)) + 4|0);
  HEAP32[$116>>2] = $114;
  $117 = $volume;
  $118 = $ce;
  $119 = ((($118)) + 8|0);
  HEAP32[$119>>2] = $117;
  STACKTOP = sp;return;
 }
 $103 = $1;
 $104 = ((($103)) + 44|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $m;
 $107 = ((($106)) + 176|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + (($105*764)|0)|0);
 $110 = ((($109)) + 760|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($111)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $pos = $113;
 $114 = $pos;
 $115 = $ce;
 $116 = ((($115)) + 4|0);
 HEAP32[$116>>2] = $114;
 $117 = $volume;
 $118 = $ce;
 $119 = ((($118)) + 8|0);
 HEAP32[$119>>2] = $117;
 STACKTOP = sp;return;
}
function _hmn_new_instrument_extras($xxi) {
 $xxi = $xxi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xxi;
 $2 = (_calloc(1,140)|0);
 $3 = $1;
 $4 = ((($3)) + 760|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 760|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 760|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 68929562;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hmn_new_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xc;
 $2 = (_calloc(1,12)|0);
 $3 = $1;
 $4 = ((($3)) + 432|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 432|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 432|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 68929562;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hmn_reset_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 432|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 ;HEAP8[$4>>0]=0|0;HEAP8[$4+1>>0]=0|0;HEAP8[$4+2>>0]=0|0;HEAP8[$4+3>>0]=0|0;HEAP8[$4+4>>0]=0|0;HEAP8[$4+5>>0]=0|0;HEAP8[$4+6>>0]=0|0;HEAP8[$4+7>>0]=0|0;
 STACKTOP = sp;return;
}
function _hmn_release_channel_extras($xc) {
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $xc;
 $1 = $0;
 $2 = ((($1)) + 432|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _hmn_new_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $m;
 $2 = (_calloc(1,4)|0);
 $3 = $1;
 $4 = ((($3)) + 7580|0);
 HEAP32[$4>>2] = $2;
 $5 = $1;
 $6 = ((($5)) + 7580|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $0 = -1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $1;
  $10 = ((($9)) + 7580|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = 68929562;
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _hmn_release_module_extras($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = ((($1)) + 7580|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 STACKTOP = sp;return;
}
function _hmn_extras_process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $4;
 $8 = $7&255;
 $cond = ($8|0)==(178);
 if (!($cond)) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 168|0);
 $11 = $5;
 $12 = $11&255;
 $13 = (23224 + ($12<<4)|0);
 dest=$10; src=$13; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $14 = $1;
 $15 = ((($14)) + 168|0);
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = 16;
 STACKTOP = sp;return;
}
function _release_module_extras($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $0;
 $2 = ((($1)) + 1552|0);
 $m = $2;
 $3 = $m;
 $4 = ((($3)) + 7580|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $m;
  $8 = ((($7)) + 7580|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(133303461);
  if ($11) {
   $12 = $m;
   _med_release_module_extras($12);
   STACKTOP = sp;return;
  }
 }
 $13 = $m;
 $14 = ((($13)) + 7580|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $m;
 $18 = ((($17)) + 7580|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(68929562);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $m;
 _hmn_release_module_extras($22);
 STACKTOP = sp;return;
}
function _new_channel_extras($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $xc;
 $3 = $1;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $m;
 $6 = ((($5)) + 7580|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $m;
  $10 = ((($9)) + 7580|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(133303461);
  if ($13) {
   $14 = $2;
   $15 = (_med_new_channel_extras($14)|0);
   $16 = ($15|0)<(0);
   if ($16) {
    $0 = -1;
    $29 = $0;
    STACKTOP = sp;return ($29|0);
   }
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $17 = $m;
  $18 = ((($17)) + 7580|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $m;
   $22 = ((($21)) + 7580|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(68929562);
   if ($25) {
    $26 = $2;
    $27 = (_hmn_new_channel_extras($26)|0);
    $28 = ($27|0)<(0);
    if ($28) {
     $0 = -1;
     $29 = $0;
     STACKTOP = sp;return ($29|0);
    }
   }
  }
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _release_channel_extras($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $5 = ((($4)) + 7580|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $m;
  $9 = ((($8)) + 7580|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(133303461);
  if ($12) {
   $13 = $1;
   _med_release_channel_extras($13);
   STACKTOP = sp;return;
  }
 }
 $14 = $m;
 $15 = ((($14)) + 7580|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $m;
 $19 = ((($18)) + 7580|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(68929562);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 _hmn_release_channel_extras($23);
 STACKTOP = sp;return;
}
function _reset_channel_extras($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $m;
 $5 = ((($4)) + 7580|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $m;
  $9 = ((($8)) + 7580|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(133303461);
  if ($12) {
   $13 = $1;
   _med_reset_channel_extras($13);
   STACKTOP = sp;return;
  }
 }
 $14 = $m;
 $15 = ((($14)) + 7580|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $m;
 $19 = ((($18)) + 7580|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(68929562);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $1;
 _hmn_reset_channel_extras($23);
 STACKTOP = sp;return;
}
function _play_extras($ctx,$xc,$chn) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $0;
 $4 = ((($3)) + 1552|0);
 $m = $4;
 $5 = $1;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $m;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)>=($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = ((($12)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $m;
 $16 = ((($15)) + 176|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($14*764)|0)|0);
 $19 = ((($18)) + 760|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $1;
  $23 = ((($22)) + 44|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $m;
  $26 = ((($25)) + 176|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + (($24*764)|0)|0);
  $29 = ((($28)) + 760|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(133303461);
  if ($32) {
   $33 = $0;
   $34 = $1;
   $35 = $2;
   _med_play_extras($33,$34,$35);
   STACKTOP = sp;return;
  }
 }
 $36 = $1;
 $37 = ((($36)) + 44|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $m;
 $40 = ((($39)) + 176|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + (($38*764)|0)|0);
 $43 = ((($42)) + 760|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $1;
 $47 = ((($46)) + 44|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $m;
 $50 = ((($49)) + 176|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + (($48*764)|0)|0);
 $53 = ((($52)) + 760|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(68929562);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $57 = $0;
 $58 = $1;
 $59 = $2;
 _hmn_play_extras($57,$58,$59);
 STACKTOP = sp;return;
}
function _extras_get_volume($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $m = 0;
 var $vol = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $0;
 $3 = ((($2)) + 1552|0);
 $m = $3;
 $4 = $1;
 $5 = ((($4)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $m;
 $8 = ((($7)) + 140|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>=($9|0);
 $11 = $1;
 if ($10) {
  $12 = ((($11)) + 84|0);
  $13 = HEAP32[$12>>2]|0;
  $vol = $13;
  $78 = $vol;
  STACKTOP = sp;return ($78|0);
 }
 $14 = ((($11)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $m;
 $17 = ((($16)) + 176|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + (($15*764)|0)|0);
 $20 = ((($19)) + 760|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $1;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $m;
  $27 = ((($26)) + 176|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + (($25*764)|0)|0);
  $30 = ((($29)) + 760|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(133303461);
  if ($33) {
   $34 = $1;
   $35 = ((($34)) + 432|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = ((($39)) + 84|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = Math_imul($38, $41)|0;
   $43 = (($42|0) / 64)&-1;
   $vol = $43;
   $78 = $vol;
   STACKTOP = sp;return ($78|0);
  }
 }
 $44 = $1;
 $45 = ((($44)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $m;
 $48 = ((($47)) + 176|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + (($46*764)|0)|0);
 $51 = ((($50)) + 760|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $1;
  $55 = ((($54)) + 44|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $m;
  $58 = ((($57)) + 176|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + (($56*764)|0)|0);
  $61 = ((($60)) + 760|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(68929562);
  if ($64) {
   $65 = $1;
   $66 = ((($65)) + 432|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $1;
   $71 = ((($70)) + 84|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = Math_imul($69, $72)|0;
   $74 = (($73|0) / 64)&-1;
   $vol = $74;
   $78 = $vol;
   STACKTOP = sp;return ($78|0);
  }
 }
 $75 = $1;
 $76 = ((($75)) + 84|0);
 $77 = HEAP32[$76>>2]|0;
 $vol = $77;
 $78 = $vol;
 STACKTOP = sp;return ($78|0);
}
function _extras_get_period($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $period = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 432|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 432|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(133303461);
  if ($10) {
   $11 = $0;
   $12 = $1;
   $13 = (_med_change_period($11,$12)|0);
   $period = $13;
   $14 = $period;
   STACKTOP = sp;return ($14|0);
  }
 }
 $period = 0;
 $14 = $period;
 STACKTOP = sp;return ($14|0);
}
function _extras_get_linear_bend($ctx,$xc) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $linear_bend = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $1;
 $3 = ((($2)) + 432|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 432|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(133303461);
  if ($10) {
   $11 = $0;
   $12 = $1;
   $13 = (_med_linear_bend($11,$12)|0);
   $linear_bend = $13;
   $26 = $linear_bend;
   STACKTOP = sp;return ($26|0);
  }
 }
 $14 = $1;
 $15 = ((($14)) + 432|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 432|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(68929562);
  if ($22) {
   $23 = $0;
   $24 = $1;
   $25 = (_hmn_linear_bend($23,$24)|0);
   $linear_bend = $25;
   $26 = $linear_bend;
   STACKTOP = sp;return ($26|0);
  }
 }
 $linear_bend = 0;
 $26 = $linear_bend;
 STACKTOP = sp;return ($26|0);
}
function _extras_process_fx($ctx,$xc,$chn,$note,$fxt,$fxp,$fnum) {
 $ctx = $ctx|0;
 $xc = $xc|0;
 $chn = $chn|0;
 $note = $note|0;
 $fxt = $fxt|0;
 $fxp = $fxp|0;
 $fnum = $fnum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $xc;
 $2 = $chn;
 $3 = $note;
 $4 = $fxt;
 $5 = $fxp;
 $6 = $fnum;
 $7 = $1;
 $8 = ((($7)) + 432|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 432|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(133303461);
  if ($15) {
   $16 = $0;
   $17 = $1;
   $18 = $2;
   $19 = $3;
   $20 = $4;
   $21 = $5;
   $22 = $6;
   _med_extras_process_fx($16,$17,$18,$19,$20,$21,$22);
   STACKTOP = sp;return;
  }
 }
 $23 = $1;
 $24 = ((($23)) + 432|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $1;
 $28 = ((($27)) + 432|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(68929562);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $0;
 $33 = $1;
 $34 = $2;
 $35 = $3;
 $36 = $4;
 $37 = $5;
 $38 = $6;
 _hmn_extras_process_fx($32,$33,$34,$35,$36,$37,$38);
 STACKTOP = sp;return;
}
function _get_instrument($ctx,$ins) {
 $ctx = $ctx|0;
 $ins = $ins|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, $smix = 0, $xxi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $ins;
 $2 = $0;
 $3 = ((($2)) + 9152|0);
 $smix = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $1;
 $8 = $mod;
 $9 = ((($8)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)<($10|0);
 $12 = $1;
 $13 = $mod;
 if ($11) {
  $14 = ((($13)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*764)|0)|0);
  $xxi = $16;
  $33 = $xxi;
  STACKTOP = sp;return ($33|0);
 }
 $17 = ((($13)) + 140|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $smix;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $23 = ($12|0)<($22|0);
 if ($23) {
  $24 = $1;
  $25 = $mod;
  $26 = ((($25)) + 140|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) - ($27))|0;
  $29 = $smix;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*764)|0)|0);
  $xxi = $32;
  $33 = $xxi;
  STACKTOP = sp;return ($33|0);
 } else {
  $xxi = 0;
  $33 = $xxi;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _get_sample($ctx,$smp) {
 $ctx = $ctx|0;
 $smp = $smp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $mod = 0, $smix = 0, $xxs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ctx;
 $1 = $smp;
 $2 = $0;
 $3 = ((($2)) + 9152|0);
 $smix = $3;
 $4 = $0;
 $5 = ((($4)) + 1552|0);
 $m = $5;
 $6 = $m;
 $mod = $6;
 $7 = $1;
 $8 = $mod;
 $9 = ((($8)) + 144|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)<($10|0);
 $12 = $1;
 $13 = $mod;
 if ($11) {
  $14 = ((($13)) + 180|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + (($12*52)|0)|0);
  $xxs = $16;
  $33 = $xxs;
  STACKTOP = sp;return ($33|0);
 }
 $17 = ((($13)) + 144|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $smix;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) + ($21))|0;
 $23 = ($12|0)<($22|0);
 if ($23) {
  $24 = $1;
  $25 = $mod;
  $26 = ((($25)) + 144|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) - ($27))|0;
  $29 = $smix;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + (($28*52)|0)|0);
  $xxs = $32;
  $33 = $xxs;
  STACKTOP = sp;return ($33|0);
 } else {
  $xxs = 0;
  $33 = $xxs;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _make_temp_file($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0;
 var $temp = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp + 16|0;
 $1 = $filename;
 $2 = (_get_temp_dir($tmp,4096)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 (_strncat($tmp,23480,4086)|0);
 $4 = (___strdup($tmp)|0);
 $5 = $1;
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_mkstemp($8)|0);
  $fd = $9;
  $10 = ($9|0)<(0);
  do {
   if (!($10)) {
    $11 = $fd;
    $12 = (_fdopen(($11|0),(23496|0))|0);
    $temp = $12;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $15 = $fd;
     (_close(($15|0))|0);
     break;
    }
    $14 = $temp;
    $0 = $14;
    $18 = $0;
    STACKTOP = sp;return ($18|0);
   }
  } while(0);
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  _free($17);
 }
 $0 = 0;
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _unlink_temp_file($temp) {
 $temp = $temp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $temp;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 (_unlink(($3|0))|0);
 $4 = $0;
 _free($4);
 STACKTOP = sp;return;
}
function _get_temp_dir($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $buf;
 $1 = $size;
 $2 = (_getenv((23504|0))|0);
 $tmp = $2;
 $3 = $tmp;
 $4 = ($3|0)!=(0|0);
 $5 = $0;
 $6 = $1;
 if ($4) {
  $7 = $tmp;
  HEAP32[$vararg_buffer>>2] = $7;
  (_snprintf($5,$6,23512,$vararg_buffer)|0);
  STACKTOP = sp;return 0;
 } else {
  (_strncpy(($5|0),(23520|0),($6|0))|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _initXmp() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmp_create_context()|0);
 HEAP32[23528>>2] = $0;
 return 0;
}
function _loadXmpModule($buf,$len) {
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buf;
 $1 = $len;
 $2 = HEAP32[23528>>2]|0;
 $3 = $0;
 $4 = $1;
 $5 = (_xmp_load_module_from_memory($2,$3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _startXmpPlayer($rate) {
 $rate = $rate|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rate;
 $1 = HEAP32[23528>>2]|0;
 $2 = $0;
 (_xmp_start_player($1,$2,0)|0);
 STACKTOP = sp;return 0;
}
function _playXmpFrame() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[23528>>2]|0;
 $1 = (_xmp_play_frame($0)|0);
 return ($1|0);
}
function _getXmpFrameInfo() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[23528>>2]|0;
 _xmp_get_frame_info($0,23536);
 return 0;
}
function _getXmpModuleInfo() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[23528>>2]|0;
 _xmp_get_module_info($0,25144);
 return 0;
}
function _getXmpLoopCount() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(23592)>>2]|0;
 return ($0|0);
}
function _getXmpSoundBufferLen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(23580)>>2]|0;
 return ($0|0);
}
function _getXmpSoundBuffer() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(23576)>>2]|0;
 return ($0|0);
}
function _endXmp() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[23528>>2]|0;
 _xmp_end_player($0);
 $1 = HEAP32[23528>>2]|0;
 _xmp_release_module($1);
 $2 = HEAP32[23528>>2]|0;
 _xmp_free_context($2);
 return 0;
}
function _getMusicInfo() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[23528>>2]|0;
 _xmp_get_module_info($0,25144);
 $1 = HEAP32[(25164)>>2]|0;
 HEAP32[25184>>2] = $1;
 $2 = HEAP32[(25164)>>2]|0;
 $3 = ((($2)) + 64|0);
 HEAP32[(25188)>>2] = $3;
 return (25184|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 return ($2|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$66 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre6$i = 0, $$pre6$i26 = 0, $$sum = 0, $$sum$i = 0, $$sum$i17 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i29 = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond68 = 0, $or$cond6873 = 0, $or$cond72 = 0;
 var $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $sum = 0, $sum$i = 0, $sum$i16 = 0, $tmp$i = 0, $tmp$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i25 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = ((($lp)) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$51 = 0;$head$076 = $base;$pshift$077 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$076;
     $18 = ($pshift$077|0)>(1);
     L42: do {
      if ($18) {
       $$012$i = $pshift$077;$$03$i = $head$076;$24 = $head$076;$i$04$i = 1;
       while(1) {
        $19 = (($$03$i) + ($10)|0);
        $20 = (($$012$i) + -2)|0;
        $21 = (($lp) + ($20<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $sum$i = (($22) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $23 = (($$03$i) + ($$sum$i)|0);
        $25 = (FUNCTION_TABLE_iii[$cmp & 511]($24,$23)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (FUNCTION_TABLE_iii[$cmp & 511]($24,$19)|0);
         $28 = ($27|0)>(-1);
         if ($28) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $29 = (FUNCTION_TABLE_iii[$cmp & 511]($23,$19)|0);
        $30 = ($29|0)>(-1);
        $31 = (($i$04$i) + 1)|0;
        $32 = (($ar$i) + ($i$04$i<<2)|0);
        if ($30) {
         HEAP32[$32>>2] = $23;
         $33 = (($$012$i) + -1)|0;
         $$0$be$i = $23;$$01$be$i = $33;
        } else {
         HEAP32[$32>>2] = $19;
         $$0$be$i = $19;$$01$be$i = $20;
        }
        $34 = ($$01$be$i|0)>(1);
        if (!($34)) {
         $i$0$lcssa$i = $31;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
       }
       $35 = ($i$0$lcssa$i|0)<(2);
       if (!($35)) {
        $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$36>>2] = $tmp$i;
        if (!($13)) {
         $$02$us$i = $width;$48 = $tmp$i;
         while(1) {
          $46 = ($$02$us$i>>>0)>(256);
          $38 = $46 ? 256 : $$02$us$i;
          $47 = HEAP32[$ar$i>>2]|0;
          _memcpy(($48|0),($47|0),($38|0))|0;
          $44 = $47;$i$01$us$i = 0;
          while(1) {
           $40 = (($ar$i) + ($i$01$us$i<<2)|0);
           $41 = (($i$01$us$i) + 1)|0;
           $42 = (($ar$i) + ($41<<2)|0);
           $43 = HEAP32[$42>>2]|0;
           _memcpy(($44|0),($43|0),($38|0))|0;
           $45 = (($44) + ($38)|0);
           HEAP32[$40>>2] = $45;
           $exitcond$i = ($41|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $44 = $43;$i$01$us$i = $41;
           }
          }
          $37 = ($$02$us$i|0)==($38|0);
          if ($37) {
           break L42;
          }
          $39 = (($$02$us$i) - ($38))|0;
          $$pre6$i = HEAP32[$36>>2]|0;
          $$02$us$i = $39;$48 = $$pre6$i;
         }
        }
       }
      } else {
      }
     } while(0);
     $49 = $16 >>> 2;
     $50 = $51 << 30;
     $52 = $49 | $50;
     $53 = $51 >>> 2;
     $54 = (($pshift$077) + 2)|0;
     $105 = $52;$168 = $53;$pshift$1 = $54;
    } else {
     $55 = (($pshift$077) + -1)|0;
     $56 = (($lp) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $head$076;
     $59 = (($14) - ($58))|0;
     $60 = ($57>>>0)<($59>>>0);
     if ($60) {
      HEAP32[$ar$i>>2] = $head$076;
      $61 = ($pshift$077|0)>(1);
      L16: do {
       if ($61) {
        $$012$i15 = $pshift$077;$$03$i14 = $head$076;$67 = $head$076;$i$04$i13 = 1;
        while(1) {
         $62 = (($$03$i14) + ($10)|0);
         $63 = (($$012$i15) + -2)|0;
         $64 = (($lp) + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $sum$i16 = (($65) + ($width))|0;
         $$sum$i17 = (0 - ($sum$i16))|0;
         $66 = (($$03$i14) + ($$sum$i17)|0);
         $68 = (FUNCTION_TABLE_iii[$cmp & 511]($67,$66)|0);
         $69 = ($68|0)>(-1);
         if ($69) {
          $70 = (FUNCTION_TABLE_iii[$cmp & 511]($67,$62)|0);
          $71 = ($70|0)>(-1);
          if ($71) {
           $i$0$lcssa$i23 = $i$04$i13;
           break;
          }
         }
         $72 = (FUNCTION_TABLE_iii[$cmp & 511]($66,$62)|0);
         $73 = ($72|0)>(-1);
         $74 = (($i$04$i13) + 1)|0;
         $75 = (($ar$i) + ($i$04$i13<<2)|0);
         if ($73) {
          HEAP32[$75>>2] = $66;
          $76 = (($$012$i15) + -1)|0;
          $$0$be$i19 = $66;$$01$be$i18 = $76;
         } else {
          HEAP32[$75>>2] = $62;
          $$0$be$i19 = $62;$$01$be$i18 = $63;
         }
         $77 = ($$01$be$i18|0)>(1);
         if (!($77)) {
          $i$0$lcssa$i23 = $74;
          break;
         }
         $$pre$i21 = HEAP32[$ar$i>>2]|0;
         $$012$i15 = $$01$be$i18;$$03$i14 = $$0$be$i19;$67 = $$pre$i21;$i$04$i13 = $74;
        }
        $78 = ($i$0$lcssa$i23|0)<(2);
        if (!($78)) {
         $79 = (($ar$i) + ($i$0$lcssa$i23<<2)|0);
         HEAP32[$79>>2] = $tmp$i25;
         if (!($13)) {
          $$02$us$i30 = $width;$91 = $tmp$i25;
          while(1) {
           $89 = ($$02$us$i30>>>0)>(256);
           $81 = $89 ? 256 : $$02$us$i30;
           $90 = HEAP32[$ar$i>>2]|0;
           _memcpy(($91|0),($90|0),($81|0))|0;
           $87 = $90;$i$01$us$i28 = 0;
           while(1) {
            $83 = (($ar$i) + ($i$01$us$i28<<2)|0);
            $84 = (($i$01$us$i28) + 1)|0;
            $85 = (($ar$i) + ($84<<2)|0);
            $86 = HEAP32[$85>>2]|0;
            _memcpy(($87|0),($86|0),($81|0))|0;
            $88 = (($87) + ($81)|0);
            HEAP32[$83>>2] = $88;
            $exitcond$i29 = ($84|0)==($i$0$lcssa$i23|0);
            if ($exitcond$i29) {
             break;
            } else {
             $87 = $86;$i$01$us$i28 = $84;
            }
           }
           $80 = ($$02$us$i30|0)==($81|0);
           if ($80) {
            break L16;
           }
           $82 = (($$02$us$i30) - ($81))|0;
           $$pre6$i26 = HEAP32[$79>>2]|0;
           $$02$us$i30 = $82;$91 = $$pre6$i26;
          }
         }
        }
       } else {
       }
      } while(0);
     } else {
      _trinkle($head$076,$width,$cmp,$16,$51,$pshift$077,0,$lp);
     }
     $92 = ($pshift$077|0)==(1);
     if ($92) {
      $93 = $51 << 1;
      $94 = $16 >>> 31;
      $95 = $94 | $93;
      $96 = $16 << 1;
      $105 = $96;$168 = $95;$pshift$1 = 0;
      break;
     } else {
      $97 = ($55>>>0)>(31);
      $98 = (($pshift$077) + -33)|0;
      $$ = $97 ? 0 : $16;
      $$66 = $97 ? $16 : $51;
      $$67 = $97 ? $98 : $55;
      $99 = $$66 << $$67;
      $100 = (32 - ($$67))|0;
      $101 = $$ >>> $100;
      $102 = $101 | $99;
      $103 = $$ << $$67;
      $105 = $103;$168 = $102;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $104 = $105 | 1;
   $106 = (($head$076) + ($width)|0);
   $107 = ($106>>>0)<($11>>>0);
   if ($107) {
    $16 = $104;$51 = $168;$head$076 = $106;$pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;$$lcssa71 = $104;$head$0$lcssa = $106;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;$$lcssa71 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa71,$$lcssa70,$pshift$0$lcssa,0,$lp);
 $108 = ($pshift$0$lcssa|0)==(1);
 $109 = ($$lcssa71|0)==(1);
 $or$cond72 = $109 & $108;
 $110 = ($$lcssa70|0)==(0);
 $or$cond6873 = $110 & $or$cond72;
 if ($or$cond6873) {
  STACKTOP = sp;return;
 } else {
  $113 = $$lcssa71;$122 = $$lcssa70;$head$174 = $head$0$lcssa;$pshift$275 = $pshift$0$lcssa;
 }
 while(1) {
  $111 = ($pshift$275|0)<(2);
  if (!($111)) {
   $136 = $122 << 2;
   $137 = $113 >>> 30;
   $138 = $137 | $136;
   $139 = (($pshift$275) + -2)|0;
   $140 = $113 << 1;
   $141 = $140 & 2147483646;
   $142 = $137 << 31;
   $143 = $141 | $142;
   $144 = $143 ^ 3;
   $145 = $138 >>> 1;
   $146 = (($lp) + ($139<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $sum = (($147) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $148 = (($head$174) + ($$sum2)|0);
   $149 = (($pshift$275) + -1)|0;
   _trinkle($148,$width,$cmp,$144,$145,$149,1,$lp);
   $150 = $145 << 1;
   $151 = $137 & 1;
   $152 = $150 | $151;
   $153 = $144 << 1;
   $154 = $153 | 1;
   $155 = (($head$174) + ($10)|0);
   _trinkle($155,$width,$cmp,$154,$152,$139,1,$lp);
   $113 = $154;$122 = $152;$head$174 = $155;$pshift$275 = $139;
   continue;
  }
  $112 = (($113) + -1)|0;
  $114 = ($112|0)==(0);
  do {
   if ($114) {
    $135 = 32;
    label = 56;
   } else {
    $115 = $112 & 1;
    $116 = ($115|0)==(0);
    if ($116) {
     $$02$i$i = $112;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $117 = (($nTrailingZeros$03$i$i) + 1)|0;
      $118 = $$02$i$i >>> 1;
      $119 = $118 & 1;
      $120 = ($119|0)==(0);
      if ($120) {
       $$02$i$i = $118;$nTrailingZeros$03$i$i = $117;
      } else {
       $$lcssa = $117;
       break;
      }
     }
     $121 = ($$lcssa|0)==(0);
     if ($121) {
      label = 51;
     } else {
      $132 = $$lcssa;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     $123 = ($122|0)==(0);
     if ($123) {
      $135 = 64;
      label = 56;
      break;
     }
     $124 = $122 & 1;
     $125 = ($124|0)==(0);
     if ($125) {
      $$02$i3$i = $122;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     }
     while(1) {
      $126 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $127 = $$02$i3$i >>> 1;
      $128 = $127 & 1;
      $129 = ($128|0)==(0);
      if ($129) {
       $$02$i3$i = $127;$nTrailingZeros$03$i2$i = $126;
      } else {
       $$lcssa102 = $126;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      }
     }
     $130 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
     $131 = ($$lcssa102|0)==(0);
     if ($131) {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     } else {
      $132 = $130;
     }
    }
    $133 = ($132>>>0)>(31);
    if ($133) {
     $135 = $132;
     label = 56;
    } else {
     $$0$i44 = $132;$157 = $113;$160 = $122;$164 = $132;
    }
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $134 = (($135) + -32)|0;
   $$0$i44 = $134;$157 = $122;$160 = 0;$164 = $135;
  }
  $156 = $157 >>> $$0$i44;
  $158 = (32 - ($$0$i44))|0;
  $159 = $160 << $158;
  $161 = $159 | $156;
  $162 = $160 >>> $$0$i44;
  $163 = (($164) + ($pshift$275))|0;
  $$pre = (($head$174) + ($10)|0);
  $165 = ($163|0)==(1);
  $166 = ($161|0)==(1);
  $or$cond = $166 & $165;
  $167 = ($162|0)==(0);
  $or$cond68 = $167 & $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $113 = $161;$122 = $162;$head$174 = $$pre;$pshift$275 = $163;
  }
 }
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = ((($$0211)) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = ((($w$08)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = ((($$1)) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = ((($$023)) + 1|0);
    $7 = ((($$05)) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre6$i = 0, $$pre6$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i9 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $pp$val1666 = 0, $sum = 0, $sum$i = 0, $tmp$i = 0, $tmp$i5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i5 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 511]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $$01162 = $head;$$02964 = $pshift;$$03865 = $trusty;$16 = $7;$33 = $pp$1$val;$i$01063 = 1;$pp$val1666 = $pp$val;
    while(1) {
     $10 = ($$03865|0)==(0);
     $11 = ($$02964|0)>(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($$01162) + ($0)|0);
      $13 = (($$02964) + -2)|0;
      $14 = (($lp) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $17 = (FUNCTION_TABLE_iii[$cmp & 511]($12,$16)|0);
      $18 = ($17|0)>(-1);
      if ($18) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
      $sum = (($15) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $19 = (($$01162) + ($$sum)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 511]($19,$16)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
     }
     $22 = (($i$01063) + 1)|0;
     $23 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$23>>2] = $16;
     $24 = (($pp$val1666) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $46 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $$lcssa = $28;
          break;
         }
        }
        $32 = ($$lcssa|0)==(0);
        if ($32) {
         label = 10;
        } else {
         $43 = $$lcssa;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $34 = ($33|0)==(0);
        if ($34) {
         $46 = 64;
         label = 15;
         break;
        }
        $35 = $33 & 1;
        $36 = ($35|0)==(0);
        if ($36) {
         $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        }
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$lcssa76 = $37;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $41 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $42 = ($$lcssa76|0)==(0);
        if ($42) {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        } else {
         $43 = $41;
        }
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $pp$val1666;$51 = $33;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$02964))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa49 = $16;$$02$lcssa51 = $54;$i$0$lcssa50 = $22;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($16) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 511]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $16;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $22;
      label = 18;
      break;
     } else {
      $$01162$phi = $16;$$02964 = $54;$$03865 = 0;$16 = $62;$33 = $53;$i$01063 = $22;$pp$val1666 = $52;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $66 = ($i$0$lcssa50|0)<(2);
 L30: do {
  if (!($66)) {
   $67 = (($ar) + ($i$0$lcssa50<<2)|0);
   HEAP32[$67>>2] = $tmp$i5;
   $68 = ($width|0)==(0);
   if (!($68)) {
    $$02$us$i10 = $width;$80 = $tmp$i5;
    while(1) {
     $78 = ($$02$us$i10>>>0)>(256);
     $70 = $78 ? 256 : $$02$us$i10;
     $79 = HEAP32[$ar>>2]|0;
     _memcpy(($80|0),($79|0),($70|0))|0;
     $76 = $79;$i$01$us$i8 = 0;
     while(1) {
      $72 = (($ar) + ($i$01$us$i8<<2)|0);
      $73 = (($i$01$us$i8) + 1)|0;
      $74 = (($ar) + ($73<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      _memcpy(($76|0),($75|0),($70|0))|0;
      $77 = (($76) + ($70)|0);
      HEAP32[$72>>2] = $77;
      $exitcond$i9 = ($73|0)==($i$0$lcssa50|0);
      if ($exitcond$i9) {
       break;
      } else {
       $76 = $75;$i$01$us$i8 = $73;
      }
     }
     $69 = ($$02$us$i10|0)==($70|0);
     if ($69) {
      break L30;
     }
     $71 = (($$02$us$i10) - ($70))|0;
     $$pre6$i6 = HEAP32[$67>>2]|0;
     $$02$us$i10 = $71;$80 = $$pre6$i6;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $81 = ($$02$lcssa51|0)>(1);
 L39: do {
  if ($81) {
   $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$87 = $$0$lcssa49;$i$04$i = 1;
   while(1) {
    $82 = (($$03$i) + ($0)|0);
    $83 = (($$012$i) + -2)|0;
    $84 = (($lp) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $sum$i = (($85) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $86 = (($$03$i) + ($$sum$i)|0);
    $88 = (FUNCTION_TABLE_iii[$cmp & 511]($87,$86)|0);
    $89 = ($88|0)>(-1);
    if ($89) {
     $90 = (FUNCTION_TABLE_iii[$cmp & 511]($87,$82)|0);
     $91 = ($90|0)>(-1);
     if ($91) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $92 = (FUNCTION_TABLE_iii[$cmp & 511]($86,$82)|0);
    $93 = ($92|0)>(-1);
    $94 = (($i$04$i) + 1)|0;
    $95 = (($ar$i) + ($i$04$i<<2)|0);
    if ($93) {
     HEAP32[$95>>2] = $86;
     $96 = (($$012$i) + -1)|0;
     $$0$be$i = $86;$$01$be$i = $96;
    } else {
     HEAP32[$95>>2] = $82;
     $$0$be$i = $82;$$01$be$i = $83;
    }
    $97 = ($$01$be$i|0)>(1);
    if (!($97)) {
     $i$0$lcssa$i = $94;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$87 = $$pre$i;$i$04$i = $94;
   }
   $98 = ($i$0$lcssa$i|0)<(2);
   if ($98) {
    $113 = $tmp$i;
   } else {
    $99 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$99>>2] = $tmp$i;
    $100 = ($width|0)==(0);
    if ($100) {
     $113 = $tmp$i;
    } else {
     $$02$us$i = $width;$112 = $tmp$i;
     while(1) {
      $110 = ($$02$us$i>>>0)>(256);
      $102 = $110 ? 256 : $$02$us$i;
      $111 = HEAP32[$ar$i>>2]|0;
      _memcpy(($112|0),($111|0),($102|0))|0;
      $108 = $111;$i$01$us$i = 0;
      while(1) {
       $104 = (($ar$i) + ($i$01$us$i<<2)|0);
       $105 = (($i$01$us$i) + 1)|0;
       $106 = (($ar$i) + ($105<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       _memcpy(($108|0),($107|0),($102|0))|0;
       $109 = (($108) + ($102)|0);
       HEAP32[$104>>2] = $109;
       $exitcond$i = ($105|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $108 = $107;$i$01$us$i = $105;
       }
      }
      $101 = ($$02$us$i|0)==($102|0);
      if ($101) {
       $113 = $tmp$i;
       break L39;
      }
      $103 = (($$02$us$i) - ($102))|0;
      $$pre6$i = HEAP32[$99>>2]|0;
      $$02$us$i = $103;$112 = $$pre6$i;
     }
    }
   }
  } else {
   $113 = $tmp$i;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0.0, $9 = 0.0, $hx$0 = 0, $k$0 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = ($1>>>0)<(1048576);
 $3 = ($1|0)<(0);
 $or$cond = $3 | $2;
 do {
  if ($or$cond) {
   $4 = $1 & 2147483647;
   $5 = ($0|0)==(0);
   $6 = ($4|0)==(0);
   $7 = $5 & $6;
   if ($7) {
    $8 = $x * $x;
    $9 = -1.0 / $8;
    $$0 = $9;
    return (+$$0);
   }
   if (!($3)) {
    $12 = $x * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $12;$13 = HEAP32[tempDoublePtr>>2]|0;
    $14 = HEAP32[tempDoublePtr+4>>2]|0;
    $26 = $13;$70 = $14;$hx$0 = $14;$k$0 = -1077;
    break;
   }
   $10 = $x - $x;
   $11 = $10 / 0.0;
   $$0 = $11;
   return (+$$0);
  } else {
   $15 = ($1>>>0)>(2146435071);
   if ($15) {
    $$0 = $x;
    return (+$$0);
   }
   $16 = ($1|0)==(1072693248);
   $17 = ($0|0)==(0);
   $18 = (0)==(0);
   $19 = $17 & $18;
   $or$cond4 = $19 & $16;
   if ($or$cond4) {
    $$0 = 0.0;
    return (+$$0);
   } else {
    $26 = $0;$70 = $1;$hx$0 = $1;$k$0 = -1023;
   }
  }
 } while(0);
 $20 = (($hx$0) + 614242)|0;
 $21 = $20 >>> 20;
 $22 = (($k$0) + ($21))|0;
 $23 = $20 & 1048575;
 $24 = (($23) + 1072079006)|0;
 HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
 $27 = $25 + -1.0;
 $28 = $27 * 0.5;
 $29 = $27 * $28;
 $30 = $27 + 2.0;
 $31 = $27 / $30;
 $32 = $31 * $31;
 $33 = $32 * $32;
 $34 = $33 * 0.15313837699209373;
 $35 = $34 + 0.22222198432149784;
 $36 = $33 * $35;
 $37 = $36 + 0.39999999999409419;
 $38 = $33 * $37;
 $39 = $33 * 0.14798198605116586;
 $40 = $39 + 0.1818357216161805;
 $41 = $33 * $40;
 $42 = $41 + 0.28571428743662391;
 $43 = $33 * $42;
 $44 = $43 + 0.66666666666667351;
 $45 = $32 * $44;
 $46 = $38 + $45;
 $47 = $27 - $29;
 HEAPF64[tempDoublePtr>>3] = $47;$48 = HEAP32[tempDoublePtr>>2]|0;
 $49 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $49;$50 = +HEAPF64[tempDoublePtr>>3];
 $51 = $27 - $50;
 $52 = $51 - $29;
 $53 = $29 + $46;
 $54 = $31 * $53;
 $55 = $54 + $52;
 $56 = $50 * 0.43429448187816888;
 $57 = (+($22|0));
 $58 = $57 * 0.30102999566361177;
 $59 = $57 * 3.6942390771589308E-13;
 $60 = $50 + $55;
 $61 = $60 * 2.5082946711645275E-11;
 $62 = $59 + $61;
 $63 = $55 * 0.43429448187816888;
 $64 = $63 + $62;
 $65 = $58 + $56;
 $66 = $58 - $65;
 $67 = $56 + $66;
 $68 = $67 + $64;
 $69 = $65 + $68;
 $$0 = $69;
 return (+$$0);
}
function _round($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $__x = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = ($4>>>0)>(1074);
 if ($5) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $6 = ($1|0)<(0);
 $7 = -$x;
 $$x = $6 ? $7 : $x;
 $8 = ($4>>>0)<(1022);
 $9 = $$x + 4503599627370496.0;
 if ($8) {
  $__x = $9;
  $10 = $x * 0.0;
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
 }
 $11 = $9 + -4503599627370496.0;
 $12 = $11 - $$x;
 $13 = $12 > 0.5;
 if ($13) {
  $14 = $$x + $12;
  $15 = $14 + -1.0;
  $y$0 = $15;
 } else {
  $16 = !($12 <= -0.5);
  $17 = $$x + $12;
  if ($16) {
   $y$0 = $17;
  } else {
   $18 = $17 + 1.0;
   $y$0 = $18;
  }
 }
 $19 = -$y$0;
 $$y$0 = $6 ? $19 : $y$0;
 $$0 = $$y$0;
 STACKTOP = sp;return (+$$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 25192;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 25192;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 255]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=25200; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $5 & $4;
    $7 = ($6<<24>>24)==($3<<24>>24);
    $or$cond4 = $7 & $or$cond;
    if (!($or$cond4)) {
     $13 = $6;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = ((($l$06)) + 1|0);
    $9 = ((($r$07)) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0;
 var $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412184$i = 0;
 var $$5196$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa106 = 0, $$lcssa275$i = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa455 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0;
 var $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa470 = 0, $$lcssa474 = 0, $$lcssa476 = 0, $$lcssa479 = 0, $$lcssa480 = 0, $$lcssa483 = 0.0, $$lcssa484 = 0, $$lcssa487 = 0, $$lcssa491 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0;
 var $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre270 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
 var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
 var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
 var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
 var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0.0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0.0, $1162 = 0, $1163 = 0;
 var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $1169$phi = 0, $117 = 0, $1170 = 0, $1170$phi = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0;
 var $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0.0, $545 = 0.0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0;
 var $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0;
 var $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0;
 var $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0, $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0;
 var $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0;
 var $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0;
 var $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0;
 var $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0;
 var $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0;
 var $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0;
 var $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1186 = 0, $i$1222$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2209$i = 0, $i$3160 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond332 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa456 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1169 = 0;$1170 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1171 = $22;$26 = $23;
  }
  while(1) {
   if ((($1171<<24>>24) == 0)) {
    $$lcssa106 = $26;$z$0$lcssa = $26;
    break;
   } else if ((($1171<<24>>24) == 37)) {
    $28 = $26;$z$0163 = $26;
    label = 9;
    break;
   }
   $25 = ((($26)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1171 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = ((($28)) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa106 = $28;$z$0$lcssa = $z$0163;
      break L12;
     }
     $31 = ((($z$0163)) + 1|0);
     $32 = ((($28)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$0163 = $31;
      label = 9;
     } else {
      $$lcssa106 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1170$phi = $1170;$1169$phi = $1169;$23 = $$lcssa106;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1170 = $1170$phi;$1169 = $1169$phi;
   continue;
  }
  $39 = ((($$lcssa106)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($$lcssa106)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($$lcssa106)) + 3|0);
   $$92 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre270 = HEAP8[$$92>>0]|0;
   $47 = $$pre270;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L24: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$0110 = $fl$0170;$storemerge8108 = $storemerge8169;
      break L24;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0170;
     $60 = ((($storemerge8169)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
     } else {
      $65 = $61;$fl$0110 = $59;$storemerge8108 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge8108)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge8108)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge8108)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $105 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded64 = $87;
     $expanded = (($expanded64) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded68 = $89;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $90 = $88 & $expanded66;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$0110 | 8192;
     $95 = (0 - ($w$0))|0;
     $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $105 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa450 = $98;$$lcssa451 = $99;
       break;
      }
     }
     $103 = ($$lcssa450|0)<(0);
     if ($103) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $105 = $$lcssa451;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa450;
     }
    } else {
     $105 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$105>>0]|0;
  $106 = ($104<<24>>24)==(46);
  L45: do {
   if ($106) {
    $107 = ((($105)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i27 = (($136) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $140 = $107;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $1172 = $107;$p$0 = 0;
      break;
     }
     while(1) {
      $137 = ($i$03$i30*10)|0;
      $138 = (($137) + ($isdigittmp4$i29))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i31 = (($142) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $140 = $139;$i$03$i30 = $138;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $1172 = $139;$p$0 = $138;
       break L45;
      }
     }
    }
    $110 = ((($105)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($105)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($105)) + 4|0);
      $1172 = $127;$p$0 = $123;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded71 = $130;
     $expanded70 = (($expanded71) - 1)|0;
     $131 = (($129) + ($expanded70))|0;
     $132 = ((0) + 4|0);
     $expanded75 = $132;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $133 = $131 & $expanded73;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1172 = $110;$p$0 = $135;
    } else {
     $1172 = $110;$p$0 = 0;
    }
   } else {
    $1172 = $105;$p$0 = -1;
   }
  } while(0);
  $144 = $1172;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$144>>0]|0;
   $145 = $143 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ($146>>>0)>(57);
   if ($147) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $148 = ((($144)) + 1|0);
   $149 = ((25312 + (($st$0*58)|0)|0) + ($146)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($151) + -1)|0;
   $153 = ($152>>>0)<(8);
   if ($153) {
    $144 = $148;$st$0 = $151;
   } else {
    $$lcssa455 = $144;$$lcssa457 = $148;$$lcssa458 = $150;$$lcssa459 = $151;$st$0$lcssa456 = $st$0;
    break;
   }
  }
  $154 = ($$lcssa458<<24>>24)==(0);
  if ($154) {
   $$0 = -1;
   label = 363;
   break;
  }
  $155 = ($$lcssa458<<24>>24)==(19);
  $156 = ($argpos$0|0)>(-1);
  L64: do {
   if ($155) {
    if ($156) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1173 = $1169;$1174 = $1170;
     label = 62;
    }
   } else {
    if ($156) {
     $157 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$157>>2] = $$lcssa459;
     $158 = (($nl_arg) + ($argpos$0<<3)|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ((($158)) + 4|0);
     $161 = HEAP32[$160>>2]|0;
     $1173 = $161;$1174 = $159;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $162 = ($$lcssa458&255)>(20);
    if ($162) {
     $264 = $1170;$291 = $1169;
    } else {
     do {
      switch ($$lcssa459|0) {
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $199 = $arglist_current17;
       $200 = ((0) + 4|0);
       $expanded106 = $200;
       $expanded105 = (($expanded106) - 1)|0;
       $201 = (($199) + ($expanded105))|0;
       $202 = ((0) + 4|0);
       $expanded110 = $202;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $203 = $201 & $expanded108;
       $204 = $203;
       $205 = HEAP32[$204>>2]|0;
       $arglist_next18 = ((($204)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $206 = $205&65535;
       $207 = $206 << 16 >> 16;
       $208 = ($207|0)<(0);
       $209 = $208 << 31 >> 31;
       $sext93 = $205 << 16;
       $210 = $sext93 >> 16;
       $264 = $210;$291 = $209;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $218 = $arglist_current23;
       $219 = ((0) + 4|0);
       $expanded120 = $219;
       $expanded119 = (($expanded120) - 1)|0;
       $220 = (($218) + ($expanded119))|0;
       $221 = ((0) + 4|0);
       $expanded124 = $221;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $222 = $220 & $expanded122;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $arglist_next24 = ((($223)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $225 = $224&255;
       $226 = $225 << 24 >> 24;
       $227 = ($226|0)<(0);
       $228 = $227 << 31 >> 31;
       $sext = $224 << 24;
       $229 = $sext >> 24;
       $264 = $229;$291 = $228;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $187 = $arglist_current14;
       $188 = ((0) + 8|0);
       $expanded99 = $188;
       $expanded98 = (($expanded99) - 1)|0;
       $189 = (($187) + ($expanded98))|0;
       $190 = ((0) + 8|0);
       $expanded103 = $190;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $191 = $189 & $expanded101;
       $192 = $191;
       $193 = $192;
       $194 = $193;
       $195 = HEAP32[$194>>2]|0;
       $196 = (($193) + 4)|0;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $arglist_next15 = ((($192)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $264 = $195;$291 = $198;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $211 = $arglist_current20;
       $212 = ((0) + 4|0);
       $expanded113 = $212;
       $expanded112 = (($expanded113) - 1)|0;
       $213 = (($211) + ($expanded112))|0;
       $214 = ((0) + 4|0);
       $expanded117 = $214;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $215 = $213 & $expanded115;
       $216 = $215;
       $217 = HEAP32[$216>>2]|0;
       $arglist_next21 = ((($216)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $217 & 65535;
       $264 = $$mask1$i37;$291 = 0;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $246 = $arglist_current32;
       $247 = ((0) + 8|0);
       $expanded141 = $247;
       $expanded140 = (($expanded141) - 1)|0;
       $248 = (($246) + ($expanded140))|0;
       $249 = ((0) + 8|0);
       $expanded145 = $249;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $250 = $248 & $expanded143;
       $251 = $250;
       $252 = +HEAPF64[$251>>3];
       $arglist_next33 = ((($251)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $252;$253 = HEAP32[tempDoublePtr>>2]|0;
       $254 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $253;$291 = $254;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $163 = $arglist_current5;
       $164 = ((0) + 4|0);
       $expanded78 = $164;
       $expanded77 = (($expanded78) - 1)|0;
       $165 = (($163) + ($expanded77))|0;
       $166 = ((0) + 4|0);
       $expanded82 = $166;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $167 = $165 & $expanded80;
       $168 = $167;
       $169 = HEAP32[$168>>2]|0;
       $arglist_next6 = ((($168)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $170 = $169;
       $264 = $170;$291 = $1169;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $237 = $arglist_current29;
       $238 = ((0) + 8|0);
       $expanded134 = $238;
       $expanded133 = (($expanded134) - 1)|0;
       $239 = (($237) + ($expanded133))|0;
       $240 = ((0) + 8|0);
       $expanded138 = $240;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $241 = $239 & $expanded136;
       $242 = $241;
       $243 = +HEAPF64[$242>>3];
       $arglist_next30 = ((($242)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $243;$244 = HEAP32[tempDoublePtr>>2]|0;
       $245 = HEAP32[tempDoublePtr+4>>2]|0;
       $264 = $244;$291 = $245;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $171 = $arglist_current8;
       $172 = ((0) + 4|0);
       $expanded85 = $172;
       $expanded84 = (($expanded85) - 1)|0;
       $173 = (($171) + ($expanded84))|0;
       $174 = ((0) + 4|0);
       $expanded89 = $174;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $175 = $173 & $expanded87;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $arglist_next9 = ((($176)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $178 = ($177|0)<(0);
       $179 = $178 << 31 >> 31;
       $264 = $177;$291 = $179;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $230 = $arglist_current26;
       $231 = ((0) + 4|0);
       $expanded127 = $231;
       $expanded126 = (($expanded127) - 1)|0;
       $232 = (($230) + ($expanded126))|0;
       $233 = ((0) + 4|0);
       $expanded131 = $233;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $234 = $232 & $expanded129;
       $235 = $234;
       $236 = HEAP32[$235>>2]|0;
       $arglist_next27 = ((($235)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $236 & 255;
       $264 = $$mask$i38;$291 = 0;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $180 = $arglist_current11;
       $181 = ((0) + 4|0);
       $expanded92 = $181;
       $expanded91 = (($expanded92) - 1)|0;
       $182 = (($180) + ($expanded91))|0;
       $183 = ((0) + 4|0);
       $expanded96 = $183;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $184 = $182 & $expanded94;
       $185 = $184;
       $186 = HEAP32[$185>>2]|0;
       $arglist_next12 = ((($185)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $264 = $186;$291 = 0;
       break L64;
       break;
      }
      default: {
       $264 = $1170;$291 = $1169;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $264 = $1174;$291 = $1173;
   } else {
    $1169 = $1173;$1170 = $1174;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $255 = HEAP8[$$lcssa455>>0]|0;
  $256 = $255 << 24 >> 24;
  $257 = ($st$0$lcssa456|0)!=(0);
  $258 = $256 & 15;
  $259 = ($258|0)==(3);
  $or$cond15 = $257 & $259;
  $260 = $256 & -33;
  $t$0 = $or$cond15 ? $260 : $256;
  $261 = $fl$1 & 8192;
  $262 = ($261|0)==(0);
  $263 = $fl$1 & -65537;
  $fl$1$ = $262 ? $fl$1 : $263;
  L86: do {
   switch ($t$0|0) {
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa456|0) {
    case 1:  {
     $266 = $264;
     HEAP32[$266>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $265 = $264;
     HEAP32[$265>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $267 = ($cnt$1|0)<(0);
     $268 = $267 << 31 >> 31;
     $269 = $264;
     $270 = $269;
     $271 = $270;
     HEAP32[$271>>2] = $cnt$1;
     $272 = (($270) + 4)|0;
     $273 = $272;
     HEAP32[$273>>2] = $268;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $278 = $264;
     HEAP32[$278>>2] = $cnt$1;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $274 = $cnt$1&65535;
     $275 = $264;
     HEAP16[$275>>1] = $274;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $276 = $cnt$1&255;
     $277 = $264;
     HEAP8[$277>>0] = $276;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $279 = ($cnt$1|0)<(0);
     $280 = $279 << 31 >> 31;
     $281 = $264;
     $282 = $281;
     $283 = $282;
     HEAP32[$283>>2] = $cnt$1;
     $284 = (($282) + 4)|0;
     $285 = $284;
     HEAP32[$285>>2] = $280;
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 109:  {
    $379 = (___errno_location()|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = (_strerror(($380|0))|0);
    $a$1 = $381;
    label = 94;
    break;
   }
   case 83:  {
    $391 = $264;
    $392 = ($p$0|0)==(0);
    if ($392) {
     $1181 = $264;$1182 = $391;$i$0$lcssa273 = 0;
     label = 102;
    } else {
     $1179 = $391;$1180 = $264;$p$4272 = $p$0;
     label = 97;
    }
    break;
   }
   case 115:  {
    $382 = $264;
    $383 = ($264|0)!=(0);
    $384 = $383 ? $382 : 25808;
    $a$1 = $384;
    label = 94;
    break;
   }
   case 117:  {
    $336 = $291;$338 = $264;$pl$0 = 0;$prefix$0 = 25792;
    label = 84;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $264;
    HEAP32[$5>>2] = 0;
    $1179 = $wc;$1180 = $6;$p$4272 = -1;
    label = 97;
    break;
   }
   case 99:  {
    $378 = $264&255;
    HEAP8[$4>>0] = $378;
    $1175 = $291;$1176 = $264;$a$2 = $4;$fl$6 = $263;$p$5 = 1;$pl$2 = 0;$prefix$2 = 25792;$z$2 = $2;
    break;
   }
   case 105: case 100:  {
    $329 = ($291|0)<(0);
    if ($329) {
     $330 = (_i64Subtract(0,0,($264|0),($291|0))|0);
     $331 = tempRet0;
     $336 = $331;$338 = $330;$pl$0 = 1;$prefix$0 = 25792;
     label = 84;
     break L86;
    }
    $332 = $fl$1$ & 2048;
    $333 = ($332|0)==(0);
    if ($333) {
     $334 = $fl$1$ & 1;
     $335 = ($334|0)==(0);
     $$ = $335 ? 25792 : (25794);
     $336 = $291;$338 = $264;$pl$0 = $334;$prefix$0 = $$;
     label = 84;
    } else {
     $336 = $291;$338 = $264;$pl$0 = 1;$prefix$0 = (25793);
     label = 84;
    }
    break;
   }
   case 112:  {
    $286 = ($p$0>>>0)>(8);
    $287 = $286 ? $p$0 : 8;
    $288 = $fl$1$ | 8;
    $fl$3 = $288;$p$1 = $287;$t$1 = 120;
    label = 73;
    break;
   }
   case 111:  {
    $312 = ($264|0)==(0);
    $313 = ($291|0)==(0);
    $314 = $312 & $313;
    if ($314) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$316 = $264;$320 = $291;
     while(1) {
      $315 = $316 & 7;
      $317 = $315 | 48;
      $318 = $317&255;
      $319 = ((($$03$i48)) + -1|0);
      HEAP8[$319>>0] = $318;
      $321 = (_bitshift64Lshr(($316|0),($320|0),3)|0);
      $322 = tempRet0;
      $323 = ($321|0)==(0);
      $324 = ($322|0)==(0);
      $325 = $323 & $324;
      if ($325) {
       $$0$lcssa$i51 = $319;
       break;
      } else {
       $$03$i48 = $319;$316 = $321;$320 = $322;
      }
     }
    }
    $326 = $fl$1$ & 8;
    $327 = ($326|0)==(0);
    $or$cond19 = $327 | $314;
    $$24 = $or$cond19 ? 25792 : (25797);
    $328 = $or$cond19&1;
    $$25 = $328 ^ 1;
    $366 = $264;$368 = $291;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $264;HEAP32[tempDoublePtr+4>>2] = $291;$430 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $431 = ($291|0)<(0);
    if ($431) {
     $432 = -$430;
     $$07$i = $432;$pl$0$i = 1;$prefix$0$i = 25816;
    } else {
     $433 = $fl$1$ & 2048;
     $434 = ($433|0)==(0);
     if ($434) {
      $435 = $fl$1$ & 1;
      $436 = ($435|0)==(0);
      $$$i = $436 ? (25817) : (25822);
      $$07$i = $430;$pl$0$i = $435;$prefix$0$i = $$$i;
     } else {
      $$07$i = $430;$pl$0$i = 1;$prefix$0$i = (25819);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$437 = HEAP32[tempDoublePtr>>2]|0;
    $438 = HEAP32[tempDoublePtr+4>>2]|0;
    $439 = $438 & 2146435072;
    $440 = ($439>>>0)<(2146435072);
    $441 = (0)<(0);
    $442 = ($439|0)==(2146435072);
    $443 = $442 & $441;
    $444 = $440 | $443;
    do {
     if ($444) {
      $471 = (+_frexpl($$07$i,$e2$i));
      $472 = $471 * 2.0;
      $473 = $472 != 0.0;
      if ($473) {
       $474 = HEAP32[$e2$i>>2]|0;
       $475 = (($474) + -1)|0;
       HEAP32[$e2$i>>2] = $475;
      }
      $476 = $t$0 | 32;
      $477 = ($476|0)==(97);
      if ($477) {
       $478 = $t$0 & 32;
       $479 = ($478|0)==(0);
       $480 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $479 ? $prefix$0$i : $480;
       $481 = $pl$0$i | 2;
       $482 = ($p$0>>>0)>(11);
       $483 = (12 - ($p$0))|0;
       $484 = ($483|0)==(0);
       $485 = $482 | $484;
       do {
        if ($485) {
         $$1$i = $472;
        } else {
         $re$1179$i = $483;$round$0178$i = 8.0;
         while(1) {
          $486 = (($re$1179$i) + -1)|0;
          $487 = $round$0178$i * 16.0;
          $488 = ($486|0)==(0);
          if ($488) {
           $$lcssa483 = $487;
           break;
          } else {
           $re$1179$i = $486;$round$0178$i = $487;
          }
         }
         $489 = HEAP8[$prefix$0$$i>>0]|0;
         $490 = ($489<<24>>24)==(45);
         if ($490) {
          $491 = -$472;
          $492 = $491 - $$lcssa483;
          $493 = $$lcssa483 + $492;
          $494 = -$493;
          $$1$i = $494;
          break;
         } else {
          $495 = $472 + $$lcssa483;
          $496 = $495 - $$lcssa483;
          $$1$i = $496;
          break;
         }
        }
       } while(0);
       $497 = HEAP32[$e2$i>>2]|0;
       $498 = ($497|0)<(0);
       $499 = (0 - ($497))|0;
       $500 = $498 ? $499 : $497;
       $501 = ($500|0)<(0);
       if ($501) {
        $502 = ($500|0)<(0);
        $503 = $502 << 31 >> 31;
        $$05$i$i = $7;$504 = $500;$505 = $503;
        while(1) {
         $506 = (___uremdi3(($504|0),($505|0),10,0)|0);
         $507 = tempRet0;
         $508 = $506 | 48;
         $509 = $508&255;
         $510 = ((($$05$i$i)) + -1|0);
         HEAP8[$510>>0] = $509;
         $511 = (___udivdi3(($504|0),($505|0),10,0)|0);
         $512 = tempRet0;
         $513 = ($505>>>0)>(9);
         $514 = ($504>>>0)>(4294967295);
         $515 = ($505|0)==(9);
         $516 = $515 & $514;
         $517 = $513 | $516;
         if ($517) {
          $$05$i$i = $510;$504 = $511;$505 = $512;
         } else {
          $$lcssa484 = $510;$1183 = $511;$1184 = $512;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa484;$$01$lcssa$off0$i$i = $1183;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $500;
       }
       $518 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($518) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $519 = (($y$03$i$i>>>0) % 10)&-1;
         $520 = $519 | 48;
         $521 = $520&255;
         $522 = ((($$12$i$i)) + -1|0);
         HEAP8[$522>>0] = $521;
         $523 = (($y$03$i$i>>>0) / 10)&-1;
         $524 = ($y$03$i$i>>>0)<(10);
         if ($524) {
          $$1$lcssa$i$i = $522;
          break;
         } else {
          $$12$i$i = $522;$y$03$i$i = $523;
         }
        }
       }
       $525 = ($$1$lcssa$i$i|0)==($7|0);
       if ($525) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $526 = HEAP32[$e2$i>>2]|0;
       $527 = $526 >> 31;
       $528 = $527 & 2;
       $529 = (($528) + 43)|0;
       $530 = $529&255;
       $531 = ((($estr$0$i)) + -1|0);
       HEAP8[$531>>0] = $530;
       $532 = (($t$0) + 15)|0;
       $533 = $532&255;
       $534 = ((($estr$0$i)) + -2|0);
       HEAP8[$534>>0] = $533;
       $535 = $fl$1$ & 8;
       $536 = ($535|0)==(0);
       if ($536) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $537 = (~~(($$2$us$us$i)));
          $538 = (25776 + ($537)|0);
          $539 = HEAP8[$538>>0]|0;
          $540 = $539&255;
          $541 = $540 | $478;
          $542 = $541&255;
          $543 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $542;
          $544 = (+($537|0));
          $545 = $$2$us$us$i - $544;
          $546 = $545 * 16.0;
          $547 = $543;
          $548 = (($547) - ($0))|0;
          $549 = ($548|0)!=(1);
          $notlhs$us$us$i = $546 == 0.0;
          $or$cond$i79 = $549 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $543;
          } else {
           $550 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$543>>0] = 46;
           $s$1$us$us$i = $550;
          }
          $551 = $546 != 0.0;
          if ($551) {
           $$2$us$us$i = $546;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $552 = (~~(($$2$us$i)));
          $553 = (25776 + ($552)|0);
          $554 = HEAP8[$553>>0]|0;
          $555 = $554&255;
          $556 = $555 | $478;
          $557 = $556&255;
          $558 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $557;
          $559 = (+($552|0));
          $560 = $$2$us$i - $559;
          $561 = $560 * 16.0;
          $562 = $558;
          $563 = (($562) - ($0))|0;
          $564 = ($563|0)==(1);
          if ($564) {
           $565 = ((($s$0$us$i)) + 2|0);
           HEAP8[$558>>0] = 46;
           $s$1$us$i = $565;
          } else {
           $s$1$us$i = $558;
          }
          $566 = $561 != 0.0;
          if ($566) {
           $$2$us$i = $561;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $567 = (~~(($$2$i)));
         $568 = (25776 + ($567)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = $569&255;
         $571 = $570 | $478;
         $572 = $571&255;
         $573 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $572;
         $574 = (+($567|0));
         $575 = $$2$i - $574;
         $576 = $575 * 16.0;
         $577 = $573;
         $578 = (($577) - ($0))|0;
         $579 = ($578|0)==(1);
         if ($579) {
          $580 = ((($s$0$i)) + 2|0);
          HEAP8[$573>>0] = 46;
          $s$1$i = $580;
         } else {
          $s$1$i = $573;
         }
         $581 = $576 != 0.0;
         if ($581) {
          $$2$i = $576;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $582 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $583 = (($11) + ($$pre300$i))|0;
       $584 = ($583|0)<($p$0|0);
       $or$cond332 = $582 & $584;
       $585 = $534;
       $586 = (($12) + ($p$0))|0;
       $587 = (($586) - ($585))|0;
       $588 = $534;
       $589 = (($10) - ($588))|0;
       $590 = (($589) + ($$pre300$i))|0;
       $l$0$i = $or$cond332 ? $587 : $590;
       $591 = (($l$0$i) + ($481))|0;
       $592 = $fl$1$ & 73728;
       $593 = ($592|0)==(0);
       $594 = ($w$1|0)>($591|0);
       $or$cond$i52$i = $593 & $594;
       if ($or$cond$i52$i) {
        $595 = (($w$1) - ($591))|0;
        $596 = ($595>>>0)>(256);
        $597 = $596 ? 256 : $595;
        _memset(($pad$i|0),32,($597|0))|0;
        $598 = ($595>>>0)>(255);
        if ($598) {
         $$01$i54$i = $595;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $599 = (($$01$i54$i) + -256)|0;
          $600 = ($599>>>0)>(255);
          if ($600) {
           $$01$i54$i = $599;
          } else {
           break;
          }
         }
         $601 = $595 & 255;
         $$0$lcssa$i56$i = $601;
        } else {
         $$0$lcssa$i56$i = $595;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$481,$f)|0);
       $602 = ($592|0)==(65536);
       $or$cond$i59$i = $602 & $594;
       if ($or$cond$i59$i) {
        $603 = (($w$1) - ($591))|0;
        $604 = ($603>>>0)>(256);
        $605 = $604 ? 256 : $603;
        _memset(($pad$i|0),48,($605|0))|0;
        $606 = ($603>>>0)>(255);
        if ($606) {
         $$01$i61$i = $603;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $607 = (($$01$i61$i) + -256)|0;
          $608 = ($607>>>0)>(255);
          if ($608) {
           $$01$i61$i = $607;
          } else {
           break;
          }
         }
         $609 = $603 & 255;
         $$0$lcssa$i63$i = $609;
        } else {
         $$0$lcssa$i63$i = $603;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $610 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$610,$f)|0);
       $611 = $534;
       $612 = (($9) - ($611))|0;
       $613 = (($l$0$i) - ($612))|0;
       $614 = (($613) - ($610))|0;
       $615 = ($614|0)>(0);
       if ($615) {
        $616 = ($614>>>0)>(256);
        $617 = $616 ? 256 : $614;
        _memset(($pad$i|0),48,($617|0))|0;
        $618 = ($614>>>0)>(255);
        if ($618) {
         $$01$i67$i = $614;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $619 = (($$01$i67$i) + -256)|0;
          $620 = ($619>>>0)>(255);
          if ($620) {
           $$01$i67$i = $619;
          } else {
           break;
          }
         }
         $621 = $614 & 255;
         $$0$lcssa$i69$i = $621;
        } else {
         $$0$lcssa$i69$i = $614;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($534,$612,$f)|0);
       $622 = ($592|0)==(8192);
       $or$cond$i72$i = $622 & $594;
       if ($or$cond$i72$i) {
        $623 = (($w$1) - ($591))|0;
        $624 = ($623>>>0)>(256);
        $625 = $624 ? 256 : $623;
        _memset(($pad$i|0),32,($625|0))|0;
        $626 = ($623>>>0)>(255);
        if ($626) {
         $$01$i74$i = $623;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $627 = (($$01$i74$i) + -256)|0;
          $628 = ($627>>>0)>(255);
          if ($628) {
           $$01$i74$i = $627;
          } else {
           break;
          }
         }
         $629 = $623 & 255;
         $$0$lcssa$i76$i = $629;
        } else {
         $$0$lcssa$i76$i = $623;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $594 ? $w$1 : $591;
       $$0$i = $w$$i;
       break;
      }
      $630 = ($p$0|0)<(0);
      $$p$i = $630 ? 6 : $p$0;
      if ($473) {
       $631 = $472 * 268435456.0;
       $632 = HEAP32[$e2$i>>2]|0;
       $633 = (($632) + -28)|0;
       HEAP32[$e2$i>>2] = $633;
       $$3$i = $631;$634 = $633;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $472;$634 = $$pre$i;
      }
      $635 = ($634|0)<(0);
      $$31$i = $635 ? $big$i : $13;
      $636 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $637 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $637;
       $638 = ((($z$0$i)) + 4|0);
       $639 = (+($637>>>0));
       $640 = $$4$i - $639;
       $641 = $640 * 1.0E+9;
       $642 = $641 != 0.0;
       if ($642) {
        $$4$i = $641;$z$0$i = $638;
       } else {
        $$lcssa460 = $638;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $643 = ($$pr$i|0)>(0);
      if ($643) {
       $644 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa460;
       while(1) {
        $645 = ($644|0)>(29);
        $646 = $645 ? 29 : $644;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $647 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($647) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $648 = HEAP32[$d$0247$i>>2]|0;
           $649 = (_bitshift64Shl(($648|0),0,($646|0))|0);
           $650 = tempRet0;
           $651 = (_i64Add(($649|0),($650|0),($carry$0246$i|0),0)|0);
           $652 = tempRet0;
           $653 = (___uremdi3(($651|0),($652|0),1000000000,0)|0);
           $654 = tempRet0;
           HEAP32[$d$0247$i>>2] = $653;
           $655 = (___udivdi3(($651|0),($652|0),1000000000,0)|0);
           $656 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $657 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($657) {
            $$lcssa461 = $655;
            break;
           } else {
            $carry$0246$i = $655;$d$0247$i = $d$0$i;
           }
          }
          $658 = ($$lcssa461|0)==(0);
          if ($658) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $659 = ((($a$1253$i)) + -4|0);
          HEAP32[$659>>2] = $$lcssa461;
          $a$2$ph$i = $659;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $660 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($660)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $661 = ((($z$2$i)) + -4|0);
         $662 = HEAP32[$661>>2]|0;
         $663 = ($662|0)==(0);
         if ($663) {
          $z$2$i = $661;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $664 = HEAP32[$e2$i>>2]|0;
        $665 = (($664) - ($646))|0;
        HEAP32[$e2$i>>2] = $665;
        $666 = ($665|0)>(0);
        if ($666) {
         $644 = $665;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $665;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa460;
      }
      $667 = ($$pr146$i|0)<(0);
      L237: do {
       if ($667) {
        $668 = (($$p$i) + 25)|0;
        $669 = (($668|0) / 9)&-1;
        $670 = (($669) + 1)|0;
        $671 = ($476|0)==(102);
        if (!($671)) {
         $704 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $703 = (0 - ($704))|0;
          $705 = ($703|0)>(9);
          $706 = $705 ? 9 : $703;
          $707 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($707) {
            $711 = 1 << $706;
            $712 = (($711) + -1)|0;
            $713 = 1000000000 >>> $706;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $714 = HEAP32[$d$1233$i>>2]|0;
             $715 = $714 & $712;
             $716 = $714 >>> $706;
             $717 = (($716) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $717;
             $718 = Math_imul($715, $713)|0;
             $719 = ((($d$1233$i)) + 4|0);
             $720 = ($719>>>0)<($z$3239$i>>>0);
             if ($720) {
              $carry3$0234$i = $718;$d$1233$i = $719;
             } else {
              $$lcssa463 = $718;
              break;
             }
            }
            $721 = HEAP32[$a$3240$i>>2]|0;
            $722 = ($721|0)==(0);
            $723 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $722 ? $723 : $a$3240$i;
            $724 = ($$lcssa463|0)==(0);
            if ($724) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $725 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa463;
            $$a$3306$i = $$a$3$i;$z$4$i = $725;
           } else {
            $708 = HEAP32[$a$3240$i>>2]|0;
            $709 = ($708|0)==(0);
            $710 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $709 ? $710 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $726 = $z$4$i;
          $727 = $$a$3306$i;
          $728 = (($726) - ($727))|0;
          $729 = $728 >> 2;
          $730 = ($729|0)>($670|0);
          $731 = (($$a$3306$i) + ($670<<2)|0);
          $$z$4$i = $730 ? $731 : $z$4$i;
          $732 = HEAP32[$e2$i>>2]|0;
          $733 = (($732) + ($706))|0;
          HEAP32[$e2$i>>2] = $733;
          $734 = ($733|0)<(0);
          if ($734) {
           $704 = $733;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L237;
          }
         }
        }
        $672 = (($$31$i) + ($670<<2)|0);
        $674 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $673 = (0 - ($674))|0;
         $675 = ($673|0)>(9);
         $676 = $675 ? 9 : $673;
         $677 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($677) {
           $702 = 1 << $676;
           $695 = (($702) + -1)|0;
           $699 = 1000000000 >>> $676;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $693 = HEAP32[$d$1233$us$i>>2]|0;
            $694 = $693 & $695;
            $696 = $693 >>> $676;
            $697 = (($696) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $697;
            $698 = Math_imul($694, $699)|0;
            $700 = ((($d$1233$us$i)) + 4|0);
            $701 = ($700>>>0)<($z$3239$us$i>>>0);
            if ($701) {
             $carry3$0234$us$i = $698;$d$1233$us$i = $700;
            } else {
             $$lcssa464 = $698;
             break;
            }
           }
           $681 = HEAP32[$a$3240$us$i>>2]|0;
           $682 = ($681|0)==(0);
           $683 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $682 ? $683 : $a$3240$us$i;
           $684 = ($$lcssa464|0)==(0);
           if ($684) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $685 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa464;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $685;
          } else {
           $678 = HEAP32[$a$3240$us$i>>2]|0;
           $679 = ($678|0)==(0);
           $680 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $679 ? $680 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $686 = $z$4$us$i;
         $687 = (($686) - ($636))|0;
         $688 = $687 >> 2;
         $689 = ($688|0)>($670|0);
         $$z$4$us$i = $689 ? $672 : $z$4$us$i;
         $690 = HEAP32[$e2$i>>2]|0;
         $691 = (($690) + ($676))|0;
         HEAP32[$e2$i>>2] = $691;
         $692 = ($691|0)<(0);
         if ($692) {
          $674 = $691;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $735 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($735) {
        $736 = $a$3$lcssa$i;
        $737 = (($636) - ($736))|0;
        $738 = $737 >> 2;
        $739 = ($738*9)|0;
        $740 = HEAP32[$a$3$lcssa$i>>2]|0;
        $741 = ($740>>>0)<(10);
        if ($741) {
         $e$1$i = $739;
         break;
        } else {
         $e$0229$i = $739;$i$0228$i = 10;
        }
        while(1) {
         $742 = ($i$0228$i*10)|0;
         $743 = (($e$0229$i) + 1)|0;
         $744 = ($740>>>0)<($742>>>0);
         if ($744) {
          $e$1$i = $743;
          break;
         } else {
          $e$0229$i = $743;$i$0228$i = $742;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $745 = ($476|0)!=(102);
      $746 = $745 ? $e$1$i : 0;
      $747 = (($$p$i) - ($746))|0;
      $748 = ($476|0)==(103);
      $749 = ($$p$i|0)!=(0);
      $750 = $749 & $748;
      $$neg151$i = $750 << 31 >> 31;
      $751 = (($747) + ($$neg151$i))|0;
      $752 = $z$3$lcssa$i;
      $753 = (($752) - ($636))|0;
      $754 = $753 >> 2;
      $755 = ($754*9)|0;
      $756 = (($755) + -9)|0;
      $757 = ($751|0)<($756|0);
      if ($757) {
       $758 = (($751) + 9216)|0;
       $759 = (($758|0) / 9)&-1;
       $$sum$i = (($759) + -1023)|0;
       $760 = (($$31$i) + ($$sum$i<<2)|0);
       $761 = (($758|0) % 9)&-1;
       $j$0221$i = (($761) + 1)|0;
       $762 = ($j$0221$i|0)<(9);
       if ($762) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $763 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $763;
          break;
         } else {
          $i$1222$i = $763;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $764 = HEAP32[$760>>2]|0;
       $765 = (($764>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $766 = ($765|0)==(0);
       if ($766) {
        $$sum15$i = (($759) + -1022)|0;
        $767 = (($$31$i) + ($$sum15$i<<2)|0);
        $768 = ($767|0)==($z$3$lcssa$i|0);
        if ($768) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $769 = (($764>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $770 = $769 & 1;
         $771 = ($770|0)==(0);
         $$20$i = $771 ? 9007199254740992.0 : 9007199254740994.0;
         $772 = (($i$1$lcssa$i|0) / 2)&-1;
         $773 = ($765>>>0)<($772>>>0);
         do {
          if ($773) {
           $small$0$i = 0.5;
          } else {
           $774 = ($765|0)==($772|0);
           if ($774) {
            $$sum16$i = (($759) + -1022)|0;
            $775 = (($$31$i) + ($$sum16$i<<2)|0);
            $776 = ($775|0)==($z$3$lcssa$i|0);
            if ($776) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $777 = ($pl$0$i|0)==(0);
         do {
          if ($777) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $778 = HEAP8[$prefix$0$i>>0]|0;
           $779 = ($778<<24>>24)==(45);
           if (!($779)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $780 = -$$20$i;
           $781 = -$small$0$i;
           $round6$1$i = $780;$small$1$i = $781;
          }
         } while(0);
         $782 = (($764) - ($765))|0;
         HEAP32[$760>>2] = $782;
         $783 = $round6$1$i + $small$1$i;
         $784 = $783 != $round6$1$i;
         if (!($784)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $760;$e$3$i = $e$1$i;
          break;
         }
         $785 = (($782) + ($i$1$lcssa$i))|0;
         HEAP32[$760>>2] = $785;
         $786 = ($785>>>0)>(999999999);
         if ($786) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $760;
          while(1) {
           $787 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $788 = ($787>>>0)<($a$5215$i>>>0);
           if ($788) {
            $789 = ((($a$5215$i)) + -4|0);
            HEAP32[$789>>2] = 0;
            $a$6$i = $789;
           } else {
            $a$6$i = $a$5215$i;
           }
           $790 = HEAP32[$787>>2]|0;
           $791 = (($790) + 1)|0;
           HEAP32[$787>>2] = $791;
           $792 = ($791>>>0)>(999999999);
           if ($792) {
            $a$5215$i = $a$6$i;$d$2214$i = $787;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $787;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $760;
         }
         $793 = $a$5$lcssa$i;
         $794 = (($636) - ($793))|0;
         $795 = $794 >> 2;
         $796 = ($795*9)|0;
         $797 = HEAP32[$a$5$lcssa$i>>2]|0;
         $798 = ($797>>>0)<(10);
         if ($798) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
          break;
         } else {
          $e$2210$i = $796;$i$2209$i = 10;
         }
         while(1) {
          $799 = ($i$2209$i*10)|0;
          $800 = (($e$2210$i) + 1)|0;
          $801 = ($797>>>0)<($799>>>0);
          if ($801) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $800;
           break;
          } else {
           $e$2210$i = $800;$i$2209$i = $799;
          }
         }
        }
       } while(0);
       $802 = ((($d$3$i)) + 4|0);
       $803 = ($z$3$lcssa$i>>>0)>($802>>>0);
       $$z$3$i = $803 ? $802 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $804 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $805 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($805)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $806 = ((($z$6$i)) + -4|0);
       $807 = HEAP32[$806>>2]|0;
       $808 = ($807|0)==(0);
       if ($808) {
        $z$6$i = $806;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($748) {
        $809 = $749&1;
        $810 = $809 ^ 1;
        $$p$$i = (($810) + ($$p$i))|0;
        $811 = ($$p$$i|0)>($e$4$ph$i|0);
        $812 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $811 & $812;
        if ($or$cond6$i) {
         $813 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $814 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $813;$$210$i = $814;
        } else {
         $815 = (($t$0) + -2)|0;
         $816 = (($$p$$i) + -1)|0;
         $$013$i = $815;$$210$i = $816;
        }
        $817 = $fl$1$ & 8;
        $818 = ($817|0)==(0);
        if (!($818)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $817;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $819 = ((($z$6$i$lcssa)) + -4|0);
          $820 = HEAP32[$819>>2]|0;
          $821 = ($820|0)==(0);
          if ($821) {
           $j$2$i = 9;
           break;
          }
          $822 = (($820>>>0) % 10)&-1;
          $823 = ($822|0)==(0);
          if ($823) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $824 = ($i$3205$i*10)|0;
           $825 = (($j$1206$i) + 1)|0;
           $826 = (($820>>>0) % ($824>>>0))&-1;
           $827 = ($826|0)==(0);
           if ($827) {
            $i$3205$i = $824;$j$1206$i = $825;
           } else {
            $j$2$i = $825;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $828 = $$013$i | 32;
        $829 = ($828|0)==(102);
        $830 = $z$6$i$lcssa;
        $831 = (($830) - ($636))|0;
        $832 = $831 >> 2;
        $833 = ($832*9)|0;
        $834 = (($833) + -9)|0;
        if ($829) {
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$21$i = $836 ? 0 : $835;
         $837 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $837 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $838 = (($834) + ($e$4$ph$i))|0;
         $839 = (($838) - ($j$2$i))|0;
         $840 = ($839|0)<(0);
         $$23$i = $840 ? 0 : $839;
         $841 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $841 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $842 = $$311$i | $$pre$phi302$iZ2D;
      $843 = ($842|0)!=(0);
      $844 = $843&1;
      $845 = $$114$i | 32;
      $846 = ($845|0)==(102);
      if ($846) {
       $847 = ($e$4$ph$i|0)>(0);
       $848 = $847 ? $e$4$ph$i : 0;
       $$pn$i = $848;$estr$2$i = 0;
      } else {
       $849 = ($e$4$ph$i|0)<(0);
       $850 = $849 ? $804 : $e$4$ph$i;
       $851 = ($850|0)<(0);
       if ($851) {
        $852 = ($850|0)<(0);
        $853 = $852 << 31 >> 31;
        $$05$i79$i = $7;$854 = $850;$855 = $853;
        while(1) {
         $856 = (___uremdi3(($854|0),($855|0),10,0)|0);
         $857 = tempRet0;
         $858 = $856 | 48;
         $859 = $858&255;
         $860 = ((($$05$i79$i)) + -1|0);
         HEAP8[$860>>0] = $859;
         $861 = (___udivdi3(($854|0),($855|0),10,0)|0);
         $862 = tempRet0;
         $863 = ($855>>>0)>(9);
         $864 = ($854>>>0)>(4294967295);
         $865 = ($855|0)==(9);
         $866 = $865 & $864;
         $867 = $863 | $866;
         if ($867) {
          $$05$i79$i = $860;$854 = $861;$855 = $862;
         } else {
          $$lcssa470 = $860;$1185 = $861;$1186 = $862;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa470;$$01$lcssa$off0$i85$i = $1185;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $850;
       }
       $868 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($868) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $869 = (($y$03$i86$i>>>0) % 10)&-1;
         $870 = $869 | 48;
         $871 = $870&255;
         $872 = ((($$12$i87$i)) + -1|0);
         HEAP8[$872>>0] = $871;
         $873 = (($y$03$i86$i>>>0) / 10)&-1;
         $874 = ($y$03$i86$i>>>0)<(10);
         if ($874) {
          $estr$1$ph$i = $872;
          break;
         } else {
          $$12$i87$i = $872;$y$03$i86$i = $873;
         }
        }
       }
       $875 = $estr$1$ph$i;
       $876 = (($9) - ($875))|0;
       $877 = ($876|0)<(2);
       if ($877) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $878 = ((($estr$1201$i)) + -1|0);
         HEAP8[$878>>0] = 48;
         $879 = $878;
         $880 = (($9) - ($879))|0;
         $881 = ($880|0)<(2);
         if ($881) {
          $estr$1201$i = $878;
         } else {
          $estr$1$lcssa$i = $878;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $882 = $e$4$ph$i >> 31;
       $883 = $882 & 2;
       $884 = (($883) + 43)|0;
       $885 = $884&255;
       $886 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$886>>0] = $885;
       $887 = $$114$i&255;
       $888 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$888>>0] = $887;
       $889 = $888;
       $890 = (($9) - ($889))|0;
       $$pn$i = $890;$estr$2$i = $888;
      }
      $891 = (($pl$0$i) + 1)|0;
      $892 = (($891) + ($$311$i))|0;
      $l$1$i = (($892) + ($844))|0;
      $893 = (($l$1$i) + ($$pn$i))|0;
      $894 = $fl$1$ & 73728;
      $895 = ($894|0)==(0);
      $896 = ($w$1|0)>($893|0);
      $or$cond$i93$i = $895 & $896;
      if ($or$cond$i93$i) {
       $897 = (($w$1) - ($893))|0;
       $898 = ($897>>>0)>(256);
       $899 = $898 ? 256 : $897;
       _memset(($pad$i|0),32,($899|0))|0;
       $900 = ($897>>>0)>(255);
       if ($900) {
        $$01$i95$i = $897;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $901 = (($$01$i95$i) + -256)|0;
         $902 = ($901>>>0)>(255);
         if ($902) {
          $$01$i95$i = $901;
         } else {
          break;
         }
        }
        $903 = $897 & 255;
        $$0$lcssa$i97$i = $903;
       } else {
        $$0$lcssa$i97$i = $897;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $904 = ($894|0)==(65536);
      $or$cond$i100$i = $904 & $896;
      if ($or$cond$i100$i) {
       $905 = (($w$1) - ($893))|0;
       $906 = ($905>>>0)>(256);
       $907 = $906 ? 256 : $905;
       _memset(($pad$i|0),48,($907|0))|0;
       $908 = ($905>>>0)>(255);
       if ($908) {
        $$01$i102$i = $905;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $909 = (($$01$i102$i) + -256)|0;
         $910 = ($909>>>0)>(255);
         if ($910) {
          $$01$i102$i = $909;
         } else {
          break;
         }
        }
        $911 = $905 & 255;
        $$0$lcssa$i104$i = $911;
       } else {
        $$0$lcssa$i104$i = $905;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($846) {
       $912 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $912 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $913 = HEAP32[$d$4191$i>>2]|0;
        $914 = ($913|0)==(0);
        if ($914) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $913;
         while(1) {
          $915 = (($y$03$i109$i>>>0) % 10)&-1;
          $916 = $915 | 48;
          $917 = $916&255;
          $918 = ((($$12$i110$i)) + -1|0);
          HEAP8[$918>>0] = $917;
          $919 = (($y$03$i109$i>>>0) / 10)&-1;
          $920 = ($y$03$i109$i>>>0)<(10);
          if ($920) {
           $$1$lcssa$i112$i = $918;
           break;
          } else {
           $$12$i110$i = $918;$y$03$i109$i = $919;
          }
         }
        }
        $921 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($921) {
          $925 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($925)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $922 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($922) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $923 = ((($s7$0188$i)) + -1|0);
           HEAP8[$923>>0] = 48;
           $924 = ($923>>>0)>($buf$i>>>0);
           if ($924) {
            $s7$0188$i = $923;
           } else {
            $s7$1$i = $923;
            break;
           }
          }
         }
        } while(0);
        $926 = $s7$1$i;
        $927 = (($15) - ($926))|0;
        (___fwritex($s7$1$i,$927,$f)|0);
        $928 = ((($d$4191$i)) + 4|0);
        $929 = ($928>>>0)>($$31$i>>>0);
        if ($929) {
         $$lcssa479 = $928;
         break;
        } else {
         $d$4191$i = $928;
        }
       }
       $930 = ($842|0)==(0);
       if (!($930)) {
        (___fwritex(25872,1,$f)|0);
       }
       $931 = ($$lcssa479>>>0)<($z$6$i$lcssa>>>0);
       $932 = ($$311$i|0)>(0);
       $933 = $932 & $931;
       if ($933) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa479;
        while(1) {
         $934 = HEAP32[$d$5183$i>>2]|0;
         $935 = ($934|0)==(0);
         if ($935) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $934;
          while(1) {
           $936 = (($y$03$i118$i>>>0) % 10)&-1;
           $937 = $936 | 48;
           $938 = $937&255;
           $939 = ((($$12$i119$i)) + -1|0);
           HEAP8[$939>>0] = $938;
           $940 = (($y$03$i118$i>>>0) / 10)&-1;
           $941 = ($y$03$i118$i>>>0)<(10);
           if ($941) {
            $$lcssa480 = $939;
            break;
           } else {
            $$12$i119$i = $939;$y$03$i118$i = $940;
           }
          }
          $942 = ($$lcssa480>>>0)>($buf$i>>>0);
          if ($942) {
           $s8$0180$i = $$lcssa480;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa480;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $943 = ((($s8$0180$i)) + -1|0);
           HEAP8[$943>>0] = 48;
           $944 = ($943>>>0)>($buf$i>>>0);
           if ($944) {
            $s8$0180$i = $943;
            label = 289;
           } else {
            $s8$0$lcssa$i = $943;
            break;
           }
          }
         }
         $945 = ($$412184$i|0)>(9);
         $946 = $945 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$946,$f)|0);
         $947 = ((($d$5183$i)) + 4|0);
         $948 = (($$412184$i) + -9)|0;
         $949 = ($947>>>0)<($z$6$i$lcssa>>>0);
         $950 = $945 & $949;
         if ($950) {
          $$412184$i = $948;$d$5183$i = $947;
         } else {
          $$412$lcssa$i = $948;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $951 = ($$412$lcssa$i|0)>(0);
       if ($951) {
        $952 = ($$412$lcssa$i>>>0)>(256);
        $953 = $952 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($953|0))|0;
        $954 = ($$412$lcssa$i>>>0)>(255);
        if ($954) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $955 = (($$01$i126$i) + -256)|0;
          $956 = ($955>>>0)>(255);
          if ($956) {
           $$01$i126$i = $955;
          } else {
           break;
          }
         }
         $957 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $957;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $958 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $958;
       $959 = ($$311$i|0)>(-1);
       do {
        if ($959) {
         $960 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $961 = HEAP32[$d$6195$i>>2]|0;
          $962 = ($961|0)==(0);
          if ($962) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $961;
           while(1) {
            $963 = (($y$03$i133$i>>>0) % 10)&-1;
            $964 = $963 | 48;
            $965 = $964&255;
            $966 = ((($$12$i134$i)) + -1|0);
            HEAP8[$966>>0] = $965;
            $967 = (($y$03$i133$i>>>0) / 10)&-1;
            $968 = ($y$03$i133$i>>>0)<(10);
            if ($968) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa474 = $966;
             break;
            } else {
             $$12$i134$i = $966;$y$03$i133$i = $967;
            }
           }
           $969 = ($$lcssa474|0)==($14|0);
           if ($969) {
            label = 303;
           } else {
            $1187 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa474;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1187 = $14;$s9$0$i = $16;
          }
          $970 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($970) {
            (___fwritex($s9$0$i,1,$f)|0);
            $974 = ($$5196$i|0)<(1);
            $or$cond29$i = $960 & $974;
            if ($or$cond29$i) {
             $s9$2$i = $1187;
             break;
            }
            (___fwritex(25872,1,$f)|0);
            $s9$2$i = $1187;
           } else {
            $971 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($971) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $972 = ((($s9$1192$i)) + -1|0);
             HEAP8[$972>>0] = 48;
             $973 = ($972>>>0)>($buf$i>>>0);
             if ($973) {
              $s9$1192$i = $972;
             } else {
              $s9$2$i = $972;
              break;
             }
            }
           }
          } while(0);
          $975 = $s9$2$i;
          $976 = (($15) - ($975))|0;
          $977 = ($$5196$i|0)>($976|0);
          $978 = $977 ? $976 : $$5196$i;
          (___fwritex($s9$2$i,$978,$f)|0);
          $979 = (($$5196$i) - ($976))|0;
          $980 = ((($d$6195$i)) + 4|0);
          $981 = ($980>>>0)<($z$6$$i>>>0);
          $982 = ($979|0)>(-1);
          $983 = $981 & $982;
          if ($983) {
           $$5196$i = $979;$d$6195$i = $980;
          } else {
           $$lcssa476 = $979;
           break;
          }
         }
         $984 = ($$lcssa476|0)>(0);
         if (!($984)) {
          break;
         }
         $985 = ($$lcssa476>>>0)>(256);
         $986 = $985 ? 256 : $$lcssa476;
         _memset(($pad$i|0),48,($986|0))|0;
         $987 = ($$lcssa476>>>0)>(255);
         if ($987) {
          $$01$i141$i = $$lcssa476;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $988 = (($$01$i141$i) + -256)|0;
           $989 = ($988>>>0)>(255);
           if ($989) {
            $$01$i141$i = $988;
           } else {
            break;
           }
          }
          $990 = $$lcssa476 & 255;
          $$0$lcssa$i143$i = $990;
         } else {
          $$0$lcssa$i143$i = $$lcssa476;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $991 = $estr$2$i;
       $992 = (($9) - ($991))|0;
       (___fwritex($estr$2$i,$992,$f)|0);
      }
      $993 = ($894|0)==(8192);
      $or$cond$i$i = $993 & $896;
      if ($or$cond$i$i) {
       $994 = (($w$1) - ($893))|0;
       $995 = ($994>>>0)>(256);
       $996 = $995 ? 256 : $994;
       _memset(($pad$i|0),32,($996|0))|0;
       $997 = ($994>>>0)>(255);
       if ($997) {
        $$01$i$i = $994;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $998 = (($$01$i$i) + -256)|0;
         $999 = ($998>>>0)>(255);
         if ($999) {
          $$01$i$i = $998;
         } else {
          break;
         }
        }
        $1000 = $994 & 255;
        $$0$lcssa$i$i = $1000;
       } else {
        $$0$lcssa$i$i = $994;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $896 ? $w$1 : $893;
      $$0$i = $w$30$i;
     } else {
      $445 = $t$0 & 32;
      $446 = ($445|0)!=(0);
      $447 = $446 ? 25840 : 25848;
      $448 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $449 = $446 ? 25856 : 25864;
      $pl$1$i = $448 ? 0 : $pl$0$i;
      $s1$0$i = $448 ? $449 : $447;
      $450 = (($pl$1$i) + 3)|0;
      $451 = $fl$1$ & 8192;
      $452 = ($451|0)==(0);
      $453 = ($w$1|0)>($450|0);
      $or$cond$i35$i = $452 & $453;
      if ($or$cond$i35$i) {
       $454 = (($w$1) - ($450))|0;
       $455 = ($454>>>0)>(256);
       $456 = $455 ? 256 : $454;
       _memset(($pad$i|0),32,($456|0))|0;
       $457 = ($454>>>0)>(255);
       if ($457) {
        $$01$i37$i = $454;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $458 = (($$01$i37$i) + -256)|0;
         $459 = ($458>>>0)>(255);
         if ($459) {
          $$01$i37$i = $458;
         } else {
          break;
         }
        }
        $460 = $454 & 255;
        $$0$lcssa$i39$i = $460;
       } else {
        $$0$lcssa$i39$i = $454;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $461 = $fl$1$ & 73728;
      $462 = ($461|0)==(8192);
      $or$cond$i42$i = $462 & $453;
      if ($or$cond$i42$i) {
       $463 = (($w$1) - ($450))|0;
       $464 = ($463>>>0)>(256);
       $465 = $464 ? 256 : $463;
       _memset(($pad$i|0),32,($465|0))|0;
       $466 = ($463>>>0)>(255);
       if ($466) {
        $$01$i44$i = $463;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $467 = (($$01$i44$i) + -256)|0;
         $468 = ($467>>>0)>(255);
         if ($468) {
          $$01$i44$i = $467;
         } else {
          break;
         }
        }
        $469 = $463 & 255;
        $$0$lcssa$i46$i = $469;
       } else {
        $$0$lcssa$i46$i = $463;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $470 = $453 ? $w$1 : $450;
      $$0$i = $470;
     }
    } while(0);
    $1169 = $291;$1170 = $264;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1175 = $291;$1176 = $264;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 25792;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $289 = $t$1 & 32;
   $290 = ($264|0)==(0);
   $292 = ($291|0)==(0);
   $293 = $290 & $292;
   if ($293) {
    $366 = $264;$368 = $291;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 25792;
    label = 89;
   } else {
    $$012$i = $2;$295 = $264;$302 = $291;
    while(1) {
     $294 = $295 & 15;
     $296 = (25776 + ($294)|0);
     $297 = HEAP8[$296>>0]|0;
     $298 = $297&255;
     $299 = $298 | $289;
     $300 = $299&255;
     $301 = ((($$012$i)) + -1|0);
     HEAP8[$301>>0] = $300;
     $303 = (_bitshift64Lshr(($295|0),($302|0),4)|0);
     $304 = tempRet0;
     $305 = ($303|0)==(0);
     $306 = ($304|0)==(0);
     $307 = $305 & $306;
     if ($307) {
      $$lcssa491 = $301;
      break;
     } else {
      $$012$i = $301;$295 = $303;$302 = $304;
     }
    }
    $308 = $fl$3 & 8;
    $309 = ($308|0)==(0);
    if ($309) {
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 25792;
     label = 89;
    } else {
     $310 = $t$1 >> 4;
     $311 = (25792 + ($310)|0);
     $366 = $264;$368 = $291;$a$0 = $$lcssa491;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $311;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $337 = ($336>>>0)>(0);
   $339 = ($338>>>0)>(4294967295);
   $340 = ($336|0)==(0);
   $341 = $340 & $339;
   $342 = $337 | $341;
   if ($342) {
    $$05$i = $2;$343 = $338;$344 = $336;
    while(1) {
     $345 = (___uremdi3(($343|0),($344|0),10,0)|0);
     $346 = tempRet0;
     $347 = $345 | 48;
     $348 = $347&255;
     $349 = ((($$05$i)) + -1|0);
     HEAP8[$349>>0] = $348;
     $350 = (___udivdi3(($343|0),($344|0),10,0)|0);
     $351 = tempRet0;
     $352 = ($344>>>0)>(9);
     $353 = ($343>>>0)>(4294967295);
     $354 = ($344|0)==(9);
     $355 = $354 & $353;
     $356 = $352 | $355;
     if ($356) {
      $$05$i = $349;$343 = $350;$344 = $351;
     } else {
      $$lcssa487 = $349;$1177 = $350;$1178 = $351;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa487;$$01$lcssa$off0$i = $1177;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $338;
   }
   $357 = ($$01$lcssa$off0$i|0)==(0);
   if ($357) {
    $366 = $338;$368 = $336;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $358 = (($y$03$i>>>0) % 10)&-1;
     $359 = $358 | 48;
     $360 = $359&255;
     $361 = ((($$12$i)) + -1|0);
     HEAP8[$361>>0] = $360;
     $362 = (($y$03$i>>>0) / 10)&-1;
     $363 = ($y$03$i>>>0)<(10);
     if ($363) {
      $366 = $338;$368 = $336;$a$0 = $361;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $361;$y$03$i = $362;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $385 = (_memchr($a$1,0,$p$0)|0);
   $386 = ($385|0)==(0|0);
   $387 = $385;
   $388 = $a$1;
   $389 = (($387) - ($388))|0;
   $390 = (($a$1) + ($p$0)|0);
   $z$1 = $386 ? $390 : $385;
   $p$3 = $386 ? $p$0 : $389;
   $1175 = $291;$1176 = $264;$a$2 = $a$1;$fl$6 = $263;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 25792;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1179;
   while(1) {
    $393 = HEAP32[$ws$0176>>2]|0;
    $394 = ($393|0)==(0);
    if ($394) {
     $i$0$lcssa = $i$0175;$l$2 = $l$1174;
     break;
    }
    $395 = (_wctomb($mb,$393)|0);
    $396 = ($395|0)<(0);
    $397 = (($p$4272) - ($i$0175))|0;
    $398 = ($395>>>0)>($397>>>0);
    $or$cond22 = $396 | $398;
    if ($or$cond22) {
     $i$0$lcssa = $i$0175;$l$2 = $395;
     break;
    }
    $399 = ((($ws$0176)) + 4|0);
    $400 = (($395) + ($i$0175))|0;
    $401 = ($p$4272>>>0)>($400>>>0);
    if ($401) {
     $i$0175 = $400;$l$1174 = $395;$ws$0176 = $399;
    } else {
     $i$0$lcssa = $400;$l$2 = $395;
     break;
    }
   }
   $402 = ($l$2|0)<(0);
   if ($402) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1181 = $1180;$1182 = $1179;$i$0$lcssa273 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $364 = ($p$2|0)>(-1);
   $365 = $fl$4 & -65537;
   $$fl$4 = $364 ? $365 : $fl$4;
   $367 = ($366|0)!=(0);
   $369 = ($368|0)!=(0);
   $370 = $367 | $369;
   $371 = ($p$2|0)!=(0);
   $or$cond = $370 | $371;
   if ($or$cond) {
    $372 = $a$0;
    $373 = (($3) - ($372))|0;
    $374 = $370&1;
    $375 = $374 ^ 1;
    $376 = (($375) + ($373))|0;
    $377 = ($p$2|0)>($376|0);
    $p$2$ = $377 ? $p$2 : $376;
    $1175 = $368;$1176 = $366;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1175 = $368;$1176 = $366;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $404 = ($403|0)==(0);
   $405 = ($w$1|0)>($i$0$lcssa273|0);
   $or$cond$i64 = $404 & $405;
   if ($or$cond$i64) {
    $406 = (($w$1) - ($i$0$lcssa273))|0;
    $407 = ($406>>>0)>(256);
    $408 = $407 ? 256 : $406;
    _memset(($pad$i|0),32,($408|0))|0;
    $409 = ($406>>>0)>(255);
    if ($409) {
     $$01$i66 = $406;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $410 = (($$01$i66) + -256)|0;
      $411 = ($410>>>0)>(255);
      if ($411) {
       $$01$i66 = $410;
      } else {
       break;
      }
     }
     $412 = $406 & 255;
     $$0$lcssa$i68 = $412;
    } else {
     $$0$lcssa$i68 = $406;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $413 = ($i$0$lcssa273|0)==(0);
   L463: do {
    if (!($413)) {
     $i$1186 = 0;$ws$1187 = $1182;
     while(1) {
      $414 = HEAP32[$ws$1187>>2]|0;
      $415 = ($414|0)==(0);
      if ($415) {
       break L463;
      }
      $416 = (_wctomb($mb,$414)|0);
      $417 = (($416) + ($i$1186))|0;
      $418 = ($417|0)>($i$0$lcssa273|0);
      if ($418) {
       break L463;
      }
      $419 = ((($ws$1187)) + 4|0);
      (___fwritex($mb,$416,$f)|0);
      $420 = ($417>>>0)<($i$0$lcssa273>>>0);
      if ($420) {
       $i$1186 = $417;$ws$1187 = $419;
      } else {
       break;
      }
     }
    }
   } while(0);
   $421 = ($403|0)==(8192);
   $or$cond$i71 = $421 & $405;
   if ($or$cond$i71) {
    $422 = (($w$1) - ($i$0$lcssa273))|0;
    $423 = ($422>>>0)>(256);
    $424 = $423 ? 256 : $422;
    _memset(($pad$i|0),32,($424|0))|0;
    $425 = ($422>>>0)>(255);
    if ($425) {
     $$01$i73 = $422;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $426 = (($$01$i73) + -256)|0;
      $427 = ($426>>>0)>(255);
      if ($427) {
       $$01$i73 = $426;
      } else {
       break;
      }
     }
     $428 = $422 & 255;
     $$0$lcssa$i75 = $428;
    } else {
     $$0$lcssa$i75 = $422;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $429 = $405 ? $w$1 : $i$0$lcssa273;
   $1169 = $291;$1170 = $1181;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $429;$l10n$0 = $l10n$3;
   continue;
  }
  $1001 = $z$2;
  $1002 = $a$2;
  $1003 = (($1001) - ($1002))|0;
  $1004 = ($p$5|0)<($1003|0);
  $$p$5 = $1004 ? $1003 : $p$5;
  $1005 = (($pl$2) + ($$p$5))|0;
  $1006 = ($w$1|0)<($1005|0);
  $w$2 = $1006 ? $1005 : $w$1;
  $1007 = $fl$6 & 73728;
  $1008 = ($1007|0)==(0);
  $1009 = ($w$2|0)>($1005|0);
  $or$cond$i81 = $1008 & $1009;
  if ($or$cond$i81) {
   $1010 = (($w$2) - ($1005))|0;
   $1011 = ($1010>>>0)>(256);
   $1012 = $1011 ? 256 : $1010;
   _memset(($pad$i|0),32,($1012|0))|0;
   $1013 = ($1010>>>0)>(255);
   if ($1013) {
    $$01$i83 = $1010;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1014 = (($$01$i83) + -256)|0;
     $1015 = ($1014>>>0)>(255);
     if ($1015) {
      $$01$i83 = $1014;
     } else {
      break;
     }
    }
    $1016 = $1010 & 255;
    $$0$lcssa$i85 = $1016;
   } else {
    $$0$lcssa$i85 = $1010;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1017 = ($1007|0)==(65536);
  $or$cond$i57 = $1017 & $1009;
  if ($or$cond$i57) {
   $1018 = (($w$2) - ($1005))|0;
   $1019 = ($1018>>>0)>(256);
   $1020 = $1019 ? 256 : $1018;
   _memset(($pad$i|0),48,($1020|0))|0;
   $1021 = ($1018>>>0)>(255);
   if ($1021) {
    $$01$i59 = $1018;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1022 = (($$01$i59) + -256)|0;
     $1023 = ($1022>>>0)>(255);
     if ($1023) {
      $$01$i59 = $1022;
     } else {
      break;
     }
    }
    $1024 = $1018 & 255;
    $$0$lcssa$i61 = $1024;
   } else {
    $$0$lcssa$i61 = $1018;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1025 = ($$p$5|0)>($1003|0);
  if ($1025) {
   $1026 = (($$p$5) - ($1003))|0;
   $1027 = ($1026>>>0)>(256);
   $1028 = $1027 ? 256 : $1026;
   _memset(($pad$i|0),48,($1028|0))|0;
   $1029 = ($1026>>>0)>(255);
   if ($1029) {
    $$01$i44 = $1026;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1030 = (($$01$i44) + -256)|0;
     $1031 = ($1030>>>0)>(255);
     if ($1031) {
      $$01$i44 = $1030;
     } else {
      break;
     }
    }
    $1032 = $1026 & 255;
    $$0$lcssa$i46 = $1032;
   } else {
    $$0$lcssa$i46 = $1026;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$1003,$f)|0);
  $1033 = ($1007|0)==(8192);
  $or$cond$i = $1033 & $1009;
  if ($or$cond$i) {
   $1034 = (($w$2) - ($1005))|0;
   $1035 = ($1034>>>0)>(256);
   $1036 = $1035 ? 256 : $1034;
   _memset(($pad$i|0),32,($1036|0))|0;
   $1037 = ($1034>>>0)>(255);
   if ($1037) {
    $$01$i = $1034;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1038 = (($$01$i) + -256)|0;
     $1039 = ($1038>>>0)>(255);
     if ($1039) {
      $$01$i = $1038;
     } else {
      break;
     }
    }
    $1040 = $1034 & 255;
    $$0$lcssa$i = $1040;
   } else {
    $$0$lcssa$i = $1034;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1169 = $1175;$1170 = $1176;$23 = $$lcssa457;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1041 = ($f|0)==(0|0);
  if (!($1041)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1042 = ($l10n$0$lcssa|0)==(0);
  if ($1042) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2162 = 1;
  }
  while(1) {
   $1043 = (($nl_type) + ($i$2162<<2)|0);
   $1044 = HEAP32[$1043>>2]|0;
   $1045 = ($1044|0)==(0);
   if ($1045) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $1047 = (($nl_arg) + ($i$2162<<3)|0);
   $1048 = ($1044>>>0)>(20);
   L522: do {
    if (!($1048)) {
     do {
      switch ($1044|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1049 = $arglist_current35;
       $1050 = ((0) + 4|0);
       $expanded148 = $1050;
       $expanded147 = (($expanded148) - 1)|0;
       $1051 = (($1049) + ($expanded147))|0;
       $1052 = ((0) + 4|0);
       $expanded152 = $1052;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1053 = $1051 & $expanded150;
       $1054 = $1053;
       $1055 = HEAP32[$1054>>2]|0;
       $arglist_next36 = ((($1054)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1047>>2] = $1055;
       break L522;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1056 = $arglist_current38;
       $1057 = ((0) + 4|0);
       $expanded155 = $1057;
       $expanded154 = (($expanded155) - 1)|0;
       $1058 = (($1056) + ($expanded154))|0;
       $1059 = ((0) + 4|0);
       $expanded159 = $1059;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1060 = $1058 & $expanded157;
       $1061 = $1060;
       $1062 = HEAP32[$1061>>2]|0;
       $arglist_next39 = ((($1061)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1063 = ($1062|0)<(0);
       $1064 = $1063 << 31 >> 31;
       $1065 = $1047;
       $1066 = $1065;
       HEAP32[$1066>>2] = $1062;
       $1067 = (($1065) + 4)|0;
       $1068 = $1067;
       HEAP32[$1068>>2] = $1064;
       break L522;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1069 = $arglist_current41;
       $1070 = ((0) + 4|0);
       $expanded162 = $1070;
       $expanded161 = (($expanded162) - 1)|0;
       $1071 = (($1069) + ($expanded161))|0;
       $1072 = ((0) + 4|0);
       $expanded166 = $1072;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1073 = $1071 & $expanded164;
       $1074 = $1073;
       $1075 = HEAP32[$1074>>2]|0;
       $arglist_next42 = ((($1074)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1076 = $1047;
       $1077 = $1076;
       HEAP32[$1077>>2] = $1075;
       $1078 = (($1076) + 4)|0;
       $1079 = $1078;
       HEAP32[$1079>>2] = 0;
       break L522;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1080 = $arglist_current44;
       $1081 = ((0) + 8|0);
       $expanded169 = $1081;
       $expanded168 = (($expanded169) - 1)|0;
       $1082 = (($1080) + ($expanded168))|0;
       $1083 = ((0) + 8|0);
       $expanded173 = $1083;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1084 = $1082 & $expanded171;
       $1085 = $1084;
       $1086 = $1085;
       $1087 = $1086;
       $1088 = HEAP32[$1087>>2]|0;
       $1089 = (($1086) + 4)|0;
       $1090 = $1089;
       $1091 = HEAP32[$1090>>2]|0;
       $arglist_next45 = ((($1085)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1092 = $1047;
       $1093 = $1092;
       HEAP32[$1093>>2] = $1088;
       $1094 = (($1092) + 4)|0;
       $1095 = $1094;
       HEAP32[$1095>>2] = $1091;
       break L522;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1096 = $arglist_current47;
       $1097 = ((0) + 4|0);
       $expanded176 = $1097;
       $expanded175 = (($expanded176) - 1)|0;
       $1098 = (($1096) + ($expanded175))|0;
       $1099 = ((0) + 4|0);
       $expanded180 = $1099;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1100 = $1098 & $expanded178;
       $1101 = $1100;
       $1102 = HEAP32[$1101>>2]|0;
       $arglist_next48 = ((($1101)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1103 = $1102&65535;
       $1104 = $1103 << 16 >> 16;
       $1105 = ($1104|0)<(0);
       $1106 = $1105 << 31 >> 31;
       $1107 = $1047;
       $1108 = $1107;
       HEAP32[$1108>>2] = $1104;
       $1109 = (($1107) + 4)|0;
       $1110 = $1109;
       HEAP32[$1110>>2] = $1106;
       break L522;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1111 = $arglist_current50;
       $1112 = ((0) + 4|0);
       $expanded183 = $1112;
       $expanded182 = (($expanded183) - 1)|0;
       $1113 = (($1111) + ($expanded182))|0;
       $1114 = ((0) + 4|0);
       $expanded187 = $1114;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1115 = $1113 & $expanded185;
       $1116 = $1115;
       $1117 = HEAP32[$1116>>2]|0;
       $arglist_next51 = ((($1116)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1117 & 65535;
       $1118 = $1047;
       $1119 = $1118;
       HEAP32[$1119>>2] = $$mask1$i;
       $1120 = (($1118) + 4)|0;
       $1121 = $1120;
       HEAP32[$1121>>2] = 0;
       break L522;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1122 = $arglist_current53;
       $1123 = ((0) + 4|0);
       $expanded190 = $1123;
       $expanded189 = (($expanded190) - 1)|0;
       $1124 = (($1122) + ($expanded189))|0;
       $1125 = ((0) + 4|0);
       $expanded194 = $1125;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1126 = $1124 & $expanded192;
       $1127 = $1126;
       $1128 = HEAP32[$1127>>2]|0;
       $arglist_next54 = ((($1127)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1129 = $1128&255;
       $1130 = $1129 << 24 >> 24;
       $1131 = ($1130|0)<(0);
       $1132 = $1131 << 31 >> 31;
       $1133 = $1047;
       $1134 = $1133;
       HEAP32[$1134>>2] = $1130;
       $1135 = (($1133) + 4)|0;
       $1136 = $1135;
       HEAP32[$1136>>2] = $1132;
       break L522;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1137 = $arglist_current56;
       $1138 = ((0) + 4|0);
       $expanded197 = $1138;
       $expanded196 = (($expanded197) - 1)|0;
       $1139 = (($1137) + ($expanded196))|0;
       $1140 = ((0) + 4|0);
       $expanded201 = $1140;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1141 = $1139 & $expanded199;
       $1142 = $1141;
       $1143 = HEAP32[$1142>>2]|0;
       $arglist_next57 = ((($1142)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1143 & 255;
       $1144 = $1047;
       $1145 = $1144;
       HEAP32[$1145>>2] = $$mask$i;
       $1146 = (($1144) + 4)|0;
       $1147 = $1146;
       HEAP32[$1147>>2] = 0;
       break L522;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1148 = $arglist_current59;
       $1149 = ((0) + 8|0);
       $expanded204 = $1149;
       $expanded203 = (($expanded204) - 1)|0;
       $1150 = (($1148) + ($expanded203))|0;
       $1151 = ((0) + 8|0);
       $expanded208 = $1151;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1152 = $1150 & $expanded206;
       $1153 = $1152;
       $1154 = +HEAPF64[$1153>>3];
       $arglist_next60 = ((($1153)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1047>>3] = $1154;
       break L522;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1155 = $arglist_current62;
       $1156 = ((0) + 8|0);
       $expanded211 = $1156;
       $expanded210 = (($expanded211) - 1)|0;
       $1157 = (($1155) + ($expanded210))|0;
       $1158 = ((0) + 8|0);
       $expanded215 = $1158;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1159 = $1157 & $expanded213;
       $1160 = $1159;
       $1161 = +HEAPF64[$1160>>3];
       $arglist_next63 = ((($1160)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1047>>3] = $1161;
       break L522;
       break;
      }
      default: {
       break L522;
      }
      }
     } while(0);
    }
   } while(0);
   $1162 = (($i$2162) + 1)|0;
   $1163 = ($1162|0)<(10);
   if ($1163) {
    $i$2162 = $1162;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1046 = ($i$2162$lcssa|0)<(10);
  if ($1046) {
   $i$3160 = $i$2162$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1166 = (($nl_type) + ($i$3160<<2)|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = ($1167|0)==(0);
   $1164 = (($i$3160) + 1)|0;
   if (!($1168)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1165 = ($1164|0)<(10);
   if ($1165) {
    $i$3160 = $1164;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[25880>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (25920 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (25920 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[25880>>2] = $22;
     } else {
      $23 = HEAP32[(25896)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(25888)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (25920 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (25920 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[25880>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(25896)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(25888)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(25900)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (25920 + ($92<<2)|0);
      $94 = HEAP32[25880>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[25880>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (25920 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (25920 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(25896)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(25888)>>2] = $81;
     HEAP32[(25900)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(25884)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (26184 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(25896)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (26184 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(25884)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(25884)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(25896)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(25896)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(25896)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(25888)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(25900)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (25920 + ($229<<2)|0);
       $231 = HEAP32[25880>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[25880>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (25920 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (25920 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(25896)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(25888)>>2] = $rsize$0$i$lcssa;
      HEAP32[(25900)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(25884)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (26184 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (26184 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(25888)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(25896)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (26184 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(25884)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(25884)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(25896)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(25896)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(25896)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (25920 + ($424<<2)|0);
          $426 = HEAP32[25880>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[25880>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (25920 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (25920 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(25896)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (26184 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(25884)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(25884)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L216: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L216;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(25896)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(25896)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(25888)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(25900)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(25900)>>2] = $514;
   HEAP32[(25888)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(25888)>>2] = 0;
   HEAP32[(25900)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(25892)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(25892)>>2] = $528;
  $529 = HEAP32[(25904)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(25904)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[26352>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(26360)>>2] = $538;
    HEAP32[(26356)>>2] = $538;
    HEAP32[(26364)>>2] = -1;
    HEAP32[(26368)>>2] = -1;
    HEAP32[(26372)>>2] = 0;
    HEAP32[(26324)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[26352>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(26360)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(26320)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(26312)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(26324)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(25904)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (26328);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(25892)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(26356)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(26312)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(26320)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(26360)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(26324)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(26324)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(26312)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(26312)>>2] = $632;
  $633 = HEAP32[(26316)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(26316)>>2] = $632;
  }
  $635 = HEAP32[(25904)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(25896)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(25896)>>2] = $tbase$255$i;
    }
    HEAP32[(26328)>>2] = $tbase$255$i;
    HEAP32[(26332)>>2] = $tsize$254$i;
    HEAP32[(26340)>>2] = 0;
    $640 = HEAP32[26352>>2]|0;
    HEAP32[(25916)>>2] = $640;
    HEAP32[(25912)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (25920 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (25920 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (25920 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(25904)>>2] = $654;
    HEAP32[(25892)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(26368)>>2]|0;
    HEAP32[(25908)>>2] = $659;
   } else {
    $sp$084$i = (26328);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(25892)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(25904)>>2] = $684;
       HEAP32[(25892)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(26368)>>2]|0;
       HEAP32[(25908)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(25896)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(25896)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (26328);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (26328);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L317: do {
       if ($728) {
        $729 = HEAP32[(25892)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(25892)>>2] = $730;
        HEAP32[(25904)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(25900)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(25888)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(25888)>>2] = $736;
         HEAP32[(25900)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L325: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (25920 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[25880>>2]|0;
            $763 = $762 & $761;
            HEAP32[25880>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (26184 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(25884)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(25884)>>2] = $806;
             break L325;
            } else {
             $807 = HEAP32[(25896)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L325;
             }
            }
           } while(0);
           $814 = HEAP32[(25896)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(25896)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (25920 + ($840<<2)|0);
         $842 = HEAP32[25880>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[25880>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (25920 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (25920 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(25896)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (26184 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(25884)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(25884)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L411: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L411;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(25896)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L317;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(25896)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (26328);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(25904)>>2] = $953;
    HEAP32[(25892)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(26368)>>2]|0;
    HEAP32[(25908)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(26328)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(26328)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(26328)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(26328)+12>>2]|0;
    HEAP32[(26328)>>2] = $tbase$255$i;
    HEAP32[(26332)>>2] = $tsize$254$i;
    HEAP32[(26340)>>2] = 0;
    HEAP32[(26336)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (25920 + ($977<<2)|0);
      $979 = HEAP32[25880>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[25880>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (25920 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (25920 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(25896)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (26184 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(25884)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(25884)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L452: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L452;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(25896)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(25896)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(25892)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(25892)>>2] = $1062;
   $1063 = HEAP32[(25904)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(25904)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(25896)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(25900)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(25888)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (25920 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[25880>>2]|0;
     $36 = $35 & $34;
     HEAP32[25880>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (26184 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(25884)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(25884)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(25896)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(25896)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(25896)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(25904)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(25892)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(25892)>>2] = $120;
   HEAP32[(25904)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(25900)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(25900)>>2] = 0;
   HEAP32[(25888)>>2] = 0;
   return;
  }
  $125 = HEAP32[(25900)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(25888)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(25888)>>2] = $128;
   HEAP32[(25900)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (25920 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(25896)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[25880>>2]|0;
     $152 = $151 & $150;
     HEAP32[25880>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(25896)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(25896)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(25896)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (26184 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(25884)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(25884)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(25896)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(25896)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(25896)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(25900)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(25888)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (25920 + ($233<<2)|0);
  $235 = HEAP32[25880>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[25880>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (25920 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (25920 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(25896)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (26184 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(25884)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(25884)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(25896)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(25896)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(25912)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(25912)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (26336);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(25912)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(25896)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(26360)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(25904)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(25892)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(25904)>>2] = $36;
  HEAP32[(25892)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(25900)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(25888)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(25888)>>2] = $storemerge21;
  HEAP32[(25900)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (25920 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[25880>>2]|0;
    $88 = $87 & $86;
    HEAP32[25880>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (26184 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(25884)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(25884)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(25896)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(25896)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(25896)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(25896)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(25900)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(25888)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (25920 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[25880>>2]|0;
     $32 = $31 & $30;
     HEAP32[25880>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (26184 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(25884)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(25884)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(25896)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(25896)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(25896)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(25896)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(25904)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(25892)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(25892)>>2] = $115;
   HEAP32[(25904)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(25900)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(25900)>>2] = 0;
   HEAP32[(25888)>>2] = 0;
   return;
  }
  $120 = HEAP32[(25900)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(25888)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(25888)>>2] = $123;
   HEAP32[(25900)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (25920 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[25880>>2]|0;
     $146 = $145 & $144;
     HEAP32[25880>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (26184 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(25884)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(25884)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(25896)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(25896)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(25896)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(25900)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(25888)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (25920 + ($224<<2)|0);
  $226 = HEAP32[25880>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[25880>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (25920 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (25920 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(25896)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (26184 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(25884)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(25884)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(25896)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(25896)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&255](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(1); }
function b2(p0) { p0 = p0|0; nullFunc_ii(2);return 0; }
function b3(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3); }
function b4(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0; }
function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5); }
function b6(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0; }
function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_abk_test,_abk_load,_xm_test,_xm_load,_mod_test,_mod_load,_s3m_test,_s3m_load,_stm_test,_stm_load,_ssn_test,_ssn_load,_far_test,_far_load,_mtm_test,_mtm_load,_ptm_test,_ptm_load,_okt_test,_okt_load,_amd_test,_amd_load,_rad_test,_rad_load,_ult_test,_ult_load,_mdl_test,_mdl_load
,_it_test,_it_load,_stx_test,_stx_load,_pt3_test,_pt3_load,_sfx_test,_sfx_load,_flt_test,_flt_load,_st_test,_st_load,_emod_test,_emod_load,_imf_test,_imf_load,_digi_test,_digi_load,_fnk_test,_fnk_load,_ice_test,_ice_load,_hsc_test,_hsc_load,_liq_test,_liq_load,_ims_test,_ims_load,_masi_test,_masi_load
,_amf_test,_amf_load,_psm_test,_psm_load,_stim_test,_stim_load,_mmd1_test,_mmd1_load,_mmd3_test,_mmd3_load,_rtm_test,_rtm_load,_dt_test,_dt_load,_no_test,_no_load,_arch_test,_arch_load,_sym_test,_sym_load,_med2_test,_med2_load,_med3_test,_med3_load,_med4_test,_med4_load,_dbm_test,_dbm_load,_umx_test,_umx_load
,_gdm_test,_gdm_load,_pw_test,_pw_load,_gal5_test,_gal5_load,_gal4_test,_gal4_load,_mfp_test,_mfp_load,_asylum_test,_asylum_load,_hmn_test,_hmn_load,_mgt_test,_mgt_load,_chip_test,_chip_load,_test_ac1d,b0,_test_di,b0,_test_eu,b0,_test_fcm,b0,_test_fuchs,b0,_test_fuzz,b0
,_test_GMC,b0,_test_crb,b0,_test_ksm,b0,_test_mp_id,b0,_test_mp_noid,_test_np1,b0,_test_np2,b0,_test_np3,b0,_test_p61a,b0,_test_p10c,b0,_test_p18a,b0,_test_pha,b0,_test_pru1,b0,_test_pru2,b0,_test_tdd,b0,_test_unic_id
,b0,_test_unic_noid,_test_unic_emptyid,_test_unic2,b0,_test_wn,b0,_test_zen,b0,_test_tp3,b0,_test_p4x,b0,_test_xann,b0,_test_p50a,b0,_test_p60a,b0,_test_pp21,b0,_test_pp30,b0,_test_starpack,b0,_test_titanics,b0,_test_skyt,b0,_test_ntp
,b0,_test_hrt,b0,_test_nru,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,_rawoutput,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_ii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_synth_deinit,_synth_reset,b2,_synth_deinit646
,_synth_reset647,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,_synth_setpatch,b3,_synth_setvol,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,_get_cmod,_get_samp,_get_spee,_get_slen,_get_plen,_get_patt,_get_pbod,_get_sbod,_get_chunk_in,_get_chunk_tr,_get_chunk_sa,_get_chunk_ve,_get_chunk_pe,_get_chunk_fe,_get_chunk_ii,_get_chunk_pa,_get_chunk_is,_get_chunk_p0,_get_chunk_i0,_get_info,_get_cmnt,_get_ptdt,_get_emic
,_get_patt221,_get_8smp,_get_titl,_get_sdft,_get_song,_get_dsmp_cnt,_get_pbod_cnt,_get_song_2,_get_dsmp,_get_pbod252,_get_d_t_,_get_s_q_,_get_patt280,_get_inst,_get_dapt,_get_dait,_get_tinf,_get_mvox,_get_ster,_get_mnam,_get_anam,_get_mlen,_get_pnum,_get_plen297,_get_sequ,_get_patt300,_get_samp302,_get_info316,_get_song318,_get_inst320
,_get_patt322,_get_smpl,_get_venv,_get_init,_get_ordr,_get_patt_cnt,_get_inst_cnt,_get_patt341,_get_inst342,_get_main,_get_ordr348,_get_patt_cnt350,_get_inst_cnt352,_get_patt353,_get_inst354,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_viiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,_smix_mono_8bit_nearest,_smix_mono_16bit_nearest,_smix_stereo_8bit_nearest,_smix_stereo_16bit_nearest,_smix_mono_8bit_linear,_smix_mono_16bit_linear,_smix_stereo_8bit_linear,_smix_stereo_16bit_linear,_smix_mono_8bit_linear_filter,_smix_mono_16bit_linear_filter,_smix_stereo_8bit_linear_filter,_smix_stereo_16bit_linear_filter,_smix_mono_8bit_spline,_smix_mono_16bit_spline,_smix_stereo_8bit_spline,_smix_stereo_16bit_spline,_smix_mono_8bit_spline_filter,_smix_mono_16bit_spline_filter,_smix_stereo_8bit_spline_filter,_smix_stereo_16bit_spline_filter,b5,b5,b5,b5,b5
,b5,b5,b5,b5,_synth_mixer,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_depack_ac1d,b6,_depack_di,b6,_depack_eu,b6,_depack_fcm,b6,_depack_fuchs,b6,_depack_fuzz
,b6,_depack_GMC,b6,_depack_crb,b6,_depack_ksm,b6,_depack_mp,b6,b6,_depack_np1,b6,_depack_np2,b6,_depack_np3,b6,_depack_p61a,b6,_depack_p10c,b6,_depack_p18a,b6,_depack_pha,b6,_depack_pru1,b6,_depack_pru2,b6,_depack_tdd,b6
,_depack_unic,b6,b6,b6,_depack_unic2,b6,_depack_wn,b6,_depack_zen,b6,_depack_tp3,b6,_depack_p4x,b6,_depack_xann,b6,_depack_p50a,b6,_depack_p60a,b6,_depack_pp21,b6,_depack_pp30,b6,_depack_starpack,b6,_depack_titanics,b6,_depack_skyt,b6
,_depack_ntp,b6,_depack_hrt,b6,_depack_nru,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_synth_init,b6,b6,_synth_init645,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_cmplong,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_viiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,_synth_setnote,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];

  return { _strlen: _strlen, _getMusicInfo: _getMusicInfo, _playXmpFrame: _playXmpFrame, _initXmp: _initXmp, _getXmpLoopCount: _getXmpLoopCount, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _getXmpFrameInfo: _getXmpFrameInfo, _strncpy: _strncpy, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, _i64Add: _i64Add, _memcpy: _memcpy, _endXmp: _endXmp, _i64Subtract: _i64Subtract, _getXmpModuleInfo: _getXmpModuleInfo, _startXmpPlayer: _startXmpPlayer, _getXmpSoundBuffer: _getXmpSoundBuffer, _free: _free, _loadXmpModule: _loadXmpModule, _getXmpSoundBufferLen: _getXmpSoundBufferLen, _malloc: _malloc, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__getMusicInfo = asm["_getMusicInfo"]; asm["_getMusicInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getMusicInfo.apply(null, arguments);
};

var real__playXmpFrame = asm["_playXmpFrame"]; asm["_playXmpFrame"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__playXmpFrame.apply(null, arguments);
};

var real__initXmp = asm["_initXmp"]; asm["_initXmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__initXmp.apply(null, arguments);
};

var real__getXmpLoopCount = asm["_getXmpLoopCount"]; asm["_getXmpLoopCount"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpLoopCount.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__getXmpFrameInfo = asm["_getXmpFrameInfo"]; asm["_getXmpFrameInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpFrameInfo.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strncpy.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__endXmp = asm["_endXmp"]; asm["_endXmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__endXmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__getXmpModuleInfo = asm["_getXmpModuleInfo"]; asm["_getXmpModuleInfo"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpModuleInfo.apply(null, arguments);
};

var real__startXmpPlayer = asm["_startXmpPlayer"]; asm["_startXmpPlayer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__startXmpPlayer.apply(null, arguments);
};

var real__getXmpSoundBuffer = asm["_getXmpSoundBuffer"]; asm["_getXmpSoundBuffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpSoundBuffer.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__loadXmpModule = asm["_loadXmpModule"]; asm["_loadXmpModule"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__loadXmpModule.apply(null, arguments);
};

var real__getXmpSoundBufferLen = asm["_getXmpSoundBufferLen"]; asm["_getXmpSoundBufferLen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getXmpSoundBufferLen.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};
var _strlen = Module["_strlen"] = asm["_strlen"];
var _getMusicInfo = Module["_getMusicInfo"] = asm["_getMusicInfo"];
var _playXmpFrame = Module["_playXmpFrame"] = asm["_playXmpFrame"];
var _initXmp = Module["_initXmp"] = asm["_initXmp"];
var _getXmpLoopCount = Module["_getXmpLoopCount"] = asm["_getXmpLoopCount"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _getXmpFrameInfo = Module["_getXmpFrameInfo"] = asm["_getXmpFrameInfo"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _endXmp = Module["_endXmp"] = asm["_endXmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _getXmpModuleInfo = Module["_getXmpModuleInfo"] = asm["_getXmpModuleInfo"];
var _startXmpPlayer = Module["_startXmpPlayer"] = asm["_startXmpPlayer"];
var _getXmpSoundBuffer = Module["_getXmpSoundBuffer"] = asm["_getXmpSoundBuffer"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _loadXmpModule = Module["_loadXmpModule"] = asm["_loadXmpModule"];
var _getXmpSoundBufferLen = Module["_getXmpSoundBufferLen"] = asm["_getXmpSoundBufferLen"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



